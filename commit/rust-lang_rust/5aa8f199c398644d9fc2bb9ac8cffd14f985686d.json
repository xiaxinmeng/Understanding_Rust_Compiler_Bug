{"sha": "5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYThmMTk5YzM5ODY0NGQ5ZmMyYmI5YWM4Y2ZmZDE0Zjk4NTY4NmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T09:30:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-23T09:30:00Z"}, "message": "Auto merge of #70305 - Centril:rollup-zi13fz4, r=Centril\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #69080 (rustc_codegen_llvm: don't generate any type debuginfo for -Cdebuginfo=1.)\n - #69940 (librustc_codegen_llvm: Replace deprecated API usage)\n - #69942 (Increase verbosity when suggesting subtle code changes)\n - #69968 (rustc: keep upvars tupled in {Closure,Generator}Substs.)\n - #70123 (Ensure LLVM is in the link path for rustc tools)\n - #70159 (Update the bundled wasi-libc with libstd)\n - #70233 (resolve: Do not resolve visibilities on proc macro definitions twice)\n - #70286 (Miri error type: remove UbExperimental variant)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b5717a9698a99ed92df9da39c5edd0e0a53ce697", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5717a9698a99ed92df9da39c5edd0e0a53ce697"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "html_url": "https://github.com/rust-lang/rust/commit/5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff785011be6625e32afceee3a08e5cff7470feb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff785011be6625e32afceee3a08e5cff7470feb", "html_url": "https://github.com/rust-lang/rust/commit/8ff785011be6625e32afceee3a08e5cff7470feb"}, {"sha": "07e1043222a62443962b6691ff0131e57d73ce2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/07e1043222a62443962b6691ff0131e57d73ce2d", "html_url": "https://github.com/rust-lang/rust/commit/07e1043222a62443962b6691ff0131e57d73ce2d"}], "stats": {"total": 2437, "additions": 1334, "deletions": 1103}, "files": [{"sha": "dd519506d42a0f0973b7815c6ce339e998927ef3", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 28, "deletions": 3, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,7 +11,7 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::{Duration, Instant};\n \n-use build_helper::t;\n+use build_helper::{output, t};\n \n use crate::cache::{Cache, Interned, INTERNER};\n use crate::check;\n@@ -23,7 +23,7 @@ use crate::install;\n use crate::native;\n use crate::test;\n use crate::tool;\n-use crate::util::{self, add_lib_path, exe, libdir};\n+use crate::util::{self, add_dylib_path, add_link_lib_path, exe, libdir};\n use crate::{Build, DocTests, GitRepo, Mode};\n \n pub use crate::Compiler;\n@@ -660,7 +660,7 @@ impl<'a> Builder<'a> {\n             return;\n         }\n \n-        add_lib_path(vec![self.rustc_libdir(compiler)], &mut cmd.command);\n+        add_dylib_path(vec![self.rustc_libdir(compiler)], &mut cmd.command);\n     }\n \n     /// Gets a path to the compiler specified.\n@@ -698,6 +698,20 @@ impl<'a> Builder<'a> {\n         cmd\n     }\n \n+    /// Return the path to `llvm-config` for the target, if it exists.\n+    ///\n+    /// Note that this returns `None` if LLVM is disabled, or if we're in a\n+    /// check build or dry-run, where there's no need to build all of LLVM.\n+    fn llvm_config(&self, target: Interned<String>) -> Option<PathBuf> {\n+        if self.config.llvm_enabled() && self.kind != Kind::Check && !self.config.dry_run {\n+            let llvm_config = self.ensure(native::Llvm { target });\n+            if llvm_config.is_file() {\n+                return Some(llvm_config);\n+            }\n+        }\n+        None\n+    }\n+\n     /// Prepares an invocation of `cargo` to be run.\n     ///\n     /// This will create a `Command` that represents a pending execution of\n@@ -1034,6 +1048,17 @@ impl<'a> Builder<'a> {\n                 .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_libdir(compiler));\n         }\n \n+        // Tools that use compiler libraries may inherit the `-lLLVM` link\n+        // requirement, but the `-L` library path is not propagated across\n+        // separate Cargo projects. We can add LLVM's library path to the\n+        // platform-specific environment variable as a workaround.\n+        if mode == Mode::ToolRustc {\n+            if let Some(llvm_config) = self.llvm_config(target) {\n+                let llvm_libdir = output(Command::new(&llvm_config).arg(\"--libdir\"));\n+                add_link_lib_path(vec![llvm_libdir.trim().into()], &mut cargo);\n+            }\n+        }\n+\n         if self.config.incremental {\n             cargo.env(\"CARGO_INCREMENTAL\", \"1\");\n         } else {"}, {"sha": "ad494b88b3af217d3369cda061da0aad182647ef", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -451,44 +451,6 @@ impl Step for Rustc {\n             false,\n         );\n \n-        // We used to build librustc_codegen_llvm as a separate step,\n-        // which produced a dylib that the compiler would dlopen() at runtime.\n-        // This meant that we only needed to make sure that libLLVM.so was\n-        // installed by the time we went to run a tool using it - since\n-        // librustc_codegen_llvm was effectively a standalone artifact,\n-        // other crates were completely oblivious to its dependency\n-        // on `libLLVM.so` during build time.\n-        //\n-        // However, librustc_codegen_llvm is now built as an ordinary\n-        // crate during the same step as the rest of the compiler crates.\n-        // This means that any crates depending on it will see the fact\n-        // that it uses `libLLVM.so` as a native library, and will\n-        // cause us to pass `-llibLLVM.so` to the linker when we link\n-        // a binary.\n-        //\n-        // For `rustc` itself, this works out fine.\n-        // During the `Assemble` step, we call `dist::maybe_install_llvm_dylib`\n-        // to copy libLLVM.so into the `stage` directory. We then link\n-        // the compiler binary, which will find `libLLVM.so` in the correct place.\n-        //\n-        // However, this is insufficient for tools that are build against stage0\n-        // (e.g. stage1 rustdoc). Since `Assemble` for stage0 doesn't actually do anything,\n-        // we won't have `libLLVM.so` in the stage0 sysroot. In the past, this wasn't\n-        // a problem - we would copy the tool binary into its correct stage directory\n-        // (e.g. stage1 for a stage1 rustdoc built against a stage0 compiler).\n-        // Since libLLVM.so wasn't resolved until runtime, it was fine for it to\n-        // not exist while we were building it.\n-        //\n-        // To ensure that we can still build stage1 tools against a stage0 compiler,\n-        // we explicitly copy libLLVM.so into the stage0 sysroot when building\n-        // the stage0 compiler. This ensures that tools built against stage0\n-        // will see libLLVM.so at build time, making the linker happy.\n-        if compiler.stage == 0 {\n-            builder.info(&format!(\"Installing libLLVM.so to stage 0 ({})\", compiler.host));\n-            let sysroot = builder.sysroot(compiler);\n-            dist::maybe_install_llvm_dylib(builder, compiler.host, &sysroot);\n-        }\n-\n         builder.ensure(RustcLink {\n             compiler: builder.compiler(compiler.stage, builder.config.build),\n             target_compiler: compiler,"}, {"sha": "c8ccba467e5095c5ea3976633901bd91a0e2c19e", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,7 +12,7 @@ use crate::channel;\n use crate::channel::GitInfo;\n use crate::compile;\n use crate::toolstate::ToolState;\n-use crate::util::{add_lib_path, exe, CiEnv};\n+use crate::util::{add_dylib_path, exe, CiEnv};\n use crate::Compiler;\n use crate::Mode;\n \n@@ -388,7 +388,7 @@ pub struct ErrorIndex {\n impl ErrorIndex {\n     pub fn command(builder: &Builder<'_>, compiler: Compiler) -> Command {\n         let mut cmd = Command::new(builder.ensure(ErrorIndex { compiler }));\n-        add_lib_path(\n+        add_dylib_path(\n             vec![PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host))],\n             &mut cmd,\n         );\n@@ -689,7 +689,7 @@ impl<'a> Builder<'a> {\n             }\n         }\n \n-        add_lib_path(lib_paths, &mut cmd);\n+        add_dylib_path(lib_paths, &mut cmd);\n         cmd\n     }\n }"}, {"sha": "2bc6f1939d97b5cc53b420e95e20f37710b27fd3", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -40,7 +40,7 @@ pub fn libdir(target: &str) -> &'static str {\n }\n \n /// Adds a list of lookup paths to `cmd`'s dynamic library lookup path.\n-pub fn add_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n+pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     let mut list = dylib_path();\n     for path in path {\n         list.insert(0, path);\n@@ -72,6 +72,31 @@ pub fn dylib_path() -> Vec<PathBuf> {\n     env::split_paths(&var).collect()\n }\n \n+/// Adds a list of lookup paths to `cmd`'s link library lookup path.\n+pub fn add_link_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n+    let mut list = link_lib_path();\n+    for path in path {\n+        list.insert(0, path);\n+    }\n+    cmd.env(link_lib_path_var(), t!(env::join_paths(list)));\n+}\n+\n+/// Returns the environment variable which the link library lookup path\n+/// resides in for this platform.\n+fn link_lib_path_var() -> &'static str {\n+    if cfg!(target_env = \"msvc\") { \"LIB\" } else { \"LIBRARY_PATH\" }\n+}\n+\n+/// Parses the `link_lib_path_var()` environment variable, returning a list of\n+/// paths that are members of this lookup path.\n+fn link_lib_path() -> Vec<PathBuf> {\n+    let var = match env::var_os(link_lib_path_var()) {\n+        Some(v) => v,\n+        None => return vec![],\n+    };\n+    env::split_paths(&var).collect()\n+}\n+\n /// `push` all components to `buf`. On windows, append `.exe` to the last component.\n pub fn push_exe_path(mut buf: PathBuf, components: &[&str]) -> PathBuf {\n     let (&file, components) = components.split_last().expect(\"at least one component required\");"}, {"sha": "c82031690ab6a81b1bcdbaab7311ce515501ba09", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,7 +12,7 @@ export PATH=`pwd`/clang+llvm-9.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n git clone https://github.com/CraneStation/wasi-libc\n \n cd wasi-libc\n-git reset --hard 1fad33890a5e299027ce0eab7b6ad5260585e347\n+git reset --hard 9efc2f428358564fe64c374d762d0bfce1d92507\n make -j$(nproc) INSTALL_DIR=/wasm32-wasi install\n \n cd .."}, {"sha": "f665881ae4c22390b5eb653e352cb0406f67192c", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -319,8 +319,6 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n pub enum UndefinedBehaviorInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Ub(String),\n-    /// Free-form case for experimental UB. Only for errors that are never caught!\n-    UbExperimental(String),\n     /// Unreachable code was executed.\n     Unreachable,\n     /// An enum discriminant was set to a value which was outside the range of valid values.\n@@ -381,7 +379,7 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use UndefinedBehaviorInfo::*;\n         match self {\n-            Ub(msg) | UbExperimental(msg) => write!(f, \"{}\", msg),\n+            Ub(msg) => write!(f, \"{}\", msg),\n             Unreachable => write!(f, \"entering unreachable code\"),\n             InvalidDiscriminant(val) => write!(f, \"encountering invalid enum discriminant {}\", val),\n             BoundsCheckFailed { ref len, ref index } => write!(\n@@ -563,8 +561,7 @@ impl InterpError<'_> {\n             InterpError::MachineStop(_)\n             | InterpError::Unsupported(UnsupportedOpInfo::Unsupported(_))\n             | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::ValidationFailure(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_))\n-            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) => true,\n+            | InterpError::UndefinedBehavior(UndefinedBehaviorInfo::Ub(_)) => true,\n             _ => false,\n         }\n     }"}, {"sha": "67f4b15f9194dc153946a825ea4d4f1bee6a0782", "filename": "src/librustc/traits/query.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -229,8 +229,8 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n         ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n-        ty::Closure(def_id, ref substs) => {\n-            substs.as_closure().upvar_tys(def_id, tcx).all(|t| trivial_dropck_outlives(tcx, t))\n+        ty::Closure(_, ref substs) => {\n+            substs.as_closure().upvar_tys().all(|t| trivial_dropck_outlives(tcx, t))\n         }\n \n         ty::Adt(def, _) => {"}, {"sha": "ac49feaf8c2bfc4612f55a6ecdc2697397353ff7", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: ty::SubstsRef<'tcx>,\n         requested_kind: ty::ClosureKind,\n     ) -> Instance<'tcx> {\n-        let actual_kind = substs.as_closure().kind(def_id, tcx);\n+        let actual_kind = substs.as_closure().kind();\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n             Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n@@ -372,7 +372,7 @@ impl<'tcx> Instance<'tcx> {\n \n         let self_ty = tcx.mk_closure(closure_did, substs);\n \n-        let sig = substs.as_closure().sig(closure_did, tcx);\n+        let sig = substs.as_closure().sig();\n         let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n         assert_eq!(sig.inputs().len(), 1);\n         let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);"}, {"sha": "c54360e03933e36dc5369b1fcbb02f0dcadf7ee2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -628,8 +628,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n             ty::Generator(def_id, substs, _) => self.generator_layout(ty, def_id, substs)?,\n \n-            ty::Closure(def_id, ref substs) => {\n-                let tys = substs.as_closure().upvar_tys(def_id, tcx);\n+            ty::Closure(_, ref substs) => {\n+                let tys = substs.as_closure().upvar_tys();\n                 univariant(\n                     &tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n                     &ReprOptions::default(),\n@@ -1402,7 +1402,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n         // Build a prefix layout, including \"promoting\" all ineligible\n         // locals as part of the prefix. We compute the layout of all of\n         // these fields at once to get optimal packing.\n-        let discr_index = substs.as_generator().prefix_tys(def_id, tcx).count();\n+        let discr_index = substs.as_generator().prefix_tys().count();\n \n         // `info.variant_fields` already accounts for the reserved variants, so no need to add them.\n         let max_discr = (info.variant_fields.len() - 1) as u128;\n@@ -1419,7 +1419,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             .map(|ty| self.layout_of(ty));\n         let prefix_layouts = substs\n             .as_generator()\n-            .prefix_tys(def_id, tcx)\n+            .prefix_tys()\n             .map(|ty| self.layout_of(ty))\n             .chain(iter::once(Ok(discr_layout)))\n             .chain(promoted_layouts)\n@@ -2095,9 +2095,7 @@ where\n             ty::Str => tcx.types.u8,\n \n             // Tuples, generators and closures.\n-            ty::Closure(def_id, ref substs) => {\n-                substs.as_closure().upvar_tys(def_id, tcx).nth(i).unwrap()\n-            }\n+            ty::Closure(_, ref substs) => substs.as_closure().upvar_tys().nth(i).unwrap(),\n \n             ty::Generator(def_id, ref substs, _) => match this.variants {\n                 Variants::Single { index } => substs\n@@ -2111,7 +2109,7 @@ where\n                     if i == discr_index {\n                         return discr_layout(discr);\n                     }\n-                    substs.as_generator().prefix_tys(def_id, tcx).nth(i).unwrap()\n+                    substs.as_generator().prefix_tys().nth(i).unwrap()\n                 }\n             },\n \n@@ -2298,7 +2296,7 @@ impl<'tcx> ty::Instance<'tcx> {\n                 sig\n             }\n             ty::Closure(def_id, substs) => {\n-                let sig = substs.as_closure().sig(def_id, tcx);\n+                let sig = substs.as_closure().sig();\n \n                 let env_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 sig.map_bound(|sig| tcx.mk_fn_sig(\n@@ -2309,8 +2307,8 @@ impl<'tcx> ty::Instance<'tcx> {\n                     sig.abi\n                 ))\n             }\n-            ty::Generator(def_id, substs, _) => {\n-                let sig = substs.as_generator().poly_sig(def_id, tcx);\n+            ty::Generator(_, substs, _) => {\n+                let sig = substs.as_generator().poly_sig();\n \n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);"}, {"sha": "9dd96f2f2b507f049f73f44c585acbe05c08727c", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -61,15 +61,15 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n     // in the `subtys` iterator (e.g., when encountering a\n     // projection).\n     match ty.kind {\n-            ty::Closure(def_id, ref substs) => {\n-                for upvar_ty in substs.as_closure().upvar_tys(def_id, tcx) {\n+            ty::Closure(_, ref substs) => {\n+                for upvar_ty in substs.as_closure().upvar_tys() {\n                     compute_components(tcx, upvar_ty, out);\n                 }\n             }\n \n-            ty::Generator(def_id, ref substs, _) => {\n+            ty::Generator(_, ref substs, _) => {\n                 // Same as the closure case\n-                for upvar_ty in substs.as_generator().upvar_tys(def_id, tcx) {\n+                for upvar_ty in substs.as_generator().upvar_tys() {\n                     compute_components(tcx, upvar_ty, out);\n                 }\n "}, {"sha": "3a95c573ca30c500baa69a539b51eeb186c22bc8", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 57, "deletions": 30, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -617,8 +617,6 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Str => p!(write(\"str\")),\n             ty::Generator(did, substs, movability) => {\n-                let upvar_tys = substs.as_generator().upvar_tys(did, self.tcx());\n-                let witness = substs.as_generator().witness(did, self.tcx());\n                 match movability {\n                     hir::Movability::Movable => p!(write(\"[generator\")),\n                     hir::Movability::Static => p!(write(\"[static generator\")),\n@@ -627,31 +625,47 @@ pub trait PrettyPrinter<'tcx>:\n                 // FIXME(eddyb) should use `def_span`.\n                 if let Some(hir_id) = self.tcx().hir().as_local_hir_id(did) {\n                     p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n-                    let mut sep = \" \";\n-                    for (&var_id, upvar_ty) in\n-                        self.tcx().upvars(did).as_ref().iter().flat_map(|v| v.keys()).zip(upvar_tys)\n-                    {\n-                        p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n-                        sep = \", \";\n+\n+                    if substs.as_generator().is_valid() {\n+                        let upvar_tys = substs.as_generator().upvar_tys();\n+                        let mut sep = \" \";\n+                        for (&var_id, upvar_ty) in self\n+                            .tcx()\n+                            .upvars(did)\n+                            .as_ref()\n+                            .iter()\n+                            .flat_map(|v| v.keys())\n+                            .zip(upvar_tys)\n+                        {\n+                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n+                            sep = \", \";\n+                        }\n                     }\n                 } else {\n                     // Cross-crate closure types should only be\n                     // visible in codegen bug reports, I imagine.\n                     p!(write(\"@{:?}\", did));\n-                    let mut sep = \" \";\n-                    for (index, upvar_ty) in upvar_tys.enumerate() {\n-                        p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n-                        sep = \", \";\n+\n+                    if substs.as_generator().is_valid() {\n+                        let upvar_tys = substs.as_generator().upvar_tys();\n+                        let mut sep = \" \";\n+                        for (index, upvar_ty) in upvar_tys.enumerate() {\n+                            p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n+                            sep = \", \";\n+                        }\n                     }\n                 }\n \n-                p!(write(\" \"), print(witness), write(\"]\"))\n+                if substs.as_generator().is_valid() {\n+                    p!(write(\" \"), print(substs.as_generator().witness()));\n+                }\n+\n+                p!(write(\"]\"))\n             }\n             ty::GeneratorWitness(types) => {\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n-                let upvar_tys = substs.as_closure().upvar_tys(did, self.tcx());\n                 p!(write(\"[closure\"));\n \n                 // FIXME(eddyb) should use `def_span`.\n@@ -661,30 +675,43 @@ pub trait PrettyPrinter<'tcx>:\n                     } else {\n                         p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n                     }\n-                    let mut sep = \" \";\n-                    for (&var_id, upvar_ty) in\n-                        self.tcx().upvars(did).as_ref().iter().flat_map(|v| v.keys()).zip(upvar_tys)\n-                    {\n-                        p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n-                        sep = \", \";\n+\n+                    if substs.as_closure().is_valid() {\n+                        let upvar_tys = substs.as_closure().upvar_tys();\n+                        let mut sep = \" \";\n+                        for (&var_id, upvar_ty) in self\n+                            .tcx()\n+                            .upvars(did)\n+                            .as_ref()\n+                            .iter()\n+                            .flat_map(|v| v.keys())\n+                            .zip(upvar_tys)\n+                        {\n+                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n+                            sep = \", \";\n+                        }\n                     }\n                 } else {\n                     // Cross-crate closure types should only be\n                     // visible in codegen bug reports, I imagine.\n                     p!(write(\"@{:?}\", did));\n-                    let mut sep = \" \";\n-                    for (index, upvar_ty) in upvar_tys.enumerate() {\n-                        p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n-                        sep = \", \";\n+\n+                    if substs.as_closure().is_valid() {\n+                        let upvar_tys = substs.as_closure().upvar_tys();\n+                        let mut sep = \" \";\n+                        for (index, upvar_ty) in upvar_tys.enumerate() {\n+                            p!(write(\"{}{}:\", sep, index), print(upvar_ty));\n+                            sep = \", \";\n+                        }\n                     }\n                 }\n \n-                if self.tcx().sess.verbose() {\n-                    p!(write(\n-                        \" closure_kind_ty={:?} closure_sig_as_fn_ptr_ty={:?}\",\n-                        substs.as_closure().kind_ty(did, self.tcx()),\n-                        substs.as_closure().sig_as_fn_ptr_ty(did, self.tcx())\n-                    ));\n+                if self.tcx().sess.verbose() && substs.as_closure().is_valid() {\n+                    p!(write(\" closure_kind_ty=\"), print(substs.as_closure().kind_ty()));\n+                    p!(\n+                        write(\" closure_sig_as_fn_ptr_ty=\"),\n+                        print(substs.as_closure().sig_as_fn_ptr_ty())\n+                    );\n                 }\n \n                 p!(write(\"]\"))"}, {"sha": "096f63fdf2e6871d145890a18bb2541757234dad", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 85, "deletions": 106, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,7 +11,7 @@ use crate::mir::interpret::ConstValue;\n use crate::mir::interpret::Scalar;\n use crate::mir::Promoted;\n use crate::ty::layout::VariantIdx;\n-use crate::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, Subst, SubstsRef};\n+use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{\n     self, AdtDef, DefIdTree, Discr, Ty, TyCtxt, TypeFlags, TypeFoldable, WithConstness,\n };\n@@ -260,15 +260,11 @@ static_assert_size!(TyKind<'_>, 24);\n \n /// A closure can be modeled as a struct that looks like:\n ///\n-///     struct Closure<'l0...'li, T0...Tj, CK, CS, U0...Uk> {\n-///         upvar0: U0,\n-///         ...\n-///         upvark: Uk\n-///     }\n+///     struct Closure<'l0...'li, T0...Tj, CK, CS, U>(...U);\n ///\n /// where:\n ///\n-/// - 'l0...'li and T0...Tj are the lifetime and type parameters\n+/// - 'l0...'li and T0...Tj are the generic parameters\n ///   in scope on the function that defined the closure,\n /// - CK represents the *closure kind* (Fn vs FnMut vs FnOnce). This\n ///   is rather hackily encoded via a scalar type. See\n@@ -277,9 +273,9 @@ static_assert_size!(TyKind<'_>, 24);\n ///   type. For example, `fn(u32, u32) -> u32` would mean that the closure\n ///   implements `CK<(u32, u32), Output = u32>`, where `CK` is the trait\n ///   specified above.\n-/// - U0...Uk are type parameters representing the types of its upvars\n-///   (borrowed, if appropriate; that is, if Ui represents a by-ref upvar,\n-///    and the up-var has the type `Foo`, then `Ui = &Foo`).\n+/// - U is a type parameter representing the types of its upvars, tupled up\n+///   (borrowed, if appropriate; that is, if an U field represents a by-ref upvar,\n+///    and the up-var has the type `Foo`, then that field of U will be `&Foo`).\n ///\n /// So, for example, given this function:\n ///\n@@ -289,17 +285,15 @@ static_assert_size!(TyKind<'_>, 24);\n ///\n /// the type of the closure would be something like:\n ///\n-///     struct Closure<'a, T, U0> {\n-///         data: U0\n-///     }\n+///     struct Closure<'a, T, U>(...U);\n ///\n /// Note that the type of the upvar is not specified in the struct.\n /// You may wonder how the impl would then be able to use the upvar,\n /// if it doesn't know it's type? The answer is that the impl is\n /// (conceptually) not fully generic over Closure but rather tied to\n /// instances with the expected upvar types:\n ///\n-///     impl<'b, 'a, T> FnMut() for Closure<'a, T, &'b mut &'a mut T> {\n+///     impl<'b, 'a, T> FnMut() for Closure<'a, T, (&'b mut &'a mut T,)> {\n ///         ...\n ///     }\n ///\n@@ -308,7 +302,7 @@ static_assert_size!(TyKind<'_>, 24);\n /// (Here, I am assuming that `data` is mut-borrowed.)\n ///\n /// Now, the last question you may ask is: Why include the upvar types\n-/// as extra type parameters? The reason for this design is that the\n+/// in an extra type parameter? The reason for this design is that the\n /// upvar types can reference lifetimes that are internal to the\n /// creating function. In my example above, for example, the lifetime\n /// `'b` represents the scope of the closure itself; this is some\n@@ -360,7 +354,7 @@ static_assert_size!(TyKind<'_>, 24);\n #[derive(Copy, Clone, Debug, TypeFoldable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n-    /// concatenated with the types of the upvars.\n+    /// concatenated with a tuple containing the types of the upvars.\n     ///\n     /// These are separated out because codegen wants to pass them around\n     /// when monomorphizing.\n@@ -370,66 +364,66 @@ pub struct ClosureSubsts<'tcx> {\n /// Struct returned by `split()`. Note that these are subslices of the\n /// parent slice and not canonical substs themselves.\n struct SplitClosureSubsts<'tcx> {\n-    closure_kind_ty: Ty<'tcx>,\n-    closure_sig_as_fn_ptr_ty: Ty<'tcx>,\n-    upvar_kinds: &'tcx [GenericArg<'tcx>],\n+    closure_kind_ty: GenericArg<'tcx>,\n+    closure_sig_as_fn_ptr_ty: GenericArg<'tcx>,\n+    tupled_upvars_ty: GenericArg<'tcx>,\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {\n     /// Divides the closure substs into their respective\n     /// components. Single source of truth with respect to the\n     /// ordering.\n-    fn split(self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitClosureSubsts<'tcx> {\n-        let generics = tcx.generics_of(def_id);\n-        let parent_len = generics.parent_count;\n-        SplitClosureSubsts {\n-            closure_kind_ty: self.substs.type_at(parent_len),\n-            closure_sig_as_fn_ptr_ty: self.substs.type_at(parent_len + 1),\n-            upvar_kinds: &self.substs[parent_len + 2..],\n+    fn split(self) -> SplitClosureSubsts<'tcx> {\n+        match self.substs[..] {\n+            [.., closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty] => {\n+                SplitClosureSubsts { closure_kind_ty, closure_sig_as_fn_ptr_ty, tupled_upvars_ty }\n+            }\n+            _ => bug!(\"closure substs missing synthetics\"),\n         }\n     }\n \n+    /// Returns `true` only if enough of the synthetic types are known to\n+    /// allow using all of the methods on `ClosureSubsts` without panicking.\n+    ///\n+    /// Used primarily by `ty::print::pretty` to be able to handle closure\n+    /// types that haven't had their synthetic types substituted in.\n+    pub fn is_valid(self) -> bool {\n+        self.substs.len() >= 3 && matches!(self.split().tupled_upvars_ty.expect_ty().kind, Tuple(_))\n+    }\n+\n     #[inline]\n-    pub fn upvar_tys(\n-        self,\n-        def_id: DefId,\n-        tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n-        upvar_kinds.iter().map(|t| {\n-            if let GenericArgKind::Type(ty) = t.unpack() {\n-                ty\n-            } else {\n-                bug!(\"upvar should be type\")\n-            }\n-        })\n+    pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+        self.split().tupled_upvars_ty.expect_ty().tuple_fields()\n     }\n \n     /// Returns the closure kind for this closure; may return a type\n     /// variable during inference. To get the closure kind during\n-    /// inference, use `infcx.closure_kind(def_id, substs)`.\n-    pub fn kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).closure_kind_ty\n+    /// inference, use `infcx.closure_kind(substs)`.\n+    pub fn kind_ty(self) -> Ty<'tcx> {\n+        self.split().closure_kind_ty.expect_ty()\n     }\n \n     /// Returns the `fn` pointer type representing the closure signature for this\n     /// closure.\n-    pub fn sig_as_fn_ptr_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).closure_sig_as_fn_ptr_ty\n+    // FIXME(eddyb) this should be unnecessary, as the shallowly resolved\n+    // type is known at the time of the creation of `ClosureSubsts`,\n+    // see `rustc_typeck::check::closure`.\n+    pub fn sig_as_fn_ptr_ty(self) -> Ty<'tcx> {\n+        self.split().closure_sig_as_fn_ptr_ty.expect_ty()\n     }\n \n     /// Returns the closure kind for this closure; only usable outside\n     /// of an inference context, because in that context we know that\n     /// there are no type variables.\n     ///\n     /// If you have an inference context, use `infcx.closure_kind()`.\n-    pub fn kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n-        self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n+    pub fn kind(self) -> ty::ClosureKind {\n+        self.kind_ty().to_opt_closure_kind().unwrap()\n     }\n \n     /// Extracts the signature from the closure.\n-    pub fn sig(&self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n-        let ty = self.sig_as_fn_ptr_ty(def_id, tcx);\n+    pub fn sig(self) -> ty::PolyFnSig<'tcx> {\n+        let ty = self.sig_as_fn_ptr_ty();\n         match ty.kind {\n             ty::FnPtr(sig) => sig,\n             _ => bug!(\"closure_sig_as_fn_ptr_ty is not a fn-ptr: {:?}\", ty.kind),\n@@ -444,64 +438,59 @@ pub struct GeneratorSubsts<'tcx> {\n }\n \n struct SplitGeneratorSubsts<'tcx> {\n-    resume_ty: Ty<'tcx>,\n-    yield_ty: Ty<'tcx>,\n-    return_ty: Ty<'tcx>,\n-    witness: Ty<'tcx>,\n-    upvar_kinds: &'tcx [GenericArg<'tcx>],\n+    resume_ty: GenericArg<'tcx>,\n+    yield_ty: GenericArg<'tcx>,\n+    return_ty: GenericArg<'tcx>,\n+    witness: GenericArg<'tcx>,\n+    tupled_upvars_ty: GenericArg<'tcx>,\n }\n \n impl<'tcx> GeneratorSubsts<'tcx> {\n-    fn split(self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitGeneratorSubsts<'tcx> {\n-        let generics = tcx.generics_of(def_id);\n-        let parent_len = generics.parent_count;\n-        SplitGeneratorSubsts {\n-            resume_ty: self.substs.type_at(parent_len),\n-            yield_ty: self.substs.type_at(parent_len + 1),\n-            return_ty: self.substs.type_at(parent_len + 2),\n-            witness: self.substs.type_at(parent_len + 3),\n-            upvar_kinds: &self.substs[parent_len + 4..],\n+    fn split(self) -> SplitGeneratorSubsts<'tcx> {\n+        match self.substs[..] {\n+            [.., resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty] => {\n+                SplitGeneratorSubsts { resume_ty, yield_ty, return_ty, witness, tupled_upvars_ty }\n+            }\n+            _ => bug!(\"generator substs missing synthetics\"),\n         }\n     }\n \n+    /// Returns `true` only if enough of the synthetic types are known to\n+    /// allow using all of the methods on `GeneratorSubsts` without panicking.\n+    ///\n+    /// Used primarily by `ty::print::pretty` to be able to handle generator\n+    /// types that haven't had their synthetic types substituted in.\n+    pub fn is_valid(self) -> bool {\n+        self.substs.len() >= 5 && matches!(self.split().tupled_upvars_ty.expect_ty().kind, Tuple(_))\n+    }\n+\n     /// This describes the types that can be contained in a generator.\n     /// It will be a type variable initially and unified in the last stages of typeck of a body.\n     /// It contains a tuple of all the types that could end up on a generator frame.\n     /// The state transformation MIR pass may only produce layouts which mention types\n     /// in this tuple. Upvars are not counted here.\n-    pub fn witness(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).witness\n+    pub fn witness(self) -> Ty<'tcx> {\n+        self.split().witness.expect_ty()\n     }\n \n     #[inline]\n-    pub fn upvar_tys(\n-        self,\n-        def_id: DefId,\n-        tcx: TyCtxt<'_>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        let SplitGeneratorSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n-        upvar_kinds.iter().map(|t| {\n-            if let GenericArgKind::Type(ty) = t.unpack() {\n-                ty\n-            } else {\n-                bug!(\"upvar should be type\")\n-            }\n-        })\n+    pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+        self.split().tupled_upvars_ty.expect_ty().tuple_fields()\n     }\n \n     /// Returns the type representing the resume type of the generator.\n-    pub fn resume_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).resume_ty\n+    pub fn resume_ty(self) -> Ty<'tcx> {\n+        self.split().resume_ty.expect_ty()\n     }\n \n     /// Returns the type representing the yield type of the generator.\n-    pub fn yield_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).yield_ty\n+    pub fn yield_ty(self) -> Ty<'tcx> {\n+        self.split().yield_ty.expect_ty()\n     }\n \n     /// Returns the type representing the return type of the generator.\n-    pub fn return_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n-        self.split(def_id, tcx).return_ty\n+    pub fn return_ty(self) -> Ty<'tcx> {\n+        self.split().return_ty.expect_ty()\n     }\n \n     /// Returns the \"generator signature\", which consists of its yield\n@@ -510,17 +499,17 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// N.B., some bits of the code prefers to see this wrapped in a\n     /// binder, but it never contains bound regions. Probably this\n     /// function should be removed.\n-    pub fn poly_sig(self, def_id: DefId, tcx: TyCtxt<'_>) -> PolyGenSig<'tcx> {\n-        ty::Binder::dummy(self.sig(def_id, tcx))\n+    pub fn poly_sig(self) -> PolyGenSig<'tcx> {\n+        ty::Binder::dummy(self.sig())\n     }\n \n     /// Returns the \"generator signature\", which consists of its resume, yield\n     /// and return types.\n-    pub fn sig(self, def_id: DefId, tcx: TyCtxt<'_>) -> GenSig<'tcx> {\n+    pub fn sig(self) -> GenSig<'tcx> {\n         ty::GenSig {\n-            resume_ty: self.resume_ty(def_id, tcx),\n-            yield_ty: self.yield_ty(def_id, tcx),\n-            return_ty: self.return_ty(def_id, tcx),\n+            resume_ty: self.resume_ty(),\n+            yield_ty: self.yield_ty(),\n+            return_ty: self.return_ty(),\n         }\n     }\n }\n@@ -612,8 +601,8 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n     /// This is the types of the fields of a generator which are not stored in a\n     /// variant.\n     #[inline]\n-    pub fn prefix_tys(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> {\n-        self.upvar_tys(def_id, tcx)\n+    pub fn prefix_tys(self) -> impl Iterator<Item = Ty<'tcx>> {\n+        self.upvar_tys()\n     }\n }\n \n@@ -625,22 +614,12 @@ pub enum UpvarSubsts<'tcx> {\n \n impl<'tcx> UpvarSubsts<'tcx> {\n     #[inline]\n-    pub fn upvar_tys(\n-        self,\n-        def_id: DefId,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n-        let upvar_kinds = match self {\n-            UpvarSubsts::Closure(substs) => substs.as_closure().split(def_id, tcx).upvar_kinds,\n-            UpvarSubsts::Generator(substs) => substs.as_generator().split(def_id, tcx).upvar_kinds,\n+    pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+        let tupled_upvars_ty = match self {\n+            UpvarSubsts::Closure(substs) => substs.as_closure().split().tupled_upvars_ty,\n+            UpvarSubsts::Generator(substs) => substs.as_generator().split().tupled_upvars_ty,\n         };\n-        upvar_kinds.iter().map(|t| {\n-            if let GenericArgKind::Type(ty) = t.unpack() {\n-                ty\n-            } else {\n-                bug!(\"upvar should be type\")\n-            }\n-        })\n+        tupled_upvars_ty.expect_ty().tuple_fields()\n     }\n }\n "}, {"sha": "1f512f1dde7d663d848dc0d4df4465dddf43d08d", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -502,7 +502,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> Option<ty::Binder<Ty<'tcx>>> {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n         let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n-        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self);\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty();\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {\n             ty::ClosureKind::Fn => self.mk_imm_ref(self.mk_region(env_region), closure_ty),"}, {"sha": "1fb1965484af2a14c1cd923074c5672a6ff4cf10", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -71,8 +71,7 @@ pub fn write_compressed_metadata<'tcx>(\n         // flags, at least for ELF outputs, so that the\n         // metadata doesn't get loaded into memory.\n         let directive = format!(\".section {}\", section_name);\n-        let directive = CString::new(directive).unwrap();\n-        llvm::LLVMSetModuleInlineAsm(metadata_llmod, directive.as_ptr())\n+        llvm::LLVMSetModuleInlineAsm2(metadata_llmod, directive.as_ptr().cast(), directive.len())\n     }\n }\n "}, {"sha": "619dee2909281015b2e9af96dfb6c10585031b7b", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,7 +1,7 @@\n use crate::base;\n use crate::common::CodegenCx;\n use crate::debuginfo;\n-use crate::llvm::{self, SetUnnamedAddr, True};\n+use crate::llvm::{self, True};\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n@@ -183,7 +183,7 @@ impl CodegenCx<'ll, 'tcx> {\n             };\n             llvm::LLVMSetInitializer(gv, cv);\n             set_global_alignment(&self, gv, align);\n-            SetUnnamedAddr(gv, true);\n+            llvm::SetUnnamedAddress(gv, llvm::UnnamedAddr::Global);\n             gv\n         }\n     }"}, {"sha": "92f59feef90fefba9239a5073fed4803e7fac61f", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -166,7 +166,7 @@ pub unsafe fn create_module(\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n \n-        let llvm_data_layout = llvm::LLVMGetDataLayout(llmod);\n+        let llvm_data_layout = llvm::LLVMGetDataLayoutStr(llmod);\n         let llvm_data_layout = str::from_utf8(CStr::from_ptr(llvm_data_layout).to_bytes())\n             .expect(\"got a non-UTF8 data-layout from LLVM\");\n \n@@ -458,7 +458,7 @@ impl CodegenCx<'b, 'tcx> {\n             self.type_variadic_func(&[], ret)\n         };\n         let f = self.declare_cfn(name, fn_ty);\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         self.intrinsics.borrow_mut().insert(name, f);\n         f\n     }"}, {"sha": "13a36c36a309ae5c8954c6dc65130a3d5fe1f4bd", "filename": "src/librustc_codegen_llvm/debuginfo/create_scope_map.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fcreate_scope_map.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,11 +1,13 @@\n use super::metadata::{file_metadata, UNKNOWN_COLUMN_NUMBER, UNKNOWN_LINE_NUMBER};\n use super::utils::DIB;\n use rustc_codegen_ssa::mir::debuginfo::{DebugScope, FunctionDebugContext};\n+use rustc_codegen_ssa::traits::*;\n \n use crate::common::CodegenCx;\n use crate::llvm;\n use crate::llvm::debuginfo::{DIScope, DISubprogram};\n use rustc::mir::{Body, SourceScope};\n+use rustc_session::config::DebugInfo;\n \n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n@@ -19,10 +21,17 @@ pub fn compute_mir_scopes(\n ) {\n     // Find all the scopes with variables defined in them.\n     let mut has_variables = BitSet::new_empty(mir.source_scopes.len());\n-    // FIXME(eddyb) take into account that arguments always have debuginfo,\n-    // irrespective of their name (assuming full debuginfo is enabled).\n-    for var_debug_info in &mir.var_debug_info {\n-        has_variables.insert(var_debug_info.source_info.scope);\n+\n+    // Only consider variables when they're going to be emitted.\n+    // FIXME(eddyb) don't even allocate `has_variables` otherwise.\n+    if cx.sess().opts.debuginfo == DebugInfo::Full {\n+        // FIXME(eddyb) take into account that arguments always have debuginfo,\n+        // irrespective of their name (assuming full debuginfo is enabled).\n+        // NOTE(eddyb) actually, on second thought, those are always in the\n+        // function scope, which always exists.\n+        for var_debug_info in &mir.var_debug_info {\n+            has_variables.insert(var_debug_info.source_info.scope);\n+        }\n     }\n \n     // Instantiate all scopes."}, {"sha": "dccd287a2e38c9468d46a138b5d791ee65282dec", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -50,7 +50,7 @@ pub fn get_or_insert_gdb_debug_scripts_section_global(cx: &CodegenCx<'ll, '_>) -\n             llvm::LLVMSetSection(section_var, section_name.as_ptr().cast());\n             llvm::LLVMSetInitializer(section_var, cx.const_bytes(section_contents));\n             llvm::LLVMSetGlobalConstant(section_var, llvm::True);\n-            llvm::LLVMSetUnnamedAddr(section_var, llvm::True);\n+            llvm::LLVMSetUnnamedAddress(section_var, llvm::UnnamedAddr::Global);\n             llvm::LLVMRustSetLinkage(section_var, llvm::Linkage::LinkOnceODRLinkage);\n             // This should make sure that the whole section is not larger than\n             // the string it contains. Otherwise we get a warning from GDB."}, {"sha": "d7a0acb1339564428c110eeed96ae5a28f76c0e6", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -663,7 +663,7 @@ pub fn type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>, usage_site_span: Sp\n             MetadataCreationResult::new(pointer_type_metadata(cx, t, fn_metadata), false)\n         }\n         ty::Closure(def_id, substs) => {\n-            let upvar_tys: Vec<_> = substs.as_closure().upvar_tys(def_id, cx.tcx).collect();\n+            let upvar_tys: Vec<_> = substs.as_closure().upvar_tys().collect();\n             let containing_scope = get_namespace_for_item(cx, def_id);\n             prepare_tuple_metadata(\n                 cx,\n@@ -678,7 +678,7 @@ pub fn type_metadata(cx: &CodegenCx<'ll, 'tcx>, t: Ty<'tcx>, usage_site_span: Sp\n         ty::Generator(def_id, substs, _) => {\n             let upvar_tys: Vec<_> = substs\n                 .as_generator()\n-                .prefix_tys(def_id, cx.tcx)\n+                .prefix_tys()\n                 .map(|t| cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t))\n                 .collect();\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span, upvar_tys)\n@@ -2299,6 +2299,11 @@ pub fn create_global_var_metadata(cx: &CodegenCx<'ll, '_>, def_id: DefId, global\n         return;\n     }\n \n+    // Only create type information if full debuginfo is enabled\n+    if cx.sess().opts.debuginfo != DebugInfo::Full {\n+        return;\n+    }\n+\n     let tcx = cx.tcx;\n     let attrs = tcx.codegen_fn_attrs(def_id);\n \n@@ -2358,6 +2363,11 @@ pub fn create_vtable_metadata(cx: &CodegenCx<'ll, 'tcx>, ty: Ty<'tcx>, vtable: &\n         return;\n     }\n \n+    // Only create type information if full debuginfo is enabled\n+    if cx.sess().opts.debuginfo != DebugInfo::Full {\n+        return;\n+    }\n+\n     let type_metadata = type_metadata(cx, ty, rustc_span::DUMMY_SP);\n \n     unsafe {"}, {"sha": "4b8140263f1f25ade3797b44301f5ece1b3d92d5", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -475,7 +475,12 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     // so avoid methods on other types (e.g., `<*mut T>::null`).\n                     match impl_self_ty.kind {\n                         ty::Adt(def, ..) if !def.is_box() => {\n-                            Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n+                            // Again, only create type information if full debuginfo is enabled\n+                            if cx.sess().opts.debuginfo == DebugInfo::Full {\n+                                Some(type_metadata(cx, impl_self_ty, rustc_span::DUMMY_SP))\n+                            } else {\n+                                Some(namespace::item_namespace(cx, def.did))\n+                            }\n                         }\n                         _ => None,\n                     }"}, {"sha": "236f5bb1bfdfb2871e0428f891b4f90f630ca3d6", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -40,7 +40,7 @@ fn declare_raw_fn(\n     llvm::SetFunctionCallConv(llfn, callconv);\n     // Function addresses in Rust are never significant, allowing functions to\n     // be merged.\n-    llvm::SetUnnamedAddr(llfn, true);\n+    llvm::SetUnnamedAddress(llfn, llvm::UnnamedAddr::Global);\n \n     if cx.tcx.sess.opts.cg.no_redzone.unwrap_or(cx.tcx.sess.target.target.options.disable_redzone) {\n         llvm::Attribute::NoRedZone.apply_llfn(Function, llfn);"}, {"sha": "95982c860f3c1f3701827dad17a3b76c91375166", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1662,7 +1662,7 @@ fn generic_simd_intrinsic(\n                 llvm_elem_vec_ty,\n             ),\n         );\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[1].immediate(), alignment, mask, args[0].immediate()], None);\n         return Ok(v);\n     }\n@@ -1784,7 +1784,7 @@ fn generic_simd_intrinsic(\n             &llvm_intrinsic,\n             bx.type_func(&[llvm_elem_vec_ty, llvm_pointer_vec_ty, alignment_ty, mask_ty], ret_t),\n         );\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[args[0].immediate(), args[1].immediate(), alignment, mask], None);\n         return Ok(v);\n     }\n@@ -2083,7 +2083,7 @@ unsupported {} from `{}` with element `{}` of size `{}` to `{}`\"#,\n         let vec_ty = bx.cx.type_vector(elem_ty, in_len as u64);\n \n         let f = bx.declare_cfn(&llvm_intrinsic, bx.type_func(&[vec_ty, vec_ty], vec_ty));\n-        llvm::SetUnnamedAddr(f, false);\n+        llvm::SetUnnamedAddress(f, llvm::UnnamedAddr::No);\n         let v = bx.call(f, &[lhs, rhs], None);\n         return Ok(v);\n     }"}, {"sha": "69881e2149bc4925bbedfa8b913f41d7ebb3862a", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -73,6 +73,14 @@ pub enum Visibility {\n     Protected = 2,\n }\n \n+/// LLVMUnnamedAddr\n+#[repr(C)]\n+pub enum UnnamedAddr {\n+    No,\n+    Local,\n+    Global,\n+}\n+\n /// LLVMDLLStorageClass\n #[derive(Copy, Clone)]\n #[repr(C)]\n@@ -727,11 +735,11 @@ extern \"C\" {\n     pub fn LLVMCloneModule(M: &Module) -> &Module;\n \n     /// Data layout. See Module::getDataLayout.\n-    pub fn LLVMGetDataLayout(M: &Module) -> *const c_char;\n+    pub fn LLVMGetDataLayoutStr(M: &Module) -> *const c_char;\n     pub fn LLVMSetDataLayout(M: &Module, Triple: *const c_char);\n \n     /// See Module::setModuleInlineAsm.\n-    pub fn LLVMSetModuleInlineAsm(M: &Module, Asm: *const c_char);\n+    pub fn LLVMSetModuleInlineAsm2(M: &Module, Asm: *const c_char, AsmLen: size_t);\n     pub fn LLVMRustAppendModuleInlineAsm(M: &Module, Asm: *const c_char, AsmLen: size_t);\n \n     /// See llvm::LLVMTypeKind::getTypeID.\n@@ -1853,7 +1861,7 @@ extern \"C\" {\n         UniqueIdLen: size_t,\n     ) -> &'a DIDerivedType;\n \n-    pub fn LLVMSetUnnamedAddr(GlobalVar: &Value, UnnamedAddr: Bool);\n+    pub fn LLVMSetUnnamedAddress(Global: &Value, UnnamedAddr: UnnamedAddr);\n \n     pub fn LLVMRustDIBuilderCreateTemplateTypeParameter(\n         Builder: &DIBuilder<'a>,"}, {"sha": "b7f1e1789c9e2cd0c8ced4247a2cdd8bf9c7b986", "filename": "src/librustc_codegen_llvm/llvm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -106,9 +106,9 @@ pub fn UnsetComdat(val: &'a Value) {\n     }\n }\n \n-pub fn SetUnnamedAddr(global: &'a Value, unnamed: bool) {\n+pub fn SetUnnamedAddress(global: &'a Value, unnamed: UnnamedAddr) {\n     unsafe {\n-        LLVMSetUnnamedAddr(global, unnamed as Bool);\n+        LLVMSetUnnamedAddress(global, unnamed);\n     }\n }\n "}, {"sha": "fcbe938a8c7ac699eeb540df71527dc9744eab55", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -3,7 +3,7 @@ use crate::infer::InferCtxt;\n use rustc::hir::map::Map;\n use rustc::ty::print::Print;\n use rustc::ty::{self, DefIdTree, Infer, Ty, TyVar};\n-use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -277,8 +277,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         };\n \n         let ty_msg = match local_visitor.found_ty {\n-            Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n+            Some(ty::TyS { kind: ty::Closure(_, substs), .. }) => {\n+                let fn_sig = substs.as_closure().sig();\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n                 format!(\" for the closure `fn({}) -> {}`\", args, ret)\n@@ -311,8 +311,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         );\n \n         let suffix = match local_visitor.found_ty {\n-            Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.as_closure().sig(*def_id, self.tcx);\n+            Some(ty::TyS { kind: ty::Closure(_, substs), .. }) => {\n+                let fn_sig = substs.as_closure().sig();\n                 let ret = fn_sig.output().skip_binder().to_string();\n \n                 if let Some(ExprKind::Closure(_, decl, body_id, ..)) = local_visitor.found_closure {\n@@ -462,24 +462,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         e: &Expr<'_>,\n         err: &mut DiagnosticBuilder<'_>,\n     ) {\n-        if let (Ok(snippet), Some(tables), None) = (\n-            self.tcx.sess.source_map().span_to_snippet(segment.ident.span),\n-            self.in_progress_tables,\n-            &segment.args,\n-        ) {\n+        if let (Some(tables), None) = (self.in_progress_tables, &segment.args) {\n             let borrow = tables.borrow();\n             if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n-                    err.span_suggestion(\n-                        segment.ident.span,\n+                    err.span_suggestion_verbose(\n+                        segment.ident.span.shrink_to_hi(),\n                         &format!(\n                             \"consider specifying the type argument{} in the method call\",\n-                            if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                            pluralize!(generics.params.len()),\n                         ),\n                         format!(\n-                            \"{}::<{}>\",\n-                            snippet,\n+                            \"::<{}>\",\n                             generics\n                                 .params\n                                 .iter()"}, {"sha": "fb00fbe28260d6b533ad33496b89cbc0e9dedbc9", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1496,12 +1496,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Obtains the latest type of the given closure; this may be a\n     /// closure in the current function, in which case its\n     /// `ClosureKind` may not yet be known.\n-    pub fn closure_kind(\n-        &self,\n-        closure_def_id: DefId,\n-        closure_substs: SubstsRef<'tcx>,\n-    ) -> Option<ty::ClosureKind> {\n-        let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self.tcx);\n+    pub fn closure_kind(&self, closure_substs: SubstsRef<'tcx>) -> Option<ty::ClosureKind> {\n+        let closure_kind_ty = closure_substs.as_closure().kind_ty();\n         let closure_kind_ty = self.shallow_resolve(closure_kind_ty);\n         closure_kind_ty.to_opt_closure_kind()\n     }"}, {"sha": "53bc70a5344ec40f19596d2db6f85cad57c20194", "filename": "src/librustc_infer/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ftype_variable.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -54,6 +54,7 @@ pub enum TypeVariableOriginKind {\n \n     /// One of the upvars or closure kind parameters in a `ClosureSubsts`\n     /// (before it has been determined).\n+    // FIXME(eddyb) distinguish upvar inference variables from the rest.\n     ClosureSynthetic,\n     SubstitutionPlaceholder,\n     AutoDeref,"}, {"sha": "fcaeaf2e4b07d397cbd5a0e83db73efabb6c1d76", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -151,6 +151,7 @@ fn main() {\n \n     if env::var_os(\"LLVM_NDEBUG\").is_some() {\n         cfg.define(\"NDEBUG\", None);\n+        cfg.debug(false);\n     }\n \n     build_helper::rerun_if_changed_anything_in_dir(Path::new(\"../rustllvm\"));"}, {"sha": "52124fd3abb9b1964dfa6d4b5705acfb2bc75565", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1320,7 +1320,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n         self.encode_item_type(def_id);\n         if let ty::Closure(def_id, substs) = ty.kind {\n-            record!(self.per_def.fn_sig[def_id] <- substs.as_closure().sig(def_id, self.tcx));\n+            record!(self.per_def.fn_sig[def_id] <- substs.as_closure().sig());\n         }\n         self.encode_generics(def_id);\n         self.encode_optimized_mir(def_id);"}, {"sha": "27a861693970495f4a1061163d76d582786813e0", "filename": "src/librustc_mir/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1682,10 +1682,8 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 // If a closure captured our `target` and then assigned\n                                 // into a place then we should annotate the closure in\n                                 // case it ends up being assigned into the return place.\n-                                annotated_closure = self.annotate_fn_sig(\n-                                    *def_id,\n-                                    substs.as_closure().sig(*def_id, self.infcx.tcx),\n-                                );\n+                                annotated_closure =\n+                                    self.annotate_fn_sig(*def_id, substs.as_closure().sig());\n                                 debug!(\n                                     \"annotate_argument_and_return_for_borrow: \\\n                                      annotated_closure={:?} assigned_from_local={:?} \\"}, {"sha": "83bc9849cafe92e5c09098ddd6f9fb4a0c67531c", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             ty::Closure(def_id, closure_substs)\n                 if def_id == self.mir_def_id && upvar_field.is_some() =>\n             {\n-                let closure_kind_ty = closure_substs.as_closure().kind_ty(def_id, self.infcx.tcx);\n+                let closure_kind_ty = closure_substs.as_closure().kind_ty();\n                 let closure_kind = closure_kind_ty.to_opt_closure_kind();\n                 let capture_description = match closure_kind {\n                     Some(ty::ClosureKind::Fn) => \"captured variable in an `Fn` closure\","}, {"sha": "93800d2a2b38da96033feb53348ada9499080a0b", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -135,11 +135,10 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     fn is_closure_fn_mut(&self, fr: RegionVid) -> bool {\n         if let Some(ty::ReFree(free_region)) = self.to_error_region(fr) {\n             if let ty::BoundRegion::BrEnv = free_region.bound_region {\n-                if let DefiningTy::Closure(def_id, substs) =\n+                if let DefiningTy::Closure(_, substs) =\n                     self.regioncx.universal_regions().defining_ty\n                 {\n-                    return substs.as_closure().kind(def_id, self.infcx.tcx)\n-                        == ty::ClosureKind::FnMut;\n+                    return substs.as_closure().kind() == ty::ClosureKind::FnMut;\n                 }\n             }\n         }"}, {"sha": "164125a145b237b8655e2006d745a39e701a3c05", "filename": "src/librustc_mir/borrow_check/diagnostics/region_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_name.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -245,7 +245,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         .expect(\"non-local mir\");\n                     let def_ty = self.regioncx.universal_regions().defining_ty;\n \n-                    if let DefiningTy::Closure(def_id, substs) = def_ty {\n+                    if let DefiningTy::Closure(_, substs) = def_ty {\n                         let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n                             tcx.hir().expect_expr(mir_hir_id).kind\n                         {\n@@ -255,7 +255,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         };\n                         let region_name = self.synthesize_region_name();\n \n-                        let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n+                        let closure_kind_ty = substs.as_closure().kind_ty();\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n                             Some(ty::ClosureKind::Fn) => {\n                                 \"closure implements `Fn`, so references to captured variables \\"}, {"sha": "c4933bedc227130c9e708733c1dadb5d4230b782", "filename": "src/librustc_mir/borrow_check/diagnostics/var_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fvar_name.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -35,7 +35,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Search the upvars (if any) to find one that references fr. Return its index.\n     crate fn get_upvar_index_for_region(&self, tcx: TyCtxt<'tcx>, fr: RegionVid) -> Option<usize> {\n         let upvar_index =\n-            self.universal_regions().defining_ty.upvar_tys(tcx).position(|upvar_ty| {\n+            self.universal_regions().defining_ty.upvar_tys().position(|upvar_ty| {\n                 debug!(\"get_upvar_index_for_region: upvar_ty={:?}\", upvar_ty);\n                 tcx.any_free_region_meets(&upvar_ty, |r| {\n                     let r = r.to_region_vid();\n@@ -44,7 +44,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 })\n             })?;\n \n-        let upvar_ty = self.universal_regions().defining_ty.upvar_tys(tcx).nth(upvar_index);\n+        let upvar_ty = self.universal_regions().defining_ty.upvar_tys().nth(upvar_index);\n \n         debug!(\n             \"get_upvar_index_for_region: found {:?} in upvar {} which has type {:?}\","}, {"sha": "52fc48806fb12f27c29ea6b93bb04c06afc76c9d", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -757,21 +757,21 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 ty::Adt(adt_def, substs) if !adt_def.is_enum() => {\n                     (&adt_def.variants[VariantIdx::new(0)], substs)\n                 }\n-                ty::Closure(def_id, substs) => {\n-                    return match substs.as_closure().upvar_tys(def_id, tcx).nth(field.index()) {\n+                ty::Closure(_, substs) => {\n+                    return match substs.as_closure().upvar_tys().nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n+                            field_count: substs.as_closure().upvar_tys().count(),\n                         }),\n                     };\n                 }\n-                ty::Generator(def_id, substs, _) => {\n+                ty::Generator(_, substs, _) => {\n                     // Only prefix fields (upvars and current state) are\n                     // accessible without a variant index.\n-                    return match substs.as_generator().prefix_tys(def_id, tcx).nth(field.index()) {\n+                    return match substs.as_generator().prefix_tys().nth(field.index()) {\n                         Some(ty) => Ok(ty),\n                         None => Err(FieldAccessError::OutOfRange {\n-                            field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n+                            field_count: substs.as_generator().prefix_tys().count(),\n                         }),\n                     };\n                 }\n@@ -1946,22 +1946,22 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n                 }\n             }\n-            AggregateKind::Closure(def_id, substs) => {\n-                match substs.as_closure().upvar_tys(def_id, tcx).nth(field_index) {\n+            AggregateKind::Closure(_, substs) => {\n+                match substs.as_closure().upvar_tys().nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.as_closure().upvar_tys(def_id, tcx).count(),\n+                        field_count: substs.as_closure().upvar_tys().count(),\n                     }),\n                 }\n             }\n-            AggregateKind::Generator(def_id, substs, _) => {\n+            AggregateKind::Generator(_, substs, _) => {\n                 // It doesn't make sense to look at a field beyond the prefix;\n                 // these require a variant index, and are not initialized in\n                 // aggregate rvalues.\n-                match substs.as_generator().prefix_tys(def_id, tcx).nth(field_index) {\n+                match substs.as_generator().prefix_tys().nth(field_index) {\n                     Some(ty) => Ok(ty),\n                     None => Err(FieldAccessError::OutOfRange {\n-                        field_count: substs.as_generator().prefix_tys(def_id, tcx).count(),\n+                        field_count: substs.as_generator().prefix_tys().count(),\n                     }),\n                 }\n             }\n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n \n                     CastKind::Pointer(PointerCast::ClosureFnPointer(unsafety)) => {\n                         let sig = match op.ty(*body, tcx).kind {\n-                            ty::Closure(def_id, substs) => substs.as_closure().sig(def_id, tcx),\n+                            ty::Closure(_, substs) => substs.as_closure().sig(),\n                             _ => bug!(),\n                         };\n                         let ty_fn_ptr_from = tcx.coerce_closure_fn_ty(sig, *unsafety);"}, {"sha": "825931cf8922f398768e2455e108788623db607c", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -108,13 +108,11 @@ impl<'tcx> DefiningTy<'tcx> {\n     /// not a closure or generator, there are no upvars, and hence it\n     /// will be an empty list. The order of types in this list will\n     /// match up with the upvar order in the HIR, typesystem, and MIR.\n-    pub fn upvar_tys(self, tcx: TyCtxt<'tcx>) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+    pub fn upvar_tys(self) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n         match self {\n-            DefiningTy::Closure(def_id, substs) => {\n-                Either::Left(substs.as_closure().upvar_tys(def_id, tcx))\n-            }\n-            DefiningTy::Generator(def_id, substs, _) => {\n-                Either::Right(Either::Left(substs.as_generator().upvar_tys(def_id, tcx)))\n+            DefiningTy::Closure(_, substs) => Either::Left(substs.as_closure().upvar_tys()),\n+            DefiningTy::Generator(_, substs, _) => {\n+                Either::Right(Either::Left(substs.as_generator().upvar_tys()))\n             }\n             DefiningTy::FnDef(..) | DefiningTy::Const(..) => {\n                 Either::Right(Either::Right(iter::empty()))\n@@ -470,9 +468,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         debug!(\"build: local regions  = {}..{}\", first_local_index, num_universals);\n \n         let yield_ty = match defining_ty {\n-            DefiningTy::Generator(def_id, substs, _) => {\n-                Some(substs.as_generator().yield_ty(def_id, self.infcx.tcx))\n-            }\n+            DefiningTy::Generator(_, substs, _) => Some(substs.as_generator().yield_ty()),\n             _ => None,\n         };\n \n@@ -580,7 +576,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         match defining_ty {\n             DefiningTy::Closure(def_id, substs) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let closure_sig = substs.as_closure().sig(def_id, tcx);\n+                let closure_sig = substs.as_closure().sig();\n                 let inputs_and_output = closure_sig.inputs_and_output();\n                 let closure_ty = tcx.closure_env_ty(def_id, substs).unwrap();\n                 ty::Binder::fuse(closure_ty, inputs_and_output, |closure_ty, inputs_and_output| {\n@@ -604,8 +600,8 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n             DefiningTy::Generator(def_id, substs, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n-                let resume_ty = substs.as_generator().resume_ty(def_id, tcx);\n-                let output = substs.as_generator().return_ty(def_id, tcx);\n+                let resume_ty = substs.as_generator().resume_ty();\n+                let output = substs.as_generator().return_ty();\n                 let generator_ty = tcx.mk_generator(def_id, substs, movability);\n                 let inputs_and_output =\n                     self.infcx.tcx.intern_type_list(&[generator_ty, resume_ty, output]);"}, {"sha": "eeb9d5f5a1fcce9bb84586db856e97497791ab62", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -341,8 +341,8 @@ fn build_clone_shim<'tcx>(\n             let len = len.eval_usize(tcx, param_env);\n             builder.array_shim(dest, src, ty, len)\n         }\n-        ty::Closure(def_id, substs) => {\n-            builder.tuple_like_shim(dest, src, substs.as_closure().upvar_tys(def_id, tcx))\n+        ty::Closure(_, substs) => {\n+            builder.tuple_like_shim(dest, src, substs.as_closure().upvar_tys())\n         }\n         ty::Tuple(..) => builder.tuple_like_shim(dest, src, self_ty.tuple_fields()),\n         _ => bug!(\"clone shim for `{:?}` which is not `Copy` and is not an aggregate\", self_ty),"}, {"sha": "349cda831053f851cf487f634183d0ac8fe8c099", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1236,8 +1236,8 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n             ty::Generator(_, substs, movability) => {\n                 let substs = substs.as_generator();\n                 (\n-                    substs.upvar_tys(def_id, tcx).collect(),\n-                    substs.witness(def_id, tcx),\n+                    substs.upvar_tys().collect(),\n+                    substs.witness(),\n                     substs.discr_ty(tcx),\n                     movability == hir::Movability::Movable,\n                 )"}, {"sha": "14895ddfbe44f3a4985fa537c1ef3b86770d75b6", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -798,8 +798,8 @@ where\n     fn open_drop(&mut self) -> BasicBlock {\n         let ty = self.place_ty(self.place);\n         match ty.kind {\n-            ty::Closure(def_id, substs) => {\n-                let tys: Vec<_> = substs.as_closure().upvar_tys(def_id, self.tcx()).collect();\n+            ty::Closure(_, substs) => {\n+                let tys: Vec<_> = substs.as_closure().upvar_tys().collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             // Note that `elaborate_drops` only drops the upvars of a generator,\n@@ -808,8 +808,8 @@ where\n             // This should only happen for the self argument on the resume function.\n             // It effetively only contains upvars until the generator transformation runs.\n             // See librustc_body/transform/generator.rs for more details.\n-            ty::Generator(def_id, substs, _) => {\n-                let tys: Vec<_> = substs.as_generator().upvar_tys(def_id, self.tcx()).collect();\n+            ty::Generator(_, substs, _) => {\n+                let tys: Vec<_> = substs.as_generator().upvar_tys().collect();\n                 self.open_drop_for_tuple(&tys)\n             }\n             ty::Tuple(..) => {"}, {"sha": "d5daf465bb73da1dd9144635c094127a1d8230a3", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -140,9 +140,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n \n             let (yield_ty, return_ty) = if body.generator_kind.is_some() {\n                 let gen_sig = match ty.kind {\n-                    ty::Generator(gen_def_id, gen_substs, ..) => {\n-                        gen_substs.as_generator().sig(gen_def_id, tcx)\n-                    }\n+                    ty::Generator(_, gen_substs, ..) => gen_substs.as_generator().sig(),\n                     _ => span_bug!(tcx.hir().span(id), \"generator w/o generator type: {:?}\", ty),\n                 };\n                 (Some(gen_sig.yield_ty), gen_sig.return_ty)\n@@ -849,12 +847,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 closure_env_projs.push(ProjectionElem::Deref);\n                 closure_ty = ty;\n             }\n-            let (def_id, upvar_substs) = match closure_ty.kind {\n-                ty::Closure(def_id, substs) => (def_id, ty::UpvarSubsts::Closure(substs)),\n-                ty::Generator(def_id, substs, _) => (def_id, ty::UpvarSubsts::Generator(substs)),\n+            let upvar_substs = match closure_ty.kind {\n+                ty::Closure(_, substs) => ty::UpvarSubsts::Closure(substs),\n+                ty::Generator(_, substs, _) => ty::UpvarSubsts::Generator(substs),\n                 _ => span_bug!(self.fn_span, \"upvars with non-closure env ty {:?}\", closure_ty),\n             };\n-            let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n+            let upvar_tys = upvar_substs.upvar_tys();\n             let upvars_with_tys = upvars.iter().zip(upvar_tys);\n             self.upvar_mutbls = upvars_with_tys\n                 .enumerate()"}, {"sha": "148836e35c7e64d31ab542ef56b990aff5c417ab", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -387,7 +387,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                 .upvars(def_id)\n                 .iter()\n                 .flat_map(|upvars| upvars.iter())\n-                .zip(substs.upvar_tys(def_id, cx.tcx))\n+                .zip(substs.upvar_tys())\n                 .map(|((&var_hir_id, _), ty)| capture_upvar(cx, expr, var_hir_id, ty))\n                 .collect();\n             ExprKind::Closure { closure_id: def_id, substs, upvars, movability }\n@@ -830,7 +830,7 @@ fn convert_var<'tcx>(\n             let region = cx.tcx.mk_region(region);\n \n             let self_expr = if let ty::Closure(_, closure_substs) = closure_ty.kind {\n-                match cx.infcx.closure_kind(closure_def_id, closure_substs).unwrap() {\n+                match cx.infcx.closure_kind(closure_substs).unwrap() {\n                     ty::ClosureKind::Fn => {\n                         let ref_closure_ty = cx.tcx.mk_ref(\n                             region,"}, {"sha": "d680b9e002678167dcace9bf00a54233ffb02c63", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1038,7 +1038,7 @@ impl<'a, 'tcx> NamePrivacyVisitor<'a, 'tcx> {\n                 def.variant_descr(),\n                 self.tcx.def_path_str(def.did)\n             )\n-            .span_label(span, format!(\"field `{}` is private\", field.ident))\n+            .span_label(span, \"private field\")\n             .emit();\n         }\n     }\n@@ -1180,7 +1180,11 @@ impl<'a, 'tcx> TypePrivacyVisitor<'a, 'tcx> {\n     fn check_def_id(&mut self, def_id: DefId, kind: &str, descr: &dyn fmt::Display) -> bool {\n         let is_error = !self.item_is_accessible(def_id);\n         if is_error {\n-            self.tcx.sess.span_err(self.span, &format!(\"{} `{}` is private\", kind, descr));\n+            self.tcx\n+                .sess\n+                .struct_span_err(self.span, &format!(\"{} `{}` is private\", kind, descr))\n+                .span_label(self.span, &format!(\"private {}\", kind))\n+                .emit();\n         }\n         is_error\n     }\n@@ -1313,8 +1317,12 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                     hir::QPath::Resolved(_, ref path) => path.to_string(),\n                     hir::QPath::TypeRelative(_, ref segment) => segment.ident.to_string(),\n                 };\n-                let msg = format!(\"{} `{}` is private\", kind.descr(def_id), name);\n-                self.tcx.sess.span_err(span, &msg);\n+                let kind = kind.descr(def_id);\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(span, &format!(\"{} `{}` is private\", kind, name))\n+                    .span_label(span, &format!(\"private {}\", kind))\n+                    .emit();\n                 return;\n             }\n         }"}, {"sha": "db500a8b1fd5d7b570127a8d7dc0d15f6badb49f", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1149,7 +1149,14 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }))\n         } else {\n             let module = parent_scope.module;\n-            let vis = self.resolve_visibility(&item.vis);\n+            let vis = match item.kind {\n+                // Visibilities must not be resolved non-speculatively twice\n+                // and we already resolved this one as a `fn` item visibility.\n+                ItemKind::Fn(..) => self\n+                    .resolve_visibility_speculative(&item.vis, true)\n+                    .unwrap_or(ty::Visibility::Public),\n+                _ => self.resolve_visibility(&item.vis),\n+            };\n             if vis != ty::Visibility::Public {\n                 self.insert_unused_macro(ident, item.id, span);\n             }"}, {"sha": "9cd066b629c074f0f75cb9a068ed5a570bd37160", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -951,7 +951,7 @@ impl<'a> Resolver<'a> {\n         let descr = get_descr(binding);\n         let mut err =\n             struct_span_err!(self.session, ident.span, E0603, \"{} `{}` is private\", descr, ident);\n-        err.span_label(ident.span, &format!(\"this {} is private\", descr));\n+        err.span_label(ident.span, &format!(\"private {}\", descr));\n         if let Some(span) = ctor_fields_span {\n             err.span_label(span, \"a constructor is private if any of the fields is private\");\n         }"}, {"sha": "a8d4e7ce5f6ba6cc84b803e43468b5ac9c004adb", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -506,10 +506,10 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n \n         match (res, source) {\n             (Res::Def(DefKind::Macro(MacroKind::Bang), _), _) => {\n-                err.span_suggestion(\n-                    span,\n+                err.span_suggestion_verbose(\n+                    span.shrink_to_hi(),\n                     \"use `!` to invoke the macro\",\n-                    format!(\"{}!\", path_str),\n+                    \"!\".to_string(),\n                     Applicability::MaybeIncorrect,\n                 );\n                 if path_str == \"try\" && span.rust_2015() {"}, {"sha": "9cd97c34f3ba4d8abc41b8e1fbd784294bdcb0d6", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -423,7 +423,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n             for required_region in required_region_bounds {\n                 concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-                    tcx: self.tcx,\n                     op: |r| self.sub_regions(infer::CallReturn(span), required_region, r),\n                 });\n             }\n@@ -504,7 +503,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         }\n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            tcx: self.tcx,\n             op: |r| self.sub_regions(infer::CallReturn(span), least_region, r),\n         });\n     }\n@@ -541,7 +539,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         );\n \n         concrete_ty.visit_with(&mut ConstrainOpaqueTypeRegionVisitor {\n-            tcx: self.tcx,\n             op: |r| {\n                 self.member_constraint(\n                     opaque_type_def_id,\n@@ -682,15 +679,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n //\n // We ignore any type parameters because impl trait values are assumed to\n // capture all the in-scope type parameters.\n-struct ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n-where\n-    OP: FnMut(ty::Region<'tcx>),\n-{\n-    tcx: TyCtxt<'tcx>,\n+struct ConstrainOpaqueTypeRegionVisitor<OP> {\n     op: OP,\n }\n \n-impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<'tcx, OP>\n+impl<'tcx, OP> TypeVisitor<'tcx> for ConstrainOpaqueTypeRegionVisitor<OP>\n where\n     OP: FnMut(ty::Region<'tcx>),\n {\n@@ -717,27 +710,27 @@ where\n         }\n \n         match ty.kind {\n-            ty::Closure(def_id, ref substs) => {\n+            ty::Closure(_, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                for upvar_ty in substs.as_closure().upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_closure().upvar_tys() {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.as_closure().sig_as_fn_ptr_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_closure().sig_as_fn_ptr_ty().visit_with(self);\n             }\n \n-            ty::Generator(def_id, ref substs, _) => {\n+            ty::Generator(_, ref substs, _) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n                 // Also skip the witness type, because that has no free regions.\n \n-                for upvar_ty in substs.as_generator().upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in substs.as_generator().upvar_tys() {\n                     upvar_ty.visit_with(self);\n                 }\n \n-                substs.as_generator().return_ty(def_id, self.tcx).visit_with(self);\n-                substs.as_generator().yield_ty(def_id, self.tcx).visit_with(self);\n-                substs.as_generator().resume_ty(def_id, self.tcx).visit_with(self);\n+                substs.as_generator().return_ty().visit_with(self);\n+                substs.as_generator().yield_ty().visit_with(self);\n+                substs.as_generator().resume_ty().visit_with(self);\n             }\n             _ => {\n                 ty.super_visit_with(self);"}, {"sha": "b9ee991aa0226de1041b7086d346889287775fd5", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n \n                     ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n-                        let found_kind = self.closure_kind(closure_def_id, closure_substs).unwrap();\n+                        let found_kind = self.closure_kind(closure_substs).unwrap();\n                         let closure_span = self\n                             .tcx\n                             .sess\n@@ -815,11 +815,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // For example, if `expected_args_length` is 2, suggest `|_, _|`.\n             if found_args.is_empty() && is_closure {\n                 let underscores = vec![\"_\"; expected_args.len()].join(\", \");\n-                err.span_suggestion(\n+                err.span_suggestion_verbose(\n                     pipe_span,\n                     &format!(\n                         \"consider changing the closure to take and ignore the expected argument{}\",\n-                        if expected_args.len() < 2 { \"\" } else { \"s\" }\n+                        pluralize!(expected_args.len())\n                     ),\n                     format!(\"|{}|\", underscores),\n                     Applicability::MachineApplicable,\n@@ -833,7 +833,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .map(|(name, _)| name.to_owned())\n                         .collect::<Vec<String>>()\n                         .join(\", \");\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to take multiple arguments instead of a single tuple\",\n                         format!(\"|{}|\", sugg),\n@@ -870,7 +870,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             String::new()\n                         },\n                     );\n-                    err.span_suggestion(\n+                    err.span_suggestion_verbose(\n                         found_span,\n                         \"change the closure to accept a tuple instead of individual arguments\",\n                         sugg,\n@@ -1420,15 +1420,14 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         //    |\n                         //    = note: cannot resolve `_: Tt`\n \n-                        err.span_suggestion(\n-                            span,\n+                        err.span_suggestion_verbose(\n+                            span.shrink_to_hi(),\n                             &format!(\n                                 \"consider specifying the type argument{} in the function call\",\n-                                if generics.params.len() > 1 { \"s\" } else { \"\" },\n+                                pluralize!(generics.params.len()),\n                             ),\n                             format!(\n-                                \"{}::<{}>\",\n-                                snippet,\n+                                \"::<{}>\",\n                                 generics\n                                     .params\n                                     .iter()\n@@ -1590,7 +1589,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             [] => (span.shrink_to_hi(), \":\"),\n                             [.., bound] => (bound.span().shrink_to_hi(), \" + \"),\n                         };\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             span,\n                             \"consider relaxing the implicit `Sized` restriction\",\n                             format!(\"{} ?Sized\", separator),"}, {"sha": "22b8d0583966b10425bbc596bc252a7a65ff40b2", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -367,9 +367,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let self_ty = trait_ref.self_ty();\n         let (def_id, output_ty, callable) = match self_ty.kind {\n-            ty::Closure(def_id, substs) => {\n-                (def_id, substs.as_closure().sig(def_id, self.tcx).output(), \"closure\")\n-            }\n+            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n             _ => return,\n         };\n@@ -390,7 +388,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n         let hir = self.tcx.hir();\n         // Get the name of the callable and the arguments to be used in the suggestion.\n-        let snippet = match hir.get_if_local(def_id) {\n+        let (snippet, sugg) = match hir.get_if_local(def_id) {\n             Some(hir::Node::Expr(hir::Expr {\n                 kind: hir::ExprKind::Closure(_, decl, _, span, ..),\n                 ..\n@@ -401,7 +399,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     None => return,\n                 };\n                 let args = decl.inputs.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                format!(\"{}({})\", name, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", name, sugg), sugg)\n             }\n             Some(hir::Node::Item(hir::Item {\n                 ident,\n@@ -422,7 +421,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     })\n                     .collect::<Vec<_>>()\n                     .join(\", \");\n-                format!(\"{}({})\", ident, args)\n+                let sugg = format!(\"({})\", args);\n+                (format!(\"{}{}\", ident, sugg), sugg)\n             }\n             _ => return,\n         };\n@@ -431,10 +431,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // an argument, the `obligation.cause.span` points at the expression\n             // of the argument, so we can provide a suggestion. This is signaled\n             // by `points_at_arg`. Otherwise, we give a more general note.\n-            err.span_suggestion(\n-                obligation.cause.span,\n+            err.span_suggestion_verbose(\n+                obligation.cause.span.shrink_to_hi(),\n                 &msg,\n-                snippet,\n+                sugg,\n                 Applicability::HasPlaceholders,\n             );\n         } else {\n@@ -619,7 +619,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         .source_map()\n                         .span_take_while(span, |c| c.is_whitespace() || *c == '&');\n                     if points_at_arg && mutability == hir::Mutability::Not && refs_number > 0 {\n-                        err.span_suggestion(\n+                        err.span_suggestion_verbose(\n                             sp,\n                             \"consider changing this borrow's mutability\",\n                             \"&mut \".to_string(),"}, {"sha": "865a4ba866ea9620db21d37e7d32c91fedee2c51", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -445,8 +445,8 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 }\n             }\n \n-            ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n-                match self.selcx.infcx().closure_kind(closure_def_id, closure_substs) {\n+            ty::Predicate::ClosureKind(_, closure_substs, kind) => {\n+                match self.selcx.infcx().closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n                             ProcessResult::Changed(vec![])"}, {"sha": "26aaf12d359d98cb0570819ba5f6ff2e89db8725", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1237,7 +1237,7 @@ fn confirm_generator_candidate<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     vtable: VtableGeneratorData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n-    let gen_sig = vtable.substs.as_generator().poly_sig(vtable.generator_def_id, selcx.tcx());\n+    let gen_sig = vtable.substs.as_generator().poly_sig();\n     let Normalized { value: gen_sig, obligations } = normalize_with_depth(\n         selcx,\n         obligation.param_env,\n@@ -1310,8 +1310,7 @@ fn confirm_closure_candidate<'cx, 'tcx>(\n     obligation: &ProjectionTyObligation<'tcx>,\n     vtable: VtableClosureData<'tcx, PredicateObligation<'tcx>>,\n ) -> Progress<'tcx> {\n-    let tcx = selcx.tcx();\n-    let closure_sig = vtable.substs.as_closure().sig(vtable.closure_def_id, tcx);\n+    let closure_sig = vtable.substs.as_closure().sig();\n     let Normalized { value: closure_sig, obligations } = normalize_with_depth(\n         selcx,\n         obligation.param_env,"}, {"sha": "03c6cf35e8881b653cba96ad6c22f52a103102b2", "filename": "src/librustc_trait_selection/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -109,8 +109,8 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         // (T1..Tn) and closures have same properties as T1..Tn --\n         // check if *any* of those are trivial.\n         ty::Tuple(ref tys) => tys.iter().all(|t| trivial_dropck_outlives(tcx, t.expect_ty())),\n-        ty::Closure(def_id, ref substs) => {\n-            substs.as_closure().upvar_tys(def_id, tcx).all(|t| trivial_dropck_outlives(tcx, t))\n+        ty::Closure(_, ref substs) => {\n+            substs.as_closure().upvar_tys().all(|t| trivial_dropck_outlives(tcx, t))\n         }\n \n         ty::Adt(def, _) => {"}, {"sha": "2d6fabea6ec750e2187a4c0e04042b7fa34a2357", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -478,8 +478,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n             }\n \n-            ty::Predicate::ClosureKind(closure_def_id, closure_substs, kind) => {\n-                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n+            ty::Predicate::ClosureKind(_, closure_substs, kind) => {\n+                match self.infcx.closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         if closure_kind.extends(kind) {\n                             Ok(EvaluatedToOk)\n@@ -1600,9 +1600,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         match obligation.self_ty().skip_binder().kind {\n-            ty::Closure(closure_def_id, closure_substs) => {\n+            ty::Closure(_, closure_substs) => {\n                 debug!(\"assemble_unboxed_candidates: kind={:?} obligation={:?}\", kind, obligation);\n-                match self.infcx.closure_kind(closure_def_id, closure_substs) {\n+                match self.infcx.closure_kind(closure_substs) {\n                     Some(closure_kind) => {\n                         debug!(\"assemble_unboxed_candidates: closure_kind = {:?}\", closure_kind);\n                         if closure_kind.extends(kind) {\n@@ -2234,9 +2234,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Where(ty::Binder::bind(tys.iter().map(|k| k.expect_ty()).collect()))\n             }\n \n-            ty::Closure(def_id, substs) => {\n+            ty::Closure(_, substs) => {\n                 // (*) binder moved here\n-                Where(ty::Binder::bind(substs.as_closure().upvar_tys(def_id, self.tcx()).collect()))\n+                Where(ty::Binder::bind(substs.as_closure().upvar_tys().collect()))\n             }\n \n             ty::Adt(..) | ty::Projection(..) | ty::Param(..) | ty::Opaque(..) => {\n@@ -2313,17 +2313,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 tys.iter().map(|k| k.expect_ty()).collect()\n             }\n \n-            ty::Closure(def_id, ref substs) => {\n-                substs.as_closure().upvar_tys(def_id, self.tcx()).collect()\n-            }\n+            ty::Closure(_, ref substs) => substs.as_closure().upvar_tys().collect(),\n \n-            ty::Generator(def_id, ref substs, _) => {\n-                let witness = substs.as_generator().witness(def_id, self.tcx());\n-                substs\n-                    .as_generator()\n-                    .upvar_tys(def_id, self.tcx())\n-                    .chain(iter::once(witness))\n-                    .collect()\n+            ty::Generator(_, ref substs, _) => {\n+                let witness = substs.as_generator().witness();\n+                substs.as_generator().upvar_tys().chain(iter::once(witness)).collect()\n             }\n \n             ty::GeneratorWitness(types) => {\n@@ -2811,7 +2805,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         debug!(\"confirm_generator_candidate({:?},{:?},{:?})\", obligation, generator_def_id, substs);\n \n-        let trait_ref = self.generator_trait_ref_unnormalized(obligation, generator_def_id, substs);\n+        let trait_ref = self.generator_trait_ref_unnormalized(obligation, substs);\n         let Normalized { value: trait_ref, mut obligations } = normalize_with_depth(\n             self,\n             obligation.param_env,\n@@ -2856,7 +2850,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation),\n         };\n \n-        let trait_ref = self.closure_trait_ref_unnormalized(obligation, closure_def_id, substs);\n+        let trait_ref = self.closure_trait_ref_unnormalized(obligation, substs);\n         let Normalized { value: trait_ref, mut obligations } = normalize_with_depth(\n             self,\n             obligation.param_env,\n@@ -3338,14 +3332,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn closure_trait_ref_unnormalized(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        closure_def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n-        debug!(\n-            \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n-            obligation, closure_def_id, substs,\n-        );\n-        let closure_sig = substs.as_closure().sig(closure_def_id, self.tcx());\n+        debug!(\"closure_trait_ref_unnormalized(obligation={:?}, substs={:?})\", obligation, substs);\n+        let closure_sig = substs.as_closure().sig();\n \n         debug!(\"closure_trait_ref_unnormalized: closure_sig = {:?}\", closure_sig);\n \n@@ -3367,10 +3357,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn generator_trait_ref_unnormalized(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n-        closure_def_id: DefId,\n         substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n-        let gen_sig = substs.as_generator().poly_sig(closure_def_id, self.tcx());\n+        let gen_sig = substs.as_generator().poly_sig();\n \n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an generator type and hence is"}, {"sha": "ac2da006df35d746480e8b21ebc393322e4749e5", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -474,7 +474,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // generators don't take arguments.\n                 }\n \n-                ty::Closure(def_id, substs) => {\n+                ty::Closure(_, substs) => {\n                     // Only check the upvar types for WF, not the rest\n                     // of the types within. This is needed because we\n                     // capture the signature and it may not be WF\n@@ -505,7 +505,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // anyway, except via auto trait matching (which\n                     // only inspects the upvar types).\n                     subtys.skip_current_subtree(); // subtree handled by compute_projection\n-                    for upvar_ty in substs.as_closure().upvar_tys(def_id, self.infcx.tcx) {\n+                    for upvar_ty in substs.as_closure().upvar_tys() {\n                         self.compute(upvar_ty);\n                     }\n                 }"}, {"sha": "7068723f534e7f5551248de1fe607e071393c3e5", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -207,13 +207,13 @@ fn dtorck_constraint_for_ty<'tcx>(\n             }\n         }\n \n-        ty::Closure(def_id, substs) => {\n-            for ty in substs.as_closure().upvar_tys(def_id, tcx) {\n+        ty::Closure(_, substs) => {\n+            for ty in substs.as_closure().upvar_tys() {\n                 dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty, constraints)?;\n             }\n         }\n \n-        ty::Generator(def_id, substs, _movability) => {\n+        ty::Generator(_, substs, _movability) => {\n             // rust-lang/rust#49918: types can be constructed, stored\n             // in the interior, and sit idle when generator yields\n             // (and is subsequently dropped).\n@@ -240,10 +240,10 @@ fn dtorck_constraint_for_ty<'tcx>(\n             constraints.outlives.extend(\n                 substs\n                     .as_generator()\n-                    .upvar_tys(def_id, tcx)\n+                    .upvar_tys()\n                     .map(|t| -> ty::subst::GenericArg<'tcx> { t.into() }),\n             );\n-            constraints.outlives.push(substs.as_generator().resume_ty(def_id, tcx).into());\n+            constraints.outlives.push(substs.as_generator().resume_ty().into());\n         }\n \n         ty::Adt(def, substs) => {"}, {"sha": "37af8168f87d9d3f2529cdee6372e0ee113efb4d", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -93,8 +93,8 @@ where\n                 match component.kind {\n                     _ if component.is_copy_modulo_regions(tcx, self.param_env, DUMMY_SP) => (),\n \n-                    ty::Closure(def_id, substs) => {\n-                        for upvar_ty in substs.as_closure().upvar_tys(def_id, tcx) {\n+                    ty::Closure(_, substs) => {\n+                        for upvar_ty in substs.as_closure().upvar_tys() {\n                             queue_type(self, upvar_ty);\n                         }\n                     }"}, {"sha": "e812fa81e6252e22a170bf1b4aa44941295b14f2", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1452,8 +1452,13 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .expect(\"missing associated type\");\n \n         if !assoc_ty.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"associated type `{}` is private\", binding.item_name);\n-            tcx.sess.span_err(binding.span, &msg);\n+            tcx.sess\n+                .struct_span_err(\n+                    binding.span,\n+                    &format!(\"associated type `{}` is private\", binding.item_name),\n+                )\n+                .span_label(binding.span, \"private associated type\")\n+                .emit();\n         }\n         tcx.check_stability(assoc_ty.def_id, Some(hir_ref_id), binding.span);\n \n@@ -2315,8 +2320,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let kind = DefKind::AssocTy;\n         if !item.vis.is_accessible_from(def_scope, tcx) {\n-            let msg = format!(\"{} `{}` is private\", kind.descr(item.def_id), assoc_ident);\n-            tcx.sess.span_err(span, &msg);\n+            let kind = kind.descr(item.def_id);\n+            let msg = format!(\"{} `{}` is private\", kind, assoc_ident);\n+            tcx.sess\n+                .struct_span_err(span, &msg)\n+                .span_label(span, &format!(\"private {}\", kind))\n+                .emit();\n         }\n         tcx.check_stability(item.def_id, Some(hir_ref_id), span);\n "}, {"sha": "ec796043d3ac85c205fd7694b13f763f5a4d8453", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -104,8 +104,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Check whether this is a call to a closure where we\n                 // haven't yet decided on whether the closure is fn vs\n                 // fnmut vs fnonce. If so, we have to defer further processing.\n-                if self.closure_kind(def_id, substs).is_none() {\n-                    let closure_sig = substs.as_closure().sig(def_id, self.tcx);\n+                if self.closure_kind(substs).is_none() {\n+                    let closure_sig = substs.as_closure().sig();\n                     let closure_sig = self\n                         .replace_bound_vars_with_fresh_vars(\n                             call_expr.span,\n@@ -122,7 +122,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             adjusted_ty,\n                             adjustments,\n                             fn_sig: closure_sig,\n-                            closure_def_id: def_id,\n                             closure_substs: substs,\n                         },\n                     );\n@@ -459,7 +458,6 @@ pub struct DeferredCallResolution<'tcx> {\n     adjusted_ty: Ty<'tcx>,\n     adjustments: Vec<Adjustment<'tcx>>,\n     fn_sig: ty::FnSig<'tcx>,\n-    closure_def_id: DefId,\n     closure_substs: SubstsRef<'tcx>,\n }\n \n@@ -469,7 +467,7 @@ impl<'a, 'tcx> DeferredCallResolution<'tcx> {\n \n         // we should not be invoked until the closure kind has been\n         // determined by upvar inference\n-        assert!(fcx.closure_kind(self.closure_def_id, self.closure_substs).is_some());\n+        assert!(fcx.closure_kind(self.closure_substs).is_some());\n \n         // We may now know enough to figure out fn vs fnmut etc.\n         match fcx.try_overloaded_call_traits(self.call_expr, self.adjusted_ty, None) {"}, {"sha": "a277220b1a20095dafd999a0c02753efddb457db", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -77,45 +77,49 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let generator_types =\n             check_fn(self, self.param_env, liberated_sig, decl, expr.hir_id, body, gen).1;\n \n-        // Create type variables (for now) to represent the transformed\n-        // types of upvars. These will be unified during the upvar\n-        // inference phase (`upvar.rs`).\n         let base_substs =\n             InternalSubsts::identity_for_item(self.tcx, self.tcx.closure_base_def_id(expr_def_id));\n+        // HACK(eddyb) this hardcodes indices into substs but it should rely on\n+        // `ClosureSubsts` and `GeneratorSubsts` providing constructors, instead.\n+        // That would also remove the need for most of the inference variables,\n+        // as they immediately unified with the actual type below, including\n+        // the `InferCtxt::closure_sig` and `ClosureSubsts::sig_ty` methods.\n+        let tupled_upvars_idx = base_substs.len() + if generator_types.is_some() { 4 } else { 2 };\n         let substs = base_substs.extend_to(self.tcx, expr_def_id, |param, _| match param.kind {\n             GenericParamDefKind::Lifetime => span_bug!(expr.span, \"closure has lifetime param\"),\n-            GenericParamDefKind::Type { .. } => self\n-                .infcx\n-                .next_ty_var(TypeVariableOrigin {\n+            GenericParamDefKind::Type { .. } => if param.index as usize == tupled_upvars_idx {\n+                self.tcx.mk_tup(self.tcx.upvars(expr_def_id).iter().flat_map(|upvars| {\n+                    upvars.iter().map(|(&var_hir_id, _)| {\n+                        // Create type variables (for now) to represent the transformed\n+                        // types of upvars. These will be unified during the upvar\n+                        // inference phase (`upvar.rs`).\n+                        self.infcx.next_ty_var(TypeVariableOrigin {\n+                            // FIXME(eddyb) distinguish upvar inference variables from the rest.\n+                            kind: TypeVariableOriginKind::ClosureSynthetic,\n+                            span: self.tcx.hir().span(var_hir_id),\n+                        })\n+                    })\n+                }))\n+            } else {\n+                // Create type variables (for now) to represent the various\n+                // pieces of information kept in `{Closure,Generic}Substs`.\n+                // They will either be unified below, or later during the upvar\n+                // inference phase (`upvar.rs`)\n+                self.infcx.next_ty_var(TypeVariableOrigin {\n                     kind: TypeVariableOriginKind::ClosureSynthetic,\n                     span: expr.span,\n                 })\n-                .into(),\n+            }\n+            .into(),\n             GenericParamDefKind::Const => span_bug!(expr.span, \"closure has const param\"),\n         });\n         if let Some(GeneratorTypes { resume_ty, yield_ty, interior, movability }) = generator_types\n         {\n             let generator_substs = substs.as_generator();\n-            self.demand_eqtype(\n-                expr.span,\n-                resume_ty,\n-                generator_substs.resume_ty(expr_def_id, self.tcx),\n-            );\n-            self.demand_eqtype(\n-                expr.span,\n-                yield_ty,\n-                generator_substs.yield_ty(expr_def_id, self.tcx),\n-            );\n-            self.demand_eqtype(\n-                expr.span,\n-                liberated_sig.output(),\n-                generator_substs.return_ty(expr_def_id, self.tcx),\n-            );\n-            self.demand_eqtype(\n-                expr.span,\n-                interior,\n-                generator_substs.witness(expr_def_id, self.tcx),\n-            );\n+            self.demand_eqtype(expr.span, resume_ty, generator_substs.resume_ty());\n+            self.demand_eqtype(expr.span, yield_ty, generator_substs.yield_ty());\n+            self.demand_eqtype(expr.span, liberated_sig.output(), generator_substs.return_ty());\n+            self.demand_eqtype(expr.span, interior, generator_substs.witness());\n \n             // HACK(eddyb) this forces the types equated above into `substs` but\n             // it should rely on `GeneratorSubsts` providing a constructor, instead.\n@@ -142,18 +146,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         );\n \n         let sig_fn_ptr_ty = self.tcx.mk_fn_ptr(sig);\n-        self.demand_eqtype(\n-            expr.span,\n-            sig_fn_ptr_ty,\n-            substs.as_closure().sig_as_fn_ptr_ty(expr_def_id, self.tcx),\n-        );\n+        self.demand_eqtype(expr.span, sig_fn_ptr_ty, substs.as_closure().sig_as_fn_ptr_ty());\n \n         if let Some(kind) = opt_kind {\n-            self.demand_eqtype(\n-                expr.span,\n-                kind.to_ty(self.tcx),\n-                substs.as_closure().kind_ty(expr_def_id, self.tcx),\n-            );\n+            self.demand_eqtype(expr.span, kind.to_ty(self.tcx), substs.as_closure().kind_ty());\n         }\n \n         // HACK(eddyb) this forces the types equated above into `substs` but"}, {"sha": "33fc18b4b6e689ed5aa36b804ed4007318df67c5", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -62,7 +62,6 @@ use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeAndMut};\n use rustc_errors::{struct_span_err, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def_id::DefId;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{Coercion, InferOk, InferResult};\n use rustc_session::parse::feature_err;\n@@ -236,11 +235,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                 // unsafe qualifier.\n                 self.coerce_from_fn_pointer(a, a_f, b)\n             }\n-            ty::Closure(def_id_a, substs_a) => {\n+            ty::Closure(_, substs_a) => {\n                 // Non-capturing closures are coercible to\n                 // function pointers or unsafe function pointers.\n                 // It cannot convert closures that require unsafe.\n-                self.coerce_closure_to_fn(a, def_id_a, substs_a, b)\n+                self.coerce_closure_to_fn(a, substs_a, b)\n             }\n             _ => {\n                 // Otherwise, just use unification rules.\n@@ -732,7 +731,6 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     fn coerce_closure_to_fn(\n         &self,\n         a: Ty<'tcx>,\n-        def_id_a: DefId,\n         substs_a: SubstsRef<'tcx>,\n         b: Ty<'tcx>,\n     ) -> CoerceResult<'tcx> {\n@@ -743,14 +741,14 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         let b = self.shallow_resolve(b);\n \n         match b.kind {\n-            ty::FnPtr(fn_ty) if self.tcx.upvars(def_id_a).map_or(true, |v| v.is_empty()) => {\n+            ty::FnPtr(fn_ty) if substs_a.as_closure().upvar_tys().next().is_none() => {\n                 // We coerce the closure, which has fn type\n                 //     `extern \"rust-call\" fn((arg0,arg1,...)) -> _`\n                 // to\n                 //     `fn(arg0,arg1,...) -> _`\n                 // or\n                 //     `unsafe fn(arg0,arg1,...) -> _`\n-                let closure_sig = substs_a.as_closure().sig(def_id_a, self.tcx);\n+                let closure_sig = substs_a.as_closure().sig();\n                 let unsafety = fn_ty.unsafety();\n                 let pointer_ty = self.tcx.coerce_closure_fn_ty(closure_sig, unsafety);\n                 debug!(\"coerce_closure_to_fn(a={:?}, b={:?}, pty={:?})\", a, b, pointer_ty);"}, {"sha": "b42f74cced98e84ba50b0fd99ec628a8121fb2b2", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1580,13 +1580,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n         let mut err = struct_span_err!(\n             self.tcx().sess,\n-            expr.span,\n+            field.span,\n             E0616,\n             \"field `{}` of {} `{}` is private\",\n             field,\n             kind_name,\n             struct_path\n         );\n+        err.span_label(field.span, \"private field\");\n         // Also check if an accessible method exists, which is often what is meant.\n         if self.method_exists(field, expr_t, expr.hir_id, false) && !self.expr_in_place(expr.hir_id)\n         {\n@@ -1611,7 +1612,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             field,\n             expr_t\n         );\n-\n+        err.span_label(field.span, \"method, not a field\");\n         if !self.expr_in_place(expr.hir_id) {\n             self.suggest_method_call(\n                 &mut err,"}, {"sha": "962f9807546ac5ae614651f1e7a933876d6194c1", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self_ty: Ty<'tcx>,\n         call_expr: &hir::Expr<'_>,\n     ) {\n-        let has_params = self\n+        let params = self\n             .probe_for_name(\n                 method_name.span,\n                 probe::Mode::MethodCall,\n@@ -147,26 +147,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 call_expr.hir_id,\n                 ProbeScope::TraitsInScope,\n             )\n-            .and_then(|pick| {\n+            .map(|pick| {\n                 let sig = self.tcx.fn_sig(pick.item.def_id);\n-                Ok(sig.inputs().skip_binder().len() > 1)\n-            });\n+                sig.inputs().skip_binder().len().saturating_sub(1)\n+            })\n+            .unwrap_or(0);\n \n         // Account for `foo.bar<T>`;\n-        let sugg_span = method_name.span.with_hi(call_expr.span.hi());\n-        let snippet = self\n-            .tcx\n-            .sess\n-            .source_map()\n-            .span_to_snippet(sugg_span)\n-            .unwrap_or_else(|_| method_name.to_string());\n-        let (suggestion, applicability) = if has_params.unwrap_or_default() {\n-            (format!(\"{}(...)\", snippet), Applicability::HasPlaceholders)\n-        } else {\n-            (format!(\"{}()\", snippet), Applicability::MaybeIncorrect)\n-        };\n+        let sugg_span = call_expr.span.shrink_to_hi();\n+        let (suggestion, applicability) = (\n+            format!(\"({})\", (0..params).map(|_| \"_\").collect::<Vec<_>>().join(\", \")),\n+            if params > 0 { Applicability::HasPlaceholders } else { Applicability::MaybeIncorrect },\n+        );\n \n-        err.span_suggestion(sugg_span, msg, suggestion, applicability);\n+        err.span_suggestion_verbose(sugg_span, msg, suggestion, applicability);\n     }\n \n     /// Performs method lookup. If lookup is successful, it will return the callee"}, {"sha": "68996f5aaf973c68aaa4e6c3c3a3aea357347f3e", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -758,25 +758,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             MethodError::Ambiguity(sources) => {\n                 let mut err = struct_span_err!(\n                     self.sess(),\n-                    span,\n+                    item_name.span,\n                     E0034,\n                     \"multiple applicable items in scope\"\n                 );\n-                err.span_label(span, format!(\"multiple `{}` found\", item_name));\n+                err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n                 report_candidates(span, &mut err, sources, sugg_span);\n                 err.emit();\n             }\n \n             MethodError::PrivateMatch(kind, def_id, out_of_scope_traits) => {\n+                let kind = kind.descr(def_id);\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,\n-                    span,\n+                    item_name.span,\n                     E0624,\n                     \"{} `{}` is private\",\n-                    kind.descr(def_id),\n+                    kind,\n                     item_name\n                 );\n+                err.span_label(item_name.span, &format!(\"private {}\", kind));\n                 self.suggest_valid_traits(&mut err, out_of_scope_traits);\n                 err.emit();\n             }"}, {"sha": "3aa76a46f60f2e738daaf8b974ff74f7c9b00336", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -4831,7 +4831,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let hir = self.tcx.hir();\n         let (def_id, sig) = match found.kind {\n             ty::FnDef(def_id, _) => (def_id, found.fn_sig(self.tcx)),\n-            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig(def_id, self.tcx)),\n+            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig()),\n             _ => return false,\n         };\n \n@@ -4939,15 +4939,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n                 _ => {}\n             }\n-            if let Ok(code) = self.sess().source_map().span_to_snippet(expr.span) {\n-                err.span_suggestion(\n-                    expr.span,\n-                    &format!(\"use parentheses to {}\", msg),\n-                    format!(\"{}({})\", code, sugg_call),\n-                    applicability,\n-                );\n-                return true;\n-            }\n+            err.span_suggestion_verbose(\n+                expr.span.shrink_to_hi(),\n+                &format!(\"use parentheses to {}\", msg),\n+                format!(\"({})\", sugg_call),\n+                applicability,\n+            );\n+            return true;\n         }\n         false\n     }"}, {"sha": "0d38fa98bd7f8e32c6ddb0de5692b54fbbb566ae", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -753,17 +753,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         res.descr(),\n                     ),\n                 );\n-                let (msg, sugg) = match parent_pat {\n-                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => (\n-                        \"bind the struct field to a different name instead\",\n-                        format!(\"{}: other_{}\", ident, ident.as_str().to_lowercase()),\n-                    ),\n-                    _ => (\n-                        \"introduce a new binding instead\",\n-                        format!(\"other_{}\", ident.as_str().to_lowercase()),\n-                    ),\n+                match parent_pat {\n+                    Some(Pat { kind: hir::PatKind::Struct(..), .. }) => {\n+                        e.span_suggestion_verbose(\n+                            ident.span.shrink_to_hi(),\n+                            \"bind the struct field to a different name instead\",\n+                            format!(\": other_{}\", ident.as_str().to_lowercase()),\n+                            Applicability::HasPlaceholders,\n+                        );\n+                    }\n+                    _ => {\n+                        let msg = \"introduce a new binding instead\";\n+                        let sugg = format!(\"other_{}\", ident.as_str().to_lowercase());\n+                        e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n+                    }\n                 };\n-                e.span_suggestion(ident.span, msg, sugg, Applicability::HasPlaceholders);\n             }\n         }\n         e.emit();"}, {"sha": "a1345895689e0e5c50dc01e2a08baa29eb50e921", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1228,8 +1228,8 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n \n         // A closure capture can't be borrowed for longer than the\n         // reference to the closure.\n-        if let ty::Closure(closure_def_id, substs) = ty.kind {\n-            match self.infcx.closure_kind(closure_def_id, substs) {\n+        if let ty::Closure(_, substs) = ty.kind {\n+            match self.infcx.closure_kind(substs) {\n                 Some(ty::ClosureKind::Fn) | Some(ty::ClosureKind::FnMut) => {\n                     // Region of environment pointer\n                     let env_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {"}, {"sha": "ff4e2cdab78d79d080632cbf91a3d34ebe711bd3", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let infer_kind = if let UpvarSubsts::Closure(closure_substs) = substs {\n-            self.closure_kind(closure_def_id, closure_substs).is_none().then_some(closure_substs)\n+            self.closure_kind(closure_substs).is_none().then_some(closure_substs)\n         } else {\n             None\n         };\n@@ -168,7 +168,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Unify the (as yet unbound) type variable in the closure\n             // substs with the kind we inferred.\n             let inferred_kind = delegate.current_closure_kind;\n-            let closure_kind_ty = closure_substs.as_closure().kind_ty(closure_def_id, self.tcx);\n+            let closure_kind_ty = closure_substs.as_closure().kind_ty();\n             self.demand_eqtype(span, inferred_kind.to_ty(self.tcx), closure_kind_ty);\n \n             // If we have an origin, store it.\n@@ -197,9 +197,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             \"analyze_closure: id={:?} substs={:?} final_upvar_tys={:?}\",\n             closure_hir_id, substs, final_upvar_tys\n         );\n-        for (upvar_ty, final_upvar_ty) in\n-            substs.upvar_tys(closure_def_id, self.tcx).zip(final_upvar_tys)\n-        {\n+        for (upvar_ty, final_upvar_ty) in substs.upvar_tys().zip(final_upvar_tys) {\n             self.demand_suptype(span, upvar_ty, final_upvar_ty);\n         }\n "}, {"sha": "e5f4e2fa97790e4ca044ced0ac2806c38ada0381", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1374,9 +1374,9 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n     // and we don't do that for closures.\n     if let Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(.., gen), .. }) = node {\n         let dummy_args = if gen.is_some() {\n-            &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\"][..]\n+            &[\"<resume_ty>\", \"<yield_ty>\", \"<return_ty>\", \"<witness>\", \"<upvars>\"][..]\n         } else {\n-            &[\"<closure_kind>\", \"<closure_signature>\"][..]\n+            &[\"<closure_kind>\", \"<closure_signature>\", \"<upvars>\"][..]\n         };\n \n         params.extend(dummy_args.iter().enumerate().map(|(i, &arg)| ty::GenericParamDef {\n@@ -1390,22 +1390,6 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n                 synthetic: None,\n             },\n         }));\n-\n-        if let Some(upvars) = tcx.upvars(def_id) {\n-            params.extend(upvars.iter().zip((dummy_args.len() as u32)..).map(|(_, i)| {\n-                ty::GenericParamDef {\n-                    index: type_start + i,\n-                    name: Symbol::intern(\"<upvar>\"),\n-                    def_id,\n-                    pure_wrt_drop: false,\n-                    kind: ty::GenericParamDefKind::Type {\n-                        has_default: false,\n-                        object_lifetime_default: rl::Set1::Empty,\n-                        synthetic: None,\n-                    },\n-                }\n-            }));\n-        }\n     }\n \n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();"}, {"sha": "c5e32afbbce400f9bc44a8dc878f1adb902dd83f", "filename": "src/test/ui/associated-const/associated-const-ambiguity-report.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-ambiguity-report.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/associated-const-ambiguity-report.rs:17:16\n+  --> $DIR/associated-const-ambiguity-report.rs:17:23\n    |\n LL | const X: i32 = <i32>::ID;\n-   |                ^^^^^^^^^ multiple `ID` found\n+   |                       ^^ multiple `ID` found\n    |\n note: candidate #1 is defined in an impl of the trait `Foo` for the type `i32`\n   --> $DIR/associated-const-ambiguity-report.rs:10:5"}, {"sha": "1b9d7ac7e6c3f2e0d6e5247ca84e8b7bf09ee7b8", "filename": "src/test/ui/associated-const/associated-const-private-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-private-impl.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated constant `ID` is private\n-  --> $DIR/associated-const-private-impl.rs:13:19\n+  --> $DIR/associated-const-private-impl.rs:13:30\n    |\n LL |     assert_eq!(1, bar1::Foo::ID);\n-   |                   ^^^^^^^^^^^^^\n+   |                              ^^ private associated constant\n \n error: aborting due to previous error\n "}, {"sha": "7977e529a11a6c140a94b503899af83ff4003dd3", "filename": "src/test/ui/error-codes/E0034.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0034.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/E0034.rs:20:5\n+  --> $DIR/E0034.rs:20:11\n    |\n LL |     Test::foo()\n-   |     ^^^^^^^^^ multiple `foo` found\n+   |           ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `Trait1` for the type `Test`\n   --> $DIR/E0034.rs:12:5"}, {"sha": "bb92c23e0f600b613f77d39fb6453eaa8d29f182", "filename": "src/test/ui/error-codes/E0451.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0451.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,13 +2,13 @@ error[E0451]: field `b` of struct `bar::Foo` is private\n   --> $DIR/E0451.rs:14:21\n    |\n LL |     let bar::Foo{a, b} = foo;\n-   |                     ^ field `b` is private\n+   |                     ^ private field\n \n error[E0451]: field `b` of struct `bar::Foo` is private\n   --> $DIR/E0451.rs:18:29\n    |\n LL |     let f = bar::Foo{ a: 0, b: 0 };\n-   |                             ^^^^ field `b` is private\n+   |                             ^^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ee902584f56dac23028d5be6ef1a01c840a5223e", "filename": "src/test/ui/error-codes/E0603.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0603.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `PRIVATE` is private\n   --> $DIR/E0603.rs:6:17\n    |\n LL |     SomeModule::PRIVATE;\n-   |                 ^^^^^^^ this constant is private\n+   |                 ^^^^^^^ private constant\n    |\n note: the constant `PRIVATE` is defined here\n   --> $DIR/E0603.rs:2:5"}, {"sha": "1bc047dd356e03547dac219ec2692fda245cdddd", "filename": "src/test/ui/error-codes/E0615.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0615.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `method` on type `Foo`\n   --> $DIR/E0615.rs:11:7\n    |\n LL |     f.method;\n-   |       ^^^^^^ help: use parentheses to call the method: `method()`\n+   |       ^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     f.method();\n+   |             ^^\n \n error: aborting due to previous error\n "}, {"sha": "422bf687e7bd43c080daf65f2d56db62f9e99494", "filename": "src/test/ui/error-codes/E0616.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0616.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `x` of struct `a::Foo` is private\n-  --> $DIR/E0616.rs:13:5\n+  --> $DIR/E0616.rs:13:7\n    |\n LL |     f.x;\n-   |     ^^^\n+   |       ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "1d3336fb181a06778af862ecf457850ae2f1c893", "filename": "src/test/ui/error-codes/E0624.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0624.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `method` is private\n   --> $DIR/E0624.rs:11:9\n    |\n LL |     foo.method();\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "2d22bb395140b369966d033ce7c4ed1964b39384", "filename": "src/test/ui/error-codes/ex-E0611.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2Fex-E0611.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `0` of struct `a::Foo` is private\n-  --> $DIR/ex-E0611.rs:11:4\n+  --> $DIR/ex-E0611.rs:11:6\n    |\n LL |    y.0;\n-   |    ^^^\n+   |      ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "7f524230ef00633a7ecc45a9a0273a596744be5c", "filename": "src/test/ui/error-festival.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-festival.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ferror-festival.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-festival.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ error[E0603]: constant `FOO` is private\n   --> $DIR/error-festival.rs:22:10\n    |\n LL |     foo::FOO;\n-   |          ^^^ this constant is private\n+   |          ^^^ private constant\n    |\n note: the constant `FOO` is defined here\n   --> $DIR/error-festival.rs:7:5"}, {"sha": "1855c0b14379d0a96d435695743d080d46eca27a", "filename": "src/test/ui/explore-issue-38412.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplore-issue-38412.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -17,22 +17,22 @@ LL |     r.a_unstable_undeclared_pub;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `b_crate` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:31:5\n+  --> $DIR/explore-issue-38412.rs:31:7\n    |\n LL |     r.b_crate;\n-   |     ^^^^^^^^^\n+   |       ^^^^^^^ private field\n \n error[E0616]: field `c_mod` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:32:5\n+  --> $DIR/explore-issue-38412.rs:32:7\n    |\n LL |     r.c_mod;\n-   |     ^^^^^^^\n+   |       ^^^^^ private field\n \n error[E0616]: field `d_priv` of struct `pub_and_stability::Record` is private\n-  --> $DIR/explore-issue-38412.rs:33:5\n+  --> $DIR/explore-issue-38412.rs:33:7\n    |\n LL |     r.d_priv;\n-   |     ^^^^^^^^\n+   |       ^^^^^^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:37:5\n@@ -44,22 +44,22 @@ LL |     t.2;\n    = help: add `#![feature(unstable_undeclared)]` to the crate attributes to enable\n \n error[E0616]: field `3` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:38:5\n+  --> $DIR/explore-issue-38412.rs:38:7\n    |\n LL |     t.3;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `4` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:39:5\n+  --> $DIR/explore-issue-38412.rs:39:7\n    |\n LL |     t.4;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `5` of struct `pub_and_stability::Tuple` is private\n-  --> $DIR/explore-issue-38412.rs:40:5\n+  --> $DIR/explore-issue-38412.rs:40:7\n    |\n LL |     t.5;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:44:7\n@@ -83,19 +83,19 @@ error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:50:7\n    |\n LL |     r.pub_crate();\n-   |       ^^^^^^^^^\n+   |       ^^^^^^^^^ private associated function\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:51:7\n    |\n LL |     r.pub_mod();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:52:7\n    |\n LL |     r.private();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0658]: use of unstable library feature 'unstable_undeclared'\n   --> $DIR/explore-issue-38412.rs:57:7\n@@ -119,19 +119,19 @@ error[E0624]: associated function `pub_crate` is private\n   --> $DIR/explore-issue-38412.rs:63:7\n    |\n LL |     t.pub_crate();\n-   |       ^^^^^^^^^\n+   |       ^^^^^^^^^ private associated function\n \n error[E0624]: associated function `pub_mod` is private\n   --> $DIR/explore-issue-38412.rs:64:7\n    |\n LL |     t.pub_mod();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error[E0624]: associated function `private` is private\n   --> $DIR/explore-issue-38412.rs:65:7\n    |\n LL |     t.private();\n-   |       ^^^^^^^\n+   |       ^^^^^^^ private associated function\n \n error: aborting due to 19 previous errors\n "}, {"sha": "753424c7f88b893000a3a3c9827582a04abded1f", "filename": "src/test/ui/export-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-import.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `unexported` is private\n   --> $DIR/export-import.rs:1:8\n    |\n LL | use m::unexported;\n-   |        ^^^^^^^^^^ this function is private\n+   |        ^^^^^^^^^^ private function\n    |\n note: the function `unexported` is defined here\n   --> $DIR/export-import.rs:7:5"}, {"sha": "f73bd454d35922495ee755c3d999e1ce1acc3a81", "filename": "src/test/ui/export-tag-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport-tag-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport-tag-variant.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Y` is private\n   --> $DIR/export-tag-variant.rs:7:26\n    |\n LL | fn main() { let z = foo::Y::Y1; }\n-   |                          ^ this enum is private\n+   |                          ^ private enum\n    |\n note: the enum `Y` is defined here\n   --> $DIR/export-tag-variant.rs:4:5"}, {"sha": "23c29b31c6a8eeb8fb34b6cc073f3b7994e1852f", "filename": "src/test/ui/export.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexport.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -26,7 +26,7 @@ error[E0603]: function `z` is private\n   --> $DIR/export.rs:10:18\n    |\n LL | fn main() { foo::z(10); }\n-   |                  ^ this function is private\n+   |                  ^ private function\n    |\n note: the function `z` is defined here\n   --> $DIR/export.rs:5:5"}, {"sha": "9eeb83ae1a73f48252f8d8538b10a29f9db58a7c", "filename": "src/test/ui/extern/extern-crate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-crate-visibility.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: crate import `core` is private\n   --> $DIR/extern-crate-visibility.rs:6:10\n    |\n LL | use foo::core::cell;\n-   |          ^^^^ this crate import is private\n+   |          ^^^^ private crate import\n    |\n note: the crate import `core` is defined here\n   --> $DIR/extern-crate-visibility.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: crate import `core` is private\n   --> $DIR/extern-crate-visibility.rs:9:10\n    |\n LL |     foo::core::cell::Cell::new(0);\n-   |          ^^^^ this crate import is private\n+   |          ^^^^ private crate import\n    |\n note: the crate import `core` is defined here\n   --> $DIR/extern-crate-visibility.rs:2:5"}, {"sha": "871757ec7b0c698e22aea5bc002179dc3c2cdaa2", "filename": "src/test/ui/extern/extern-types-unsized.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-types-unsized.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `A` cannot be known at compilation tim\n   --> $DIR/extern-types-unsized.rs:22:20\n    |\n LL | fn assert_sized<T>() { }\n-   |    ------------ -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |                 |\n-   |                 required by this bound in `assert_sized`\n+   |    ------------ - required by this bound in `assert_sized`\n ...\n LL |     assert_sized::<A>();\n    |                    ^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `A`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn assert_sized<T: ?Sized>() { }\n+   |                  ^^^^^^^^\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/extern-types-unsized.rs:25:5"}, {"sha": "19703fc99fd27070c58802df4301adfe2e3483ed", "filename": "src/test/ui/functional-struct-update/functional-struct-update-respects-privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffunctional-struct-update%2Ffunctional-struct-update-respects-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `secret_uid` of struct `foo::S` is private\n   --> $DIR/functional-struct-update-respects-privacy.rs:28:49\n    |\n LL |     let s_2 = foo::S { b: format!(\"ess two\"), ..s_1 }; // FRU ...\n-   |                                                 ^^^ field `secret_uid` is private\n+   |                                                 ^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "6d784408016f5c88c6ee4b4eaf201979d97db25b", "filename": "src/test/ui/hygiene/fields.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ffields.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: type `foo::S` is private\n   --> $DIR/fields.rs:15:17\n    |\n LL |         let s = S { x: 0 };\n-   |                 ^^^^^^^^^^\n+   |                 ^^^^^^^^^^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `foo::S` is private\n   --> $DIR/fields.rs:16:17\n    |\n LL |         let _ = s.x;\n-   |                 ^\n+   |                 ^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `foo::T` is private\n   --> $DIR/fields.rs:18:17\n    |\n LL |         let t = T(0);\n-   |                 ^^^^\n+   |                 ^^^^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: type `foo::T` is private\n   --> $DIR/fields.rs:19:17\n    |\n LL |         let _ = t.0;\n-   |                 ^\n+   |                 ^ private type\n ...\n LL |     let s = foo::m!(S, x);\n    |             ------------- in this macro invocation"}, {"sha": "8ac59263cf21a247d029aee8a80a0000ce45aed3", "filename": "src/test/ui/hygiene/impl_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fimpl_items.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r foo::S) {foo::S::f}` is private\n   --> $DIR/impl_items.rs:12:23\n    |\n LL |         let _: () = S.f();\n-   |                       ^\n+   |                       ^ private type\n ...\n LL |     foo::m!();\n    |     ---------- in this macro invocation"}, {"sha": "c27ba74a263e01b858f60d1971a76d4db98412b8", "filename": "src/test/ui/hygiene/intercrate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fintercrate.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: type `fn() -> u32 {intercrate::foo::bar::f}` is private\n   --> $DIR/intercrate.rs:10:16\n    |\n LL |     assert_eq!(intercrate::foo::m!(), 1);\n-   |                ^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "482957a326437eaca84528d07ab8abc979b6f099", "filename": "src/test/ui/hygiene/nested_macro_privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fnested_macro_privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `i` of struct `foo::S` is private\n-  --> $DIR/nested_macro_privacy.rs:15:5\n+  --> $DIR/nested_macro_privacy.rs:15:18\n    |\n LL |     S::default().i;\n-   |     ^^^^^^^^^^^^^^\n+   |                  ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "70a24304dda3338dcb73714bc0247566e0560249", "filename": "src/test/ui/hygiene/privacy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fprivacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `f` is private\n   --> $DIR/privacy.rs:16:14\n    |\n LL |         foo::f()\n-   |              ^ this function is private\n+   |              ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/privacy.rs:4:5"}, {"sha": "024ce8207601e9db8c01e33b9d85d12976659e3e", "filename": "src/test/ui/hygiene/rustc-macro-transparency.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Frustc-macro-transparency.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,13 +8,23 @@ error[E0423]: expected value, found macro `semitransparent`\n   --> $DIR/rustc-macro-transparency.rs:29:5\n    |\n LL |     semitransparent;\n-   |     ^^^^^^^^^^^^^^^ help: use `!` to invoke the macro: `semitransparent!`\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     semitransparent!;\n+   |                    ^\n \n error[E0423]: expected value, found macro `opaque`\n   --> $DIR/rustc-macro-transparency.rs:30:5\n    |\n LL |     opaque;\n-   |     ^^^^^^ help: use `!` to invoke the macro: `opaque!`\n+   |     ^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     opaque!;\n+   |           ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c6af47805ea5bdfd4f5983f5d2d0cc094528835a", "filename": "src/test/ui/implicit-method-bind.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplicit-method-bind.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `abs` on type `i32`\n   --> $DIR/implicit-method-bind.rs:2:20\n    |\n LL |     let _f = 10i32.abs;\n-   |                    ^^^ help: use parentheses to call the method: `abs()`\n+   |                    ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _f = 10i32.abs();\n+   |                       ^^\n \n error: aborting due to previous error\n "}, {"sha": "797712e2db99e92f0af176e0a94f534fe1579eae", "filename": "src/test/ui/import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimport.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -17,7 +17,7 @@ error[E0603]: unresolved item import `foo` is private\n   --> $DIR/import.rs:15:10\n    |\n LL |     zed::foo();\n-   |          ^^^ this unresolved item import is private\n+   |          ^^^ private unresolved item import\n    |\n note: the unresolved item import `foo` is defined here\n   --> $DIR/import.rs:10:9"}, {"sha": "5adbc4b66d1336ba5270b7dbf0fd89faadccd9ff", "filename": "src/test/ui/imports/issue-55884-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-55884-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct import `ParseOptions` is private\n   --> $DIR/issue-55884-2.rs:12:17\n    |\n LL | pub use parser::ParseOptions;\n-   |                 ^^^^^^^^^^^^ this struct import is private\n+   |                 ^^^^^^^^^^^^ private struct import\n    |\n note: the struct import `ParseOptions` is defined here...\n   --> $DIR/issue-55884-2.rs:9:9"}, {"sha": "79c8e1130c87afe576e2fa9d5408713350892ad8", "filename": "src/test/ui/imports/reexports.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Freexports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Freexports.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,7 +14,7 @@ error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:33:15\n    |\n LL |     use b::a::foo::S;\n-   |               ^^^ this module import is private\n+   |               ^^^ private module import\n    |\n note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:21:17\n@@ -31,7 +31,7 @@ error[E0603]: module import `foo` is private\n   --> $DIR/reexports.rs:34:15\n    |\n LL |     use b::b::foo::S as T;\n-   |               ^^^ this module import is private\n+   |               ^^^ private module import\n    |\n note: the module import `foo` is defined here...\n   --> $DIR/reexports.rs:26:17"}, {"sha": "ddf3608933909d7f6bfb6d28f360aa3b0e05624c", "filename": "src/test/ui/imports/unresolved-imports-used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Funresolved-imports-used.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -38,7 +38,7 @@ error[E0603]: function `quz` is private\n   --> $DIR/unresolved-imports-used.rs:9:10\n    |\n LL | use qux::quz;\n-   |          ^^^ this function is private\n+   |          ^^^ private function\n    |\n note: the function `quz` is defined here\n   --> $DIR/unresolved-imports-used.rs:5:4"}, {"sha": "f1da33eaba1c35062393659f1a8139033deda121", "filename": "src/test/ui/issues/issue-10545.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10545.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct `S` is private\n   --> $DIR/issue-10545.rs:6:14\n    |\n LL | fn foo(_: a::S) {\n-   |              ^ this struct is private\n+   |              ^ private struct\n    |\n note: the struct `S` is defined here\n   --> $DIR/issue-10545.rs:2:5"}, {"sha": "aa9768b1885a23c13915d5ef0683769aa3c96552", "filename": "src/test/ui/issues/issue-11593.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11593.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: trait `Foo` is private\n   --> $DIR/issue-11593.rs:7:24\n    |\n LL | impl private_trait_xc::Foo for Bar {}\n-   |                        ^^^ this trait is private\n+   |                        ^^^ private trait\n    |\n note: the trait `Foo` is defined here\n   --> $DIR/auxiliary/private-trait-xc.rs:1:1"}, {"sha": "ea224af8ed7e246a9c2dde58e04448ba3bec9066", "filename": "src/test/ui/issues/issue-11680.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11680.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Foo` is private\n   --> $DIR/issue-11680.rs:6:21\n    |\n LL |     let _b = other::Foo::Bar(1);\n-   |                     ^^^ this enum is private\n+   |                     ^^^ private enum\n    |\n note: the enum `Foo` is defined here\n   --> $DIR/auxiliary/issue-11680.rs:1:1\n@@ -14,7 +14,7 @@ error[E0603]: enum `Foo` is private\n   --> $DIR/issue-11680.rs:9:27\n    |\n LL |     let _b = other::test::Foo::Bar(1);\n-   |                           ^^^ this enum is private\n+   |                           ^^^ private enum\n    |\n note: the enum `Foo` is defined here\n   --> $DIR/auxiliary/issue-11680.rs:6:5"}, {"sha": "f30b6cdeaf073d4686258b481b26906481513544", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: unit struct `C` is private\n   --> $DIR/issue-13407.rs:6:8\n    |\n LL |     A::C = 1;\n-   |        ^ this unit struct is private\n+   |        ^ private unit struct\n    |\n note: the unit struct `C` is defined here\n   --> $DIR/issue-13407.rs:2:5"}, {"sha": "cdd0772d39fb04625891a318375c095c803db37f", "filename": "src/test/ui/issues/issue-13641.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13641.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/issue-13641.rs:9:8\n    |\n LL |     a::Foo::new();\n-   |        ^^^ this struct is private\n+   |        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/issue-13641.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/issue-13641.rs:11:8\n    |\n LL |     a::Bar::new();\n-   |        ^^^ this enum is private\n+   |        ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/issue-13641.rs:4:5"}, {"sha": "49b946b354e53a8b51ed38c7d073ddac14a38648", "filename": "src/test/ui/issues/issue-13853-2.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13853-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,12 @@ error[E0615]: attempted to take value of method `get` on type `std::boxed::Box<(\n   --> $DIR/issue-13853-2.rs:5:43\n    |\n LL | fn foo(res : Box<dyn ResponseHook>) { res.get }\n-   |                                           ^^^ help: use parentheses to call the method: `get()`\n+   |                                           ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL | fn foo(res : Box<dyn ResponseHook>) { res.get() }\n+   |                                              ^^\n \n error: aborting due to previous error\n "}, {"sha": "84359803bbae7c7ceb0d4a0e78f20b218a4b2e53", "filename": "src/test/ui/issues/issue-16725.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16725.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `bar` is private\n   --> $DIR/issue-16725.rs:6:19\n    |\n LL |     unsafe { foo::bar(); }\n-   |                   ^^^ this function is private\n+   |                   ^^^ private function\n    |\n note: the function `bar` is defined here\n   --> $DIR/auxiliary/issue-16725.rs:2:5"}, {"sha": "d4595be749034b5a7d774299998500ad71422459", "filename": "src/test/ui/issues/issue-17718-const-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-const-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `B` is private\n   --> $DIR/issue-17718-const-privacy.rs:5:8\n    |\n LL | use a::B;\n-   |        ^ this constant is private\n+   |        ^ private constant\n    |\n note: the constant `B` is defined here\n   --> $DIR/issue-17718-const-privacy.rs:13:5\n@@ -14,7 +14,7 @@ error[E0603]: constant `BAR` is private\n   --> $DIR/issue-17718-const-privacy.rs:8:5\n    |\n LL |     BAR,\n-   |     ^^^ this constant is private\n+   |     ^^^ private constant\n    |\n note: the constant `BAR` is defined here\n   --> $DIR/auxiliary/issue-17718-const-privacy.rs:4:1"}, {"sha": "9b3b7a72e049eb617948574afc1b56569c564a70", "filename": "src/test/ui/issues/issue-21202.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21202.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `foo` is private\n-  --> $DIR/issue-21202.rs:10:9\n+  --> $DIR/issue-21202.rs:10:14\n    |\n LL |         Foo::foo(&f);\n-   |         ^^^^^^^^\n+   |              ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "41965d6b35536bda7e47306563a299febf18a068", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ LL | |         a.matches(f)\n LL | |     }\n    | |_____^\n    |\n-   = note: consider adding a `#![type_length_limit=\"26214380\"]` attribute to your crate\n+   = note: consider adding a `#![type_length_limit=\"30408681\"]` attribute to your crate\n \n error: aborting due to previous error\n "}, {"sha": "45775e0e4ae36d786f8126b17f8666a577112f48", "filename": "src/test/ui/issues/issue-25386.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -17,12 +17,12 @@ mod stuff {\n macro_rules! check_ptr_exist {\n     ($var:expr, $member:ident) => (\n         (*$var.c_object).$member.is_some()\n-        //~^ ERROR field `name` of struct `stuff::CObj` is private\n-        //~^^ ERROR field `c_object` of struct `stuff::Item` is private\n+        //~^ ERROR field `c_object` of struct `stuff::Item` is private\n     );\n }\n \n fn main() {\n     let item = stuff::Item::new();\n     println!(\"{}\", check_ptr_exist!(item, name));\n+    //~^ ERROR field `name` of struct `stuff::CObj` is private\n }"}, {"sha": "6419e7a557194a50b226f0e6421115fad128cb92", "filename": "src/test/ui/issues/issue-25386.stderr", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-25386.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,24 +1,19 @@\n error[E0616]: field `c_object` of struct `stuff::Item` is private\n-  --> $DIR/issue-25386.rs:19:11\n+  --> $DIR/issue-25386.rs:19:16\n    |\n LL |         (*$var.c_object).$member.is_some()\n-   |           ^^^^^^^^^^^^^\n+   |                ^^^^^^^^ private field\n ...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n    |                    ---------------------------- in this macro invocation\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `name` of struct `stuff::CObj` is private\n-  --> $DIR/issue-25386.rs:19:9\n+  --> $DIR/issue-25386.rs:26:43\n    |\n-LL |         (*$var.c_object).$member.is_some()\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n LL |     println!(\"{}\", check_ptr_exist!(item, name));\n-   |                    ---------------------------- in this macro invocation\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+   |                                           ^^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f7df5b6232bdac9780aebf84c7965c1e83da75fa", "filename": "src/test/ui/issues/issue-26472.stderr", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26472.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,16 +1,19 @@\n error[E0616]: field `len` of struct `sub::S` is private\n-  --> $DIR/issue-26472.rs:11:13\n+  --> $DIR/issue-26472.rs:11:15\n    |\n LL |     let v = s.len;\n-   |             ^^---\n-   |               |\n-   |               help: a method `len` also exists, call it with parentheses: `len()`\n+   |               ^^^ private field\n+   |\n+help: a method `len` also exists, call it with parentheses\n+   |\n+LL |     let v = s.len();\n+   |                  ^^\n \n error[E0616]: field `len` of struct `sub::S` is private\n-  --> $DIR/issue-26472.rs:12:5\n+  --> $DIR/issue-26472.rs:12:7\n    |\n LL |     s.len = v;\n-   |     ^^^^^\n+   |       ^^^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1afaf622be7da3557ddc76aed7ea989b6a9f1cd6", "filename": "src/test/ui/issues/issue-28388-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28388-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `n` is private\n   --> $DIR/issue-28388-2.rs:7:8\n    |\n LL | use m::n::{};\n-   |        ^ this module is private\n+   |        ^ private module\n    |\n note: the module `n` is defined here\n   --> $DIR/issue-28388-2.rs:4:5"}, {"sha": "7ce95e4b0df8b616cbff95907ec6223631a9c230", "filename": "src/test/ui/issues/issue-29161.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29161.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ error[E0603]: struct `A` is private\n   --> $DIR/issue-29161.rs:13:8\n    |\n LL |     a::A::default();\n-   |        ^ this struct is private\n+   |        ^ private struct\n    |\n note: the struct `A` is defined here\n   --> $DIR/issue-29161.rs:2:5"}, {"sha": "b6045c993a9585f14d5ecb30cbf47e6ca88df249", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,14 +5,16 @@ LL | struct Foo(u32);\n    | ---------------- fn(u32) -> Foo {Foo} defined here\n LL | \n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^\n-   |              |     |\n-   |              |     expected struct `Foo`, found fn item\n-   |              |     help: use parentheses to instantiate this tuple struct: `Foo(_)`\n+   |              ---   ^^^ expected struct `Foo`, found fn item\n+   |              |\n    |              expected `Foo` because of return type\n    |\n    = note: expected struct `Foo`\n              found fn item `fn(u32) -> Foo {Foo}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL | fn test() -> Foo { Foo(_) }\n+   |                       ^^^\n \n error: aborting due to previous error\n "}, {"sha": "b63967bb9dce3e9819ba5638b7f02a7572f746b0", "filename": "src/test/ui/issues/issue-3763.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3763.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,32 +1,32 @@\n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:18:19\n+  --> $DIR/issue-3763.rs:18:32\n    |\n LL |     let _woohoo = (&my_struct).priv_field;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^^^^^^^^^ private field\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:21:19\n+  --> $DIR/issue-3763.rs:21:41\n    |\n LL |     let _woohoo = (Box::new(my_struct)).priv_field;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                         ^^^^^^^^^^ private field\n \n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:24:18\n    |\n LL |     (&my_struct).happyfun();\n-   |                  ^^^^^^^^\n+   |                  ^^^^^^^^ private associated function\n \n error[E0624]: associated function `happyfun` is private\n   --> $DIR/issue-3763.rs:26:27\n    |\n LL |     (Box::new(my_struct)).happyfun();\n-   |                           ^^^^^^^^\n+   |                           ^^^^^^^^ private associated function\n \n error[E0616]: field `priv_field` of struct `my_mod::MyStruct` is private\n-  --> $DIR/issue-3763.rs:27:16\n+  --> $DIR/issue-3763.rs:27:26\n    |\n LL |     let nope = my_struct.priv_field;\n-   |                ^^^^^^^^^^^^^^^^^^^^\n+   |                          ^^^^^^^^^^ private field\n \n error: aborting due to 5 previous errors\n "}, {"sha": "1a287e94bafd3d51cb7caaaa50bc29ba2c1a0910", "filename": "src/test/ui/issues/issue-38857.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38857.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ error[E0603]: module `sys` is private\n   --> $DIR/issue-38857.rs:7:18\n    |\n LL |     let a = std::sys::imp::process::process_common::StdioPipes { ..panic!() };\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `sys` is defined here\n   --> $SRC_DIR/libstd/lib.rs:LL:COL"}, {"sha": "deecf7a9d752ca3e938f715abb759a06b120d2b4", "filename": "src/test/ui/issues/issue-3993.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3993.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `fly` is private\n   --> $DIR/issue-3993.rs:1:10\n    |\n LL | use zoo::fly;\n-   |          ^^^ this function is private\n+   |          ^^^ private function\n    |\n note: the function `fly` is defined here\n   --> $DIR/issue-3993.rs:4:5"}, {"sha": "3c0f7f2b55026e6eda83f5b5be03b040d8e69884", "filename": "src/test/ui/issues/issue-53498.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53498.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `foo` is private\n-  --> $DIR/issue-53498.rs:16:5\n+  --> $DIR/issue-53498.rs:16:27\n    |\n LL |     test::Foo::<test::B>::foo();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                           ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "f9aef08c353bb07c9500d7f9fef457d33c1bd028", "filename": "src/test/ui/issues/issue-54062.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-54062.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `inner` of struct `std::sync::Mutex` is private\n-  --> $DIR/issue-54062.rs:10:13\n+  --> $DIR/issue-54062.rs:10:24\n    |\n LL |     let _ = test.comps.inner.lock().unwrap();\n-   |             ^^^^^^^^^^^^^^^^\n+   |                        ^^^^^ private field\n \n error[E0599]: no method named `unwrap` found for struct `std::sys_common::mutex::MutexGuard<'_>` in the current scope\n   --> $DIR/issue-54062.rs:10:37"}, {"sha": "3092d76c268adaa36f009d7a2d46e913525b9061", "filename": "src/test/ui/macros/macro-local-data-key-priv.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-local-data-key-priv.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: constant `baz` is private\n   --> $DIR/macro-local-data-key-priv.rs:8:10\n    |\n LL |     bar::baz.with(|_| ());\n-   |          ^^^ this constant is private\n+   |          ^^^ private constant\n    |\n note: the constant `baz` is defined here\n   --> $DIR/macro-local-data-key-priv.rs:4:5"}, {"sha": "cafe9abae045dd0cf4b09ead6bd3f409290f9b29", "filename": "src/test/ui/methods/assign-to-method.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fassign-to-method.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,15 +2,15 @@ error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:22:10\n    |\n LL |     nyan.speak = || println!(\"meow\");\n-   |          ^^^^^\n+   |          ^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n \n error[E0615]: attempted to take value of method `speak` on type `Cat`\n   --> $DIR/assign-to-method.rs:23:10\n    |\n LL |     nyan.speak += || println!(\"meow\");\n-   |          ^^^^^\n+   |          ^^^^^ method, not a field\n    |\n    = help: methods are immutable and cannot be assigned to\n "}, {"sha": "249464108875c5b96218435586524d45903fd08d", "filename": "src/test/ui/methods/method-ambig-two-traits-from-impls2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-ambig-two-traits-from-impls2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0034]: multiple applicable items in scope\n-  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:5\n+  --> $DIR/method-ambig-two-traits-from-impls2.rs:15:9\n    |\n LL |     AB::foo();\n-   |     ^^^^^^^ multiple `foo` found\n+   |         ^^^ multiple `foo` found\n    |\n note: candidate #1 is defined in an impl of the trait `A` for the type `AB`\n   --> $DIR/method-ambig-two-traits-from-impls2.rs:7:5"}, {"sha": "bc8a1c85e561a354b75cbe16e09331e631ad4dc2", "filename": "src/test/ui/methods/method-missing-call.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-missing-call.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,13 +2,23 @@ error[E0615]: attempted to take value of method `get_x` on type `Point`\n   --> $DIR/method-missing-call.rs:22:26\n    |\n LL |                         .get_x;\n-   |                          ^^^^^ help: use parentheses to call the method: `get_x()`\n+   |                          ^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |                         .get_x();\n+   |                               ^^\n \n error[E0615]: attempted to take value of method `filter_map` on type `std::iter::Filter<std::iter::Map<std::slice::Iter<'_, {integer}>, [closure@$DIR/method-missing-call.rs:27:20: 27:25]>, [closure@$DIR/method-missing-call.rs:28:23: 28:35]>`\n   --> $DIR/method-missing-call.rs:29:16\n    |\n LL |               .filter_map;\n-   |                ^^^^^^^^^^ help: use parentheses to call the method: `filter_map(...)`\n+   |                ^^^^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |               .filter_map(_);\n+   |                          ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f0d169f419c73b45f13264eaf1da209123497b4c", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) i32)),\n+               (),\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "e251e69997eba8e349f5b8cb15050edf58d9e9a7", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) mut &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)),\n+               (),\n            ]\n \n note: no external requirements"}, {"sha": "36257700bef0c5a1ec478d7c4a7b73dfbc5c3284", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,8 +7,7 @@ LL |             let mut closure1 = || p = &y;\n    = note: defining type: test::{{closure}}#0::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               &'_#1r i32,\n-               &'_#2r mut &'_#3r i32,\n+               (&'_#1r i32, &'_#2r mut &'_#3r i32),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r\n@@ -26,8 +25,7 @@ LL | |         };\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               &'_#1r i32,\n-               &'_#2r mut &'_#3r i32,\n+               (&'_#1r i32, &'_#2r mut &'_#3r i32),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r"}, {"sha": "d1c64fac3c1e3dabe3d6bde8661e7b9bafe69344", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,8 +7,7 @@ LL |         let mut closure = || p = &y;\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                extern \"rust-call\" fn(()),\n-               &'_#1r i32,\n-               &'_#2r mut &'_#3r i32,\n+               (&'_#1r i32, &'_#2r mut &'_#3r i32),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#1r: '_#3r"}, {"sha": "549ebb78d78876bf06ec0b4eadcacfb295e069db", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,6 +11,7 @@ LL | |         },\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#4r\n    = note: late-bound region is '_#5r"}, {"sha": "346b4af6caac8eace8ccdaed08f5a8a633458936", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "3b1769ed3a2eeaaf85b8cb151f3ee7e79e5c97d1", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,6 +11,7 @@ LL | |     })\n    = note: defining type: case1::{{closure}}#0 with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n+               (),\n            ]\n \n error[E0521]: borrowed data escapes outside of closure\n@@ -49,6 +50,7 @@ LL | |     })\n    = note: defining type: case2::{{closure}}#0 with closure substs [\n                i32,\n                for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>)),\n+               (),\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "b167dafff013687de3f3162adb3f603000aa78a2", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -13,6 +13,7 @@ LL | |     });\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t2)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "91aacc3dff60f5a01f68c7aff9687e61c5bfe083", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -13,6 +13,7 @@ LL | |     });\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "ae447708621ed4132ab31ba706b905b1b3730731", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "256446a6e8d8dde68c0835f66144ed9ae658f18e", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,6 +11,7 @@ LL | |         },\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4"}, {"sha": "5c156d0d1e3781871adbb409c12680bbd79b9bd7", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#2r\n    = note: late-bound region is '_#3r"}, {"sha": "46e3f2e75f49efc97599e316f6399bf86864d0e2", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -12,6 +12,7 @@ LL | |     });\n    = note: defining type: supply::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('s)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed('t3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed('t1)) u32>)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: late-bound region is '_#4r"}, {"sha": "ef941472894b2afffb51cfd331500a3c960cf7d1", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,6 +14,7 @@ LL | |     });\n    = note: defining type: supply::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((T,)),\n+               (),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r"}, {"sha": "2a382030f935cfa60b2c75268c84079d1a688faa", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    = note: defining type: test::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed('r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed('s)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed('r)) i32,\n+               (),\n            ]\n \n error: lifetime may not live long enough"}, {"sha": "38e59ae3e26ba2f1a37c07d7a04637b9977c4e20", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -42,6 +43,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n@@ -68,6 +70,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n@@ -103,6 +106,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r"}, {"sha": "e8aba9d8d4de6fda04d19810848ab409ceb7b6cd", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -57,6 +58,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r\n@@ -106,6 +108,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -133,6 +136,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r"}, {"sha": "58ea527d9598024385592b11b9fad2e3dcb4a058", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -48,6 +49,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n@@ -88,6 +90,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -115,6 +118,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n@@ -142,6 +146,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "3d9a01fec101d4f0d6f182e0cf6ac92e8c8d2e6a", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_late::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n \n@@ -32,6 +33,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n \n note: no external requirements\n@@ -57,6 +59,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n \n note: no external requirements\n@@ -82,6 +85,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n \n note: no external requirements\n@@ -107,6 +111,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n \n note: no external requirements"}, {"sha": "7c82b147394028bc1c9deea0c6fa11d03386f31c", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#4r\n    = note: number of external vids: 5\n@@ -43,6 +44,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -78,6 +80,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -105,6 +108,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -132,6 +136,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n@@ -159,6 +164,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: two_regions::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -200,6 +206,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n@@ -227,6 +234,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: defining type: one_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r"}, {"sha": "167ca740c657c5ea0b7d1f5b4c3423ec7d0a865f", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: generic::<T>::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n+               (),\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -31,6 +32,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: generic_fail::<T>::{{closure}}#0 with closure substs [\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed('r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed('s)) T)),\n+               (),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3"}, {"sha": "528da502b9d40b4c50a7f4e1458421f0b8366c7c", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,6 +7,7 @@ LL |     with_signature(x, |y| y)\n    = note: defining type: no_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r"}, {"sha": "e341ee48291a9f40a4cf0d1e258cfda8833e11eb", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,6 +14,7 @@ LL | |     })\n    = note: defining type: no_region::<T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#2r\n    = note: number of external vids: 3\n@@ -64,6 +65,7 @@ LL | |     })\n    = note: defining type: correct_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 3\n    = note: where T: '_#2r\n@@ -96,6 +98,7 @@ LL | |     })\n    = note: defining type: wrong_region::<'_#1r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T)),\n+               (),\n            ]\n    = note: late-bound region is '_#3r\n    = note: number of external vids: 4\n@@ -141,6 +144,7 @@ LL | |     })\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{{closure}}#0 with closure substs [\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T)),\n+               (),\n            ]\n    = note: number of external vids: 4\n    = note: where T: '_#3r"}, {"sha": "ca22401f45bb47b6b27f2d542a6db3413b91cf9a", "filename": "src/test/ui/paren-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fparen-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fparen-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparen-span.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `x` of struct `m::S` is private\n-  --> $DIR/paren-span.rs:19:12\n+  --> $DIR/paren-span.rs:19:14\n    |\n LL |     paren!(s.x);\n-   |            ^^^\n+   |              ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "1c5613ac986c438f1f71f4affa08790700fb63b6", "filename": "src/test/ui/parser/macro/pub-item-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fpub-item-macro.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,7 +14,7 @@ error[E0603]: static `x` is private\n   --> $DIR/pub-item-macro.rs:20:23\n    |\n LL |     let y: u32 = foo::x;\n-   |                       ^ this static is private\n+   |                       ^ private static\n    |\n note: the static `x` is defined here\n   --> $DIR/pub-item-macro.rs:5:9"}, {"sha": "1e94e7c620d033d93ae001d967ce1c65b069e3ad", "filename": "src/test/ui/privacy/associated-item-privacy-inherent.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-inherent.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:13:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:15:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `for<'r> fn(&'r priv_nominal::Pub) {priv_nominal::Pub::method}` is p\n   --> $DIR/associated-item-privacy-inherent.rs:17:13\n    |\n LL |         Pub.method();\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: associated constant `CONST` is private\n   --> $DIR/associated-item-privacy-inherent.rs:19:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^\n+   |         ^^^^^^^^^^ private associated constant\n ...\n LL |     priv_nominal::mac!();\n    |     --------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:37:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:39:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:41:13\n    |\n LL |         Pub.method(loop {});\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:57:21\n    |\n LL |         let value = Pub::method::<Priv>;\n-   |                     ^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:59:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:61:9\n    |\n LL |         Pub.method::<Priv>();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:80:21\n    |\n LL |         let value = <Pub>::method;\n-   |                     ^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:82:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:84:21\n    |\n LL |         let value = Pub::method;\n-   |                     ^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:86:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:88:21\n    |\n LL |         let value = <Pub>::static_method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:90:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -178,7 +178,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:92:21\n    |\n LL |         let value = Pub::static_method;\n-   |                     ^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -189,7 +189,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:94:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -200,7 +200,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:96:19\n    |\n LL |         Pub(Priv).method();\n-   |                   ^^^^^^\n+   |                   ^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -211,7 +211,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:99:10\n    |\n LL |         <Pub>::CONST;\n-   |          ^^^\n+   |          ^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-inherent.rs:101:9\n    |\n LL |         Pub::CONST;\n-   |         ^^^^^^^^^^\n+   |         ^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "c30cc947d450869bbe4d19437d5cfbafd2e3eca6", "filename": "src/test/ui/privacy/associated-item-privacy-trait.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-trait.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::Pr\n   --> $DIR/associated-item-privacy-trait.rs:17:21\n    |\n LL |         let value = <Pub as PrivTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: type `for<'r> fn(&'r priv_trait::Pub) {<priv_trait::Pub as priv_trait::Pr\n   --> $DIR/associated-item-privacy-trait.rs:19:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: type `for<'r> fn(&'r Self) {<Self as priv_trait::PrivTr>::method}` is pri\n   --> $DIR/associated-item-privacy-trait.rs:21:13\n    |\n LL |         Pub.method();\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: associated constant `PrivTr::CONST` is private\n   --> $DIR/associated-item-privacy-trait.rs:23:9\n    |\n LL |         <Pub as PrivTr>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^ private associated constant\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: associated type `PrivTr::AssocTy` is private\n   --> $DIR/associated-item-privacy-trait.rs:25:16\n    |\n LL |         let _: <Pub as PrivTr>::AssocTy;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ private associated type\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:27:34\n    |\n LL |         pub type InSignatureTy = <Pub as PrivTr>::AssocTy;\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:29:34\n    |\n LL |         pub trait InSignatureTr: PrivTr {}\n-   |                                  ^^^^^^\n+   |                                  ^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-trait.rs:31:14\n    |\n LL |         impl PrivTr for u8 {}\n-   |              ^^^^^^\n+   |              ^^^^^^ private trait\n ...\n LL |     priv_trait::mac!();\n    |     ------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:48:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:50:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_signature::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:52:13\n    |\n LL |         Pub.method(loop {});\n-   |             ^^^^^^\n+   |             ^^^^^^ private type\n ...\n LL |     priv_signature::mac!();\n    |     ----------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:69:21\n    |\n LL |         let value = <Pub as PubTr>::method::<Priv>;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:71:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:73:9\n    |\n LL |         Pub.method::<Priv>();\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_substs::mac!();\n    |     -------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:93:21\n    |\n LL |         let value = <Pub as PubTr>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:95:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -178,7 +178,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:97:21\n    |\n LL |         let value = <Pub as PubTr<_>>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -189,7 +189,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:99:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -200,7 +200,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:101:9\n    |\n LL |         Pub.method();\n-   |         ^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -211,7 +211,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:104:21\n    |\n LL |         let value = <Priv as PubTr<_>>::method;\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -222,7 +222,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:106:9\n    |\n LL |         value;\n-   |         ^^^^^\n+   |         ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -233,7 +233,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:108:9\n    |\n LL |         Priv.method();\n-   |         ^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -244,7 +244,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:111:9\n    |\n LL |         <Pub as PubTr>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -255,7 +255,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:113:9\n    |\n LL |         <Pub as PubTr<_>>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -266,7 +266,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:115:9\n    |\n LL |         <Priv as PubTr<_>>::CONST;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -277,7 +277,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:119:30\n    |\n LL |         let _: <Pub as PubTr<_>>::AssocTy;\n-   |                              ^\n+   |                              ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -288,7 +288,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:121:17\n    |\n LL |         let _: <Priv as PubTr<_>>::AssocTy;\n-   |                 ^^^^\n+   |                 ^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -299,7 +299,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:124:35\n    |\n LL |         pub type InSignatureTy1 = <Pub as PubTr>::AssocTy;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -310,7 +310,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:126:35\n    |\n LL |         pub type InSignatureTy2 = <Priv as PubTr<Pub>>::AssocTy;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -321,7 +321,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-trait.rs:128:14\n    |\n LL |         impl PubTr for u8 {}\n-   |              ^^^^^\n+   |              ^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "d8515ccb66920e1d4180c2d7af4f5c855bc1c5c7", "filename": "src/test/ui/privacy/associated-item-privacy-type-binding.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fassociated-item-privacy-type-binding.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:13\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -13,7 +13,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:11:16\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -24,7 +24,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:14:31\n    |\n LL |         type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -35,7 +35,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:16:31\n    |\n LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac1!();\n    |     -------------------- in this macro invocation\n@@ -46,7 +46,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:13\n    |\n LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -57,7 +57,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:20:16\n    |\n LL |         let _: Box<dyn PrivTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -68,7 +68,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:23:31\n    |\n LL |         type InSignatureTy1 = Box<dyn PrivTr<AssocTy = u8>>;\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -79,7 +79,7 @@ error: trait `priv_trait::PrivTr` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:25:31\n    |\n LL |         trait InSignatureTr1: PrivTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^ private trait\n ...\n LL |     priv_trait::mac2!();\n    |     -------------------- in this macro invocation\n@@ -90,7 +90,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:13\n    |\n LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -101,7 +101,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:44:16\n    |\n LL |         let _: Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -112,7 +112,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:13\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |             ^\n+   |             ^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -123,7 +123,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:47:16\n    |\n LL |         let _: Box<dyn PubTr<AssocTy = u8>>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -134,7 +134,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:50:35\n    |\n LL |         pub type InSignatureTy1 = Box<dyn PubTrWithParam<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -145,7 +145,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:52:35\n    |\n LL |         pub type InSignatureTy2 = Box<dyn PubTr<AssocTy = u8>>;\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -156,7 +156,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:54:31\n    |\n LL |         trait InSignatureTr1: PubTrWithParam<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation\n@@ -167,7 +167,7 @@ error: type `priv_parent_substs::Priv` is private\n   --> $DIR/associated-item-privacy-type-binding.rs:56:31\n    |\n LL |         trait InSignatureTr2: PubTr<AssocTy = u8> {}\n-   |                               ^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     priv_parent_substs::mac!();\n    |     --------------------------- in this macro invocation"}, {"sha": "5bc6f07fffac3e95d4687617ad14af7d2b43b94d", "filename": "src/test/ui/privacy/decl-macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fdecl-macro.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: macro `mac` is private\n   --> $DIR/decl-macro.rs:8:8\n    |\n LL |     m::mac!();\n-   |        ^^^ this macro is private\n+   |        ^^^ private macro\n    |\n note: the macro `mac` is defined here\n   --> $DIR/decl-macro.rs:4:5"}, {"sha": "2eb3ebb51c20a2ea69ee288dd3ec2b42fcded4ea", "filename": "src/test/ui/privacy/privacy-in-paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-in-paths.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/privacy-in-paths.rs:24:16\n    |\n LL |         ::foo::bar::baz::f();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/privacy-in-paths.rs:3:5\n@@ -14,7 +14,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/privacy-in-paths.rs:25:16\n    |\n LL |         ::foo::bar::S::f();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/privacy-in-paths.rs:3:5\n@@ -26,7 +26,7 @@ error[E0603]: trait `T` is private\n   --> $DIR/privacy-in-paths.rs:26:23\n    |\n LL |         <() as ::foo::T>::Assoc::f();\n-   |                       ^ this trait is private\n+   |                       ^ private trait\n    |\n note: the trait `T` is defined here\n   --> $DIR/privacy-in-paths.rs:8:5"}, {"sha": "0c826147a1ca7df46628890d4db9ef3a844dd813", "filename": "src/test/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -58,7 +58,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:63:15\n    |\n LL |     use foo3::Bar;\n-   |               ^^^ this trait is private\n+   |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5\n@@ -70,7 +70,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:67:15\n    |\n LL |     use foo3::Bar;\n-   |               ^^^ this trait is private\n+   |               ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5\n@@ -82,7 +82,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ns2.rs:74:16\n    |\n LL |     use foo3::{Bar,Baz};\n-   |                ^^^ this trait is private\n+   |                ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ns2.rs:55:5"}, {"sha": "e93a458ce6cb6889caafc55cc8529461927a1945", "filename": "src/test/ui/privacy/privacy-ufcs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy-ufcs.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: trait `Bar` is private\n   --> $DIR/privacy-ufcs.rs:12:20\n    |\n LL |     <i32 as ::foo::Bar>::baz();\n-   |                    ^^^ this trait is private\n+   |                    ^^^ private trait\n    |\n note: the trait `Bar` is defined here\n   --> $DIR/privacy-ufcs.rs:4:5"}, {"sha": "65c10a7bca75deba5dc98673354130e2d2d1f361", "filename": "src/test/ui/privacy/privacy1.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy1.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:132:18\n    |\n LL |         use bar::baz::{foo, bar};\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -14,7 +14,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:132:18\n    |\n LL |         use bar::baz::{foo, bar};\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -26,7 +26,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:141:18\n    |\n LL |         use bar::baz;\n-   |                  ^^^ this module is private\n+   |                  ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -38,7 +38,7 @@ error[E0603]: module `i` is private\n   --> $DIR/privacy1.rs:165:20\n    |\n LL |     use self::foo::i::A;\n-   |                    ^ this module is private\n+   |                    ^ private module\n    |\n note: the module `i` is defined here\n   --> $DIR/privacy1.rs:170:9\n@@ -50,7 +50,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:104:16\n    |\n LL |         ::bar::baz::A::foo();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -62,7 +62,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:105:16\n    |\n LL |         ::bar::baz::A::bar();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -74,7 +74,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:107:16\n    |\n LL |         ::bar::baz::A.foo2();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -86,7 +86,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:108:16\n    |\n LL |         ::bar::baz::A.bar2();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -98,7 +98,7 @@ error[E0603]: trait `B` is private\n   --> $DIR/privacy1.rs:112:16\n    |\n LL |         ::bar::B::foo();\n-   |                ^ this trait is private\n+   |                ^ private trait\n    |\n note: the trait `B` is defined here\n   --> $DIR/privacy1.rs:40:5\n@@ -110,7 +110,7 @@ error[E0603]: function `epriv` is private\n   --> $DIR/privacy1.rs:118:20\n    |\n LL |             ::bar::epriv();\n-   |                    ^^^^^ this function is private\n+   |                    ^^^^^ private function\n    |\n note: the function `epriv` is defined here\n   --> $DIR/privacy1.rs:65:9\n@@ -122,7 +122,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:127:16\n    |\n LL |         ::bar::baz::foo();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -134,7 +134,7 @@ error[E0603]: module `baz` is private\n   --> $DIR/privacy1.rs:128:16\n    |\n LL |         ::bar::baz::bar();\n-   |                ^^^ this module is private\n+   |                ^^^ private module\n    |\n note: the module `baz` is defined here\n   --> $DIR/privacy1.rs:50:5\n@@ -146,7 +146,7 @@ error[E0603]: trait `B` is private\n   --> $DIR/privacy1.rs:157:17\n    |\n LL |     impl ::bar::B for f32 { fn foo() -> f32 { 1.0 } }\n-   |                 ^ this trait is private\n+   |                 ^ private trait\n    |\n note: the trait `B` is defined here\n   --> $DIR/privacy1.rs:40:5\n@@ -155,34 +155,34 @@ LL |     trait B {\n    |     ^^^^^^^\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:77:9\n+  --> $DIR/privacy1.rs:77:23\n    |\n LL |         self::baz::A::bar();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |                       ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:95:5\n+  --> $DIR/privacy1.rs:95:13\n    |\n LL |     bar::A::bar();\n-   |     ^^^^^^^^^^^\n+   |             ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:102:9\n+  --> $DIR/privacy1.rs:102:19\n    |\n LL |         ::bar::A::bar();\n-   |         ^^^^^^^^^^^^^\n+   |                   ^^^ private associated function\n \n error[E0624]: associated function `bar` is private\n-  --> $DIR/privacy1.rs:105:9\n+  --> $DIR/privacy1.rs:105:24\n    |\n LL |         ::bar::baz::A::bar();\n-   |         ^^^^^^^^^^^^^^^^^^\n+   |                        ^^^ private associated function\n \n error[E0624]: associated function `bar2` is private\n   --> $DIR/privacy1.rs:108:23\n    |\n LL |         ::bar::baz::A.bar2();\n-   |                       ^^^^\n+   |                       ^^^^ private associated function\n \n error: aborting due to 18 previous errors\n "}, {"sha": "c2a33ce1f59b38549e5fd6196863f26ff25481ea", "filename": "src/test/ui/privacy/privacy2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ error[E0603]: function import `foo` is private\n   --> $DIR/privacy2.rs:23:20\n    |\n LL |     use bar::glob::foo;\n-   |                    ^^^ this function import is private\n+   |                    ^^^ private function import\n    |\n note: the function import `foo` is defined here...\n   --> $DIR/privacy2.rs:10:13"}, {"sha": "7552fa71a3a3a664e5feceddabd0a0f0050ee0a7", "filename": "src/test/ui/privacy/privacy4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy4.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `glob` is private\n   --> $DIR/privacy4.rs:21:14\n    |\n LL |     use bar::glob::gpriv;\n-   |              ^^^^ this module is private\n+   |              ^^^^ private module\n    |\n note: the module `glob` is defined here\n   --> $DIR/privacy4.rs:13:5"}, {"sha": "216abfc68b812c41b5e40eaadd2803d418c9795a", "filename": "src/test/ui/privacy/privacy5.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivacy5.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,7 +5,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a = a::A(());\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -20,7 +20,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let b = a::B(2);\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -35,7 +35,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let c = a::C(2, 3);\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -50,7 +50,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a::A(()) = a;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -65,7 +65,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a::A(_) = a;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -80,7 +80,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     match a { a::A(()) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -95,7 +95,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     match a { a::A(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -110,7 +110,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let a::B(_) = b;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -125,7 +125,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let a::B(_b) = b;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -140,7 +140,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -155,7 +155,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(_b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -170,7 +170,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -185,7 +185,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     match b { a::B(1) => {} a::B(_) => {} }\n-   |                                ^ this tuple struct constructor is private\n+   |                                ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -200,7 +200,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_, _) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -215,7 +215,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_a, _) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -230,7 +230,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_, _b) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -245,7 +245,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let a::C(_a, _b) = c;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -260,7 +260,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_, _) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -275,7 +275,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_a, _) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -290,7 +290,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_, _b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -305,7 +305,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     match c { a::C(_a, _b) => {} }\n-   |                  ^ this tuple struct constructor is private\n+   |                  ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -320,7 +320,7 @@ LL |     pub struct A(());\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let a2 = a::A;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `A` is defined here\n   --> $DIR/privacy5.rs:6:5\n@@ -335,7 +335,7 @@ LL |     pub struct B(isize);\n    |                  ----- a constructor is private if any of the fields is private\n ...\n LL |     let b2 = a::B;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `B` is defined here\n   --> $DIR/privacy5.rs:7:5\n@@ -350,7 +350,7 @@ LL |     pub struct C(pub isize, isize);\n    |                  ---------------- a constructor is private if any of the fields is private\n ...\n LL |     let c2 = a::C;\n-   |                 ^ this tuple struct constructor is private\n+   |                 ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `C` is defined here\n   --> $DIR/privacy5.rs:8:5\n@@ -362,7 +362,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:90:20\n    |\n LL |     let a = other::A(());\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -379,7 +379,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:91:20\n    |\n LL |     let b = other::B(2);\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -396,7 +396,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:92:20\n    |\n LL |     let c = other::C(2, 3);\n-   |                    ^ this tuple struct constructor is private\n+   |                    ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -413,7 +413,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:95:16\n    |\n LL |     let other::A(()) = a;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -430,7 +430,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:96:16\n    |\n LL |     let other::A(_) = a;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -447,7 +447,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:97:22\n    |\n LL |     match a { other::A(()) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -464,7 +464,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:98:22\n    |\n LL |     match a { other::A(_) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -481,7 +481,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:100:16\n    |\n LL |     let other::B(_) = b;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -498,7 +498,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:101:16\n    |\n LL |     let other::B(_b) = b;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -515,7 +515,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:102:22\n    |\n LL |     match b { other::B(_) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -532,7 +532,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:103:22\n    |\n LL |     match b { other::B(_b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -549,7 +549,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:104:22\n    |\n LL |     match b { other::B(1) => {}\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -566,7 +566,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:105:16\n    |\n LL |         other::B(_) => {} }\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -583,7 +583,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:107:16\n    |\n LL |     let other::C(_, _) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -600,7 +600,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:108:16\n    |\n LL |     let other::C(_a, _) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -617,7 +617,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:109:16\n    |\n LL |     let other::C(_, _b) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -634,7 +634,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:110:16\n    |\n LL |     let other::C(_a, _b) = c;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -651,7 +651,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:111:22\n    |\n LL |     match c { other::C(_, _) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -668,7 +668,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:112:22\n    |\n LL |     match c { other::C(_a, _) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -685,7 +685,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:113:22\n    |\n LL |     match c { other::C(_, _b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -702,7 +702,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:114:22\n    |\n LL |     match c { other::C(_a, _b) => {} }\n-   |                      ^ this tuple struct constructor is private\n+   |                      ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |\n@@ -719,7 +719,7 @@ error[E0603]: tuple struct constructor `A` is private\n   --> $DIR/privacy5.rs:122:21\n    |\n LL |     let a2 = other::A;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:1:14\n    |\n@@ -736,7 +736,7 @@ error[E0603]: tuple struct constructor `B` is private\n   --> $DIR/privacy5.rs:123:21\n    |\n LL |     let b2 = other::B;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:2:14\n    |\n@@ -753,7 +753,7 @@ error[E0603]: tuple struct constructor `C` is private\n   --> $DIR/privacy5.rs:124:21\n    |\n LL |     let c2 = other::C;\n-   |                     ^ this tuple struct constructor is private\n+   |                     ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy_tuple_struct.rs:3:14\n    |"}, {"sha": "444b9180b3f5977334777f201560760d100b870b", "filename": "src/test/ui/privacy/private-impl-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-impl-method.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `foo` is private\n   --> $DIR/private-impl-method.rs:20:7\n    |\n LL |     s.foo();\n-   |       ^^^\n+   |       ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "1b6d143b93217d415182094a3bb47a7dca740048", "filename": "src/test/ui/privacy/private-in-public-non-principal-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-non-principal-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error: trait `m::PrivNonPrincipal` is private\n   --> $DIR/private-in-public-non-principal-2.rs:11:5\n    |\n LL |     m::leak_dyn_nonprincipal();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ private trait\n \n error: aborting due to previous error\n "}, {"sha": "576498b2cf8ef5ee7dfc4b952c2f3d87c3898375", "filename": "src/test/ui/privacy/private-inferred-type-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-1.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,13 +2,13 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-1.rs:16:5\n    |\n LL |     [].arr0_secret();\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-1.rs:17:5\n    |\n LL |     None.ty_param_secret();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f19e367ef110e11bdcea480ccb82190bbc8db898", "filename": "src/test/ui/privacy/private-inferred-type-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,19 +2,19 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:16:5\n    |\n LL |     m::Pub::get_priv;\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:17:5\n    |\n LL |     m::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-inferred-type-2.rs:18:5\n    |\n LL |     ext::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 3 previous errors\n "}, {"sha": "39ef6472526c3b6916cc743c4d3b19f46bf5300d", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,55 +2,55 @@ error: type `fn() {ext::priv_fn}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: static `PRIV_STATIC` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private static\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `ext::PrivEnum` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn() {<u8 as ext::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: type `for<'r> fn(&'r ext::Pub<u8>) {ext::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type-3.rs:16:5\n    |\n LL |     ext::m!();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "7d1f794bfe4596fe2191020d6acdc7f8ed719744", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -20,97 +20,97 @@ error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:9\n    |\n LL |     let _: m::Alias;\n-   |         ^\n+   |         ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:97:12\n    |\n LL |     let _: m::Alias;\n-   |            ^^^^^^^^\n+   |            ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:99:13\n    |\n LL |     let _: <m::Alias as m::TraitWithAssocTy>::AssocTy;\n-   |             ^^^^^^^^\n+   |             ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:100:5\n    |\n LL |     m::Alias {};\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:101:5\n    |\n LL |     m::Pub { 0: m::Alias {} };\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:103:5\n    |\n LL |     m::Pub::static_method;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:104:5\n    |\n LL |     m::Pub::INHERENT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:105:5\n    |\n LL |     m::Pub(0u8).method_with_substs::<m::Alias>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:106:17\n    |\n LL |     m::Pub(0u8).method_with_priv_params(loop{});\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:107:5\n    |\n LL |     <m::Alias as m::TraitWithAssocConst>::TRAIT_ASSOC_CONST;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:108:6\n    |\n LL |     <m::Pub<m::Alias>>::INHERENT_ASSOC_CONST;\n-   |      ^^^^^^^^^^^^^^^^\n+   |      ^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:109:5\n    |\n LL |     <m::Pub<m::Alias>>::INHERENT_ASSOC_CONST_GENERIC_SELF;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:110:5\n    |\n LL |     <m::Pub<m::Alias>>::static_method_generic_self;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:112:5\n    |\n LL |     u8::pub_method;\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `adjust::S2` is private\n   --> $DIR/private-inferred-type.rs:114:5\n    |\n LL |     adjust::S1.method_s3();\n-   |     ^^^^^^^^^^\n+   |     ^^^^^^^^^^ private type\n \n error: type `fn() {m::priv_fn}` is private\n   --> $DIR/private-inferred-type.rs:39:9\n    |\n LL |         priv_fn;\n-   |         ^^^^^^^\n+   |         ^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -121,7 +121,7 @@ error: type `m::PrivEnum` is private\n   --> $DIR/private-inferred-type.rs:41:9\n    |\n LL |         PrivEnum::Variant;\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -132,7 +132,7 @@ error: type `fn() {<u8 as m::PrivTrait>::method}` is private\n   --> $DIR/private-inferred-type.rs:43:9\n    |\n LL |         <u8 as PrivTrait>::method;\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -143,7 +143,7 @@ error: type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:45:9\n    |\n LL |         PrivTupleStruct;\n-   |         ^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -154,7 +154,7 @@ error: type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:47:9\n    |\n LL |         PubTupleStruct;\n-   |         ^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -165,7 +165,7 @@ error: type `for<'r> fn(&'r m::Pub<u8>) {m::Pub::<u8>::priv_method}` is private\n   --> $DIR/private-inferred-type.rs:49:18\n    |\n LL |         Pub(0u8).priv_method();\n-   |                  ^^^^^^^^^^^\n+   |                  ^^^^^^^^^^^ private type\n ...\n LL |     m::m!();\n    |     -------- in this macro invocation\n@@ -176,61 +176,61 @@ error: trait `m::Trait` is private\n   --> $DIR/private-inferred-type.rs:118:5\n    |\n LL |     m::leak_anon1();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private trait\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:119:5\n    |\n LL |     m::leak_anon2();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:120:5\n    |\n LL |     m::leak_anon3();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^ private type\n \n error: trait `m::Trait` is private\n   --> $DIR/private-inferred-type.rs:122:5\n    |\n LL |     m::leak_dyn1();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private trait\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:123:5\n    |\n LL |     m::leak_dyn2();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:124:5\n    |\n LL |     m::leak_dyn3();\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:127:13\n    |\n LL |     let a = m::Alias {};\n-   |             ^^^^^^^^^^^\n+   |             ^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:128:17\n    |\n LL |     let mut b = a;\n-   |                 ^\n+   |                 ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:129:9\n    |\n LL |     b = a;\n-   |         ^\n+   |         ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-inferred-type.rs:130:11\n    |\n LL |     match a {\n-   |           ^\n+   |           ^ private type\n \n error: aborting due to 33 previous errors\n "}, {"sha": "e3d90150e2e3eb36f489219ba30ad8761d87c017", "filename": "src/test/ui/privacy/private-item-simple.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-item-simple.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: function `f` is private\n   --> $DIR/private-item-simple.rs:6:8\n    |\n LL |     a::f();\n-   |        ^ this function is private\n+   |        ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/private-item-simple.rs:2:5"}, {"sha": "8a47846d667e34c8a687e190979e33c3b9f644b4", "filename": "src/test/ui/privacy/private-method-cross-crate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-cross-crate.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `nap` is private\n   --> $DIR/private-method-cross-crate.rs:7:8\n    |\n LL |   nyan.nap();\n-   |        ^^^\n+   |        ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "8083b197a5d78e0facf8b1a24de0f87a0e80adb1", "filename": "src/test/ui/privacy/private-method-inherited.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method-inherited.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `f` is private\n   --> $DIR/private-method-inherited.rs:13:7\n    |\n LL |     x.f();\n-   |       ^\n+   |       ^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "a15fce46877ceb8c3e35cefc43f96a16a97dabdb", "filename": "src/test/ui/privacy/private-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-method.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `nap` is private\n   --> $DIR/private-method.rs:22:8\n    |\n LL |   nyan.nap();\n-   |        ^^^\n+   |        ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "ac00d82adab42e54f034de5f50b873c5b86f07aa", "filename": "src/test/ui/privacy/private-struct-field-cross-crate.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-cross-crate.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `meows` of struct `cci_class::kitties::cat` is private\n-  --> $DIR/private-struct-field-cross-crate.rs:7:14\n+  --> $DIR/private-struct-field-cross-crate.rs:7:19\n    |\n LL |   assert_eq!(nyan.meows, 52);\n-   |              ^^^^^^^^^^\n+   |                   ^^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "7c32ebc2cf7b98b07a2b2a28c55bb8fc16d54a70", "filename": "src/test/ui/privacy/private-struct-field-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-ctor.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `a::Foo` is private\n   --> $DIR/private-struct-field-ctor.rs:8:22\n    |\n LL |     let s = a::Foo { x: 1 };\n-   |                      ^^^^ field `x` is private\n+   |                      ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "9190317403ec1da017417c0e1dcbfc6d57c63533", "filename": "src/test/ui/privacy/private-struct-field-pattern.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field-pattern.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `a::Foo` is private\n   --> $DIR/private-struct-field-pattern.rs:15:15\n    |\n LL |         Foo { x: _ } => {}\n-   |               ^^^^ field `x` is private\n+   |               ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "c89ae507ab5fd8a93b0946b3f951a1a8d97e138a", "filename": "src/test/ui/privacy/private-struct-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-struct-field.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `meows` of struct `cat::Cat` is private\n-  --> $DIR/private-struct-field.rs:13:16\n+  --> $DIR/private-struct-field.rs:13:21\n    |\n LL |     assert_eq!(nyan.meows, 52);\n-   |                ^^^^^^^^^^\n+   |                     ^^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "ea89035c3d00671ec961690b29e811060ae08c1f", "filename": "src/test/ui/privacy/private-type-in-interface.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-type-in-interface.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,55 +2,55 @@ error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:15:9\n    |\n LL | fn f(_: m::Alias) {}\n-   |         ^^^^^^^^\n+   |         ^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:15:6\n    |\n LL | fn f(_: m::Alias) {}\n-   |      ^\n+   |      ^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:17:13\n    |\n LL | fn f_ext(_: ext::Alias) {}\n-   |             ^^^^^^^^^^\n+   |             ^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:17:10\n    |\n LL | fn f_ext(_: ext::Alias) {}\n-   |          ^\n+   |          ^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:21:6\n    |\n LL | impl m::Alias {}\n-   |      ^^^^^^^^\n+   |      ^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:22:14\n    |\n LL | impl Tr1 for ext::Alias {}\n-   |              ^^^^^^^^^^\n+   |              ^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:23:10\n    |\n LL | type A = <m::Alias as m::Trait>::X;\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^ private type\n \n error: type `m::Priv` is private\n   --> $DIR/private-type-in-interface.rs:27:11\n    |\n LL | fn g() -> impl Tr2<m::Alias> { 0 }\n-   |           ^^^^^^^^^^^^^^^^^^\n+   |           ^^^^^^^^^^^^^^^^^^ private type\n \n error: type `ext::Priv` is private\n   --> $DIR/private-type-in-interface.rs:28:15\n    |\n LL | fn g_ext() -> impl Tr2<ext::Alias> { 0 }\n-   |               ^^^^^^^^^^^^^^^^^^^^\n+   |               ^^^^^^^^^^^^^^^^^^^^ private type\n \n error: aborting due to 9 previous errors\n "}, {"sha": "591980dc3450ddc503621ddfb30580a241df3f0c", "filename": "src/test/ui/privacy/restricted/struct-literal-field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Fstruct-literal-field.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0451]: field `x` of struct `foo::bar::S` is private\n   --> $DIR/struct-literal-field.rs:18:9\n    |\n LL |     S { x: 0 };\n-   |         ^^^^ field `x` is private\n+   |         ^^^^ private field\n \n error: aborting due to previous error\n "}, {"sha": "40512a34bd95991cc0b5d9e3cdd6e74d63082ca2", "filename": "src/test/ui/privacy/restricted/test.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Frestricted%2Ftest.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -26,7 +26,7 @@ error[E0603]: struct `Crate` is private\n   --> $DIR/test.rs:38:25\n    |\n LL |     use pub_restricted::Crate;\n-   |                         ^^^^^ this struct is private\n+   |                         ^^^^^ private struct\n    |\n note: the struct `Crate` is defined here\n   --> $DIR/auxiliary/pub_restricted.rs:3:1\n@@ -38,7 +38,7 @@ error[E0603]: function `f` is private\n   --> $DIR/test.rs:30:19\n    |\n LL |     use foo::bar::f;\n-   |                   ^ this function is private\n+   |                   ^ private function\n    |\n note: the function `f` is defined here\n   --> $DIR/test.rs:8:9\n@@ -47,46 +47,46 @@ LL |         pub(super) fn f() {}\n    |         ^^^^^^^^^^^^^^^^^\n \n error[E0616]: field `x` of struct `foo::bar::S` is private\n-  --> $DIR/test.rs:31:5\n+  --> $DIR/test.rs:31:18\n    |\n LL |     S::default().x;\n-   |     ^^^^^^^^^^^^^^\n+   |                  ^ private field\n \n error[E0624]: associated function `f` is private\n   --> $DIR/test.rs:32:18\n    |\n LL |     S::default().f();\n-   |                  ^\n+   |                  ^ private associated function\n \n error[E0624]: associated function `g` is private\n-  --> $DIR/test.rs:33:5\n+  --> $DIR/test.rs:33:8\n    |\n LL |     S::g();\n-   |     ^^^^\n+   |        ^ private associated function\n \n error[E0616]: field `y` of struct `pub_restricted::Universe` is private\n-  --> $DIR/test.rs:42:13\n+  --> $DIR/test.rs:42:15\n    |\n LL |     let _ = u.y;\n-   |             ^^^\n+   |               ^ private field\n \n error[E0616]: field `z` of struct `pub_restricted::Universe` is private\n-  --> $DIR/test.rs:43:13\n+  --> $DIR/test.rs:43:15\n    |\n LL |     let _ = u.z;\n-   |             ^^^\n+   |               ^ private field\n \n error[E0624]: associated function `g` is private\n   --> $DIR/test.rs:45:7\n    |\n LL |     u.g();\n-   |       ^\n+   |       ^ private associated function\n \n error[E0624]: associated function `h` is private\n   --> $DIR/test.rs:46:7\n    |\n LL |     u.h();\n-   |       ^\n+   |       ^ private associated function\n \n error: aborting due to 12 previous errors\n "}, {"sha": "15096eb1139667224eaf2742c445f24eecc545dc", "filename": "src/test/ui/privacy/union-field-privacy-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-1.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,13 +2,13 @@ error[E0451]: field `c` of union `m::U` is private\n   --> $DIR/union-field-privacy-1.rs:12:20\n    |\n LL |     let u = m::U { c: 0 };\n-   |                    ^^^^ field `c` is private\n+   |                    ^^^^ private field\n \n error[E0451]: field `c` of union `m::U` is private\n   --> $DIR/union-field-privacy-1.rs:16:16\n    |\n LL |     let m::U { c } = u;\n-   |                ^ field `c` is private\n+   |                ^ private field\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a23cf90332b02e4b7b4f8844a9b1679568bd7a11", "filename": "src/test/ui/privacy/union-field-privacy-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Funion-field-privacy-2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0616]: field `c` of union `m::U` is private\n-  --> $DIR/union-field-privacy-2.rs:14:13\n+  --> $DIR/union-field-privacy-2.rs:14:15\n    |\n LL |     let c = u.c;\n-   |             ^^^\n+   |               ^ private field\n \n error: aborting due to previous error\n "}, {"sha": "ff7ddcde6e0c4194fc13ddd26dce87c978a206af", "filename": "src/test/ui/proc-macro/disappearing-resolution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdisappearing-resolution.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,7 +8,7 @@ error[E0603]: derive macro import `Empty` is private\n   --> $DIR/disappearing-resolution.rs:11:8\n    |\n LL | use m::Empty;\n-   |        ^^^^^ this derive macro import is private\n+   |        ^^^^^ private derive macro import\n    |\n note: the derive macro import `Empty` is defined here\n   --> $DIR/disappearing-resolution.rs:9:9"}, {"sha": "e378a56713400b7d1323c10a1d7d1745fab521ef", "filename": "src/test/ui/proc-macro/issue-50493.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-50493.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,15 +8,15 @@ error[E0616]: field `field` of struct `Restricted` is private\n   --> $DIR/issue-50493.rs:6:10\n    |\n LL | #[derive(Derive)]\n-   |          ^^^^^^\n+   |          ^^^^^^ private field\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0616]: field `field` of struct `Restricted` is private\n   --> $DIR/issue-50493.rs:6:10\n    |\n LL | #[derive(Derive)]\n-   |          ^^^^^^\n+   |          ^^^^^^ private field\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "a73430db2c19a1e00504a425189264318f09a155", "filename": "src/test/ui/proc-macro/visibility-path.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -0,0 +1,25 @@\n+// Proc macro defined with `pub(path)` doesn't ICEs due to resolving the `path` (issue #68921).\n+\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::*;\n+\n+#[proc_macro]\n+pub(self) fn outer(input: TokenStream) -> TokenStream {\n+    //~^ ERROR functions tagged with `#[proc_macro]` must be `pub`\n+    input\n+}\n+\n+mod m {\n+    use proc_macro::*;\n+\n+    #[proc_macro]\n+    pub(super) fn inner(input: TokenStream) -> TokenStream {\n+        //~^ ERROR functions tagged with `#[proc_macro]` must currently reside in the root\n+        input\n+    }\n+}"}, {"sha": "1a73cc1963f9c551b0d0ffe98c05c77119fb9d6c", "filename": "src/test/ui/proc-macro/visibility-path.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fvisibility-path.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -0,0 +1,14 @@\n+error: functions tagged with `#[proc_macro]` must be `pub`\n+  --> $DIR/visibility-path.rs:12:1\n+   |\n+LL | pub(self) fn outer(input: TokenStream) -> TokenStream {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: functions tagged with `#[proc_macro]` must currently reside in the root of the crate\n+  --> $DIR/visibility-path.rs:21:5\n+   |\n+LL |     pub(super) fn inner(input: TokenStream) -> TokenStream {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "262344fba59999be0d93aada8a8dbb72b127d16b", "filename": "src/test/ui/question-mark-type-infer.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fquestion-mark-type-infer.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,12 +2,13 @@ error[E0284]: type annotations needed\n   --> $DIR/question-mark-type-infer.rs:12:21\n    |\n LL |     l.iter().map(f).collect()?\n-   |                     ^^^^^^^\n-   |                     |\n-   |                     cannot infer type\n-   |                     help: consider specifying the type argument in the method call: `collect::<B>`\n+   |                     ^^^^^^^ cannot infer type\n    |\n    = note: cannot resolve `<_ as std::ops::Try>::Ok == _`\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     l.iter().map(f).collect::<B>()?\n+   |                            ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "6c27a2756f7fb79ac10bcf8bd1209a79e8aac08b", "filename": "src/test/ui/reachable/unreachable-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-variant.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `super_sekrit` is private\n   --> $DIR/unreachable-variant.rs:6:21\n    |\n LL |     let _x = other::super_sekrit::sooper_sekrit::baz;\n-   |                     ^^^^^^^^^^^^ this module is private\n+   |                     ^^^^^^^^^^^^ private module\n    |\n note: the module `super_sekrit` is defined here\n   --> $DIR/auxiliary/unreachable_variant.rs:1:1"}, {"sha": "c4eee0f46611935c5a1793d44e4aa517a2e814fb", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,14 +2,16 @@ error[E0308]: cannot coerce intrinsics to function pointers\n   --> $DIR/reify-intrinsic.rs:6:64\n    |\n LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n-   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^\n-   |            |                                                   |\n-   |            |                                                   cannot coerce intrinsics to function pointers\n-   |            |                                                   help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |            -------------------------------------------------   ^^^^^^^^^^^^^^^^^^^ cannot coerce intrinsics to function pointers\n+   |            |\n    |            expected due to this\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute(...);\n+   |                                                                                   ^^^^^\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "30ac783ea2f7e4424184672027dca56986c0644e", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -219,7 +219,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:57:22\n    |\n LL |     let _: Z = m::n::Z;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -231,7 +231,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:61:22\n    |\n LL |     let _: Z = m::n::Z::Fn;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -243,7 +243,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:64:22\n    |\n LL |     let _: Z = m::n::Z::Struct;\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -255,7 +255,7 @@ error[E0603]: enum `Z` is private\n   --> $DIR/privacy-enum-ctor.rs:68:22\n    |\n LL |     let _: Z = m::n::Z::Unit {};\n-   |                      ^ this enum is private\n+   |                      ^ private enum\n    |\n note: the enum `Z` is defined here\n   --> $DIR/privacy-enum-ctor.rs:11:9\n@@ -270,14 +270,16 @@ LL |             Fn(u8),\n    |             ------ fn(u8) -> m::n::Z {m::n::Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^\n-   |                |   |\n-   |                |   expected enum `m::n::Z`, found fn item\n-   |                |   help: use parentheses to instantiate this tuple variant: `Z::Fn(_)`\n+   |                -   ^^^^^ expected enum `m::n::Z`, found fn item\n+   |                |\n    |                expected due to this\n    |\n    = note: expected enum `m::n::Z`\n            found fn item `fn(u8) -> m::n::Z {m::n::Z::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |         let _: Z = Z::Fn(_);\n+   |                         ^^^\n \n error[E0618]: expected function, found enum variant `Z::Unit`\n   --> $DIR/privacy-enum-ctor.rs:31:17\n@@ -302,14 +304,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `m::E::Fn(_)`\n+   |            -   ^^^^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = m::E::Fn(_);\n+   |                        ^^^\n \n error[E0618]: expected function, found enum variant `m::E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:47:16\n@@ -334,14 +338,16 @@ LL |         Fn(u8),\n    |         ------ fn(u8) -> m::E {m::E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^\n-   |            |   |\n-   |            |   expected enum `m::E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::Fn(_)`\n+   |            -   ^^^^^ expected enum `m::E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `m::E`\n            found fn item `fn(u8) -> m::E {m::E::Fn}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::Fn(_);\n+   |                     ^^^\n \n error[E0618]: expected function, found enum variant `E::Unit`\n   --> $DIR/privacy-enum-ctor.rs:55:16"}, {"sha": "baf7dd84eb09dfc318782d584c35818034f7585c", "filename": "src/test/ui/resolve/privacy-struct-ctor.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-struct-ctor.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -45,7 +45,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |                            --------------- a constructor is private if any of the fields is private\n ...\n LL |         n::Z;\n-   |            ^ this tuple struct constructor is private\n+   |            ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `Z` is defined here\n   --> $DIR/privacy-struct-ctor.rs:12:9\n@@ -60,7 +60,7 @@ LL |     pub struct S(u8);\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     m::S;\n-   |        ^ this tuple struct constructor is private\n+   |        ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `S` is defined here\n   --> $DIR/privacy-struct-ctor.rs:6:5\n@@ -75,7 +75,7 @@ LL |     pub struct S(u8);\n    |                  -- a constructor is private if any of the fields is private\n ...\n LL |     let _: S = m::S(2);\n-   |                   ^ this tuple struct constructor is private\n+   |                   ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `S` is defined here\n   --> $DIR/privacy-struct-ctor.rs:6:5\n@@ -90,7 +90,7 @@ LL |         pub(in m) struct Z(pub(in m::n) u8);\n    |                            --------------- a constructor is private if any of the fields is private\n ...\n LL |     m::n::Z;\n-   |           ^ this tuple struct constructor is private\n+   |           ^ private tuple struct constructor\n    |\n note: the tuple struct constructor `Z` is defined here\n   --> $DIR/privacy-struct-ctor.rs:12:9\n@@ -102,7 +102,7 @@ error[E0603]: tuple struct constructor `S` is private\n   --> $DIR/privacy-struct-ctor.rs:41:16\n    |\n LL |     xcrate::m::S;\n-   |                ^ this tuple struct constructor is private\n+   |                ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:2:18\n    |\n@@ -119,7 +119,7 @@ error[E0603]: tuple struct constructor `Z` is private\n   --> $DIR/privacy-struct-ctor.rs:45:19\n    |\n LL |     xcrate::m::n::Z;\n-   |                   ^ this tuple struct constructor is private\n+   |                   ^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/privacy-struct-ctor.rs:5:28\n    |"}, {"sha": "361da4cc78e0074fedbc050d5ac73a3b2593e4b3", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,12 @@ error[E0423]: expected function, found macro `assert`\n   --> $DIR/resolve-hint-macro.rs:2:5\n    |\n LL |     assert(true);\n-   |     ^^^^^^ help: use `!` to invoke the macro: `assert!`\n+   |     ^^^^^^\n+   |\n+help: use `!` to invoke the macro\n+   |\n+LL |     assert!(true);\n+   |           ^\n \n error: aborting due to previous error\n "}, {"sha": "4e91e7bff34b2477a8520537ed47e8383ba9b53b", "filename": "src/test/ui/rfc-2008-non-exhaustive/struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fstruct.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,7 +14,7 @@ error[E0603]: tuple struct constructor `TupleStruct` is private\n   --> $DIR/struct.rs:23:32\n    |\n LL |     let ts_explicit = structs::TupleStruct(640, 480);\n-   |                                ^^^^^^^^^^^ this tuple struct constructor is private\n+   |                                ^^^^^^^^^^^ private tuple struct constructor\n    | \n   ::: $DIR/auxiliary/structs.rs:11:24\n    |\n@@ -31,7 +31,7 @@ error[E0603]: unit struct `UnitStruct` is private\n   --> $DIR/struct.rs:32:32\n    |\n LL |     let us_explicit = structs::UnitStruct;\n-   |                                ^^^^^^^^^^ this unit struct is private\n+   |                                ^^^^^^^^^^ private unit struct\n    |\n note: the unit struct `UnitStruct` is defined here\n   --> $DIR/auxiliary/structs.rs:8:1"}, {"sha": "ae4f6aff11a02d021f8ad365fc06ea9c8ccc0bcd", "filename": "src/test/ui/rfc-2008-non-exhaustive/variant.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fvariant.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:11:48\n    |\n LL |     let variant_tuple = NonExhaustiveVariants::Tuple(640);\n-   |                                                ^^^^^ this tuple variant is private\n+   |                                                ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n@@ -14,7 +14,7 @@ error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:14:47\n    |\n LL |     let variant_unit = NonExhaustiveVariants::Unit;\n-   |                                               ^^^^ this unit variant is private\n+   |                                               ^^^^ private unit variant\n    |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n@@ -26,7 +26,7 @@ error[E0603]: unit variant `Unit` is private\n   --> $DIR/variant.rs:18:32\n    |\n LL |         NonExhaustiveVariants::Unit => \"\",\n-   |                                ^^^^ this unit variant is private\n+   |                                ^^^^ private unit variant\n    |\n note: the unit variant `Unit` is defined here\n   --> $DIR/auxiliary/variants.rs:4:23\n@@ -38,7 +38,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:20:32\n    |\n LL |         NonExhaustiveVariants::Tuple(fe_tpl) => \"\",\n-   |                                ^^^^^ this tuple variant is private\n+   |                                ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23\n@@ -50,7 +50,7 @@ error[E0603]: tuple variant `Tuple` is private\n   --> $DIR/variant.rs:26:35\n    |\n LL |     if let NonExhaustiveVariants::Tuple(fe_tpl) = variant_struct {\n-   |                                   ^^^^^ this tuple variant is private\n+   |                                   ^^^^^ private tuple variant\n    |\n note: the tuple variant `Tuple` is defined here\n   --> $DIR/auxiliary/variants.rs:5:23"}, {"sha": "1a642ae6e8ed8d7205dd2e32908f9524846da955", "filename": "src/test/ui/shadowed/shadowed-use-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-use-visibility.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module import `bar` is private\n   --> $DIR/shadowed-use-visibility.rs:9:14\n    |\n LL |     use foo::bar::f as g;\n-   |              ^^^ this module import is private\n+   |              ^^^ private module import\n    |\n note: the module import `bar` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:4:9\n@@ -19,7 +19,7 @@ error[E0603]: module import `f` is private\n   --> $DIR/shadowed-use-visibility.rs:15:10\n    |\n LL | use bar::f::f;\n-   |          ^ this module import is private\n+   |          ^ private module import\n    |\n note: the module import `f` is defined here...\n   --> $DIR/shadowed-use-visibility.rs:11:9"}, {"sha": "3e6d350b36c330f0ef4e3741b012c7d9e8adf70e", "filename": "src/test/ui/span/type-annotations-needed-expr.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Ftype-annotations-needed-expr.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,12 +2,13 @@ error[E0282]: type annotations needed\n   --> $DIR/type-annotations-needed-expr.rs:2:39\n    |\n LL |     let _ = (vec![1,2,3]).into_iter().sum() as f64;\n-   |                                       ^^^\n-   |                                       |\n-   |                                       cannot infer type for type parameter `S` declared on the associated function `sum`\n-   |                                       help: consider specifying the type argument in the method call: `sum::<S>`\n+   |                                       ^^^ cannot infer type for type parameter `S` declared on the associated function `sum`\n    |\n    = note: type must be known at this point\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     let _ = (vec![1,2,3]).into_iter().sum::<S>() as f64;\n+   |                                          ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "35a09b21995916bfc051e66fe0397810ce66d196", "filename": "src/test/ui/stability-in-private-module.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstability-in-private-module.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-in-private-module.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `thread_info` is private\n   --> $DIR/stability-in-private-module.rs:7:26\n    |\n LL |     let _ = std::thread::thread_info::current_thread();\n-   |                          ^^^^^^^^^^^ this module is private\n+   |                          ^^^^^^^^^^^ private module\n    |\n note: the module `thread_info` is defined here\n   --> $SRC_DIR/libstd/thread/mod.rs:LL:COL"}, {"sha": "569608780def99ee4f066f3a31c38009dc97fa1d", "filename": "src/test/ui/static/static-method-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-method-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,8 +1,8 @@\n error[E0624]: associated function `new` is private\n-  --> $DIR/static-method-privacy.rs:9:13\n+  --> $DIR/static-method-privacy.rs:9:19\n    |\n LL |     let _ = a::S::new();\n-   |             ^^^^^^^^^\n+   |                   ^^^ private associated function\n \n error: aborting due to previous error\n "}, {"sha": "d731da79246ee643589b4bc8613ebbf213b7424c", "filename": "src/test/ui/static/static-priv-by-default2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-priv-by-default2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: static `private` is private\n   --> $DIR/static-priv-by-default2.rs:15:30\n    |\n LL |     use child::childs_child::private;\n-   |                              ^^^^^^^ this static is private\n+   |                              ^^^^^^^ private static\n    |\n note: the static `private` is defined here\n   --> $DIR/static-priv-by-default2.rs:7:9\n@@ -14,7 +14,7 @@ error[E0603]: static `private` is private\n   --> $DIR/static-priv-by-default2.rs:23:33\n    |\n LL |     use static_priv_by_default::private;\n-   |                                 ^^^^^^^ this static is private\n+   |                                 ^^^^^^^ private static\n    |\n note: the static `private` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:3:1"}, {"sha": "d0afb2ae7af74fecc4f293bea9f58fffe7c831bc", "filename": "src/test/ui/str/str-mut-idx.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-mut-idx.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,15 +2,17 @@ error[E0277]: the size for values of type `str` cannot be known at compilation t\n   --> $DIR/str-mut-idx.rs:4:15\n    |\n LL | fn bot<T>() -> T { loop {} }\n-   |    --- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |        |\n-   |        required by this bound in `bot`\n+   |    --- - required by this bound in `bot`\n ...\n LL |     s[1..2] = bot();\n    |               ^^^ doesn't have a size known at compile-time\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `str`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn bot<T: ?Sized>() -> T { loop {} }\n+   |         ^^^^^^^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/str-mut-idx.rs:4:5"}, {"sha": "f8b16ec0d01b34a33d9ea7d01aa558d8d8779ae8", "filename": "src/test/ui/structs/struct-field-privacy.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-field-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,32 +1,32 @@\n error[E0616]: field `a` of struct `inner::A` is private\n-  --> $DIR/struct-field-privacy.rs:23:5\n+  --> $DIR/struct-field-privacy.rs:23:7\n    |\n LL |     b.a;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `b` of struct `inner::B` is private\n-  --> $DIR/struct-field-privacy.rs:26:5\n+  --> $DIR/struct-field-privacy.rs:26:7\n    |\n LL |     c.b;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `a` of struct `xc::A` is private\n-  --> $DIR/struct-field-privacy.rs:28:5\n+  --> $DIR/struct-field-privacy.rs:28:7\n    |\n LL |     d.a;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `b` of struct `xc::B` is private\n-  --> $DIR/struct-field-privacy.rs:32:5\n+  --> $DIR/struct-field-privacy.rs:32:7\n    |\n LL |     e.b;\n-   |     ^^^\n+   |       ^ private field\n \n error[E0616]: field `1` of struct `inner::Z` is private\n-  --> $DIR/struct-field-privacy.rs:35:5\n+  --> $DIR/struct-field-privacy.rs:35:7\n    |\n LL |     z.1;\n-   |     ^^^\n+   |       ^ private field\n \n error: aborting due to 5 previous errors\n "}, {"sha": "4e022cef1b2d3f8238eae38e37f579c7747af761", "filename": "src/test/ui/structs/struct-variant-privacy-xc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy-xc.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy-xc.rs:4:33\n    |\n LL | fn f(b: struct_variant_privacy::Bar) {\n-   |                                 ^^^ this enum is private\n+   |                                 ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/auxiliary/struct_variant_privacy.rs:1:1\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy-xc.rs:6:33\n    |\n LL |         struct_variant_privacy::Bar::Baz { a: _a } => {}\n-   |                                 ^^^ this enum is private\n+   |                                 ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/auxiliary/struct_variant_privacy.rs:1:1"}, {"sha": "a6bc381ff6b384fc22edb0d645a42a098ca01afb", "filename": "src/test/ui/structs/struct-variant-privacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-variant-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy.rs:7:14\n    |\n LL | fn f(b: foo::Bar) {\n-   |              ^^^ this enum is private\n+   |              ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/struct-variant-privacy.rs:2:5\n@@ -14,7 +14,7 @@ error[E0603]: enum `Bar` is private\n   --> $DIR/struct-variant-privacy.rs:9:14\n    |\n LL |         foo::Bar::Baz { a: _a } => {}\n-   |              ^^^ this enum is private\n+   |              ^^^ private enum\n    |\n note: the enum `Bar` is defined here\n   --> $DIR/struct-variant-privacy.rs:2:5"}, {"sha": "3ad2a1414f96986eb56ba990e3d29c34a60bf628", "filename": "src/test/ui/substs-ppaux.normal.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.normal.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<'static, 'static, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<'static>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<'static>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "e23f06a3ef590036aeaafa5e63caa5a628eabdcc", "filename": "src/test/ui/substs-ppaux.verbose.stderr", "status": "modified", "additions": 24, "deletions": 16, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsubsts-ppaux.verbose.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,14 +5,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>();\n+   |                                                                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n@@ -21,14 +23,16 @@ LL |     fn bar<'a, T>() where T: 'a {}\n    |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();\n+   |                                                                          ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:33:17\n@@ -37,14 +41,16 @@ LL |     fn baz() {}\n    |     -------- fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n-   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `<i8 as Foo<'static, 'static,  u8>>::baz()`\n+   |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz();\n+   |                                                        ^^\n \n error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:41:17\n@@ -53,14 +59,16 @@ LL | fn foo<'z>() where &'z (): Sized {\n    | -------------------------------- fn() {foo::<ReStatic>} defined here\n ...\n LL |     let x: () = foo::<'static>;\n-   |            --   ^^^^^^^^^^^^^^\n-   |            |    |\n-   |            |    expected `()`, found fn item\n-   |            |    help: use parentheses to call this function: `foo::<'static>()`\n+   |            --   ^^^^^^^^^^^^^^ expected `()`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n                 found fn item `fn() {foo::<ReStatic>}`\n+help: use parentheses to call this function\n+   |\n+LL |     let x: () = foo::<'static>();\n+   |                               ^^\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/substs-ppaux.rs:49:5"}, {"sha": "638d504d7feab73a82344ababf67a9fcf7316f5c", "filename": "src/test/ui/suggestions/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fasync-fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n    |    ---         ----------------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `std::future::Future` is not implemented for `fn() -> impl std::future::Future {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]: std::future::Future` is not satisfied\n   --> $DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:12:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl Future<Output=()>) {}\n LL |     let async_closure = async || ();\n    |                         -------- consider calling this closure\n LL |     bar(async_closure);\n-   |         ^^^^^^^^^^^^^\n-   |         |\n-   |         the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n-   |         help: use parentheses to call the closure: `async_closure()`\n+   |         ^^^^^^^^^^^^^ the trait `std::future::Future` is not implemented for `[closure@$DIR/async-fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:11:25: 11:36]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(async_closure());\n+   |                      ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ab336b14d29480915dbf8dc644e5404b2fd83f0a", "filename": "src/test/ui/suggestions/const-in-struct-pat.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fconst-in-struct-pat.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -9,7 +9,11 @@ LL |     let Thing { foo } = t;\n    |                 |\n    |                 expected struct `std::string::String`, found struct `foo`\n    |                 `foo` is interpreted as a unit struct, not a new binding\n-   |                 help: bind the struct field to a different name instead: `foo: other_foo`\n+   |\n+help: bind the struct field to a different name instead\n+   |\n+LL |     let Thing { foo: other_foo } = t;\n+   |                    ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "ed4a0b8487dff01ef0fb8e56fa0b2967d5d83b12", "filename": "src/test/ui/suggestions/fn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-ctor-passed-as-arg-where-it-should-have-been-called.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,10 +8,12 @@ LL | fn bar(f: impl T<O=()>) {}\n    |    ---         ------- required by this bound in `bar`\n ...\n LL |     bar(foo);\n-   |         ^^^\n-   |         |\n-   |         the trait `T` is not implemented for `fn() -> impl T {foo}`\n-   |         help: use parentheses to call the function: `foo()`\n+   |         ^^^ the trait `T` is not implemented for `fn() -> impl T {foo}`\n+   |\n+help: use parentheses to call the function\n+   |\n+LL |     bar(foo());\n+   |            ^^\n \n error[E0277]: the trait bound `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]: T` is not satisfied\n   --> $DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:19:9\n@@ -22,10 +24,12 @@ LL | fn bar(f: impl T<O=()>) {}\n LL |     let closure = || S;\n    |                   -- consider calling this closure\n LL |     bar(closure);\n-   |         ^^^^^^^\n-   |         |\n-   |         the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n-   |         help: use parentheses to call the closure: `closure()`\n+   |         ^^^^^^^ the trait `T` is not implemented for `[closure@$DIR/fn-ctor-passed-as-arg-where-it-should-have-been-called.rs:18:19: 18:23]`\n+   |\n+help: use parentheses to call the closure\n+   |\n+LL |     bar(closure());\n+   |                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b03bea1eddbf08391a6531e223912e3ae95e4c6a", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 96, "deletions": 58, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -19,14 +19,16 @@ LL | fn foo(a: usize, b: usize) -> usize { a }\n    | ----------------------------------- fn(usize, usize) -> usize {foo} defined here\n ...\n LL |     let _: usize = foo;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `foo(a, b)`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {foo}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = foo(a, b);\n+   |                       ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:30:16\n@@ -35,14 +37,16 @@ LL | struct S(usize, usize);\n    | ----------------------- fn(usize, usize) -> S {S} defined here\n ...\n LL |     let _: S = S;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `S`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `S(_, _)`\n+   |            -   ^ expected struct `S`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `S`\n              found fn item `fn(usize, usize) -> S {S}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: S = S(_, _);\n+   |                 ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:31:20\n@@ -51,14 +55,16 @@ LL | fn bar() -> usize { 42 }\n    | ----------------- fn() -> usize {bar} defined here\n ...\n LL |     let _: usize = bar;\n-   |            -----   ^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `bar()`\n+   |            -----   ^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn() -> usize {bar}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = bar();\n+   |                       ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:32:16\n@@ -67,14 +73,16 @@ LL | struct V();\n    | ----------- fn() -> V {V} defined here\n ...\n LL |     let _: V = V;\n-   |            -   ^\n-   |            |   |\n-   |            |   expected struct `V`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple struct: `V()`\n+   |            -   ^ expected struct `V`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected struct `V`\n              found fn item `fn() -> V {V}`\n+help: use parentheses to instantiate this tuple struct\n+   |\n+LL |     let _: V = V();\n+   |                 ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:33:20\n@@ -83,14 +91,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<_ as T>::baz} defined here\n ...\n LL |     let _: usize = T::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:34:20\n@@ -99,14 +109,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<_ as T>::bat} defined here\n ...\n LL |     let _: usize = T::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `T::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = T::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:35:16\n@@ -115,14 +127,16 @@ LL |     A(usize),\n    |     -------- fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n-   |            -   ^^^^\n-   |            |   |\n-   |            |   expected enum `E`, found fn item\n-   |            |   help: use parentheses to instantiate this tuple variant: `E::A(_)`\n+   |            -   ^^^^ expected enum `E`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected enum `E`\n            found fn item `fn(usize) -> E {E::A}`\n+help: use parentheses to instantiate this tuple variant\n+   |\n+LL |     let _: E = E::A(_);\n+   |                    ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:37:20\n@@ -131,14 +145,16 @@ LL |     fn baz(x: usize, y: usize) -> usize { x }\n    |     ----------------------------------- fn(usize, usize) -> usize {<X as T>::baz} defined here\n ...\n LL |     let _: usize = X::baz;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::baz(x, y)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::baz(x, y);\n+   |                          ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:38:20\n@@ -147,14 +163,16 @@ LL |     fn bat(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bat} defined here\n ...\n LL |     let _: usize = X::bat;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bat(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bat(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:39:20\n@@ -163,14 +181,16 @@ LL |     fn bax(x: usize) -> usize { 42 }\n    |     ------------------------- fn(usize) -> usize {<X as T>::bax} defined here\n ...\n LL |     let _: usize = X::bax;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bax(x)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bax(x);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:40:20\n@@ -179,14 +199,16 @@ LL |     fn bach(x: usize) -> usize;\n    |     --------------------------- fn(usize) -> usize {<X as T>::bach} defined here\n ...\n LL |     let _: usize = X::bach;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bach(x)`\n+   |            -----   ^^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bach(x);\n+   |                           ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:41:20\n@@ -195,14 +217,16 @@ LL |     fn ban(&self) -> usize { 42 }\n    |     ---------------------- for<'r> fn(&'r X) -> usize {<X as T>::ban} defined here\n ...\n LL |     let _: usize = X::ban;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::ban(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::ban}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::ban(_);\n+   |                          ^^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:42:20\n@@ -211,41 +235,55 @@ LL |     fn bal(&self) -> usize;\n    |     ----------------------- for<'r> fn(&'r X) -> usize {<X as T>::bal} defined here\n ...\n LL |     let _: usize = X::bal;\n-   |            -----   ^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found fn item\n-   |            |       help: use parentheses to call this function: `X::bal(_)`\n+   |            -----   ^^^^^^ expected `usize`, found fn item\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found fn item `for<'r> fn(&'r X) -> usize {<X as T>::bal}`\n+help: use parentheses to call this function\n+   |\n+LL |     let _: usize = X::bal(_);\n+   |                          ^^^\n \n error[E0615]: attempted to take value of method `ban` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:43:22\n    |\n LL |     let _: usize = X.ban;\n-   |                      ^^^ help: use parentheses to call the method: `ban()`\n+   |                      ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.ban();\n+   |                         ^^\n \n error[E0615]: attempted to take value of method `bal` on type `X`\n   --> $DIR/fn-or-tuple-struct-without-args.rs:44:22\n    |\n LL |     let _: usize = X.bal;\n-   |                      ^^^ help: use parentheses to call the method: `bal()`\n+   |                      ^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _: usize = X.bal();\n+   |                         ^^\n \n error[E0308]: mismatched types\n   --> $DIR/fn-or-tuple-struct-without-args.rs:46:20\n    |\n LL |     let closure = || 42;\n    |                   ----- the found closure\n LL |     let _: usize = closure;\n-   |            -----   ^^^^^^^\n-   |            |       |\n-   |            |       expected `usize`, found closure\n-   |            |       help: use parentheses to call this closure: `closure()`\n+   |            -----   ^^^^^^^ expected `usize`, found closure\n+   |            |\n    |            expected due to this\n    |\n    = note: expected type `usize`\n            found closure `[closure@$DIR/fn-or-tuple-struct-without-args.rs:45:19: 45:24]`\n+help: use parentheses to call this closure\n+   |\n+LL |     let _: usize = closure();\n+   |                           ^^\n \n error: aborting due to 17 previous errors\n "}, {"sha": "84ba935191b48615dd1bbd38ce97d3800f6b2be1", "filename": "src/test/ui/suggestions/imm-ref-trait-object-literal.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,13 +5,14 @@ LL | fn foo<X: Trait>(_: X) {}\n    |    ---    ----- required by this bound in `foo`\n ...\n LL |   foo(&s);\n-   |       -^\n-   |       |\n-   |       the trait `Trait` is not implemented for `&S`\n-   |       help: consider changing this borrow's mutability: `&mut`\n+   |       ^^ the trait `Trait` is not implemented for `&S`\n    |\n    = help: the following implementations were found:\n              <&'a mut S as Trait>\n+help: consider changing this borrow's mutability\n+   |\n+LL |   foo(&mut s);\n+   |       ^^^^\n \n error[E0277]: the trait bound `S: Trait` is not satisfied\n   --> $DIR/imm-ref-trait-object-literal.rs:13:7"}, {"sha": "04c67ec6a06b6a7b7eb89e5476e751f53aee7bdf", "filename": "src/test/ui/suggestions/method-missing-parentheses.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-missing-parentheses.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -8,9 +8,12 @@ error[E0615]: attempted to take value of method `collect` on type `std::vec::Int\n   --> $DIR/method-missing-parentheses.rs:2:32\n    |\n LL |     let _ = vec![].into_iter().collect::<usize>;\n-   |                                ^^^^^^^---------\n-   |                                |\n-   |                                help: use parentheses to call the method: `collect::<usize>()`\n+   |                                ^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let _ = vec![].into_iter().collect::<usize>();\n+   |                                                ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7fd5c11fcf09049992102ec9a4f31d5750ae6175", "filename": "src/test/ui/traits/trait-item-privacy.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-item-privacy.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -40,7 +40,7 @@ error[E0624]: associated function `a` is private\n   --> $DIR/trait-item-privacy.rs:72:7\n    |\n LL |     c.a();\n-   |       ^\n+   |       ^ private associated function\n \n error[E0599]: no function or associated item named `a` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:78:8\n@@ -74,10 +74,10 @@ LL | use method::B;\n    |\n \n error[E0624]: associated function `a` is private\n-  --> $DIR/trait-item-privacy.rs:84:5\n+  --> $DIR/trait-item-privacy.rs:84:8\n    |\n LL |     C::a(&S);\n-   |     ^^^^\n+   |        ^ private associated function\n \n error[E0599]: no associated item named `A` found for struct `S` in the current scope\n   --> $DIR/trait-item-privacy.rs:97:8\n@@ -111,10 +111,10 @@ LL | use assoc_const::B;\n    |\n \n error[E0624]: associated constant `A` is private\n-  --> $DIR/trait-item-privacy.rs:101:5\n+  --> $DIR/trait-item-privacy.rs:101:8\n    |\n LL |     C::A;\n-   |     ^^^^\n+   |        ^ private associated constant\n \n error[E0038]: the trait `assoc_const::C` cannot be made into an object\n   --> $DIR/trait-item-privacy.rs:101:5\n@@ -159,13 +159,13 @@ error: associated type `A` is private\n   --> $DIR/trait-item-privacy.rs:119:12\n    |\n LL |     let _: T::A;\n-   |            ^^^^\n+   |            ^^^^ private associated type\n \n error: associated type `A` is private\n   --> $DIR/trait-item-privacy.rs:128:9\n    |\n LL |         A = u8,\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated type\n \n error: aborting due to 15 previous errors\n "}, {"sha": "c33673aea4d795bfe060b54d5b721a3c66eb499a", "filename": "src/test/ui/traits/trait-method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-method-private.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0624]: associated function `method` is private\n   --> $DIR/trait-method-private.rs:19:9\n    |\n LL |     foo.method();\n-   |         ^^^^^^\n+   |         ^^^^^^ private associated function\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "fe870ab737cc8fd5d69b7bbb6623d714fc5a5e04", "filename": "src/test/ui/try-block/try-block-in-edition2015.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-in-edition2015.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -11,9 +11,13 @@ error[E0574]: expected struct, variant or union type, found macro `try`\n   --> $DIR/try-block-in-edition2015.rs:4:33\n    |\n LL |     let try_result: Option<_> = try {\n-   |                                 ^^^ help: use `!` to invoke the macro: `try!`\n+   |                                 ^^^\n    |\n    = note: if you want the `try` keyword, you need to be in the 2018 edition\n+help: use `!` to invoke the macro\n+   |\n+LL |     let try_result: Option<_> = try! {\n+   |                                    ^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "047728dc1ea4e3d39ea5ab0eda91b075b4de0678", "filename": "src/test/ui/type-inference/or_else-multiple-type-params.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2For_else-multiple-type-params.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,10 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/or_else-multiple-type-params.rs:7:10\n    |\n LL |         .or_else(|err| {\n-   |          ^^^^^^^\n-   |          |\n-   |          cannot infer type for type parameter `F` declared on the associated function `or_else`\n-   |          help: consider specifying the type arguments in the method call: `or_else::<F, O>`\n+   |          ^^^^^^^ cannot infer type for type parameter `F` declared on the associated function `or_else`\n+   |\n+help: consider specifying the type arguments in the method call\n+   |\n+LL |         .or_else::<F, O>(|err| {\n+   |                 ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "0b6630ec8942384bdf7ea924e4288079d487535c", "filename": "src/test/ui/type-inference/sort_by_key.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-inference%2Fsort_by_key.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,9 +2,12 @@ error[E0282]: type annotations needed\n   --> $DIR/sort_by_key.rs:3:9\n    |\n LL |     lst.sort_by_key(|&(v, _)| v.iter().sum());\n-   |         ^^^^^^^^^^^                    --- help: consider specifying the type argument in the method call: `sum::<S>`\n-   |         |\n-   |         cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |         ^^^^^^^^^^^ cannot infer type for type parameter `K` declared on the associated function `sort_by_key`\n+   |\n+help: consider specifying the type argument in the method call\n+   |\n+LL |     lst.sort_by_key(|&(v, _)| v.iter().sum::<S>());\n+   |                                           ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "df7d73d7a7c1d221b47c7e614e96e3be6c348bd1", "filename": "src/test/ui/type/type-annotation-needed.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-annotation-needed.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -5,12 +5,13 @@ LL | fn foo<T: Into<String>>(x: i32) {}\n    |    ---    ------------ required by this bound in `foo`\n ...\n LL |     foo(42);\n-   |     ^^^\n-   |     |\n-   |     cannot infer type for type parameter `T` declared on the function `foo`\n-   |     help: consider specifying the type argument in the function call: `foo::<T>`\n+   |     ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n    |\n    = note: cannot resolve `_: std::convert::Into<std::string::String>`\n+help: consider specifying the type argument in the function call\n+   |\n+LL |     foo::<T>(42);\n+   |        ^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "71b93e873c22026ceca22d8e30c146afa2b3745c", "filename": "src/test/ui/union/union-suggest-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.rs?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -17,5 +17,5 @@ fn main() {\n \n     let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n                          //~| HELP use parentheses to call the method\n-                         //~| SUGGESTION calculate()\n+                         //~| SUGGESTION ()\n }"}, {"sha": "461db1712064fdcdcb698ba537908e95d42e1169", "filename": "src/test/ui/union/union-suggest-field.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-suggest-field.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -14,7 +14,12 @@ error[E0615]: attempted to take value of method `calculate` on type `U`\n   --> $DIR/union-suggest-field.rs:18:15\n    |\n LL |     let y = u.calculate;\n-   |               ^^^^^^^^^ help: use parentheses to call the method: `calculate()`\n+   |               ^^^^^^^^^ method, not a field\n+   |\n+help: use parentheses to call the method\n+   |\n+LL |     let y = u.calculate();\n+   |                        ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "083c74ba1e05d7ab575a5151c752d949ab673705", "filename": "src/test/ui/unsized3.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized3.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -7,12 +7,14 @@ LL |     f2::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f2<X>(x: &X) {\n-   |    -- -- help: consider relaxing the implicit `Sized` restriction: `: ?Sized`\n-   |       |\n-   |       required by this bound in `f2`\n+   |    -- - required by this bound in `f2`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f2<X: ?Sized>(x: &X) {\n+   |        ^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:18:13\n@@ -23,12 +25,14 @@ LL |     f4::<X>(x);\n    |             ^ doesn't have a size known at compile-time\n ...\n LL | fn f4<X: T>(x: &X) {\n-   |    -- -   - help: consider relaxing the implicit `Sized` restriction: `+  ?Sized`\n-   |       |\n-   |       required by this bound in `f4`\n+   |    -- - required by this bound in `f4`\n    |\n    = help: the trait `std::marker::Sized` is not implemented for `X`\n    = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | fn f4<X: T +  ?Sized>(x: &X) {\n+   |            ^^^^^^^^^\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:33:8"}, {"sha": "37b4e61c8085eff21382a40efe79ac63fac4290f", "filename": "src/test/ui/use/use-from-trait-xc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-from-trait-xc.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -44,7 +44,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:14:24\n    |\n LL | use use_from_trait_xc::Foo::new;\n-   |                        ^^^ this struct is private\n+   |                        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/auxiliary/use-from-trait-xc.rs:9:1\n@@ -56,7 +56,7 @@ error[E0603]: struct `Foo` is private\n   --> $DIR/use-from-trait-xc.rs:17:24\n    |\n LL | use use_from_trait_xc::Foo::C;\n-   |                        ^^^ this struct is private\n+   |                        ^^^ private struct\n    |\n note: the struct `Foo` is defined here\n   --> $DIR/auxiliary/use-from-trait-xc.rs:9:1"}, {"sha": "1b12b3c6fa09a262c7d2ef24cd0888f043900e50", "filename": "src/test/ui/use/use-mod/use-mod-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-3.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/use-mod-3.rs:1:10\n    |\n LL | use foo::bar::{\n-   |          ^^^ this module is private\n+   |          ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/use-mod-3.rs:9:5\n@@ -14,7 +14,7 @@ error[E0603]: module `bar` is private\n   --> $DIR/use-mod-3.rs:4:10\n    |\n LL | use foo::bar::{\n-   |          ^^^ this module is private\n+   |          ^^^ private module\n    |\n note: the module `bar` is defined here\n   --> $DIR/use-mod-3.rs:9:5"}, {"sha": "8b7e43ccc04e90e4f566ede7d44dbebd68e9da48", "filename": "src/test/ui/xc-private-method.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxc-private-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxc-private-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -1,14 +1,14 @@\n error[E0624]: associated function `static_meth_struct` is private\n-  --> $DIR/xc-private-method.rs:6:13\n+  --> $DIR/xc-private-method.rs:6:44\n    |\n LL |     let _ = xc_private_method_lib::Struct::static_meth_struct();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                            ^^^^^^^^^^^^^^^^^^ private associated function\n \n error[E0624]: associated function `static_meth_enum` is private\n-  --> $DIR/xc-private-method.rs:9:13\n+  --> $DIR/xc-private-method.rs:9:42\n    |\n LL |     let _ = xc_private_method_lib::Enum::static_meth_enum();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                          ^^^^^^^^^^^^^^^^ private associated function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0ebdb0a06d82b45340ec2ecf3c4c1d9a2f55f37a", "filename": "src/test/ui/xc-private-method2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxc-private-method2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxc-private-method2.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,13 +2,13 @@ error[E0624]: associated function `meth_struct` is private\n   --> $DIR/xc-private-method2.rs:6:52\n    |\n LL |     let _ = xc_private_method_lib::Struct{ x: 10 }.meth_struct();\n-   |                                                    ^^^^^^^^^^^\n+   |                                                    ^^^^^^^^^^^ private associated function\n \n error[E0624]: associated function `meth_enum` is private\n   --> $DIR/xc-private-method2.rs:9:55\n    |\n LL |     let _ = xc_private_method_lib::Enum::Variant1(20).meth_enum();\n-   |                                                       ^^^^^^^^^\n+   |                                                       ^^^^^^^^^ private associated function\n \n error: aborting due to 2 previous errors\n "}, {"sha": "a97f55de5f8330fcfac88d7fff883f01c2313c84", "filename": "src/test/ui/xcrate/xcrate-private-by-default.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5aa8f199c398644d9fc2bb9ac8cffd14f985686d/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fxcrate%2Fxcrate-private-by-default.stderr?ref=5aa8f199c398644d9fc2bb9ac8cffd14f985686d", "patch": "@@ -2,7 +2,7 @@ error[E0603]: static `j` is private\n   --> $DIR/xcrate-private-by-default.rs:23:29\n    |\n LL |     static_priv_by_default::j;\n-   |                             ^ this static is private\n+   |                             ^ private static\n    |\n note: the static `j` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:47:1\n@@ -14,7 +14,7 @@ error[E0603]: function `k` is private\n   --> $DIR/xcrate-private-by-default.rs:25:29\n    |\n LL |     static_priv_by_default::k;\n-   |                             ^ this function is private\n+   |                             ^ private function\n    |\n note: the function `k` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:48:1\n@@ -26,7 +26,7 @@ error[E0603]: unit struct `l` is private\n   --> $DIR/xcrate-private-by-default.rs:27:29\n    |\n LL |     static_priv_by_default::l;\n-   |                             ^ this unit struct is private\n+   |                             ^ private unit struct\n    |\n note: the unit struct `l` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:49:1\n@@ -38,7 +38,7 @@ error[E0603]: enum `m` is private\n   --> $DIR/xcrate-private-by-default.rs:29:35\n    |\n LL |     foo::<static_priv_by_default::m>();\n-   |                                   ^ this enum is private\n+   |                                   ^ private enum\n    |\n note: the enum `m` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:50:1\n@@ -50,7 +50,7 @@ error[E0603]: type alias `n` is private\n   --> $DIR/xcrate-private-by-default.rs:31:35\n    |\n LL |     foo::<static_priv_by_default::n>();\n-   |                                   ^ this type alias is private\n+   |                                   ^ private type alias\n    |\n note: the type alias `n` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:51:1\n@@ -62,7 +62,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:35:29\n    |\n LL |     static_priv_by_default::foo::a;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -74,7 +74,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:37:29\n    |\n LL |     static_priv_by_default::foo::b;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -86,7 +86,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:39:29\n    |\n LL |     static_priv_by_default::foo::c;\n-   |                             ^^^ this module is private\n+   |                             ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -98,7 +98,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:41:35\n    |\n LL |     foo::<static_priv_by_default::foo::d>();\n-   |                                   ^^^ this module is private\n+   |                                   ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1\n@@ -110,7 +110,7 @@ error[E0603]: module `foo` is private\n   --> $DIR/xcrate-private-by-default.rs:43:35\n    |\n LL |     foo::<static_priv_by_default::foo::e>();\n-   |                                   ^^^ this module is private\n+   |                                   ^^^ private module\n    |\n note: the module `foo` is defined here\n   --> $DIR/auxiliary/static_priv_by_default.rs:12:1"}]}