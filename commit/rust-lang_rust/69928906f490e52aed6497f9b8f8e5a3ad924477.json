{"sha": "69928906f490e52aed6497f9b8f8e5a3ad924477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5OTI4OTA2ZjQ5MGU1MmFlZDY0OTdmOWI4ZjhlNWEzYWQ5MjQ0Nzc=", "commit": {"author": {"name": "Yati Sagade", "email": "yati.sagade@gmail.com", "date": "2017-04-09T12:12:01Z"}, "committer": {"name": "Yati Sagade", "email": "yati.sagade@gmail.com", "date": "2017-04-09T12:12:01Z"}, "message": "needless_continue: Add tests for helper functions to the needless_continue lint.\n\nCreating a test file per function sounds a bit excessive, so just\nclubbing all needless_continue specific function tests into this module.", "tree": {"sha": "c5d6a9e9345b5417d0456f375e522e26b4cd50a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d6a9e9345b5417d0456f375e522e26b4cd50a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69928906f490e52aed6497f9b8f8e5a3ad924477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69928906f490e52aed6497f9b8f8e5a3ad924477", "html_url": "https://github.com/rust-lang/rust/commit/69928906f490e52aed6497f9b8f8e5a3ad924477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69928906f490e52aed6497f9b8f8e5a3ad924477/comments", "author": {"login": "yati-sagade", "id": 966274, "node_id": "MDQ6VXNlcjk2NjI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/966274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yati-sagade", "html_url": "https://github.com/yati-sagade", "followers_url": "https://api.github.com/users/yati-sagade/followers", "following_url": "https://api.github.com/users/yati-sagade/following{/other_user}", "gists_url": "https://api.github.com/users/yati-sagade/gists{/gist_id}", "starred_url": "https://api.github.com/users/yati-sagade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yati-sagade/subscriptions", "organizations_url": "https://api.github.com/users/yati-sagade/orgs", "repos_url": "https://api.github.com/users/yati-sagade/repos", "events_url": "https://api.github.com/users/yati-sagade/events{/privacy}", "received_events_url": "https://api.github.com/users/yati-sagade/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yati-sagade", "id": 966274, "node_id": "MDQ6VXNlcjk2NjI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/966274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yati-sagade", "html_url": "https://github.com/yati-sagade", "followers_url": "https://api.github.com/users/yati-sagade/followers", "following_url": "https://api.github.com/users/yati-sagade/following{/other_user}", "gists_url": "https://api.github.com/users/yati-sagade/gists{/gist_id}", "starred_url": "https://api.github.com/users/yati-sagade/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yati-sagade/subscriptions", "organizations_url": "https://api.github.com/users/yati-sagade/orgs", "repos_url": "https://api.github.com/users/yati-sagade/repos", "events_url": "https://api.github.com/users/yati-sagade/events{/privacy}", "received_events_url": "https://api.github.com/users/yati-sagade/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0997481133e02ec0034991e913d69b8b21bba64", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0997481133e02ec0034991e913d69b8b21bba64", "html_url": "https://github.com/rust-lang/rust/commit/a0997481133e02ec0034991e913d69b8b21bba64"}], "stats": {"total": 89, "additions": 89, "deletions": 0}, "files": [{"sha": "0fcef5180302549630dc56956b784e9b7d257f37", "filename": "tests/needless_continue_helpers.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/69928906f490e52aed6497f9b8f8e5a3ad924477/tests%2Fneedless_continue_helpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69928906f490e52aed6497f9b8f8e5a3ad924477/tests%2Fneedless_continue_helpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fneedless_continue_helpers.rs?ref=69928906f490e52aed6497f9b8f8e5a3ad924477", "patch": "@@ -0,0 +1,89 @@\n+// Tests for the various helper functions used by the needless_continue\n+// lint that don't belong in utils.\n+extern crate clippy_lints;\n+use clippy_lints::needless_continue::{erode_from_back, erode_block, erode_from_front};\n+\n+#[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn test_erode_from_back() {\n+    let input = \"\\\n+{\n+    let x = 5;\n+    let y = format!(\\\"{}\\\", 42);\n+}\";\n+\n+    let expected = \"\\\n+{\n+    let x = 5;\n+    let y = format!(\\\"{}\\\", 42);\";\n+\n+    let got = erode_from_back(input);\n+    assert_eq!(expected, got);\n+}\n+\n+#[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn test_erode_from_back_no_brace() {\n+    let input = \"\\\n+let x = 5;\n+let y = something();\n+\";\n+    let expected = \"\";\n+    let got = erode_from_back(input);\n+    assert_eq!(expected, got);\n+}\n+\n+#[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn test_erode_from_front() {\n+    let input = \"\n+        {\n+            something();\n+            inside_a_block();\n+        }\n+    \";\n+    let expected =\n+\"            something();\n+            inside_a_block();\n+        }\n+    \";\n+    let got = erode_from_front(input);\n+    println!(\"input: {}\\nexpected:\\n{}\\ngot:\\n{}\", input, expected, got);\n+    assert_eq!(expected, got);\n+}\n+\n+#[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn test_erode_from_front_no_brace() {\n+    let input = \"\n+            something();\n+            inside_a_block();\n+    \";\n+    let expected =\n+\"something();\n+            inside_a_block();\n+    \";\n+    let got = erode_from_front(input);\n+    println!(\"input: {}\\nexpected:\\n{}\\ngot:\\n{}\", input, expected, got);\n+    assert_eq!(expected, got);\n+}\n+\n+\n+#[test]\n+#[cfg_attr(rustfmt, rustfmt_skip)]\n+fn test_erode_block() {\n+\n+    let input = \"\n+        {\n+            something();\n+            inside_a_block();\n+        }\n+    \";\n+    let expected =\n+\"            something();\n+            inside_a_block();\";\n+    let got = erode_block(input);\n+    println!(\"input: {}\\nexpected:\\n{}\\ngot:\\n{}\", input, expected, got);\n+    assert_eq!(expected, got);\n+}\n+"}]}