{"sha": "6c4f0bf79b608a66e617accab4c421a7705456fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNGYwYmY3OWI2MDhhNjZlNjE3YWNjYWI0YzQyMWE3NzA1NDU2ZmI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-04T12:20:20Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-02-04T16:53:20Z"}, "message": "Stop using unsafe code in TLS macro expansion (fixes #30756)", "tree": {"sha": "c9a9595b5244299b319f54f81dbd6fdf38f5688a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9a9595b5244299b319f54f81dbd6fdf38f5688a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c4f0bf79b608a66e617accab4c421a7705456fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f0bf79b608a66e617accab4c421a7705456fb", "html_url": "https://github.com/rust-lang/rust/commit/6c4f0bf79b608a66e617accab4c421a7705456fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c4f0bf79b608a66e617accab4c421a7705456fb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c30f127907a46fbd46534fb929dfeeca515ab0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c30f127907a46fbd46534fb929dfeeca515ab0f", "html_url": "https://github.com/rust-lang/rust/commit/9c30f127907a46fbd46534fb929dfeeca515ab0f"}], "stats": {"total": 50, "additions": 27, "deletions": 23}, "files": [{"sha": "69395001bbfdcd0db9abc7f20be5cd2fba5ecef6", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6c4f0bf79b608a66e617accab4c421a7705456fb/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c4f0bf79b608a66e617accab4c421a7705456fb/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=6c4f0bf79b608a66e617accab4c421a7705456fb", "patch": "@@ -92,7 +92,7 @@ pub struct LocalKey<T: 'static> {\n     // trivially devirtualizable by LLVM because the value of `inner` never\n     // changes and the constant should be readonly within a crate. This mainly\n     // only runs into problems when TLS statics are exported across crates.\n-    inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+    inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n \n     // initialization routine to invoke to create a value\n     init: fn() -> T,\n@@ -126,7 +126,7 @@ macro_rules! __thread_local_inner {\n     ($t:ty, $init:expr) => {{\n         fn __init() -> $t { $init }\n \n-        unsafe fn __getit() -> $crate::option::Option<\n+        fn __getit() -> $crate::option::Option<\n             &'static $crate::cell::UnsafeCell<\n                 $crate::option::Option<$t>>>\n         {\n@@ -183,7 +183,7 @@ impl<T: 'static> LocalKey<T> {\n     #[unstable(feature = \"thread_local_internals\",\n                reason = \"recently added to create a key\",\n                issue = \"0\")]\n-    pub const fn new(inner: unsafe fn() -> Option<&'static UnsafeCell<Option<T>>>,\n+    pub const fn new(inner: fn() -> Option<&'static UnsafeCell<Option<T>>>,\n                      init: fn() -> T) -> LocalKey<T> {\n         LocalKey {\n             inner: inner,\n@@ -303,11 +303,13 @@ pub mod elf {\n             }\n         }\n \n-        pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n-                return None\n+        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            unsafe {\n+                if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+                    return None\n+                }\n+                self.register_dtor();\n             }\n-            self.register_dtor();\n             Some(&self.inner)\n         }\n \n@@ -452,24 +454,26 @@ pub mod os {\n             }\n         }\n \n-        pub unsafe fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            let ptr = self.os.get() as *mut Value<T>;\n-            if !ptr.is_null() {\n-                if ptr as usize == 1 {\n-                    return None\n+        pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n+            unsafe {\n+                let ptr = self.os.get() as *mut Value<T>;\n+                if !ptr.is_null() {\n+                    if ptr as usize == 1 {\n+                        return None\n+                    }\n+                    return Some(&(*ptr).value);\n                 }\n-                return Some(&(*ptr).value);\n-            }\n \n-            // If the lookup returned null, we haven't initialized our own local\n-            // copy, so do that now.\n-            let ptr: Box<Value<T>> = box Value {\n-                key: self,\n-                value: UnsafeCell::new(None),\n-            };\n-            let ptr = Box::into_raw(ptr);\n-            self.os.set(ptr as *mut u8);\n-            Some(&(*ptr).value)\n+                // If the lookup returned null, we haven't initialized our own local\n+                // copy, so do that now.\n+                let ptr: Box<Value<T>> = box Value {\n+                    key: self,\n+                    value: UnsafeCell::new(None),\n+                };\n+                let ptr = Box::into_raw(ptr);\n+                self.os.set(ptr as *mut u8);\n+                Some(&(*ptr).value)\n+            }\n         }\n     }\n "}]}