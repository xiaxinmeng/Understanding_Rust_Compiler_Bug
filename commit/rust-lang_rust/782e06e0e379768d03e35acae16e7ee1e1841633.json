{"sha": "782e06e0e379768d03e35acae16e7ee1e1841633", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MmUwNmUwZTM3OTc2OGQwM2UzNWFjYWUxNmU3ZWUxZTE4NDE2MzM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-01T00:58:24Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-05-01T00:58:24Z"}, "message": "core/std: Fix race condition in os::mkdir_recursive tests\n\nAdded a change_dir_locked function to os, and use it in the\nmkdir_recursive tests so that the tests don't clobber each other's\ndirectory changes.", "tree": {"sha": "8940677b66f05fe06f72f7a006fcdc9781ef8268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8940677b66f05fe06f72f7a006fcdc9781ef8268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/782e06e0e379768d03e35acae16e7ee1e1841633", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/782e06e0e379768d03e35acae16e7ee1e1841633", "html_url": "https://github.com/rust-lang/rust/commit/782e06e0e379768d03e35acae16e7ee1e1841633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/782e06e0e379768d03e35acae16e7ee1e1841633/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d966aef060030b1d13a55f6768a8e3afb9a842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d966aef060030b1d13a55f6768a8e3afb9a842f", "html_url": "https://github.com/rust-lang/rust/commit/9d966aef060030b1d13a55f6768a8e3afb9a842f"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "0455dabb7f0138ebbb2ef32306e2c806f026aaf8", "filename": "src/libcore/os.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/782e06e0e379768d03e35acae16e7ee1e1841633/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782e06e0e379768d03e35acae16e7ee1e1841633/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=782e06e0e379768d03e35acae16e7ee1e1841633", "patch": "@@ -818,6 +818,36 @@ pub fn change_dir(p: &Path) -> bool {\n     }\n }\n \n+/// Changes the current working directory to the specified\n+/// path while acquiring a global lock, then calls `action`.\n+/// If the change is successful, releases the lock and restores the\n+/// CWD to what it was before, returning true.\n+/// Returns false if the directory doesn't exist or if the directory change\n+/// is otherwise unsuccessful.\n+pub fn change_dir_locked(p: &Path, action: &fn()) -> bool {\n+    use unstable::global::global_data_clone_create;\n+    use unstable::{Exclusive, exclusive};\n+\n+    fn key(_: Exclusive<()>) { }\n+\n+    let result = unsafe {\n+        global_data_clone_create(key, || {\n+            ~exclusive(())\n+        })\n+    };\n+\n+    do result.with_imm() |_| {\n+        let old_dir = os::getcwd();\n+        if change_dir(p) {\n+            action();\n+            change_dir(&old_dir)\n+        }\n+        else {\n+            false\n+        }\n+    }\n+}\n+\n /// Copies a file from one location to another\n pub fn copy_file(from: &Path, to: &Path) -> bool {\n     return do_copy_file(from, to);"}, {"sha": "6da74834b1a49bbc736624b7acb968b845a08ed9", "filename": "src/libstd/tempfile.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/782e06e0e379768d03e35acae16e7ee1e1841633/src%2Flibstd%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782e06e0e379768d03e35acae16e7ee1e1841633/src%2Flibstd%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftempfile.rs?ref=782e06e0e379768d03e35acae16e7ee1e1841633", "patch": "@@ -42,13 +42,18 @@ mod tests {\n         use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n         use core::os;\n \n-        let root = mkdtemp(&os::tmpdir(), \"temp\").expect(\"recursive_mkdir_rel\");\n-        os::change_dir(&root);\n-        let path = Path(\"frob\");\n-        assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n-        assert!(os::path_is_dir(&path));\n-        assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n-        assert!(os::path_is_dir(&path));\n+        let root = mkdtemp(&os::tmpdir(), \"recursive_mkdir_rel\").\n+            expect(\"recursive_mkdir_rel\");\n+        assert!(do os::change_dir_locked(&root) {\n+            let path = Path(\"frob\");\n+            debug!(\"recursive_mkdir_rel: Making: %s in cwd %s [%?]\", path.to_str(),\n+                   os::getcwd().to_str(),\n+                   os::path_exists(&path));\n+            assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+            assert!(os::path_is_dir(&path));\n+            assert!(os::mkdir_recursive(&path,  (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+            assert!(os::path_is_dir(&path));\n+        });\n     }\n \n     #[test]\n@@ -67,18 +72,21 @@ mod tests {\n         use core::libc::consts::os::posix88::{S_IRUSR, S_IWUSR, S_IXUSR};\n         use core::os;\n \n-        let root = mkdtemp(&os::tmpdir(), \"temp\").expect(\"recursive_mkdir_rel_2\");\n-        os::change_dir(&root);\n-        let path = Path(\"./frob/baz\");\n-        debug!(\"...Making: %s in cwd %s\", path.to_str(), os::getcwd().to_str());\n-        assert!(os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n-        assert!(os::path_is_dir(&path));\n-        assert!(os::path_is_dir(&path.pop()));\n-        let path2 = Path(\"quux/blat\");\n-        debug!(\"Making: %s in cwd %s\", path2.to_str(), os::getcwd().to_str());\n-        assert!(os::mkdir_recursive(&path2, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n-        assert!(os::path_is_dir(&path2));\n-        assert!(os::path_is_dir(&path2.pop()));\n+        let root = mkdtemp(&os::tmpdir(), \"recursive_mkdir_rel_2\").\n+            expect(\"recursive_mkdir_rel_2\");\n+        assert!(do os::change_dir_locked(&root) {\n+            let path = Path(\"./frob/baz\");\n+            debug!(\"recursive_mkdir_rel_2: Making: %s in cwd %s [%?]\", path.to_str(),\n+                   os::getcwd().to_str(), os::path_exists(&path));\n+            assert!(os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+                assert!(os::path_is_dir(&path));\n+            assert!(os::path_is_dir(&path.pop()));\n+            let path2 = Path(\"quux/blat\");\n+            debug!(\"recursive_mkdir_rel_2: Making: %s in cwd %s\", path2.to_str(),\n+                   os::getcwd().to_str());\n+            assert!(os::mkdir_recursive(&path2, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n+                assert!(os::path_is_dir(&path2));\n+            assert!(os::path_is_dir(&path2.pop()));\n+        });\n     }\n-\n-}\n\\ No newline at end of file\n+}"}]}