{"sha": "20c110e57f24aa54154942ee40921e9129fbc595", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYzExMGU1N2YyNGFhNTQxNTQ5NDJlZTQwOTIxZTkxMjlmYmM1OTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-26T15:38:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-26T15:38:03Z"}, "message": "Merge #3732\n\n3732: Assist: replace unwrap with match r=matklad a=unrealhoang\n\nattempt on #3669\n\nCo-authored-by: Unreal Hoang <unrealhoang@gmail.com>", "tree": {"sha": "a235a1338f590a243c3fd1302ac2e32ec4d24f05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a235a1338f590a243c3fd1302ac2e32ec4d24f05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20c110e57f24aa54154942ee40921e9129fbc595", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJefMxbCRBK7hj4Ov3rIwAAdHIIAHH7R6ogTQnZm1YRLBSx5IHs\n4tjoUg9G6XkFTuocI2pnXiIhHkBWwb+gypKC/NUsWoo9LP2juU6kNaqOJmemaXBq\nqxQlzPnRjBQ1QSpk/BAyxsyn8FPB4cnmF9Rzj4piWBUyq0aGEHyUIOXweU9oJoFP\nzAVeAhaDhug4s+yCVS7YbjG4Lrkwi5rk7sbELvmO5pjVmUtZNVDWmk942QPqGwdF\nS4wcghjE++Yur+L3K4v3JudKz88OWRjcELWZAq8qqkhOY6vyG8s/pQjKeOTF7nmM\nSrD58Tu9fkbVKbNgaSsI8YNeE0z0EZnYOSnRU29kBmycXpAXxxDPDFW5cxNlo6s=\n=Gjxl\n-----END PGP SIGNATURE-----\n", "payload": "tree a235a1338f590a243c3fd1302ac2e32ec4d24f05\nparent 0a8e65cf850ec3642fa51a3b71a4a7564c46a89b\nparent d9df0f43ac669a68dc76466a2f2c21885b5af2dd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585237083 +0000\ncommitter GitHub <noreply@github.com> 1585237083 +0000\n\nMerge #3732\n\n3732: Assist: replace unwrap with match r=matklad a=unrealhoang\n\nattempt on #3669\n\nCo-authored-by: Unreal Hoang <unrealhoang@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20c110e57f24aa54154942ee40921e9129fbc595", "html_url": "https://github.com/rust-lang/rust/commit/20c110e57f24aa54154942ee40921e9129fbc595", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20c110e57f24aa54154942ee40921e9129fbc595/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a8e65cf850ec3642fa51a3b71a4a7564c46a89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8e65cf850ec3642fa51a3b71a4a7564c46a89b", "html_url": "https://github.com/rust-lang/rust/commit/0a8e65cf850ec3642fa51a3b71a4a7564c46a89b"}, {"sha": "d9df0f43ac669a68dc76466a2f2c21885b5af2dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9df0f43ac669a68dc76466a2f2c21885b5af2dd", "html_url": "https://github.com/rust-lang/rust/commit/d9df0f43ac669a68dc76466a2f2c21885b5af2dd"}], "stats": {"total": 230, "additions": 230, "deletions": 0}, "files": [{"sha": "543224232f5a00e46c1b8bb0a2be3e45875c2ea5", "filename": "crates/ra_assists/src/doc_tests/generated.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fdoc_tests%2Fgenerated.rs?ref=20c110e57f24aa54154942ee40921e9129fbc595", "patch": "@@ -622,6 +622,30 @@ fn process(map: HashMap<String, String>) {}\n     )\n }\n \n+#[test]\n+fn doctest_replace_unwrap_with_match() {\n+    check(\n+        \"replace_unwrap_with_match\",\n+        r#####\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = x.<|>unwrap();\n+}\n+\"#####,\n+        r#####\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = match x {\n+        Ok(a) => a,\n+        _ => unreachable!(),\n+    };\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_split_import() {\n     check("}, {"sha": "62cb7a7631ad1d217e887cb02071e1eabc468731", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "added", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=20c110e57f24aa54154942ee40921e9129fbc595", "patch": "@@ -0,0 +1,177 @@\n+use std::iter;\n+\n+use ra_syntax::{\n+    ast::{self, make},\n+    AstNode,\n+};\n+\n+use crate::{Assist, AssistCtx, AssistId};\n+use ast::edit::IndentLevel;\n+\n+// Assist: replace_unwrap_with_match\n+//\n+// Replaces `unwrap` a `match` expression. Works for Result and Option.\n+//\n+// ```\n+// enum Result<T, E> { Ok(T), Err(E) }\n+// fn main() {\n+//     let x: Result<i32, i32> = Result::Ok(92);\n+//     let y = x.<|>unwrap();\n+// }\n+// ```\n+// ->\n+// ```\n+// enum Result<T, E> { Ok(T), Err(E) }\n+// fn main() {\n+//     let x: Result<i32, i32> = Result::Ok(92);\n+//     let y = match x {\n+//         Ok(a) => a,\n+//         _ => unreachable!(),\n+//     };\n+// }\n+// ```\n+pub(crate) fn replace_unwrap_with_match(ctx: AssistCtx) -> Option<Assist> {\n+    let method_call: ast::MethodCallExpr = ctx.find_node_at_offset()?;\n+    let name = method_call.name_ref()?;\n+    if name.text() != \"unwrap\" {\n+        return None;\n+    }\n+    let caller = method_call.expr()?;\n+    let ty = ctx.sema.type_of_expr(&caller)?;\n+\n+    let type_name = ty.as_adt()?.name(ctx.sema.db).to_string();\n+\n+    for (unwrap_type, variant_name) in [(\"Result\", \"Ok\"), (\"Option\", \"Some\")].iter() {\n+        if &type_name == unwrap_type {\n+            return ctx.add_assist(\n+                AssistId(\"replace_unwrap_with_match\"),\n+                \"Replace unwrap with match\",\n+                |edit| {\n+                    let ok_path =\n+                        make::path_unqualified(make::path_segment(make::name_ref(variant_name)));\n+                    let it = make::bind_pat(make::name(\"a\")).into();\n+                    let ok_tuple = make::tuple_struct_pat(ok_path, iter::once(it)).into();\n+\n+                    let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n+                    let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n+\n+                    let unreachable_call = make::unreachable_macro_call().into();\n+                    let err_arm = make::match_arm(\n+                        iter::once(make::placeholder_pat().into()),\n+                        unreachable_call,\n+                    );\n+\n+                    let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);\n+                    let match_expr = make::expr_match(caller.clone(), match_arm_list);\n+                    let match_expr =\n+                        IndentLevel::from_node(method_call.syntax()).increase_indent(match_expr);\n+\n+                    edit.target(method_call.syntax().text_range());\n+                    edit.set_cursor(caller.syntax().text_range().start());\n+                    edit.replace_ast::<ast::Expr>(method_call.into(), match_expr);\n+                },\n+            );\n+        }\n+    }\n+    None\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::helpers::{check_assist, check_assist_target};\n+\n+    #[test]\n+    fn test_replace_result_unwrap_with_match() {\n+        check_assist(\n+            replace_unwrap_with_match,\n+            r\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = i(x).<|>unwrap();\n+}\n+            \",\n+            r\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = <|>match i(x) {\n+        Ok(a) => a,\n+        _ => unreachable!(),\n+    };\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn test_replace_option_unwrap_with_match() {\n+        check_assist(\n+            replace_unwrap_with_match,\n+            r\"\n+enum Option<T> { Some(T), None }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x = Option::Some(92);\n+    let y = i(x).<|>unwrap();\n+}\n+            \",\n+            r\"\n+enum Option<T> { Some(T), None }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x = Option::Some(92);\n+    let y = <|>match i(x) {\n+        Some(a) => a,\n+        _ => unreachable!(),\n+    };\n+}\n+            \",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_replace_result_unwrap_with_match_chaining() {\n+        check_assist(\n+            replace_unwrap_with_match,\n+            r\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = i(x).<|>unwrap().count_zeroes();\n+}\n+            \",\n+            r\"\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = <|>match i(x) {\n+        Ok(a) => a,\n+        _ => unreachable!(),\n+    }.count_zeroes();\n+}\n+            \",\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_unwrap_with_match_target() {\n+        check_assist_target(\n+            replace_unwrap_with_match,\n+            r\"\n+enum Option<T> { Some(T), None }\n+fn i<T>(a: T) -> T { a }\n+fn main() {\n+    let x = Option::Some(92);\n+    let y = i(x).<|>unwrap();\n+}\n+            \",\n+            r\"i(x).unwrap()\",\n+        );\n+    }\n+}"}, {"sha": "becd5e99da6da3494e5f29d1041550dc40be49b7", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=20c110e57f24aa54154942ee40921e9129fbc595", "patch": "@@ -119,6 +119,7 @@ mod handlers {\n     mod remove_mut;\n     mod replace_if_let_with_match;\n     mod replace_qualified_name_with_use;\n+    mod replace_unwrap_with_match;\n     mod split_import;\n \n     pub(crate) fn all() -> &'static [AssistHandler] {\n@@ -154,6 +155,7 @@ mod handlers {\n             remove_mut::remove_mut,\n             replace_if_let_with_match::replace_if_let_with_match,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n         ]\n     }"}, {"sha": "e29600439593891394b0f0011e9cb5c2108b0de3", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20c110e57f24aa54154942ee40921e9129fbc595/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=20c110e57f24aa54154942ee40921e9129fbc595", "patch": "@@ -250,6 +250,10 @@ pub fn token(kind: SyntaxKind) -> SyntaxToken {\n         .unwrap_or_else(|| panic!(\"unhandled token: {:?}\", kind))\n }\n \n+pub fn unreachable_macro_call() -> ast::MacroCall {\n+    ast_from_text(&format!(\"unreachable!()\"))\n+}\n+\n fn ast_from_text<N: AstNode>(text: &str) -> N {\n     let parse = SourceFile::parse(text);\n     let node = parse.tree().syntax().descendants().find_map(N::cast).unwrap();"}, {"sha": "b2568a954f32b6814cf427c9d42b32757f10aa8e", "filename": "docs/user/assists.md", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/20c110e57f24aa54154942ee40921e9129fbc595/docs%2Fuser%2Fassists.md", "raw_url": "https://github.com/rust-lang/rust/raw/20c110e57f24aa54154942ee40921e9129fbc595/docs%2Fuser%2Fassists.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fassists.md?ref=20c110e57f24aa54154942ee40921e9129fbc595", "patch": "@@ -597,6 +597,29 @@ use std::collections::HashMap;\n fn process(map: HashMap<String, String>) {}\n ```\n \n+## `replace_unwrap_with_match`\n+\n+Replaces `unwrap` a `match` expression. Works for Result and Option.\n+\n+```rust\n+// BEFORE\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = x.\u2503unwrap();\n+}\n+\n+// AFTER\n+enum Result<T, E> { Ok(T), Err(E) }\n+fn main() {\n+    let x: Result<i32, i32> = Result::Ok(92);\n+    let y = match x {\n+        Ok(a) => a,\n+        _ => unreachable!(),\n+    };\n+}\n+```\n+\n ## `split_import`\n \n Wraps the tail of import into braces."}]}