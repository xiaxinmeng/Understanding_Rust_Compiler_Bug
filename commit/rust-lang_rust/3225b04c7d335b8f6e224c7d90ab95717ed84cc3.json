{"sha": "3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyMjViMDRjN2QzMzViOGY2ZTIyNGM3ZDkwYWI5NTcxN2VkODRjYzM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T10:36:37Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-01T20:34:27Z"}, "message": "fallout from feature-gating unary negation on unsigned integers.", "tree": {"sha": "34beda4f71cb45733e874317ea745f167e38f9f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34beda4f71cb45733e874317ea745f167e38f9f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "html_url": "https://github.com/rust-lang/rust/commit/3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e309320d55e08f5bbda2f18b20a3a64198061e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e309320d55e08f5bbda2f18b20a3a64198061e", "html_url": "https://github.com/rust-lang/rust/commit/d8e309320d55e08f5bbda2f18b20a3a64198061e"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "29301bfd6fe7eaf24ac92eb4519be35e93d61c96", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -1123,7 +1123,7 @@ impl Iterator for ElementSwaps {\n     // #[inline]\n     fn next(&mut self) -> Option<(usize, usize)> {\n         fn new_pos_wrapping(i: usize, s: Direction) -> usize {\n-            i.wrapping_add(match s { Pos => 1, Neg => -1 })\n+            i.wrapping_add(match s { Pos => 1, Neg => !0 /* aka -1 */ })\n         }\n \n         fn new_pos(i: usize, s: Direction) -> usize {"}, {"sha": "d738ff947c498e42c820927cc0a5d174bf0100ca", "filename": "src/libcore/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fatomic.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -161,7 +161,7 @@ pub const ATOMIC_USIZE_INIT: AtomicUsize =\n         AtomicUsize { v: UnsafeCell { value: 0, } };\n \n // NB: Needs to be -1 (0b11111111...) to make fetch_nand work correctly\n-const UINT_TRUE: usize = -1;\n+const UINT_TRUE: usize = !0;\n \n impl AtomicBool {\n     /// Creates a new `AtomicBool`."}, {"sha": "76e09eedbdfa574a86f447041d47fed9099613d8", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -287,7 +287,7 @@ pub enum BorrowState {\n // (will not outgrow its range since `usize` is the size of the address space)\n type BorrowFlag = usize;\n const UNUSED: BorrowFlag = 0;\n-const WRITING: BorrowFlag = -1;\n+const WRITING: BorrowFlag = !0;\n \n impl<T> RefCell<T> {\n     /// Creates a new `RefCell` containing `value`."}, {"sha": "13f168b3fdbe18c7ee2c71df3b51c6a20443e949", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -517,7 +517,7 @@ macro_rules! uint_impl {\n             fn min_value() -> $T { 0 }\n \n             #[inline]\n-            fn max_value() -> $T { -1 }\n+            fn max_value() -> $T { !0 }\n \n             #[inline]\n             fn count_ones(self) -> u32 {"}, {"sha": "e1a9efd69ad450f4f4a89213d4051cc40c31b28c", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -482,8 +482,10 @@ pub trait Neg {\n     fn neg(self) -> Self::Output;\n }\n \n-macro_rules! neg_impl {\n-    ($($t:ty)*) => ($(\n+\n+\n+macro_rules! neg_impl_core {\n+    ($id:ident => $body:expr, $($t:ty)*) => ($(\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[allow(unsigned_negation)]\n         impl Neg for $t {\n@@ -492,14 +494,28 @@ macro_rules! neg_impl {\n \n             #[inline]\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            fn neg(self) -> $t { -self }\n+            fn neg(self) -> $t { let $id = self; $body }\n         }\n \n         forward_ref_unop! { impl Neg, neg for $t }\n     )*)\n }\n \n-neg_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n+macro_rules! neg_impl_numeric {\n+    ($($t:ty)*) => { neg_impl_core!{ x => -x, $($t)*} }\n+}\n+\n+macro_rules! neg_impl_unsigned {\n+    ($($t:ty)*) => {\n+        neg_impl_core!{ x => {\n+            #[cfg(stage0)]\n+            use ::num::wrapping::WrappingOps;\n+            !x.wrapping_add(1)\n+        }, $($t)*} }\n+}\n+\n+neg_impl_unsigned! { usize u8 u16 u32 u64 }\n+neg_impl_numeric! { isize i8 i16 i32 i64 f32 f64 }\n \n /// The `Not` trait is used to specify the functionality of unary `!`.\n ///"}, {"sha": "c78fa80336153cf180a6d3755fd9af1a4ad4dd91", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -873,7 +873,7 @@ impl TwoWaySearcher {\n     #[allow(dead_code)]\n     #[allow(deprecated)]\n     fn maximal_suffix(arr: &[u8], reversed: bool) -> (usize, usize) {\n-        let mut left: usize = -1; // Corresponds to i in the paper\n+        let mut left: usize = !0; // Corresponds to i in the paper\n         let mut right = 0; // Corresponds to j in the paper\n         let mut offset = 1; // Corresponds to k in the paper\n         let mut period = 1; // Corresponds to p in the paper"}, {"sha": "77e18be298bc0649201e359f3e8ae2b3be3b7ae7", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -4696,7 +4696,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x1000;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;"}, {"sha": "7ea77a796193822dfd14723e6730f1f9daca0d3e", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3225b04c7d335b8f6e224c7d90ab95717ed84cc3/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=3225b04c7d335b8f6e224c7d90ab95717ed84cc3", "patch": "@@ -117,7 +117,7 @@ fn lang_start(main: *const u8, argc: isize, argv: *const *const u8) -> isize {\n             use libc;\n             use libc::funcs::posix01::signal::signal;\n             unsafe {\n-                assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != -1);\n+                assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n             }\n         }\n         ignore_sigpipe();"}]}