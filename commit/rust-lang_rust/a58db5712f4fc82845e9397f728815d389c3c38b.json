{"sha": "a58db5712f4fc82845e9397f728815d389c3c38b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OGRiNTcxMmY0ZmM4Mjg0NWU5Mzk3ZjcyODgxNWQzODljM2MzOGI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-24T17:08:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-24T17:08:16Z"}, "message": "Merge #2389\n\n2389: Don't redo field resolution in the IDE r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "8f4d416bad74f75e43924981b1d2c2099ea50edc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f4d416bad74f75e43924981b1d2c2099ea50edc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a58db5712f4fc82845e9397f728815d389c3c38b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd2rkACRBK7hj4Ov3rIwAAdHIIAFDGTBl1n2osEQ5Yc8w7cgrr\nK6VG7oy7xOTj3BZ71C2A+8dA++Gtv4DTbiOxj9uISdKDX99z2fvKmwChD956FxHp\nJJETQQq5m4Xfbwoze3LymI0MD75EnTgVST2sUr23ac6Y1Ttr/ZVYBOUE0S5vtHs0\nz9tttWisrQJHAJH+kBQAg0zdDDDrAhTVcZXWjcmGPAHXBxZJr0C63dnzi7GWvlVV\nT/LSy4NuH2+LxLBXf4SA0KbTlSMpN5R5WceF+tRHoDyNKw4SUH+hKyu5iFIlrzzt\nwE7RvlCOqdnXNNtA1HeTso/ulsWQL+/Aqr6dpAID9aS7yLKMzTP0moQ5CE9M8f4=\n=h4eo\n-----END PGP SIGNATURE-----\n", "payload": "tree 8f4d416bad74f75e43924981b1d2c2099ea50edc\nparent ac9ba5eb32073c16608acaa04324e7dc46d303d6\nparent 63e3ea38d3ff7ab69b968e8962f33e82a4f978fb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1574615296 +0000\ncommitter GitHub <noreply@github.com> 1574615296 +0000\n\nMerge #2389\n\n2389: Don't redo field resolution in the IDE r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a58db5712f4fc82845e9397f728815d389c3c38b", "html_url": "https://github.com/rust-lang/rust/commit/a58db5712f4fc82845e9397f728815d389c3c38b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a58db5712f4fc82845e9397f728815d389c3c38b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac9ba5eb32073c16608acaa04324e7dc46d303d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac9ba5eb32073c16608acaa04324e7dc46d303d6", "html_url": "https://github.com/rust-lang/rust/commit/ac9ba5eb32073c16608acaa04324e7dc46d303d6"}, {"sha": "63e3ea38d3ff7ab69b968e8962f33e82a4f978fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/63e3ea38d3ff7ab69b968e8962f33e82a4f978fb", "html_url": "https://github.com/rust-lang/rust/commit/63e3ea38d3ff7ab69b968e8962f33e82a4f978fb"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "a98f2f247d279261defe8c5b558d49aa2b8bdcc8", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -510,7 +510,7 @@ impl VariantDef {\n         }\n     }\n \n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n+    pub(crate) fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n         match self {\n             VariantDef::Struct(it) => it.field(db, name),\n             VariantDef::EnumVariant(it) => it.field(db, name),"}, {"sha": "9e5ce550836402660e060ae9e3b354083d4f58d8", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -216,6 +216,11 @@ impl SourceAnalyzer {\n         self.infer.as_ref()?.field_resolution(expr_id)\n     }\n \n+    pub fn resolve_record_field(&self, field: &ast::RecordField) -> Option<crate::StructField> {\n+        let expr_id = self.expr_id(&field.expr()?)?;\n+        self.infer.as_ref()?.record_field_resolution(expr_id)\n+    }\n+\n     pub fn resolve_record_literal(&self, record_lit: &ast::RecordLit) -> Option<crate::VariantDef> {\n         let expr_id = self.expr_id(&record_lit.clone().into())?;\n         self.infer.as_ref()?.variant_resolution_for_expr(expr_id)"}, {"sha": "0a9a83800ee6ab0ccbe0405df458282e2f0dc1e2", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -126,6 +126,8 @@ pub struct InferenceResult {\n     method_resolutions: FxHashMap<ExprId, Function>,\n     /// For each field access expr, records the field it resolves to.\n     field_resolutions: FxHashMap<ExprId, StructField>,\n+    /// For each field in record literal, records the field it resolves to.\n+    record_field_resolutions: FxHashMap<ExprId, StructField>,\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantDef>,\n     /// For each associated item record what it resolves to\n@@ -143,6 +145,9 @@ impl InferenceResult {\n     pub fn field_resolution(&self, expr: ExprId) -> Option<StructField> {\n         self.field_resolutions.get(&expr).copied()\n     }\n+    pub fn record_field_resolution(&self, expr: ExprId) -> Option<StructField> {\n+        self.record_field_resolutions.get(&expr).copied()\n+    }\n     pub fn variant_resolution_for_expr(&self, id: ExprId) -> Option<VariantDef> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }"}, {"sha": "2996920c626a1cd1effc70fdec96bfc8411eff0b", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -215,19 +215,21 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n                 for (field_idx, field) in fields.iter().enumerate() {\n-                    let field_ty = def_id\n-                        .and_then(|it| match it.field(self.db, &field.name) {\n-                            Some(field) => Some(field),\n-                            None => {\n-                                self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n-                                    expr: tgt_expr,\n-                                    field: field_idx,\n-                                });\n-                                None\n-                            }\n-                        })\n-                        .map_or(Ty::Unknown, |field| field.ty(self.db))\n-                        .subst(&substs);\n+                    let field_def = def_id.and_then(|it| match it.field(self.db, &field.name) {\n+                        Some(field) => Some(field),\n+                        None => {\n+                            self.push_diagnostic(InferenceDiagnostic::NoSuchField {\n+                                expr: tgt_expr,\n+                                field: field_idx,\n+                            });\n+                            None\n+                        }\n+                    });\n+                    if let Some(field_def) = field_def {\n+                        self.result.record_field_resolutions.insert(field.expr, field_def);\n+                    }\n+                    let field_ty =\n+                        field_def.map_or(Ty::Unknown, |field| field.ty(self.db)).subst(&substs);\n                     self.infer_expr_coerce(field.expr, &Expectation::has_type(field_ty));\n                 }\n                 if let Some(expr) = spread {"}, {"sha": "0e606fd0e819dbfa348d42a7cf2a144a1a2d8da9", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -195,7 +195,7 @@ impl Path {\n     }\n \n     /// Converts an `ast::NameRef` into a single-identifier `Path`.\n-    pub fn from_name_ref(name_ref: &ast::NameRef) -> Path {\n+    pub(crate) fn from_name_ref(name_ref: &ast::NameRef) -> Path {\n         name_ref.as_name().into()\n     }\n "}, {"sha": "cab06dea941b0426b135125f7bc60f0b9cd08c69", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58db5712f4fc82845e9397f728815d389c3c38b/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=a58db5712f4fc82845e9397f728815d389c3c38b", "patch": "@@ -1,6 +1,6 @@\n //! Functions that are used to classify an element from its definition or reference.\n \n-use hir::{FromSource, Module, ModuleSource, Path, PathResolution, Source, SourceAnalyzer};\n+use hir::{FromSource, Module, ModuleSource, PathResolution, Source, SourceAnalyzer};\n use ra_prof::profile;\n use ra_syntax::{ast, match_ast, AstNode};\n use test_utils::tested_by;\n@@ -140,12 +140,8 @@ pub(crate) fn classify_name_ref(\n \n     if let Some(record_field) = ast::RecordField::cast(parent.clone()) {\n         tested_by!(goto_definition_works_for_record_fields);\n-        if let Some(record_lit) = record_field.syntax().ancestors().find_map(ast::RecordLit::cast) {\n-            let variant_def = analyzer.resolve_record_literal(&record_lit)?;\n-            let hir_path = Path::from_name_ref(name_ref.value);\n-            let hir_name = hir_path.as_ident()?;\n-            let field = variant_def.field(db, hir_name)?;\n-            return Some(from_struct_field(db, field));\n+        if let Some(field_def) = analyzer.resolve_record_field(&record_field) {\n+            return Some(from_struct_field(db, field_def));\n         }\n     }\n "}]}