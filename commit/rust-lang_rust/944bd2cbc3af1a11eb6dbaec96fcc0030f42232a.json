{"sha": "944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NGJkMmNiYzNhZjFhMTFlYjZkYmFlYzk2ZmNjMDAzMGY0MjIzMmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-12T15:38:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T15:38:04Z"}, "message": "Merge #3559\n\n3559: Implement builtin assert! macro r=matklad a=edwin0cheng\n\nThis PR add a dummy implementation for `assert!` macro, which mainly make `hover` and `goto-def` works on arguments inside it.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "a397f2d024d08c253386242d27e6543ab2fb790f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a397f2d024d08c253386242d27e6543ab2fb790f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJealdcCRBK7hj4Ov3rIwAAdHIIAHzza+ern/LkGv+vQ47GC3Wc\n7yBQHUuKRSQWVnQN4Nj+kgiU/auKuxIeFQ+C6qdVVd5OkQFNcxFPyBkGA+5jmmwQ\n4NUf0gHENC8cSEkh/dM9rurCb/1NhFL42X3ZEKXDcAy1UCw1Du3xltU+yYs2FFo1\nCR68+C8p+WqfZIAZuQrbGCZaE+R8rDHtoDrJn5jY7yPy9hdrS2XLb9obJtZdPVRd\neLD80jOaDAn3RPbnRQn+p0UacqVUwZOwzDGAbCc+KToelRx/TD6HpmR3juGh6YTp\n6nGsATTBdhXcvbEB9dg/PJ60pqMdkjHy+jfjlSgPdLfjHkXaJJIfI0/PP37zVZU=\n=h++F\n-----END PGP SIGNATURE-----\n", "payload": "tree a397f2d024d08c253386242d27e6543ab2fb790f\nparent b08f26c0f8bcc640ee54914ac91da2e0d1b3e607\nparent 8f7703b006bb35ab08959b01ed8ffb27d07f4d0b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1584027484 +0000\ncommitter GitHub <noreply@github.com> 1584027484 +0000\n\nMerge #3559\n\n3559: Implement builtin assert! macro r=matklad a=edwin0cheng\n\nThis PR add a dummy implementation for `assert!` macro, which mainly make `hover` and `goto-def` works on arguments inside it.\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "html_url": "https://github.com/rust-lang/rust/commit/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b08f26c0f8bcc640ee54914ac91da2e0d1b3e607", "url": "https://api.github.com/repos/rust-lang/rust/commits/b08f26c0f8bcc640ee54914ac91da2e0d1b3e607", "html_url": "https://github.com/rust-lang/rust/commit/b08f26c0f8bcc640ee54914ac91da2e0d1b3e607"}, {"sha": "8f7703b006bb35ab08959b01ed8ffb27d07f4d0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f7703b006bb35ab08959b01ed8ffb27d07f4d0b", "html_url": "https://github.com/rust-lang/rust/commit/8f7703b006bb35ab08959b01ed8ffb27d07f4d0b"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "f9d3787f6373dff1974c1d8e97e17a1526081ff7", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "patch": "@@ -88,6 +88,7 @@ register_builtin! {\n     (compile_error, CompileError) => compile_error_expand,\n     (file, File) => file_expand,\n     (line, Line) => line_expand,\n+    (assert, Assert) => assert_expand,\n     (stringify, Stringify) => stringify_expand,\n     (format_args, FormatArgs) => format_args_expand,\n     // format_args_nl only differs in that it adds a newline in the end,\n@@ -151,6 +152,45 @@ fn column_expand(\n     Ok(expanded)\n }\n \n+fn assert_expand(\n+    _db: &dyn AstDatabase,\n+    _id: LazyMacroId,\n+    tt: &tt::Subtree,\n+) -> Result<tt::Subtree, mbe::ExpandError> {\n+    // A hacky implementation for goto def and hover\n+    // We expand `assert!(cond, arg1, arg2)` to\n+    // ```\n+    // {(cond, &(arg1), &(arg2));}\n+    // ```,\n+    // which is wrong but useful.\n+\n+    let mut args = Vec::new();\n+    let mut current = Vec::new();\n+    for tt in tt.token_trees.iter().cloned() {\n+        match tt {\n+            tt::TokenTree::Leaf(tt::Leaf::Punct(p)) if p.char == ',' => {\n+                args.push(current);\n+                current = Vec::new();\n+            }\n+            _ => {\n+                current.push(tt);\n+            }\n+        }\n+    }\n+    if !current.is_empty() {\n+        args.push(current);\n+    }\n+\n+    let arg_tts = args.into_iter().flat_map(|arg| {\n+        quote! { &(##arg), }\n+    }.token_trees).collect::<Vec<_>>();\n+\n+    let expanded = quote! {\n+        { { (##arg_tts); } }\n+    };\n+    Ok(expanded)\n+}\n+\n fn file_expand(\n     _db: &dyn AstDatabase,\n     _id: LazyMacroId,\n@@ -493,6 +533,22 @@ mod tests {\n         assert_eq!(expanded, \"\\\"\\\"\");\n     }\n \n+    #[test]\n+    fn test_assert_expand() {\n+        let expanded = expand_builtin_macro(\n+            r#\"\n+            #[rustc_builtin_macro]\n+            macro_rules! assert {\n+                ($cond:expr) => ({ /* compiler built-in */ });\n+                ($cond:expr, $($args:tt)*) => ({ /* compiler built-in */ })\n+            }\n+            assert!(true, \"{} {:?}\", arg1(a, b, c), arg2);\n+            \"#,\n+        );\n+\n+        assert_eq!(expanded, \"{{(&(true), &(\\\"{} {:?}\\\"), &(arg1(a,b,c)), &(arg2),);}}\");\n+    }\n+\n     #[test]\n     fn test_compile_error_expand() {\n         let expanded = expand_builtin_macro("}, {"sha": "25cc1e9fcebf155cf2004cf592edd4d8e2288af1", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "patch": "@@ -172,6 +172,7 @@ pub mod known {\n         column,\n         compile_error,\n         line,\n+        assert,\n         stringify,\n         concat,\n         include,"}, {"sha": "3fd4233da8b62c15325d6e7e4d140ed1b4d204fa", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "patch": "@@ -99,6 +99,7 @@ macro_rules! __quote {\n     ( & ) => {$crate::__quote!(@PUNCT '&')};\n     ( , ) => {$crate::__quote!(@PUNCT ',')};\n     ( : ) => {$crate::__quote!(@PUNCT ':')};\n+    ( ; ) => {$crate::__quote!(@PUNCT ';')};\n     ( :: ) => {$crate::__quote!(@PUNCT ':', ':')};\n     ( . ) => {$crate::__quote!(@PUNCT '.')};\n     ( < ) => {$crate::__quote!(@PUNCT '<')};"}, {"sha": "0bbba48555170f52864cc8c284569084d2cac7d3", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/944bd2cbc3af1a11eb6dbaec96fcc0030f42232a/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=944bd2cbc3af1a11eb6dbaec96fcc0030f42232a", "patch": "@@ -832,20 +832,35 @@ fn func(foo: i32) { if true { <|>foo; }; }\n         assert_eq!(hover_on, \"\\\"Tracks\\\"\");\n     }\n \n+    #[test]\n+    fn test_hover_through_assert_macro() {\n+        let hover_on = check_hover_result(\n+            r#\"\n+            //- /lib.rs\n+            #[rustc_builtin_macro]\n+            macro_rules! assert {}\n+\n+            fn bar() -> bool { true }\n+            fn foo() {\n+                assert!(ba<|>r());\n+            }\n+            \"#,\n+            &[\"fn bar() -> bool\"],\n+        );\n+\n+        assert_eq!(hover_on, \"bar\");\n+    }\n+\n     #[test]\n     fn test_hover_through_literal_string_in_builtin_macro() {\n         check_hover_no_result(\n             r#\"\n             //- /lib.rs\n             #[rustc_builtin_macro]\n-            macro_rules! assert {\n-                ($cond:expr) => {{ /* compiler built-in */ }};\n-                ($cond:expr,) => {{ /* compiler built-in */ }};\n-                ($cond:expr, $($arg:tt)+) => {{ /* compiler built-in */ }};\n-            }\n+            macro_rules! format {}\n \n             fn foo() {\n-                assert!(\"hel<|>lo\");\n+                format!(\"hel<|>lo {}\", 0);\n             }\n             \"#,\n         );"}]}