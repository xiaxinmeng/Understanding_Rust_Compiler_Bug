{"sha": "b5466f3fb36005c313205d944430498f17aea6fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NDY2ZjNmYjM2MDA1YzMxMzIwNWQ5NDQ0MzA0OThmMTdhZWE2ZmE=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-17T23:41:02Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:26Z"}, "message": "Address issues flagged in review", "tree": {"sha": "6d7ae5caf5a87c295a30343ce6892949f1668b52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7ae5caf5a87c295a30343ce6892949f1668b52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5466f3fb36005c313205d944430498f17aea6fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5466f3fb36005c313205d944430498f17aea6fa", "html_url": "https://github.com/rust-lang/rust/commit/b5466f3fb36005c313205d944430498f17aea6fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5466f3fb36005c313205d944430498f17aea6fa/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5027c5d4ee38e07ee426df433d0c650d55b1be84", "url": "https://api.github.com/repos/rust-lang/rust/commits/5027c5d4ee38e07ee426df433d0c650d55b1be84", "html_url": "https://github.com/rust-lang/rust/commit/5027c5d4ee38e07ee426df433d0c650d55b1be84"}], "stats": {"total": 210, "additions": 90, "deletions": 120}, "files": [{"sha": "3a7d53a93d9521e0a991293d61f516d6091ce963", "filename": "crates/ra_hir/src/code_model_impl/function/scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Ffunction%2Fscope.rs?ref=b5466f3fb36005c313205d944430498f17aea6fa", "patch": "@@ -97,8 +97,6 @@ impl FnScopes {\n                 };\n                 self.scopes[scope].entries.push(entry)\n             }\n-            // FIXME: isn't every call to add_binding starting an entirely new\n-            // tree walk!?\n             p => p.walk_child_pats(|pat| self.add_bindings(body, scope, pat)),\n         }\n     }"}, {"sha": "1d0beb148b0b30b346b72f16b5a85bc160d6d489", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=b5466f3fb36005c313205d944430498f17aea6fa", "patch": "@@ -329,8 +329,6 @@ impl Expr {\n pub struct PatId(RawId);\n impl_arena_id!(PatId);\n \n-// copied verbatim from librustc::hir\n-\n /// Explicit binding annotations given in the HIR for a binding. Note\n /// that this is not the final binding *mode* that we infer after type\n /// inference.\n@@ -341,8 +339,6 @@ pub enum BindingAnnotation {\n     /// when matching. For example, the `x` in `Some(x)` will have binding\n     /// mode `None`; if you do `let Some(x) = &Some(22)`, it will\n     /// ultimately be inferred to be by-reference.\n-    ///\n-    /// Note that implicit reference skipping is not implemented yet (#42640).\n     Unannotated,\n \n     /// Annotated with `mut x` -- could be either ref or not, similar to `None`.\n@@ -375,7 +371,7 @@ pub struct FieldPat {\n /// Close relative to rustc's hir::PatKind\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Pat {\n-    Missing, // do we need this?\n+    Missing,\n     Wild,\n     Tuple(Vec<PatId>),\n     Struct {\n@@ -387,7 +383,6 @@ pub enum Pat {\n         start: ExprId,\n         end: ExprId,\n     },\n-    Box(PatId),\n     Slice {\n         prefix: Vec<PatId>,\n         rest: Option<PatId>,\n@@ -420,7 +415,7 @@ impl Pat {\n             Pat::Tuple(args) | Pat::TupleStruct { args, .. } => {\n                 args.iter().map(|pat| *pat).for_each(f);\n             }\n-            Pat::Ref { pat, .. } | Pat::Box(pat) => f(*pat),\n+            Pat::Ref { pat, .. } => f(*pat),\n             Pat::Slice {\n                 prefix,\n                 rest,"}, {"sha": "09b816cc738ed2d6638e748c4d852569dc2f421c", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 43, "deletions": 66, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5466f3fb36005c313205d944430498f17aea6fa/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b5466f3fb36005c313205d944430498f17aea6fa", "patch": "@@ -37,7 +37,7 @@ use crate::{\n     db::HirDatabase,\n     type_ref::{TypeRef, Mutability},\n     name::KnownName,\n-    expr::{Body, Expr, BindingAnnotation, MatchArm, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},\n+    expr::{Body, Expr, BindingAnnotation, Literal, ExprId, Pat, PatId, UnaryOp, BinaryOp, Statement, FieldPat},\n };\n \n /// The ID of a type variable.\n@@ -874,15 +874,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_fields(&self, path: Option<&Path>) -> Option<(Ty, Vec<StructField>)> {\n-        let def = path\n-            .and_then(|path| self.module.resolve_path(self.db, &path).take_types())\n-            .map(|def_id| def_id.resolve(self.db));\n-\n-        let def = if let Some(def) = def {\n-            def\n-        } else {\n-            return None;\n-        };\n+        let def_id = self.module.resolve_path(self.db, path?).take_types()?;\n+        let def = def_id.resolve(self.db);\n \n         match def {\n             Def::Struct(s) => {\n@@ -891,60 +884,47 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     .struct_data(s.def_id())\n                     .variant_data\n                     .fields()\n-                    .iter()\n-                    .cloned()\n-                    .collect();\n+                    .to_owned();\n                 Some((type_for_struct(self.db, s), fields))\n             }\n             Def::EnumVariant(ev) => {\n-                let fields: Vec<_> = ev.variant_data(self.db).fields().iter().cloned().collect();\n+                let fields: Vec<_> = ev.variant_data(self.db).fields().to_owned();\n                 Some((type_for_enum_variant(self.db, ev), fields))\n             }\n             _ => None,\n         }\n     }\n \n-    fn infer_tuple_struct(&mut self, path: Option<&Path>, subpats: &[PatId]) -> Ty {\n-        let (ty, fields) = if let Some(x) = self.resolve_fields(path) {\n-            x\n-        } else {\n-            return Ty::Unknown;\n-        };\n-\n-        if fields.len() != subpats.len() {\n-            return Ty::Unknown;\n-        }\n+    fn infer_tuple_struct_pat(&mut self, path: Option<&Path>, subpats: &[PatId]) -> Ty {\n+        let (ty, fields) = self\n+            .resolve_fields(path)\n+            .unwrap_or((Ty::Unknown, Vec::new()));\n \n-        for (&subpat, field) in subpats.iter().zip(fields.iter()) {\n-            let sub_ty = self.make_ty(&field.type_ref);\n-            self.infer_pat(subpat, &Expectation::has_type(sub_ty));\n+        for (i, &subpat) in subpats.iter().enumerate() {\n+            let expected_ty = fields\n+                .get(i)\n+                .map_or(Ty::Unknown, |field| self.make_ty(&field.type_ref));\n+            self.infer_pat(subpat, &Expectation::has_type(expected_ty));\n         }\n \n         ty\n     }\n \n-    fn infer_struct(&mut self, path: Option<&Path>, subpats: &[FieldPat]) -> Ty {\n-        let (ty, fields) = if let Some(x) = self.resolve_fields(path) {\n-            x\n-        } else {\n-            return Ty::Unknown;\n-        };\n+    fn infer_struct_pat(&mut self, path: Option<&Path>, subpats: &[FieldPat]) -> Ty {\n+        let (ty, fields) = self\n+            .resolve_fields(path)\n+            .unwrap_or((Ty::Unknown, Vec::new()));\n \n         for subpat in subpats {\n             let matching_field = fields.iter().find(|field| field.name == subpat.name);\n-\n-            if let Some(field) = matching_field {\n-                let typeref = &field.type_ref;\n-                let sub_ty = self.make_ty(typeref);\n-                self.infer_pat(subpat.pat, &Expectation::has_type(sub_ty));\n-            }\n+            let expected_ty =\n+                matching_field.map_or(Ty::Unknown, |field| self.make_ty(&field.type_ref));\n+            self.infer_pat(subpat.pat, &Expectation::has_type(expected_ty));\n         }\n \n         ty\n     }\n \n-    // TODO: Expectation should probably contain a Cow pointer to Ty?\n-    // so that we can make new expectations of subtypes cheaply\n     fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n \n@@ -969,7 +949,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Pat::Ref { pat, mutability } => {\n                 let expectation = match expected.ty {\n-                    Ty::Ref(ref sub_ty, exp_mut) if *mutability == exp_mut => {\n+                    Ty::Ref(ref sub_ty, exp_mut) => {\n+                        if *mutability != exp_mut {\n+                            // TODO: emit type error?\n+                        }\n                         Expectation::has_type((&**sub_ty).clone())\n                     }\n                     _ => Expectation::none(),\n@@ -980,18 +963,16 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Pat::TupleStruct {\n                 path: ref p,\n                 args: ref subpats,\n-            } => self.infer_tuple_struct(p.as_ref(), subpats),\n+            } => self.infer_tuple_struct_pat(p.as_ref(), subpats),\n             Pat::Struct {\n                 path: ref p,\n                 args: ref fields,\n-            } => self.infer_struct(p.as_ref(), fields),\n-            Pat::Path(path) => {\n-                // is this right?\n-                self.module\n-                    .resolve_path(self.db, &path)\n-                    .take_values()\n-                    .map_or(Ty::Unknown, |resolved| self.db.type_for_def(resolved))\n-            }\n+            } => self.infer_struct_pat(p.as_ref(), fields),\n+            Pat::Path(path) => self\n+                .module\n+                .resolve_path(self.db, &path)\n+                .take_values()\n+                .map_or(Ty::Unknown, |resolved| self.db.type_for_def(resolved)),\n             Pat::Bind {\n                 mode,\n                 name: _name,\n@@ -1000,10 +981,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let subty = if let Some(subpat) = subpat {\n                     self.infer_pat(*subpat, expected)\n                 } else {\n-                    let ty = self.new_type_var();\n-                    self.unify(&ty, &expected.ty);\n-                    let ty = self.resolve_ty_as_possible(ty);\n-                    ty\n+                    expected.ty.clone()\n                 };\n \n                 match mode {\n@@ -1075,8 +1053,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 assert_eq!(args.len(), arg_types.len());\n \n                 for (arg_pat, arg_type) in args.iter().zip(arg_types.iter()) {\n-                    let expected = if let Some(tyref) = arg_type {\n-                        let ty = self.make_ty(tyref);\n+                    let expected = if let Some(type_ref) = arg_type {\n+                        let ty = self.make_ty(type_ref);\n                         Expectation::has_type(ty)\n                     } else {\n                         Expectation::none()\n@@ -1143,21 +1121,20 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 ret_ty\n             }\n             Expr::Match { expr, arms } => {\n-                let mut expected = expected.clone();\n+                let expected = if expected.ty == Ty::Unknown {\n+                    Expectation::has_type(self.new_type_var())\n+                } else {\n+                    expected.clone()\n+                };\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n                 let pat_expectation = Expectation::has_type(input_ty);\n \n-                for MatchArm {\n-                    pats,\n-                    expr: arm_expr,\n-                } in arms\n-                {\n-                    for &pat in pats {\n+                for arm in arms {\n+                    for &pat in &arm.pats {\n                         let _pat_ty = self.infer_pat(pat, &pat_expectation);\n                     }\n                     // TODO type the guard\n-                    let ty = self.infer_expr(*arm_expr, &expected);\n-                    expected = Expectation::has_type(ty);\n+                    self.infer_expr(arm.expr, &expected);\n                 }\n \n                 expected.ty"}, {"sha": "86313d4cc1c569f06036b20e959b996268e40cde", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/b5466f3fb36005c313205d944430498f17aea6fa/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/b5466f3fb36005c313205d944430498f17aea6fa/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=b5466f3fb36005c313205d944430498f17aea6fa", "patch": "@@ -183,7 +183,7 @@\n             \"dependencies\": {\n                 \"chalk\": {\n                     \"version\": \"1.1.3\",\n-                    \"resolved\": \"http://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-1.1.3.tgz\",\n                     \"integrity\": \"sha1-qBFcVeSnAv5NFQq9OHKCKn4J/Jg=\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -348,7 +348,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -363,7 +363,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -425,7 +425,7 @@\n         },\n         \"css-select\": {\n             \"version\": \"1.2.0\",\n-            \"resolved\": \"http://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/css-select/-/css-select-1.2.0.tgz\",\n             \"integrity\": \"sha1-KzoRBTnFNV8c2NMUYj6HCxIeyFg=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -461,7 +461,7 @@\n         },\n         \"deep-assign\": {\n             \"version\": \"1.0.0\",\n-            \"resolved\": \"http://registry.npmjs.org/deep-assign/-/deep-assign-1.0.0.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/deep-assign/-/deep-assign-1.0.0.tgz\",\n             \"integrity\": \"sha1-sJJ0O+hCfcYh6gBnzex+cN0Z83s=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -507,7 +507,7 @@\n             \"dependencies\": {\n                 \"domelementtype\": {\n                     \"version\": \"1.1.3\",\n-                    \"resolved\": \"http://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/domelementtype/-/domelementtype-1.1.3.tgz\",\n                     \"integrity\": \"sha1-vSh3PiZCiBrsUVRJJCmcXNgiGFs=\",\n                     \"dev\": true\n                 }\n@@ -540,7 +540,7 @@\n         },\n         \"duplexer\": {\n             \"version\": \"0.1.1\",\n-            \"resolved\": \"http://registry.npmjs.org/duplexer/-/duplexer-0.1.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/duplexer/-/duplexer-0.1.1.tgz\",\n             \"integrity\": \"sha1-rOb/gIwc5mtX0ev5eXessCM0z8E=\",\n             \"dev\": true\n         },\n@@ -558,7 +558,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -573,7 +573,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -627,7 +627,7 @@\n         },\n         \"event-stream\": {\n             \"version\": \"3.3.4\",\n-            \"resolved\": \"http://registry.npmjs.org/event-stream/-/event-stream-3.3.4.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/event-stream/-/event-stream-3.3.4.tgz\",\n             \"integrity\": \"sha1-SrTJoPWlTbkzi0w02Gv86PSzVXE=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -694,7 +694,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -709,7 +709,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -828,7 +828,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -843,7 +843,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -904,7 +904,7 @@\n                 },\n                 \"readable-stream\": {\n                     \"version\": \"1.0.34\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz\",\n                     \"integrity\": \"sha1-Elgg40vIQtLyqq+v5MKRbuMsFXw=\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -916,13 +916,13 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"0.10.31\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz\",\n                     \"integrity\": \"sha1-YuIDvEF2bGwoyfyEMB2rHFMQ+pQ=\",\n                     \"dev\": true\n                 },\n                 \"through2\": {\n                     \"version\": \"0.6.5\",\n-                    \"resolved\": \"http://registry.npmjs.org/through2/-/through2-0.6.5.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/through2/-/through2-0.6.5.tgz\",\n                     \"integrity\": \"sha1-QaucZ7KdVyCQcUEOHXp6lozTrUg=\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -1192,7 +1192,7 @@\n         },\n         \"is-obj\": {\n             \"version\": \"1.0.1\",\n-            \"resolved\": \"http://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz\",\n             \"integrity\": \"sha1-PkcprB9f3gJc19g6iW2rn09n2w8=\",\n             \"dev\": true\n         },\n@@ -1319,7 +1319,7 @@\n         },\n         \"kind-of\": {\n             \"version\": \"1.1.0\",\n-            \"resolved\": \"http://registry.npmjs.org/kind-of/-/kind-of-1.1.0.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/kind-of/-/kind-of-1.1.0.tgz\",\n             \"integrity\": \"sha1-FAo9LUGjbS78+pN3tiwk+ElaXEQ=\",\n             \"dev\": true\n         },\n@@ -1334,7 +1334,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -1349,7 +1349,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -1384,7 +1384,7 @@\n         },\n         \"map-stream\": {\n             \"version\": \"0.1.0\",\n-            \"resolved\": \"http://registry.npmjs.org/map-stream/-/map-stream-0.1.0.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/map-stream/-/map-stream-0.1.0.tgz\",\n             \"integrity\": \"sha1-5WqpTEyAVaFkBKBnS3jyFffI4ZQ=\",\n             \"dev\": true\n         },\n@@ -1439,13 +1439,13 @@\n         },\n         \"minimist\": {\n             \"version\": \"0.0.8\",\n-            \"resolved\": \"http://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz\",\n             \"integrity\": \"sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0=\",\n             \"dev\": true\n         },\n         \"mkdirp\": {\n             \"version\": \"0.5.1\",\n-            \"resolved\": \"http://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n             \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -1618,7 +1618,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -1633,7 +1633,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -1644,13 +1644,13 @@\n         },\n         \"os-homedir\": {\n             \"version\": \"1.0.2\",\n-            \"resolved\": \"http://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/os-homedir/-/os-homedir-1.0.2.tgz\",\n             \"integrity\": \"sha1-/7xJiDNuDoM94MFox+8VISGqf7M=\",\n             \"dev\": true\n         },\n         \"os-tmpdir\": {\n             \"version\": \"1.0.2\",\n-            \"resolved\": \"http://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\n             \"integrity\": \"sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=\",\n             \"dev\": true\n         },\n@@ -1666,7 +1666,7 @@\n         },\n         \"parse-semver\": {\n             \"version\": \"1.1.1\",\n-            \"resolved\": \"http://registry.npmjs.org/parse-semver/-/parse-semver-1.1.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/parse-semver/-/parse-semver-1.1.1.tgz\",\n             \"integrity\": \"sha1-mkr9bfBj3Egm+T+6SpnPIj9mbLg=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -1690,7 +1690,7 @@\n         },\n         \"path-is-absolute\": {\n             \"version\": \"1.0.1\",\n-            \"resolved\": \"http://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n             \"integrity\": \"sha1-F0uSaHNVNP+8es5r9TpanhtcX18=\",\n             \"dev\": true\n         },\n@@ -1702,7 +1702,7 @@\n         },\n         \"pause-stream\": {\n             \"version\": \"0.0.11\",\n-            \"resolved\": \"http://registry.npmjs.org/pause-stream/-/pause-stream-0.0.11.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/pause-stream/-/pause-stream-0.0.11.tgz\",\n             \"integrity\": \"sha1-/lo0sMvOErWqaitAPuLnO2AvFEU=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -1955,7 +1955,7 @@\n         },\n         \"split\": {\n             \"version\": \"0.3.3\",\n-            \"resolved\": \"http://registry.npmjs.org/split/-/split-0.3.3.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/split/-/split-0.3.3.tgz\",\n             \"integrity\": \"sha1-zQ7qXmOiEd//frDwkcQTPi0N0o8=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -1964,7 +1964,7 @@\n         },\n         \"sprintf-js\": {\n             \"version\": \"1.0.3\",\n-            \"resolved\": \"http://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz\",\n             \"integrity\": \"sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=\",\n             \"dev\": true\n         },\n@@ -1993,7 +1993,7 @@\n         },\n         \"stream-combiner\": {\n             \"version\": \"0.0.4\",\n-            \"resolved\": \"http://registry.npmjs.org/stream-combiner/-/stream-combiner-0.0.4.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/stream-combiner/-/stream-combiner-0.0.4.tgz\",\n             \"integrity\": \"sha1-TV5DPBhSYd3mI8o/RMWGvPXErRQ=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -2017,7 +2017,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -2032,7 +2032,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -2058,7 +2058,7 @@\n         },\n         \"strip-ansi\": {\n             \"version\": \"3.0.1\",\n-            \"resolved\": \"http://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz\",\n             \"integrity\": \"sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -2073,7 +2073,7 @@\n         },\n         \"tar\": {\n             \"version\": \"2.2.1\",\n-            \"resolved\": \"http://registry.npmjs.org/tar/-/tar-2.2.1.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/tar/-/tar-2.2.1.tgz\",\n             \"integrity\": \"sha1-jk0qJWwOIYXGsYrWlK7JaLg8sdE=\",\n             \"dev\": true,\n             \"requires\": {\n@@ -2084,7 +2084,7 @@\n         },\n         \"through\": {\n             \"version\": \"2.3.8\",\n-            \"resolved\": \"http://registry.npmjs.org/through/-/through-2.3.8.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/through/-/through-2.3.8.tgz\",\n             \"integrity\": \"sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=\",\n             \"dev\": true\n         },\n@@ -2100,7 +2100,7 @@\n             \"dependencies\": {\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -2115,7 +2115,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -2223,7 +2223,7 @@\n         },\n         \"tunnel\": {\n             \"version\": \"0.0.4\",\n-            \"resolved\": \"http://registry.npmjs.org/tunnel/-/tunnel-0.0.4.tgz\",\n+            \"resolved\": \"https://registry.npmjs.org/tunnel/-/tunnel-0.0.4.tgz\",\n             \"integrity\": \"sha1-LTeFoVjBdMmhbcLARuxfxfF0IhM=\",\n             \"dev\": true\n         },\n@@ -2254,7 +2254,7 @@\n             \"dependencies\": {\n                 \"underscore\": {\n                     \"version\": \"1.8.3\",\n-                    \"resolved\": \"http://registry.npmjs.org/underscore/-/underscore-1.8.3.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/underscore/-/underscore-1.8.3.tgz\",\n                     \"integrity\": \"sha1-Tz+1OxBuYJf8+ctBCfKl6b36UCI=\",\n                     \"dev\": true\n                 }\n@@ -2397,7 +2397,7 @@\n                 },\n                 \"readable-stream\": {\n                     \"version\": \"2.3.6\",\n-                    \"resolved\": \"http://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.6.tgz\",\n                     \"integrity\": \"sha512-tQtKA9WIAhBF3+VLAseyMqZeBjW0AHJoxOtYqSUZNJxauErmLbVm2FW1y+J/YA9dUrAC39ITejlZWhVIwawkKw==\",\n                     \"dev\": true,\n                     \"requires\": {\n@@ -2412,7 +2412,7 @@\n                 },\n                 \"string_decoder\": {\n                     \"version\": \"1.1.1\",\n-                    \"resolved\": \"http://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n+                    \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz\",\n                     \"integrity\": \"sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==\",\n                     \"dev\": true,\n                     \"requires\": {"}]}