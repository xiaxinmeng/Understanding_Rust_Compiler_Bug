{"sha": "3b40d2c1f3ef12c602c804282ff262fd694ffbba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDBkMmMxZjNlZjEyYzYwMmM4MDQyODJmZjI2MmZkNjk0ZmZiYmE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-03T15:19:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-03T15:19:30Z"}, "message": "Rollup merge of #82487 - CDirkx:const-socketaddr, r=m-ou-se\n\nConstify methods of `std::net::SocketAddr`, `SocketAddrV4` and `SocketAddrV6`\n\nThe following methods are made unstable const under the `const_socketaddr` feature (https://github.com/rust-lang/rust/issues/82485):\n\n```rust\n// std::net\n\nimpl SocketAddr {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n    pub const fn is_ipv4(&self) -> bool;\n    pub const fn is_ipv6(&self) -> bool;\n}\n\nimpl SocketAddrV4 {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n}\n\nimpl SocketAddrV6 {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n    pub const fn flowinfo(&self) -> u32;\n    pub const fn scope_id(&self) -> u32;\n}\n```\n\nNote: `SocketAddrV4::ip` and `SocketAddrV6::ip` use pointer casting and depend on the unstable feature `const_raw_ptr_deref`", "tree": {"sha": "c0a2eb77864e572b8859de90199856d80c578750", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a2eb77864e572b8859de90199856d80c578750"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b40d2c1f3ef12c602c804282ff262fd694ffbba", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgaIeCCRBK7hj4Ov3rIwAAdHIIAKpoCobmejIr86yD3YK2+nuS\nKA1++geik33Fg4aV8xxFQo+QfWuRraFxAEMnYxKZytZm4QvrRiTG2EFIST1Zdpdg\nxWWWQLHFTXcHTMsbMOqRSo9ooP9RlNKLuLFls37uPeY6KcTb8pi5iiJ2UmJmY6J1\n7tkYNVX8y2EjtFuBQpLr57zGhcCObetRHfEYancUOQ2laSQiYF2RN5AvMmEvPFKK\nF5Qn/HXJXSMRcC3WQNuMScZcR/NPCYocFQdoJdOCd4BSj7uf0uzifOSUaEM5gGp+\nMF5anW+YwHwgAInJBJru+Zp6ExcP9hUR3ZH4LYRwS+US5Uwd5opYOQG52HDeYs8=\n=ZXdW\n-----END PGP SIGNATURE-----\n", "payload": "tree c0a2eb77864e572b8859de90199856d80c578750\nparent 640ce99bfe70375a24c6775a937d6a258b40398b\nparent 5b84b9a8d8518e3db0e9f7995a54297a33c59b5c\nauthor Yuki Okushi <jtitor@2k36.org> 1617463170 +0900\ncommitter GitHub <noreply@github.com> 1617463170 +0900\n\nRollup merge of #82487 - CDirkx:const-socketaddr, r=m-ou-se\n\nConstify methods of `std::net::SocketAddr`, `SocketAddrV4` and `SocketAddrV6`\n\nThe following methods are made unstable const under the `const_socketaddr` feature (https://github.com/rust-lang/rust/issues/82485):\n\n```rust\n// std::net\n\nimpl SocketAddr {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n    pub const fn is_ipv4(&self) -> bool;\n    pub const fn is_ipv6(&self) -> bool;\n}\n\nimpl SocketAddrV4 {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n}\n\nimpl SocketAddrV6 {\n    pub const fn ip(&self) -> IpAddr;\n    pub const fn port(&self) -> u16;\n    pub const fn flowinfo(&self) -> u32;\n    pub const fn scope_id(&self) -> u32;\n}\n```\n\nNote: `SocketAddrV4::ip` and `SocketAddrV6::ip` use pointer casting and depend on the unstable feature `const_raw_ptr_deref`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b40d2c1f3ef12c602c804282ff262fd694ffbba", "html_url": "https://github.com/rust-lang/rust/commit/3b40d2c1f3ef12c602c804282ff262fd694ffbba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b40d2c1f3ef12c602c804282ff262fd694ffbba/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640ce99bfe70375a24c6775a937d6a258b40398b", "url": "https://api.github.com/repos/rust-lang/rust/commits/640ce99bfe70375a24c6775a937d6a258b40398b", "html_url": "https://github.com/rust-lang/rust/commit/640ce99bfe70375a24c6775a937d6a258b40398b"}, {"sha": "5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c", "html_url": "https://github.com/rust-lang/rust/commit/5b84b9a8d8518e3db0e9f7995a54297a33c59b5c"}], "stats": {"total": 31, "additions": 21, "deletions": 10}, "files": [{"sha": "6ab68100b1d66f6a5d1169c10ccfe3cf98559ae9", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3b40d2c1f3ef12c602c804282ff262fd694ffbba/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b40d2c1f3ef12c602c804282ff262fd694ffbba/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=3b40d2c1f3ef12c602c804282ff262fd694ffbba", "patch": "@@ -249,6 +249,7 @@\n #![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n+#![feature(const_socketaddr)]\n #![feature(const_ipv4)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "70376d5e065756436af7ad3dc90920b295a09d15", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b40d2c1f3ef12c602c804282ff262fd694ffbba/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b40d2c1f3ef12c602c804282ff262fd694ffbba/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=3b40d2c1f3ef12c602c804282ff262fd694ffbba", "patch": "@@ -149,7 +149,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.ip(), IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)));\n     /// ```\n     #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n-    pub fn ip(&self) -> IpAddr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> IpAddr {\n         match *self {\n             SocketAddr::V4(ref a) => IpAddr::V4(*a.ip()),\n             SocketAddr::V6(ref a) => IpAddr::V6(*a.ip()),\n@@ -188,7 +189,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         match *self {\n             SocketAddr::V4(ref a) => a.port(),\n             SocketAddr::V6(ref a) => a.port(),\n@@ -230,7 +232,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), false);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv4(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv4(&self) -> bool {\n         matches!(*self, SocketAddr::V4(_))\n     }\n \n@@ -250,7 +253,8 @@ impl SocketAddr {\n     /// assert_eq!(socket.is_ipv6(), true);\n     /// ```\n     #[stable(feature = \"sockaddr_checker\", since = \"1.16.0\")]\n-    pub fn is_ipv6(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn is_ipv6(&self) -> bool {\n         matches!(*self, SocketAddr::V6(_))\n     }\n }\n@@ -290,7 +294,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.ip(), &Ipv4Addr::new(127, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv4Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv4Addr {\n         // SAFETY: `Ipv4Addr` is `#[repr(C)] struct { _: in_addr; }`.\n         // It is safe to cast from `&in_addr` to `&Ipv4Addr`.\n         unsafe { &*(&self.inner.sin_addr as *const c::in_addr as *const Ipv4Addr) }\n@@ -323,7 +328,8 @@ impl SocketAddrV4 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin_port)\n     }\n \n@@ -386,7 +392,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.ip(), &Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn ip(&self) -> &Ipv6Addr {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn ip(&self) -> &Ipv6Addr {\n         unsafe { &*(&self.inner.sin6_addr as *const c::in6_addr as *const Ipv6Addr) }\n     }\n \n@@ -417,7 +424,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.port(), 8080);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn port(&self) -> u16 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn port(&self) -> u16 {\n         ntohs(self.inner.sin6_port)\n     }\n \n@@ -458,7 +466,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn flowinfo(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n@@ -496,7 +505,8 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn scope_id(&self) -> u32 {\n+    #[rustc_const_unstable(feature = \"const_socketaddr\", issue = \"82485\")]\n+    pub const fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n "}]}