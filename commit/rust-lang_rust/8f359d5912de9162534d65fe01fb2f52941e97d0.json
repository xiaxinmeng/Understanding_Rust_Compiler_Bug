{"sha": "8f359d5912de9162534d65fe01fb2f52941e97d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMzU5ZDU5MTJkZTkxNjI1MzRkNjVmZTAxZmIyZjUyOTQxZTk3ZDA=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-13T18:57:07Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-18T01:14:46Z"}, "message": "Prohibit public glob reexports of private variants", "tree": {"sha": "53359bcb08185efee7bc96c6765826f79aa8d4c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53359bcb08185efee7bc96c6765826f79aa8d4c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f359d5912de9162534d65fe01fb2f52941e97d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f359d5912de9162534d65fe01fb2f52941e97d0", "html_url": "https://github.com/rust-lang/rust/commit/8f359d5912de9162534d65fe01fb2f52941e97d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f359d5912de9162534d65fe01fb2f52941e97d0/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187c89a92a530eabec78e6db9d4ceddd1f5ae00b", "url": "https://api.github.com/repos/rust-lang/rust/commits/187c89a92a530eabec78e6db9d4ceddd1f5ae00b", "html_url": "https://github.com/rust-lang/rust/commit/187c89a92a530eabec78e6db9d4ceddd1f5ae00b"}], "stats": {"total": 67, "additions": 57, "deletions": 10}, "files": [{"sha": "6896e8e534057506888d7d4efbd03eacc215b689", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -1012,11 +1012,6 @@ impl NameBinding {\n         self.defined_with(DefModifiers::PUBLIC)\n     }\n \n-    fn is_reexportable(&self) -> bool {\n-        self.defined_with(DefModifiers::PUBLIC) &&\n-        !self.defined_with(DefModifiers::PRIVATE_VARIANT)\n-    }\n-\n     fn def_and_lp(&self) -> (Def, LastPrivate) {\n         let def = self.def().unwrap();\n         (def, LastMod(if self.is_public() { AllPublic } else { DependsOn(def.def_id()) }))"}, {"sha": "69d5621ce73d9f203fe8feafec8986053b166ef2", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -25,6 +25,7 @@ use {resolve_error, ResolutionError};\n \n use build_reduced_graph;\n \n+use rustc::lint;\n use rustc::middle::def::*;\n use rustc::middle::def_id::DefId;\n use rustc::middle::privacy::*;\n@@ -443,7 +444,7 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                     debug!(\"(resolving single import) found value binding\");\n                     value_result = BoundResult(target_module.clone(),\n                                                child_name_bindings.value_ns.clone());\n-                    if directive.is_public && !child_name_bindings.value_ns.is_reexportable() {\n+                    if directive.is_public && !child_name_bindings.value_ns.is_public() {\n                         let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                         let note_msg = format!(\"Consider marking `{}` as `pub` in the imported \\\n                                                 module\",\n@@ -452,19 +453,40 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                         self.resolver.session.span_note(directive.span, &note_msg);\n                         pub_err = true;\n                     }\n+                    if directive.is_public && child_name_bindings.value_ns.\n+                                              defined_with(DefModifiers::PRIVATE_VARIANT) {\n+                        let msg = format!(\"variant `{}` is private, and cannot be reexported ( \\\n+                                           error E0364), consider declaring its enum as `pub`\",\n+                                           source);\n+                        self.resolver.session.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                                       directive.id,\n+                                                       directive.span,\n+                                                       msg);\n+                        pub_err = true;\n+                    }\n                 }\n                 if child_name_bindings.type_ns.defined() {\n                     debug!(\"(resolving single import) found type binding\");\n                     type_result = BoundResult(target_module.clone(),\n                                               child_name_bindings.type_ns.clone());\n                     if !pub_err && directive.is_public &&\n-                       !child_name_bindings.type_ns.is_reexportable() {\n+                       !child_name_bindings.type_ns.is_public() {\n                         let msg = format!(\"`{}` is private, and cannot be reexported\", source);\n                         let note_msg = format!(\"Consider declaring module `{}` as a `pub mod`\",\n                                                source);\n                         span_err!(self.resolver.session, directive.span, E0365, \"{}\", &msg);\n                         self.resolver.session.span_note(directive.span, &note_msg);\n                     }\n+                    if !pub_err && directive.is_public && child_name_bindings.type_ns.\n+                                                    defined_with(DefModifiers::PRIVATE_VARIANT) {\n+                        let msg = format!(\"variant `{}` is private, and cannot be reexported ( \\\n+                                           error E0365), consider declaring its enum as `pub`\",\n+                                           source);\n+                        self.resolver.session.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                                       directive.id,\n+                                                       directive.span,\n+                                                       msg);\n+                    }\n                 }\n             }\n         }\n@@ -842,10 +864,22 @@ impl<'a, 'b:'a, 'tcx:'b> ImportResolver<'a, 'b, 'tcx> {\n                module_to_string(module_));\n \n         // Merge the child item into the import resolution.\n+        // pub_err makes sure we don't give the same error twice.\n+        let mut pub_err = false;\n         {\n             let mut merge_child_item = |namespace| {\n-                let modifier = DefModifiers::IMPORTABLE | DefModifiers::PUBLIC;\n+                if !pub_err && is_public &&\n+                        name_bindings[namespace].defined_with(DefModifiers::PRIVATE_VARIANT) {\n+                    let msg = format!(\"variant `{}` is private, and cannot be reexported (error \\\n+                                       E0364), consider declaring its enum as `pub`\", name);\n+                    self.resolver.session.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n+                                                   import_directive.id,\n+                                                   import_directive.span,\n+                                                   msg);\n+                    pub_err = true;\n+                }\n \n+                let modifier = DefModifiers::IMPORTABLE | DefModifiers::PUBLIC;\n                 if name_bindings[namespace].defined_with(modifier) {\n                     let namespace_name = match namespace {\n                         TypeNS => \"type\","}, {"sha": "39698fa593a28219018860a58ae5c7ce14cc23c0", "filename": "src/test/compile-fail/private-variant-reexport.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f359d5912de9162534d65fe01fb2f52941e97d0/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-reexport.rs?ref=8f359d5912de9162534d65fe01fb2f52941e97d0", "patch": "@@ -8,8 +8,26 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use E::V; //~ERROR `V` is private, and cannot be reexported\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+mod m1 {\n+    pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n+}\n+\n+mod m2 {\n+    pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n+}\n+\n+mod m3 {\n+    pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n+}\n+\n+mod m4 {\n+    pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n+}\n \n enum E { V }\n \n-fn main() {}\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful"}]}