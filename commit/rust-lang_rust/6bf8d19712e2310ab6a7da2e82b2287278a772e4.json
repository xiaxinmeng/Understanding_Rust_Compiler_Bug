{"sha": "6bf8d19712e2310ab6a7da2e82b2287278a772e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZjhkMTk3MTJlMjMxMGFiNmE3ZGEyZTgyYjIyODcyNzhhNzcyZTQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-29T22:21:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-01T02:51:29Z"}, "message": "rt: Extract rust_sched_launcher from rust_task_thread\n\nrust_sched_launcher is actually responsible for setting up the thread and\nstarting the loop. There will be other implementations that do not actually\nset up a new thread, in order to support scheduling tasks on the main OS\nthread.", "tree": {"sha": "c57072780959c41cd02b9b2f48d003b89ddb9632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57072780959c41cd02b9b2f48d003b89ddb9632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bf8d19712e2310ab6a7da2e82b2287278a772e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf8d19712e2310ab6a7da2e82b2287278a772e4", "html_url": "https://github.com/rust-lang/rust/commit/6bf8d19712e2310ab6a7da2e82b2287278a772e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bf8d19712e2310ab6a7da2e82b2287278a772e4/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "620b4d4946dbaf41ec8c0c7f9ba5c5d9810db89b", "url": "https://api.github.com/repos/rust-lang/rust/commits/620b4d4946dbaf41ec8c0c7f9ba5c5d9810db89b", "html_url": "https://github.com/rust-lang/rust/commit/620b4d4946dbaf41ec8c0c7f9ba5c5d9810db89b"}], "stats": {"total": 108, "additions": 71, "deletions": 37}, "files": [{"sha": "21aeae09cc86b652c574eead37c341d81f1fc0d3", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -51,6 +51,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_run_program.cpp \\\n               rt/rust_env.cpp \\\n               rt/rust_task_thread.cpp \\\n+              rt/rust_sched_launcher.cpp \\\n               rt/rust_scheduler.cpp \\\n               rt/rust_task.cpp \\\n               rt/rust_stack.cpp \\"}, {"sha": "ae0c002dd950a80f37984782166761e5a3e22ffc", "filename": "src/rt/rust_sched_launcher.cpp", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_sched_launcher.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_sched_launcher.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.cpp?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -0,0 +1,16 @@\n+#include \"rust_sched_launcher.h\"\n+#include \"rust_scheduler.h\"\n+\n+const size_t SCHED_STACK_SIZE = 1024*100;\n+\n+rust_sched_launcher::rust_sched_launcher(rust_scheduler *sched,\n+                                         rust_srv *srv, int id)\n+    : rust_thread(SCHED_STACK_SIZE),\n+      kernel(sched->kernel),\n+      thread(sched, srv, id) {\n+}\n+\n+void\n+rust_sched_launcher::run() {\n+    thread.start_main_loop();\n+}"}, {"sha": "4036ceb9c7eb4413b844c8f4c629dd3996ab010b", "filename": "src/rt/rust_sched_launcher.h", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_sched_launcher.h", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_sched_launcher.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_launcher.h?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -0,0 +1,29 @@\n+#ifndef RUST_SCHED_LAUNCHER_H\n+#define RUST_SCHED_LAUNCHER_H\n+\n+#include \"rust_internal.h\"\n+#include \"sync/rust_thread.h\"\n+\n+#ifndef _WIN32\n+#include <pthread.h>\n+#else\n+#include <windows.h>\n+#endif\n+\n+class rust_sched_launcher\n+  : public kernel_owned<rust_sched_launcher>,\n+    public rust_thread {\n+public:\n+    rust_kernel *kernel;\n+\n+private:\n+    rust_task_thread thread;\n+\n+public:\n+    rust_sched_launcher(rust_scheduler *sched, rust_srv *srv, int id);\n+\n+    virtual void run();\n+    rust_task_thread *get_loop() { return &thread; }\n+};\n+\n+#endif // RUST_SCHED_LAUNCHER_H"}, {"sha": "4153972f83ad2308222d0d2a48da1c6fd7922c2c", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -1,5 +1,6 @@\n #include \"rust_scheduler.h\"\n #include \"rust_util.h\"\n+#include \"rust_sched_launcher.h\"\n \n rust_scheduler::rust_scheduler(rust_kernel *kernel,\n \t\t\t       rust_srv *srv,\n@@ -21,21 +22,20 @@ rust_scheduler::~rust_scheduler() {\n     destroy_task_threads();\n }\n \n-rust_task_thread *\n+rust_sched_launcher *\n rust_scheduler::create_task_thread(int id) {\n     rust_srv *srv = this->srv->clone();\n-    rust_task_thread *thread =\n-        new (kernel, \"rust_task_thread\") rust_task_thread(this, srv, id);\n-    KLOG(kernel, kern, \"created task thread: \" PTR \", id: %d, index: %d\",\n-          thread, id, thread->list_index);\n+    rust_sched_launcher *thread =\n+        new (kernel, \"rust_sched_launcher\") rust_sched_launcher(this, srv, id);\n+    KLOG(kernel, kern, \"created task thread: \" PTR \", id: %d\",\n+          thread, id);\n     return thread;\n }\n \n void\n-rust_scheduler::destroy_task_thread(rust_task_thread *thread) {\n-    KLOG(kernel, kern, \"deleting task thread: \" PTR \", name: %s, index: %d\",\n-        thread, thread->name, thread->list_index);\n-    rust_srv *srv = thread->srv;\n+rust_scheduler::destroy_task_thread(rust_sched_launcher *thread) {\n+    KLOG(kernel, kern, \"deleting task thread: \" PTR, thread);\n+    rust_srv *srv = thread->get_loop()->srv;\n     delete thread;\n     delete srv;\n }\n@@ -60,7 +60,7 @@ void\n rust_scheduler::start_task_threads()\n {\n     for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n+        rust_sched_launcher *thread = threads[i];\n         thread->start();\n     }\n }\n@@ -69,16 +69,16 @@ void\n rust_scheduler::join_task_threads()\n {\n     for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n+        rust_sched_launcher *thread = threads[i];\n         thread->join();\n     }\n }\n \n void\n rust_scheduler::kill_all_tasks() {\n     for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n-        thread->kill_all_tasks();\n+        rust_sched_launcher *thread = threads[i];\n+        thread->get_loop()->kill_all_tasks();\n     }\n }\n \n@@ -92,8 +92,8 @@ rust_scheduler::create_task(rust_task *spawner, const char *name) {\n         if (cur_thread >= num_threads)\n             cur_thread = 0;\n     }\n-    rust_task_thread *thread = threads[thread_no];\n-    return thread->create_task(spawner, name);\n+    rust_sched_launcher *thread = threads[thread_no];\n+    return thread->get_loop()->create_task(spawner, name);\n }\n \n void\n@@ -118,7 +118,7 @@ rust_scheduler::exit() {\n     // scheduler will get destroyed, and our fields will cease to exist.\n     size_t current_num_threads = num_threads;\n     for(size_t i = 0; i < current_num_threads; ++i) {\n-        threads[i]->exit();\n+        threads[i]->get_loop()->exit();\n     }\n }\n "}, {"sha": "f1bfaf9b6b16d2b840e37a1a3882495ae5eee792", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -3,6 +3,8 @@\n \n #include \"rust_internal.h\"\n \n+class rust_sched_launcher;\n+\n class rust_scheduler : public kernel_owned<rust_scheduler> {\n     // FIXME: Make these private\n public:\n@@ -17,7 +19,7 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     // When this hits zero we'll tell the threads to exit\n     uintptr_t live_tasks;\n \n-    array_list<rust_task_thread *> threads;\n+    array_list<rust_sched_launcher *> threads;\n     const size_t num_threads;\n     size_t cur_thread;\n \n@@ -26,8 +28,8 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     void create_task_threads();\n     void destroy_task_threads();\n \n-    rust_task_thread *create_task_thread(int id);\n-    void destroy_task_thread(rust_task_thread *thread);\n+    rust_sched_launcher *create_task_thread(int id);\n+    void destroy_task_thread(rust_sched_launcher *thread);\n \n     void exit();\n "}, {"sha": "d692de1414d66221dc33e4ad593ddf128a81b4b2", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -13,15 +13,13 @@ pthread_key_t rust_task_thread::task_key;\n DWORD rust_task_thread::task_key;\n #endif\n \n-const size_t SCHED_STACK_SIZE = 1024*100;\n const size_t C_STACK_SIZE = 1024*1024;\n \n bool rust_task_thread::tls_initialized = false;\n \n rust_task_thread::rust_task_thread(rust_scheduler *sched,\n                                    rust_srv *srv,\n                                    int id) :\n-    rust_thread(SCHED_STACK_SIZE),\n     _log(srv, this),\n     id(id),\n     should_exit(false),\n@@ -256,6 +254,8 @@ rust_task_thread::start_main_loop() {\n         destroy_stack(kernel->region(), cached_c_stack);\n         cached_c_stack = NULL;\n     }\n+\n+    sched->release_task_thread();\n }\n \n rust_task *\n@@ -327,11 +327,6 @@ rust_task_thread::transition(rust_task *task,\n     lock.signal();\n }\n \n-void rust_task_thread::run() {\n-    this->start_main_loop();\n-    sched->release_task_thread();\n-}\n-\n #ifndef _WIN32\n void\n rust_task_thread::init_tls() {"}, {"sha": "a145cc6b12f2a51c6aecf47312f7ae806c48069a", "filename": "src/rt/rust_task_thread.h", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_task_thread.h", "raw_url": "https://github.com/rust-lang/rust/raw/6bf8d19712e2310ab6a7da2e82b2287278a772e4/src%2Frt%2Frust_task_thread.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.h?ref=6bf8d19712e2310ab6a7da2e82b2287278a772e4", "patch": "@@ -2,16 +2,9 @@\n #define RUST_TASK_THREAD_H\n \n #include \"rust_internal.h\"\n-#include \"sync/rust_thread.h\"\n #include \"rust_stack.h\"\n #include \"context.h\"\n \n-#ifndef _WIN32\n-#include <pthread.h>\n-#else\n-#include <windows.h>\n-#endif\n-\n enum rust_task_state {\n     task_state_newborn,\n     task_state_running,\n@@ -21,8 +14,7 @@ enum rust_task_state {\n \n typedef indexed_list<rust_task> rust_task_list;\n \n-struct rust_task_thread : public kernel_owned<rust_task_thread>,\n-                        rust_thread\n+struct rust_task_thread\n {\n private:\n \n@@ -75,6 +67,7 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n \n     randctx rctx;\n \n+    // FIXME: Neither of these are used\n     int32_t list_index;\n     const char *const name;\n \n@@ -103,8 +96,6 @@ struct rust_task_thread : public kernel_owned<rust_task_thread>,\n                     rust_task_state src, rust_task_state dst,\n                     rust_cond *cond, const char* cond_name);\n \n-    virtual void run();\n-\n     void init_tls();\n     void place_task_in_tls(rust_task *task);\n "}]}