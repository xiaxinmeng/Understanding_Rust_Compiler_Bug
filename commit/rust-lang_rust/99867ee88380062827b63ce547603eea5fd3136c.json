{"sha": "99867ee88380062827b63ce547603eea5fd3136c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ODY3ZWU4ODM4MDA2MjgyN2I2M2NlNTQ3NjAzZWVhNWZkMzEzNmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-20T07:08:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-20T07:08:38Z"}, "message": "Auto merge of #35607 - alexcrichton:stabilize-1.12, r=brson\n\nstd: Stabilize APIs for the 1.12 release\n\nStabilized\n\n* `Cell::as_ptr`\n* `RefCell::as_ptr`\n* `IpAddr::is_{unspecified,loopback,multicast}`\n* `Ipv6Addr::octets`\n* `LinkedList::contains`\n* `VecDeque::contains`\n* `ExitStatusExt::from_raw` - both on Unix and Windows\n* `Receiver::recv_timeout`\n* `RecvTimeoutError`\n* `BinaryHeap::peek_mut`\n* `PeekMut`\n* `iter::Product`\n* `iter::Sum`\n* `OccupiedEntry::remove_entry`\n* `VacantEntry::into_key`\n\nDeprecated\n\n* `Cell::as_unsafe_cell`\n* `RefCell::as_unsafe_cell`\n* `OccupiedEntry::remove_pair`\n\nCloses #27708\ncc #27709\nCloses #32313\nCloses #32630\nCloses #32713\nCloses #34029\nCloses #34392\nCloses #34285\nCloses #34529", "tree": {"sha": "701129ef00981e78ff0a181b16885d4aa6e43058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/701129ef00981e78ff0a181b16885d4aa6e43058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99867ee88380062827b63ce547603eea5fd3136c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99867ee88380062827b63ce547603eea5fd3136c", "html_url": "https://github.com/rust-lang/rust/commit/99867ee88380062827b63ce547603eea5fd3136c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99867ee88380062827b63ce547603eea5fd3136c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38fa82a3149a9f1428a9c760aeac7265b045fa24", "url": "https://api.github.com/repos/rust-lang/rust/commits/38fa82a3149a9f1428a9c760aeac7265b045fa24", "html_url": "https://github.com/rust-lang/rust/commit/38fa82a3149a9f1428a9c760aeac7265b045fa24"}, {"sha": "afeeadeae5094a374821a32cc78a47109c7304ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/afeeadeae5094a374821a32cc78a47109c7304ea", "html_url": "https://github.com/rust-lang/rust/commit/afeeadeae5094a374821a32cc78a47109c7304ea"}], "stats": {"total": 160, "additions": 94, "deletions": 66}, "files": [{"sha": "fe9b60c393f09af46bda32f2c1d1c18951b0add4", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -223,27 +223,27 @@ pub struct BinaryHeap<T> {\n /// on `BinaryHeap`. See its documentation for details.\n ///\n /// [`peek_mut()`]: struct.BinaryHeap.html#method.peek_mut\n-#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n pub struct PeekMut<'a, T: 'a + Ord> {\n     heap: &'a mut BinaryHeap<T>\n }\n \n-#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Drop for PeekMut<'a, T> {\n     fn drop(&mut self) {\n         self.heap.sift_down(0);\n     }\n }\n \n-#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> Deref for PeekMut<'a, T> {\n     type Target = T;\n     fn deref(&self) -> &T {\n         &self.heap.data[0]\n     }\n }\n \n-#[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+#[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n impl<'a, T: Ord> DerefMut for PeekMut<'a, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         &mut self.heap.data[0]\n@@ -366,7 +366,6 @@ impl<T: Ord> BinaryHeap<T> {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(binary_heap_peek_mut)]\n     /// use std::collections::BinaryHeap;\n     /// let mut heap = BinaryHeap::new();\n     /// assert!(heap.peek_mut().is_none());\n@@ -380,7 +379,7 @@ impl<T: Ord> BinaryHeap<T> {\n     /// }\n     /// assert_eq!(heap.peek(), Some(&2));\n     /// ```\n-    #[unstable(feature = \"binary_heap_peek_mut\", issue = \"34392\")]\n+    #[stable(feature = \"binary_heap_peek_mut\", since = \"1.12.0\")]\n     pub fn peek_mut(&mut self) -> Option<PeekMut<T>> {\n         if self.is_empty() {\n             None"}, {"sha": "a2e2ad37acb848e44fbd011379a8704891ae8550", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -1981,8 +1981,6 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_entry_recover_keys)]\n-    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::btree_map::Entry;\n     ///\n@@ -1992,7 +1990,7 @@ impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     ///     v.into_key();\n     /// }\n     /// ```\n-    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    #[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]\n     pub fn into_key(self) -> K {\n         self.key\n     }\n@@ -2074,13 +2072,18 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n         self.handle.reborrow().into_kv().0\n     }\n \n+    /// Deprecated, renamed to `remove_entry`\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to `remove_entry`\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        self.remove_entry()\n+    }\n+\n     /// Take ownership of the key and value from the map.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_entry_recover_keys)]\n-    ///\n     /// use std::collections::BTreeMap;\n     /// use std::collections::btree_map::Entry;\n     ///\n@@ -2089,14 +2092,14 @@ impl<'a, K: Ord, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// if let Entry::Occupied(o) = map.entry(\"poneyland\") {\n     ///     // We delete the entry from the map.\n-    ///     o.remove_pair();\n+    ///     o.remove_entry();\n     /// }\n     ///\n     /// // If now try to get the value, it will panic:\n     /// // println!(\"{}\", map[\"poneyland\"]);\n     /// ```\n-    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n-    pub fn remove_pair(self) -> (K, V) {\n+    #[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]\n+    pub fn remove_entry(self) -> (K, V) {\n         self.remove_kv()\n     }\n "}, {"sha": "73aa67849fd2aaf0e976a34d5977cd55108a1f85", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -379,8 +379,6 @@ impl<T> LinkedList<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(linked_list_contains)]\n-    ///\n     /// use std::collections::LinkedList;\n     ///\n     /// let mut list: LinkedList<u32> = LinkedList::new();\n@@ -392,8 +390,7 @@ impl<T> LinkedList<T> {\n     /// assert_eq!(list.contains(&0), true);\n     /// assert_eq!(list.contains(&10), false);\n     /// ```\n-    #[unstable(feature = \"linked_list_contains\", reason = \"recently added\",\n-               issue = \"32630\")]\n+    #[stable(feature = \"linked_list_contains\", since = \"1.12.0\")]\n     pub fn contains(&self, x: &T) -> bool\n         where T: PartialEq<T>\n     {"}, {"sha": "ce5635714b5b898ca3b2c5f113692b00f0dca299", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -939,8 +939,6 @@ impl<T> VecDeque<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(vec_deque_contains)]\n-    ///\n     /// use std::collections::VecDeque;\n     ///\n     /// let mut vector: VecDeque<u32> = VecDeque::new();\n@@ -951,8 +949,7 @@ impl<T> VecDeque<T> {\n     /// assert_eq!(vector.contains(&1), true);\n     /// assert_eq!(vector.contains(&10), false);\n     /// ```\n-    #[unstable(feature = \"vec_deque_contains\", reason = \"recently added\",\n-               issue = \"32630\")]\n+    #[stable(feature = \"vec_deque_contains\", since = \"1.12.0\")]\n     pub fn contains(&self, x: &T) -> bool\n         where T: PartialEq<T>\n     {"}, {"sha": "f448fcf2dbf993862dd7df86b9def02e7a86b3e3", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -11,23 +11,20 @@\n #![deny(warnings)]\n \n #![feature(binary_heap_extras)]\n-#![feature(binary_heap_peek_mut)]\n #![feature(box_syntax)]\n #![feature(btree_range)]\n #![feature(collections)]\n #![feature(collections_bound)]\n #![feature(const_fn)]\n #![feature(fn_traits)]\n #![feature(enumset)]\n-#![feature(linked_list_contains)]\n #![feature(pattern)]\n #![feature(rand)]\n #![feature(step_by)]\n #![feature(str_escape)]\n #![feature(test)]\n #![feature(unboxed_closures)]\n #![feature(unicode)]\n-#![feature(vec_deque_contains)]\n #![feature(vec_into_iter_as_slice)]\n \n extern crate collections;"}, {"sha": "a388012e1daf2cd80e69ed5b5bf5576949230206", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -233,10 +233,28 @@ impl<T:Copy> Cell<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n     pub fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n \n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::Cell;\n+    ///\n+    /// let c = Cell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n     /// Returns a mutable reference to the underlying data.\n     ///\n     /// This call borrows `Cell` mutably (at compile-time) which guarantees\n@@ -653,10 +671,28 @@ impl<T: ?Sized> RefCell<T> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"as_unsafe_cell\", issue = \"27708\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to as_ptr\")]\n     pub unsafe fn as_unsafe_cell(&self) -> &UnsafeCell<T> {\n         &self.value\n     }\n \n+    /// Returns a raw pointer to the underlying data in this cell.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::cell::RefCell;\n+    ///\n+    /// let c = RefCell::new(5);\n+    ///\n+    /// let ptr = c.as_ptr();\n+    /// ```\n+    #[inline]\n+    #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    pub fn as_ptr(&self) -> *mut T {\n+        self.value.get()\n+    }\n+\n     /// Returns a mutable reference to the underlying data.\n     ///\n     /// This call borrows `RefCell` mutably (at compile-time) so there is no"}, {"sha": "cb509156e325eaf81f27690e957cd2784ed86b84", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -563,10 +563,11 @@ impl<'a, I: ExactSizeIterator + ?Sized> ExactSizeIterator for &'a mut I {}\n /// implement the trait can be generated by the `sum` method. Like\n /// `FromIterator` this trait should rarely be called directly and instead\n /// interacted with through `Iterator::sum`.\n-#[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Sum<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// \"summing up\" the items.\n+    #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n     fn sum<I: Iterator<Item=A>>(iter: I) -> Self;\n }\n \n@@ -577,16 +578,17 @@ pub trait Sum<A = Self>: Sized {\n /// which implement the trait can be generated by the `product` method. Like\n /// `FromIterator` this trait should rarely be called directly and instead\n /// interacted with through `Iterator::product`.\n-#[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+#[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n pub trait Product<A = Self>: Sized {\n     /// Method which takes an iterator and generates `Self` from the elements by\n     /// multiplying the items.\n+    #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n     fn product<I: Iterator<Item=A>>(iter: I) -> Self;\n }\n \n macro_rules! integer_sum_product {\n     ($($a:ident)*) => ($(\n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n                 iter.fold(0, |a, b| {\n@@ -595,7 +597,7 @@ macro_rules! integer_sum_product {\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n             fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n                 iter.fold(1, |a, b| {\n@@ -604,7 +606,7 @@ macro_rules! integer_sum_product {\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n                 iter.fold(0, |a, b| {\n@@ -613,7 +615,7 @@ macro_rules! integer_sum_product {\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n                 iter.fold(1, |a, b| {\n@@ -626,28 +628,28 @@ macro_rules! integer_sum_product {\n \n macro_rules! float_sum_product {\n     ($($a:ident)*) => ($(\n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Sum for $a {\n             fn sum<I: Iterator<Item=$a>>(iter: I) -> $a {\n                 iter.fold(0.0, |a, b| a + b)\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl Product for $a {\n             fn product<I: Iterator<Item=$a>>(iter: I) -> $a {\n                 iter.fold(1.0, |a, b| a * b)\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Sum<&'a $a> for $a {\n             fn sum<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n                 iter.fold(0.0, |a, b| a + *b)\n             }\n         }\n \n-        #[unstable(feature = \"iter_arith_traits\", issue = \"34529\")]\n+        #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")]\n         impl<'a> Product<&'a $a> for $a {\n             fn product<I: Iterator<Item=&'a $a>>(iter: I) -> $a {\n                 iter.fold(1.0, |a, b| a * *b)"}, {"sha": "a7c230ba979beacae2ba90a258ea37f69a44a492", "filename": "src/libcoretest/cell.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcoretest%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcoretest%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fcell.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -176,21 +176,21 @@ fn ref_mut_map_accessor() {\n }\n \n #[test]\n-fn as_unsafe_cell() {\n+fn as_ptr() {\n     let c1: Cell<usize> = Cell::new(0);\n     c1.set(1);\n-    assert_eq!(1, unsafe { *c1.as_unsafe_cell().get() });\n+    assert_eq!(1, unsafe { *c1.as_ptr() });\n \n     let c2: Cell<usize> = Cell::new(0);\n-    unsafe { *c2.as_unsafe_cell().get() = 1; }\n+    unsafe { *c2.as_ptr() = 1; }\n     assert_eq!(1, c2.get());\n \n     let r1: RefCell<usize> = RefCell::new(0);\n     *r1.borrow_mut() = 1;\n-    assert_eq!(1, unsafe { *r1.as_unsafe_cell().get() });\n+    assert_eq!(1, unsafe { *r1.as_ptr() });\n \n     let r2: RefCell<usize> = RefCell::new(0);\n-    unsafe { *r2.as_unsafe_cell().get() = 1; }\n+    unsafe { *r2.as_ptr() = 1; }\n     assert_eq!(1, *r2.borrow());\n }\n "}, {"sha": "9116344c579388d3263534e53fc7557a5772dc65", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -10,7 +10,6 @@\n \n #![deny(warnings)]\n \n-#![feature(as_unsafe_cell)]\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n #![feature(cell_extras)]"}, {"sha": "3d3e3941bac1f9748a79e62ce0532f9bd0a64435", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -1640,13 +1640,18 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n         self.elem.read().0\n     }\n \n+    /// Deprecated, renamed to `remove_entry`\n+    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    #[rustc_deprecated(since = \"1.12.0\", reason = \"renamed to `remove_entry`\")]\n+    pub fn remove_pair(self) -> (K, V) {\n+        self.remove_entry()\n+    }\n+\n     /// Take the ownership of the key and value from the map.\n     ///\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_entry_recover_keys)]\n-    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::Entry;\n     ///\n@@ -1655,13 +1660,13 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// if let Entry::Occupied(o) = map.entry(\"poneyland\") {\n     ///     // We delete the entry from the map.\n-    ///     o.remove_pair();\n+    ///     o.remove_entry();\n     /// }\n     ///\n     /// assert_eq!(map.contains_key(\"poneyland\"), false);\n     /// ```\n-    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n-    pub fn remove_pair(self) -> (K, V) {\n+    #[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]\n+    pub fn remove_entry(self) -> (K, V) {\n         pop_internal(self.elem)\n     }\n \n@@ -1808,8 +1813,6 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_entry_recover_keys)]\n-    ///\n     /// use std::collections::HashMap;\n     /// use std::collections::hash_map::Entry;\n     ///\n@@ -1819,7 +1822,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     ///     v.into_key();\n     /// }\n     /// ```\n-    #[unstable(feature = \"map_entry_recover_keys\", issue = \"34285\")]\n+    #[stable(feature = \"map_entry_recover_keys2\", since = \"1.12.0\")]\n     pub fn into_key(self) -> K {\n         self.key\n     }"}, {"sha": "4c3b993497cf5b160bbe4171e8c5a8a388fa7a91", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -63,8 +63,7 @@ impl IpAddr {\n     /// Returns true for the special 'unspecified' address ([IPv4], [IPv6]).\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_unspecified\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_unspecified\n-    #[unstable(feature=\"ip\", issue=\"27709\",\n-               reason=\"recently added and depends on unstable Ipv4Addr.is_unspecified()\")]\n+    #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_unspecified(),\n@@ -75,7 +74,7 @@ impl IpAddr {\n     /// Returns true if this is a loopback address ([IPv4], [IPv6]).\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_loopback\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_loopback\n-    #[unstable(feature=\"ip\", reason=\"recently added\", issue=\"27709\")]\n+    #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_loopback(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_loopback(),\n@@ -86,8 +85,6 @@ impl IpAddr {\n     /// Returns true if the address appears to be globally routable ([IPv4], [IPv6]).\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_global\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_global\n-    #[unstable(feature=\"ip\", issue=\"27709\",\n-               reason=\"recently added and depends on unstable Ip{v4,v6}Addr.is_global()\")]\n     pub fn is_global(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_global(),\n@@ -98,7 +95,7 @@ impl IpAddr {\n     /// Returns true if this is a multicast address ([IPv4], [IPv6]).\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_multicast\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_multicast\n-    #[unstable(feature=\"ip\", reason=\"recently added\", issue=\"27709\")]\n+    #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_multicast(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_multicast(),\n@@ -109,8 +106,6 @@ impl IpAddr {\n     /// Returns true if this address is in a range designated for documentation ([IPv4], [IPv6]).\n     /// [IPv4]: ../../std/net/struct.Ipv4Addr.html#method.is_documentation\n     /// [IPv6]: ../../std/net/struct.Ipv6Addr.html#method.is_documentation\n-    #[unstable(feature=\"ip\", issue=\"27709\",\n-               reason=\"recently added and depends on unstable Ipv6Addr.is_documentation()\")]\n     pub fn is_documentation(&self) -> bool {\n         match *self {\n             IpAddr::V4(ref a) => a.is_documentation(),\n@@ -147,6 +142,7 @@ impl Ipv4Addr {\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n     /// W. Richard Stevens, p. 891; see also [ip7]\n     /// [ip7][http://man7.org/linux/man-pages/man7/ip.7.html]\n+    #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n@@ -515,8 +511,7 @@ impl Ipv6Addr {\n     }\n \n     /// Returns the sixteen eight-bit integers the IPv6 address consists of.\n-    #[unstable(feature = \"ipv6_to_octets\", reason = \"needs some testing\",\n-               issue = \"32313\")]\n+    #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n     pub fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }"}, {"sha": "d8b8c6a77a26629510b33d4f5b58f5e772bc3e3b", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -394,13 +394,15 @@ pub enum TryRecvError {\n /// This enumeration is the list of possible errors that `recv_timeout` could\n /// not return data when called.\n #[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-#[unstable(feature = \"mpsc_recv_timeout\", issue = \"34029\")]\n+#[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n pub enum RecvTimeoutError {\n     /// This channel is currently empty, but the sender(s) have not yet\n     /// disconnected, so data may yet become available.\n+    #[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n     Timeout,\n     /// This channel's sending half has become disconnected, and there will\n     /// never be any more data received on this channel\n+    #[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n     Disconnected,\n }\n \n@@ -912,8 +914,6 @@ impl<T> Receiver<T> {\n     /// # Examples\n     ///\n     /// ```no_run\n-    /// #![feature(mpsc_recv_timeout)]\n-    ///\n     /// use std::sync::mpsc::{self, RecvTimeoutError};\n     /// use std::time::Duration;\n     ///\n@@ -922,7 +922,7 @@ impl<T> Receiver<T> {\n     /// let timeout = Duration::from_millis(100);\n     /// assert_eq!(Err(RecvTimeoutError::Timeout), recv.recv_timeout(timeout));\n     /// ```\n-    #[unstable(feature = \"mpsc_recv_timeout\", issue = \"34029\")]\n+    #[stable(feature = \"mpsc_recv_timeout\", since = \"1.12.0\")]\n     pub fn recv_timeout(&self, timeout: Duration) -> Result<T, RecvTimeoutError> {\n         // Do an optimistic try_recv to avoid the performance impact of\n         // Instant::now() in the full-channel case."}, {"sha": "dd70ba2e490ad53e825660e12f5226d8354767e0", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -114,7 +114,7 @@ impl CommandExt for process::Command {\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `i32` return value of\n     /// a process.\n-    #[unstable(feature = \"exit_status_from\", issue = \"32713\")]\n+    #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: i32) -> Self;\n \n     /// If the process was terminated by a signal, returns that signal."}, {"sha": "98166bf8cda09d9bcf7d8ac38788bd09d5c37bb8", "filename": "src/libstd/sys/windows/ext/process.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Fprocess.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -83,10 +83,11 @@ impl IntoRawHandle for process::ChildStderr {\n }\n \n /// Windows-specific extensions to `std::process::ExitStatus`\n-#[unstable(feature = \"exit_status_from\", issue = \"32713\")]\n+#[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n pub trait ExitStatusExt {\n     /// Creates a new `ExitStatus` from the raw underlying `u32` return value of\n     /// a process.\n+    #[stable(feature = \"exit_status_from\", since = \"1.12.0\")]\n     fn from_raw(raw: u32) -> Self;\n }\n "}, {"sha": "2b4193306ddf5d08faa91a464431ef37b6887e01", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99867ee88380062827b63ce547603eea5fd3136c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=99867ee88380062827b63ce547603eea5fd3136c", "patch": "@@ -42,7 +42,6 @@\n #![feature(staged_api)]\n #![feature(question_mark)]\n #![feature(panic_unwind)]\n-#![feature(mpsc_recv_timeout)]\n \n extern crate getopts;\n extern crate term;"}]}