{"sha": "1f7cb16fce3f5a334a3b05d168e8c933473e227f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmN2NiMTZmY2UzZjVhMzM0YTNiMDVkMTY4ZThjOTMzNDczZTIyN2Y=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-08T21:06:37Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-06-30T00:21:13Z"}, "message": "Return `EvaluatedToOk` when type in outlives predicate is global\n\nA global type doesn't reference any local regions or types, so it's\nguaranteed to outlive any region.", "tree": {"sha": "2ee4cdce4d269f92f58371d71089b7fb2ff75cfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ee4cdce4d269f92f58371d71089b7fb2ff75cfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f7cb16fce3f5a334a3b05d168e8c933473e227f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmDbuPsACgkQtAh+UQ6Y\nsWQtxRAAsXyasDVGYjqR7JFOqX/QH/SD478Fm4y4MmO3FkR6oLEL+F2jx1G8165b\nCtuj95vP3ZtohKLO0iVKctSqyxMXsRmLX2K5UsNQTVjkhG/HE4rfI0fcGwibPoOd\nasPd+d/8MMxHbEi2xY6iN15ezUGXYWfwf9tzBdMsUT3mhoUfHhnbTAqu5TP9h2tS\n91kVR4zFLlscovfHfu5VYqv5SwaLenD1EWUxc6Nq1fMlp28il9vDe1MexDAVu+Ev\ntY87d3Y8x6c1w3tylEU+Qf0UQYSFsABcTkwcmHX4Ghh1mH2Ttc8RQ9bkwUBccQak\nfEf6XmCrG+O2SeQuKovfJPqBNrB1GhyH2IJTOuHQA7ppTOTojnlX2xdjFjnDzK5u\nrx/qhUT7/pf6O3F/2S7Qn7wRGQQbkLG2Xp/Kaf2JLZtriQNKouGGirVafPhw6mih\nxLCdN3+t6omT/Q+IsuIFSvZyVFyvrZpEk+b+DzmwhAP0XHJtFanxLGV2MaOh0luK\n2dNhhEa1sjwmy5S0YQYTKyPjY0pb5J7b2fNLLIw8Llskk1BsgM47WTsXme/4s+y3\n01oXZWrIisOT9Z4tf2jtMuhs9qg7LExUq56+yjaCn0niNyUuc+mK/OEGGpSqBn67\nthFWYItCQqHBlUgcTSZRjVYcd9+DiECG5+glMU4paGt1vme1DrU=\n=Xb2C\n-----END PGP SIGNATURE-----", "payload": "tree 2ee4cdce4d269f92f58371d71089b7fb2ff75cfd\nparent 6d820866a27b1949e237be79b9c8c0145fe728b7\nauthor Aaron Hill <aa1ronham@gmail.com> 1620507997 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1625012473 -0500\n\nReturn `EvaluatedToOk` when type in outlives predicate is global\n\nA global type doesn't reference any local regions or types, so it's\nguaranteed to outlive any region.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f7cb16fce3f5a334a3b05d168e8c933473e227f", "html_url": "https://github.com/rust-lang/rust/commit/1f7cb16fce3f5a334a3b05d168e8c933473e227f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f7cb16fce3f5a334a3b05d168e8c933473e227f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d820866a27b1949e237be79b9c8c0145fe728b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d820866a27b1949e237be79b9c8c0145fe728b7", "html_url": "https://github.com/rust-lang/rust/commit/6d820866a27b1949e237be79b9c8c0145fe728b7"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "6cecff4b89d9d0c26390d631c6dc6f4691d750c4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1f7cb16fce3f5a334a3b05d168e8c933473e227f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7cb16fce3f5a334a3b05d168e8c933473e227f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=1f7cb16fce3f5a334a3b05d168e8c933473e227f", "patch": "@@ -492,7 +492,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     None => Ok(EvaluatedToAmbig),\n                 },\n \n-                ty::PredicateKind::TypeOutlives(..) | ty::PredicateKind::RegionOutlives(..) => {\n+                ty::PredicateKind::TypeOutlives(pred) => {\n+                    if pred.0.is_global() {\n+                        Ok(EvaluatedToOk)\n+                    } else {\n+                        Ok(EvaluatedToOkModuloRegions)\n+                    }\n+                }\n+\n+                ty::PredicateKind::RegionOutlives(..) => {\n                     // We do not consider region relationships when evaluating trait matches.\n                     Ok(EvaluatedToOkModuloRegions)\n                 }"}, {"sha": "1be0b05fa2b8c25a753cff2b82e3abe610bcf7a7", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f7cb16fce3f5a334a3b05d168e8c933473e227f/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f7cb16fce3f5a334a3b05d168e8c933473e227f/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs?ref=1f7cb16fce3f5a334a3b05d168e8c933473e227f", "patch": "@@ -17,8 +17,8 @@ pub struct Second {\n     d: Vec<First>,\n }\n \n-struct Third<f> {\n-    g: Vec<f>,\n+struct Third<'a, f> {\n+    g: Vec<(f, &'a f)>,\n }\n \n enum Ty {\n@@ -38,29 +38,29 @@ struct Sixth {\n }\n \n #[rustc_evaluate_where_clauses]\n-fn forward()\n+fn forward<'a>()\n where\n     Vec<First>: Unpin,\n-    Third<Ty>: Unpin,\n+    Third<'a, Ty>: Unpin,\n {\n }\n \n #[rustc_evaluate_where_clauses]\n-fn reverse()\n+fn reverse<'a>()\n where\n-    Third<Ty>: Unpin,\n+    Third<'a, Ty>: Unpin,\n     Vec<First>: Unpin,\n {\n }\n \n fn main() {\n-    // Key is that Vec<First> is \"ok\" and Third<Ty> is \"ok modulo regions\":\n+    // Key is that Vec<First> is \"ok\" and Third<'_, Ty> is \"ok modulo regions\":\n \n     forward();\n     //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n-    //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<Third<'_, Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n \n     reverse();\n     //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOk)\n-    //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<Third<'_, Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n }"}, {"sha": "43acc66fd73cbb00a589f918c15cd1357b61eee0", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f7cb16fce3f5a334a3b05d168e8c933473e227f/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f7cb16fce3f5a334a3b05d168e8c933473e227f/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr?ref=1f7cb16fce3f5a334a3b05d168e8c933473e227f", "patch": "@@ -7,20 +7,20 @@ LL |     Vec<First>: Unpin,\n LL |     forward();\n    |     ^^^^^^^\n \n-error: evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+error: evaluate(Binder(TraitPredicate(<Third<'_, Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n   --> $DIR/issue-83538-tainted-cache-after-cycle.rs:59:5\n    |\n-LL |     Third<Ty>: Unpin,\n-   |                ----- predicate\n+LL |     Third<'a, Ty>: Unpin,\n+   |                    ----- predicate\n ...\n LL |     forward();\n    |     ^^^^^^^\n \n-error: evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+error: evaluate(Binder(TraitPredicate(<Third<'_, Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n   --> $DIR/issue-83538-tainted-cache-after-cycle.rs:63:5\n    |\n-LL |     Third<Ty>: Unpin,\n-   |                ----- predicate\n+LL |     Third<'a, Ty>: Unpin,\n+   |                    ----- predicate\n ...\n LL |     reverse();\n    |     ^^^^^^^"}]}