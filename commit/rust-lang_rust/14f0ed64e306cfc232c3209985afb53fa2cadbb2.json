{"sha": "14f0ed64e306cfc232c3209985afb53fa2cadbb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZjBlZDY0ZTMwNmNmYzIzMmMzMjA5OTg1YWZiNTNmYTJjYWRiYjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T01:16:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-19T01:16:41Z"}, "message": "Auto merge of #65570 - tmandry:rollup-hck39pf, r=tmandry\n\nRollup of 19 pull requests\n\nSuccessful merges:\n\n - #65016 (Always inline `mem::{size_of,align_of}` in debug builds)\n - #65197 (Prepare `MutVisitor`s to handle interned projections)\n - #65201 (Disable Go and OCaml bindings when building LLVM)\n - #65334 (Add long error explanation for E0575)\n - #65364 (Collect occurrences of empty blocks for mismatched braces diagnostic)\n - #65455 (Avoid unnecessary `TokenTree` to `TokenStream` conversions)\n - #65472 (Use a sharded dep node to dep node index map)\n - #65480 (Speed up `LexicalResolve::expansion()`)\n - #65493 (Add long error explanation for E0584)\n - #65496 (properly document panics in div_euclid and rem_euclid)\n - #65498 (Plugins deprecation: don\u2019t suggest simply removing the attribute)\n - #65508 (add option to ping llvm ice-breakers to triagebot)\n - #65511 (save-analysis: Nest tables when processing impl block definitions)\n - #65513 (reorder fmt docs for more clarity)\n - #65532 (doc: make BitSet intro more short)\n - #65535 (rustc: arena-allocate the slice in `ty::GenericsPredicate`, not the whole struct.)\n - #65540 (show up some extra info when t!() fails)\n - #65549 (Fix left/right shift typo in wrapping rotate docs)\n - #65552 (Clarify diagnostics when using `~` as a unary op)\n\nFailed merges:\n\n - #65390 (Add long error explanation for E0576)\n - #65434 (Add long error explanation for E0577)\n - #65471 (Add long error explanation for E0578)\n\nr? @ghost", "tree": {"sha": "6d41ada9496e26f1b05a07658d62d0773663282e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d41ada9496e26f1b05a07658d62d0773663282e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14f0ed64e306cfc232c3209985afb53fa2cadbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14f0ed64e306cfc232c3209985afb53fa2cadbb2", "html_url": "https://github.com/rust-lang/rust/commit/14f0ed64e306cfc232c3209985afb53fa2cadbb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14f0ed64e306cfc232c3209985afb53fa2cadbb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "518deda77feb4957bfd311b6cb50baa7ef9ca6a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/518deda77feb4957bfd311b6cb50baa7ef9ca6a2", "html_url": "https://github.com/rust-lang/rust/commit/518deda77feb4957bfd311b6cb50baa7ef9ca6a2"}, {"sha": "3850408b9b85d27e98915e57cefbd659e909b37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3850408b9b85d27e98915e57cefbd659e909b37a", "html_url": "https://github.com/rust-lang/rust/commit/3850408b9b85d27e98915e57cefbd659e909b37a"}], "stats": {"total": 1371, "additions": 876, "deletions": 495}, "files": [{"sha": "6fc72fa0b2a37d23f5ad367129bdce7a0d22d6ff", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1126,7 +1126,7 @@ impl Build {\n         }\n \n         let mut paths = Vec::new();\n-        let contents = t!(fs::read(stamp));\n+        let contents = t!(fs::read(stamp), &stamp);\n         // This is the method we use for extracting paths from the stamp file passed to us. See\n         // run_cargo for more information (in compile.rs).\n         for part in contents.split(|b| *b == 0) {"}, {"sha": "fb308bc35ebc5e8519bb1a2b487b213f071f03e0", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -157,6 +157,7 @@ impl Step for Llvm {\n            .define(\"WITH_POLLY\", \"OFF\")\n            .define(\"LLVM_ENABLE_TERMINFO\", \"OFF\")\n            .define(\"LLVM_ENABLE_LIBEDIT\", \"OFF\")\n+           .define(\"LLVM_ENABLE_BINDINGS\", \"OFF\")\n            .define(\"LLVM_ENABLE_Z3_SOLVER\", \"OFF\")\n            .define(\"LLVM_PARALLEL_COMPILE_JOBS\", builder.jobs().to_string())\n            .define(\"LLVM_TARGET_ARCH\", target.split('-').next().unwrap())\n@@ -169,15 +170,6 @@ impl Step for Llvm {\n             }\n         }\n \n-        // By default, LLVM will automatically find OCaml and, if it finds it,\n-        // install the LLVM bindings in LLVM_OCAML_INSTALL_PATH, which defaults\n-        // to /usr/bin/ocaml.\n-        // This causes problem for non-root builds of Rust. Side-step the issue\n-        // by setting LLVM_OCAML_INSTALL_PATH to a relative path, so it installs\n-        // in the prefix.\n-        cfg.define(\"LLVM_OCAML_INSTALL_PATH\",\n-            env::var_os(\"LLVM_OCAML_INSTALL_PATH\").unwrap_or_else(|| \"usr/lib/ocaml\".into()));\n-\n         let want_lldb = builder.config.lldb_enabled && !self.emscripten;\n \n         // This setting makes the LLVM tools link to the dynamic LLVM library,"}, {"sha": "bb94fb2b755f53342b76fd3dbd28e0e223510196", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -21,6 +21,13 @@ macro_rules! t {\n             Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n         }\n     };\n+    // it can show extra info in the second parameter\n+    ($e:expr, $extra:expr) => {\n+        match $e {\n+            Ok(e) => e,\n+            Err(e) => panic!(\"{} failed with {} ({:?})\", stringify!($e), e, $extra),\n+        }\n+    };\n }\n \n // Because Cargo adds the compiler's dylib path to our library search path, llvm-config may"}, {"sha": "cbfc55233a1e0e3902444dd66e3bd182cec11c17", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 67, "deletions": 44, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -86,27 +86,74 @@\n //! parameters (corresponding to `format_spec` in the syntax above). These\n //! parameters affect the string representation of what's being formatted.\n //!\n+//! ## Width\n+//!\n+//! ```\n+//! // All of these print \"Hello x    !\"\n+//! println!(\"Hello {:5}!\", \"x\");\n+//! println!(\"Hello {:1$}!\", \"x\", 5);\n+//! println!(\"Hello {1:0$}!\", 5, \"x\");\n+//! println!(\"Hello {:width$}!\", \"x\", width = 5);\n+//! ```\n+//!\n+//! This is a parameter for the \"minimum width\" that the format should take up.\n+//! If the value's string does not fill up this many characters, then the\n+//! padding specified by fill/alignment will be used to take up the required\n+//! space (see below).\n+//!\n+//! The value for the width can also be provided as a [`usize`] in the list of\n+//! parameters by adding a postfix `$`, indicating that the second argument is\n+//! a [`usize`] specifying the width.\n+//!\n+//! Referring to an argument with the dollar syntax does not affect the \"next\n+//! argument\" counter, so it's usually a good idea to refer to arguments by\n+//! position, or use named arguments.\n+//!\n //! ## Fill/Alignment\n //!\n-//! The fill character is provided normally in conjunction with the\n-//! [`width`](#width)\n-//! parameter. This indicates that if the value being formatted is smaller than\n-//! `width` some extra characters will be printed around it. The extra\n-//! characters are specified by `fill`, and the alignment can be one of the\n-//! following options:\n+//! ```\n+//! assert_eq!(format!(\"Hello {:<5}!\", \"x\"),  \"Hello x    !\");\n+//! assert_eq!(format!(\"Hello {:-<5}!\", \"x\"), \"Hello x----!\");\n+//! assert_eq!(format!(\"Hello {:^5}!\", \"x\"),  \"Hello   x  !\");\n+//! assert_eq!(format!(\"Hello {:>5}!\", \"x\"),  \"Hello     x!\");\n+//! ```\n //!\n-//! * `<` - the argument is left-aligned in `width` columns\n-//! * `^` - the argument is center-aligned in `width` columns\n-//! * `>` - the argument is right-aligned in `width` columns\n+//! The optional fill character and alignment is provided normally in conjunction with the\n+//! [`width`](#width) parameter. It must be defined before `width`, right after the `:`.\n+//! This indicates that if the value being formatted is smaller than\n+//! `width` some extra characters will be printed around it.\n+//! Filling comes in the following variants for different alignments:\n+//!\n+//! * `[fill]<` - the argument is left-aligned in `width` columns\n+//! * `[fill]^` - the argument is center-aligned in `width` columns\n+//! * `[fill]>` - the argument is right-aligned in `width` columns\n+//!\n+//! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n+//! left-aligned. The\n+//! defaults for numeric formatters is also a space but with right-alignment. If\n+//! the `0` flag (see below) is specified for numerics, then the implicit fill character is\n+//! `0`.\n //!\n //! Note that alignment may not be implemented by some types. In particular, it\n //! is not generally implemented for the `Debug` trait.  A good way to ensure\n-//! padding is applied is to format your input, then use this resulting string\n-//! to pad your output.\n+//! padding is applied is to format your input, then pad this resulting string\n+//! to obtain your output:\n+//!\n+//! ```\n+//! println!(\"Hello {:^15}!\", format!(\"{:?}\", Some(\"hi\"))); // => \"Hello   Some(\"hi\")   !\"\n+//! ```\n //!\n //! ## Sign/`#`/`0`\n //!\n-//! These can all be interpreted as flags for a particular formatter.\n+//! ```\n+//! assert_eq!(format!(\"Hello {:+}!\", 5), \"Hello +5!\");\n+//! assert_eq!(format!(\"{:#x}!\", 27), \"0x1b!\");\n+//! assert_eq!(format!(\"Hello {:05}!\", 5),  \"Hello 00005!\");\n+//! assert_eq!(format!(\"Hello {:05}!\", -5), \"Hello -0005!\");\n+//! assert_eq!(format!(\"{:#010x}!\", 27), \"0x0000001b!\");\n+//! ```\n+//!\n+//! These are all flags altering the behavior of the formatter.\n //!\n //! * `+` - This is intended for numeric types and indicates that the sign\n //!         should always be printed. Positive signs are never printed by\n@@ -121,44 +168,15 @@\n //!     * `#X` - precedes the argument with a `0x`\n //!     * `#b` - precedes the argument with a `0b`\n //!     * `#o` - precedes the argument with a `0o`\n-//! * `0` - This is used to indicate for integer formats that the padding should\n+//! * `0` - This is used to indicate for integer formats that the padding to `width` should\n //!         both be done with a `0` character as well as be sign-aware. A format\n //!         like `{:08}` would yield `00000001` for the integer `1`, while the\n //!         same format would yield `-0000001` for the integer `-1`. Notice that\n //!         the negative version has one fewer zero than the positive version.\n //!         Note that padding zeroes are always placed after the sign (if any)\n //!         and before the digits. When used together with the `#` flag, a similar\n //!         rule applies: padding zeroes are inserted after the prefix but before\n-//!         the digits.\n-//!\n-//! ## Width\n-//!\n-//! This is a parameter for the \"minimum width\" that the format should take up.\n-//! If the value's string does not fill up this many characters, then the\n-//! padding specified by fill/alignment will be used to take up the required\n-//! space.\n-//!\n-//! The default [fill/alignment](#fillalignment) for non-numerics is a space and\n-//! left-aligned. The\n-//! defaults for numeric formatters is also a space but with right-alignment. If\n-//! the `0` flag is specified for numerics, then the implicit fill character is\n-//! `0`.\n-//!\n-//! The value for the width can also be provided as a [`usize`] in the list of\n-//! parameters by using the dollar syntax indicating that the second argument is\n-//! a [`usize`] specifying the width, for example:\n-//!\n-//! ```\n-//! // All of these print \"Hello x    !\"\n-//! println!(\"Hello {:5}!\", \"x\");\n-//! println!(\"Hello {:1$}!\", \"x\", 5);\n-//! println!(\"Hello {1:0$}!\", 5, \"x\");\n-//! println!(\"Hello {:width$}!\", \"x\", width = 5);\n-//! ```\n-//!\n-//! Referring to an argument with the dollar syntax does not affect the \"next\n-//! argument\" counter, so it's usually a good idea to refer to arguments by\n-//! position, or use named arguments.\n+//!         the digits. The prefix is included in the total width.\n //!\n //! ## Precision\n //!\n@@ -235,9 +253,14 @@\n //! them with the same character. For example, the `{` character is escaped with\n //! `{{` and the `}` character is escaped with `}}`.\n //!\n+//! ```\n+//! assert_eq!(format!(\"Hello {{}}\"), \"Hello {}\");\n+//! assert_eq!(format!(\"{{ Hello\"), \"{ Hello\");\n+//! ```\n+//!\n //! # Syntax\n //!\n-//! To summarize, you can find the full grammar of format strings.\n+//! To summarize, here you can find the full grammar of format strings.\n //! The syntax for the formatting language used is drawn from other languages,\n //! so it should not be too alien. Arguments are formatted with Python-like\n //! syntax, meaning that arguments are surrounded by `{}` instead of the C-like"}, {"sha": "c7da56aad309a976f9291effb656acda9364a1dc", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -236,7 +236,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n /// ```\n ///\n /// [alignment]: ./fn.align_of.html\n-#[inline]\n+#[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n pub const fn size_of<T>() -> usize {\n@@ -328,7 +328,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n ///\n /// assert_eq!(4, mem::align_of::<i32>());\n /// ```\n-#[inline]\n+#[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n pub const fn align_of<T>() -> usize {"}, {"sha": "8f4ade377e312c013b384f2134c3876e50560501", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1864,7 +1864,7 @@ if `self < 0`, this is equal to round towards +/- infinity.\n \n # Panics\n \n-This function will panic if `rhs` is 0.\n+This function will panic if `rhs` is 0 or the division results in overflow.\n \n # Examples\n \n@@ -1903,7 +1903,7 @@ This is done as if by the Euclidean division algorithm -- given\n \n # Panics\n \n-This function will panic if `rhs` is 0.\n+This function will panic if `rhs` is 0 or the division results in overflow.\n \n # Examples\n \n@@ -3694,6 +3694,10 @@ Since, for the positive integers, all common\n definitions of division are equal, this\n is exactly equal to `self / rhs`.\n \n+# Panics\n+\n+This function will panic if `rhs` is 0.\n+\n # Examples\n \n Basic usage:\n@@ -3719,6 +3723,10 @@ Since, for the positive integers, all common\n definitions of division are equal, this\n is exactly equal to `self % rhs`.\n \n+# Panics\n+\n+This function will panic if `rhs` is 0.\n+\n # Examples\n \n Basic usage:"}, {"sha": "5fe9895d8d24f94543955286541f66ae464ec06f", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -437,7 +437,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// wrapping the truncated bits to the end of the resulting\n             /// integer.\n             ///\n-            /// Please note this isn't the same operation as the `>>` shifting\n+            /// Please note this isn't the same operation as the `<<` shifting\n             /// operator!\n             ///\n             /// # Examples\n@@ -463,7 +463,7 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// wrapping the truncated bits to the beginning of the resulting\n             /// integer.\n             ///\n-            /// Please note this isn't the same operation as the `<<` shifting\n+            /// Please note this isn't the same operation as the `>>` shifting\n             /// operator!\n             ///\n             /// # Examples"}, {"sha": "3daf0fc9df7a06606cd090f84ca7d1d29cdcbaf9", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -98,7 +98,6 @@ macro_rules! arena_types {\n                 rustc::hir::def_id::DefId,\n             >,\n             [few] resolve_lifetimes: rustc::middle::resolve_lifetime::ResolveLifetimes,\n-            [decode] generic_predicates: rustc::ty::GenericPredicates<'tcx>,\n             [few] lint_levels: rustc::lint::LintLevelMap,\n             [few] stability_index: rustc::middle::stability::Index<'tcx>,\n             [few] features: syntax::feature_gate::Features,"}, {"sha": "337cdddc432c4640ed1c8321f5e9d554a373bef2", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -4,6 +4,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::vec::{Idx, IndexVec};\n use smallvec::SmallVec;\n use rustc_data_structures::sync::{Lrc, Lock, AtomicU32, AtomicU64, Ordering};\n+use rustc_data_structures::sharded::{self, Sharded};\n use std::sync::atomic::Ordering::SeqCst;\n use std::env;\n use std::hash::Hash;\n@@ -381,7 +382,7 @@ impl DepGraph {\n     #[inline]\n     pub fn read(&self, v: DepNode) {\n         if let Some(ref data) = self.data {\n-            let map = data.current.node_to_node_index.lock();\n+            let map = data.current.node_to_node_index.get_shard_by_value(&v).lock();\n             if let Some(dep_node_index) = map.get(&v).copied() {\n                 std::mem::drop(map);\n                 data.read_index(dep_node_index);\n@@ -405,6 +406,7 @@ impl DepGraph {\n             .unwrap()\n             .current\n             .node_to_node_index\n+            .get_shard_by_value(dep_node)\n             .lock()\n             .get(dep_node)\n             .cloned()\n@@ -414,7 +416,11 @@ impl DepGraph {\n     #[inline]\n     pub fn dep_node_exists(&self, dep_node: &DepNode) -> bool {\n         if let Some(ref data) = self.data {\n-            data.current.node_to_node_index.lock().contains_key(dep_node)\n+            data.current\n+                .node_to_node_index\n+                .get_shard_by_value(&dep_node)\n+                .lock()\n+                .contains_key(dep_node)\n         } else {\n             false\n         }\n@@ -595,7 +601,11 @@ impl DepGraph {\n \n         #[cfg(not(parallel_compiler))]\n         {\n-            debug_assert!(!data.current.node_to_node_index.lock().contains_key(dep_node));\n+            debug_assert!(!data.current\n+                               .node_to_node_index\n+                               .get_shard_by_value(dep_node)\n+                               .lock()\n+                               .contains_key(dep_node));\n             debug_assert!(data.colors.get(prev_dep_node_index).is_none());\n         }\n \n@@ -927,7 +937,7 @@ struct DepNodeData {\n /// acquire the lock on `data.`\n pub(super) struct CurrentDepGraph {\n     data: Lock<IndexVec<DepNodeIndex, DepNodeData>>,\n-    node_to_node_index: Lock<FxHashMap<DepNode, DepNodeIndex>>,\n+    node_to_node_index: Sharded<FxHashMap<DepNode, DepNodeIndex>>,\n \n     /// Used to trap when a specific edge is added to the graph.\n     /// This is used for debug purposes and is only active with `debug_assertions`.\n@@ -985,8 +995,8 @@ impl CurrentDepGraph {\n \n         CurrentDepGraph {\n             data: Lock::new(IndexVec::with_capacity(new_node_count_estimate)),\n-            node_to_node_index: Lock::new(FxHashMap::with_capacity_and_hasher(\n-                new_node_count_estimate,\n+            node_to_node_index: Sharded::new(|| FxHashMap::with_capacity_and_hasher(\n+                new_node_count_estimate / sharded::SHARDS,\n                 Default::default(),\n             )),\n             anon_id_seed: stable_hasher.finish(),\n@@ -1035,7 +1045,10 @@ impl CurrentDepGraph {\n         edges: SmallVec<[DepNodeIndex; 8]>,\n         fingerprint: Fingerprint\n     ) -> DepNodeIndex {\n-        debug_assert!(!self.node_to_node_index.lock().contains_key(&dep_node));\n+        debug_assert!(!self.node_to_node_index\n+                           .get_shard_by_value(&dep_node)\n+                           .lock()\n+                           .contains_key(&dep_node));\n         self.intern_node(dep_node, edges, fingerprint)\n     }\n \n@@ -1045,7 +1058,7 @@ impl CurrentDepGraph {\n         edges: SmallVec<[DepNodeIndex; 8]>,\n         fingerprint: Fingerprint\n     ) -> DepNodeIndex {\n-        match self.node_to_node_index.lock().entry(dep_node) {\n+        match self.node_to_node_index.get_shard_by_value(&dep_node).lock().entry(dep_node) {\n             Entry::Occupied(entry) => *entry.get(),\n             Entry::Vacant(entry) => {\n                 let mut data = self.data.lock();"}, {"sha": "f30f19d41509dae6fc66849778fd9e27185437b5", "filename": "src/librustc/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -19,8 +19,8 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::implementation::{\n     Direction, Graph, NodeIndex, INCOMING, OUTGOING,\n };\n+use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n-use smallvec::SmallVec;\n use std::fmt;\n use syntax_pos::Span;\n \n@@ -304,8 +304,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n     }\n \n     fn expansion(&self, var_values: &mut LexicalRegionResolutions<'tcx>) {\n-        self.iterate_until_fixed_point(|constraint| {\n-            debug!(\"expansion: constraint={:?}\", constraint);\n+        let mut process_constraint = |constraint: &Constraint<'tcx>| {\n             let (a_region, b_vid, b_data, retain) = match *constraint {\n                 Constraint::RegSubVar(a_region, b_vid) => {\n                     let b_data = var_values.value_mut(b_vid);\n@@ -331,7 +330,33 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n \n             let changed = self.expand_node(a_region, b_vid, b_data);\n             (changed, retain)\n-        })\n+        };\n+\n+        // Using bitsets to track the remaining elements is faster than using a\n+        // `Vec` by itself (which requires removing elements, which requires\n+        // element shuffling, which is slow).\n+        let constraints: Vec<_> = self.data.constraints.keys().collect();\n+        let mut live_indices: BitSet<usize> = BitSet::new_filled(constraints.len());\n+        let mut killed_indices: BitSet<usize> = BitSet::new_empty(constraints.len());\n+        let mut changed = true;\n+        while changed {\n+            changed = false;\n+            for index in live_indices.iter() {\n+                let constraint = constraints[index];\n+                let (edge_changed, retain) = process_constraint(constraint);\n+                if edge_changed {\n+                    changed = true;\n+                }\n+                if !retain {\n+                    let changed = killed_indices.insert(index);\n+                    debug_assert!(changed);\n+                }\n+            }\n+            live_indices.subtract(&killed_indices);\n+\n+            // We could clear `killed_indices` here, but we don't need to and\n+            // it's cheaper not to.\n+        }\n     }\n \n     // This function is very hot in some workloads. There's a single callsite\n@@ -866,29 +891,6 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         }\n     }\n \n-    fn iterate_until_fixed_point<F>(&self, mut body: F)\n-    where\n-        F: FnMut(&Constraint<'tcx>) -> (bool, bool),\n-    {\n-        let mut constraints: SmallVec<[_; 16]> = self.data.constraints.keys().collect();\n-        let mut iteration = 0;\n-        let mut changed = true;\n-        while changed {\n-            changed = false;\n-            iteration += 1;\n-            debug!(\"---- Expansion iteration {}\", iteration);\n-            constraints.retain(|constraint| {\n-                let (edge_changed, retain) = body(constraint);\n-                if edge_changed {\n-                    debug!(\"updated due to constraint {:?}\", constraint);\n-                    changed = true;\n-                }\n-                retain\n-            });\n-        }\n-        debug!(\"---- Expansion complete after {} iteration(s)\", iteration);\n-    }\n-\n     fn bound_is_met(\n         &self,\n         bound: &VerifyBound<'tcx>,"}, {"sha": "fef406e8987834328e3cf3aca97d58bec78e48a2", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 136, "deletions": 77, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -158,22 +158,7 @@ macro_rules! make_mir_visitor {\n                 self.super_place_base(base, context, location);\n             }\n \n-            fn visit_projection(&mut self,\n-                                base: & $($mutability)? PlaceBase<'tcx>,\n-                                projection: & $($mutability)? [PlaceElem<'tcx>],\n-                                context: PlaceContext,\n-                                location: Location) {\n-                self.super_projection(base, projection, context, location);\n-            }\n-\n-            fn visit_projection_elem(&mut self,\n-                                     base: & $($mutability)? PlaceBase<'tcx>,\n-                                     proj_base: & $($mutability)? [PlaceElem<'tcx>],\n-                                     elem: & $($mutability)? PlaceElem<'tcx>,\n-                                     context: PlaceContext,\n-                                     location: Location) {\n-                self.super_projection_elem(base, proj_base, elem, context, location);\n-            }\n+            visit_place_fns!($($mutability)?);\n \n             fn visit_constant(&mut self,\n                               constant: & $($mutability)? Constant<'tcx>,\n@@ -681,28 +666,6 @@ macro_rules! make_mir_visitor {\n                 );\n             }\n \n-            fn super_place(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext,\n-                            location: Location) {\n-                let mut context = context;\n-\n-                if !place.projection.is_empty() {\n-                    context = if context.is_mutating_use() {\n-                        PlaceContext::MutatingUse(MutatingUseContext::Projection)\n-                    } else {\n-                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n-                    };\n-                }\n-\n-                self.visit_place_base(& $($mutability)? place.base, context, location);\n-\n-                self.visit_projection(& $($mutability)? place.base,\n-                                      & $($mutability)? place.projection,\n-                                      context,\n-                                      location);\n-            }\n-\n             fn super_place_base(&mut self,\n                                 place_base: & $($mutability)? PlaceBase<'tcx>,\n                                 context: PlaceContext,\n@@ -717,45 +680,6 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            fn super_projection(&mut self,\n-                                base: & $($mutability)? PlaceBase<'tcx>,\n-                                projection: & $($mutability)? [PlaceElem<'tcx>],\n-                                context: PlaceContext,\n-                                location: Location) {\n-                let mut cursor = projection;\n-                while let [proj_base @ .., elem] = cursor {\n-                    cursor = proj_base;\n-                    self.visit_projection_elem(base, cursor, elem, context, location);\n-                }\n-            }\n-\n-            fn super_projection_elem(&mut self,\n-                                     _base: & $($mutability)? PlaceBase<'tcx>,\n-                                     _proj_base: & $($mutability)? [PlaceElem<'tcx>],\n-                                     elem: & $($mutability)? PlaceElem<'tcx>,\n-                                     _context: PlaceContext,\n-                                     location: Location) {\n-                match elem {\n-                    ProjectionElem::Field(_field, ty) => {\n-                        self.visit_ty(ty, TyContext::Location(location));\n-                    }\n-                    ProjectionElem::Index(local) => {\n-                        self.visit_local(\n-                            local,\n-                            PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                            location\n-                        );\n-                    }\n-                    ProjectionElem::Deref |\n-                    ProjectionElem::Subslice { from: _, to: _ } |\n-                    ProjectionElem::ConstantIndex { offset: _,\n-                                                    min_length: _,\n-                                                    from_end: _ } |\n-                    ProjectionElem::Downcast(_, _) => {\n-                    }\n-                }\n-            }\n-\n             fn super_local_decl(&mut self,\n                                 local: Local,\n                                 local_decl: & $($mutability)? LocalDecl<'tcx>) {\n@@ -858,6 +782,141 @@ macro_rules! make_mir_visitor {\n     }\n }\n \n+macro_rules! visit_place_fns {\n+    (mut) => (\n+        fn super_place(\n+            &mut self,\n+            place: &mut Place<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            if let Some(new_projection) = self.process_projection(&place.projection) {\n+                place.projection = new_projection;\n+            }\n+        }\n+\n+        fn process_projection(\n+            &mut self,\n+            projection: &'a [PlaceElem<'tcx>],\n+        ) -> Option<Box<[PlaceElem<'tcx>]>> {\n+            let mut projection = Cow::Borrowed(projection);\n+\n+            for i in 0..projection.len() {\n+                if let Some(elem) = projection.get(i) {\n+                    if let Some(elem) = self.process_projection_elem(elem) {\n+                        let vec = projection.to_mut();\n+                        vec[i] = elem;\n+                    }\n+                }\n+            }\n+\n+            match projection {\n+                Cow::Borrowed(_) => None,\n+                Cow::Owned(vec) => Some(vec.into_boxed_slice()),\n+            }\n+        }\n+\n+        fn process_projection_elem(\n+            &mut self,\n+            _elem: &PlaceElem<'tcx>,\n+        ) -> Option<PlaceElem<'tcx>> {\n+            None\n+        }\n+    );\n+\n+    () => (\n+        fn visit_projection(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            projection: &[PlaceElem<'tcx>],\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            self.super_projection(base, projection, context, location);\n+        }\n+\n+        fn visit_projection_elem(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            proj_base: &[PlaceElem<'tcx>],\n+            elem: &PlaceElem<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            self.super_projection_elem(base, proj_base, elem, context, location);\n+        }\n+\n+        fn super_place(\n+            &mut self,\n+            place: &Place<'tcx>,\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            let mut context = context;\n+\n+            if !place.projection.is_empty() {\n+                context = if context.is_mutating_use() {\n+                    PlaceContext::MutatingUse(MutatingUseContext::Projection)\n+                } else {\n+                    PlaceContext::NonMutatingUse(NonMutatingUseContext::Projection)\n+                };\n+            }\n+\n+            self.visit_place_base(&place.base, context, location);\n+\n+            self.visit_projection(&place.base,\n+                                  &place.projection,\n+                                  context,\n+                                  location);\n+        }\n+\n+        fn super_projection(\n+            &mut self,\n+            base: &PlaceBase<'tcx>,\n+            projection: &[PlaceElem<'tcx>],\n+            context: PlaceContext,\n+            location: Location,\n+        ) {\n+            let mut cursor = projection;\n+            while let [proj_base @ .., elem] = cursor {\n+                cursor = proj_base;\n+                self.visit_projection_elem(base, cursor, elem, context, location);\n+            }\n+        }\n+\n+        fn super_projection_elem(\n+            &mut self,\n+            _base: &PlaceBase<'tcx>,\n+            _proj_base: &[PlaceElem<'tcx>],\n+            elem: &PlaceElem<'tcx>,\n+            _context: PlaceContext,\n+            location: Location,\n+        ) {\n+            match elem {\n+                ProjectionElem::Field(_field, ty) => {\n+                    self.visit_ty(ty, TyContext::Location(location));\n+                }\n+                ProjectionElem::Index(local) => {\n+                    self.visit_local(\n+                        local,\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                        location\n+                    );\n+                }\n+                ProjectionElem::Deref |\n+                ProjectionElem::Subslice { from: _, to: _ } |\n+                ProjectionElem::ConstantIndex { offset: _,\n+                                                min_length: _,\n+                                                from_end: _ } |\n+                ProjectionElem::Downcast(_, _) => {\n+                }\n+            }\n+        }\n+    );\n+}\n+\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n "}, {"sha": "2c407a24493ffc956560b0287ab0dc8e88743bc6", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -61,7 +61,7 @@ rustc_queries! {\n         /// predicate gets in the way of some checks, which are intended\n         /// to operate over only the actual where-clauses written by the\n         /// user.)\n-        query predicates_of(key: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+        query predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n             cache_on_disk_if { key.is_local() }\n         }\n \n@@ -184,12 +184,10 @@ rustc_queries! {\n         /// predicates (where-clauses) directly defined on it. This is\n         /// equal to the `explicit_predicates_of` predicates plus the\n         /// `inferred_outlives_of` predicates.\n-        query predicates_defined_on(_: DefId)\n-            -> &'tcx ty::GenericPredicates<'tcx> {}\n+        query predicates_defined_on(_: DefId) -> ty::GenericPredicates<'tcx> {}\n \n         /// Returns the predicates written explicitly by the user.\n-        query explicit_predicates_of(_: DefId)\n-            -> &'tcx ty::GenericPredicates<'tcx> {}\n+        query explicit_predicates_of(_: DefId) -> ty::GenericPredicates<'tcx> {}\n \n         /// Returns the inferred outlives predicates (e.g., for `struct\n         /// Foo<'a, T> { x: &'a T }`, this would return `T: 'a`).\n@@ -201,14 +199,13 @@ rustc_queries! {\n         /// evaluate them even during type conversion, often before the\n         /// full predicates are available (note that supertraits have\n         /// additional acyclicity requirements).\n-        query super_predicates_of(key: DefId) -> &'tcx ty::GenericPredicates<'tcx> {\n+        query super_predicates_of(key: DefId) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the supertraits of `{}`\", tcx.def_path_str(key) }\n         }\n \n         /// To avoid cycles within the predicates of a single item we compute\n         /// per-type-parameter predicates for resolving `T::AssocTy`.\n-        query type_param_predicates(key: (DefId, DefId))\n-            -> &'tcx ty::GenericPredicates<'tcx> {\n+        query type_param_predicates(key: (DefId, DefId)) -> ty::GenericPredicates<'tcx> {\n             no_force\n             desc { |tcx| \"computing the bounds for type parameter `{}`\", {\n                 let id = tcx.hir().as_local_hir_id(key.1).unwrap();"}, {"sha": "c1c6eb850f591158a4a53fd63a053f7fc73b3261", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -419,7 +419,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n \n     // The predicates will contain default bounds like `T: Sized`. We need to\n     // remove these bounds, and add `T: ?Sized` to any untouched type parameters.\n-    let predicates = &tcx.predicates_of(impl_def_id).predicates;\n+    let predicates = tcx.predicates_of(impl_def_id).predicates;\n     let mut pretty_predicates = Vec::with_capacity(\n         predicates.len() + types_without_default_bounds.len());\n "}, {"sha": "03cb4775bd83f9958fb851128773e1b10261bced", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -16,6 +16,7 @@ use std::intrinsics;\n use crate::ty::{self, Ty, TyCtxt};\n use crate::ty::subst::SubstsRef;\n use crate::mir::interpret::Allocation;\n+use syntax_pos::Span;\n \n /// The shorthand encoding uses an enum's variant index `usize`\n /// and is offset by this value so it never matches a real variant.\n@@ -92,16 +93,16 @@ pub fn encode_with_shorthand<E, T, M>(encoder: &mut E,\n     Ok(())\n }\n \n-pub fn encode_predicates<'tcx, E, C>(encoder: &mut E,\n-                                     predicates: &ty::GenericPredicates<'tcx>,\n-                                     cache: C)\n-                                     -> Result<(), E::Error>\n+pub fn encode_spanned_predicates<'tcx, E, C>(\n+    encoder: &mut E,\n+    predicates: &'tcx [(ty::Predicate<'tcx>, Span)],\n+    cache: C,\n+) -> Result<(), E::Error>\n     where E: TyEncoder,\n           C: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<ty::Predicate<'tcx>, usize>,\n {\n-    predicates.parent.encode(encoder)?;\n-    predicates.predicates.len().encode(encoder)?;\n-    for (predicate, span) in &predicates.predicates {\n+    predicates.len().encode(encoder)?;\n+    for (predicate, span) in predicates {\n         encode_with_shorthand(encoder, predicate, &cache)?;\n         span.encode(encoder)?;\n     }\n@@ -182,13 +183,15 @@ where\n }\n \n #[inline]\n-pub fn decode_predicates<D>(decoder: &mut D) -> Result<ty::GenericPredicates<'tcx>, D::Error>\n+pub fn decode_spanned_predicates<D>(\n+    decoder: &mut D,\n+) -> Result<&'tcx [(ty::Predicate<'tcx>, Span)], D::Error>\n where\n     D: TyDecoder<'tcx>,\n {\n-    Ok(ty::GenericPredicates {\n-        parent: Decodable::decode(decoder)?,\n-        predicates: (0..decoder.read_usize()?).map(|_| {\n+    let tcx = decoder.tcx();\n+    Ok(tcx.arena.alloc_from_iter(\n+        (0..decoder.read_usize()?).map(|_| {\n             // Handle shorthands first, if we have an usize > 0x80.\n             let predicate = if decoder.positioned_at_shorthand() {\n                 let pos = decoder.read_usize()?;\n@@ -202,7 +205,7 @@ where\n             Ok((predicate, Decodable::decode(decoder)?))\n         })\n         .collect::<Result<Vec<_>, _>>()?,\n-    })\n+    ))\n }\n \n #[inline]\n@@ -339,6 +342,8 @@ macro_rules! implement_ty_decoder {\n             use $crate::ty::subst::SubstsRef;\n             use $crate::hir::def_id::{CrateNum};\n \n+            use syntax_pos::Span;\n+\n             use super::$DecoderName;\n \n             impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n@@ -393,11 +398,11 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n-            impl<$($typaram),*> SpecializedDecoder<ty::GenericPredicates<'tcx>>\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode(&mut self)\n-                                      -> Result<ty::GenericPredicates<'tcx>, Self::Error> {\n-                    decode_predicates(self)\n+                                      -> Result<&'tcx [(ty::Predicate<'tcx>, Span)], Self::Error> {\n+                    decode_spanned_predicates(self)\n                 }\n             }\n "}, {"sha": "665d4c2d0696ababaf3fe164ee24ce21d534a088", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -148,10 +148,6 @@ impl<'tcx> CtxtInterners<'tcx> {\n     }\n }\n \n-pub struct Common<'tcx> {\n-    pub empty_predicates: ty::GenericPredicates<'tcx>,\n-}\n-\n pub struct CommonTypes<'tcx> {\n     pub unit: Ty<'tcx>,\n     pub bool: Ty<'tcx>,\n@@ -1039,9 +1035,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub prof: SelfProfilerRef,\n \n-    /// Common objects.\n-    pub common: Common<'tcx>,\n-\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -1213,12 +1206,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             s.fatal(&err);\n         });\n         let interners = CtxtInterners::new(&arenas.interner);\n-        let common = Common {\n-            empty_predicates: ty::GenericPredicates {\n-                parent: None,\n-                predicates: vec![],\n-            },\n-        };\n         let common_types = CommonTypes::new(&interners);\n         let common_lifetimes = CommonLifetimes::new(&interners);\n         let common_consts = CommonConsts::new(&interners, &common_types);\n@@ -1273,7 +1260,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             interners,\n             dep_graph,\n             prof: s.prof.clone(),\n-            common,\n             types: common_types,\n             lifetimes: common_lifetimes,\n             consts: common_consts,"}, {"sha": "d46ab3769ad55063c88aff33da5e11af552de0e4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1018,15 +1018,12 @@ impl<'tcx> Generics {\n }\n \n /// Bounds on generics.\n-#[derive(Clone, Default, Debug, HashStable)]\n+#[derive(Copy, Clone, Default, Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct GenericPredicates<'tcx> {\n     pub parent: Option<DefId>,\n-    pub predicates: Vec<(Predicate<'tcx>, Span)>,\n+    pub predicates: &'tcx [(Predicate<'tcx>, Span)],\n }\n \n-impl<'tcx> rustc_serialize::UseSpecializedEncodable for GenericPredicates<'tcx> {}\n-impl<'tcx> rustc_serialize::UseSpecializedDecodable for GenericPredicates<'tcx> {}\n-\n impl<'tcx> GenericPredicates<'tcx> {\n     pub fn instantiate(\n         &self,\n@@ -2321,7 +2318,7 @@ impl<'tcx> AdtDef {\n     }\n \n     #[inline]\n-    pub fn predicates(&self, tcx: TyCtxt<'tcx>) -> &'tcx GenericPredicates<'tcx> {\n+    pub fn predicates(&self, tcx: TyCtxt<'tcx>) -> GenericPredicates<'tcx> {\n         tcx.predicates_of(self.did)\n     }\n \n@@ -2561,7 +2558,7 @@ impl<'tcx> AdtDef {\n                     def_id: sized_trait,\n                     substs: tcx.mk_substs_trait(ty, &[])\n                 }).to_predicate();\n-                let predicates = &tcx.predicates_of(self.did).predicates;\n+                let predicates = tcx.predicates_of(self.did).predicates;\n                 if predicates.iter().any(|(p, _)| *p == sized_predicate) {\n                     vec![]\n                 } else {"}, {"sha": "21a7cf00b283f54c43d5783e440697a090527d0f", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -882,15 +882,16 @@ where\n     }\n }\n \n-impl<'a, 'tcx, E> SpecializedEncoder<ty::GenericPredicates<'tcx>> for CacheEncoder<'a, 'tcx, E>\n+impl<'a, 'tcx, E> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]>\n+    for CacheEncoder<'a, 'tcx, E>\n where\n     E: 'a + TyEncoder,\n {\n     #[inline]\n     fn specialized_encode(&mut self,\n-                          predicates: &ty::GenericPredicates<'tcx>)\n+                          predicates: &&'tcx [(ty::Predicate<'tcx>, Span)])\n                           -> Result<(), Self::Error> {\n-        ty_codec::encode_predicates(self, predicates,\n+        ty_codec::encode_spanned_predicates(self, predicates,\n             |encoder| &mut encoder.predicate_shorthands)\n     }\n }"}, {"sha": "83ec98f9ddd2f2dfbd87ab39978e22681bfd9ade", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1218,12 +1218,6 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-BraceStructTypeFoldableImpl! {\n-    impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> {\n-        parent, predicates\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn super_fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Self {\n         // This code is hot enough that it's worth specializing for a list of"}, {"sha": "d0ff6108d6ea6183fc3d035198b588585ac206e2", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -2,6 +2,7 @@ use std::hash::{Hasher, Hash};\n use std::mem;\n use std::borrow::Borrow;\n use std::collections::hash_map::RawEntryMut;\n+use smallvec::SmallVec;\n use crate::fx::{FxHasher, FxHashMap};\n use crate::sync::{Lock, LockGuard};\n \n@@ -18,7 +19,7 @@ const SHARD_BITS: usize = 5;\n #[cfg(not(parallel_compiler))]\n const SHARD_BITS: usize = 0;\n \n-const SHARDS: usize = 1 << SHARD_BITS;\n+pub const SHARDS: usize = 1 << SHARD_BITS;\n \n /// An array of cache-line aligned inner locked structures with convenience methods.\n #[derive(Clone)]\n@@ -29,21 +30,36 @@ pub struct Sharded<T> {\n impl<T: Default> Default for Sharded<T> {\n     #[inline]\n     fn default() -> Self {\n+        Self::new(|| T::default())\n+    }\n+}\n+\n+impl<T> Sharded<T> {\n+    #[inline]\n+    pub fn new(mut value: impl FnMut() -> T) -> Self {\n+        // Create a vector of the values we want\n+        let mut values: SmallVec<[_; SHARDS]> = (0..SHARDS).map(|_| {\n+            CacheAligned(Lock::new(value()))\n+        }).collect();\n+\n+        // Create an unintialized array\n         let mut shards: mem::MaybeUninit<[CacheAligned<Lock<T>>; SHARDS]> =\n             mem::MaybeUninit::uninit();\n-        let first = shards.as_mut_ptr() as *mut CacheAligned<Lock<T>>;\n+\n         unsafe {\n-            for i in 0..SHARDS {\n-                first.add(i).write(CacheAligned(Lock::new(T::default())));\n-            }\n+            // Copy the values into our array\n+            let first = shards.as_mut_ptr() as *mut CacheAligned<Lock<T>>;\n+            values.as_ptr().copy_to_nonoverlapping(first, SHARDS);\n+\n+            // Ignore the content of the vector\n+            values.set_len(0);\n+\n             Sharded {\n                 shards: shards.assume_init(),\n             }\n         }\n     }\n-}\n \n-impl<T> Sharded<T> {\n     #[inline]\n     pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {\n         if SHARDS == 1 {"}, {"sha": "9ed5ef5a539a1bc01fd771e7c04df41e868c6196", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -13,15 +13,18 @@ pub type Word = u64;\n pub const WORD_BYTES: usize = mem::size_of::<Word>();\n pub const WORD_BITS: usize = WORD_BYTES * 8;\n \n-/// A fixed-size bitset type with a dense representation. It does not support\n-/// resizing after creation; use `GrowableBitSet` for that.\n+/// A fixed-size bitset type with a dense representation.\n+///\n+/// NOTE: Use [`GrowableBitSet`] if you need support for resizing after creation.\n ///\n /// `T` is an index type, typically a newtyped `usize` wrapper, but it can also\n /// just be `usize`.\n ///\n /// All operations that involve an element will panic if the element is equal\n /// to or greater than the domain size. All operations that involve two bitsets\n /// will panic if the bitsets have differing domain sizes.\n+///\n+/// [`GrowableBitSet`]: struct.GrowableBitSet.html\n #[derive(Clone, Eq, PartialEq, RustcDecodable, RustcEncodable)]\n pub struct BitSet<T: Idx> {\n     domain_size: usize,"}, {"sha": "08f6f43ab0cff4831c94c6b421c4e03d97928188", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1241,7 +1241,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TrivialConstraints {\n         if cx.tcx.features().trivial_bounds {\n             let def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let predicates = cx.tcx.predicates_of(def_id);\n-            for &(predicate, span) in &predicates.predicates {\n+            for &(predicate, span) in predicates.predicates {\n                 let predicate_kind_name = match predicate {\n                     Trait(..) => \"Trait\",\n                     TypeOutlives(..) |"}, {"sha": "a93946df68f9235d484b50da6fae287bada285ab", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 }\n                 ty::Opaque(def, _) => {\n                     let mut has_emitted = false;\n-                    for (predicate, _) in &cx.tcx.predicates_of(def).predicates {\n+                    for (predicate, _) in cx.tcx.predicates_of(def).predicates {\n                         if let ty::Predicate::Trait(ref poly_trait_predicate) = predicate {\n                             let trait_ref = poly_trait_predicate.skip_binder().trait_ref;\n                             let def_id = trait_ref.def_id;"}, {"sha": "4cd1ff7b4a4ff8ed47ae02a8b3742a8df27f02a5", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -97,11 +97,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     generics_of => {\n         tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n     }\n-    predicates_of => { tcx.arena.alloc(cdata.get_predicates(def_id.index, tcx)) }\n-    predicates_defined_on => {\n-        tcx.arena.alloc(cdata.get_predicates_defined_on(def_id.index, tcx))\n-    }\n-    super_predicates_of => { tcx.arena.alloc(cdata.get_super_predicates(def_id.index, tcx)) }\n+    predicates_of => { cdata.get_predicates(def_id.index, tcx) }\n+    predicates_defined_on => { cdata.get_predicates_defined_on(def_id.index, tcx) }\n+    super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n     trait_def => {\n         tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))\n     }"}, {"sha": "6ae8c2fc6c694b2b72d4cb0d943d5b60b3a5af12", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -243,11 +243,11 @@ impl<'tcx> SpecializedEncoder<interpret::AllocId> for EncodeContext<'tcx> {\n     }\n }\n \n-impl<'tcx> SpecializedEncoder<ty::GenericPredicates<'tcx>> for EncodeContext<'tcx> {\n+impl<'tcx> SpecializedEncoder<&'tcx [(ty::Predicate<'tcx>, Span)]> for EncodeContext<'tcx> {\n     fn specialized_encode(&mut self,\n-                          predicates: &ty::GenericPredicates<'tcx>)\n+                          predicates: &&'tcx [(ty::Predicate<'tcx>, Span)])\n                           -> Result<(), Self::Error> {\n-        ty_codec::encode_predicates(self, predicates, |ecx| &mut ecx.predicate_shorthands)\n+        ty_codec::encode_spanned_predicates(self, predicates, |ecx| &mut ecx.predicate_shorthands)\n     }\n }\n \n@@ -826,13 +826,13 @@ impl EncodeContext<'tcx> {\n \n     fn encode_predicates(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_predicates({:?})\", def_id);\n-        record!(self.per_def.predicates[def_id] <- &*self.tcx.predicates_of(def_id));\n+        record!(self.per_def.predicates[def_id] <- self.tcx.predicates_of(def_id));\n     }\n \n     fn encode_predicates_defined_on(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_predicates_defined_on({:?})\", def_id);\n         record!(self.per_def.predicates_defined_on[def_id] <-\n-            &*self.tcx.predicates_defined_on(def_id))\n+            self.tcx.predicates_defined_on(def_id))\n     }\n \n     fn encode_info_for_trait_item(&mut self, def_id: DefId) {\n@@ -1166,14 +1166,14 @@ impl EncodeContext<'tcx> {\n                     paren_sugar: trait_def.paren_sugar,\n                     has_auto_impl: self.tcx.trait_is_auto(def_id),\n                     is_marker: trait_def.is_marker,\n-                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n                 };\n \n                 EntryKind::Trait(self.lazy(data))\n             }\n             hir::ItemKind::TraitAlias(..) => {\n                 let data = TraitAliasData {\n-                    super_predicates: self.lazy(&*tcx.super_predicates_of(def_id)),\n+                    super_predicates: self.lazy(tcx.super_predicates_of(def_id)),\n                 };\n \n                 EntryKind::TraitAlias(self.lazy(data))"}, {"sha": "9ecd6f837750e797365b467b434a4d818dcaf5ad", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,6 +1,6 @@\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::{self, Ty, TypeFoldable};\n-use rustc::mir::{Location, Body, Promoted};\n+use rustc::mir::{Body, Location, PlaceElem, Promoted};\n use rustc::mir::visit::{MutVisitor, TyContext};\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc_index::vec::IndexVec;\n@@ -62,6 +62,21 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        if let PlaceElem::Field(field, ty) = elem {\n+            let new_ty = self.renumber_regions(ty);\n+\n+            if new_ty != *ty {\n+                return Some(PlaceElem::Field(*field, new_ty));\n+            }\n+        }\n+\n+        None\n+    }\n+\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n         debug!(\"visit_substs(substs={:?}, location={:?})\", substs, location);\n "}, {"sha": "439cae2093ae5361ec82b136f369d862cd03f796", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -25,7 +25,6 @@ impl EraseRegionsVisitor<'tcx> {\n impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, _: TyContext) {\n         *ty = self.tcx.erase_regions(ty);\n-        self.super_ty(ty);\n     }\n \n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, _: Location) {\n@@ -39,6 +38,21 @@ impl MutVisitor<'tcx> for EraseRegionsVisitor<'tcx> {\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, _: Location) {\n         *substs = self.tcx.erase_regions(substs);\n     }\n+\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        if let PlaceElem::Field(field, ty) = elem {\n+            let new_ty = self.tcx.erase_regions(ty);\n+\n+            if new_ty != *ty {\n+                return Some(PlaceElem::Field(*field, new_ty));\n+            }\n+        }\n+\n+        None\n+    }\n }\n \n pub struct EraseRegions;"}, {"sha": "6533e3c5ba81fcc8180252c5bb8299eb09fadb82", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 39, "deletions": 7, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -88,6 +88,18 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor {\n             *local = self.to;\n         }\n     }\n+\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) if *local == self.from => {\n+                Some(PlaceElem::Index(self.to))\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n struct DerefArgVisitor;\n@@ -110,7 +122,13 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n                 projection: Box::new([ProjectionElem::Deref]),\n             });\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n }\n@@ -137,7 +155,13 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n                 projection: Box::new([ProjectionElem::Field(Field::new(0), self.ref_gen_ty)]),\n             });\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n }\n@@ -247,17 +271,25 @@ impl MutVisitor<'tcx> for TransformVisitor<'tcx> {\n         assert_eq!(self.remap.get(local), None);\n     }\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    context: PlaceContext,\n-                    location: Location) {\n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         if let PlaceBase::Local(l) = place.base {\n             // Replace an Local in the remap with a generator struct access\n             if let Some(&(ty, variant_index, idx)) = self.remap.get(&l) {\n                 replace_base(place, self.make_field(variant_index, idx, ty));\n             }\n         } else {\n-            self.super_place(place, context, location);\n+            self.visit_place_base(&mut place.base, context, location);\n+\n+            for elem in place.projection.iter() {\n+                if let PlaceElem::Index(local) = elem {\n+                    assert_ne!(*local, self_arg());\n+                }\n+            }\n         }\n     }\n "}, {"sha": "0cbdcedff4780dea11618d9a609c18f2436ff196", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -647,38 +647,45 @@ impl<'a, 'tcx> Integrator<'a, 'tcx> {\n         debug!(\"updating target `{:?}`, new: `{:?}`\", tgt, new);\n         new\n     }\n-}\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n-    fn visit_local(&mut self,\n-                   local: &mut Local,\n-                   _ctxt: PlaceContext,\n-                   _location: Location) {\n+    fn make_integrate_local(&self, local: &Local) -> Local {\n         if *local == RETURN_PLACE {\n             match self.destination {\n                 Place {\n                     base: PlaceBase::Local(l),\n                     projection: box [],\n                 } => {\n-                    *local = l;\n-                    return;\n+                    return l;\n                 },\n                 ref place => bug!(\"Return place is {:?}, not local\", place)\n             }\n         }\n+\n         let idx = local.index() - 1;\n         if idx < self.args.len() {\n-            *local = self.args[idx];\n-            return;\n+            return self.args[idx];\n         }\n-        *local = self.local_map[Local::new(idx - self.args.len())];\n+\n+        self.local_map[Local::new(idx - self.args.len())]\n     }\n+}\n \n-    fn visit_place(&mut self,\n-                    place: &mut Place<'tcx>,\n-                    _ctxt: PlaceContext,\n-                    _location: Location) {\n+impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n+    fn visit_local(\n+        &mut self,\n+        local: &mut Local,\n+        _ctxt: PlaceContext,\n+        _location: Location,\n+    ) {\n+        *local = self.make_integrate_local(local);\n+    }\n \n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n         match place {\n             Place {\n                 base: PlaceBase::Local(RETURN_PLACE),\n@@ -687,10 +694,27 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n                 // Return pointer; update the place itself\n                 *place = self.destination.clone();\n             },\n-            _ => self.super_place(place, _ctxt, _location)\n+            _ => {\n+                self.super_place(place, context, location);\n+            }\n         }\n     }\n \n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        if let PlaceElem::Index(local) = elem {\n+            let new_local = self.make_integrate_local(local);\n+\n+            if new_local != *local {\n+                return Some(PlaceElem::Index(new_local))\n+            }\n+        }\n+\n+        None\n+    }\n+\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}, {"sha": "ad1785417cd93409633603c784e9b8735143e92c", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -191,6 +191,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         });\n     }\n \n+    fn is_temp_kind(&self, local: Local) -> bool {\n+        self.source.local_kind(local) == LocalKind::Temp\n+    }\n+\n     /// Copies the initialization of this temp to the\n     /// promoted MIR, recursing through temps.\n     fn promote_temp(&mut self, temp: Local) -> Local {\n@@ -396,10 +400,22 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n                    local: &mut Local,\n                    _: PlaceContext,\n                    _: Location) {\n-        if self.source.local_kind(*local) == LocalKind::Temp {\n+        if self.is_temp_kind(*local) {\n             *local = self.promote_temp(*local);\n         }\n     }\n+\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n+                Some(PlaceElem::Index(self.promote_temp(*local)))\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n pub fn promote_candidates<'tcx>("}, {"sha": "7b6255defd148cae58f4dcd0d5150bef7586188f", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -14,7 +14,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'tcx>, def_id: DefId, body: &'a Body<'tcx>) -\n     let mut current = def_id;\n     loop {\n         let predicates = tcx.predicates_of(current);\n-        for (predicate, _) in &predicates.predicates {\n+        for (predicate, _) in predicates.predicates {\n             match predicate {\n                 | Predicate::RegionOutlives(_)\n                 | Predicate::TypeOutlives(_)"}, {"sha": "606c1a3a1cc09dd9deb761c42b0fe8f819340410", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -366,7 +366,20 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater {\n         });\n         self.super_basic_block_data(block, data);\n     }\n+\n     fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();\n     }\n+\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) => {\n+                Some(PlaceElem::Index(self.map[*local].unwrap()))\n+            }\n+            _ => None\n+        }\n+    }\n }"}, {"sha": "cdd07ad4b8ff4b88ba81689ddbf0aca0b71a7055", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,6 +1,6 @@\n //! Def-use analysis.\n \n-use rustc::mir::{Local, Location, Body};\n+use rustc::mir::{Body, Local, Location, PlaceElem};\n use rustc::mir::visit::{PlaceContext, MutVisitor, Visitor};\n use rustc_index::vec::IndexVec;\n use std::mem;\n@@ -47,13 +47,10 @@ impl DefUseAnalysis {\n         &self.info[local]\n     }\n \n-    fn mutate_defs_and_uses<F>(&self, local: Local, body: &mut Body<'_>, mut callback: F)\n-                               where F: for<'a> FnMut(&'a mut Local,\n-                                                      PlaceContext,\n-                                                      Location) {\n+    fn mutate_defs_and_uses(&self, local: Local, body: &mut Body<'_>, new_local: Local) {\n         for place_use in &self.info[local].defs_and_uses {\n             MutateUseVisitor::new(local,\n-                                  &mut callback,\n+                                  new_local,\n                                   body).visit_location(body, place_use.location)\n         }\n     }\n@@ -63,7 +60,7 @@ impl DefUseAnalysis {\n                                           local: Local,\n                                           body: &mut Body<'_>,\n                                           new_local: Local) {\n-        self.mutate_defs_and_uses(local, body, |local, _, _| *local = new_local)\n+        self.mutate_defs_and_uses(local, body, new_local)\n     }\n }\n \n@@ -117,30 +114,39 @@ impl Info {\n     }\n }\n \n-struct MutateUseVisitor<F> {\n+struct MutateUseVisitor {\n     query: Local,\n-    callback: F,\n+    new_local: Local,\n }\n \n-impl<F> MutateUseVisitor<F> {\n-    fn new(query: Local, callback: F, _: &Body<'_>)\n-           -> MutateUseVisitor<F>\n-           where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n+impl MutateUseVisitor {\n+    fn new(query: Local, new_local: Local, _: &Body<'_>) -> MutateUseVisitor {\n         MutateUseVisitor {\n             query,\n-            callback,\n+            new_local,\n         }\n     }\n }\n \n-impl<F> MutVisitor<'_> for MutateUseVisitor<F>\n-              where F: for<'a> FnMut(&'a mut Local, PlaceContext, Location) {\n+impl MutVisitor<'_> for MutateUseVisitor {\n     fn visit_local(&mut self,\n                     local: &mut Local,\n-                    context: PlaceContext,\n-                    location: Location) {\n+                    _context: PlaceContext,\n+                    _location: Location) {\n         if *local == self.query {\n-            (self.callback)(local, context, location)\n+            *local = self.new_local;\n+        }\n+    }\n+\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+    ) -> Option<PlaceElem<'tcx>> {\n+        match elem {\n+            PlaceElem::Index(local) if *local == self.query => {\n+                Some(PlaceElem::Index(self.new_local))\n+            }\n+            _ => None,\n         }\n     }\n }"}, {"sha": "eb79ce69a3e1f354ae7d9f5685a77328e630750e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -64,7 +64,7 @@ trait DefIdVisitor<'tcx> {\n     fn visit_trait(&mut self, trait_ref: TraitRef<'tcx>) -> bool {\n         self.skeleton().visit_trait(trait_ref)\n     }\n-    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> bool {\n         self.skeleton().visit_predicates(predicates)\n     }\n }\n@@ -88,7 +88,7 @@ where\n         (!self.def_id_visitor.shallow() && substs.visit_with(self))\n     }\n \n-    fn visit_predicates(&mut self, predicates: &ty::GenericPredicates<'tcx>) -> bool {\n+    fn visit_predicates(&mut self, predicates: ty::GenericPredicates<'tcx>) -> bool {\n         let ty::GenericPredicates { parent: _, predicates } = predicates;\n         for (predicate, _span) in predicates {\n             match predicate {"}, {"sha": "8ccb27078d5696e015854227a599f6440e6b9cd6", "filename": "src/librustc_resolve/error_codes.rs", "status": "modified", "additions": 53, "deletions": 1, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_resolve%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_resolve%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_codes.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1735,6 +1735,59 @@ match eco {\n ```\n \"##,\n \n+E0575: r##\"\n+Something other than a type or an associated type was given.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0575\n+enum Rick { Morty }\n+\n+let _: <u8 as Rick>::Morty; // error!\n+\n+trait Age {\n+    type Empire;\n+    fn Mythology() {}\n+}\n+\n+impl Age for u8 {\n+    type Empire = u16;\n+}\n+\n+let _: <u8 as Age>::Mythology; // error!\n+```\n+\n+In both cases, we're declaring a variable (called `_`) and we're giving it a\n+type. However, `<u8 as Rick>::Morty` and `<u8 as Age>::Mythology` aren't types,\n+therefore the compiler throws an error.\n+\n+`<u8 as Rick>::Morty` is an enum variant, you cannot use a variant as a type,\n+you have to use the enum directly:\n+\n+```\n+enum Rick { Morty }\n+\n+let _: Rick; // ok!\n+```\n+\n+`<u8 as Age>::Mythology` is a trait method, which is definitely not a type.\n+However, the `Age` trait provides an associated type `Empire` which can be\n+used as a type:\n+\n+```\n+trait Age {\n+    type Empire;\n+    fn Mythology() {}\n+}\n+\n+impl Age for u8 {\n+    type Empire = u16;\n+}\n+\n+let _: <u8 as Age>::Empire; // ok!\n+```\n+\"##,\n+\n E0603: r##\"\n A private item was used outside its scope.\n \n@@ -1862,7 +1915,6 @@ struct Foo<X = Box<Self>> {\n //  E0427, merged into 530\n //  E0467, removed\n //  E0470, removed\n-    E0575,\n     E0576,\n     E0577,\n     E0578,"}, {"sha": "e282936b5d9e7e762938fc483af2dabddc0f315b", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -669,15 +669,18 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n                 }\n             }\n         }\n-        self.visit_ty(&typ);\n-        if let &Some(ref trait_ref) = trait_ref {\n-            self.process_path(trait_ref.ref_id, &trait_ref.path);\n-        }\n-        self.process_generic_params(generics, \"\", item.id);\n-        for impl_item in impl_items {\n-            let map = &self.tcx.hir();\n-            self.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id));\n-        }\n+\n+        let map = &self.tcx.hir();\n+        self.nest_tables(item.id, |v| {\n+            v.visit_ty(&typ);\n+            if let &Some(ref trait_ref) = trait_ref {\n+                v.process_path(trait_ref.ref_id, &trait_ref.path);\n+            }\n+            v.process_generic_params(generics, \"\", item.id);\n+            for impl_item in impl_items {\n+                v.process_impl_item(impl_item, map.local_def_id_from_node_id(item.id));\n+            }\n+        });\n     }\n \n     fn process_trait("}, {"sha": "0df367fcca83c307fb4d5dc73c9d81311115c1c2", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -218,7 +218,7 @@ fn program_clauses_for_trait(tcx: TyCtxt<'_>, def_id: DefId) -> Clauses<'_> {\n \n     let implemented_from_env = Clause::ForAll(ty::Binder::bind(implemented_from_env));\n \n-    let predicates = &tcx.predicates_defined_on(def_id).predicates;\n+    let predicates = tcx.predicates_defined_on(def_id).predicates;\n \n     // Warning: these where clauses are not substituted for bound vars yet,\n     // so that we don't need to adjust binders in the `FromEnv` rules below\n@@ -319,7 +319,7 @@ fn program_clauses_for_impl(tcx: TyCtxt<'tcx>, def_id: DefId) -> Clauses<'tcx> {\n     let trait_pred = ty::TraitPredicate { trait_ref }.lower();\n \n     // `WC`\n-    let predicates = &tcx.predicates_of(def_id).predicates;\n+    let predicates = tcx.predicates_of(def_id).predicates;\n     let where_clauses = predicates\n         .iter()\n         .map(|(wc, _)| wc.lower())"}, {"sha": "7e0a9bc4011c0fdc4240549b8940470d012d87e3", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -54,8 +54,7 @@ pub trait AstConv<'tcx> {\n     /// but this can lead to cycle errors. The problem is that we have\n     /// to do this resolution *in order to create the predicates in\n     /// the first place*. Hence, we have this \"special pass\".\n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx>;\n+    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx>;\n \n     /// Returns the lifetime to use when a lifetime is omitted (and not elided).\n     fn re_infer("}, {"sha": "0c8df9bad448fdce38f9058397424495a11893e6", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -44,7 +44,7 @@ pub fn check_drop_impl(tcx: TyCtxt<'_>, drop_impl_did: DefId) -> Result<(), Erro\n             ensure_drop_predicates_are_implied_by_item_defn(\n                 tcx,\n                 drop_impl_did,\n-                &dtor_predicates,\n+                dtor_predicates,\n                 adt_def.did,\n                 self_to_impl_substs,\n             )\n@@ -140,7 +140,7 @@ fn ensure_drop_params_and_item_params_correspond<'tcx>(\n fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     drop_impl_did: DefId,\n-    dtor_predicates: &ty::GenericPredicates<'tcx>,\n+    dtor_predicates: ty::GenericPredicates<'tcx>,\n     self_type_did: DefId,\n     self_to_impl_substs: SubstsRef<'tcx>,\n ) -> Result<(), ErrorReported> {\n@@ -199,7 +199,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n     // just to look for all the predicates directly.\n \n     assert_eq!(dtor_predicates.parent, None);\n-    for (predicate, _) in &dtor_predicates.predicates {\n+    for (predicate, _) in dtor_predicates.predicates {\n         // (We do not need to worry about deep analysis of type\n         // expressions etc because the Drop impls are already forced\n         // to take on a structure that is roughly an alpha-renaming of"}, {"sha": "152edf8dd0e5ad2989be33191a22e7cd5e67f704", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -2245,29 +2245,27 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         self.tcx\n     }\n \n-    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx>\n-    {\n+    fn get_type_parameter_bounds(&self, _: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         let tcx = self.tcx;\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let item_id = tcx.hir().ty_param_owner(hir_id);\n         let item_def_id = tcx.hir().local_def_id(item_id);\n         let generics = tcx.generics_of(item_def_id);\n         let index = generics.param_def_id_to_index[&def_id];\n-        tcx.arena.alloc(ty::GenericPredicates {\n+        ty::GenericPredicates {\n             parent: None,\n-            predicates: self.param_env.caller_bounds.iter().filter_map(|&predicate| {\n-                match predicate {\n+            predicates: tcx.arena.alloc_from_iter(\n+                self.param_env.caller_bounds.iter().filter_map(|&predicate| match predicate {\n                     ty::Predicate::Trait(ref data)\n                     if data.skip_binder().self_ty().is_param(index) => {\n                         // HACK(eddyb) should get the original `Span`.\n                         let span = tcx.def_span(def_id);\n                         Some((predicate, span))\n                     }\n                     _ => None\n-                }\n-            }).collect()\n-        })\n+                }),\n+            ),\n+        }\n     }\n \n     fn re_infer("}, {"sha": "18b103960c74595b5f684ea77eeb9434b58d9bf6", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -791,7 +791,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                         \"check_opaque_types: may define, predicates={:#?}\",\n                         predicates,\n                     );\n-                    for &(pred, _) in predicates.predicates.iter() {\n+                    for &(pred, _) in predicates.predicates {\n                         let substituted_pred = pred.subst(fcx.tcx, substs);\n                         // Avoid duplication of predicates that contain no parameters, for example.\n                         if !predicates.predicates.iter().any(|&(p, _)| p == substituted_pred) {\n@@ -1011,7 +1011,7 @@ fn check_variances_for_type_defn<'tcx>(\n \n     identify_constrained_generic_params(\n         tcx,\n-        &ty_predicates,\n+        ty_predicates,\n         None,\n         &mut constrained_parameters,\n     );"}, {"sha": "1749fd1075e0524a86f0a904f8dbf3cfb8dd1f9b", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -182,8 +182,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         self.tcx\n     }\n \n-    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId)\n-                                 -> &'tcx ty::GenericPredicates<'tcx> {\n+    fn get_type_parameter_bounds(&self, span: Span, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n         self.tcx\n             .at(span)\n             .type_param_predicates((self.item_def_id, def_id))\n@@ -254,7 +253,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n fn type_param_predicates(\n     tcx: TyCtxt<'_>,\n     (item_def_id, def_id): (DefId, DefId),\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n@@ -275,10 +274,10 @@ fn type_param_predicates(\n         tcx.generics_of(item_def_id).parent\n     };\n \n-    let result = parent.map_or(&tcx.common.empty_predicates, |parent| {\n+    let mut result = parent.map(|parent| {\n         let icx = ItemCtxt::new(tcx, parent);\n         icx.get_type_parameter_bounds(DUMMY_SP, def_id)\n-    });\n+    }).unwrap_or_default();\n     let mut extend = None;\n \n     let item_hir_id = tcx.hir().as_local_hir_id(item_def_id).unwrap();\n@@ -321,19 +320,20 @@ fn type_param_predicates(\n     };\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n-    let mut result = (*result).clone();\n-    result.predicates.extend(extend.into_iter());\n-    result.predicates.extend(\n+    let extra_predicates = extend.into_iter().chain(\n         icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty, OnlySelfBounds(true))\n             .into_iter()\n             .filter(|(predicate, _)| {\n                 match predicate {\n                     ty::Predicate::Trait(ref data) => data.skip_binder().self_ty().is_param(index),\n                     _ => false,\n                 }\n-            })\n+            }),\n+    );\n+    result.predicates = tcx.arena.alloc_from_iter(\n+        result.predicates.iter().copied().chain(extra_predicates),\n     );\n-    tcx.arena.alloc(result)\n+    result\n }\n \n impl ItemCtxt<'tcx> {\n@@ -698,7 +698,7 @@ fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n fn super_predicates_of(\n     tcx: TyCtxt<'_>,\n     trait_def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     debug!(\"super_predicates(trait_def_id={:?})\", trait_def_id);\n     let trait_hir_id = tcx.hir().as_local_hir_id(trait_def_id).unwrap();\n \n@@ -732,21 +732,23 @@ fn super_predicates_of(\n         generics, item.hir_id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n \n     // Combine the two lists to form the complete set of superbounds:\n-    let superbounds: Vec<_> = superbounds1.into_iter().chain(superbounds2).collect();\n+    let superbounds = &*tcx.arena.alloc_from_iter(\n+        superbounds1.into_iter().chain(superbounds2)\n+    );\n \n     // Now require that immediate supertraits are converted,\n     // which will, in turn, reach indirect supertraits.\n-    for &(pred, span) in &superbounds {\n+    for &(pred, span) in superbounds {\n         debug!(\"superbound: {:?}\", pred);\n         if let ty::Predicate::Trait(bound) = pred {\n             tcx.at(span).super_predicates_of(bound.def_id());\n         }\n     }\n \n-    tcx.arena.alloc(ty::GenericPredicates {\n+    ty::GenericPredicates {\n         parent: None,\n         predicates: superbounds,\n-    })\n+    }\n }\n \n fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n@@ -1958,7 +1960,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx: 'a>(\n fn predicates_defined_on(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     debug!(\"predicates_defined_on({:?})\", def_id);\n     let mut result = tcx.explicit_predicates_of(def_id);\n     debug!(\n@@ -1974,9 +1976,13 @@ fn predicates_defined_on(\n             def_id,\n             inferred_outlives,\n         );\n-        let mut predicates = (*result).clone();\n-        predicates.predicates.extend(inferred_outlives.iter().map(|&p| (p, span)));\n-        result = tcx.arena.alloc(predicates);\n+        result.predicates = tcx.arena.alloc_from_iter(\n+            result.predicates.iter().copied().chain(\n+                // FIXME(eddyb) use better spans - maybe add `Span`s\n+                // to `inferred_outlives_of` predicates as well?\n+                inferred_outlives.iter().map(|&p| (p, span)),\n+            ),\n+        );\n     }\n     debug!(\"predicates_defined_on({:?}) = {:?}\", def_id, result);\n     result\n@@ -1985,7 +1991,7 @@ fn predicates_defined_on(\n /// Returns a list of all type predicates (explicit and implicit) for the definition with\n /// ID `def_id`. This includes all predicates returned by `predicates_defined_on`, plus\n /// `Self: Trait` predicates for traits.\n-fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n+fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n     let mut result = tcx.predicates_defined_on(def_id);\n \n     if tcx.is_trait(def_id) {\n@@ -2002,9 +2008,11 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n         // used, and adding the predicate into this list ensures\n         // that this is done.\n         let span = tcx.def_span(def_id);\n-        let mut predicates = (*result).clone();\n-        predicates.predicates.push((ty::TraitRef::identity(tcx, def_id).to_predicate(), span));\n-        result = tcx.arena.alloc(predicates);\n+        result.predicates = tcx.arena.alloc_from_iter(\n+            result.predicates.iter().copied().chain(\n+                std::iter::once((ty::TraitRef::identity(tcx, def_id).to_predicate(), span))\n+            ),\n+        );\n     }\n     debug!(\"predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n@@ -2015,7 +2023,7 @@ fn predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::GenericPredicates<'_> {\n fn explicit_predicates_of(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n-) -> &ty::GenericPredicates<'_> {\n+) -> ty::GenericPredicates<'_> {\n     use rustc::hir::*;\n     use rustc_data_structures::fx::FxHashSet;\n \n@@ -2024,6 +2032,7 @@ fn explicit_predicates_of(\n     /// A data structure with unique elements, which preserves order of insertion.\n     /// Preserving the order of insertion is important here so as not to break\n     /// compile-fail UI tests.\n+    // FIXME(eddyb) just use `IndexSet` from `indexmap`.\n     struct UniquePredicates<'tcx> {\n         predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n         uniques: FxHashSet<(ty::Predicate<'tcx>, Span)>,\n@@ -2133,10 +2142,10 @@ fn explicit_predicates_of(\n                     let bounds_predicates = bounds.predicates(tcx, opaque_ty);\n                     if impl_trait_fn.is_some() {\n                         // opaque types\n-                        return tcx.arena.alloc(ty::GenericPredicates {\n+                        return ty::GenericPredicates {\n                             parent: None,\n-                            predicates: bounds_predicates,\n-                        });\n+                            predicates: tcx.arena.alloc_from_iter(bounds_predicates),\n+                        };\n                     } else {\n                         // named opaque types\n                         predicates.extend(bounds_predicates);\n@@ -2339,10 +2348,10 @@ fn explicit_predicates_of(\n         );\n     }\n \n-    let result = tcx.arena.alloc(ty::GenericPredicates {\n+    let result = ty::GenericPredicates {\n         parent: generics.parent,\n-        predicates,\n-    });\n+        predicates: tcx.arena.alloc_from_iter(predicates),\n+    };\n     debug!(\"explicit_predicates_of(def_id={:?}) = {:?}\", def_id, result);\n     result\n }"}, {"sha": "1fdf49fde55b53082907be472a3865d543e88fc9", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -86,11 +86,11 @@ impl<'tcx> TypeVisitor<'tcx> for ParameterCollector {\n \n pub fn identify_constrained_generic_params<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    predicates: &ty::GenericPredicates<'tcx>,\n+    predicates: ty::GenericPredicates<'tcx>,\n     impl_trait_ref: Option<ty::TraitRef<'tcx>>,\n     input_parameters: &mut FxHashSet<Parameter>,\n ) {\n-    let mut predicates = predicates.predicates.clone();\n+    let mut predicates = predicates.predicates.to_vec();\n     setup_constraining_predicates(tcx, &mut predicates, impl_trait_ref, input_parameters);\n }\n "}, {"sha": "2d188007712ad376c4bb570e3cec41177fed30a1", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -114,7 +114,7 @@ fn enforce_impl_params_are_constrained(\n \n     let mut input_parameters = cgp::parameters_for_impl(impl_self_ty, impl_trait_ref);\n     cgp::identify_constrained_generic_params(\n-        tcx, &impl_predicates, impl_trait_ref, &mut input_parameters);\n+        tcx, impl_predicates, impl_trait_ref, &mut input_parameters);\n \n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()"}, {"sha": "83194144216ee8d7177a0b0eb1d2c8d450f96a1c", "filename": "src/librustc_typeck/outlives/explicit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fexplicit.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -30,7 +30,7 @@ impl<'tcx> ExplicitPredicatesMap<'tcx> {\n             let mut required_predicates = RequiredPredicates::default();\n \n             // process predicates and convert to `RequiredPredicates` entry, see below\n-            for (pred, _) in predicates.predicates.iter() {\n+            for (pred, _) in predicates.predicates {\n                 match pred {\n                     ty::Predicate::TypeOutlives(predicate) => {\n                         let OutlivesPredicate(ref ty, ref reg) = predicate.skip_binder();"}, {"sha": "b7f5ed9d004d49506deaf897f26c1bda3f466131", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     // regardless of the choice of `T`.\n                     let params = (\n                         self.cx.tcx.generics_of(param_env_def_id),\n-                        &&self.cx.tcx.common.empty_predicates,\n+                        ty::GenericPredicates::default(),\n                     ).clean(self.cx).params;\n \n                     Generics {\n@@ -489,7 +489,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n         let mut generic_params = (\n             tcx.generics_of(param_env_def_id),\n-            &tcx.explicit_predicates_of(param_env_def_id),\n+            tcx.explicit_predicates_of(param_env_def_id),\n         ).clean(self.cx).params;\n \n         let mut has_sized = FxHashSet::default();"}, {"sha": "ff59dcab672f37b49642f5d67aa7c0057b0d5fcc", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                         unsafety: hir::Unsafety::Normal,\n                         generics: (\n                             self.cx.tcx.generics_of(impl_def_id),\n-                            &self.cx.tcx.explicit_predicates_of(impl_def_id),\n+                            self.cx.tcx.explicit_predicates_of(impl_def_id),\n                         ).clean(self.cx),\n                         provided_trait_methods,\n                         // FIXME(eddyb) compute both `trait_` and `for_` from"}, {"sha": "e7cc8b76e485d0a16b7bc48747f6ae16fe041ad8", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -193,7 +193,7 @@ pub fn build_external_trait(cx: &DocContext<'_>, did: DefId) -> clean::Trait {\n     let auto_trait = cx.tcx.trait_def(did).has_auto_impl;\n     let trait_items = cx.tcx.associated_items(did).map(|item| item.clean(cx)).collect();\n     let predicates = cx.tcx.predicates_of(did);\n-    let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n+    let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n     let generics = filter_non_trait_generics(did, generics);\n     let (generics, supertrait_bounds) = separate_supertrait_bounds(generics);\n     let is_spotlight = load_attrs(cx, did).clean(cx).has_doc_flag(sym::spotlight);\n@@ -220,7 +220,7 @@ fn build_external_function(cx: &DocContext<'_>, did: DefId) -> clean::Function {\n     let asyncness =  cx.tcx.asyncness(did);\n     let predicates = cx.tcx.predicates_of(did);\n     let (generics, decl) = clean::enter_impl_trait(cx, || {\n-        ((cx.tcx.generics_of(did), &predicates).clean(cx), (did, sig).clean(cx))\n+        ((cx.tcx.generics_of(did), predicates).clean(cx), (did, sig).clean(cx))\n     });\n     let (all_types, ret_types) = clean::get_all_types(&generics, &decl, cx);\n     clean::Function {\n@@ -241,7 +241,7 @@ fn build_enum(cx: &DocContext<'_>, did: DefId) -> clean::Enum {\n     let predicates = cx.tcx.explicit_predicates_of(did);\n \n     clean::Enum {\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         variants_stripped: false,\n         variants: cx.tcx.adt_def(did).variants.clean(cx),\n     }\n@@ -257,7 +257,7 @@ fn build_struct(cx: &DocContext<'_>, did: DefId) -> clean::Struct {\n             CtorKind::Fn => doctree::Tuple,\n             CtorKind::Const => doctree::Unit,\n         },\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n     }\n@@ -269,7 +269,7 @@ fn build_union(cx: &DocContext<'_>, did: DefId) -> clean::Union {\n \n     clean::Union {\n         struct_type: doctree::Plain,\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n         fields: variant.fields.clean(cx),\n         fields_stripped: false,\n     }\n@@ -280,7 +280,7 @@ fn build_type_alias(cx: &DocContext<'_>, did: DefId) -> clean::Typedef {\n \n     clean::Typedef {\n         type_: cx.tcx.type_of(did).clean(cx),\n-        generics: (cx.tcx.generics_of(did), &predicates).clean(cx),\n+        generics: (cx.tcx.generics_of(did), predicates).clean(cx),\n     }\n }\n \n@@ -376,7 +376,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, attrs: Option<Attrs<'_>>,\n                 }\n             }).collect::<Vec<_>>(),\n             clean::enter_impl_trait(cx, || {\n-                (tcx.generics_of(did), &predicates).clean(cx)\n+                (tcx.generics_of(did), predicates).clean(cx)\n             }),\n         )\n     };"}, {"sha": "c355f661410e55e7b6d386a42d29b2ea4bf54768", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1664,8 +1664,7 @@ impl Clean<Generics> for hir::Generics {\n     }\n }\n \n-impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n-                                    &'a &'tcx ty::GenericPredicates<'tcx>) {\n+impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx>) {\n     fn clean(&self, cx: &DocContext<'_>) -> Generics {\n         use self::WherePredicate as WP;\n         use std::collections::BTreeMap;\n@@ -2369,7 +2368,7 @@ impl Clean<Item> for ty::AssocItem {\n             }\n             ty::AssocKind::Method => {\n                 let generics = (cx.tcx.generics_of(self.def_id),\n-                                &cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n+                                cx.tcx.explicit_predicates_of(self.def_id)).clean(cx);\n                 let sig = cx.tcx.fn_sig(self.def_id);\n                 let mut decl = (self.def_id, sig).clean(cx);\n \n@@ -2448,7 +2447,7 @@ impl Clean<Item> for ty::AssocItem {\n                     // all of the generics from there and then look for bounds that are\n                     // applied to this associated type in question.\n                     let predicates = cx.tcx.explicit_predicates_of(did);\n-                    let generics = (cx.tcx.generics_of(did), &predicates).clean(cx);\n+                    let generics = (cx.tcx.generics_of(did), predicates).clean(cx);\n                     let mut bounds = generics.where_predicates.iter().filter_map(|pred| {\n                         let (name, self_type, trait_, bounds) = match *pred {\n                             WherePredicate::BoundPredicate {"}, {"sha": "4aec50408812f27a0fed880b3a095a68d8efe0ba", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -22,7 +22,7 @@ use crate::ptr::P;\n use crate::sess::ParseSess;\n use crate::symbol::{sym, Symbol};\n use crate::ThinVec;\n-use crate::tokenstream::{TokenStream, TokenTree, DelimSpan};\n+use crate::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndJoint};\n use crate::GLOBALS;\n \n use log::debug;\n@@ -463,7 +463,7 @@ pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: Symbol) -> Option\n }\n \n impl MetaItem {\n-    fn tokens(&self) -> TokenStream {\n+    fn token_trees_and_joints(&self) -> Vec<TreeAndJoint> {\n         let mut idents = vec![];\n         let mut last_pos = BytePos(0 as u32);\n         for (i, segment) in self.path.segments.iter().enumerate() {\n@@ -477,8 +477,8 @@ impl MetaItem {\n             idents.push(TokenTree::Token(Token::from_ast_ident(segment.ident)).into());\n             last_pos = segment.ident.span.hi();\n         }\n-        self.kind.tokens(self.span).append_to_tree_and_joint_vec(&mut idents);\n-        TokenStream::new(idents)\n+        idents.extend(self.kind.token_trees_and_joints(self.span));\n+        idents\n     }\n \n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n@@ -537,31 +537,41 @@ impl MetaItem {\n }\n \n impl MetaItemKind {\n-    pub fn tokens(&self, span: Span) -> TokenStream {\n+    pub fn token_trees_and_joints(&self, span: Span) -> Vec<TreeAndJoint> {\n         match *self {\n-            MetaItemKind::Word => TokenStream::default(),\n+            MetaItemKind::Word => vec![],\n             MetaItemKind::NameValue(ref lit) => {\n-                let mut vec = vec![TokenTree::token(token::Eq, span).into()];\n-                lit.tokens().append_to_tree_and_joint_vec(&mut vec);\n-                TokenStream::new(vec)\n+                vec![\n+                    TokenTree::token(token::Eq, span).into(),\n+                    lit.token_tree().into(),\n+                ]\n             }\n             MetaItemKind::List(ref list) => {\n                 let mut tokens = Vec::new();\n                 for (i, item) in list.iter().enumerate() {\n                     if i > 0 {\n                         tokens.push(TokenTree::token(token::Comma, span).into());\n                     }\n-                    item.tokens().append_to_tree_and_joint_vec(&mut tokens);\n+                    tokens.extend(item.token_trees_and_joints())\n                 }\n-                TokenTree::Delimited(\n-                    DelimSpan::from_single(span),\n-                    token::Paren,\n-                    TokenStream::new(tokens).into(),\n-                ).into()\n+                vec![\n+                    TokenTree::Delimited(\n+                        DelimSpan::from_single(span),\n+                        token::Paren,\n+                        TokenStream::new(tokens).into(),\n+                    ).into()\n+                ]\n             }\n         }\n     }\n \n+    // Premature conversions of `TokenTree`s to `TokenStream`s can hurt\n+    // performance. Do not use this function if `token_trees_and_joints()` can\n+    // be used instead.\n+    pub fn tokens(&self, span: Span) -> TokenStream {\n+        TokenStream::new(self.token_trees_and_joints(span))\n+    }\n+\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItemKind>\n         where I: Iterator<Item = TokenTree>,\n     {\n@@ -603,10 +613,10 @@ impl NestedMetaItem {\n         }\n     }\n \n-    fn tokens(&self) -> TokenStream {\n+    fn token_trees_and_joints(&self) -> Vec<TreeAndJoint> {\n         match *self {\n-            NestedMetaItem::MetaItem(ref item) => item.tokens(),\n-            NestedMetaItem::Literal(ref lit) => lit.tokens(),\n+            NestedMetaItem::MetaItem(ref item) => item.token_trees_and_joints(),\n+            NestedMetaItem::Literal(ref lit) => vec![lit.token_tree().into()],\n         }\n     }\n "}, {"sha": "17ea4767520646ae18be10ca27e26eb183302583", "filename": "src/libsyntax/error_codes.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferror_codes.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -295,6 +295,33 @@ named `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\n same directory.\n \"##,\n \n+E0584: r##\"\n+A doc comment that is not attached to anything has been encountered.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0584\n+trait Island {\n+    fn lost();\n+\n+    /// I'm lost!\n+}\n+```\n+\n+A little reminder: a doc comment has to be placed before the item it's supposed\n+to document. So if you want to document the `Island` trait, you need to put a\n+doc comment before it, not inside it. Same goes for the `lost` method: the doc\n+comment needs to be before it:\n+\n+```\n+/// I'm THE island!\n+trait Island {\n+    /// I'm lost!\n+    fn lost();\n+}\n+```\n+\"##,\n+\n E0585: r##\"\n A documentation comment that doesn't document anything was found.\n \n@@ -494,7 +521,6 @@ features in the `-Z allow_features` flag.\n     E0549,\n     E0553, // multiple rustc_const_unstable attributes\n //  E0555, // replaced with a generic attribute input check\n-    E0584, // file for module `..` found at both .. and ..\n     E0629, // missing 'feature' (rustc_const_unstable)\n     // rustc_const_unstable attribute must be paired with stable/unstable\n     // attribute"}, {"sha": "7dd6ae90d9a46af0464383bbb999318705a4dc32", "filename": "src/libsyntax/feature_gate/builtin_attrs.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fbuiltin_attrs.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -286,7 +286,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (\n         sym::plugin_registrar, Normal, template!(Word),\n         Gated(\n-            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29597\", None),\n+            Stability::Deprecated(\n+                \"https://github.com/rust-lang/rust/pull/64675\",\n+                Some(\"may be removed in a future compiler version\"),\n+            ),\n             sym::plugin_registrar,\n             \"compiler plugins are deprecated\",\n             cfg_fn!(plugin_registrar)\n@@ -295,7 +298,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     (\n         sym::plugin, CrateLevel, template!(List: \"name|name(args)\"),\n         Gated(\n-            Stability::Deprecated(\"https://github.com/rust-lang/rust/issues/29597\", None),\n+            Stability::Deprecated(\n+                \"https://github.com/rust-lang/rust/pull/64675\",\n+                Some(\"may be removed in a future compiler version\"),\n+            ),\n             sym::plugin,\n             \"compiler plugins are deprecated\",\n             cfg_fn!(plugin)"}, {"sha": "b4dd23c9f9b0f90b338589b8ffba372e4321ea2f", "filename": "src/libsyntax/parse/lexer/tokentrees.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftokentrees.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::fx::FxHashMap;\n use syntax_pos::Span;\n \n use crate::print::pprust::token_to_string;\n@@ -16,6 +17,7 @@ impl<'a> StringReader<'a> {\n             unmatched_braces: Vec::new(),\n             matching_delim_spans: Vec::new(),\n             last_unclosed_found_span: None,\n+            last_delim_empty_block_spans: FxHashMap::default()\n         };\n         let res = tt_reader.parse_all_token_trees();\n         (res, tt_reader.unmatched_braces)\n@@ -34,6 +36,7 @@ struct TokenTreesReader<'a> {\n     /// Used only for error recovery when arriving to EOF with mismatched braces.\n     matching_delim_spans: Vec<(token::DelimToken, Span, Span)>,\n     last_unclosed_found_span: Option<Span>,\n+    last_delim_empty_block_spans: FxHashMap<token::DelimToken, Span>\n }\n \n impl<'a> TokenTreesReader<'a> {\n@@ -121,13 +124,20 @@ impl<'a> TokenTreesReader<'a> {\n                     // Correct delimiter.\n                     token::CloseDelim(d) if d == delim => {\n                         let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n+                        let close_brace_span = self.token.span;\n+\n+                        if tts.is_empty() {\n+                            let empty_block_span = open_brace_span.to(close_brace_span);\n+                            self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n+                        }\n+\n                         if self.open_braces.len() == 0 {\n                             // Clear up these spans to avoid suggesting them as we've found\n                             // properly matched delimiters so far for an entire block.\n                             self.matching_delim_spans.clear();\n                         } else {\n                             self.matching_delim_spans.push(\n-                                (open_brace, open_brace_span, self.token.span),\n+                                (open_brace, open_brace_span, close_brace_span),\n                             );\n                         }\n                         // Parse the close delimiter.\n@@ -193,13 +203,20 @@ impl<'a> TokenTreesReader<'a> {\n                     tts.into()\n                 ).into())\n             },\n-            token::CloseDelim(_) => {\n+            token::CloseDelim(delim) => {\n                 // An unexpected closing delimiter (i.e., there is no\n                 // matching opening delimiter).\n                 let token_str = token_to_string(&self.token);\n                 let msg = format!(\"unexpected close delimiter: `{}`\", token_str);\n                 let mut err = self.string_reader.sess.span_diagnostic\n                     .struct_span_err(self.token.span, &msg);\n+\n+                if let Some(span) = self.last_delim_empty_block_spans.remove(&delim) {\n+                    err.span_label(\n+                        span,\n+                        \"this block is empty, you might have not meant to close it\"\n+                    );\n+                }\n                 err.span_label(self.token.span, \"unexpected close delimiter\");\n                 Err(err)\n             },"}, {"sha": "7952e293a532d72eef0914ddc03908ac19f328bf", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -3,7 +3,7 @@\n use crate::ast::{self, Lit, LitKind};\n use crate::parse::token::{self, Token};\n use crate::symbol::{kw, sym, Symbol};\n-use crate::tokenstream::{TokenStream, TokenTree};\n+use crate::tokenstream::TokenTree;\n \n use log::debug;\n use rustc_data_structures::sync::Lrc;\n@@ -216,13 +216,13 @@ impl Lit {\n         Lit { token: kind.to_lit_token(), kind, span }\n     }\n \n-    /// Losslessly convert an AST literal into a token stream.\n-    crate fn tokens(&self) -> TokenStream {\n+    /// Losslessly convert an AST literal into a token tree.\n+    crate fn token_tree(&self) -> TokenTree {\n         let token = match self.token.kind {\n             token::Bool => token::Ident(self.token.symbol, false),\n             _ => token::Literal(self.token),\n         };\n-        TokenTree::token(token, self.span).into()\n+        TokenTree::token(token, self.span)\n     }\n }\n "}, {"sha": "6bbd8be0cb9827d4c15c88cc77727d465ece5afa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -285,10 +285,10 @@ impl TokenCursor {\n             token::NoDelim,\n             &if doc_comment_style(&name.as_str()) == AttrStyle::Inner {\n                 [TokenTree::token(token::Pound, sp), TokenTree::token(token::Not, sp), body]\n-                    .iter().cloned().collect::<TokenStream>().into()\n+                    .iter().cloned().collect::<TokenStream>()\n             } else {\n                 [TokenTree::token(token::Pound, sp), body]\n-                    .iter().cloned().collect::<TokenStream>().into()\n+                    .iter().cloned().collect::<TokenStream>()\n             },\n         )));\n "}, {"sha": "188a144cac9de93a6a2706e59848ad68409b30a3", "filename": "src/libsyntax/parse/parser/attr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fattr.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -6,7 +6,6 @@ use crate::tokenstream::{TokenStream, TokenTree};\n use crate::source_map::Span;\n \n use log::debug;\n-use smallvec::smallvec;\n \n #[derive(Debug)]\n enum InnerAttributeParsePolicy<'a> {\n@@ -193,15 +192,15 @@ impl<'a> Parser<'a> {\n                         is_interpolated_expr = true;\n                     }\n                 }\n-                let tokens = if is_interpolated_expr {\n+                let token_tree = if is_interpolated_expr {\n                     // We need to accept arbitrary interpolated expressions to continue\n                     // supporting things like `doc = $expr` that work on stable.\n                     // Non-literal interpolated expressions are rejected after expansion.\n-                    self.parse_token_tree().into()\n+                    self.parse_token_tree()\n                 } else {\n-                    self.parse_unsuffixed_lit()?.tokens()\n+                    self.parse_unsuffixed_lit()?.token_tree()\n                 };\n-                TokenStream::from_streams(smallvec![eq.into(), tokens])\n+                TokenStream::new(vec![eq.into(), token_tree.into()])\n             } else {\n                 TokenStream::default()\n             };"}, {"sha": "67a530ec6831bf764efb1866088c022414b2a5f8", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -423,7 +423,7 @@ impl<'a> Parser<'a> {\n                 self.struct_span_err(span_of_tilde, \"`~` cannot be used as a unary operator\")\n                     .span_suggestion_short(\n                         span_of_tilde,\n-                        \"use `!` to perform bitwise negation\",\n+                        \"use `!` to perform bitwise not\",\n                         \"!\".to_owned(),\n                         Applicability::MachineApplicable\n                     )"}, {"sha": "4a8b25c61079b6ad3bf8384d2c306b726b70078d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -33,7 +33,7 @@ pub enum BinOpToken {\n }\n \n /// A delimiter token.\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum DelimToken {\n     /// A round parenthesis (i.e., `(` or `)`).\n     Paren,"}, {"sha": "ac155556cdae25d541ca79c82b947409d0c3b58f", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -202,9 +202,9 @@ impl From<TokenTree> for TreeAndJoint {\n     }\n }\n \n-impl<T: Into<TokenStream>> iter::FromIterator<T> for TokenStream {\n-    fn from_iter<I: IntoIterator<Item = T>>(iter: I) -> Self {\n-        TokenStream::from_streams(iter.into_iter().map(Into::into).collect::<SmallVec<_>>())\n+impl iter::FromIterator<TokenTree> for TokenStream {\n+    fn from_iter<I: IntoIterator<Item = TokenTree>>(iter: I) -> Self {\n+        TokenStream::new(iter.into_iter().map(Into::into).collect::<Vec<TreeAndJoint>>())\n     }\n }\n \n@@ -271,10 +271,6 @@ impl TokenStream {\n         }\n     }\n \n-    pub fn append_to_tree_and_joint_vec(self, vec: &mut Vec<TreeAndJoint>) {\n-        vec.extend(self.0.iter().cloned());\n-    }\n-\n     pub fn trees(&self) -> Cursor {\n         self.clone().into_trees()\n     }"}, {"sha": "aec1325844f2a837a044985d486b654bc68a5c36", "filename": "src/test/ui-fulldeps/gated-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fgated-plugin.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -7,11 +7,11 @@ LL | #![plugin(attr_plugin_test)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/gated-plugin.rs:3:1\n    |\n LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "e76044c56ef94132a4550ddf17037132161e6a7b", "filename": "src/test/ui-fulldeps/issue-15778-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-fail.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-15778-fail.rs:6:1\n    |\n LL | #![plugin(lint_for_crate)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "0c30d2cdcbf1c6fd9c409bf475fd2fd0c4a049b3", "filename": "src/test/ui-fulldeps/issue-15778-pass.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-15778-pass.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-15778-pass.rs:8:1\n    |\n LL | #![plugin(lint_for_crate_rpass)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "d0ad0275ed1584ec5307b58cd77496bccb77ef19", "filename": "src/test/ui-fulldeps/issue-40001.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fissue-40001.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-40001.rs:6:1\n    |\n LL | #![plugin(issue_40001_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "f8a4f271da5aa7ef1589b20ebe0f682123bf11d5", "filename": "src/test/ui-fulldeps/lint-group-plugin-deny-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin-deny-cmdline.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-group-plugin-deny-cmdline.rs:7:1\n    |\n LL | #![plugin(lint_group_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "58dc78b06d3f3b1721435c566a8df15fc5008066", "filename": "src/test/ui-fulldeps/lint-group-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-group-plugin.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-group-plugin.rs:6:1\n    |\n LL | #![plugin(lint_group_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "c6d198dc458a60941586316c3f738c72ba54380b", "filename": "src/test/ui-fulldeps/lint-plugin-cmdline-allow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-cmdline-allow.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-cmdline-allow.rs:8:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "c611023e5490c2a414bbe4a95edb6a522d9c3fbe", "filename": "src/test/ui-fulldeps/lint-plugin-deny-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-attr.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-deny-attr.rs:5:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "03668fbfe664f6125eba53d33e58b6eeec35b8b2", "filename": "src/test/ui-fulldeps/lint-plugin-deny-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-deny-cmdline.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-deny-cmdline.rs:6:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "c0de1feee7d46cf92d2ec5441ff7f68a2cce56a4", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-attrs.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -7,11 +7,11 @@ LL | #![forbid(test_lint)]\n LL | #[allow(test_lint)]\n    |         ^^^^^^^^^ overruled by previous forbid\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-forbid-attrs.rs:5:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "f189efbf61d859b96ebb2443e5fe736c15568260", "filename": "src/test/ui-fulldeps/lint-plugin-forbid-cmdline.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin-forbid-cmdline.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -6,11 +6,11 @@ LL | #[allow(test_lint)]\n    |\n    = note: `forbid` lint level was set on command line\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin-forbid-cmdline.rs:6:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "e95650090dde3400ea6974dd1546f181879a265c", "filename": "src/test/ui-fulldeps/lint-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-plugin.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-plugin.rs:5:1\n    |\n LL | #![plugin(lint_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "239732521d59e64d5c78b7ffa799cdca0c0a97b5", "filename": "src/test/ui-fulldeps/lint-tool-cmdline-allow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-cmdline-allow.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -2,11 +2,11 @@ warning: lint name `test_lint` is deprecated and does not have an effect anymore\n    |\n    = note: requested on the command line with `-A test_lint`\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-tool-cmdline-allow.rs:8:1\n    |\n LL | #![plugin(lint_tool_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "d4031a780c3d47e0d3e8ed0adf42eafeecada0b2", "filename": "src/test/ui-fulldeps/lint-tool-test.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flint-tool-test.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -32,11 +32,11 @@ warning: lint name `test_lint` is deprecated and may not have an effect in the f\n LL | #![cfg_attr(foo, warn(test_lint))]\n    |                       ^^^^^^^^^ help: change it to: `clippy::test_lint`\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lint-tool-test.rs:6:1\n    |\n LL | #![plugin(lint_tool_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "61b53bb2b7cdfc0645349f17b1094510a4c6db2d", "filename": "src/test/ui-fulldeps/llvm-pass-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fllvm-pass-plugin.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/llvm-pass-plugin.rs:6:1\n    |\n LL | #![plugin(llvm_pass_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "529da32e10eeb1321a8516a0bd661313a82c0946", "filename": "src/test/ui-fulldeps/lto-syntax-extension.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Flto-syntax-extension.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/lto-syntax-extension.rs:9:1\n    |\n LL | #![plugin(lto_syntax_extension_plugin)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "b5bd761f1b580bedd4881995ff57f3a49cda3416", "filename": "src/test/ui-fulldeps/macro-crate-rlib.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fmacro-crate-rlib.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -4,11 +4,11 @@ error[E0457]: plugin `rlib_crate_test` only found in rlib format, but must be av\n LL | #![plugin(rlib_crate_test)]\n    |           ^^^^^^^^^^^^^^^\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/macro-crate-rlib.rs:6:1\n    |\n LL | #![plugin(rlib_crate_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "d06fc480fb52255e8700c3023e0268965b5e9ed1", "filename": "src/test/ui-fulldeps/outlive-expansion-phase.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Foutlive-expansion-phase.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/outlive-expansion-phase.rs:6:1\n    |\n LL | #![plugin(outlive_expansion_phase)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "ca3e27069ed2679fb3c0506b7d788085bc8837af", "filename": "src/test/ui-fulldeps/plugin-args-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-1.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-1.rs:6:1\n    |\n LL | #![plugin(plugin_args)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "57c06513d5c06c7cbb77a862f2ad684e0f9ce669", "filename": "src/test/ui-fulldeps/plugin-args-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-2.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-2.rs:6:1\n    |\n LL | #![plugin(plugin_args())]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "179f1abc8c49c3814ddc00a02618e5b3bf062548", "filename": "src/test/ui-fulldeps/plugin-args-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-args-3.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-args-3.rs:6:1\n    |\n LL | #![plugin(plugin_args(hello(there), how(are=\"you\")))]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "8d95d6ff2d89f9e67bc8de31e191ccd048663935", "filename": "src/test/ui-fulldeps/plugin-attr-register-deny.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-attr-register-deny.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-attr-register-deny.rs:5:1\n    |\n LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "365b26d131e79bff90ffc83b087023d0f690b3bf", "filename": "src/test/ui-fulldeps/plugin-reexport.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fplugin-reexport.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -10,11 +10,11 @@ note: consider marking `mac` as `pub` in the imported module\n LL | pub use mac as reexport;\n    |         ^^^^^^^^^^^^^^^\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/plugin-reexport.rs:6:1\n    |\n LL | #![plugin(attr_plugin_test)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "8f3f558e91df55b37d10d7e6bbc8f5ea1309af3c", "filename": "src/test/ui-fulldeps/roman-numerals-macro.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Froman-numerals-macro.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/roman-numerals-macro.rs:6:1\n    |\n LL | #![plugin(roman_numerals)]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "79bc7d2565be619f284419e92b3809b57cb7996a", "filename": "src/test/ui/did_you_mean/issue-41679-tilde-bitwise-negation-attempt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-41679-tilde-bitwise-negation-attempt.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -2,7 +2,7 @@ error: `~` cannot be used as a unary operator\n   --> $DIR/issue-41679-tilde-bitwise-negation-attempt.rs:2:13\n    |\n LL |     let x = ~1;\n-   |             ^ help: use `!` to perform bitwise negation\n+   |             ^ help: use `!` to perform bitwise not\n \n error: aborting due to previous error\n "}, {"sha": "e78d9840abf7d659f7c7289c0b8f3826bd749650", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -186,43 +186,43 @@ LL |     mod inner { #![macro_escape] }\n    |\n    = help: consider an outer attribute, `#[macro_use]` mod ...\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:17\n    |\n LL |     mod inner { #![plugin_registrar] }\n-   |                 ^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |                 ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:5\n    |\n LL |     #[plugin_registrar] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:5\n    |\n LL |     #[plugin_registrar] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:230:5\n    |\n LL |     #[plugin_registrar] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   |     ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:1\n    |\n LL | #[plugin_registrar]\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:40:1\n    |\n LL | #![plugin_registrar]\n-   | ^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n warning: use of deprecated attribute `crate_id`: no longer used.\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:90:1"}, {"sha": "f89ddf995c49eb32dd0524d7f61343f6a21ea8da", "filename": "src/test/ui/feature-gates/feature-gate-plugin.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -7,11 +7,11 @@ LL | #![plugin(foo)]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin)]` to the crate attributes to enable\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/feature-gate-plugin.rs:3:1\n    |\n LL | #![plugin(foo)]\n-   | ^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "4856cf7c3f7d9546b61332d8872667e564b8e20c", "filename": "src/test/ui/feature-gates/feature-gate-plugin_registrar.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-plugin_registrar.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -16,11 +16,11 @@ LL | #[plugin_registrar]\n    = note: for more information, see https://github.com/rust-lang/rust/issues/29597\n    = help: add `#![feature(plugin_registrar)]` to the crate attributes to enable\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/feature-gate-plugin_registrar.rs:5:1\n    |\n LL | #[plugin_registrar]\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "0d7315dd887ca12f8e78406ba95642ad8b44dc7e", "filename": "src/test/ui/invalid/invalid-plugin-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-plugin-attr.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,8 +1,8 @@\n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/invalid-plugin-attr.rs:4:1\n    |\n LL | #[plugin(bla)]\n-   | ^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "3860864bd13366a2534c62faaf5f098367c13eb6", "filename": "src/test/ui/malformed/malformed-plugin-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-1.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -4,11 +4,11 @@ error: malformed `plugin` attribute input\n LL | #![plugin]\n    | ^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-1.rs:2:1\n    |\n LL | #![plugin]\n-   | ^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "e4bca93f13b356b4473e3161d48dd3dbec30f713", "filename": "src/test/ui/malformed/malformed-plugin-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-2.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -4,11 +4,11 @@ error: malformed `plugin` attribute input\n LL | #![plugin=\"bleh\"]\n    | ^^^^^^^^^^^^^^^^^ help: must be of the form: `#[plugin(name|name(args))]`\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-2.rs:2:1\n    |\n LL | #![plugin=\"bleh\"]\n-   | ^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "7393072cb1ca3e45d204af14b90b86365aac5cf6", "filename": "src/test/ui/malformed/malformed-plugin-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-plugin-3.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -4,11 +4,11 @@ error[E0498]: malformed `plugin` attribute\n LL | #![plugin(foo=\"bleh\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^ malformed attribute\n \n-warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/malformed-plugin-3.rs:2:1\n    |\n LL | #![plugin(foo=\"bleh\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n "}, {"sha": "2b77d866fb30b3e011e096b3e2d9317c0c18aa24", "filename": "src/test/ui/mod/mod_file_disambig.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmod%2Fmod_file_disambig.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -8,3 +8,4 @@ LL | mod mod_file_disambig_aux;\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0584`."}, {"sha": "dad8172e0c59e68d35bd91c5c8756a4bdbce15f0", "filename": "src/test/ui/multiple-plugin-registrars.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmultiple-plugin-registrars.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -1,16 +1,16 @@\n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/multiple-plugin-registrars.rs:6:1\n    |\n LL | #[plugin_registrar]\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n    |\n    = note: `#[warn(deprecated)]` on by default\n \n-warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/issues/29597\n+warning: use of deprecated attribute `plugin_registrar`: compiler plugins are deprecated. See https://github.com/rust-lang/rust/pull/64675\n   --> $DIR/multiple-plugin-registrars.rs:9:1\n    |\n LL | #[plugin_registrar]\n-   | ^^^^^^^^^^^^^^^^^^^ help: remove this attribute\n+   | ^^^^^^^^^^^^^^^^^^^ help: may be removed in a future compiler version\n \n error: multiple plugin registration functions found\n    |"}, {"sha": "261e27b6e0d18fc808f52fe1874efca7e89ea8f9", "filename": "src/test/ui/parser/doc-inside-trait-item.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -8,3 +8,4 @@ LL |     /// empty doc\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0584`."}, {"sha": "0f5a2cb09ecc4cb9027cfa162fc1bc2f1b376352", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+\n+}\n+    let _ = ();\n+} //~ ERROR unexpected close delimiter"}, {"sha": "5ae5fc91a4e8a9f78062dce2cd2911fe42bee9e7", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -0,0 +1,14 @@\n+error: unexpected close delimiter: `}`\n+  --> $DIR/mismatched-delim-brace-empty-block.rs:5:1\n+   |\n+LL |   fn main() {\n+   |  ___________-\n+LL | |\n+LL | | }\n+   | |_- this block is empty, you might have not meant to close it\n+LL |       let _ = ();\n+LL |   }\n+   |   ^ unexpected close delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "9e58b8da5d2717c84ec07f3629065cc4aab31beb", "filename": "src/test/ui/save-analysis/issue-65411.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65411.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65411.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsave-analysis%2Fissue-65411.rs?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+// compile-flags: -Zsave-analysis\n+\n+trait Trait { type Assoc; }\n+trait GenericTrait<T> {}\n+struct Wrapper<B> { b: B }\n+\n+fn func() {\n+    // Processing associated path in impl block definition inside a function\n+    // body does not ICE\n+    impl<B: Trait> GenericTrait<B::Assoc> for Wrapper<B> {}\n+}\n+\n+\n+fn main() {}"}, {"sha": "39752f66b9d65fa6be3e9094f8df930aca8ebd29", "filename": "src/test/ui/ufcs/ufcs-partially-resolved.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fufcs%2Fufcs-partially-resolved.stderr?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -200,5 +200,5 @@ LL |     <u8 as Dr>::X::N;\n \n error: aborting due to 32 previous errors\n \n-Some errors have detailed explanations: E0223, E0433, E0599.\n+Some errors have detailed explanations: E0223, E0433, E0575, E0599.\n For more information about an error, try `rustc --explain E0223`."}, {"sha": "f0e3a99037b022118df470c8b7fe27578824e79e", "filename": "triagebot.toml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14f0ed64e306cfc232c3209985afb53fa2cadbb2/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/14f0ed64e306cfc232c3209985afb53fa2cadbb2/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=14f0ed64e306cfc232c3209985afb53fa2cadbb2", "patch": "@@ -8,3 +8,14 @@ allow-unauthenticated = [\n ]\n \n [assign]\n+\n+[ping.icebreakers-llvm]\n+message = \"\"\"\\\n+Hey LLVM ICE-breakers! This bug has been identified as a good\n+\"LLVM ICE-breaking candidate\". In case it's useful, here are some\n+[instructions] for tackling these sorts of bugs. Maybe take a look?\n+Thanks! <3\n+\n+[instructions]: https://rust-lang.github.io/rustc-guide/ice-breaker/llvm.html\n+\"\"\"\n+label = \"ICEBreaker-LLVM\""}]}