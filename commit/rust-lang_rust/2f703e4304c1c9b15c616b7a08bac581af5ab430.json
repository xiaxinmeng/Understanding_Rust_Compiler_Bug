{"sha": "2f703e4304c1c9b15c616b7a08bac581af5ab430", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmNzAzZTQzMDRjMWM5YjE1YzYxNmI3YTA4YmFjNTgxYWY1YWI0MzA=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-05-20T07:38:39Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2017-05-20T07:38:39Z"}, "message": "Correct some stability versions\n\nThese were found by running tidy on stable versions of rust and finding\nfeatures stabilised with the wrong version numbers.", "tree": {"sha": "6eea2177e7026700814b0e820655ec77fb37ca8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eea2177e7026700814b0e820655ec77fb37ca8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f703e4304c1c9b15c616b7a08bac581af5ab430", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f703e4304c1c9b15c616b7a08bac581af5ab430", "html_url": "https://github.com/rust-lang/rust/commit/2f703e4304c1c9b15c616b7a08bac581af5ab430", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f703e4304c1c9b15c616b7a08bac581af5ab430/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f15631c36665911eb8e6f594ebcfe93e65a461c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f15631c36665911eb8e6f594ebcfe93e65a461c", "html_url": "https://github.com/rust-lang/rust/commit/9f15631c36665911eb8e6f594ebcfe93e65a461c"}], "stats": {"total": 196, "additions": 98, "deletions": 98}, "files": [{"sha": "8a39be8fae8a5210452d4acdaf02a9dfff85f776", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -445,7 +445,7 @@ impl<'a> From<&'a str> for Box<str> {\n     }\n }\n \n-#[stable(feature = \"boxed_str_conv\", since = \"1.18.0\")]\n+#[stable(feature = \"boxed_str_conv\", since = \"1.19.0\")]\n impl From<Box<str>> for Box<[u8]> {\n     fn from(s: Box<str>) -> Self {\n         unsafe {"}, {"sha": "55f0e01548fee05a1e83a7a50349947491f8cb3a", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1869,28 +1869,28 @@ impl ops::Index<ops::RangeToInclusive<usize>> for String {\n     }\n }\n \n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::Range<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeTo<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeFrom<usize>> for String {\n     #[inline]\n     fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n         &mut self[..][index]\n     }\n }\n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::IndexMut<ops::RangeFull> for String {\n     #[inline]\n     fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {\n@@ -1922,7 +1922,7 @@ impl ops::Deref for String {\n     }\n }\n \n-#[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+#[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n impl ops::DerefMut for String {\n     #[inline]\n     fn deref_mut(&mut self) -> &mut str {\n@@ -2080,14 +2080,14 @@ impl<'a> From<&'a str> for String {\n \n // note: test pulls in libstd, which causes errors here\n #[cfg(not(test))]\n-#[stable(feature = \"string_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"string_from_box\", since = \"1.18.0\")]\n impl From<Box<str>> for String {\n     fn from(s: Box<str>) -> String {\n         s.into_string()\n     }\n }\n \n-#[stable(feature = \"box_from_str\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_str\", since = \"1.18.0\")]\n impl Into<Box<str>> for String {\n     fn into(self) -> Box<str> {\n         self.into_boxed_str()"}, {"sha": "38bc8104cd724b476b582ef35e558ecd022059a2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -2034,7 +2034,7 @@ impl<'a, T: Clone> From<&'a [T]> for Vec<T> {\n     }\n }\n \n-#[stable(feature = \"vec_from_mut\", since = \"1.21.0\")]\n+#[stable(feature = \"vec_from_mut\", since = \"1.19.0\")]\n impl<'a, T: Clone> From<&'a mut [T]> for Vec<T> {\n     #[cfg(not(test))]\n     fn from(s: &'a mut [T]) -> Vec<T> {\n@@ -2055,14 +2055,14 @@ impl<'a, T> From<Cow<'a, [T]>> for Vec<T> where [T]: ToOwned<Owned=Vec<T>> {\n \n // note: test pulls in libstd, which causes errors here\n #[cfg(not(test))]\n-#[stable(feature = \"vec_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"vec_from_box\", since = \"1.18.0\")]\n impl<T> From<Box<[T]>> for Vec<T> {\n     fn from(s: Box<[T]>) -> Vec<T> {\n         s.into_vec()\n     }\n }\n \n-#[stable(feature = \"box_from_vec\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_vec\", since = \"1.18.0\")]\n impl<T> Into<Box<[T]>> for Vec<T> {\n     fn into(self) -> Box<[T]> {\n         self.into_boxed_slice()\n@@ -2080,14 +2080,14 @@ impl<'a> From<&'a str> for Vec<u8> {\n // Clone-on-write\n ////////////////////////////////////////////////////////////////////////////////\n \n-#[stable(feature = \"cow_from_vec\", since = \"1.7.0\")]\n+#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<&'a [T]> for Cow<'a, [T]> {\n     fn from(s: &'a [T]) -> Cow<'a, [T]> {\n         Cow::Borrowed(s)\n     }\n }\n \n-#[stable(feature = \"cow_from_vec\", since = \"1.7.0\")]\n+#[stable(feature = \"cow_from_vec\", since = \"1.8.0\")]\n impl<'a, T: Clone> From<Vec<T>> for Cow<'a, [T]> {\n     fn from(v: Vec<T>) -> Cow<'a, [T]> {\n         Cow::Owned(v)"}, {"sha": "ea480f38947f982b9804ac8418be117ef6605e78", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1145,7 +1145,7 @@ impl<T: ?Sized> UnsafeCell<T> {\n     }\n }\n \n-#[stable(feature = \"unsafe_cell_default\", since = \"1.9.0\")]\n+#[stable(feature = \"unsafe_cell_default\", since = \"1.10.0\")]\n impl<T: Default> Default for UnsafeCell<T> {\n     /// Creates an `UnsafeCell`, with the `Default` value for T.\n     fn default() -> UnsafeCell<T> {"}, {"sha": "b90d08f948edbc9c27931cd906f3aa762ca953da", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1655,7 +1655,7 @@ impl<I> Iterator for Skip<I> where I: Iterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n \n-#[stable(feature = \"double_ended_skip_iterator\", since = \"1.8.0\")]\n+#[stable(feature = \"double_ended_skip_iterator\", since = \"1.9.0\")]\n impl<I> DoubleEndedIterator for Skip<I> where I: DoubleEndedIterator + ExactSizeIterator {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         if self.len() > 0 {"}, {"sha": "be093cca6a1b9b3ea851ecbac1448d1be72384bf", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -2682,8 +2682,8 @@ pub use num::dec2flt::ParseFloatError;\n // Conversions T -> T are covered by a blanket impl and therefore excluded\n // Some conversions from and to usize/isize are not implemented due to portability concerns\n macro_rules! impl_from {\n-    ($Small: ty, $Large: ty) => {\n-        #[stable(feature = \"lossless_prim_conv\", since = \"1.5.0\")]\n+    ($Small: ty, $Large: ty, #[$attr:meta]) => {\n+        #[$attr]\n         impl From<$Small> for $Large {\n             #[inline]\n             fn from(small: $Small) -> $Large {\n@@ -2694,60 +2694,60 @@ macro_rules! impl_from {\n }\n \n // Unsigned -> Unsigned\n-impl_from! { u8, u16 }\n-impl_from! { u8, u32 }\n-impl_from! { u8, u64 }\n-impl_from! { u8, u128 }\n-impl_from! { u8, usize }\n-impl_from! { u16, u32 }\n-impl_from! { u16, u64 }\n-impl_from! { u16, u128 }\n-impl_from! { u32, u64 }\n-impl_from! { u32, u128 }\n-impl_from! { u64, u128 }\n+impl_from! { u8, u16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u8, usize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, u64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u32, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u64, u128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Signed -> Signed\n-impl_from! { i8, i16 }\n-impl_from! { i8, i32 }\n-impl_from! { i8, i64 }\n-impl_from! { i8, i128 }\n-impl_from! { i8, isize }\n-impl_from! { i16, i32 }\n-impl_from! { i16, i64 }\n-impl_from! { i16, i128 }\n-impl_from! { i32, i64 }\n-impl_from! { i32, i128 }\n-impl_from! { i64, i128 }\n+impl_from! { i8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i8, isize, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { i32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { i64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Unsigned -> Signed\n-impl_from! { u8, i16 }\n-impl_from! { u8, i32 }\n-impl_from! { u8, i64 }\n-impl_from! { u8, i128 }\n-impl_from! { u16, i32 }\n-impl_from! { u16, i64 }\n-impl_from! { u16, i128 }\n-impl_from! { u32, i64 }\n-impl_from! { u32, i128 }\n-impl_from! { u64, i128 }\n+impl_from! { u8, i16, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u8, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u16, i32, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u16, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u32, i64, #[stable(feature = \"lossless_int_conv\", since = \"1.5.0\")] }\n+impl_from! { u32, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n+impl_from! { u64, i128, #[unstable(feature = \"i128\", issue = \"35118\")] }\n \n // Note: integers can only be represented with full precision in a float if\n // they fit in the significand, which is 24 bits in f32 and 53 bits in f64.\n // Lossy float conversions are not implemented at this time.\n \n // Signed -> Float\n-impl_from! { i8, f32 }\n-impl_from! { i8, f64 }\n-impl_from! { i16, f32 }\n-impl_from! { i16, f64 }\n-impl_from! { i32, f64 }\n+impl_from! { i8, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i8, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i16, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i16, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { i32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n // Unsigned -> Float\n-impl_from! { u8, f32 }\n-impl_from! { u8, f64 }\n-impl_from! { u16, f32 }\n-impl_from! { u16, f64 }\n-impl_from! { u32, f64 }\n+impl_from! { u8, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u8, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u16, f32, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u16, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n+impl_from! { u32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }\n \n // Float -> Float\n-impl_from! { f32, f64 }\n+impl_from! { f32, f64, #[stable(feature = \"lossless_float_conv\", since = \"1.6.0\")] }"}, {"sha": "24ebfeb62e2eec23eec5fe573fa01ed819ace068", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1450,7 +1450,7 @@ impl<'a, T> Clone for Iter<'a, T> {\n     fn clone(&self) -> Iter<'a, T> { Iter { ptr: self.ptr, end: self.end, _marker: self._marker } }\n }\n \n-#[stable(feature = \"slice_iter_as_ref\", since = \"1.12.0\")]\n+#[stable(feature = \"slice_iter_as_ref\", since = \"1.13.0\")]\n impl<'a, T> AsRef<[T]> for Iter<'a, T> {\n     fn as_ref(&self) -> &[T] {\n         self.as_slice()"}, {"sha": "7fb941c091fbc4fab90ed623b90ff54db4bb3142", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1597,7 +1597,7 @@ mod traits {\n     /// byte offset of a character (as defined by `is_char_boundary`).\n     /// Requires that `begin <= end` and `end <= len` where `len` is the\n     /// length of the string.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::Range<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::Range<usize>) -> &mut str {\n@@ -1632,7 +1632,7 @@ mod traits {\n     /// `end`.\n     ///\n     /// Equivalent to `&mut self[0 .. end]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeTo<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeTo<usize>) -> &mut str {\n@@ -1672,7 +1672,7 @@ mod traits {\n     /// to the end of the string.\n     ///\n     /// Equivalent to `&mut self[begin .. len]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeFrom<usize>> for str {\n         #[inline]\n         fn index_mut(&mut self, index: ops::RangeFrom<usize>) -> &mut str {\n@@ -1708,7 +1708,7 @@ mod traits {\n     /// never panic.\n     ///\n     /// Equivalent to `&mut self[0 .. len]`.\n-    #[stable(feature = \"derefmut_for_string\", since = \"1.2.0\")]\n+    #[stable(feature = \"derefmut_for_string\", since = \"1.3.0\")]\n     impl ops::IndexMut<ops::RangeFull> for str {\n         #[inline]\n         fn index_mut(&mut self, _index: ops::RangeFull) -> &mut str {"}, {"sha": "27255bef84911ad3e029e104b9a1e4b4dada63cc", "filename": "src/libstd/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -680,7 +680,7 @@ impl ExactSizeIterator for Args {\n     fn is_empty(&self) -> bool { self.inner.is_empty() }\n }\n \n-#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+#[stable(feature = \"env_iterators\", since = \"1.12.0\")]\n impl DoubleEndedIterator for Args {\n     fn next_back(&mut self) -> Option<String> {\n         self.inner.next_back().map(|s| s.into_string().unwrap())\n@@ -707,7 +707,7 @@ impl ExactSizeIterator for ArgsOs {\n     fn is_empty(&self) -> bool { self.inner.is_empty() }\n }\n \n-#[stable(feature = \"env_iterators\", since = \"1.11.0\")]\n+#[stable(feature = \"env_iterators\", since = \"1.12.0\")]\n impl DoubleEndedIterator for ArgsOs {\n     fn next_back(&mut self) -> Option<OsString> { self.inner.next_back() }\n }"}, {"sha": "f56e3a5d780c06133626413008098a6e0274a4dc", "filename": "src/libstd/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -193,7 +193,7 @@ impl From<String> for Box<Error + Send + Sync> {\n     }\n }\n \n-#[stable(feature = \"string_box_error\", since = \"1.7.0\")]\n+#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<Error> {\n     fn from(str_err: String) -> Box<Error> {\n         let err1: Box<Error + Send + Sync> = From::from(str_err);\n@@ -209,7 +209,7 @@ impl<'a, 'b> From<&'b str> for Box<Error + Send + Sync + 'a> {\n     }\n }\n \n-#[stable(feature = \"string_box_error\", since = \"1.7.0\")]\n+#[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl<'a> From<&'a str> for Box<Error> {\n     fn from(err: &'a str) -> Box<Error> {\n         From::from(String::from(err))\n@@ -282,7 +282,7 @@ impl Error for char::DecodeUtf16Error {\n     }\n }\n \n-#[stable(feature = \"box_error\", since = \"1.7.0\")]\n+#[stable(feature = \"box_error\", since = \"1.8.0\")]\n impl<T: Error> Error for Box<T> {\n     fn description(&self) -> &str {\n         Error::description(&**self)"}, {"sha": "f40475a41422bb9dc726480c3db4fbc9ea5459f4", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -419,14 +419,14 @@ impl<'a> From<&'a CStr> for Box<CStr> {\n     }\n }\n \n-#[stable(feature = \"c_string_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"c_string_from_box\", since = \"1.18.0\")]\n impl From<Box<CStr>> for CString {\n     fn from(s: Box<CStr>) -> CString {\n         s.into_c_string()\n     }\n }\n \n-#[stable(feature = \"box_from_c_string\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_c_string\", since = \"1.18.0\")]\n impl Into<Box<CStr>> for CString {\n     fn into(self) -> Box<CStr> {\n         self.into_boxed_c_str()"}, {"sha": "eaf0502a577d941569a1e95a88ddc51c8cf8057f", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -529,14 +529,14 @@ impl<'a> From<&'a OsStr> for Box<OsStr> {\n     }\n }\n \n-#[stable(feature = \"os_string_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"os_string_from_box\", since = \"1.18.0\")]\n impl<'a> From<Box<OsStr>> for OsString {\n     fn from(boxed: Box<OsStr>) -> OsString {\n         boxed.into_os_string()\n     }\n }\n \n-#[stable(feature = \"box_from_c_string\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_os_string\", since = \"1.18.0\")]\n impl Into<Box<OsStr>> for OsString {\n     fn into(self) -> Box<OsStr> {\n         self.into_boxed_os_str()"}, {"sha": "df3fce0da765dc72b191ed41fe84814b3ebc1ba7", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -143,7 +143,7 @@ macro_rules! println {\n ///\n /// Panics if writing to `io::stderr` fails.\n #[macro_export]\n-#[stable(feature = \"eprint\", since=\"1.18.0\")]\n+#[stable(feature = \"eprint\", since = \"1.19.0\")]\n #[allow_internal_unstable]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n@@ -162,7 +162,7 @@ macro_rules! eprint {\n ///\n /// Panics if writing to `io::stderr` fails.\n #[macro_export]\n-#[stable(feature = \"eprint\", since=\"1.18.0\")]\n+#[stable(feature = \"eprint\", since = \"1.19.0\")]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n     ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));"}, {"sha": "1e5368896af9100ff44819bb3f8d34c4ffc84920", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -657,7 +657,7 @@ impl PartialEq for Ipv4Addr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv4Addr> for IpAddr {\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n         match *self {\n@@ -667,7 +667,7 @@ impl PartialEq<Ipv4Addr> for IpAddr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv4Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n         match *other {\n@@ -694,7 +694,7 @@ impl PartialOrd for Ipv4Addr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv4Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n         match *self {\n@@ -704,7 +704,7 @@ impl PartialOrd<Ipv4Addr> for IpAddr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv4Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match *other {\n@@ -1200,7 +1200,7 @@ impl PartialEq for Ipv6Addr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv6Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n         match *other {\n@@ -1210,7 +1210,7 @@ impl PartialEq<IpAddr> for Ipv6Addr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv6Addr> for IpAddr {\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n         match *self {\n@@ -1237,7 +1237,7 @@ impl PartialOrd for Ipv6Addr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv6Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n         match *self {\n@@ -1247,7 +1247,7 @@ impl PartialOrd<Ipv6Addr> for IpAddr {\n     }\n }\n \n-#[stable(feature = \"ip_cmp\", since = \"1.15.0\")]\n+#[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv6Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n         match *other {\n@@ -1302,7 +1302,7 @@ impl From<[u8; 16]> for Ipv6Addr {\n     }\n }\n \n-#[stable(feature = \"ipv6_from_segments\", since = \"1.15.0\")]\n+#[stable(feature = \"ipv6_from_segments\", since = \"1.16.0\")]\n impl From<[u16; 8]> for Ipv6Addr {\n     fn from(segments: [u16; 8]) -> Ipv6Addr {\n         let [a, b, c, d, e, f, g, h] = segments;"}, {"sha": "e7d8c3007f6927da8c5481ae08bea7d6bc647e92", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -1341,14 +1341,14 @@ impl<'a> From<&'a Path> for Box<Path> {\n     }\n }\n \n-#[stable(feature = \"path_buf_from_box\", since = \"1.17.0\")]\n+#[stable(feature = \"path_buf_from_box\", since = \"1.18.0\")]\n impl<'a> From<Box<Path>> for PathBuf {\n     fn from(boxed: Box<Path>) -> PathBuf {\n         boxed.into_path_buf()\n     }\n }\n \n-#[stable(feature = \"box_from_path_buf\", since = \"1.17.0\")]\n+#[stable(feature = \"box_from_path_buf\", since = \"1.18.0\")]\n impl Into<Box<Path>> for PathBuf {\n     fn into(self) -> Box<Path> {\n         self.into_boxed_path()\n@@ -1424,7 +1424,7 @@ impl Borrow<Path> for PathBuf {\n     }\n }\n \n-#[stable(feature = \"default_for_pathbuf\", since = \"1.16.0\")]\n+#[stable(feature = \"default_for_pathbuf\", since = \"1.17.0\")]\n impl Default for PathBuf {\n     fn default() -> Self {\n         PathBuf::new()"}, {"sha": "c120a3045e4bbc72686a199ccac878759080cd74", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -461,7 +461,7 @@ impl fmt::Debug for Condvar {\n     }\n }\n \n-#[stable(feature = \"condvar_default\", since = \"1.9.0\")]\n+#[stable(feature = \"condvar_default\", since = \"1.10.0\")]\n impl Default for Condvar {\n     /// Creates a `Condvar` which is ready to be waited on and notified.\n     fn default() -> Condvar {"}, {"sha": "f7fb83aa3b9c53b2c020b1c54c48293a068c1583", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -921,7 +921,7 @@ impl<T> Drop for Sender<T> {\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+#[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Sender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Sender {{ .. }}\")\n@@ -1051,7 +1051,7 @@ impl<T> Drop for SyncSender<T> {\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+#[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for SyncSender<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"SyncSender {{ .. }}\")\n@@ -1517,7 +1517,7 @@ impl<T> Drop for Receiver<T> {\n     }\n }\n \n-#[stable(feature = \"mpsc_debug\", since = \"1.7.0\")]\n+#[stable(feature = \"mpsc_debug\", since = \"1.8.0\")]\n impl<T> fmt::Debug for Receiver<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"Receiver {{ .. }}\")\n@@ -1644,7 +1644,7 @@ impl error::Error for TryRecvError {\n     }\n }\n \n-#[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.14.0\")]\n+#[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.15.0\")]\n impl fmt::Display for RecvTimeoutError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n@@ -1658,7 +1658,7 @@ impl fmt::Display for RecvTimeoutError {\n     }\n }\n \n-#[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.14.0\")]\n+#[stable(feature = \"mpsc_recv_timeout_error\", since = \"1.15.0\")]\n impl error::Error for RecvTimeoutError {\n     fn description(&self) -> &str {\n         match *self {"}, {"sha": "9a242a96d46e3cf36307dc475ec701b2c5191ea8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -153,7 +153,7 @@ pub struct MutexGuard<'a, T: ?Sized + 'a> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, T: ?Sized> !Send for MutexGuard<'a, T> { }\n-#[stable(feature = \"mutexguard\", since = \"1.18.0\")]\n+#[stable(feature = \"mutexguard\", since = \"1.19.0\")]\n unsafe impl<'a, T: ?Sized + Sync> Sync for MutexGuard<'a, T> { }\n \n impl<T> Mutex<T> {\n@@ -372,7 +372,7 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n     }\n }\n \n-#[stable(feature = \"mutex_default\", since = \"1.9.0\")]\n+#[stable(feature = \"mutex_default\", since = \"1.10.0\")]\n impl<T: ?Sized + Default> Default for Mutex<T> {\n     /// Creates a `Mutex<T>`, with the `Default` value for T.\n     fn default() -> Mutex<T> {"}, {"sha": "95bc8d3093286cd57a511f392175e5c1bcf5a1d0", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -330,7 +330,7 @@ impl<T: ?Sized + fmt::Debug> fmt::Debug for RwLock<T> {\n     }\n }\n \n-#[stable(feature = \"rw_lock_default\", since = \"1.9.0\")]\n+#[stable(feature = \"rw_lock_default\", since = \"1.10.0\")]\n impl<T: Default> Default for RwLock<T> {\n     /// Creates a new `RwLock<T>`, with the `Default` value for T.\n     fn default() -> RwLock<T> {"}, {"sha": "d06a4807ac261a352d4ad8b812a6121f0879cffb", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f703e4304c1c9b15c616b7a08bac581af5ab430/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=2f703e4304c1c9b15c616b7a08bac581af5ab430", "patch": "@@ -410,7 +410,7 @@ declare_features! (\n     (accepted, question_mark, \"1.13.0\", Some(31436)),\n     // Allows `..` in tuple (struct) patterns\n     (accepted, dotdot_in_tuple_patterns, \"1.14.0\", Some(33627)),\n-    (accepted, item_like_imports, \"1.14.0\", Some(35120)),\n+    (accepted, item_like_imports, \"1.15.0\", Some(35120)),\n     // Allows using `Self` and associated types in struct expressions and patterns.\n     (accepted, more_struct_aliases, \"1.16.0\", Some(37544)),\n     // elide `'static` lifetimes in `static`s and `const`s"}]}