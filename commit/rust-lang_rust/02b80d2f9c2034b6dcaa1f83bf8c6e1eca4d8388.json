{"sha": "02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "node_id": "C_kwDOAAsO6NoAKDAyYjgwZDJmOWMyMDM0YjZkY2FhMWY4M2JmOGM2ZTFlY2E0ZDgzODg", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-24T19:10:56Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-25T21:28:22Z"}, "message": "Don't normalize obligations in WF goal for the new solver", "tree": {"sha": "f0fe2974a7adc330e18083d1ba74e21d080e9ae9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0fe2974a7adc330e18083d1ba74e21d080e9ae9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "html_url": "https://github.com/rust-lang/rust/commit/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe", "html_url": "https://github.com/rust-lang/rust/commit/b3f0085376fbd0d1d798eefac1fa2bfdc0f3cdbe"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "6298d1e366bc62728c1679aabb7b984aa8eb75dd", "filename": "Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "patch": "@@ -351,7 +351,7 @@ dependencies = [\n  \"cargo-test-macro\",\n  \"cargo-test-support\",\n  \"cargo-util\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"crates-io\",\n  \"curl\",\n  \"curl-sys\",\n@@ -655,9 +655,9 @@ dependencies = [\n \n [[package]]\n name = \"clap\"\n-version = \"4.1.3\"\n+version = \"4.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d8d93d855ce6a0aa87b8473ef9169482f40abaa2e9e0993024c35c902cbd5920\"\n+checksum = \"f13b9c79b5d1dd500d20ef541215a6423c75829ef43117e1b4d17fd8af0b5d76\"\n dependencies = [\n  \"bitflags\",\n  \"clap_derive 4.1.0\",\n@@ -675,7 +675,7 @@ version = \"4.0.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"10861370d2ba66b0f5989f83ebf35db6421713fd92351790e7fdd6c36774c56b\"\n dependencies = [\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n ]\n \n [[package]]\n@@ -2294,7 +2294,7 @@ name = \"jsondoclint\"\n version = \"0.1.0\"\n dependencies = [\n  \"anyhow\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"fs-err\",\n  \"rustdoc-json-types\",\n  \"serde\",\n@@ -2557,7 +2557,7 @@ dependencies = [\n  \"ammonia\",\n  \"anyhow\",\n  \"chrono\",\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"clap_complete\",\n  \"elasticlunr-rs\",\n  \"env_logger 0.10.0\",\n@@ -3528,7 +3528,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 4.1.3\",\n+ \"clap 4.1.4\",\n  \"env_logger 0.7.1\",\n  \"mdbook\",\n ]"}, {"sha": "f44648c95d742530298274dc3467dc6645e127e6", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "patch": "@@ -20,7 +20,6 @@\n use std::mem;\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::CRATE_HIR_ID;\n use rustc_infer::infer::canonical::{Canonical, CanonicalVarKind, CanonicalVarValues};\n use rustc_infer::infer::canonical::{OriginalQueryValues, QueryRegionConstraints, QueryResponse};\n use rustc_infer::infer::{InferCtxt, InferOk, TyCtxtInferExt};\n@@ -380,13 +379,10 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n         goal: Goal<'tcx, ty::GenericArg<'tcx>>,\n     ) -> QueryResult<'tcx> {\n         self.infcx.probe(|_| {\n-            match crate::traits::wf::obligations(\n+            match crate::traits::wf::unnormalized_obligations(\n                 self.infcx,\n                 goal.param_env,\n-                CRATE_HIR_ID, // FIXME body id\n-                0,\n                 goal.predicate,\n-                DUMMY_SP,\n             ) {\n                 Some(obligations) => self.evaluate_all_and_make_canonical_response(\n                     obligations.into_iter().map(|o| o.into()).collect(),"}, {"sha": "767e31ddf781a9666bde067a1162e10ada3f478a", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=02b80d2f9c2034b6dcaa1f83bf8c6e1eca4d8388", "patch": "@@ -4,8 +4,8 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitable};\n-use rustc_span::def_id::{DefId, LocalDefId};\n-use rustc_span::Span;\n+use rustc_span::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n+use rustc_span::{Span, DUMMY_SP};\n \n use std::iter;\n /// Returns the set of obligations needed to make `arg` well-formed.\n@@ -75,6 +75,34 @@ pub fn obligations<'tcx>(\n     Some(result)\n }\n \n+/// Compute the predicates that are required for a type to be well-formed.\n+///\n+/// This is only intended to be used in the new solver, since it does not\n+/// take into account recursion depth or proper error-reporting spans.\n+pub fn unnormalized_obligations<'tcx>(\n+    infcx: &InferCtxt<'tcx>,\n+    param_env: ty::ParamEnv<'tcx>,\n+    arg: GenericArg<'tcx>,\n+) -> Option<Vec<traits::PredicateObligation<'tcx>>> {\n+    if let ty::GenericArgKind::Lifetime(..) = arg.unpack() {\n+        return Some(vec![]);\n+    }\n+\n+    debug_assert_eq!(arg, infcx.resolve_vars_if_possible(arg));\n+\n+    let mut wf = WfPredicates {\n+        tcx: infcx.tcx,\n+        param_env,\n+        body_id: CRATE_DEF_ID,\n+        span: DUMMY_SP,\n+        out: vec![],\n+        recursion_depth: 0,\n+        item: None,\n+    };\n+    wf.compute(arg);\n+    Some(wf.out)\n+}\n+\n /// Returns the obligations that make this trait reference\n /// well-formed. For example, if there is a trait `Set` defined like\n /// `trait Set<K:Eq>`, then the trait reference `Foo: Set<Bar>` is WF"}]}