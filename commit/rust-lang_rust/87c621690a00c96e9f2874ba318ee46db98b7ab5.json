{"sha": "87c621690a00c96e9f2874ba318ee46db98b7ab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzYyMTY5MGEwMGM5NmU5ZjI4NzRiYTMxOGVlNDZkYjk4YjdhYjU=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-02T15:38:02Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2020-12-04T13:17:13Z"}, "message": "Update some associated-types ui test suites", "tree": {"sha": "8e9e9d4718e255b64782d25b094f6a77b47dc668", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e9e9d4718e255b64782d25b094f6a77b47dc668"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c621690a00c96e9f2874ba318ee46db98b7ab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c621690a00c96e9f2874ba318ee46db98b7ab5", "html_url": "https://github.com/rust-lang/rust/commit/87c621690a00c96e9f2874ba318ee46db98b7ab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c621690a00c96e9f2874ba318ee46db98b7ab5/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1e94cdcd509779163eff165bd346f7f40607542", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e94cdcd509779163eff165bd346f7f40607542", "html_url": "https://github.com/rust-lang/rust/commit/a1e94cdcd509779163eff165bd346f7f40607542"}], "stats": {"total": 37, "additions": 20, "deletions": 17}, "files": [{"sha": "bca69a976778275f67a5425f8ff976080e65848b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: <I as Foo<&isize>>::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "1e23dd8890b9c4bde2da09661b121554c9a2b198", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: I::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "989624bdd93e2dafe4d034f8b5fa7ff6024bcb92", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -1,8 +1,9 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n    |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "ed30d86cb5b40ee7a43dc6a462380a52ab7f93e2", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -9,14 +9,14 @@ pub trait Foo<T> {\n \n struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     field: I::A\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n enum SomeEnum<'b, I: for<'a> Foo<&'a isize>> {\n     TupleVariant(I::A),\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     StructVariant { field: I::A },\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     OkVariant(&'b usize),\n }\n \n@@ -33,7 +33,7 @@ struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n struct Why<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n     'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n     field: I::A,\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n pub fn main() {}"}, {"sha": "cadc3e9eab1c93646072cff314a392caabc0c30c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -1,4 +1,4 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:11:12\n    |\n LL |     field: I::A\n@@ -10,7 +10,7 @@ LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n LL |     field: <I as Foo<&'a isize>>::A\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:16:18\n    |\n LL |     TupleVariant(I::A),\n@@ -22,7 +22,7 @@ LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n LL |     TupleVariant(<I as Foo<&'c isize>>::A),\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:18:28\n    |\n LL |     StructVariant { field: I::A },\n@@ -36,7 +36,7 @@ LL |\n LL |     StructVariant { field: <I as Foo<&'c isize>>::A },\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:35:12\n    |\n LL |     field: I::A,\n@@ -51,3 +51,4 @@ LL |     field: <I as Foo<&'bb &'bb isize>>::A,\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "66d8613f184ac120906e7ff0cf66e05b5c42242c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: <I as Foo<&isize>>::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> <X as Banana<'_>>::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "0a1b29de19e38335dd11de6ec5395cd131103424", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: I::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> X::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "d457f9f8468b45f3eab18a0e4c2a8b699e345712", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/87c621690a00c96e9f2874ba318ee46db98b7ab5/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=87c621690a00c96e9f2874ba318ee46db98b7ab5", "patch": "@@ -1,14 +1,15 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n    |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n    |\n LL |     fn mango(&self) -> X::Assoc {\n    |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}]}