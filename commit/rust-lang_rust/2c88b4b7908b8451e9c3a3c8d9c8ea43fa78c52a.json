{"sha": "2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjODhiNGI3OTA4Yjg0NTFlOWMzYTNjOGQ5YzhlYTQzZmE3OGM1MmE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-02T02:20:03Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-05T04:53:35Z"}, "message": "Load macros from `extern crate`s in the `InvocationCollector` fold.", "tree": {"sha": "b7c62d2c3e128bab8e44ef602955a18f2b9580a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7c62d2c3e128bab8e44ef602955a18f2b9580a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a", "html_url": "https://github.com/rust-lang/rust/commit/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d986bbe674d4fd554342771e7c031b3d22f9a800", "url": "https://api.github.com/repos/rust-lang/rust/commits/d986bbe674d4fd554342771e7c031b3d22f9a800", "html_url": "https://github.com/rust-lang/rust/commit/d986bbe674d4fd554342771e7c031b3d22f9a800"}], "stats": {"total": 84, "additions": 22, "deletions": 62}, "files": [{"sha": "0986d32ff56acc54ec14c373748771d0eabe5e7e", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 62, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=2c88b4b7908b8451e9c3a3c8d9c8ea43fa78c52a", "patch": "@@ -25,8 +25,6 @@ use parse::token::{intern, keywords};\n use ptr::P;\n use tokenstream::TokenTree;\n use util::small_vector::SmallVector;\n-use visit;\n-use visit::Visitor;\n \n use std::collections::HashMap;\n use std::mem;\n@@ -35,8 +33,7 @@ use std::rc::Rc;\n \n macro_rules! expansions {\n     ($($kind:ident: $ty:ty [$($vec:ident, $ty_elt:ty)*], $kind_name:expr, .$make:ident,\n-            $(.$fold:ident)*  $(lift .$fold_elt:ident)*,\n-            $(.$visit:ident)* $(lift .$visit_elt:ident)*;)*) => {\n+            $(.$fold:ident)*  $(lift .$fold_elt:ident)*;)*) => {\n         #[derive(Copy, Clone)]\n         pub enum ExpansionKind { OptExpr, $( $kind, )*  }\n         pub enum Expansion { OptExpr(Option<P<ast::Expr>>), $( $kind($ty), )* }\n@@ -81,17 +78,6 @@ macro_rules! expansions {\n                     }, )*)*\n                 }\n             }\n-\n-            fn visit_with<V: Visitor>(&self, visitor: &mut V) {\n-                match *self {\n-                    Expansion::OptExpr(Some(ref expr)) => visitor.visit_expr(expr),\n-                    $($( Expansion::$kind(ref ast) => visitor.$visit(ast), )*)*\n-                    $($( Expansion::$kind(ref ast) => for ast in ast.as_slice() {\n-                        visitor.$visit_elt(ast);\n-                    }, )*)*\n-                    _ => {}\n-                }\n-            }\n         }\n \n         impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -109,17 +95,17 @@ macro_rules! expansions {\n }\n \n expansions! {\n-    Expr: P<ast::Expr> [], \"expression\", .make_expr, .fold_expr, .visit_expr;\n-    Pat: P<ast::Pat>   [], \"pattern\",    .make_pat,  .fold_pat,  .visit_pat;\n-    Ty: P<ast::Ty>     [], \"type\",       .make_ty,   .fold_ty,   .visit_ty;\n+    Expr: P<ast::Expr> [], \"expression\", .make_expr, .fold_expr;\n+    Pat: P<ast::Pat>   [], \"pattern\",    .make_pat,  .fold_pat;\n+    Ty: P<ast::Ty>     [], \"type\",       .make_ty,   .fold_ty;\n     Stmts: SmallVector<ast::Stmt> [SmallVector, ast::Stmt],\n-        \"statement\",  .make_stmts,       lift .fold_stmt,       lift .visit_stmt;\n+        \"statement\",  .make_stmts,       lift .fold_stmt;\n     Items: SmallVector<P<ast::Item>> [SmallVector, P<ast::Item>],\n-        \"item\",       .make_items,       lift .fold_item,       lift .visit_item;\n+        \"item\",       .make_items,       lift .fold_item;\n     TraitItems: SmallVector<ast::TraitItem> [SmallVector, ast::TraitItem],\n-        \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item;\n+        \"trait item\", .make_trait_items, lift .fold_trait_item;\n     ImplItems: SmallVector<ast::ImplItem> [SmallVector, ast::ImplItem],\n-        \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item;\n+        \"impl item\",  .make_impl_items,  lift .fold_impl_item;\n }\n \n impl ExpansionKind {\n@@ -228,50 +214,10 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             sess: self.cx.parse_sess,\n             features: self.cx.ecfg.features,\n         });\n-        self.load_macros(&expansion);\n         let mut collector = InvocationCollector { cx: self.cx, invocations: Vec::new() };\n         (expansion.fold_with(&mut collector), collector.invocations)\n     }\n \n-    fn load_macros(&mut self, node: &Expansion) {\n-        struct MacroLoadingVisitor<'a, 'b: 'a>{\n-            cx: &'a mut ExtCtxt<'b>,\n-            at_crate_root: bool,\n-        }\n-\n-        impl<'a, 'b> Visitor for MacroLoadingVisitor<'a, 'b> {\n-            fn visit_mac(&mut self, _: &ast::Mac) {}\n-            fn visit_item(&mut self, item: &ast::Item) {\n-                if let ast::ItemKind::ExternCrate(..) = item.node {\n-                    // We need to error on `#[macro_use] extern crate` when it isn't at the\n-                    // crate root, because `$crate` won't work properly.\n-                    for def in self.cx.loader.load_crate(item, self.at_crate_root) {\n-                        match def {\n-                            LoadedMacro::Def(def) => self.cx.insert_macro(def),\n-                            LoadedMacro::CustomDerive(name, ext) => {\n-                                self.cx.insert_custom_derive(&name, ext, item.span);\n-                            }\n-                        }\n-                    }\n-                } else {\n-                    let at_crate_root = ::std::mem::replace(&mut self.at_crate_root, false);\n-                    visit::walk_item(self, item);\n-                    self.at_crate_root = at_crate_root;\n-                }\n-            }\n-            fn visit_block(&mut self, block: &ast::Block) {\n-                let at_crate_root = ::std::mem::replace(&mut self.at_crate_root, false);\n-                visit::walk_block(self, block);\n-                self.at_crate_root = at_crate_root;\n-            }\n-        }\n-\n-        node.visit_with(&mut MacroLoadingVisitor {\n-            at_crate_root: self.cx.syntax_env.is_crate_root(),\n-            cx: self.cx,\n-        });\n-    }\n-\n     fn expand_invoc(&mut self, invoc: Invocation) -> Expansion {\n         match invoc.kind {\n             InvocationKind::Bang { .. } => self.expand_bang_invoc(invoc),\n@@ -645,6 +591,20 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                 self.cx.syntax_env.current_module = module;\n                 result\n             },\n+            ast::ItemKind::ExternCrate(..) => {\n+                // We need to error on `#[macro_use] extern crate` when it isn't at the\n+                // crate root, because `$crate` won't work properly.\n+                let is_crate_root = self.cx.syntax_env.is_crate_root();\n+                for def in self.cx.loader.load_crate(&*item, is_crate_root) {\n+                    match def {\n+                        LoadedMacro::Def(def) => self.cx.insert_macro(def),\n+                        LoadedMacro::CustomDerive(name, ext) => {\n+                            self.cx.insert_custom_derive(&name, ext, item.span);\n+                        }\n+                    }\n+                }\n+                SmallVector::one(item)\n+            },\n             _ => noop_fold_item(item, self),\n         }\n     }"}]}