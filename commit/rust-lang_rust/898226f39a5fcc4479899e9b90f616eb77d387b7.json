{"sha": "898226f39a5fcc4479899e9b90f616eb77d387b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ODIyNmYzOWE1ZmNjNDQ3OTg5OWU5YjkwZjYxNmViNzdkMzg3Yjc=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-08-06T20:53:51Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-08-08T02:41:15Z"}, "message": "extra: Remove all each_* methods in treemap\n\n.each_key(), .each_value() and the other methods are replaced by .iter()\nand .rev_iter(), and restrictions of those iterators.", "tree": {"sha": "e1bdd7b1827fbac3929ecd2c734fdf93cfcdfecd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1bdd7b1827fbac3929ecd2c734fdf93cfcdfecd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/898226f39a5fcc4479899e9b90f616eb77d387b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/898226f39a5fcc4479899e9b90f616eb77d387b7", "html_url": "https://github.com/rust-lang/rust/commit/898226f39a5fcc4479899e9b90f616eb77d387b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/898226f39a5fcc4479899e9b90f616eb77d387b7/comments", "author": null, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7afface3fffc09e8872569199ba902cf8a3170cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7afface3fffc09e8872569199ba902cf8a3170cb", "html_url": "https://github.com/rust-lang/rust/commit/7afface3fffc09e8872569199ba902cf8a3170cb"}], "stats": {"total": 45, "additions": 6, "deletions": 39}, "files": [{"sha": "4d898dfb2b4f082d6d8be4cee9562785b3e5db72", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 6, "deletions": 39, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/898226f39a5fcc4479899e9b90f616eb77d387b7/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/898226f39a5fcc4479899e9b90f616eb77d387b7/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=898226f39a5fcc4479899e9b90f616eb77d387b7", "patch": "@@ -134,36 +134,11 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     pub fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n-    /// Visit all keys in order\n-    pub fn each_key(&self, f: &fn(&K) -> bool) -> bool {\n-        self.iter().advance(|(k, _)| f(k))\n-    }\n-\n-    /// Visit all values in order\n-    pub fn each_value<'a>(&'a self, f: &fn(&'a V) -> bool) -> bool {\n-        self.iter().advance(|(_, v)| f(v))\n-    }\n-\n     /// Iterate over the map and mutate the contained values\n     pub fn mutate_values(&mut self, f: &fn(&K, &mut V) -> bool) -> bool {\n         mutate_values(&mut self.root, f)\n     }\n \n-    /// Visit all key-value pairs in reverse order\n-    pub fn each_reverse<'a>(&'a self, f: &fn(&'a K, &'a V) -> bool) -> bool {\n-        self.rev_iter().advance(|(k,v)| f(k, v))\n-    }\n-\n-    /// Visit all keys in reverse order\n-    pub fn each_key_reverse(&self, f: &fn(&K) -> bool) -> bool {\n-        self.each_reverse(|k, _| f(k))\n-    }\n-\n-    /// Visit all values in reverse order\n-    pub fn each_value_reverse(&self, f: &fn(&V) -> bool) -> bool {\n-        self.each_reverse(|_, v| f(v))\n-    }\n-\n     /// Get a lazy iterator over the key-value pairs in the map.\n     /// Requires that it be frozen (immutable).\n     pub fn iter<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n@@ -552,12 +527,6 @@ impl<T: TotalOrd> TreeSet<T> {\n         TreeSetIterator{iter: self.map.upper_bound_iter(v)}\n     }\n \n-    /// Visit all values in reverse order\n-    #[inline]\n-    pub fn each_reverse(&self, f: &fn(&T) -> bool) -> bool {\n-        self.map.each_key_reverse(f)\n-    }\n-\n     /// Visit the values (in-order) representing the difference\n     pub fn difference<'a>(&'a self, other: &'a TreeSet<T>) -> Difference<'a, T> {\n         Difference{a: Focus::new(self.iter()), b: Focus::new(other.iter())}\n@@ -1172,7 +1141,7 @@ mod test_treemap {\n     }\n \n     #[test]\n-    fn test_each_reverse() {\n+    fn test_rev_iter() {\n         let mut m = TreeMap::new();\n \n         assert!(m.insert(3, 6));\n@@ -1182,12 +1151,11 @@ mod test_treemap {\n         assert!(m.insert(1, 2));\n \n         let mut n = 4;\n-        do m.each_reverse |k, v| {\n+        for (k, v) in m.rev_iter() {\n             assert_eq!(*k, n);\n             assert_eq!(*v, n * 2);\n             n -= 1;\n-            true\n-        };\n+        }\n     }\n \n     #[test]\n@@ -1448,7 +1416,7 @@ mod test_set {\n     }\n \n     #[test]\n-    fn test_each_reverse() {\n+    fn test_rev_iter() {\n         let mut m = TreeSet::new();\n \n         assert!(m.insert(3));\n@@ -1458,11 +1426,10 @@ mod test_set {\n         assert!(m.insert(1));\n \n         let mut n = 4;\n-        do m.each_reverse |x| {\n+        for x in m.rev_iter() {\n             assert_eq!(*x, n);\n             n -= 1;\n-            true\n-        };\n+        }\n     }\n \n     fn check(a: &[int], b: &[int], expected: &[int],"}]}