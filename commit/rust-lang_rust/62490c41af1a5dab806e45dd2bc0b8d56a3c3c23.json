{"sha": "62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDkwYzQxYWYxYTVkYWI4MDZlNDVkZDJiYzBiOGQ1NmEzYzNjMjM=", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T03:34:37Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2021-03-17T15:51:49Z"}, "message": "extract conditions into modules", "tree": {"sha": "d11c52e4a9c34a6f4cd5e00c824f2a42c63c1983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11c52e4a9c34a6f4cd5e00c824f2a42c63c1983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "html_url": "https://github.com/rust-lang/rust/commit/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d9b45df0fa6bc04d864aa4a67fdb631b9bf0a99", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9b45df0fa6bc04d864aa4a67fdb631b9bf0a99", "html_url": "https://github.com/rust-lang/rust/commit/3d9b45df0fa6bc04d864aa4a67fdb631b9bf0a99"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "edb6649b87b4da3dec83356492fa497947784304", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "patch": "@@ -4,14 +4,20 @@ use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty;\n+use rustc_span::symbol::{sym, Symbol};\n use std::iter;\n \n use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n \n /// Checks for the `CLONE_ON_COPY` lint.\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    if !(args.len() == 1 && method_name == sym::clone) {\n+        return;\n+    }\n+    let arg = &args[0];\n+    let arg_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n     let ty = cx.typeck_results().expr_ty(expr);\n     if let ty::Ref(_, inner, _) = arg_ty.kind() {\n         if let ty::Ref(_, innermost, _) = inner.kind() {"}, {"sha": "6417bc81304739e9c72ac75a9fb1c9d4045e097f", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "patch": "@@ -6,11 +6,15 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::CLONE_ON_REF_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    if !(args.len() == 1 && method_name == sym::clone) {\n+        return;\n+    }\n+    let arg = &args[0];\n     let obj_ty = cx.typeck_results().expr_ty(arg).peel_refs();\n \n     if let ty::Adt(_, subst) = obj_ty.kind() {"}, {"sha": "950ec62c9fe4f107199ae675cde17a98f7dfaa63", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "patch": "@@ -1,4 +1,3 @@\n-use super::INEFFICIENT_TO_STRING;\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::{is_type_diagnostic_item, walk_ptrs_ty_depth};\n@@ -8,14 +7,18 @@ use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::sym;\n+use rustc_span::symbol::{sym, Symbol};\n+\n+use super::INEFFICIENT_TO_STRING;\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n-pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'tcx>) {\n+pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n     if_chain! {\n+        if args.len() == 1 && method_name == sym!(to_string);\n         if let Some(to_string_meth_did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);\n         if let Some(substs) = cx.typeck_results().node_substs_opt(expr.hir_id);\n+        let arg_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n         let self_ty = substs.type_at(0);\n         let (deref_self_ty, deref_count) = walk_ptrs_ty_depth(self_ty);\n         if deref_count >= 1;\n@@ -32,7 +35,7 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr\n                         self_ty, deref_self_ty\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let arg_snippet = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n+                    let arg_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"try dereferencing the receiver\","}, {"sha": "bbf7f1d312b912dcf6e6dccbfe5e28d10e2d9f67", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62490c41af1a5dab806e45dd2bc0b8d56a3c3c23/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=62490c41af1a5dab806e45dd2bc0b8d56a3c3c23", "patch": "@@ -41,6 +41,7 @@ mod option_map_or_none;\n mod option_map_unwrap_or;\n mod or_fun_call;\n mod search_is_some;\n+mod single_char_add_str;\n mod single_char_insert_string;\n mod single_char_pattern;\n mod single_char_push_string;\n@@ -1785,23 +1786,12 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args, _) => {\n                 or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n                 expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n+                clone_on_copy::check(cx, expr, method_call.ident.name, args);\n+                clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n \n                 let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-                if args.len() == 1 && method_call.ident.name == sym::clone {\n-                    clone_on_copy::check(cx, expr, &args[0], self_ty);\n-                    clone_on_ref_ptr::check(cx, expr, &args[0]);\n-                }\n-                if args.len() == 1 && method_call.ident.name == sym!(to_string) {\n-                    inefficient_to_string::check(cx, expr, &args[0], self_ty);\n-                }\n-\n-                if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n-                        single_char_push_string::check(cx, expr, args);\n-                    } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n-                        single_char_insert_string::check(cx, expr, args);\n-                    }\n-                }\n+                inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n+                single_char_add_str::check(cx, expr, args);\n \n                 match self_ty.kind() {\n                     ty::Ref(_, ty, _) if *ty.kind() == ty::Str => {"}]}