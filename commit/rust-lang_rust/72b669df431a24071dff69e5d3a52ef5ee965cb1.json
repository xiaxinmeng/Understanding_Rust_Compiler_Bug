{"sha": "72b669df431a24071dff69e5d3a52ef5ee965cb1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYjY2OWRmNDMxYTI0MDcxZGZmNjllNWQzYTUyZWY1ZWU5NjVjYjE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T06:52:54Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T19:35:17Z"}, "message": "fuzzer: Remove structural records", "tree": {"sha": "a510981ba85ec10091c371ba017bc9115feafe0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a510981ba85ec10091c371ba017bc9115feafe0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72b669df431a24071dff69e5d3a52ef5ee965cb1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72b669df431a24071dff69e5d3a52ef5ee965cb1", "html_url": "https://github.com/rust-lang/rust/commit/72b669df431a24071dff69e5d3a52ef5ee965cb1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72b669df431a24071dff69e5d3a52ef5ee965cb1/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e910e601a6857143d90dd23543577f1c318fdf54", "url": "https://api.github.com/repos/rust-lang/rust/commits/e910e601a6857143d90dd23543577f1c318fdf54", "html_url": "https://github.com/rust-lang/rust/commit/e910e601a6857143d90dd23543577f1c318fdf54"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "569a8df1a5168bb46a52e66f8e2119a4b45ce12b", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72b669df431a24071dff69e5d3a52ef5ee965cb1/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/72b669df431a24071dff69e5d3a52ef5ee965cb1/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=72b669df431a24071dff69e5d3a52ef5ee965cb1", "patch": "@@ -41,7 +41,7 @@ use syntax::print::pprust;\n use syntax::diagnostic;\n \n enum test_mode { tm_converge, tm_run, }\n-type context = { mode: test_mode }; // + rng\n+struct Context { mode: test_mode } // + rng\n \n impl test_mode : cmp::Eq {\n     pure fn eq(&self, other: &test_mode) -> bool {\n@@ -166,9 +166,9 @@ fn stash_ty_if(c: fn@(@ast::Ty, test_mode)->bool,\n     } else {/* now my indices are wrong :( */ }\n }\n \n-type stolen_stuff = {exprs: ~[ast::expr], tys: ~[ast::Ty]};\n+struct StolenStuff {exprs: ~[ast::expr], tys: ~[ast::Ty]}\n \n-fn steal(crate: ast::crate, tm: test_mode) -> stolen_stuff {\n+fn steal(crate: ast::crate, tm: test_mode) -> StolenStuff {\n     let exprs = @mut ~[];\n     let tys = @mut ~[];\n     let v = visit::mk_simple_visitor(@visit::SimpleVisitor {\n@@ -177,7 +177,7 @@ fn steal(crate: ast::crate, tm: test_mode) -> stolen_stuff {\n         .. *visit::default_simple_visitor()\n     });\n     visit::visit_crate(crate, (), v);\n-    {exprs: *exprs, tys: *tys}\n+    StolenStuff {exprs: *exprs, tys: *tys}\n }\n \n \n@@ -264,7 +264,7 @@ fn as_str(f: fn@(+x: io::Writer)) -> ~str {\n }\n \n fn check_variants_of_ast(crate: ast::crate, codemap: @codemap::CodeMap,\n-                         filename: &Path, cx: context) {\n+                         filename: &Path, cx: Context) {\n     let stolen = steal(crate, cx.mode);\n     let extra_exprs = do common_exprs().filtered |a| {\n         safe_to_use_expr(*a, cx.mode)\n@@ -284,7 +284,7 @@ fn check_variants_T<T: Copy>(\n   things: ~[T],\n   stringifier: fn@(@T, @syntax::parse::token::ident_interner) -> ~str,\n   replacer: fn@(ast::crate, uint, T, test_mode) -> ast::crate,\n-  cx: context\n+  cx: Context\n   ) {\n     error!(\"%s contains %u %s objects\", filename.to_str(),\n            things.len(), thing_label);\n@@ -594,7 +594,7 @@ fn check_convergence(files: &[Path]) {\n     }\n }\n \n-fn check_variants(files: &[Path], cx: context) {\n+fn check_variants(files: &[Path], cx: Context) {\n     for files.each |file| {\n         if cx.mode == tm_converge &&\n             file_might_not_converge(file) {\n@@ -652,9 +652,9 @@ fn main() {\n     error!(\"== check_convergence ==\");\n     check_convergence(files);\n     error!(\"== check_variants: converge ==\");\n-    check_variants(files, { mode: tm_converge });\n+    check_variants(files, Context { mode: tm_converge });\n     error!(\"== check_variants: run ==\");\n-    check_variants(files, { mode: tm_run });\n+    check_variants(files, Context { mode: tm_run });\n \n     error!(\"Fuzzer done\");\n }"}]}