{"sha": "fa0005f2d5a9081597867b383c9b2d0b21569b88", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMDAwNWYyZDVhOTA4MTU5Nzg2N2IzODNjOWIyZDBiMjE1NjliODg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-11-29T23:27:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-29T23:27:00Z"}, "message": "Auto merge of #37863 - mikhail-m1:mut_error, r=nikomatsakis\n\nadd hint to fix error for immutable ref in arg\n\nfix  #36412 part of #35233\nr? @jonathandturner", "tree": {"sha": "7b15f4a632de3064f87803ce6244b1ffaa15c2de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b15f4a632de3064f87803ce6244b1ffaa15c2de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa0005f2d5a9081597867b383c9b2d0b21569b88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa0005f2d5a9081597867b383c9b2d0b21569b88", "html_url": "https://github.com/rust-lang/rust/commit/fa0005f2d5a9081597867b383c9b2d0b21569b88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa0005f2d5a9081597867b383c9b2d0b21569b88/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b30022a1d32ebbd41f6623ab6fe7c62d489548e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b30022a1d32ebbd41f6623ab6fe7c62d489548e1", "html_url": "https://github.com/rust-lang/rust/commit/b30022a1d32ebbd41f6623ab6fe7c62d489548e1"}, {"sha": "67a24c2e184b8c7f515d52225b8f67f94abe6ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/67a24c2e184b8c7f515d52225b8f67f94abe6ff2", "html_url": "https://github.com/rust-lang/rust/commit/67a24c2e184b8c7f515d52225b8f67f94abe6ff2"}], "stats": {"total": 388, "additions": 342, "deletions": 46}, "files": [{"sha": "ecf5c3ef176e566f59003cbf943eaa0cdd98cca5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 83, "deletions": 46, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -24,7 +24,7 @@ use self::InteriorKind::*;\n \n use rustc::dep_graph::DepNode;\n use rustc::hir::map as hir_map;\n-use rustc::hir::map::blocks::FnParts;\n+use rustc::hir::map::blocks::{FnParts, FnLikeNode};\n use rustc::cfg;\n use rustc::middle::dataflow::DataFlowContext;\n use rustc::middle::dataflow::BitwiseOperator;\n@@ -978,51 +978,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n     pub fn note_and_explain_bckerr(&self, db: &mut DiagnosticBuilder, err: BckError<'tcx>,\n         error_span: Span) {\n-        let code = err.code;\n-        match code {\n-            err_mutbl => {\n-                match err.cmt.note {\n-                    mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n-                        // If this is an `Fn` closure, it simply can't mutate upvars.\n-                        // If it's an `FnMut` closure, the original variable was declared immutable.\n-                        // We need to determine which is the case here.\n-                        let kind = match err.cmt.upvar().unwrap().cat {\n-                            Categorization::Upvar(mc::Upvar { kind, .. }) => kind,\n-                            _ => bug!()\n-                        };\n-                        if kind == ty::ClosureKind::Fn {\n-                            db.span_help(\n-                                self.tcx.map.span(upvar_id.closure_expr_id),\n-                                \"consider changing this closure to take \\\n-                                 self by mutable reference\");\n-                        }\n-                    }\n-                    _ => {\n-                        if let Categorization::Local(local_id) = err.cmt.cat {\n-                            let span = self.tcx.map.span(local_id);\n-                            if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n-                                if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n-                                    db.span_label(error_span, &format!(\"cannot reborrow mutably\"));\n-                                    db.span_label(error_span, &format!(\"try removing `&mut` here\"));\n-                                } else {\n-                                    if snippet.starts_with(\"ref \") {\n-                                        db.span_label(span,\n-                                            &format!(\"use `{}` here to make mutable\",\n-                                                snippet.replace(\"ref \", \"ref mut \")));\n-                                    } else if snippet != \"self\" {\n-                                        db.span_label(span,\n-                                            &format!(\"use `mut {}` here to make mutable\", snippet));\n-                                    }\n-                                    db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n-                                }\n-                            } else {\n-                                db.span_label(error_span, &format!(\"cannot borrow mutably\"));\n-                            }\n-                        }\n-                    }\n-                }\n-            }\n-\n+        match err.code {\n+            err_mutbl => self.note_and_explain_mutbl_error(db, &err, &error_span),\n             err_out_of_scope(super_scope, sub_scope, cause) => {\n                 let (value_kind, value_msg) = match err.cmt.cat {\n                     mc::Categorization::Rvalue(_) =>\n@@ -1143,6 +1100,86 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn note_and_explain_mutbl_error(&self, db: &mut DiagnosticBuilder, err: &BckError<'tcx>,\n+                                    error_span: &Span) {\n+        match err.cmt.note {\n+            mc::NoteClosureEnv(upvar_id) | mc::NoteUpvarRef(upvar_id) => {\n+                // If this is an `Fn` closure, it simply can't mutate upvars.\n+                // If it's an `FnMut` closure, the original variable was declared immutable.\n+                // We need to determine which is the case here.\n+                let kind = match err.cmt.upvar().unwrap().cat {\n+                    Categorization::Upvar(mc::Upvar { kind, .. }) => kind,\n+                    _ => bug!()\n+                };\n+                if kind == ty::ClosureKind::Fn {\n+                    db.span_help(self.tcx.map.span(upvar_id.closure_expr_id),\n+                                 \"consider changing this closure to take \\\n+                                 self by mutable reference\");\n+                }\n+            }\n+            _ => {\n+                if let Categorization::Deref(ref inner_cmt, ..) = err.cmt.cat {\n+                    if let Categorization::Local(local_id) = inner_cmt.cat {\n+                        let parent = self.tcx.map.get_parent_node(local_id);\n+                        let opt_fn_decl = FnLikeNode::from_node(self.tcx.map.get(parent))\n+                            .map(|fn_like| fn_like.decl());\n+\n+                        if let Some(fn_decl) = opt_fn_decl {\n+                            if let Some(ref arg) = fn_decl.inputs.iter()\n+                                .find(|ref arg| arg.pat.id == local_id) {\n+                                if let hir::TyRptr(\n+                                    opt_lifetime,\n+                                    hir::MutTy{mutbl: hir::Mutability::MutImmutable, ref ty}) =\n+                                    arg.ty.node {\n+                                    if let Some(lifetime) = opt_lifetime {\n+                                        if let Ok(snippet) = self.tcx.sess.codemap()\n+                                            .span_to_snippet(ty.span) {\n+                                            if let Ok(lifetime_snippet) = self.tcx.sess.codemap()\n+                                                .span_to_snippet(lifetime.span) {\n+                                                    db.span_label(arg.ty.span,\n+                                                                  &format!(\"use `&{} mut {}` \\\n+                                                                            here to make mutable\",\n+                                                                            lifetime_snippet,\n+                                                                            snippet));\n+                                            }\n+                                        }\n+                                    }\n+                                    else if let Ok(snippet) = self.tcx.sess.codemap()\n+                                        .span_to_snippet(arg.ty.span) {\n+                                        if snippet.starts_with(\"&\") {\n+                                            db.span_label(arg.ty.span,\n+                                                          &format!(\"use `{}` here to make mutable\",\n+                                                                   snippet.replace(\"&\", \"&mut \")));\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                } else if let Categorization::Local(local_id) = err.cmt.cat {\n+                    let span = self.tcx.map.span(local_id);\n+                    if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(span) {\n+                        if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n+                            db.span_label(*error_span, &format!(\"cannot reborrow mutably\"));\n+                            db.span_label(*error_span, &format!(\"try removing `&mut` here\"));\n+                        } else {\n+                            if snippet.starts_with(\"ref \") {\n+                                db.span_label(span, &format!(\"use `{}` here to make mutable\",\n+                                                             snippet.replace(\"ref \", \"ref mut \")));\n+                            } else if snippet != \"self\" {\n+                                db.span_label(span,\n+                                              &format!(\"use `mut {}` here to make mutable\",\n+                                                       snippet));\n+                            }\n+                            db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n+                        }\n+                    } else {\n+                        db.span_label(*error_span, &format!(\"cannot borrow mutably\"));\n+                    }\n+                }\n+            }\n+        }\n+    }\n     pub fn append_loan_path_to_string(&self,\n                                       loan_path: &LoanPath<'tcx>,\n                                       out: &mut String) {"}, {"sha": "764d05be879b8be674f3e9c3adba83e924c051a8", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-borrow-overloaded-auto-deref-mut.rs"}, {"sha": "1109351bff8394e2393388777f27304478173e67", "filename": "src/test/ui/span/borrowck-borrow-overloaded-auto-deref-mut.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-auto-deref-mut.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,86 @@\n+error: cannot borrow immutable argument `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:63:24\n+   |\n+62 | fn deref_mut_field1(x: Own<Point>) {\n+   |                     - use `mut x` here to make mutable\n+63 |     let __isize = &mut x.y; //~ ERROR cannot borrow\n+   |                        ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:75:10\n+   |\n+74 | fn deref_extend_mut_field1(x: &Own<Point>) -> &mut isize {\n+   |                               ----------- use `&mut Own<Point>` here to make mutable\n+75 |     &mut x.y //~ ERROR cannot borrow\n+   |          ^\n+\n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:88:19\n+   |\n+87 |     let _x = &mut x.x;\n+   |                   - first mutable borrow occurs here\n+88 |     let _y = &mut x.y; //~ ERROR cannot borrow\n+   |                   ^ second mutable borrow occurs here\n+89 | }\n+   | - first borrow ends here\n+\n+error: cannot borrow immutable argument `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:98:5\n+   |\n+97 | fn assign_field1<'a>(x: Own<Point>) {\n+   |                      - use `mut x` here to make mutable\n+98 |     x.y = 3; //~ ERROR cannot borrow\n+   |     ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:102:5\n+    |\n+101 | fn assign_field2<'a>(x: &'a Own<Point>) {\n+    |                         -------------- use `&'a mut Own<Point>` here to make mutable\n+102 |     x.y = 3; //~ ERROR cannot borrow\n+    |     ^\n+\n+error[E0499]: cannot borrow `*x` as mutable more than once at a time\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:111:5\n+    |\n+110 |     let _p: &mut Point = &mut **x;\n+    |                                -- first mutable borrow occurs here\n+111 |     x.y = 3; //~ ERROR cannot borrow\n+    |     ^ second mutable borrow occurs here\n+112 | }\n+    | - first borrow ends here\n+\n+error: cannot borrow immutable argument `x` as mutable\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:119:5\n+    |\n+118 | fn deref_mut_method1(x: Own<Point>) {\n+    |                      - use `mut x` here to make mutable\n+119 |     x.set(0, 0); //~ ERROR cannot borrow\n+    |     ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:131:5\n+    |\n+130 | fn deref_extend_mut_method1(x: &Own<Point>) -> &mut isize {\n+    |                                ----------- use `&mut Own<Point>` here to make mutable\n+131 |     x.y_mut() //~ ERROR cannot borrow\n+    |     ^\n+\n+error: cannot borrow immutable argument `x` as mutable\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:139:6\n+    |\n+138 | fn assign_method1<'a>(x: Own<Point>) {\n+    |                       - use `mut x` here to make mutable\n+139 |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+    |      ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+   --> $DIR/borrowck-borrow-overloaded-auto-deref-mut.rs:143:6\n+    |\n+142 | fn assign_method2<'a>(x: &'a Own<Point>) {\n+    |                          -------------- use `&'a mut Own<Point>` here to make mutable\n+143 |     *x.y_mut() = 3; //~ ERROR cannot borrow\n+    |      ^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "34b926aab1fa0d88a778a543c5a85db42360551d", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-borrow-overloaded-deref-mut.rs"}, {"sha": "a5b70459161415f7d5b01061e6a8fb99f0e3a947", "filename": "src/test/ui/span/borrowck-borrow-overloaded-deref-mut.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-borrow-overloaded-deref-mut.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,34 @@\n+error: cannot borrow immutable argument `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:39:25\n+   |\n+38 | fn deref_mut1(x: Own<isize>) {\n+   |               - use `mut x` here to make mutable\n+39 |     let __isize = &mut *x; //~ ERROR cannot borrow\n+   |                         ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:51:11\n+   |\n+50 | fn deref_extend_mut1<'a>(x: &'a Own<isize>) -> &'a mut isize {\n+   |                             -------------- use `&'a mut Own<isize>` here to make mutable\n+51 |     &mut **x //~ ERROR cannot borrow\n+   |           ^^\n+\n+error: cannot borrow immutable argument `x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:59:6\n+   |\n+58 | fn assign1<'a>(x: Own<isize>) {\n+   |                - use `mut x` here to make mutable\n+59 |     *x = 3; //~ ERROR cannot borrow\n+   |      ^ cannot borrow mutably\n+\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-borrow-overloaded-deref-mut.rs:63:6\n+   |\n+62 | fn assign2<'a>(x: &'a Own<isize>) {\n+   |                   -------------- use `&'a mut Own<isize>` here to make mutable\n+63 |     **x = 3; //~ ERROR cannot borrow\n+   |      ^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "ba1ae64ec330af6cda67d77fec86f81891ee1524", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-call-is-borrow-issue-12224.rs"}, {"sha": "16bb60013674fded9dff9fa8c615eeaec9f2b1e7", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,43 @@\n+error[E0499]: cannot borrow `f` as mutable more than once at a time\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:23:16\n+   |\n+23 |     f(Box::new(|| {\n+   |     -          ^^ second mutable borrow occurs here\n+   |     |\n+   |     first mutable borrow occurs here\n+24 |     //~^ ERROR: cannot borrow `f` as mutable more than once\n+25 |         f((Box::new(|| {})))\n+   |         - borrow occurs due to use of `f` in closure\n+26 |     }));\n+   |       - first borrow ends here\n+\n+error: cannot borrow immutable borrowed content `*f` as mutable\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:36:5\n+   |\n+35 | fn test2<F>(f: &F) where F: FnMut() {\n+   |                -- use `&mut F` here to make mutable\n+36 |     (*f)(); //~ ERROR: cannot borrow immutable borrowed content `*f` as mutable\n+   |     ^^^^\n+\n+error: cannot borrow immutable `Box` content `*f.f` as mutable\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:44:5\n+   |\n+44 |     f.f.call_mut(()) //~ ERROR: cannot borrow immutable `Box` content `*f.f` as mutable\n+   |     ^^^\n+\n+error[E0504]: cannot move `f` into closure because it is borrowed\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+   |\n+62 |     f(Box::new(|a| {\n+   |     - borrow of `f` occurs here\n+63 |         foo(f);\n+   |             ^ move into closure occurs here\n+\n+error[E0507]: cannot move out of captured outer variable in an `FnMut` closure\n+  --> $DIR/borrowck-call-is-borrow-issue-12224.rs:63:13\n+   |\n+63 |         foo(f);\n+   |             ^ cannot move out of captured outer variable in an `FnMut` closure\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "bc0b667e895d003928fa38c2693ec266f606d606", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-call-method-from-mut-aliasable.rs"}, {"sha": "a1af1ca7408a280a8545fabc3a931e366f44ae81", "filename": "src/test/ui/span/borrowck-call-method-from-mut-aliasable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-method-from-mut-aliasable.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,11 @@\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-call-method-from-mut-aliasable.rs:27:5\n+   |\n+25 | fn b(x: &Foo) {\n+   |         ---- use `&mut Foo` here to make mutable\n+26 |     x.f();\n+27 |     x.h(); //~ ERROR cannot borrow\n+   |     ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "7e29b2ee0fd4e76c326dd03684cb0e17e49a576a", "filename": "src/test/ui/span/borrowck-fn-in-const-b.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-fn-in-const-b.rs"}, {"sha": "41f549c708a29577fb5f6455adff14ebad554d49", "filename": "src/test/ui/span/borrowck-fn-in-const-b.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-fn-in-const-b.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,10 @@\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-fn-in-const-b.rs:17:9\n+   |\n+16 |     fn broken(x: &Vec<String>) {\n+   |                  ------------ use `&mut Vec<String>` here to make mutable\n+17 |         x.push(format!(\"this is broken\"));\n+   |         ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1bdc32b09750bd8162e6bbd1bf8af762b9b7c4c9", "filename": "src/test/ui/span/borrowck-object-mutability.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "previous_filename": "src/test/compile-fail/borrowck/borrowck-object-mutability.rs"}, {"sha": "32e4da18056ff58f2a7b8c0cb54791da9f5a5dbe", "filename": "src/test/ui/span/borrowck-object-mutability.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-object-mutability.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,17 @@\n+error: cannot borrow immutable borrowed content `*x` as mutable\n+  --> $DIR/borrowck-object-mutability.rs:19:5\n+   |\n+17 | fn borrowed_receiver(x: &Foo) {\n+   |                         ---- use `&mut Foo` here to make mutable\n+18 |     x.borrowed();\n+19 |     x.borrowed_mut(); //~ ERROR cannot borrow\n+   |     ^\n+\n+error: cannot borrow immutable `Box` content `*x` as mutable\n+  --> $DIR/borrowck-object-mutability.rs:29:5\n+   |\n+29 |     x.borrowed_mut(); //~ ERROR cannot borrow\n+   |     ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "296ee6ca10e0504e9a83f750210a1a0183e621c7", "filename": "src/test/ui/span/mut-arg-hint.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.rs?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait B {\n+    fn foo(mut a: &String) {\n+        a.push_str(\"bar\");\n+    }\n+}\n+\n+pub fn foo<'a>(mut a: &'a String) {\n+    a.push_str(\"foo\");\n+}\n+\n+struct A {}\n+\n+impl A {\n+    pub fn foo(mut a: &String) {\n+        a.push_str(\"foo\");\n+    }\n+}\n+\n+fn main() {\n+    foo(&\"a\".to_string());\n+    A::foo(&\"a\".to_string());\n+}"}, {"sha": "5e9a0b915031e0a8c23a238fe860fc1f55d7659c", "filename": "src/test/ui/span/mut-arg-hint.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fa0005f2d5a9081597867b383c9b2d0b21569b88/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmut-arg-hint.stderr?ref=fa0005f2d5a9081597867b383c9b2d0b21569b88", "patch": "@@ -0,0 +1,26 @@\n+error: cannot borrow immutable borrowed content `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:13:9\n+   |\n+12 |     fn foo(mut a: &String) {\n+   |                   ------- use `&mut String` here to make mutable\n+13 |         a.push_str(\"bar\");\n+   |         ^\n+\n+error: cannot borrow immutable borrowed content `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:18:5\n+   |\n+17 | pub fn foo<'a>(mut a: &'a String) {\n+   |                       ---------- use `&'a mut String` here to make mutable\n+18 |     a.push_str(\"foo\");\n+   |     ^\n+\n+error: cannot borrow immutable borrowed content `*a` as mutable\n+  --> $DIR/mut-arg-hint.rs:25:9\n+   |\n+24 |     pub fn foo(mut a: &String) {\n+   |                       ------- use `&mut String` here to make mutable\n+25 |         a.push_str(\"foo\");\n+   |         ^\n+\n+error: aborting due to 3 previous errors\n+"}]}