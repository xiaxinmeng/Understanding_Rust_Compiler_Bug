{"sha": "d7f75db90d99216c13000681ff2c4a887451c4b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Zjc1ZGI5MGQ5OTIxNmMxMzAwMDY4MWZmMmM0YTg4NzQ1MWM0YjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T18:04:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-31T18:04:40Z"}, "message": "Reorder", "tree": {"sha": "5e5a61ed573a41ed6cddddc1a676676d2d70180b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e5a61ed573a41ed6cddddc1a676676d2d70180b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7f75db90d99216c13000681ff2c4a887451c4b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f75db90d99216c13000681ff2c4a887451c4b2", "html_url": "https://github.com/rust-lang/rust/commit/d7f75db90d99216c13000681ff2c4a887451c4b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7f75db90d99216c13000681ff2c4a887451c4b2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "url": "https://api.github.com/repos/rust-lang/rust/commits/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79", "html_url": "https://github.com/rust-lang/rust/commit/14cb96ec0e6be3b99bfe4ea373c058dcbd2a4f79"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "ef1c0df0141aab6fa4150874d3745d3a886b5019", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7f75db90d99216c13000681ff2c4a887451c4b2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f75db90d99216c13000681ff2c4a887451c4b2/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=d7f75db90d99216c13000681ff2c4a887451c4b2", "patch": "@@ -786,7 +786,6 @@ impl ExprCollector<'_> {\n             ast::Pat::PlaceholderPat(_) => Pat::Wild,\n             ast::Pat::RecordPat(p) => {\n                 let path = p.path().and_then(|path| self.expander.parse_path(path));\n-\n                 let args: Vec<_> = p\n                     .record_pat_field_list()\n                     .expect(\"every struct should have a field list\")"}, {"sha": "713aebcfa17d0d21654f5b57d9f0dae1dd2da327", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7f75db90d99216c13000681ff2c4a887451c4b2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7f75db90d99216c13000681ff2c4a887451c4b2/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=d7f75db90d99216c13000681ff2c4a887451c4b2", "patch": "@@ -1128,7 +1128,7 @@ pub struct BoxPat {\n }\n impl BoxPat {\n     pub fn box_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![box]) }\n-    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n+    pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct DotDotPat {"}, {"sha": "cb8a307fe745cef235a1250f09199136c6752feb", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d7f75db90d99216c13000681ff2c4a887451c4b2/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/d7f75db90d99216c13000681ff2c4a887451c4b2/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=d7f75db90d99216c13000681ff2c4a887451c4b2", "patch": "@@ -516,8 +516,8 @@ Pat =\n LiteralPat =\n   Literal\n \n-PathPat =\n-  Path\n+BindPat =\n+  Attr* 'ref'? 'mut'? Name ('@' Pat)?\n \n PlaceholderPat =\n   '_'\n@@ -540,29 +540,29 @@ RecordPatFieldList =\n RecordPatField =\n   Attr* (NameRef ':')? Pat\n \n-OrPat =\n-  Pat*\n+TupleStructPat =\n+   Path '(' args:(Pat (',' Pat)* ','?)? ')'\n+\n+TuplePat =\n+   '(' args:(Pat (',' Pat)* ','?)? ')'\n \n ParenPat =\n   '(' Pat ')'\n \n-BoxPat =\n-  'box' Path\n+SlicePat =\n+  '[' args:(Pat (',' Pat)* ','?)? ']'\n \n-BindPat =\n-  Attr* 'ref'? 'mut'? Name ('@' Pat)?\n+PathPat =\n+  Path\n+\n+OrPat =\n+  (Pat ('|' Pat)* '|'?)\n+\n+BoxPat =\n+  'box' Pat\n \n DotDotPat =\n   '..'\n \n-SlicePat =\n-  '[' args:Pat* ']'\n-\n MacroPat =\n   MacroCall\n-\n-TupleStructPat =\n-   Path '(' args:Pat* ')'\n-\n-TuplePat =\n-   '(' args:Pat* ')'"}]}