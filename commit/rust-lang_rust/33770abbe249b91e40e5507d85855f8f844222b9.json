{"sha": "33770abbe249b91e40e5507d85855f8f844222b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNzcwYWJiZTI0OWI5MWU0MGU1NTA3ZDg1ODU1ZjhmODQ0MjIyYjk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-01T12:11:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:17:48Z"}, "message": "add visit() hook to the trait", "tree": {"sha": "5350b0d069b0a800068fefbb3810ad87892fe141", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5350b0d069b0a800068fefbb3810ad87892fe141"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33770abbe249b91e40e5507d85855f8f844222b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33770abbe249b91e40e5507d85855f8f844222b9", "html_url": "https://github.com/rust-lang/rust/commit/33770abbe249b91e40e5507d85855f8f844222b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33770abbe249b91e40e5507d85855f8f844222b9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdc3a3ed0cf7ac9082bed9a70b733751e40c8137", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc3a3ed0cf7ac9082bed9a70b733751e40c8137", "html_url": "https://github.com/rust-lang/rust/commit/fdc3a3ed0cf7ac9082bed9a70b733751e40c8137"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "2d977d109440ef8acfe9b6679054212200fd79bd", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33770abbe249b91e40e5507d85855f8f844222b9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33770abbe249b91e40e5507d85855f8f844222b9/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=33770abbe249b91e40e5507d85855f8f844222b9", "patch": "@@ -207,19 +207,19 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n     }\n \n     #[inline]\n-    fn with_field(\n+    fn visit_field(\n         &mut self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         val: Self::V,\n         field: usize,\n-        f: impl FnOnce(&mut Self) -> EvalResult<'tcx>,\n     ) -> EvalResult<'tcx> {\n         // Remember the old state\n         let path_len = self.path.len();\n         let op = self.op;\n         // Perform operation\n         self.push_aggregate_field_path_elem(op.layout, field);\n         self.op = val;\n-        f(self)?;\n+        self.visit(ectx)?;\n         // Undo changes\n         self.path.truncate(path_len);\n         self.op = op;\n@@ -596,6 +596,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         };\n \n         // Run it\n-        self.visit_value(&mut visitor)\n+        visitor.visit(self)\n     }\n }"}, {"sha": "5eb9ff7627d6c852a454f3650605be3a1c85c0fb", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/33770abbe249b91e40e5507d85855f8f844222b9/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33770abbe249b91e40e5507d85855f8f844222b9/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=33770abbe249b91e40e5507d85855f8f844222b9", "patch": "@@ -131,7 +131,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Value<'a, 'mir, 'tcx, M>\n }\n \n // How to traverse a value and what to do when we are at the leaves.\n-pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug {\n+pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug + Sized {\n     type V: Value<'a, 'mir, 'tcx, M>;\n \n     // There's a value in here.\n@@ -143,16 +143,16 @@ pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug {\n         self.value().layout()\n     }\n \n-    // Replace the value by `val`, which must be the `field`th field of `self`,\n-    // then call `f` and then un-do everything that might have happened to the visitor state.\n+    // Replace the value by `val`, which must be the `field`th field of `self`, then call\n+    // `visit_value` and then un-do everything that might have happened to the visitor state.\n     // The point of this is that some visitors keep a stack of fields that we projected below,\n     // and this lets us avoid copying that stack; instead they will pop the stack after\n-    // executing `f`.\n-    fn with_field(\n+    // executing `visit_value`.\n+    fn visit_field(\n         &mut self,\n+        ectx: &mut EvalContext<'a, 'mir, 'tcx, M>,\n         val: Self::V,\n         field: usize,\n-        f: impl FnOnce(&mut Self) -> EvalResult<'tcx>,\n     ) -> EvalResult<'tcx>;\n \n     // This is an enum, downcast it to whatever the current variant is.\n@@ -170,6 +170,14 @@ pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug {\n         Ok(false)\n     }\n \n+    // Execute visitor on the current value.  Used for recursing.\n+    #[inline]\n+    fn visit(&mut self, ectx: &mut EvalContext<'a, 'mir, 'tcx, M>)\n+        -> EvalResult<'tcx>\n+    {\n+        ectx.walk_value(self)\n+    }\n+\n     // Actions on the leaves.\n     fn visit_uninhabited(&mut self, ectx: &mut EvalContext<'a, 'mir, 'tcx, M>)\n         -> EvalResult<'tcx>;\n@@ -180,11 +188,11 @@ pub trait ValueVisitor<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>: fmt::Debug {\n }\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n-    pub fn visit_value<V: ValueVisitor<'a, 'mir, 'tcx, M>>(\n+    pub fn walk_value<V: ValueVisitor<'a, 'mir, 'tcx, M>>(\n         &mut self,\n         v: &mut V,\n     ) -> EvalResult<'tcx> {\n-        trace!(\"visit_value: {:?}\", v);\n+        trace!(\"walk_value: {:?}\", v);\n \n         // If this is a multi-variant layout, we have find the right one and proceed with that.\n         // (No benefit from making this recursion, but it is equivalent to that.)\n@@ -205,7 +213,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 let dest = v.value().force_allocation(self)?;\n                 let inner = self.unpack_dyn_trait(dest)?.1;\n                 // recurse with the inner type\n-                return v.with_field(Value::from_mem_place(inner), 0, |v| self.visit_value(v));\n+                return v.visit_field(self, Value::from_mem_place(inner), 0);\n             },\n             _ => {},\n         };\n@@ -256,7 +264,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             layout::FieldPlacement::Arbitrary { ref offsets, .. } => {\n                 for i in 0..offsets.len() {\n                     let val = v.value().project_field(self, i as u64)?;\n-                    v.with_field(val, i, |v| self.visit_value(v))?;\n+                    v.visit_field(self, val, i)?;\n                 }\n             },\n             layout::FieldPlacement::Array { .. } => {\n@@ -272,7 +280,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     };\n                     // Now iterate over it.\n                     for (i, field) in self.mplace_array_fields(mplace)?.enumerate() {\n-                        v.with_field(Value::from_mem_place(field?), i, |v| self.visit_value(v))?;\n+                        v.visit_field(self, Value::from_mem_place(field?), i)?;\n                     }\n                 }\n             }"}]}