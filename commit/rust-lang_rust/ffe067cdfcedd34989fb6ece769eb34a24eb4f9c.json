{"sha": "ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "node_id": "C_kwDOAAsO6NoAKGZmZTA2N2NkZmNlZGQzNDk4OWZiNmVjZTc2OWViMzRhMjRlYjRmOWM", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-11T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-12-14T16:09:00Z"}, "message": "Return an error when `eval_rvalue_with_identities` fails\n\nPreviously some code paths would fail to evaluate the rvalue, while\nincorrectly indicating success with `Ok`. As a result the previous value\nof lhs could have been incorrectly const propagated.", "tree": {"sha": "eabd2f2f400c60c0df5ca72fbdf903bc18d76db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabd2f2f400c60c0df5ca72fbdf903bc18d76db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "html_url": "https://github.com/rust-lang/rust/commit/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "404c8471aba60c2d837fa728e7c729a0f52d5830", "url": "https://api.github.com/repos/rust-lang/rust/commits/404c8471aba60c2d837fa728e7c729a0f52d5830", "html_url": "https://github.com/rust-lang/rust/commit/404c8471aba60c2d837fa728e7c729a0f52d5830"}], "stats": {"total": 98, "additions": 46, "deletions": 52}, "files": [{"sha": "84bdb8eece654383754acdd74df3858fa81f6a06", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 34, "deletions": 52, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "patch": "@@ -752,62 +752,44 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         rvalue: &Rvalue<'tcx>,\n         place: Place<'tcx>,\n     ) -> Option<()> {\n-        self.use_ecx(|this| {\n-            match rvalue {\n-                Rvalue::BinaryOp(op, box (left, right))\n-                | Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n-                    let l = this.ecx.eval_operand(left, None);\n-                    let r = this.ecx.eval_operand(right, None);\n-\n-                    let const_arg = match (l, r) {\n-                        (Ok(ref x), Err(_)) | (Err(_), Ok(ref x)) => this.ecx.read_immediate(x)?,\n-                        (Err(e), Err(_)) => return Err(e),\n-                        (Ok(_), Ok(_)) => {\n-                            this.ecx.eval_rvalue_into_place(rvalue, place)?;\n-                            return Ok(());\n-                        }\n-                    };\n-\n-                    let arg_value = const_arg.to_scalar()?.to_bits(const_arg.layout.size)?;\n-                    let dest = this.ecx.eval_place(place)?;\n-\n-                    match op {\n-                        BinOp::BitAnd => {\n-                            if arg_value == 0 {\n-                                this.ecx.write_immediate(*const_arg, &dest)?;\n-                            }\n-                        }\n-                        BinOp::BitOr => {\n-                            if arg_value == const_arg.layout.size.truncate(u128::MAX)\n-                                || (const_arg.layout.ty.is_bool() && arg_value == 1)\n-                            {\n-                                this.ecx.write_immediate(*const_arg, &dest)?;\n-                            }\n-                        }\n-                        BinOp::Mul => {\n-                            if const_arg.layout.ty.is_integral() && arg_value == 0 {\n-                                if let Rvalue::CheckedBinaryOp(_, _) = rvalue {\n-                                    let val = Immediate::ScalarPair(\n-                                        const_arg.to_scalar()?.into(),\n-                                        Scalar::from_bool(false).into(),\n-                                    );\n-                                    this.ecx.write_immediate(val, &dest)?;\n-                                } else {\n-                                    this.ecx.write_immediate(*const_arg, &dest)?;\n-                                }\n-                            }\n-                        }\n-                        _ => {\n-                            this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+        self.use_ecx(|this| match rvalue {\n+            Rvalue::BinaryOp(op, box (left, right))\n+            | Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n+                let l = this.ecx.eval_operand(left, None);\n+                let r = this.ecx.eval_operand(right, None);\n+\n+                let const_arg = match (l, r) {\n+                    (Ok(ref x), Err(_)) | (Err(_), Ok(ref x)) => this.ecx.read_immediate(x)?,\n+                    (Err(e), Err(_)) => return Err(e),\n+                    (Ok(_), Ok(_)) => return this.ecx.eval_rvalue_into_place(rvalue, place),\n+                };\n+\n+                let arg_value = const_arg.to_scalar()?.to_bits(const_arg.layout.size)?;\n+                let dest = this.ecx.eval_place(place)?;\n+\n+                match op {\n+                    BinOp::BitAnd if arg_value == 0 => this.ecx.write_immediate(*const_arg, &dest),\n+                    BinOp::BitOr\n+                        if arg_value == const_arg.layout.size.truncate(u128::MAX)\n+                            || (const_arg.layout.ty.is_bool() && arg_value == 1) =>\n+                    {\n+                        this.ecx.write_immediate(*const_arg, &dest)\n+                    }\n+                    BinOp::Mul if const_arg.layout.ty.is_integral() && arg_value == 0 => {\n+                        if let Rvalue::CheckedBinaryOp(_, _) = rvalue {\n+                            let val = Immediate::ScalarPair(\n+                                const_arg.to_scalar()?.into(),\n+                                Scalar::from_bool(false).into(),\n+                            );\n+                            this.ecx.write_immediate(val, &dest)\n+                        } else {\n+                            this.ecx.write_immediate(*const_arg, &dest)\n                         }\n                     }\n-                }\n-                _ => {\n-                    this.ecx.eval_rvalue_into_place(rvalue, place)?;\n+                    _ => this.ecx.eval_rvalue_into_place(rvalue, place),\n                 }\n             }\n-\n-            Ok(())\n+            _ => this.ecx.eval_rvalue_into_place(rvalue, place),\n         })\n     }\n "}, {"sha": "25d2202b909d933b9e27c169c1323c86c15f81ab", "filename": "src/test/ui/mir/mir_const_prop_identity.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe067cdfcedd34989fb6ece769eb34a24eb4f9c/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_const_prop_identity.rs?ref=ffe067cdfcedd34989fb6ece769eb34a24eb4f9c", "patch": "@@ -0,0 +1,12 @@\n+// Regression test for issue #91725.\n+//\n+// run-pass\n+// compile-flags: -Zmir-opt-level=4\n+\n+fn main() {\n+    let a = true;\n+    let _ = &a;\n+    let mut b = false;\n+    b |= a;\n+    assert!(b);\n+}"}]}