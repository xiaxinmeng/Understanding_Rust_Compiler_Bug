{"sha": "5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzNjlmNGFhNTdmYzcyYzZmNTgzNjhiYjBmNDk3Nzk3NWVjMmYxZTY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-27T18:34:17Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-05-27T19:32:24Z"}, "message": "rustc_session: Cleanup session creation", "tree": {"sha": "b9cb9f4d4253ddda8481131ca3597cd3a545fed0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9cb9f4d4253ddda8481131ca3597cd3a545fed0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "html_url": "https://github.com/rust-lang/rust/commit/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2873165725c15e96dae521a412065c144d9c7a25", "url": "https://api.github.com/repos/rust-lang/rust/commits/2873165725c15e96dae521a412065c144d9c7a25", "html_url": "https://github.com/rust-lang/rust/commit/2873165725c15e96dae521a412065c144d9c7a25"}], "stats": {"total": 90, "additions": 35, "deletions": 55}, "files": [{"sha": "f127a239eea2ce8b76aee12bba292bcfde57aed4", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -18,7 +18,7 @@ use rustc_session::lint;\n use rustc_session::parse::{CrateConfig, ParseSess};\n use rustc_session::{DiagnosticOutput, Session};\n use rustc_span::edition;\n-use rustc_span::source_map::{FileLoader, FileName, SourceMap};\n+use rustc_span::source_map::{FileLoader, FileName};\n use std::path::PathBuf;\n use std::result;\n use std::sync::{Arc, Mutex};\n@@ -31,7 +31,6 @@ pub type Result<T> = result::Result<T, ErrorReported>;\n pub struct Compiler {\n     pub(crate) sess: Lrc<Session>,\n     codegen_backend: Lrc<Box<dyn CodegenBackend>>,\n-    source_map: Lrc<SourceMap>,\n     pub(crate) input: Input,\n     pub(crate) input_path: Option<PathBuf>,\n     pub(crate) output_dir: Option<PathBuf>,\n@@ -49,9 +48,6 @@ impl Compiler {\n     pub fn codegen_backend(&self) -> &Lrc<Box<dyn CodegenBackend>> {\n         &self.codegen_backend\n     }\n-    pub fn source_map(&self) -> &Lrc<SourceMap> {\n-        &self.source_map\n-    }\n     pub fn input(&self) -> &Input {\n         &self.input\n     }\n@@ -168,7 +164,7 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n     f: impl FnOnce(&Compiler) -> R,\n ) -> R {\n     let registry = &config.registry;\n-    let (sess, codegen_backend, source_map) = util::create_session(\n+    let (sess, codegen_backend) = util::create_session(\n         config.opts,\n         config.crate_cfg,\n         config.diagnostic_output,\n@@ -181,7 +177,6 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n     let compiler = Compiler {\n         sess,\n         codegen_backend,\n-        source_map,\n         input: config.input,\n         input_path: config.input_path,\n         output_dir: config.output_dir,"}, {"sha": "9390bbb34d03a70500ac3da20e63a281507ec428", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -7,11 +7,10 @@ use rustc_session::config::{build_configuration, build_session_options, to_crate\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n use rustc_session::config::{CFGuard, ExternEntry, LinkerPluginLto, LtoCli, SwitchWithOptPath};\n use rustc_session::config::{Externs, OutputType, OutputTypes, Sanitizer, SymbolManglingVersion};\n-use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n use rustc_session::utils::NativeLibKind;\n-use rustc_session::{build_session, Session};\n+use rustc_session::{build_session, getopts, DiagnosticOutput, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n use rustc_span::SourceFileHashAlgorithm;\n@@ -32,7 +31,14 @@ fn build_session_options_and_crate_config(matches: getopts::Matches) -> (Options\n fn mk_session(matches: getopts::Matches) -> (Session, CfgSpecs) {\n     let registry = registry::Registry::new(&[]);\n     let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n-    let sess = build_session(sessopts, None, registry);\n+    let sess = build_session(\n+        sessopts,\n+        None,\n+        registry,\n+        DiagnosticOutput::Default,\n+        Default::default(),\n+        None,\n+    );\n     (sess, cfg)\n }\n "}, {"sha": "924908e57248760986a543c1a84660ec39774c77", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -23,7 +23,7 @@ use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{FileLoader, SourceMap};\n+use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n use std::env;\n@@ -65,8 +65,8 @@ pub fn create_session(\n     input_path: Option<PathBuf>,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     descriptions: Registry,\n-) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>, Lrc<SourceMap>) {\n-    let (mut sess, source_map) = session::build_session_with_source_map(\n+) -> (Lrc<Session>, Lrc<Box<dyn CodegenBackend>>) {\n+    let mut sess = session::build_session(\n         sopts,\n         input_path,\n         descriptions,\n@@ -81,7 +81,7 @@ pub fn create_session(\n     add_configuration(&mut cfg, &mut sess, &*codegen_backend);\n     sess.parse_sess.config = cfg;\n \n-    (Lrc::new(sess), Lrc::new(codegen_backend), source_map)\n+    (Lrc::new(sess), Lrc::new(codegen_backend))\n }\n \n const STACK_SIZE: usize = 8 * 1024 * 1024;"}, {"sha": "233761dbed7dee6166b5d4fc05b75d016ceebfdd", "filename": "src/librustc_session/parse.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_session%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_session%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fparse.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -174,6 +174,10 @@ impl ParseSess {\n         &self.source_map\n     }\n \n+    pub fn clone_source_map(&self) -> Lrc<SourceMap> {\n+        self.source_map.clone()\n+    }\n+\n     pub fn buffer_lint(\n         &self,\n         lint: &'static Lint,"}, {"sha": "ba9741b1890f6748b1ff23b36b2c8b842721adc2", "filename": "src/librustc_session/session.rs", "status": "modified", "additions": 15, "deletions": 40, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -21,7 +21,7 @@ use rustc_errors::json::JsonEmitter;\n use rustc_errors::registry::Registry;\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticId, ErrorReported};\n use rustc_span::edition::Edition;\n-use rustc_span::source_map::{self, FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n+use rustc_span::source_map::{FileLoader, MultiSpan, RealFileLoader, SourceMap, Span};\n use rustc_span::{SourceFileHashAlgorithm, Symbol};\n use rustc_target::asm::InlineAsmArch;\n use rustc_target::spec::{CodeModel, PanicStrategy, RelocModel, RelroLevel};\n@@ -481,7 +481,7 @@ impl Session {\n     }\n \n     #[inline]\n-    pub fn source_map(&self) -> &source_map::SourceMap {\n+    pub fn source_map(&self) -> &SourceMap {\n         self.parse_sess.source_map()\n     }\n     pub fn verbose(&self) -> bool {\n@@ -984,26 +984,10 @@ impl Session {\n     }\n }\n \n-pub fn build_session(\n-    sopts: config::Options,\n-    local_crate_source_file: Option<PathBuf>,\n-    registry: rustc_errors::registry::Registry,\n-) -> Session {\n-    build_session_with_source_map(\n-        sopts,\n-        local_crate_source_file,\n-        registry,\n-        DiagnosticOutput::Default,\n-        Default::default(),\n-        None,\n-    )\n-    .0\n-}\n-\n fn default_emitter(\n     sopts: &config::Options,\n     registry: rustc_errors::registry::Registry,\n-    source_map: &Lrc<source_map::SourceMap>,\n+    source_map: Lrc<SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n     let macro_backtrace = sopts.debugging_opts.macro_backtrace;\n@@ -1012,25 +996,22 @@ fn default_emitter(\n             let (short, color_config) = kind.unzip();\n \n             if let HumanReadableErrorType::AnnotateSnippet(_) = kind {\n-                let emitter = AnnotateSnippetEmitterWriter::new(\n-                    Some(source_map.clone()),\n-                    short,\n-                    macro_backtrace,\n-                );\n+                let emitter =\n+                    AnnotateSnippetEmitterWriter::new(Some(source_map), short, macro_backtrace);\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             } else {\n                 let emitter = match dst {\n                     None => EmitterWriter::stderr(\n                         color_config,\n-                        Some(source_map.clone()),\n+                        Some(source_map),\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n                         macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n-                        Some(source_map.clone()),\n+                        Some(source_map),\n                         short,\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n@@ -1042,20 +1023,14 @@ fn default_emitter(\n             }\n         }\n         (config::ErrorOutputType::Json { pretty, json_rendered }, None) => Box::new(\n-            JsonEmitter::stderr(\n-                Some(registry),\n-                source_map.clone(),\n-                pretty,\n-                json_rendered,\n-                macro_backtrace,\n-            )\n-            .ui_testing(sopts.debugging_opts.ui_testing),\n+            JsonEmitter::stderr(Some(registry), source_map, pretty, json_rendered, macro_backtrace)\n+                .ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n             JsonEmitter::new(\n                 dst,\n                 Some(registry),\n-                source_map.clone(),\n+                source_map,\n                 pretty,\n                 json_rendered,\n                 macro_backtrace,\n@@ -1070,14 +1045,14 @@ pub enum DiagnosticOutput {\n     Raw(Box<dyn Write + Send>),\n }\n \n-pub fn build_session_with_source_map(\n+pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n     registry: rustc_errors::registry::Registry,\n     diagnostics_output: DiagnosticOutput,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n     file_loader: Option<Box<dyn FileLoader + Send + Sync + 'static>>,\n-) -> (Session, Lrc<SourceMap>) {\n+) -> Session {\n     // FIXME: This is not general enough to make the warning lint completely override\n     // normal diagnostic warnings, since the warning lint can also be denied and changed\n     // later via the source code.\n@@ -1115,7 +1090,7 @@ pub fn build_session_with_source_map(\n         sopts.file_path_mapping(),\n         hash_kind,\n     ));\n-    let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n+    let emitter = default_emitter(&sopts, registry, source_map.clone(), write_dest);\n \n     let span_diagnostic = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n@@ -1143,7 +1118,7 @@ pub fn build_session_with_source_map(\n         None\n     };\n \n-    let parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map.clone());\n+    let parse_sess = ParseSess::with_span_handler(span_diagnostic, source_map);\n     let sysroot = match &sopts.maybe_sysroot {\n         Some(sysroot) => sysroot.clone(),\n         None => filesearch::get_or_default_sysroot(),\n@@ -1266,7 +1241,7 @@ pub fn build_session_with_source_map(\n \n     validate_commandline_args_with_session_available(&sess);\n \n-    (sess, source_map)\n+    sess\n }\n \n // If it is useful to have a Session available already for validating a"}, {"sha": "85ba4cbdc7e1b42904d5be5851c7ecb5a983452d", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5369f4aa57fc72c6f58368bb0f4977975ec2f1e6/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5369f4aa57fc72c6f58368bb0f4977975ec2f1e6", "patch": "@@ -114,7 +114,7 @@ pub fn run(options: Options) -> Result<(), String> {\n                 options,\n                 false,\n                 opts,\n-                Some(compiler.source_map().clone()),\n+                Some(compiler.session().parse_sess.clone_source_map()),\n                 None,\n                 enable_per_target_ignores,\n             );"}]}