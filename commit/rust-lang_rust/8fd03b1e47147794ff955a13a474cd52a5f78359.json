{"sha": "8fd03b1e47147794ff955a13a474cd52a5f78359", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZDAzYjFlNDcxNDc3OTRmZjk1NWExM2E0NzRjZDUyYTVmNzgzNTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T07:26:02Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-29T10:55:45Z"}, "message": "syntax: fix #64682.\n\nFuse parsing of `self` into `parse_param_general`.", "tree": {"sha": "1c7bddb423c2a970ec7b3992f3ad9f61a9a716b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c7bddb423c2a970ec7b3992f3ad9f61a9a716b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fd03b1e47147794ff955a13a474cd52a5f78359", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd03b1e47147794ff955a13a474cd52a5f78359", "html_url": "https://github.com/rust-lang/rust/commit/8fd03b1e47147794ff955a13a474cd52a5f78359", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fd03b1e47147794ff955a13a474cd52a5f78359/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b61e69433951e31f7bd746e22f516a48ad41623b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b61e69433951e31f7bd746e22f516a48ad41623b", "html_url": "https://github.com/rust-lang/rust/commit/b61e69433951e31f7bd746e22f516a48ad41623b"}], "stats": {"total": 518, "additions": 391, "deletions": 127}, "files": [{"sha": "6ef8a16269a1d07b05d51983cf92171be5801d64", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -974,15 +974,22 @@ impl<'a> Parser<'a> {\n     /// This version of parse param doesn't necessarily require identifier names.\n     fn parse_param_general(\n         &mut self,\n+        is_self_allowed: bool,\n         is_trait_item: bool,\n         allow_c_variadic: bool,\n         is_name_required: impl Fn(&token::Token) -> bool,\n     ) -> PResult<'a, Param> {\n         let lo = self.token.span;\n         let attrs = self.parse_outer_attributes()?;\n+\n+        // Possibly parse `self`. Recover if we parsed it and it wasn't allowed here.\n         if let Some(mut param) = self.parse_self_param()? {\n             param.attrs = attrs.into();\n-            return self.recover_bad_self_param(param, is_trait_item);\n+            return if is_self_allowed {\n+                Ok(param)\n+            } else {\n+                self.recover_bad_self_param(param, is_trait_item)\n+            };\n         }\n \n         let is_name_required = is_name_required(&self.token);\n@@ -1207,6 +1214,7 @@ impl<'a> Parser<'a> {\n                     }\n                 };\n             match p.parse_param_general(\n+                false,\n                 false,\n                 allow_c_variadic,\n                 do_not_enforce_named_arguments_for_c_variadic\n@@ -1359,60 +1367,25 @@ impl<'a> Parser<'a> {\n         Ok(Some(Param::from_self(ThinVec::default(), eself, eself_ident)))\n     }\n \n-    /// Returns the parsed optional self parameter with attributes and whether a self\n-    /// shortcut was used.\n-    fn parse_self_parameter_with_attrs(&mut self) -> PResult<'a, Option<Param>> {\n-        let attrs = self.parse_outer_attributes()?;\n-        let param_opt = self.parse_self_param()?;\n-        Ok(param_opt.map(|mut param| {\n-            param.attrs = attrs.into();\n-            param\n-        }))\n-    }\n-\n     /// Parses the parameter list and result type of a function that may have a `self` parameter.\n-    fn parse_fn_decl_with_self<F>(&mut self, parse_param_fn: F) -> PResult<'a, P<FnDecl>>\n-        where F: FnMut(&mut Parser<'a>) -> PResult<'a,  Param>,\n-    {\n-        self.expect(&token::OpenDelim(token::Paren))?;\n-\n-        // Parse optional self argument.\n-        let self_param = self.parse_self_parameter_with_attrs()?;\n-\n-        // Parse the rest of the function parameter list.\n-        let sep = SeqSep::trailing_allowed(token::Comma);\n-        let (mut fn_inputs, recovered) = if let Some(self_param) = self_param {\n-            if self.check(&token::CloseDelim(token::Paren)) {\n-                (vec![self_param], false)\n-            } else if self.eat(&token::Comma) {\n-                let mut fn_inputs = vec![self_param];\n-                let (mut input, _, recovered) = self.parse_seq_to_before_end(\n-                    &token::CloseDelim(token::Paren), sep, parse_param_fn)?;\n-                fn_inputs.append(&mut input);\n-                (fn_inputs, recovered)\n-            } else {\n-                match self.expect_one_of(&[], &[]) {\n-                    Err(err) => return Err(err),\n-                    Ok(recovered) => (vec![self_param], recovered),\n-                }\n-            }\n-        } else {\n-            let (input, _, recovered) =\n-                self.parse_seq_to_before_end(&token::CloseDelim(token::Paren),\n-                                             sep,\n-                                             parse_param_fn)?;\n-            (input, recovered)\n-        };\n+    fn parse_fn_decl_with_self(\n+        &mut self,\n+        is_name_required: impl Copy + Fn(&token::Token) -> bool,\n+    ) -> PResult<'a, P<FnDecl>> {\n+        // Parse the arguments, starting out with `self` being allowed...\n+        let mut is_self_allowed = true;\n+        let (mut inputs, _): (Vec<_>, _) = self.parse_paren_comma_seq(|p| {\n+            let res = p.parse_param_general(is_self_allowed, true, false, is_name_required);\n+            // ...but now that we've parsed the first argument, `self` is no longer allowed.\n+            is_self_allowed = false;\n+            res\n+        })?;\n \n-        if !recovered {\n-            // Parse closing paren and return type.\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-        }\n         // Replace duplicated recovered params with `_` pattern to avoid unecessary errors.\n-        self.deduplicate_recovered_params_names(&mut fn_inputs);\n+        self.deduplicate_recovered_params_names(&mut inputs);\n \n         Ok(P(FnDecl {\n-            inputs: fn_inputs,\n+            inputs,\n             output: self.parse_ret_ty(true)?,\n             c_variadic: false\n         }))"}, {"sha": "9762d9d459f73d574575c108e4421540c8c2c261", "filename": "src/libsyntax/parse/parser/item.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fitem.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -424,13 +424,7 @@ impl<'a> Parser<'a> {\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n                 self.bump();  // `(`\n-                let kw_name = if let Ok(Some(_)) = self.parse_self_parameter_with_attrs()\n-                    .map_err(|mut e| e.cancel())\n-                {\n-                    \"method\"\n-                } else {\n-                    \"function\"\n-                };\n+                let kw_name = self.recover_first_param();\n                 self.consume_block(token::Paren);\n                 let (kw, kw_name, ambiguous) = if self.check(&token::RArrow) {\n                     self.eat_to_tokens(&[&token::OpenDelim(token::Brace)]);\n@@ -477,13 +471,7 @@ impl<'a> Parser<'a> {\n                 self.eat_to_tokens(&[&token::Gt]);\n                 self.bump();  // `>`\n                 let (kw, kw_name, ambiguous) = if self.eat(&token::OpenDelim(token::Paren)) {\n-                    if let Ok(Some(_)) = self.parse_self_parameter_with_attrs()\n-                        .map_err(|mut e| e.cancel())\n-                    {\n-                        (\"fn\", \"method\", false)\n-                    } else {\n-                        (\"fn\", \"function\", false)\n-                    }\n+                    (\"fn\", self.recover_first_param(), false)\n                 } else if self.check(&token::OpenDelim(token::Brace)) {\n                     (\"struct\", \"struct\", false)\n                 } else {\n@@ -505,6 +493,16 @@ impl<'a> Parser<'a> {\n         self.parse_macro_use_or_failure(attrs, macros_allowed, attributes_allowed, lo, visibility)\n     }\n \n+    fn recover_first_param(&mut self) -> &'static str {\n+        match self.parse_outer_attributes()\n+            .and_then(|_| self.parse_self_param())\n+            .map_err(|mut e| e.cancel())\n+        {\n+            Ok(Some(_)) => \"method\",\n+            _ => \"function\",\n+        }\n+    }\n+\n     /// This is the fall-through for parsing items.\n     fn parse_macro_use_or_failure(\n         &mut self,\n@@ -861,9 +859,7 @@ impl<'a> Parser<'a> {\n             let (constness, unsafety, asyncness, abi) = self.parse_fn_front_matter()?;\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n-            let decl = self.parse_fn_decl_with_self(|p| {\n-                p.parse_param_general(true, false, |_| true)\n-            })?;\n+            let decl = self.parse_fn_decl_with_self(|_| true)?;\n             generics.where_clause = self.parse_where_clause()?;\n             *at_end = true;\n             let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n@@ -1034,15 +1030,11 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             let mut generics = self.parse_generics()?;\n \n-            let decl = self.parse_fn_decl_with_self(|p: &mut Parser<'a>| {\n-                // This is somewhat dubious; We don't want to allow\n-                // argument names to be left off if there is a\n-                // definition...\n-\n-                // We don't allow argument names to be left off in edition 2018.\n-                let is_name_required = p.token.span.rust_2018();\n-                p.parse_param_general(true, false, |_| is_name_required)\n-            })?;\n+            // This is somewhat dubious; We don't want to allow\n+            // argument names to be left off if there is a definition...\n+            //\n+            // We don't allow argument names to be left off in edition 2018.\n+            let decl = self.parse_fn_decl_with_self(|t| t.span.rust_2018())?;\n             generics.where_clause = self.parse_where_clause()?;\n \n             let sig = ast::MethodSig {"}, {"sha": "6850e999242ea41299030767276a2be3be50ced7", "filename": "src/test/ui/lint/lint-unused-variables.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -29,6 +29,11 @@ impl RefStruct {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n trait RefTrait {\n     fn bar(\n@@ -37,6 +42,11 @@ trait RefTrait {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n impl RefTrait for RefStruct {\n     fn bar(\n@@ -45,6 +55,11 @@ impl RefTrait for RefStruct {\n         b: i32,\n         //~^ ERROR unused variable: `b`\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[allow(unused_variables)] a: i32,\n+        b: i32,\n+        //~^ ERROR unused variable: `b`\n+    ) {}\n }\n \n fn main() {"}, {"sha": "f8419bf506660480ffe05a40b30c6466c2f71169", "filename": "src/test/ui/lint/lint-unused-variables.stderr", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unused-variables.stderr?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -17,19 +17,25 @@ LL |     b: i32,\n    |     ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `a`\n-  --> $DIR/lint-unused-variables.rs:53:9\n+  --> $DIR/lint-unused-variables.rs:68:9\n    |\n LL |         a: i32,\n    |         ^ help: consider prefixing with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:59:9\n+  --> $DIR/lint-unused-variables.rs:74:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:37:9\n+  --> $DIR/lint-unused-variables.rs:42:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:47:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n@@ -47,10 +53,22 @@ LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `b`\n-  --> $DIR/lint-unused-variables.rs:45:9\n+  --> $DIR/lint-unused-variables.rs:34:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:55:9\n+   |\n+LL |         b: i32,\n+   |         ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `b`\n+  --> $DIR/lint-unused-variables.rs:60:9\n    |\n LL |         b: i32,\n    |         ^ help: consider prefixing with an underscore: `_b`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 11 previous errors\n "}, {"sha": "eeb2191bab46254f76c0fb7ab8055e69a750f8f2", "filename": "src/test/ui/rfc-2565-param-attrs/attr-without-param.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -0,0 +1,16 @@\n+#[cfg(FALSE)]\n+impl S {\n+    fn f(#[attr]) {} //~ ERROR expected parameter name, found `)`\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    fn f(#[attr]) {} //~ ERROR expected parameter name, found `)`\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    fn f(#[attr]); //~ ERROR expected argument name, found `)`\n+}\n+\n+fn main() {}"}, {"sha": "26dff4d4b30bf416849e287dbc13771258af7e35", "filename": "src/test/ui/rfc-2565-param-attrs/attr-without-param.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fattr-without-param.stderr?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -0,0 +1,20 @@\n+error: expected parameter name, found `)`\n+  --> $DIR/attr-without-param.rs:3:17\n+   |\n+LL |     fn f(#[attr]) {}\n+   |                 ^ expected parameter name\n+\n+error: expected parameter name, found `)`\n+  --> $DIR/attr-without-param.rs:8:17\n+   |\n+LL |     fn f(#[attr]) {}\n+   |                 ^ expected parameter name\n+\n+error: expected argument name, found `)`\n+  --> $DIR/attr-without-param.rs:13:17\n+   |\n+LL |     fn f(#[attr]);\n+   |                 ^ expected argument name\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "c537c1034b5a6936bb9e834c319a1a212cce46fc", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -11,7 +11,6 @@ macro_rules! checker {\n     ($attr_name:ident, $expected:literal) => {\n         #[proc_macro_attribute]\n         pub fn $attr_name(attr: TokenStream, input: TokenStream) -> TokenStream {\n-            assert!(attr.to_string().is_empty());\n             assert_eq!(input.to_string(), $expected);\n             TokenStream::new()\n         }\n@@ -28,7 +27,18 @@ checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_2, \"fn inherent2(#[a1] &self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_3, \"fn inherent3<'a>(#[a1] &'a mut self, #[a2] arg1: u8) { }\");\n checker!(attr_inherent_4, \"fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) { }\");\n+checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8) { }\");\n checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1: u8);\");\n checker!(attr_trait_2, \"fn trait2(#[a1] &self, #[a2] arg1: u8);\");\n checker!(attr_trait_3, \"fn trait3<'a>(#[a1] &'a mut self, #[a2] arg1: u8);\");\n checker!(attr_trait_4, \"fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\");\n+checker!(attr_trait_issue_64682, \"fn trait5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8);\");\n+checker!(rename_params, r#\"impl Foo {\n+    fn hello(#[angery(true)] a: i32, #[a2] b: i32, #[what = \"how\"] c: u32) { }\n+    fn hello2(#[a1] #[a2] a: i32, #[what = \"how\"] b: i32,\n+              #[angery(true)] c: u32) {\n+    }\n+    fn hello_self(#[a1] #[a2] &self, #[a1] #[a2] a: i32,\n+                  #[what = \"how\"] b: i32, #[angery(true)] c: u32) {\n+    }\n+}\"#);"}, {"sha": "670303906d24c1b74887898f4c66c01fb21e70cf", "filename": "src/test/ui/rfc-2565-param-attrs/issue-64682-dropping-first-attrs-in-impl-fns.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fissue-64682-dropping-first-attrs-in-impl-fns.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -0,0 +1,21 @@\n+// aux-build:param-attrs.rs\n+\n+// check-pass\n+\n+extern crate param_attrs;\n+\n+use param_attrs::rename_params;\n+\n+#[rename_params(send_help)]\n+impl Foo {\n+    fn hello(#[angery(true)] a: i32, #[a2] b: i32, #[what = \"how\"] c: u32) {}\n+    fn hello2(#[a1] #[a2] a: i32, #[what = \"how\"] b: i32, #[angery(true)] c: u32) {}\n+    fn hello_self(\n+        #[a1] #[a2] &self,\n+        #[a1] #[a2] a: i32,\n+        #[what = \"how\"] b: i32,\n+        #[angery(true)] c: u32\n+    ) {}\n+}\n+\n+fn main() {}"}, {"sha": "bf09171c9a12afc7914a91341967e18357b2a18f", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -64,6 +64,21 @@ impl SelfStruct {\n         #[no_mangle] b: i32,\n         //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n     ) {}\n+\n+    fn issue_64682_associated_fn(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n }\n \n struct RefStruct {}\n@@ -104,7 +119,23 @@ trait RefTrait {\n         #[no_mangle] b: i32,\n         //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n     ) {}\n+\n+    fn issue_64682_associated_fn(\n+        /// Foo\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[test] a: i32,\n+        //~^ ERROR expected an inert attribute, found an attribute macro\n+        /// Baz\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[must_use]\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+        /// Qux\n+        //~^ ERROR documentation comments cannot be applied to function\n+        #[no_mangle] b: i32,\n+        //~^ ERROR allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in\n+    ) {}\n }\n+\n impl RefTrait for RefStruct {\n     fn foo(\n         /// Foo"}, {"sha": "4d0349e8765f0eca73372ae915c8d11e41ca3671", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-builtin-attrs.stderr", "status": "modified", "additions": 99, "deletions": 27, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-builtin-attrs.stderr?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -23,25 +23,37 @@ LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:71:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:92:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:111:9\n    |\n LL |         #[test] a: i32,\n    |         ^^^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:126:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:146:9\n+   |\n+LL |         #[test] a: i32,\n+   |         ^^^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/param-attrs-builtin-attrs.rs:163:9\n    |\n LL |         #[test] a: u32,\n    |         ^^^^^^^\n@@ -173,142 +185,202 @@ LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:72:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:69:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:73:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n   --> $DIR/param-attrs-builtin-attrs.rs:75:9\n    |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:77:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:87:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:90:9\n+   |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:79:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:81:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:96:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:83:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:85:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:91:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:106:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:94:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:109:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:98:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:100:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:115:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:102:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:104:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:110:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:124:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:113:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:128:9\n+   |\n+LL |         /// Baz\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n+   |\n+LL |         #[must_use]\n+   |         ^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:132:9\n+   |\n+LL |         /// Qux\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+   |\n+LL |         #[no_mangle] b: i32,\n+   |         ^^^^^^^^^^^^\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:141:9\n+   |\n+LL |         /// Foo\n+   |         ^^^^^^^ doc comments are not allowed here\n+\n+error: documentation comments cannot be applied to function parameters\n+  --> $DIR/param-attrs-builtin-attrs.rs:144:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:117:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:148:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:119:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:150:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:121:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:152:9\n    |\n LL |         /// Qux\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:123:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:154:9\n    |\n LL |         #[no_mangle] b: i32,\n    |         ^^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:130:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:161:9\n    |\n LL |         /// Foo\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:134:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:165:9\n    |\n LL |         /// Bar\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:136:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:167:9\n    |\n LL |         #[must_use]\n    |         ^^^^^^^^^^^\n \n error: documentation comments cannot be applied to function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:138:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:169:9\n    |\n LL |         /// Baz\n    |         ^^^^^^^ doc comments are not allowed here\n \n error: allow, cfg, cfg_attr, deny, forbid, and warn are the only allowed built-in attributes in function parameters\n-  --> $DIR/param-attrs-builtin-attrs.rs:140:9\n+  --> $DIR/param-attrs-builtin-attrs.rs:171:9\n    |\n LL |         #[no_mangle] b: i32\n    |         ^^^^^^^^^^^^\n \n-error: aborting due to 52 previous errors\n+error: aborting due to 64 previous errors\n "}, {"sha": "a4d9d32b514ac211d90d7c99414370713dd52372", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -51,6 +51,14 @@ impl RefStruct {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n trait RefTrait {\n     fn bar(\n@@ -62,6 +70,14 @@ trait RefTrait {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n impl RefTrait for RefStruct {\n     fn bar(\n@@ -73,6 +89,14 @@ impl RefTrait for RefStruct {\n         //~^ ERROR unused variable: `c`\n         #[cfg_attr(something, cfg(nothing))] d: i32,\n     ) {}\n+    fn issue_64682_associated_fn(\n+        #[cfg(nothing)] a: i32,\n+        #[cfg(something)] b: i32,\n+        //~^ ERROR unused variable: `b`\n+        #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+        //~^ ERROR unused variable: `c`\n+        #[cfg_attr(something, cfg(nothing))] d: i32,\n+    ) {}\n }\n \n fn main() {"}, {"sha": "8d9571d09a856228c2e884efcb5588595b116c80", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-cfg.stderr", "status": "modified", "additions": 44, "deletions": 8, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-cfg.stderr?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -23,31 +23,43 @@ LL |     #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                        ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `a`\n-  --> $DIR/param-attrs-cfg.rs:83:27\n+  --> $DIR/param-attrs-cfg.rs:107:27\n    |\n LL |         #[cfg(something)] a: i32,\n    |                           ^ help: consider prefixing with an underscore: `_a`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:89:27\n+  --> $DIR/param-attrs-cfg.rs:113:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:91:44\n+  --> $DIR/param-attrs-cfg.rs:115:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:59:27\n+  --> $DIR/param-attrs-cfg.rs:67:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:61:44\n+  --> $DIR/param-attrs-cfg.rs:69:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:75:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:77:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n@@ -71,16 +83,40 @@ LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n error: unused variable: `b`\n-  --> $DIR/param-attrs-cfg.rs:70:27\n+  --> $DIR/param-attrs-cfg.rs:56:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:58:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:86:27\n+   |\n+LL |         #[cfg(something)] b: i32,\n+   |                           ^ help: consider prefixing with an underscore: `_b`\n+\n+error: unused variable: `c`\n+  --> $DIR/param-attrs-cfg.rs:88:44\n+   |\n+LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n+   |                                            ^ help: consider prefixing with an underscore: `_c`\n+\n+error: unused variable: `b`\n+  --> $DIR/param-attrs-cfg.rs:94:27\n    |\n LL |         #[cfg(something)] b: i32,\n    |                           ^ help: consider prefixing with an underscore: `_b`\n \n error: unused variable: `c`\n-  --> $DIR/param-attrs-cfg.rs:72:44\n+  --> $DIR/param-attrs-cfg.rs:96:44\n    |\n LL |         #[cfg_attr(nothing, cfg(nothing))] c: i32,\n    |                                            ^ help: consider prefixing with an underscore: `_c`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 19 previous errors\n "}, {"sha": "1183ac65b9a7fab5879afd6ef3da25e01387f935", "filename": "src/test/ui/rfc-2565-param-attrs/param-attrs-pretty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fparam-attrs-pretty.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -36,6 +36,9 @@ impl W {\n \n     #[attr_inherent_4]\n     fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) {}\n+\n+    #[attr_inherent_issue_64682]\n+    fn inherent5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8) {}\n }\n \n trait A {\n@@ -50,6 +53,9 @@ trait A {\n \n     #[attr_trait_4]\n     fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\n+\n+    #[attr_trait_issue_64682]\n+    fn trait5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8);\n }\n \n fn main() {}"}, {"sha": "be9085d5878cb493d3860b98a00a5f972e680332", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.rs?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -38,6 +38,9 @@ impl W {\n     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n     //~^ ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n+    fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n trait A {\n@@ -54,6 +57,9 @@ trait A {\n     //~^ ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n     //~| ERROR expected an inert attribute, found an attribute macro\n+    fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+    //~^ ERROR expected an inert attribute, found an attribute macro\n+    //~| ERROR expected an inert attribute, found an attribute macro\n }\n \n fn main() {}"}, {"sha": "1cc3c3d82281bb1579c2442dd996f0de20ce5904", "filename": "src/test/ui/rfc-2565-param-attrs/proc-macro-cannot-be-used.stderr", "status": "modified", "additions": 34, "deletions": 10, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8fd03b1e47147794ff955a13a474cd52a5f78359/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fproc-macro-cannot-be-used.stderr?ref=8fd03b1e47147794ff955a13a474cd52a5f78359", "patch": "@@ -95,58 +95,82 @@ LL |     fn inherent4<'a>(#[id] self: Box<Self>, #[id] arg1: u8) {}\n    |                                             ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:44:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:38\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+   |                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:41:54\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8) {}\n+   |                                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:44:27\n+  --> $DIR/proc-macro-cannot-be-used.rs:47:27\n    |\n LL |     fn trait1(#[id] self, #[id] arg1: u8);\n    |                           ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:15\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:15\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |               ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:47:28\n+  --> $DIR/proc-macro-cannot-be-used.rs:50:28\n    |\n LL |     fn trait2(#[id] &self, #[id] arg1: u8);\n    |                            ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:50:39\n+  --> $DIR/proc-macro-cannot-be-used.rs:53:39\n    |\n LL |     fn trait3<'a>(#[id] &'a mut self, #[id] arg1: u8);\n    |                                       ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:19\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:19\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                   ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:42\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:42\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                          ^^^^^\n \n error: expected an inert attribute, found an attribute macro\n-  --> $DIR/proc-macro-cannot-be-used.rs:53:58\n+  --> $DIR/proc-macro-cannot-be-used.rs:56:58\n    |\n LL |     fn trait4<'a>(#[id] self: Box<Self>, #[id] arg1: u8, #[id] Vec<u8>);\n    |                                                          ^^^^^\n \n-error: aborting due to 25 previous errors\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:38\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+   |                                      ^^^^^\n+\n+error: expected an inert attribute, found an attribute macro\n+  --> $DIR/proc-macro-cannot-be-used.rs:60:54\n+   |\n+LL |     fn issue_64682_associated_fn<'a>(#[id] arg1: u8, #[id] arg2: u8);\n+   |                                                      ^^^^^\n+\n+error: aborting due to 29 previous errors\n "}]}