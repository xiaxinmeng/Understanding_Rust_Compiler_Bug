{"sha": "7c991868c60a4afc1ee6334b912ea96061a2c98d", "node_id": "C_kwDOAAsO6NoAKDdjOTkxODY4YzYwYTRhZmMxZWU2MzM0YjkxMmVhOTYwNjFhMmM5OGQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T12:58:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-30T12:58:50Z"}, "message": "Auto merge of #105426 - flba-eb:fix_tls_destructor_unwinding, r=m-ou-se\n\nCatch panics/unwinding in destruction of TLS values\n\n`destroy_value` is/can be called from C code (libc). Unwinding from Rust to C code is undefined behavior, which is why unwinding is caught here.\n\nThis problem caused an infinite loop inside the unwinding code when running `src/test/ui/threads-sendsync/issue-24313.rs` on a tier 3 target (QNX/Neutrino) on aarch64.\n\nSee also https://rust-lang.zulipchat.com/#narrow/stream/182449-t-compiler.2Fhelp/topic/Infinite.20unwinding.20bug.", "tree": {"sha": "1fd5db269d4d75174efa69faec875cd91d748c2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fd5db269d4d75174efa69faec875cd91d748c2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c991868c60a4afc1ee6334b912ea96061a2c98d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c991868c60a4afc1ee6334b912ea96061a2c98d", "html_url": "https://github.com/rust-lang/rust/commit/7c991868c60a4afc1ee6334b912ea96061a2c98d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c991868c60a4afc1ee6334b912ea96061a2c98d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6cc345be403d481b4518e151218118c2a9eb4bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cc345be403d481b4518e151218118c2a9eb4bb", "html_url": "https://github.com/rust-lang/rust/commit/f6cc345be403d481b4518e151218118c2a9eb4bb"}, {"sha": "04a6f22f7950daa680594353dbd03f5cb515aef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/04a6f22f7950daa680594353dbd03f5cb515aef5", "html_url": "https://github.com/rust-lang/rust/commit/04a6f22f7950daa680594353dbd03f5cb515aef5"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "5f7e3a5dac9b4489b735001f6f3029c1abf3ed35", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c991868c60a4afc1ee6334b912ea96061a2c98d/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c991868c60a4afc1ee6334b912ea96061a2c98d/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=7c991868c60a4afc1ee6334b912ea96061a2c98d", "patch": "@@ -905,9 +905,8 @@ pub mod statik {\n pub mod fast {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n-    use crate::fmt;\n-    use crate::mem;\n     use crate::sys::thread_local_dtor::register_dtor;\n+    use crate::{fmt, mem, panic};\n \n     #[derive(Copy, Clone)]\n     enum DtorState {\n@@ -1028,10 +1027,15 @@ pub mod fast {\n         // `Option<T>` to `None`, and `dtor_state` to `RunningOrHasRun`. This\n         // causes future calls to `get` to run `try_initialize_drop` again,\n         // which will now fail, and return `None`.\n-        unsafe {\n+        //\n+        // Wrap the call in a catch to ensure unwinding is caught in the event\n+        // a panic takes place in a destructor.\n+        if let Err(_) = panic::catch_unwind(panic::AssertUnwindSafe(|| unsafe {\n             let value = (*ptr).inner.take();\n             (*ptr).dtor_state.set(DtorState::RunningOrHasRun);\n             drop(value);\n+        })) {\n+            rtabort!(\"thread local panicked on drop\");\n         }\n     }\n }\n@@ -1044,10 +1048,8 @@ pub mod fast {\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n-    use crate::fmt;\n-    use crate::marker;\n-    use crate::ptr;\n     use crate::sys_common::thread_local_key::StaticKey as OsStaticKey;\n+    use crate::{fmt, marker, panic, ptr};\n \n     /// Use a regular global static to store this key; the state provided will then be\n     /// thread-local.\n@@ -1137,12 +1139,17 @@ pub mod os {\n         //\n         // Note that to prevent an infinite loop we reset it back to null right\n         // before we return from the destructor ourselves.\n-        unsafe {\n+        //\n+        // Wrap the call in a catch to ensure unwinding is caught in the event\n+        // a panic takes place in a destructor.\n+        if let Err(_) = panic::catch_unwind(|| unsafe {\n             let ptr = Box::from_raw(ptr as *mut Value<T>);\n             let key = ptr.key;\n             key.os.set(ptr::invalid_mut(1));\n             drop(ptr);\n             key.os.set(ptr::null_mut());\n+        }) {\n+            rtabort!(\"thread local panicked on drop\");\n         }\n     }\n }"}]}