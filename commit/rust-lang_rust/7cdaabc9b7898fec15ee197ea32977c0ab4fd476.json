{"sha": "7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "node_id": "C_kwDOAAsO6NoAKDdjZGFhYmM5Yjc4OThmZWMxNWVlMTk3ZWEzMjk3N2MwYWI0ZmQ0NzY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-04T02:12:26Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-25T11:55:30Z"}, "message": "Suggest `pointer::cast` when possible in `transmute_ptr_to_ref`\nDefensively add a cast to any type with lifetimes.", "tree": {"sha": "acfd6c5a2b09132ddd1b1bb3a255362ef9d656fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acfd6c5a2b09132ddd1b1bb3a255362ef9d656fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "html_url": "https://github.com/rust-lang/rust/commit/7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1", "html_url": "https://github.com/rust-lang/rust/commit/93ebd0e2db0e7c316cca3d35b077d19a79b4e7b1"}], "stats": {"total": 330, "additions": 265, "deletions": 65}, "files": [{"sha": "172c08a81680c481d6974bfef62c589cc50e55e0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -641,7 +641,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(borrow_deref_ref::BorrowDerefRef));\n     store.register_late_pass(|| Box::new(no_effect::NoEffect));\n     store.register_late_pass(|| Box::new(temporary_assignment::TemporaryAssignment));\n-    store.register_late_pass(|| Box::new(transmute::Transmute));\n+    store.register_late_pass(move || Box::new(transmute::Transmute::new(msrv)));\n     let cognitive_complexity_threshold = conf.cognitive_complexity_threshold;\n     store.register_late_pass(move || {\n         Box::new(cognitive_complexity::CognitiveComplexity::new("}, {"sha": "5f3e98144f42ddfb5ccf9ce5021e652e0369a08d", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -16,9 +16,10 @@ mod wrong_transmute;\n \n use clippy_utils::in_constant;\n use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n@@ -385,7 +386,10 @@ declare_clippy_lint! {\n     \"transmute to or from a type with an undefined representation\"\n }\n \n-declare_lint_pass!(Transmute => [\n+pub struct Transmute {\n+    msrv: Option<RustcVersion>,\n+}\n+impl_lint_pass!(Transmute => [\n     CROSSPOINTER_TRANSMUTE,\n     TRANSMUTE_PTR_TO_REF,\n     TRANSMUTE_PTR_TO_PTR,\n@@ -401,13 +405,18 @@ declare_lint_pass!(Transmute => [\n     TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS,\n     TRANSMUTE_UNDEFINED_REPR,\n ]);\n-\n+impl Transmute {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n impl<'tcx> LateLintPass<'tcx> for Transmute {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if_chain! {\n             if let ExprKind::Call(path_expr, [arg]) = e.kind;\n-            if let ExprKind::Path(ref qpath) = path_expr.kind;\n-            if let Some(def_id) = cx.qpath_res(qpath, path_expr.hir_id).opt_def_id();\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = path_expr.kind;\n+            if let Some(def_id) = path.res.opt_def_id();\n             if cx.tcx.is_diagnostic_item(sym::transmute, def_id);\n             then {\n                 // Avoid suggesting non-const operations in const contexts:\n@@ -427,7 +436,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n \n                 let linted = wrong_transmute::check(cx, e, from_ty, to_ty)\n                     | crosspointer_transmute::check(cx, e, from_ty, to_ty)\n-                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, qpath)\n+                    | transmute_ptr_to_ref::check(cx, e, from_ty, to_ty, arg, path, self.msrv)\n                     | transmute_int_to_char::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ref_to_ref::check(cx, e, from_ty, to_ty, arg, const_context)\n                     | transmute_ptr_to_ptr::check(cx, e, from_ty, to_ty, arg)\n@@ -446,4 +455,6 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }"}, {"sha": "3ed5d5c69508173d2a81ffdecbd1550c106ba39f", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -1,11 +1,12 @@\n-use super::utils::get_type_snippet;\n use super::TRANSMUTE_PTR_TO_REF;\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{meets_msrv, msrvs, sugg};\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, Mutability, QPath};\n+use rustc_hir::{self as hir, Expr, GenericArg, Mutability, Path, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty::{self, Ty, TypeFoldable};\n+use rustc_semver::RustcVersion;\n \n /// Checks for `transmute_ptr_to_ref` lint.\n /// Returns `true` if it's triggered, otherwise returns `false`.\n@@ -15,7 +16,8 @@ pub(super) fn check<'tcx>(\n     from_ty: Ty<'tcx>,\n     to_ty: Ty<'tcx>,\n     arg: &'tcx Expr<'_>,\n-    qpath: &'tcx QPath<'_>,\n+    path: &'tcx Path<'_>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     match (&from_ty.kind(), &to_ty.kind()) {\n         (ty::RawPtr(from_ptr_ty), ty::Ref(_, to_ref_ty, mutbl)) => {\n@@ -34,23 +36,49 @@ pub(super) fn check<'tcx>(\n                     } else {\n                         (\"&*\", \"*const\")\n                     };\n+                    let mut app = Applicability::MachineApplicable;\n \n-                    let arg = if from_ptr_ty.ty == *to_ref_ty {\n-                        arg\n+                    let sugg = if let Some(ty) = get_explicit_type(path) {\n+                        let ty_snip = snippet_with_applicability(cx, ty.span, \"..\", &mut app);\n+                        if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                            format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), ty_snip)\n+                        } else if from_ptr_ty.has_erased_regions() {\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, ty_snip)))\n+                                .to_string()\n+                        } else {\n+                            sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, ty_snip))).to_string()\n+                        }\n+                    } else if from_ptr_ty.ty == *to_ref_ty {\n+                        if from_ptr_ty.has_erased_regions() {\n+                            if meets_msrv(msrv, msrvs::POINTER_CAST) {\n+                                format!(\"{}{}.cast::<{}>()\", deref, arg.maybe_par(), to_ref_ty)\n+                            } else {\n+                                sugg::make_unop(deref, arg.as_ty(format!(\"{} () as {} {}\", cast, cast, to_ref_ty)))\n+                                    .to_string()\n+                            }\n+                        } else {\n+                            sugg::make_unop(deref, arg).to_string()\n+                        }\n                     } else {\n-                        arg.as_ty(&format!(\"{} {}\", cast, get_type_snippet(cx, qpath, *to_ref_ty)))\n+                        sugg::make_unop(deref, arg.as_ty(format!(\"{} {}\", cast, to_ref_ty))).to_string()\n                     };\n \n-                    diag.span_suggestion(\n-                        e.span,\n-                        \"try\",\n-                        sugg::make_unop(deref, arg).to_string(),\n-                        Applicability::Unspecified,\n-                    );\n+                    diag.span_suggestion(e.span, \"try\", sugg, app);\n                 },\n             );\n             true\n         },\n         _ => false,\n     }\n }\n+\n+/// Gets the type `Bar` in `\u2026::transmute<Foo, &Bar>`.\n+fn get_explicit_type<'tcx>(path: &'tcx Path<'tcx>) -> Option<&'tcx hir::Ty<'tcx>> {\n+    if let GenericArg::Type(ty) = path.segments.last()?.args?.args.get(1)?\n+        && let TyKind::Rptr(_, ty) = &ty.kind\n+    {\n+        Some(ty.ty)\n+    } else {\n+        None\n+    }\n+}"}, {"sha": "74927570b40ebe579ec00b3df789f8a7d5820e1f", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -1,35 +1,9 @@\n-use clippy_utils::last_path_segment;\n-use clippy_utils::source::snippet;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, GenericArg, QPath, TyKind};\n+use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n \n-/// Gets the snippet of `Bar` in `\u2026::transmute<Foo, &Bar>`. If that snippet is\n-/// not available , use\n-/// the type's `ToString` implementation. In weird cases it could lead to types\n-/// with invalid `'_`\n-/// lifetime, but it should be rare.\n-pub(super) fn get_type_snippet(cx: &LateContext<'_>, path: &QPath<'_>, to_ref_ty: Ty<'_>) -> String {\n-    let seg = last_path_segment(path);\n-    if_chain! {\n-        if let Some(params) = seg.args;\n-        if !params.parenthesized;\n-        if let Some(to_ty) = params.args.iter().filter_map(|arg| match arg {\n-            GenericArg::Type(ty) => Some(ty),\n-            _ => None,\n-        }).nth(1);\n-        if let TyKind::Rptr(_, ref to_ty) = to_ty.kind;\n-        then {\n-            return snippet(cx, to_ty.ty.span, &to_ref_ty.to_string()).to_string();\n-        }\n-    }\n-\n-    to_ref_ty.to_string()\n-}\n-\n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'tcx>) -> bool {"}, {"sha": "e5fe9133f975eebc1e6d6ff3821cecd36ba5480a", "filename": "tests/ui/transmute_ptr_to_ref.fixed", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.fixed?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -0,0 +1,78 @@\n+// run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n+#![warn(clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::match_single_binding)]\n+\n+unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n+    let _: &T = &*p;\n+    let _: &T = &*p;\n+\n+    let _: &mut T = &mut *m;\n+    let _: &mut T = &mut *m;\n+\n+    let _: &T = &*m;\n+    let _: &T = &*m;\n+\n+    let _: &mut T = &mut *(p as *mut T);\n+    let _ = &mut *(p as *mut T);\n+\n+    let _: &T = &*(o as *const T);\n+    let _: &T = &*(o as *const T);\n+\n+    let _: &mut T = &mut *(om as *mut T);\n+    let _: &mut T = &mut *(om as *mut T);\n+\n+    let _: &T = &*(om as *const T);\n+    let _: &T = &*(om as *const T);\n+}\n+\n+fn _issue1231() {\n+    struct Foo<'a, T> {\n+        bar: &'a T,\n+    }\n+\n+    let raw = 42 as *const i32;\n+    let _: &Foo<u8> = unsafe { &*raw.cast::<Foo<_>>() };\n+\n+    let _: &Foo<&u8> = unsafe { &*raw.cast::<Foo<&_>>() };\n+\n+    type Bar<'a> = &'a u8;\n+    let raw = 42 as *const i32;\n+    unsafe { &*(raw as *const u8) };\n+}\n+\n+unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {\n+    match 0 {\n+        0 => &*x.cast::<&u32>(),\n+        1 => &*y.cast::<&u32>(),\n+        2 => &*x.cast::<&'b u32>(),\n+        _ => &*y.cast::<&'b u32>(),\n+    }\n+}\n+\n+unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n+    #![clippy::msrv = \"1.38\"]\n+    let a = 0u32;\n+    let a = &a as *const u32;\n+    let _: &u32 = &*a;\n+    let _: &u32 = &*a.cast::<u32>();\n+    match 0 {\n+        0 => &*x.cast::<&u32>(),\n+        _ => &*x.cast::<&'b u32>(),\n+    }\n+}\n+\n+unsafe fn _under_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n+    #![clippy::msrv = \"1.37\"]\n+    let a = 0u32;\n+    let a = &a as *const u32;\n+    let _: &u32 = &*a;\n+    let _: &u32 = &*(a as *const u32);\n+    match 0 {\n+        0 => &*(x as *const () as *const &u32),\n+        _ => &*(x as *const () as *const &'b u32),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fe49cdc324fdd397e3db32cf85f46338753ae702", "filename": "tests/ui/transmute_ptr_to_ref.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.rs?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -1,4 +1,8 @@\n+// run-rustfix\n+\n+#![feature(custom_inner_attributes)]\n #![warn(clippy::transmute_ptr_to_ref)]\n+#![allow(clippy::match_single_binding)]\n \n unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = std::mem::transmute(p);\n@@ -23,7 +27,7 @@ unsafe fn _ptr_to_ref<T, U>(p: *const T, m: *mut T, o: *const U, om: *mut U) {\n     let _: &T = &*(om as *const T);\n }\n \n-fn issue1231() {\n+fn _issue1231() {\n     struct Foo<'a, T> {\n         bar: &'a T,\n     }\n@@ -38,4 +42,37 @@ fn issue1231() {\n     unsafe { std::mem::transmute::<_, Bar>(raw) };\n }\n \n+unsafe fn _issue8924<'a, 'b, 'c>(x: *const &'a u32, y: *const &'b u32) -> &'c &'b u32 {\n+    match 0 {\n+        0 => std::mem::transmute(x),\n+        1 => std::mem::transmute(y),\n+        2 => std::mem::transmute::<_, &&'b u32>(x),\n+        _ => std::mem::transmute::<_, &&'b u32>(y),\n+    }\n+}\n+\n+unsafe fn _meets_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n+    #![clippy::msrv = \"1.38\"]\n+    let a = 0u32;\n+    let a = &a as *const u32;\n+    let _: &u32 = std::mem::transmute(a);\n+    let _: &u32 = std::mem::transmute::<_, &u32>(a);\n+    match 0 {\n+        0 => std::mem::transmute(x),\n+        _ => std::mem::transmute::<_, &&'b u32>(x),\n+    }\n+}\n+\n+unsafe fn _under_msrv<'a, 'b, 'c>(x: *const &'a u32) -> &'c &'b u32 {\n+    #![clippy::msrv = \"1.37\"]\n+    let a = 0u32;\n+    let a = &a as *const u32;\n+    let _: &u32 = std::mem::transmute(a);\n+    let _: &u32 = std::mem::transmute::<_, &u32>(a);\n+    match 0 {\n+        0 => std::mem::transmute(x),\n+        _ => std::mem::transmute::<_, &&'b u32>(x),\n+    }\n+}\n+\n fn main() {}"}, {"sha": "2993e5e7b0c91d45ac297ce04cc93dceb24d928b", "filename": "tests/ui/transmute_ptr_to_ref.stderr", "status": "modified", "additions": 87, "deletions": 15, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7cdaabc9b7898fec15ee197ea32977c0ab4fd476/tests%2Fui%2Ftransmute_ptr_to_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_ptr_to_ref.stderr?ref=7cdaabc9b7898fec15ee197ea32977c0ab4fd476", "patch": "@@ -1,64 +1,136 @@\n error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:4:17\n+  --> $DIR/transmute_ptr_to_ref.rs:8:17\n    |\n LL |     let _: &T = std::mem::transmute(p);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*p`\n    |\n    = note: `-D clippy::transmute-ptr-to-ref` implied by `-D warnings`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:7:21\n+  --> $DIR/transmute_ptr_to_ref.rs:11:21\n    |\n LL |     let _: &mut T = std::mem::transmute(m);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:10:17\n+  --> $DIR/transmute_ptr_to_ref.rs:14:17\n    |\n LL |     let _: &T = std::mem::transmute(m);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*m`\n \n error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:13:21\n+  --> $DIR/transmute_ptr_to_ref.rs:17:21\n    |\n LL |     let _: &mut T = std::mem::transmute(p as *mut T);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(p as *mut T)`\n \n error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:16:17\n+  --> $DIR/transmute_ptr_to_ref.rs:20:17\n    |\n LL |     let _: &T = std::mem::transmute(o);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(o as *const T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:19:21\n+  --> $DIR/transmute_ptr_to_ref.rs:23:21\n    |\n LL |     let _: &mut T = std::mem::transmute(om);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&mut *(om as *mut T)`\n \n error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n-  --> $DIR/transmute_ptr_to_ref.rs:22:17\n+  --> $DIR/transmute_ptr_to_ref.rs:26:17\n    |\n LL |     let _: &T = std::mem::transmute(om);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(om as *const T)`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:32:32\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<u8>`)\n+  --> $DIR/transmute_ptr_to_ref.rs:36:32\n    |\n LL |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n-   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<_>)`\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<_>>()`\n \n-error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<&u8>`)\n-  --> $DIR/transmute_ptr_to_ref.rs:34:33\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&_issue1231::Foo<&u8>`)\n+  --> $DIR/transmute_ptr_to_ref.rs:38:33\n    |\n LL |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n-   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const Foo<&_>)`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*raw.cast::<Foo<&_>>()`\n \n error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n-  --> $DIR/transmute_ptr_to_ref.rs:38:14\n+  --> $DIR/transmute_ptr_to_ref.rs:42:14\n    |\n LL |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(raw as *const u8)`\n \n-error: aborting due to 10 previous errors\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:47:14\n+   |\n+LL |         0 => std::mem::transmute(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:48:14\n+   |\n+LL |         1 => std::mem::transmute(y),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&u32>()`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:49:14\n+   |\n+LL |         2 => std::mem::transmute::<_, &&'b u32>(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:50:14\n+   |\n+LL |         _ => std::mem::transmute::<_, &&'b u32>(y),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*y.cast::<&'b u32>()`\n+\n+error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:58:19\n+   |\n+LL |     let _: &u32 = std::mem::transmute(a);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n+\n+error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:59:19\n+   |\n+LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a.cast::<u32>()`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:61:14\n+   |\n+LL |         0 => std::mem::transmute(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&u32>()`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:62:14\n+   |\n+LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*x.cast::<&'b u32>()`\n+\n+error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:70:19\n+   |\n+LL |     let _: &u32 = std::mem::transmute(a);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*a`\n+\n+error: transmute from a pointer type (`*const u32`) to a reference type (`&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:71:19\n+   |\n+LL |     let _: &u32 = std::mem::transmute::<_, &u32>(a);\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(a as *const u32)`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:73:14\n+   |\n+LL |         0 => std::mem::transmute(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &u32)`\n+\n+error: transmute from a pointer type (`*const &u32`) to a reference type (`&&u32`)\n+  --> $DIR/transmute_ptr_to_ref.rs:74:14\n+   |\n+LL |         _ => std::mem::transmute::<_, &&'b u32>(x),\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&*(x as *const () as *const &'b u32)`\n+\n+error: aborting due to 22 previous errors\n "}]}