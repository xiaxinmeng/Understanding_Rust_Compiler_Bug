{"sha": "0e87f9ed02fed336fa771f300ea362e0ab674c4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODdmOWVkMDJmZWQzMzZmYTc3MWYzMDBlYTM2MmUwYWI2NzRjNGY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-15T10:44:32Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-04-15T10:44:32Z"}, "message": "syntax: Eliminate token's dependency on lexer", "tree": {"sha": "ca69f489681c449faa30aff3c43104f15ac64af8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca69f489681c449faa30aff3c43104f15ac64af8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e87f9ed02fed336fa771f300ea362e0ab674c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e87f9ed02fed336fa771f300ea362e0ab674c4f", "html_url": "https://github.com/rust-lang/rust/commit/0e87f9ed02fed336fa771f300ea362e0ab674c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e87f9ed02fed336fa771f300ea362e0ab674c4f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "932aa893fd302172f6d5cabc64f092a159d2a0e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/932aa893fd302172f6d5cabc64f092a159d2a0e5", "html_url": "https://github.com/rust-lang/rust/commit/932aa893fd302172f6d5cabc64f092a159d2a0e5"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "a21c8183c5379f2d9183aa58a69ab8973c9f332d", "filename": "src/librustsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fcomments.rs?ref=0e87f9ed02fed336fa771f300ea362e0ab674c4f", "patch": "@@ -187,7 +187,7 @@ fn gather_comments_and_literals(cm: codemap::codemap,\n             literals += [{lit: s, pos: tok.chpos}];\n             log(debug, \"tok lit: \" + s);\n         } else {\n-            log(debug, \"tok: \" + token::to_str(rdr, tok.tok));\n+            log(debug, \"tok: \" + token::to_str(*rdr.interner, tok.tok));\n         }\n         first_read = false;\n     }"}, {"sha": "031b54af3d6c37c50b03458ef727f8378547a6b5", "filename": "src/librustsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Fparser.rs?ref=0e87f9ed02fed336fa771f300ea362e0ab674c4f", "patch": "@@ -155,23 +155,27 @@ fn bad_expr_word_table() -> hashmap<str, ()> {\n     words\n }\n \n+fn token_to_str(reader: reader, token: token::token) -> str {\n+    token::to_str(*reader.interner, token)\n+}\n+\n fn unexpected_last(p: parser, t: token::token) -> ! {\n     p.span_fatal(p.last_span,\n-                 \"unexpected token: '\" + token::to_str(p.reader, t) + \"'\");\n+                 \"unexpected token: '\" + token_to_str(p.reader, t) + \"'\");\n }\n \n fn unexpected(p: parser) -> ! {\n-    p.fatal(\"unexpected token: '\" + token::to_str(p.reader, p.token) + \"'\");\n+    p.fatal(\"unexpected token: '\" + token_to_str(p.reader, p.token) + \"'\");\n }\n \n fn expect(p: parser, t: token::token) {\n     if p.token == t {\n         p.bump();\n     } else {\n         let mut s: str = \"expecting '\";\n-        s += token::to_str(p.reader, t);\n+        s += token_to_str(p.reader, t);\n         s += \"' but found '\";\n-        s += token::to_str(p.reader, p.token);\n+        s += token_to_str(p.reader, p.token);\n         p.fatal(s + \"'\");\n     }\n }\n@@ -185,9 +189,9 @@ fn expect_gt(p: parser) {\n         p.swap(token::BINOP(token::LSR), p.span.lo + 1u, p.span.hi);\n     } else {\n         let mut s: str = \"expecting \";\n-        s += token::to_str(p.reader, token::GT);\n+        s += token_to_str(p.reader, token::GT);\n         s += \", found \";\n-        s += token::to_str(p.reader, p.token);\n+        s += token_to_str(p.reader, p.token);\n         p.fatal(s);\n     }\n }\n@@ -200,7 +204,7 @@ fn parse_ident(p: parser) -> ast::ident {\n     alt p.token {\n       token::IDENT(i, _) { p.bump(); ret p.get_str(i); }\n       _ { p.fatal(\"expecting ident, found \"\n-                  + token::to_str(p.reader, p.token)); }\n+                  + token_to_str(p.reader, p.token)); }\n     }\n }\n \n@@ -242,7 +246,7 @@ fn eat_word(p: parser, word: str) -> bool {\n fn expect_word(p: parser, word: str) {\n     if !eat_word(p, word) {\n         p.fatal(\"expecting \" + word + \", found \" +\n-                    token::to_str(p.reader, p.token));\n+                    token_to_str(p.reader, p.token));\n     }\n }\n \n@@ -1626,7 +1630,7 @@ fn parse_pat(p: parser) -> @ast::pat {\n                 p.bump();\n                 if p.token != token::RBRACE {\n                     p.fatal(\"expecting }, found \" +\n-                                token::to_str(p.reader, p.token));\n+                                token_to_str(p.reader, p.token));\n                 }\n                 etc = true;\n                 break;\n@@ -1926,7 +1930,7 @@ fn parse_block_tail_(p: parser, lo: uint, s: ast::blk_check_mode,\n                   t {\n                     if stmt_ends_with_semi(*stmt) {\n                         p.fatal(\"expected ';' or '}' after expression but \\\n-                                 found '\" + token::to_str(p.reader, t) +\n+                                 found '\" + token_to_str(p.reader, t) +\n                                 \"'\");\n                     }\n                     stmts += [stmt];\n@@ -2251,7 +2255,7 @@ fn parse_mod_items(p: parser, term: token::token,\n           some(i) { items += [i]; }\n           _ {\n             p.fatal(\"expected item but found '\" +\n-                    token::to_str(p.reader, p.token) + \"'\");\n+                    token_to_str(p.reader, p.token) + \"'\");\n           }\n         }\n         #debug[\"parse_mod_items: attrs=%?\", attrs];"}, {"sha": "1c0b4721e1897807a56fda5ed70356b742668a73", "filename": "src/librustsyntax/parse/token.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e87f9ed02fed336fa771f300ea362e0ab674c4f/src%2Flibrustsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustsyntax%2Fparse%2Ftoken.rs?ref=0e87f9ed02fed336fa771f300ea362e0ab674c4f", "patch": "@@ -1,6 +1,6 @@\n \n import util::interner;\n-import lexer::reader;\n+import util::interner::interner;\n \n type str_num = uint;\n \n@@ -90,7 +90,7 @@ fn binop_to_str(o: binop) -> str {\n     }\n }\n \n-fn to_str(r: reader, t: token) -> str {\n+fn to_str(in: interner<str>, t: token) -> str {\n     alt t {\n       EQ { ret \"=\"; }\n       LT { ret \"<\"; }\n@@ -149,17 +149,17 @@ fn to_str(r: reader, t: token) -> str {\n         ret uint::to_str(u as uint, 10u) + ast_util::uint_ty_to_str(t);\n       }\n       LIT_FLOAT(s, t) {\n-        ret interner::get::<str>(*r.interner, s) +\n+        ret interner::get::<str>(in, s) +\n             ast_util::float_ty_to_str(t);\n       }\n       LIT_STR(s) { // FIXME: escape.\n-        ret \"\\\"\" + interner::get::<str>(*r.interner, s) + \"\\\"\";\n+        ret \"\\\"\" + interner::get::<str>(in, s) + \"\\\"\";\n       }\n       LIT_BOOL(b) { if b { ret \"true\"; } else { ret \"false\"; } }\n \n       /* Name components */\n       IDENT(s, _) {\n-        ret interner::get::<str>(*r.interner, s);\n+        ret interner::get::<str>(in, s);\n       }\n       IDX(i) { ret \"_\" + int::to_str(i, 10u); }\n       UNDERSCORE { ret \"_\"; }"}]}