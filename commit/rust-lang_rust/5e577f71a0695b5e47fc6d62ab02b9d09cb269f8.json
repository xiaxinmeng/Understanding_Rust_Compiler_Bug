{"sha": "5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "node_id": "C_kwDOAAsO6NoAKDVlNTc3ZjcxYTA2OTViNWU0N2ZjNmQ2MmFiMDJiOWQwOWNiMjY5Zjg", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-01-21T09:35:18Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-01-24T12:42:41Z"}, "message": "[debuginfo] Fix and unify handling of fat pointers in debuginfo: address review comments.", "tree": {"sha": "3c5f604e0a32f7ac3fc93b4310ebd7103c2dc021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5f604e0a32f7ac3fc93b4310ebd7103c2dc021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "html_url": "https://github.com/rust-lang/rust/commit/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2367eeccec35a0ac58e12bc83bc6f639385b7df", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2367eeccec35a0ac58e12bc83bc6f639385b7df", "html_url": "https://github.com/rust-lang/rust/commit/e2367eeccec35a0ac58e12bc83bc6f639385b7df"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "b5d86aab88019b0e3d7de0f657ce2a5eac78e601", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "patch": "@@ -555,8 +555,8 @@ fn subroutine_type_metadata<'ll, 'tcx>(\n     )\n }\n \n-// Create debuginfo for `dyn SomeTrait` types. Currently these are empty structs\n-// we with the correct type name (e.g. \"dyn SomeTrait<Foo, Item=u32> + Sync\").\n+/// Create debuginfo for `dyn SomeTrait` types. Currently these are empty structs\n+/// we with the correct type name (e.g. \"dyn SomeTrait<Foo, Item=u32> + Sync\").\n fn dyn_type_metadata<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     dyn_type: Ty<'tcx>,\n@@ -570,23 +570,23 @@ fn dyn_type_metadata<'ll, 'tcx>(\n     }\n }\n \n-// Create debuginfo for `[T]` and `str`. These are unsized.\n-//\n-// Note: We currently emit just emit the debuginfo for the element type here\n-//       (i.e. `T` for slices and `u8` for `str`), so that we end up with\n-//       `*const T` for the `data_ptr` field of the corresponding fat-pointer\n-//       debuginfo of `&[T]`.\n-//\n-//       It would be preferable and more accurate if we emitted a DIArray of T\n-//       without an upper bound instead. That is, LLVM already supports emitting\n-//       debuginfo of arrays of unknown size. But GDB currently seems to end up\n-//       in an infinite loop when confronted with such a type.\n-//\n-//       As a side effect of the current encoding every instance of a type like\n-//       `struct Foo { unsized_field: [u8] }` will look like\n-//       `struct Foo { unsized_field: u8 }` in debuginfo. If the length of the\n-//       slice is zero, then accessing `unsized_field` in the debugger would\n-//       result in an out-of-bounds access.\n+/// Create debuginfo for `[T]` and `str`. These are unsized.\n+///\n+/// Note: We currently emit just emit the debuginfo for the element type here\n+///       (i.e. `T` for slices and `u8` for `str`), so that we end up with\n+///       `*const T` for the `data_ptr` field of the corresponding fat-pointer\n+///       debuginfo of `&[T]`.\n+///\n+///       It would be preferable and more accurate if we emitted a DIArray of T\n+///       without an upper bound instead. That is, LLVM already supports emitting\n+///       debuginfo of arrays of unknown size. But GDB currently seems to end up\n+///       in an infinite loop when confronted with such a type.\n+///\n+///       As a side effect of the current encoding every instance of a type like\n+///       `struct Foo { unsized_field: [u8] }` will look like\n+///       `struct Foo { unsized_field: u8 }` in debuginfo. If the length of the\n+///       slice is zero, then accessing `unsized_field` in the debugger would\n+///       result in an out-of-bounds access.\n fn slice_type_metadata<'ll, 'tcx>(\n     cx: &CodegenCx<'ll, 'tcx>,\n     slice_type: Ty<'tcx>,"}, {"sha": "f0612eaba8089f314aa631ec3555b7468c286424", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e577f71a0695b5e47fc6d62ab02b9d09cb269f8/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=5e577f71a0695b5e47fc6d62ab02b9d09cb269f8", "patch": "@@ -10,7 +10,6 @@\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(nll)]\n-#![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}]}