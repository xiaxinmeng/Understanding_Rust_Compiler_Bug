{"sha": "ae6a1a7043ce68e75cbc740dcdca792057df1555", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNmExYTcwNDNjZTY4ZTc1Y2JjNzQwZGNkY2E3OTIwNTdkZjE1NTU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-05-26T04:30:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T04:30:58Z"}, "message": "Rollup merge of #85529 - tlyu:trylock-errors, r=JohnTitor\n\ndoc: clarify Mutex::try_lock, etc. errors\n\nClarify error returns from Mutex::try_lock, RwLock::try_read,\nRwLock::try_write to make it more obvious that both poisoning\nand the lock being already locked are possible errors.", "tree": {"sha": "23c283cd216c6e61293ec897ae52553e38b5c922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23c283cd216c6e61293ec897ae52553e38b5c922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae6a1a7043ce68e75cbc740dcdca792057df1555", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrc8CCRBK7hj4Ov3rIwAAedQIACk8BSONK2US5MxyDlk/bMaq\nZoPuIkxXYPxJg9gKCnNsahtS+se025QQ2CvEx3G/SY99Zh70xeI/Ngsg0x7o/mFX\n6tLgBb0fqzno6nI4SmwuikWEsW5sFOQApVtBhjHNdIqU3pfpKXU0rwPAPe1qsqXM\nplVSKpzhdLqi/hwr4Qk0Mrht6ObQww6xbTJ218wx/uMB06leJ2Bb8/ZF75cKZi58\nX/N21kZXvJ8ODlcxe8PjVfSr03fJHinOw1JoI9LXfseMXmW8OmDPzQrUXTP7XuHZ\nIHJ7lxyPRBaWybJIkrPMTychiTzo8btMctOJHc7EW8RnEKeHIaSAEPOmVbUgjXE=\n=96Jl\n-----END PGP SIGNATURE-----\n", "payload": "tree 23c283cd216c6e61293ec897ae52553e38b5c922\nparent 0264f4fe4aa5c91773a82aa60fc3ebdb5f24ec2f\nparent 0e4f8cb661f66be0d02961d25b8f30d2b13c7af9\nauthor Yuki Okushi <jtitor@2k36.org> 1622003458 +0900\ncommitter GitHub <noreply@github.com> 1622003458 +0900\n\nRollup merge of #85529 - tlyu:trylock-errors, r=JohnTitor\n\ndoc: clarify Mutex::try_lock, etc. errors\n\nClarify error returns from Mutex::try_lock, RwLock::try_read,\nRwLock::try_write to make it more obvious that both poisoning\nand the lock being already locked are possible errors.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6a1a7043ce68e75cbc740dcdca792057df1555", "html_url": "https://github.com/rust-lang/rust/commit/ae6a1a7043ce68e75cbc740dcdca792057df1555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae6a1a7043ce68e75cbc740dcdca792057df1555/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0264f4fe4aa5c91773a82aa60fc3ebdb5f24ec2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0264f4fe4aa5c91773a82aa60fc3ebdb5f24ec2f", "html_url": "https://github.com/rust-lang/rust/commit/0264f4fe4aa5c91773a82aa60fc3ebdb5f24ec2f"}, {"sha": "0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9", "html_url": "https://github.com/rust-lang/rust/commit/0e4f8cb661f66be0d02961d25b8f30d2b13c7af9"}], "stats": {"total": 37, "additions": 28, "deletions": 9}, "files": [{"sha": "e7c5479ab9bb6fa59fd621adab13c5b0ddbc0de5", "filename": "library/std/src/sync/mutex.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae6a1a7043ce68e75cbc740dcdca792057df1555/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6a1a7043ce68e75cbc740dcdca792057df1555/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmutex.rs?ref=ae6a1a7043ce68e75cbc740dcdca792057df1555", "patch": "@@ -294,8 +294,14 @@ impl<T: ?Sized> Mutex<T> {\n     /// # Errors\n     ///\n     /// If another user of this mutex panicked while holding the mutex, then\n-    /// this call will return an error if the mutex would otherwise be\n-    /// acquired.\n+    /// this call will return the [`Poisoned`] error if the mutex would\n+    /// otherwise be acquired.\n+    ///\n+    /// If the mutex could not be acquired because it is already locked, then\n+    /// this call will return the [`WouldBlock`] error.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n     ///\n     /// # Examples\n     ///"}, {"sha": "9d521ab14cbf3b264a052edb556977a129612c12", "filename": "library/std/src/sync/rwlock.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ae6a1a7043ce68e75cbc740dcdca792057df1555/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae6a1a7043ce68e75cbc740dcdca792057df1555/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Frwlock.rs?ref=ae6a1a7043ce68e75cbc740dcdca792057df1555", "patch": "@@ -199,11 +199,17 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n+    /// This function will return the [`Poisoned`] error if the RwLock is poisoned.\n+    /// An RwLock is poisoned whenever a writer panics while holding an exclusive\n+    /// lock. `Poisoned` will only be returned if the lock would have otherwise been\n     /// acquired.\n     ///\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n+    /// be acquired because it was already locked exclusively.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -281,10 +287,17 @@ impl<T: ?Sized> RwLock<T> {\n     ///\n     /// # Errors\n     ///\n-    /// This function will return an error if the RwLock is poisoned. An RwLock\n-    /// is poisoned whenever a writer panics while holding an exclusive lock. An\n-    /// error will only be returned if the lock would have otherwise been\n-    /// acquired.\n+    /// This function will return the [`Poisoned`] error if the RwLock is\n+    /// poisoned. An RwLock is poisoned whenever a writer panics while holding\n+    /// an exclusive lock. `Poisoned` will only be returned if the lock would have\n+    /// otherwise been acquired.\n+    ///\n+    /// This function will return the [`WouldBlock`] error if the RwLock could not\n+    /// be acquired because it was already locked exclusively.\n+    ///\n+    /// [`Poisoned`]: TryLockError::Poisoned\n+    /// [`WouldBlock`]: TryLockError::WouldBlock\n+    ///\n     ///\n     /// # Examples\n     ///"}]}