{"sha": "267d55d44acf6bb2821de39d4f868650ff0a9c7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2N2Q1NWQ0NGFjZjZiYjI4MjFkZTM5ZDRmODY4NjUwZmYwYTljN2I=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T09:39:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-07T16:48:58Z"}, "message": "Use the object crate for metadata reading", "tree": {"sha": "c1962492dc5dd6e79d66591a1de5400b1d0de935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1962492dc5dd6e79d66591a1de5400b1d0de935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/267d55d44acf6bb2821de39d4f868650ff0a9c7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/267d55d44acf6bb2821de39d4f868650ff0a9c7b", "html_url": "https://github.com/rust-lang/rust/commit/267d55d44acf6bb2821de39d4f868650ff0a9c7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/267d55d44acf6bb2821de39d4f868650ff0a9c7b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5f83d24aee866a14753a7cedbb4e301dfe5bef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5f83d24aee866a14753a7cedbb4e301dfe5bef5", "html_url": "https://github.com/rust-lang/rust/commit/e5f83d24aee866a14753a7cedbb4e301dfe5bef5"}], "stats": {"total": 235, "additions": 79, "deletions": 156}, "files": [{"sha": "dc688e3a513ccfa9f10d042bc3d5cec176429dda", "filename": "Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -2348,8 +2348,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8d3b63360ec3cb337817c2dbd47ab4a0f170d285d8e5a2064600f3def1402397\"\n dependencies = [\n  \"compiler_builtins\",\n+ \"flate2\",\n  \"rustc-std-workspace-alloc\",\n  \"rustc-std-workspace-core\",\n+ \"wasmparser\",\n ]\n \n [[package]]\n@@ -3700,6 +3702,7 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"jobserver\",\n  \"libc\",\n+ \"object\",\n  \"pathdiff\",\n  \"rustc_apfloat\",\n  \"rustc_ast\",\n@@ -5618,6 +5621,12 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n+[[package]]\n+name = \"wasmparser\"\n+version = \"0.57.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32fddd575d477c6e9702484139cf9f23dcd554b06d185ed0f56c857dd3a47aa6\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.2.8\""}, {"sha": "1ade7c77d123a317fe6aed2ca506c533db3111ad", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -165,7 +165,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n-        Box::new(crate::metadata::CraneliftMetadataLoader)\n+        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n     }\n \n     fn provide(&self, _providers: &mut Providers) {}"}, {"sha": "ab238244d68d504c983bfff1ffea366fd6eb7c5f", "filename": "compiler/rustc_codegen_cranelift/src/metadata.rs", "status": "modified", "additions": 1, "deletions": 65, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fmetadata.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -1,73 +1,9 @@\n-//! Reading and writing of the rustc metadata for rlibs and dylibs\n+//! Writing of the rustc metadata for dylibs\n \n-use std::fs::File;\n-use std::path::Path;\n-\n-use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::memmap::Mmap;\n-use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::rustc_erase_owner;\n-use rustc_data_structures::sync::MetadataRef;\n-use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_middle::ty::TyCtxt;\n-use rustc_target::spec::Target;\n \n use crate::backend::WriteMetadata;\n \n-/// The metadata loader used by cg_clif.\n-///\n-/// The metadata is stored in the same format as cg_llvm.\n-///\n-/// # Metadata location\n-///\n-/// <dl>\n-/// <dt>rlib</dt>\n-/// <dd>The metadata can be found in the `lib.rmeta` file inside of the ar archive.</dd>\n-/// <dt>dylib</dt>\n-/// <dd>The metadata can be found in the `.rustc` section of the shared library.</dd>\n-/// </dl>\n-pub(crate) struct CraneliftMetadataLoader;\n-\n-fn load_metadata_with(\n-    path: &Path,\n-    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n-) -> Result<MetadataRef, String> {\n-    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n-    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n-    let metadata = OwningRef::new(data).try_map(f)?;\n-    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n-}\n-\n-impl MetadataLoader for CraneliftMetadataLoader {\n-    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        load_metadata_with(path, |data| {\n-            let archive = object::read::archive::ArchiveFile::parse(&*data)\n-                .map_err(|e| format!(\"{:?}\", e))?;\n-\n-            for entry_result in archive.members() {\n-                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n-                if entry.name() == METADATA_FILENAME.as_bytes() {\n-                    return Ok(entry.data());\n-                }\n-            }\n-\n-            Err(\"couldn't find metadata entry\".to_string())\n-        })\n-    }\n-\n-    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n-        use object::{Object, ObjectSection};\n-\n-        load_metadata_with(path, |data| {\n-            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n-            file.section_by_name(\".rustc\")\n-                .ok_or(\"no .rustc section\")?\n-                .data()\n-                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n-        })\n-    }\n-}\n-\n // Adapted from https://github.com/rust-lang/rust/blob/da573206f87b5510de4b0ee1a9c044127e409bd3/src/librustc_codegen_llvm/base.rs#L47-L112\n pub(crate) fn write_metadata<O: WriteMetadata>(tcx: TyCtxt<'_>, object: &mut O) {\n     use snap::write::FrameEncoder;"}, {"sha": "8f95afc1b918131fd5711c936a6038494fd898f6", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -250,7 +250,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n     }\n \n     fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n-        Box::new(metadata::LlvmMetadataLoader)\n+        Box::new(rustc_codegen_ssa::back::metadata::DefaultMetadataLoader)\n     }\n \n     fn provide(&self, providers: &mut ty::query::Providers) {"}, {"sha": "4bad93a75674bd64cde1c034aabcc2ad59b2d55e", "filename": "compiler/rustc_codegen_llvm/src/metadata.rs", "status": "modified", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmetadata.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -1,94 +1,9 @@\n-use crate::llvm;\n-use crate::llvm::archive_ro::ArchiveRO;\n-use crate::llvm::{mk_section_iter, False, ObjectFile};\n-use rustc_middle::middle::cstore::MetadataLoader;\n use rustc_target::spec::Target;\n \n-use rustc_codegen_ssa::METADATA_FILENAME;\n-use rustc_data_structures::owning_ref::OwningRef;\n-use rustc_data_structures::rustc_erase_owner;\n-use tracing::debug;\n-\n use rustc_fs_util::path_to_c_string;\n use std::path::Path;\n use std::slice;\n \n-pub use rustc_data_structures::sync::MetadataRef;\n-\n-pub struct LlvmMetadataLoader;\n-\n-impl MetadataLoader for LlvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n-        // internally to read the file. We also avoid even using a memcpy by\n-        // just keeping the archive along while the metadata is in use.\n-        let archive =\n-            ArchiveRO::open(filename).map(|ar| OwningRef::new(Box::new(ar))).map_err(|e| {\n-                debug!(\"llvm didn't like `{}`: {}\", filename.display(), e);\n-                format!(\"failed to read rlib metadata in '{}': {}\", filename.display(), e)\n-            })?;\n-        let buf: OwningRef<_, [u8]> = archive.try_map(|ar| {\n-            ar.iter()\n-                .filter_map(|s| s.ok())\n-                .find(|sect| sect.name() == Some(METADATA_FILENAME))\n-                .map(|s| s.data())\n-                .ok_or_else(|| {\n-                    debug!(\"didn't find '{}' in the archive\", METADATA_FILENAME);\n-                    format!(\"failed to read rlib metadata: '{}'\", filename.display())\n-                })\n-        })?;\n-        Ok(rustc_erase_owner!(buf))\n-    }\n-\n-    fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String> {\n-        unsafe {\n-            let buf = path_to_c_string(filename);\n-            let mb = llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf.as_ptr())\n-                .ok_or_else(|| format!(\"error reading library: '{}'\", filename.display()))?;\n-            let of =\n-                ObjectFile::new(mb).map(|of| OwningRef::new(Box::new(of))).ok_or_else(|| {\n-                    format!(\"provided path not an object file: '{}'\", filename.display())\n-                })?;\n-            let buf = of.try_map(|of| search_meta_section(of, target, filename))?;\n-            Ok(rustc_erase_owner!(buf))\n-        }\n-    }\n-}\n-\n-fn search_meta_section<'a>(\n-    of: &'a ObjectFile,\n-    target: &Target,\n-    filename: &Path,\n-) -> Result<&'a [u8], String> {\n-    unsafe {\n-        let si = mk_section_iter(of.llof);\n-        while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n-            let mut name_buf = None;\n-            let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n-            let name = name_buf.map_or_else(\n-                String::new, // We got a null ptr, ignore `name_len`.\n-                |buf| {\n-                    String::from_utf8(\n-                        slice::from_raw_parts(buf.as_ptr() as *const u8, name_len as usize)\n-                            .to_vec(),\n-                    )\n-                    .unwrap()\n-                },\n-            );\n-            debug!(\"get_metadata_section: name {}\", name);\n-            if read_metadata_section_name(target) == name {\n-                let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n-                let csz = llvm::LLVMGetSectionSize(si.llsi) as usize;\n-                // The buffer is valid while the object file is around\n-                let buf: &'a [u8] = slice::from_raw_parts(cbuf as *const u8, csz);\n-                return Ok(buf);\n-            }\n-            llvm::LLVMMoveToNextSection(si.llsi);\n-        }\n-    }\n-    Err(format!(\"metadata not found: '{}'\", filename.display()))\n-}\n-\n pub fn metadata_section_name(target: &Target) -> &'static str {\n     // Historical note:\n     //\n@@ -106,7 +21,3 @@ pub fn metadata_section_name(target: &Target) -> &'static str {\n \n     if target.is_like_osx { \"__DATA,.rustc\" } else { \".rustc\" }\n }\n-\n-fn read_metadata_section_name(_target: &Target) -> &'static str {\n-    \".rustc\"\n-}"}, {"sha": "d7d91d09cfa9f2d7dc1a1ccd0c49d7ee9696f0b0", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -16,6 +16,7 @@ libc = \"0.2.50\"\n jobserver = \"0.1.22\"\n tempfile = \"3.2\"\n pathdiff = \"0.2.0\"\n+object = \"0.22.0\"\n \n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }"}, {"sha": "096098fb260c7b17eebae04e69bb961474726c95", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -0,0 +1,65 @@\n+//! Reading of the rustc metadata for rlibs and dylibs\n+\n+use std::fs::File;\n+use std::path::Path;\n+\n+use rustc_data_structures::memmap::Mmap;\n+use rustc_data_structures::owning_ref::OwningRef;\n+use rustc_data_structures::rustc_erase_owner;\n+use rustc_data_structures::sync::MetadataRef;\n+use rustc_middle::middle::cstore::MetadataLoader;\n+use rustc_target::spec::Target;\n+\n+use crate::METADATA_FILENAME;\n+\n+/// The default metadata loader. This is used by cg_llvm and cg_clif.\n+///\n+/// # Metadata location\n+///\n+/// <dl>\n+/// <dt>rlib</dt>\n+/// <dd>The metadata can be found in the `lib.rmeta` file inside of the ar archive.</dd>\n+/// <dt>dylib</dt>\n+/// <dd>The metadata can be found in the `.rustc` section of the shared library.</dd>\n+/// </dl>\n+pub struct DefaultMetadataLoader;\n+\n+fn load_metadata_with(\n+    path: &Path,\n+    f: impl for<'a> FnOnce(&'a [u8]) -> Result<&'a [u8], String>,\n+) -> Result<MetadataRef, String> {\n+    let file = File::open(path).map_err(|e| format!(\"{:?}\", e))?;\n+    let data = unsafe { Mmap::map(file) }.map_err(|e| format!(\"{:?}\", e))?;\n+    let metadata = OwningRef::new(data).try_map(f)?;\n+    return Ok(rustc_erase_owner!(metadata.map_owner_box()));\n+}\n+\n+impl MetadataLoader for DefaultMetadataLoader {\n+    fn get_rlib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+        load_metadata_with(path, |data| {\n+            let archive = object::read::archive::ArchiveFile::parse(&*data)\n+                .map_err(|e| format!(\"{:?}\", e))?;\n+\n+            for entry_result in archive.members() {\n+                let entry = entry_result.map_err(|e| format!(\"{:?}\", e))?;\n+                if entry.name() == METADATA_FILENAME.as_bytes() {\n+                    return Ok(entry.data());\n+                }\n+            }\n+\n+            Err(\"couldn't find metadata entry\".to_string())\n+        })\n+    }\n+\n+    fn get_dylib_metadata(&self, _target: &Target, path: &Path) -> Result<MetadataRef, String> {\n+        use object::{Object, ObjectSection};\n+\n+        load_metadata_with(path, |data| {\n+            let file = object::File::parse(&data).map_err(|e| format!(\"parse: {:?}\", e))?;\n+            file.section_by_name(\".rustc\")\n+                .ok_or(\"no .rustc section\")?\n+                .data()\n+                .map_err(|e| format!(\"failed to read .rustc section: {:?}\", e))\n+        })\n+    }\n+}"}, {"sha": "d11ed54eb209f969ffe88f1709379ab7b6fac785", "filename": "compiler/rustc_codegen_ssa/src/back/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/267d55d44acf6bb2821de39d4f868650ff0a9c7b/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmod.rs?ref=267d55d44acf6bb2821de39d4f868650ff0a9c7b", "patch": "@@ -3,6 +3,7 @@ pub mod command;\n pub mod link;\n pub mod linker;\n pub mod lto;\n+pub mod metadata;\n pub mod rpath;\n pub mod symbol_export;\n pub mod write;"}]}