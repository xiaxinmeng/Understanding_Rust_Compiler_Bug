{"sha": "54597ba11f73e642797a51f7cdd264613759e693", "node_id": "C_kwDOAAsO6NoAKDU0NTk3YmExMWY3M2U2NDI3OTdhNTFmN2NkZDI2NDYxMzc1OWU2OTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-10T19:03:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-10T19:03:34Z"}, "message": "Rollup merge of #95784 - WaffleLapkin:typeof_cool_suggestion, r=compiler-errors\n\nSuggest replacing `typeof(...)` with an actual type\n\nThis PR adds suggestion to replace `typeof(...)` with an actual type of `...`, for example in case of `typeof(1)` we suggest replacing it with `i32`.\n\nIf the expression\n1. Is not const (`{ let a = 1; let _: typeof(a); }`)\n2. Can't be found (`let _: typeof(this_variable_does_not_exist)`)\n3. Or has non-suggestable type (closure, generator, error, etc)\nwe don't suggest anything.\n\nThe 1 one is sad, but it's not clear how to support non-consts expressions for `typeof`.\n\n_This PR is inspired by [this tweet]._\n\n[this tweet]: https://twitter.com/compiler_errors/status/1511945354752638976", "tree": {"sha": "4d1eee704eef9e9526117c1f101cb77806fd66fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d1eee704eef9e9526117c1f101cb77806fd66fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54597ba11f73e642797a51f7cdd264613759e693", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiUyoHCRBK7hj4Ov3rIwAAmaEIAKCK26NZSl00fjsI44imszNq\nuDYe1L7bZMB0VONs8KwVcrUn+ps8lZXBtulKS8HX1qvL9/EIe4kmNATXDLzRRJPp\nuyi36B4KfPgnJ0DDcac7CUWpxztNc002fF0jhj9+ggngVHfFXkAWH3P0Gm5FCipv\nUqhxGsJquPQnpCZlsOGtgsDRdNTCETlf6LX7QM/sf1ZRvM1LvUxHydLRRi2IVNY+\noqZf5SH0ac/sApVWEE8SWjHUYLw11dTJHKRE4UFs9pUuINRspMWRe9pABCfh0vgo\ncKxchoTWt9LNXm1upXeeJDeObFgzTKxZjkKbCP0NgJZLlE45X+/K4TV5Pgq6WMk=\n=SdzS\n-----END PGP SIGNATURE-----\n", "payload": "tree 4d1eee704eef9e9526117c1f101cb77806fd66fd\nparent c0655dec7e5ca0b5ecbd843f47afadb57a657d08\nparent 8412d5dc5c4f284390f89d0352adae56dbc650e9\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649617414 +0200\ncommitter GitHub <noreply@github.com> 1649617414 +0200\n\nRollup merge of #95784 - WaffleLapkin:typeof_cool_suggestion, r=compiler-errors\n\nSuggest replacing `typeof(...)` with an actual type\n\nThis PR adds suggestion to replace `typeof(...)` with an actual type of `...`, for example in case of `typeof(1)` we suggest replacing it with `i32`.\n\nIf the expression\n1. Is not const (`{ let a = 1; let _: typeof(a); }`)\n2. Can't be found (`let _: typeof(this_variable_does_not_exist)`)\n3. Or has non-suggestable type (closure, generator, error, etc)\nwe don't suggest anything.\n\nThe 1 one is sad, but it's not clear how to support non-consts expressions for `typeof`.\n\n_This PR is inspired by [this tweet]._\n\n[this tweet]: https://twitter.com/compiler_errors/status/1511945354752638976\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54597ba11f73e642797a51f7cdd264613759e693", "html_url": "https://github.com/rust-lang/rust/commit/54597ba11f73e642797a51f7cdd264613759e693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54597ba11f73e642797a51f7cdd264613759e693/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0655dec7e5ca0b5ecbd843f47afadb57a657d08", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0655dec7e5ca0b5ecbd843f47afadb57a657d08", "html_url": "https://github.com/rust-lang/rust/commit/c0655dec7e5ca0b5ecbd843f47afadb57a657d08"}, {"sha": "8412d5dc5c4f284390f89d0352adae56dbc650e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8412d5dc5c4f284390f89d0352adae56dbc650e9", "html_url": "https://github.com/rust-lang/rust/commit/8412d5dc5c4f284390f89d0352adae56dbc650e9"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "2b1deb3430456ff737f0e5d2b1b1e7a13afedb35", "filename": "compiler/rustc_error_messages/locales/en-US/diagnostics.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fdiagnostics.ftl?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -62,6 +62,7 @@ typeck-functional-record-update-on-non-struct =\n \n typeck-typeof-reserved-keyword-used =\n     `typeof` is a reserved keyword but unimplemented\n+    .suggestion = consider replacing `typeof(...)` with an actual type\n     .label = reserved keyword\n \n typeck-return-stmt-outside-of-fn-body ="}, {"sha": "6bae0f2eac9545b5cb1c92d4a6bf84f4526d2e9e", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -2460,8 +2460,16 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }\n             hir::TyKind::Typeof(ref e) => {\n-                tcx.sess.emit_err(TypeofReservedKeywordUsed { span: ast_ty.span });\n-                tcx.type_of(tcx.hir().local_def_id(e.hir_id))\n+                let ty = tcx.type_of(tcx.hir().local_def_id(e.hir_id));\n+                let span = ast_ty.span;\n+                tcx.sess.emit_err(TypeofReservedKeywordUsed {\n+                    span,\n+                    ty,\n+                    opt_sugg: Some((span, Applicability::MachineApplicable))\n+                        .filter(|_| ty.is_suggestable()),\n+                });\n+\n+                ty\n             }\n             hir::TyKind::Infer => {\n                 // Infer also appears as the type of arguments or return"}, {"sha": "1088be5f566571d2ff7039c47a40b04012519dee", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -1,5 +1,7 @@\n //! Errors emitted by typeck.\n+use rustc_errors::Applicability;\n use rustc_macros::SessionDiagnostic;\n+use rustc_middle::ty::Ty;\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n #[derive(SessionDiagnostic)]\n@@ -127,10 +129,13 @@ pub struct FunctionalRecordUpdateOnNonStruct {\n \n #[derive(SessionDiagnostic)]\n #[error(code = \"E0516\", slug = \"typeck-typeof-reserved-keyword-used\")]\n-pub struct TypeofReservedKeywordUsed {\n+pub struct TypeofReservedKeywordUsed<'tcx> {\n+    pub ty: Ty<'tcx>,\n     #[primary_span]\n     #[label]\n     pub span: Span,\n+    #[suggestion_verbose(message = \"suggestion\", code = \"{ty}\")]\n+    pub opt_sugg: Option<(Span, Applicability)>,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "5243b7caf225b987181ff0d95893538e3749e0e0", "filename": "src/test/ui/error-codes/E0516.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Ferror-codes%2FE0516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Ferror-codes%2FE0516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0516.stderr?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -3,6 +3,11 @@ error[E0516]: `typeof` is a reserved keyword but unimplemented\n    |\n LL |     let x: typeof(92) = 92;\n    |            ^^^^^^^^^^ reserved keyword\n+   |\n+help: consider replacing `typeof(...)` with an actual type\n+   |\n+LL |     let x: i32 = 92;\n+   |            ~~~\n \n error: aborting due to previous error\n "}, {"sha": "75b6c64f2ced3f281ef36abf999697b8f5d1212a", "filename": "src/test/ui/issues/issue-29184.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Fissues%2Fissue-29184.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Fissues%2Fissue-29184.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29184.stderr?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -3,6 +3,11 @@ error[E0516]: `typeof` is a reserved keyword but unimplemented\n    |\n LL |     let x: typeof(92) = 92;\n    |            ^^^^^^^^^^ reserved keyword\n+   |\n+help: consider replacing `typeof(...)` with an actual type\n+   |\n+LL |     let x: i32 = 92;\n+   |            ~~~\n \n error: aborting due to previous error\n "}, {"sha": "e75214cd31a6d41ea073cf570788bfd522730ee2", "filename": "src/test/ui/typeof/type_mismatch.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54597ba11f73e642797a51f7cdd264613759e693/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeof%2Ftype_mismatch.stderr?ref=54597ba11f73e642797a51f7cdd264613759e693", "patch": "@@ -3,6 +3,11 @@ error[E0516]: `typeof` is a reserved keyword but unimplemented\n    |\n LL |     let b: typeof(a) = 1i8;\n    |            ^^^^^^^^^ reserved keyword\n+   |\n+help: consider replacing `typeof(...)` with an actual type\n+   |\n+LL |     let b: u8 = 1i8;\n+   |            ~~\n \n error[E0308]: mismatched types\n   --> $DIR/type_mismatch.rs:5:24"}]}