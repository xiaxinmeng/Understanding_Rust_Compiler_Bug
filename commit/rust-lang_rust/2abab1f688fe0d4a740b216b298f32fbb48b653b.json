{"sha": "2abab1f688fe0d4a740b216b298f32fbb48b653b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYmFiMWY2ODhmZTBkNGE3NDBiMjE2YjI5OGYzMmZiYjQ4YjY1M2I=", "commit": {"author": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-03-15T19:24:35Z"}, "committer": {"name": "Soveu", "email": "marx.tomasz@gmail.com", "date": "2021-03-15T19:24:35Z"}, "message": "Vec::dedup optimization - add tests", "tree": {"sha": "556fca52fd86ea4fb5cd4217e7fdd999e5b5c091", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/556fca52fd86ea4fb5cd4217e7fdd999e5b5c091"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abab1f688fe0d4a740b216b298f32fbb48b653b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abab1f688fe0d4a740b216b298f32fbb48b653b", "html_url": "https://github.com/rust-lang/rust/commit/2abab1f688fe0d4a740b216b298f32fbb48b653b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abab1f688fe0d4a740b216b298f32fbb48b653b/comments", "author": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Soveu", "id": 34382234, "node_id": "MDQ6VXNlcjM0MzgyMjM0", "avatar_url": "https://avatars.githubusercontent.com/u/34382234?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Soveu", "html_url": "https://github.com/Soveu", "followers_url": "https://api.github.com/users/Soveu/followers", "following_url": "https://api.github.com/users/Soveu/following{/other_user}", "gists_url": "https://api.github.com/users/Soveu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Soveu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Soveu/subscriptions", "organizations_url": "https://api.github.com/users/Soveu/orgs", "repos_url": "https://api.github.com/users/Soveu/repos", "events_url": "https://api.github.com/users/Soveu/events{/privacy}", "received_events_url": "https://api.github.com/users/Soveu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c114894b90971ad7c6743ca5961f276cae1e2b27", "url": "https://api.github.com/repos/rust-lang/rust/commits/c114894b90971ad7c6743ca5961f276cae1e2b27", "html_url": "https://github.com/rust-lang/rust/commit/c114894b90971ad7c6743ca5961f276cae1e2b27"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "fd1612f316bfdf7f3219c37f352d34608199d0e9", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2abab1f688fe0d4a740b216b298f32fbb48b653b/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abab1f688fe0d4a740b216b298f32fbb48b653b/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=2abab1f688fe0d4a740b216b298f32fbb48b653b", "patch": "@@ -21,6 +21,7 @@\n #![feature(vecdeque_binary_search)]\n #![feature(slice_group_by)]\n #![feature(vec_extend_from_within)]\n+#![feature(slice_partition_dedup)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "1d28fc9eebf828e698994a28002cd2cebc8d1bed", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/2abab1f688fe0d4a740b216b298f32fbb48b653b/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abab1f688fe0d4a740b216b298f32fbb48b653b/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=2abab1f688fe0d4a740b216b298f32fbb48b653b", "patch": "@@ -2096,3 +2096,76 @@ fn test_extend_from_within() {\n \n     assert_eq!(v, [\"a\", \"b\", \"c\", \"b\", \"c\", \"a\", \"b\"]);\n }\n+\n+#[test]\n+fn test_vec_dedup_by() {\n+    let mut vec: Vec<i32> = vec![1, -1, 2, 3, 1, -5, 5, -2, 2];\n+\n+    vec.dedup_by(|a, b| a.abs() == b.abs());\n+\n+    assert_eq!(vec, [1, 2, 3, 1, -5, -2]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_empty() {\n+    let mut vec: Vec<i32> = Vec::new();\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, []);\n+}\n+\n+#[test]\n+fn test_vec_dedup_one() {\n+    let mut vec = vec![12i32];\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, [12]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_multiple_ident() {\n+    let mut vec = vec![12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11];\n+\n+    vec.dedup();\n+\n+    assert_eq!(vec, [12, 11]);\n+}\n+\n+#[test]\n+fn test_vec_dedup_partialeq() {\n+    #[derive(Debug)]\n+    struct Foo(i32, i32);\n+\n+    impl PartialEq for Foo {\n+        fn eq(&self, other: &Foo) -> bool {\n+            self.0 == other.0\n+        }\n+    }\n+\n+    let mut vec = vec![Foo(0, 1), Foo(0, 5), Foo(1, 7), Foo(1, 9)];\n+\n+    vec.dedup();\n+    assert_eq!(vec, [Foo(0, 1), Foo(1, 7)]);\n+}\n+\n+#[test]\n+fn test_vec_dedup() {\n+    let mut vec: Vec<bool> = Vec::with_capacity(8);\n+    let mut template = vec.clone();\n+\n+    for x in 0u8..255u8 {\n+        vec.clear();\n+        template.clear();\n+\n+        let iter = (0..8).map(move |bit| (x >> bit) & 1 == 1);\n+        vec.extend(iter);\n+        template.extend_from_slice(&vec);\n+\n+        let (dedup, _) = template.partition_dedup();\n+        vec.dedup();\n+\n+        assert_eq!(vec, dedup);\n+    }\n+}"}]}