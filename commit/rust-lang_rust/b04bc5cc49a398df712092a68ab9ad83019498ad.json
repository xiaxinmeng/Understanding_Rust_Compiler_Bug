{"sha": "b04bc5cc49a398df712092a68ab9ad83019498ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNGJjNWNjNDlhMzk4ZGY3MTIwOTJhNjhhYjlhZDgzMDE5NDk4YWQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-22T20:46:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-22T20:46:31Z"}, "message": "rollup merge of #20033: alexcrichton/deprecate-serialise\n\nThis commit completes the deprecation story for the in-tree serialization\nlibrary. The compiler will now emit a warning whenever it encounters\n`deriving(Encodable)` or `deriving(Decodable)`, and the library itself is now\nmarked `#[unstable]` for when feature staging is enabled.\n\nAll users of serialization can migrate to the `rustc-serialize` crate on\ncrates.io which provides the exact same interface as the libserialize library\nin-tree. The new deriving modes are named `RustcEncodable` and `RustcDecodable`\nand require `extern crate \"rustc-serialize\" as rustc_serialize` at the crate\nroot in order to expand correctly.\n\nTo migrate all crates, add the following to your `Cargo.toml`:\n\n    [dependencies]\n    rustc-serialize = \"0.1.1\"\n\nAnd then add the following to your crate root:\n\n    extern crate \"rustc-serialize\" as rustc_serialize;\n\nFinally, rename `Encodable` and `Decodable` deriving modes to `RustcEncodable`\nand `RustcDecodable`.\n\n[breaking-change]", "tree": {"sha": "33749fe4df572967e3a0929c4a059021b32572f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33749fe4df572967e3a0929c4a059021b32572f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04bc5cc49a398df712092a68ab9ad83019498ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04bc5cc49a398df712092a68ab9ad83019498ad", "html_url": "https://github.com/rust-lang/rust/commit/b04bc5cc49a398df712092a68ab9ad83019498ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04bc5cc49a398df712092a68ab9ad83019498ad/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b99436152e3fbcf1dc2a1fd343f57237dc27f23", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b99436152e3fbcf1dc2a1fd343f57237dc27f23", "html_url": "https://github.com/rust-lang/rust/commit/9b99436152e3fbcf1dc2a1fd343f57237dc27f23"}, {"sha": "a76a80276852f05f30adaa4d2a8a2729b5fc0bfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a76a80276852f05f30adaa4d2a8a2729b5fc0bfa", "html_url": "https://github.com/rust-lang/rust/commit/a76a80276852f05f30adaa4d2a8a2729b5fc0bfa"}], "stats": {"total": 514, "additions": 288, "deletions": 226}, "files": [{"sha": "4647c92e3d1e8a09e25d7e8098acaf593a63f027", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -40,6 +40,8 @@ extern crate collections;\n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;\n \n+extern crate \"serialize\" as rustc_serialize; // used by deriving\n+\n #[cfg(test)]\n extern crate test;\n "}, {"sha": "a54bc4a945ae25f29104334a38d8d70e8b57341e", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -20,7 +20,7 @@ use syntax::ast_util::local_def;\n \n use std::cell::RefCell;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n     DefStaticMethod(/* method */ ast::DefId, MethodProvenance),\n@@ -73,13 +73,13 @@ pub struct Export {\n     pub def_id: ast::DefId, // The definition of the target.\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),\n     FromImpl(ast::DefId),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TyParamProvenance {\n     FromSelf(ast::DefId),\n     FromParam(ast::DefId),"}, {"sha": "8df78281cc227e9bf1f092b400ddf6ddf67d5fbc", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -36,7 +36,8 @@ use syntax::visit::{Visitor, FnKind};\n /// placate the same deriving in `ty::FreeRegion`, but we may want to\n /// actually attach a more meaningful ordering to scopes than the one\n /// generated via deriving here.\n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash, RustcEncodable,\n+           RustcDecodable, Show, Copy)]\n pub enum CodeExtent {\n     Misc(ast::NodeId)\n }"}, {"sha": "28cb80df7713bb49441d6727237611abc959fe42", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -33,7 +33,7 @@ use syntax::visit;\n use syntax::visit::Visitor;\n use util::nodemap::NodeMap;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum DefRegion {\n     DefStaticRegion,\n     DefEarlyBoundRegion(/* space */ subst::ParamSpace,"}, {"sha": "bee6554f2df420e786f4d82aab87d150fc37d6ae", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -187,8 +187,8 @@ impl RegionSubsts {\n ///////////////////////////////////////////////////////////////////////////\n // ParamSpace\n \n-#[deriving(Copy, PartialOrd, Ord, PartialEq, Eq,\n-           Clone, Hash, Encodable, Decodable, Show)]\n+#[deriving(PartialOrd, Ord, PartialEq, Eq, Copy,\n+           Clone, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum ParamSpace {\n     TypeSpace,  // Type parameters attached to a type definition, trait, or impl\n     SelfSpace,  // Self parameter on a trait\n@@ -224,7 +224,7 @@ impl ParamSpace {\n /// Vector of things sorted by param space. Used to keep\n /// the set of things declared on the type, self, or method\n /// distinct.\n-#[deriving(PartialEq, Eq, Clone, Hash, Encodable, Decodable)]\n+#[deriving(PartialEq, Eq, Clone, Hash, RustcEncodable, RustcDecodable)]\n pub struct VecPerParamSpace<T> {\n     // This was originally represented as a tuple with one Vec<T> for\n     // each variant of ParamSpace, and that remains the abstraction"}, {"sha": "8632862f26a728db08e5a22c12241bfd15d0eeff", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -246,7 +246,7 @@ pub struct mt<'tcx> {\n     pub mutbl: ast::Mutability,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show)]\n pub enum TraitStore {\n     /// Box<Trait>\n     UniqTraitStore,\n@@ -277,13 +277,13 @@ pub enum ast_ty_to_ty_cache_entry<'tcx> {\n     atttce_resolved(Ty<'tcx>)  /* resolved to a type, irrespective of region */\n }\n \n-#[deriving(Clone, PartialEq, Decodable, Encodable)]\n+#[deriving(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n pub struct ItemVariances {\n     pub types: VecPerParamSpace<Variance>,\n     pub regions: VecPerParamSpace<Variance>,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Decodable, Encodable, Show)]\n+#[deriving(Clone, PartialEq, RustcDecodable, RustcEncodable, Show, Copy)]\n pub enum Variance {\n     Covariant,      // T<A> <: T<B> iff A <: B -- e.g., function return type\n     Invariant,      // T<A> <: T<B> iff B == A -- e.g., type of mutable cell\n@@ -430,7 +430,7 @@ pub fn type_of_adjust<'tcx>(cx: &ctxt<'tcx>, adj: &AutoAdjustment<'tcx>) -> Opti\n     }\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, PartialOrd, Show)]\n+#[deriving(Clone, Copy, RustcEncodable, RustcDecodable, PartialEq, PartialOrd, Show)]\n pub struct param_index {\n     pub space: subst::ParamSpace,\n     pub index: uint\n@@ -510,7 +510,7 @@ pub struct MethodCall {\n     pub adjustment: ExprAdjustment\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum ExprAdjustment {\n     NoAdjustment,\n     AutoDeref(uint),\n@@ -973,15 +973,15 @@ pub struct ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct DebruijnIndex {\n     // We maintain the invariant that this is never 0. So 1 indicates\n     // the innermost binder. To ensure this, create with `DebruijnIndex::new`.\n     pub depth: uint,\n }\n \n /// Representation of regions:\n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Show, Copy)]\n pub enum Region {\n     // Region bound in a type or fn declaration which will be\n     // substituted 'early' -- that is, at the same time when type\n@@ -1028,7 +1028,7 @@ pub struct UpvarId {\n     pub closure_expr_id: ast::NodeId,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Hash, Show, Encodable, Decodable)]\n+#[deriving(Clone, PartialEq, Eq, Hash, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,\n@@ -1121,7 +1121,7 @@ pub enum BorrowKind {\n /// - Through mutation, the borrowed upvars can actually escape\n ///   the closure, so sometimes it is necessary for them to be larger\n ///   than the closure lifetime itself.\n-#[deriving(Copy, PartialEq, Clone, Encodable, Decodable, Show)]\n+#[deriving(PartialEq, Clone, RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct UpvarBorrow {\n     pub kind: BorrowKind,\n     pub region: ty::Region,\n@@ -1146,15 +1146,17 @@ impl Region {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n+           RustcEncodable, RustcDecodable, Show, Copy)]\n /// A \"free\" region `fr` can be interpreted as \"some region\n /// at least as big as the scope `fr.scope`\".\n pub struct FreeRegion {\n     pub scope: region::CodeExtent,\n     pub bound_region: BoundRegion\n }\n \n-#[deriving(Clone, Copy, PartialEq, PartialOrd, Eq, Ord, Hash, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord, Hash,\n+           RustcEncodable, RustcDecodable, Show, Copy)]\n pub enum BoundRegion {\n     /// An anonymous region parameter for a given fn (&T)\n     BrAnon(uint),\n@@ -1412,7 +1414,8 @@ pub struct ExistentialBounds {\n \n pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n-#[deriving(Copy, Clone, Encodable, PartialEq, Eq, Decodable, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, PartialEq, Eq, RustcDecodable, Hash,\n+           Show, Copy)]\n #[repr(uint)]\n pub enum BuiltinBound {\n     BoundSend,\n@@ -1463,7 +1466,7 @@ pub struct FloatVid {\n     pub index: uint\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub struct RegionVid {\n     pub index: uint\n }\n@@ -1485,7 +1488,7 @@ pub enum InferTy {\n     FreshIntTy(uint),\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, Eq, Hash, Show, Copy)]\n pub enum InferRegion {\n     ReVar(RegionVid),\n     ReSkolemized(uint, BoundRegion)\n@@ -1571,7 +1574,7 @@ pub struct TypeParameterDef<'tcx> {\n     pub default: Option<Ty<'tcx>>,\n }\n \n-#[deriving(Encodable, Decodable, Clone, Show)]\n+#[deriving(RustcEncodable, RustcDecodable, Clone, Show)]\n pub struct RegionParameterDef {\n     pub name: ast::Name,\n     pub def_id: ast::DefId,\n@@ -6223,7 +6226,7 @@ pub fn accumulate_lifetimes_in_type(accumulator: &mut Vec<ty::Region>,\n }\n \n /// A free variable referred to in a function.\n-#[deriving(Copy, Encodable, Decodable)]\n+#[deriving(Copy, RustcEncodable, RustcDecodable)]\n pub struct Freevar {\n     /// The variable being accessed free.\n     pub def: def::Def,"}, {"sha": "ed2b85a34a9f64c00adda3322b46f4a33127ac04", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -113,7 +113,7 @@ impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::owned_slice::OwnedSlice<T> {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Crate {\n     pub name: String,\n     pub src: FsPath,\n@@ -195,7 +195,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct ExternalCrate {\n     pub name: String,\n     pub attrs: Vec<Attribute>,\n@@ -228,7 +228,7 @@ impl Clean<ExternalCrate> for cstore::crate_metadata {\n /// Anything with a source location and set of attributes and, optionally, a\n /// name. That is, anything that can be documented. This doesn't correspond\n /// directly to the AST's concept of an item; it's a strict superset.\n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Item {\n     /// Stringified span\n     pub source: Span,\n@@ -304,7 +304,7 @@ impl Item {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum ItemEnum {\n     StructItem(Struct),\n     EnumItem(Enum),\n@@ -333,7 +333,7 @@ pub enum ItemEnum {\n     AssociatedTypeItem(TyParam),\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Module {\n     pub items: Vec<Item>,\n     pub is_crate: bool,\n@@ -400,7 +400,7 @@ impl Clean<Item> for doctree::Module {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum Attribute {\n     Word(String),\n     List(String, Vec<Attribute> ),\n@@ -453,7 +453,7 @@ impl<'a> attr::AttrMetaMethods for &'a Attribute {\n     fn meta_item_list(&self) -> Option<&[P<ast::MetaItem>]> { None }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct TyParam {\n     pub name: String,\n     pub did: ast::DefId,\n@@ -490,7 +490,7 @@ impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum TyParamBound {\n     RegionBound(Lifetime),\n     TraitBound(Type)\n@@ -632,7 +632,7 @@ impl<'tcx> Clean<Option<Vec<TyParamBound>>> for subst::Substs<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Lifetime(String);\n \n impl Lifetime {\n@@ -682,7 +682,7 @@ impl Clean<Option<Lifetime>> for ty::Region {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct WherePredicate {\n     pub ty: Type,\n     pub bounds: Vec<TyParamBound>\n@@ -706,7 +706,7 @@ impl Clean<WherePredicate> for ast::WherePredicate {\n }\n \n // maybe use a Generic enum and use ~[Generic]?\n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Generics {\n     pub lifetimes: Vec<Lifetime>,\n     pub type_params: Vec<TyParam>,\n@@ -734,7 +734,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>, subst::ParamSpace) {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Method {\n     pub generics: Generics,\n     pub self_: SelfTy,\n@@ -773,7 +773,7 @@ impl Clean<Item> for ast::Method {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct TyMethod {\n     pub unsafety: ast::Unsafety,\n     pub decl: FnDecl,\n@@ -811,7 +811,7 @@ impl Clean<Item> for ast::TypeMethod {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum SelfTy {\n     SelfStatic,\n     SelfValue,\n@@ -832,7 +832,7 @@ impl Clean<SelfTy> for ast::ExplicitSelf_ {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Function {\n     pub decl: FnDecl,\n     pub generics: Generics,\n@@ -857,7 +857,7 @@ impl Clean<Item> for doctree::Function {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct ClosureDecl {\n     pub lifetimes: Vec<Lifetime>,\n     pub decl: FnDecl,\n@@ -878,14 +878,14 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n     pub output: FunctionRetTy,\n     pub attrs: Vec<Attribute>,\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Arguments {\n     pub values: Vec<Argument>,\n }\n@@ -938,7 +938,7 @@ impl<'a, 'tcx> Clean<FnDecl> for (ast::DefId, &'a ty::PolyFnSig<'tcx>) {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Argument {\n     pub type_: Type,\n     pub name: String,\n@@ -955,7 +955,7 @@ impl Clean<Argument> for ast::Arg {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum FunctionRetTy {\n     Return(Type),\n     NoReturn\n@@ -970,7 +970,7 @@ impl Clean<FunctionRetTy> for ast::FunctionRetTy {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Trait {\n     pub unsafety: ast::Unsafety,\n     pub items: Vec<TraitMethod>,\n@@ -1014,7 +1014,7 @@ impl Clean<Type> for ast::PolyTraitRef {\n \n /// An item belonging to a trait, whether a method or associated. Could be named\n /// TraitItem except that's already taken by an exported enum variant.\n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum TraitMethod {\n     RequiredMethod(Item),\n     ProvidedMethod(Item),\n@@ -1059,7 +1059,7 @@ impl Clean<TraitMethod> for ast::TraitItem {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum ImplMethod {\n     MethodImplItem(Item),\n     TypeImplItem(Item),\n@@ -1132,7 +1132,7 @@ impl<'tcx> Clean<Item> for ty::ImplOrTraitItem<'tcx> {\n /// A representation of a Type suitable for hyperlinking purposes. Ideally one can get the original\n /// type out of the AST/ty::ctxt given one of these, if more information is needed. Most importantly\n /// it does not preserve mutability or boxes.\n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub enum Type {\n     /// structs/enums/traits (anything that'd be an ast::TyPath)\n     ResolvedPath {\n@@ -1180,7 +1180,7 @@ pub enum Type {\n     PolyTraitRef(Vec<TyParamBound>),\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy)]\n pub enum PrimitiveType {\n     Int, I8, I16, I32, I64,\n     Uint, U8, U16, U32, U64,\n@@ -1192,7 +1192,7 @@ pub enum PrimitiveType {\n     PrimitiveTuple,\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum TypeKind {\n     TypeEnum,\n     TypeFunction,\n@@ -1436,7 +1436,7 @@ impl Clean<Type> for ast::QPath {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum StructField {\n     HiddenStructField, // inserted later by strip passes\n     TypedStructField(Type),\n@@ -1495,7 +1495,7 @@ impl Clean<Option<Visibility>> for ast::Visibility {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Struct {\n     pub struct_type: doctree::StructType,\n     pub generics: Generics,\n@@ -1525,7 +1525,7 @@ impl Clean<Item> for doctree::Struct {\n /// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct VariantStruct {\n     pub struct_type: doctree::StructType,\n     pub fields: Vec<Item>,\n@@ -1542,7 +1542,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Enum {\n     pub variants: Vec<Item>,\n     pub generics: Generics,\n@@ -1567,7 +1567,7 @@ impl Clean<Item> for doctree::Enum {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Variant {\n     pub kind: VariantKind,\n }\n@@ -1635,7 +1635,7 @@ impl<'tcx> Clean<Item> for ty::VariantInfo<'tcx> {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum VariantKind {\n     CLikeVariant,\n     TupleVariant(Vec<Type>),\n@@ -1657,7 +1657,7 @@ impl Clean<VariantKind> for ast::VariantKind {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Span {\n     pub filename: String,\n     pub loline: uint,\n@@ -1692,7 +1692,7 @@ impl Clean<Span> for syntax::codemap::Span {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct Path {\n     pub global: bool,\n     pub segments: Vec<PathSegment>,\n@@ -1707,7 +1707,7 @@ impl Clean<Path> for ast::Path {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct PathSegment {\n     pub name: String,\n     pub lifetimes: Vec<Lifetime>,\n@@ -1763,7 +1763,7 @@ impl Clean<String> for ast::Name {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Typedef {\n     pub type_: Type,\n     pub generics: Generics,\n@@ -1786,7 +1786,7 @@ impl Clean<Item> for doctree::Typedef {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq)]\n pub struct BareFunctionDecl {\n     pub unsafety: ast::Unsafety,\n     pub generics: Generics,\n@@ -1809,7 +1809,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Static {\n     pub type_: Type,\n     pub mutability: Mutability,\n@@ -1838,7 +1838,7 @@ impl Clean<Item> for doctree::Static {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, Show)]\n pub struct Constant {\n     pub type_: Type,\n     pub expr: String,\n@@ -1861,7 +1861,7 @@ impl Clean<Item> for doctree::Constant {\n     }\n }\n \n-#[deriving(Copy, Show, Clone, Encodable, Decodable, PartialEq)]\n+#[deriving(Show, Clone, RustcEncodable, RustcDecodable, PartialEq, Copy)]\n pub enum Mutability {\n     Mutable,\n     Immutable,\n@@ -1876,7 +1876,7 @@ impl Clean<Mutability> for ast::Mutability {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Impl {\n     pub generics: Generics,\n     pub trait_: Option<Type>,\n@@ -1914,7 +1914,7 @@ impl Clean<Item> for doctree::Impl {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct ViewItem {\n     pub inner: ViewItemInner,\n }\n@@ -1980,7 +1980,7 @@ impl Clean<Vec<Item>> for ast::ViewItem {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum ViewItemInner {\n     ExternCrate(String, Option<String>, ast::NodeId),\n     Import(ViewPath)\n@@ -2003,7 +2003,7 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub enum ViewPath {\n     // use source as str;\n     SimpleImport(String, ImportSource),\n@@ -2013,7 +2013,7 @@ pub enum ViewPath {\n     ImportList(ImportSource, Vec<ViewListIdent>),\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct ImportSource {\n     pub path: Path,\n     pub did: Option<ast::DefId>,\n@@ -2034,7 +2034,7 @@ impl Clean<ViewPath> for ast::ViewPath {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct ViewListIdent {\n     pub name: String,\n     pub source: Option<ast::DefId>,\n@@ -2247,7 +2247,7 @@ fn resolve_def(cx: &DocContext, id: ast::NodeId) -> Option<ast::DefId> {\n     })\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Macro {\n     pub source: String,\n }\n@@ -2268,7 +2268,7 @@ impl Clean<Item> for doctree::Macro {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stability {\n     pub level: attr::StabilityLevel,\n     pub text: String"}, {"sha": "7f7c055062aaadde84dd878202eb667f7525f2b5", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -70,7 +70,7 @@ impl Module {\n     }\n }\n \n-#[deriving(Copy, Show, Clone, Encodable, Decodable)]\n+#[deriving(Show, Clone, RustcEncodable, RustcDecodable, Copy)]\n pub enum StructType {\n     /// A normal struct\n     Plain,"}, {"sha": "8dfb352d0288f8cc9773ef47b449ed3943cc9e09", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -32,6 +32,8 @@ extern crate syntax;\n extern crate \"test\" as testing;\n #[phase(plugin, link)] extern crate log;\n \n+extern crate \"serialize\" as rustc_serialize; // used by deriving\n+\n use std::cell::RefCell;\n use std::collections::HashMap;\n use std::collections::hash_map::Entry::{Occupied, Vacant};"}, {"sha": "2e3adf8e767873181fd74af7dcba70f1fea941e4", "filename": "src/librustdoc/stability_summary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fstability_summary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibrustdoc%2Fstability_summary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fstability_summary.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -25,7 +25,7 @@ use clean::{TypeTraitItem, ViewItemItem, PrimitiveItem, Stability};\n \n use html::render::cache;\n \n-#[deriving(Zero, Encodable, Decodable, PartialEq, Eq)]\n+#[deriving(Zero, RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// The counts for each stability level.\n #[deriving(Copy)]\n pub struct Counts {\n@@ -73,7 +73,7 @@ impl Counts {\n     }\n }\n \n-#[deriving(Encodable, Decodable, PartialEq, Eq)]\n+#[deriving(RustcEncodable, RustcDecodable, PartialEq, Eq)]\n /// A summarized module, which includes total counts and summarized children\n /// modules.\n pub struct ModuleSummary {"}, {"sha": "b945bced512f8cc43449e3f6c49b407754114d6f", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -57,17 +57,17 @@\n //!\n //! Rust provides a mechanism for low boilerplate encoding & decoding of values to and from JSON via\n //! the serialization API.\n-//! To be able to encode a piece of data, it must implement the `serialize::Encodable` trait.\n-//! To be able to decode a piece of data, it must implement the `serialize::Decodable` trait.\n+//! To be able to encode a piece of data, it must implement the `serialize::RustcEncodable` trait.\n+//! To be able to decode a piece of data, it must implement the `serialize::RustcDecodable` trait.\n //! The Rust compiler provides an annotation to automatically generate the code for these traits:\n-//! `#[deriving(Decodable, Encodable)]`\n+//! `#[deriving(RustcDecodable, RustcEncodable)]`\n //!\n //! The JSON API provides an enum `json::Json` and a trait `ToJson` to encode objects.\n //! The `ToJson` trait provides a `to_json` method to convert an object into a `json::Json` value.\n //! A `json::Json` value can be encoded as a string or buffer using the functions described above.\n //! You can also use the `json::Encoder` object, which implements the `Encoder` trait.\n //!\n-//! When using `ToJson` the `Encodable` trait implementation is not mandatory.\n+//! When using `ToJson` the `RustcEncodable` trait implementation is not mandatory.\n //!\n //! # Examples of use\n //!\n@@ -127,7 +127,7 @@\n //!     }\n //! }\n //!\n-//! // Only generate `Encodable` trait implementation\n+//! // Only generate `RustcEncodable` trait implementation\n //! #[deriving(Encodable)]\n //! pub struct ComplexNumRecord {\n //!     uid: u8,\n@@ -405,7 +405,7 @@ impl<'a> Encoder<'a> {\n     }\n \n     /// Encode the specified struct into a json [u8]\n-    pub fn buffer_encode<T:Encodable<Encoder<'a>, io::IoError>>(object: &T) -> Vec<u8>  {\n+    pub fn buffer_encode<T: Encodable<Encoder<'a>, io::IoError>>(object: &T) -> Vec<u8>  {\n         //Serialize the object in a string using a writer\n         let mut m = Vec::new();\n         // FIXME(14302) remove the transmute and unsafe block.\n@@ -2428,7 +2428,7 @@ mod tests {\n     use std::num::Float;\n     use std::string;\n \n-    #[deriving(Decodable, Eq, PartialEq, Show)]\n+    #[deriving(RustcDecodable, Eq, PartialEq, Show)]\n     struct OptionData {\n         opt: Option<uint>,\n     }\n@@ -2455,20 +2455,20 @@ mod tests {\n                                 ExpectedError(\"Number\".to_string(), \"false\".to_string()));\n     }\n \n-    #[deriving(PartialEq, Encodable, Decodable, Show)]\n+    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     enum Animal {\n         Dog,\n         Frog(string::String, int)\n     }\n \n-    #[deriving(PartialEq, Encodable, Decodable, Show)]\n+    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     struct Inner {\n         a: (),\n         b: uint,\n         c: Vec<string::String>,\n     }\n \n-    #[deriving(PartialEq, Encodable, Decodable, Show)]\n+    #[deriving(PartialEq, RustcEncodable, RustcDecodable, Show)]\n     struct Outer {\n         inner: Vec<Inner>,\n     }\n@@ -3009,7 +3009,7 @@ mod tests {\n         );\n     }\n \n-    #[deriving(Decodable)]\n+    #[deriving(RustcDecodable)]\n     struct FloatStruct {\n         f: f64,\n         a: Vec<f64>\n@@ -3058,15 +3058,15 @@ mod tests {\n             Err(SyntaxError(EOFWhileParsingObject, 3u, 8u)));\n     }\n \n-    #[deriving(Decodable)]\n+    #[deriving(RustcDecodable)]\n     #[allow(dead_code)]\n     struct DecodeStruct {\n         x: f64,\n         y: bool,\n         z: string::String,\n         w: Vec<DecodeStruct>\n     }\n-    #[deriving(Decodable)]\n+    #[deriving(RustcDecodable)]\n     enum DecodeEnum {\n         A(f64),\n         B(string::String)"}, {"sha": "4a2bbbeec03a48d26a501e30006e59e8811514d2", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -15,7 +15,7 @@ Core encoding and decoding interfaces.\n */\n \n #![crate_name = \"serialize\"]\n-#![experimental]\n+#![unstable = \"deprecated in favor of rustc-serialize on crates.io\"]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -45,3 +45,7 @@ mod collection_impls;\n pub mod base64;\n pub mod hex;\n pub mod json;\n+\n+mod rustc_serialize {\n+    pub use serialize::*;\n+}"}, {"sha": "b1599cb807d01be58c143a33bc53212cdd32459a", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -26,7 +26,7 @@ pub enum Os {\n     OsDragonfly,\n }\n \n-#[deriving(Copy, PartialEq, Eq, Hash, Encodable, Decodable, Clone)]\n+#[deriving(PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Clone, Copy)]\n pub enum Abi {\n     // NB: This ordering MUST match the AbiDatas array below.\n     // (This is ensured by the test indices_are_correct().)"}, {"sha": "9d4bf77d4a5d33c40977d9136e7c50b1730bcbc7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 106, "deletions": 103, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -157,7 +157,8 @@ pub const ILLEGAL_CTXT : SyntaxContext = 1;\n \n /// A name is a part of an identifier, representing a string or gensym. It's\n /// the result of interning.\n-#[deriving(Copy, Eq, Ord, PartialEq, PartialOrd, Hash, Encodable, Decodable, Clone)]\n+#[deriving(Eq, Ord, PartialEq, PartialOrd, Hash,\n+           RustcEncodable, RustcDecodable, Clone, Copy)]\n pub struct Name(pub u32);\n \n impl Name {\n@@ -187,7 +188,7 @@ impl<S: Encoder<E>, E> Encodable<S, E> for Ident {\n     }\n }\n \n-impl<D:Decoder<E>, E> Decodable<D, E> for Ident {\n+impl<D: Decoder<E>, E> Decodable<D, E> for Ident {\n     fn decode(d: &mut D) -> Result<Ident, E> {\n         Ok(str_to_ident(try!(d.read_str())[]))\n     }\n@@ -196,14 +197,15 @@ impl<D:Decoder<E>, E> Decodable<D, E> for Ident {\n /// Function name (not all functions have names)\n pub type FnIdent = Option<Ident>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash,\n+           Show, Copy)]\n pub struct Lifetime {\n     pub id: NodeId,\n     pub span: Span,\n     pub name: Name\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct LifetimeDef {\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n@@ -212,7 +214,7 @@ pub struct LifetimeDef {\n /// A \"Path\" is essentially Rust's notion of a name; for instance:\n /// std::cmp::PartialEq  .  It's represented as a sequence of identifiers,\n /// along with a bunch of supporting information.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Path {\n     pub span: Span,\n     /// A `::foo` path, is relative to the crate root rather than current\n@@ -224,7 +226,7 @@ pub struct Path {\n \n /// A segment of a path: an identifier, an optional lifetime, and a set of\n /// types.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct PathSegment {\n     /// The identifier portion of this path segment.\n     pub identifier: Ident,\n@@ -237,7 +239,7 @@ pub struct PathSegment {\n     pub parameters: PathParameters,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum PathParameters {\n     AngleBracketedParameters(AngleBracketedParameterData),\n     ParenthesizedParameters(ParenthesizedParameterData),\n@@ -315,7 +317,7 @@ impl PathParameters {\n }\n \n /// A path like `Foo<'a, T>`\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct AngleBracketedParameterData {\n     /// The lifetime parameters for this path segment.\n     pub lifetimes: Vec<Lifetime>,\n@@ -333,7 +335,7 @@ impl AngleBracketedParameterData {\n }\n \n /// A path like `Foo(A,B) -> C`\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ParenthesizedParameterData {\n     /// `(A,B)`\n     pub inputs: Vec<P<Ty>>,\n@@ -346,7 +348,8 @@ pub type CrateNum = u32;\n \n pub type NodeId = u32;\n \n-#[deriving(Clone, Copy, Eq, Ord, PartialOrd, PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Eq, Ord, PartialOrd, PartialEq, RustcEncodable,\n+           RustcDecodable, Hash, Show, Copy)]\n pub struct DefId {\n     pub krate: CrateNum,\n     pub node: NodeId,\n@@ -366,15 +369,15 @@ pub const DUMMY_NODE_ID: NodeId = -1;\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and\n /// detects Copy, Send and Sync.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TyParamBound {\n     TraitTyParamBound(PolyTraitRef),\n     RegionTyParamBound(Lifetime)\n }\n \n pub type TyParamBounds = OwnedSlice<TyParamBound>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TyParam {\n     pub ident: Ident,\n     pub id: NodeId,\n@@ -386,7 +389,7 @@ pub struct TyParam {\n \n /// Represents lifetimes and type parameters attached to a declaration\n /// of a function, enum, trait, etc.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Generics {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub ty_params: OwnedSlice<TyParam>,\n@@ -405,34 +408,34 @@ impl Generics {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereClause {\n     pub id: NodeId,\n     pub predicates: Vec<WherePredicate>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum WherePredicate {\n     BoundPredicate(WhereBoundPredicate),\n     RegionPredicate(WhereRegionPredicate),\n     EqPredicate(WhereEqPredicate)\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereBoundPredicate {\n     pub span: Span,\n     pub bounded_ty: P<Ty>,\n     pub bounds: OwnedSlice<TyParamBound>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,\n     pub span: Span,\n@@ -444,7 +447,7 @@ pub struct WhereEqPredicate {\n /// used to drive conditional compilation\n pub type CrateConfig = Vec<P<MetaItem>> ;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Crate {\n     pub module: Mod,\n     pub attrs: Vec<Attribute>,\n@@ -455,7 +458,7 @@ pub struct Crate {\n \n pub type MetaItem = Spanned<MetaItem_>;\n \n-#[deriving(Clone, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MetaItem_ {\n     MetaWord(InternedString),\n     MetaList(InternedString, Vec<P<MetaItem>>),\n@@ -487,7 +490,7 @@ impl PartialEq for MetaItem_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Block {\n     pub view_items: Vec<ViewItem>,\n     pub stmts: Vec<P<Stmt>>,\n@@ -497,27 +500,27 @@ pub struct Block {\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Pat {\n     pub id: NodeId,\n     pub node: Pat_,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct FieldPat {\n     pub ident: Ident,\n     pub pat: P<Pat>,\n     pub is_shorthand: bool,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BindingMode {\n     BindByRef(Mutability),\n     BindByValue(Mutability),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PatWildKind {\n     /// Represents the wildcard pattern `_`\n     PatWildSingle,\n@@ -526,7 +529,7 @@ pub enum PatWildKind {\n     PatWildMulti,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Pat_ {\n     /// Represents a wildcard pattern (either `_` or `..`)\n     PatWild(PatWildKind),\n@@ -555,13 +558,13 @@ pub enum Pat_ {\n     PatMac(Mac),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Mutability {\n     MutMutable,\n     MutImmutable,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BinOp {\n     BiAdd,\n     BiSub,\n@@ -583,7 +586,7 @@ pub enum BinOp {\n     BiGt,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnOp {\n     UnUniq,\n     UnDeref,\n@@ -593,7 +596,7 @@ pub enum UnOp {\n \n pub type Stmt = Spanned<Stmt_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Stmt_ {\n     /// Could be an item or a local (let) binding:\n     StmtDecl(P<Decl>, NodeId),\n@@ -607,7 +610,7 @@ pub enum Stmt_ {\n     StmtMac(Mac, MacStmtStyle),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum MacStmtStyle {\n     /// The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n     /// `foo!(...);`, `foo![...];`\n@@ -622,7 +625,7 @@ pub enum MacStmtStyle {\n \n /// Where a local declaration came from: either a true `let ... =\n /// ...;`, or one desugared from the pattern of a for loop.\n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum LocalSource {\n     LocalLet,\n     LocalFor,\n@@ -631,7 +634,7 @@ pub enum LocalSource {\n // FIXME (pending discussion of #1697, #2178...): local should really be\n // a refinement on pat.\n /// Local represents a `let` statement, e.g., `let <pat>:<ty> = <expr>;`\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Local {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n@@ -643,7 +646,7 @@ pub struct Local {\n \n pub type Decl = Spanned<Decl_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Decl_ {\n     /// A local (let) binding:\n     DeclLocal(P<Local>),\n@@ -652,15 +655,15 @@ pub enum Decl_ {\n }\n \n /// represents one arm of a 'match'\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Field {\n     pub ident: SpannedIdent,\n     pub expr: P<Expr>,\n@@ -669,26 +672,26 @@ pub struct Field {\n \n pub type SpannedIdent = Spanned<Ident>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum BlockCheckMode {\n     DefaultBlock,\n     UnsafeBlock(UnsafeSource),\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnsafeSource {\n     CompilerGenerated,\n     UserProvided,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Expr {\n     pub id: NodeId,\n     pub node: Expr_,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n     ExprBox(Option<P<Expr>>, P<Expr>),\n@@ -750,28 +753,28 @@ pub enum Expr_ {\n ///     <Vec<T> as SomeTrait>::SomeAssociatedItem\n ///      ^~~~~     ^~~~~~~~~   ^~~~~~~~~~~~~~~~~~\n ///      self_type  trait_name  item_name\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct QPath {\n     pub self_type: P<Ty>,\n     pub trait_ref: P<TraitRef>,\n     pub item_name: Ident,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum MatchSource {\n     Normal,\n     IfLetDesugar { contains_else_clause: bool },\n     WhileLetDesugar,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum CaptureClause {\n     CaptureByValue,\n     CaptureByRef,\n }\n \n /// A delimited sequence of token trees\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Delimited {\n     /// The type of delimiter\n     pub delim: token::DelimToken,\n@@ -806,7 +809,7 @@ impl Delimited {\n }\n \n /// A sequence of token treesee\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct SequenceRepetition {\n     /// The sequence of token trees\n     pub tts: Vec<TokenTree>,\n@@ -820,7 +823,7 @@ pub struct SequenceRepetition {\n \n /// A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\n /// for token sequences.\n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum KleeneOp {\n     ZeroOrMore,\n     OneOrMore,\n@@ -838,7 +841,7 @@ pub enum KleeneOp {\n ///\n /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n #[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum TokenTree {\n     /// A single token\n@@ -928,22 +931,22 @@ pub type Mac = Spanned<Mac_>;\n /// is being invoked, and the vector of token-trees contains the source\n /// of the macro invocation.\n /// There's only one flavor, now, so this could presumably be simplified.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Mac_ {\n     // NB: the additional ident for a macro_rules-style macro is actually\n     // stored in the enclosing item. Oog.\n     MacInvocTT(Path, Vec<TokenTree> , SyntaxContext),   // new macro-invocation\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum StrStyle {\n     CookedStr,\n     RawStr(uint)\n }\n \n pub type Lit = Spanned<Lit_>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Sign {\n     Minus,\n     Plus\n@@ -959,7 +962,7 @@ impl<T> Sign where T: Int {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum LitIntType {\n     SignedIntLit(IntTy, Sign),\n     UnsignedIntLit(UintTy),\n@@ -976,7 +979,7 @@ impl LitIntType {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Lit_ {\n     LitStr(InternedString, StrStyle),\n     LitBinary(Rc<Vec<u8> >),\n@@ -990,13 +993,13 @@ pub enum Lit_ {\n \n // NB: If you change this, you'll probably want to change the corresponding\n // type structure in middle/ty.rs as well.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct MutTy {\n     pub ty: P<Ty>,\n     pub mutbl: Mutability,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeField {\n     pub ident: Ident,\n     pub mt: MutTy,\n@@ -1005,7 +1008,7 @@ pub struct TypeField {\n \n /// Represents a required method in a trait declaration,\n /// one without a default implementation\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeMethod {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1023,26 +1026,26 @@ pub struct TypeMethod {\n /// a default implementation A trait method is either required (meaning it\n /// doesn't have an implementation, just a signature) or provided (meaning it\n /// has a default implementation).\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum TraitItem {\n     RequiredMethod(TypeMethod),\n     ProvidedMethod(P<Method>),\n     TypeTraitItem(P<AssociatedType>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ImplItem {\n     MethodImplItem(P<Method>),\n     TypeImplItem(P<Typedef>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct AssociatedType {\n     pub attrs: Vec<Attribute>,\n     pub ty_param: TyParam,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Typedef {\n     pub id: NodeId,\n     pub span: Span,\n@@ -1052,7 +1055,7 @@ pub struct Typedef {\n     pub typ: P<Ty>,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum IntTy {\n     TyI,\n     TyI8,\n@@ -1077,7 +1080,7 @@ impl IntTy {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum UintTy {\n     TyU,\n     TyU8,\n@@ -1102,7 +1105,7 @@ impl fmt::Show for UintTy {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum FloatTy {\n     TyF32,\n     TyF64,\n@@ -1123,7 +1126,7 @@ impl FloatTy {\n }\n \n // Bind a type to an associated type: `A=Foo`.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TypeBinding {\n     pub id: NodeId,\n     pub ident: Ident,\n@@ -1133,15 +1136,15 @@ pub struct TypeBinding {\n \n \n // NB PartialEq method appears below.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Ty {\n     pub id: NodeId,\n     pub node: Ty_,\n     pub span: Span,\n }\n \n /// Not represented directly in the AST, referred to by name through a ty_path.\n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PrimTy {\n     TyInt(IntTy),\n     TyUint(UintTy),\n@@ -1151,7 +1154,7 @@ pub enum PrimTy {\n     TyChar\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Copy)]\n pub enum Onceness {\n     Once,\n     Many\n@@ -1167,7 +1170,7 @@ impl fmt::Show for Onceness {\n }\n \n /// Represents the type of a closure\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ClosureTy {\n     pub lifetimes: Vec<LifetimeDef>,\n     pub unsafety: Unsafety,\n@@ -1176,15 +1179,15 @@ pub struct ClosureTy {\n     pub bounds: TyParamBounds,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,\n     pub abi: Abi,\n     pub lifetimes: Vec<LifetimeDef>,\n     pub decl: P<FnDecl>\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n /// The different kinds of types recognized by the compiler\n pub enum Ty_ {\n     TyVec(P<Ty>),\n@@ -1219,13 +1222,13 @@ pub enum Ty_ {\n     TyInfer,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum AsmDialect {\n     AsmAtt,\n     AsmIntel\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct InlineAsm {\n     pub asm: InternedString,\n     pub asm_str_style: StrStyle,\n@@ -1239,7 +1242,7 @@ pub struct InlineAsm {\n }\n \n /// represents an argument in a function header\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Arg {\n     pub ty: P<Ty>,\n     pub pat: P<Pat>,\n@@ -1267,14 +1270,14 @@ impl Arg {\n }\n \n /// represents the header (not the body) of a function declaration\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct FnDecl {\n     pub inputs: Vec<Arg>,\n     pub output: FunctionRetTy,\n     pub variadic: bool\n }\n \n-#[deriving(Copy, Clone, PartialEq, Eq, Encodable, Decodable, Hash)]\n+#[deriving(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash)]\n pub enum Unsafety {\n     Unsafe,\n     Normal,\n@@ -1289,7 +1292,7 @@ impl fmt::Show for Unsafety {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum FunctionRetTy {\n     /// Functions with return type ! that always\n     /// raise an error or exit (i.e. never return to the caller)\n@@ -1308,7 +1311,7 @@ impl FunctionRetTy {\n }\n \n /// Represents the kind of 'self' associated with a method\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ExplicitSelf_ {\n     /// No self\n     SelfStatic,\n@@ -1322,15 +1325,15 @@ pub enum ExplicitSelf_ {\n \n pub type ExplicitSelf = Spanned<ExplicitSelf_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Method {\n     pub attrs: Vec<Attribute>,\n     pub id: NodeId,\n     pub span: Span,\n     pub node: Method_,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Method_ {\n     /// Represents a method declaration\n     MethDecl(Ident,\n@@ -1345,7 +1348,7 @@ pub enum Method_ {\n     MethMac(Mac),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Mod {\n     /// A span from the first token past `{` to the last token until `}`.\n     /// For `mod foo;`, the inner span ranges from the first token\n@@ -1355,31 +1358,31 @@ pub struct Mod {\n     pub items: Vec<P<Item>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ForeignMod {\n     pub abi: Abi,\n     pub view_items: Vec<ViewItem>,\n     pub items: Vec<P<ForeignItem>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct VariantArg {\n     pub ty: P<Ty>,\n     pub id: NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum VariantKind {\n     TupleVariantKind(Vec<VariantArg>),\n     StructVariantKind(P<StructDef>),\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct EnumDef {\n     pub variants: Vec<P<Variant>>,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Variant_ {\n     pub name: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1391,7 +1394,7 @@ pub struct Variant_ {\n \n pub type Variant = Spanned<Variant_>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum PathListItem_ {\n     PathListIdent { name: Ident, id: NodeId },\n     PathListMod { id: NodeId }\n@@ -1409,7 +1412,7 @@ pub type PathListItem = Spanned<PathListItem_>;\n \n pub type ViewPath = Spanned<ViewPath_>;\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ViewPath_ {\n \n     /// `foo::bar::baz as quux`\n@@ -1426,15 +1429,15 @@ pub enum ViewPath_ {\n     ViewPathList(Path, Vec<PathListItem> , NodeId)\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ViewItem {\n     pub node: ViewItem_,\n     pub attrs: Vec<Attribute>,\n     pub vis: Visibility,\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ViewItem_ {\n     /// Ident: name used to refer to this crate in the code\n     /// optional (InternedString,StrStyle): if present, this is a location\n@@ -1450,17 +1453,17 @@ pub type Attribute = Spanned<Attribute_>;\n /// Distinguishes between Attributes that decorate items and Attributes that\n /// are contained as statements within items. These two cases need to be\n /// distinguished for pretty-printing.\n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum AttrStyle {\n     AttrOuter,\n     AttrInner,\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub struct AttrId(pub uint);\n \n /// Doc-comments are promoted to attributes that have is_sugared_doc = true\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Attribute_ {\n     pub id: AttrId,\n     pub style: AttrStyle,\n@@ -1473,13 +1476,13 @@ pub struct Attribute_ {\n /// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n /// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n /// same as the impl's node id).\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct TraitRef {\n     pub path: Path,\n     pub ref_id: NodeId,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct PolyTraitRef {\n     /// The `'a` in `<'a> Foo<&'a T>`\n     pub bound_lifetimes: Vec<LifetimeDef>,\n@@ -1488,7 +1491,7 @@ pub struct PolyTraitRef {\n     pub trait_ref: TraitRef\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum Visibility {\n     Public,\n     Inherited,\n@@ -1503,7 +1506,7 @@ impl Visibility {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct StructField_ {\n     pub kind: StructFieldKind,\n     pub id: NodeId,\n@@ -1522,7 +1525,7 @@ impl StructField_ {\n \n pub type StructField = Spanned<StructField_>;\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum StructFieldKind {\n     NamedField(Ident, Visibility),\n     /// Element of a tuple-like struct\n@@ -1538,7 +1541,7 @@ impl StructFieldKind {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct StructDef {\n     /// Fields, not including ctor\n     pub fields: Vec<StructField>,\n@@ -1551,7 +1554,7 @@ pub struct StructDef {\n   FIXME (#3300): Should allow items to be anonymous. Right now\n   we just use dummy names for anon items.\n  */\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct Item {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1561,7 +1564,7 @@ pub struct Item {\n     pub span: Span,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum Item_ {\n     ItemStatic(P<Ty>, Mutability, P<Expr>),\n     ItemConst(P<Ty>, P<Expr>),\n@@ -1605,7 +1608,7 @@ impl Item_ {\n     }\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub struct ForeignItem {\n     pub ident: Ident,\n     pub attrs: Vec<Attribute>,\n@@ -1615,7 +1618,7 @@ pub struct ForeignItem {\n     pub vis: Visibility,\n }\n \n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum ForeignItem_ {\n     ForeignItemFn(P<FnDecl>, Generics),\n     ForeignItemStatic(P<Ty>, /* is_mutbl */ bool),\n@@ -1630,7 +1633,7 @@ impl ForeignItem_ {\n     }\n }\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum UnboxedClosureKind {\n     FnUnboxedClosureKind,\n     FnMutUnboxedClosureKind,\n@@ -1640,7 +1643,7 @@ pub enum UnboxedClosureKind {\n /// The data we save and restore about an inlined item or method.  This is not\n /// part of the AST that we parse from a file, but it becomes part of the tree\n /// that we trans.\n-#[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show)]\n pub enum InlinedItem {\n     IIItem(P<Item>),\n     IITraitItem(DefId /* impl id */, TraitItem),"}, {"sha": "9196055267f6f9f2b056f0f9f6b1c032a6047f33", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -343,7 +343,7 @@ pub fn empty_generics() -> Generics {\n // ______________________________________________________________________\n // Enumerating the IDs which appear in an AST\n \n-#[deriving(Copy, Encodable, Decodable, Show)]\n+#[deriving(RustcEncodable, RustcDecodable, Show, Copy)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,"}, {"sha": "df820b40cb6de63d8aaf2d754cfa60f65e8c5128", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -340,14 +340,14 @@ pub fn cfg_matches(diagnostic: &SpanHandler, cfgs: &[P<MetaItem>], cfg: &ast::Me\n }\n \n /// Represents the #[deprecated=\"foo\"] and friends attributes.\n-#[deriving(Encodable,Decodable,Clone,Show)]\n+#[deriving(RustcEncodable,RustcDecodable,Clone,Show)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub text: Option<InternedString>\n }\n \n /// The available stability levels.\n-#[deriving(Copy,Encodable,Decodable,PartialEq,PartialOrd,Clone,Show)]\n+#[deriving(RustcEncodable,RustcDecodable,PartialEq,PartialOrd,Clone,Show,Copy)]\n pub enum StabilityLevel {\n     Deprecated,\n     Experimental,\n@@ -463,7 +463,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[deriving(Copy, PartialEq, Show, Encodable, Decodable)]\n+#[deriving(PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -482,7 +482,7 @@ impl ReprAttr {\n     }\n }\n \n-#[deriving(Copy, Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n+#[deriving(Eq, Hash, PartialEq, Show, RustcEncodable, RustcDecodable, Copy)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}, {"sha": "6b9af29c604571182e91961497f04d07dffc9505", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -92,7 +92,7 @@ pub struct Span {\n \n pub const DUMMY_SP: Span = Span { lo: BytePos(0), hi: BytePos(0), expn_id: NO_EXPANSION };\n \n-#[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n+#[deriving(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub struct Spanned<T> {\n     pub node: T,\n     pub span: Span,\n@@ -218,7 +218,7 @@ pub struct ExpnInfo {\n     pub callee: NameAndSpan\n }\n \n-#[deriving(Copy, PartialEq, Eq, Clone, Show, Hash, Encodable, Decodable)]\n+#[deriving(PartialEq, Eq, Clone, Show, Hash, RustcEncodable, RustcDecodable, Copy)]\n pub struct ExpnId(u32);\n \n pub const NO_EXPANSION: ExpnId = ExpnId(-1);"}, {"sha": "57dfbc0c6e8bcf6f3f56ffd2a2a91e8ef997596e", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -21,24 +21,45 @@ use parse::token::InternedString;\n use parse::token;\n use ptr::P;\n \n+pub fn expand_deriving_rustc_decodable<F>(cx: &mut ExtCtxt,\n+                                          span: Span,\n+                                          mitem: &MetaItem,\n+                                          item: &Item,\n+                                          push: F) where\n+    F: FnOnce(P<Item>),\n+{\n+    expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n+}\n+\n pub fn expand_deriving_decodable<F>(cx: &mut ExtCtxt,\n                                     span: Span,\n                                     mitem: &MetaItem,\n                                     item: &Item,\n                                     push: F) where\n     F: FnOnce(P<Item>),\n+{\n+    expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n+}\n+\n+fn expand_deriving_decodable_imp<F>(cx: &mut ExtCtxt,\n+                                    span: Span,\n+                                    mitem: &MetaItem,\n+                                    item: &Item,\n+                                    push: F,\n+                                    krate: &'static str) where\n+    F: FnOnce(P<Item>),\n {\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec!(\"serialize\", \"Decodable\"), None,\n+        path: Path::new_(vec!(krate, \"Decodable\"), None,\n                          vec!(box Literal(Path::new_local(\"__D\")),\n                               box Literal(Path::new_local(\"__E\"))), true),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n             bounds: vec!((\"__D\", None, vec!(Path::new_(\n-                            vec!(\"serialize\", \"Decoder\"), None,\n+                            vec!(krate, \"Decoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n                          (\"__E\", None, vec!()))\n         },\n@@ -54,7 +75,7 @@ pub fn expand_deriving_decodable<F>(cx: &mut ExtCtxt,\n                                                box Literal(Path::new_local(\"__E\"))), true)),\n                 attributes: Vec::new(),\n                 combine_substructure: combine_substructure(|a, b, c| {\n-                    decodable_substructure(a, b, c)\n+                    decodable_substructure(a, b, c, krate)\n                 }),\n             })\n     };\n@@ -63,9 +84,10 @@ pub fn expand_deriving_decodable<F>(cx: &mut ExtCtxt,\n }\n \n fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,\n-                          substr: &Substructure) -> P<Expr> {\n+                          substr: &Substructure,\n+                          krate: &str) -> P<Expr> {\n     let decoder = substr.nonself_args[0].clone();\n-    let recurse = vec!(cx.ident_of(\"serialize\"),\n+    let recurse = vec!(cx.ident_of(krate),\n                     cx.ident_of(\"Decodable\"),\n                     cx.ident_of(\"decode\"));\n     // throw an underscore in front to suppress unused variable warnings"}, {"sha": "8bd3df6232ce5d61d67232fe3e7dd8c8b90cd67b", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -97,24 +97,45 @@ use ext::deriving::generic::ty::*;\n use parse::token;\n use ptr::P;\n \n+pub fn expand_deriving_rustc_encodable<F>(cx: &mut ExtCtxt,\n+                                          span: Span,\n+                                          mitem: &MetaItem,\n+                                          item: &Item,\n+                                          push: F) where\n+    F: FnOnce(P<Item>),\n+{\n+    expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n+}\n+\n pub fn expand_deriving_encodable<F>(cx: &mut ExtCtxt,\n                                     span: Span,\n                                     mitem: &MetaItem,\n                                     item: &Item,\n                                     push: F) where\n     F: FnOnce(P<Item>),\n+{\n+    expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n+}\n+\n+fn expand_deriving_encodable_imp<F>(cx: &mut ExtCtxt,\n+                                    span: Span,\n+                                    mitem: &MetaItem,\n+                                    item: &Item,\n+                                    push: F,\n+                                    krate: &'static str) where\n+    F: FnOnce(P<Item>),\n {\n     let trait_def = TraitDef {\n         span: span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec!(\"serialize\", \"Encodable\"), None,\n+        path: Path::new_(vec!(krate, \"Encodable\"), None,\n                          vec!(box Literal(Path::new_local(\"__S\")),\n                               box Literal(Path::new_local(\"__E\"))), true),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds {\n             lifetimes: Vec::new(),\n             bounds: vec!((\"__S\", None, vec!(Path::new_(\n-                            vec!(\"serialize\", \"Encoder\"), None,\n+                            vec!(krate, \"Encoder\"), None,\n                             vec!(box Literal(Path::new_local(\"__E\"))), true))),\n                          (\"__E\", None, vec!()))\n         },"}, {"sha": "edf29e670eb88dfdb9c4b6b2eb779a72448b4b92", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -71,24 +71,22 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             \"Hash\" => expand!(hash::expand_deriving_hash),\n \n                             \"RustcEncodable\" => {\n-                                expand!(encodable::expand_deriving_encodable)\n+                                expand!(encodable::expand_deriving_rustc_encodable)\n                             }\n                             \"RustcDecodable\" => {\n-                                expand!(decodable::expand_deriving_decodable)\n+                                expand!(decodable::expand_deriving_rustc_decodable)\n                             }\n                             \"Encodable\" => {\n-                                // NOTE: uncomment after a stage0 snap\n-                                // cx.span_warn(titem.span,\n-                                //              \"deriving(Encodable) is deprecated \\\n-                                //               in favor of deriving(RustcEncodable)\");\n+                                cx.span_warn(titem.span,\n+                                             \"deriving(Encodable) is deprecated \\\n+                                              in favor of deriving(RustcEncodable)\");\n \n                                 expand!(encodable::expand_deriving_encodable)\n                             }\n                             \"Decodable\" => {\n-                                // NOTE: uncomment after a stage0 snap\n-                                // cx.span_warn(titem.span,\n-                                //              \"deriving(Decodable) is deprecated \\\n-                                //               in favor of deriving(RustcDecodable)\");\n+                                cx.span_warn(titem.span,\n+                                             \"deriving(Decodable) is deprecated \\\n+                                              in favor of deriving(RustcDecodable)\");\n \n                                 expand!(decodable::expand_deriving_decodable)\n                             }"}, {"sha": "6a296333fdb6a59bb9d3fc4949177548892ed572", "filename": "src/libsyntax/ext/mtwt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fmtwt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fext%2Fmtwt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmtwt.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -39,7 +39,7 @@ pub struct SCTable {\n     rename_memo: RefCell<HashMap<(SyntaxContext,Ident,Name),SyntaxContext>>,\n }\n \n-#[deriving(Copy, PartialEq, Encodable, Decodable, Hash, Show)]\n+#[deriving(PartialEq, RustcEncodable, RustcDecodable, Hash, Show, Copy)]\n pub enum SyntaxContext_ {\n     EmptyCtxt,\n     Mark (Mrk,SyntaxContext),"}, {"sha": "d5093c5055c79251956e391d1feb5f802d3ff28e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -34,6 +34,8 @@ extern crate serialize;\n extern crate term;\n extern crate libc;\n \n+extern crate \"serialize\" as rustc_serialize; // used by deriving\n+\n pub mod util {\n     pub mod interner;\n     #[cfg(test)]"}, {"sha": "f575d3d6c676b884a4b3042d4769bdf39ea42551", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -28,7 +28,7 @@ use std::path::BytesContainer;\n use std::rc::Rc;\n \n #[allow(non_camel_case_types)]\n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n pub enum BinOpToken {\n     Plus,\n     Minus,\n@@ -43,7 +43,7 @@ pub enum BinOpToken {\n }\n \n /// A delimeter token\n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n pub enum DelimToken {\n     /// A round parenthesis: `(` or `)`\n     Paren,\n@@ -53,14 +53,14 @@ pub enum DelimToken {\n     Brace,\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n pub enum IdentStyle {\n     /// `::` follows the identifier with no whitespace in-between.\n     ModName,\n     Plain,\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show, Copy)]\n pub enum Lit {\n     Byte(ast::Name),\n     Char(ast::Name),\n@@ -86,7 +86,7 @@ impl Lit {\n }\n \n #[allow(non_camel_case_types)]\n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Show)]\n pub enum Token {\n     /* Expression-operator symbols. */\n     Eq,\n@@ -334,7 +334,7 @@ impl Token {\n     }\n }\n \n-#[deriving(Clone, Encodable, Decodable, PartialEq, Eq, Hash)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n     NtItem(P<ast::Item>),"}, {"sha": "4b73fe04c859d513cfc28d8b55ae388040fc5e0a", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -37,6 +37,7 @@\n extern crate getopts;\n extern crate regex;\n extern crate serialize;\n+extern crate \"serialize\" as rustc_serialize;\n extern crate term;\n \n pub use self::TestFn::*;\n@@ -214,7 +215,7 @@ pub struct TestDescAndFn {\n     pub testfn: TestFn,\n }\n \n-#[deriving(Clone, Copy, Encodable, Decodable, PartialEq, Show)]\n+#[deriving(Clone, RustcEncodable, RustcDecodable, PartialEq, Show, Copy)]\n pub struct Metric {\n     value: f64,\n     noise: f64"}, {"sha": "e58a0229d69623fd1bce2f55e8720c437a0d2e18", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04bc5cc49a398df712092a68ab9ad83019498ad/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=b04bc5cc49a398df712092a68ab9ad83019498ad", "patch": "@@ -24,7 +24,9 @@\n \n #[cfg(test)] #[phase(plugin, link)] extern crate log;\n \n+#[cfg(stage0)]\n extern crate serialize;\n+extern crate \"serialize\" as rustc_serialize;\n extern crate libc;\n \n pub use self::ParseError::*;\n@@ -76,7 +78,8 @@ mod imp {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, RustcEncodable,\n+           RustcDecodable, Show, Copy)]\n pub struct Timespec {\n     pub sec: i64,\n     pub nsec: i32,"}]}