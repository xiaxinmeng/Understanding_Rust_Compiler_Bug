{"sha": "5f02de3c226bce60c58ce2bc436e69c55b90a616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDJkZTNjMjI2YmNlNjBjNThjZTJiYzQzNmU2OWM1NWI5MGE2MTY=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T22:50:47Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-20T22:50:47Z"}, "message": "clarify casts are checked at compile time", "tree": {"sha": "f14887aa40f38b9f5a234c5fe1bb50ce60f38949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14887aa40f38b9f5a234c5fe1bb50ce60f38949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f02de3c226bce60c58ce2bc436e69c55b90a616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f02de3c226bce60c58ce2bc436e69c55b90a616", "html_url": "https://github.com/rust-lang/rust/commit/5f02de3c226bce60c58ce2bc436e69c55b90a616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f02de3c226bce60c58ce2bc436e69c55b90a616/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14bc45477085222dcf2b87bef75ca3e7d0b5274a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14bc45477085222dcf2b87bef75ca3e7d0b5274a", "html_url": "https://github.com/rust-lang/rust/commit/14bc45477085222dcf2b87bef75ca3e7d0b5274a"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "a5527b2507551906afd496d2df4f9b496c27109a", "filename": "src/doc/tarpl/casts.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f02de3c226bce60c58ce2bc436e69c55b90a616/src%2Fdoc%2Ftarpl%2Fcasts.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f02de3c226bce60c58ce2bc436e69c55b90a616/src%2Fdoc%2Ftarpl%2Fcasts.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Fcasts.md?ref=5f02de3c226bce60c58ce2bc436e69c55b90a616", "patch": "@@ -9,7 +9,9 @@ using the `as` keyword: `expr as Type`.\n True casts generally revolve around raw pointers and the primitive numeric\n types. Even though they're dangerous, these casts are *infallible* at runtime.\n If a cast triggers some subtle corner case no indication will be given that\n-this occurred. The cast will simply succeed.\n+this occurred. The cast will simply succeed. That said, casts must be valid\n+at the type level, or else they will be prevented statically. For instance,\n+`7u8 as bool` will not compile.\n \n That said, casts aren't `unsafe` because they generally can't violate memory\n safety *on their own*. For instance, converting an integer to a raw pointer can"}, {"sha": "f7ed15f1e870137eb077cddc95b2b2da10170138", "filename": "src/doc/tarpl/repr-rust.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f02de3c226bce60c58ce2bc436e69c55b90a616/src%2Fdoc%2Ftarpl%2Frepr-rust.md", "raw_url": "https://github.com/rust-lang/rust/raw/5f02de3c226bce60c58ce2bc436e69c55b90a616/src%2Fdoc%2Ftarpl%2Frepr-rust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftarpl%2Frepr-rust.md?ref=5f02de3c226bce60c58ce2bc436e69c55b90a616", "patch": "@@ -12,7 +12,11 @@ An enum is said to be *C-like* if none of its variants have associated data.\n For all these, individual fields are aligned to their preferred alignment. For\n primitives this is usually equal to their size. For instance, a u32 will be\n aligned to a multiple of 32 bits, and a u16 will be aligned to a multiple of 16\n-bits. Composite structures will have a preferred alignment equal to the maximum\n+bits. Note that some primitives may be emulated on different platforms, and as\n+such may have strange alignment. For instance, a u64 on x86 may actually be\n+emulated as a pair of u32s, and thus only have 32-bit alignment.\n+\n+Composite structures will have a preferred alignment equal to the maximum\n of their fields' preferred alignment, and a size equal to a multiple of their\n preferred alignment. This ensures that arrays of T can be correctly iterated\n by offsetting by their size. So for instance,"}]}