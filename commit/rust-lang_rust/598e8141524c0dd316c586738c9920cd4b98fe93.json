{"sha": "598e8141524c0dd316c586738c9920cd4b98fe93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5OGU4MTQxNTI0YzBkZDMxNmM1ODY3MzhjOTkyMGNkNGI5OGZlOTM=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T18:11:10Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-02-26T18:26:42Z"}, "message": "Hoist macro defs out of inner function", "tree": {"sha": "22772fe5a17f7c6fb1cb349417fab12a296bcb4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22772fe5a17f7c6fb1cb349417fab12a296bcb4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598e8141524c0dd316c586738c9920cd4b98fe93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598e8141524c0dd316c586738c9920cd4b98fe93", "html_url": "https://github.com/rust-lang/rust/commit/598e8141524c0dd316c586738c9920cd4b98fe93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598e8141524c0dd316c586738c9920cd4b98fe93/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca147a029e2052f03029a78602c292e4ec267ed6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca147a029e2052f03029a78602c292e4ec267ed6", "html_url": "https://github.com/rust-lang/rust/commit/ca147a029e2052f03029a78602c292e4ec267ed6"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "4a1a1952907c6f65a800041478ca7e63127601fc", "filename": "src/libcore/hash.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/598e8141524c0dd316c586738c9920cd4b98fe93/src%2Flibcore%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598e8141524c0dd316c586738c9920cd4b98fe93/src%2Flibcore%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash.rs?ref=598e8141524c0dd316c586738c9920cd4b98fe93", "patch": "@@ -186,42 +186,46 @@ fn SipState(key0: u64, key1: u64) -> SipState {\n     state\n }\n \n+// sadly, these macro definitions can't appear later,\n+// because they're needed in the following defs;\n+// this design could be improved.\n+\n+macro_rules! u8to64_le (\n+    ($buf:expr, $i:expr) =>\n+    ($buf[0+$i] as u64 |\n+     $buf[1+$i] as u64 << 8 |\n+     $buf[2+$i] as u64 << 16 |\n+     $buf[3+$i] as u64 << 24 |\n+     $buf[4+$i] as u64 << 32 |\n+     $buf[5+$i] as u64 << 40 |\n+     $buf[6+$i] as u64 << 48 |\n+     $buf[7+$i] as u64 << 56)\n+)\n+\n+macro_rules! rotl (\n+    ($x:expr, $b:expr) =>\n+    (($x << $b) | ($x >> (64 - $b)))\n+)\n+\n+macro_rules! compress (\n+    ($v0:expr, $v1:expr, $v2:expr, $v3:expr) =>\n+    ({\n+        $v0 += $v1; $v1 = rotl!($v1, 13); $v1 ^= $v0;\n+        $v0 = rotl!($v0, 32);\n+        $v2 += $v3; $v3 = rotl!($v3, 16); $v3 ^= $v2;\n+        $v0 += $v3; $v3 = rotl!($v3, 21); $v3 ^= $v0;\n+        $v2 += $v1; $v1 = rotl!($v1, 17); $v1 ^= $v2;\n+        $v2 = rotl!($v2, 32);\n+    })\n+)\n+\n \n impl io::Writer for SipState {\n \n     // Methods for io::writer\n     #[inline(always)]\n     fn write(&self, msg: &[const u8]) {\n \n-        macro_rules! u8to64_le (\n-            ($buf:expr, $i:expr) =>\n-            ($buf[0+$i] as u64 |\n-             $buf[1+$i] as u64 << 8 |\n-             $buf[2+$i] as u64 << 16 |\n-             $buf[3+$i] as u64 << 24 |\n-             $buf[4+$i] as u64 << 32 |\n-             $buf[5+$i] as u64 << 40 |\n-             $buf[6+$i] as u64 << 48 |\n-             $buf[7+$i] as u64 << 56)\n-        );\n-\n-        macro_rules! rotl (\n-            ($x:expr, $b:expr) =>\n-            (($x << $b) | ($x >> (64 - $b)))\n-        );\n-\n-        macro_rules! compress (\n-            ($v0:expr, $v1:expr, $v2:expr, $v3:expr) =>\n-            ({\n-                $v0 += $v1; $v1 = rotl!($v1, 13); $v1 ^= $v0;\n-                $v0 = rotl!($v0, 32);\n-                $v2 += $v3; $v3 = rotl!($v3, 16); $v3 ^= $v2;\n-                $v0 += $v3; $v3 = rotl!($v3, 21); $v3 ^= $v0;\n-                $v2 += $v1; $v1 = rotl!($v1, 17); $v1 ^= $v2;\n-                $v2 = rotl!($v2, 32);\n-            })\n-        );\n-\n         let length = msg.len();\n         self.length += length;\n "}]}