{"sha": "1b55d19479eabcb5d6cbda651187c7004aa28f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNTVkMTk0NzllYWJjYjVkNmNiZGE2NTExODdjNzAwNGFhMjhmN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T13:33:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-21T13:33:58Z"}, "message": "Auto merge of #44679 - oli-obk:clippy_ci, r=alexcrichton\n\nAdd clippy to `toolstate.toml`\n\nr? @alexcrichton\n\ncc @Manishearth\n\nI have no idea how to get clippy working... it needs proc macros, and I think I did everything right (I just did what the cargo step is doing), but it's not working:\n\n```\nerror: libproc_macro-6210e4b46662ec28.so: cannot open shared object file: No such file or directory\n  --> src/tools/clippy/clippy_lints/src/lib.rs:47:1\n   |\n47 | extern crate serde_derive;\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: libproc_macro-6210e4b46662ec28.so: cannot open shared object file: No such file or directory\n  --> src/tools/clippy/clippy_lints/src/lib.rs:47:1\n   |\n47 | extern crate serde_derive;\n   | ^\n```\n\nIt's especially weird since it used to work\n\nAnyway. Fixing it can be left for a future PR, this one adds it to CI, but marks it as \"broken\"", "tree": {"sha": "343d80eaabeeb269414846d1de3b078b76e64781", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/343d80eaabeeb269414846d1de3b078b76e64781"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b55d19479eabcb5d6cbda651187c7004aa28f7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b55d19479eabcb5d6cbda651187c7004aa28f7f", "html_url": "https://github.com/rust-lang/rust/commit/1b55d19479eabcb5d6cbda651187c7004aa28f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b55d19479eabcb5d6cbda651187c7004aa28f7f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35edf7d8cbd49aa4ea516c6b60615927a722dfd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/35edf7d8cbd49aa4ea516c6b60615927a722dfd6", "html_url": "https://github.com/rust-lang/rust/commit/35edf7d8cbd49aa4ea516c6b60615927a722dfd6"}, {"sha": "7d7e7d4b97fbf260d068cef5a2e449589ad49dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7e7d4b97fbf260d068cef5a2e449589ad49dc0", "html_url": "https://github.com/rust-lang/rust/commit/7d7e7d4b97fbf260d068cef5a2e449589ad49dc0"}], "stats": {"total": 80, "additions": 59, "deletions": 21}, "files": [{"sha": "72144f22f5caeb1abd6fea668efafe0afa1e6279", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -330,23 +330,11 @@ it can be found\n Currently building Rust will also build the following external projects:\n \n * [clippy](https://github.com/rust-lang-nursery/rust-clippy)\n+* [miri](https://github.com/solson/miri)\n \n If your changes break one of these projects, you need to fix them by opening\n a pull request against the broken project. When you have opened a pull request,\n-you can point the submodule at your pull request by calling\n-\n-```\n-git fetch origin pull/$id_of_your_pr/head:my_pr\n-git checkout my_pr\n-```\n-\n-within the submodule's directory. Don't forget to also add your changes with\n-\n-```\n-git add path/to/submodule\n-```\n-\n-outside the submodule.\n+you can disable the tool via `src/tools/toolstate.toml`.\n \n It can also be more convenient during development to set `submodules = false`\n in the `config.toml` to prevent `x.py` from resetting to the original branch."}, {"sha": "8a6c998c932c255a26e8271cefe5072d0186089c", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -254,7 +254,7 @@ impl<'a> Builder<'a> {\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri, check::Clippy),\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,"}, {"sha": "21e7a05236266fa66d2b34779101f6e6fa8c7fdb", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -348,6 +348,50 @@ impl Step for Miri {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct Clippy {\n+    host: Interned<String>,\n+}\n+\n+impl Step for Clippy {\n+    type Output = ();\n+    const ONLY_HOSTS: bool = true;\n+    const DEFAULT: bool = false;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/clippy\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Clippy {\n+            host: run.target,\n+        });\n+    }\n+\n+    /// Runs `cargo test` for clippy.\n+    fn run(self, builder: &Builder) {\n+        let build = builder.build;\n+        let host = self.host;\n+        let compiler = builder.compiler(1, host);\n+\n+        let _clippy = builder.ensure(tool::Clippy { compiler, target: self.host });\n+        let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n+        cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/clippy/Cargo.toml\"));\n+\n+        // Don't build tests dynamically, just a pain to work with\n+        cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n+        // clippy tests need to know about the stage sysroot\n+        cargo.env(\"SYSROOT\", builder.sysroot(compiler));\n+\n+        builder.add_rustc_lib_path(compiler, &mut cargo);\n+\n+        try_run_expecting(\n+            build,\n+            &mut cargo,\n+            builder.build.config.toolstate.clippy.passes(ToolState::Testing),\n+        );\n+    }\n+}\n \n fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     // Configure PATH to find the right rustc. NB. we have to use PATH"}, {"sha": "db794f6d6c72c70d9908ffb0e08e249f7fbb9dca", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -405,7 +405,7 @@ impl Step for Clippy {\n             tool: \"clippy\",\n             mode: Mode::Librustc,\n             path: \"src/tools/clippy\",\n-            expectation: BuildExpectation::None,\n+            expectation: builder.build.config.toolstate.clippy.passes(ToolState::Compiling),\n         })\n     }\n }"}, {"sha": "0711c034602b5135decefda437f723c018b7a1bb", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -45,4 +45,5 @@ impl Default for ToolState {\n /// This is created from `toolstate.toml`.\n pub struct ToolStates {\n     pub miri: ToolState,\n+    pub clippy: ToolState,\n }"}, {"sha": "707b316190d657d42c7d3a29450fc1edcc3f816f", "filename": "src/tools/toolstate.toml", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b55d19479eabcb5d6cbda651187c7004aa28f7f/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=1b55d19479eabcb5d6cbda651187c7004aa28f7f", "patch": "@@ -10,15 +10,20 @@\n # configures whether the tool is included in the Rust distribution.\n #\n # If a tool was working before your PR but is broken now, consider\n-# updating the tool within your PR. How to do that is described in\n+# opening a PR against the tool so that it works with your changes.\n+# If the tool stops compiling, change its state to `Broken`. If it\n+# still builds, change it to `Compiling`.\n+# How to do that is described in\n # \"CONTRIBUTING.md#External Dependencies\". If the effort required is not\n # warranted (e.g. due to the tool abusing some API that you changed, and\n-# fixing the tool would mean a significant refactoring), you can disable\n-# the tool here, by changing its state to `Broken`. Remember to ping\n-# the tool authors if you do not fix their tool, so they can proactively\n-# fix it, instead of being surprised by the breakage.\n+# fixing the tool would mean a significant refactoring) remember to ping\n+# the tool authors, so they can fix it, instead of being surprised by the\n+# breakage.\n #\n # Each tool has a list of people to ping\n \n # ping @oli-obk @RalfJung @eddyb\n miri = \"Testing\"\n+\n+# ping @Manishearth @llogiq @mcarton @oli-obk\n+clippy = \"Broken\""}]}