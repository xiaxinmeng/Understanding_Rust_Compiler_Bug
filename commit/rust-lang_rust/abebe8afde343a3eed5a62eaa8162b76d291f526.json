{"sha": "abebe8afde343a3eed5a62eaa8162b76d291f526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZWJlOGFmZGUzNDNhM2VlZDVhNjJlYWE4MTYyYjc2ZDI5MWY1MjY=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-06-18T07:07:26Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-06-18T07:07:26Z"}, "message": "Use T as the subpattern type of Box<T>\n\nThe subpattern type of boxes being nil does not make sense because of\nbox patterns. They should have their inner type as the subpattern type.", "tree": {"sha": "6c636d189ce91fe43ef4d301d9a1a9b7fcfc7cd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c636d189ce91fe43ef4d301d9a1a9b7fcfc7cd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abebe8afde343a3eed5a62eaa8162b76d291f526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abebe8afde343a3eed5a62eaa8162b76d291f526", "html_url": "https://github.com/rust-lang/rust/commit/abebe8afde343a3eed5a62eaa8162b76d291f526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abebe8afde343a3eed5a62eaa8162b76d291f526/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfb8c80e118a6844e3a7130a884e92dde4ef4694", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfb8c80e118a6844e3a7130a884e92dde4ef4694", "html_url": "https://github.com/rust-lang/rust/commit/dfb8c80e118a6844e3a7130a884e92dde4ef4694"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "98d90188312df752de79898db0671cc40db568e6", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/abebe8afde343a3eed5a62eaa8162b76d291f526/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abebe8afde343a3eed5a62eaa8162b76d291f526/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=abebe8afde343a3eed5a62eaa8162b76d291f526", "patch": "@@ -774,21 +774,26 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n         },\n         ty::TyRef(_, ref ty_and_mut) => vec![ty_and_mut.ty],\n         ty::TyAdt(adt, substs) => {\n-            adt.variants[ctor.variant_index_for_adt(adt)].fields.iter().map(|field| {\n-                let is_visible = adt.is_enum()\n-                    || field.vis.is_accessible_from(cx.module, cx.tcx);\n-                if is_visible {\n-                    field.ty(cx.tcx, substs)\n-                } else {\n-                    // Treat all non-visible fields as nil. They\n-                    // can't appear in any other pattern from\n-                    // this match (because they are private),\n-                    // so their type does not matter - but\n-                    // we don't want to know they are\n-                    // uninhabited.\n-                    cx.tcx.mk_nil()\n-                }\n-            }).collect()\n+            if adt.is_box() {\n+                // Use T as the sub pattern type of Box<T>.\n+                vec![substs[0].as_type().unwrap()]\n+            } else {\n+                adt.variants[ctor.variant_index_for_adt(adt)].fields.iter().map(|field| {\n+                    let is_visible = adt.is_enum()\n+                        || field.vis.is_accessible_from(cx.module, cx.tcx);\n+                    if is_visible {\n+                        field.ty(cx.tcx, substs)\n+                    } else {\n+                        // Treat all non-visible fields as nil. They\n+                        // can't appear in any other pattern from\n+                        // this match (because they are private),\n+                        // so their type does not matter - but\n+                        // we don't want to know they are\n+                        // uninhabited.\n+                        cx.tcx.mk_nil()\n+                    }\n+                }).collect()\n+            }\n         }\n         _ => vec![],\n     }"}, {"sha": "312835225edf5a51b8e4c406b473836b153f676b", "filename": "src/test/run-pass/issue-42679.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/abebe8afde343a3eed5a62eaa8162b76d291f526/src%2Ftest%2Frun-pass%2Fissue-42679.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abebe8afde343a3eed5a62eaa8162b76d291f526/src%2Ftest%2Frun-pass%2Fissue-42679.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-42679.rs?ref=abebe8afde343a3eed5a62eaa8162b76d291f526", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+#![feature(box_patterns)]\n+\n+#[derive(Debug, PartialEq)]\n+enum Test {\n+    Foo(usize),\n+    Bar(isize),\n+}\n+\n+fn main() {\n+    let a = box Test::Foo(10);\n+    let b = box Test::Bar(-20);\n+    match (a, b) {\n+        (_, box Test::Foo(_)) => unreachable!(),\n+        (box Test::Foo(x), b) => {\n+            assert_eq!(x, 10);\n+            assert_eq!(b, box Test::Bar(-20));\n+        },\n+        _ => unreachable!(),\n+    }\n+}"}]}