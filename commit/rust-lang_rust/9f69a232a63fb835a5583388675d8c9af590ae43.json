{"sha": "9f69a232a63fb835a5583388675d8c9af590ae43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNjlhMjMyYTYzZmI4MzVhNTU4MzM4ODY3NWQ4YzlhZjU5MGFlNDM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-06T23:18:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-06T23:18:08Z"}, "message": "Rollup merge of #76338 - euclio:intra-link-iterator, r=jyn514\n\nadd some intra-doc links to `Iterator`", "tree": {"sha": "1c21dd3a421469f363bf0fbec9f17fc3d1df2dc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c21dd3a421469f363bf0fbec9f17fc3d1df2dc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f69a232a63fb835a5583388675d8c9af590ae43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfVW4xCRBK7hj4Ov3rIwAAdHIIAC90DciBkvTYknMR+JCNnev0\nsQ89dGWLVCxj3jl6b9SeyMQN3dKG+w7mrYfeA+wWGP20oNjPYeYta16WfKbL7cmd\n0AXfYSg0ERvr8i2kV2Ut1m/Q9NCr4EgyuWSm1LCl+qq+TFXY10vCvTFYpNlhRP0u\n210y/sU17oFztKMRg2t4qCY+Qr3pGZnUAjjrQ+S6AzwistMWwT45uThHn0ZbKijg\na5FTi8lwj9YEQudhULd8kM6NDZzSdF2hdPNEIbIdayOFIvW0bC5Lhq/wcHdPgEJF\n+ssNDSNXVQy7QvOTTDorIEFrxHnbygZx6iKjgNZCtFFUSEGJhrXRH6mmmZ6UDec=\n=1IdA\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c21dd3a421469f363bf0fbec9f17fc3d1df2dc8\nparent 1b24f1401dcf7cc53f7e7d805e47c940d9614af0\nparent 2ed1a217902134850907e4c98b7fc01670df8c39\nauthor Dylan DPC <dylan.dpc@gmail.com> 1599434288 +0200\ncommitter GitHub <noreply@github.com> 1599434288 +0200\n\nRollup merge of #76338 - euclio:intra-link-iterator, r=jyn514\n\nadd some intra-doc links to `Iterator`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f69a232a63fb835a5583388675d8c9af590ae43", "html_url": "https://github.com/rust-lang/rust/commit/9f69a232a63fb835a5583388675d8c9af590ae43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f69a232a63fb835a5583388675d8c9af590ae43/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b24f1401dcf7cc53f7e7d805e47c940d9614af0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b24f1401dcf7cc53f7e7d805e47c940d9614af0", "html_url": "https://github.com/rust-lang/rust/commit/1b24f1401dcf7cc53f7e7d805e47c940d9614af0"}, {"sha": "2ed1a217902134850907e4c98b7fc01670df8c39", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1a217902134850907e4c98b7fc01670df8c39", "html_url": "https://github.com/rust-lang/rust/commit/2ed1a217902134850907e4c98b7fc01670df8c39"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "b8a09f822b6da3ff1578fc26fdea26251c66cf56", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f69a232a63fb835a5583388675d8c9af590ae43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f69a232a63fb835a5583388675d8c9af590ae43/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9f69a232a63fb835a5583388675d8c9af590ae43", "patch": "@@ -809,7 +809,7 @@ pub trait Iterator {\n         Enumerate::new(self)\n     }\n \n-    /// Creates an iterator which can use `peek` to look at the next element of\n+    /// Creates an iterator which can use [`peek`] to look at the next element of\n     /// the iterator without consuming it.\n     ///\n     /// Adds a [`peek`] method to an iterator. See its documentation for\n@@ -1992,7 +1992,7 @@ pub trait Iterator {\n \n     /// The same as [`fold()`], but uses the first element in the\n     /// iterator as the initial value, folding every subsequent element into it.\n-    /// If the iterator is empty, return `None`; otherwise, return the result\n+    /// If the iterator is empty, return [`None`]; otherwise, return the result\n     /// of the fold.\n     ///\n     /// [`fold()`]: Iterator::fold\n@@ -2821,7 +2821,7 @@ pub trait Iterator {\n         Product::product(self)\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2843,7 +2843,7 @@ pub trait Iterator {\n         self.cmp_by(other, |x, y| x.cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2895,7 +2895,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another.\n     ///\n     /// # Examples\n@@ -2919,7 +2919,7 @@ pub trait Iterator {\n         self.partial_cmp_by(other, |x, y| x.partial_cmp(&y))\n     }\n \n-    /// Lexicographically compares the elements of this `Iterator` with those\n+    /// Lexicographically compares the elements of this [`Iterator`] with those\n     /// of another with respect to the specified comparison function.\n     ///\n     /// # Examples\n@@ -2980,7 +2980,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -2999,7 +2999,7 @@ pub trait Iterator {\n         self.eq_by(other, |x, y| x == y)\n     }\n \n-    /// Determines if the elements of this `Iterator` are equal to those of\n+    /// Determines if the elements of this [`Iterator`] are equal to those of\n     /// another with respect to the specified equality function.\n     ///\n     /// # Examples\n@@ -3040,7 +3040,7 @@ pub trait Iterator {\n         }\n     }\n \n-    /// Determines if the elements of this `Iterator` are unequal to those of\n+    /// Determines if the elements of this [`Iterator`] are unequal to those of\n     /// another.\n     ///\n     /// # Examples\n@@ -3059,7 +3059,7 @@ pub trait Iterator {\n         !self.eq(other)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less than those of another.\n     ///\n     /// # Examples\n@@ -3080,7 +3080,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Less)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// less or equal to those of another.\n     ///\n     /// # Examples\n@@ -3101,7 +3101,7 @@ pub trait Iterator {\n         matches!(self.partial_cmp(other), Some(Ordering::Less | Ordering::Equal))\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than those of another.\n     ///\n     /// # Examples\n@@ -3122,7 +3122,7 @@ pub trait Iterator {\n         self.partial_cmp(other) == Some(Ordering::Greater)\n     }\n \n-    /// Determines if the elements of this `Iterator` are lexicographically\n+    /// Determines if the elements of this [`Iterator`] are lexicographically\n     /// greater than or equal to those of another.\n     ///\n     /// # Examples"}]}