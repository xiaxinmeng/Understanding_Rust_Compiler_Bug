{"sha": "d131abefc3aa53fc6376593729e6931326270503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMzFhYmVmYzNhYTUzZmM2Mzc2NTkzNzI5ZTY5MzEzMjYyNzA1MDM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-08T19:50:09Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-13T04:53:55Z"}, "message": "ast: don't use pprust in Debug", "tree": {"sha": "dfc3e5648ad7a7b1124d119c0d2d2e590aaaf555", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfc3e5648ad7a7b1124d119c0d2d2e590aaaf555"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d131abefc3aa53fc6376593729e6931326270503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d131abefc3aa53fc6376593729e6931326270503", "html_url": "https://github.com/rust-lang/rust/commit/d131abefc3aa53fc6376593729e6931326270503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d131abefc3aa53fc6376593729e6931326270503/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a", "html_url": "https://github.com/rust-lang/rust/commit/1721c9685b1ee69f1e17b3a8b09145b10fdfbe4a"}], "stats": {"total": 47, "additions": 6, "deletions": 41}, "files": [{"sha": "1c78672da1ae489dd05f86c0d810980cdec75d4c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d131abefc3aa53fc6376593729e6931326270503/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d131abefc3aa53fc6376593729e6931326270503/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d131abefc3aa53fc6376593729e6931326270503", "patch": "@@ -70,7 +70,7 @@ impl fmt::Display for Lifetime {\n /// along with a bunch of supporting information.\n ///\n /// E.g., `std::cmp::PartialEq`.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Path {\n     pub span: Span,\n     /// The segments in the path: the things separated by `::`.\n@@ -86,12 +86,6 @@ impl PartialEq<Symbol> for Path {\n     }\n }\n \n-impl fmt::Debug for Path {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"path({})\", pprust::path_to_string(self))\n-    }\n-}\n-\n impl fmt::Display for Path {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", pprust::path_to_string(self))\n@@ -507,19 +501,13 @@ pub struct Block {\n     pub span: Span,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Pat {\n     pub id: NodeId,\n     pub kind: PatKind,\n     pub span: Span,\n }\n \n-impl fmt::Debug for Pat {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"pat({}: {})\", self.id, pprust::pat_to_string(self))\n-    }\n-}\n-\n impl Pat {\n     /// Attempt reparsing the pattern as a type.\n     /// This is intended for use by diagnostics.\n@@ -831,7 +819,7 @@ impl UnOp {\n }\n \n /// A statement\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Stmt {\n     pub id: NodeId,\n     pub kind: StmtKind,\n@@ -865,18 +853,7 @@ impl Stmt {\n     }\n }\n \n-impl fmt::Debug for Stmt {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(\n-            f,\n-            \"stmt({}: {})\",\n-            self.id.to_string(),\n-            pprust::stmt_to_string(self)\n-        )\n-    }\n-}\n-\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum StmtKind {\n     /// A local (let) binding.\n     Local(P<Local>),\n@@ -973,7 +950,7 @@ pub struct AnonConst {\n }\n \n /// An expression.\n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Expr {\n     pub id: NodeId,\n     pub kind: ExprKind,\n@@ -1100,12 +1077,6 @@ impl Expr {\n     }\n }\n \n-impl fmt::Debug for Expr {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"expr({}: {})\", self.id, pprust::expr_to_string(self))\n-    }\n-}\n-\n /// Limit types of a range (inclusive or exclusive)\n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub enum RangeLimits {\n@@ -1660,19 +1631,13 @@ pub enum AssocTyConstraintKind {\n     },\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Ty {\n     pub id: NodeId,\n     pub kind: TyKind,\n     pub span: Span,\n }\n \n-impl fmt::Debug for Ty {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"type({})\", pprust::ty_to_string(self))\n-    }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct BareFnTy {\n     pub unsafety: Unsafety,"}]}