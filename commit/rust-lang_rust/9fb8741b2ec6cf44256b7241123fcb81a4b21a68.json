{"sha": "9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmYjg3NDFiMmVjNmNmNDQyNTZiNzI0MTEyM2ZjYjgxYTRiMjFhNjg=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T04:53:11Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:08:01Z"}, "message": "Handle breakage after libcore split\n\nAPI Changes:\n\n- &[T] and ~[T] no longer support the addition operator (+)", "tree": {"sha": "3d156d330710162c23b7e02924746daf2c2efc97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d156d330710162c23b7e02924746daf2c2efc97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "html_url": "https://github.com/rust-lang/rust/commit/9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "300d865fa4642f0a76b2676539efa3155ceaeddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/300d865fa4642f0a76b2676539efa3155ceaeddf", "html_url": "https://github.com/rust-lang/rust/commit/300d865fa4642f0a76b2676539efa3155ceaeddf"}], "stats": {"total": 145, "additions": 75, "deletions": 70}, "files": [{"sha": "cea440afd9028592d728d41d504e05726f41dc70", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -997,7 +997,7 @@ fn make_lib_name(config: &config, auxfile: &Path, testfile: &Path) -> Path {\n fn make_exe_name(config: &config, testfile: &Path) -> Path {\n     let mut f = output_base_name(config, testfile);\n     if !os::consts::EXE_SUFFIX.is_empty() {\n-        match f.filename().map(|s| s + os::consts::EXE_SUFFIX.as_bytes()) {\n+        match f.filename().map(|s| Vec::from_slice(s).append(os::consts::EXE_SUFFIX.as_bytes())) {\n             Some(v) => f.set_filename(v),\n             None => ()\n         }\n@@ -1091,7 +1091,7 @@ fn make_out_name(config: &config, testfile: &Path, extension: &str) -> Path {\n \n fn aux_output_dir_name(config: &config, testfile: &Path) -> Path {\n     let mut f = output_base_name(config, testfile);\n-    match f.filename().map(|s| s + bytes!(\".libaux\")) {\n+    match f.filename().map(|s| Vec::from_slice(s).append(bytes!(\".libaux\"))) {\n         Some(v) => f.set_filename(v),\n         None => ()\n     }\n@@ -1273,7 +1273,7 @@ fn append_suffix_to_stem(p: &Path, suffix: &str) -> Path {\n         (*p).clone()\n     } else {\n         let stem = p.filestem().unwrap();\n-        p.with_filename(stem + bytes!(\"-\") + suffix.as_bytes())\n+        p.with_filename(Vec::from_slice(stem).append(bytes!(\"-\")).append(suffix.as_bytes()))\n     }\n }\n "}, {"sha": "e4c95538d3012199035ed6530b8f5f212b31539e", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -3604,7 +3604,7 @@ fn map<A: Clone, B: Clone>(f: |A| -> B, xs: &[A]) -> Vec<B> {\n     }\n     let first: B = f(xs[0].clone());\n     let rest: Vec<B> = map(f, xs.slice(1, xs.len()));\n-    return [first] + rest;\n+    return vec![first].append(rest.as_slice());\n }\n ~~~~\n "}, {"sha": "a771f30dfd197aabab3ea2d22c4d1304c9792b90", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -111,4 +111,6 @@ mod std {\n     #[cfg(test)] pub use realstd::rt;     // needed for fail!()\n     #[cfg(test)] pub use realstd::option; // needed for assert!()\n     #[cfg(test)] pub use realstd::os;     // needed for tests\n+    #[cfg(test)] pub use realstd::slice;  // needed for tests\n+    #[cfg(test)] pub use realstd::vec;    // needed for vec![]\n }"}, {"sha": "0e6baaa518a73e8aa20b1ed51c915949a20ecf70", "filename": "src/libcore/should_not_exist.rs", "status": "modified", "additions": 31, "deletions": 3, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibcore%2Fshould_not_exist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibcore%2Fshould_not_exist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fshould_not_exist.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -13,8 +13,9 @@ use char::Char;\n use clone::Clone;\n use container::Container;\n use default::Default;\n+use finally::try_finally;\n use intrinsics;\n-use iter::{Iterator, FromIterator};\n+use iter::{range, Iterator, FromIterator};\n use mem;\n use num::{CheckedMul, CheckedAdd};\n use option::{Some, None};\n@@ -25,7 +26,6 @@ use slice::ImmutableVector;\n use str::StrSlice;\n \n #[cfg(not(test))] use ops::Add;\n-#[cfg(not(test))] use slice::Vector;\n \n #[allow(ctypes)]\n extern {\n@@ -147,6 +147,34 @@ impl<'a> Add<&'a str,~str> for &'a str {\n impl<A: Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n-        self.iter().map(|a| a.clone()).collect()\n+        let len = self.len();\n+        let data_size = len.checked_mul(&mem::size_of::<A>()).unwrap();\n+        let size = mem::size_of::<Vec<()>>().checked_add(&data_size).unwrap();\n+\n+        unsafe {\n+            let ret = alloc(size) as *mut Vec<A>;\n+\n+            (*ret).fill = len * mem::nonzero_size_of::<A>();\n+            (*ret).alloc = len * mem::nonzero_size_of::<A>();\n+\n+            let mut i = 0;\n+            let p = &mut (*ret).data as *mut _ as *mut A;\n+            try_finally(\n+                &mut i, (),\n+                |i, ()| while *i < len {\n+                    mem::move_val_init(\n+                        &mut(*p.offset(*i as int)),\n+                        self.unsafe_ref(*i).clone());\n+                    *i += 1;\n+                },\n+                |i| if *i < len {\n+                    // we must be failing, clean up after ourselves\n+                    for j in range(0, *i as int) {\n+                        ptr::read(&*p.offset(j));\n+                    }\n+                    free(ret as *u8);\n+                });\n+            cast::transmute(ret)\n+        }\n     }\n }"}, {"sha": "400aa83a615143a04092b8c38428290c468c947c", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -2110,11 +2110,11 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> Vec<u8> {\n \n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);\n-    let compressed = encoder::metadata_encoding_version +\n-                        match flate::deflate_bytes(metadata.as_slice()) {\n-                            Some(compressed) => compressed,\n-                            None => cx.sess().fatal(format!(\"failed to compress metadata\", ))\n-                        }.as_slice();\n+    let compressed = Vec::from_slice(encoder::metadata_encoding_version)\n+                     .append(match flate::deflate_bytes(metadata.as_slice()) {\n+                         Some(compressed) => compressed,\n+                         None => cx.sess().fatal(format!(\"failed to compress metadata\"))\n+                     }.as_slice());\n     let llmeta = C_bytes(cx, compressed.as_slice());\n     let llconst = C_struct(cx, [llmeta], false);\n     let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.crateid.name,"}, {"sha": "4fd4f2f9d6ef0e635a147e737f71e85984127df1", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -157,8 +157,9 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n             // This is a bit unfortunate.\n \n             let idx = real_substs.tps.len() - num_method_ty_params;\n-            let substs = real_substs.tps.slice(0, idx) +\n-            &[real_substs.self_ty.unwrap()] + real_substs.tps.tailn(idx);\n+            let substs = Vec::from_slice(real_substs.tps.slice(0, idx))\n+                         .append([real_substs.self_ty.unwrap()])\n+                         .append(real_substs.tps.tailn(idx));\n             debug!(\"static default: changed substitution to {}\",\n                    substs.repr(ccx.tcx()));\n "}, {"sha": "0bdf0818c8e82ab780d47bc522e69f9747c86936", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -549,7 +549,8 @@ impl<'a> SourceCollector<'a> {\n             root_path.push_str(\"../\");\n         });\n \n-        cur.push(p.filename().expect(\"source has no filename\") + bytes!(\".html\"));\n+        cur.push(Vec::from_slice(p.filename().expect(\"source has no filename\"))\n+                 .append(bytes!(\".html\")));\n         let mut w = BufferedWriter::new(try!(File::create(&cur)));\n \n         let title = format!(\"{} -- source\", cur.filename_display());"}, {"sha": "f45ec8a6742a23585695e0f4c21b4d7fba6b0b63", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -13,7 +13,7 @@\n use to_str::{IntoStr};\n use str;\n use str::Str;\n-use str::StrSlice;\n+use str::{StrAllocating, StrSlice};\n use str::OwnedStr;\n use container::Container;\n use cast;"}, {"sha": "d8f1c108b742d48dd8040b50dba5b578319d7450", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::i16::{BITS, BYTES, MIN, MAX};"}, {"sha": "9cc8981fc13f422c10d231fd413362088f54723d", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::i32::{BITS, BYTES, MIN, MAX};"}, {"sha": "4f7fe32cc7088c9b7d3f171f258840d9e4bad851", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::i64::{BITS, BYTES, MIN, MAX};"}, {"sha": "bea315d86837392e42a3236b646b7d747abfd36e", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::i8::{BITS, BYTES, MIN, MAX};"}, {"sha": "d6a7fd1660b42800eb61a8731d6eb86413ba815a", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::int::{BITS, BYTES, MIN, MAX};"}, {"sha": "fcdb63f5ad5eb06564fadbc26af502becd07bc3d", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -77,6 +77,9 @@ impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n+        use slice::Vector;\n+        use str::StrAllocating;\n+\n         let mut buf = ::vec::Vec::new();\n         strconv::int_to_str_bytes_common(*self, radix, strconv::SignNeg, |i| {\n             buf.push(i);"}, {"sha": "4769b17fb2b84e7d15eb795117fd95311448ef69", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -21,7 +21,7 @@ use ops::{Add, Sub, Mul, Div, Rem, Neg};\n use option::{None, Option, Some};\n use slice::{CloneableVector, ImmutableVector, MutableVector};\n use std::cmp::{Ord, Eq};\n-use str::{Str, StrSlice};\n+use str::{StrAllocating, StrSlice};\n use strbuf::StrBuf;\n use vec::Vec;\n "}, {"sha": "5c93ca6c36b79748b8fba3a704eb353d4dd0feaa", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::u16::{BITS, BYTES, MIN, MAX};"}, {"sha": "436eae7cd14d0c839acb9f0a0a617560acaeb478", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::u32::{BITS, BYTES, MIN, MAX};"}, {"sha": "c654d6fbe3133df7e4e6cf36e0d4a58939a36741", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::u64::{BITS, BYTES, MIN, MAX};"}, {"sha": "7051b9191be8158ba668ec23d3b079068383b5ce", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::u8::{BITS, BYTES, MIN, MAX};"}, {"sha": "d1c3e96b2c987d7334b82dd6d3dc0b70d88141e1", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -11,11 +11,10 @@\n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n use from_str::FromStr;\n-use iter::Iterator;\n use num::{ToStrRadix, FromStrRadix};\n use num::strconv;\n use option::Option;\n-use slice::{ImmutableVector, OwnedVector};\n+use slice::ImmutableVector;\n use str;\n \n pub use core::uint::{BITS, BYTES, MIN, MAX};"}, {"sha": "0795238a49cff9578865f34f431f431575219533", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -78,6 +78,9 @@ impl ToStrRadix for $T {\n     /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n+        use slice::Vector;\n+        use str::StrAllocating;\n+\n         let mut buf = ::vec::Vec::new();\n         strconv::int_to_str_bytes_common(*self, radix, strconv::SignNone, |i| {\n             buf.push(i);"}, {"sha": "2650c39bdb863c6991a1b51ac7c102f190253318", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -279,26 +279,6 @@ impl<T: Clone> Iterator<~[T]> for Permutations<T> {\n     }\n }\n \n-#[cfg(not(test))]\n-impl<'a,T:Clone, V: Vector<T>> Add<V, Vec<T>> for &'a [T] {\n-    #[inline]\n-    fn add(&self, rhs: &V) -> Vec<T> {\n-        let rhs = rhs.as_slice();\n-        let mut res = Vec::with_capacity(self.len() + rhs.len());\n-        res.push_all(*self);\n-        res.push_all(rhs);\n-        res\n-    }\n-}\n-\n-#[cfg(not(test))]\n-impl<T:Clone, V: Vector<T>> Add<V, Vec<T>> for ~[T] {\n-    #[inline]\n-    fn add(&self, rhs: &V) -> Vec<T> {\n-        self.as_slice() + rhs.as_slice()\n-    }\n-}\n-\n /// Extension methods for vector slices with cloneable elements\n pub trait CloneableVector<T> {\n     /// Copy `self` into a new owned vector\n@@ -313,6 +293,11 @@ impl<'a, T: Clone> CloneableVector<T> for &'a [T] {\n     /// Returns a copy of `v`.\n     #[inline]\n     fn to_owned(&self) -> ~[T] {\n+        use RawVec = core::raw::Vec;\n+        use rt::global_heap::{malloc_raw, exchange_free};\n+        use num::{CheckedAdd, CheckedMul};\n+        use option::Expect;\n+\n         let len = self.len();\n         let data_size = len.checked_mul(&mem::size_of::<T>());\n         let data_size = data_size.expect(\"overflow in to_owned()\");\n@@ -2142,15 +2127,6 @@ mod bench {\n         })\n     }\n \n-    #[bench]\n-    fn add(b: &mut Bencher) {\n-        let xs: &[int] = [5, ..10];\n-        let ys: &[int] = [5, ..10];\n-        b.iter(|| {\n-            xs + ys;\n-        });\n-    }\n-\n     #[bench]\n     fn concat(b: &mut Bencher) {\n         let xss: Vec<Vec<uint>> = Vec::from_fn(100, |i| range(0, i).collect());"}, {"sha": "fb3dcc972871d67ac51fb365bd2ad57767e7ea26", "filename": "src/libstd/str.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fb8741b2ec6cf44256b7241123fcb81a4b21a68/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9fb8741b2ec6cf44256b7241123fcb81a4b21a68", "patch": "@@ -667,12 +667,11 @@ impl<'a> fmt::Show for MaybeOwned<'a> {\n /// Unsafe operations\n pub mod raw {\n     use cast;\n-    use iter::Iterator;\n     use libc;\n     use ptr::RawPtr;\n     use raw::Slice;\n-    use slice::ImmutableVector;\n-    use str::is_utf8;\n+    use slice::CloneableVector;\n+    use str::{is_utf8, StrAllocating};\n \n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};\n     pub use core::str::raw::{slice_unchecked};\n@@ -821,8 +820,10 @@ pub trait StrAllocating: Str {\n     /// Copy a slice into a new owned str.\n     #[inline]\n     fn to_owned(&self) -> ~str {\n+        use slice::Vector;\n+\n         unsafe {\n-            ::cast::transmute(self.as_bytes().to_owned())\n+            ::cast::transmute(self.as_slice().as_bytes().to_owned())\n         }\n     }\n "}]}