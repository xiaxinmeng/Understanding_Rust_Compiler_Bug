{"sha": "2920cc48e6c11208eb2519e0d7687a1794e22829", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MjBjYzQ4ZTZjMTEyMDhlYjI1MTllMGQ3Njg3YTE3OTRlMjI4Mjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-23T14:48:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-25T13:35:16Z"}, "message": "Fix SSA analysis for value types with PassMode::ByRef", "tree": {"sha": "086fe42f0d50b593967e79ceafda0eba095ebb5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/086fe42f0d50b593967e79ceafda0eba095ebb5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2920cc48e6c11208eb2519e0d7687a1794e22829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2920cc48e6c11208eb2519e0d7687a1794e22829", "html_url": "https://github.com/rust-lang/rust/commit/2920cc48e6c11208eb2519e0d7687a1794e22829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2920cc48e6c11208eb2519e0d7687a1794e22829/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca93bcba5dd0936ce0464483771292335cbccac1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca93bcba5dd0936ce0464483771292335cbccac1", "html_url": "https://github.com/rust-lang/rust/commit/ca93bcba5dd0936ce0464483771292335cbccac1"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "fc860010813ac764c62ebcaafecd6bfb1fef1711", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=2920cc48e6c11208eb2519e0d7687a1794e22829", "patch": "@@ -10,7 +10,7 @@ use cranelift_codegen::ir::AbiParam;\n use self::pass_mode::*;\n use crate::prelude::*;\n \n-pub use self::returning::codegen_return;\n+pub use self::returning::{can_return_to_ssa_var, codegen_return};\n \n // Copied from https://github.com/rust-lang/rust/blob/c2f4c57296f0d929618baed0b0d6eb594abf01eb/src/librustc/ty/layout.rs#L2349\n pub fn fn_sig_for_fn_abi<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) -> ty::PolyFnSig<'tcx> {"}, {"sha": "a503c6d795a07210f00feda6f0bfe3c78cd3429d", "filename": "src/abi/returning.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=2920cc48e6c11208eb2519e0d7687a1794e22829", "patch": "@@ -5,6 +5,14 @@ fn return_layout<'a, 'tcx>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>) -> TyLay\n     fx.layout_of(fx.monomorphize(&fx.mir.local_decls[RETURN_PLACE].ty))\n }\n \n+pub fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyLayout<'tcx>) -> bool {\n+    match get_pass_mode(tcx, dest_layout) {\n+        PassMode::NoPass | PassMode::ByVal(_) => true,\n+        // FIXME Make it possible to return ByValPair and ByRef to an ssa var.\n+        PassMode::ByValPair(_, _) | PassMode::ByRef => false\n+    }\n+}\n+\n pub fn codegen_return_param(\n     fx: &mut FunctionCx<impl Backend>,\n     ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,"}, {"sha": "3bebf0ed777241ec2c21876eae3e829c0a5bed57", "filename": "src/analyze.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2920cc48e6c11208eb2519e0d7687a1794e22829/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=2920cc48e6c11208eb2519e0d7687a1794e22829", "patch": "@@ -30,6 +30,18 @@ pub fn analyze(fx: &FunctionCx<'_, '_, impl Backend>) -> IndexVec<Local, SsaKind\n                 _ => {}\n             }\n         }\n+\n+        match &bb.terminator().kind {\n+            TerminatorKind::Call { destination, .. } => {\n+                if let Some((dest_place, _dest_bb)) = destination {\n+                    let dest_layout = fx.layout_of(fx.monomorphize(&dest_place.ty(&fx.mir.local_decls, fx.tcx).ty));\n+                    if !crate::abi::can_return_to_ssa_var(fx.tcx, dest_layout) {\n+                        analyze_non_ssa_place(&mut flag_map, dest_place);\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n     }\n \n     flag_map"}]}