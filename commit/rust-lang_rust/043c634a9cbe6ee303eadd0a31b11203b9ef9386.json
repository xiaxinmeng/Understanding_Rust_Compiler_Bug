{"sha": "043c634a9cbe6ee303eadd0a31b11203b9ef9386", "node_id": "C_kwDOAAsO6NoAKDA0M2M2MzRhOWNiZTZlZTMwM2VhZGQwYTMxYjExMjAzYjllZjkzODY", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2023-01-30T16:30:39Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2023-01-31T17:22:01Z"}, "message": "assert that `should_fix_bins_and_dylibs` has been run", "tree": {"sha": "f910301ca9957961e3b5f819af12261eea0cd353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f910301ca9957961e3b5f819af12261eea0cd353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/043c634a9cbe6ee303eadd0a31b11203b9ef9386", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmPZTj4ACgkQC1KuORxn\nTOUenhAAiki74lKN6KfeWGQV7b+IsPxNU/Xhr5v4NKToeJ6nbshwf0+xsohc7m0Q\nHsyC/rmnukS4lwok7N26+A+gOhY0SrBFMDWpYZOD1T7VAUD3Afd9WEbTOw92hxeI\naXirSrE9VuyXDHv3KWTzPffYr6JQOCOfcLc1v99RvWYXdfuf+/BxfS7p4jnwJC7X\nX0CseMsFzg0aYygjVSY3rLhA2qbXaSzfgEuQcoV7L4J6tMCv2gYU1X57frBnW5T+\ncGjlR05+bh4kn7vBjjj67DaJpqzqt0o/mEaYIqtjiDaNVCJw9nucrJ1/ncGCJmIp\nlkMe3zSg4sBRhuK+f3KdglbBXIJ34eRMIWtaiBLtfVExHL8ei0+O7it5yPLxbV8H\ndZvAHLHDeky5XJpOjSu5jQlQ03mnvEbuWt3TiM7Wt1zZzQJX0/hJcJI73rGopHeM\nVclSX+k+qX/hVwlqPTRGOkMsh7QBEbA4vcHAmceddkwfe5XnJK0iP8EdZWeriV+G\nBPY1aZU6Om9WjYpLF/woVfDSap9cN+HGpfOly+xk1DuX1EbbHJlaxCWnAfDepTgr\nluXZz4rDoFBS8pgtAXNVmg8NfvAcM9rg26feTXnScNngFlnIFusB/I5j8Jpg+Z7O\n/IsPVirkBpXpRQjb8kr2Lx1286qXH8pgMGJ5Ky/r3ykpyQObhZQ=\n=bofW\n-----END PGP SIGNATURE-----", "payload": "tree f910301ca9957961e3b5f819af12261eea0cd353\nparent b925031c5fb4cd5c8c23b655d15edca8ca0ac4ab\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1675096239 +0100\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1675185721 +0100\n\nassert that `should_fix_bins_and_dylibs` has been run\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/043c634a9cbe6ee303eadd0a31b11203b9ef9386", "html_url": "https://github.com/rust-lang/rust/commit/043c634a9cbe6ee303eadd0a31b11203b9ef9386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/043c634a9cbe6ee303eadd0a31b11203b9ef9386/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b925031c5fb4cd5c8c23b655d15edca8ca0ac4ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/b925031c5fb4cd5c8c23b655d15edca8ca0ac4ab", "html_url": "https://github.com/rust-lang/rust/commit/b925031c5fb4cd5c8c23b655d15edca8ca0ac4ab"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "5b19a658fb5432c0d4983860fd449f19313ac2d3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/043c634a9cbe6ee303eadd0a31b11203b9ef9386/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/043c634a9cbe6ee303eadd0a31b11203b9ef9386/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=043c634a9cbe6ee303eadd0a31b11203b9ef9386", "patch": "@@ -402,9 +402,10 @@ def __init__(self):\n         self.rust_root = ''\n         self.use_locked_deps = False\n         self.use_vendored_sources = False\n-        self.verbose = 0\n+        self.verbose = False\n         self.git_version = None\n         self.nix_deps_dir = None\n+        self._should_fix_bins_and_dylibs = None\n \n     def download_toolchain(self):\n         \"\"\"Fetch the build system for Rust, written in Rust\n@@ -466,46 +467,54 @@ def _download_component_helper(\n                 \"dist/{}/{}\".format(key, filename),\n                 tarball,\n                 self.checksums_sha256,\n-                verbose=self.verbose != 0,\n+                verbose=self.verbose,\n             )\n-        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose != 0)\n+        unpack(tarball, tarball_suffix, self.bin_root(), match=pattern, verbose=self.verbose)\n \n     def should_fix_bins_and_dylibs(self):\n         \"\"\"Whether or not `fix_bin_or_dylib` needs to be run; can only be True\n         on NixOS.\n         \"\"\"\n-        default_encoding = sys.getdefaultencoding()\n-        try:\n-            ostype = subprocess.check_output(\n-                ['uname', '-s']).strip().decode(default_encoding)\n-        except subprocess.CalledProcessError:\n-            return False\n-        except OSError as reason:\n-            if getattr(reason, 'winerror', None) is not None:\n+        if self._should_fix_bins_and_dylibs is not None:\n+            return self._should_fix_bins_and_dylibs\n+\n+        def get_answer():\n+            default_encoding = sys.getdefaultencoding()\n+            try:\n+                ostype = subprocess.check_output(\n+                    ['uname', '-s']).strip().decode(default_encoding)\n+            except subprocess.CalledProcessError:\n                 return False\n-            raise reason\n+            except OSError as reason:\n+                if getattr(reason, 'winerror', None) is not None:\n+                    return False\n+                raise reason\n \n-        if ostype != \"Linux\":\n-            return False\n+            if ostype != \"Linux\":\n+                return False\n \n-        # If the user has asked binaries to be patched for Nix, then\n-        # don't check for NixOS or `/lib`.\n-        if self.get_toml(\"patch-binaries-for-nix\", \"build\") == \"true\":\n-            return True\n+            # If the user has asked binaries to be patched for Nix, then\n+            # don't check for NixOS or `/lib`.\n+            if self.get_toml(\"patch-binaries-for-nix\", \"build\") == \"true\":\n+                return True\n \n-        # Use `/etc/os-release` instead of `/etc/NIXOS`.\n-        # The latter one does not exist on NixOS when using tmpfs as root.\n-        try:\n-            with open(\"/etc/os-release\", \"r\") as f:\n-                if not any(l.strip() in (\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"') for l in f):\n-                    return False\n-        except FileNotFoundError:\n-            return False\n-        if os.path.exists(\"/lib\"):\n-            return False\n+            # Use `/etc/os-release` instead of `/etc/NIXOS`.\n+            # The latter one does not exist on NixOS when using tmpfs as root.\n+            try:\n+                with open(\"/etc/os-release\", \"r\") as f:\n+                    if not any(l.strip() in (\"ID=nixos\", \"ID='nixos'\", 'ID=\"nixos\"') for l in f):\n+                        return False\n+            except FileNotFoundError:\n+                return False\n+            if os.path.exists(\"/lib\"):\n+                return False\n+\n+            return True\n \n-        print(\"info: You seem to be using Nix.\")\n-        return True\n+        answer = self._should_fix_bins_and_dylibs = get_answer()\n+        if answer:\n+            print(\"info: You seem to be using Nix.\")\n+        return answer\n \n     def fix_bin_or_dylib(self, fname):\n         \"\"\"Modifies the interpreter section of 'fname' to fix the dynamic linker,\n@@ -516,6 +525,7 @@ def fix_bin_or_dylib(self, fname):\n \n         Please see https://nixos.org/patchelf.html for more information\n         \"\"\"\n+        assert self._should_fix_bins_and_dylibs is True\n         print(\"attempting to patch\", fname)\n \n         # Only build `.nix-deps` once.\n@@ -707,7 +717,7 @@ def bootstrap_binary(self):\n         \"\"\"\n         return os.path.join(self.build_dir, \"bootstrap\", \"debug\", \"bootstrap\")\n \n-    def build_bootstrap(self, color):\n+    def build_bootstrap(self, color, verbose_count):\n         \"\"\"Build bootstrap\"\"\"\n         print(\"Building bootstrap\")\n         build_dir = os.path.join(self.build_dir, \"bootstrap\")\n@@ -764,7 +774,7 @@ def build_bootstrap(self, color):\n                 self.cargo()))\n         args = [self.cargo(), \"build\", \"--manifest-path\",\n                 os.path.join(self.rust_root, \"src/bootstrap/Cargo.toml\")]\n-        args.extend(\"--verbose\" for _ in range(self.verbose))\n+        args.extend(\"--verbose\" for _ in range(verbose_count))\n         if self.use_locked_deps:\n             args.append(\"--locked\")\n         if self.use_vendored_sources:\n@@ -778,7 +788,7 @@ def build_bootstrap(self, color):\n             args.append(\"--color=never\")\n \n         # Run this from the source directory so cargo finds .cargo/config\n-        run(args, env=env, verbose=self.verbose != 0, cwd=self.rust_root)\n+        run(args, env=env, verbose=self.verbose, cwd=self.rust_root)\n \n     def build_triple(self):\n         \"\"\"Build triple as in LLVM\n@@ -787,7 +797,7 @@ def build_triple(self):\n         so use `self.build` where possible.\n         \"\"\"\n         config = self.get_toml('build')\n-        return config or default_build_triple(self.verbose != 0)\n+        return config or default_build_triple(self.verbose)\n \n     def check_vendored_status(self):\n         \"\"\"Check that vendoring is configured properly\"\"\"\n@@ -838,7 +848,7 @@ def bootstrap(args):\n     # Configure initial bootstrap\n     build = RustBuild()\n     build.rust_root = os.path.abspath(os.path.join(__file__, '../../..'))\n-    build.verbose = args.verbose\n+    build.verbose = args.verbose != 0\n     build.clean = args.clean\n \n     # Read from `--config`, then `RUST_BOOTSTRAP_CONFIG`, then `./config.toml`,\n@@ -866,9 +876,10 @@ def bootstrap(args):\n         with open(include_path) as included_toml:\n             build.config_toml += os.linesep + included_toml.read()\n \n-    config_verbose = build.get_toml('verbose', 'build')\n-    if config_verbose is not None:\n-        build.verbose = max(build.verbose, int(config_verbose))\n+    verbose_count = args.verbose\n+    config_verbose_count = build.get_toml('verbose', 'build')\n+    if config_verbose_count is not None:\n+        verbose_count = max(args.verbose, int(config_verbose_count))\n \n     build.use_vendored_sources = build.get_toml('vendor', 'build') == 'true'\n     build.use_locked_deps = build.get_toml('locked-deps', 'build') == 'true'\n@@ -892,7 +903,7 @@ def bootstrap(args):\n     # Fetch/build the bootstrap\n     build.download_toolchain()\n     sys.stdout.flush()\n-    build.build_bootstrap(args.color)\n+    build.build_bootstrap(args.color, verbose_count)\n     sys.stdout.flush()\n \n     # Run the bootstrap"}, {"sha": "108b9636cda4a453cd3535f5a106ccce88addafc", "filename": "src/bootstrap/download.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/043c634a9cbe6ee303eadd0a31b11203b9ef9386/src%2Fbootstrap%2Fdownload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043c634a9cbe6ee303eadd0a31b11203b9ef9386/src%2Fbootstrap%2Fdownload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload.rs?ref=043c634a9cbe6ee303eadd0a31b11203b9ef9386", "patch": "@@ -18,6 +18,8 @@ use crate::{\n     Config,\n };\n \n+static SHOULD_FIX_BINS_AND_DYLIBS: OnceCell<bool> = OnceCell::new();\n+\n /// Generic helpers that are useful anywhere in bootstrap.\n impl Config {\n     pub fn is_verbose(&self) -> bool {\n@@ -73,9 +75,7 @@ impl Config {\n     /// Whether or not `fix_bin_or_dylib` needs to be run; can only be true\n     /// on NixOS\n     fn should_fix_bins_and_dylibs(&self) -> bool {\n-        static CACHED: OnceCell<bool> = OnceCell::new();\n-\n-        let val = *CACHED.get_or_init(|| {\n+        let val = *SHOULD_FIX_BINS_AND_DYLIBS.get_or_init(|| {\n             match Command::new(\"uname\").arg(\"-s\").stderr(Stdio::inherit()).output() {\n                 Err(_) => return false,\n                 Ok(output) if !output.status.success() => return false,\n@@ -125,6 +125,7 @@ impl Config {\n     ///\n     /// Please see https://nixos.org/patchelf.html for more information\n     fn fix_bin_or_dylib(&self, fname: &Path) {\n+        assert_eq!(SHOULD_FIX_BINS_AND_DYLIBS.get(), Some(&true));\n         println!(\"attempting to patch {}\", fname.display());\n \n         // Only build `.nix-deps` once."}, {"sha": "5dee953a31899ff46fe3f459de48d8249ce2a4b2", "filename": "x.py", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/043c634a9cbe6ee303eadd0a31b11203b9ef9386/x.py", "raw_url": "https://github.com/rust-lang/rust/raw/043c634a9cbe6ee303eadd0a31b11203b9ef9386/x.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/x.py?ref=043c634a9cbe6ee303eadd0a31b11203b9ef9386", "patch": "@@ -22,7 +22,8 @@\n             pass\n \n rust_dir = os.path.dirname(os.path.abspath(__file__))\n-sys.path[:0] = [os.path.join(rust_dir, \"src\", \"bootstrap\")]\n+# For the import below, have Python search in src/bootstrap first.\n+sys.path.insert(0, os.path.join(rust_dir, \"src\", \"bootstrap\"))\n \n import bootstrap\n bootstrap.main()"}]}