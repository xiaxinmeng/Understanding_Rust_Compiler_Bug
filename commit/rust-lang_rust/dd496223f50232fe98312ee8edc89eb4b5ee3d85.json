{"sha": "dd496223f50232fe98312ee8edc89eb4b5ee3d85", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkNDk2MjIzZjUwMjMyZmU5ODMxMmVlOGVkYzg5ZWI0YjVlZTNkODU=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-15T18:23:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2020-12-16T13:16:09Z"}, "message": "Node-ify lifetimes", "tree": {"sha": "4d50c04ca78f9458ab536ff1edee76eba6ab1957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d50c04ca78f9458ab536ff1edee76eba6ab1957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd496223f50232fe98312ee8edc89eb4b5ee3d85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd496223f50232fe98312ee8edc89eb4b5ee3d85", "html_url": "https://github.com/rust-lang/rust/commit/dd496223f50232fe98312ee8edc89eb4b5ee3d85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd496223f50232fe98312ee8edc89eb4b5ee3d85/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d34611633b3b2404188b9e12b08c5def589808c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34611633b3b2404188b9e12b08c5def589808c2", "html_url": "https://github.com/rust-lang/rust/commit/d34611633b3b2404188b9e12b08c5def589808c2"}], "stats": {"total": 694, "additions": 420, "deletions": 274}, "files": [{"sha": "4476d188bc3bf06f91dc0079f12bf4b656fbaba9", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1827,9 +1827,9 @@ checksum = \"56dee185309b50d1f11bfedef0fe6d036842e3fb77413abef29f8f8d1c5d4c1c\"\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.3.0\"\n+version = \"1.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7311ee93faac43aa9da26b043eb244092a29a3078c79af9396f63f800cc3a59a\"\n+checksum = \"68951379f3ced25754472ca5addbf74d7dab58c9818f49290a3d8caa3ab44fb7\"\n \n [[package]]\n name = \"unicase\""}, {"sha": "960af5ab37568e5a19b9597a75ec1d47b3d0b484", "filename": "crates/assists/src/handlers/generate_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_impl.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn generate_impl(acc: &mut Assists, ctx: &AssistContext) -> Option<()\n             if let Some(type_params) = type_params {\n                 let lifetime_params = type_params\n                     .lifetime_params()\n-                    .filter_map(|it| it.lifetime_token())\n+                    .filter_map(|it| it.lifetime())\n                     .map(|it| it.text().clone());\n                 let type_params = type_params\n                     .type_params()"}, {"sha": "c5fec4e0a255770ba8bcf320f06179dedc4bc9b7", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -99,7 +99,7 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params\n             .lifetime_params()\n-            .filter_map(|it| it.lifetime_token())\n+            .filter_map(|it| it.lifetime())\n             .map(|it| it.text().clone());\n         let type_params =\n             type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());"}, {"sha": "ab8fe3ea9f6e746be271ac95d4a3476bc996940a", "filename": "crates/assists/src/handlers/introduce_named_lifetime.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fintroduce_named_lifetime.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1,7 +1,7 @@\n use rustc_hash::FxHashSet;\n use syntax::{\n     ast::{self, GenericParamsOwner, NameOwner},\n-    AstNode, SyntaxKind, TextRange, TextSize,\n+    AstNode, TextRange, TextSize,\n };\n \n use crate::{assist_context::AssistBuilder, AssistContext, AssistId, AssistKind, Assists};\n@@ -35,13 +35,12 @@ static ASSIST_LABEL: &str = \"Introduce named lifetime\";\n // FIXME: How can we handle renaming any one of multiple anonymous lifetimes?\n // FIXME: should also add support for the case fun(f: &Foo) -> &<|>Foo\n pub(crate) fn introduce_named_lifetime(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let lifetime_token = ctx\n-        .find_token_syntax_at_offset(SyntaxKind::LIFETIME)\n-        .filter(|lifetime| lifetime.text() == \"'_\")?;\n-    if let Some(fn_def) = lifetime_token.ancestors().find_map(ast::Fn::cast) {\n-        generate_fn_def_assist(acc, &fn_def, lifetime_token.text_range())\n-    } else if let Some(impl_def) = lifetime_token.ancestors().find_map(ast::Impl::cast) {\n-        generate_impl_def_assist(acc, &impl_def, lifetime_token.text_range())\n+    let lifetime =\n+        ctx.find_node_at_offset::<ast::Lifetime>().filter(|lifetime| lifetime.text() == \"'_\")?;\n+    if let Some(fn_def) = lifetime.syntax().ancestors().find_map(ast::Fn::cast) {\n+        generate_fn_def_assist(acc, &fn_def, lifetime.lifetime_ident_token()?.text_range())\n+    } else if let Some(impl_def) = lifetime.syntax().ancestors().find_map(ast::Impl::cast) {\n+        generate_impl_def_assist(acc, &impl_def, lifetime.lifetime_ident_token()?.text_range())\n     } else {\n         None\n     }\n@@ -58,7 +57,7 @@ fn generate_fn_def_assist(\n     let end_of_fn_ident = fn_def.name()?.ident_token()?.text_range().end();\n     let self_param =\n         // use the self if it's a reference and has no explicit lifetime\n-        param_list.self_param().filter(|p| p.lifetime_token().is_none() && p.amp_token().is_some());\n+        param_list.self_param().filter(|p| p.lifetime().is_none() && p.amp_token().is_some());\n     // compute the location which implicitly has the same lifetime as the anonymous lifetime\n     let loc_needing_lifetime = if let Some(self_param) = self_param {\n         // if we have a self reference, use that\n@@ -68,9 +67,7 @@ fn generate_fn_def_assist(\n         let fn_params_without_lifetime: Vec<_> = param_list\n             .params()\n             .filter_map(|param| match param.ty() {\n-                Some(ast::Type::RefType(ascribed_type))\n-                    if ascribed_type.lifetime_token() == None =>\n-                {\n+                Some(ast::Type::RefType(ascribed_type)) if ascribed_type.lifetime().is_none() => {\n                     Some(ascribed_type.amp_token()?.text_range().end())\n                 }\n                 _ => None,"}, {"sha": "ee20746023b532a9fcf84454362fe176cd70ef88", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -178,9 +178,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.descend_node_at_offset(node, offset).find_map(N::cast)\n     }\n \n-    // FIXME: Replace the SyntaxToken with a typed ast Node/Token\n-    pub fn resolve_lifetime_param(&self, lifetime_token: &SyntaxToken) -> Option<LifetimeParam> {\n-        self.imp.resolve_lifetime_param(lifetime_token)\n+    pub fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n+        self.imp.resolve_lifetime_param(lifetime)\n     }\n \n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<Type> {\n@@ -402,13 +401,9 @@ impl<'db> SemanticsImpl<'db> {\n             .kmerge_by(|node1, node2| node1.text_range().len() < node2.text_range().len())\n     }\n \n-    // FIXME: Replace the SyntaxToken with a typed ast Node/Token\n-    fn resolve_lifetime_param(&self, lifetime_token: &SyntaxToken) -> Option<LifetimeParam> {\n-        if lifetime_token.kind() != syntax::SyntaxKind::LIFETIME {\n-            return None;\n-        }\n-        let lifetime_text = lifetime_token.text();\n-        let lifetime_param = lifetime_token.parent().ancestors().find_map(|syn| {\n+    fn resolve_lifetime_param(&self, lifetime: &ast::Lifetime) -> Option<LifetimeParam> {\n+        let text = lifetime.text();\n+        let lifetime_param = lifetime.syntax().ancestors().find_map(|syn| {\n             let gpl = match_ast! {\n                 match syn {\n                     ast::Fn(it) => it.generic_param_list()?,\n@@ -424,7 +419,7 @@ impl<'db> SemanticsImpl<'db> {\n                 }\n             };\n             gpl.lifetime_params()\n-                .find(|tp| tp.lifetime_token().as_ref().map(|lt| lt.text()) == Some(lifetime_text))\n+                .find(|tp| tp.lifetime().as_ref().map(|lt| lt.text()) == Some(text))\n         })?;\n         let src = self.find_file(lifetime_param.syntax().clone()).with_value(lifetime_param);\n         ToDef::to_def(self, src)"}, {"sha": "3b3d7498744f45e99f27a2904368bd9eb01b85b7", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -233,8 +233,7 @@ impl ExprCollector<'_> {\n                         let res = self.collect_block(block);\n                         match &mut self.body.exprs[res] {\n                             Expr::Block { label: block_label, .. } => {\n-                                *block_label =\n-                                    label.lifetime_token().map(|t| Name::new_lifetime(&t))\n+                                *block_label = label.lifetime().map(|t| Name::new_lifetime(&t))\n                             }\n                             _ => unreachable!(),\n                         }\n@@ -254,10 +253,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(\n                     Expr::Loop {\n                         body,\n-                        label: e\n-                            .label()\n-                            .and_then(|l| l.lifetime_token())\n-                            .map(|l| Name::new_lifetime(&l)),\n+                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n                     },\n                     syntax_ptr,\n                 )\n@@ -288,7 +284,7 @@ impl ExprCollector<'_> {\n                                     body: match_expr,\n                                     label: e\n                                         .label()\n-                                        .and_then(|l| l.lifetime_token())\n+                                        .and_then(|l| l.lifetime())\n                                         .map(|l| Name::new_lifetime(&l)),\n                                 },\n                                 syntax_ptr,\n@@ -301,10 +297,7 @@ impl ExprCollector<'_> {\n                     Expr::While {\n                         condition,\n                         body,\n-                        label: e\n-                            .label()\n-                            .and_then(|l| l.lifetime_token())\n-                            .map(|l| Name::new_lifetime(&l)),\n+                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n                     },\n                     syntax_ptr,\n                 )\n@@ -318,10 +311,7 @@ impl ExprCollector<'_> {\n                         iterable,\n                         pat,\n                         body,\n-                        label: e\n-                            .label()\n-                            .and_then(|l| l.lifetime_token())\n-                            .map(|l| Name::new_lifetime(&l)),\n+                        label: e.label().and_then(|l| l.lifetime()).map(|l| Name::new_lifetime(&l)),\n                     },\n                     syntax_ptr,\n                 )\n@@ -380,13 +370,13 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(path, syntax_ptr)\n             }\n             ast::Expr::ContinueExpr(e) => self.alloc_expr(\n-                Expr::Continue { label: e.lifetime_token().map(|l| Name::new_lifetime(&l)) },\n+                Expr::Continue { label: e.lifetime().map(|l| Name::new_lifetime(&l)) },\n                 syntax_ptr,\n             ),\n             ast::Expr::BreakExpr(e) => {\n                 let expr = e.expr().map(|e| self.collect_expr(e));\n                 self.alloc_expr(\n-                    Expr::Break { expr, label: e.lifetime_token().map(|l| Name::new_lifetime(&l)) },\n+                    Expr::Break { expr, label: e.lifetime().map(|l| Name::new_lifetime(&l)) },\n                     syntax_ptr,\n                 )\n             }"}, {"sha": "bc0125f0b13669991abb9eb9678f77f4f04abab9", "filename": "crates/hir_def/src/generics.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fgenerics.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -260,9 +260,8 @@ impl GenericParams {\n             self.fill_bounds(&lower_ctx, &type_param, Either::Left(type_ref));\n         }\n         for lifetime_param in params.lifetime_params() {\n-            let name = lifetime_param\n-                .lifetime_token()\n-                .map_or_else(Name::missing, |tok| Name::new_lifetime(&tok));\n+            let name =\n+                lifetime_param.lifetime().map_or_else(Name::missing, |lt| Name::new_lifetime(&lt));\n             let param = LifetimeParamData { name: name.clone() };\n             let param_id = self.lifetimes.alloc(param);\n             sm.lifetime_params.insert(param_id, lifetime_param.clone());\n@@ -275,8 +274,8 @@ impl GenericParams {\n         for pred in where_clause.predicates() {\n             let target = if let Some(type_ref) = pred.ty() {\n                 Either::Left(TypeRef::from_ast(lower_ctx, type_ref))\n-            } else if let Some(lifetime_tok) = pred.lifetime_token() {\n-                Either::Right(LifetimeRef::from_token(lifetime_tok))\n+            } else if let Some(lifetime) = pred.lifetime() {\n+                Either::Right(LifetimeRef::new(&lifetime))\n             } else {\n                 continue;\n             };"}, {"sha": "dd3409762e3ad7dff518f52759f6d3d68abb4e97", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -300,12 +300,12 @@ impl Ctx {\n                             ast::SelfParamKind::Owned => self_type,\n                             ast::SelfParamKind::Ref => TypeRef::Reference(\n                                 Box::new(self_type),\n-                                self_param.lifetime_token().map(LifetimeRef::from_token),\n+                                self_param.lifetime().as_ref().map(LifetimeRef::new),\n                                 Mutability::Shared,\n                             ),\n                             ast::SelfParamKind::MutRef => TypeRef::Reference(\n                                 Box::new(self_type),\n-                                self_param.lifetime_token().map(LifetimeRef::from_token),\n+                                self_param.lifetime().as_ref().map(LifetimeRef::new),\n                                 Mutability::Mut,\n                             ),\n                         }"}, {"sha": "8a01e6eead0fa41c9997df1e04398222ceab1736", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -169,8 +169,8 @@ pub(super) fn lower_generic_args(\n                 }\n             }\n             ast::GenericArg::LifetimeArg(lifetime_arg) => {\n-                if let Some(lifetime) = lifetime_arg.lifetime_token() {\n-                    let lifetime_ref = LifetimeRef::from_token(lifetime);\n+                if let Some(lifetime) = lifetime_arg.lifetime() {\n+                    let lifetime_ref = LifetimeRef::new(&lifetime);\n                     args.push(GenericArg::Lifetime(lifetime_ref))\n                 }\n             }"}, {"sha": "ae93d0d108d45bdf00b50c46179df1b561911a42", "filename": "crates/hir_def/src/type_ref.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftype_ref.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1,7 +1,7 @@\n //! HIR for references to types. Paths in these are not yet resolved. They can\n //! be directly created from an ast::TypeRef, without further queries.\n use hir_expand::name::Name;\n-use syntax::{ast, SyntaxToken};\n+use syntax::ast;\n \n use crate::{body::LowerCtx, path::Path};\n \n@@ -80,8 +80,8 @@ impl LifetimeRef {\n         LifetimeRef { name }\n     }\n \n-    pub(crate) fn from_token(token: SyntaxToken) -> Self {\n-        LifetimeRef { name: Name::new_lifetime(&token) }\n+    pub(crate) fn new(lifetime: &ast::Lifetime) -> Self {\n+        LifetimeRef { name: Name::new_lifetime(lifetime) }\n     }\n \n     pub fn missing() -> LifetimeRef {\n@@ -127,7 +127,7 @@ impl TypeRef {\n             }\n             ast::Type::RefType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(&ctx, inner.ty());\n-                let lifetime = inner.lifetime_token().map(|t| LifetimeRef::from_token(t));\n+                let lifetime = inner.lifetime().map(|lt| LifetimeRef::new(&lt));\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), lifetime, mutability)\n             }\n@@ -259,7 +259,7 @@ impl TypeBound {\n             }\n             ast::TypeBoundKind::ForType(_) => TypeBound::Error, // FIXME ForType\n             ast::TypeBoundKind::Lifetime(lifetime) => {\n-                TypeBound::Lifetime(LifetimeRef::from_token(lifetime))\n+                TypeBound::Lifetime(LifetimeRef::new(&lifetime))\n             }\n         }\n     }"}, {"sha": "7fb4caea3682b3c3f7ecfbcb2e7ad9691b325808", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -37,9 +37,8 @@ impl Name {\n         Name(Repr::TupleField(idx))\n     }\n \n-    pub fn new_lifetime(lt: &syntax::SyntaxToken) -> Name {\n-        assert_eq!(lt.kind(), syntax::SyntaxKind::LIFETIME);\n-        Name(Repr::Text(lt.text().clone()))\n+    pub fn new_lifetime(lt: &ast::Lifetime) -> Name {\n+        Self::new_text(lt.text().clone())\n     }\n \n     /// Shortcut to create inline plain text name"}, {"sha": "6f3022dfdfe96e8424b484a00f74a6ee19fde77f", "filename": "crates/ide/src/extend_selection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fextend_selection.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -237,7 +237,7 @@ fn pick_best(l: SyntaxToken, r: SyntaxToken) -> SyntaxToken {\n     fn priority(n: &SyntaxToken) -> usize {\n         match n.kind() {\n             WHITESPACE => 0,\n-            IDENT | T![self] | T![super] | T![crate] | LIFETIME => 2,\n+            IDENT | T![self] | T![super] | T![crate] | LIFETIME_IDENT => 2,\n             _ => 1,\n         }\n     }"}, {"sha": "7aeef7be5c2e964cb6426e116fba8cfe9b01fe13", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -295,7 +295,7 @@ impl<'a> TtIter<'a> {\n \n         impl<'a> TreeSink for OffsetTokenSink<'a> {\n             fn token(&mut self, kind: SyntaxKind, mut n_tokens: u8) {\n-                if kind == SyntaxKind::LIFETIME {\n+                if kind == SyntaxKind::LIFETIME_IDENT {\n                     n_tokens = 2;\n                 }\n                 for _ in 0..n_tokens {"}, {"sha": "d10d4b70e3d2f5ca754af9a23e29246134608c78", "filename": "crates/mbe/src/subtree_source.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsubtree_source.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -84,7 +84,11 @@ impl<'a> SubtreeTokenSource<'a> {\n                 }\n \n                 if let Some((curr, text)) = is_lifetime(cursor) {\n-                    cached.push(Some(TtToken { kind: LIFETIME, is_joint_to_next: false, text }));\n+                    cached.push(Some(TtToken {\n+                        kind: LIFETIME_IDENT,\n+                        is_joint_to_next: false,\n+                        text,\n+                    }));\n                     self.cached_cursor.set(curr);\n                     continue;\n                 }\n@@ -172,7 +176,7 @@ fn convert_ident(ident: &tt::Ident) -> TtToken {\n     let kind = match ident.text.as_ref() {\n         \"true\" => T![true],\n         \"false\" => T![false],\n-        i if i.starts_with('\\'') => LIFETIME,\n+        i if i.starts_with('\\'') => LIFETIME_IDENT,\n         _ => SyntaxKind::from_keyword(ident.text.as_str()).unwrap_or(IDENT),\n     };\n "}, {"sha": "265c0d63d85c6dbd67b13fc240c4142f94567468", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -380,7 +380,7 @@ trait TokenConvertor {\n                 IDENT => make_leaf!(Ident),\n                 k if k.is_keyword() => make_leaf!(Ident),\n                 k if k.is_literal() => make_leaf!(Literal),\n-                LIFETIME => {\n+                LIFETIME_IDENT => {\n                     let char_unit = TextSize::of('\\'');\n                     let r = TextRange::at(range.start(), char_unit);\n                     let apostrophe = tt::Leaf::from(tt::Punct {\n@@ -620,7 +620,7 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n             self.cursor = self.cursor.bump_subtree();\n             return;\n         }\n-        if kind == LIFETIME {\n+        if kind == LIFETIME_IDENT {\n             n_tokens = 2;\n         }\n "}, {"sha": "23039eba4958457dc55e29606aa1534ffca433e4", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -283,6 +283,13 @@ fn name_ref_or_index(p: &mut Parser) {\n     m.complete(p, NAME_REF);\n }\n \n+fn lifetime(p: &mut Parser) {\n+    assert!(p.at(LIFETIME_IDENT));\n+    let m = p.start();\n+    p.bump(LIFETIME_IDENT);\n+    m.complete(p, LIFETIME);\n+}\n+\n fn error_block(p: &mut Parser, message: &str) {\n     assert!(p.at(T!['{']));\n     let m = p.start();"}, {"sha": "18b63feb7b61c6ba0c9d78936026bae8e72600f6", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -48,7 +48,7 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n         T![try],\n         T![loop],\n         T![for],\n-        LIFETIME,\n+        LIFETIME_IDENT,\n     ]));\n \n const EXPR_RECOVERY_SET: TokenSet = TokenSet::new(&[LET_KW, R_DOLLAR]);\n@@ -75,7 +75,7 @@ pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<(CompletedMar\n         T![for] => for_expr(p, None),\n         T![while] => while_expr(p, None),\n         T![try] => try_block_expr(p, None),\n-        LIFETIME if la == T![:] => {\n+        LIFETIME_IDENT if la == T![:] => {\n             let m = p.start();\n             label(p);\n             match p.current() {\n@@ -275,9 +275,9 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n //     'c: for x in () {}\n // }\n fn label(p: &mut Parser) {\n-    assert!(p.at(LIFETIME) && p.nth(1) == T![:]);\n+    assert!(p.at(LIFETIME_IDENT) && p.nth(1) == T![:]);\n     let m = p.start();\n-    p.bump(LIFETIME);\n+    lifetime(p);\n     p.bump_any();\n     m.complete(p, LABEL);\n }\n@@ -501,7 +501,9 @@ fn continue_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(T![continue]));\n     let m = p.start();\n     p.bump(T![continue]);\n-    p.eat(LIFETIME);\n+    if p.at(LIFETIME_IDENT) {\n+        lifetime(p);\n+    }\n     m.complete(p, CONTINUE_EXPR)\n }\n \n@@ -518,7 +520,9 @@ fn break_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     assert!(p.at(T![break]));\n     let m = p.start();\n     p.bump(T![break]);\n-    p.eat(LIFETIME);\n+    if p.at(LIFETIME_IDENT) {\n+        lifetime(p);\n+    }\n     // test break_ambiguity\n     // fn foo(){\n     //     if break {}"}, {"sha": "ab9a12b4deff4d2effbd49bf43e147e9fd9a4461", "filename": "crates/parser/src/grammar/items/traits.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -98,10 +98,10 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     //     `<` `>` - empty generic parameters\n     //     `<` `#` - generic parameters with attributes\n     //     `<` `const` - const generic parameters\n-    //     `<` (LIFETIME|IDENT) `>` - single generic parameter\n-    //     `<` (LIFETIME|IDENT) `,` - first generic parameter in a list\n-    //     `<` (LIFETIME|IDENT) `:` - generic parameter with bounds\n-    //     `<` (LIFETIME|IDENT) `=` - generic parameter with a default\n+    //     `<` (LIFETIME_IDENT|IDENT) `>` - single generic parameter\n+    //     `<` (LIFETIME_IDENT|IDENT) `,` - first generic parameter in a list\n+    //     `<` (LIFETIME_IDENT|IDENT) `:` - generic parameter with bounds\n+    //     `<` (LIFETIME_IDENT|IDENT) `=` - generic parameter with a default\n     // The only truly ambiguous case is\n     //     `<` IDENT `>` `::` IDENT ...\n     // we disambiguate it in favor of generics (`impl<T> ::absolute::Path<T> { ... }`)\n@@ -113,7 +113,7 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     if p.nth(1) == T![#] || p.nth(1) == T![>] || p.nth(1) == CONST_KW {\n         return true;\n     }\n-    (p.nth(1) == LIFETIME || p.nth(1) == IDENT)\n+    (p.nth(1) == LIFETIME_IDENT || p.nth(1) == IDENT)\n         && (p.nth(2) == T![>] || p.nth(2) == T![,] || p.nth(2) == T![:] || p.nth(2) == T![=])\n }\n "}, {"sha": "3ee4e4fca1b32854bef0ca45ed911d866843c40f", "filename": "crates/parser/src/grammar/params.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fparams.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -169,15 +169,20 @@ fn opt_self_param(p: &mut Parser) {\n         let la1 = p.nth(1);\n         let la2 = p.nth(2);\n         let la3 = p.nth(3);\n-        let n_toks = match (p.current(), la1, la2, la3) {\n+        let mut n_toks = match (p.current(), la1, la2, la3) {\n             (T![&], T![self], _, _) => 2,\n             (T![&], T![mut], T![self], _) => 3,\n-            (T![&], LIFETIME, T![self], _) => 3,\n-            (T![&], LIFETIME, T![mut], T![self]) => 4,\n+            (T![&], LIFETIME_IDENT, T![self], _) => 3,\n+            (T![&], LIFETIME_IDENT, T![mut], T![self]) => 4,\n             _ => return,\n         };\n         m = p.start();\n-        for _ in 0..n_toks {\n+        p.bump_any();\n+        if p.at(LIFETIME_IDENT) {\n+            lifetime(p);\n+            n_toks -= 1;\n+        }\n+        for _ in 1..n_toks {\n             p.bump_any();\n         }\n     }"}, {"sha": "a013c49b9a0c2db16c99c500b52cceb944580e82", "filename": "crates/parser/src/grammar/type_args.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_args.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -30,8 +30,8 @@ pub(super) fn opt_generic_arg_list(p: &mut Parser, colon_colon_required: bool) {\n fn generic_arg(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n-        LIFETIME => {\n-            p.bump(LIFETIME);\n+        LIFETIME_IDENT => {\n+            lifetime(p);\n             m.complete(p, LIFETIME_ARG);\n         }\n         // test associated_type_bounds"}, {"sha": "9c3f7c28a2ad8dfb322b85279d6c78644387ae35", "filename": "crates/parser/src/grammar/type_params.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -23,7 +23,7 @@ fn generic_param_list(p: &mut Parser) {\n         attributes::outer_attrs(p);\n \n         match p.current() {\n-            LIFETIME => lifetime_param(p, m),\n+            LIFETIME_IDENT => lifetime_param(p, m),\n             IDENT => type_param(p, m),\n             CONST_KW => const_param(p, m),\n             _ => {\n@@ -40,8 +40,8 @@ fn generic_param_list(p: &mut Parser) {\n }\n \n fn lifetime_param(p: &mut Parser, m: Marker) {\n-    assert!(p.at(LIFETIME));\n-    p.bump(LIFETIME);\n+    assert!(p.at(LIFETIME_IDENT));\n+    lifetime(p);\n     if p.at(T![:]) {\n         lifetime_bounds(p);\n     }\n@@ -84,8 +84,8 @@ pub(super) fn bounds(p: &mut Parser) {\n fn lifetime_bounds(p: &mut Parser) {\n     assert!(p.at(T![:]));\n     p.bump(T![:]);\n-    while p.at(LIFETIME) {\n-        p.bump(LIFETIME);\n+    while p.at(LIFETIME_IDENT) {\n+        lifetime(p);\n         if !p.eat(T![+]) {\n             break;\n         }\n@@ -112,7 +112,7 @@ fn type_bound(p: &mut Parser) -> bool {\n     let has_paren = p.eat(T!['(']);\n     p.eat(T![?]);\n     match p.current() {\n-        LIFETIME => p.bump(LIFETIME),\n+        LIFETIME_IDENT => lifetime(p),\n         T![for] => types::for_type(p),\n         _ if paths::is_use_path_start(p) => types::path_type_(p, false),\n         _ => {\n@@ -162,7 +162,7 @@ pub(super) fn opt_where_clause(p: &mut Parser) {\n \n fn is_where_predicate(p: &mut Parser) -> bool {\n     match p.current() {\n-        LIFETIME => true,\n+        LIFETIME_IDENT => true,\n         T![impl] => false,\n         token => types::TYPE_FIRST.contains(token),\n     }\n@@ -175,8 +175,8 @@ fn is_where_clause_end(p: &mut Parser) -> bool {\n fn where_predicate(p: &mut Parser) {\n     let m = p.start();\n     match p.current() {\n-        LIFETIME => {\n-            p.bump(LIFETIME);\n+        LIFETIME_IDENT => {\n+            lifetime(p);\n             if p.at(T![:]) {\n                 bounds(p);\n             } else {"}, {"sha": "36a15eace822e1ea326865c0c49dd0c8d551581d", "filename": "crates/parser/src/grammar/types.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -167,7 +167,9 @@ fn ref_type(p: &mut Parser) {\n     assert!(p.at(T![&]));\n     let m = p.start();\n     p.bump(T![&]);\n-    p.eat(LIFETIME);\n+    if p.at(LIFETIME_IDENT) {\n+        lifetime(p);\n+    }\n     p.eat(T![mut]);\n     type_no_bounds(p);\n     m.complete(p, REF_TYPE);"}, {"sha": "980aa59794f82f9225829a283bc521559064c521", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -116,7 +116,7 @@ pub enum SyntaxKind {\n     ERROR,\n     IDENT,\n     WHITESPACE,\n-    LIFETIME,\n+    LIFETIME_IDENT,\n     COMMENT,\n     SHEBANG,\n     L_DOLLAR,\n@@ -237,6 +237,7 @@ pub enum SyntaxKind {\n     TYPE_PARAM,\n     CONST_PARAM,\n     GENERIC_ARG_LIST,\n+    LIFETIME,\n     LIFETIME_ARG,\n     TYPE_ARG,\n     ASSOC_TYPE_ARG,\n@@ -364,4 +365,4 @@ impl SyntaxKind {\n     }\n }\n #[macro_export]\n-macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime] => { $ crate :: SyntaxKind :: LIFETIME } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }\n+macro_rules ! T { [;] => { $ crate :: SyntaxKind :: SEMICOLON } ; [,] => { $ crate :: SyntaxKind :: COMMA } ; ['('] => { $ crate :: SyntaxKind :: L_PAREN } ; [')'] => { $ crate :: SyntaxKind :: R_PAREN } ; ['{'] => { $ crate :: SyntaxKind :: L_CURLY } ; ['}'] => { $ crate :: SyntaxKind :: R_CURLY } ; ['['] => { $ crate :: SyntaxKind :: L_BRACK } ; [']'] => { $ crate :: SyntaxKind :: R_BRACK } ; [<] => { $ crate :: SyntaxKind :: L_ANGLE } ; [>] => { $ crate :: SyntaxKind :: R_ANGLE } ; [@] => { $ crate :: SyntaxKind :: AT } ; [#] => { $ crate :: SyntaxKind :: POUND } ; [~] => { $ crate :: SyntaxKind :: TILDE } ; [?] => { $ crate :: SyntaxKind :: QUESTION } ; [$] => { $ crate :: SyntaxKind :: DOLLAR } ; [&] => { $ crate :: SyntaxKind :: AMP } ; [|] => { $ crate :: SyntaxKind :: PIPE } ; [+] => { $ crate :: SyntaxKind :: PLUS } ; [*] => { $ crate :: SyntaxKind :: STAR } ; [/] => { $ crate :: SyntaxKind :: SLASH } ; [^] => { $ crate :: SyntaxKind :: CARET } ; [%] => { $ crate :: SyntaxKind :: PERCENT } ; [_] => { $ crate :: SyntaxKind :: UNDERSCORE } ; [.] => { $ crate :: SyntaxKind :: DOT } ; [..] => { $ crate :: SyntaxKind :: DOT2 } ; [...] => { $ crate :: SyntaxKind :: DOT3 } ; [..=] => { $ crate :: SyntaxKind :: DOT2EQ } ; [:] => { $ crate :: SyntaxKind :: COLON } ; [::] => { $ crate :: SyntaxKind :: COLON2 } ; [=] => { $ crate :: SyntaxKind :: EQ } ; [==] => { $ crate :: SyntaxKind :: EQ2 } ; [=>] => { $ crate :: SyntaxKind :: FAT_ARROW } ; [!] => { $ crate :: SyntaxKind :: BANG } ; [!=] => { $ crate :: SyntaxKind :: NEQ } ; [-] => { $ crate :: SyntaxKind :: MINUS } ; [->] => { $ crate :: SyntaxKind :: THIN_ARROW } ; [<=] => { $ crate :: SyntaxKind :: LTEQ } ; [>=] => { $ crate :: SyntaxKind :: GTEQ } ; [+=] => { $ crate :: SyntaxKind :: PLUSEQ } ; [-=] => { $ crate :: SyntaxKind :: MINUSEQ } ; [|=] => { $ crate :: SyntaxKind :: PIPEEQ } ; [&=] => { $ crate :: SyntaxKind :: AMPEQ } ; [^=] => { $ crate :: SyntaxKind :: CARETEQ } ; [/=] => { $ crate :: SyntaxKind :: SLASHEQ } ; [*=] => { $ crate :: SyntaxKind :: STAREQ } ; [%=] => { $ crate :: SyntaxKind :: PERCENTEQ } ; [&&] => { $ crate :: SyntaxKind :: AMP2 } ; [||] => { $ crate :: SyntaxKind :: PIPE2 } ; [<<] => { $ crate :: SyntaxKind :: SHL } ; [>>] => { $ crate :: SyntaxKind :: SHR } ; [<<=] => { $ crate :: SyntaxKind :: SHLEQ } ; [>>=] => { $ crate :: SyntaxKind :: SHREQ } ; [as] => { $ crate :: SyntaxKind :: AS_KW } ; [async] => { $ crate :: SyntaxKind :: ASYNC_KW } ; [await] => { $ crate :: SyntaxKind :: AWAIT_KW } ; [box] => { $ crate :: SyntaxKind :: BOX_KW } ; [break] => { $ crate :: SyntaxKind :: BREAK_KW } ; [const] => { $ crate :: SyntaxKind :: CONST_KW } ; [continue] => { $ crate :: SyntaxKind :: CONTINUE_KW } ; [crate] => { $ crate :: SyntaxKind :: CRATE_KW } ; [dyn] => { $ crate :: SyntaxKind :: DYN_KW } ; [else] => { $ crate :: SyntaxKind :: ELSE_KW } ; [enum] => { $ crate :: SyntaxKind :: ENUM_KW } ; [extern] => { $ crate :: SyntaxKind :: EXTERN_KW } ; [false] => { $ crate :: SyntaxKind :: FALSE_KW } ; [fn] => { $ crate :: SyntaxKind :: FN_KW } ; [for] => { $ crate :: SyntaxKind :: FOR_KW } ; [if] => { $ crate :: SyntaxKind :: IF_KW } ; [impl] => { $ crate :: SyntaxKind :: IMPL_KW } ; [in] => { $ crate :: SyntaxKind :: IN_KW } ; [let] => { $ crate :: SyntaxKind :: LET_KW } ; [loop] => { $ crate :: SyntaxKind :: LOOP_KW } ; [macro] => { $ crate :: SyntaxKind :: MACRO_KW } ; [match] => { $ crate :: SyntaxKind :: MATCH_KW } ; [mod] => { $ crate :: SyntaxKind :: MOD_KW } ; [move] => { $ crate :: SyntaxKind :: MOVE_KW } ; [mut] => { $ crate :: SyntaxKind :: MUT_KW } ; [pub] => { $ crate :: SyntaxKind :: PUB_KW } ; [ref] => { $ crate :: SyntaxKind :: REF_KW } ; [return] => { $ crate :: SyntaxKind :: RETURN_KW } ; [self] => { $ crate :: SyntaxKind :: SELF_KW } ; [static] => { $ crate :: SyntaxKind :: STATIC_KW } ; [struct] => { $ crate :: SyntaxKind :: STRUCT_KW } ; [super] => { $ crate :: SyntaxKind :: SUPER_KW } ; [trait] => { $ crate :: SyntaxKind :: TRAIT_KW } ; [true] => { $ crate :: SyntaxKind :: TRUE_KW } ; [try] => { $ crate :: SyntaxKind :: TRY_KW } ; [type] => { $ crate :: SyntaxKind :: TYPE_KW } ; [unsafe] => { $ crate :: SyntaxKind :: UNSAFE_KW } ; [use] => { $ crate :: SyntaxKind :: USE_KW } ; [where] => { $ crate :: SyntaxKind :: WHERE_KW } ; [while] => { $ crate :: SyntaxKind :: WHILE_KW } ; [auto] => { $ crate :: SyntaxKind :: AUTO_KW } ; [default] => { $ crate :: SyntaxKind :: DEFAULT_KW } ; [existential] => { $ crate :: SyntaxKind :: EXISTENTIAL_KW } ; [union] => { $ crate :: SyntaxKind :: UNION_KW } ; [raw] => { $ crate :: SyntaxKind :: RAW_KW } ; [macro_rules] => { $ crate :: SyntaxKind :: MACRO_RULES_KW } ; [lifetime_ident] => { $ crate :: SyntaxKind :: LIFETIME_IDENT } ; [ident] => { $ crate :: SyntaxKind :: IDENT } ; [shebang] => { $ crate :: SyntaxKind :: SHEBANG } ; }"}, {"sha": "83de067d97dece6506cfed3ff4c2b547a6381b0c", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -311,7 +311,7 @@ where\n     let pred = predicates.next().unwrap();\n     let mut bounds = pred.type_bound_list().unwrap().bounds();\n \n-    assert_eq!(\"'a\", pred.lifetime_token().unwrap().text());\n+    assert_eq!(\"'a\", pred.lifetime().unwrap().lifetime_ident_token().unwrap().text());\n \n     assert_bound(\"'b\", bounds.next());\n     assert_bound(\"'c\", bounds.next());"}, {"sha": "1588ba93ea27f543259c76931005ca3ffa4e4bbf", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 35, "deletions": 27, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -20,6 +20,15 @@ impl NameRef {\n     pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Lifetime {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Lifetime {\n+    pub fn lifetime_ident_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime_ident])\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Path {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -105,9 +114,7 @@ pub struct LifetimeArg {\n     pub(crate) syntax: SyntaxNode,\n }\n impl LifetimeArg {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ConstArg {\n@@ -487,9 +494,7 @@ pub struct SelfParam {\n impl ast::AttrsOwner for SelfParam {}\n impl SelfParam {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn self_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![self]) }\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n@@ -605,9 +610,7 @@ pub struct LifetimeParam {\n impl ast::AttrsOwner for LifetimeParam {}\n impl ast::TypeBoundsOwner for LifetimeParam {}\n impl LifetimeParam {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParam {\n@@ -628,9 +631,7 @@ impl ast::TypeBoundsOwner for WherePred {}\n impl WherePred {\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n     pub fn generic_param_list(&self) -> Option<GenericParamList> { support::child(&self.syntax) }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -706,9 +707,7 @@ pub struct BreakExpr {\n impl ast::AttrsOwner for BreakExpr {}\n impl BreakExpr {\n     pub fn break_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![break]) }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -752,9 +751,7 @@ impl ContinueExpr {\n     pub fn continue_token(&self) -> Option<SyntaxToken> {\n         support::token(&self.syntax, T![continue])\n     }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct EffectExpr {\n@@ -937,9 +934,8 @@ pub struct Label {\n     pub(crate) syntax: SyntaxNode,\n }\n impl Label {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n+    pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordExprFieldList {\n@@ -1100,9 +1096,7 @@ pub struct RefType {\n }\n impl RefType {\n     pub fn amp_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![&]) }\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn mut_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![mut]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -1129,9 +1123,7 @@ pub struct TypeBound {\n     pub(crate) syntax: SyntaxNode,\n }\n impl TypeBound {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n+    pub fn lifetime(&self) -> Option<Lifetime> { support::child(&self.syntax) }\n     pub fn question_mark_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![?]) }\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n@@ -1438,6 +1430,17 @@ impl AstNode for NameRef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for Lifetime {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LIFETIME }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for Path {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PATH }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3524,6 +3527,11 @@ impl std::fmt::Display for NameRef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for Lifetime {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for Path {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "c45cb514a0f5c69f967b9e79b4c02fd705ed0c02", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -12,6 +12,12 @@ use crate::{\n     SmolStr, SyntaxElement, SyntaxToken, T,\n };\n \n+impl ast::Lifetime {\n+    pub fn text(&self) -> &SmolStr {\n+        text_of_first_token(self.syntax())\n+    }\n+}\n+\n impl ast::Name {\n     pub fn text(&self) -> &SmolStr {\n         text_of_first_token(self.syntax())\n@@ -393,7 +399,7 @@ pub enum TypeBoundKind {\n     /// for<'a> ...\n     ForType(ast::ForType),\n     /// 'a\n-    Lifetime(SyntaxToken),\n+    Lifetime(ast::Lifetime),\n }\n \n impl ast::TypeBound {\n@@ -402,7 +408,7 @@ impl ast::TypeBound {\n             TypeBoundKind::PathType(path_type)\n         } else if let Some(for_type) = support::children(self.syntax()).next() {\n             TypeBoundKind::ForType(for_type)\n-        } else if let Some(lifetime) = self.lifetime_token() {\n+        } else if let Some(lifetime) = self.lifetime() {\n             TypeBoundKind::Lifetime(lifetime)\n         } else {\n             unreachable!()\n@@ -440,7 +446,7 @@ impl ast::LifetimeParam {\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .skip_while(|x| x.kind() != T![:])\n-            .filter(|it| it.kind() == T![lifetime])\n+            .filter(|it| it.kind() == T![lifetime_ident])\n     }\n }\n "}, {"sha": "0cbba73c5cba53e757a61caaa67f8e8c0c9d32be", "filename": "crates/syntax/src/parsing/lexer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Flexer.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -146,9 +146,9 @@ fn rustc_token_kind_to_syntax_kind(\n             rustc_lexer::TokenKind::RawIdent => IDENT,\n             rustc_lexer::TokenKind::Literal { kind, .. } => return match_literal_kind(&kind),\n \n-            rustc_lexer::TokenKind::Lifetime { starts_with_number: false } => LIFETIME,\n+            rustc_lexer::TokenKind::Lifetime { starts_with_number: false } => LIFETIME_IDENT,\n             rustc_lexer::TokenKind::Lifetime { starts_with_number: true } => {\n-                return (LIFETIME, Some(\"Lifetime name cannot start with a number\"))\n+                return (LIFETIME_IDENT, Some(\"Lifetime name cannot start with a number\"))\n             }\n \n             rustc_lexer::TokenKind::Semi => T![;],"}, {"sha": "a7698a404a87dc1ef9a86344e1dc2ea58ba0e30b", "filename": "crates/syntax/test_data/lexer/err/0057_lifetime_starts_with_a_number.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "previous_filename": "crates/syntax/test_data/lexer/err/0057_lifetime_strarts_with_a_number.rs"}, {"sha": "11e0ae14a91723fe1bd7eae048bdec0b1c81bf6b", "filename": "crates/syntax/test_data/lexer/err/0057_lifetime_starts_with_a_number.txt", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Ferr%2F0057_lifetime_starts_with_a_number.txt?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1,6 +1,6 @@\n-LIFETIME 2 \"\\'1\"\n+LIFETIME_IDENT 2 \"\\'1\"\n WHITESPACE 1 \"\\n\"\n-LIFETIME 10 \"\\'1lifetime\"\n+LIFETIME_IDENT 10 \"\\'1lifetime\"\n WHITESPACE 1 \"\\n\"\n > error0..2 token(\"\\'1\") msg(Lifetime name cannot start with a number)\n > error3..13 token(\"\\'1lifetime\") msg(Lifetime name cannot start with a number)", "previous_filename": "crates/syntax/test_data/lexer/err/0057_lifetime_strarts_with_a_number.txt"}, {"sha": "4d6625c3a414f03591361499307dc7fc841f2c4d", "filename": "crates/syntax/test_data/lexer/ok/0007_lifetimes.txt", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Flexer%2Fok%2F0007_lifetimes.txt?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1,8 +1,8 @@\n-LIFETIME 2 \"\\'a\"\n+LIFETIME_IDENT 2 \"\\'a\"\n WHITESPACE 1 \" \"\n-LIFETIME 4 \"\\'foo\"\n+LIFETIME_IDENT 4 \"\\'foo\"\n WHITESPACE 1 \" \"\n-LIFETIME 12 \"\\'foo_bar_baz\"\n+LIFETIME_IDENT 12 \"\\'foo_bar_baz\"\n WHITESPACE 1 \" \"\n-LIFETIME 2 \"\\'_\"\n+LIFETIME_IDENT 2 \"\\'_\"\n WHITESPACE 1 \"\\n\""}, {"sha": "4c4ddf5ecab8a358e36ed89ed565161bb00597ae", "filename": "crates/syntax/test_data/parser/err/0024_many_type_parens.rast", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0024_many_type_parens.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -42,7 +42,8 @@ SOURCE_FILE@0..240\n               GENERIC_PARAM_LIST@32..36\n                 L_ANGLE@32..33 \"<\"\n                 LIFETIME_PARAM@33..35\n-                  LIFETIME@33..35 \"\\'a\"\n+                  LIFETIME@33..35\n+                    LIFETIME_IDENT@33..35 \"\\'a\"\n                 R_ANGLE@35..36 \">\"\n               WHITESPACE@36..37 \" \"\n               PATH_TYPE@37..46\n@@ -53,7 +54,8 @@ SOURCE_FILE@0..240\n                     GENERIC_ARG_LIST@42..46\n                       L_ANGLE@42..43 \"<\"\n                       LIFETIME_ARG@43..45\n-                        LIFETIME@43..45 \"\\'a\"\n+                        LIFETIME@43..45\n+                          LIFETIME_IDENT@43..45 \"\\'a\"\n                       R_ANGLE@45..46 \">\"\n             R_PAREN@46..47 \")\"\n       R_ANGLE@47..48 \">\"\n@@ -125,7 +127,8 @@ SOURCE_FILE@0..240\n                 GENERIC_PARAM_LIST@106..110\n                   L_ANGLE@106..107 \"<\"\n                   LIFETIME_PARAM@107..109\n-                    LIFETIME@107..109 \"\\'a\"\n+                    LIFETIME@107..109\n+                      LIFETIME_IDENT@107..109 \"\\'a\"\n                   R_ANGLE@109..110 \">\"\n                 WHITESPACE@110..111 \" \"\n                 PATH_TYPE@111..120\n@@ -136,7 +139,8 @@ SOURCE_FILE@0..240\n                       GENERIC_ARG_LIST@116..120\n                         L_ANGLE@116..117 \"<\"\n                         LIFETIME_ARG@117..119\n-                          LIFETIME@117..119 \"\\'a\"\n+                          LIFETIME@117..119\n+                            LIFETIME_IDENT@117..119 \"\\'a\"\n                         R_ANGLE@119..120 \">\"\n               R_PAREN@120..121 \")\"\n       EXPR_STMT@121..123\n@@ -187,7 +191,7 @@ SOURCE_FILE@0..240\n                 PATH_SEGMENT@154..158\n                   L_ANGLE@154..155 \"<\"\n                   ERROR@155..157\n-                    LIFETIME@155..157 \"\\'a\"\n+                    LIFETIME_IDENT@155..157 \"\\'a\"\n                   R_ANGLE@157..158 \">\"\n             WHITESPACE@158..159 \" \"\n             BIN_EXPR@159..180\n@@ -201,7 +205,7 @@ SOURCE_FILE@0..240\n                             IDENT@159..164 \"Trait\"\n                     L_ANGLE@164..165 \"<\"\n                     ERROR@165..167\n-                      LIFETIME@165..167 \"\\'a\"\n+                      LIFETIME_IDENT@165..167 \"\\'a\"\n                   R_ANGLE@167..168 \">\"\n                   ERROR@168..169\n                     R_PAREN@168..169 \")\"\n@@ -245,7 +249,8 @@ SOURCE_FILE@0..240\n                             GENERIC_PARAM_LIST@200..204\n                               L_ANGLE@200..201 \"<\"\n                               LIFETIME_PARAM@201..203\n-                                LIFETIME@201..203 \"\\'a\"\n+                                LIFETIME@201..203\n+                                  LIFETIME_IDENT@201..203 \"\\'a\"\n                               R_ANGLE@203..204 \">\"\n                             WHITESPACE@204..205 \" \"\n                             PATH_TYPE@205..214\n@@ -256,7 +261,8 @@ SOURCE_FILE@0..240\n                                   GENERIC_ARG_LIST@210..214\n                                     L_ANGLE@210..211 \"<\"\n                                     LIFETIME_ARG@211..213\n-                                      LIFETIME@211..213 \"\\'a\"\n+                                      LIFETIME@211..213\n+                                        LIFETIME_IDENT@211..213 \"\\'a\"\n                                     R_ANGLE@213..214 \">\"\n                           R_PAREN@214..215 \")\"\n             WHITESPACE@215..216 \" \""}, {"sha": "c5215d6b195f667633784312e324a65e109125d5", "filename": "crates/syntax/test_data/parser/err/0027_incomplere_where_for.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0027_incomplere_where_for.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -16,7 +16,8 @@ SOURCE_FILE@0..30\n         GENERIC_PARAM_LIST@22..26\n           L_ANGLE@22..23 \"<\"\n           LIFETIME_PARAM@23..25\n-            LIFETIME@23..25 \"\\'a\"\n+            LIFETIME@23..25\n+              LIFETIME_IDENT@23..25 \"\\'a\"\n           R_ANGLE@25..26 \">\"\n     WHITESPACE@26..27 \"\\n\"\n     BLOCK_EXPR@27..29"}, {"sha": "e73bd1aea9e2e389400401ee810097ae29c444e1", "filename": "crates/syntax/test_data/parser/err/0043_weird_blocks.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0043_weird_blocks.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -54,7 +54,8 @@ SOURCE_FILE@0..83\n         EXPR_STMT@68..75\n           ERROR@68..75\n             LABEL@68..75\n-              LIFETIME@68..74 \"\\'label\"\n+              LIFETIME@68..74\n+                LIFETIME_IDENT@68..74 \"\\'label\"\n               COLON@74..75 \":\"\n         WHITESPACE@75..76 \" \"\n         LITERAL@76..78"}, {"sha": "cc54185e5fc1754e42710fbf51e43543fd068d43", "filename": "crates/syntax/test_data/parser/err/0044_unexpected_for_type.rast", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0044_unexpected_for_type.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -12,12 +12,14 @@ SOURCE_FILE@0..239\n       GENERIC_PARAM_LIST@17..21\n         L_ANGLE@17..18 \"<\"\n         LIFETIME_PARAM@18..20\n-          LIFETIME@18..20 \"\\'a\"\n+          LIFETIME@18..20\n+            LIFETIME_IDENT@18..20 \"\\'a\"\n         R_ANGLE@20..21 \">\"\n       WHITESPACE@21..22 \" \"\n       REF_TYPE@22..29\n         AMP@22..23 \"&\"\n-        LIFETIME@23..25 \"\\'a\"\n+        LIFETIME@23..25\n+          LIFETIME_IDENT@23..25 \"\\'a\"\n         WHITESPACE@25..26 \" \"\n         PATH_TYPE@26..29\n           PATH@26..29\n@@ -39,14 +41,16 @@ SOURCE_FILE@0..239\n       GENERIC_PARAM_LIST@48..52\n         L_ANGLE@48..49 \"<\"\n         LIFETIME_PARAM@49..51\n-          LIFETIME@49..51 \"\\'a\"\n+          LIFETIME@49..51\n+            LIFETIME_IDENT@49..51 \"\\'a\"\n         R_ANGLE@51..52 \">\"\n       WHITESPACE@52..53 \" \"\n       TUPLE_TYPE@53..63\n         L_PAREN@53..54 \"(\"\n         REF_TYPE@54..61\n           AMP@54..55 \"&\"\n-          LIFETIME@55..57 \"\\'a\"\n+          LIFETIME@55..57\n+            LIFETIME_IDENT@55..57 \"\\'a\"\n           WHITESPACE@57..58 \" \"\n           PATH_TYPE@58..61\n             PATH@58..61\n@@ -70,7 +74,8 @@ SOURCE_FILE@0..239\n       GENERIC_PARAM_LIST@84..88\n         L_ANGLE@84..85 \"<\"\n         LIFETIME_PARAM@85..87\n-          LIFETIME@85..87 \"\\'a\"\n+          LIFETIME@85..87\n+            LIFETIME_IDENT@85..87 \"\\'a\"\n         R_ANGLE@87..88 \">\"\n       WHITESPACE@88..89 \" \"\n       SLICE_TYPE@89..94\n@@ -96,15 +101,17 @@ SOURCE_FILE@0..239\n       GENERIC_PARAM_LIST@115..119\n         L_ANGLE@115..116 \"<\"\n         LIFETIME_PARAM@116..118\n-          LIFETIME@116..118 \"\\'a\"\n+          LIFETIME@116..118\n+            LIFETIME_IDENT@116..118 \"\\'a\"\n         R_ANGLE@118..119 \">\"\n       WHITESPACE@119..120 \" \"\n       FOR_TYPE@120..148\n         FOR_KW@120..123 \"for\"\n         GENERIC_PARAM_LIST@123..127\n           L_ANGLE@123..124 \"<\"\n           LIFETIME_PARAM@124..126\n-            LIFETIME@124..126 \"\\'b\"\n+            LIFETIME@124..126\n+              LIFETIME_IDENT@124..126 \"\\'b\"\n           R_ANGLE@126..127 \">\"\n         WHITESPACE@127..128 \" \"\n         FN_PTR_TYPE@128..148\n@@ -114,7 +121,8 @@ SOURCE_FILE@0..239\n             PARAM@131..138\n               REF_TYPE@131..138\n                 AMP@131..132 \"&\"\n-                LIFETIME@132..134 \"\\'a\"\n+                LIFETIME@132..134\n+                  LIFETIME_IDENT@132..134 \"\\'a\"\n                 WHITESPACE@134..135 \" \"\n                 PATH_TYPE@135..138\n                   PATH@135..138\n@@ -126,7 +134,8 @@ SOURCE_FILE@0..239\n             PARAM@140..147\n               REF_TYPE@140..147\n                 AMP@140..141 \"&\"\n-                LIFETIME@141..143 \"\\'b\"\n+                LIFETIME@141..143\n+                  LIFETIME_IDENT@141..143 \"\\'b\"\n                 WHITESPACE@143..144 \" \"\n                 PATH_TYPE@144..147\n                   PATH@144..147\n@@ -159,23 +168,26 @@ SOURCE_FILE@0..239\n         GENERIC_PARAM_LIST@183..187\n           L_ANGLE@183..184 \"<\"\n           LIFETIME_PARAM@184..186\n-            LIFETIME@184..186 \"\\'a\"\n+            LIFETIME@184..186\n+              LIFETIME_IDENT@184..186 \"\\'a\"\n           R_ANGLE@186..187 \">\"\n         WHITESPACE@187..188 \" \"\n         FOR_TYPE@188..227\n           FOR_KW@188..191 \"for\"\n           GENERIC_PARAM_LIST@191..195\n             L_ANGLE@191..192 \"<\"\n             LIFETIME_PARAM@192..194\n-              LIFETIME@192..194 \"\\'b\"\n+              LIFETIME@192..194\n+                LIFETIME_IDENT@192..194 \"\\'b\"\n             R_ANGLE@194..195 \">\"\n           WHITESPACE@195..196 \" \"\n           FOR_TYPE@196..227\n             FOR_KW@196..199 \"for\"\n             GENERIC_PARAM_LIST@199..203\n               L_ANGLE@199..200 \"<\"\n               LIFETIME_PARAM@200..202\n-                LIFETIME@200..202 \"\\'c\"\n+                LIFETIME@200..202\n+                  LIFETIME_IDENT@200..202 \"\\'c\"\n               R_ANGLE@202..203 \">\"\n             WHITESPACE@203..204 \" \"\n             FN_PTR_TYPE@204..227\n@@ -185,7 +197,8 @@ SOURCE_FILE@0..239\n                 PARAM@207..212\n                   REF_TYPE@207..212\n                     AMP@207..208 \"&\"\n-                    LIFETIME@208..210 \"\\'a\"\n+                    LIFETIME@208..210\n+                      LIFETIME_IDENT@208..210 \"\\'a\"\n                     WHITESPACE@210..211 \" \"\n                     PATH_TYPE@211..212\n                       PATH@211..212\n@@ -197,7 +210,8 @@ SOURCE_FILE@0..239\n                 PARAM@214..219\n                   REF_TYPE@214..219\n                     AMP@214..215 \"&\"\n-                    LIFETIME@215..217 \"\\'b\"\n+                    LIFETIME@215..217\n+                      LIFETIME_IDENT@215..217 \"\\'b\"\n                     WHITESPACE@217..218 \" \"\n                     PATH_TYPE@218..219\n                       PATH@218..219\n@@ -209,7 +223,8 @@ SOURCE_FILE@0..239\n                 PARAM@221..226\n                   REF_TYPE@221..226\n                     AMP@221..222 \"&\"\n-                    LIFETIME@222..224 \"\\'c\"\n+                    LIFETIME@222..224\n+                      LIFETIME_IDENT@222..224 \"\\'c\"\n                     WHITESPACE@224..225 \" \"\n                     PATH_TYPE@225..226\n                       PATH@225..226"}, {"sha": "7049f4734c0263f99aa3d1fc76ca733abe4e44a9", "filename": "crates/syntax/test_data/parser/err/0046_ambiguous_trait_object.rast", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0046_ambiguous_trait_object.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0046_ambiguous_trait_object.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Ferr%2F0046_ambiguous_trait_object.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -7,14 +7,16 @@ SOURCE_FILE@0..187\n     GENERIC_PARAM_LIST@8..12\n       L_ANGLE@8..9 \"<\"\n       LIFETIME_PARAM@9..11\n-        LIFETIME@9..11 \"\\'a\"\n+        LIFETIME@9..11\n+          LIFETIME_IDENT@9..11 \"\\'a\"\n       R_ANGLE@11..12 \">\"\n     WHITESPACE@12..13 \" \"\n     EQ@13..14 \"=\"\n     WHITESPACE@14..15 \" \"\n     REF_TYPE@15..34\n       AMP@15..16 \"&\"\n-      LIFETIME@16..18 \"\\'a\"\n+      LIFETIME@16..18\n+        LIFETIME_IDENT@16..18 \"\\'a\"\n       WHITESPACE@18..19 \" \"\n       DYN_TRAIT_TYPE@19..34\n         DYN_KW@19..22 \"dyn\"\n@@ -101,7 +103,8 @@ SOURCE_FILE@0..187\n             PLUS@99..100 \"+\"\n             WHITESPACE@100..101 \" \"\n             TYPE_BOUND@101..108\n-              LIFETIME@101..108 \"\\'static\"\n+              LIFETIME@101..108\n+                LIFETIME_IDENT@101..108 \"\\'static\"\n     SEMICOLON@108..109 \";\"\n   WHITESPACE@109..110 \"\\n\"\n   FN@110..186"}, {"sha": "0adf2cd5a0e250afa760c7be54a05ce304001d9c", "filename": "crates/syntax/test_data/parser/inline/err/0002_misplaced_label_err.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Ferr%2F0002_misplaced_label_err.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -14,7 +14,8 @@ SOURCE_FILE@0..30\n       EXPR_STMT@16..22\n         ERROR@16..22\n           LABEL@16..22\n-            LIFETIME@16..21 \"\\'loop\"\n+            LIFETIME@16..21\n+              LIFETIME_IDENT@16..21 \"\\'loop\"\n             COLON@21..22 \":\"\n       WHITESPACE@22..23 \" \"\n       IMPL@23..27"}, {"sha": "6cdfd058b4bc8c3549c7cc2efa953f3aefbf6114", "filename": "crates/syntax/test_data/parser/inline/ok/0003_where_pred_for.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0003_where_pred_for.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -22,7 +22,8 @@ SOURCE_FILE@0..54\n         GENERIC_PARAM_LIST@30..34\n           L_ANGLE@30..31 \"<\"\n           LIFETIME_PARAM@31..33\n-            LIFETIME@31..33 \"\\'a\"\n+            LIFETIME@31..33\n+              LIFETIME_IDENT@31..33 \"\\'a\"\n           R_ANGLE@33..34 \">\"\n         WHITESPACE@34..35 \" \"\n         PATH_TYPE@35..36\n@@ -44,7 +45,8 @@ SOURCE_FILE@0..54\n                     PARAM@41..48\n                       REF_TYPE@41..48\n                         AMP@41..42 \"&\"\n-                        LIFETIME@42..44 \"\\'a\"\n+                        LIFETIME@42..44\n+                          LIFETIME_IDENT@42..44 \"\\'a\"\n                         WHITESPACE@44..45 \" \"\n                         PATH_TYPE@45..48\n                           PATH@45..48"}, {"sha": "8048f5fadd436d4ef33b1d8553a0286b9f34ff6f", "filename": "crates/syntax/test_data/parser/inline/ok/0006_self_param.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0006_self_param.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -52,7 +52,8 @@ SOURCE_FILE@0..128\n           L_PAREN@55..56 \"(\"\n           SELF_PARAM@56..64\n             AMP@56..57 \"&\"\n-            LIFETIME@57..59 \"\\'a\"\n+            LIFETIME@57..59\n+              LIFETIME_IDENT@57..59 \"\\'a\"\n             WHITESPACE@59..60 \" \"\n             SELF_KW@60..64 \"self\"\n           COMMA@64..65 \",\"\n@@ -71,7 +72,8 @@ SOURCE_FILE@0..128\n           L_PAREN@78..79 \"(\"\n           SELF_PARAM@79..91\n             AMP@79..80 \"&\"\n-            LIFETIME@80..82 \"\\'a\"\n+            LIFETIME@80..82\n+              LIFETIME_IDENT@80..82 \"\\'a\"\n             WHITESPACE@82..83 \" \"\n             MUT_KW@83..86 \"mut\"\n             WHITESPACE@86..87 \" \""}, {"sha": "075b438d2f7d9d95bf75aef61eeabc08f235a51a", "filename": "crates/syntax/test_data/parser/inline/ok/0007_type_param_bounds.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -13,7 +13,8 @@ SOURCE_FILE@0..35\n         WHITESPACE@11..12 \" \"\n         TYPE_BOUND_LIST@12..32\n           TYPE_BOUND@12..14\n-            LIFETIME@12..14 \"\\'a\"\n+            LIFETIME@12..14\n+              LIFETIME_IDENT@12..14 \"\\'a\"\n           WHITESPACE@14..15 \" \"\n           PLUS@15..16 \"+\"\n           WHITESPACE@16..17 \" \""}, {"sha": "b9e92b57a5f7ff9a792ac61cb91754ed2c0496af", "filename": "crates/syntax/test_data/parser/inline/ok/0015_continue_expr.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0015_continue_expr.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -26,7 +26,8 @@ SOURCE_FILE@0..69\n             CONTINUE_EXPR@48..59\n               CONTINUE_KW@48..56 \"continue\"\n               WHITESPACE@56..57 \" \"\n-              LIFETIME@57..59 \"\\'l\"\n+              LIFETIME@57..59\n+                LIFETIME_IDENT@57..59 \"\\'l\"\n             SEMICOLON@59..60 \";\"\n           WHITESPACE@60..65 \"\\n    \"\n           R_CURLY@65..66 \"}\""}, {"sha": "dad4362b74240a6a98866cd71df95f9288a3553d", "filename": "crates/syntax/test_data/parser/inline/ok/0028_impl_trait_type.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0028_impl_trait_type.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -31,13 +31,15 @@ SOURCE_FILE@0..43\n                           GENERIC_ARG_LIST@31..35\n                             L_ANGLE@31..32 \"<\"\n                             LIFETIME_ARG@32..34\n-                              LIFETIME@32..34 \"\\'a\"\n+                              LIFETIME@32..34\n+                                LIFETIME_IDENT@32..34 \"\\'a\"\n                             R_ANGLE@34..35 \">\"\n                   R_ANGLE@35..36 \">\"\n         WHITESPACE@36..37 \" \"\n         PLUS@37..38 \"+\"\n         WHITESPACE@38..39 \" \"\n         TYPE_BOUND@39..41\n-          LIFETIME@39..41 \"\\'a\"\n+          LIFETIME@39..41\n+            LIFETIME_IDENT@39..41 \"\\'a\"\n     SEMICOLON@41..42 \";\"\n   WHITESPACE@42..43 \"\\n\""}, {"sha": "ac02992688100d8b17d92548f2e3fa58b460ad0d", "filename": "crates/syntax/test_data/parser/inline/ok/0033_reference_type;.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0033_reference_type%3B.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -24,7 +24,8 @@ SOURCE_FILE@0..54\n     WHITESPACE@22..23 \" \"\n     REF_TYPE@23..34\n       AMP@23..24 \"&\"\n-      LIFETIME@24..31 \"\\'static\"\n+      LIFETIME@24..31\n+        LIFETIME_IDENT@24..31 \"\\'static\"\n       WHITESPACE@31..32 \" \"\n       TUPLE_TYPE@32..34\n         L_PAREN@32..33 \"(\""}, {"sha": "828013d458f5aadae7303d36bff6f7939774ac08", "filename": "crates/syntax/test_data/parser/inline/ok/0034_break_expr.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0034_break_expr.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -26,7 +26,8 @@ SOURCE_FILE@0..102\n             BREAK_EXPR@45..53\n               BREAK_KW@45..50 \"break\"\n               WHITESPACE@50..51 \" \"\n-              LIFETIME@51..53 \"\\'l\"\n+              LIFETIME@51..53\n+                LIFETIME_IDENT@51..53 \"\\'l\"\n             SEMICOLON@53..54 \";\"\n           WHITESPACE@54..63 \"\\n        \"\n           EXPR_STMT@63..72\n@@ -41,7 +42,8 @@ SOURCE_FILE@0..102\n             BREAK_EXPR@81..92\n               BREAK_KW@81..86 \"break\"\n               WHITESPACE@86..87 \" \"\n-              LIFETIME@87..89 \"\\'l\"\n+              LIFETIME@87..89\n+                LIFETIME_IDENT@87..89 \"\\'l\"\n               WHITESPACE@89..90 \" \"\n               LITERAL@90..92\n                 INT_NUMBER@90..92 \"92\""}, {"sha": "51e881a8e28b8baba91a688a650422f9bf317c34", "filename": "crates/syntax/test_data/parser/inline/ok/0039_type_arg.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0039_type_arg.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -15,7 +15,8 @@ SOURCE_FILE@0..46\n           GENERIC_ARG_LIST@10..44\n             L_ANGLE@10..11 \"<\"\n             LIFETIME_ARG@11..18\n-              LIFETIME@11..18 \"\\'static\"\n+              LIFETIME@11..18\n+                LIFETIME_IDENT@11..18 \"\\'static\"\n             COMMA@18..19 \",\"\n             WHITESPACE@19..20 \" \"\n             TYPE_ARG@20..23"}, {"sha": "b6f5a5689e1386eb7cf72430089655dab400d233", "filename": "crates/syntax/test_data/parser/inline/ok/0045_param_list_opt_patterns.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0045_param_list_opt_patterns.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -33,7 +33,8 @@ SOURCE_FILE@0..35\n                               GENERIC_ARG_LIST@24..28\n                                 L_ANGLE@24..25 \"<\"\n                                 LIFETIME_ARG@25..27\n-                                  LIFETIME@25..27 \"\\'a\"\n+                                  LIFETIME@25..27\n+                                    LIFETIME_IDENT@25..27 \"\\'a\"\n                                 R_ANGLE@27..28 \">\"\n                     R_PAREN@28..29 \")\"\n       R_ANGLE@29..30 \">\""}, {"sha": "7df6e190aa94b1da04473b655a43523558e793f3", "filename": "crates/syntax/test_data/parser/inline/ok/0048_path_type_with_bounds.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0048_path_type_with_bounds.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -31,7 +31,8 @@ SOURCE_FILE@0..58\n                     PLUS@18..19 \"+\"\n                     WHITESPACE@19..20 \" \"\n                     TYPE_BOUND@20..22\n-                      LIFETIME@20..22 \"\\'f\"\n+                      LIFETIME@20..22\n+                        LIFETIME_IDENT@20..22 \"\\'f\"\n               R_ANGLE@22..23 \">\"\n     WHITESPACE@23..24 \" \"\n     BLOCK_EXPR@24..26\n@@ -72,7 +73,8 @@ SOURCE_FILE@0..58\n                     PLUS@49..50 \"+\"\n                     WHITESPACE@50..51 \" \"\n                     TYPE_BOUND@51..53\n-                      LIFETIME@51..53 \"\\'f\"\n+                      LIFETIME@51..53\n+                        LIFETIME_IDENT@51..53 \"\\'f\"\n               R_ANGLE@53..54 \">\"\n     WHITESPACE@54..55 \" \"\n     BLOCK_EXPR@55..57"}, {"sha": "61dea413d95ce08eac74028c0ff2b76b728f41bd", "filename": "crates/syntax/test_data/parser/inline/ok/0056_where_clause.rast", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0056_where_clause.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -12,17 +12,20 @@ SOURCE_FILE@0..116\n       WHERE_KW@9..14 \"where\"\n       WHITESPACE@14..18 \"\\n   \"\n       WHERE_PRED@18..29\n-        LIFETIME@18..20 \"\\'a\"\n+        LIFETIME@18..20\n+          LIFETIME_IDENT@18..20 \"\\'a\"\n         COLON@20..21 \":\"\n         WHITESPACE@21..22 \" \"\n         TYPE_BOUND_LIST@22..29\n           TYPE_BOUND@22..24\n-            LIFETIME@22..24 \"\\'b\"\n+            LIFETIME@22..24\n+              LIFETIME_IDENT@22..24 \"\\'b\"\n           WHITESPACE@24..25 \" \"\n           PLUS@25..26 \"+\"\n           WHITESPACE@26..27 \" \"\n           TYPE_BOUND@27..29\n-            LIFETIME@27..29 \"\\'c\"\n+            LIFETIME@27..29\n+              LIFETIME_IDENT@27..29 \"\\'c\"\n       COMMA@29..30 \",\"\n       WHITESPACE@30..34 \"\\n   \"\n       WHERE_PRED@34..59\n@@ -53,7 +56,8 @@ SOURCE_FILE@0..116\n           PLUS@50..51 \"+\"\n           WHITESPACE@51..52 \" \"\n           TYPE_BOUND@52..59\n-            LIFETIME@52..59 \"\\'static\"\n+            LIFETIME@52..59\n+              LIFETIME_IDENT@52..59 \"\\'static\"\n       COMMA@59..60 \",\"\n       WHITESPACE@60..64 \"\\n   \"\n       WHERE_PRED@64..82\n@@ -71,7 +75,8 @@ SOURCE_FILE@0..116\n         WHITESPACE@79..80 \" \"\n         TYPE_BOUND_LIST@80..82\n           TYPE_BOUND@80..82\n-            LIFETIME@80..82 \"\\'a\"\n+            LIFETIME@80..82\n+              LIFETIME_IDENT@80..82 \"\\'a\"\n       COMMA@82..83 \",\"\n       WHITESPACE@83..87 \"\\n   \"\n       WHERE_PRED@87..112\n@@ -102,7 +107,8 @@ SOURCE_FILE@0..116\n         WHITESPACE@109..110 \" \"\n         TYPE_BOUND_LIST@110..112\n           TYPE_BOUND@110..112\n-            LIFETIME@110..112 \"\\'a\"\n+            LIFETIME@110..112\n+              LIFETIME_IDENT@110..112 \"\\'a\"\n     WHITESPACE@112..113 \"\\n\"\n     BLOCK_EXPR@113..115\n       L_CURLY@113..114 \"{\""}, {"sha": "49d26cef43ea6717c605c8efd66480aafe1b7aec", "filename": "crates/syntax/test_data/parser/inline/ok/0065_dyn_trait_type.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0065_dyn_trait_type.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -31,13 +31,15 @@ SOURCE_FILE@0..42\n                           GENERIC_ARG_LIST@30..34\n                             L_ANGLE@30..31 \"<\"\n                             LIFETIME_ARG@31..33\n-                              LIFETIME@31..33 \"\\'a\"\n+                              LIFETIME@31..33\n+                                LIFETIME_IDENT@31..33 \"\\'a\"\n                             R_ANGLE@33..34 \">\"\n                   R_ANGLE@34..35 \">\"\n         WHITESPACE@35..36 \" \"\n         PLUS@36..37 \"+\"\n         WHITESPACE@37..38 \" \"\n         TYPE_BOUND@38..40\n-          LIFETIME@38..40 \"\\'a\"\n+          LIFETIME@38..40\n+            LIFETIME_IDENT@38..40 \"\\'a\"\n     SEMICOLON@40..41 \";\"\n   WHITESPACE@41..42 \"\\n\""}, {"sha": "8c909b5af113576b0e1702dfc1f9bf7f3107f1c8", "filename": "crates/syntax/test_data/parser/inline/ok/0081_for_type.rast", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0081_for_type.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -12,7 +12,8 @@ SOURCE_FILE@0..121\n       GENERIC_PARAM_LIST@12..16\n         L_ANGLE@12..13 \"<\"\n         LIFETIME_PARAM@13..15\n-          LIFETIME@13..15 \"\\'a\"\n+          LIFETIME@13..15\n+            LIFETIME_IDENT@13..15 \"\\'a\"\n         R_ANGLE@15..16 \">\"\n       WHITESPACE@16..17 \" \"\n       FN_PTR_TYPE@17..27\n@@ -42,7 +43,8 @@ SOURCE_FILE@0..121\n       GENERIC_PARAM_LIST@41..45\n         L_ANGLE@41..42 \"<\"\n         LIFETIME_PARAM@42..44\n-          LIFETIME@42..44 \"\\'a\"\n+          LIFETIME@42..44\n+            LIFETIME_IDENT@42..44 \"\\'a\"\n         R_ANGLE@44..45 \">\"\n       WHITESPACE@45..46 \" \"\n       FN_PTR_TYPE@46..80\n@@ -59,7 +61,8 @@ SOURCE_FILE@0..121\n           PARAM@67..73\n             REF_TYPE@67..73\n               AMP@67..68 \"&\"\n-              LIFETIME@68..70 \"\\'a\"\n+              LIFETIME@68..70\n+                LIFETIME_IDENT@68..70 \"\\'a\"\n               WHITESPACE@70..71 \" \"\n               TUPLE_TYPE@71..73\n                 L_PAREN@71..72 \"(\"\n@@ -87,7 +90,8 @@ SOURCE_FILE@0..121\n       GENERIC_PARAM_LIST@96..100\n         L_ANGLE@96..97 \"<\"\n         LIFETIME_PARAM@97..99\n-          LIFETIME@97..99 \"\\'a\"\n+          LIFETIME@97..99\n+            LIFETIME_IDENT@97..99 \"\\'a\"\n         R_ANGLE@99..100 \">\"\n       WHITESPACE@100..101 \" \"\n       PATH_TYPE@101..119\n@@ -100,7 +104,8 @@ SOURCE_FILE@0..121\n               TYPE_ARG@111..118\n                 REF_TYPE@111..118\n                   AMP@111..112 \"&\"\n-                  LIFETIME@112..114 \"\\'a\"\n+                  LIFETIME@112..114\n+                    LIFETIME_IDENT@112..114 \"\\'a\"\n                   WHITESPACE@114..115 \" \"\n                   PATH_TYPE@115..118\n                     PATH@115..118"}, {"sha": "860dfe6088e16a909577605d25c618c46f59eaa6", "filename": "crates/syntax/test_data/parser/inline/ok/0109_label.rast", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0109_label.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -14,7 +14,8 @@ SOURCE_FILE@0..74\n       EXPR_STMT@15..26\n         LOOP_EXPR@15..26\n           LABEL@15..18\n-            LIFETIME@15..17 \"\\'a\"\n+            LIFETIME@15..17\n+              LIFETIME_IDENT@15..17 \"\\'a\"\n             COLON@17..18 \":\"\n           WHITESPACE@18..19 \" \"\n           LOOP_KW@19..23 \"loop\"\n@@ -26,7 +27,8 @@ SOURCE_FILE@0..74\n       EXPR_STMT@31..48\n         WHILE_EXPR@31..48\n           LABEL@31..34\n-            LIFETIME@31..33 \"\\'b\"\n+            LIFETIME@31..33\n+              LIFETIME_IDENT@31..33 \"\\'b\"\n             COLON@33..34 \":\"\n           WHITESPACE@34..35 \" \"\n           WHILE_KW@35..40 \"while\"\n@@ -41,7 +43,8 @@ SOURCE_FILE@0..74\n       WHITESPACE@48..53 \"\\n    \"\n       FOR_EXPR@53..71\n         LABEL@53..56\n-          LIFETIME@53..55 \"\\'c\"\n+          LIFETIME@53..55\n+            LIFETIME_IDENT@53..55 \"\\'c\"\n           COLON@55..56 \":\"\n         WHITESPACE@56..57 \" \"\n         FOR_KW@57..60 \"for\""}, {"sha": "616aa984ed2a2ba038f2e560da48f3a373bc1a5e", "filename": "crates/syntax/test_data/parser/inline/ok/0122_generic_lifetime_type_attribute.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0122_generic_lifetime_type_attribute.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -20,7 +20,8 @@ SOURCE_FILE@0..64\n             R_PAREN@24..25 \")\"\n           R_BRACK@25..26 \"]\"\n         WHITESPACE@26..27 \" \"\n-        LIFETIME@27..29 \"\\'a\"\n+        LIFETIME@27..29\n+          LIFETIME_IDENT@27..29 \"\\'a\"\n       COMMA@29..30 \",\"\n       WHITESPACE@30..31 \" \"\n       TYPE_PARAM@31..48\n@@ -49,7 +50,8 @@ SOURCE_FILE@0..64\n         WHITESPACE@52..53 \" \"\n         REF_TYPE@53..58\n           AMP@53..54 \"&\"\n-          LIFETIME@54..56 \"\\'a\"\n+          LIFETIME@54..56\n+            LIFETIME_IDENT@54..56 \"\\'a\"\n           WHITESPACE@56..57 \" \"\n           PATH_TYPE@57..58\n             PATH@57..58"}, {"sha": "c2dea1cc14bb4206c7dedd457db339c4fb589491", "filename": "crates/syntax/test_data/parser/inline/ok/0161_labeled_block.rast", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0161_labeled_block.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -14,7 +14,8 @@ SOURCE_FILE@0..23\n       EXPR_STMT@9..20\n         EFFECT_EXPR@9..19\n           LABEL@9..16\n-            LIFETIME@9..15 \"\\'label\"\n+            LIFETIME@9..15\n+              LIFETIME_IDENT@9..15 \"\\'label\"\n             COLON@15..16 \":\"\n           WHITESPACE@16..17 \" \"\n           BLOCK_EXPR@17..19"}, {"sha": "83e17757bdbaf7a41b1e95d33a294a072d8b1725", "filename": "crates/syntax/test_data/parser/ok/0018_struct_type_params.rast", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -80,7 +80,8 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@80..84\n       L_ANGLE@80..81 \"<\"\n       LIFETIME_PARAM@81..83\n-        LIFETIME@81..83 \"\\'a\"\n+        LIFETIME@81..83\n+          LIFETIME_IDENT@81..83 \"\\'a\"\n       R_ANGLE@83..84 \">\"\n     SEMICOLON@84..85 \";\"\n   WHITESPACE@85..86 \"\\n\"\n@@ -92,7 +93,8 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@95..100\n       L_ANGLE@95..96 \"<\"\n       LIFETIME_PARAM@96..99\n-        LIFETIME@96..98 \"\\'a\"\n+        LIFETIME@96..98\n+          LIFETIME_IDENT@96..98 \"\\'a\"\n         COLON@98..99 \":\"\n       R_ANGLE@99..100 \">\"\n     SEMICOLON@100..101 \";\"\n@@ -105,10 +107,12 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@111..119\n       L_ANGLE@111..112 \"<\"\n       LIFETIME_PARAM@112..118\n-        LIFETIME@112..114 \"\\'a\"\n+        LIFETIME@112..114\n+          LIFETIME_IDENT@112..114 \"\\'a\"\n         COLON@114..115 \":\"\n         WHITESPACE@115..116 \" \"\n-        LIFETIME@116..118 \"\\'b\"\n+        LIFETIME@116..118\n+          LIFETIME_IDENT@116..118 \"\\'b\"\n       R_ANGLE@118..119 \">\"\n     SEMICOLON@119..120 \";\"\n   WHITESPACE@120..121 \"\\n\"\n@@ -120,10 +124,12 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@130..141\n       L_ANGLE@130..131 \"<\"\n       LIFETIME_PARAM@131..139\n-        LIFETIME@131..133 \"\\'a\"\n+        LIFETIME@131..133\n+          LIFETIME_IDENT@131..133 \"\\'a\"\n         COLON@133..134 \":\"\n         WHITESPACE@134..135 \" \"\n-        LIFETIME@135..137 \"\\'b\"\n+        LIFETIME@135..137\n+          LIFETIME_IDENT@135..137 \"\\'b\"\n         WHITESPACE@137..138 \" \"\n         PLUS@138..139 \"+\"\n       WHITESPACE@139..140 \" \"\n@@ -138,14 +144,17 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@152..165\n       L_ANGLE@152..153 \"<\"\n       LIFETIME_PARAM@153..164\n-        LIFETIME@153..155 \"\\'a\"\n+        LIFETIME@153..155\n+          LIFETIME_IDENT@153..155 \"\\'a\"\n         COLON@155..156 \":\"\n         WHITESPACE@156..157 \" \"\n-        LIFETIME@157..159 \"\\'b\"\n+        LIFETIME@157..159\n+          LIFETIME_IDENT@157..159 \"\\'b\"\n         WHITESPACE@159..160 \" \"\n         PLUS@160..161 \"+\"\n         WHITESPACE@161..162 \" \"\n-        LIFETIME@162..164 \"\\'c\"\n+        LIFETIME@162..164\n+          LIFETIME_IDENT@162..164 \"\\'c\"\n       R_ANGLE@164..165 \">\"\n     SEMICOLON@165..166 \";\"\n   WHITESPACE@166..167 \"\\n\"\n@@ -157,7 +166,8 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@177..182\n       L_ANGLE@177..178 \"<\"\n       LIFETIME_PARAM@178..180\n-        LIFETIME@178..180 \"\\'a\"\n+        LIFETIME@178..180\n+          LIFETIME_IDENT@178..180 \"\\'a\"\n       COMMA@180..181 \",\"\n       R_ANGLE@181..182 \">\"\n     SEMICOLON@182..183 \";\"\n@@ -170,11 +180,13 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@194..202\n       L_ANGLE@194..195 \"<\"\n       LIFETIME_PARAM@195..197\n-        LIFETIME@195..197 \"\\'a\"\n+        LIFETIME@195..197\n+          LIFETIME_IDENT@195..197 \"\\'a\"\n       COMMA@197..198 \",\"\n       WHITESPACE@198..199 \" \"\n       LIFETIME_PARAM@199..201\n-        LIFETIME@199..201 \"\\'b\"\n+        LIFETIME@199..201\n+          LIFETIME_IDENT@199..201 \"\\'b\"\n       R_ANGLE@201..202 \">\"\n     SEMICOLON@202..203 \";\"\n   WHITESPACE@203..204 \"\\n\"\n@@ -186,18 +198,22 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@214..232\n       L_ANGLE@214..215 \"<\"\n       LIFETIME_PARAM@215..222\n-        LIFETIME@215..217 \"\\'a\"\n+        LIFETIME@215..217\n+          LIFETIME_IDENT@215..217 \"\\'a\"\n         COLON@217..218 \":\"\n         WHITESPACE@218..219 \" \"\n-        LIFETIME@219..221 \"\\'b\"\n+        LIFETIME@219..221\n+          LIFETIME_IDENT@219..221 \"\\'b\"\n         PLUS@221..222 \"+\"\n       COMMA@222..223 \",\"\n       WHITESPACE@223..224 \" \"\n       LIFETIME_PARAM@224..230\n-        LIFETIME@224..226 \"\\'b\"\n+        LIFETIME@224..226\n+          LIFETIME_IDENT@224..226 \"\\'b\"\n         COLON@226..227 \":\"\n         WHITESPACE@227..228 \" \"\n-        LIFETIME@228..230 \"\\'c\"\n+        LIFETIME@228..230\n+          LIFETIME_IDENT@228..230 \"\\'c\"\n       COMMA@230..231 \",\"\n       R_ANGLE@231..232 \">\"\n     SEMICOLON@232..233 \";\"\n@@ -241,7 +257,8 @@ SOURCE_FILE@0..290\n     GENERIC_PARAM_LIST@278..288\n       L_ANGLE@278..279 \"<\"\n       LIFETIME_PARAM@279..281\n-        LIFETIME@279..281 \"\\'a\"\n+        LIFETIME@279..281\n+          LIFETIME_IDENT@279..281 \"\\'a\"\n       COMMA@281..282 \",\"\n       WHITESPACE@282..283 \" \"\n       TYPE_PARAM@283..284"}, {"sha": "0612a71dee5a95884d65fac3f4bbb8b939d0070e", "filename": "crates/syntax/test_data/parser/ok/0020_type_param_bounds.rast", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -41,7 +41,8 @@ SOURCE_FILE@0..250\n         WHITESPACE@38..39 \" \"\n         TYPE_BOUND_LIST@39..41\n           TYPE_BOUND@39..41\n-            LIFETIME@39..41 \"\\'a\"\n+            LIFETIME@39..41\n+              LIFETIME_IDENT@39..41 \"\\'a\"\n       R_ANGLE@41..42 \">\"\n     SEMICOLON@42..43 \";\"\n   WHITESPACE@43..44 \"\\n\"\n@@ -59,7 +60,8 @@ SOURCE_FILE@0..250\n         WHITESPACE@55..56 \" \"\n         TYPE_BOUND_LIST@56..60\n           TYPE_BOUND@56..58\n-            LIFETIME@56..58 \"\\'a\"\n+            LIFETIME@56..58\n+              LIFETIME_IDENT@56..58 \"\\'a\"\n           WHITESPACE@58..59 \" \"\n           PLUS@59..60 \"+\"\n       WHITESPACE@60..61 \" \"\n@@ -80,12 +82,14 @@ SOURCE_FILE@0..250\n         WHITESPACE@75..76 \" \"\n         TYPE_BOUND_LIST@76..83\n           TYPE_BOUND@76..78\n-            LIFETIME@76..78 \"\\'a\"\n+            LIFETIME@76..78\n+              LIFETIME_IDENT@76..78 \"\\'a\"\n           WHITESPACE@78..79 \" \"\n           PLUS@79..80 \"+\"\n           WHITESPACE@80..81 \" \"\n           TYPE_BOUND@81..83\n-            LIFETIME@81..83 \"\\'d\"\n+            LIFETIME@81..83\n+              LIFETIME_IDENT@81..83 \"\\'d\"\n       WHITESPACE@83..84 \" \"\n       R_ANGLE@84..85 \">\"\n     SEMICOLON@85..86 \";\"\n@@ -104,12 +108,14 @@ SOURCE_FILE@0..250\n         WHITESPACE@98..99 \" \"\n         TYPE_BOUND_LIST@99..114\n           TYPE_BOUND@99..101\n-            LIFETIME@99..101 \"\\'a\"\n+            LIFETIME@99..101\n+              LIFETIME_IDENT@99..101 \"\\'a\"\n           WHITESPACE@101..102 \" \"\n           PLUS@102..103 \"+\"\n           WHITESPACE@103..104 \" \"\n           TYPE_BOUND@104..106\n-            LIFETIME@104..106 \"\\'d\"\n+            LIFETIME@104..106\n+              LIFETIME_IDENT@104..106 \"\\'d\"\n           WHITESPACE@106..107 \" \"\n           PLUS@107..108 \"+\"\n           WHITESPACE@108..109 \" \"\n@@ -190,7 +196,8 @@ SOURCE_FILE@0..250\n           PLUS@174..175 \"+\"\n           WHITESPACE@175..176 \" \"\n           TYPE_BOUND@176..178\n-            LIFETIME@176..178 \"\\'a\"\n+            LIFETIME@176..178\n+              LIFETIME_IDENT@176..178 \"\\'a\"\n       R_ANGLE@178..179 \">\"\n     SEMICOLON@179..180 \";\"\n   WHITESPACE@180..181 \"\\n\"\n@@ -225,21 +232,26 @@ SOURCE_FILE@0..250\n     GENERIC_PARAM_LIST@208..249\n       L_ANGLE@208..209 \"<\"\n       LIFETIME_PARAM@209..215\n-        LIFETIME@209..211 \"\\'a\"\n+        LIFETIME@209..211\n+          LIFETIME_IDENT@209..211 \"\\'a\"\n         COLON@211..212 \":\"\n         WHITESPACE@212..213 \" \"\n-        LIFETIME@213..215 \"\\'d\"\n+        LIFETIME@213..215\n+          LIFETIME_IDENT@213..215 \"\\'d\"\n       COMMA@215..216 \",\"\n       WHITESPACE@216..217 \" \"\n       LIFETIME_PARAM@217..228\n-        LIFETIME@217..219 \"\\'d\"\n+        LIFETIME@217..219\n+          LIFETIME_IDENT@217..219 \"\\'d\"\n         COLON@219..220 \":\"\n         WHITESPACE@220..221 \" \"\n-        LIFETIME@221..223 \"\\'a\"\n+        LIFETIME@221..223\n+          LIFETIME_IDENT@221..223 \"\\'a\"\n         WHITESPACE@223..224 \" \"\n         PLUS@224..225 \"+\"\n         WHITESPACE@225..226 \" \"\n-        LIFETIME@226..228 \"\\'b\"\n+        LIFETIME@226..228\n+          LIFETIME_IDENT@226..228 \"\\'b\"\n       COMMA@228..229 \",\"\n       WHITESPACE@229..230 \" \"\n       TYPE_PARAM@230..248\n@@ -249,12 +261,14 @@ SOURCE_FILE@0..250\n         WHITESPACE@232..233 \" \"\n         TYPE_BOUND_LIST@233..248\n           TYPE_BOUND@233..235\n-            LIFETIME@233..235 \"\\'a\"\n+            LIFETIME@233..235\n+              LIFETIME_IDENT@233..235 \"\\'a\"\n           WHITESPACE@235..236 \" \"\n           PLUS@236..237 \"+\"\n           WHITESPACE@237..238 \" \"\n           TYPE_BOUND@238..240\n-            LIFETIME@238..240 \"\\'d\"\n+            LIFETIME@238..240\n+              LIFETIME_IDENT@238..240 \"\\'d\"\n           WHITESPACE@240..241 \" \"\n           PLUS@241..242 \"+\"\n           WHITESPACE@242..243 \" \""}, {"sha": "0cb2eca3384fc6134aeb2e6f84215338c6f9b1c3", "filename": "crates/syntax/test_data/parser/ok/0032_where_for.rast", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0032_where_for.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -41,7 +41,8 @@ SOURCE_FILE@0..116\n               GENERIC_PARAM_LIST@59..64\n                 L_ANGLE@59..60 \"<\"\n                 LIFETIME_PARAM@60..63\n-                  LIFETIME@60..63 \"\\'de\"\n+                  LIFETIME@60..63\n+                    LIFETIME_IDENT@60..63 \"\\'de\"\n                 R_ANGLE@63..64 \">\"\n               WHITESPACE@64..65 \" \"\n               PATH_TYPE@65..81\n@@ -52,7 +53,8 @@ SOURCE_FILE@0..116\n                     GENERIC_ARG_LIST@76..81\n                       L_ANGLE@76..77 \"<\"\n                       LIFETIME_ARG@77..80\n-                        LIFETIME@77..80 \"\\'de\"\n+                        LIFETIME@77..80\n+                          LIFETIME_IDENT@77..80 \"\\'de\"\n                       R_ANGLE@80..81 \">\"\n           WHITESPACE@81..82 \" \"\n           PLUS@82..83 \"+\""}, {"sha": "487e073baf8368156e60e041cd80a1e99e430810", "filename": "crates/syntax/test_data/parser/ok/0033_label_break.rast", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0033_label_break.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -16,7 +16,8 @@ SOURCE_FILE@0..506\n       EXPR_STMT@50..66\n         EFFECT_EXPR@50..66\n           LABEL@50..63\n-            LIFETIME@50..62 \"\\'empty_block\"\n+            LIFETIME@50..62\n+              LIFETIME_IDENT@50..62 \"\\'empty_block\"\n             COLON@62..63 \":\"\n           WHITESPACE@63..64 \" \"\n           BLOCK_EXPR@64..66\n@@ -26,7 +27,8 @@ SOURCE_FILE@0..506\n       EXPR_STMT@72..295\n         EFFECT_EXPR@72..295\n           LABEL@72..79\n-            LIFETIME@72..78 \"\\'block\"\n+            LIFETIME@72..78\n+              LIFETIME_IDENT@72..78 \"\\'block\"\n             COLON@78..79 \":\"\n           WHITESPACE@79..80 \" \"\n           BLOCK_EXPR@80..295\n@@ -66,7 +68,8 @@ SOURCE_FILE@0..506\n                     BREAK_EXPR@147..159\n                       BREAK_KW@147..152 \"break\"\n                       WHITESPACE@152..153 \" \"\n-                      LIFETIME@153..159 \"\\'block\"\n+                      LIFETIME@153..159\n+                        LIFETIME_IDENT@153..159 \"\\'block\"\n                     SEMICOLON@159..160 \";\"\n                   WHITESPACE@160..169 \"\\n        \"\n                   R_CURLY@169..170 \"}\"\n@@ -105,7 +108,8 @@ SOURCE_FILE@0..506\n                     BREAK_EXPR@241..253\n                       BREAK_KW@241..246 \"break\"\n                       WHITESPACE@246..247 \" \"\n-                      LIFETIME@247..253 \"\\'block\"\n+                      LIFETIME@247..253\n+                        LIFETIME_IDENT@247..253 \"\\'block\"\n                     SEMICOLON@253..254 \";\"\n                   WHITESPACE@254..263 \"\\n        \"\n                   R_CURLY@263..264 \"}\"\n@@ -135,7 +139,8 @@ SOURCE_FILE@0..506\n         WHITESPACE@313..314 \" \"\n         EFFECT_EXPR@314..502\n           LABEL@314..321\n-            LIFETIME@314..320 \"\\'block\"\n+            LIFETIME@314..320\n+              LIFETIME_IDENT@314..320 \"\\'block\"\n             COLON@320..321 \":\"\n           WHITESPACE@321..322 \" \"\n           BLOCK_EXPR@322..502\n@@ -165,7 +170,8 @@ SOURCE_FILE@0..506\n                     BREAK_EXPR@378..392\n                       BREAK_KW@378..383 \"break\"\n                       WHITESPACE@383..384 \" \"\n-                      LIFETIME@384..390 \"\\'block\"\n+                      LIFETIME@384..390\n+                        LIFETIME_IDENT@384..390 \"\\'block\"\n                       WHITESPACE@390..391 \" \"\n                       LITERAL@391..392\n                         INT_NUMBER@391..392 \"1\"\n@@ -197,7 +203,8 @@ SOURCE_FILE@0..506\n                     BREAK_EXPR@461..475\n                       BREAK_KW@461..466 \"break\"\n                       WHITESPACE@466..467 \" \"\n-                      LIFETIME@467..473 \"\\'block\"\n+                      LIFETIME@467..473\n+                        LIFETIME_IDENT@467..473 \"\\'block\"\n                       WHITESPACE@473..474 \" \"\n                       LITERAL@474..475\n                         INT_NUMBER@474..475 \"2\""}, {"sha": "46b192dc191831e086db2330b3bc9eb17bb3c3da", "filename": "crates/syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -1373,22 +1373,22 @@ SOURCE_FILE@0..3813\n                         WHITESPACE@2376..2377 \" \"\n                         IDENT@2377..2379 \"u8\"\n                         L_ANGLE@2379..2380 \"<\"\n-                        LIFETIME@2380..2383 \"\\'u8\"\n+                        LIFETIME_IDENT@2380..2383 \"\\'u8\"\n                         COLON@2383..2384 \":\"\n                         WHITESPACE@2384..2385 \" \"\n-                        LIFETIME@2385..2388 \"\\'u8\"\n+                        LIFETIME_IDENT@2385..2388 \"\\'u8\"\n                         WHITESPACE@2388..2389 \" \"\n                         PLUS@2389..2390 \"+\"\n                         WHITESPACE@2390..2391 \" \"\n-                        LIFETIME@2391..2394 \"\\'u8\"\n+                        LIFETIME_IDENT@2391..2394 \"\\'u8\"\n                         R_ANGLE@2394..2395 \">\"\n                         TOKEN_TREE@2395..2408\n                           L_PAREN@2395..2396 \"(\"\n                           IDENT@2396..2398 \"u8\"\n                           COLON@2398..2399 \":\"\n                           WHITESPACE@2399..2400 \" \"\n                           AMP@2400..2401 \"&\"\n-                          LIFETIME@2401..2404 \"\\'u8\"\n+                          LIFETIME_IDENT@2401..2404 \"\\'u8\"\n                           WHITESPACE@2404..2405 \" \"\n                           IDENT@2405..2407 \"u8\"\n                           R_PAREN@2407..2408 \")\"\n@@ -1397,7 +1397,7 @@ SOURCE_FILE@0..3813\n                         R_ANGLE@2410..2411 \">\"\n                         WHITESPACE@2411..2412 \" \"\n                         AMP@2412..2413 \"&\"\n-                        LIFETIME@2413..2416 \"\\'u8\"\n+                        LIFETIME_IDENT@2413..2416 \"\\'u8\"\n                         WHITESPACE@2416..2417 \" \"\n                         IDENT@2417..2419 \"u8\"\n                         WHITESPACE@2419..2420 \" \"\n@@ -1568,7 +1568,8 @@ SOURCE_FILE@0..3813\n         GENERIC_PARAM_LIST@2862..2870\n           L_ANGLE@2862..2863 \"<\"\n           LIFETIME_PARAM@2863..2869\n-            LIFETIME@2863..2869 \"\\'union\"\n+            LIFETIME@2863..2869\n+              LIFETIME_IDENT@2863..2869 \"\\'union\"\n           R_ANGLE@2869..2870 \">\"\n         WHITESPACE@2870..2871 \" \"\n         RECORD_FIELD_LIST@2871..2904\n@@ -1581,7 +1582,8 @@ SOURCE_FILE@0..3813\n             WHITESPACE@2879..2880 \" \"\n             REF_TYPE@2880..2901\n               AMP@2880..2881 \"&\"\n-              LIFETIME@2881..2887 \"\\'union\"\n+              LIFETIME@2881..2887\n+                LIFETIME_IDENT@2881..2887 \"\\'union\"\n               WHITESPACE@2887..2888 \" \"\n               PATH_TYPE@2888..2901\n                 PATH@2888..2901\n@@ -1591,7 +1593,8 @@ SOURCE_FILE@0..3813\n                     GENERIC_ARG_LIST@2893..2901\n                       L_ANGLE@2893..2894 \"<\"\n                       LIFETIME_ARG@2894..2900\n-                        LIFETIME@2894..2900 \"\\'union\"\n+                        LIFETIME@2894..2900\n+                          LIFETIME_IDENT@2894..2900 \"\\'union\"\n                       R_ANGLE@2900..2901 \">\"\n           COMMA@2901..2902 \",\"\n           WHITESPACE@2902..2903 \" \""}, {"sha": "8974f9e40e92fe3fa5a1558c134542f1836076ff", "filename": "crates/syntax/test_data/parser/ok/0051_parameter_attrs.rast", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0051_parameter_attrs.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -175,7 +175,8 @@ SOURCE_FILE@0..519\n                               GENERIC_ARG_LIST@162..166\n                                 L_ANGLE@162..163 \"<\"\n                                 LIFETIME_ARG@163..165\n-                                  LIFETIME@163..165 \"\\'a\"\n+                                  LIFETIME@163..165\n+                                    LIFETIME_IDENT@163..165 \"\\'a\"\n                                 R_ANGLE@165..166 \">\"\n                     R_PAREN@166..167 \")\"\n       R_ANGLE@167..168 \">\"\n@@ -344,7 +345,8 @@ SOURCE_FILE@0..519\n         GENERIC_PARAM_LIST@345..349\n           L_ANGLE@345..346 \"<\"\n           LIFETIME_PARAM@346..348\n-            LIFETIME@346..348 \"\\'a\"\n+            LIFETIME@346..348\n+              LIFETIME_IDENT@346..348 \"\\'a\"\n           R_ANGLE@348..349 \">\"\n         PARAM_LIST@349..368\n           L_PAREN@349..350 \"(\"\n@@ -376,7 +378,8 @@ SOURCE_FILE@0..519\n         GENERIC_PARAM_LIST@382..386\n           L_ANGLE@382..383 \"<\"\n           LIFETIME_PARAM@383..385\n-            LIFETIME@383..385 \"\\'a\"\n+            LIFETIME@383..385\n+              LIFETIME_IDENT@383..385 \"\\'a\"\n           R_ANGLE@385..386 \">\"\n         PARAM_LIST@386..404\n           L_PAREN@386..387 \"(\"\n@@ -391,7 +394,8 @@ SOURCE_FILE@0..519\n           WHITESPACE@394..395 \" \"\n           SELF_PARAM@395..403\n             AMP@395..396 \"&\"\n-            LIFETIME@396..398 \"\\'a\"\n+            LIFETIME@396..398\n+              LIFETIME_IDENT@396..398 \"\\'a\"\n             WHITESPACE@398..399 \" \"\n             SELF_KW@399..403 \"self\"\n           R_PAREN@403..404 \")\"\n@@ -408,7 +412,8 @@ SOURCE_FILE@0..519\n         GENERIC_PARAM_LIST@418..422\n           L_ANGLE@418..419 \"<\"\n           LIFETIME_PARAM@419..421\n-            LIFETIME@419..421 \"\\'a\"\n+            LIFETIME@419..421\n+              LIFETIME_IDENT@419..421 \"\\'a\"\n           R_ANGLE@421..422 \">\"\n         PARAM_LIST@422..444\n           L_PAREN@422..423 \"(\"\n@@ -423,7 +428,8 @@ SOURCE_FILE@0..519\n           WHITESPACE@430..431 \" \"\n           SELF_PARAM@431..443\n             AMP@431..432 \"&\"\n-            LIFETIME@432..434 \"\\'a\"\n+            LIFETIME@432..434\n+              LIFETIME_IDENT@432..434 \"\\'a\"\n             WHITESPACE@434..435 \" \"\n             MUT_KW@435..438 \"mut\"\n             WHITESPACE@438..439 \" \""}, {"sha": "325e9e655fdc0919a55c3df549a03299745a1a5f", "filename": "crates/syntax/test_data/parser/ok/0067_where_for_pred.rast", "status": "modified", "additions": 30, "deletions": 15, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0067_where_for_pred.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0067_where_for_pred.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0067_where_for_pred.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -22,7 +22,8 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@31..35\n           L_ANGLE@31..32 \"<\"\n           LIFETIME_PARAM@32..34\n-            LIFETIME@32..34 \"\\'a\"\n+            LIFETIME@32..34\n+              LIFETIME_IDENT@32..34 \"\\'a\"\n           R_ANGLE@34..35 \">\"\n         WHITESPACE@35..36 \" \"\n         PATH_TYPE@36..37\n@@ -44,7 +45,8 @@ SOURCE_FILE@0..374\n                     PARAM@42..49\n                       REF_TYPE@42..49\n                         AMP@42..43 \"&\"\n-                        LIFETIME@43..45 \"\\'a\"\n+                        LIFETIME@43..45\n+                          LIFETIME_IDENT@43..45 \"\\'a\"\n                         WHITESPACE@45..46 \" \"\n                         PATH_TYPE@46..49\n                           PATH@46..49\n@@ -82,12 +84,14 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@85..89\n           L_ANGLE@85..86 \"<\"\n           LIFETIME_PARAM@86..88\n-            LIFETIME@86..88 \"\\'a\"\n+            LIFETIME@86..88\n+              LIFETIME_IDENT@86..88 \"\\'a\"\n           R_ANGLE@88..89 \">\"\n         WHITESPACE@89..90 \" \"\n         REF_TYPE@90..95\n           AMP@90..91 \"&\"\n-          LIFETIME@91..93 \"\\'a\"\n+          LIFETIME@91..93\n+            LIFETIME_IDENT@91..93 \"\\'a\"\n           WHITESPACE@93..94 \" \"\n           PATH_TYPE@94..95\n             PATH@94..95\n@@ -133,14 +137,16 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@140..144\n           L_ANGLE@140..141 \"<\"\n           LIFETIME_PARAM@141..143\n-            LIFETIME@141..143 \"\\'a\"\n+            LIFETIME@141..143\n+              LIFETIME_IDENT@141..143 \"\\'a\"\n           R_ANGLE@143..144 \">\"\n         WHITESPACE@144..145 \" \"\n         PAREN_TYPE@145..152\n           L_PAREN@145..146 \"(\"\n           REF_TYPE@146..151\n             AMP@146..147 \"&\"\n-            LIFETIME@147..149 \"\\'a\"\n+            LIFETIME@147..149\n+              LIFETIME_IDENT@147..149 \"\\'a\"\n             WHITESPACE@149..150 \" \"\n             PATH_TYPE@150..151\n               PATH@150..151\n@@ -162,7 +168,8 @@ SOURCE_FILE@0..374\n                     PARAM@157..164\n                       REF_TYPE@157..164\n                         AMP@157..158 \"&\"\n-                        LIFETIME@158..160 \"\\'a\"\n+                        LIFETIME@158..160\n+                          LIFETIME_IDENT@158..160 \"\\'a\"\n                         WHITESPACE@160..161 \" \"\n                         PATH_TYPE@161..164\n                           PATH@161..164\n@@ -200,14 +207,16 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@202..206\n           L_ANGLE@202..203 \"<\"\n           LIFETIME_PARAM@203..205\n-            LIFETIME@203..205 \"\\'a\"\n+            LIFETIME@203..205\n+              LIFETIME_IDENT@203..205 \"\\'a\"\n           R_ANGLE@205..206 \">\"\n         WHITESPACE@206..207 \" \"\n         SLICE_TYPE@207..214\n           L_BRACK@207..208 \"[\"\n           REF_TYPE@208..213\n             AMP@208..209 \"&\"\n-            LIFETIME@209..211 \"\\'a\"\n+            LIFETIME@209..211\n+              LIFETIME_IDENT@209..211 \"\\'a\"\n             WHITESPACE@211..212 \" \"\n             PATH_TYPE@212..213\n               PATH@212..213\n@@ -267,7 +276,8 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@261..265\n           L_ANGLE@261..262 \"<\"\n           LIFETIME_PARAM@262..264\n-            LIFETIME@262..264 \"\\'a\"\n+            LIFETIME@262..264\n+              LIFETIME_IDENT@262..264 \"\\'a\"\n           R_ANGLE@264..265 \">\"\n         WHITESPACE@265..266 \" \"\n         PATH_TYPE@266..285\n@@ -277,7 +287,8 @@ SOURCE_FILE@0..374\n                 L_ANGLE@266..267 \"<\"\n                 REF_TYPE@267..272\n                   AMP@267..268 \"&\"\n-                  LIFETIME@268..270 \"\\'a\"\n+                  LIFETIME@268..270\n+                    LIFETIME_IDENT@268..270 \"\\'a\"\n                   WHITESPACE@270..271 \" \"\n                   PATH_TYPE@271..272\n                     PATH@271..272\n@@ -336,15 +347,17 @@ SOURCE_FILE@0..374\n         GENERIC_PARAM_LIST@333..337\n           L_ANGLE@333..334 \"<\"\n           LIFETIME_PARAM@334..336\n-            LIFETIME@334..336 \"\\'a\"\n+            LIFETIME@334..336\n+              LIFETIME_IDENT@334..336 \"\\'a\"\n           R_ANGLE@336..337 \">\"\n         WHITESPACE@337..338 \" \"\n         FOR_TYPE@338..362\n           FOR_KW@338..341 \"for\"\n           GENERIC_PARAM_LIST@341..345\n             L_ANGLE@341..342 \"<\"\n             LIFETIME_PARAM@342..344\n-              LIFETIME@342..344 \"\\'b\"\n+              LIFETIME@342..344\n+                LIFETIME_IDENT@342..344 \"\\'b\"\n             R_ANGLE@344..345 \">\"\n           WHITESPACE@345..346 \" \"\n           FN_PTR_TYPE@346..362\n@@ -354,7 +367,8 @@ SOURCE_FILE@0..374\n               PARAM@349..354\n                 REF_TYPE@349..354\n                   AMP@349..350 \"&\"\n-                  LIFETIME@350..352 \"\\'a\"\n+                  LIFETIME@350..352\n+                    LIFETIME_IDENT@350..352 \"\\'a\"\n                   WHITESPACE@352..353 \" \"\n                   PATH_TYPE@353..354\n                     PATH@353..354\n@@ -366,7 +380,8 @@ SOURCE_FILE@0..374\n               PARAM@356..361\n                 REF_TYPE@356..361\n                   AMP@356..357 \"&\"\n-                  LIFETIME@357..359 \"\\'b\"\n+                  LIFETIME@357..359\n+                    LIFETIME_IDENT@357..359 \"\\'b\"\n                   WHITESPACE@359..360 \" \"\n                   PATH_TYPE@360..361\n                     PATH@360..361"}, {"sha": "8d3e187ae982f55019f73181c0249b15f39d3d91", "filename": "crates/syntax/test_data/parser/ok/0069_multi_trait_object.rast", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0069_multi_trait_object.rast", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0069_multi_trait_object.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Ftest_data%2Fparser%2Fok%2F0069_multi_trait_object.rast?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -7,14 +7,16 @@ SOURCE_FILE@0..195\n     GENERIC_PARAM_LIST@8..12\n       L_ANGLE@8..9 \"<\"\n       LIFETIME_PARAM@9..11\n-        LIFETIME@9..11 \"\\'a\"\n+        LIFETIME@9..11\n+          LIFETIME_IDENT@9..11 \"\\'a\"\n       R_ANGLE@11..12 \">\"\n     WHITESPACE@12..13 \" \"\n     EQ@13..14 \"=\"\n     WHITESPACE@14..15 \" \"\n     REF_TYPE@15..36\n       AMP@15..16 \"&\"\n-      LIFETIME@16..18 \"\\'a\"\n+      LIFETIME@16..18\n+        LIFETIME_IDENT@16..18 \"\\'a\"\n       WHITESPACE@18..19 \" \"\n       PAREN_TYPE@19..36\n         L_PAREN@19..20 \"(\"\n@@ -109,7 +111,8 @@ SOURCE_FILE@0..195\n               PLUS@104..105 \"+\"\n               WHITESPACE@105..106 \" \"\n               TYPE_BOUND@106..113\n-                LIFETIME@106..113 \"\\'static\"\n+                LIFETIME@106..113\n+                  LIFETIME_IDENT@106..113 \"\\'static\"\n           R_PAREN@113..114 \")\"\n     SEMICOLON@114..115 \";\"\n   WHITESPACE@115..116 \"\\n\""}, {"sha": "78a0b54ba66dd813778a05e06fa831b26b632488", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -15,8 +15,8 @@ flate2 = \"1.0\"\n pico-args = \"0.3.1\"\n proc-macro2 = \"1.0.8\"\n quote = \"1.0.2\"\n-ungrammar = \"1.1.3\"\n+ungrammar = \"1.4\"\n walkdir = \"2.3.1\"\n-write-json =  \"0.1.0\"\n+write-json = \"0.1.0\"\n xshell = \"0.1\"\n # Avoid adding more dependencies to this crate"}, {"sha": "a69ced5ccf4c73d920006e692987ca504cdbb960", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -76,7 +76,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"ERROR\",\n         \"IDENT\",\n         \"WHITESPACE\",\n-        \"LIFETIME\",\n+        \"LIFETIME_IDENT\",\n         \"COMMENT\",\n         \"SHEBANG\",\n         \"L_DOLLAR\",\n@@ -202,6 +202,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"TYPE_PARAM\",\n         \"CONST_PARAM\",\n         \"GENERIC_ARG_LIST\",\n+        \"LIFETIME\",\n         \"LIFETIME_ARG\",\n         \"TYPE_ARG\",\n         \"ASSOC_TYPE_ARG\","}, {"sha": "eb524d85a9fbb45608e7cc6864d4c4bd786a17e8", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd496223f50232fe98312ee8edc89eb4b5ee3d85/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=dd496223f50232fe98312ee8edc89eb4b5ee3d85", "patch": "@@ -380,7 +380,7 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> Result<String> {\n         macro_rules! T {\n             #([#punctuation_values] => { $crate::SyntaxKind::#punctuation };)*\n             #([#all_keywords_idents] => { $crate::SyntaxKind::#all_keywords };)*\n-            [lifetime] => { $crate::SyntaxKind::LIFETIME };\n+            [lifetime_ident] => { $crate::SyntaxKind::LIFETIME_IDENT };\n             [ident] => { $crate::SyntaxKind::IDENT };\n             [shebang] => { $crate::SyntaxKind::SHEBANG };\n         }"}]}