{"sha": "659112ca956c70e9983c9e1e3d1e3a7abec63110", "node_id": "C_kwDOAAsO6NoAKDY1OTExMmNhOTU2YzcwZTk5ODNjOWUxZTNkMWUzYTdhYmVjNjMxMTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T19:41:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-23T19:41:03Z"}, "message": "Auto merge of #10369 - nindalf:no_mangle_lint, r=llogiq\n\nAdd new lint no_mangle_with_rust_abi\n\nFixes issue #10347\n\nThis PR adds a new lint `no_mangle_with_rust_abi` that suggests converting a function to the C ABI to if the function has the `#[no_mangle]` attribute and `Abi == Abi::Rust`. It will not run for any of the other variants defined in [rustc_target::spec::abi::Abi](https://doc.rust-lang.org/beta/nightly-rustc/rustc_target/spec/abi/enum.Abi.html), nor suggest any conversion other than conversion to the C ABI.\n\nFunctions that explicitly opt into the Rust ABI with `extern \"Rust\"` are ignored by this lint.\n\n---\n\nchangelog: [`no_mangle_with_rust_abi`]: add lint that converts Rust ABI functions with the `#[no_mangle]` attribute to C ABI", "tree": {"sha": "08d8e01f67dd9031f7bcd9b4f692134044962e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08d8e01f67dd9031f7bcd9b4f692134044962e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/659112ca956c70e9983c9e1e3d1e3a7abec63110", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/659112ca956c70e9983c9e1e3d1e3a7abec63110", "html_url": "https://github.com/rust-lang/rust/commit/659112ca956c70e9983c9e1e3d1e3a7abec63110", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/659112ca956c70e9983c9e1e3d1e3a7abec63110/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad", "html_url": "https://github.com/rust-lang/rust/commit/f9adb83e0a9a5d1e8f2c5a7fc5b95c698a56b0ad"}, {"sha": "00c294ad0599968ce81bdb8763aefb88a2d2faa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/00c294ad0599968ce81bdb8763aefb88a2d2faa0", "html_url": "https://github.com/rust-lang/rust/commit/00c294ad0599968ce81bdb8763aefb88a2d2faa0"}], "stats": {"total": 214, "additions": 212, "deletions": 2}, "files": [{"sha": "765826ed867d049062b2d34a487d52489c4583c2", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -4622,6 +4622,7 @@ Released 2018-09-13\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`no_effect_replace`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_replace\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n+[`no_mangle_with_rust_abi`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n [`non_octal_unix_permissions`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_octal_unix_permissions\n [`non_send_fields_in_send_ty`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_send_fields_in_send_ty"}, {"sha": "cd5dd7a570653a2f288bed280961a3943557dcb9", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -450,6 +450,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::no_effect::NO_EFFECT_INFO,\n     crate::no_effect::NO_EFFECT_UNDERSCORE_BINDING_INFO,\n     crate::no_effect::UNNECESSARY_OPERATION_INFO,\n+    crate::no_mangle_with_rust_abi::NO_MANGLE_WITH_RUST_ABI_INFO,\n     crate::non_copy_const::BORROW_INTERIOR_MUTABLE_CONST_INFO,\n     crate::non_copy_const::DECLARE_INTERIOR_MUTABLE_CONST_INFO,\n     crate::non_expressive_names::JUST_UNDERSCORES_AND_DIGITS_INFO,"}, {"sha": "8c33bae17b52cdd52f1730f4482e814415f652eb", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -219,6 +219,7 @@ mod neg_cmp_op_on_partial_ord;\n mod neg_multiply;\n mod new_without_default;\n mod no_effect;\n+mod no_mangle_with_rust_abi;\n mod non_copy_const;\n mod non_expressive_names;\n mod non_octal_unix_permissions;\n@@ -921,6 +922,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             avoid_breaking_exported_api,\n         ))\n     });\n+    store.register_late_pass(|_| Box::new(no_mangle_with_rust_abi::NoMangleWithRustAbi));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "bc64ccb295cb626643cd8d09a491b09bf68608be", "filename": "clippy_lints/src/no_mangle_with_rust_abi.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_mangle_with_rust_abi.rs?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -0,0 +1,65 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Item, ItemKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_target::spec::abi::Abi;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for Rust ABI functions with the `#[no_mangle]` attribute.\n+    ///\n+    /// ### Why is this bad?\n+    /// The Rust ABI is not stable, but in many simple cases matches\n+    /// enough with the C ABI that it is possible to forget to add\n+    /// `extern \"C\"` to a function called from C. Changes to the\n+    /// Rust ABI can break this at any point.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    ///  #[no_mangle]\n+    ///  fn example(arg_one: u32, arg_two: usize) {}\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    ///  #[no_mangle]\n+    ///  extern \"C\" fn example(arg_one: u32, arg_two: usize) {}\n+    /// ```\n+    #[clippy::version = \"1.69.0\"]\n+    pub NO_MANGLE_WITH_RUST_ABI,\n+    pedantic,\n+    \"convert Rust ABI functions to C ABI\"\n+}\n+declare_lint_pass!(NoMangleWithRustAbi => [NO_MANGLE_WITH_RUST_ABI]);\n+\n+impl<'tcx> LateLintPass<'tcx> for NoMangleWithRustAbi {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n+        if let ItemKind::Fn(fn_sig, _, _) = &item.kind {\n+            let attrs = cx.tcx.hir().attrs(item.hir_id());\n+            let mut applicability = Applicability::MachineApplicable;\n+            let snippet = snippet_with_applicability(cx, fn_sig.span, \"..\", &mut applicability);\n+            for attr in attrs {\n+                if let Some(ident) = attr.ident()\n+                    && ident.name == rustc_span::sym::no_mangle\n+                    && fn_sig.header.abi == Abi::Rust\n+                    && !snippet.contains(\"extern\") {\n+\n+                    let suggestion = snippet.split_once(\"fn\")\n+                        .map_or(String::new(), |(first, second)| format!(r#\"{first}extern \"C\" fn{second}\"#));\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        NO_MANGLE_WITH_RUST_ABI,\n+                        fn_sig.span,\n+                        \"attribute #[no_mangle] set on a Rust ABI function\",\n+                        \"try\",\n+                        suggestion,\n+                        applicability\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "bbbb3cf621e41446426a319b1898039bdc8ca5f1", "filename": "tests/ui/must_use_candidates.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fmust_use_candidates.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fmust_use_candidates.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.fixed?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn mutates_static() -> usize {\n }\n \n #[no_mangle]\n-pub fn unmangled(i: bool) -> bool {\n+pub extern \"C\" fn unmangled(i: bool) -> bool {\n     !i\n }\n "}, {"sha": "94d3c83bdb93a91b436c7ee30d4d33af5a0f7332", "filename": "tests/ui/must_use_candidates.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fmust_use_candidates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fmust_use_candidates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmust_use_candidates.rs?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -84,7 +84,7 @@ pub unsafe fn mutates_static() -> usize {\n }\n \n #[no_mangle]\n-pub fn unmangled(i: bool) -> bool {\n+pub extern \"C\" fn unmangled(i: bool) -> bool {\n     !i\n }\n "}, {"sha": "d18dec22a8bbe1a1449689599165e7484a48c6fa", "filename": "tests/ui/no_mangle_with_rust_abi.fixed", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.fixed?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::no_mangle_with_rust_abi)]\n+\n+#[no_mangle]\n+extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+    arg_one: u32,\n+    arg_two: usize,\n+) -> u32 {\n+    0\n+}\n+\n+// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+#[no_mangle]\n+#[rustfmt::skip]\n+extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n+\n+fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" {\n+    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "481e1b6d961971a4a95e36ab5c967e2fdd4a18fc", "filename": "tests/ui/no_mangle_with_rust_abi.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.rs?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -0,0 +1,48 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::no_mangle_with_rust_abi)]\n+\n+#[no_mangle]\n+fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+\n+/// # Safety\n+/// This function shouldn't be called unless the horsemen are ready\n+#[no_mangle]\n+unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+    arg_one: u32,\n+    arg_two: usize,\n+) -> u32 {\n+    0\n+}\n+\n+// Must not run on functions that explicitly opt in to Rust ABI with `extern \"Rust\"`\n+#[no_mangle]\n+#[rustfmt::skip]\n+extern \"Rust\" fn rust_abi_fn_explicit_opt_in(arg_one: u32, arg_two: usize) {}\n+\n+fn rust_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+#[no_mangle]\n+extern \"C\" fn c_abi_fn(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" fn c_abi_fn_again(arg_one: u32, arg_two: usize) {}\n+\n+extern \"C\" {\n+    fn c_abi_in_block(arg_one: u32, arg_two: usize);\n+}\n+\n+fn main() {\n+    // test code goes here\n+}"}, {"sha": "71517d318095e797fd28eb5385ab6bb120990552", "filename": "tests/ui/no_mangle_with_rust_abi.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/659112ca956c70e9983c9e1e3d1e3a7abec63110/tests%2Fui%2Fno_mangle_with_rust_abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_mangle_with_rust_abi.stderr?ref=659112ca956c70e9983c9e1e3d1e3a7abec63110", "patch": "@@ -0,0 +1,45 @@\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:7:1\n+   |\n+LL | fn rust_abi_fn_one(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `extern \"C\" fn rust_abi_fn_one(arg_one: u32, arg_two: usize)`\n+   |\n+   = note: `-D clippy::no-mangle-with-rust-abi` implied by `-D warnings`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:10:1\n+   |\n+LL | pub fn rust_abi_fn_two(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub extern \"C\" fn rust_abi_fn_two(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:15:1\n+   |\n+LL | pub unsafe fn rust_abi_fn_three(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `pub unsafe extern \"C\" fn rust_abi_fn_three(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:20:1\n+   |\n+LL | unsafe fn rust_abi_fn_four(arg_one: u32, arg_two: usize) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unsafe extern \"C\" fn rust_abi_fn_four(arg_one: u32, arg_two: usize)`\n+\n+error: attribute #[no_mangle] set on a Rust ABI function\n+  --> $DIR/no_mangle_with_rust_abi.rs:23:1\n+   |\n+LL | / fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+LL | |     arg_one: u32,\n+LL | |     arg_two: usize,\n+LL | | ) -> u32 {\n+   | |________^\n+   |\n+help: try\n+   |\n+LL + extern \"C\" fn rust_abi_multiline_function_really_long_name_to_overflow_args_to_multiple_lines(\n+LL +     arg_one: u32,\n+LL +     arg_two: usize,\n+LL ~ ) -> u32 {\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}]}