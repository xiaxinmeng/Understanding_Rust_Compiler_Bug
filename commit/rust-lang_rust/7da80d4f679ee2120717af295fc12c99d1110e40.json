{"sha": "7da80d4f679ee2120717af295fc12c99d1110e40", "node_id": "C_kwDOAAsO6NoAKDdkYTgwZDRmNjc5ZWUyMTIwNzE3YWYyOTVmYzEyYzk5ZDExMTBlNDA", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-12T09:06:57Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-05-12T09:06:57Z"}, "message": "Use double reference in debug derive", "tree": {"sha": "7df3ff66624ab41c8cac4e4ccbf73b6e2511bf5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7df3ff66624ab41c8cac4e4ccbf73b6e2511bf5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7da80d4f679ee2120717af295fc12c99d1110e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7da80d4f679ee2120717af295fc12c99d1110e40", "html_url": "https://github.com/rust-lang/rust/commit/7da80d4f679ee2120717af295fc12c99d1110e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7da80d4f679ee2120717af295fc12c99d1110e40/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b3387454d7c70ec768114871682ee2946ec88a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b3387454d7c70ec768114871682ee2946ec88a8", "html_url": "https://github.com/rust-lang/rust/commit/9b3387454d7c70ec768114871682ee2946ec88a8"}], "stats": {"total": 99, "additions": 91, "deletions": 8}, "files": [{"sha": "80474bc154d08f52abcd9c5446f76331f6c39d71", "filename": "crates/hir-def/src/macro_expansion_tests/builtin_derive_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fmacro_expansion_tests%2Fbuiltin_derive_macro.rs?ref=7da80d4f679ee2120717af295fc12c99d1110e40", "patch": "@@ -387,7 +387,7 @@ impl < > core::fmt::Debug for Command< > where {\n             Command::Move {\n                 x: x, y: y,\n             }\n-            =>f.debug_struct(\"Move\").field(\"x\", x).field(\"y\", y).finish(), Command::Do(f0, )=>f.debug_tuple(\"Do\").field(f0).finish(), Command::Jump=>f.write_str(\"Jump\"),\n+            =>f.debug_struct(\"Move\").field(\"x\", &x).field(\"y\", &y).finish(), Command::Do(f0, )=>f.debug_tuple(\"Do\").field(&f0).finish(), Command::Jump=>f.write_str(\"Jump\"),\n         }\n     }\n }\"#]],"}, {"sha": "54706943ac4fde2a33f5f189ca283da371dc5167", "filename": "crates/hir-expand/src/builtin_derive_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fbuiltin_derive_macro.rs?ref=7da80d4f679ee2120717af295fc12c99d1110e40", "patch": "@@ -519,7 +519,7 @@ fn debug_expand(\n                 let for_fields = fields.iter().map(|x| {\n                     let x_string = x.to_string();\n                     quote! {\n-                        .field(#x_string, #x)\n+                        .field(#x_string, & #x)\n                     }\n                 });\n                 quote! {\n@@ -529,7 +529,7 @@ fn debug_expand(\n             VariantShape::Tuple(n) => {\n                 let for_fields = tuple_field_iterator(*n).map(|x| {\n                     quote! {\n-                        .field(#x)\n+                        .field( & #x)\n                     }\n                 });\n                 quote! {"}, {"sha": "c462a16e362767b61d5d6d22fb4ba8b2408fa6a4", "filename": "crates/ide-diagnostics/src/handlers/type_mismatch.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Ftype_mismatch.rs?ref=7da80d4f679ee2120717af295fc12c99d1110e40", "patch": "@@ -658,6 +658,26 @@ fn f() {\n        //^ error: expected (), found i32\n     }\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn regression_14768() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore: derive, fmt, slice, coerce_unsized, builtin_impls\n+use core::fmt::Debug;\n+\n+#[derive(Debug)]\n+struct Foo(u8, u16, [u8]);\n+\n+#[derive(Debug)]\n+struct Bar {\n+    f1: u8,\n+    f2: &[u16],\n+    f3: dyn Debug,\n+}\n \"#,\n         );\n     }"}, {"sha": "8b831bdcef4f5bc64f71b16b6ca95a9cb8caf348", "filename": "crates/test-utils/src/minicore.rs", "status": "modified", "additions": 68, "deletions": 5, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7da80d4f679ee2120717af295fc12c99d1110e40/crates%2Ftest-utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Fminicore.rs?ref=7da80d4f679ee2120717af295fc12c99d1110e40", "patch": "@@ -766,6 +766,38 @@ pub mod fmt {\n     pub struct Error;\n     pub type Result = Result<(), Error>;\n     pub struct Formatter<'a>;\n+    pub struct DebugTuple;\n+    pub struct DebugStruct;\n+    impl Formatter<'_> {\n+        pub fn debug_tuple(&mut self, name: &str) -> DebugTuple {\n+            DebugTuple\n+        }\n+\n+        pub fn debug_struct(&mut self, name: &str) -> DebugStruct {\n+            DebugStruct\n+        }\n+    }\n+\n+    impl DebugTuple {\n+        pub fn field(&mut self, value: &dyn Debug) -> &mut Self {\n+            self\n+        }\n+\n+        pub fn finish(&mut self) -> Result {\n+            Ok(())\n+        }\n+    }\n+\n+    impl DebugStruct {\n+        pub fn field(&mut self, name: &str, value: &dyn Debug) -> &mut Self {\n+            self\n+        }\n+\n+        pub fn finish(&mut self) -> Result {\n+            Ok(())\n+        }\n+    }\n+\n     pub trait Debug {\n         fn fmt(&self, f: &mut Formatter<'_>) -> Result;\n     }\n@@ -777,6 +809,39 @@ pub mod fmt {\n     #[rustc_builtin_macro]\n     pub macro Debug($item:item) {}\n     // endregion:derive\n+\n+    // region:builtin_impls\n+    macro_rules! impl_debug {\n+        ($($t:ty)*) => {\n+            $(\n+                impl const Debug for $t {\n+                    fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+                        Ok(())\n+                    }\n+                }\n+            )*\n+        }\n+    }\n+\n+    impl_debug! {\n+        usize u8 u16 u32 u64 u128\n+        isize i8 i16 i32 i64 i128\n+        f32 f64\n+        bool char\n+    }\n+\n+    impl<T: Debug> Debug for [T] {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            Ok(())\n+        }\n+    }\n+\n+    impl<T: Debug + ?Sized> Debug for &T {\n+        fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n+            (&**self).fmt(f)\n+        }\n+    }\n+    // endregion:builtin_impls\n }\n // endregion:fmt\n \n@@ -1075,10 +1140,8 @@ pub mod iter {\n \n // region:panic\n mod panic {\n-    pub macro panic_2021 {\n-        ($($t:tt)+) => (\n-            /* Nothing yet */\n-        ),\n+    pub macro panic_2021($($t:tt)+) {\n+        /* Nothing yet */\n     }\n }\n // endregion:panic\n@@ -1158,8 +1221,8 @@ pub mod prelude {\n             ops::Drop,                          // :drop\n             ops::{Fn, FnMut, FnOnce},           // :fn\n             option::Option::{self, None, Some}, // :option\n-            result::Result::{self, Err, Ok},    // :result\n             panic,                              // :panic\n+            result::Result::{self, Err, Ok},    // :result\n         };\n     }\n "}]}