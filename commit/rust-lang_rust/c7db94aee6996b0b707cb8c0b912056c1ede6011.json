{"sha": "c7db94aee6996b0b707cb8c0b912056c1ede6011", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZGI5NGFlZTY5OTZiMGI3MDdjYjhjMGI5MTIwNTZjMWVkZTYwMTE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-29T16:48:20Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-12T13:51:47Z"}, "message": "Rustfmt", "tree": {"sha": "e8b4418f068fe23205ba12d1949be64f81927ec3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8b4418f068fe23205ba12d1949be64f81927ec3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7db94aee6996b0b707cb8c0b912056c1ede6011", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7db94aee6996b0b707cb8c0b912056c1ede6011", "html_url": "https://github.com/rust-lang/rust/commit/c7db94aee6996b0b707cb8c0b912056c1ede6011", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7db94aee6996b0b707cb8c0b912056c1ede6011/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "578750aae145c59ce7a175c42ee1a6a7a32831e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/578750aae145c59ce7a175c42ee1a6a7a32831e9", "html_url": "https://github.com/rust-lang/rust/commit/578750aae145c59ce7a175c42ee1a6a7a32831e9"}], "stats": {"total": 26, "additions": 10, "deletions": 16}, "files": [{"sha": "25c0bac2c374adccad484538f280ff24a03cf925", "filename": "src/blacklisted_name.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fblacklisted_name.rs?ref=c7db94aee6996b0b707cb8c0b912056c1ede6011", "patch": "@@ -22,9 +22,7 @@ pub struct BlackListedName {\n \n impl BlackListedName {\n     pub fn new(blacklist: Vec<String>) -> BlackListedName {\n-        BlackListedName {\n-            blacklist: blacklist\n-        }\n+        BlackListedName { blacklist: blacklist }\n     }\n }\n \n@@ -38,7 +36,10 @@ impl LateLintPass for BlackListedName {\n     fn check_pat(&mut self, cx: &LateContext, pat: &Pat) {\n         if let PatKind::Ident(_, ref ident, _) = pat.node {\n             if self.blacklist.iter().any(|s| s == &*ident.node.name.as_str()) {\n-                span_lint(cx, BLACKLISTED_NAME, pat.span, &format!(\"use of a blacklisted/placeholder name `{}`\", ident.node.name));\n+                span_lint(cx,\n+                          BLACKLISTED_NAME,\n+                          pat.span,\n+                          &format!(\"use of a blacklisted/placeholder name `{}`\", ident.node.name));\n             }\n         }\n     }"}, {"sha": "0ceede3b5b8c65bb129aa4629091ce69b3d12f59", "filename": "src/conf.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconf.rs?ref=c7db94aee6996b0b707cb8c0b912056c1ede6011", "patch": "@@ -19,7 +19,7 @@ pub fn conf_file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::Interne\n                         Ok(Some(file.clone()))\n                     } else {\n                         Err((\"`conf_file` value must be a string\", value.span))\n-                    }\n+                    };\n                 }\n             }\n         }\n@@ -40,9 +40,7 @@ pub enum ConfError {\n impl fmt::Display for ConfError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n         match *self {\n-            ConfError::IoError(ref err) => {\n-                err.fmt(f)\n-            }\n+            ConfError::IoError(ref err) => err.fmt(f),\n             ConfError::TomlError(ref errs) => {\n                 let mut first = true;\n                 for err in errs {\n@@ -59,9 +57,7 @@ impl fmt::Display for ConfError {\n             ConfError::TypeError(ref key, ref expected, ref got) => {\n                 write!(f, \"`{}` is expected to be a `{}` but is a `{}`\", key, expected, got)\n             }\n-            ConfError::UnknownKey(ref key) => {\n-                write!(f, \"unknown key `{}`\", key)\n-            }\n+            ConfError::UnknownKey(ref key) => write!(f, \"unknown key `{}`\", key),\n         }\n     }\n }\n@@ -177,8 +173,7 @@ pub fn read_conf(path: &str, must_exist: bool) -> Result<Conf, ConfError> {\n     let mut parser = toml::Parser::new(&file);\n     let toml = if let Some(toml) = parser.parse() {\n         toml\n-    }\n-    else {\n+    } else {\n         return Err(ConfError::TomlError(parser.errors));\n     };\n "}, {"sha": "e64bf010549287afa255e88ddaa69bb0494f09d6", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7db94aee6996b0b707cb8c0b912056c1ede6011/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=c7db94aee6996b0b707cb8c0b912056c1ede6011", "patch": "@@ -423,9 +423,7 @@ pub struct TypeComplexityPass {\n \n impl TypeComplexityPass {\n     pub fn new(threshold: u64) -> Self {\n-        TypeComplexityPass {\n-            threshold: threshold\n-        }\n+        TypeComplexityPass { threshold: threshold }\n     }\n }\n "}]}