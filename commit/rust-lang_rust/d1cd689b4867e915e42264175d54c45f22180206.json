{"sha": "d1cd689b4867e915e42264175d54c45f22180206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxY2Q2ODliNDg2N2U5MTVlNDIyNjQxNzVkNTRjNDVmMjIxODAyMDY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-25T13:06:38Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-25T17:06:58Z"}, "message": "rustdoc: Fix associated types in signatures\n\nFunctions such as `fn foo<I: Iterator>(x: I::Item)` would not\nrender correctly and displayed `I` instead of `I::Item`. Same thing\nwith `I::Item` appearing in where bounds.\n\nThis fixes the bug by using paths for generics.\n\nFixes #24417", "tree": {"sha": "28e75952e0cbe9cc042748411327705be6f3a1d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e75952e0cbe9cc042748411327705be6f3a1d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1cd689b4867e915e42264175d54c45f22180206", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cd689b4867e915e42264175d54c45f22180206", "html_url": "https://github.com/rust-lang/rust/commit/d1cd689b4867e915e42264175d54c45f22180206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1cd689b4867e915e42264175d54c45f22180206/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "093e18d18465364ef96495ab662fb4325595bead", "url": "https://api.github.com/repos/rust-lang/rust/commits/093e18d18465364ef96495ab662fb4325595bead", "html_url": "https://github.com/rust-lang/rust/commit/093e18d18465364ef96495ab662fb4325595bead"}], "stats": {"total": 66, "additions": 51, "deletions": 15}, "files": [{"sha": "701e99a6e3bf70a00fa7a8a5df14787a90fc985f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d1cd689b4867e915e42264175d54c45f22180206/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cd689b4867e915e42264175d54c45f22180206/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d1cd689b4867e915e42264175d54c45f22180206", "patch": "@@ -664,6 +664,7 @@ impl Clean<TyParamBound> for ty::BuiltinBound {\n                 path: path,\n                 typarams: None,\n                 did: did,\n+                is_generic: false,\n             },\n             lifetimes: vec![]\n         }, ast::TraitBoundModifier::None)\n@@ -706,7 +707,12 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n         }\n \n         TraitBound(PolyTrait {\n-            trait_: ResolvedPath { path: path, typarams: None, did: self.def_id, },\n+            trait_: ResolvedPath {\n+                path: path,\n+                typarams: None,\n+                did: self.def_id,\n+                is_generic: false,\n+            },\n             lifetimes: late_bounds\n         }, ast::TraitBoundModifier::None)\n     }\n@@ -1394,11 +1400,13 @@ pub struct PolyTrait {\n /// it does not preserve mutability or boxes.\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub enum Type {\n-    /// structs/enums/traits (anything that'd be an ast::TyPath)\n+    /// structs/enums/traits (most that'd be an ast::TyPath)\n     ResolvedPath {\n         path: Path,\n         typarams: Option<Vec<TyParamBound>>,\n         did: ast::DefId,\n+        /// true if is a `T::Name` path for associated types\n+        is_generic: bool,\n     },\n     /// For parameterized types, so the consumer of the JSON don't go\n     /// looking for types which don't exist anywhere.\n@@ -1587,8 +1595,13 @@ impl Clean<Type> for ast::Ty {\n             TyObjectSum(ref lhs, ref bounds) => {\n                 let lhs_ty = lhs.clean(cx);\n                 match lhs_ty {\n-                    ResolvedPath { path, typarams: None, did } => {\n-                        ResolvedPath { path: path, typarams: Some(bounds.clean(cx)), did: did}\n+                    ResolvedPath { path, typarams: None, did, is_generic } => {\n+                        ResolvedPath {\n+                            path: path,\n+                            typarams: Some(bounds.clean(cx)),\n+                            did: did,\n+                            is_generic: is_generic,\n+                        }\n                     }\n                     _ => {\n                         lhs_ty // shouldn't happen\n@@ -1668,6 +1681,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     path: path,\n                     typarams: None,\n                     did: did,\n+                    is_generic: false,\n                 }\n             }\n             ty::ty_trait(box ty::TyTrait { ref principal, ref bounds }) => {\n@@ -1682,6 +1696,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                     path: path,\n                     typarams: Some(typarams),\n                     did: did,\n+                    is_generic: false,\n                 }\n             }\n             ty::ty_tup(ref t) => Tuple(t.clean(cx)),\n@@ -2572,10 +2587,7 @@ fn resolve_type(cx: &DocContext,\n         None => panic!(\"unresolved id not in defmap\")\n     };\n \n-    match def {\n-        def::DefSelfTy(..) if path.segments.len() == 1 => {\n-            return Generic(token::get_name(special_idents::type_self.name).to_string());\n-        }\n+    let is_generic = match def {\n         def::DefPrimTy(p) => match p {\n             ast::TyStr => return Primitive(Str),\n             ast::TyBool => return Primitive(Bool),\n@@ -2593,13 +2605,14 @@ fn resolve_type(cx: &DocContext,\n             ast::TyFloat(ast::TyF32) => return Primitive(F32),\n             ast::TyFloat(ast::TyF64) => return Primitive(F64),\n         },\n-        def::DefTyParam(_, _, _, n) => {\n-            return Generic(token::get_name(n).to_string())\n+        def::DefSelfTy(..) if path.segments.len() == 1 => {\n+            return Generic(token::get_name(special_idents::type_self.name).to_string());\n         }\n-        _ => {}\n+        def::DefSelfTy(..) | def::DefTyParam(..) => true,\n+        _ => false,\n     };\n     let did = register_def(&*cx, def);\n-    ResolvedPath { path: path, typarams: None, did: did }\n+    ResolvedPath { path: path, typarams: None, did: did, is_generic: is_generic }\n }\n \n fn register_def(cx: &DocContext, def: def::Def) -> ast::DefId {\n@@ -2798,6 +2811,7 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n                 }\n             }],\n         },\n+        is_generic: false,\n     }\n }\n "}, {"sha": "e899f668e402dba725f069f54bf71ae3fbd6b793", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1cd689b4867e915e42264175d54c45f22180206/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cd689b4867e915e42264175d54c45f22180206/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=d1cd689b4867e915e42264175d54c45f22180206", "patch": "@@ -427,9 +427,9 @@ impl fmt::Display for clean::Type {\n             clean::Generic(ref name) => {\n                 f.write_str(name)\n             }\n-            clean::ResolvedPath{ did, ref typarams, ref path } => {\n-                // Paths like Self::Output should be rendered with all segments\n-                try!(resolved_path(f, did, path, path.segments[0].name == \"Self\"));\n+            clean::ResolvedPath{ did, ref typarams, ref path, is_generic } => {\n+                // Paths like T::Output and Self::Output should be rendered with all segments\n+                try!(resolved_path(f, did, path, is_generic));\n                 tybounds(f, typarams)\n             }\n             clean::Infer => write!(f, \"_\"),"}, {"sha": "d5047ade062dc164f9b7a296923b13aafe3a8b8e", "filename": "src/test/rustdoc/assoc-types.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1cd689b4867e915e42264175d54c45f22180206/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1cd689b4867e915e42264175d54c45f22180206/src%2Ftest%2Frustdoc%2Fassoc-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fassoc-types.rs?ref=d1cd689b4867e915e42264175d54c45f22180206", "patch": "@@ -18,3 +18,25 @@ pub trait Index<I: ?Sized> {\n     //      \"fn index<'a>(&'a self, index: I) -> &'a Self::Output\"\n     fn index<'a>(&'a self, index: I) -> &'a Self::Output;\n }\n+\n+// @has assoc_types/fn.use_output.html\n+// @has - '//*[@class=\"rust fn\"]' '-> &T::Output'\n+pub fn use_output<T: Index<usize>>(obj: &T, index: usize) -> &T::Output {\n+    obj.index(index)\n+}\n+\n+pub trait Feed {\n+    type Input;\n+}\n+\n+// @has assoc_types/fn.use_input.html\n+// @has - '//*[@class=\"rust fn\"]' 'T::Input'\n+pub fn use_input<T: Feed>(_feed: &T, _element: T::Input) { }\n+\n+// @has assoc_types/fn.cmp_input.html\n+// @has - '//*[@class=\"rust fn\"]' 'where T::Input: PartialEq<U::Input>'\n+pub fn cmp_input<T: Feed, U: Feed>(a: &T::Input, b: &U::Input) -> bool\n+    where T::Input: PartialEq<U::Input>\n+{\n+    a == b\n+}"}]}