{"sha": "62192cede3567df632c819656cc28ec3b2d2f5d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMTkyY2VkZTM1NjdkZjYzMmM4MTk2NTZjYzI4ZWMzYjJkMmY1ZDY=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-16T18:21:16Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-10-16T18:21:16Z"}, "message": "replace_string_with_char #6252\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "59c69e6e52dcc3e2a5840c1c7d433ccc25c59300", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c69e6e52dcc3e2a5840c1c7d433ccc25c59300"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62192cede3567df632c819656cc28ec3b2d2f5d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62192cede3567df632c819656cc28ec3b2d2f5d6", "html_url": "https://github.com/rust-lang/rust/commit/62192cede3567df632c819656cc28ec3b2d2f5d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62192cede3567df632c819656cc28ec3b2d2f5d6/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89aad020c841111b931644e057cd64dcd3d55aca", "url": "https://api.github.com/repos/rust-lang/rust/commits/89aad020c841111b931644e057cd64dcd3d55aca", "html_url": "https://github.com/rust-lang/rust/commit/89aad020c841111b931644e057cd64dcd3d55aca"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "3dc19431c87232eb61f421cb9f18f6394d728705", "filename": "crates/assists/src/handlers/replace_string_with_char.rs", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/62192cede3567df632c819656cc28ec3b2d2f5d6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62192cede3567df632c819656cc28ec3b2d2f5d6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_string_with_char.rs?ref=62192cede3567df632c819656cc28ec3b2d2f5d6", "patch": "@@ -0,0 +1,127 @@\n+use std::borrow::Cow;\n+\n+use syntax::{\n+    ast::{self, HasQuotes, HasStringValue},\n+    AstToken,\n+    SyntaxKind::{RAW_STRING, STRING},\n+    TextRange, TextSize,\n+};\n+use test_utils::mark;\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: replace_string_with_char\n+//\n+// Replace string with char\n+//\n+// ```\n+// fn main() {\n+//     find(\"{<|>\");\n+// }\n+// ```\n+// ->\n+// ```\n+// fn main() {\n+//     find('{');\n+// }\n+// ```\n+pub(crate) fn replace_string_with_char(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let token = ctx.find_token_at_offset(STRING).and_then(ast::String::cast)?;\n+    let value = token.value()?;\n+    let target = token.syntax().text_range();\n+    if value.len() > 1 || value.is_empty() {\n+        return None;\n+    }\n+\n+    acc.add(\n+        AssistId(\"replace_string_with_char\", AssistKind::RefactorRewrite),\n+        \"Replace string with char\",\n+        target,\n+        |edit| {\n+            edit.replace(token.syntax().text_range(), format!(\"'{}'\", value));\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    use super::*;\n+\n+    #[test]\n+    fn replace_string_with_char_target() {\n+        check_assist_target(\n+            replace_string_with_char,\n+            r#\"\n+            fn f() {\n+                let s = \"<|>c\";\n+            }\n+            \"#,\n+            r#\"\"c\"\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_assist() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+    fn f() {\n+        let s = \"<|>c\";\n+    }\n+    \"#,\n+            r##\"\n+    fn f() {\n+        let s = 'c';\n+    }\n+    \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_assist_not_applicable() {\n+        check_assist_not_applicable(\n+            replace_string_with_char,\n+            r#\"\n+    fn f() {\n+        let s = \"<|>test\";\n+    }\n+    \"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_works_inside_macros() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+                fn f() {\n+                    format!(<|>\"x\", 92)\n+                }\n+                \"#,\n+            r##\"\n+                fn f() {\n+                    format!('x', 92)\n+                }\n+                \"##,\n+        )\n+    }\n+\n+    #[test]\n+    fn replace_string_with_char_works_func_args() {\n+        check_assist(\n+            replace_string_with_char,\n+            r#\"\n+                fn f() {\n+                    find(<|>\"x\");\n+                }\n+                \"#,\n+            r##\"\n+                fn f() {\n+                    find('x');\n+                }\n+                \"##,\n+        )\n+    }\n+}"}, {"sha": "2a98cccc0561fcfe4423cd59123cd7794ab8ee29", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62192cede3567df632c819656cc28ec3b2d2f5d6/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62192cede3567df632c819656cc28ec3b2d2f5d6/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=62192cede3567df632c819656cc28ec3b2d2f5d6", "patch": "@@ -159,6 +159,7 @@ mod handlers {\n     mod replace_impl_trait_with_generic;\n     mod replace_let_with_if_let;\n     mod replace_qualified_name_with_use;\n+    mod replace_string_with_char;\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod unwrap_block;\n@@ -208,6 +209,7 @@ mod handlers {\n             replace_impl_trait_with_generic::replace_impl_trait_with_generic,\n             replace_let_with_if_let::replace_let_with_if_let,\n             replace_qualified_name_with_use::replace_qualified_name_with_use,\n+            replace_string_with_char::replace_string_with_char,\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             unwrap_block::unwrap_block,"}]}