{"sha": "acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYzY0NTgzOTBlYjdlZDU5NDdmZThiNmEwNjI4YjRhOTAxOGZhZDE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T18:06:58Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-16T18:06:58Z"}, "message": "Replace trait object boxing with extra AttrsOwnerNode", "tree": {"sha": "038a673cd1e1dcd74ac7efed266c9419a38bd6c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038a673cd1e1dcd74ac7efed266c9419a38bd6c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "html_url": "https://github.com/rust-lang/rust/commit/acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acc6458390eb7ed5947fe8b6a0628b4a9018fad1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35", "html_url": "https://github.com/rust-lang/rust/commit/11e9bc60a2d9c22dbf51b7e1aa3d6e30a7006a35"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "086db40e578bdef98c8035f6eed3a5ab41d4135b", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 48, "deletions": 19, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/acc6458390eb7ed5947fe8b6a0628b4a9018fad1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc6458390eb7ed5947fe8b6a0628b4a9018fad1/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "patch": "@@ -4,7 +4,7 @@ use either::Either;\n use hir::{HasAttrs, Semantics};\n use ide_db::call_info::ActiveParameter;\n use syntax::{\n-    ast::{self, AstNode, AttrsOwner},\n+    ast::{self, AstNode, AttrsOwner, DocCommentsOwner},\n     match_ast, AstToken, SyntaxNode, SyntaxToken, TextRange, TextSize,\n };\n \n@@ -85,28 +85,57 @@ const RUSTDOC_FENCE_TOKENS: &[&'static str] = &[\n     \"edition2021\",\n ];\n \n+// Basically an owned dyn AttrsOwner without extra Boxing\n+struct AttrsOwnerNode {\n+    node: SyntaxNode,\n+}\n+\n+impl AttrsOwnerNode {\n+    fn new<N: DocCommentsOwner>(node: N) -> Self {\n+        AttrsOwnerNode { node: node.syntax().clone() }\n+    }\n+}\n+\n+impl AttrsOwner for AttrsOwnerNode {}\n+impl AstNode for AttrsOwnerNode {\n+    fn can_cast(_: syntax::SyntaxKind) -> bool\n+    where\n+        Self: Sized,\n+    {\n+        false\n+    }\n+    fn cast(_: SyntaxNode) -> Option<Self>\n+    where\n+        Self: Sized,\n+    {\n+        None\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.node\n+    }\n+}\n+\n fn doc_attributes<'node>(\n     sema: &Semantics<RootDatabase>,\n     node: &'node SyntaxNode,\n-) -> Option<(Box<dyn AttrsOwner>, hir::Attrs)> {\n+) -> Option<(AttrsOwnerNode, hir::Attrs)> {\n     match_ast! {\n         match node {\n-            ast::SourceFile(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Fn(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Struct(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Union(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::RecordField(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::TupleField(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Enum(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Variant(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Trait(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Module(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Static(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Const(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::TypeAlias(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::Impl(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::MacroRules(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n-            ast::MacroRules(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::SourceFile(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Fn(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Struct(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Union(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::RecordField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::TupleField(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Enum(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Variant(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Trait(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Module(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Static(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Const(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::TypeAlias(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::Impl(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n+            ast::MacroRules(it) => sema.to_def(&it).map(|def| (AttrsOwnerNode::new(it), def.attrs(sema.db))),\n             // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             _ => return None\n@@ -124,7 +153,7 @@ pub(super) fn doc_comment(hl: &mut Highlights, sema: &Semantics<RootDatabase>, n\n     if attributes.docs().map_or(true, |docs| !String::from(docs).contains(RUSTDOC_FENCE)) {\n         return;\n     }\n-    let doc_comments = attributes.by_key(\"doc\").attrs().map(|attr| attr.to_src(&*owner));\n+    let doc_comments = attributes.by_key(\"doc\").attrs().map(|attr| attr.to_src(&owner));\n \n     let mut inj = Injector::default();\n     inj.add_unmapped(\"fn doctest() {\\n\");"}, {"sha": "96d4cc9971874021ed3a8adb923cee4f493e0b85", "filename": "crates/syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acc6458390eb7ed5947fe8b6a0628b4a9018fad1/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acc6458390eb7ed5947fe8b6a0628b4a9018fad1/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftraits.rs?ref=acc6458390eb7ed5947fe8b6a0628b4a9018fad1", "patch": "@@ -72,7 +72,7 @@ pub trait AttrsOwner: AstNode {\n     }\n }\n \n-pub trait DocCommentsOwner: AstNode {\n+pub trait DocCommentsOwner: AttrsOwner {\n     fn doc_comments(&self) -> CommentIter {\n         CommentIter { iter: self.syntax().children_with_tokens() }\n     }"}]}