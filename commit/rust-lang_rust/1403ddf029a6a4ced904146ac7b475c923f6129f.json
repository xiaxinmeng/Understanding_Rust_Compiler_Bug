{"sha": "1403ddf029a6a4ced904146ac7b475c923f6129f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0MDNkZGYwMjlhNmE0Y2VkOTA0MTQ2YWM3YjQ3NWM5MjNmNjEyOWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-06T13:26:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-06T13:26:54Z"}, "message": "Merge #6734\n\n6734: Emit additional diagnostics for hints/help/etc r=lnicola a=jonas-schievink\n\nThis makes rust-analyzer diagnostics match native rustc diagnostics in the terminal more closely. Unfortunately all of this is a bodge, since we already provide this information to the client in the form of `DiagnosticRelatedInformation`, but at least VS Code chooses such a poor UI for these that they don't help much, as evidenced [here](https://twitter.com/yaahc_/status/1335297260444250112) and in https://github.com/rust-lang/rust/issues/79741.\r\n\r\nThis PR papers over these client UI problems by taking the `DiagnosticRelatedInformation` and turning each one into its own hint-level diagnostic, which makes it show up in the source code. Quick fixes are attached to all resulting diagnostics, which makes them more discoverable.\r\n\r\n### Example: \"Consider removing this semicolon\"\r\n\r\n![screenshot-2020-12-06-01:27:29](https://user-images.githubusercontent.com/1786438/101268366-46423980-3762-11eb-9a69-1ff0b1806c2f.png)\r\n![screenshot-2020-12-06-01:27:39](https://user-images.githubusercontent.com/1786438/101268367-46dad000-3762-11eb-81fa-afd234d44f17.png)\r\n![screenshot-2020-12-06-01:27:46](https://user-images.githubusercontent.com/1786438/101268368-46dad000-3762-11eb-9205-4b9bd9f4406d.png)\r\n\r\n### Example: \"Value used after move\"\r\n\r\n![screenshot-2020-12-06-01:33:00](https://user-images.githubusercontent.com/1786438/101268447-22332800-3763-11eb-85ce-8c742927a2c8.png)\r\n![screenshot-2020-12-06-01:33:07](https://user-images.githubusercontent.com/1786438/101268448-22cbbe80-3763-11eb-8f16-0590895d8bc6.png)\r\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "5de8d09fea220460bf49657f086d3130c79eb491", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5de8d09fea220460bf49657f086d3130c79eb491"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1403ddf029a6a4ced904146ac7b475c923f6129f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfzNweCRBK7hj4Ov3rIwAAdHIIADtLzy2g3UubIaa7JDUxe5kB\nJhAy8sjHFS6lkhVrjdrVd7nNxrBF1J0JpCSZTxjkwiWn616ZydWgA7Ixl27m02dX\n73KZR0TblZ/FyGzikV5vTjEGRKgUgDtYPbhZRe7ysDMS9ZhqVL+K8c1T8dpimNXj\n6+ReYtXyb6eSWsvzS5YYrSX4N9en9HrWD4tdBZCMNPKFLXhSNN0WTU/fK5LINWRq\n1eTzXkC0NXr8120zaktnePHaI5Iha5KKkZyJLLn0ayLLwKgsB+p4YH2WZtfXuM1M\n28Wjq80Ae2mHO6J4v5anrGfMRwZ/LwOzXrYbTiNCIWxlSbvq5Tg+1X6QL3tw3m0=\n=zib7\n-----END PGP SIGNATURE-----\n", "payload": "tree 5de8d09fea220460bf49657f086d3130c79eb491\nparent 8d5aa08712e782f22f04525f291ec74dae183568\nparent 45b8b3d57fd1a38a0ccce8516cbebbd09184d59a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607261214 +0000\ncommitter GitHub <noreply@github.com> 1607261214 +0000\n\nMerge #6734\n\n6734: Emit additional diagnostics for hints/help/etc r=lnicola a=jonas-schievink\n\nThis makes rust-analyzer diagnostics match native rustc diagnostics in the terminal more closely. Unfortunately all of this is a bodge, since we already provide this information to the client in the form of `DiagnosticRelatedInformation`, but at least VS Code chooses such a poor UI for these that they don't help much, as evidenced [here](https://twitter.com/yaahc_/status/1335297260444250112) and in https://github.com/rust-lang/rust/issues/79741.\r\n\r\nThis PR papers over these client UI problems by taking the `DiagnosticRelatedInformation` and turning each one into its own hint-level diagnostic, which makes it show up in the source code. Quick fixes are attached to all resulting diagnostics, which makes them more discoverable.\r\n\r\n### Example: \"Consider removing this semicolon\"\r\n\r\n![screenshot-2020-12-06-01:27:29](https://user-images.githubusercontent.com/1786438/101268366-46423980-3762-11eb-9a69-1ff0b1806c2f.png)\r\n![screenshot-2020-12-06-01:27:39](https://user-images.githubusercontent.com/1786438/101268367-46dad000-3762-11eb-81fa-afd234d44f17.png)\r\n![screenshot-2020-12-06-01:27:46](https://user-images.githubusercontent.com/1786438/101268368-46dad000-3762-11eb-9205-4b9bd9f4406d.png)\r\n\r\n### Example: \"Value used after move\"\r\n\r\n![screenshot-2020-12-06-01:33:00](https://user-images.githubusercontent.com/1786438/101268447-22332800-3763-11eb-85ce-8c742927a2c8.png)\r\n![screenshot-2020-12-06-01:33:07](https://user-images.githubusercontent.com/1786438/101268448-22cbbe80-3763-11eb-8f16-0590895d8bc6.png)\r\n\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1403ddf029a6a4ced904146ac7b475c923f6129f", "html_url": "https://github.com/rust-lang/rust/commit/1403ddf029a6a4ced904146ac7b475c923f6129f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1403ddf029a6a4ced904146ac7b475c923f6129f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5aa08712e782f22f04525f291ec74dae183568", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5aa08712e782f22f04525f291ec74dae183568", "html_url": "https://github.com/rust-lang/rust/commit/8d5aa08712e782f22f04525f291ec74dae183568"}, {"sha": "45b8b3d57fd1a38a0ccce8516cbebbd09184d59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/45b8b3d57fd1a38a0ccce8516cbebbd09184d59a", "html_url": "https://github.com/rust-lang/rust/commit/45b8b3d57fd1a38a0ccce8516cbebbd09184d59a"}], "stats": {"total": 1212, "additions": 1093, "deletions": 119}, "files": [{"sha": "7576097b31f91ea5cb8a69b8fb79fb640988affa", "filename": "crates/rust-analyzer/src/diagnostics/test_data/clippy_pass_by_ref.txt", "status": "modified", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fclippy_pass_by_ref.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -104,4 +104,168 @@\n         },\n         fixes: [],\n     },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/compiler/lib.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 0,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 0,\n+                    character: 19,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"trivially_copy_pass_by_ref\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        host: Some(\n+                            Domain(\n+                                \"rust-lang.github.io\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/rust-clippy/master/index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"trivially_copy_pass_by_ref\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"lint level defined here\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/compiler/mir/tagset.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 41,\n+                                    character: 23,\n+                                },\n+                                end: Position {\n+                                    line: 41,\n+                                    character: 28,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/compiler/mir/tagset.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 41,\n+                    character: 23,\n+                },\n+                end: Position {\n+                    line: 41,\n+                    character: 28,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"trivially_copy_pass_by_ref\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        host: Some(\n+                            Domain(\n+                                \"rust-lang.github.io\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/rust-clippy/master/index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"trivially_copy_pass_by_ref\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"consider passing by value instead\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/compiler/mir/tagset.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 41,\n+                                    character: 23,\n+                                },\n+                                end: Position {\n+                                    line: 41,\n+                                    character: 28,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n ]"}, {"sha": "bdcf2a38fdaa3de6924bc46f9a2949a8892a8e3a", "filename": "crates/rust-analyzer/src/diagnostics/test_data/macro_compiler_error.txt", "status": "modified", "additions": 17, "deletions": 43, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fmacro_compiler_error.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -4,19 +4,19 @@\n             scheme: \"file\",\n             host: None,\n             port: None,\n-            path: \"/test/crates/hir_def/src/data.rs\",\n+            path: \"/test/crates/hir_def/src/path.rs\",\n             query: None,\n             fragment: None,\n         },\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {\n-                    line: 79,\n-                    character: 15,\n+                    line: 264,\n+                    character: 8,\n                 },\n                 end: Position {\n-                    line: 79,\n-                    character: 41,\n+                    line: 264,\n+                    character: 76,\n                 },\n             },\n             severity: Some(\n@@ -36,22 +36,22 @@\n                                 scheme: \"file\",\n                                 host: None,\n                                 port: None,\n-                                path: \"/test/crates/hir_def/src/path.rs\",\n+                                path: \"/test/crates/hir_def/src/data.rs\",\n                                 query: None,\n                                 fragment: None,\n                             },\n                             range: Range {\n                                 start: Position {\n-                                    line: 264,\n-                                    character: 8,\n+                                    line: 79,\n+                                    character: 15,\n                                 },\n                                 end: Position {\n-                                    line: 264,\n-                                    character: 76,\n+                                    line: 79,\n+                                    character: 41,\n                                 },\n                             },\n                         },\n-                        message: \"Error originated from macro here\",\n+                        message: \"Exact error occurred here\",\n                     },\n                 ],\n             ),\n@@ -65,19 +65,19 @@\n             scheme: \"file\",\n             host: None,\n             port: None,\n-            path: \"/test/crates/hir_def/src/path.rs\",\n+            path: \"/test/crates/hir_def/src/data.rs\",\n             query: None,\n             fragment: None,\n         },\n         diagnostic: Diagnostic {\n             range: Range {\n                 start: Position {\n-                    line: 264,\n-                    character: 8,\n+                    line: 79,\n+                    character: 15,\n                 },\n                 end: Position {\n-                    line: 264,\n-                    character: 76,\n+                    line: 79,\n+                    character: 41,\n                 },\n             },\n             severity: Some(\n@@ -89,33 +89,7 @@\n                 \"rustc\",\n             ),\n             message: \"Please register your known path in the path module\",\n-            related_information: Some(\n-                [\n-                    DiagnosticRelatedInformation {\n-                        location: Location {\n-                            uri: Url {\n-                                scheme: \"file\",\n-                                host: None,\n-                                port: None,\n-                                path: \"/test/crates/hir_def/src/data.rs\",\n-                                query: None,\n-                                fragment: None,\n-                            },\n-                            range: Range {\n-                                start: Position {\n-                                    line: 79,\n-                                    character: 15,\n-                                },\n-                                end: Position {\n-                                    line: 79,\n-                                    character: 41,\n-                                },\n-                            },\n-                        },\n-                        message: \"Exact error occured here\",\n-                    },\n-                ],\n-            ),\n+            related_information: None,\n             tags: None,\n             data: None,\n         },"}, {"sha": "23d42b4d08b8a057c4ebe2fb60fb40b3acee29e3", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable.txt", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -32,7 +32,33 @@\n                 \"rustc\",\n             ),\n             message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"consider prefixing with an underscore\",\n+                    },\n+                ],\n+            ),\n             tags: Some(\n                 [\n                     Unnecessary,\n@@ -87,4 +113,114 @@\n             },\n         ],\n     },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/driver/subcommand/repl.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            code_description: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"consider prefixing with an underscore\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/driver/subcommand/repl.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n+    },\n ]"}, {"sha": "4e428bedcbf3d46088f8c480302773d1d8cd32ec", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_hint.txt", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_hint.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -32,7 +32,33 @@\n                 \"rustc\",\n             ),\n             message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"consider prefixing with an underscore\",\n+                    },\n+                ],\n+            ),\n             tags: Some(\n                 [\n                     Unnecessary,\n@@ -87,4 +113,114 @@\n             },\n         ],\n     },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/driver/subcommand/repl.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            code_description: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"consider prefixing with an underscore\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/driver/subcommand/repl.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n+    },\n ]"}, {"sha": "4ddd7efae366eb9f7e46f1bd72da8c2e23a71490", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_unused_variable_as_info.txt", "status": "modified", "additions": 137, "deletions": 1, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_unused_variable_as_info.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -32,7 +32,33 @@\n                 \"rustc\",\n             ),\n             message: \"unused variable: `foo`\\n#[warn(unused_variables)] on by default\",\n-            related_information: None,\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"consider prefixing with an underscore\",\n+                    },\n+                ],\n+            ),\n             tags: Some(\n                 [\n                     Unnecessary,\n@@ -87,4 +113,114 @@\n             },\n         ],\n     },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/driver/subcommand/repl.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 290,\n+                    character: 8,\n+                },\n+                end: Position {\n+                    line: 290,\n+                    character: 11,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"unused_variables\",\n+                ),\n+            ),\n+            code_description: None,\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"consider prefixing with an underscore\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/driver/subcommand/repl.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 290,\n+                                    character: 8,\n+                                },\n+                                end: Position {\n+                                    line: 290,\n+                                    character: 11,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"consider prefixing with an underscore\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/driver/subcommand/repl.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 290,\n+                                                character: 8,\n+                                            },\n+                                            end: Position {\n+                                                line: 290,\n+                                                character: 11,\n+                                            },\n+                                        },\n+                                        new_text: \"_foo\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n+    },\n ]"}, {"sha": "f455cf25efbd60dfe9f12f86312d25437e9c9884", "filename": "crates/rust-analyzer/src/diagnostics/test_data/rustc_wrong_number_of_parameters.txt", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Frustc_wrong_number_of_parameters.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -81,4 +81,86 @@\n         },\n         fixes: [],\n     },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/compiler/ty/select.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 218,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 230,\n+                    character: 5,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"E0061\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        host: Some(\n+                            Domain(\n+                                \"doc.rust-lang.org\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/error-index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"E0061\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"rustc\",\n+            ),\n+            message: \"defined here\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/compiler/ty/select.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 103,\n+                                    character: 17,\n+                                },\n+                                end: Position {\n+                                    line: 103,\n+                                    character: 29,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [],\n+    },\n ]"}, {"sha": "4cbdb3b922f70c9c49fb001945dd1d089df50916", "filename": "crates/rust-analyzer/src/diagnostics/test_data/snap_multi_line_fix.txt", "status": "modified", "additions": 303, "deletions": 0, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Ftest_data%2Fsnap_multi_line_fix.txt?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -74,6 +74,309 @@\n                         },\n                         message: \"unnecessary let binding\",\n                     },\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 2,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 2,\n+                                    character: 30,\n+                                },\n+                            },\n+                        },\n+                        message: \"return the expression directly\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"return the expression directly\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/src/main.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 2,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 2,\n+                                                character: 30,\n+                                            },\n+                                        },\n+                                        new_text: \"\",\n+                                    },\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 3,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 3,\n+                                                character: 5,\n+                                            },\n+                                        },\n+                                        new_text: \"(0..10).collect()\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/src/main.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 2,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 2,\n+                    character: 30,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"let_and_return\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        host: Some(\n+                            Domain(\n+                                \"rust-lang.github.io\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/rust-clippy/master/index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"let_and_return\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"unnecessary let binding\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 3,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 3,\n+                                    character: 5,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n+                ],\n+            ),\n+            tags: None,\n+            data: None,\n+        },\n+        fixes: [\n+            CodeAction {\n+                title: \"return the expression directly\",\n+                group: None,\n+                kind: Some(\n+                    CodeActionKind(\n+                        \"quickfix\",\n+                    ),\n+                ),\n+                edit: Some(\n+                    SnippetWorkspaceEdit {\n+                        changes: Some(\n+                            {\n+                                Url {\n+                                    scheme: \"file\",\n+                                    host: None,\n+                                    port: None,\n+                                    path: \"/test/src/main.rs\",\n+                                    query: None,\n+                                    fragment: None,\n+                                }: [\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 2,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 2,\n+                                                character: 30,\n+                                            },\n+                                        },\n+                                        new_text: \"\",\n+                                    },\n+                                    TextEdit {\n+                                        range: Range {\n+                                            start: Position {\n+                                                line: 3,\n+                                                character: 4,\n+                                            },\n+                                            end: Position {\n+                                                line: 3,\n+                                                character: 5,\n+                                            },\n+                                        },\n+                                        new_text: \"(0..10).collect()\",\n+                                    },\n+                                ],\n+                            },\n+                        ),\n+                        document_changes: None,\n+                    },\n+                ),\n+                is_preferred: Some(\n+                    true,\n+                ),\n+                data: None,\n+            },\n+        ],\n+    },\n+    MappedRustDiagnostic {\n+        url: Url {\n+            scheme: \"file\",\n+            host: None,\n+            port: None,\n+            path: \"/test/src/main.rs\",\n+            query: None,\n+            fragment: None,\n+        },\n+        diagnostic: Diagnostic {\n+            range: Range {\n+                start: Position {\n+                    line: 2,\n+                    character: 4,\n+                },\n+                end: Position {\n+                    line: 2,\n+                    character: 30,\n+                },\n+            },\n+            severity: Some(\n+                Hint,\n+            ),\n+            code: Some(\n+                String(\n+                    \"let_and_return\",\n+                ),\n+            ),\n+            code_description: Some(\n+                CodeDescription {\n+                    href: Url {\n+                        scheme: \"https\",\n+                        host: Some(\n+                            Domain(\n+                                \"rust-lang.github.io\",\n+                            ),\n+                        ),\n+                        port: None,\n+                        path: \"/rust-clippy/master/index.html\",\n+                        query: None,\n+                        fragment: Some(\n+                            \"let_and_return\",\n+                        ),\n+                    },\n+                },\n+            ),\n+            source: Some(\n+                \"clippy\",\n+            ),\n+            message: \"return the expression directly\",\n+            related_information: Some(\n+                [\n+                    DiagnosticRelatedInformation {\n+                        location: Location {\n+                            uri: Url {\n+                                scheme: \"file\",\n+                                host: None,\n+                                port: None,\n+                                path: \"/test/src/main.rs\",\n+                                query: None,\n+                                fragment: None,\n+                            },\n+                            range: Range {\n+                                start: Position {\n+                                    line: 3,\n+                                    character: 4,\n+                                },\n+                                end: Position {\n+                                    line: 3,\n+                                    character: 5,\n+                                },\n+                            },\n+                        },\n+                        message: \"original diagnostic\",\n+                    },\n                 ],\n             ),\n             tags: None,"}, {"sha": "f16f97131e94f3bf7cf3e2a331bd6e79812e9342", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 116, "deletions": 73, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1403ddf029a6a4ced904146ac7b475c923f6129f/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=1403ddf029a6a4ced904146ac7b475c923f6129f", "patch": "@@ -75,8 +75,10 @@ fn diagnostic_related_information(\n }\n \n enum MappedRustChildDiagnostic {\n-    Related(lsp_types::DiagnosticRelatedInformation),\n-    SuggestedFix(lsp_ext::CodeAction),\n+    Related {\n+        related: lsp_types::DiagnosticRelatedInformation,\n+        suggested_fix: Option<lsp_ext::CodeAction>,\n+    },\n     MessageLine(String),\n }\n \n@@ -103,23 +105,32 @@ fn map_rust_child_diagnostic(\n     }\n \n     if edit_map.is_empty() {\n-        MappedRustChildDiagnostic::Related(lsp_types::DiagnosticRelatedInformation {\n-            location: location(workspace_root, spans[0]),\n-            message: rd.message.clone(),\n-        })\n+        MappedRustChildDiagnostic::Related {\n+            related: lsp_types::DiagnosticRelatedInformation {\n+                location: location(workspace_root, spans[0]),\n+                message: rd.message.clone(),\n+            },\n+            suggested_fix: None,\n+        }\n     } else {\n-        MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n-            title: rd.message.clone(),\n-            group: None,\n-            kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n-            edit: Some(lsp_ext::SnippetWorkspaceEdit {\n-                // FIXME: there's no good reason to use edit_map here....\n-                changes: Some(edit_map),\n-                document_changes: None,\n+        MappedRustChildDiagnostic::Related {\n+            related: lsp_types::DiagnosticRelatedInformation {\n+                location: location(workspace_root, spans[0]),\n+                message: rd.message.clone(),\n+            },\n+            suggested_fix: Some(lsp_ext::CodeAction {\n+                title: rd.message.clone(),\n+                group: None,\n+                kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n+                edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                    // FIXME: there's no good reason to use edit_map here....\n+                    changes: Some(edit_map),\n+                    document_changes: None,\n+                }),\n+                is_preferred: Some(true),\n+                data: None,\n             }),\n-            is_preferred: Some(true),\n-            data: None,\n-        })\n+        }\n     }\n }\n \n@@ -179,8 +190,12 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     for child in &rd.children {\n         let child = map_rust_child_diagnostic(workspace_root, &child);\n         match child {\n-            MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n-            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n+            MappedRustChildDiagnostic::Related { related, suggested_fix } => {\n+                related_information.push(related);\n+                if let Some(code_action) = suggested_fix {\n+                    fixes.push(code_action);\n+                }\n+            }\n             MappedRustChildDiagnostic::MessageLine(message_line) => {\n                 format_to!(message, \"\\n{}\", message_line);\n \n@@ -219,7 +234,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n     primary_spans\n         .iter()\n-        .map(|primary_span| {\n+        .flat_map(|primary_span| {\n             let location = location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n@@ -229,72 +244,100 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 }\n             }\n \n+            // Each primary diagnostic span may result in multiple LSP diagnostics.\n+            let mut diagnostics = Vec::new();\n+\n+            let mut related_macro_info = None;\n+\n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n             // Also, we would generate an additional diagnostic, so that exact place of macro\n             // will be highlighted in the error origin place.\n-            let additional_diagnostic =\n-                if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                    let in_macro_location = location_naive(workspace_root, &primary_span);\n+            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n+                let in_macro_location = location_naive(workspace_root, &primary_span);\n \n-                    // Add related information for the main disagnostic.\n-                    related_information.push(lsp_types::DiagnosticRelatedInformation {\n-                        location: in_macro_location.clone(),\n-                        message: \"Error originated from macro here\".to_string(),\n-                    });\n+                // Add related information for the main disagnostic.\n+                related_macro_info = Some(lsp_types::DiagnosticRelatedInformation {\n+                    location: in_macro_location.clone(),\n+                    message: \"Error originated from macro here\".to_string(),\n+                });\n \n-                    // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n-                    let information_for_additional_diagnostic =\n-                        vec![lsp_types::DiagnosticRelatedInformation {\n-                            location: location.clone(),\n-                            message: \"Exact error occured here\".to_string(),\n-                        }];\n+                // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n+                let information_for_additional_diagnostic =\n+                    vec![lsp_types::DiagnosticRelatedInformation {\n+                        location: location.clone(),\n+                        message: \"Exact error occurred here\".to_string(),\n+                    }];\n \n-                    let diagnostic = lsp_types::Diagnostic {\n-                        range: in_macro_location.range,\n-                        severity,\n-                        code: code.clone().map(lsp_types::NumberOrString::String),\n-                        code_description: code_description.clone(),\n-                        source: Some(source.clone()),\n-                        message: message.clone(),\n-                        related_information: Some(information_for_additional_diagnostic),\n-                        tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                        data: None,\n-                    };\n-\n-                    Some(MappedRustDiagnostic {\n-                        url: in_macro_location.uri,\n-                        diagnostic,\n-                        fixes: fixes.clone(),\n-                    })\n-                } else {\n-                    None\n+                let diagnostic = lsp_types::Diagnostic {\n+                    range: in_macro_location.range,\n+                    severity,\n+                    code: code.clone().map(lsp_types::NumberOrString::String),\n+                    code_description: code_description.clone(),\n+                    source: Some(source.clone()),\n+                    message: message.clone(),\n+                    related_information: Some(information_for_additional_diagnostic),\n+                    tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n+                    data: None,\n                 };\n \n-            let diagnostic = lsp_types::Diagnostic {\n-                range: location.range,\n-                severity,\n-                code: code.clone().map(lsp_types::NumberOrString::String),\n-                code_description: code_description.clone(),\n-                source: Some(source.clone()),\n-                message,\n-                related_information: if related_information.is_empty() {\n-                    None\n-                } else {\n-                    Some(related_information.clone())\n+                diagnostics.push(MappedRustDiagnostic {\n+                    url: in_macro_location.uri,\n+                    diagnostic,\n+                    fixes: fixes.clone(),\n+                });\n+            }\n+\n+            // Emit the primary diagnostic.\n+            diagnostics.push(MappedRustDiagnostic {\n+                url: location.uri.clone(),\n+                diagnostic: lsp_types::Diagnostic {\n+                    range: location.range,\n+                    severity,\n+                    code: code.clone().map(lsp_types::NumberOrString::String),\n+                    code_description: code_description.clone(),\n+                    source: Some(source.clone()),\n+                    message,\n+                    related_information: if related_information.is_empty() {\n+                        None\n+                    } else {\n+                        let mut related = related_information.clone();\n+                        related.extend(related_macro_info);\n+                        Some(related)\n+                    },\n+                    tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n+                    data: None,\n                 },\n-                tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                data: None,\n-            };\n+                fixes: fixes.clone(),\n+            });\n \n-            let main_diagnostic =\n-                MappedRustDiagnostic { url: location.uri, diagnostic, fixes: fixes.clone() };\n-            match additional_diagnostic {\n-                None => vec![main_diagnostic],\n-                Some(additional_diagnostic) => vec![main_diagnostic, additional_diagnostic],\n+            // Emit hint-level diagnostics for all `related_information` entries such as \"help\"s.\n+            // This is useful because they will show up in the user's editor, unlike\n+            // `related_information`, which just produces hard-to-read links, at least in VS Code.\n+            let back_ref = lsp_types::DiagnosticRelatedInformation {\n+                location,\n+                message: \"original diagnostic\".to_string(),\n+            };\n+            for info in &related_information {\n+                diagnostics.push(MappedRustDiagnostic {\n+                    url: info.location.uri.clone(),\n+                    fixes: fixes.clone(), // share fixes to make them easier to apply\n+                    diagnostic: lsp_types::Diagnostic {\n+                        range: info.location.range,\n+                        severity: Some(lsp_types::DiagnosticSeverity::Hint),\n+                        code: code.clone().map(lsp_types::NumberOrString::String),\n+                        code_description: code_description.clone(),\n+                        source: Some(source.clone()),\n+                        message: info.message.clone(),\n+                        related_information: Some(vec![back_ref.clone()]),\n+                        tags: None, // don't apply modifiers again\n+                        data: None,\n+                    },\n+                });\n             }\n+\n+            diagnostics\n         })\n-        .flatten()\n         .collect()\n }\n "}]}