{"sha": "06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2ZmIxOTYyNTZiYmFiMWU3YWE0ZjQzZGFmNDUzMjFlZmFhNmUwZWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-03T06:49:50Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-09-03T06:49:50Z"}, "message": "Use `null()`/`null_mut()` instead of `0 as *const T`/`0 as *mut T`", "tree": {"sha": "23863826af019b2bc07d295882e092d244c36699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23863826af019b2bc07d295882e092d244c36699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "html_url": "https://github.com/rust-lang/rust/commit/06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3903ea96f557dc923cf73d3905554083cd921a01", "url": "https://api.github.com/repos/rust-lang/rust/commits/3903ea96f557dc923cf73d3905554083cd921a01", "html_url": "https://github.com/rust-lang/rust/commit/3903ea96f557dc923cf73d3905554083cd921a01"}], "stats": {"total": 117, "additions": 65, "deletions": 52}, "files": [{"sha": "d8f8ca6eae59c84e3daef5e4db8eae1ee4297ccf", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -296,7 +296,7 @@ impl<K, V> Drop for Node<K, V> {\n             self.destroy();\n         }\n \n-        self.keys = unsafe { Unique::new(0 as *mut K) };\n+        self.keys = unsafe { Unique::new(ptr::null_mut()) };\n     }\n }\n "}, {"sha": "bb752b07abeb8a93d5189bca629e66fd42b5b08a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -1135,7 +1135,7 @@ impl<T> ops::Deref for Vec<T> {\n     fn deref(&self) -> &[T] {\n         unsafe {\n             let p = self.buf.ptr();\n-            assume(p != 0 as *mut T);\n+            assume(!p.is_null());\n             slice::from_raw_parts(p, self.len)\n         }\n     }"}, {"sha": "4517c2f915773a78b86267277188734874df8457", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -184,6 +184,7 @@ use std::io::{self, Stderr};\n use std::io::prelude::*;\n use std::mem;\n use std::env;\n+use std::ptr;\n use std::rt;\n use std::slice;\n use std::sync::{Once, StaticMutex};\n@@ -209,11 +210,10 @@ static LOCK: StaticMutex = StaticMutex::new();\n /// logging statement should be run.\n static mut LOG_LEVEL: u32 = MAX_LOG_LEVEL;\n \n-static mut DIRECTIVES: *mut Vec<directive::LogDirective> =\n-    0 as *mut Vec<directive::LogDirective>;\n+static mut DIRECTIVES: *mut Vec<directive::LogDirective> = ptr::null_mut();\n \n /// Optional filter.\n-static mut FILTER: *mut String = 0 as *mut _;\n+static mut FILTER: *mut String = ptr::null_mut();\n \n /// Debug log level\n pub const DEBUG: u32 = 4;"}, {"sha": "76bbce00f19dc3be0b91ea2f401801461b873162", "filename": "src/librustc_trans/back/archive.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibrustc_trans%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibrustc_trans%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Farchive.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -18,6 +18,7 @@ use std::io;\n use std::mem;\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, Stdio};\n+use std::ptr;\n use std::str;\n \n use libc;\n@@ -449,7 +450,7 @@ impl<'a> ArchiveBuilder<'a> {\n                     }\n \n                     let name = try!(CString::new(child_name));\n-                    members.push(llvm::LLVMRustArchiveMemberNew(0 as *const _,\n+                    members.push(llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                 name.as_ptr(),\n                                                                 child.raw()));\n                     strings.push(name);\n@@ -462,7 +463,7 @@ impl<'a> ArchiveBuilder<'a> {\n                         let name = try!(CString::new(name_in_archive));\n                         members.push(llvm::LLVMRustArchiveMemberNew(path.as_ptr(),\n                                                                     name.as_ptr(),\n-                                                                    0 as *mut _));\n+                                                                    ptr::null_mut()));\n                         strings.push(path);\n                         strings.push(name);\n                     }\n@@ -472,7 +473,7 @@ impl<'a> ArchiveBuilder<'a> {\n                             if skip(child_name) { continue }\n \n                             let name = try!(CString::new(child_name));\n-                            let m = llvm::LLVMRustArchiveMemberNew(0 as *const _,\n+                            let m = llvm::LLVMRustArchiveMemberNew(ptr::null(),\n                                                                    name.as_ptr(),\n                                                                    child.raw());\n                             members.push(m);"}, {"sha": "d178565e18f592b18132dea1add2f256d58b0cda", "filename": "src/librustc_trans/back/msvc/registry.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fmsvc%2Fregistry.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -12,6 +12,7 @@ use std::io;\n use std::ffi::{OsString, OsStr};\n use std::os::windows::prelude::*;\n use std::ops::RangeFrom;\n+use std::ptr;\n use libc::{DWORD, LPCWSTR, LONG, LPDWORD, LPBYTE, ERROR_SUCCESS};\n use libc::c_void;\n \n@@ -88,7 +89,7 @@ impl RegistryKey {\n \n     pub fn open(&self, key: &OsStr) -> io::Result<RegistryKey> {\n         let key = key.encode_wide().chain(Some(0)).collect::<Vec<_>>();\n-        let mut ret = 0 as *mut _;\n+        let mut ret = ptr::null_mut();\n         let err = unsafe {\n             RegOpenKeyExW(self.raw(), key.as_ptr(), 0,\n                           KEY_READ | KEY_WOW64_32KEY, &mut ret)\n@@ -110,8 +111,8 @@ impl RegistryKey {\n         let mut len = 0;\n         let mut kind = 0;\n         unsafe {\n-            let err = RegQueryValueExW(self.raw(), name.as_ptr(), 0 as *mut _,\n-                                       &mut kind, 0 as *mut _, &mut len);\n+            let err = RegQueryValueExW(self.raw(), name.as_ptr(), ptr::null_mut(),\n+                                       &mut kind, ptr::null_mut(), &mut len);\n             if err != ERROR_SUCCESS {\n                 return Err(io::Error::from_raw_os_error(err as i32))\n             }\n@@ -124,8 +125,8 @@ impl RegistryKey {\n             // characters so we need to be sure to halve it for the capacity\n             // passed in.\n             let mut v = Vec::with_capacity(len as usize / 2);\n-            let err = RegQueryValueExW(self.raw(), name.as_ptr(), 0 as *mut _,\n-                                       0 as *mut _, v.as_mut_ptr() as *mut _,\n+            let err = RegQueryValueExW(self.raw(), name.as_ptr(), ptr::null_mut(),\n+                                       ptr::null_mut(), v.as_mut_ptr() as *mut _,\n                                        &mut len);\n             if err != ERROR_SUCCESS {\n                 return Err(io::Error::from_raw_os_error(err as i32))\n@@ -156,8 +157,8 @@ impl<'a> Iterator for Iter<'a> {\n             let mut v = Vec::with_capacity(256);\n             let mut len = v.capacity() as DWORD;\n             let ret = RegEnumKeyExW(self.key.raw(), i, v.as_mut_ptr(), &mut len,\n-                                    0 as *mut _, 0 as *mut _, 0 as *mut _,\n-                                    0 as *mut _);\n+                                    ptr::null_mut(), ptr::null_mut(), ptr::null_mut(),\n+                                    ptr::null_mut());\n             if ret == ERROR_NO_MORE_ITEMS as LONG {\n                 None\n             } else if ret != ERROR_SUCCESS {"}, {"sha": "ad17a650336c56a3f901fd3d96a719e33d983982", "filename": "src/libstd/io/lazy.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fio%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fio%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Flazy.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -11,6 +11,7 @@\n use prelude::v1::*;\n \n use cell::Cell;\n+use ptr;\n use rt;\n use sync::{StaticMutex, Arc};\n \n@@ -26,7 +27,7 @@ impl<T: Send + Sync + 'static> Lazy<T> {\n     pub const fn new(init: fn() -> Arc<T>) -> Lazy<T> {\n         Lazy {\n             lock: StaticMutex::new(),\n-            ptr: Cell::new(0 as *mut _),\n+            ptr: Cell::new(ptr::null_mut()),\n             init: init\n         }\n     }"}, {"sha": "1df9642d3bb744eda3df83f656fb935680d065c5", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -185,6 +185,7 @@ mod imp {\n \n     use io;\n     use mem;\n+    use ptr;\n     use rand::Rng;\n     use libc::{c_int, size_t};\n \n@@ -207,7 +208,7 @@ mod imp {\n     enum SecRandom {}\n \n     #[allow(non_upper_case_globals)]\n-    const kSecRandomDefault: *const SecRandom = 0 as *const SecRandom;\n+    const kSecRandomDefault: *const SecRandom = ptr::null();\n \n     #[link(name = \"Security\", kind = \"framework\")]\n     extern \"C\" {"}, {"sha": "54e5b499e537acf9bfa234549178be50bbf4516c", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -18,6 +18,7 @@\n \n use alloc::boxed::FnBox;\n use boxed::Box;\n+use ptr;\n use sys_common::mutex::Mutex;\n use vec::Vec;\n \n@@ -28,7 +29,7 @@ type Queue = Vec<Box<FnBox()>>;\n // the thread infrastructure to be in place (useful on the borders of\n // initialization/destruction).\n static LOCK: Mutex = Mutex::new();\n-static mut QUEUE: *mut Queue = 0 as *mut Queue;\n+static mut QUEUE: *mut Queue = ptr::null_mut();\n \n // The maximum number of times the cleanup routines will be run. While running\n // the at_exit closures new ones may be registered, and this count is the number"}, {"sha": "8c7937581665bd19b700f4fcbc00ceda8cb2eec5", "filename": "src/libstd/rt/unwind/seh.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frt%2Funwind%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Frt%2Funwind%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind%2Fseh.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -53,6 +53,7 @@ use prelude::v1::*;\n \n use any::Any;\n use libc::{c_ulong, DWORD, c_void};\n+use ptr;\n use sys_common::thread_local::StaticKey;\n \n //                        0x R U S T\n@@ -98,7 +99,7 @@ pub unsafe fn panic(data: Box<Any + Send + 'static>) -> ! {\n     rtassert!(PANIC_DATA.get().is_null());\n     PANIC_DATA.set(Box::into_raw(exception) as *mut u8);\n \n-    RaiseException(RUST_PANIC, 0, 0, 0 as *const _);\n+    RaiseException(RUST_PANIC, 0, 0, ptr::null());\n     rtabort!(\"could not unwind stack\");\n }\n \n@@ -108,7 +109,7 @@ pub unsafe fn cleanup(ptr: *mut u8) -> Box<Any + Send + 'static> {\n     rtassert!(ptr as DWORD == RUST_PANIC);\n \n     let data = PANIC_DATA.get() as *mut Box<Any + Send + 'static>;\n-    PANIC_DATA.set(0 as *mut u8);\n+    PANIC_DATA.set(ptr::null_mut());\n     rtassert!(!data.is_null());\n \n     *Box::from_raw(data)"}, {"sha": "4fb3134eac99c79638b360f90197e4bce0beb585", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -16,6 +16,7 @@ use io::{self, Error, ErrorKind};\n use libc::{self, c_int, c_char, c_void, socklen_t};\n use mem;\n use net::{SocketAddr, Shutdown, IpAddr};\n+use ptr;\n use str::from_utf8;\n use sys::c;\n use sys::net::{cvt, cvt_r, cvt_gai, Socket, init, wrlen_t};\n@@ -123,9 +124,9 @@ pub fn lookup_host(host: &str) -> io::Result<LookupHost> {\n     init();\n \n     let c_host = try!(CString::new(host));\n-    let mut res = 0 as *mut _;\n+    let mut res = ptr::null_mut();\n     unsafe {\n-        try!(cvt_gai(getaddrinfo(c_host.as_ptr(), 0 as *const _, 0 as *const _,\n+        try!(cvt_gai(getaddrinfo(c_host.as_ptr(), ptr::null(), ptr::null(),\n                                  &mut res)));\n         Ok(LookupHost { original: res, cur: res })\n     }\n@@ -154,7 +155,7 @@ pub fn lookup_addr(addr: &IpAddr) -> io::Result<String> {\n     let data = unsafe {\n         try!(cvt_gai(getnameinfo(inner, len,\n                                  hostbuf.as_mut_ptr(), NI_MAXHOST as libc::size_t,\n-                                 0 as *mut _, 0, 0)));\n+                                 ptr::null_mut(), 0, 0)));\n \n         CStr::from_ptr(hostbuf.as_ptr())\n     };"}, {"sha": "5640eb81f2ae350177da3864a10787928b89410d", "filename": "src/libstd/sys/unix/backtrace/printing/libbacktrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Flibbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Flibbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fbacktrace%2Fprinting%2Flibbacktrace.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -123,7 +123,7 @@ pub fn print(w: &mut Write, idx: isize, addr: *mut libc::c_void,\n     // FIXME: We also call self_exe_name() on DragonFly BSD. I haven't\n     //        tested if this is required or not.\n     unsafe fn init_state() -> *mut backtrace_state {\n-        static mut STATE: *mut backtrace_state = 0 as *mut backtrace_state;\n+        static mut STATE: *mut backtrace_state = ptr::null_mut();\n         static mut LAST_FILENAME: [libc::c_char; 256] = [0; 256];\n         if !STATE.is_null() { return STATE }\n         let selfname = if cfg!(target_os = \"freebsd\") ||"}, {"sha": "70be04b631ad5d7d56275efe00d9d695dd134306", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -291,7 +291,7 @@ pub fn args() -> Args {\n     };\n     Args {\n         iter: vec.into_iter(),\n-        _dont_send_or_sync_me: 0 as *mut (),\n+        _dont_send_or_sync_me: ptr::null_mut(),\n     }\n }\n \n@@ -347,7 +347,7 @@ pub fn args() -> Args {\n         }\n     }\n \n-    Args { iter: res.into_iter(), _dont_send_or_sync_me: 0 as *mut _ }\n+    Args { iter: res.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n }\n \n #[cfg(any(target_os = \"linux\",\n@@ -363,7 +363,7 @@ pub fn args() -> Args {\n     let v: Vec<OsString> = bytes.into_iter().map(|v| {\n         OsStringExt::from_vec(v)\n     }).collect();\n-    Args { iter: v.into_iter(), _dont_send_or_sync_me: 0 as *mut _ }\n+    Args { iter: v.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n }\n \n pub struct Env {\n@@ -403,7 +403,7 @@ pub fn env() -> Env {\n             result.push(parse(CStr::from_ptr(*environ).to_bytes()));\n             environ = environ.offset(1);\n         }\n-        Env { iter: result.into_iter(), _dont_send_or_sync_me: 0 as *mut _ }\n+        Env { iter: result.into_iter(), _dont_send_or_sync_me: ptr::null_mut() }\n     };\n \n     fn parse(input: &[u8]) -> (OsString, OsString) {\n@@ -481,7 +481,7 @@ pub fn home_dir() -> Option<PathBuf> {\n         loop {\n             let mut buf = Vec::with_capacity(amt);\n             let mut passwd: c::passwd = mem::zeroed();\n-            let mut result = 0 as *mut _;\n+            let mut result = ptr::null_mut();\n             match c::getpwuid_r(me, &mut passwd, buf.as_mut_ptr(),\n                                 buf.capacity() as libc::size_t,\n                                 &mut result) {"}, {"sha": "12ca31ce5e1e40383efd076cb33f705ed16637a9", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -405,7 +405,7 @@ fn make_envp(env: Option<&HashMap<OsString, OsString>>)\n \n         (ptrs.as_ptr() as *const _, tmps, ptrs)\n     } else {\n-        (0 as *const _, Vec::new(), Vec::new())\n+        (ptr::null(), Vec::new(), Vec::new())\n     }\n }\n "}, {"sha": "baff3c6bcbb8361cb96397e64ae05f348d143edf", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -93,7 +93,7 @@ mod imp {\n         // See comment above for why this function returns.\n     }\n \n-    static mut MAIN_ALTSTACK: *mut libc::c_void = 0 as *mut libc::c_void;\n+    static mut MAIN_ALTSTACK: *mut libc::c_void = ptr::null_mut();\n \n     pub unsafe fn init() {\n         PAGE_SIZE = ::sys::os::page_size();\n@@ -155,7 +155,7 @@ mod imp {\n     }\n \n     pub unsafe fn make_handler() -> super::Handler {\n-        super::Handler { _data: 0 as *mut libc::c_void }\n+        super::Handler { _data: ptr::null_mut() }\n     }\n \n     pub unsafe fn drop_handler(_handler: &mut super::Handler) {"}, {"sha": "4e49b6473c94b0c764d84a02c94f0524ee80bdfe", "filename": "src/libstd/sys/unix/sync.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fsync.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -59,15 +59,16 @@ extern {\n           target_os = \"openbsd\"))]\n mod os {\n     use libc;\n+    use ptr;\n \n     pub type pthread_mutex_t = *mut libc::c_void;\n     pub type pthread_mutexattr_t = *mut libc::c_void;\n     pub type pthread_cond_t = *mut libc::c_void;\n     pub type pthread_rwlock_t = *mut libc::c_void;\n \n-    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = 0 as *mut _;\n-    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = 0 as *mut _;\n-    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = 0 as *mut _;\n+    pub const PTHREAD_MUTEX_INITIALIZER: pthread_mutex_t = ptr::null_mut();\n+    pub const PTHREAD_COND_INITIALIZER: pthread_cond_t = ptr::null_mut();\n+    pub const PTHREAD_RWLOCK_INITIALIZER: pthread_rwlock_t = ptr::null_mut();\n     pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 2;\n }\n \n@@ -213,6 +214,7 @@ mod os {\n #[cfg(target_os = \"android\")]\n mod os {\n     use libc;\n+    use ptr;\n \n     #[repr(C)]\n     pub struct pthread_mutex_t { value: libc::c_int }\n@@ -243,7 +245,7 @@ mod os {\n         writerThreadId: 0,\n         pendingReaders: 0,\n         pendingWriters: 0,\n-        reserved: [0 as *mut _; 4],\n+        reserved: [ptr::null_mut(); 4],\n     };\n     pub const PTHREAD_MUTEX_RECURSIVE: libc::c_int = 1;\n }"}, {"sha": "5a551e2b3f33fd79c6ffeffd18d46ee749de7322", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -72,7 +72,7 @@ impl Thread {\n \n         extern fn thread_start(main: *mut libc::c_void) -> *mut libc::c_void {\n             unsafe { start_thread(main); }\n-            0 as *mut _\n+            ptr::null_mut()\n         }\n     }\n "}, {"sha": "30c7e5a52b7c776e688e183d5ec21a88014e4d52", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -16,6 +16,7 @@ use libc;\n use libc::{c_uint, c_ulong};\n use libc::{DWORD, BOOL, BOOLEAN, ERROR_CALL_NOT_IMPLEMENTED, LPVOID, HANDLE};\n use libc::{LPCWSTR, LONG};\n+use ptr;\n \n pub use self::GET_FILEEX_INFO_LEVELS::*;\n pub use self::FILE_INFO_BY_HANDLE_CLASS::*;\n@@ -294,9 +295,9 @@ pub struct CRITICAL_SECTION {\n }\n \n pub const CONDITION_VARIABLE_INIT: CONDITION_VARIABLE = CONDITION_VARIABLE {\n-    ptr: 0 as *mut _,\n+    ptr: ptr::null_mut(),\n };\n-pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { ptr: 0 as *mut _ };\n+pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { ptr: ptr::null_mut() };\n \n #[repr(C)]\n pub struct LUID {"}, {"sha": "e9d98b36a43f8e9089b059b1b4b653d37a3aeddd", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -328,12 +328,12 @@ impl File {\n             try!(cvt({\n                 c::DeviceIoControl(self.handle.raw(),\n                                    c::FSCTL_GET_REPARSE_POINT,\n-                                   0 as *mut _,\n+                                   ptr::null_mut(),\n                                    0,\n                                    space.as_mut_ptr() as *mut _,\n                                    space.len() as libc::DWORD,\n                                    &mut bytes,\n-                                   0 as *mut _)\n+                                   ptr::null_mut())\n             }));\n             Ok((bytes, &*(space.as_ptr() as *const c::REPARSE_DATA_BUFFER)))\n         }\n@@ -680,15 +680,15 @@ fn directory_junctions_are_directories() {\n                                    c::FSCTL_SET_REPARSE_POINT,\n                                    data.as_ptr() as *mut _,\n                                    (*db).ReparseDataLength + 8,\n-                                   0 as *mut _, 0,\n+                                   ptr::null_mut(), 0,\n                                    &mut ret,\n-                                   0 as *mut _)).map(|_| ())\n+                                   ptr::null_mut())).map(|_| ())\n         }\n     }\n \n     fn opendir(p: &Path, write: bool) -> io::Result<File> {\n         unsafe {\n-            let mut token = 0 as *mut _;\n+            let mut token = ptr::null_mut();\n             let mut tp: c::TOKEN_PRIVILEGES = mem::zeroed();\n             try!(cvt(c::OpenProcessToken(c::GetCurrentProcess(),\n                                          c::TOKEN_ADJUST_PRIVILEGES,\n@@ -699,14 +699,14 @@ fn directory_junctions_are_directories() {\n                 \"SeBackupPrivilege\".as_ref()\n             };\n             let name = name.encode_wide().chain(Some(0)).collect::<Vec<_>>();\n-            try!(cvt(c::LookupPrivilegeValueW(0 as *const _,\n+            try!(cvt(c::LookupPrivilegeValueW(ptr::null(),\n                                               name.as_ptr(),\n                                               &mut tp.Privileges[0].Luid)));\n             tp.PrivilegeCount = 1;\n             tp.Privileges[0].Attributes = c::SE_PRIVILEGE_ENABLED;\n             let size = mem::size_of::<c::TOKEN_PRIVILEGES>() as libc::DWORD;\n             try!(cvt(c::AdjustTokenPrivileges(token, libc::FALSE, &mut tp, size,\n-                                              0 as *mut _, 0 as *mut _)));\n+                                              ptr::null_mut(), ptr::null_mut())));\n             try!(cvt(libc::CloseHandle(token)));\n \n             File::open_reparse_point(p, write)\n@@ -726,9 +726,9 @@ fn directory_junctions_are_directories() {\n                                    c::FSCTL_DELETE_REPARSE_POINT,\n                                    data.as_ptr() as *mut _,\n                                    (*db).ReparseDataLength + 8,\n-                                   0 as *mut _, 0,\n+                                   ptr::null_mut(), 0,\n                                    &mut bytes,\n-                                   0 as *mut _)).map(|_| ())\n+                                   ptr::null_mut())).map(|_| ())\n         }\n     }\n }"}, {"sha": "e62b2d8cb18ffc01870e43028668f73c0d060f37", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -15,6 +15,7 @@ use mem;\n use net::SocketAddr;\n use num::One;\n use ops::Neg;\n+use ptr;\n use rt;\n use sync::Once;\n use sys;\n@@ -80,7 +81,7 @@ impl Socket {\n             SocketAddr::V6(..) => libc::AF_INET6,\n         };\n         let socket = try!(unsafe {\n-            match c::WSASocketW(fam, ty, 0, 0 as *mut _, 0,\n+            match c::WSASocketW(fam, ty, 0, ptr::null_mut(), 0,\n                                 c::WSA_FLAG_OVERLAPPED) {\n                 INVALID_SOCKET => Err(last_error()),\n                 n => Ok(Socket(n)),"}, {"sha": "3e2f442f073f6566f1f9d004bf916a9d2adf5570", "filename": "src/libstd/sys/windows/pipe.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fpipe.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -10,6 +10,7 @@\n \n use io;\n use libc;\n+use ptr;\n use sys::cvt;\n use sys::c;\n use sys::handle::Handle;\n@@ -26,7 +27,7 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     let mut reader = libc::INVALID_HANDLE_VALUE;\n     let mut writer = libc::INVALID_HANDLE_VALUE;\n     try!(cvt(unsafe {\n-        c::CreatePipe(&mut reader, &mut writer, 0 as *mut _, 0)\n+        c::CreatePipe(&mut reader, &mut writer, ptr::null_mut(), 0)\n     }));\n     let reader = Handle::new(reader);\n     let writer = Handle::new(writer);"}, {"sha": "17bc7ee8876935f077e198e4cd2c3b74c064955a", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -58,7 +58,7 @@ pub type Dtor = unsafe extern fn(*mut u8);\n // the thread infrastructure to be in place (useful on the borders of\n // initialization/destruction).\n static DTOR_LOCK: Mutex = Mutex::new();\n-static mut DTORS: *mut Vec<(Key, Dtor)> = 0 as *mut _;\n+static mut DTORS: *mut Vec<(Key, Dtor)> = ptr::null_mut();\n \n // -------------------------------------------------------------------------\n // Native bindings"}, {"sha": "87f58b4c84910c969816da518786843f2b25ea8a", "filename": "src/libstd/thread/scoped_tls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06fb196256bbab1e7aa4f43daf45321efaa6e0eb/src%2Flibstd%2Fthread%2Fscoped_tls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fscoped_tls.rs?ref=06fb196256bbab1e7aa4f43daf45321efaa6e0eb", "patch": "@@ -226,14 +226,15 @@ impl<T> ScopedKey<T> {\n #[doc(hidden)]\n mod imp {\n     use cell::Cell;\n+    use ptr;\n \n     pub struct KeyInner<T> { inner: Cell<*mut T> }\n \n     unsafe impl<T> ::marker::Sync for KeyInner<T> { }\n \n     impl<T> KeyInner<T> {\n         pub const fn new() -> KeyInner<T> {\n-            KeyInner { inner: Cell::new(0 as *mut _) }\n+            KeyInner { inner: Cell::new(ptr::null_mut()) }\n         }\n         pub unsafe fn set(&self, ptr: *mut T) { self.inner.set(ptr); }\n         pub unsafe fn get(&self) -> *mut T { self.inner.get() }"}]}