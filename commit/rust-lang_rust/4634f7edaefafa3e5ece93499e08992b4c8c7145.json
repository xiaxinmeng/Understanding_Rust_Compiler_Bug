{"sha": "4634f7edaefafa3e5ece93499e08992b4c8c7145", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzRmN2VkYWVmYWZhM2U1ZWNlOTM0OTllMDg5OTJiNGM4YzcxNDU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T02:07:54Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-22T17:27:39Z"}, "message": "librustc: Remove all uses of `static` from functions. rs=destatic", "tree": {"sha": "aa695c6ea7ffa0d19919584e9636b3f78b1f40ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa695c6ea7ffa0d19919584e9636b3f78b1f40ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4634f7edaefafa3e5ece93499e08992b4c8c7145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4634f7edaefafa3e5ece93499e08992b4c8c7145", "html_url": "https://github.com/rust-lang/rust/commit/4634f7edaefafa3e5ece93499e08992b4c8c7145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4634f7edaefafa3e5ece93499e08992b4c8c7145/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1616ffd0c2627502b1015b6388480ed7429ef042", "url": "https://api.github.com/repos/rust-lang/rust/commits/1616ffd0c2627502b1015b6388480ed7429ef042", "html_url": "https://github.com/rust-lang/rust/commit/1616ffd0c2627502b1015b6388480ed7429ef042"}], "stats": {"total": 567, "additions": 281, "deletions": 286}, "files": [{"sha": "388542c99343b827f6be6cc1f9462cb4353f119c", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -49,7 +49,7 @@ pub pure fn is_false(v: bool) -> bool { !v }\n \n /// Parse logic value from `s`\n impl FromStr for bool {\n-    static pure fn from_str(s: &str) -> Option<bool> {\n+    pure fn from_str(s: &str) -> Option<bool> {\n         if s == \"true\" {\n             Some(true)\n         } else if s == \"false\" {"}, {"sha": "ef3deb11a956445601520d5e6b7a76b2c68002bd", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -126,7 +126,7 @@ pub fn concat<T>(lists: @mut DList<@mut DList<T>>) -> @mut DList<T> {\n }\n \n priv impl<T> DList<T> {\n-    static pure fn new_link(data: T) -> DListLink<T> {\n+    pure fn new_link(data: T) -> DListLink<T> {\n         Some(@mut DListNode {\n             data: data,\n             linked: true,"}, {"sha": "f3577d66cff482e2ee557c4e29015a29f7fc1b3a", "filename": "src/libcore/from_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffrom_str.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -13,5 +13,5 @@\n use option::Option;\n \n pub trait FromStr {\n-    static pure fn from_str(s: &str) -> Option<Self>;\n+    pure fn from_str(s: &str) -> Option<Self>;\n }"}, {"sha": "0ca7c4b540dffc809d43eb85d5448f592d3e7162", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -373,7 +373,7 @@ pub mod linear {\n \n     pub impl<K:Hash + IterBytes + Eq,V> LinearMap<K, V> {\n         /// Create an empty LinearMap\n-        static fn new() -> LinearMap<K, V> {\n+        fn new() -> LinearMap<K, V> {\n             linear_map_with_capacity(INITIAL_CAPACITY)\n         }\n \n@@ -639,7 +639,7 @@ pub mod linear {\n \n     pub impl <T:Hash + IterBytes + Eq> LinearSet<T> {\n         /// Create an empty LinearSet\n-        static fn new() -> LinearSet<T> { LinearSet{map: LinearMap::new()} }\n+        fn new() -> LinearSet<T> { LinearSet{map: LinearMap::new()} }\n \n         /// Reserve space for at least `n` elements in the hash table.\n         fn reserve_at_least(&mut self, n: uint) {"}, {"sha": "2042584add78d364f704eeba6b635ec4c098de9a", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -89,8 +89,8 @@ pub trait Buildable<A> {\n      *             as an argument a function that will push an element\n      *             onto the sequence being constructed.\n      */\n-     static pure fn build_sized(size: uint,\n-                                builder: &fn(push: &pure fn(A))) -> Self;\n+     pure fn build_sized(size: uint,\n+                         builder: &fn(push: &pure fn(A))) -> Self;\n }\n \n #[inline(always)]"}, {"sha": "d7f0b4be621f806cfe66c4e61253ad446464cf6b", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -277,20 +277,20 @@ impl cmp::Ord for f32 {\n \n impl num::Zero for f32 {\n     #[inline(always)]\n-    static pure fn zero() -> f32 { 0.0 }\n+    pure fn zero() -> f32 { 0.0 }\n }\n \n impl num::One for f32 {\n     #[inline(always)]\n-    static pure fn one() -> f32 { 1.0 }\n+    pure fn one() -> f32 { 1.0 }\n }\n \n impl NumCast for f32 {\n     /**\n      * Cast `n` to an `f32`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> f32 { n.to_f32() }\n+    pure fn from<N:NumCast>(n: N) -> f32 { n.to_f32() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }\n@@ -568,12 +568,12 @@ pub pure fn from_str_radix(num: &str, rdx: uint) -> Option<f32> {\n \n impl from_str::FromStr for f32 {\n     #[inline(always)]\n-    static pure fn from_str(val: &str) -> Option<f32> { from_str(val) }\n+    pure fn from_str(val: &str) -> Option<f32> { from_str(val) }\n }\n \n impl num::FromStrRadix for f32 {\n     #[inline(always)]\n-    static pure fn from_str_radix(val: &str, rdx: uint) -> Option<f32> {\n+    pure fn from_str_radix(val: &str, rdx: uint) -> Option<f32> {\n         from_str_radix(val, rdx)\n     }\n }"}, {"sha": "7acb7ac462eaa2ea09cc244ab3143885e5bb8d74", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -304,7 +304,7 @@ impl NumCast for f64 {\n      * Cast `n` to an `f64`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> f64 { n.to_f64() }\n+    pure fn from<N:NumCast>(n: N) -> f64 { n.to_f64() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }\n@@ -325,12 +325,12 @@ impl NumCast for f64 {\n \n impl num::Zero for f64 {\n     #[inline(always)]\n-    static pure fn zero() -> f64 { 0.0 }\n+    pure fn zero() -> f64 { 0.0 }\n }\n \n impl num::One for f64 {\n     #[inline(always)]\n-    static pure fn one() -> f64 { 1.0 }\n+    pure fn one() -> f64 { 1.0 }\n }\n \n #[cfg(notest)]\n@@ -592,12 +592,12 @@ pub pure fn from_str_radix(num: &str, rdx: uint) -> Option<f64> {\n \n impl from_str::FromStr for f64 {\n     #[inline(always)]\n-    static pure fn from_str(val: &str) -> Option<f64> { from_str(val) }\n+    pure fn from_str(val: &str) -> Option<f64> { from_str(val) }\n }\n \n impl num::FromStrRadix for f64 {\n     #[inline(always)]\n-    static pure fn from_str_radix(val: &str, rdx: uint) -> Option<f64> {\n+    pure fn from_str_radix(val: &str, rdx: uint) -> Option<f64> {\n         from_str_radix(val, rdx)\n     }\n }"}, {"sha": "f1026ce6608afadd8d23dd7fc1606ec00977db5d", "filename": "src/libcore/num/float.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ffloat.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -304,12 +304,12 @@ pub pure fn from_str_radix(num: &str, radix: uint) -> Option<float> {\n \n impl from_str::FromStr for float {\n     #[inline(always)]\n-    static pure fn from_str(val: &str) -> Option<float> { from_str(val) }\n+    pure fn from_str(val: &str) -> Option<float> { from_str(val) }\n }\n \n impl num::FromStrRadix for float {\n     #[inline(always)]\n-    static pure fn from_str_radix(val: &str, radix: uint) -> Option<float> {\n+    pure fn from_str_radix(val: &str, radix: uint) -> Option<float> {\n         from_str_radix(val, radix)\n     }\n }\n@@ -408,20 +408,20 @@ impl Ord for float {\n \n impl num::Zero for float {\n     #[inline(always)]\n-    static pure fn zero() -> float { 0.0 }\n+    pure fn zero() -> float { 0.0 }\n }\n \n impl num::One for float {\n     #[inline(always)]\n-    static pure fn one() -> float { 1.0 }\n+    pure fn one() -> float { 1.0 }\n }\n \n impl NumCast for float {\n     /**\n      * Cast `n` to a `float`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> float { n.to_float() }\n+    pure fn from<N:NumCast>(n: N) -> float { n.to_float() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "599bd0f1c68bf8a87a2a77dba90f0994a085b162", "filename": "src/libcore/num/int-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -163,12 +163,12 @@ impl Eq for T {\n \n impl num::Zero for T {\n     #[inline(always)]\n-    static pure fn zero() -> T { 0 }\n+    pure fn zero() -> T { 0 }\n }\n \n impl num::One for T {\n     #[inline(always)]\n-    static pure fn one() -> T { 1 }\n+    pure fn one() -> T { 1 }\n }\n \n #[cfg(notest)]\n@@ -221,14 +221,14 @@ pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n \n impl FromStr for T {\n     #[inline(always)]\n-    static pure fn from_str(s: &str) -> Option<T> {\n+    pure fn from_str(s: &str) -> Option<T> {\n         from_str(s)\n     }\n }\n \n impl FromStrRadix for T {\n     #[inline(always)]\n-    static pure fn from_str_radix(&self, s: &str, radix: uint) -> Option<T> {\n+    pure fn from_str_radix(s: &str, radix: uint) -> Option<T> {\n         from_str_radix(s, radix)\n     }\n }"}, {"sha": "04bd205f53d52ee2616740cad3bc4ff9f3fa62ea", "filename": "src/libcore/num/int-template/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi16.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,7 +22,7 @@ impl NumCast for i16 {\n      * Cast `n` to a `i16`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> i16 { n.to_i16() }\n+    pure fn from<N:NumCast>(n: N) -> i16 { n.to_i16() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "1cdd93c411ea50ed269bd3da8ca3187507d2e815", "filename": "src/libcore/num/int-template/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi32.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,7 +22,7 @@ impl NumCast for i32 {\n      * Cast `n` to a `i32`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> i32 { n.to_i32() }\n+    pure fn from<N:NumCast>(n: N) -> i32 { n.to_i32() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "2a7c155f8b52580d0005a5bca9b6c1b459b1a7d6", "filename": "src/libcore/num/int-template/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi64.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,7 +22,7 @@ impl NumCast for i64 {\n      * Cast `n` to a `i64`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> i64 { n.to_i64() }\n+    pure fn from<N:NumCast>(n: N) -> i64 { n.to_i64() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "ac1dc76c26467a05dacbe5b72601f29e8e985b2c", "filename": "src/libcore/num/int-template/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fi8.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,7 +22,7 @@ impl NumCast for i8 {\n      * Cast `n` to a `i8`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> i8 { n.to_i8() }\n+    pure fn from<N:NumCast>(n: N) -> i8 { n.to_i8() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "0bd52491a630d23bec87aa56aa771951c0efe2cd", "filename": "src/libcore/num/int-template/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fint-template%2Fint.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -63,7 +63,7 @@ impl NumCast for int {\n      * Cast `n` to a `int`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> int { n.to_int() }\n+    pure fn from<N:NumCast>(n: N) -> int { n.to_int() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "fe829f6193b90a1985239005cf27f0fc13bbb537", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -18,15 +18,15 @@ pub mod strconv;\n \n pub trait IntConvertible {\n     pure fn to_int(&self) -> int;\n-    static pure fn from_int(n: int) -> Self;\n+    pure fn from_int(n: int) -> Self;\n }\n \n pub trait Zero {\n-    static pure fn zero() -> Self;\n+    pure fn zero() -> Self;\n }\n \n pub trait One {\n-    static pure fn one() -> Self;\n+    pure fn one() -> Self;\n }\n \n pub pure fn abs<T:Ord + Zero + Neg<T>>(v: T) -> T {\n@@ -67,7 +67,7 @@ pub pure fn cast<T:NumCast,U:NumCast>(n: T) -> U {\n  * An interface for generic numeric type casts\n  */\n pub trait NumCast {\n-    static pure fn from<T:NumCast>(n: T) -> Self;\n+    pure fn from<T:NumCast>(n: T) -> Self;\n \n     pure fn to_u8(&self) -> u8;\n     pure fn to_u16(&self) -> u16;\n@@ -91,7 +91,7 @@ pub trait ToStrRadix {\n }\n \n pub trait FromStrRadix {\n-    static pub pure fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n+    pub pure fn from_str_radix(str: &str, radix: uint) -> Option<Self>;\n }\n \n // Generic math functions:"}, {"sha": "0bf20f55b2fad33f7698b633e06f753f2b536b4e", "filename": "src/libcore/num/strconv.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fstrconv.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -66,10 +66,10 @@ pure fn is_neg_zero<T:Eq+One+Zero+NumStrConv+Div<T,T>>(num: &T) -> bool {\n }\n \n pub trait NumStrConv {\n-    static pure fn NaN()      -> Option<Self>;\n-    static pure fn inf()      -> Option<Self>;\n-    static pure fn neg_inf()  -> Option<Self>;\n-    static pure fn neg_zero() -> Option<Self>;\n+    pure fn NaN()      -> Option<Self>;\n+    pure fn inf()      -> Option<Self>;\n+    pure fn neg_inf()  -> Option<Self>;\n+    pure fn neg_zero() -> Option<Self>;\n \n     pure fn round_to_zero(&self)   -> Self;\n     pure fn fractional_part(&self) -> Self;\n@@ -78,13 +78,13 @@ pub trait NumStrConv {\n macro_rules! impl_NumStrConv_Floating (($t:ty) => (\n     impl NumStrConv for $t {\n         #[inline(always)]\n-        static pure fn NaN()      -> Option<$t> { Some( 0.0 / 0.0) }\n+        pure fn NaN()      -> Option<$t> { Some( 0.0 / 0.0) }\n         #[inline(always)]\n-        static pure fn inf()      -> Option<$t> { Some( 1.0 / 0.0) }\n+        pure fn inf()      -> Option<$t> { Some( 1.0 / 0.0) }\n         #[inline(always)]\n-        static pure fn neg_inf()  -> Option<$t> { Some(-1.0 / 0.0) }\n+        pure fn neg_inf()  -> Option<$t> { Some(-1.0 / 0.0) }\n         #[inline(always)]\n-        static pure fn neg_zero() -> Option<$t> { Some(-0.0      ) }\n+        pure fn neg_zero() -> Option<$t> { Some(-0.0      ) }\n \n         #[inline(always)]\n         pure fn round_to_zero(&self) -> $t {\n@@ -102,10 +102,10 @@ macro_rules! impl_NumStrConv_Floating (($t:ty) => (\n \n macro_rules! impl_NumStrConv_Integer (($t:ty) => (\n     impl NumStrConv for $t {\n-        #[inline(always)] static pure fn NaN()      -> Option<$t> { None }\n-        #[inline(always)] static pure fn inf()      -> Option<$t> { None }\n-        #[inline(always)] static pure fn neg_inf()  -> Option<$t> { None }\n-        #[inline(always)] static pure fn neg_zero() -> Option<$t> { None }\n+        #[inline(always)] pure fn NaN()      -> Option<$t> { None }\n+        #[inline(always)] pure fn inf()      -> Option<$t> { None }\n+        #[inline(always)] pure fn neg_inf()  -> Option<$t> { None }\n+        #[inline(always)] pure fn neg_zero() -> Option<$t> { None }\n \n         #[inline(always)] pure fn round_to_zero(&self)   -> $t { *self }\n         #[inline(always)] pure fn fractional_part(&self) -> $t {     0 }"}, {"sha": "1e56c37bab06dd8045fb59b36598843f096357af", "filename": "src/libcore/num/uint-template.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -129,12 +129,12 @@ impl Eq for T {\n \n impl num::Zero for T {\n     #[inline(always)]\n-    static pure fn zero() -> T { 0 }\n+    pure fn zero() -> T { 0 }\n }\n \n impl num::One for T {\n     #[inline(always)]\n-    static pure fn one() -> T { 1 }\n+    pure fn one() -> T { 1 }\n }\n \n #[cfg(notest)]\n@@ -187,14 +187,14 @@ pub pure fn parse_bytes(buf: &[u8], radix: uint) -> Option<T> {\n \n impl FromStr for T {\n     #[inline(always)]\n-    static pure fn from_str(s: &str) -> Option<T> {\n+    pure fn from_str(s: &str) -> Option<T> {\n         from_str(s)\n     }\n }\n \n impl FromStrRadix for T {\n     #[inline(always)]\n-    static pure fn from_str_radix(&self, s: &str, radix: uint) -> Option<T> {\n+    pure fn from_str_radix(s: &str, radix: uint) -> Option<T> {\n         from_str_radix(s, radix)\n     }\n }"}, {"sha": "84406d5ed49d509b0d9346ebb5844f8cc28716af", "filename": "src/libcore/num/uint-template/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu16.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -24,7 +24,7 @@ impl NumCast for u16 {\n      * Cast `n` to a `u16`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> u16 { n.to_u16() }\n+    pure fn from<N:NumCast>(n: N) -> u16 { n.to_u16() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self          }"}, {"sha": "94d2c9b75f13c41bdb851adcc1532e9fc300050a", "filename": "src/libcore/num/uint-template/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu32.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -24,7 +24,7 @@ impl NumCast for u32 {\n      * Cast `n` to a `u32`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> u32 { n.to_u32() }\n+    pure fn from<N:NumCast>(n: N) -> u32 { n.to_u32() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "06d2efeeda7bc69f2d716f2769dd38c5b68df4f8", "filename": "src/libcore/num/uint-template/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu64.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -24,7 +24,7 @@ impl NumCast for u64 {\n      * Cast `n` to a `u64`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> u64 { n.to_u64() }\n+    pure fn from<N:NumCast>(n: N) -> u64 { n.to_u64() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "31cb21473a80e918962461c2755d49af85d2da26", "filename": "src/libcore/num/uint-template/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fu8.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -31,7 +31,7 @@ impl NumCast for u8 {\n      * Cast `n` to a `u8`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> u8 { n.to_u8() }\n+    pure fn from<N:NumCast>(n: N) -> u8 { n.to_u8() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self          }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "3b17f4f5327481b222368e8862bf6a4216d59050", "filename": "src/libcore/num/uint-template/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fuint-template%2Fuint.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -215,7 +215,7 @@ impl NumCast for uint {\n      * Cast `n` to a `uint`\n      */\n     #[inline(always)]\n-    static pure fn from<N:NumCast>(n: N) -> uint { n.to_uint() }\n+    pure fn from<N:NumCast>(n: N) -> uint { n.to_uint() }\n \n     #[inline(always)] pure fn to_u8(&self)    -> u8    { *self as u8    }\n     #[inline(always)] pure fn to_u16(&self)   -> u16   { *self as u16   }"}, {"sha": "7189ecaaddadbd29aad356cbb27590c97eb7e927", "filename": "src/libcore/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -43,7 +43,7 @@ pub pure fn PosixPath(s: &str) -> PosixPath {\n }\n \n pub trait GenericPath {\n-    static pure fn from_str(&str) -> Self;\n+    pure fn from_str(&str) -> Self;\n \n     pure fn dirname(&self) -> ~str;\n     pure fn filename(&self) -> Option<~str>;\n@@ -380,7 +380,7 @@ impl ToStr for PosixPath {\n // PosixPath and WindowsPath, most of their methods are common.\n impl GenericPath for PosixPath {\n \n-    static pure fn from_str(s: &str) -> PosixPath {\n+    pure fn from_str(s: &str) -> PosixPath {\n         let mut components = str::split_nonempty(s, |c| c == '/');\n         let is_absolute = (s.len() != 0 && s[0] == '/' as u8);\n         return PosixPath { is_absolute: is_absolute,\n@@ -563,7 +563,7 @@ impl ToStr for WindowsPath {\n \n impl GenericPath for WindowsPath {\n \n-    static pure fn from_str(s: &str) -> WindowsPath {\n+    pure fn from_str(s: &str) -> WindowsPath {\n         let host;\n         let device;\n         let rest;"}, {"sha": "6902cd4ef6971014334b6fcc68325ef905860e33", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,95 +22,95 @@ use libc::size_t;\n \n /// A type that can be randomly generated using an RNG\n pub trait Rand {\n-    static fn rand(rng: @rand::Rng) -> Self;\n+    fn rand(rng: @rand::Rng) -> Self;\n }\n \n impl Rand for int {\n-    static fn rand(rng: @rand::Rng) -> int {\n+    fn rand(rng: @rand::Rng) -> int {\n         rng.gen_int()\n     }\n }\n \n impl Rand for i8 {\n-    static fn rand(rng: @rand::Rng) -> i8 {\n+    fn rand(rng: @rand::Rng) -> i8 {\n         rng.gen_i8()\n     }\n }\n \n impl Rand for i16 {\n-    static fn rand(rng: @rand::Rng) -> i16 {\n+    fn rand(rng: @rand::Rng) -> i16 {\n         rng.gen_i16()\n     }\n }\n \n impl Rand for i32 {\n-    static fn rand(rng: @rand::Rng) -> i32 {\n+    fn rand(rng: @rand::Rng) -> i32 {\n         rng.gen_i32()\n     }\n }\n \n impl Rand for i64 {\n-    static fn rand(rng: @rand::Rng) -> i64 {\n+    fn rand(rng: @rand::Rng) -> i64 {\n         rng.gen_i64()\n     }\n }\n \n impl Rand for u8 {\n-    static fn rand(rng: @rand::Rng) -> u8 {\n+    fn rand(rng: @rand::Rng) -> u8 {\n         rng.gen_u8()\n     }\n }\n \n impl Rand for u16 {\n-    static fn rand(rng: @rand::Rng) -> u16 {\n+    fn rand(rng: @rand::Rng) -> u16 {\n         rng.gen_u16()\n     }\n }\n \n impl Rand for u32 {\n-    static fn rand(rng: @rand::Rng) -> u32 {\n+    fn rand(rng: @rand::Rng) -> u32 {\n         rng.gen_u32()\n     }\n }\n \n impl Rand for u64 {\n-    static fn rand(rng: @rand::Rng) -> u64 {\n+    fn rand(rng: @rand::Rng) -> u64 {\n         rng.gen_u64()\n     }\n }\n \n impl Rand for float {\n-    static fn rand(rng: @rand::Rng) -> float {\n+    fn rand(rng: @rand::Rng) -> float {\n         rng.gen_float()\n     }\n }\n \n impl Rand for f32 {\n-    static fn rand(rng: @rand::Rng) -> f32 {\n+    fn rand(rng: @rand::Rng) -> f32 {\n         rng.gen_f32()\n     }\n }\n \n impl Rand for f64 {\n-    static fn rand(rng: @rand::Rng) -> f64 {\n+    fn rand(rng: @rand::Rng) -> f64 {\n         rng.gen_f64()\n     }\n }\n \n impl Rand for char {\n-    static fn rand(rng: @rand::Rng) -> char {\n+    fn rand(rng: @rand::Rng) -> char {\n         rng.gen_char()\n     }\n }\n \n impl Rand for bool {\n-    static fn rand(rng: @rand::Rng) -> bool {\n+    fn rand(rng: @rand::Rng) -> bool {\n         rng.gen_bool()\n     }\n }\n \n impl<T:Rand> Rand for Option<T> {\n-    static fn rand(rng: @rand::Rng) -> Option<T> {\n+    fn rand(rng: @rand::Rng) -> Option<T> {\n         if rng.gen_bool() {\n             Some(Rand::rand(rng))\n         } else {"}, {"sha": "8da80f7a4e8ce6d3e452c938d95825ab77434c48", "filename": "src/libcore/rt/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fcontext.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -19,14 +19,14 @@ use cast::{transmute, transmute_mut_unsafe,\n pub struct Context(~Registers);\n \n pub impl Context {\n-    static fn empty() -> Context {\n+    fn empty() -> Context {\n         Context(new_regs())\n     }\n \n     /// Create a new context that will resume execution by running ~fn()\n     /// # Safety Note\n     /// The `start` closure must remain valid for the life of the Task\n-    static fn new(start: &~fn(), stack: &mut StackSegment) -> Context {\n+    fn new(start: &~fn(), stack: &mut StackSegment) -> Context {\n \n         // The C-ABI function that is the task entry point\n         extern fn task_start_wrapper(f: &~fn()) { (*f)() }\n@@ -49,7 +49,7 @@ pub impl Context {\n         return Context(regs);\n     }\n \n-    static fn swap(out_context: &mut Context, in_context: &Context) {\n+    fn swap(out_context: &mut Context, in_context: &Context) {\n         let out_regs: &mut Registers = match out_context {\n             &Context(~ref mut r) => r\n         };"}, {"sha": "4a140458fd341911b85826330fec50319879a082", "filename": "src/libcore/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fsched.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -50,11 +50,11 @@ pub struct Scheduler {\n // complaining\n type UnsafeTaskReceiver = sys::Closure;\n trait HackAroundBorrowCk {\n-    static fn from_fn(&fn(&mut Scheduler, ~Task)) -> Self;\n+    fn from_fn(&fn(&mut Scheduler, ~Task)) -> Self;\n     fn to_fn(self) -> &fn(&mut Scheduler, ~Task);\n }\n impl HackAroundBorrowCk for UnsafeTaskReceiver {\n-    static fn from_fn(f: &fn(&mut Scheduler, ~Task)) -> UnsafeTaskReceiver {\n+    fn from_fn(f: &fn(&mut Scheduler, ~Task)) -> UnsafeTaskReceiver {\n         unsafe { transmute(f) }\n     }\n     fn to_fn(self) -> &fn(&mut Scheduler, ~Task) {\n@@ -70,7 +70,7 @@ enum CleanupJob {\n \n pub impl Scheduler {\n \n-    static pub fn new(event_loop: ~EventLoopObject) -> Scheduler {\n+    pub fn new(event_loop: ~EventLoopObject) -> Scheduler {\n         Scheduler {\n             event_loop: event_loop,\n             task_queue: WorkQueue::new(),\n@@ -114,7 +114,7 @@ pub impl Scheduler {\n         return tlsched.take_scheduler();\n     }\n \n-    static fn local(f: &fn(&mut Scheduler)) {\n+    fn local(f: &fn(&mut Scheduler)) {\n         let mut tlsched = ThreadLocalScheduler::new();\n         f(tlsched.get_scheduler());\n     }\n@@ -296,7 +296,7 @@ pub struct Task {\n }\n \n impl Task {\n-    static pub fn new(stack_pool: &mut StackPool, start: ~fn()) -> Task {\n+    pub fn new(stack_pool: &mut StackPool, start: ~fn()) -> Task {\n         // XXX: Putting main into a ~ so it's a thin pointer and can\n         // be passed to the spawn function.  Another unfortunate\n         // allocation\n@@ -337,7 +337,7 @@ impl Task {\n struct ThreadLocalScheduler(tls::Key);\n \n impl ThreadLocalScheduler {\n-    static fn new() -> ThreadLocalScheduler {\n+    fn new() -> ThreadLocalScheduler {\n         unsafe {\n             // NB: This assumes that the TLS key has been created prior.\n             // Currently done in rust_start."}, {"sha": "9b164eb08fa7c8437420b70da892387ef323d46b", "filename": "src/libcore/rt/stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fstack.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -15,7 +15,7 @@ pub struct StackSegment {\n }\n \n pub impl StackSegment {\n-    static fn new(size: uint) -> StackSegment {\n+    fn new(size: uint) -> StackSegment {\n         // Crate a block of uninitialized values\n         let mut stack = vec::with_capacity(size);\n         unsafe {\n@@ -37,7 +37,7 @@ pub impl StackSegment {\n pub struct StackPool(());\n \n impl StackPool {\n-    static pub fn new() -> StackPool { StackPool(()) }\n+    pub fn new() -> StackPool { StackPool(()) }\n \n     fn take_segment(&self, min_size: uint) -> StackSegment {\n         StackSegment::new(min_size)"}, {"sha": "c45e4295ab144d5209d02c5a96cd3f8d844f02ad", "filename": "src/libcore/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fthread.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -20,7 +20,7 @@ struct Thread {\n }\n \n impl Thread {\n-    static pub fn start(main: ~fn()) -> Thread {\n+    pub fn start(main: ~fn()) -> Thread {\n         fn substart(main: &fn()) -> *raw_thread {\n             unsafe { rust_raw_thread_start(&main) }\n         }"}, {"sha": "251f2a4a12b1546aa2594de9f9cd48d4dd0a4883", "filename": "src/libcore/rt/uv.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -74,7 +74,7 @@ impl Callback for NullCallback { }\n \n /// A type that wraps a native handle\n trait NativeHandle<T> {\n-    static pub fn from_native_handle(T) -> Self;\n+    pub fn from_native_handle(T) -> Self;\n     pub fn native_handle(&self) -> T;\n }\n \n@@ -86,7 +86,7 @@ pub struct Loop {\n }\n \n pub impl Loop {\n-    static fn new() -> Loop {\n+    fn new() -> Loop {\n         let handle = unsafe { uvll::loop_new() };\n         fail_unless!(handle.is_not_null());\n         NativeHandle::from_native_handle(handle)\n@@ -102,7 +102,7 @@ pub impl Loop {\n }\n \n impl NativeHandle<*uvll::uv_loop_t> for Loop {\n-    static fn from_native_handle(handle: *uvll::uv_loop_t) -> Loop {\n+    fn from_native_handle(handle: *uvll::uv_loop_t) -> Loop {\n         Loop { handle: handle }\n     }\n     fn native_handle(&self) -> *uvll::uv_loop_t {\n@@ -132,7 +132,7 @@ type IdleCallback = ~fn(IdleWatcher, Option<UvError>);\n impl Callback for IdleCallback { }\n \n pub impl IdleWatcher {\n-    static fn new(loop_: &mut Loop) -> IdleWatcher {\n+    fn new(loop_: &mut Loop) -> IdleWatcher {\n         unsafe {\n             let handle = uvll::idle_new();\n             fail_unless!(handle.is_not_null());\n@@ -177,7 +177,7 @@ pub impl IdleWatcher {\n }\n \n impl NativeHandle<*uvll::uv_idle_t> for IdleWatcher {\n-    static fn from_native_handle(handle: *uvll::uv_idle_t) -> IdleWatcher {\n+    fn from_native_handle(handle: *uvll::uv_idle_t) -> IdleWatcher {\n         IdleWatcher(handle)\n     }\n     fn native_handle(&self) -> *uvll::uv_idle_t {\n@@ -307,7 +307,7 @@ pub impl StreamWatcher {\n }\n \n impl NativeHandle<*uvll::uv_stream_t> for StreamWatcher {\n-    static fn from_native_handle(\n+    fn from_native_handle(\n         handle: *uvll::uv_stream_t) -> StreamWatcher {\n         StreamWatcher(handle)\n     }\n@@ -328,7 +328,7 @@ type ConnectionCallback = ~fn(StreamWatcher, Option<UvError>);\n impl Callback for ConnectionCallback { }\n \n pub impl TcpWatcher {\n-    static fn new(loop_: &mut Loop) -> TcpWatcher {\n+    fn new(loop_: &mut Loop) -> TcpWatcher {\n         unsafe {\n             let size = size_of::<uvll::uv_tcp_t>() as size_t;\n             let handle = malloc(size) as *uvll::uv_tcp_t;\n@@ -421,7 +421,7 @@ pub impl TcpWatcher {\n }\n \n impl NativeHandle<*uvll::uv_tcp_t> for TcpWatcher {\n-    static fn from_native_handle(handle: *uvll::uv_tcp_t) -> TcpWatcher {\n+    fn from_native_handle(handle: *uvll::uv_tcp_t) -> TcpWatcher {\n         TcpWatcher(handle)\n     }\n     fn native_handle(&self) -> *uvll::uv_tcp_t {\n@@ -441,7 +441,7 @@ impl Request for ConnectRequest { }\n \n impl ConnectRequest {\n \n-    static fn new() -> ConnectRequest {\n+    fn new() -> ConnectRequest {\n         let connect_handle = unsafe {\n             malloc(size_of::<uvll::uv_connect_t>() as size_t)\n         };\n@@ -465,7 +465,7 @@ impl ConnectRequest {\n }\n \n impl NativeHandle<*uvll::uv_connect_t> for ConnectRequest {\n-    static fn from_native_handle(\n+    fn from_native_handle(\n         handle: *uvll:: uv_connect_t) -> ConnectRequest {\n         ConnectRequest(handle)\n     }\n@@ -480,7 +480,7 @@ impl Request for WriteRequest { }\n \n impl WriteRequest {\n \n-    static fn new() -> WriteRequest {\n+    fn new() -> WriteRequest {\n         let write_handle = unsafe {\n             malloc(size_of::<uvll::uv_write_t>() as size_t)\n         };\n@@ -503,7 +503,7 @@ impl WriteRequest {\n }\n \n impl NativeHandle<*uvll::uv_write_t> for WriteRequest {\n-    static fn from_native_handle(handle: *uvll:: uv_write_t) -> WriteRequest {\n+    fn from_native_handle(handle: *uvll:: uv_write_t) -> WriteRequest {\n         WriteRequest(handle)\n     }\n     fn native_handle(&self) -> *uvll::uv_write_t {"}, {"sha": "58a4a65ca90c4768a6dcf04c3b7c9e228d49e6e1", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -29,14 +29,14 @@ pub struct UvEventLoop {\n }\n \n pub impl UvEventLoop {\n-    static fn new() -> UvEventLoop {\n+    fn new() -> UvEventLoop {\n         UvEventLoop {\n             uvio: UvIoFactory(Loop::new())\n         }\n     }\n \n     /// A convenience constructor\n-    static fn new_scheduler() -> Scheduler {\n+    fn new_scheduler() -> Scheduler {\n         Scheduler::new(~UvEventLoop::new())\n     }\n }\n@@ -221,7 +221,7 @@ impl TcpListener for UvTcpListener {\n pub struct UvStream(StreamWatcher);\n \n impl UvStream {\n-    static fn new(watcher: StreamWatcher) -> UvStream {\n+    fn new(watcher: StreamWatcher) -> UvStream {\n         UvStream(watcher)\n     }\n "}, {"sha": "dfa88b783c59f7647e2fda7d15f224fe094eb04b", "filename": "src/libcore/rt/work_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fwork_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Frt%2Fwork_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fwork_queue.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -15,7 +15,7 @@ pub struct WorkQueue<T> {\n }\n \n pub impl<T> WorkQueue<T> {\n-    static fn new() -> WorkQueue<T> {\n+    fn new() -> WorkQueue<T> {\n         WorkQueue {\n             queue: ~[]\n         }"}, {"sha": "7afe7e0d3d4ecaf55ab8cb3067780844140e3a1e", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -139,7 +139,7 @@ impl<T> Map<uint, T> for TrieMap<T> {\n pub impl<T> TrieMap<T> {\n     /// Create an empty TrieMap\n     #[inline(always)]\n-    static pure fn new() -> TrieMap<T> {\n+    pure fn new() -> TrieMap<T> {\n         TrieMap{root: TrieNode::new(), length: 0}\n     }\n \n@@ -192,7 +192,7 @@ impl Mutable for TrieSet {\n impl TrieSet {\n     /// Create an empty TrieSet\n     #[inline(always)]\n-    static pure fn new() -> TrieSet {\n+    pure fn new() -> TrieSet {\n         TrieSet{map: TrieMap::new()}\n     }\n \n@@ -220,7 +220,7 @@ struct TrieNode<T> {\n \n impl<T> TrieNode<T> {\n     #[inline(always)]\n-    static pure fn new() -> TrieNode<T> {\n+    pure fn new() -> TrieNode<T> {\n         // FIXME: #5244: [Nothing, ..SIZE] should be possible without Copy\n         TrieNode{count: 0,\n                  children: [Nothing, Nothing, Nothing, Nothing,"}, {"sha": "766dd1a37a05e2b8bc38921df2e2d87b122f929b", "filename": "src/libcore/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibcore%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funstable%2Fextfmt.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -140,7 +140,7 @@ pub mod ct {\n     }\n \n     pub impl<T> Parsed<T> {\n-        static pure fn new(&self, val: T, next: uint) -> Parsed<T> {\n+        pure fn new(val: T, next: uint) -> Parsed<T> {\n             Parsed {val: val, next: next}\n         }\n     }"}, {"sha": "c319ca891052f434e5da215cf7b6b1e1172911db", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -82,7 +82,7 @@ pub struct LanguageItems {\n }\n \n pub impl LanguageItems {\n-    static pub fn new(&self) -> LanguageItems {\n+    pub fn new() -> LanguageItems {\n         LanguageItems {\n             items: [ None, ..35 ]\n         }\n@@ -96,7 +96,7 @@ pub impl LanguageItems {\n         }\n     }\n \n-    static pub fn item_name(&self, index: uint) -> &'static str {\n+    pub fn item_name(index: uint) -> &'static str {\n         match index {\n             0  => \"const\",\n             1  => \"copy\","}, {"sha": "f380773ec116b32b4a70a8e201d7208a8502e795", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -311,7 +311,7 @@ impl ToStr for MutabilityCategory {\n }\n \n pub impl MutabilityCategory {\n-    static fn from_mutbl(&self, m: ast::mutability) -> MutabilityCategory {\n+    fn from_mutbl(m: ast::mutability) -> MutabilityCategory {\n         match m {\n             m_imm => McImmutable,\n             m_const => McReadOnly,"}, {"sha": "ce6f6c8efa702ae61e0e904ece05dbdd016b3008", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -282,7 +282,7 @@ pub fn trans_static_method_callee(bcx: block,\n     // When we translate a static fn defined in a trait like:\n     //\n     //   trait<T1...Tn> Trait {\n-    //       static fn foo<M1...Mn>(...) {...}\n+    //       fn foo<M1...Mn>(...) {...}\n     //   }\n     //\n     // this winds up being translated as something like:"}, {"sha": "3d919b90b77233e1d44484ef5fc70479797667aa", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -1720,7 +1720,7 @@ pub impl TypeContents {\n         !self.intersects(TypeContents::noncopyable(cx))\n     }\n \n-    static fn noncopyable(_cx: ctxt) -> TypeContents {\n+    fn noncopyable(_cx: ctxt) -> TypeContents {\n         TC_DTOR + TC_BORROWED_MUT + TC_ONCE_CLOSURE + TC_OWNED_CLOSURE +\n             TC_EMPTY_ENUM\n     }\n@@ -1729,15 +1729,15 @@ pub impl TypeContents {\n         !self.intersects(TypeContents::nondurable(cx))\n     }\n \n-    static fn nondurable(_cx: ctxt) -> TypeContents {\n+    fn nondurable(_cx: ctxt) -> TypeContents {\n         TC_BORROWED_POINTER\n     }\n \n     fn is_owned(&self, cx: ctxt) -> bool {\n         !self.intersects(TypeContents::nonowned(cx))\n     }\n \n-    static fn nonowned(_cx: ctxt) -> TypeContents {\n+    fn nonowned(_cx: ctxt) -> TypeContents {\n         TC_MANAGED + TC_BORROWED_POINTER\n     }\n \n@@ -1749,15 +1749,15 @@ pub impl TypeContents {\n         !self.intersects(TypeContents::nonconst(cx))\n     }\n \n-    static fn nonconst(_cx: ctxt) -> TypeContents {\n+    fn nonconst(_cx: ctxt) -> TypeContents {\n         TC_MUTABLE\n     }\n \n     fn moves_by_default(&self, cx: ctxt) -> bool {\n         self.intersects(TypeContents::nonimplicitly_copyable(cx))\n     }\n \n-    static fn nonimplicitly_copyable(cx: ctxt) -> TypeContents {\n+    fn nonimplicitly_copyable(cx: ctxt) -> TypeContents {\n         let base = TypeContents::noncopyable(cx) + TC_OWNED_POINTER;\n         if cx.vecs_implicitly_copyable {base} else {base + TC_OWNED_VEC}\n     }\n@@ -1766,7 +1766,7 @@ pub impl TypeContents {\n         !self.intersects(TypeContents::nondefault_mode(cx))\n     }\n \n-    static fn nondefault_mode(cx: ctxt) -> TypeContents {\n+    fn nondefault_mode(cx: ctxt) -> TypeContents {\n         let tc = TypeContents::nonimplicitly_copyable(cx);\n         tc + TC_BIG + TC_OWNED_VEC // disregard cx.vecs_implicitly_copyable\n     }\n@@ -1776,7 +1776,7 @@ pub impl TypeContents {\n         self.intersects(tc)\n     }\n \n-    static fn owned(&self, _cx: ctxt) -> TypeContents {\n+    fn owned(_cx: ctxt) -> TypeContents {\n         //! Any kind of owned contents.\n         TC_OWNED_CLOSURE + TC_OWNED_POINTER + TC_OWNED_VEC\n     }"}, {"sha": "a83d6f1755ecca254fac682df37196731e9b380d", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -51,27 +51,23 @@ use util::common::indenter;\n use std::list;\n \n pub trait LatticeValue {\n-    static fn sub(&self, cf: &CombineFields, a: &Self, b: &Self) -> ures;\n-    static fn lub(&self, cf: &CombineFields, a: &Self, b: &Self)\n-                 -> cres<Self>;\n-    static fn glb(&self, cf: &CombineFields, a: &Self, b: &Self)\n-                 -> cres<Self>;\n+    fn sub(cf: &CombineFields, a: &Self, b: &Self) -> ures;\n+    fn lub(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;\n+    fn glb(cf: &CombineFields, a: &Self, b: &Self) -> cres<Self>;\n }\n \n pub type LatticeOp<T> = &'self fn(cf: &CombineFields, a: &T, b: &T) -> cres<T>;\n \n impl LatticeValue for ty::t {\n-    static fn sub(&self, cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n+    fn sub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> ures {\n         Sub(*cf).tys(*a, *b).to_ures()\n     }\n \n-    static fn lub(&self, cf: &CombineFields, a: &ty::t, b: &ty::t)\n-                 -> cres<ty::t> {\n+    fn lub(cf: &CombineFields, a: &ty::t, b: &ty::t) -> cres<ty::t> {\n         Lub(*cf).tys(*a, *b)\n     }\n \n-    static fn glb(&self, cf: &CombineFields, a: &ty::t, b: &ty::t)\n-                 -> cres<ty::t> {\n+    fn glb(cf: &CombineFields, a: &ty::t, b: &ty::t) -> cres<ty::t> {\n         Glb(*cf).tys(*a, *b)\n     }\n }"}, {"sha": "7711794d91db514a0dd29fe05ea21a16005206d9", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -35,8 +35,8 @@ pub struct Node<V, T> {\n }\n \n pub trait UnifyVid<T> {\n-    static fn appropriate_vals_and_bindings(&self, infcx: &'v mut InferCtxt)\n-        -> &'v mut ValsAndBindings<Self, T>;\n+    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n+                                  -> &'v mut ValsAndBindings<Self, T>;\n }\n \n pub impl InferCtxt {\n@@ -144,7 +144,7 @@ pub impl InferCtxt {\n // doesn't have a subtyping relationship we need to worry about.\n \n pub trait SimplyUnifiable {\n-    static fn to_type_err(&self, expected_found<Self>) -> ty::type_err;\n+    fn to_type_err(expected_found<Self>) -> ty::type_err;\n }\n \n pub fn mk_err<T:SimplyUnifiable>(+a_is_expected: bool,\n@@ -235,36 +235,34 @@ pub impl InferCtxt {\n // ______________________________________________________________________\n \n impl UnifyVid<Bounds<ty::t>> for ty::TyVid {\n-    static fn appropriate_vals_and_bindings(&self, infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::TyVid, Bounds<ty::t>> {\n         return &mut infcx.ty_var_bindings;\n     }\n }\n \n impl UnifyVid<Option<IntVarValue>> for ty::IntVid {\n-    static fn appropriate_vals_and_bindings(&self, infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::IntVid, Option<IntVarValue>> {\n         return &mut infcx.int_var_bindings;\n     }\n }\n \n impl SimplyUnifiable for IntVarValue {\n-    static fn to_type_err(&self, err: expected_found<IntVarValue>)\n-        -> ty::type_err {\n+    fn to_type_err(err: expected_found<IntVarValue>) -> ty::type_err {\n         return ty::terr_int_mismatch(err);\n     }\n }\n \n impl UnifyVid<Option<ast::float_ty>> for ty::FloatVid {\n-    static fn appropriate_vals_and_bindings(&self, infcx: &'v mut InferCtxt)\n+    fn appropriate_vals_and_bindings(infcx: &'v mut InferCtxt)\n         -> &'v mut ValsAndBindings<ty::FloatVid, Option<ast::float_ty>> {\n         return &mut infcx.float_var_bindings;\n     }\n }\n \n impl SimplyUnifiable for ast::float_ty {\n-    static fn to_type_err(&self, err: expected_found<ast::float_ty>)\n-        -> ty::type_err {\n+    fn to_type_err(err: expected_found<ast::float_ty>) -> ty::type_err {\n         return ty::terr_float_mismatch(err);\n     }\n }"}, {"sha": "daf5d492ccfc9be48acf44bfb4e5bab7ee099749", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -94,7 +94,7 @@ impl ToStr for BigUint {\n }\n \n impl from_str::FromStr for BigUint {\n-    static pure fn from_str(s: &str) -> Option<BigUint> {\n+    pure fn from_str(s: &str) -> Option<BigUint> {\n         BigUint::from_str_radix(s, 10)\n     }\n }\n@@ -116,11 +116,11 @@ impl Shr<uint, BigUint> for BigUint {\n }\n \n impl Zero for BigUint {\n-    static pure fn zero() -> BigUint { BigUint::new(~[]) }\n+    pure fn zero() -> BigUint { BigUint::new(~[]) }\n }\n \n impl One for BigUint {\n-    static pub pure fn one() -> BigUint { BigUint::new(~[1]) }\n+    pub pure fn one() -> BigUint { BigUint::new(~[1]) }\n }\n \n impl Add<BigUint, BigUint> for BigUint {\n@@ -256,14 +256,14 @@ impl IntConvertible for BigUint {\n         uint::min(self.to_uint(), int::max_value as uint) as int\n     }\n \n-    static pure fn from_int(n: int) -> BigUint {\n+    pure fn from_int(n: int) -> BigUint {\n         if (n < 0) { Zero::zero() } else { BigUint::from_uint(n as uint) }\n     }\n }\n \n pub impl BigUint {\n     /// Creates and initializes an BigUint.\n-    static pub pure fn new(v: ~[BigDigit]) -> BigUint {\n+    pub pure fn new(v: ~[BigDigit]) -> BigUint {\n         // omit trailing zeros\n         let new_len = v.rposition(|n| *n != 0).map_default(0, |p| *p + 1);\n \n@@ -274,7 +274,7 @@ pub impl BigUint {\n     }\n \n     /// Creates and initializes an BigUint.\n-    static pub pure fn from_uint(n: uint) -> BigUint {\n+    pub pure fn from_uint(n: uint) -> BigUint {\n         match BigDigit::from_uint(n) {\n             (0,  0)  => Zero::zero(),\n             (0,  n0) => BigUint::new(~[n0]),\n@@ -283,18 +283,18 @@ pub impl BigUint {\n     }\n \n     /// Creates and initializes an BigUint.\n-    static pub pure fn from_slice(slice: &[BigDigit]) -> BigUint {\n+    pub pure fn from_slice(slice: &[BigDigit]) -> BigUint {\n         return BigUint::new(vec::from_slice(slice));\n     }\n \n     /// Creates and initializes an BigUint.\n-    static pub pure fn from_str_radix(s: &str, radix: uint)\n+    pub pure fn from_str_radix(s: &str, radix: uint)\n         -> Option<BigUint> {\n         BigUint::parse_bytes(str::to_bytes(s), radix)\n     }\n \n     /// Creates and initializes an BigUint.\n-    static pub pure fn parse_bytes(buf: &[u8], radix: uint)\n+    pub pure fn parse_bytes(buf: &[u8], radix: uint)\n         -> Option<BigUint> {\n         let (base, unit_len) = get_radix_base(radix);\n         let base_num: BigUint = BigUint::from_uint(base);\n@@ -614,7 +614,7 @@ impl ToStr for BigInt {\n }\n \n impl from_str::FromStr for BigInt {\n-    static pure fn from_str(s: &str) -> Option<BigInt> {\n+    pure fn from_str(s: &str) -> Option<BigInt> {\n         BigInt::from_str_radix(s, 10)\n     }\n }\n@@ -632,13 +632,13 @@ impl Shr<uint, BigInt> for BigInt {\n }\n \n impl Zero for BigInt {\n-    static pub pure fn zero() -> BigInt {\n+    pub pure fn zero() -> BigInt {\n         BigInt::from_biguint(Zero, Zero::zero())\n     }\n }\n \n impl One for BigInt {\n-    static pub pure fn one() -> BigInt {\n+    pub pure fn one() -> BigInt {\n         BigInt::from_biguint(Plus, One::one())\n     }\n }\n@@ -721,7 +721,7 @@ impl IntConvertible for BigInt {\n         }\n     }\n \n-    static pure fn from_int(n: int) -> BigInt {\n+    pure fn from_int(n: int) -> BigInt {\n         if n > 0 {\n            return BigInt::from_biguint(Plus,  BigUint::from_uint(n as uint));\n         }\n@@ -736,37 +736,37 @@ impl IntConvertible for BigInt {\n \n pub impl BigInt {\n     /// Creates and initializes an BigInt.\n-    static pub pure fn new(sign: Sign, v: ~[BigDigit]) -> BigInt {\n+    pub pure fn new(sign: Sign, v: ~[BigDigit]) -> BigInt {\n         BigInt::from_biguint(sign, BigUint::new(v))\n     }\n \n     /// Creates and initializes an BigInt.\n-    static pub pure fn from_biguint(sign: Sign, data: BigUint) -> BigInt {\n+    pub pure fn from_biguint(sign: Sign, data: BigUint) -> BigInt {\n         if sign == Zero || data.is_zero() {\n             return BigInt { sign: Zero, data: Zero::zero() };\n         }\n         return BigInt { sign: sign, data: data };\n     }\n \n     /// Creates and initializes an BigInt.\n-    static pub pure fn from_uint(n: uint) -> BigInt {\n+    pub pure fn from_uint(n: uint) -> BigInt {\n         if n == 0 { return Zero::zero(); }\n         return BigInt::from_biguint(Plus, BigUint::from_uint(n));\n     }\n \n     /// Creates and initializes an BigInt.\n-    static pub pure fn from_slice(sign: Sign, slice: &[BigDigit]) -> BigInt {\n+    pub pure fn from_slice(sign: Sign, slice: &[BigDigit]) -> BigInt {\n         BigInt::from_biguint(sign, BigUint::from_slice(slice))\n     }\n \n     /// Creates and initializes an BigInt.\n-    static pub pure fn from_str_radix(s: &str, radix: uint)\n+    pub pure fn from_str_radix(s: &str, radix: uint)\n         -> Option<BigInt> {\n         BigInt::parse_bytes(str::to_bytes(s), radix)\n     }\n \n     /// Creates and initializes an BigInt.\n-    static pub pure fn parse_bytes(buf: &[u8], radix: uint)\n+    pub pure fn parse_bytes(buf: &[u8], radix: uint)\n         -> Option<BigInt> {\n         if buf.is_empty() { return None; }\n         let mut sign  = Plus;"}, {"sha": "2dcebcb276cb9ed8ecd87b31e88a2a525acd1cf8", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -27,7 +27,7 @@ fn small_mask(nbits: uint) -> uint {\n }\n \n pub impl SmallBitv {\n-    static fn new(bits: uint) -> SmallBitv {\n+    fn new(bits: uint) -> SmallBitv {\n         SmallBitv {bits: bits}\n     }\n \n@@ -124,7 +124,7 @@ fn big_mask(nbits: uint, elem: uint) -> uint {\n }\n \n pub impl BigBitv {\n-    static fn new(storage: ~[uint]) -> BigBitv {\n+    fn new(storage: ~[uint]) -> BigBitv {\n         BigBitv {storage: storage}\n     }\n \n@@ -256,7 +256,7 @@ priv impl Bitv {\n }\n \n pub impl Bitv {\n-    static fn new(nbits: uint, init: bool) -> Bitv {\n+    fn new(nbits: uint, init: bool) -> Bitv {\n         let rep = if nbits <= uint::bits {\n             Small(~SmallBitv::new(if init {!0} else {0}))\n         }\n@@ -592,12 +592,12 @@ pub struct BitvSet {\n \n pub impl BitvSet {\n     /// Creates a new bit vector set with initially no contents\n-    static fn new() -> BitvSet {\n+    fn new() -> BitvSet {\n         BitvSet{ size: 0, bitv: BigBitv::new(~[0]) }\n     }\n \n     /// Creates a new bit vector set from the given bit vector\n-    static fn from_bitv(bitv: Bitv) -> BitvSet {\n+    fn from_bitv(bitv: Bitv) -> BitvSet {\n         let mut size = 0;\n         for bitv.ones |_| {\n             size += 1;"}, {"sha": "d8906fbd90a176af9d71e3fcbc7d0096cbae080c", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -43,7 +43,7 @@ impl<T> Mutable for Deque<T> {\n \n pub impl<T> Deque<T> {\n     /// Create an empty Deque\n-    static pure fn new() -> Deque<T> {\n+    pure fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}\n     }"}, {"sha": "9855e803ccbccdf18b9d6613ffa67713c05bcc51", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -314,7 +314,7 @@ impl<T,F:Flattener<T>,C:ByteChan> GenericChan<T> for FlatChan<T, F, C> {\n }\n \n pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P> {\n-    static fn new(u: U, p: P) -> FlatPort<T, U, P> {\n+    fn new(u: U, p: P) -> FlatPort<T, U, P> {\n         FlatPort {\n             unflattener: u,\n             byte_port: p\n@@ -323,7 +323,7 @@ pub impl<T,U:Unflattener<T>,P:BytePort> FlatPort<T, U, P> {\n }\n \n pub impl<T,F:Flattener<T>,C:ByteChan> FlatChan<T, F, C> {\n-    static fn new(f: F, c: C) -> FlatChan<T, F, C> {\n+    fn new(f: F, c: C) -> FlatChan<T, F, C> {\n         FlatChan {\n             flattener: f,\n             byte_chan: c\n@@ -376,15 +376,15 @@ pub mod flatteners {\n     }\n \n     pub impl<T:Copy + Owned> PodUnflattener<T> {\n-        static fn new() -> PodUnflattener<T> {\n+        fn new() -> PodUnflattener<T> {\n             PodUnflattener {\n                 bogus: ()\n             }\n         }\n     }\n \n     pub impl<T:Copy + Owned> PodFlattener<T> {\n-        static fn new() -> PodFlattener<T> {\n+        fn new() -> PodFlattener<T> {\n             PodFlattener {\n                 bogus: ()\n             }\n@@ -419,7 +419,7 @@ pub mod flatteners {\n     }\n \n     pub impl<D:Decoder,T:Decodable<D>> DeserializingUnflattener<D, T> {\n-        static fn new(deserialize_buffer: DeserializeBuffer<T>)\n+        fn new(deserialize_buffer: DeserializeBuffer<T>)\n                    -> DeserializingUnflattener<D, T> {\n             DeserializingUnflattener {\n                 deserialize_buffer: deserialize_buffer\n@@ -428,7 +428,7 @@ pub mod flatteners {\n     }\n \n     pub impl<S:Encoder,T:Encodable<S>> SerializingFlattener<S, T> {\n-        static fn new(serialize_value: SerializeValue<T>)\n+        fn new(serialize_value: SerializeValue<T>)\n                    -> SerializingFlattener<S, T> {\n             SerializingFlattener {\n                 serialize_value: serialize_value\n@@ -459,15 +459,15 @@ pub mod flatteners {\n     }\n \n     pub trait FromReader {\n-        static fn from_reader(r: @Reader) -> Self;\n+        fn from_reader(r: @Reader) -> Self;\n     }\n \n     pub trait FromWriter {\n-        static fn from_writer(w: @Writer) -> Self;\n+        fn from_writer(w: @Writer) -> Self;\n     }\n \n     impl FromReader for json::Decoder/&self {\n-        static fn from_reader(r: @Reader) -> json::Decoder/&self {\n+        fn from_reader(r: @Reader) -> json::Decoder/&self {\n             match json::from_reader(r) {\n                 Ok(json) => {\n                     json::Decoder(json)\n@@ -478,21 +478,21 @@ pub mod flatteners {\n     }\n \n     impl FromWriter for json::Encoder {\n-        static fn from_writer(w: @Writer) -> json::Encoder {\n+        fn from_writer(w: @Writer) -> json::Encoder {\n             json::Encoder(w)\n         }\n     }\n \n     impl FromReader for ebml::reader::Decoder {\n-        static fn from_reader(r: @Reader) -> ebml::reader::Decoder {\n+        fn from_reader(r: @Reader) -> ebml::reader::Decoder {\n             let buf = @r.read_whole_stream();\n             let doc = ebml::reader::Doc(buf);\n             ebml::reader::Decoder(doc)\n         }\n     }\n \n     impl FromWriter for ebml::writer::Encoder {\n-        static fn from_writer(w: @Writer) -> ebml::writer::Encoder {\n+        fn from_writer(w: @Writer) -> ebml::writer::Encoder {\n             ebml::writer::Encoder(w)\n         }\n     }\n@@ -543,15 +543,15 @@ pub mod bytepipes {\n     }\n \n     pub impl<R:Reader> ReaderBytePort<R> {\n-        static fn new(r: R) -> ReaderBytePort<R> {\n+        fn new(r: R) -> ReaderBytePort<R> {\n             ReaderBytePort {\n                 reader: r\n             }\n         }\n     }\n \n     pub impl<W:Writer> WriterByteChan<W> {\n-        static fn new(w: W) -> WriterByteChan<W> {\n+        fn new(w: W) -> WriterByteChan<W> {\n             WriterByteChan {\n                 writer: w\n             }\n@@ -606,7 +606,7 @@ pub mod bytepipes {\n     }\n \n     pub impl PipeBytePort {\n-        static fn new(p: Port<~[u8]>) -> PipeBytePort {\n+        fn new(p: Port<~[u8]>) -> PipeBytePort {\n             PipeBytePort {\n                 port: p,\n                 buf: ~[]\n@@ -615,7 +615,7 @@ pub mod bytepipes {\n     }\n \n     pub impl PipeByteChan {\n-        static fn new(c: Chan<~[u8]>) -> PipeByteChan {\n+        fn new(c: Chan<~[u8]>) -> PipeByteChan {\n             PipeByteChan {\n                 chan: c\n             }"}, {"sha": "50d2eb6a7852189d02b683ff93042bf087b4e6c6", "filename": "src/libstd/io_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fio_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fio_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio_util.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -17,7 +17,7 @@ pub struct BufReader {\n }\n \n pub impl BufReader {\n-    static pub fn new(v: ~[u8]) -> BufReader {\n+    pub fn new(v: ~[u8]) -> BufReader {\n         BufReader {\n             buf: v,\n             pos: 0"}, {"sha": "49dc6f90740aa59787b6bc56b7cca71a930ab5b5", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -45,7 +45,7 @@ struct UserInfo {\n pub type Query = ~[(~str, ~str)];\n \n pub impl Url {\n-    static pure fn new(\n+    pure fn new(\n         scheme: ~str,\n         user: Option<UserInfo>,\n         host: ~str,\n@@ -67,7 +67,7 @@ pub impl Url {\n }\n \n pub impl UserInfo {\n-    static pure fn new(user: ~str, pass: Option<~str>) -> UserInfo {\n+    pure fn new(user: ~str, pass: Option<~str>) -> UserInfo {\n         UserInfo { user: user, pass: pass }\n     }\n }\n@@ -666,7 +666,7 @@ pub pure fn from_str(rawurl: &str) -> Result<Url, ~str> {\n }\n \n impl FromStr for Url {\n-    static pure fn from_str(s: &str) -> Option<Url> {\n+    pure fn from_str(s: &str) -> Option<Url> {\n         match from_str(s) {\n             Ok(url) => Some(url),\n             Err(_) => None"}, {"sha": "7dad2ebbd8bfe0eca15fc57c3b6b46f783ca2542", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -118,10 +118,10 @@ pub impl <T:Ord> PriorityQueue<T> {\n     }\n \n     /// Create an empty PriorityQueue\n-    static pure fn new() -> PriorityQueue<T> { PriorityQueue{data: ~[],} }\n+    pure fn new() -> PriorityQueue<T> { PriorityQueue{data: ~[],} }\n \n     /// Create a PriorityQueue from a vector (heapify)\n-    static pure fn from_vec(xs: ~[T]) -> PriorityQueue<T> {\n+    pure fn from_vec(xs: ~[T]) -> PriorityQueue<T> {\n         let mut q = PriorityQueue{data: xs,};\n         let mut n = q.len() / 2;\n         while n > 0 {"}, {"sha": "d288c06d2935cfc9c295850755f56884f2ca3c54", "filename": "src/libstd/serialize.rs", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialize.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -110,15 +110,15 @@ pub trait Encodable<S:Encoder> {\n }\n \n pub trait Decodable<D:Decoder> {\n-    static fn decode(&self, d: &D) -> Self;\n+    fn decode(d: &D) -> Self;\n }\n \n impl<S:Encoder> Encodable<S> for uint {\n     fn encode(&self, s: &S) { s.emit_uint(*self) }\n }\n \n impl<D:Decoder> Decodable<D> for uint {\n-    static fn decode(&self, d: &D) -> uint {\n+    fn decode(d: &D) -> uint {\n         d.read_uint()\n     }\n }\n@@ -128,7 +128,7 @@ impl<S:Encoder> Encodable<S> for u8 {\n }\n \n impl<D:Decoder> Decodable<D> for u8 {\n-    static fn decode(&self, d: &D) -> u8 {\n+    fn decode(d: &D) -> u8 {\n         d.read_u8()\n     }\n }\n@@ -138,7 +138,7 @@ impl<S:Encoder> Encodable<S> for u16 {\n }\n \n impl<D:Decoder> Decodable<D> for u16 {\n-    static fn decode(&self, d: &D) -> u16 {\n+    fn decode(d: &D) -> u16 {\n         d.read_u16()\n     }\n }\n@@ -148,7 +148,7 @@ impl<S:Encoder> Encodable<S> for u32 {\n }\n \n impl<D:Decoder> Decodable<D> for u32 {\n-    static fn decode(&self, d: &D) -> u32 {\n+    fn decode(d: &D) -> u32 {\n         d.read_u32()\n     }\n }\n@@ -158,7 +158,7 @@ impl<S:Encoder> Encodable<S> for u64 {\n }\n \n impl<D:Decoder> Decodable<D> for u64 {\n-    static fn decode(&self, d: &D) -> u64 {\n+    fn decode(d: &D) -> u64 {\n         d.read_u64()\n     }\n }\n@@ -168,7 +168,7 @@ impl<S:Encoder> Encodable<S> for int {\n }\n \n impl<D:Decoder> Decodable<D> for int {\n-    static fn decode(&self, d: &D) -> int {\n+    fn decode(d: &D) -> int {\n         d.read_int()\n     }\n }\n@@ -178,7 +178,7 @@ impl<S:Encoder> Encodable<S> for i8 {\n }\n \n impl<D:Decoder> Decodable<D> for i8 {\n-    static fn decode(&self, d: &D) -> i8 {\n+    fn decode(d: &D) -> i8 {\n         d.read_i8()\n     }\n }\n@@ -188,7 +188,7 @@ impl<S:Encoder> Encodable<S> for i16 {\n }\n \n impl<D:Decoder> Decodable<D> for i16 {\n-    static fn decode(&self, d: &D) -> i16 {\n+    fn decode(d: &D) -> i16 {\n         d.read_i16()\n     }\n }\n@@ -198,7 +198,7 @@ impl<S:Encoder> Encodable<S> for i32 {\n }\n \n impl<D:Decoder> Decodable<D> for i32 {\n-    static fn decode(&self, d: &D) -> i32 {\n+    fn decode(d: &D) -> i32 {\n         d.read_i32()\n     }\n }\n@@ -208,7 +208,7 @@ impl<S:Encoder> Encodable<S> for i64 {\n }\n \n impl<D:Decoder> Decodable<D> for i64 {\n-    static fn decode(&self, d: &D) -> i64 {\n+    fn decode(d: &D) -> i64 {\n         d.read_i64()\n     }\n }\n@@ -222,7 +222,7 @@ impl<S:Encoder> Encodable<S> for ~str {\n }\n \n impl<D:Decoder> Decodable<D> for ~str {\n-    static fn decode(&self, d: &D) -> ~str {\n+    fn decode(d: &D) -> ~str {\n         d.read_owned_str()\n     }\n }\n@@ -232,7 +232,7 @@ impl<S:Encoder> Encodable<S> for @str {\n }\n \n impl<D:Decoder> Decodable<D> for @str {\n-    static fn decode(&self, d: &D) -> @str {\n+    fn decode(d: &D) -> @str {\n         d.read_managed_str()\n     }\n }\n@@ -242,7 +242,7 @@ impl<S:Encoder> Encodable<S> for float {\n }\n \n impl<D:Decoder> Decodable<D> for float {\n-    static fn decode(&self, d: &D) -> float {\n+    fn decode(d: &D) -> float {\n         d.read_float()\n     }\n }\n@@ -252,7 +252,7 @@ impl<S:Encoder> Encodable<S> for f32 {\n }\n \n impl<D:Decoder> Decodable<D> for f32 {\n-    static fn decode(&self, d: &D) -> f32 {\n+    fn decode(d: &D) -> f32 {\n         d.read_f32() }\n }\n \n@@ -261,7 +261,7 @@ impl<S:Encoder> Encodable<S> for f64 {\n }\n \n impl<D:Decoder> Decodable<D> for f64 {\n-    static fn decode(&self, d: &D) -> f64 {\n+    fn decode(d: &D) -> f64 {\n         d.read_f64()\n     }\n }\n@@ -271,7 +271,7 @@ impl<S:Encoder> Encodable<S> for bool {\n }\n \n impl<D:Decoder> Decodable<D> for bool {\n-    static fn decode(&self, d: &D) -> bool {\n+    fn decode(d: &D) -> bool {\n         d.read_bool()\n     }\n }\n@@ -281,7 +281,7 @@ impl<S:Encoder> Encodable<S> for () {\n }\n \n impl<D:Decoder> Decodable<D> for () {\n-    static fn decode(&self, d: &D) -> () {\n+    fn decode(d: &D) -> () {\n         d.read_nil()\n     }\n }\n@@ -299,7 +299,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~T {\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~T {\n-    static fn decode(&self, d: &D) -> ~T {\n+    fn decode(d: &D) -> ~T {\n         d.read_owned(|| ~Decodable::decode(d))\n     }\n }\n@@ -311,7 +311,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @T {\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for @T {\n-    static fn decode(&self, d: &D) -> @T {\n+    fn decode(d: &D) -> @T {\n         d.read_managed(|| @Decodable::decode(d))\n     }\n }\n@@ -337,7 +337,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for ~[T] {\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for ~[T] {\n-    static fn decode(&self, d: &D) -> ~[T] {\n+    fn decode(d: &D) -> ~[T] {\n         do d.read_owned_vec |len| {\n             do vec::from_fn(len) |i| {\n                 d.read_vec_elt(i, || Decodable::decode(d))\n@@ -357,7 +357,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for @[T] {\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for @[T] {\n-    static fn decode(&self, d: &D) -> @[T] {\n+    fn decode(d: &D) -> @[T] {\n         do d.read_managed_vec |len| {\n             do at_vec::from_fn(len) |i| {\n                 d.read_vec_elt(i, || Decodable::decode(d))\n@@ -382,7 +382,7 @@ impl<S:Encoder,T:Encodable<S>> Encodable<S> for Option<T> {\n }\n \n impl<D:Decoder,T:Decodable<D>> Decodable<D> for Option<T> {\n-    static fn decode(&self, d: &D) -> Option<T> {\n+    fn decode(d: &D) -> Option<T> {\n         do d.read_enum(~\"option\") {\n             do d.read_enum_variant |i| {\n                 match i {\n@@ -410,7 +410,7 @@ impl<S:Encoder,T0:Encodable<S>,T1:Encodable<S>> Encodable<S> for (T0, T1) {\n }\n \n impl<D:Decoder,T0:Decodable<D>,T1:Decodable<D>> Decodable<D> for (T0, T1) {\n-    static fn decode(&self, d: &D) -> (T0, T1) {\n+    fn decode(d: &D) -> (T0, T1) {\n         do d.read_tup(2) {\n             (\n                 d.read_tup_elt(0, || Decodable::decode(d)),\n@@ -445,7 +445,7 @@ impl<\n     T1: Decodable<D>,\n     T2: Decodable<D>\n > Decodable<D> for (T0, T1, T2) {\n-    static fn decode(&self, d: &D) -> (T0, T1, T2) {\n+    fn decode(d: &D) -> (T0, T1, T2) {\n         do d.read_tup(3) {\n             (\n                 d.read_tup_elt(0, || Decodable::decode(d)),\n@@ -484,7 +484,7 @@ impl<\n     T2: Decodable<D>,\n     T3: Decodable<D>\n > Decodable<D> for (T0, T1, T2, T3) {\n-    static fn decode(&self, d: &D) -> (T0, T1, T2, T3) {\n+    fn decode(d: &D) -> (T0, T1, T2, T3) {\n         do d.read_tup(4) {\n             (\n                 d.read_tup_elt(0, || Decodable::decode(d)),\n@@ -527,7 +527,7 @@ impl<\n     T3: Decodable<D>,\n     T4: Decodable<D>\n > Decodable<D> for (T0, T1, T2, T3, T4) {\n-    static fn decode(&self, d: &D)\n+    fn decode(d: &D)\n       -> (T0, T1, T2, T3, T4) {\n         do d.read_tup(5) {\n             ("}, {"sha": "6a6635bae906c8835e5e95dae1797f93f5a0875b", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -135,7 +135,7 @@ impl<V> Map<uint, V> for SmallIntMap<V> {\n \n pub impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n-    static pure fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n+    pure fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n     pure fn get(&self, key: &uint) -> &'self V {\n         self.find(key).expect(\"key not present\")"}, {"sha": "16645f151ee8e399e07f891a7000e22c745884e6", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -43,9 +43,10 @@ pub impl<T> TaskPool<T> {\n     /// new scheduler with the given mode. The provided `init_fn_factory`\n     /// returns a function which, given the index of the task, should return\n     /// local data to be kept around in that task.\n-    static fn new(n_tasks: uint,\n-                  opt_sched_mode: Option<SchedMode>,\n-                  init_fn_factory: ~fn() -> ~fn(uint) -> T) -> TaskPool<T> {\n+    fn new(n_tasks: uint,\n+           opt_sched_mode: Option<SchedMode>,\n+           init_fn_factory: ~fn() -> ~fn(uint) -> T)\n+        -> TaskPool<T> {\n         fail_unless!(n_tasks >= 1);\n \n         let channels = do vec::from_fn(n_tasks) |i| {"}, {"sha": "faebe26856428a59737a37de078801a3f1d52c7f", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -51,7 +51,7 @@ pub struct Timespec { sec: i64, nsec: i32 }\n  * nsec: 800_000_000_i32 }`.\n  */\n pub impl Timespec {\n-    static pure fn new(sec: i64, nsec: i32) -> Timespec {\n+    pure fn new(sec: i64, nsec: i32) -> Timespec {\n         fail_unless!(nsec >= 0 && nsec < NSEC_PER_SEC);\n         Timespec { sec: sec, nsec: nsec }\n     }"}, {"sha": "045d51c156768d2993eec597337c043d10f3cad8", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -176,7 +176,7 @@ impl<K: TotalOrd, V> Map<K, V> for TreeMap<K, V> {\n \n pub impl<K: TotalOrd, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n-    static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n+    pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n     /// Visit all keys in reverse order\n     pure fn each_key_reverse(&self, f: &fn(&K) -> bool) {\n@@ -501,7 +501,7 @@ impl<T: TotalOrd> Set<T> for TreeSet<T> {\n pub impl <T: TotalOrd> TreeSet<T> {\n     /// Create an empty TreeSet\n     #[inline(always)]\n-    static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n+    pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n \n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n@@ -542,7 +542,7 @@ struct TreeNode<K, V> {\n \n pub impl<K: TotalOrd, V> TreeNode<K, V> {\n     #[inline(always)]\n-    static pure fn new(key: K, value: V) -> TreeNode<K, V> {\n+    pure fn new(key: K, value: V) -> TreeNode<K, V> {\n         TreeNode{key: key, value: value, left: None, right: None, level: 1}\n     }\n }"}, {"sha": "46335d062b40fe5a9af7a0cc7088f7d26d9d38f5", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -132,7 +132,7 @@ impl cmp::Ord for WorkKey {\n }\n \n pub impl WorkKey {\n-    static fn new(kind: &str, name: &str) -> WorkKey {\n+    fn new(kind: &str, name: &str) -> WorkKey {\n     WorkKey { kind: kind.to_owned(), name: name.to_owned() }\n     }\n }\n@@ -151,7 +151,7 @@ impl<S:Encoder> Encodable<S> for WorkMap {\n }\n \n impl<D:Decoder> Decodable<D> for WorkMap {\n-    static fn decode(&self, d: &D) -> WorkMap {\n+    fn decode(d: &D) -> WorkMap {\n         let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n         let mut w = LinearMap::new();\n         for v.each |&(k, v)| {\n@@ -258,7 +258,7 @@ fn digest_file(path: &Path) -> ~str {\n \n pub impl Context {\n \n-    static fn new(db: @Mut<Database>,\n+    fn new(db: @Mut<Database>,\n                   lg: @Mut<Logger>,\n                   cfg: @json::Object) -> Context {\n         Context{db: db, logger: lg, cfg: cfg, freshness: LinearMap::new()}\n@@ -367,7 +367,7 @@ impl TPrep for @Mut<Prep> {\n pub impl<T:Owned +\n          Encodable<json::Encoder> +\n          Decodable<json::Decoder/&static>> Work<T> { // FIXME(#5121)\n-    static fn new(p: @Mut<Prep>, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n+    fn new(p: @Mut<Prep>, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n         Work { prep: p, res: Some(e) }\n     }\n }"}, {"sha": "edf731557319c5d7dbee0862c4e55871a404aa6c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -75,7 +75,7 @@ impl<S:Encoder> Encodable<S> for ident {\n }\n \n impl<D:Decoder> Decodable<D> for ident {\n-    static fn decode(d: &D) -> ident {\n+    fn decode(d: &D) -> ident {\n         let intr = match unsafe {\n             task::local_data::local_data_get(interner_key!())\n         } {"}, {"sha": "06d915cfed87f13f6268ac347fc15842df1f9093", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -30,7 +30,7 @@ use core::uint;\n use std::serialize::{Encodable, Decodable, Encoder, Decoder};\n \n pub trait Pos {\n-    static pure fn from_uint(n: uint) -> Self;\n+    pure fn from_uint(n: uint) -> Self;\n     pure fn to_uint(&self) -> uint;\n }\n \n@@ -45,7 +45,7 @@ pub struct CharPos(uint);\n // have been unsuccessful\n \n impl Pos for BytePos {\n-    static pure fn from_uint(n: uint) -> BytePos { BytePos(n) }\n+    pure fn from_uint(n: uint) -> BytePos { BytePos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n@@ -80,7 +80,7 @@ impl to_bytes::IterBytes for BytePos {\n }\n \n impl Pos for CharPos {\n-    static pure fn from_uint(n: uint) -> CharPos { CharPos(n) }\n+    pure fn from_uint(n: uint) -> CharPos { CharPos(n) }\n     pure fn to_uint(&self) -> uint { **self }\n }\n \n@@ -144,7 +144,7 @@ impl<S:Encoder> Encodable<S> for span {\n }\n \n impl<D:Decoder> Decodable<D> for span {\n-    static fn decode(_d: &D) -> span {\n+    fn decode(_d: &D) -> span {\n         dummy_sp()\n     }\n }\n@@ -286,7 +286,7 @@ pub struct CodeMap {\n }\n \n pub impl CodeMap {\n-    static pub fn new() -> CodeMap {\n+    pub fn new() -> CodeMap {\n         CodeMap {\n             files: @mut ~[],\n         }"}, {"sha": "54ca5dc0d72f78ae152eaafc7cbaa44191933f7d", "filename": "src/libsyntax/ext/auto_encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fext%2Fauto_encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_encode.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -32,7 +32,7 @@ impl<S:std::serialize::Encoder> Encodable<S> for Node {\n }\n \n impl<D:Decoder> Decodable for node_id {\n-    static fn decode(d: &D) -> Node {\n+    fn decode(d: &D) -> Node {\n         do d.read_struct(\"Node\", 1) {\n             Node {\n                 id: d.read_field(~\"x\", 0, || decode(d))\n@@ -66,7 +66,7 @@ would yield functions like:\n         D: Decoder,\n         T: Decodable<D>\n     > spanned<T>: Decodable<D> {\n-        static fn decode(d: &D) -> spanned<T> {\n+        fn decode(d: &D) -> spanned<T> {\n             do d.read_rec {\n                 {\n                     node: d.read_field(~\"node\", 0, || decode(d)),"}, {"sha": "4e3b4f2739ee93dc694f967694a30f503c7d5475", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -439,7 +439,7 @@ pub enum MapChain<K,V> {\n impl <K: Eq + Hash + IterBytes ,V: Copy> MapChain<K,V>{\n \n     // Constructor. I don't think we need a zero-arg one.\n-    static fn new(+init: ~LinearMap<K,@V>) -> @mut MapChain<K,V> {\n+    fn new(+init: ~LinearMap<K,@V>) -> @mut MapChain<K,V> {\n         @mut BaseMapChain(init)\n     }\n "}, {"sha": "d0850d2bd2a858f74a954ad41e40adb4c59260af", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -22,14 +22,14 @@ pub struct Interner<T> {\n \n // when traits can extend traits, we should extend index<uint,T> to get []\n pub impl<T:Eq + IterBytes + Hash + Const + Copy> Interner<T> {\n-    static fn new() -> Interner<T> {\n+    fn new() -> Interner<T> {\n         Interner {\n             map: @mut LinearMap::new(),\n             vect: @mut ~[],\n         }\n     }\n \n-    static fn prefill(init: &[T]) -> Interner<T> {\n+    fn prefill(init: &[T]) -> Interner<T> {\n         let rv = Interner::new();\n         for init.each() |v| { rv.intern(*v); }\n         rv"}, {"sha": "9a778b18874141276b6c28dd2f6231f90a16b772", "filename": "src/test/auxiliary/anon_trait_static_method_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon_trait_static_method_lib.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -13,7 +13,7 @@ pub struct Foo {\n }\n \n pub impl Foo {\n-    static fn new() -> Foo {\n+    fn new() -> Foo {\n         Foo { x: 3 }\n     }\n }"}, {"sha": "74c46a8b8c6b472f9380f0fa72841298c02c0b01", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -14,17 +14,17 @@\n #[crate_type = \"lib\"];\n \n pub trait read {\n-    static fn readMaybe(s: ~str) -> Option<Self>;\n+    fn readMaybe(s: ~str) -> Option<Self>;\n }\n \n impl read for int {\n-    static fn readMaybe(s: ~str) -> Option<int> {\n+    fn readMaybe(s: ~str) -> Option<int> {\n         int::from_str(s)\n     }\n }\n \n impl read for bool {\n-    static fn readMaybe(s: ~str) -> Option<bool> {\n+    fn readMaybe(s: ~str) -> Option<bool> {\n         match s {\n           ~\"true\" => Some(true),\n           ~\"false\" => Some(false),"}, {"sha": "b1bdfcfcffcb892f495586561a249d8bf59c0dd1", "filename": "src/test/auxiliary/static_fn_inline_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -11,14 +11,14 @@\n \n pub mod num {\n     pub trait Num2 {\n-        static pure fn from_int2(n: int) -> Self;\n+        static fn from_int2(n: int) -> Self;\n     }\n }\n \n pub mod float {\n     impl ::num::Num2 for float {\n         #[inline]\n-        static pure fn from_int2(n: int) -> float { return n as float;  }\n+        static fn from_int2(n: int) -> float { return n as float;  }\n     }\n }\n "}, {"sha": "f3cb9a22625afc790a4f68dc9f04d8c7098a03da", "filename": "src/test/auxiliary/static_fn_trait_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -1,11 +1,11 @@\n pub mod num {\n     pub trait Num2 {\n-        static pure fn from_int2(n: int) -> Self;\n+        pure fn from_int2(n: int) -> Self;\n     }\n }\n \n pub mod float {\n     impl ::num::Num2 for float {\n-        static pure fn from_int2(n: int) -> float { return n as float;  }\n+        pure fn from_int2(n: int) -> float { return n as float;  }\n     }\n }"}, {"sha": "1e32697eb1073232af6f64ed844736a67dd3831c", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -40,11 +40,11 @@ struct Sudoku {\n }\n \n pub impl Sudoku {\n-    static pub fn new(g: grid) -> Sudoku {\n+    pub fn new(g: grid) -> Sudoku {\n         return Sudoku { grid: g }\n     }\n \n-    static pub fn from_vec(vec: &[[u8 * 9] * 9]) -> Sudoku {\n+    pub fn from_vec(vec: &[[u8 * 9] * 9]) -> Sudoku {\n         let mut g = do vec::from_fn(9u) |i| {\n             do vec::from_fn(9u) |j| { vec[i][j] }\n         };\n@@ -62,7 +62,7 @@ pub impl Sudoku {\n         return true;\n     }\n \n-    static pub fn read(reader: @io::Reader) -> Sudoku {\n+    pub fn read(reader: @io::Reader) -> Sudoku {\n         fail_unless!(reader.read_line() == ~\"9,9\"); /* assert first line is exactly \"9,9\" */\n \n         let mut g = vec::from_fn(10u, { |_i| ~[0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8] });\n@@ -156,7 +156,7 @@ struct Colors(u16);\n const heads: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n \n impl Colors {\n-    static fn new(start_color: u8) -> Colors {\n+    fn new(start_color: u8) -> Colors {\n         // Sets bits 9..start_color\n         let tails = !0u16 << start_color;\n         return Colors(heads & tails);"}, {"sha": "ad5fa16f98cb876ba977eb13ab2f41c96b2cb8cb", "filename": "src/test/compile-fail/issue-3707.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3707.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -14,7 +14,7 @@ struct Obj {\n }\n \n pub impl Obj {\n-    static pure fn boom() -> bool {\n+    pure fn boom() -> bool {\n         return 1+1 == 2\n     }\n     pure fn chirp() {"}, {"sha": "9464f05158e96b55817f3f9d41e2fc0b343b5430", "filename": "src/test/compile-fail/issue-3969.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3969.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -17,7 +17,7 @@ trait BikeMethods {\n }\n \n impl BikeMethods for Bike {\n-    static fn woops(&const self) -> ~str { ~\"foo\" }\n+    fn woops(&const self) -> ~str { ~\"foo\" }\n     //~^ ERROR method `woops` is declared as static in its impl, but not in its trait\n }\n "}, {"sha": "15107ccd51ce389d4356dfa65e461e0eb7850d27", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -16,7 +16,7 @@ struct Point {\n }\n \n impl ToStr for Point { //~ ERROR implements a method not defined in the trait\n-    static fn new(x: float, y: float) -> Point {\n+    fn new(x: float, y: float) -> Point {\n         Point { x: x, y: y }\n     }\n "}, {"sha": "50df4f04971c81835dcc38195edb30d3bc62f930", "filename": "src/test/compile-fail/static-method-privacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fstatic-method-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fstatic-method-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-method-privacy.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -1,7 +1,7 @@\n mod a {\n     pub struct S;\n     impl S {\n-        static fn new() -> S { S }\n+        fn new() -> S { S }\n     }\n }\n "}, {"sha": "719da233335e1db3190fb223c9eba744aa44f5ae", "filename": "src/test/compile-fail/staticness-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaticness-mismatch.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -10,7 +10,7 @@\n \n \n trait foo {\n-    static fn bar();\n+    fn bar();\n }\n \n impl foo for int {"}, {"sha": "8e11786786ff995043dab24103f1972e31fe3693", "filename": "src/test/run-pass/anon-trait-static-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -13,7 +13,7 @@ struct Foo {\n }\n \n pub impl Foo {\n-    static fn new() -> Foo {\n+    fn new() -> Foo {\n         Foo { x: 3 }\n     }\n }"}, {"sha": "a82db7b1be3729325cf57de372374c715d77de5d", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -115,7 +115,7 @@ pub impl<T> cat<T> {\n         }\n     }\n \n-    static pure fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n+    pure fn new(in_x: int, in_y: int, in_name: T) -> cat<T> {\n         cat{meows: in_x, how_hungry: in_y, name: in_name }\n     }\n }"}, {"sha": "38854abff47f104d93339a2cc24780a17935bd2f", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -130,9 +130,9 @@ mod test_methods {\n \n     impl Fooable for Foo {\n         #[cfg(bogus)]\n-        static fn what(&self) { }\n+        fn what(&self) { }\n \n-        static fn what(&self) { }\n+        fn what(&self) { }\n \n         #[cfg(bogus)]\n         fn the(&self) { }\n@@ -142,9 +142,9 @@ mod test_methods {\n \n     trait Fooable {\n         #[cfg(bogus)]\n-        static fn what(&self);\n+        fn what(&self);\n \n-        static fn what(&self);\n+        fn what(&self);\n \n         #[cfg(bogus)]\n         fn the(&self);"}, {"sha": "1b5cb86360b207c12c85d8265d492183ea7637e7", "filename": "src/test/run-pass/static-method-in-trait-with-tps-intracrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-in-trait-with-tps-intracrate.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -13,11 +13,11 @@ trait Deserializer {\n }\n \n trait Deserializable<D:Deserializer> {\n-    static fn deserialize(&self, d: &D) -> Self;\n+    fn deserialize(d: &D) -> Self;\n }\n \n impl<D:Deserializer> Deserializable<D> for int {\n-    static fn deserialize(&self, d: &D) -> int {\n+    fn deserialize(d: &D) -> int {\n         return d.read_int();\n     }\n }"}, {"sha": "99db34673aeac110075238065efb9f4b717d76a2", "filename": "src/test/run-pass/static-method-test.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-method-test.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -14,43 +14,43 @@\n // A trait for objects that can be used to do an if-then-else\n // (No actual need for this to be static, but it is a simple test.)\n trait bool_like {\n-    static fn select<A>(b: Self, +x1: A, +x2: A) -> A;\n+    fn select<A>(b: Self, +x1: A, +x2: A) -> A;\n }\n \n fn andand<T:bool_like + Copy>(x1: T, x2: T) -> T {\n     bool_like::select(x1, x2, x1)\n }\n \n impl bool_like for bool {\n-    static fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n+    fn select<A>(&&b: bool, +x1: A, +x2: A) -> A {\n         if b { x1 } else { x2 }\n     }\n }\n \n impl bool_like for int {\n-    static fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n+    fn select<A>(&&b: int, +x1: A, +x2: A) -> A {\n         if b != 0 { x1 } else { x2 }\n     }\n }\n \n // A trait for sequences that can be constructed imperatively.\n trait buildable<A> {\n-     static pure fn build_sized(size: uint,\n-                                builder: &fn(push: &pure fn(+v: A))) -> Self;\n+     pure fn build_sized(size: uint,\n+                         builder: &fn(push: &pure fn(+v: A))) -> Self;\n }\n \n \n impl<A> buildable<A> for @[A] {\n     #[inline(always)]\n-     static pure fn build_sized(size: uint,\n-                                builder: &fn(push: &pure fn(+v: A))) -> @[A] {\n+     pure fn build_sized(size: uint,\n+                         builder: &fn(push: &pure fn(+v: A))) -> @[A] {\n          at_vec::build_sized(size, builder)\n      }\n }\n impl<A> buildable<A> for ~[A] {\n     #[inline(always)]\n-     static pure fn build_sized(size: uint,\n-                                builder: &fn(push: &pure fn(+v: A))) -> ~[A] {\n+     pure fn build_sized(size: uint,\n+                         builder: &fn(push: &pure fn(+v: A))) -> ~[A] {\n          vec::build_sized(size, builder)\n      }\n }"}, {"sha": "24bcfcef1e7455f21e3749bef81db0f7f04e2ecf", "filename": "src/test/run-pass/static-methods-in-traits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -10,17 +10,17 @@\n \n mod a {\n \tpub trait Foo {\n-\t\tstatic pub fn foo() -> Self;\n+\t\tpub fn foo() -> Self;\n \t}\n \n \timpl Foo for int {\n-\t\tstatic pub fn foo() -> int {\n+\t\tpub fn foo() -> int {\n \t\t\t3\n \t\t}\n \t}\n \t\n \timpl Foo for uint {\n-\t\tstatic pub fn foo() -> uint {\n+\t\tpub fn foo() -> uint {\n \t\t\t5u\n \t\t}\n \t}"}, {"sha": "ddf69cda63f121486e0d617dd6bf10d19525ec26", "filename": "src/test/run-pass/static-methods-in-traits2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-methods-in-traits2.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -1,9 +1,9 @@\n pub trait Number: NumConv {\n-    static pure fn from<T:Number>(n: T) -> Self;\n+    pure fn from<T:Number>(n: T) -> Self;\n }\n \n impl Number for float {\n-    static pure fn from<T:Number>(n: T) -> float { n.to_float() }\n+    pure fn from<T:Number>(n: T) -> float { n.to_float() }\n }\n \n pub trait NumConv {"}, {"sha": "aae430dc4cdf9138d17adb5af6f48196db2a5fdb", "filename": "src/test/run-pass/trait-inheritance-num0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num0.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -15,7 +15,7 @@\n use core::num::NumCast::from;\n \n trait Num {\n-    static fn from_int(i: int) -> Self;\n+    fn from_int(i: int) -> Self;\n     fn gt(&self, other: &Self) -> bool;\n }\n "}, {"sha": "f3adea18ecdc18a0100f6a5987798271080cfbb7", "filename": "src/test/run-pass/trait-inheritance-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n trait MyNum {\n-    static fn from_int(int) -> Self;\n+    fn from_int(int) -> Self;\n }\n \n pub trait NumExt: MyNum { }\n \n struct S { v: int }\n \n impl MyNum for S {\n-    static fn from_int(i: int) -> S {\n+    fn from_int(i: int) -> S {\n         S {\n             v: i\n         }"}, {"sha": "45369d4ec19d5010c2976f3fd058ead209234249", "filename": "src/test/run-pass/trait-inheritance-static2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-static2.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -11,7 +11,7 @@\n trait MyEq { }\n \n trait MyNum {\n-    static fn from_int(int) -> Self;\n+    fn from_int(int) -> Self;\n }\n \n pub trait NumExt: MyEq + MyNum { }\n@@ -21,7 +21,7 @@ struct S { v: int }\n impl MyEq for S { }\n \n impl MyNum for S {\n-    static fn from_int(i: int) -> S {\n+    fn from_int(i: int) -> S {\n         S {\n             v: i\n         }"}, {"sha": "40f01fb63c1c5288eaf6bea8d7520e6f19798a83", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -12,15 +12,15 @@\n \n mod base {\n     pub trait HasNew<T> {\n-        static pure fn new() -> T;\n+        pure fn new() -> T;\n     }\n \n     pub struct Foo {\n         dummy: (),\n     }\n \n     impl ::base::HasNew<Foo> for Foo {\n-        static pure fn new() -> Foo {\n+        pure fn new() -> Foo {\n \t\t\tunsafe { io::println(\"Foo\"); }\n             Foo { dummy: () }\n         }\n@@ -31,7 +31,7 @@ mod base {\n     }\n \n     impl ::base::HasNew<Bar> for Bar {\n-        static pure fn new() -> Bar {\n+        pure fn new() -> Bar {\n \t\t\tunsafe { io::println(\"Bar\"); }\n             Bar { dummy: () }\n         }"}, {"sha": "7303f5ecbdf6c102bcc4cb0b3d2e416d9c561c19", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4634f7edaefafa3e5ece93499e08992b4c8c7145/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=4634f7edaefafa3e5ece93499e08992b4c8c7145", "patch": "@@ -12,13 +12,13 @@\n // methods!\n \n trait Equal {\n-    static fn isEq(a: Self, b: Self) -> bool;\n+    fn isEq(a: Self, b: Self) -> bool;\n }\n \n enum Color { cyan, magenta, yellow, black }\n \n impl Equal for Color {\n-    static fn isEq(a: Color, b: Color) -> bool {\n+    fn isEq(a: Color, b: Color) -> bool {\n         match (a, b) {\n           (cyan, cyan)       => { true  }\n           (magenta, magenta) => { true  }\n@@ -35,7 +35,7 @@ enum ColorTree {\n }\n \n impl Equal for ColorTree {\n-    static fn isEq(a: ColorTree, b: ColorTree) -> bool {\n+    fn isEq(a: ColorTree, b: ColorTree) -> bool {\n         match (a, b) {\n           (leaf(x), leaf(y)) => { Equal::isEq(x, y) }\n           (branch(l1, r1), branch(l2, r2)) => { "}]}