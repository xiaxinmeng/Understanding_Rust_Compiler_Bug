{"sha": "bb9e850246092d3931080ddbac551a0857b28364", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWU4NTAyNDYwOTJkMzkzMTA4MGRkYmFjNTUxYTA4NTdiMjgzNjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-13T17:09:35Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-14T14:21:50Z"}, "message": "std: Get rid of hash_offet in RawTable\n\nThis offset is always zero, and we don't consistently take it into\naccount. This is okay, because it's zero, but if it ever changes we're\ngoing to have bugs (e.g. in the `dealloc` call, where we don't take it\ninto account).\n\nIt's better to remove this for now; if we ever have a need for a\nnonzero offset we can add it back, and handle it properly when we do so.", "tree": {"sha": "0b1bd2a9a754d71aeb784cc598e6a7f329ec3bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b1bd2a9a754d71aeb784cc598e6a7f329ec3bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9e850246092d3931080ddbac551a0857b28364", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlniHX4ACgkQO79NPi73\nn5gwnRAAlIhgI2Hc3egdFfa7vrURPbNOE7FzvitBIrGWBgT4K11G7i2fEJVVUd0q\nxx/fVoNudJuzV9xg/wvckb47M4PfyWIcPtFWnI1BZrdL0xnkr5+Qgb6EID0DWtD2\nXwPw5WFiCPy0h0pdZ6fP3NkyB36L1ZhvrSct0+f3KEsYE6HcSD5kdyym/b0RrreC\nnGdeZwzWi2NH7F/a5Bo7qFCTk77PwieLjlLo4PYdtN5WPjBpC7/kwUsuag2lHzVi\neXS/C8/UC5miJp4iKzOx+6Rv4WdCHCW0nuhGCcCk/auUaO+AtO+zQ6wezNq0JjSu\nVOj7UazP7xSYXjrZ4qYnGjZYLjGCsA+Ewm8ItobWv3ZiA7TD2Py1r8at4tYp2tgv\nqL1qf25YJsB1TzycCOeFBN6l8PWnTIx7FmjyJLXeufNaKp/LKuUWiovndRtOUFgj\nSSJ3F3XAVYMp6LoJprxqnjW78YLHZSV+07Utso+pTCV8blJO8Cj6vUndhxfJ5Ern\ngHpLyflldQc4kjZm2X5erHKZUkBP5T0cQyquuVWc3AdPaC8EaczhCYc2tatQr10o\nauI3lMvyU4LAKLlg5athHL16fxb8uTWC/ofNwgObWO+fjEUYJtPKgfaNcvqgfkPl\n2YIFWy8NcY3xcLc5dWHVx8gXek2n5J/UjBWVXkR8AHpczm88qdY=\n=cp4U\n-----END PGP SIGNATURE-----", "payload": "tree 0b1bd2a9a754d71aeb784cc598e6a7f329ec3bad\nparent d21c02396419d905344baeeb6186343d8038c5ef\nauthor Manish Goregaokar <manishsmail@gmail.com> 1507914575 -0400\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1507990910 -0400\n\nstd: Get rid of hash_offet in RawTable\n\nThis offset is always zero, and we don't consistently take it into\naccount. This is okay, because it's zero, but if it ever changes we're\ngoing to have bugs (e.g. in the `dealloc` call, where we don't take it\ninto account).\n\nIt's better to remove this for now; if we ever have a need for a\nnonzero offset we can add it back, and handle it properly when we do so.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9e850246092d3931080ddbac551a0857b28364", "html_url": "https://github.com/rust-lang/rust/commit/bb9e850246092d3931080ddbac551a0857b28364", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9e850246092d3931080ddbac551a0857b28364/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d21c02396419d905344baeeb6186343d8038c5ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d21c02396419d905344baeeb6186343d8038c5ef", "html_url": "https://github.com/rust-lang/rust/commit/d21c02396419d905344baeeb6186343d8038c5ef"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "527c4ef4592cd63e27e57caff3e17a5a33af525c", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bb9e850246092d3931080ddbac551a0857b28364/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9e850246092d3931080ddbac551a0857b28364/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=bb9e850246092d3931080ddbac551a0857b28364", "patch": "@@ -717,26 +717,25 @@ fn calculate_offsets(hashes_size: usize,\n     (pairs_offset, end_of_pairs, oflo)\n }\n \n-// Returns a tuple of (minimum required malloc alignment, hash_offset,\n+// Returns a tuple of (minimum required malloc alignment,\n // array_size), from the start of a mallocated array.\n fn calculate_allocation(hash_size: usize,\n                         hash_align: usize,\n                         pairs_size: usize,\n                         pairs_align: usize)\n-                        -> (usize, usize, usize, bool) {\n-    let hash_offset = 0;\n+                        -> (usize, usize, bool) {\n     let (_, end_of_pairs, oflo) = calculate_offsets(hash_size, pairs_size, pairs_align);\n \n     let align = cmp::max(hash_align, pairs_align);\n \n-    (align, hash_offset, end_of_pairs, oflo)\n+    (align, end_of_pairs, oflo)\n }\n \n #[test]\n fn test_offset_calculation() {\n-    assert_eq!(calculate_allocation(128, 8, 16, 8), (8, 0, 144, false));\n-    assert_eq!(calculate_allocation(3, 1, 2, 1), (1, 0, 5, false));\n-    assert_eq!(calculate_allocation(6, 2, 12, 4), (4, 0, 20, false));\n+    assert_eq!(calculate_allocation(128, 8, 16, 8), (8, 144, false));\n+    assert_eq!(calculate_allocation(3, 1, 2, 1), (1, 5, false));\n+    assert_eq!(calculate_allocation(6, 2, 12, 4), (4, 20, false));\n     assert_eq!(calculate_offsets(128, 15, 4), (128, 143, false));\n     assert_eq!(calculate_offsets(3, 2, 4), (4, 6, false));\n     assert_eq!(calculate_offsets(6, 12, 4), (8, 20, false));\n@@ -768,10 +767,10 @@ impl<K, V> RawTable<K, V> {\n         // This is great in theory, but in practice getting the alignment\n         // right is a little subtle. Therefore, calculating offsets has been\n         // factored out into a different function.\n-        let (alignment, hash_offset, size, oflo) = calculate_allocation(hashes_size,\n-                                                                        align_of::<HashUint>(),\n-                                                                        pairs_size,\n-                                                                        align_of::<(K, V)>());\n+        let (alignment, size, oflo) = calculate_allocation(hashes_size,\n+                                                           align_of::<HashUint>(),\n+                                                           pairs_size,\n+                                                           align_of::<(K, V)>());\n         assert!(!oflo, \"capacity overflow\");\n \n         // One check for overflow that covers calculation and rounding of size.\n@@ -784,7 +783,7 @@ impl<K, V> RawTable<K, V> {\n         let buffer = Heap.alloc(Layout::from_size_align(size, alignment).unwrap())\n             .unwrap_or_else(|e| Heap.oom(e));\n \n-        let hashes = buffer.offset(hash_offset as isize) as *mut HashUint;\n+        let hashes = buffer as *mut HashUint;\n \n         RawTable {\n             capacity_mask: capacity.wrapping_sub(1),\n@@ -1183,10 +1182,10 @@ unsafe impl<#[may_dangle] K, #[may_dangle] V> Drop for RawTable<K, V> {\n \n         let hashes_size = self.capacity() * size_of::<HashUint>();\n         let pairs_size = self.capacity() * size_of::<(K, V)>();\n-        let (align, _, size, oflo) = calculate_allocation(hashes_size,\n-                                                          align_of::<HashUint>(),\n-                                                          pairs_size,\n-                                                          align_of::<(K, V)>());\n+        let (align, size, oflo) = calculate_allocation(hashes_size,\n+                                                       align_of::<HashUint>(),\n+                                                       pairs_size,\n+                                                       align_of::<(K, V)>());\n \n         debug_assert!(!oflo, \"should be impossible\");\n "}]}