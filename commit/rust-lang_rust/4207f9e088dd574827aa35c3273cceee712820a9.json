{"sha": "4207f9e088dd574827aa35c3273cceee712820a9", "node_id": "C_kwDOAAsO6NoAKDQyMDdmOWUwODhkZDU3NDgyN2FhMzVjMzI3M2NjZWVlNzEyODIwYTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T13:10:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T13:10:32Z"}, "message": "Auto merge of #2604 - RalfJung:ret-scalar, r=RalfJung\n\nuse Scalar return types for Windows shims\n\nI started doing this while working on https://github.com/rust-lang/miri/issues/2595; now I don't need the rest of this patch but this part still makes sense.", "tree": {"sha": "fc66c30948ca7bc4b9ab04affdcb2b82e224a899", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc66c30948ca7bc4b9ab04affdcb2b82e224a899"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4207f9e088dd574827aa35c3273cceee712820a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4207f9e088dd574827aa35c3273cceee712820a9", "html_url": "https://github.com/rust-lang/rust/commit/4207f9e088dd574827aa35c3273cceee712820a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4207f9e088dd574827aa35c3273cceee712820a9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "314ff050156cc8f5cb60a13e5d26966257245a22", "url": "https://api.github.com/repos/rust-lang/rust/commits/314ff050156cc8f5cb60a13e5d26966257245a22", "html_url": "https://github.com/rust-lang/rust/commit/314ff050156cc8f5cb60a13e5d26966257245a22"}, {"sha": "804cf26cc77678afdc5fef2f5df33b119cd3145d", "url": "https://api.github.com/repos/rust-lang/rust/commits/804cf26cc77678afdc5fef2f5df33b119cd3145d", "html_url": "https://github.com/rust-lang/rust/commit/804cf26cc77678afdc5fef2f5df33b119cd3145d"}], "stats": {"total": 74, "additions": 39, "deletions": 35}, "files": [{"sha": "036f06bde0ae21fd115eb64dee1c1e4d9ea32d87", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=4207f9e088dd574827aa35c3273cceee712820a9", "patch": "@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         name_op: &OpTy<'tcx, Provenance>, // LPCWSTR\n         buf_op: &OpTy<'tcx, Provenance>,  // LPWSTR\n         size_op: &OpTy<'tcx, Provenance>, // DWORD\n-    ) -> InterpResult<'tcx, u32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         // ^ Returns DWORD (u32 on Windows)\n \n         let this = self.eval_context_mut();\n@@ -165,12 +165,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let buf_ptr = this.read_pointer(buf_op)?;\n                 // `buf_size` represents the size in characters.\n                 let buf_size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n-                windows_check_buffer_size(this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?)\n+                Scalar::from_u32(windows_check_buffer_size(\n+                    this.write_os_str_to_wide_str(&var, buf_ptr, buf_size)?,\n+                ))\n             }\n             None => {\n                 let envvar_not_found = this.eval_windows(\"c\", \"ERROR_ENVVAR_NOT_FOUND\")?;\n                 this.set_last_error(envvar_not_found)?;\n-                0 // return zero upon failure\n+                Scalar::from_u32(0) // return zero upon failure\n             }\n         })\n     }\n@@ -200,14 +202,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn FreeEnvironmentStringsW(\n         &mut self,\n         env_block_op: &OpTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, i32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n         let env_block_ptr = this.read_pointer(env_block_op)?;\n         let result = this.deallocate_ptr(env_block_ptr, None, MiriMemoryKind::Runtime.into());\n         // If the function succeeds, the return value is nonzero.\n-        Ok(i32::from(result.is_ok()))\n+        Ok(Scalar::from_i32(i32::from(result.is_ok())))\n     }\n \n     fn setenv(\n@@ -249,7 +251,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         &mut self,\n         name_op: &OpTy<'tcx, Provenance>,  // LPCWSTR\n         value_op: &OpTy<'tcx, Provenance>, // LPCWSTR\n-    ) -> InterpResult<'tcx, i32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetEnvironmentVariableW\");\n \n@@ -272,15 +274,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 this.deallocate_ptr(var, None, MiriMemoryKind::Runtime.into())?;\n                 this.update_environ()?;\n             }\n-            Ok(1) // return non-zero on success\n+            Ok(Scalar::from_i32(1)) // return non-zero on success\n         } else {\n             let value = this.read_os_str_from_wide_str(value_ptr)?;\n             let var_ptr = alloc_env_var_as_wide_str(&name, &value, this)?;\n             if let Some(var) = this.machine.env_vars.map.insert(name, var_ptr) {\n                 this.deallocate_ptr(var, None, MiriMemoryKind::Runtime.into())?;\n             }\n             this.update_environ()?;\n-            Ok(1) // return non-zero on success\n+            Ok(Scalar::from_i32(1)) // return non-zero on success\n         }\n     }\n \n@@ -347,7 +349,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         &mut self,\n         size_op: &OpTy<'tcx, Provenance>, // DWORD\n         buf_op: &OpTy<'tcx, Provenance>,  // LPTSTR\n-    ) -> InterpResult<'tcx, u32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetCurrentDirectoryW\");\n \n@@ -357,16 +359,18 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n             this.reject_in_isolation(\"`GetCurrentDirectoryW`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n-            return Ok(0);\n+            return Ok(Scalar::from_u32(0));\n         }\n \n         // If we cannot get the current directory, we return 0\n         match env::current_dir() {\n             Ok(cwd) =>\n-                return Ok(windows_check_buffer_size(this.write_path_to_wide_str(&cwd, buf, size)?)),\n+                return Ok(Scalar::from_u32(windows_check_buffer_size(\n+                    this.write_path_to_wide_str(&cwd, buf, size)?,\n+                ))),\n             Err(e) => this.set_last_error_from_io_error(e.kind())?,\n         }\n-        Ok(0)\n+        Ok(Scalar::from_u32(0))\n     }\n \n     fn chdir(&mut self, path_op: &OpTy<'tcx, Provenance>) -> InterpResult<'tcx, i32> {\n@@ -395,7 +399,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn SetCurrentDirectoryW(\n         &mut self,\n         path_op: &OpTy<'tcx, Provenance>, // LPCTSTR\n-    ) -> InterpResult<'tcx, i32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         // ^ Returns BOOL (i32 on Windows)\n \n         let this = self.eval_context_mut();\n@@ -407,14 +411,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             this.reject_in_isolation(\"`SetCurrentDirectoryW`\", reject_with)?;\n             this.set_last_error_from_io_error(ErrorKind::PermissionDenied)?;\n \n-            return Ok(0);\n+            return Ok(Scalar::from_i32(0));\n         }\n \n         match env::set_current_dir(path) {\n-            Ok(()) => Ok(1),\n+            Ok(()) => Ok(Scalar::from_i32(1)),\n             Err(e) => {\n                 this.set_last_error_from_io_error(e.kind())?;\n-                Ok(0)\n+                Ok(Scalar::from_i32(0))\n             }\n         }\n     }"}, {"sha": "617f90dfaa59fb602a7940a03c2c1069a9c667b0", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=4207f9e088dd574827aa35c3273cceee712820a9", "patch": "@@ -119,7 +119,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn QueryPerformanceCounter(\n         &mut self,\n         lpPerformanceCount_op: &OpTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, i32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"windows\", \"QueryPerformanceCounter\");\n@@ -134,14 +134,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             Scalar::from_i64(qpc),\n             &this.deref_operand(lpPerformanceCount_op)?.into(),\n         )?;\n-        Ok(-1) // return non-zero on success\n+        Ok(Scalar::from_i32(-1)) // return non-zero on success\n     }\n \n     #[allow(non_snake_case)]\n     fn QueryPerformanceFrequency(\n         &mut self,\n         lpFrequency_op: &OpTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, i32> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n \n         this.assert_target_os(\"windows\", \"QueryPerformanceFrequency\");\n@@ -155,7 +155,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             Scalar::from_i64(1_000_000_000),\n             &this.deref_operand(lpFrequency_op)?.into(),\n         )?;\n-        Ok(-1) // Return non-zero on success\n+        Ok(Scalar::from_i32(-1)) // Return non-zero on success\n     }\n \n     fn mach_absolute_time(&self) -> InterpResult<'tcx, Scalar<Provenance>> {"}, {"sha": "b0670358f9ca4c98493c65326db78f247a51d1c3", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=4207f9e088dd574827aa35c3273cceee712820a9", "patch": "@@ -37,13 +37,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [name, buf, size] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetEnvironmentVariableW(name, buf, size)?;\n-                this.write_scalar(Scalar::from_u32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"SetEnvironmentVariableW\" => {\n                 let [name, value] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.SetEnvironmentVariableW(name, value)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"GetEnvironmentStringsW\" => {\n                 let [] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n@@ -54,19 +54,19 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [env_block] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.FreeEnvironmentStringsW(env_block)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"GetCurrentDirectoryW\" => {\n                 let [size, buf] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.GetCurrentDirectoryW(size, buf)?;\n-                this.write_scalar(Scalar::from_u32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"SetCurrentDirectoryW\" => {\n                 let [path] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.SetCurrentDirectoryW(path)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n \n             // Allocation\n@@ -218,14 +218,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 let [lpPerformanceCount] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.QueryPerformanceCounter(lpPerformanceCount)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"QueryPerformanceFrequency\" => {\n                 #[allow(non_snake_case)]\n                 let [lpFrequency] =\n                     this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let result = this.QueryPerformanceFrequency(lpFrequency)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n+                this.write_scalar(result, dest)?;\n             }\n             \"Sleep\" => {\n                 let [timeout] =\n@@ -246,7 +246,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"TryAcquireSRWLockExclusive\" => {\n                 let [ptr] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let ret = this.TryAcquireSRWLockExclusive(ptr)?;\n-                this.write_scalar(Scalar::from_u8(ret), dest)?;\n+                this.write_scalar(ret, dest)?;\n             }\n             \"AcquireSRWLockShared\" => {\n                 let [ptr] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n@@ -259,7 +259,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"TryAcquireSRWLockShared\" => {\n                 let [ptr] = this.check_shim(abi, Abi::System { unwind: false }, link_name, args)?;\n                 let ret = this.TryAcquireSRWLockShared(ptr)?;\n-                this.write_scalar(Scalar::from_u8(ret), dest)?;\n+                this.write_scalar(ret, dest)?;\n             }\n \n             // Dynamic symbol loading"}, {"sha": "88b117c54be7cb7219440c6996c7d94e44ec0cd2", "filename": "src/tools/miri/src/shims/windows/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4207f9e088dd574827aa35c3273cceee712820a9/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fsync.rs?ref=4207f9e088dd574827aa35c3273cceee712820a9", "patch": "@@ -58,17 +58,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn TryAcquireSRWLockExclusive(\n         &mut self,\n         lock_op: &OpTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, u8> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n         let id = srwlock_get_or_create_id(this, lock_op)?;\n         let active_thread = this.get_active_thread();\n \n         if this.rwlock_is_locked(id) {\n             // Lock is already held.\n-            Ok(0)\n+            Ok(Scalar::from_u8(0))\n         } else {\n             this.rwlock_writer_lock(id, active_thread);\n-            Ok(1)\n+            Ok(Scalar::from_u8(1))\n         }\n     }\n \n@@ -107,16 +107,16 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn TryAcquireSRWLockShared(\n         &mut self,\n         lock_op: &OpTy<'tcx, Provenance>,\n-    ) -> InterpResult<'tcx, u8> {\n+    ) -> InterpResult<'tcx, Scalar<Provenance>> {\n         let this = self.eval_context_mut();\n         let id = srwlock_get_or_create_id(this, lock_op)?;\n         let active_thread = this.get_active_thread();\n \n         if this.rwlock_is_write_locked(id) {\n-            Ok(0)\n+            Ok(Scalar::from_u8(0))\n         } else {\n             this.rwlock_reader_lock(id, active_thread);\n-            Ok(1)\n+            Ok(Scalar::from_u8(1))\n         }\n     }\n "}]}