{"sha": "a1d7c51d27734f5af98e96d26a50357d6e145009", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZDdjNTFkMjc3MzRmNWFmOThlOTZkMjZhNTAzNTdkNmUxNDUwMDk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-08-24T17:42:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "eddyb@lyken.rs", "date": "2021-09-17T22:42:43Z"}, "message": "ty::layout: move `trait FnAbiExt` to just before its `impl`.", "tree": {"sha": "7f41a200d7eac45031a190e03c2d167afc917a1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f41a200d7eac45031a190e03c2d167afc917a1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1d7c51d27734f5af98e96d26a50357d6e145009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1d7c51d27734f5af98e96d26a50357d6e145009", "html_url": "https://github.com/rust-lang/rust/commit/a1d7c51d27734f5af98e96d26a50357d6e145009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1d7c51d27734f5af98e96d26a50357d6e145009/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dd4ce80fb01d1ff5cb5002f08b7b3847b59e664", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dd4ce80fb01d1ff5cb5002f08b7b3847b59e664", "html_url": "https://github.com/rust-lang/rust/commit/9dd4ce80fb01d1ff5cb5002f08b7b3847b59e664"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "83bb6b15262fd23b024dbb5ed282c696788f3d59", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a1d7c51d27734f5af98e96d26a50357d6e145009/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1d7c51d27734f5af98e96d26a50357d6e145009/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=a1d7c51d27734f5af98e96d26a50357d6e145009", "patch": "@@ -2633,34 +2633,6 @@ impl<'tcx> ty::Instance<'tcx> {\n     }\n }\n \n-pub trait FnAbiExt<'tcx, C>\n-where\n-    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n-{\n-    /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n-    ///\n-    /// NB: this doesn't handle virtual calls - those should use `FnAbi::of_instance`\n-    /// instead, where the instance is an `InstanceDef::Virtual`.\n-    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n-\n-    /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n-    /// direct calls to an `fn`.\n-    ///\n-    /// NB: that includes virtual calls, which are represented by \"direct calls\"\n-    /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n-    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n-\n-    fn new_internal(\n-        cx: &C,\n-        sig: ty::PolyFnSig<'tcx>,\n-        extra_args: &[Ty<'tcx>],\n-        caller_location: Option<Ty<'tcx>>,\n-        codegen_fn_attr_flags: CodegenFnAttrFlags,\n-        make_self_ptr_thin: bool,\n-    ) -> Self;\n-    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n-}\n-\n /// Calculates whether a function's ABI can unwind or not.\n ///\n /// This takes two primary parameters:\n@@ -2816,6 +2788,34 @@ pub fn conv_from_spec_abi(tcx: TyCtxt<'_>, abi: SpecAbi) -> Conv {\n     }\n }\n \n+pub trait FnAbiExt<'tcx, C>\n+where\n+    C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,\n+{\n+    /// Compute a `FnAbi` suitable for indirect calls, i.e. to `fn` pointers.\n+    ///\n+    /// NB: this doesn't handle virtual calls - those should use `FnAbi::of_instance`\n+    /// instead, where the instance is an `InstanceDef::Virtual`.\n+    fn of_fn_ptr(cx: &C, sig: ty::PolyFnSig<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n+\n+    /// Compute a `FnAbi` suitable for declaring/defining an `fn` instance, and for\n+    /// direct calls to an `fn`.\n+    ///\n+    /// NB: that includes virtual calls, which are represented by \"direct calls\"\n+    /// to an `InstanceDef::Virtual` instance (of `<dyn Trait as Trait>::fn`).\n+    fn of_instance(cx: &C, instance: ty::Instance<'tcx>, extra_args: &[Ty<'tcx>]) -> Self;\n+\n+    fn new_internal(\n+        cx: &C,\n+        sig: ty::PolyFnSig<'tcx>,\n+        extra_args: &[Ty<'tcx>],\n+        caller_location: Option<Ty<'tcx>>,\n+        codegen_fn_attr_flags: CodegenFnAttrFlags,\n+        make_self_ptr_thin: bool,\n+    ) -> Self;\n+    fn adjust_for_abi(&mut self, cx: &C, abi: SpecAbi);\n+}\n+\n impl<'tcx, C> FnAbiExt<'tcx, C> for call::FnAbi<'tcx, Ty<'tcx>>\n where\n     C: LayoutOf<'tcx, LayoutOfResult = TyAndLayout<'tcx>> + HasTargetSpec,"}]}