{"sha": "3acb505ee560770c62bad5362f6caf7567d467b9", "node_id": "C_kwDOAAsO6NoAKDNhY2I1MDVlZTU2MDc3MGM2MmJhZDUzNjJmNmNhZjc1NjdkNDY3Yjk", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-15T00:33:00Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-28T08:21:36Z"}, "message": "Make the `c` feature for `compiler-builtins` opt-in instead of inferred\n\nThe build script for `compiler_builtins` doesn't support cross-compilation. I tried fixing it, but the cc crate itself\ndoesn't appear to support cross-compiling to windows either unless you use the -gnu toolchain:\n```\n  error occurred: Failed to find tool. Is `lib.exe` installed?\n```\n\nRather than trying to fix it or special-case the platforms without bugs,\nmake it opt-in instead of automatic.", "tree": {"sha": "ba4b3c5867ec0f5c12c001e3dae7ada3c7e24501", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4b3c5867ec0f5c12c001e3dae7ada3c7e24501"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3acb505ee560770c62bad5362f6caf7567d467b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3acb505ee560770c62bad5362f6caf7567d467b9", "html_url": "https://github.com/rust-lang/rust/commit/3acb505ee560770c62bad5362f6caf7567d467b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3acb505ee560770c62bad5362f6caf7567d467b9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88a192257ce110e7fb1732aa2b65e481f811db7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/88a192257ce110e7fb1732aa2b65e481f811db7a", "html_url": "https://github.com/rust-lang/rust/commit/88a192257ce110e7fb1732aa2b65e481f811db7a"}], "stats": {"total": 66, "additions": 44, "deletions": 22}, "files": [{"sha": "ff08dfc553d3be4e224e75c989983083fbc884bf", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -291,6 +291,10 @@ changelog-seen = 2\n # on this runtime, such as `-C profile-generate` or `-C instrument-coverage`).\n #profiler = false\n \n+# Use the optimized LLVM C intrinsics for `compiler_builtins`, rather than Rust intrinsics.\n+# Requires the LLVM submodule to be managed by bootstrap (i.e. not external).\n+#optimized-compiler-builtins = false\n+\n # Indicates whether the native libraries linked into Cargo will be statically\n # linked or not.\n #cargo-native-static = false"}, {"sha": "58cf3edc3171f2fd485591ce2333c71eff67df87", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -299,9 +299,7 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n \n     // Determine if we're going to compile in optimized C intrinsics to\n     // the `compiler-builtins` crate. These intrinsics live in LLVM's\n-    // `compiler-rt` repository, but our `src/llvm-project` submodule isn't\n-    // always checked out, so we need to conditionally look for this. (e.g. if\n-    // an external LLVM is used we skip the LLVM submodule checkout).\n+    // `compiler-rt` repository.\n     //\n     // Note that this shouldn't affect the correctness of `compiler-builtins`,\n     // but only its speed. Some intrinsics in C haven't been translated to Rust\n@@ -312,8 +310,15 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car\n     // If `compiler-rt` is available ensure that the `c` feature of the\n     // `compiler-builtins` crate is enabled and it's configured to learn where\n     // `compiler-rt` is located.\n-    let compiler_builtins_root = builder.src.join(\"src/llvm-project/compiler-rt\");\n-    let compiler_builtins_c_feature = if compiler_builtins_root.exists() {\n+    let compiler_builtins_c_feature = if builder.config.optimized_compiler_builtins {\n+        if !builder.is_rust_llvm(target) {\n+            panic!(\n+                \"need a managed LLVM submodule for optimized intrinsics support; unset `llvm-config` or `optimized-compiler-builtins`\"\n+            );\n+        }\n+\n+        builder.update_submodule(&Path::new(\"src\").join(\"llvm-project\"));\n+        let compiler_builtins_root = builder.src.join(\"src/llvm-project/compiler-rt\");\n         // Note that `libprofiler_builtins/build.rs` also computes this so if\n         // you're changing something here please also change that.\n         cargo.env(\"RUST_COMPILER_RT_ROOT\", &compiler_builtins_root);"}, {"sha": "1924ff09d4997e66c11e6cb4a40101bd4d82efe2", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -73,6 +73,8 @@ pub struct Config {\n     pub color: Color,\n     pub patch_binaries_for_nix: bool,\n     pub stage0_metadata: Stage0Metadata,\n+    /// Whether to use the `c` feature of the `compiler_builtins` crate.\n+    pub optimized_compiler_builtins: bool,\n \n     pub on_fail: Option<String>,\n     pub stage: u32,\n@@ -597,6 +599,7 @@ define_config! {\n         bench_stage: Option<u32> = \"bench-stage\",\n         patch_binaries_for_nix: Option<bool> = \"patch-binaries-for-nix\",\n         metrics: Option<bool> = \"metrics\",\n+        optimized_compiler_builtins: Option<bool> = \"optimized-compiler-builtins\",\n     }\n }\n \n@@ -916,6 +919,7 @@ impl Config {\n         set(&mut config.print_step_timings, build.print_step_timings);\n         set(&mut config.print_step_rusage, build.print_step_rusage);\n         set(&mut config.patch_binaries_for_nix, build.patch_binaries_for_nix);\n+        set(&mut config.optimized_compiler_builtins, build.optimized_compiler_builtins);\n \n         config.verbose = cmp::max(config.verbose, flags.verbose);\n "}, {"sha": "b66c08ea4c47f3abb54070f47eb10744ca3a1eb0", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -1838,23 +1838,21 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n ///\n /// Returns whether the files were actually copied.\n fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n-    if let Some(config) = builder.config.target_config.get(&target) {\n-        if config.llvm_config.is_some() && !builder.config.llvm_from_ci {\n-            // If the LLVM was externally provided, then we don't currently copy\n-            // artifacts into the sysroot. This is not necessarily the right\n-            // choice (in particular, it will require the LLVM dylib to be in\n-            // the linker's load path at runtime), but the common use case for\n-            // external LLVMs is distribution provided LLVMs, and in that case\n-            // they're usually in the standard search path (e.g., /usr/lib) and\n-            // copying them here is going to cause problems as we may end up\n-            // with the wrong files and isn't what distributions want.\n-            //\n-            // This behavior may be revisited in the future though.\n-            //\n-            // If the LLVM is coming from ourselves (just from CI) though, we\n-            // still want to install it, as it otherwise won't be available.\n-            return false;\n-        }\n+    if !builder.is_rust_llvm(target) {\n+        // If the LLVM was externally provided, then we don't currently copy\n+        // artifacts into the sysroot. This is not necessarily the right\n+        // choice (in particular, it will require the LLVM dylib to be in\n+        // the linker's load path at runtime), but the common use case for\n+        // external LLVMs is distribution provided LLVMs, and in that case\n+        // they're usually in the standard search path (e.g., /usr/lib) and\n+        // copying them here is going to cause problems as we may end up\n+        // with the wrong files and isn't what distributions want.\n+        //\n+        // This behavior may be revisited in the future though.\n+        //\n+        // If the LLVM is coming from ourselves (just from CI) though, we\n+        // still want to install it, as it otherwise won't be available.\n+        return false;\n     }\n \n     // On macOS, rustc (and LLVM tools) link to an unversioned libLLVM.dylib"}, {"sha": "637b5fa22f9744e3bdd666b552cf4034cce56d66", "filename": "src/ci/docker/host-x86_64/disabled/dist-x86_64-haiku/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdisabled%2Fdist-x86_64-haiku%2FDockerfile?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -47,4 +47,6 @@ ENV RUST_CONFIGURE_ARGS --disable-jemalloc \\\n   --set=$TARGET.cc=x86_64-unknown-haiku-gcc \\\n   --set=$TARGET.cxx=x86_64-unknown-haiku-g++ \\\n   --set=$TARGET.llvm-config=/bin/llvm-config-haiku\n+ENV EXTERNAL_LLVM 1\n+\n ENV SCRIPT python3 ../x.py dist --host=$HOST --target=$HOST"}, {"sha": "8250ec0c3119b22628099f4237f3de121b1efd11", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -129,4 +129,6 @@ ENV RUST_CONFIGURE_ARGS --enable-extended --enable-lld --disable-docs \\\n   --set target.wasm32-wasi.wasi-root=/wasm32-wasi \\\n   --musl-root-armv7=/musl-armv7\n \n+ENV EXTERNAL_LLVM 1\n+\n ENV SCRIPT python3 ../x.py dist --host='' --target $TARGETS"}, {"sha": "1289f116fe9fc590add28e9590490053baade4cc", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13-stage1/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13-stage1%2FDockerfile?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -29,6 +29,7 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since this builder is intentionally using a host\n # LLVM, rather than the typical src/llvm-project LLVM.\n ENV NO_DOWNLOAD_CI_LLVM 1\n+ENV EXTERNAL_LLVM 1\n \n # Using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "4b89a72baa1c538d46fc80d8ce4e43b386f1031c", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-llvm-13/Dockerfile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-llvm-13%2FDockerfile?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -40,6 +40,7 @@ RUN sh /scripts/sccache.sh\n # We are disabling CI LLVM since this builder is intentionally using a host\n # LLVM, rather than the typical src/llvm-project LLVM.\n ENV NO_DOWNLOAD_CI_LLVM 1\n+ENV EXTERNAL_LLVM 1\n \n # Using llvm-link-shared due to libffi issues -- see #34486\n ENV RUST_CONFIGURE_ARGS \\"}, {"sha": "9d98ce22498cd439ae65ff236309a6387f10bfeb", "filename": "src/ci/run.sh", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3acb505ee560770c62bad5362f6caf7567d467b9/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=3acb505ee560770c62bad5362f6caf7567d467b9", "patch": "@@ -69,6 +69,11 @@ RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set rust.codegen-units-std=1\"\n # space required for CI artifacts.\n RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --dist-compression-formats=xz\"\n \n+# Enable the `c` feature for compiler_builtins, but only when the `compiler-rt` source is available.\n+if [ \"$EXTERNAL_LLVM\" = \"\" ]; then\n+  RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --set build.optimized-compiler-builtins\"\n+fi\n+\n if [ \"$DIST_SRC\" = \"\" ]; then\n   RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --disable-dist-src\"\n fi"}]}