{"sha": "43acd233b396383a30860108e437829521eba114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYWNkMjMzYjM5NjM4M2EzMDg2MDEwOGU0Mzc4Mjk1MjFlYmExMTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-07T15:20:25Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-01-12T21:51:34Z"}, "message": "Add tester and a few tests", "tree": {"sha": "ef2e0e9e33abb66c13d80ff5acac675fe0b1505b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef2e0e9e33abb66c13d80ff5acac675fe0b1505b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43acd233b396383a30860108e437829521eba114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43acd233b396383a30860108e437829521eba114", "html_url": "https://github.com/rust-lang/rust/commit/43acd233b396383a30860108e437829521eba114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43acd233b396383a30860108e437829521eba114/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53d8ec0ecb6e16e25d7646d6f6c143ac2d8f1819", "url": "https://api.github.com/repos/rust-lang/rust/commits/53d8ec0ecb6e16e25d7646d6f6c143ac2d8f1819", "html_url": "https://github.com/rust-lang/rust/commit/53d8ec0ecb6e16e25d7646d6f6c143ac2d8f1819"}], "stats": {"total": 337, "additions": 324, "deletions": 13}, "files": [{"sha": "863437cac91d46340f4b40a2acff9c4d804803be", "filename": "src/test/rustdoc-js/basic.js", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,6 +10,16 @@\n \n const QUERY = 'String';\n \n-const EXPECTED = [\n-    {'all': ['std::string::String']},\n-];\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string', 'name': 'String' },\n+        { 'path': 'std::ffi', 'name': 'OsString' },\n+        { 'path': 'std::ffi', 'name': 'CString' },\n+    ],\n+    'in_args': [\n+        { 'path': 'std::str', 'name': 'eq' },\n+    ],\n+    'returned': [\n+        { 'path': 'std::string::String', 'name': 'add' },\n+    ],\n+};"}, {"sha": "3dac983b11b0ef0a27725dcf12a1c01d17d8ba18", "filename": "src/test/rustdoc-js/enum-option.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fenum-option.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'enum:Option';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::option', 'name': 'Option' },\n+    ],\n+};"}, {"sha": "10310d5eaf7b929dd6da6b009b4e190d7b54ca7c", "filename": "src/test/rustdoc-js/fn-forget.js", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffn-forget.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'fn:forget';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::mem', 'name': 'forget' },\n+        { 'path': 'std::fmt', 'name': 'format' },\n+    ],\n+};"}, {"sha": "920620a9aeed57489d1a4fbeda8b5d3446ab8dab", "filename": "src/test/rustdoc-js/from_u.js", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffrom_u.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'from_u';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::char', 'name': 'from_u32' },\n+        { 'path': 'std::str', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::boxed::Box', 'name': 'from_unique' },\n+        { 'path': 'std::i32', 'name': 'from_unsigned' },\n+        { 'path': 'std::i128', 'name': 'from_unsigned' },\n+    ],\n+};"}, {"sha": "811ba3474afa0bc6b82c8afb11da2f544183860b", "filename": "src/test/rustdoc-js/macro-print.js", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fmacro-print.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'macro:print';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'print' },\n+        { 'path': 'std', 'name': 'eprint' },\n+        { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprintln' },\n+    ],\n+};"}, {"sha": "3d08ee3736612a58e6b96a165cf2c206297db402", "filename": "src/test/rustdoc-js/string-from_ut.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'String::from_ut';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf16_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_unchecked' },\n+    ],\n+};"}, {"sha": "a91bc2d0da288e949fded9fdce7bcd34c68a3a2e", "filename": "src/test/rustdoc-js/struct-vec.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'struct:Vec';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::vec', 'name': 'Vec' },\n+        { 'path': 'std::collections', 'name': 'VecDeque' },\n+        { 'path': 'alloc::raw_vec', 'name': 'RawVec' },\n+    ],\n+};"}, {"sha": "9b7e151b1ffec96ec4f72cfb2a2a0a77f1345cae", "filename": "src/tools/rustdoc-js/tester.js", "status": "modified", "additions": 193, "deletions": 9, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/43acd233b396383a30860108e437829521eba114/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/43acd233b396383a30860108e437829521eba114/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=43acd233b396383a30860108e437829521eba114", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -12,15 +12,199 @@ const fs = require('fs');\n \n const TEST_FOLDER = 'src/test/rustdoc-js/';\n \n-function loadFile(filePath) {\n-    var src = fs.readFileSync(filePath, 'utf8').split('\\n').slice(15, -10).join('\\n');\n+// Stupid function extractor based on indent.\n+function extractFunction(content, functionName) {\n+    var x = content.split('\\n');\n+    var in_func = false;\n+    var indent = 0;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (in_func === false) {\n+            var splitter = \"function \" + functionName + \"(\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                in_func = true;\n+                indent = x[i].split(splitter)[0].length;\n+                lines.push(x[i]);\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].trim() === \"}\" && x[i].split(\"}\")[0].length === indent) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + arrayName + \" = [\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith('];')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + varName + \" = \";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith(';')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n     var Module = module.constructor;\n     var m = new Module();\n-    m._compile(src, filePath);\n-    return m;\n+    m._compile(content, \"tmp.js\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('enable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            let value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+function main(argv) {\n+    if (argv.length !== 3) {\n+        console.error(\"Expected toolchain to check as argument (for example 'x86_64-apple-darwin'\");\n+        return 1;\n+    }\n+    var toolchain = argv[2];\n+\n+    var mainJs = readFile(\"build/\" + toolchain + \"/doc/main.js\");\n+    var searchIndex = readFile(\"build/\" + toolchain + \"/doc/search-index.js\").split(\"\\n\");\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"TY_PRIMITIVE\", \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"levenshtein\", \"validateResult\", \"getQuery\", \"buildIndex\", \"execQuery\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    var errors = 0;\n+\n+    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+        const expected = loadedFile.EXPECTED;\n+        const query = loadedFile.QUERY;\n+        var results = loaded.execQuery(loaded.getQuery(query), index);\n+        process.stdout.write('Checking \"' + file + '\" ... ');\n+        var error_text = [];\n+        for (var key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!results.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            var entry = expected[key];\n+            var found = false;\n+            for (var i = 0; i < entry.length; ++i) {\n+                if (lookForEntry(entry[i], results[key]) === true) {\n+                    found = true;\n+                } else {\n+                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                    JSON.stringify(entry[i]) + \"'\");\n+                }\n+            }\n+        }\n+        if (error_text.length !== 0) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(error_text.join(\"\\n\"));\n+        } else {\n+            console.log(\"OK\");\n+        }\n+    });\n+    return errors;\n }\n \n-fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n-    var file = require(TEST_FOLDER + file);\n-    const expected = file.EXPECTED;\n-});\n+process.exit(main(process.argv));"}]}