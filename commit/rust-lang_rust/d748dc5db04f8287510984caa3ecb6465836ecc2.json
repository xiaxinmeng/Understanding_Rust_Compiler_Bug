{"sha": "d748dc5db04f8287510984caa3ecb6465836ecc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDhkYzVkYjA0ZjgyODc1MTA5ODRjYWEzZWNiNjQ2NTgzNmVjYzI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-09T14:07:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:51:10Z"}, "message": "extract `query_result_substitution` helper", "tree": {"sha": "082cbbb03484d7916c86e9b24e04690f7c1f2ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/082cbbb03484d7916c86e9b24e04690f7c1f2ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d748dc5db04f8287510984caa3ecb6465836ecc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d748dc5db04f8287510984caa3ecb6465836ecc2", "html_url": "https://github.com/rust-lang/rust/commit/d748dc5db04f8287510984caa3ecb6465836ecc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d748dc5db04f8287510984caa3ecb6465836ecc2/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75e3a9c8fd4283ab797b5bef7e2a36eda7853cec", "url": "https://api.github.com/repos/rust-lang/rust/commits/75e3a9c8fd4283ab797b5bef7e2a36eda7853cec", "html_url": "https://github.com/rust-lang/rust/commit/75e3a9c8fd4283ab797b5bef7e2a36eda7853cec"}], "stats": {"total": 68, "additions": 51, "deletions": 17}, "files": [{"sha": "d40daf73115fcedf2aeb8decfbb2d97aaae77b69", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 51, "deletions": 17, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/d748dc5db04f8287510984caa3ecb6465836ecc2/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d748dc5db04f8287510984caa3ecb6465836ecc2/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=d748dc5db04f8287510984caa3ecb6465836ecc2", "patch": "@@ -152,6 +152,49 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         original_values: &CanonicalVarValues<'tcx>,\n         query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n     ) -> InferResult<'tcx, R>\n+    where\n+        R: Debug + TypeFoldable<'tcx>,\n+    {\n+        let InferOk { value: result_subst, mut obligations } = self.query_result_substitution(\n+            cause,\n+            param_env,\n+            original_values,\n+            query_result,\n+        )?;\n+\n+        obligations.extend(self.query_region_constraints_into_obligations(\n+            cause,\n+            param_env,\n+            &query_result.value.region_constraints,\n+            &result_subst,\n+        ));\n+\n+        let user_result: R =\n+            query_result.substitute_projected(self.tcx, &result_subst, |q_r| &q_r.value);\n+\n+        Ok(InferOk {\n+            value: user_result,\n+            obligations,\n+        })\n+    }\n+\n+    /// Given the original values and the (canonicalized) result from\n+    /// computing a query, returns a substitution that can be applied\n+    /// to the query result to convert the result back into the\n+    /// original namespace.\n+    ///\n+    /// The substitution also comes accompanied with subobligations\n+    /// that arose from unification; these might occur if (for\n+    /// example) we are doing lazy normalization and the value\n+    /// assigned to a type variable is unified with an unnormalized\n+    /// projection.\n+    pub fn query_result_substitution<R>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        original_values: &CanonicalVarValues<'tcx>,\n+        query_result: &Canonical<'tcx, QueryResult<'tcx, R>>,\n+    ) -> InferResult<'tcx, CanonicalVarValues<'tcx>>\n     where\n         R: Debug + TypeFoldable<'tcx>,\n     {\n@@ -201,7 +244,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // Create a result substitution: if we found a value for a\n         // given variable in the loop above, use that. Otherwise, use\n         // a fresh inference variable.\n-        let result_subst = &CanonicalVarValues {\n+        let result_subst = CanonicalVarValues {\n             var_values: query_result\n                 .variables\n                 .iter()\n@@ -217,25 +260,16 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         // the input with the value found in the query\n         // post-substitution. Often, but not always, this is a no-op,\n         // because we already found the mapping in the first step.\n-        let substituted_values = |index: CanonicalVar| -> Kind<'tcx> {\n-            query_result.substitute_projected(self.tcx, result_subst, |v| &v.var_values[index])\n+        let obligations = {\n+            let substituted_values = |index: CanonicalVar| -> Kind<'tcx> {\n+                query_result.substitute_projected(self.tcx, &result_subst, |v| &v.var_values[index])\n+            };\n+            self.unify_canonical_vars(cause, param_env, original_values, substituted_values)?\n+                .into_obligations()\n         };\n-        let mut obligations = self\n-            .unify_canonical_vars(cause, param_env, original_values, substituted_values)?\n-            .into_obligations();\n-\n-        obligations.extend(self.query_region_constraints_into_obligations(\n-            cause,\n-            param_env,\n-            &query_result.value.region_constraints,\n-            result_subst,\n-        ));\n-\n-        let user_result: R =\n-            query_result.substitute_projected(self.tcx, result_subst, |q_r| &q_r.value);\n \n         Ok(InferOk {\n-            value: user_result,\n+            value: result_subst,\n             obligations,\n         })\n     }"}]}