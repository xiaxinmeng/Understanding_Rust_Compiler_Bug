{"sha": "aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "node_id": "C_kwDOAAsO6NoAKGFhNjc5NWUyZDRjZGFlNmFmMmVhODU0NzQ0YzNiZWMyZWIzMGQxNmU", "commit": {"author": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2021-12-25T13:35:11Z"}, "committer": {"name": "woppopo", "email": "woppopo@protonmail.com", "date": "2022-01-23T06:13:44Z"}, "message": "Add `intrinsics::const_deallocate`", "tree": {"sha": "12660e39d70a67da072f45f3e3bee29a04020979", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12660e39d70a67da072f45f3e3bee29a04020979"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "html_url": "https://github.com/rust-lang/rust/commit/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/comments", "author": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilasta", "id": 77098789, "node_id": "MDQ6VXNlcjc3MDk4Nzg5", "avatar_url": "https://avatars.githubusercontent.com/u/77098789?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilasta", "html_url": "https://github.com/lilasta", "followers_url": "https://api.github.com/users/lilasta/followers", "following_url": "https://api.github.com/users/lilasta/following{/other_user}", "gists_url": "https://api.github.com/users/lilasta/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilasta/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilasta/subscriptions", "organizations_url": "https://api.github.com/users/lilasta/orgs", "repos_url": "https://api.github.com/users/lilasta/repos", "events_url": "https://api.github.com/users/lilasta/events{/privacy}", "received_events_url": "https://api.github.com/users/lilasta/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10c4c4afec6dfc483af6efb7019941bab9a51a29", "url": "https://api.github.com/repos/rust-lang/rust/commits/10c4c4afec6dfc483af6efb7019941bab9a51a29", "html_url": "https://github.com/rust-lang/rust/commit/10c4c4afec6dfc483af6efb7019941bab9a51a29"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "62eaf3333404ebdea1ed708d4430460f1d8f7c2b", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -347,6 +347,23 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 )?;\n                 ecx.write_pointer(ptr, dest)?;\n             }\n+            sym::const_deallocate => {\n+                let ptr = ecx.read_pointer(&args[0])?;\n+                let size = ecx.read_scalar(&args[1])?.to_machine_usize(ecx)?;\n+                let align = ecx.read_scalar(&args[2])?.to_machine_usize(ecx)?;\n+\n+                let size = Size::from_bytes(size);\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n+                };\n+\n+                ecx.memory.deallocate(\n+                    ptr,\n+                    Some((size, align)),\n+                    interpret::MemoryKind::Machine(MemoryKind::Heap),\n+                )?;\n+            }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!(\n                     \"calling intrinsic `{}`\","}, {"sha": "c87bb1d57471ae54b9e72a5929bc8e38bfa88c0c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -460,6 +460,7 @@ symbols! {\n         const_async_blocks,\n         const_compare_raw_pointers,\n         const_constructor,\n+        const_deallocate,\n         const_eval_limit,\n         const_eval_select,\n         const_eval_select_ct,"}, {"sha": "74f6f50d41289c83fb359418989117fb98ebe92d", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -297,6 +297,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::const_allocate => {\n                 (0, vec![tcx.types.usize, tcx.types.usize], tcx.mk_mut_ptr(tcx.types.u8))\n             }\n+            sym::const_deallocate => (\n+                0,\n+                vec![tcx.mk_mut_ptr(tcx.types.u8), tcx.types.usize, tcx.types.usize],\n+                tcx.mk_unit(),\n+            ),\n \n             sym::ptr_offset_from => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)"}, {"sha": "10b5e06fc505c6eda8352d944a2707cad5454a9b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -1918,6 +1918,12 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n \n+    /// Deallocate a memory which allocated by `intrinsics::const_allocate` at compile time.\n+    /// Should not be called at runtime.\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn const_deallocate(ptr: *mut u8, size: usize, align: usize);\n+\n     /// Determines whether the raw bytes of the two values are equal.\n     ///\n     /// This is particularly handy for arrays, since it allows things like just"}, {"sha": "b7c2b752644292e4e151c7f02ef80031dceba4f9", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+};\n+\n+fn main() {}"}, {"sha": "b6d89a58dce7bde266d6f9b85b324fd748482f7c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,22 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_mut_refs)]\n+\n+use std::intrinsics;\n+\n+const _X: &'static u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    &*ptr\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Y: u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    let reference = &*ptr;\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    *reference\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "4eb1c42e1f7670ab9756251047636fc958bdf8a1", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:10:5\n+   |\n+LL |     &*ptr\n+   |     ^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:18:5\n+   |\n+LL |     *reference\n+   |     ^^^^^^^^^^ pointer to alloc4 was dereferenced after this allocation got freed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4010b476990dcc4bf7355fa50b36118e67bf208c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,13 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "8177a08504b0b32779434cfc4e514c1059d31c4e", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_duplicate.rs:9:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "031d70fdc8897489f9f87c43453c83601694c9ea", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,29 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 2);\n+    //~^ error: evaluation of constant value failed\n+};\n+const _Y: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 2, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Z: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 3, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _W: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 3);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "650b409b1908a30a7fda38572f080c8ec8d44cf6", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aa6795e2d4cdae6af2ea854744c3bec2eb30d16e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr?ref=aa6795e2d4cdae6af2ea854744c3bec2eb30d16e", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:8:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc2 has size 4 and alignment 4, but gave size 4 and alignment 2\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:13:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 2, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc4 has size 4 and alignment 4, but gave size 2 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:19:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 3, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc6 has size 4 and alignment 4, but gave size 3 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:25:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ align has to be a power of 2, `3` is not a power of 2\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}]}