{"sha": "ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmM2VmYzc1OWVmMDg4NzNjYTNiMmQ1ZjFjZjBmM2I1YjBiNzkwMjA=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-18T14:57:39Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-18T14:57:39Z"}, "message": "initial implementation of the code inspector lint", "tree": {"sha": "bd45a6bbd26ad926c33f20427176797c73370dc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd45a6bbd26ad926c33f20427176797c73370dc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYBjhjAAoJEFbW7qD8Z6xGoykQAIT2/5SemHEDQEpfHQIASKDh\nKdCd4umDLNuux4rG4Agjn7F1goN5/mSk3WUT4SQzS57ZOC20G7rMVotFAig/Fm6+\n+FUcDu+9qqSI7zC0e+L6w8/+U1tpYaFo8dr30SwU3DSrlpvD4M4dtNKxDfbE+IK5\no0Jz4Tj5J1irJ/MB2RZMqVzx7WAagQ04zi0Ru+qpkRpRUaFk7eI1GyXqXrb/3DIE\ne7lMLrDMxarqRKfGpqHBDPrEW/D5BWwtjoQw0bOTHxDhCaVDsznNA6HXIAHVI61e\nshpRfZfMaGzu26cmaFbJrE+PQqUNj60GqW3BO7CpZzkT7+J9beYp8LZrEME0umOz\n+MvhJZrlBMul7JTQGYVMA7hC/yLo2vt5l/z+1q+Ib1Di+QnD+It/S9ayQKX5tKZ2\n08XfbDhTyIAcbLaSMN20V19Qvl8B/0CuMK7f3Y+JHqclSy/d9Rn18roaoyjUBIGa\nvxAa67z38OsLZcsytqsz1HFByfa5VdlhXX40AJnOCZSN28vwJ/PFDHPmcym+hi8p\nBzCFnJt8UtDIjkKfdBZmAWzHG6n7lS3AXHJ7ngaEn59vWzyE7pF0ci2TIZbAr2fh\nz+z6UoKmTkqQ2WHjO05oN9pLm0mACcK8XnKFUicYhe97ekip8BlhTC7jD3rAQR+Y\nhmNwfoMau2rIAPu+zoSA\n=9goM\n-----END PGP SIGNATURE-----", "payload": "tree bd45a6bbd26ad926c33f20427176797c73370dc9\nparent 4cf87a9d494456e20bbc3beb6a9922d4281c6661\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1476802659 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1476802659 +0200\n\ninitial implementation of the code inspector lint"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "html_url": "https://github.com/rust-lang/rust/commit/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cf87a9d494456e20bbc3beb6a9922d4281c6661", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cf87a9d494456e20bbc3beb6a9922d4281c6661", "html_url": "https://github.com/rust-lang/rust/commit/4cf87a9d494456e20bbc3beb6a9922d4281c6661"}], "stats": {"total": 181, "additions": 181, "deletions": 0}, "files": [{"sha": "a1dfbbc4e092abbccbfc5211e64a423121cfc8e4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "patch": "@@ -172,6 +172,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box serde::Serde);\n     reg.register_early_lint_pass(box utils::internal_lints::Clippy);\n     reg.register_late_lint_pass(box utils::internal_lints::LintWithoutLintPass::default());\n+    reg.register_late_lint_pass(box utils::inspector::Pass);\n     reg.register_late_lint_pass(box types::TypePass);\n     reg.register_late_lint_pass(box booleans::NonminimalBool);\n     reg.register_late_lint_pass(box eq_op::EqOp);"}, {"sha": "9bd658acd289b815ec81f848cfacca7533a22507", "filename": "clippy_lints/src/utils/inspector.rs", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "patch": "@@ -0,0 +1,179 @@\n+//! checks for attributes\n+\n+use rustc::lint::*;\n+use rustc::hir;\n+use syntax::ast::{Attribute, MetaItemKind};\n+\n+/// **What it does:** Dumps every ast/hir node which has the `#[inspect]` attribute\n+///\n+/// **Why is this bad?** \ud83d\ude08\n+///\n+/// **Known problems:** \u2205\n+///\n+/// **Example:**\n+/// ```rust\n+/// #[inspect]\n+/// extern crate foo;\n+/// ```\n+declare_lint! {\n+    pub DEEP_CODE_INSPECTION,\n+    Warn,\n+    \"helper to dump info about code\"\n+}\n+\n+pub struct Pass;\n+\n+impl LintPass for Pass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(DEEP_CODE_INSPECTION)\n+    }\n+}\n+\n+#[allow(print_stdout, use_debug)]\n+impl LateLintPass for Pass {\n+    fn check_item(&mut self, cx: &LateContext, item: &hir::Item) {\n+        if !has_inspect_attr(&item.attrs) {\n+            return;\n+        }\n+        let did = cx.tcx.map.local_def_id(item.id);\n+        println!(\"item `{}`\", item.name);\n+        match item.vis {\n+            hir::Visibility::Public => println!(\"public\"),\n+            hir::Visibility::Crate => println!(\"visible crate wide\"),\n+            hir::Visibility::Restricted { ref path, .. } => println!(\"visible in module `{}`\", path),\n+            hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+        }\n+        match item.node {\n+            hir::ItemExternCrate(ref _renamed_from) => {\n+                if let Some(crate_id) = cx.tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n+                    let source = cx.tcx.sess.cstore.used_crate_source(crate_id);\n+                    if let Some(src) = source.dylib {\n+                        println!(\"extern crate dylib source: {:?}\", src.0);\n+                    }\n+                    if let Some(src) = source.rlib {\n+                        println!(\"extern crate rlib source: {:?}\", src.0);\n+                    }\n+                } else {\n+                    println!(\"weird extern crate without a crate id\");\n+                }\n+            }\n+            hir::ItemUse(ref path) => println!(\"{:?}\", path.node),\n+            hir::ItemStatic(..) => println!(\"static item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n+            hir::ItemConst(..) => println!(\"const item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n+            hir::ItemFn(..) => {\n+                let item_ty = cx.tcx.opt_lookup_item_type(did);\n+                println!(\"function: {:#?}\", item_ty);\n+            },\n+            hir::ItemMod(..) => println!(\"module\"),\n+            hir::ItemForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+            hir::ItemTy(..) => {\n+                println!(\"type alias: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+            },\n+            hir::ItemEnum(..) => {\n+                println!(\"enum definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+            },\n+            hir::ItemStruct(..) => {\n+                println!(\"struct definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+            },\n+            hir::ItemUnion(..) => {\n+                println!(\"union definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+            },\n+            hir::ItemTrait(..) => {\n+                println!(\"trait decl\");\n+                if cx.tcx.trait_has_default_impl(did) {\n+                    println!(\"trait has a default impl\");\n+                } else {\n+                    println!(\"trait has no default impl\");\n+                }\n+            },\n+            hir::ItemDefaultImpl(_, ref trait_ref) => {\n+                let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n+                println!(\"default impl for `{:?}`\", cx.tcx.item_path_str(trait_did));\n+            },\n+            hir::ItemImpl(_, _, _, Some(ref trait_ref), _, _) => {\n+                let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n+                println!(\"impl of trait `{:?}`\", cx.tcx.item_path_str(trait_did));\n+            },\n+            hir::ItemImpl(_, _, _, None, _, _) => {\n+                println!(\"impl\");\n+            },\n+        }\n+    }\n+\n+/*\n+    fn check_impl_item(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n+        if !has_inspect_attr(&item.attrs) {\n+            return;\n+        }\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n+        if !has_inspect_attr(&item.attrs) {\n+            return;\n+        }\n+    }\n+\n+    fn check_variant(&mut self, cx: &LateContext, var: &hir::Variant, _: &hir::Generics) {\n+        if !has_inspect_attr(&var.node.attrs) {\n+            return;\n+        }\n+    }\n+\n+    fn check_struct_field(&mut self, cx: &LateContext, field: &hir::StructField) {\n+        if !has_inspect_attr(&field.attrs) {\n+            return;\n+        }\n+    }\n+*/\n+\n+    fn check_expr(&mut self, cx: &LateContext, expr: &hir::Expr) {\n+        if !has_inspect_attr(&expr.attrs) {\n+            return;\n+        }\n+        println!(\"expression type: {}\", cx.tcx.node_id_to_type(expr.id));\n+    }\n+\n+    fn check_decl(&mut self, cx: &LateContext, decl: &hir::Decl) {\n+        if !has_inspect_attr(decl.node.attrs()) {\n+            return;\n+        }\n+        match decl.node {\n+            hir::DeclLocal(ref local) => {\n+                println!(\"local variable of type {}\", cx.tcx.node_id_to_type(local.id));\n+            },\n+            hir::DeclItem(_) => println!(\"item decl\"),\n+        }\n+    }\n+/*\n+    fn check_arm(&mut self, cx: &LateContext, arm: &hir::Arm) {\n+        if !has_inspect_attr(&arm.attrs) {\n+            return;\n+        }\n+    }\n+\n+    fn check_stmt(&mut self, cx: &LateContext, stmt: &hir::Stmt) {\n+        if !has_inspect_attr(stmt.node.attrs()) {\n+            return;\n+        }\n+    }\n+\n+    fn check_local(&mut self, cx: &LateContext, local: &hir::Local) {\n+        if !has_inspect_attr(&local.attrs) {\n+            return;\n+        }\n+    }\n+\n+    fn check_foreign_item(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n+        if !has_inspect_attr(&item.attrs) {\n+            return;\n+        }\n+    }\n+*/\n+}\n+\n+fn has_inspect_attr(attrs: &[Attribute]) -> bool {\n+    attrs.iter().any(|attr| match attr.node.value.node {\n+        MetaItemKind::Word(ref word) => word == \"inspect\",\n+        _ => false,\n+    })\n+}"}, {"sha": "903215c591cf2ce81636e003415eb88d2b19352f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ff3efc759ef08873ca3b2d5f1cf0f3b5b0b79020", "patch": "@@ -25,6 +25,7 @@ pub mod constants;\n mod hir;\n pub mod paths;\n pub mod sugg;\n+pub mod inspector;\n pub mod internal_lints;\n pub use self::hir::{SpanlessEq, SpanlessHash};\n "}]}