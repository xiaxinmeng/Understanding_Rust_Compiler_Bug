{"sha": "9897160523ab3e792f0309250da49d289d2a5598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTcxNjA1MjNhYjNlNzkyZjAzMDkyNTBkYTQ5ZDI4OWQyYTU1OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T20:46:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-04T20:46:38Z"}, "message": "auto merge of #15412 : dotdash/rust/builder, r=alexcrichton", "tree": {"sha": "176ca1faaeebf60e920bd44a3648a0abd0ae5101", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/176ca1faaeebf60e920bd44a3648a0abd0ae5101"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9897160523ab3e792f0309250da49d289d2a5598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9897160523ab3e792f0309250da49d289d2a5598", "html_url": "https://github.com/rust-lang/rust/commit/9897160523ab3e792f0309250da49d289d2a5598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9897160523ab3e792f0309250da49d289d2a5598/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "935da0739e71c5581e5e6abb564e18f894e0ec04", "url": "https://api.github.com/repos/rust-lang/rust/commits/935da0739e71c5581e5e6abb564e18f894e0ec04", "html_url": "https://github.com/rust-lang/rust/commit/935da0739e71c5581e5e6abb564e18f894e0ec04"}, {"sha": "db44468de0998814446fbca8b88ed57a5bf301b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/db44468de0998814446fbca8b88ed57a5bf301b0", "html_url": "https://github.com/rust-lang/rust/commit/db44468de0998814446fbca8b88ed57a5bf301b0"}], "stats": {"total": 81, "additions": 23, "deletions": 58}, "files": [{"sha": "6d719873c768c54d9dc1510b9d22cb298d06e7f1", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 23, "deletions": 58, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/9897160523ab3e792f0309250da49d289d2a5598/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9897160523ab3e792f0309250da49d289d2a5598/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=9897160523ab3e792f0309250da49d289d2a5598", "patch": "@@ -17,7 +17,6 @@ use middle::weak_lang_items;\n use middle::trans::base::push_ctxt;\n use middle::trans::base;\n use middle::trans::build::*;\n-use middle::trans::builder::noname;\n use middle::trans::cabi;\n use middle::trans::common::*;\n use middle::trans::machine;\n@@ -625,8 +624,8 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n             \"the block\".with_c_str(\n                 |s| llvm::LLVMAppendBasicBlockInContext(ccx.llcx, llwrapfn, s));\n \n-        let builder = ccx.builder.b;\n-        llvm::LLVMPositionBuilderAtEnd(builder, the_block);\n+        let builder = ccx.builder();\n+        builder.position_at_end(the_block);\n \n         // Array for the arguments we will pass to the rust function.\n         let mut llrust_args = Vec::new();\n@@ -666,23 +665,15 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                     debug!(\"out pointer, foreign={}\",\n                            ccx.tn.val_to_str(llforeign_outptr));\n                     let llrust_retptr =\n-                        llvm::LLVMBuildBitCast(builder,\n-                                               llforeign_outptr,\n-                                               llrust_ret_ty.ptr_to().to_ref(),\n-                                               noname());\n+                        builder.bitcast(llforeign_outptr, llrust_ret_ty.ptr_to());\n                     debug!(\"out pointer, foreign={} (casted)\",\n                            ccx.tn.val_to_str(llrust_retptr));\n                     llrust_args.push(llrust_retptr);\n                     return_alloca = None;\n                 }\n \n                 None => {\n-                    let slot = {\n-                        \"return_alloca\".with_c_str(\n-                            |s| llvm::LLVMBuildAlloca(builder,\n-                                                      llrust_ret_ty.to_ref(),\n-                                                      s))\n-                    };\n+                    let slot = builder.alloca(llrust_ret_ty, \"return_alloca\");\n                     debug!(\"out pointer, \\\n                             allocad={}, \\\n                             llrust_ret_ty={}, \\\n@@ -724,11 +715,8 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n             // pointer).  It makes adapting types easier, since we can\n             // always just bitcast pointers.\n             if !foreign_indirect {\n-                let lltemp =\n-                    llvm::LLVMBuildAlloca(\n-                        builder, val_ty(llforeign_arg).to_ref(), noname());\n-                llvm::LLVMBuildStore(\n-                    builder, llforeign_arg, lltemp);\n+                let lltemp = builder.alloca(val_ty(llforeign_arg), \"\");\n+                builder.store(llforeign_arg, lltemp);\n                 llforeign_arg = lltemp;\n             }\n \n@@ -737,15 +725,13 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n             // Rust expects.\n             if llforeign_arg_ty.cast.is_some() {\n                 assert!(!foreign_indirect);\n-                llforeign_arg = llvm::LLVMBuildBitCast(\n-                    builder, llforeign_arg,\n-                    llrust_ty.ptr_to().to_ref(), noname());\n+                llforeign_arg = builder.bitcast(llforeign_arg, llrust_ty.ptr_to());\n             }\n \n             let llrust_arg = if rust_indirect {\n                 llforeign_arg\n             } else {\n-                llvm::LLVMBuildLoad(builder, llforeign_arg, noname())\n+                builder.load(llforeign_arg)\n             };\n \n             debug!(\"llrust_arg {}{}: {}\", \"#\",\n@@ -755,13 +741,8 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         // Perform the call itself\n         debug!(\"calling llrustfn = {}, t = {}\", ccx.tn.val_to_str(llrustfn), t.repr(ccx.tcx()));\n-        let llrust_ret_val = llvm::LLVMBuildCall(builder, llrustfn, llrust_args.as_ptr(),\n-                                                 llrust_args.len() as c_uint, noname());\n-\n         let attributes = base::get_fn_llvm_attributes(ccx, t);\n-        for &(idx, attr) in attributes.iter() {\n-            llvm::LLVMAddCallSiteAttribute(llrust_ret_val, idx as c_uint, attr);\n-        }\n+        let llrust_ret_val = builder.call(llrustfn, llrust_args.as_slice(), attributes.as_slice());\n \n         // Get the return value where the foreign fn expects it.\n         let llforeign_ret_ty = match tys.fn_ty.ret_ty.cast {\n@@ -772,20 +753,16 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n             None if !tys.ret_def => {\n                 // Function returns `()` or `bot`, which in Rust is the LLVM\n                 // type \"{}\" but in foreign ABIs is \"Void\".\n-                llvm::LLVMBuildRetVoid(builder);\n+                builder.ret_void();\n             }\n \n             None if rust_uses_outptr => {\n                 // Rust uses an outpointer, but the foreign ABI does not. Load.\n                 let llrust_outptr = return_alloca.unwrap();\n                 let llforeign_outptr_casted =\n-                    llvm::LLVMBuildBitCast(builder,\n-                                           llrust_outptr,\n-                                           llforeign_ret_ty.ptr_to().to_ref(),\n-                                           noname());\n-                let llforeign_retval =\n-                    llvm::LLVMBuildLoad(builder, llforeign_outptr_casted, noname());\n-                llvm::LLVMBuildRet(builder, llforeign_retval);\n+                    builder.bitcast(llrust_outptr, llforeign_ret_ty.ptr_to());\n+                let llforeign_retval = builder.load(llforeign_outptr_casted);\n+                builder.ret(llforeign_retval);\n             }\n \n             None if llforeign_ret_ty != llrust_ret_ty => {\n@@ -795,43 +772,31 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n                 // right now we just use a temp memory location and\n                 // bitcast the pointer, which is the same thing the\n                 // old wrappers used to do.\n-                let lltemp =\n-                    llvm::LLVMBuildAlloca(\n-                        builder, llforeign_ret_ty.to_ref(), noname());\n-                let lltemp_casted =\n-                    llvm::LLVMBuildBitCast(builder,\n-                                           lltemp,\n-                                           llrust_ret_ty.ptr_to().to_ref(),\n-                                           noname());\n-                llvm::LLVMBuildStore(\n-                    builder, llrust_ret_val, lltemp_casted);\n-                let llforeign_retval =\n-                    llvm::LLVMBuildLoad(builder, lltemp, noname());\n-                llvm::LLVMBuildRet(builder, llforeign_retval);\n+                let lltemp = builder.alloca(llforeign_ret_ty, \"\");\n+                let lltemp_casted = builder.bitcast(lltemp, llrust_ret_ty.ptr_to());\n+                builder.store(llrust_ret_val, lltemp_casted);\n+                let llforeign_retval = builder.load(lltemp);\n+                builder.ret(llforeign_retval);\n             }\n \n             None => {\n                 // Neither ABI uses an outpointer, and the types\n                 // match. Easy peasy.\n-                llvm::LLVMBuildRet(builder, llrust_ret_val);\n+                builder.ret(llrust_ret_val);\n             }\n \n             Some(llforeign_outptr) if !rust_uses_outptr => {\n                 // Foreign ABI requires an out pointer, but Rust doesn't.\n                 // Store Rust return value.\n                 let llforeign_outptr_casted =\n-                    llvm::LLVMBuildBitCast(builder,\n-                                           llforeign_outptr,\n-                                           llrust_retptr_ty.to_ref(),\n-                                           noname());\n-                llvm::LLVMBuildStore(\n-                    builder, llrust_ret_val, llforeign_outptr_casted);\n-                llvm::LLVMBuildRetVoid(builder);\n+                    builder.bitcast(llforeign_outptr, llrust_retptr_ty);\n+                builder.store(llrust_ret_val, llforeign_outptr_casted);\n+                builder.ret_void();\n             }\n \n             Some(_) => {\n                 // Both ABIs use outpointers. Easy peasy.\n-                llvm::LLVMBuildRetVoid(builder);\n+                builder.ret_void();\n             }\n         }\n     }"}]}