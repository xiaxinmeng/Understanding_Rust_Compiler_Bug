{"sha": "05c57e0e6a667422c8a9159febbf0476f039f4fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YzU3ZTBlNmE2Njc0MjJjOGE5MTU5ZmViYmYwNDc2ZjAzOWY0ZmM=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T00:46:24Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-06-30T09:41:02Z"}, "message": "Remove Typer + ClosureTyper impls for BlockS", "tree": {"sha": "14cf75b8696d76ef1e5b0a65aac68a73d510a8df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14cf75b8696d76ef1e5b0a65aac68a73d510a8df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05c57e0e6a667422c8a9159febbf0476f039f4fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05c57e0e6a667422c8a9159febbf0476f039f4fc", "html_url": "https://github.com/rust-lang/rust/commit/05c57e0e6a667422c8a9159febbf0476f039f4fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05c57e0e6a667422c8a9159febbf0476f039f4fc/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2d7e904ca621b72a7445e666baba4b282d2bb7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d7e904ca621b72a7445e666baba4b282d2bb7d", "html_url": "https://github.com/rust-lang/rust/commit/e2d7e904ca621b72a7445e666baba4b282d2bb7d"}], "stats": {"total": 155, "additions": 32, "deletions": 123}, "files": [{"sha": "2798cfa43ddb7c22deea6cbe1125fc5b4f790946", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -110,8 +110,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     }\n \n     fn with_euv<'b, F, R>(&'b mut self, item_id: Option<ast::NodeId>, f: F) -> R where\n-        F: for<'t> FnOnce(&mut euv::ExprUseVisitor<'b, 't, 'tcx,\n-                                    infer::InferCtxt<'a, 'tcx>>) -> R,\n+        F: for<'t> FnOnce(&mut euv::ExprUseVisitor<'b, 't, 'b, 'tcx>) -> R,\n     {\n         let param_env = match item_id {\n             Some(item_id) => ty::ParameterEnvironment::for_item(self.tcx, item_id),"}, {"sha": "731e49192a82ac9d08f522ab2de9f8be9bf2614d", "filename": "src/librustc/middle/check_rvalues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_rvalues.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -41,8 +41,8 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n         {\n             // FIXME (@jroesch) change this to be an inference context\n             let param_env = ParameterEnvironment::for_item(self.tcx, fn_id);\n-            let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env), false);\n-            let mut delegate = RvalueContextDelegate { tcx: self.tcx, param_env: &infcx.parameter_environment };\n+            let infcx = infer::new_infer_ctxt(self.tcx, &self.tcx.tables, Some(param_env.clone()), false);\n+            let mut delegate = RvalueContextDelegate { tcx: self.tcx, param_env: &param_env };\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);\n         }"}, {"sha": "c8555d28e40a78343c9a234ad044538f1e2ed9b0", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -21,9 +21,10 @@ use self::TrackMatchMode::*;\n use self::OverloadedCallType::*;\n \n use middle::{def, region, pat_util};\n+use middle::infer;\n use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n-use middle::ty::{self};\n+use middle::ty::{self, ClosureTyper};\n use middle::ty::{MethodCall, MethodObject, MethodTraitObject};\n use middle::ty::{MethodOrigin, MethodParam, MethodTypeParam};\n use middle::ty::{MethodStatic, MethodStaticClosure};\n@@ -291,9 +292,9 @@ impl OverloadedCallType {\n // supplies types from the tree. After type checking is complete, you\n // can just use the tcx as the typer.\n \n-pub struct ExprUseVisitor<'d,'t,'tcx:'t,TYPER:'t> {\n-    typer: &'t TYPER,\n-    mc: mc::MemCategorizationContext<'t,TYPER>,\n+pub struct ExprUseVisitor<'d,'t,'a: 't, 'tcx:'a> {\n+    typer: &'t infer::InferCtxt<'a, 'tcx>,\n+    mc: mc::MemCategorizationContext<'t, 'a, 'tcx>,\n     delegate: &'d mut (Delegate<'tcx>+'d),\n }\n \n@@ -319,10 +320,10 @@ enum PassArgs {\n     ByRef,\n }\n \n-impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n+impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n     pub fn new(delegate: &'d mut Delegate<'tcx>,\n-               typer: &'t TYPER)\n-               -> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n+               typer: &'t infer::InferCtxt<'a, 'tcx>)\n+               -> ExprUseVisitor<'d,'t,'a, 'tcx> {\n         ExprUseVisitor {\n             typer: typer,\n             mc: mc::MemCategorizationContext::new(typer),"}, {"sha": "6ca1c22a2c22fab26d53db7a52bc72f21788853a", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -30,7 +30,7 @@ use middle::region::CodeExtent;\n use middle::subst;\n use middle::subst::Substs;\n use middle::subst::Subst;\n-use middle::traits::{self, FulfillmentContext, Normalized, MiscObligation,\n+use middle::traits::{self, FulfillmentContext, Normalized,\n                      SelectionContext, ObligationCause};\n use middle::ty::{TyVid, IntVid, FloatVid, RegionVid, UnconstrainedNumeric};\n use middle::ty::{self, Ty, HasTypeFlags};\n@@ -477,7 +477,7 @@ pub struct CombinedSnapshot {\n \n impl<'a, 'tcx> mc::Typer<'tcx> for InferCtxt<'a, 'tcx> {\n     fn node_ty(&self, id: ast::NodeId) -> McResult<Ty<'tcx>> {\n-        let ty = self.node_ty(id);\n+        let ty = self.node_type(id);\n         self.resolve_type_vars_or_error(&ty)\n     }\n \n@@ -1183,7 +1183,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                         .map(|method| resolve_ty(method.ty)))\n     }\n \n-    pub fn node_ty(&self, id: ast::NodeId) -> Ty<'tcx> {\n+    pub fn node_type(&self, id: ast::NodeId) -> Ty<'tcx> {\n         match self.tables.borrow().node_types.get(&id) {\n             Some(&t) => t,\n             // FIXME"}, {"sha": "867174ffbc5ba68f57be54345ba96c132116d34d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -73,10 +73,11 @@ pub use self::categorization::*;\n use self::Aliasability::*;\n \n use ast_map;\n+use middle::infer;\n use middle::check_const;\n use middle::def;\n use middle::region;\n-use middle::ty::{self, Ty};\n+use middle::ty::{self, Ty, ClosureTyper};\n use util::nodemap::NodeMap;\n \n use syntax::ast::{MutImmutable, MutMutable};\n@@ -255,13 +256,10 @@ impl ast_node for ast::Pat {\n     fn span(&self) -> Span { self.span }\n }\n \n-pub struct MemCategorizationContext<'t,TYPER:'t> {\n-    typer: &'t TYPER\n-}\n-\n-impl<'t,TYPER:'t> Copy for MemCategorizationContext<'t,TYPER> {}\n-impl<'t,TYPER:'t> Clone for MemCategorizationContext<'t,TYPER> {\n-    fn clone(&self) -> MemCategorizationContext<'t,TYPER> { *self }\n+#[derive(Copy, Clone)]\n+pub struct MemCategorizationContext<'t, 'a: 't, 'tcx : 'a> {\n+    pub typer: &'t infer::InferCtxt<'a, 'tcx>,\n+    // pub monomorphize: bool,\n }\n \n pub type McResult<T> = Result<T, ()>;\n@@ -391,13 +389,13 @@ impl MutabilityCategory {\n     }\n }\n \n-impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n-    pub fn new(typer: &'t TYPER) -> MemCategorizationContext<'t,TYPER> {\n+impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n+    pub fn new(typer: &'t infer::InferCtxt<'a, 'tcx>) -> MemCategorizationContext<'t, 'a, 'tcx> {\n         MemCategorizationContext { typer: typer }\n     }\n \n-    fn tcx(&self) -> &'t ty::ctxt<'tcx> {\n-        self.typer.tcx()\n+    fn tcx(&self) -> &'a ty::ctxt<'tcx> {\n+        self.typer.tcx\n     }\n \n     fn expr_ty(&self, expr: &ast::Expr) -> McResult<Ty<'tcx>> {\n@@ -1175,15 +1173,15 @@ impl<'t,'tcx,TYPER:Typer<'tcx>> MemCategorizationContext<'t,TYPER> {\n     }\n \n     pub fn cat_pattern<F>(&self, cmt: cmt<'tcx>, pat: &ast::Pat, mut op: F) -> McResult<()>\n-        where F: FnMut(&MemCategorizationContext<'t, TYPER>, cmt<'tcx>, &ast::Pat),\n+        where F: FnMut(&MemCategorizationContext<'t, 'a, 'tcx>, cmt<'tcx>, &ast::Pat),\n     {\n         self.cat_pattern_(cmt, pat, &mut op)\n     }\n \n     // FIXME(#19596) This is a workaround, but there should be a better way to do this\n     fn cat_pattern_<F>(&self, cmt: cmt<'tcx>, pat: &ast::Pat, op: &mut F)\n                        -> McResult<()>\n-        where F : FnMut(&MemCategorizationContext<'t, TYPER>, cmt<'tcx>, &ast::Pat),\n+        where F : FnMut(&MemCategorizationContext<'t, 'a, 'tcx>, cmt<'tcx>, &ast::Pat),\n     {\n         // Here, `cmt` is the categorization for the value being\n         // matched and pat is the pattern it is being matched against."}, {"sha": "bb7e95cd4ae44d7eb4db5f05c0c62d4953a35286", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -43,7 +43,6 @@\n #![feature(unicode)]\n #![feature(unicode)]\n #![feature(vec_push_all)]\n-#![feature(cell_extras)]\n \n #![allow(trivial_casts)]\n "}, {"sha": "a9617bd17c097e8cbf890c18e39489aebbbd8108", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -195,6 +195,7 @@ use middle::check_match;\n use middle::const_eval;\n use middle::def::{self, DefMap};\n use middle::expr_use_visitor as euv;\n+use middle::infer;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n use middle::pat_util::*;\n@@ -1350,7 +1351,8 @@ fn is_discr_reassigned(bcx: Block, discr: &ast::Expr, body: &ast::Expr) -> bool\n         reassigned: false\n     };\n     {\n-        let mut visitor = euv::ExprUseVisitor::new(&mut rc, bcx);\n+        let infcx = infer::new_infer_ctxt(bcx.tcx(), &bcx.tcx().tables, None, false);\n+        let mut visitor = euv::ExprUseVisitor::new(&mut rc, &infcx);\n         visitor.walk_expr(body);\n     }\n     rc.reassigned"}, {"sha": "598029b842b6473d29b3580e629b673fd2e66f6f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 1, "deletions": 91, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -22,7 +22,6 @@ use middle::cfg;\n use middle::def;\n use middle::infer;\n use middle::lang_items::LangItem;\n-use middle::mem_categorization as mc;\n use middle::mem_categorization::Typer;\n use middle::ty::ClosureTyper;\n use middle::region;\n@@ -48,7 +47,7 @@ use util::nodemap::{FnvHashMap, NodeMap};\n use arena::TypedArena;\n use libc::{c_uint, c_char};\n use std::ffi::CString;\n-use std::cell::{Cell, RefCell, Ref};\n+use std::cell::{Cell, RefCell};\n use std::result::Result as StdResult;\n use std::vec::Vec;\n use syntax::ast;\n@@ -577,95 +576,6 @@ impl<'blk, 'tcx> BlockS<'blk, 'tcx> {\n     }\n }\n \n-impl<'blk, 'tcx> mc::Typer<'tcx> for BlockS<'blk, 'tcx> {\n-    fn node_ty(&self, id: ast::NodeId) -> mc::McResult<Ty<'tcx>> {\n-        Ok(node_id_type(self, id))\n-    }\n-\n-    fn expr_ty_adjusted(&self, expr: &ast::Expr) -> mc::McResult<Ty<'tcx>> {\n-        Ok(expr_ty_adjusted(self, expr))\n-    }\n-\n-    fn node_method_ty(&self, method_call: ty::MethodCall) -> Option<Ty<'tcx>> {\n-        self.tcx()\n-            .tables\n-            .borrow()\n-            .method_map\n-            .get(&method_call)\n-            .map(|method| monomorphize_type(self, method.ty))\n-    }\n-\n-    fn node_method_origin(&self, method_call: ty::MethodCall)\n-                          -> Option<ty::MethodOrigin<'tcx>>\n-    {\n-        self.tcx()\n-            .tables\n-            .borrow()\n-            .method_map\n-            .get(&method_call)\n-            .map(|method| method.origin.clone())\n-    }\n-\n-    fn adjustments<'a>(&'a self) -> Ref<NodeMap<ty::AutoAdjustment<'tcx>>> {\n-        // FIXME (@jroesch): this is becuase we currently have a HR inference problem\n-        // in the snapshot that causes this code not to work.\n-        fn project_adjustments<'a, 'tcx>(tables: &'a ty::Tables<'tcx>) ->\n-            &'a NodeMap<ty::AutoAdjustment<'tcx>> {\n-            &tables.adjustments\n-        }\n-\n-        Ref::map(self.tcx().tables.borrow(), project_adjustments)\n-    }\n-\n-    fn is_method_call(&self, id: ast::NodeId) -> bool {\n-        self.tcx().tables.borrow().method_map.contains_key(&ty::MethodCall::expr(id))\n-    }\n-\n-    fn temporary_scope(&self, rvalue_id: ast::NodeId) -> Option<region::CodeExtent> {\n-        self.tcx().region_maps.temporary_scope(rvalue_id)\n-    }\n-\n-    fn upvar_capture(&self, upvar_id: ty::UpvarId) -> Option<ty::UpvarCapture> {\n-        Some(self.tcx().tables.borrow().upvar_capture_map.get(&upvar_id).unwrap().clone())\n-    }\n-\n-    fn type_moves_by_default(&self, ty: Ty<'tcx>, span: Span) -> bool {\n-        ty.moves_by_default(&self.fcx.param_env, span)\n-    }\n-}\n-\n-impl<'blk, 'tcx> ty::ClosureTyper<'tcx> for BlockS<'blk, 'tcx> {\n-    fn param_env<'a>(&'a self) -> &'a ty::ParameterEnvironment<'a, 'tcx> {\n-        &self.fcx.param_env\n-    }\n-\n-    fn closure_kind(&self,\n-                    def_id: ast::DefId)\n-                    -> Option<ty::ClosureKind>\n-    {\n-        let infcx = infer::normalizing_infer_ctxt(self.tcx(), &self.tcx().tables);\n-        infcx.closure_kind(def_id)\n-    }\n-\n-    fn closure_type(&self,\n-                    def_id: ast::DefId,\n-                    substs: &subst::Substs<'tcx>)\n-                    -> ty::ClosureTy<'tcx>\n-    {\n-        let infcx = infer::normalizing_infer_ctxt(self.tcx(), &self.tcx().tables);\n-        infcx.closure_type(def_id, substs)\n-    }\n-\n-    fn closure_upvars(&self,\n-                      def_id: ast::DefId,\n-                      substs: &Substs<'tcx>)\n-                      -> Option<Vec<ty::ClosureUpvar<'tcx>>>\n-    {\n-        let infcx = infer::new_infer_ctxt(self.tcx(), &self.tcx().tables, None, true);\n-        infcx.closure_upvars(def_id, substs)\n-    }\n-}\n-\n pub struct Result<'blk, 'tcx: 'blk> {\n     pub bcx: Block<'blk, 'tcx>,\n     pub val: ValueRef"}, {"sha": "a98bcc247edd5306c55e5796e31bfb5f991ed9c5", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05c57e0e6a667422c8a9159febbf0476f039f4fc/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=05c57e0e6a667422c8a9159febbf0476f039f4fc", "patch": "@@ -1101,8 +1101,8 @@ fn link_fn_args(rcx: &Rcx, body_scope: CodeExtent, args: &[ast::Arg]) {\n \n /// Link lifetimes of any ref bindings in `root_pat` to the pointers found in the discriminant, if\n /// needed.\n-fn link_pattern<'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n-                          mc: mc::MemCategorizationContext<InferCtxt<'a, 'tcx>>,\n+fn link_pattern<'t, 'a, 'tcx>(rcx: &Rcx<'a, 'tcx>,\n+                          mc: mc::MemCategorizationContext<'t, 'a, 'tcx>,\n                           discr_cmt: mc::cmt<'tcx>,\n                           root_pat: &ast::Pat) {\n     debug!(\"link_pattern(discr_cmt={:?}, root_pat={:?})\","}]}