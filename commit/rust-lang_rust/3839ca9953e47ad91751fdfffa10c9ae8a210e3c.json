{"sha": "3839ca9953e47ad91751fdfffa10c9ae8a210e3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4MzljYTk5NTNlNDdhZDkxNzUxZmRmZmZhMTBjOWFlOGEyMTBlM2M=", "commit": {"author": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2021-08-16T01:52:15Z"}, "committer": {"name": "TennyZhuang", "email": "zty0826@gmail.com", "date": "2021-09-16T18:55:12Z"}, "message": "Optimize unnecessary check in Vec::retain\n\nCo-authored-by: oxalica <oxalicc@pm.me>", "tree": {"sha": "5ff51521044835222de35875de1e62348b493e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ff51521044835222de35875de1e62348b493e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3839ca9953e47ad91751fdfffa10c9ae8a210e3c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3839ca9953e47ad91751fdfffa10c9ae8a210e3c", "html_url": "https://github.com/rust-lang/rust/commit/3839ca9953e47ad91751fdfffa10c9ae8a210e3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3839ca9953e47ad91751fdfffa10c9ae8a210e3c/comments", "author": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TennyZhuang", "id": 9161438, "node_id": "MDQ6VXNlcjkxNjE0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/9161438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TennyZhuang", "html_url": "https://github.com/TennyZhuang", "followers_url": "https://api.github.com/users/TennyZhuang/followers", "following_url": "https://api.github.com/users/TennyZhuang/following{/other_user}", "gists_url": "https://api.github.com/users/TennyZhuang/gists{/gist_id}", "starred_url": "https://api.github.com/users/TennyZhuang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TennyZhuang/subscriptions", "organizations_url": "https://api.github.com/users/TennyZhuang/orgs", "repos_url": "https://api.github.com/users/TennyZhuang/repos", "events_url": "https://api.github.com/users/TennyZhuang/events{/privacy}", "received_events_url": "https://api.github.com/users/TennyZhuang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20e14e4030744a3dc0e9bfc8ad2f17000ed748ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/20e14e4030744a3dc0e9bfc8ad2f17000ed748ce", "html_url": "https://github.com/rust-lang/rust/commit/20e14e4030744a3dc0e9bfc8ad2f17000ed748ce"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "6ad3bbf2f31639e3c26aaec771a632b7b2155db4", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3839ca9953e47ad91751fdfffa10c9ae8a210e3c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3839ca9953e47ad91751fdfffa10c9ae8a210e3c/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=3839ca9953e47ad91751fdfffa10c9ae8a210e3c", "patch": "@@ -1485,7 +1485,15 @@ impl<T, A: Allocator> Vec<T, A> {\n \n         let mut g = BackshiftOnDrop { v: self, processed_len: 0, deleted_cnt: 0, original_len };\n \n-        while g.processed_len < original_len {\n+        // process_one return a bool indicates whether the processing element should be retained.\n+        #[inline(always)]\n+        fn process_one<F, T, A: Allocator, const DELETED: bool>(\n+            f: &mut F,\n+            g: &mut BackshiftOnDrop<'_, T, A>,\n+        ) -> bool\n+        where\n+            F: FnMut(&T) -> bool,\n+        {\n             // SAFETY: Unchecked element must be valid.\n             let cur = unsafe { &mut *g.v.as_mut_ptr().add(g.processed_len) };\n             if !f(cur) {\n@@ -1495,9 +1503,9 @@ impl<T, A: Allocator> Vec<T, A> {\n                 // SAFETY: We never touch this element again after dropped.\n                 unsafe { ptr::drop_in_place(cur) };\n                 // We already advanced the counter.\n-                continue;\n+                return false;\n             }\n-            if g.deleted_cnt > 0 {\n+            if DELETED {\n                 // SAFETY: `deleted_cnt` > 0, so the hole slot must not overlap with current element.\n                 // We use copy for move, and never touch this element again.\n                 unsafe {\n@@ -1506,6 +1514,19 @@ impl<T, A: Allocator> Vec<T, A> {\n                 }\n             }\n             g.processed_len += 1;\n+            return true;\n+        }\n+\n+        // Stage 1: Nothing was deleted.\n+        while g.processed_len != original_len {\n+            if !process_one::<F, T, A, false>(&mut f, &mut g) {\n+                break;\n+            }\n+        }\n+\n+        // Stage 2: Some elements were deleted.\n+        while g.processed_len != original_len {\n+            process_one::<F, T, A, true>(&mut f, &mut g);\n         }\n \n         // All item are processed. This can be optimized to `set_len` by LLVM."}]}