{"sha": "a7527adf0855002dcbd1cb12309d4f7fbfd93e16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTI3YWRmMDg1NTAwMmRjYmQxY2IxMjMwOWQ0ZjdmYmZkOTNlMTY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T11:49:28Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-12T11:49:28Z"}, "message": "First (incomplete) const folding", "tree": {"sha": "b652d6f055d44aaa77290770644a1ee39ba5ae7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b652d6f055d44aaa77290770644a1ee39ba5ae7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7527adf0855002dcbd1cb12309d4f7fbfd93e16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7527adf0855002dcbd1cb12309d4f7fbfd93e16", "html_url": "https://github.com/rust-lang/rust/commit/a7527adf0855002dcbd1cb12309d4f7fbfd93e16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7527adf0855002dcbd1cb12309d4f7fbfd93e16/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bcd01ff47a24253eccbd722d1566537a5576e52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bcd01ff47a24253eccbd722d1566537a5576e52", "html_url": "https://github.com/rust-lang/rust/commit/8bcd01ff47a24253eccbd722d1566537a5576e52"}], "stats": {"total": 131, "additions": 131, "deletions": 0}, "files": [{"sha": "924a47f2e5a7728bb1b234e131dc0affad4723eb", "filename": "src/const.rs", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/a7527adf0855002dcbd1cb12309d4f7fbfd93e16/src%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7527adf0855002dcbd1cb12309d4f7fbfd93e16/src%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconst.rs?ref=a7527adf0855002dcbd1cb12309d4f7fbfd93e16", "patch": "@@ -0,0 +1,131 @@\n+use rustc::lint::Context;\n+use rustc::middle::const_eval::lookup_const_by_id;\n+use syntax::ast::*;\n+use syntax::ptr::P;\n+\n+/// a Lit_-like enum to fold constant `Expr`s into\n+#[derive(PartialEq, Eq, Debug, Clone)]\n+pub enum Constant {\n+    ConstantStr(&'static str, StrStyle),\n+    ConstantBinary(Rc<Vec<u8>>),\n+    ConstantByte(u8),\n+    ConstantChar(char),\n+    ConstantInt(u64, LitIntType),\n+    ConstantFloat(Cow<'static, str>, FloatTy),\n+    ConstantFloatUnsuffixed(Cow<'static, str>),\n+    ConstantBool(bool),\n+    ConstantVec(Vec<Constant>),\n+    ConstantTuple(Vec<Constant>),\n+}\n+\n+/// simple constant folding\n+pub fn constant(cx: &Context, e: &Expr) -> Option<Constant> {\n+    match e {\n+        &ExprParen(ref inner) => constant(cx, inner),\n+        &ExprPath(_, _) => fetch_path(cx, e),\n+        &ExprBlock(ref block) => constant_block(cx, inner),\n+        &ExprIf(ref cond, ref then, ref otherwise) => \n+            match constant(cx, cond) {\n+                Some(LitBool(true)) => constant(cx, then),\n+                Some(LitBool(false)) => constant(cx, otherwise),\n+                _ => None,\n+            },\n+        &ExprLit(ref lit) => Some(lit_to_constant(lit)),\n+        &ExprVec(ref vec) => constant_vec(cx, vec),\n+        &ExprTup(ref tup) => constant_tup(cx, tup),\n+        &ExprUnary(op, ref operand) => constant(cx, operand).and_then(\n+            |o| match op {\n+                UnNot =>\n+                    if let ConstantBool(b) = o {\n+                        Some(ConstantBool(!b))\n+                    } else { None },\n+                UnNeg =>\n+                    match o {\n+                        &ConstantInt(value, ty) =>\n+                            Some(ConstantInt(value, match ty {\n+                                SignedIntLit(ity, sign) => \n+                                    SignedIntLit(ity, neg_sign(sign)),\n+                                UnsuffixedIntLit(sign) =>\n+                                    UnsuffixedIntLit(neg_sign(sign)),\n+                                _ => { return None; },\n+                            })),\n+                        &LitFloat(ref is, ref ty) =>\n+                            Some(ConstantFloat(neg_float_str(is), ty)),\n+                        &LitFloatUnsuffixed(ref is) => \n+                            Some(ConstantFloatUnsuffixed(neg_float_str(is))),\n+                        _ => None,\n+                    },\n+                UnUniq | UnDeref => o,\n+            }),\n+        //TODO: add other expressions\n+        _ => None,\n+    }\n+}\n+\n+fn lit_to_constant(lit: &Lit_) -> Constant {\n+    match lit {\n+        &LitStr(ref is, style) => ConstantStr(&*is, style),\n+        &LitBinary(ref blob) => ConstantBinary(blob.clone()),\n+        &LitByte(b) => ConstantByte(b),\n+        &LitChar(c) => ConstantChar(c),\n+        &LitInt(value, ty) => ConstantInt(value, ty),\n+        &LitFloat(ref is, ty) => ConstantFloat(Cow::Borrowed(&*is), ty),\n+        &LitFloatUnsuffixed(InternedString) => \n+            ConstantFloatUnsuffixed(Cow::Borrowed(&*is)),\n+        &LitBool(b) => ConstantBool(b),\n+    }\n+}\n+\n+/// create `Some(ConstantVec(..))` of all constants, unless there is any\n+/// non-constant part\n+fn constant_vec(cx: &Context, vec: &[&Expr]) -> Option<Constant> {\n+    Vec<Constant> parts = Vec::new();\n+    for opt_part in vec {\n+        match constant(cx, opt_part) {\n+            Some(ref p) => parts.push(p),\n+            None => { return None; },\n+        }\n+    }\n+    Some(ConstantVec(parts))\n+}\n+\n+fn constant_tup(cx, &Context, tup: &[&Expr]) -> Option<Constant> {\n+    Vec<Constant> parts = Vec::new();\n+    for opt_part in vec {\n+        match constant(cx, opt_part) {\n+            Some(ref p) => parts.push(p),\n+            None => { return None; },\n+        }\n+    }\n+    Some(ConstantTuple(parts))\n+}\n+\n+/// lookup a possibly constant expression from a ExprPath\n+fn fetch_path(cx: &Context, e: &Expr) -> Option<Constant> {\n+    if let Some(&PathResolution { base_def: DefConst(id), ..}) =\n+            cx.tcx.def_map.borrow().get(&e.id) {\n+        lookup_const_by_id(cx.tcx, id, None).map(|l| constant(cx, l))\n+    } else { None }\n+}\n+\n+/// A block can only yield a constant if it only has one constant expression\n+fn constant_block(cx: &Context, block: &Block) -> Option<Constant> {\n+    if block.stmts.is_empty() {\n+        block.expr.map(|b| constant(cx, b)) \n+    } else { None }\n+}\n+\n+fn neg_sign(s: Sign) -> Sign {\n+    match s:\n+        Sign::Plus => Sign::Minus,\n+        Sign::Minus => Sign::Plus,\n+    }\n+}\n+\n+fn neg_float_str(s: &InternedString) -> Cow<'static, str> {\n+    if s.startsWith('-') { \n+        Cow::Borrowed(s[1..])\n+    } else {\n+        Cow::Owned(format!(\"-{}\", &*s))\n+    }\n+}"}]}