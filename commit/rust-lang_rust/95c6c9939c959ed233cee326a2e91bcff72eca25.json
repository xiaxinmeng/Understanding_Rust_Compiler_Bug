{"sha": "95c6c9939c959ed233cee326a2e91bcff72eca25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzZjOTkzOWM5NTllZDIzM2NlZTMyNmEyZTkxYmNmZjcyZWNhMjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-18T14:42:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-18T15:13:30Z"}, "message": "improve comments", "tree": {"sha": "c91f00a3786312f1fab262b8ce50b0286ee81b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c91f00a3786312f1fab262b8ce50b0286ee81b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c6c9939c959ed233cee326a2e91bcff72eca25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c6c9939c959ed233cee326a2e91bcff72eca25", "html_url": "https://github.com/rust-lang/rust/commit/95c6c9939c959ed233cee326a2e91bcff72eca25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c6c9939c959ed233cee326a2e91bcff72eca25/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "url": "https://api.github.com/repos/rust-lang/rust/commits/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60", "html_url": "https://github.com/rust-lang/rust/commit/30b97aa410af0a2e1405e7dde9f9f0f28ae14f60"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "261eb38a51aebee089915408fd61f716ff28c0fc", "filename": "src/test/incremental/change_add_field/struct_point.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_add_field%2Fstruct_point.rs?ref=95c6c9939c959ed233cee326a2e91bcff72eca25", "patch": "@@ -69,7 +69,13 @@ mod point {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn that has the changed type in its signature; must currently be\n+/// rebuilt.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n mod fn_with_type_in_sig {\n     use point::Point;\n \n@@ -79,6 +85,13 @@ mod fn_with_type_in_sig {\n     }\n }\n \n+/// Call a fn that has the changed type in its signature; this\n+/// currently must also be rebuilt.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n mod call_fn_with_type_in_sig {\n     use fn_with_type_in_sig;\n \n@@ -88,7 +101,13 @@ mod call_fn_with_type_in_sig {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn that uses the changed type, but only in its body, not its\n+/// signature.\n+///\n+/// You could imagine that, in the future, if the change were\n+/// sufficiently \"private\", we might not need to type-check again.\n+/// Rebuilding is probably always necessary since the layout may be\n+/// affected.\n mod fn_with_type_in_body {\n     use point::Point;\n \n@@ -98,7 +117,10 @@ mod fn_with_type_in_body {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn X that calls a fn Y, where Y uses the changed type in its\n+/// body. In this case, the effects of the change should be contained\n+/// to Y; X should not have to be rebuilt, nor should it need to be\n+/// typechecked again.\n mod call_fn_with_type_in_body {\n     use fn_with_type_in_body;\n "}, {"sha": "77b616e5c5fd22b338285d24e47424f08ea27022", "filename": "src/test/incremental/change_pub_inherent_method_body/struct_point.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_body%2Fstruct_point.rs?ref=95c6c9939c959ed233cee326a2e91bcff72eca25", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test where we change the body of a private method in an impl.\n-// We then test what sort of functions must be rebuilt as a result.\n+// Test where we change the body of a public, inherent method.\n \n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n@@ -49,7 +48,7 @@ mod point {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn item that calls the method on `Point` which changed\n mod fn_calls_changed_method {\n     use point::Point;\n \n@@ -61,7 +60,7 @@ mod fn_calls_changed_method {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn item that calls a method on `Point` which did not change\n mod fn_calls_another_method {\n     use point::Point;\n "}, {"sha": "cb36a734e7b40ec24780a96fb7dcfa965adbd221", "filename": "src/test/incremental/change_pub_inherent_method_sig/struct_point.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c6c9939c959ed233cee326a2e91bcff72eca25/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fchange_pub_inherent_method_sig%2Fstruct_point.rs?ref=95c6c9939c959ed233cee326a2e91bcff72eca25", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test where we change the body of a private method in an impl.\n-// We then test what sort of functions must be rebuilt as a result.\n+// Test where we change the *signature* of a public, inherent method.\n \n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n@@ -60,7 +59,7 @@ mod point {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn item that calls the method that was changed\n mod fn_calls_changed_method {\n     use point::Point;\n \n@@ -71,7 +70,7 @@ mod fn_calls_changed_method {\n     }\n }\n \n-/// A fn item that calls (public) methods on `Point` from the same impl which changed\n+/// A fn item that calls a method that was not changed\n mod fn_calls_another_method {\n     use point::Point;\n "}]}