{"sha": "1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "node_id": "C_kwDOAAsO6NoAKDFjMjgwMDZiZjZmNmUwZjk4OWM3MjVjNzRjMWVlN2QxNGNkNjJiODE", "commit": {"author": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-21T19:43:03Z"}, "committer": {"name": "Hampus Lidin", "email": "hampuslidin@gmail.com", "date": "2022-08-22T18:19:19Z"}, "message": "Reorder diagnostics in code order, then alphabetical order", "tree": {"sha": "4bd952c394201cc21a2d45544af23f46bd7a08d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd952c394201cc21a2d45544af23f46bd7a08d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "html_url": "https://github.com/rust-lang/rust/commit/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/comments", "author": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hampuslidin", "id": 9679284, "node_id": "MDQ6VXNlcjk2NzkyODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/9679284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hampuslidin", "html_url": "https://github.com/hampuslidin", "followers_url": "https://api.github.com/users/hampuslidin/followers", "following_url": "https://api.github.com/users/hampuslidin/following{/other_user}", "gists_url": "https://api.github.com/users/hampuslidin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hampuslidin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hampuslidin/subscriptions", "organizations_url": "https://api.github.com/users/hampuslidin/orgs", "repos_url": "https://api.github.com/users/hampuslidin/repos", "events_url": "https://api.github.com/users/hampuslidin/events{/privacy}", "received_events_url": "https://api.github.com/users/hampuslidin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f59605d2f460aadaa23c92dda826b8906ebc4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f59605d2f460aadaa23c92dda826b8906ebc4b", "html_url": "https://github.com/rust-lang/rust/commit/c4f59605d2f460aadaa23c92dda826b8906ebc4b"}], "stats": {"total": 460, "additions": 290, "deletions": 170}, "files": [{"sha": "17ea47082d446d600cd675637df01781a2170016", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "patch": "@@ -827,9 +827,6 @@ where\n                                 ),\n                             );\n                         } else {\n-                            // FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring\n-                            // the error code. Consider changing this to `IncorrectMetaItem`. See\n-                            // #51489.\n                             sess.emit_err(session_diagnostics::IncorrectMetaItem2 {\n                                 span: meta.span,\n                             });"}, {"sha": "d0b1f02cf3c1683e0c675d77ad4ae27be17f6376", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 233, "deletions": 110, "changes": 343, "blob_url": "https://github.com/rust-lang/rust/blob/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "patch": "@@ -3,140 +3,82 @@ use std::num::IntErrorKind;\n use rustc_errors::{error_code, fluent, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_macros::SessionDiagnostic;\n use rustc_session::{parse::ParseSess, SessionDiagnostic};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n use crate::UnsupportedLiteralReason;\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::multiple_item, code = \"E0538\")]\n-pub(crate) struct MultipleItem {\n-    #[primary_span]\n-    pub span: Span,\n-\n-    pub item: String,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::missing_since, code = \"E0542\")]\n-pub(crate) struct MissingSince {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::non_ident_feature, code = \"E0546\")]\n-pub(crate) struct NonIdentFeature {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::missing_feature, code = \"E0546\")]\n-pub(crate) struct MissingFeature {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::multiple_stability_levels, code = \"E0544\")]\n-pub(crate) struct MultipleStabilityLevels {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::invalid_meta_item, code = \"E0539\")]\n-pub(crate) struct InvalidMetaItem {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::missing_issue, code = \"E0547\")]\n-pub(crate) struct MissingIssue {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n-#[derive(SessionDiagnostic)]\n-#[error(attr::rustc_promotable_pairing, code = \"E0717\")]\n-pub(crate) struct RustcPromotablePairing {\n+#[error(attr::expected_one_cfg_pattern, code = \"E0536\")]\n+pub(crate) struct ExpectedOneCfgPattern {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n-pub(crate) struct RustcAllowedUnstablePairing {\n+#[error(attr::invalid_predicate, code = \"E0537\")]\n+pub(crate) struct InvalidPredicate {\n     #[primary_span]\n     pub span: Span,\n-}\n \n-#[derive(SessionDiagnostic)]\n-#[error(attr::soft_no_args)]\n-pub(crate) struct SoftNoArgs {\n-    #[primary_span]\n-    pub span: Span,\n+    pub predicate: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::expected_version_literal)]\n-pub(crate) struct ExpectedVersionLiteral {\n+#[error(attr::multiple_item, code = \"E0538\")]\n+pub(crate) struct MultipleItem {\n     #[primary_span]\n     pub span: Span,\n-}\n \n-#[derive(SessionDiagnostic)]\n-#[error(attr::expected_single_version_literal)]\n-pub(crate) struct ExpectedSingleVersionLiteral {\n-    #[primary_span]\n-    pub span: Span,\n+    pub item: String,\n }\n \n #[derive(SessionDiagnostic)]\n-#[warning(attr::unknown_version_literal)]\n-pub(crate) struct UnknownVersionLiteral {\n+#[error(attr::incorrect_meta_item, code = \"E0539\")]\n+pub(crate) struct IncorrectMetaItem {\n     #[primary_span]\n     pub span: Span,\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(attr::expected_one_cfg_pattern, code = \"E0536\")]\n-pub(crate) struct ExpectedOneCfgPattern {\n-    #[primary_span]\n+// Error code: E0541\n+pub(crate) struct UnknownMetaItem<'a> {\n     pub span: Span,\n+    pub item: String,\n+    pub expected: &'a [&'a str],\n }\n \n-#[derive(SessionDiagnostic)]\n-#[error(attr::invalid_predicate, code = \"E0537\")]\n-pub(crate) struct InvalidPredicate {\n-    #[primary_span]\n-    pub span: Span,\n-\n-    pub predicate: String,\n+// Manual implementation to be able to format `expected` items correctly.\n+impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n+        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n+            self.span,\n+            fluent::attr::unknown_meta_item,\n+            error_code!(E0541),\n+        );\n+        diag.set_arg(\"item\", self.item);\n+        diag.set_arg(\"expected\", expected.join(\", \"));\n+        diag.span_label(self.span, fluent::attr::label);\n+        diag\n+    }\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::cfg_predicate_identifier)]\n-pub(crate) struct CfgPredicateIdentifier {\n+#[error(attr::missing_since, code = \"E0542\")]\n+pub(crate) struct MissingSince {\n     #[primary_span]\n     pub span: Span,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::deprecated_item_suggestion)]\n-#[note]\n-pub(crate) struct DeprecatedItemSuggestion {\n+#[error(attr::missing_note, code = \"E0543\")]\n+pub(crate) struct MissingNote {\n     #[primary_span]\n     pub span: Span,\n-\n-    #[help]\n-    pub is_nightly: Option<()>,\n }\n \n #[derive(SessionDiagnostic)]\n-#[error(attr::missing_note, code = \"E0543\")]\n-pub(crate) struct MissingNote {\n+#[error(attr::multiple_stability_levels, code = \"E0544\")]\n+pub(crate) struct MultipleStabilityLevels {\n     #[primary_span]\n     pub span: Span,\n }\n@@ -199,28 +141,64 @@ impl InvalidIssueStringCause {\n     }\n }\n \n-pub(crate) struct UnknownMetaItem<'a> {\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_feature, code = \"E0546\")]\n+pub(crate) struct MissingFeature {\n+    #[primary_span]\n     pub span: Span,\n-    pub item: String,\n-    pub expected: &'a [&'a str],\n }\n \n-// Manual implementation to be able to format `expected` items correctly.\n-impl<'a> SessionDiagnostic<'a> for UnknownMetaItem<'_> {\n-    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n-        let expected = self.expected.iter().map(|name| format!(\"`{}`\", name)).collect::<Vec<_>>();\n-        let mut diag = sess.span_diagnostic.struct_span_err_with_code(\n-            self.span,\n-            fluent::attr::unknown_meta_item,\n-            error_code!(E0541),\n-        );\n-        diag.set_arg(\"item\", self.item);\n-        diag.set_arg(\"expected\", expected.join(\", \"));\n-        diag.span_label(self.span, fluent::attr::label);\n-        diag\n-    }\n+#[derive(SessionDiagnostic)]\n+#[error(attr::non_ident_feature, code = \"E0546\")]\n+pub(crate) struct NonIdentFeature {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::missing_issue, code = \"E0547\")]\n+pub(crate) struct MissingIssue {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+// FIXME: This diagnostic is identical to `IncorrectMetaItem`, barring the error code. Consider\n+// changing this to `IncorrectMetaItem`. See #51489.\n+#[derive(SessionDiagnostic)]\n+#[error(attr::incorrect_meta_item, code = \"E0551\")]\n+pub(crate) struct IncorrectMetaItem2 {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+// FIXME: Why is this the same error code as `InvalidReprHintNoParen` and `InvalidReprHintNoValue`?\n+// It is more similar to `IncorrectReprFormatGeneric`.\n+#[derive(SessionDiagnostic)]\n+#[error(attr::incorrect_repr_format_packed_one_or_zero_arg, code = \"E0552\")]\n+pub(crate) struct IncorrectReprFormatPackedOneOrZeroArg {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_repr_hint_no_paren, code = \"E0552\")]\n+pub(crate) struct InvalidReprHintNoParen {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub name: String,\n }\n \n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_repr_hint_no_value, code = \"E0552\")]\n+pub(crate) struct InvalidReprHintNoValue {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub name: String,\n+}\n+\n+// Error code: E0565\n pub(crate) struct UnsupportedLiteral {\n     pub span: Span,\n     pub reason: UnsupportedLiteralReason,\n@@ -256,3 +234,148 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n         diag\n     }\n }\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_repr_align_need_arg, code = \"E0589\")]\n+pub(crate) struct InvalidReprAlignNeedArg {\n+    #[primary_span]\n+    #[suggestion(code = \"align(...)\", applicability = \"has-placeholders\")]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::invalid_repr_generic, code = \"E0589\")]\n+pub(crate) struct InvalidReprGeneric<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub repr_arg: String,\n+    pub error_part: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::incorrect_repr_format_align_one_arg, code = \"E0693\")]\n+pub(crate) struct IncorrectReprFormatAlignOneArg {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::incorrect_repr_format_generic, code = \"E0693\")]\n+pub(crate) struct IncorrectReprFormatGeneric<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub repr_arg: &'a str,\n+\n+    #[subdiagnostic]\n+    pub cause: Option<IncorrectReprFormatGenericCause<'a>>,\n+}\n+\n+#[derive(SessionSubdiagnostic)]\n+pub(crate) enum IncorrectReprFormatGenericCause<'a> {\n+    #[suggestion(attr::suggestion, code = \"{name}({int})\", applicability = \"machine-applicable\")]\n+    Int {\n+        #[primary_span]\n+        span: Span,\n+\n+        #[skip_arg]\n+        name: &'a str,\n+\n+        #[skip_arg]\n+        int: u128,\n+    },\n+\n+    #[suggestion(\n+        attr::suggestion,\n+        code = \"{name}({symbol})\",\n+        applicability = \"machine-applicable\"\n+    )]\n+    Symbol {\n+        #[primary_span]\n+        span: Span,\n+\n+        #[skip_arg]\n+        name: &'a str,\n+\n+        #[skip_arg]\n+        symbol: Symbol,\n+    },\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::rustc_promotable_pairing, code = \"E0717\")]\n+pub(crate) struct RustcPromotablePairing {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::rustc_allowed_unstable_pairing, code = \"E0789\")]\n+pub(crate) struct RustcAllowedUnstablePairing {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::cfg_predicate_identifier)]\n+pub(crate) struct CfgPredicateIdentifier {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::deprecated_item_suggestion)]\n+#[note]\n+pub(crate) struct DeprecatedItemSuggestion {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    #[help]\n+    pub is_nightly: Option<()>,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expected_single_version_literal)]\n+pub(crate) struct ExpectedSingleVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expected_version_literal)]\n+pub(crate) struct ExpectedVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expects_feature_list)]\n+pub(crate) struct ExpectsFeatureList {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::expects_features)]\n+pub(crate) struct ExpectsFeatures {\n+    #[primary_span]\n+    pub span: Span,\n+\n+    pub name: String,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(attr::soft_no_args)]\n+pub(crate) struct SoftNoArgs {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[warning(attr::unknown_version_literal)]\n+pub(crate) struct UnknownVersionLiteral {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "a7f8c993d4225316129e515ef4e2a84bbe872137", "filename": "compiler/rustc_error_messages/locales/en-US/attr.ftl", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/1c28006bf6f6e0f989c725c74c1ee7d14cd62b81/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fattr.ftl?ref=1c28006bf6f6e0f989c725c74c1ee7d14cd62b81", "patch": "@@ -1,21 +1,53 @@\n+attr_expected_one_cfg_pattern =\n+    expected 1 cfg-pattern\n+\n+attr_invalid_predicate =\n+    invalid predicate `{$predicate}`\n+\n attr_multiple_item =\n     multiple '{$item}' items\n \n+attr_incorrect_meta_item =\n+    incorrect meta item\n+\n attr_unknown_meta_item =\n     unknown meta item '{$item}'\n     .label = expected one of {$expected}\n \n attr_missing_since =\n     missing 'since'\n \n-attr_non_ident_feature =\n-    'feature' is not an identifier\n+attr_missing_note =\n+    missing 'note'\n+\n+attr_multiple_stability_levels =\n+    multiple stability levels\n+\n+attr_invalid_issue_string =\n+    `issue` must be a non-zero numeric string or \"none\"\n+    .must_not_be_zero = `issue` must not be \"0\", use \"none\" instead\n+    .empty = cannot parse integer from empty string\n+    .invalid_digit = invalid digit found in string\n+    .pos_overflow = number too large to fit in target type\n+    .neg_overflow = number too small to fit in target type\n \n attr_missing_feature =\n     missing 'feature'\n \n-attr_multiple_stability_levels =\n-    multiple stability levels\n+attr_non_ident_feature =\n+    'feature' is not an identifier\n+\n+attr_missing_issue =\n+    missing 'issue'\n+\n+attr_incorrect_repr_format_packed_one_or_zero_arg =\n+    incorrect `repr(packed)` attribute format: `packed` takes exactly one parenthesized argument, or no parentheses at all\n+\n+attr_invalid_repr_hint_no_paren =\n+    invalid representation hint: `{$name}` does not take a parenthesized argument list\n+\n+attr_invalid_repr_hint_no_value =\n+    invalid representation hint: `{$name}` does not take a value\n \n attr_unsupported_literal_generic =\n     unsupported literal\n@@ -28,44 +60,26 @@ attr_unsupported_literal_deprecated_kv_pair =\n attr_unsupported_literal_suggestion =\n     consider removing the prefix\n \n-attr_incorrect_meta_item =\n-    incorrect meta item\n+attr_invalid_repr_align_need_arg =\n+    invalid `repr(align)` attribute: `align` needs an argument\n+    .suggestion = supply an argument here\n \n-attr_invalid_issue_string =\n-    `issue` must be a non-zero numeric string or \"none\"\n-    .must_not_be_zero = `issue` must not be \"0\", use \"none\" instead\n-    .empty = cannot parse integer from empty string\n-    .invalid_digit = invalid digit found in string\n-    .pos_overflow = number too large to fit in target type\n-    .neg_overflow = number too small to fit in target type\n+attr_invalid_repr_generic =\n+    invalid `repr({$repr_arg})` attribute: {$error_part}\n \n-attr_missing_issue =\n-    missing 'issue'\n+attr_incorrect_repr_format_align_one_arg =\n+    incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+\n+attr_incorrect_repr_format_generic =\n+    incorrect `repr({$repr_arg})` attribute format\n+    .suggestion = use parentheses instead\n \n attr_rustc_promotable_pairing =\n     `rustc_promotable` attribute must be paired with either a `rustc_const_unstable` or a `rustc_const_stable` attribute\n \n attr_rustc_allowed_unstable_pairing =\n     `rustc_allowed_through_unstable_modules` attribute must be paired with a `stable` attribute\n \n-attr_soft_no_args =\n-    `soft` should not have any arguments\n-\n-attr_expected_version_literal =\n-    expected a version literal\n-\n-attr_expected_single_version_literal =\n-    expected single version literal\n-\n-attr_unknown_version_literal =\n-    unknown version literal format, assuming it refers to a future version\n-\n-attr_expected_one_cfg_pattern =\n-    expected 1 cfg-pattern\n-\n-attr_invalid_predicate =\n-    invalid predicate `{$predicate}`\n-\n attr_cfg_predicate_identifier =\n     `cfg` predicate key must be an identifier\n \n@@ -74,34 +88,20 @@ attr_deprecated_item_suggestion =\n     .help = add `#![feature(deprecated_suggestion)]` to the crate root\n     .note = see #94785 for more details\n \n-attr_missing_note =\n-    missing 'note'\n-\n-attr_invalid_repr_align_need_arg =\n-    invalid `repr(align)` attribute: `align` needs an argument\n-    .suggestion = supply an argument here\n-\n-attr_invalid_repr_generic =\n-    invalid `repr({$repr_arg})` attribute: {$error_part}\n-\n-attr_invalid_repr_hint_no_paren =\n-    invalid representation hint: `{$name}` does not take a parenthesized argument list\n-\n-attr_invalid_repr_hint_no_value =\n-    invalid representation hint: `{$name}` does not take a value\n-\n-attr_incorrect_repr_format_generic =\n-    incorrect `repr({$repr_arg})` attribute format\n-    .suggestion = use parentheses instead\n-\n-attr_incorrect_repr_format_align_one_arg =\n-    incorrect `repr(align)` attribute format: `align` takes exactly one argument in parentheses\n+attr_expected_single_version_literal =\n+    expected single version literal\n \n-attr_incorrect_repr_format_packed_one_or_zero_arg =\n-    incorrect `repr(packed)` attribute format: `packed` takes exactly one parenthesized argument, or no parentheses at all\n+attr_expected_version_literal =\n+    expected a version literal\n \n attr_expects_feature_list =\n     `{$name}` expects a list of feature names\n \n attr_expects_features =\n     `{$name}` expects feature names\n+\n+attr_soft_no_args =\n+    `soft` should not have any arguments\n+\n+attr_unknown_version_literal =\n+    unknown version literal format, assuming it refers to a future version"}]}