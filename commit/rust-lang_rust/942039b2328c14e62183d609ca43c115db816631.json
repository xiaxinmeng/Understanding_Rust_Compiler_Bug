{"sha": "942039b2328c14e62183d609ca43c115db816631", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0MjAzOWIyMzI4YzE0ZTYyMTgzZDYwOWNhNDNjMTE1ZGI4MTY2MzE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-04-20T15:13:43Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-07-17T10:41:01Z"}, "message": "Pass ByRef values at fixed stack offset for extern \"C\"\n\nThis makes it possible to build proc macros using cg_clif", "tree": {"sha": "f62355a4e2f56f268569faf4459b9d524bc0a868", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f62355a4e2f56f268569faf4459b9d524bc0a868"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/942039b2328c14e62183d609ca43c115db816631", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/942039b2328c14e62183d609ca43c115db816631", "html_url": "https://github.com/rust-lang/rust/commit/942039b2328c14e62183d609ca43c115db816631", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/942039b2328c14e62183d609ca43c115db816631/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7", "html_url": "https://github.com/rust-lang/rust/commit/ccfd1b9334aa1c3175ce29596b3083b68eaae5d7"}], "stats": {"total": 114, "additions": 60, "deletions": 54}, "files": [{"sha": "bdc01941351d07ad4ded8b987bef32cd2e605e77", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -43,16 +43,16 @@ checksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"byteorder\",\n  \"cranelift-bforest\",\n@@ -69,27 +69,27 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -99,8 +99,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -111,8 +111,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"raw-cpuid\",\n@@ -121,8 +121,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -133,8 +133,8 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-simplejit\"\n-version = \"0.65.0\"\n-source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#4ba3ee33682c293747a672bfb87d5235bb1e62b3\"\n+version = \"0.66.0\"\n+source = \"git+https://github.com/bytecodealliance/wasmtime/?branch=main#5c5a30f76c35e15697fc150fb00c4b86be621d66\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"cranelift-module\",\n@@ -275,9 +275,9 @@ dependencies = [\n \n [[package]]\n name = \"regalloc\"\n-version = \"0.0.27\"\n+version = \"0.0.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9ba8aaf5fe7cf307c6dbdaeed85478961d29e25e3bee5169e11b92fa9f027a8\"\n+checksum = \"3598bed0895fe0f72a9e0b00ef9e3a3c8af978a8401b2f2046dec5927de6364a\"\n dependencies = [\n  \"log\",\n  \"rustc-hash\","}, {"sha": "5ee21f467e215f698fc39240830d38dafe1ff6ec", "filename": "cargo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/cargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/cargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo.sh?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -20,4 +20,4 @@ fi\n cmd=$1\n shift\n \n-cargo +${TOOLCHAIN} $cmd --target $TARGET_TRIPLE $@\n+cargo +${TOOLCHAIN} $cmd $@"}, {"sha": "1989b2b08b3927baae30175afc75d4f76e907149", "filename": "src/abi/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -6,7 +6,7 @@ mod returning;\n use rustc_target::spec::abi::Abi;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n \n-use cranelift_codegen::ir::AbiParam;\n+use cranelift_codegen::ir::{AbiParam, ArgumentPurpose};\n \n use self::pass_mode::*;\n use crate::prelude::*;\n@@ -123,7 +123,11 @@ fn clif_sig_from_fn_sig<'tcx>(\n             if abi != Abi::Rust && abi != Abi::RustCall && abi != Abi::RustIntrinsic {\n                 match pass_mode {\n                     PassMode::NoPass | PassMode::ByVal(_) => {}\n-                    PassMode::ByValPair(_, _) | PassMode::ByRef { sized: _ } => {\n+                    PassMode::ByRef { size: Some(size) } => {\n+                        let purpose = ArgumentPurpose::StructArgument(u32::try_from(size.bytes()).expect(\"struct too big to pass on stack\"));\n+                        return EmptySinglePair::Single(AbiParam::special(pointer_ty(tcx), purpose)).into_iter();\n+                    }\n+                    PassMode::ByValPair(_, _) | PassMode::ByRef { size: None } => {\n                         tcx.sess.span_warn(\n                             span,\n                             &format!(\n@@ -137,34 +141,34 @@ fn clif_sig_from_fn_sig<'tcx>(\n                     }\n                 }\n             }\n-            pass_mode.get_param_ty(tcx).into_iter()\n+            pass_mode.get_param_ty(tcx).map(AbiParam::new).into_iter()\n         })\n         .flatten();\n \n     let (mut params, returns): (Vec<_>, Vec<_>) = match get_pass_mode(\n         tcx,\n         tcx.layout_of(ParamEnv::reveal_all().and(output)).unwrap(),\n     ) {\n-        PassMode::NoPass => (inputs.map(AbiParam::new).collect(), vec![]),\n+        PassMode::NoPass => (inputs.collect(), vec![]),\n         PassMode::ByVal(ret_ty) => (\n-            inputs.map(AbiParam::new).collect(),\n+            inputs.collect(),\n             vec![AbiParam::new(ret_ty)],\n         ),\n         PassMode::ByValPair(ret_ty_a, ret_ty_b) => (\n-            inputs.map(AbiParam::new).collect(),\n+            inputs.collect(),\n             vec![AbiParam::new(ret_ty_a), AbiParam::new(ret_ty_b)],\n         ),\n-        PassMode::ByRef { sized: true } => {\n+        PassMode::ByRef { size: Some(_) } => {\n             (\n                 Some(pointer_ty(tcx)) // First param is place to put return val\n                     .into_iter()\n+                    .map(|ty| AbiParam::special(ty, ArgumentPurpose::StructReturn))\n                     .chain(inputs)\n-                    .map(AbiParam::new)\n                     .collect(),\n                 vec![],\n             )\n         }\n-        PassMode::ByRef { sized: false } => todo!(),\n+        PassMode::ByRef { size: None } => todo!(),\n     };\n \n     if requires_caller_location {"}, {"sha": "390637e8e440ee04fbd527a7299425658bc34eaf", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -7,7 +7,7 @@ pub(super) enum PassMode {\n     NoPass,\n     ByVal(Type),\n     ByValPair(Type, Type),\n-    ByRef { sized: bool },\n+    ByRef { size: Option<Size> },\n }\n \n #[derive(Copy, Clone, Debug)]\n@@ -70,8 +70,8 @@ impl PassMode {\n             PassMode::NoPass => Empty,\n             PassMode::ByVal(clif_type) => Single(clif_type),\n             PassMode::ByValPair(a, b) => Pair(a, b),\n-            PassMode::ByRef { sized: true } => Single(pointer_ty(tcx)),\n-            PassMode::ByRef { sized: false } => Pair(pointer_ty(tcx), pointer_ty(tcx)),\n+            PassMode::ByRef { size: Some(_) } => Single(pointer_ty(tcx)),\n+            PassMode::ByRef { size: None } => Pair(pointer_ty(tcx), pointer_ty(tcx)),\n         }\n     }\n }\n@@ -93,16 +93,17 @@ pub(super) fn get_pass_mode<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>)\n                     // Returning (i128, i128) by-val-pair would take 4 regs, while only 3 are\n                     // available on x86_64. Cranelift gets confused when too many return params\n                     // are used.\n-                    PassMode::ByRef { sized: true }\n+                    PassMode::ByRef { size: Some(layout.size) }\n                 } else {\n                     PassMode::ByValPair(a, b)\n                 }\n             }\n \n             // FIXME implement Vector Abi in a cg_llvm compatible way\n-            Abi::Vector { .. } => PassMode::ByRef { sized: true },\n+            Abi::Vector { .. } => PassMode::ByRef { size: Some(layout.size) },\n \n-            &Abi::Aggregate { sized } => PassMode::ByRef { sized },\n+            Abi::Aggregate { sized: true } => PassMode::ByRef { size: Some(layout.size) },\n+            Abi::Aggregate { sized: false } => PassMode::ByRef { size: None },\n         }\n     }\n }\n@@ -118,7 +119,7 @@ pub(super) fn adjust_arg_for_abi<'tcx>(\n             let (a, b) = arg.load_scalar_pair(fx);\n             Pair(a, b)\n         }\n-        PassMode::ByRef { sized: _ } => {\n+        PassMode::ByRef { size: _ } => {\n             match arg.force_stack(fx) {\n                 (ptr, None) => Single(ptr.get_addr(fx)),\n                 (ptr, Some(meta)) => Pair(ptr.get_addr(fx), meta),\n@@ -164,8 +165,8 @@ pub(super) fn cvalue_for_param<'tcx>(\n             let (a, b) = block_params.assert_pair();\n             Some(CValue::by_val_pair(a, b, layout))\n         }\n-        PassMode::ByRef { sized: true } => Some(CValue::by_ref(Pointer::new(block_params.assert_single()), layout)),\n-        PassMode::ByRef { sized: false } => {\n+        PassMode::ByRef { size: Some(_) } => Some(CValue::by_ref(Pointer::new(block_params.assert_single()), layout)),\n+        PassMode::ByRef { size: None } => {\n             let (ptr, meta) = block_params.assert_pair();\n             Some(CValue::by_ref_unsized(Pointer::new(ptr), meta, layout))\n         }"}, {"sha": "e445a12b2a882ce307355f0b0cac7a2e2c94612f", "filename": "src/abi/returning.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -9,7 +9,7 @@ pub(crate) fn can_return_to_ssa_var<'tcx>(tcx: TyCtxt<'tcx>, dest_layout: TyAndL\n     match get_pass_mode(tcx, dest_layout) {\n         PassMode::NoPass | PassMode::ByVal(_) => true,\n         // FIXME Make it possible to return ByValPair and ByRef to an ssa var.\n-        PassMode::ByValPair(_, _) | PassMode::ByRef { sized: _ } => false\n+        PassMode::ByValPair(_, _) | PassMode::ByRef { size: _ } => false\n     }\n }\n \n@@ -33,14 +33,14 @@ pub(super) fn codegen_return_param(\n \n             Empty\n         }\n-        PassMode::ByRef { sized: true } => {\n+        PassMode::ByRef { size: Some(_) } => {\n             let ret_param = fx.bcx.append_block_param(start_block, fx.pointer_type);\n             fx.local_map\n                 .insert(RETURN_PLACE, CPlace::for_ptr(Pointer::new(ret_param), ret_layout));\n \n             Single(ret_param)\n         }\n-        PassMode::ByRef { sized: false } => todo!(),\n+        PassMode::ByRef { size: None } => todo!(),\n     };\n \n     #[cfg(not(debug_assertions))]\n@@ -69,11 +69,11 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     let output_pass_mode = get_pass_mode(fx.tcx, ret_layout);\n     let return_ptr = match output_pass_mode {\n         PassMode::NoPass => None,\n-        PassMode::ByRef { sized: true } => match ret_place {\n+        PassMode::ByRef { size: Some(_)} => match ret_place {\n             Some(ret_place) => Some(ret_place.to_ptr().get_addr(fx)),\n-            None => Some(fx.bcx.ins().iconst(fx.pointer_type, 43)),\n+            None => Some(fx.bcx.ins().iconst(fx.pointer_type, 43)), // FIXME allocate temp stack slot\n         },\n-        PassMode::ByRef { sized: false } => todo!(),\n+        PassMode::ByRef { size: None } => todo!(),\n         PassMode::ByVal(_) | PassMode::ByValPair(_, _) => None,\n     };\n \n@@ -94,19 +94,19 @@ pub(super) fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n                 ret_place.write_cvalue(fx, CValue::by_val_pair(ret_val_a, ret_val_b, ret_layout));\n             }\n         }\n-        PassMode::ByRef { sized: true } => {}\n-        PassMode::ByRef { sized: false } => todo!(),\n+        PassMode::ByRef { size: Some(_) } => {}\n+        PassMode::ByRef { size: None } => todo!(),\n     }\n \n     (call_inst, meta)\n }\n \n pub(crate) fn codegen_return(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n     match get_pass_mode(fx.tcx, return_layout(fx)) {\n-        PassMode::NoPass | PassMode::ByRef { sized: true } => {\n+        PassMode::NoPass | PassMode::ByRef { size: Some(_) } => {\n             fx.bcx.ins().return_(&[]);\n         }\n-        PassMode::ByRef { sized: false } => todo!(),\n+        PassMode::ByRef { size: None } => todo!(),\n         PassMode::ByVal(_) => {\n             let place = fx.get_local_place(RETURN_PLACE);\n             let ret_val = place.to_cvalue(fx).load_scalar(fx);"}, {"sha": "37dc9f4e3c5bbb7efd8915b3cf57871eacc1a8da", "filename": "src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/src%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/src%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo%2Fmod.rs?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -313,6 +313,7 @@ impl<'tcx> DebugContext<'tcx> {\n             use cranelift_codegen::ir::ArgumentPurpose;\n             let base_name = match param.purpose {\n                 ArgumentPurpose::Normal => \"arg\",\n+                ArgumentPurpose::StructArgument(_) => \"struct_arg\",\n                 ArgumentPurpose::StructReturn => \"sret\",\n                 ArgumentPurpose::Link | ArgumentPurpose::FramePointer | ArgumentPurpose::CalleeSaved => continue,\n                 ArgumentPurpose::VMContext | ArgumentPurpose::SignatureId | ArgumentPurpose::StackLimit => unreachable!(),"}, {"sha": "74ead626e692cc89118346feabd63a25475356c0", "filename": "test.sh", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/942039b2328c14e62183d609ca43c115db816631/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/942039b2328c14e62183d609ca43c115db816631/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=942039b2328c14e62183d609ca43c115db816631", "patch": "@@ -74,12 +74,12 @@ $RUSTC example/mod_bench.rs --crate-type bin --target $TARGET_TRIPLE\n pushd simple-raytracer\n if [[ \"$HOST_TRIPLE\" = \"$TARGET_TRIPLE\" ]]; then\n     echo \"[BENCH COMPILE] ebobby/simple-raytracer\"\n-    hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"rm -r target/*/debug || true\" \\\n-    \"RUSTFLAGS='' cargo build --target $TARGET_TRIPLE\" \\\n+    hyperfine --runs ${RUN_RUNS:-10} --warmup 1 --prepare \"cargo clean\" \\\n+    \"RUSTFLAGS='' cargo build\" \\\n     \"../cargo.sh build\"\n \n     echo \"[BENCH RUN] ebobby/simple-raytracer\"\n-    cp ./target/*/debug/main ./raytracer_cg_clif\n+    cp ./target/debug/main ./raytracer_cg_clif\n     hyperfine --runs ${RUN_RUNS:-10} ./raytracer_cg_llvm ./raytracer_cg_clif\n else\n     echo \"[BENCH COMPILE] ebobby/simple-raytracer (skipped)\""}]}