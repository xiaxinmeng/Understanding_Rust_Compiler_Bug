{"sha": "31b77aecfc195c774852965329b5e75453eee0b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYjc3YWVjZmMxOTVjNzc0ODUyOTY1MzI5YjVlNzU0NTNlZWUwYjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T13:49:17Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-23T23:56:23Z"}, "message": "std: remove str::to_owned and str::raw::slice_bytes_owned", "tree": {"sha": "bf46d091c4150e3da7c813ab4a5df633d68a08df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf46d091c4150e3da7c813ab4a5df633d68a08df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31b77aecfc195c774852965329b5e75453eee0b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31b77aecfc195c774852965329b5e75453eee0b2", "html_url": "https://github.com/rust-lang/rust/commit/31b77aecfc195c774852965329b5e75453eee0b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31b77aecfc195c774852965329b5e75453eee0b2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9666f68f829c17ff3a535f714fe5dbb3f72755", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9666f68f829c17ff3a535f714fe5dbb3f72755", "html_url": "https://github.com/rust-lang/rust/commit/cc9666f68f829c17ff3a535f714fe5dbb3f72755"}], "stats": {"total": 120, "additions": 50, "deletions": 70}, "files": [{"sha": "c6db3637eedcc7b2b6de433bd9056d4fd49b858a", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -457,7 +457,7 @@ pub fn opt_default(mm: &Matches, nm: &str, def: &str) -> Option<~str> {\n     let vals = opt_vals(mm, nm);\n     if vals.is_empty() { return None::<~str>; }\n     return match vals[0] { Val(ref s) => Some::<~str>((*s).clone()),\n-                           _      => Some::<~str>(str::to_owned(def)) }\n+                           _      => Some::<~str>(def.to_owned()) }\n }\n \n #[deriving(Eq)]\n@@ -497,10 +497,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup { short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup { short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Req};\n     }\n@@ -510,10 +510,10 @@ pub mod groups {\n                   desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Optional};\n     }\n@@ -523,10 +523,10 @@ pub mod groups {\n                    desc: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n                 hint: ~\"\",\n-                desc: str::to_owned(desc),\n+                desc: desc.to_owned(),\n                 hasarg: No,\n                 occur: Optional};\n     }\n@@ -536,10 +536,10 @@ pub mod groups {\n                       desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Maybe,\n                 occur: Optional};\n     }\n@@ -552,10 +552,10 @@ pub mod groups {\n                     desc: &str, hint: &str) -> OptGroup {\n         let len = short_name.len();\n         assert!(len == 1 || len == 0);\n-        return OptGroup {short_name: str::to_owned(short_name),\n-                long_name: str::to_owned(long_name),\n-                hint: str::to_owned(hint),\n-                desc: str::to_owned(desc),\n+        return OptGroup {short_name: short_name.to_owned(),\n+                long_name: long_name.to_owned(),\n+                hint: hint.to_owned(),\n+                desc: desc.to_owned(),\n                 hasarg: Yes,\n                 occur: Multi};\n     }\n@@ -678,7 +678,7 @@ pub mod groups {\n             row\n         });\n \n-        return str::to_owned(brief) +\n+        return brief.to_owned() +\n                \"\\n\\nOptions:\\n\" +\n                rows.collect::<~[~str]>().connect(\"\\n\") +\n                \"\\n\\n\";"}, {"sha": "b1c07e83f52c7a3336246246c528dfe314e35abb", "filename": "src/libextra/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -1027,7 +1027,7 @@ mod tests {\n \n         fn test(s: &str, format: &str) -> bool {\n             match strptime(s, format) {\n-              Ok(ref tm) => tm.strftime(format) == str::to_owned(s),\n+              Ok(ref tm) => tm.strftime(format) == s.to_owned(),\n               Err(e) => fail!(e)\n             }\n         }"}, {"sha": "6017b804b578009be30ad91b02154da842a1012b", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -12,7 +12,6 @@\n use std::option;\n use std::os;\n use std::result;\n-use std::str;\n \n // A module for searching for libraries\n // FIXME (#2658): I'm not happy how this module turned out. Should\n@@ -83,7 +82,7 @@ pub fn mk_filesearch(maybe_sysroot: &Option<@Path>,\n     @FileSearchImpl {\n         sysroot: sysroot,\n         addl_lib_search_paths: addl_lib_search_paths,\n-        target_triple: str::to_owned(target_triple)\n+        target_triple: target_triple.to_owned()\n     } as @FileSearch\n }\n \n@@ -110,7 +109,7 @@ pub fn search<T>(filesearch: @FileSearch, pick: pick<T>) -> Option<T> {\n \n pub fn relative_target_lib_path(target_triple: &str) -> Path {\n     Path(libdir()).push_many([~\"rustc\",\n-                              str::to_owned(target_triple),\n+                              target_triple.to_owned(),\n                               libdir()])\n }\n "}, {"sha": "481d27f6944be2cb703cf476c0553410d74be41d", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -80,7 +80,7 @@ fn libname(cx: &Context) -> (~str, ~str) {\n         os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n \n-    (str::to_owned(dll_prefix), str::to_owned(dll_suffix))\n+    (dll_prefix.to_owned(), dll_suffix.to_owned())\n }\n \n fn find_library_crate_aux("}, {"sha": "05a5184ccbac8f7be7e6949a2316aa8cc6ad66c5", "filename": "src/libstd/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -763,7 +763,7 @@ impl<T:Reader> ReaderUtil for T {\n     fn read_lines(&self) -> ~[~str] {\n         do vec::build |push| {\n             for self.each_line |line| {\n-                push(str::to_owned(line));\n+                push(line.to_owned());\n             }\n         }\n     }"}, {"sha": "42b651a8e3839e63e899ae9eb9d97c3146d2c2b8", "filename": "src/libstd/str.rs", "status": "modified", "additions": 22, "deletions": 41, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -32,7 +32,7 @@ use ptr::RawPtr;\n use to_str::ToStr;\n use uint;\n use vec;\n-use vec::{OwnedVector, OwnedCopyableVector, ImmutableVector};\n+use vec::{OwnedVector, OwnedCopyableVector, ImmutableVector, MutableVector};\n \n /*\n Section: Conditions\n@@ -120,23 +120,17 @@ pub fn from_bytes_slice<'a>(vector: &'a [u8]) -> &'a str {\n     }\n }\n \n-/// Copy a slice into a new unique str\n-#[inline]\n-pub fn to_owned(s: &str) -> ~str {\n-    unsafe { raw::slice_bytes_owned(s, 0, s.len()) }\n-}\n-\n impl ToStr for ~str {\n     #[inline]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n impl<'self> ToStr for &'self str {\n     #[inline]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n impl ToStr for @str {\n     #[inline]\n-    fn to_str(&self) -> ~str { to_owned(*self) }\n+    fn to_str(&self) -> ~str { self.to_owned() }\n }\n \n /**\n@@ -857,33 +851,6 @@ pub mod raw {\n         ::cast::transmute(v)\n     }\n \n-    /**\n-     * Takes a bytewise (not UTF-8) slice from a string.\n-     *\n-     * Returns the substring from [`begin`..`end`).\n-     *\n-     * # Failure\n-     *\n-     * If begin is greater than end.\n-     * If end is greater than the length of the string.\n-     */\n-    pub unsafe fn slice_bytes_owned(s: &str, begin: uint, end: uint) -> ~str {\n-        do s.as_imm_buf |sbuf, n| {\n-            assert!((begin <= end));\n-            assert!((end <= n));\n-\n-            let mut v = vec::with_capacity(end - begin + 1u);\n-            do v.as_imm_buf |vbuf, _vlen| {\n-                let vbuf = ::cast::transmute_mut_unsafe(vbuf);\n-                let src = ptr::offset(sbuf, begin);\n-                ptr::copy_memory(vbuf, src, end - begin);\n-            }\n-            vec::raw::set_len(&mut v, end - begin);\n-            v.push(0u8);\n-            ::cast::transmute(v)\n-        }\n-    }\n-\n     /**\n      * Takes a bytewise (not UTF-8) slice from a string.\n      *\n@@ -936,7 +903,7 @@ pub mod raw {\n         let len = s.len();\n         assert!((len > 0u));\n         let b = s[0];\n-        *s = raw::slice_bytes_owned(*s, 1u, len);\n+        *s = s.slice(1, len).to_owned();\n         return b;\n     }\n \n@@ -1609,7 +1576,21 @@ impl<'self> StrSlice<'self> for &'self str {\n \n     /// Copy a slice into a new unique str\n     #[inline]\n-    fn to_owned(&self) -> ~str { to_owned(*self) }\n+    fn to_owned(&self) -> ~str {\n+        do self.as_imm_buf |src, len| {\n+            assert!(len > 0);\n+            unsafe {\n+                let mut v = vec::with_capacity(len);\n+\n+                do v.as_mut_buf |dst, _| {\n+                    ptr::copy_memory(dst, src, len - 1);\n+                }\n+                vec::raw::set_len(&mut v, len - 1);\n+                v.push(0u8);\n+                ::cast::transmute(v)\n+            }\n+        }\n+    }\n \n     #[inline]\n     fn to_managed(&self) -> @str {\n@@ -2177,7 +2158,7 @@ impl OwnedStr for ~str {\n      */\n     fn shift_char(&mut self) -> char {\n         let CharRange {ch, next} = self.char_range_at(0u);\n-        *self = unsafe { raw::slice_bytes_owned(*self, next, self.len()) };\n+        *self = self.slice(next, self.len()).to_owned();\n         return ch;\n     }\n \n@@ -2270,7 +2251,7 @@ impl OwnedStr for ~str {\n impl Clone for ~str {\n     #[inline]\n     fn clone(&self) -> ~str {\n-        to_owned(*self)\n+        self.to_owned()\n     }\n }\n "}, {"sha": "42908a339d200dbea1210087747f71cbaeebfaa7", "filename": "src/test/run-pass/struct-order-of-eval-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-1.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -14,5 +14,5 @@ struct S { f0: ~str, f1: int }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f0: str::to_owned(s), ..S { f0: s, f1: 23 } };\n+    let _s = S { f0: s.to_owned(), ..S { f0: s, f1: 23 } };\n }"}, {"sha": "b6851a728882a94fe4fafe912ef436f7b7722505", "filename": "src/test/run-pass/struct-order-of-eval-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31b77aecfc195c774852965329b5e75453eee0b2/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31b77aecfc195c774852965329b5e75453eee0b2/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-order-of-eval-2.rs?ref=31b77aecfc195c774852965329b5e75453eee0b2", "patch": "@@ -14,5 +14,5 @@ struct S { f0: ~str, f1: ~str }\n \n pub fn main() {\n     let s = ~\"Hello, world!\";\n-    let _s = S { f1: str::to_owned(s), f0: s };\n+    let _s = S { f1: s.to_owned(), f0: s };\n }"}]}