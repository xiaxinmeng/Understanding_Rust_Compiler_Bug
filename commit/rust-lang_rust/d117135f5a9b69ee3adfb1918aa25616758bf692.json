{"sha": "d117135f5a9b69ee3adfb1918aa25616758bf692", "node_id": "C_kwDOAAsO6NoAKGQxMTcxMzVmNWE5YjY5ZWUzYWRmYjE5MThhYTI1NjE2NzU4YmY2OTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T10:20:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T10:20:25Z"}, "message": "Auto merge of #106253 - nbdd0121:upcast, r=compiler-errors\n\nSkip possible where_clause_object_safety lints when checking `multiple_supertrait_upcastable`\n\nFix #106247\n\nTo achieve this, I lifted the `WhereClauseReferencesSelf` out from `object_safety_violations` and move it into `is_object_safe` (which is changed to a new query).\n\ncc `@dtolnay`\nr? `@compiler-errors`", "tree": {"sha": "cf9c6d8cab71b9b5125f2a27a76437640ebfcc4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf9c6d8cab71b9b5125f2a27a76437640ebfcc4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d117135f5a9b69ee3adfb1918aa25616758bf692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d117135f5a9b69ee3adfb1918aa25616758bf692", "html_url": "https://github.com/rust-lang/rust/commit/d117135f5a9b69ee3adfb1918aa25616758bf692", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d117135f5a9b69ee3adfb1918aa25616758bf692/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a29efccb1eff324c63454677688b5d7e08b5f40f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29efccb1eff324c63454677688b5d7e08b5f40f", "html_url": "https://github.com/rust-lang/rust/commit/a29efccb1eff324c63454677688b5d7e08b5f40f"}, {"sha": "66f3ab90a14254d70c96acb0332fe403964025ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f3ab90a14254d70c96acb0332fe403964025ce", "html_url": "https://github.com/rust-lang/rust/commit/66f3ab90a14254d70c96acb0332fe403964025ce"}], "stats": {"total": 247, "additions": 219, "deletions": 28}, "files": [{"sha": "dca678dff7a793253524fe055db88b49934f9dc1", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -100,6 +100,8 @@ lint_cstring_ptr = getting the inner pointer of a temporary `CString`\n     .note = pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned\n     .help = for more information, see https://doc.rust-lang.org/reference/destructors.html\n \n+lint_multple_supertrait_upcastable = `{$ident}` is object-safe and has multiple supertraits\n+\n lint_identifier_non_ascii_char = identifier contains non-ASCII characters\n \n lint_identifier_uncommon_codepoints = identifier contains uncommon Unicode codepoints"}, {"sha": "af9c40a3ba5227b249221b6a1e59a5fdfe1a2c0a", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -160,6 +160,8 @@ declare_features! (\n     (active, intrinsics, \"1.0.0\", None, None),\n     /// Allows using `#[lang = \"..\"]` attribute for linking items to special compiler logic.\n     (active, lang_items, \"1.0.0\", None, None),\n+    /// Allows the `multiple_supertrait_upcastable` lint.\n+    (active, multiple_supertrait_upcastable, \"CURRENT_RUSTC_VERSION\", None, None),\n     /// Allows using `#[omit_gdb_pretty_printer_section]`.\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n     /// Allows using `#[prelude_import]` on glob `use` items."}, {"sha": "67bcfb1cb70fc0c32605101035fc35fdfdcde64c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -841,7 +841,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         _ => {}\n     }\n     if !trait_should_be_self.is_empty() {\n-        if tcx.object_safety_violations(trait_def_id).is_empty() {\n+        if tcx.check_is_object_safe(trait_def_id) {\n             return;\n         }\n         let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();"}, {"sha": "bbde59c953a026375ef708e93141d0691d3fd2c5", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -169,7 +169,7 @@ fn check_object_overlap<'tcx>(\n         });\n \n         for component_def_id in component_def_ids {\n-            if !tcx.is_object_safe(component_def_id) {\n+            if !tcx.check_is_object_safe(component_def_id) {\n                 // Without the 'object_safe_for_dispatch' feature this is an error\n                 // which will be reported by wfcheck. Ignore it here.\n                 // This is tested by `coherence-impl-trait-for-trait-object-safe.rs`."}, {"sha": "ade9c037c519405d04470edbf8c5741f8e9cba07", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1823,7 +1823,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         .trait_ref()\n                         .and_then(|t| t.trait_def_id())\n                         .map_or(false, |def_id| {\n-                            fcx.tcx.object_safety_violations(def_id).is_empty()\n+                            fcx.tcx.check_is_object_safe(def_id)\n                         })\n                 })\n             }"}, {"sha": "ba15dbd86cfa4caff089c597a84391a69ff7a400", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -64,6 +64,7 @@ mod let_underscore;\n mod levels;\n mod lints;\n mod methods;\n+mod multiple_supertrait_upcastable;\n mod non_ascii_idents;\n mod non_fmt_panic;\n mod nonstandard_style;\n@@ -98,6 +99,7 @@ use hidden_unicode_codepoints::*;\n use internal::*;\n use let_underscore::*;\n use methods::*;\n+use multiple_supertrait_upcastable::*;\n use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n@@ -232,6 +234,7 @@ late_lint_methods!(\n             InvalidAtomicOrdering: InvalidAtomicOrdering,\n             NamedAsmLabels: NamedAsmLabels,\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n+            MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n         ]\n     ]\n );"}, {"sha": "0c1019545f382f8a5ce425a871a5aa1cc225f149", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -917,6 +917,13 @@ pub struct CStringPtr {\n     pub unwrap: Span,\n }\n \n+// multiple_supertrait_upcastable.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_multple_supertrait_upcastable)]\n+pub struct MultipleSupertraitUpcastable {\n+    pub ident: Ident,\n+}\n+\n // non_ascii_idents.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_identifier_non_ascii_char)]"}, {"sha": "c2ed0e19f4011e5aa70221716ac318107c57f237", "filename": "compiler/rustc_lint/src/multiple_supertrait_upcastable.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Fmultiple_supertrait_upcastable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_lint%2Fsrc%2Fmultiple_supertrait_upcastable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fmultiple_supertrait_upcastable.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -0,0 +1,60 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use rustc_hir as hir;\n+use rustc_span::sym;\n+\n+declare_lint! {\n+    /// The `multiple_supertrait_upcastable` lint detects when an object-safe trait has multiple\n+    /// supertraits.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// trait A {}\n+    /// trait B {}\n+    ///\n+    /// #[warn(multiple_supertrait_upcastable)]\n+    /// trait C: A + B {}\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// To support upcasting with multiple supertraits, we need to store multiple vtables and this\n+    /// can result in extra space overhead, even if no code actually uses upcasting.\n+    /// This lint allows users to identify when such scenarios occur and to decide whether the\n+    /// additional overhead is justified.\n+    pub MULTIPLE_SUPERTRAIT_UPCASTABLE,\n+    Allow,\n+    \"detect when an object-safe trait has multiple supertraits\",\n+    @feature_gate = sym::multiple_supertrait_upcastable;\n+}\n+\n+declare_lint_pass!(MultipleSupertraitUpcastable => [MULTIPLE_SUPERTRAIT_UPCASTABLE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for MultipleSupertraitUpcastable {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+        let def_id = item.owner_id.to_def_id();\n+        // NOTE(nbdd0121): use `object_safety_violations` instead of `check_is_object_safe` because\n+        // the latter will report `where_clause_object_safety` lint.\n+        if let hir::ItemKind::Trait(_, _, _, _, _) = item.kind\n+            && cx.tcx.object_safety_violations(def_id).is_empty()\n+        {\n+            let direct_super_traits_iter = cx.tcx\n+                    .super_predicates_of(def_id)\n+                    .predicates\n+                    .into_iter()\n+                    .filter_map(|(pred, _)| pred.to_opt_poly_trait_pred());\n+            if direct_super_traits_iter.count() > 1 {\n+                cx.emit_spanned_lint(\n+                    MULTIPLE_SUPERTRAIT_UPCASTABLE,\n+                    cx.tcx.def_span(def_id),\n+                    crate::lints::MultipleSupertraitUpcastable {\n+                        ident: item.ident\n+                    },\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "3917a97db4f08eb1ed6889c5f8011ae7ffba17b9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1274,6 +1274,9 @@ rustc_queries! {\n     query object_safety_violations(trait_id: DefId) -> &'tcx [traits::ObjectSafetyViolation] {\n         desc { |tcx| \"determining object safety of trait `{}`\", tcx.def_path_str(trait_id) }\n     }\n+    query check_is_object_safe(trait_id: DefId) -> bool {\n+        desc { |tcx| \"checking if trait `{}` is object safe\", tcx.def_path_str(trait_id) }\n+    }\n \n     /// Gets the ParameterEnvironment for a given item; this environment\n     /// will be in \"user-facing\" mode, meaning that it is suitable for"}, {"sha": "25c6777a14c7084aa65ecdc7a933d66e78421056", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -2458,10 +2458,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n     }\n \n-    pub fn is_object_safe(self, key: DefId) -> bool {\n-        self.object_safety_violations(key).is_empty()\n-    }\n-\n     #[inline]\n     pub fn is_const_fn_raw(self, def_id: DefId) -> bool {\n         matches!("}, {"sha": "f1119214be44db4e7d61615bfa9f488253c2f634", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -955,6 +955,7 @@ symbols! {\n         mul,\n         mul_assign,\n         mul_with_overflow,\n+        multiple_supertrait_upcastable,\n         must_not_suspend,\n         must_use,\n         naked,"}, {"sha": "dd16672cc7a0110fe6917dd9d73f45c7cbf925f4", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     }\n \n     fn compute_object_safe_goal(&mut self, trait_def_id: DefId) -> QueryResult<'tcx> {\n-        if self.tcx().is_object_safe(trait_def_id) {\n+        if self.tcx().check_is_object_safe(trait_def_id) {\n             self.make_canonical_response(Certainty::Yes)\n         } else {\n             Err(NoSolution)"}, {"sha": "b35b9d62759c73267bf4d3f217616a6305b23592", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1748,7 +1748,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n                 predicates\n                     .principal_def_id()\n-                    .map_or(true, |def_id| self.tcx.object_safety_violations(def_id).is_empty())\n+                    .map_or(true, |def_id| self.tcx.check_is_object_safe(def_id))\n             }\n             // We only want to suggest `impl Trait` to `dyn Trait`s.\n             // For example, `fn foo() -> str` needs to be filtered out."}, {"sha": "18d30771035fdbcebf4bdf961ff9bbccd2993ed1", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ObjectSafe(trait_def_id) => {\n-                    if !self.selcx.tcx().is_object_safe(trait_def_id) {\n+                    if !self.selcx.tcx().check_is_object_safe(trait_def_id) {\n                         ProcessResult::Error(CodeSelectionError(Unimplemented))\n                     } else {\n                         ProcessResult::Changed(vec![])"}, {"sha": "565cfca9090e19c2c5e41d7d24fd0eb874661733", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 33, "deletions": 14, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -62,6 +62,37 @@ fn object_safety_violations(tcx: TyCtxt<'_>, trait_def_id: DefId) -> &'_ [Object\n     )\n }\n \n+fn check_is_object_safe(tcx: TyCtxt<'_>, trait_def_id: DefId) -> bool {\n+    let violations = tcx.object_safety_violations(trait_def_id);\n+\n+    if violations.is_empty() {\n+        return true;\n+    }\n+\n+    // If the trait contains any other violations, then let the error reporting path\n+    // report it instead of emitting a warning here.\n+    if violations.iter().all(|violation| {\n+        matches!(\n+            violation,\n+            ObjectSafetyViolation::Method(_, MethodViolationCode::WhereClauseReferencesSelf, _)\n+        )\n+    }) {\n+        for violation in violations {\n+            if let ObjectSafetyViolation::Method(\n+                _,\n+                MethodViolationCode::WhereClauseReferencesSelf,\n+                span,\n+            ) = violation\n+            {\n+                lint_object_unsafe_trait(tcx, *span, trait_def_id, &violation);\n+            }\n+        }\n+        return true;\n+    }\n+\n+    false\n+}\n+\n /// We say a method is *vtable safe* if it can be invoked on a trait\n /// object. Note that object-safe traits can have some\n /// non-vtable-safe methods, so long as they require `Self: Sized` or\n@@ -93,19 +124,6 @@ fn object_safety_violations_for_trait(\n             object_safety_violation_for_method(tcx, trait_def_id, &item)\n                 .map(|(code, span)| ObjectSafetyViolation::Method(item.name, code, span))\n         })\n-        .filter(|violation| {\n-            if let ObjectSafetyViolation::Method(\n-                _,\n-                MethodViolationCode::WhereClauseReferencesSelf,\n-                span,\n-            ) = violation\n-            {\n-                lint_object_unsafe_trait(tcx, *span, trait_def_id, &violation);\n-                false\n-            } else {\n-                true\n-            }\n-        })\n         .collect();\n \n     // Check the trait itself.\n@@ -866,5 +884,6 @@ pub fn contains_illegal_impl_trait_in_trait<'tcx>(\n }\n \n pub fn provide(providers: &mut ty::query::Providers) {\n-    *providers = ty::query::Providers { object_safety_violations, ..*providers };\n+    *providers =\n+        ty::query::Providers { object_safety_violations, check_is_object_safe, ..*providers };\n }"}, {"sha": "7b7abcf552ab7da31b513f5346fbad37e814113a", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -466,7 +466,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     if let Some(principal) = data.principal() {\n                         if !self.infcx.tcx.features().object_safe_for_dispatch {\n                             principal.with_self_ty(self.tcx(), self_ty)\n-                        } else if self.tcx().is_object_safe(principal.def_id()) {\n+                        } else if self.tcx().check_is_object_safe(principal.def_id()) {\n                             principal.with_self_ty(self.tcx(), self_ty)\n                         } else {\n                             return;"}, {"sha": "9c84bfaad492bce593d072a43b55c36bda4c707d", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -1009,7 +1009,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // `T` -> `Trait`\n             (_, &ty::Dynamic(ref data, r, ty::Dyn)) => {\n                 let mut object_dids = data.auto_traits().chain(data.principal_def_id());\n-                if let Some(did) = object_dids.find(|did| !tcx.is_object_safe(*did)) {\n+                if let Some(did) = object_dids.find(|did| !tcx.check_is_object_safe(*did)) {\n                     return Err(TraitNotObjectSafe(did));\n                 }\n "}, {"sha": "b8f5aeee2d593f4386107e3d11b4f9a2144cffa4", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -797,7 +797,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 }\n \n                 ty::PredicateKind::ObjectSafe(trait_def_id) => {\n-                    if self.tcx().is_object_safe(trait_def_id) {\n+                    if self.tcx().check_is_object_safe(trait_def_id) {\n                         Ok(EvaluatedToOk)\n                     } else {\n                         Ok(EvaluatedToErr)"}, {"sha": "84f7e8362081871f9321492d60eaef815efeee43", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -580,7 +580,7 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n     }\n \n     fn is_object_safe(&self, trait_id: chalk_ir::TraitId<RustInterner<'tcx>>) -> bool {\n-        self.interner.tcx.is_object_safe(trait_id.0)\n+        self.interner.tcx.check_is_object_safe(trait_id.0)\n     }\n \n     fn hidden_opaque_type("}, {"sha": "76dabfb429dd503ab945ff002028f0a7f2d375dc", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -87,6 +87,7 @@\n #![warn(missing_debug_implementations)]\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n+#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n //\n // Library features:\n #![feature(alloc_layout_extra)]\n@@ -195,6 +196,7 @@\n #![feature(c_unwind)]\n #![feature(with_negative_coherence)]\n #![cfg_attr(test, feature(panic_update_hook))]\n+#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n //\n // Rustdoc features:\n #![feature(doc_cfg)]"}, {"sha": "d2fac23ff18be7542729e0b6793d796daad17dd5", "filename": "library/core/src/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Fcore%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Fcore%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ferror.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -28,6 +28,7 @@ use crate::fmt::{Debug, Display};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"Error\")]\n #[rustc_has_incoherent_inherent_impls]\n+#[cfg_attr(not(bootstrap), allow(multiple_supertrait_upcastable))]\n pub trait Error: Debug + Display {\n     /// The lower-level source of this error, if any.\n     ///"}, {"sha": "6dfe36e6926ef057759d23d198abd83910688ada", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -95,6 +95,7 @@\n #![warn(missing_docs)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n+#![cfg_attr(not(bootstrap), warn(multiple_supertrait_upcastable))]\n //\n // Library features:\n #![feature(const_align_offset)]\n@@ -235,6 +236,7 @@\n #![feature(unsized_fn_params)]\n #![feature(asm_const)]\n #![feature(const_transmute_copy)]\n+#![cfg_attr(not(bootstrap), feature(multiple_supertrait_upcastable))]\n //\n // Target features:\n #![feature(arm_target_feature)]"}, {"sha": "0467dea621b4c2a063b4de2f83ba99ac4905bfb8", "filename": "tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![deny(multiple_supertrait_upcastable)]\n+//~^ WARNING unknown lint: `multiple_supertrait_upcastable`\n+//~| WARNING unknown lint: `multiple_supertrait_upcastable`\n+//~| WARNING unknown lint: `multiple_supertrait_upcastable`\n+#![warn(multiple_supertrait_upcastable)]\n+//~^ WARNING unknown lint: `multiple_supertrait_upcastable`\n+//~| WARNING unknown lint: `multiple_supertrait_upcastable`\n+//~| WARNING unknown lint: `multiple_supertrait_upcastable`\n+\n+fn main() {}"}, {"sha": "1f725f35417785e05aad434e5797fa07f181ec32", "filename": "tests/ui/feature-gates/feature-gate-multiple_supertrait_upcastable.stderr", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-multiple_supertrait_upcastable.stderr?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -0,0 +1,57 @@\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1\n+   |\n+LL | #![deny(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+   = note: `#[warn(unknown_lints)]` on by default\n+\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1\n+   |\n+LL | #![warn(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1\n+   |\n+LL | #![deny(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1\n+   |\n+LL | #![warn(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:3:1\n+   |\n+LL | #![deny(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+\n+warning: unknown lint: `multiple_supertrait_upcastable`\n+  --> $DIR/feature-gate-multiple_supertrait_upcastable.rs:7:1\n+   |\n+LL | #![warn(multiple_supertrait_upcastable)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `multiple_supertrait_upcastable` lint is unstable\n+   = help: add `#![feature(multiple_supertrait_upcastable)]` to the crate attributes to enable\n+\n+warning: 6 warnings emitted\n+"}, {"sha": "3c6ab86e4c65ce205360978cd76a534124bad1e0", "filename": "tests/ui/traits/trait-upcasting/multiple_supertrait_upcastable.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.rs?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -0,0 +1,10 @@\n+#![feature(multiple_supertrait_upcastable)]\n+#![deny(multiple_supertrait_upcastable)]\n+\n+trait A {}\n+trait B {}\n+\n+trait C: A + B {}\n+//~^ ERROR `C` is object-safe and has multiple supertraits\n+\n+fn main() {}"}, {"sha": "ad80a009ece80674a72773efc993d868bdecea2a", "filename": "tests/ui/traits/trait-upcasting/multiple_supertrait_upcastable.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d117135f5a9b69ee3adfb1918aa25616758bf692/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Ftrait-upcasting%2Fmultiple_supertrait_upcastable.stderr?ref=d117135f5a9b69ee3adfb1918aa25616758bf692", "patch": "@@ -0,0 +1,14 @@\n+error: `C` is object-safe and has multiple supertraits\n+  --> $DIR/multiple_supertrait_upcastable.rs:7:1\n+   |\n+LL | trait C: A + B {}\n+   | ^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/multiple_supertrait_upcastable.rs:2:9\n+   |\n+LL | #![deny(multiple_supertrait_upcastable)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}