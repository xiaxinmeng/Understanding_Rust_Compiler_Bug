{"sha": "4636b32a42ea3111f53048197092e7ac08e6f792", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzZiMzJhNDJlYTMxMTFmNTMwNDgxOTcwOTJlN2FjMDhlNmY3OTI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T04:33:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T07:02:29Z"}, "message": "Make most of the failure functions take &(&'static str, uint)\n\nPassing one pointer takes less code than one pointer and an integer.", "tree": {"sha": "3801e7d70873d01f567f3eda119cc12c3a59cb5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3801e7d70873d01f567f3eda119cc12c3a59cb5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4636b32a42ea3111f53048197092e7ac08e6f792", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4636b32a42ea3111f53048197092e7ac08e6f792", "html_url": "https://github.com/rust-lang/rust/commit/4636b32a42ea3111f53048197092e7ac08e6f792", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4636b32a42ea3111f53048197092e7ac08e6f792/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9035c26e2c4368b39c8daa979f669d10d484825", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9035c26e2c4368b39c8daa979f669d10d484825", "html_url": "https://github.com/rust-lang/rust/commit/b9035c26e2c4368b39c8daa979f669d10d484825"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "022258911f1e09b419c86d2437df7d7aeb66ea2e", "filename": "src/libcore/failure.rs", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibcore%2Ffailure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibcore%2Ffailure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffailure.rs?ref=4636b32a42ea3111f53048197092e7ac08e6f792", "patch": "@@ -33,33 +33,72 @@\n use fmt;\n use intrinsics;\n \n+#[cfg(stage0)]\n #[cold] #[inline(never)] // this is the slow path, always\n #[lang=\"fail_\"]\n fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file, line);\n+        begin_unwind(args, &(file, line));\n     }, \"{}\", expr);\n \n     unsafe { intrinsics::abort() }\n }\n \n+#[cfg(stage0)]\n #[cold]\n #[lang=\"fail_bounds_check\"]\n fn fail_bounds_check(file: &'static str, line: uint,\n                      index: uint, len: uint) -> ! {\n     format_args!(|args| -> () {\n-        begin_unwind(args, file, line);\n+        begin_unwind(args, &(file, line));\n     }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n     unsafe { intrinsics::abort() }\n }\n \n+#[cfg(stage0)]\n #[cold]\n-pub fn begin_unwind(fmt: &fmt::Arguments, file: &'static str, line: uint) -> ! {\n+pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     #[allow(ctypes)]\n     extern {\n         #[lang = \"begin_unwind\"]\n         fn begin_unwind(fmt: &fmt::Arguments, file: &'static str,\n                         line: uint) -> !;\n     }\n+    let (file, line) = *file_line;\n+    unsafe { begin_unwind(fmt, file, line) }\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold] #[inline(never)] // this is the slow path, always\n+#[lang=\"fail_\"]\n+fn fail_(expr: &'static str, file: &'static str, line: uint) -> ! {\n+    format_args!(|args| -> () {\n+        begin_unwind(args, &(file, line));\n+    }, \"{}\", expr);\n+\n+    unsafe { intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold]\n+#[lang=\"fail_bounds_check\"]\n+fn fail_bounds_check(file: &'static str, line: uint,\n+                     index: uint, len: uint) -> ! {\n+    format_args!(|args| -> () {\n+        begin_unwind(args, &(file, line));\n+    }, \"index out of bounds: the len is {} but the index is {}\", len, index);\n+    unsafe { intrinsics::abort() }\n+}\n+\n+#[cfg(not(stage0))]\n+#[cold]\n+pub fn begin_unwind(fmt: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n+    #[allow(ctypes)]\n+    extern {\n+        #[lang = \"begin_unwind\"]\n+        fn begin_unwind(fmt: &fmt::Arguments, file_line: &'static str,\n+                        line: uint) -> !;\n+    }\n+    let (file, line) = *file_line;\n     unsafe { begin_unwind(fmt, file, line) }\n }"}, {"sha": "e2709c4edde475b1a64747012e0f49eef76ed3ce", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=4636b32a42ea3111f53048197092e7ac08e6f792", "patch": "@@ -33,7 +33,7 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::core::failure::begin_unwind(fmt, file!(), line!())\n+            ::core::failure::begin_unwind(fmt, &(file!(), line!()))\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}, {"sha": "db2cae2371821355b4adcba7b363a41852ce9eb4", "filename": "src/librustrt/unwind.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibrustrt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibrustrt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Funwind.rs?ref=4636b32a42ea3111f53048197092e7ac08e6f792", "patch": "@@ -384,7 +384,7 @@ pub mod eabi {\n #[lang = \"begin_unwind\"]\n pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n                                 file: &'static str, line: uint) -> ! {\n-    begin_unwind_fmt(msg, file, line)\n+    begin_unwind_fmt(msg, &(file, line))\n }\n \n /// The entry point for unwinding with a formatted message.\n@@ -394,8 +394,7 @@ pub extern fn rust_begin_unwind(msg: &fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str,\n-                        line: uint) -> ! {\n+pub fn begin_unwind_fmt(msg: &fmt::Arguments, file_line: &(&'static str, uint)) -> ! {\n     use core::fmt::FormatWriter;\n \n     // We do two allocations here, unfortunately. But (a) they're\n@@ -415,9 +414,10 @@ pub fn begin_unwind_fmt(msg: &fmt::Arguments, file: &'static str,\n     let mut v = Vec::new();\n     let _ = write!(&mut VecWriter { v: &mut v }, \"{}\", msg);\n \n-    begin_unwind_inner(box String::from_utf8(v).unwrap(), file, line)\n+    begin_unwind_inner(box String::from_utf8(v).unwrap(), file_line)\n }\n \n+// FIXME: Need to change expr_fail in AstBuilder to change this to &(str, uint)\n /// This is the entry point of unwinding for fail!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> ! {\n@@ -429,13 +429,13 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file: &'static str, line: uint) -> !\n     // failing.\n \n     // see below for why we do the `Any` coercion here.\n-    begin_unwind_inner(box msg, file, line)\n+    begin_unwind_inner(box msg, &(file, line))\n }\n \n /// Unwinding for `fail!()`. Saves passing a string.\n #[inline(never)] #[cold] #[experimental]\n-pub fn begin_unwind_no_time_to_explain(file: &'static str, line: uint) -> ! {\n-    begin_unwind_inner(box () (\"explicit failure\"), file, line)\n+pub fn begin_unwind_no_time_to_explain(file_line: &(&'static str, uint)) -> ! {\n+    begin_unwind_inner(box () (\"explicit failure\"), file_line)\n }\n \n /// The core of the unwinding.\n@@ -448,9 +448,7 @@ pub fn begin_unwind_no_time_to_explain(file: &'static str, line: uint) -> ! {\n /// Do this split took the LLVM IR line counts of `fn main() { fail!()\n /// }` from ~1900/3700 (-O/no opts) to 180/590.\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n-fn begin_unwind_inner(msg: Box<Any + Send>,\n-                      file: &'static str,\n-                      line: uint) -> ! {\n+fn begin_unwind_inner(msg: Box<Any + Send>, file_line: &(&'static str, uint)) -> ! {\n     // First, invoke call the user-defined callbacks triggered on task failure.\n     //\n     // By the time that we see a callback has been registered (by reading\n@@ -467,6 +465,7 @@ fn begin_unwind_inner(msg: Box<Any + Send>,\n             0 => {}\n             n => {\n                 let f: Callback = unsafe { mem::transmute(n) };\n+                let (file, line) = *file_line;\n                 f(msg, file, line);\n             }\n         }"}, {"sha": "fd0c72ce313eefdae380d90db4b45b1353d0b426", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4636b32a42ea3111f53048197092e7ac08e6f792/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=4636b32a42ea3111f53048197092e7ac08e6f792", "patch": "@@ -39,7 +39,7 @@\n #[macro_export]\n macro_rules! fail(\n     () => (\n-        ::std::rt::begin_unwind_no_time_to_explain(file!(), line!())\n+        ::std::rt::begin_unwind_no_time_to_explain(&(file!(), line!()))\n     );\n     ($msg:expr) => (\n         ::std::rt::begin_unwind($msg, file!(), line!())\n@@ -58,7 +58,7 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::std::rt::begin_unwind_fmt(fmt, file!(), line!())\n+            ::std::rt::begin_unwind_fmt(fmt, &(file!(), line!()))\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}]}