{"sha": "c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "node_id": "C_kwDOAAsO6NoAKGMzZjMwYWU0ZjAwNGU2ZTNjYzUyZTMwMzcwMDM0ZTc5ZWZhYWQzZDU", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:06:28Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2022-01-14T10:06:28Z"}, "message": "removed scoped threads, cleanup", "tree": {"sha": "53e3c13a22a76a421862cd8114bea0f67ca8f428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53e3c13a22a76a421862cd8114bea0f67ca8f428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "html_url": "https://github.com/rust-lang/rust/commit/c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83c0166be76462c64c3609bfba25b35e77c8582", "url": "https://api.github.com/repos/rust-lang/rust/commits/f83c0166be76462c64c3609bfba25b35e77c8582", "html_url": "https://github.com/rust-lang/rust/commit/f83c0166be76462c64c3609bfba25b35e77c8582"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "d9fa697a6a7cd1fc7bb94085b4823c59d5427183", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "patch": "@@ -578,7 +578,6 @@ dependencies = [\n  \"cfg\",\n  \"cov-mark\",\n  \"crossbeam-channel\",\n- \"crossbeam-utils\",\n  \"dot\",\n  \"either\",\n  \"expect-test\","}, {"sha": "a796f252130bf6cede0d724e58c862762b026ca2", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "patch": "@@ -12,7 +12,6 @@ doctest = false\n [dependencies]\n cov-mark = \"2.0.0-pre.1\"\n crossbeam-channel = \"0.5.0\"\n-crossbeam-utils = \"0.8.5\"\n either = \"1.5.3\"\n itertools = \"0.10.0\"\n tracing = \"0.1\""}, {"sha": "8aef76eae807d240f6f1ae0670177a8b9cd29300", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 66, "deletions": 69, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "patch": "@@ -8,7 +8,7 @@ use hir::db::DefDatabase;\n use ide_db::{\n     base_db::{\n         salsa::{Database, ParallelDatabase, Snapshot},\n-        CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n+        Cancelled, CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n     },\n     FxIndexMap,\n };\n@@ -54,84 +54,81 @@ pub(crate) fn parallel_prime_caches(\n         builder.build()\n     };\n \n-    crossbeam_utils::thread::scope(move |s| {\n-        let (work_sender, work_receiver) = crossbeam_channel::unbounded();\n-        let (progress_sender, progress_receiver) = crossbeam_channel::unbounded();\n+    let (work_sender, work_receiver) = crossbeam_channel::unbounded();\n+    let (progress_sender, progress_receiver) = crossbeam_channel::unbounded();\n \n-        enum ParallelPrimeCacheWorkerProgress {\n-            BeginCrate { crate_id: CrateId, crate_name: String },\n-            EndCrate { crate_id: CrateId },\n-        }\n-\n-        let prime_caches_worker = move |db: Snapshot<RootDatabase>| {\n-            while let Ok((crate_id, crate_name)) = work_receiver.recv() {\n-                progress_sender\n-                    .send(ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name })?;\n+    enum ParallelPrimeCacheWorkerProgress {\n+        BeginCrate { crate_id: CrateId, crate_name: String },\n+        EndCrate { crate_id: CrateId },\n+    }\n \n-                // This also computes the DefMap\n-                db.import_map(crate_id);\n-\n-                progress_sender.send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id })?;\n-            }\n+    let prime_caches_worker = move |db: Snapshot<RootDatabase>| {\n+        while let Ok((crate_id, crate_name)) = work_receiver.recv() {\n+            progress_sender\n+                .send(ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name })?;\n \n-            Ok::<_, crossbeam_channel::SendError<_>>(())\n-        };\n+            // This also computes the DefMap\n+            db.import_map(crate_id);\n \n-        for _ in 0..num_worker_threads {\n-            let worker = prime_caches_worker.clone();\n-            let db = db.snapshot();\n-            s.spawn(move |_| worker(db));\n+            progress_sender.send(ParallelPrimeCacheWorkerProgress::EndCrate { crate_id })?;\n         }\n \n-        let crates_total = crates_to_prime.len();\n-        let mut crates_done = 0;\n-\n-        // an index map is used to preserve ordering so we can sort the progress report in order of\n-        // \"longest crate to index\" first\n-        let mut crates_currently_indexing =\n-            FxIndexMap::with_capacity_and_hasher(num_worker_threads as _, Default::default());\n+        Ok::<_, crossbeam_channel::SendError<_>>(())\n+    };\n \n-        while !crates_to_prime.is_empty() {\n-            db.unwind_if_cancelled();\n+    for _ in 0..num_worker_threads {\n+        let worker = prime_caches_worker.clone();\n+        let db = db.snapshot();\n+        std::thread::spawn(move || Cancelled::catch(|| worker(db)));\n+    }\n+\n+    let crates_total = crates_to_prime.pending();\n+    let mut crates_done = 0;\n+\n+    // an index map is used to preserve ordering so we can sort the progress report in order of\n+    // \"longest crate to index\" first\n+    let mut crates_currently_indexing =\n+        FxIndexMap::with_capacity_and_hasher(num_worker_threads as _, Default::default());\n+\n+    while !crates_to_prime.is_empty() {\n+        db.unwind_if_cancelled();\n+\n+        for crate_id in &mut crates_to_prime {\n+            work_sender\n+                .send((\n+                    crate_id,\n+                    graph[crate_id].display_name.as_deref().unwrap_or_default().to_string(),\n+                ))\n+                .ok();\n+        }\n \n-            for crate_id in &mut crates_to_prime {\n-                work_sender\n-                    .send((\n-                        crate_id,\n-                        graph[crate_id].display_name.as_deref().unwrap_or_default().to_string(),\n-                    ))\n-                    .ok();\n+        let worker_progress = match progress_receiver.recv() {\n+            Ok(p) => p,\n+            Err(_) => {\n+                // our workers may have died from a cancelled task, so we'll check and re-raise here.\n+                db.unwind_if_cancelled();\n+                break;\n             }\n+        };\n+        match worker_progress {\n+            ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name } => {\n+                crates_currently_indexing.insert(crate_id, crate_name);\n+            }\n+            ParallelPrimeCacheWorkerProgress::EndCrate { crate_id } => {\n+                crates_currently_indexing.remove(&crate_id);\n+                crates_to_prime.mark_done(crate_id);\n+                crates_done += 1;\n+            }\n+        };\n \n-            let worker_progress = match progress_receiver.recv() {\n-                Ok(p) => p,\n-                Err(_) => {\n-                    // our workers may have died from a cancelled task, so we'll check and re-raise here.\n-                    db.unwind_if_cancelled();\n-                    break;\n-                }\n-            };\n-            match worker_progress {\n-                ParallelPrimeCacheWorkerProgress::BeginCrate { crate_id, crate_name } => {\n-                    crates_currently_indexing.insert(crate_id, crate_name);\n-                }\n-                ParallelPrimeCacheWorkerProgress::EndCrate { crate_id } => {\n-                    crates_currently_indexing.remove(&crate_id);\n-                    crates_to_prime.mark_done(crate_id);\n-                    crates_done += 1;\n-                }\n-            };\n-\n-            let progress = ParallelPrimeCachesProgress {\n-                crates_currently_indexing: crates_currently_indexing.values().cloned().collect(),\n-                crates_done,\n-                crates_total,\n-            };\n-\n-            cb(progress);\n-        }\n-    })\n-    .unwrap();\n+        let progress = ParallelPrimeCachesProgress {\n+            crates_currently_indexing: crates_currently_indexing.values().cloned().collect(),\n+            crates_done,\n+            crates_total,\n+        };\n+\n+        cb(progress);\n+    }\n }\n \n fn compute_crates_to_prime(db: &RootDatabase, graph: &CrateGraph) -> FxHashSet<CrateId> {"}, {"sha": "68ba2d4a7b88e8f90f9c80b53be8f55a850552d5", "filename": "crates/ide/src/prime_caches/topologic_sort.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3f30ae4f004e6e3cc52e30370034e79efaad3d5/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches%2Ftopologic_sort.rs?ref=c3f30ae4f004e6e3cc52e30370034e79efaad3d5", "patch": "@@ -56,12 +56,12 @@ where\n         TopologicSortIterBuilder::new()\n     }\n \n-    pub(crate) fn len(&self) -> usize {\n+    pub(crate) fn pending(&self) -> usize {\n         self.nodes.len()\n     }\n \n     pub(crate) fn is_empty(&self) -> bool {\n-        self.len() == 0\n+        self.nodes.len() == 0 && self.ready.len() == 0\n     }\n \n     pub(crate) fn mark_done(&mut self, item: T) {"}]}