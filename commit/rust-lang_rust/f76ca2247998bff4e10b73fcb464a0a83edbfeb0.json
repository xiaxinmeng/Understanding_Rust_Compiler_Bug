{"sha": "f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "node_id": "C_kwDOAAsO6NoAKGY3NmNhMjI0Nzk5OGJmZjRlMTBiNzNmY2I0NjRhMGE4M2VkYmZlYjA", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T12:30:24Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T12:38:48Z"}, "message": "Enable inline asm on macOS", "tree": {"sha": "e8106540ae6ea395c5fdf9f92e78995285881c03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8106540ae6ea395c5fdf9f92e78995285881c03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "html_url": "https://github.com/rust-lang/rust/commit/f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e45f6000a0bd46d4b7580db59c86f3d30adbc270", "url": "https://api.github.com/repos/rust-lang/rust/commits/e45f6000a0bd46d4b7580db59c86f3d30adbc270", "html_url": "https://github.com/rust-lang/rust/commit/e45f6000a0bd46d4b7580db59c86f3d30adbc270"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "1e84c7fa3657b37afeb26614a49896fab8846b40", "filename": "Readme.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "patch": "@@ -52,9 +52,7 @@ configuration options.\n ## Not yet supported\n \n * Inline assembly ([no cranelift support](https://github.com/bytecodealliance/wasmtime/issues/1041))\n-    * On Linux there is support for invoking an external assembler for `global_asm!` and `asm!`.\n-      `llvm_asm!` will remain unimplemented forever. `asm!` doesn't yet support reg classes. You\n-      have to specify specific registers instead.\n+    * On UNIX there is support for invoking an external assembler for `global_asm!` and `asm!`.\n * SIMD ([tracked here](https://github.com/bjorn3/rustc_codegen_cranelift/issues/171), some basic things work)\n \n ## License"}, {"sha": "e83be3a3df5c4f410f470099f1d623df22a2c76b", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "patch": "@@ -321,7 +321,7 @@ fn main() {\n     #[cfg(not(any(jit, windows)))]\n     test_tls();\n \n-    #[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n+    #[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n     unsafe {\n         global_asm_test();\n     }\n@@ -343,7 +343,7 @@ fn main() {\n }\n }\n \n-#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"linux\"))]\n+#[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n extern \"C\" {\n     fn global_asm_test();\n }\n@@ -358,6 +358,16 @@ global_asm! {\n     \"\n }\n \n+#[cfg(all(not(jit), target_arch = \"x86_64\", target_os = \"darwin\"))]\n+global_asm! {\n+    \"\n+    .global _global_asm_test\n+    _global_asm_test:\n+    // comment that would normally be removed by LLVM\n+    ret\n+    \"\n+}\n+\n #[repr(C)]\n enum c_void {\n     _1,"}, {"sha": "917a6fff72779b2bcb6be74eb4fdef30ddd72600", "filename": "src/global_asm.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76ca2247998bff4e10b73fcb464a0a83edbfeb0/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=f76ca2247998bff4e10b73fcb464a0a83edbfeb0", "patch": "@@ -41,9 +41,7 @@ pub(crate) struct GlobalAsmConfig {\n \n impl GlobalAsmConfig {\n     pub(crate) fn new(tcx: TyCtxt<'_>) -> Self {\n-        let asm_enabled = cfg!(feature = \"inline_asm\")\n-            && !tcx.sess.target.is_like_osx\n-            && !tcx.sess.target.is_like_windows;\n+        let asm_enabled = cfg!(feature = \"inline_asm\") && !tcx.sess.target.is_like_windows;\n \n         GlobalAsmConfig {\n             asm_enabled,\n@@ -74,9 +72,7 @@ pub(crate) fn compile_global_asm(\n                     .to_owned(),\n             );\n         } else {\n-            return Err(\n-                \"asm! and global_asm! are not yet supported on macOS and Windows\".to_owned()\n-            );\n+            return Err(\"asm! and global_asm! are not yet supported on Windows\".to_owned());\n         }\n     }\n "}]}