{"sha": "a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjVkZmFhZjdmOTllYzJmMzUxNDM4NjQ5MjdiYTc2YjhhMzcyN2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-25T14:26:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-25T14:26:21Z"}, "message": "Rollup merge of #64759 - matklad:simplify-macro, r=petrochenkov\n\nRefactor mbe a tiny bit", "tree": {"sha": "5fd6dc5b43239351e1020c325a100de8ca51b952", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd6dc5b43239351e1020c325a100de8ca51b952"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdi3kNCRBK7hj4Ov3rIwAAdHIIAEWQcBT7qtM/HF3iULfcYFy6\nLkH5/ULzR+/1oJWDJmJ0lKcOunKxKZXD0xQOJNaDQIe1JH3KQjL664VMcJ6bubw/\nCaB93SrrwvJnJPzZBJB605RsckyHdDd5l3PGJK5JfCqeQPk2R8kH5qXdo/WXQ9bB\n7C9iM4EX+OO1enDctDuedov6CsZEVGpbu7SG7ke6qkBL9QRSy1/9OgufWD4zaKgF\nRg65fiwAhEfXKKGwktOtlpPpFJXiV0MArcNqSCZxovKyOP79qjyKE6QKdbDRMiUb\nPh6YL5C/xtr1/o/FvGqkHlxyjJrNxBEGcQF/ri753GIqJhRSQCxCY8c1Y3Y2Fek=\n=NtZp\n-----END PGP SIGNATURE-----\n", "payload": "tree 5fd6dc5b43239351e1020c325a100de8ca51b952\nparent 3e9d189187f0ff504ed5370eacc096b9426e4d66\nparent f60a8734e088f3383512b0ffc12a9a909d2163b4\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1569421581 +0200\ncommitter GitHub <noreply@github.com> 1569421581 +0200\n\nRollup merge of #64759 - matklad:simplify-macro, r=petrochenkov\n\nRefactor mbe a tiny bit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "html_url": "https://github.com/rust-lang/rust/commit/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e9d189187f0ff504ed5370eacc096b9426e4d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d189187f0ff504ed5370eacc096b9426e4d66", "html_url": "https://github.com/rust-lang/rust/commit/3e9d189187f0ff504ed5370eacc096b9426e4d66"}, {"sha": "f60a8734e088f3383512b0ffc12a9a909d2163b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60a8734e088f3383512b0ffc12a9a909d2163b4", "html_url": "https://github.com/rust-lang/rust/commit/f60a8734e088f3383512b0ffc12a9a909d2163b4"}], "stats": {"total": 66, "additions": 18, "deletions": 48}, "files": [{"sha": "8f49ba9572d774ba76c006020780f283f6101daa", "filename": "src/libsyntax/ext/mbe/macro_parser.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_parser.rs?ref=a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "patch": "@@ -413,18 +413,6 @@ fn nameize<I: Iterator<Item = NamedMatch>>(\n     Success(ret_val)\n }\n \n-/// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n-/// other tokens, this is \"unexpected token...\".\n-crate fn parse_failure_msg(tok: &Token) -> String {\n-    match tok.kind {\n-        token::Eof => \"unexpected end of macro invocation\".to_string(),\n-        _ => format!(\n-            \"no rules expected the token `{}`\",\n-            pprust::token_to_string(tok)\n-        ),\n-    }\n-}\n-\n /// Performs a token equality check, ignoring syntax context (that is, an unhygienic comparison)\n fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n     if let (Some((ident1, is_raw1)), Some((ident2, is_raw2))) = (t1.ident(), t2.ident()) {"}, {"sha": "c24f6a666039fffeed8c05c9f247c990647e7c9c", "filename": "src/libsyntax/ext/mbe/macro_rules.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fmacro_rules.rs?ref=a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "patch": "@@ -6,7 +6,7 @@ use crate::ext::base::{SyntaxExtension, SyntaxExtensionKind};\n use crate::ext::expand::{AstFragment, AstFragmentKind};\n use crate::ext::mbe;\n use crate::ext::mbe::macro_check;\n-use crate::ext::mbe::macro_parser::{parse, parse_failure_msg};\n+use crate::ext::mbe::macro_parser::parse;\n use crate::ext::mbe::macro_parser::{Error, Failure, Success};\n use crate::ext::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedParseResult};\n use crate::ext::mbe::transcribe::transcribe;\n@@ -15,6 +15,7 @@ use crate::parse::parser::Parser;\n use crate::parse::token::TokenKind::*;\n use crate::parse::token::{self, NtTT, Token};\n use crate::parse::{Directory, ParseSess};\n+use crate::print::pprust;\n use crate::symbol::{kw, sym, Symbol};\n use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n \n@@ -371,10 +372,6 @@ pub fn compile_declarative_macro(\n                             tt.clone().into(),\n                             true,\n                             sess,\n-                            features,\n-                            &def.attrs,\n-                            edition,\n-                            def.id,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -398,10 +395,6 @@ pub fn compile_declarative_macro(\n                             tt.clone().into(),\n                             false,\n                             sess,\n-                            features,\n-                            &def.attrs,\n-                            edition,\n-                            def.id,\n                         )\n                         .pop()\n                         .unwrap();\n@@ -1184,3 +1177,15 @@ impl TokenTree {\n         parse(cx.parse_sess(), tts, mtch, Some(directory), true)\n     }\n }\n+\n+/// Generates an appropriate parsing failure message. For EOF, this is \"unexpected end...\". For\n+/// other tokens, this is \"unexpected token...\".\n+fn parse_failure_msg(tok: &Token) -> String {\n+    match tok.kind {\n+        token::Eof => \"unexpected end of macro invocation\".to_string(),\n+        _ => format!(\n+            \"no rules expected the token `{}`\",\n+            pprust::token_to_string(tok),\n+        ),\n+    }\n+}"}, {"sha": "8cb85bdef762fe023d3120c98e6aa8f50048d679", "filename": "src/libsyntax/ext/mbe/quoted.rs", "status": "modified", "additions": 4, "deletions": 27, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b5dfaaf7f99ec2f35143864927ba76b8a3727b/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fmbe%2Fquoted.rs?ref=a1b5dfaaf7f99ec2f35143864927ba76b8a3727b", "patch": "@@ -1,18 +1,15 @@\n use crate::ast;\n-use crate::ast::NodeId;\n use crate::ext::mbe::macro_parser;\n use crate::ext::mbe::{TokenTree, KleeneOp, KleeneToken, SequenceRepetition, Delimited};\n-use crate::feature_gate::Features;\n use crate::parse::token::{self, Token};\n use crate::parse::ParseSess;\n use crate::print::pprust;\n use crate::symbol::kw;\n use crate::tokenstream;\n \n-use syntax_pos::{edition::Edition, Span};\n+use syntax_pos::Span;\n \n use rustc_data_structures::sync::Lrc;\n-use std::iter::Peekable;\n \n /// Takes a `tokenstream::TokenStream` and returns a `Vec<self::TokenTree>`. Specifically, this\n /// takes a generic `TokenStream`, such as is used in the rest of the compiler, and returns a\n@@ -39,17 +36,13 @@ pub(super) fn parse(\n     input: tokenstream::TokenStream,\n     expect_matchers: bool,\n     sess: &ParseSess,\n-    features: &Features,\n-    attrs: &[ast::Attribute],\n-    edition: Edition,\n-    macro_node_id: NodeId,\n ) -> Vec<TokenTree> {\n     // Will contain the final collection of `self::TokenTree`\n     let mut result = Vec::new();\n \n     // For each token tree in `input`, parse the token into a `self::TokenTree`, consuming\n     // additional trees if need be.\n-    let mut trees = input.trees().peekable();\n+    let mut trees = input.trees();\n     while let Some(tree) = trees.next() {\n         // Given the parsed tree, if there is a metavar and we are expecting matchers, actually\n         // parse out the matcher (i.e., in `$id:ident` this would parse the `:` and `ident`).\n@@ -58,10 +51,6 @@ pub(super) fn parse(\n             &mut trees,\n             expect_matchers,\n             sess,\n-            features,\n-            attrs,\n-            edition,\n-            macro_node_id,\n         );\n         match tree {\n             TokenTree::MetaVar(start_sp, ident) if expect_matchers => {\n@@ -109,13 +98,9 @@ pub(super) fn parse(\n ///   unstable features or not.\n fn parse_tree(\n     tree: tokenstream::TokenTree,\n-    trees: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n+    trees: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     expect_matchers: bool,\n     sess: &ParseSess,\n-    features: &Features,\n-    attrs: &[ast::Attribute],\n-    edition: Edition,\n-    macro_node_id: NodeId,\n ) -> TokenTree {\n     // Depending on what `tree` is, we could be parsing different parts of a macro\n     match tree {\n@@ -135,10 +120,6 @@ fn parse_tree(\n                     tts.into(),\n                     expect_matchers,\n                     sess,\n-                    features,\n-                    attrs,\n-                    edition,\n-                    macro_node_id,\n                 );\n                 // Get the Kleene operator and optional separator\n                 let (separator, kleene) = parse_sep_and_kleene_op(trees, span.entire(), sess);\n@@ -192,10 +173,6 @@ fn parse_tree(\n                     tts.into(),\n                     expect_matchers,\n                     sess,\n-                    features,\n-                    attrs,\n-                    edition,\n-                    macro_node_id,\n                 ),\n             }),\n         ),\n@@ -244,7 +221,7 @@ fn parse_kleene_op(\n /// operator and separator, then a tuple with `(separator, KleeneOp)` is returned. Otherwise, an\n /// error with the appropriate span is emitted to `sess` and a dummy value is returned.\n fn parse_sep_and_kleene_op(\n-    input: &mut Peekable<impl Iterator<Item = tokenstream::TokenTree>>,\n+    input: &mut impl Iterator<Item = tokenstream::TokenTree>,\n     span: Span,\n     sess: &ParseSess,\n ) -> (Option<Token>, KleeneToken) {"}]}