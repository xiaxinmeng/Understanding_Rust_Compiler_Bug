{"sha": "4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlN2Q4NmMwNzlkOWI0ODYyYmNmNzJhMmEzYjEwOTMyNjRmYzU3MzE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-16T04:40:01Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-10-31T22:03:50Z"}, "message": "Resolve methods called as functions and...\n\n...defined in another crate.\n\nFixes #18061", "tree": {"sha": "bd0b02ac3b7d30284dc2a74907d0825ee1783619", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd0b02ac3b7d30284dc2a74907d0825ee1783619"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "html_url": "https://github.com/rust-lang/rust/commit/4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e834243b6837a2386d623e1d546a3d25057b8f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e834243b6837a2386d623e1d546a3d25057b8f5", "html_url": "https://github.com/rust-lang/rust/commit/5e834243b6837a2386d623e1d546a3d25057b8f5"}], "stats": {"total": 60, "additions": 34, "deletions": 26}, "files": [{"sha": "d72b370864a82a39b28469d4ec57e554ec62d6e0", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "patch": "@@ -115,6 +115,8 @@ enum Family {\n     CtorFn,                // o\n     StaticMethod,          // F\n     UnsafeStaticMethod,    // U\n+    Method,                // h\n+    UnsafeMethod,          // H\n     Type,                  // y\n     ForeignType,           // T\n     Mod,                   // m\n@@ -141,6 +143,8 @@ fn item_family(item: rbml::Doc) -> Family {\n       'o' => CtorFn,\n       'F' => StaticMethod,\n       'U' => UnsafeStaticMethod,\n+      'h' => Method,\n+      'H' => UnsafeMethod,\n       'y' => Type,\n       'T' => ForeignType,\n       'm' => Mod,\n@@ -312,6 +316,8 @@ fn item_to_def_like(item: rbml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         UnsafeFn  => DlDef(def::DefFn(did, ast::UnsafeFn, false)),\n         Fn        => DlDef(def::DefFn(did, ast::NormalFn, false)),\n         CtorFn    => DlDef(def::DefFn(did, ast::NormalFn, true)),\n+        UnsafeMethod  => DlDef(def::DefMethod(did, ast::UnsafeFn, false)),\n+        Method    => DlDef(def::DefMethod(did, ast::NormalFn, false)),\n         StaticMethod | UnsafeStaticMethod => {\n             let fn_style = if fam == UnsafeStaticMethod {\n                 ast::UnsafeFn"}, {"sha": "2769d713273701be2be5cbbaf443c4b57e0d75b5", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 27, "deletions": 20, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "patch": "@@ -840,7 +840,7 @@ fn encode_method_ty_fields(ecx: &EncodeContext,\n         ty::StaticExplicitSelfCategory => {\n             encode_family(rbml_w, fn_style_static_method_family(fn_style));\n         }\n-        _ => encode_family(rbml_w, style_fn_family(fn_style))\n+        _ => encode_family(rbml_w, fn_style_method_family(fn_style))\n     }\n     encode_provided_source(rbml_w, method_ty.provided_source);\n }\n@@ -978,6 +978,13 @@ fn fn_style_static_method_family(s: FnStyle) -> char {\n     }\n }\n \n+fn fn_style_method_family(s: FnStyle) -> char {\n+    match s {\n+        UnsafeFn => 'h',\n+        NormalFn => 'H',\n+    }\n+}\n+\n \n fn should_inline(attrs: &[Attribute]) -> bool {\n     use syntax::attr::*;\n@@ -1407,7 +1414,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                         }\n                         _ => {\n                             encode_family(rbml_w,\n-                                          style_fn_family(\n+                                          fn_style_method_family(\n                                               method_ty.fty.fn_style));\n                         }\n                     }\n@@ -1432,30 +1439,30 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             encode_parent_sort(rbml_w, 't');\n \n             let trait_item = &ms[i];\n-            match &ms[i] {\n-                &RequiredMethod(ref tm) => {\n-                    encode_attributes(rbml_w, tm.attrs.as_slice());\n+            let foo = |rbml_w: &mut Encoder| {\n+                // If this is a static method, we've already\n+                // encoded this.\n+                if is_nonstatic_method {\n+                    // FIXME: I feel like there is something funny\n+                    // going on.\n+                    let pty = ty::lookup_item_type(tcx, item_def_id.def_id());\n+                    encode_bounds_and_type(rbml_w, ecx, &pty);\n+                }\n+            };\n+            match trait_item {\n+                &RequiredMethod(ref m) => {\n+                    encode_attributes(rbml_w, m.attrs.as_slice());\n+                    foo(rbml_w);\n                     encode_item_sort(rbml_w, 'r');\n-                    encode_method_argument_names(rbml_w, &*tm.decl);\n+                    encode_method_argument_names(rbml_w, &*m.decl);\n                 }\n \n                 &ProvidedMethod(ref m) => {\n                     encode_attributes(rbml_w, m.attrs.as_slice());\n-                    // If this is a static method, we've already\n-                    // encoded this.\n-                    if is_nonstatic_method {\n-                        // FIXME: I feel like there is something funny\n-                        // going on.\n-                        let pty = ty::lookup_item_type(tcx,\n-                                                       item_def_id.def_id());\n-                        encode_bounds_and_type(rbml_w, ecx, &pty);\n-                    }\n+                    foo(rbml_w);\n                     encode_item_sort(rbml_w, 'p');\n-                    encode_inlined_item(ecx,\n-                                        rbml_w,\n-                                        IITraitItemRef(def_id, trait_item));\n-                    encode_method_argument_names(rbml_w,\n-                                                 &*m.pe_fn_decl());\n+                    encode_inlined_item(ecx, rbml_w, IITraitItemRef(def_id, trait_item));\n+                    encode_method_argument_names(rbml_w, &*m.pe_fn_decl());\n                 }\n \n                 &TypeTraitItem(ref associated_type) => {"}, {"sha": "7b21b8666e2b876c61382c31a9627744f7de2485", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e7d86c079d9b4862bcf72a2a3b1093264fc5731/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=4e7d86c079d9b4862bcf72a2a3b1093264fc5731", "patch": "@@ -1837,7 +1837,7 @@ impl<'a> Resolver<'a> {\n                 csearch::get_tuple_struct_definition_if_ctor(&self.session.cstore, ctor_id)\n                     .map_or(def, |_| DefStruct(ctor_id)), DUMMY_SP, is_public);\n           }\n-          DefFn(..) | DefStaticMethod(..) | DefStatic(..) | DefConst(..) => {\n+          DefFn(..) | DefStaticMethod(..) | DefStatic(..) | DefConst(..) | DefMethod(..) => {\n             debug!(\"(building reduced graph for external \\\n                     crate) building value (fn/static) {}\", final_ident);\n             child_name_bindings.define_value(def, DUMMY_SP, is_public);\n@@ -1902,11 +1902,6 @@ impl<'a> Resolver<'a> {\n             // Record the def ID and fields of this struct.\n             self.structs.insert(def_id, fields);\n           }\n-          DefMethod(..) => {\n-              debug!(\"(building reduced graph for external crate) \\\n-                      ignoring {}\", def);\n-              // Ignored; handled elsewhere.\n-          }\n           DefLocal(..) | DefPrimTy(..) | DefTyParam(..) |\n           DefUse(..) | DefUpvar(..) | DefRegion(..) |\n           DefTyParamBinder(..) | DefLabel(..) | DefSelfTy(..) => {"}]}