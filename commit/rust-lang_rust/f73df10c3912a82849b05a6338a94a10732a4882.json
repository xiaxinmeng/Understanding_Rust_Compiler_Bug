{"sha": "f73df10c3912a82849b05a6338a94a10732a4882", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3M2RmMTBjMzkxMmE4Mjg0OWIwNWE2MzM4YTk0YTEwNzMyYTQ4ODI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T05:03:10Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-11-13T11:20:30Z"}, "message": "Rollup merge of #55837 - Centril:sp\u00f6kdata-skall-vara-strukturellt-matchbar, r=eddyb\n\nMake PhantomData #[structural_match]\n\nfixes https://github.com/rust-lang/rust/issues/55028\n\nThis makes `PhantomData<T>` structurally matchable, irrespective of whether `T` is, per the discussion on this week's language team meeting (the general consensus was that this was a bug-fix).\n\nAll types containing `PhantomData<T>` and which used `#[derive(PartialEq, Eq)]` and were previously not `#[structural_match]` only because of `PhantomData<T>` will now be `#[structural_match]`.\n\nr? @nikomatsakis", "tree": {"sha": "d780064adeecab75e4d44a2959e318d84a19bb15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d780064adeecab75e4d44a2959e318d84a19bb15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f73df10c3912a82849b05a6338a94a10732a4882", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvqs38ACgkQ/vbIBR0O\nATzdcBAAsId2/OTtpr765Ze3Nrnu17Od5PaXPpRDHnHu2y3udM1eQdx1WI28h0U7\nGh/HM/MSfKkLqrollBmRdd9t+O6b2gwnH/ZRu1+MHysW/mDshatrfuF91cck/5tR\nyjTxLs7QG2a/aqLrEeti3LzzqNpoeUD3u8bMUTyynLWyd1GWPpu19MAvy6vWycQY\n+nKaCFAGjklLVzE/O/MI8C9vffrsBKbrcwLVKxGVemjg2NSlkXOmZeEYgkXEBHu9\nMG+LubkwHiz2wE6E6GTc2aKZxaZMztD7fH+uTw7yaqHcdnrveyDfSMEU3cetl7h3\nKag+hy44dOlWJD6UPbWMof5UcOdZMo0LPodj8luzS2xBIUq46lsjfHY7SOemyvW5\n3vOGFlP3AEa3+hKQE3XbTttNg0X6Pr4KTj3M+pVMR+qUpIoHDAm4M0iT40ygesqo\nUHOild2Bg5NqvSgusBqztG614jL6MFUgJXblYSoxZZRgHbd3boBRpT1H6r/zylPT\neRPxfBr31NysrAZH/5LhqbeqlAG5lNgJ1y7KFkE8owPMkow0dvgFFQetV96l8rsj\nGkaReaDm14pLIKXzuDXAM3pd4pCi2zg1TeXXvrg8a58/6BitbXN5v7iFI4zuDcDv\nZ1/W6TlMDBZLb8L2hZGa9hpTTDhOw5GagbHbMlkiLlPPtoptOkA=\n=UYa5\n-----END PGP SIGNATURE-----", "payload": "tree d780064adeecab75e4d44a2959e318d84a19bb15\nparent 98bc7d63fbc78643532853db3cb289bacc86167c\nparent 5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd\nauthor kennytm <kennytm@gmail.com> 1542085390 +0800\ncommitter kennytm <kennytm@gmail.com> 1542108030 +0800\n\nRollup merge of #55837 - Centril:sp\u00f6kdata-skall-vara-strukturellt-matchbar, r=eddyb\n\nMake PhantomData #[structural_match]\n\nfixes https://github.com/rust-lang/rust/issues/55028\n\nThis makes `PhantomData<T>` structurally matchable, irrespective of whether `T` is, per the discussion on this week's language team meeting (the general consensus was that this was a bug-fix).\n\nAll types containing `PhantomData<T>` and which used `#[derive(PartialEq, Eq)]` and were previously not `#[structural_match]` only because of `PhantomData<T>` will now be `#[structural_match]`.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f73df10c3912a82849b05a6338a94a10732a4882", "html_url": "https://github.com/rust-lang/rust/commit/f73df10c3912a82849b05a6338a94a10732a4882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f73df10c3912a82849b05a6338a94a10732a4882/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98bc7d63fbc78643532853db3cb289bacc86167c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98bc7d63fbc78643532853db3cb289bacc86167c", "html_url": "https://github.com/rust-lang/rust/commit/98bc7d63fbc78643532853db3cb289bacc86167c"}, {"sha": "5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd", "html_url": "https://github.com/rust-lang/rust/commit/5e7b7f2ae6f29e66c99b6c38d7041fb71e8a36fd"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "5872ac815c25941a67ed8e3cf75a6188c5ef63df", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f73df10c3912a82849b05a6338a94a10732a4882/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73df10c3912a82849b05a6338a94a10732a4882/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=f73df10c3912a82849b05a6338a94a10732a4882", "patch": "@@ -128,6 +128,7 @@\n #![feature(const_transmute)]\n #![feature(reverse_bits)]\n #![feature(non_exhaustive)]\n+#![feature(structural_match)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "3bcdfabbb245e6f29c4882fddeeb674329ee914b", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f73df10c3912a82849b05a6338a94a10732a4882/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73df10c3912a82849b05a6338a94a10732a4882/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=f73df10c3912a82849b05a6338a94a10732a4882", "patch": "@@ -578,6 +578,7 @@ macro_rules! impls{\n ///\n /// [drop check]: ../../nomicon/dropck.html\n #[lang = \"phantom_data\"]\n+#[structural_match]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct PhantomData<T:?Sized>;\n "}, {"sha": "af025b9bbbf76c0fc4e2aac1bcf37078fd50b579", "filename": "src/test/ui/rfc1445/phantom-data-is-structurally-matchable.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f73df10c3912a82849b05a6338a94a10732a4882/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f73df10c3912a82849b05a6338a94a10732a4882/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1445%2Fphantom-data-is-structurally-matchable.rs?ref=f73df10c3912a82849b05a6338a94a10732a4882", "patch": "@@ -0,0 +1,53 @@\n+// run-pass\n+\n+// This file checks that `PhantomData` is considered structurally matchable.\n+\n+use std::marker::PhantomData;\n+\n+fn main() {\n+    let mut count = 0;\n+\n+    // A type which is not structurally matchable:\n+    struct NotSM;\n+\n+    // And one that is:\n+    #[derive(PartialEq, Eq)]\n+    struct SM;\n+\n+    // Check that SM is #[structural_match]:\n+    const CSM: SM = SM;\n+    match SM {\n+        CSM => count += 1,\n+    };\n+\n+    // Check that PhantomData<T> is #[structural_match] even if T is not.\n+    const CPD1: PhantomData<NotSM> = PhantomData;\n+    match PhantomData {\n+        CPD1 => count += 1,\n+    };\n+\n+    // Check that PhantomData<T> is #[structural_match] when T is.\n+    const CPD2: PhantomData<SM> = PhantomData;\n+    match PhantomData {\n+        CPD2 => count += 1,\n+    };\n+\n+    // Check that a type which has a PhantomData is `#[structural_match]`.\n+    #[derive(PartialEq, Eq, Default)]\n+    struct Foo {\n+        alpha: PhantomData<NotSM>,\n+        beta: PhantomData<SM>,\n+    }\n+\n+    const CFOO: Foo = Foo {\n+        alpha: PhantomData,\n+        beta: PhantomData,\n+    };\n+\n+    match Foo::default() {\n+        CFOO => count += 1,\n+    };\n+\n+    // Final count must be 4 now if all\n+    assert_eq!(count, 4);\n+}"}]}