{"sha": "11445c10ab630a6ad8526f3fc5bcea1badad2964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNDQ1YzEwYWI2MzBhNmFkODUyNmYzZmM1YmNlYTFiYWRhZDI5NjQ=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-11T21:48:10Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-22T16:00:12Z"}, "message": "Move most init to `sys::init`", "tree": {"sha": "f16c4f9a517ad55c4f36b79bd9194a9832f3478f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f16c4f9a517ad55c4f36b79bd9194a9832f3478f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11445c10ab630a6ad8526f3fc5bcea1badad2964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11445c10ab630a6ad8526f3fc5bcea1badad2964", "html_url": "https://github.com/rust-lang/rust/commit/11445c10ab630a6ad8526f3fc5bcea1badad2964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11445c10ab630a6ad8526f3fc5bcea1badad2964/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf470197addb37146eb2e0d16f14dd14293d91f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf470197addb37146eb2e0d16f14dd14293d91f0", "html_url": "https://github.com/rust-lang/rust/commit/cf470197addb37146eb2e0d16f14dd14293d91f0"}], "stats": {"total": 88, "additions": 31, "deletions": 57}, "files": [{"sha": "77c068e1a974431809ee48569d583b6cdd510f07", "filename": "library/std/src/sys/hermit/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -37,7 +37,6 @@ pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n pub mod rwlock;\n-pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_dtor;\n@@ -97,8 +96,9 @@ pub extern \"C\" fn __rust_abort() {\n }\n \n // SAFETY: must be called only once during runtime initialization.\n-pub unsafe fn init() {\n+pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     let _ = net::init();\n+    args::init(argc, argv);\n }\n \n // SAFETY: must be called only once during runtime cleanup."}, {"sha": "f276799661eb721034f93238c0beef8669747ef2", "filename": "library/std/src/sys/hermit/stack_overflow.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fstack_overflow.rs?ref=cf470197addb37146eb2e0d16f14dd14293d91f0", "patch": "@@ -1,2 +0,0 @@\n-#[inline]\n-pub unsafe fn init() {}"}, {"sha": "25250d060d04bb893a3fbc2aec84acafb1a5820e", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -32,7 +32,6 @@ pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n pub mod rwlock;\n-pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n pub mod thread_local_key;\n@@ -41,7 +40,11 @@ pub mod time;\n pub use crate::sys_common::os_str_bytes as os_str;\n \n // SAFETY: must be called only once during runtime initialization.\n-pub unsafe fn init() {}\n+pub unsafe fn init(argc: isize, argv: *const *const u8) {\n+    unsafe {\n+        args::init(argc, argv);\n+    }\n+}\n \n // SAFETY: must be called only once during runtime cleanup.\n pub unsafe fn cleanup() {}"}, {"sha": "1ca5810e61b3dc991eb883b90ef776064f30a515", "filename": "library/std/src/sys/sgx/stack_overflow.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fstack_overflow.rs?ref=cf470197addb37146eb2e0d16f14dd14293d91f0", "patch": "@@ -1,2 +0,0 @@\n-#[cfg_attr(test, allow(dead_code))]\n-pub unsafe fn init() {}"}, {"sha": "bd9ac32b0d2bd5fe9c9d97c62029f2ad759522ed", "filename": "library/std/src/sys/unix/mod.rs", "status": "modified", "additions": 19, "deletions": 25, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -45,7 +45,7 @@ pub mod time;\n pub use crate::sys_common::os_str_bytes as os_str;\n \n // SAFETY: must be called only once during runtime initialization.\n-pub unsafe fn init() {\n+pub unsafe fn init(argc: isize, argv: *const *const u8) {\n     // The standard streams might be closed on application startup. To prevent\n     // std::io::{stdin, stdout,stderr} objects from using other unrelated file\n     // resources opened later, we reopen standards streams when they are closed.\n@@ -60,22 +60,22 @@ pub unsafe fn init() {\n     // to prevent this problem.\n     reset_sigpipe();\n \n-    cfg_if::cfg_if! {\n-        if #[cfg(miri)] {\n-            // The standard fds are always available in Miri.\n-            unsafe fn sanitize_standard_fds() {}\n-        } else if #[cfg(not(any(\n-            target_os = \"emscripten\",\n-            target_os = \"fuchsia\",\n-            target_os = \"vxworks\",\n-            // The poll on Darwin doesn't set POLLNVAL for closed fds.\n-            target_os = \"macos\",\n-            target_os = \"ios\",\n-            target_os = \"redox\",\n-        )))] {\n-            // In the case when all file descriptors are open, the poll has been\n-            // observed to perform better than fcntl (on GNU/Linux).\n-            unsafe fn sanitize_standard_fds() {\n+    stack_overflow::init();\n+    args::init(argc, argv);\n+\n+    unsafe fn sanitize_standard_fds() {\n+        cfg_if::cfg_if! {\n+            if #[cfg(not(any(\n+                // The standard fds are always available in Miri.\n+                miri,\n+                target_os = \"emscripten\",\n+                target_os = \"fuchsia\",\n+                target_os = \"vxworks\",\n+                // The poll on Darwin doesn't set POLLNVAL for closed fds.\n+                target_os = \"macos\",\n+                target_os = \"ios\",\n+                target_os = \"redox\",\n+            )))] {\n                 use crate::sys::os::errno;\n                 let pfds: &mut [_] = &mut [\n                     libc::pollfd { fd: 0, events: 0, revents: 0 },\n@@ -100,9 +100,7 @@ pub unsafe fn init() {\n                         libc::abort();\n                     }\n                 }\n-            }\n-        } else if #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"redox\"))] {\n-            unsafe fn sanitize_standard_fds() {\n+            } else if #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"redox\"))] {\n                 use crate::sys::os::errno;\n                 for fd in 0..3 {\n                     if libc::fcntl(fd, libc::F_GETFD) == -1 && errno() == libc::EBADF {\n@@ -112,17 +110,13 @@ pub unsafe fn init() {\n                     }\n                 }\n             }\n-        } else {\n-            unsafe fn sanitize_standard_fds() {}\n         }\n     }\n \n-    #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n     unsafe fn reset_sigpipe() {\n+        #[cfg(not(any(target_os = \"emscripten\", target_os = \"fuchsia\")))]\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != libc::SIG_ERR);\n     }\n-    #[cfg(any(target_os = \"emscripten\", target_os = \"fuchsia\"))]\n-    unsafe fn reset_sigpipe() {}\n }\n \n // SAFETY: must be called only once during runtime cleanup."}, {"sha": "cdb474b5b1556331f8f398ef14c7c6ff82ca575a", "filename": "library/std/src/sys/unsupported/args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fargs.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -1,7 +1,5 @@\n use crate::ffi::OsString;\n \n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n-\n pub struct Args {}\n \n pub fn args() -> Args {"}, {"sha": "c60c2a9b8e850ad7e32602247d7a7aff79365e90", "filename": "library/std/src/sys/unsupported/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fcommon.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -11,7 +11,7 @@ pub use crate::sys_common::os_str_bytes as os_str;\n use crate::os::raw::c_char;\n \n // SAFETY: must be called only once during runtime initialization.\n-pub unsafe fn init() {}\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n // SAFETY: must be called only once during runtime cleanup.\n pub unsafe fn cleanup() {}"}, {"sha": "32ca68ef15b5b54c3c4d1714cd978b17d581cfd1", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -15,7 +15,6 @@ pub mod path;\n pub mod pipe;\n pub mod process;\n pub mod rwlock;\n-pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n #[cfg(target_thread_local)]"}, {"sha": "2461fc2dad7e9baea5c90a372af5d23aeb32d2df", "filename": "library/std/src/sys/unsupported/stack_overflow.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf470197addb37146eb2e0d16f14dd14293d91f0/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fstack_overflow.rs?ref=cf470197addb37146eb2e0d16f14dd14293d91f0", "patch": "@@ -1 +0,0 @@\n-pub unsafe fn init() {}"}, {"sha": "004d47960f7e0e8e3743cc34830dfee8b0c55dec", "filename": "library/std/src/sys/wasi/args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -5,8 +5,6 @@ use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStrExt;\n use crate::vec;\n \n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n-\n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,"}, {"sha": "2584d35b6ef8aad68162d2593a7d8ea855f70b5d", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -42,8 +42,6 @@ pub mod pipe;\n pub mod process;\n #[path = \"../unsupported/rwlock.rs\"]\n pub mod rwlock;\n-#[path = \"../unsupported/stack_overflow.rs\"]\n-pub mod stack_overflow;\n pub mod stdio;\n pub mod thread;\n #[path = \"../unsupported/thread_local_dtor.rs\"]"}, {"sha": "3672227bf668072d59829aa6460145d15ffb3286", "filename": "library/std/src/sys/wasm/args.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -2,10 +2,6 @@ use crate::ffi::OsString;\n use crate::marker::PhantomData;\n use crate::vec;\n \n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n-    // On wasm these should always be null, so there's nothing for us to do here\n-}\n-\n pub fn args() -> Args {\n     Args { iter: Vec::new().into_iter(), _dont_send_or_sync_me: PhantomData }\n }"}, {"sha": "8705910c73a8180e2ca8ec09c25f67732bc6de40", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -35,8 +35,6 @@ pub mod path;\n pub mod pipe;\n #[path = \"../unsupported/process.rs\"]\n pub mod process;\n-#[path = \"../unsupported/stack_overflow.rs\"]\n-pub mod stack_overflow;\n #[path = \"../unsupported/stdio.rs\"]\n pub mod stdio;\n pub mod thread;"}, {"sha": "feddb1ea78e636c4cd99ebf9d398b1fc6b53368a", "filename": "library/std/src/sys/windows/args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fargs.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -14,8 +14,6 @@ use crate::vec;\n \n use core::iter;\n \n-pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n-\n pub fn args() -> Args {\n     unsafe {\n         let lp_cmd_line = c::GetCommandLineW();"}, {"sha": "21fec2aa01bf55d9b2927d18007b1b250a13553a", "filename": "library/std/src/sys/windows/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fmod.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -50,7 +50,9 @@ cfg_if::cfg_if! {\n }\n \n // SAFETY: must be called only once during runtime initialization.\n-pub unsafe fn init() {}\n+pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n+    stack_overflow::init();\n+}\n \n // SAFETY: must be called only once during runtime cleanup.\n pub unsafe fn cleanup() {"}, {"sha": "dc20cf0e14ad19cfcc834bf1ac83d48be0c51a37", "filename": "library/std/src/sys_common/rt.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11445c10ab630a6ad8526f3fc5bcea1badad2964/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Frt.rs?ref=11445c10ab630a6ad8526f3fc5bcea1badad2964", "patch": "@@ -10,20 +10,15 @@ pub fn init(argc: isize, argv: *const *const u8) {\n     static INIT: Once = Once::new();\n     INIT.call_once(|| unsafe {\n         // SAFETY: Only called once during runtime initialization.\n-        sys::init();\n+        sys::init(argc, argv);\n \n         let main_guard = sys::thread::guard::init();\n-        sys::stack_overflow::init();\n-\n         // Next, set up the current Thread with the guard information we just\n         // created. Note that this isn't necessary in general for new threads,\n         // but we just do this to name the main thread and to give it correct\n         // info about the stack bounds.\n         let thread = Thread::new(Some(\"main\".to_owned()));\n         thread_info::set(main_guard, thread);\n-\n-        // Store our args if necessary in a squirreled away location\n-        sys::args::init(argc, argv);\n     });\n }\n "}]}