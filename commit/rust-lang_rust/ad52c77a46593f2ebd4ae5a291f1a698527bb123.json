{"sha": "ad52c77a46593f2ebd4ae5a291f1a698527bb123", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNTJjNzdhNDY1OTNmMmViZDRhZTVhMjkxZjFhNjk4NTI3YmIxMjM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-26T14:39:14Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-05-26T14:39:14Z"}, "message": "ci: Attempt to skip a full rustc compile on dist*\n\nCurrently when we're preparing cross-compiled compilers it can take\nquite some time because we have to build the compiler itself three\ndifferent times. The first is the normal bootstrap, the second is a\nsecond build for the build platform, and the third is the actual target\narchitecture compiler. The second compiler was historically built\nexclusively for procedural macros, and long ago we didn't actually need\nit.\n\nThis commit tries out avoiding that second compiled compiler, meaning we\nonly compile rustc for the build platform only once. Some local testing\nshows that this is promising, but bors is of course the ultimate test!", "tree": {"sha": "ae4bfce4362b0122a24f7db1327637c591390042", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4bfce4362b0122a24f7db1327637c591390042"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad52c77a46593f2ebd4ae5a291f1a698527bb123", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad52c77a46593f2ebd4ae5a291f1a698527bb123", "html_url": "https://github.com/rust-lang/rust/commit/ad52c77a46593f2ebd4ae5a291f1a698527bb123", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad52c77a46593f2ebd4ae5a291f1a698527bb123/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf", "html_url": "https://github.com/rust-lang/rust/commit/d96c01e77c9a812ed9f101d0e0714e6bd833a0bf"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "804fb68c88a9afdb838eeef9d5ebd657216fd28d", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ad52c77a46593f2ebd4ae5a291f1a698527bb123/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad52c77a46593f2ebd4ae5a291f1a698527bb123/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=ad52c77a46593f2ebd4ae5a291f1a698527bb123", "patch": "@@ -539,9 +539,9 @@ impl Step for Cargo {\n     }\n \n     fn run(self, builder: &Builder<'_>) -> PathBuf {\n-        // Cargo depends on procedural macros, which requires a full host\n-        // compiler to be available, so we need to depend on that.\n-        builder.ensure(compile::Rustc {\n+        // Cargo depends on procedural macros, so make sure the host\n+        // libstd/libproc_macro is available.\n+        builder.ensure(compile::Test {\n             compiler: self.compiler,\n             target: builder.config.build,\n         });\n@@ -613,26 +613,26 @@ macro_rules! tool_extended {\n tool_extended!((self, builder),\n     Cargofmt, rustfmt, \"src/tools/rustfmt\", \"cargo-fmt\", {};\n     CargoClippy, clippy, \"src/tools/clippy\", \"cargo-clippy\", {\n-        // Clippy depends on procedural macros (serde), which requires a full host\n-        // compiler to be available, so we need to depend on that.\n-        builder.ensure(compile::Rustc {\n+        // Clippy depends on procedural macros, so make sure that's built for\n+        // the compiler itself.\n+        builder.ensure(compile::Test {\n             compiler: self.compiler,\n             target: builder.config.build,\n         });\n     };\n     Clippy, clippy, \"src/tools/clippy\", \"clippy-driver\", {\n-        // Clippy depends on procedural macros (serde), which requires a full host\n-        // compiler to be available, so we need to depend on that.\n-        builder.ensure(compile::Rustc {\n+        // Clippy depends on procedural macros, so make sure that's built for\n+        // the compiler itself.\n+        builder.ensure(compile::Test {\n             compiler: self.compiler,\n             target: builder.config.build,\n         });\n     };\n     Miri, miri, \"src/tools/miri\", \"miri\", {};\n     CargoMiri, miri, \"src/tools/miri\", \"cargo-miri\", {\n-        // Miri depends on procedural macros (serde), which requires a full host\n-        // compiler to be available, so we need to depend on that.\n-        builder.ensure(compile::Rustc {\n+        // Miri depends on procedural macros, so make sure that's built for\n+        // the compiler itself.\n+        builder.ensure(compile::Test {\n             compiler: self.compiler,\n             target: builder.config.build,\n         });\n@@ -646,9 +646,9 @@ tool_extended!((self, builder),\n         if clippy.is_some() {\n             self.extra_features.push(\"clippy\".to_owned());\n         }\n-        // RLS depends on procedural macros, which requires a full host\n-        // compiler to be available, so we need to depend on that.\n-        builder.ensure(compile::Rustc {\n+        // RLS depends on procedural macros, so make sure that's built for\n+        // the compiler itself.\n+        builder.ensure(compile::Test {\n             compiler: self.compiler,\n             target: builder.config.build,\n         });"}]}