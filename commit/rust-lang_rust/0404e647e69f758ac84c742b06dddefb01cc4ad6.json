{"sha": "0404e647e69f758ac84c742b06dddefb01cc4ad6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MDRlNjQ3ZTY5Zjc1OGFjODRjNzQyYjA2ZGRkZWZiMDFjYzRhZDY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T21:40:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-15T21:40:54Z"}, "message": "Prepare SourceAnalyzer for macros", "tree": {"sha": "c0fb90f2bfa0cec5eb62e80bfe5cf7c009a3fc18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0fb90f2bfa0cec5eb62e80bfe5cf7c009a3fc18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0404e647e69f758ac84c742b06dddefb01cc4ad6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0404e647e69f758ac84c742b06dddefb01cc4ad6", "html_url": "https://github.com/rust-lang/rust/commit/0404e647e69f758ac84c742b06dddefb01cc4ad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0404e647e69f758ac84c742b06dddefb01cc4ad6/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8af6a413bb2f762bb696d20727e21cb2d4cb62", "html_url": "https://github.com/rust-lang/rust/commit/bd8af6a413bb2f762bb696d20727e21cb2d4cb62"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "540ddd0b5de89b122b41aeef8bc1086d745ea265", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0404e647e69f758ac84c742b06dddefb01cc4ad6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0404e647e69f758ac84c742b06dddefb01cc4ad6/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=0404e647e69f758ac84c742b06dddefb01cc4ad6", "patch": "@@ -91,7 +91,7 @@ fn def_with_body_from_child_node(\n #[derive(Debug)]\n pub struct SourceAnalyzer {\n     // FIXME: this doesn't handle macros at all\n-    file_id: FileId,\n+    file_id: HirFileId,\n     resolver: Resolver,\n     body_owner: Option<DefWithBody>,\n     body_source_map: Option<Arc<BodySourceMap>>,\n@@ -159,7 +159,7 @@ impl SourceAnalyzer {\n                 body_source_map: Some(source_map),\n                 infer: Some(def.infer(db)),\n                 scopes: Some(scopes),\n-                file_id,\n+                file_id: file_id.into(),\n             }\n         } else {\n             SourceAnalyzer {\n@@ -171,18 +171,18 @@ impl SourceAnalyzer {\n                 body_source_map: None,\n                 infer: None,\n                 scopes: None,\n-                file_id,\n+                file_id: file_id.into(),\n             }\n         }\n     }\n \n     fn expr_id(&self, expr: &ast::Expr) -> Option<ExprId> {\n-        let src = Source { file_id: self.file_id.into(), ast: expr };\n+        let src = Source { file_id: self.file_id, ast: expr };\n         self.body_source_map.as_ref()?.node_expr(src)\n     }\n \n     fn pat_id(&self, pat: &ast::Pat) -> Option<PatId> {\n-        let src = Source { file_id: self.file_id.into(), ast: pat };\n+        let src = Source { file_id: self.file_id, ast: pat };\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n@@ -290,8 +290,7 @@ impl SourceAnalyzer {\n         let name = name_ref.as_name();\n         let source_map = self.body_source_map.as_ref()?;\n         let scopes = self.scopes.as_ref()?;\n-        let scope =\n-            scope_for(scopes, source_map, Source::new(self.file_id.into(), name_ref.syntax()))?;\n+        let scope = scope_for(scopes, source_map, Source::new(self.file_id, name_ref.syntax()))?;\n         let entry = scopes.resolve_name_in_scope(scope, &name)?;\n         Some(ScopeEntryWithSyntax {\n             name: entry.name().clone(),"}, {"sha": "26531cb05e0e92ac2adfed1171914ca699671d5c", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0404e647e69f758ac84c742b06dddefb01cc4ad6/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0404e647e69f758ac84c742b06dddefb01cc4ad6/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=0404e647e69f758ac84c742b06dddefb01cc4ad6", "patch": "@@ -223,6 +223,7 @@ impl<N: AstNode> AstId<N> {\n     }\n }\n \n+/// FIXME: https://github.com/matklad/with ?\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]\n pub struct Source<T> {\n     pub file_id: HirFileId,\n@@ -236,11 +237,16 @@ impl<T> Source<T> {\n         Source { file_id, ast }\n     }\n \n+    // Similarly, naming here is stupid...\n+    pub fn with_ast<U>(&self, ast: U) -> Source<U> {\n+        Source::new(self.file_id, ast)\n+    }\n+\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source { file_id: self.file_id, ast: f(self.ast) }\n+        Source::new(self.file_id, f(self.ast))\n     }\n     pub fn as_ref(&self) -> Source<&T> {\n-        Source { file_id: self.file_id, ast: &self.ast }\n+        self.with_ast(&self.ast)\n     }\n     pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n         db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")"}]}