{"sha": "1c0dc1810d778bb6fea16aac02cafc5aa2e84b11", "node_id": "C_kwDOAAsO6NoAKDFjMGRjMTgxMGQ3NzhiYjZmZWExNmFhYzAyY2FmYzVhYTJlODRiMTE", "commit": {"author": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-12-28T15:51:10Z"}, "committer": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-12-28T16:25:00Z"}, "message": "Add {Add,Sub,Mul,Div,Rem,BitXor,BitOr,BitAnd}{,Assign}<$t> to Saturating<$t>", "tree": {"sha": "f4ba7baf8f4bfb22429a10ded92e093d6b17693c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4ba7baf8f4bfb22429a10ded92e093d6b17693c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11", "html_url": "https://github.com/rust-lang/rust/commit/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11/comments", "author": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4", "html_url": "https://github.com/rust-lang/rust/commit/e91ad5fc62bdee4a29c18baa5fad2ca42fc91bf4"}], "stats": {"total": 187, "additions": 187, "deletions": 0}, "files": [{"sha": "317555034756d8be6b9b0825c9ef19c84f056d85", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 187, "deletions": 0, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c0dc1810d778bb6fea16aac02cafc5aa2e84b11/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=1c0dc1810d778bb6fea16aac02cafc5aa2e84b11", "patch": "@@ -217,6 +217,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Add, add for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl Add<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn add(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0.saturating_add(other))\n+            }\n+        }\n+        forward_ref_binop! { impl Add, add for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl AddAssign for Saturating<$t> {\n             #[inline]\n@@ -226,6 +238,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl AddAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn add_assign(&mut self, other: $t) {\n+                *self = *self + other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl AddAssign, add_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl Sub for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -238,6 +259,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Sub, sub for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl Sub<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn sub(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0.saturating_sub(other))\n+            }\n+        }\n+        forward_ref_binop! { impl Sub, sub for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl SubAssign for Saturating<$t> {\n             #[inline]\n@@ -247,6 +280,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl SubAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn sub_assign(&mut self, other: $t) {\n+                *self = *self - other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl SubAssign, sub_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl Mul for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -259,6 +301,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Mul, mul for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl Mul<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn mul(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0.saturating_mul(other))\n+            }\n+        }\n+        forward_ref_binop! { impl Mul, mul for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl MulAssign for Saturating<$t> {\n             #[inline]\n@@ -268,6 +322,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl MulAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn mul_assign(&mut self, other: $t) {\n+                *self = *self * other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl MulAssign, mul_assign for Saturating<$t>, $t }\n+\n         /// # Examples\n         ///\n         /// Basic usage:\n@@ -299,6 +362,37 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Div, div for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        /// # Examples\n+        ///\n+        /// Basic usage:\n+        ///\n+        /// ```\n+        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n+        /// use std::num::Saturating;\n+        ///\n+        #[doc = concat!(\"assert_eq!(Saturating(2\", stringify!($t), \"), Saturating(5\", stringify!($t), \") / 2);\")]\n+        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MAX), Saturating(\", stringify!($t), \"::MAX) / 1);\")]\n+        #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN), Saturating(\", stringify!($t), \"::MIN) / 1);\")]\n+        /// ```\n+        ///\n+        /// ```should_panic\n+        /// #![feature(saturating_int_impl, saturating_int_assign_impl)]\n+        /// use std::num::Saturating;\n+        ///\n+        #[doc = concat!(\"let _ = Saturating(0\", stringify!($t), \") / 0;\")]\n+        /// ```\n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl Div<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn div(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0.saturating_div(other))\n+            }\n+        }\n+        forward_ref_binop! { impl Div, div for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl DivAssign for Saturating<$t> {\n             #[inline]\n@@ -308,6 +402,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl DivAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn div_assign(&mut self, other: $t) {\n+                *self = *self / other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl DivAssign, div_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl Rem for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -320,6 +423,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl Rem, rem for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl Rem<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn rem(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0.rem(other))\n+            }\n+        }\n+        forward_ref_binop! { impl Rem, rem for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl RemAssign for Saturating<$t> {\n             #[inline]\n@@ -329,6 +444,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl RemAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn rem_assign(&mut self, other: $t) {\n+                *self = *self % other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl RemAssign, rem_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl Not for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -353,6 +477,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitXor<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn bitxor(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0 ^ other)\n+            }\n+        }\n+        forward_ref_binop! { impl BitXor, bitxor for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitXorAssign for Saturating<$t> {\n             #[inline]\n@@ -362,6 +498,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitXorAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn bitxor_assign(&mut self, other: $t) {\n+                *self = *self ^ other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl BitXorAssign, bitxor_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitOr for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -374,6 +519,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitOr<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn bitor(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0 | other)\n+            }\n+        }\n+        forward_ref_binop! { impl BitOr, bitor for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitOrAssign for Saturating<$t> {\n             #[inline]\n@@ -383,6 +540,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitOrAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn bitor_assign(&mut self, other: $t) {\n+                *self = *self | other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl BitOrAssign, bitor_assign for Saturating<$t>, $t }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitAnd for Saturating<$t> {\n             type Output = Saturating<$t>;\n@@ -395,6 +561,18 @@ macro_rules! saturating_impl {\n         forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, Saturating<$t>,\n                 #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")] }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitAnd<$t> for Saturating<$t> {\n+            type Output = Saturating<$t>;\n+\n+            #[inline]\n+            fn bitand(self, other: $t) -> Saturating<$t> {\n+                Saturating(self.0 & other)\n+            }\n+        }\n+        forward_ref_binop! { impl BitAnd, bitand for Saturating<$t>, $t,\n+                #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")] }\n+\n         #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n         impl BitAndAssign for Saturating<$t> {\n             #[inline]\n@@ -404,6 +582,15 @@ macro_rules! saturating_impl {\n         }\n         forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, Saturating<$t> }\n \n+        #[unstable(feature = \"saturating_int_assign_impl\", issue = \"92354\")]\n+        impl BitAndAssign<$t> for Saturating<$t> {\n+            #[inline]\n+            fn bitand_assign(&mut self, other: $t) {\n+                *self = *self & other;\n+            }\n+        }\n+        forward_ref_op_assign! { impl BitAndAssign, bitand_assign for Saturating<$t>, $t }\n+\n     )*)\n }\n "}]}