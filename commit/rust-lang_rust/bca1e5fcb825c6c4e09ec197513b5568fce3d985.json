{"sha": "bca1e5fcb825c6c4e09ec197513b5568fce3d985", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYTFlNWZjYjgyNWM2YzRlMDllYzE5NzUxM2I1NTY4ZmNlM2Q5ODU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-03T16:54:43Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-03T16:54:43Z"}, "message": "Rename `error_sink` to `diagnostic_sink`", "tree": {"sha": "a746eaa040b70d547940e8c2b0766cca7744d874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a746eaa040b70d547940e8c2b0766cca7744d874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bca1e5fcb825c6c4e09ec197513b5568fce3d985", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bca1e5fcb825c6c4e09ec197513b5568fce3d985", "html_url": "https://github.com/rust-lang/rust/commit/bca1e5fcb825c6c4e09ec197513b5568fce3d985", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bca1e5fcb825c6c4e09ec197513b5568fce3d985/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "883c8d177d61d34d70d4fccef788fe4b35aaa7ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/883c8d177d61d34d70d4fccef788fe4b35aaa7ea", "html_url": "https://github.com/rust-lang/rust/commit/883c8d177d61d34d70d4fccef788fe4b35aaa7ea"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "0229a836ec5a3f59aeb94314b192096eb651e187", "filename": "crates/hir_expand/src/eager.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bca1e5fcb825c6c4e09ec197513b5568fce3d985/crates%2Fhir_expand%2Fsrc%2Feager.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bca1e5fcb825c6c4e09ec197513b5568fce3d985/crates%2Fhir_expand%2Fsrc%2Feager.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Feager.rs?ref=bca1e5fcb825c6c4e09ec197513b5568fce3d985", "patch": "@@ -103,9 +103,9 @@ pub fn expand_eager_macro(\n     macro_call: InFile<ast::MacroCall>,\n     def: MacroDefId,\n     resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n-    mut error_sink: &mut dyn FnMut(mbe::ExpandError),\n+    mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<EagerMacroId, ErrorEmitted> {\n-    let parsed_args = error_sink.option_with(\n+    let parsed_args = diagnostic_sink.option_with(\n         || Some(mbe::ast_to_token_tree(&macro_call.value.token_tree()?)?.0),\n         || err(\"malformed macro invocation\"),\n     )?;\n@@ -126,20 +126,21 @@ pub fn expand_eager_macro(\n     let arg_file_id: MacroCallId = arg_id.into();\n \n     let parsed_args =\n-        error_sink.result(mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr))?.0;\n+        diagnostic_sink.result(mbe::token_tree_to_syntax_node(&parsed_args, FragmentKind::Expr))?.0;\n     let result = eager_macro_recur(\n         db,\n         InFile::new(arg_file_id.as_file(), parsed_args.syntax_node()),\n         krate,\n         resolver,\n-        error_sink,\n+        diagnostic_sink,\n     )?;\n-    let subtree = error_sink.option(to_subtree(&result), || err(\"failed to parse macro result\"))?;\n+    let subtree =\n+        diagnostic_sink.option(to_subtree(&result), || err(\"failed to parse macro result\"))?;\n \n     if let MacroDefKind::BuiltInEager(eager) = def.kind {\n         let res = eager.expand(db, arg_id, &subtree);\n \n-        let (subtree, fragment) = error_sink.expand_result_option(res)?;\n+        let (subtree, fragment) = diagnostic_sink.expand_result_option(res)?;\n         let eager = EagerCallLoc {\n             def,\n             fragment,\n@@ -182,7 +183,7 @@ fn eager_macro_recur(\n     curr: InFile<SyntaxNode>,\n     krate: CrateId,\n     macro_resolver: &dyn Fn(ast::Path) -> Option<MacroDefId>,\n-    mut error_sink: &mut dyn FnMut(mbe::ExpandError),\n+    mut diagnostic_sink: &mut dyn FnMut(mbe::ExpandError),\n ) -> Result<SyntaxNode, ErrorEmitted> {\n     let original = curr.value.clone();\n \n@@ -191,7 +192,7 @@ fn eager_macro_recur(\n \n     // Collect replacement\n     for child in children {\n-        let def = error_sink\n+        let def = diagnostic_sink\n             .option_with(|| macro_resolver(child.path()?), || err(\"failed to resolve macro\"))?;\n         let insert = match def.kind {\n             MacroDefKind::BuiltInEager(_) => {\n@@ -201,7 +202,7 @@ fn eager_macro_recur(\n                     curr.with_value(child.clone()),\n                     def,\n                     macro_resolver,\n-                    error_sink,\n+                    diagnostic_sink,\n                 )?\n                 .into();\n                 db.parse_or_expand(id.as_file())\n@@ -212,10 +213,10 @@ fn eager_macro_recur(\n             | MacroDefKind::BuiltInDerive(_)\n             | MacroDefKind::ProcMacro(_) => {\n                 let res = lazy_expand(db, &def, curr.with_value(child.clone()), krate);\n-                let val = error_sink.expand_result_option(res)?;\n+                let val = diagnostic_sink.expand_result_option(res)?;\n \n                 // replace macro inside\n-                eager_macro_recur(db, val, krate, macro_resolver, error_sink)?\n+                eager_macro_recur(db, val, krate, macro_resolver, diagnostic_sink)?\n             }\n         };\n "}]}