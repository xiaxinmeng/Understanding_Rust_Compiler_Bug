{"sha": "379f3181def3021818b7d8c3d69a512c290d9dc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3OWYzMTgxZGVmMzAyMTgxOGI3ZDhjM2Q2OWE1MTJjMjkwZDlkYzk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T07:08:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:32:34Z"}, "message": "parse: simplify parse_fn_body", "tree": {"sha": "fff4fa2c25ee58656f24d9975c0b4a3522d5e685", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fff4fa2c25ee58656f24d9975c0b4a3522d5e685"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/379f3181def3021818b7d8c3d69a512c290d9dc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/379f3181def3021818b7d8c3d69a512c290d9dc9", "html_url": "https://github.com/rust-lang/rust/commit/379f3181def3021818b7d8c3d69a512c290d9dc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/379f3181def3021818b7d8c3d69a512c290d9dc9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055733f3b3dc5d0841b9284da0c628f9d362461d", "url": "https://api.github.com/repos/rust-lang/rust/commits/055733f3b3dc5d0841b9284da0c628f9d362461d", "html_url": "https://github.com/rust-lang/rust/commit/055733f3b3dc5d0841b9284da0c628f9d362461d"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "428c01a8344410a6ab9d4446017d4a71a1d528bb", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/379f3181def3021818b7d8c3d69a512c290d9dc9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/379f3181def3021818b7d8c3d69a512c290d9dc9/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=379f3181def3021818b7d8c3d69a512c290d9dc9", "patch": "@@ -1411,23 +1411,13 @@ impl<'a> Parser<'a> {\n     /// This can either be `;` when there's no body,\n     /// or e.g. a block when the function is a provided one.\n     fn parse_fn_body(&mut self, attrs: &mut Vec<Attribute>) -> PResult<'a, Option<P<Block>>> {\n-        let (inner_attrs, body) = match self.token.kind {\n-            token::Semi => {\n-                self.bump();\n-                (Vec::new(), None)\n-            }\n-            token::OpenDelim(token::Brace) => {\n-                let (attrs, body) = self.parse_inner_attrs_and_block()?;\n-                (attrs, Some(body))\n-            }\n-            token::Interpolated(ref nt) => match **nt {\n-                token::NtBlock(..) => {\n-                    let (attrs, body) = self.parse_inner_attrs_and_block()?;\n-                    (attrs, Some(body))\n-                }\n-                _ => return self.expected_semi_or_open_brace(),\n-            },\n-            _ => return self.expected_semi_or_open_brace(),\n+        let (inner_attrs, body) = if self.check(&token::Semi) {\n+            self.bump();\n+            (Vec::new(), None)\n+        } else if self.check(&token::OpenDelim(token::Brace)) || self.token.is_whole_block() {\n+            self.parse_inner_attrs_and_block().map(|(attrs, body)| (attrs, Some(body)))?\n+        } else {\n+            return self.expected_semi_or_open_brace();\n         };\n         attrs.extend(inner_attrs);\n         Ok(body)"}]}