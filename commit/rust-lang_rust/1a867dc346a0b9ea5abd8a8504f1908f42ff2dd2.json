{"sha": "1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhODY3ZGMzNDZhMGI5ZWE1YWJkOGE4NTA0ZjE5MDhmNDJmZjJkZDI=", "commit": {"author": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-09-10T22:06:49Z"}, "committer": {"name": "Havvy (Ryan Scheel)", "email": "ryan.havvy@gmail.com", "date": "2018-10-06T00:29:17Z"}, "message": "cfg_attr_multi: Basic implementation\n\nDoes not implement the warning or a feature flag.", "tree": {"sha": "df5117610979478bd9f02f14b9eb360c3940b1fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df5117610979478bd9f02f14b9eb360c3940b1fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "html_url": "https://github.com/rust-lang/rust/commit/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9568ec6bef514515b14c78c7492186d509048968", "url": "https://api.github.com/repos/rust-lang/rust/commits/9568ec6bef514515b14c78c7492186d509048968", "html_url": "https://github.com/rust-lang/rust/commit/9568ec6bef514515b14c78c7492186d509048968"}], "stats": {"total": 297, "additions": 252, "deletions": 45}, "files": [{"sha": "7a85f6285364101840865d58ab015f7ecfc7888c", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 43, "deletions": 16, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -73,49 +73,76 @@ impl<'a> StripUnconfigured<'a> {\n         if self.in_cfg(node.attrs()) { Some(node) } else { None }\n     }\n \n+    /// Parse and expand all `cfg_attr` attributes into a list of attributes\n+    /// that are within each `cfg_attr` that has a true configuration predicate.\n+    ///\n+    /// Gives compiler warnigns if any `cfg_attr` does not contain any\n+    /// attributes and is in the original source code. Gives compiler errors if\n+    /// the syntax of any `cfg_attr` is incorrect.\n     pub fn process_cfg_attrs<T: HasAttrs>(&mut self, node: T) -> T {\n         node.map_attrs(|attrs| {\n-            attrs.into_iter().filter_map(|attr| self.process_cfg_attr(attr)).collect()\n+            attrs.into_iter().flat_map(|attr| self.process_cfg_attr(attr)).collect()\n         })\n     }\n \n-    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> {\n+    /// Parse and expand a single `cfg_attr` attribute into a list of attributes\n+    /// when the configuration predicate is true, or otherwise expand into an\n+    /// empty list of attributes.\n+    ///\n+    /// Gives a compiler warning when the `cfg_attr` contains no attribtes and\n+    /// is in the original source file. Gives a compiler error if the syntax of\n+    /// the attribute is incorrect\n+    fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Vec<ast::Attribute> {\n         if !attr.check_name(\"cfg_attr\") {\n-            return Some(attr);\n+            return vec![attr];\n         }\n \n-        let (cfg, path, tokens, span) = match attr.parse(self.sess, |parser| {\n+        let (cfg_predicate, expanded_attrs) = match attr.parse(self.sess, |parser| {\n             parser.expect(&token::OpenDelim(token::Paren))?;\n-            let cfg = parser.parse_meta_item()?;\n+\n+            let cfg_predicate = parser.parse_meta_item()?;\n             parser.expect(&token::Comma)?;\n-            let lo = parser.span.lo();\n-            let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n-            parser.eat(&token::Comma); // Optional trailing comma\n+\n+            // Presumably, the majority of the time there will only be one attr.\n+            let mut expanded_attrs = Vec::with_capacity(1);\n+\n+            while !parser.check(&token::CloseDelim(token::Paren)) {\n+                let lo = parser.span.lo();\n+                let (path, tokens) = parser.parse_meta_item_unrestricted()?;\n+                expanded_attrs.push((path, tokens, parser.prev_span.with_lo(lo)));\n+                parser.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Paren)])?;\n+            }\n+\n             parser.expect(&token::CloseDelim(token::Paren))?;\n-            Ok((cfg, path, tokens, parser.prev_span.with_lo(lo)))\n+            Ok((cfg_predicate, expanded_attrs))\n         }) {\n             Ok(result) => result,\n             Err(mut e) => {\n                 e.emit();\n-                return None;\n+                return Vec::new();\n             }\n         };\n \n-        if attr::cfg_matches(&cfg, self.sess, self.features) {\n-            self.process_cfg_attr(ast::Attribute {\n+        if attr::cfg_matches(&cfg_predicate, self.sess, self.features) {\n+            // We call `process_cfg_attr` recursively in case there's a\n+            // `cfg_attr` inside of another `cfg_attr`. E.g.\n+            //  `#[cfg_attr(false, cfg_attr(true, some_attr))]`.\n+            expanded_attrs.into_iter()\n+            .flat_map(|(path, tokens, span)| self.process_cfg_attr(ast::Attribute {\n                 id: attr::mk_attr_id(),\n                 style: attr.style,\n                 path,\n                 tokens,\n                 is_sugared_doc: false,\n                 span,\n-            })\n+            }))\n+            .collect()\n         } else {\n-            None\n+            Vec::new()\n         }\n     }\n \n-    // Determine if a node with the given attributes should be included in this configuration.\n+    /// Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             if !is_cfg(attr) {\n@@ -165,7 +192,7 @@ impl<'a> StripUnconfigured<'a> {\n         })\n     }\n \n-    // Visit attributes on expression and statements (but not attributes on items in blocks).\n+    /// Visit attributes on expression and statements (but not attributes on items in blocks).\n     fn visit_expr_attrs(&mut self, attrs: &[ast::Attribute]) {\n         // flag the offending attributes\n         for attr in attrs.iter() {"}, {"sha": "a5ee2b0f1035383cb2df9a5933d1e65d9d2b7a36", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -678,7 +678,7 @@ impl<'a> Parser<'a> {\n     /// Expect next token to be edible or inedible token.  If edible,\n     /// then consume it; if inedible, then return without consuming\n     /// anything.  Signal a fatal error if next token is unexpected.\n-    fn expect_one_of(&mut self,\n+    pub fn expect_one_of(&mut self,\n                          edible: &[token::Token],\n                          inedible: &[token::Token]) -> PResult<'a,  ()>{\n         fn tokens_to_string(tokens: &[TokenType]) -> String {"}, {"sha": "21e00544ca00b4a723d028ebb5a94f37e987b24e", "filename": "src/test/ui/cfg-attr-trailing-comma.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9568ec6bef514515b14c78c7492186d509048968/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9568ec6bef514515b14c78c7492186d509048968/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.rs?ref=9568ec6bef514515b14c78c7492186d509048968", "patch": "@@ -1,13 +0,0 @@\n-// compile-flags: --cfg TRUE\n-\n-#[cfg_attr(TRUE, inline,)] // OK\n-fn f() {}\n-\n-#[cfg_attr(FALSE, inline,)] // OK\n-fn g() {}\n-\n-#[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn h() {}\n-\n-#[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-fn i() {}"}, {"sha": "76a470417e9edb6f336c4cada2f0c076e489ea1f", "filename": "src/test/ui/cfg-attr-trailing-comma.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9568ec6bef514515b14c78c7492186d509048968/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9568ec6bef514515b14c78c7492186d509048968/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg-attr-trailing-comma.stderr?ref=9568ec6bef514515b14c78c7492186d509048968", "patch": "@@ -1,14 +0,0 @@\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:9:25\n-   |\n-LL | #[cfg_attr(TRUE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                         ^ expected `)`\n-\n-error: expected `)`, found `,`\n-  --> $DIR/cfg-attr-trailing-comma.rs:12:26\n-   |\n-LL | #[cfg_attr(FALSE, inline,,)] //~ ERROR expected `)`, found `,`\n-   |                          ^ expected `)`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a730473f663151df284a88b1de9fe627f7c751e6", "filename": "src/test/ui/conditional-compilation/cfg-attr-crate-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-crate-2.stderr?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -2,7 +2,7 @@ error[E0658]: no_core is experimental (see issue #29639)\n   --> $DIR/cfg-attr-crate-2.rs:15:21\n    |\n LL | #![cfg_attr(broken, no_core)] //~ ERROR no_core is experimental\n-   |                     ^^^^^^^^\n+   |                     ^^^^^^^\n    |\n    = help: add #![feature(no_core)] to the crate attributes to enable\n "}, {"sha": "ff7a47e0839401e8eaf742763db21a47beb48ad3", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-false.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-false.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,19 @@\n+// Test that cfg_attr doesn't emit any attributes when the\n+// configuation variable is false. This mirrors `cfg-attr-multi-true.rs`\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[cfg_attr(any(), deprecated, must_use)]\n+struct Struct {}\n+\n+impl Struct {\n+    fn new() -> Struct {\n+        Struct {}\n+    }\n+}\n+\n+fn main() {\n+    Struct::new();\n+}"}, {"sha": "a9ddbf7d80d3eb07d49d0c2e4858f2f9f6a62ebf", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+\n+fn main() { }"}, {"sha": "344a05a4fecbb1bffe983a8241ac59c87198f98a", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-1.stderr?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-1.rs:13:21\n+   |\n+LL | #![cfg_attr(broken, no_core, no_std)] //~ ERROR no_core is experimental\n+   |                     ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "211eb08f08e288e7fe77c6991b9976a286855ea0", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// compile-flags: --cfg broken\n+\n+#![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+\n+fn main() { }"}, {"sha": "54854d2e29d53c696bdad7097cbc442846b163d8", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-invalid-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-invalid-2.stderr?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: no_core is experimental (see issue #29639)\n+  --> $DIR/cfg-attr-multi-invalid-2.rs:13:29\n+   |\n+LL | #![cfg_attr(broken, no_std, no_core)] //~ ERROR no_core is experimental\n+   |                             ^^^^^^^\n+   |\n+   = help: add #![feature(no_core)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "4b9a8d46b9b1f722220ebf12d831ccbbe2933826", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,21 @@\n+// Test that cfg_attr with multiple attributes actually emits both attributes.\n+// This is done by emitting two attributes that cause new warnings, and then\n+// triggering those warnings.\n+\n+// compile-pass\n+\n+#![warn(unused_must_use)]\n+\n+#[cfg_attr(all(), deprecated, must_use)]\n+struct MustUseDeprecated {}\n+\n+impl MustUseDeprecated { //~ warning: use of deprecated item\n+    fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+        MustUseDeprecated {} //~ warning: use of deprecated item\n+    }\n+}\n+\n+fn main() {\n+    MustUseDeprecated::new(); //~ warning: use of deprecated item\n+    //| warning: unused `MustUseDeprecated` which must be used\n+}"}, {"sha": "21634ee4f26b80b2840b7a850d2f89c61e0fa8f8", "filename": "src/test/ui/conditional-compilation/cfg-attr-multi-true.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-multi-true.stderr?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,38 @@\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:12:6\n+   |\n+LL | impl MustUseDeprecated { //~ warning: use of deprecated item\n+   |      ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:19:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:13:17\n+   |\n+LL |     fn new() -> MustUseDeprecated { //~ warning: use of deprecated item\n+   |                 ^^^^^^^^^^^^^^^^^\n+\n+warning: use of deprecated item 'MustUseDeprecated'\n+  --> $DIR/cfg-attr-multi-true.rs:14:9\n+   |\n+LL |         MustUseDeprecated {} //~ warning: use of deprecated item\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+warning: unused `MustUseDeprecated` which must be used\n+  --> $DIR/cfg-attr-multi-true.rs:19:5\n+   |\n+LL |     MustUseDeprecated::new(); //~ warning: use of deprecated item\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cfg-attr-multi-true.rs:7:9\n+   |\n+LL | #![warn(unused_must_use)]\n+   |         ^^^^^^^^^^^^^^^\n+"}, {"sha": "eec0e8faca877b7f71a2537232861fa2a66fb628", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.rs?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,45 @@\n+// Parse `cfg_attr` with varying numbers of attributes and trailing commas\n+\n+#![feature(cfg_attr_multi)]\n+\n+// Completely empty `cfg_attr` input\n+#[cfg_attr()] //~ error: expected identifier, found `)`\n+struct NoConfigurationPredicate;\n+\n+// Zero attributes, zero trailing comma (comma manatory here)\n+#[cfg_attr(all())] //~ error: expected `,`, found `)`\n+struct A0C0;\n+\n+// Zero attributes, one trailing comma\n+#[cfg_attr(all(),)] // Ok\n+struct A0C1;\n+\n+// Zero attributes, two trailing commas\n+#[cfg_attr(all(),,)] //~ ERROR expected identifier\n+struct A0C2;\n+\n+// One attribute, no trailing comma\n+#[cfg_attr(all(), must_use)] // Ok\n+struct A1C0;\n+\n+// One attribute, one trailing comma\n+#[cfg_attr(all(), must_use,)] // Ok\n+struct A1C1;\n+\n+// One attribute, two trailing commas\n+#[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+struct A1C2;\n+\n+// Two attributes, no trailing comma\n+#[cfg_attr(all(), must_use, deprecated)] // Ok\n+struct A2C0;\n+\n+// Two attributes, one trailing comma\n+#[cfg_attr(all(), must_use, deprecated,)] // Ok\n+struct A2C1;\n+\n+// Two attributes, two trailing commas\n+#[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+struct A2C2;\n+\n+fn main() {}"}, {"sha": "553406b6dd83d25f11775a734c48838f1d580735", "filename": "src/test/ui/conditional-compilation/cfg-attr-parse.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconditional-compilation%2Fcfg-attr-parse.stderr?ref=1a867dc346a0b9ea5abd8a8504f1908f42ff2dd2", "patch": "@@ -0,0 +1,32 @@\n+error: expected identifier, found `)`\n+  --> $DIR/cfg-attr-parse.rs:6:12\n+   |\n+LL | #[cfg_attr()] //~ error: expected identifier, found `)`\n+   |            ^ expected identifier\n+\n+error: expected `,`, found `)`\n+  --> $DIR/cfg-attr-parse.rs:10:17\n+   |\n+LL | #[cfg_attr(all())] //~ error: expected `,`, found `)`\n+   |                 ^ expected `,`\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:18:18\n+   |\n+LL | #[cfg_attr(all(),,)] //~ ERROR expected identifier\n+   |                  ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:30:28\n+   |\n+LL | #[cfg_attr(all(), must_use,,)] //~ ERROR expected identifier\n+   |                            ^ expected identifier\n+\n+error: expected identifier, found `,`\n+  --> $DIR/cfg-attr-parse.rs:42:40\n+   |\n+LL | #[cfg_attr(all(), must_use, deprecated,,)] //~ ERROR expected identifier\n+   |                                        ^ expected identifier\n+\n+error: aborting due to 5 previous errors\n+"}]}