{"sha": "ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "node_id": "C_kwDOAAsO6NoAKGVjZjQ2ZDEwNzRmMGJiNmQ1N2JmNGMzNDM0Y2JlNGIwNmMyNDdmMzM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-03-10T18:57:02Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-03-10T20:31:19Z"}, "message": "Add `Atomic*::get_mut_slice`\n\nJust as `get_mut` is the inverse of `from_mut`, `get_mut_slice` is the\ninverse of `from_mut_slice`.", "tree": {"sha": "9db969c6afcfdc34414ecb44f38808d71347bb8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9db969c6afcfdc34414ecb44f38808d71347bb8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "html_url": "https://github.com/rust-lang/rust/commit/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba14a836c7038da21f5e102aacc7e6d5964f79a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba14a836c7038da21f5e102aacc7e6d5964f79a6", "html_url": "https://github.com/rust-lang/rust/commit/ba14a836c7038da21f5e102aacc7e6d5964f79a6"}], "stats": {"total": 110, "additions": 110, "deletions": 0}, "files": [{"sha": "bc36798409b3b3938cab753651e60117e4959c92", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=ecf46d1074f0bb6d57bf4c3434cbe4b06c247f33", "patch": "@@ -340,6 +340,40 @@ impl AtomicBool {\n         unsafe { &mut *(v as *mut bool as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicBool]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::sync::atomic::{AtomicBool, Ordering};\n+    ///\n+    /// let mut some_bools = [const { AtomicBool::new(false) }; 10];\n+    ///\n+    /// let view: &mut [bool] = AtomicBool::get_mut_slice(&mut some_bools);\n+    /// assert_eq!(view, [false; 10]);\n+    /// view[..5].copy_from_slice(&[true; 5]);\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for t in &some_bools[..5] {\n+    ///         s.spawn(move || assert_eq!(t.load(Ordering::Relaxed), true));\n+    ///     }\n+    ///\n+    ///     for f in &some_bools[5..] {\n+    ///         s.spawn(move || assert_eq!(f.load(Ordering::Relaxed), false));\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [bool] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [bool]) }\n+    }\n+\n     /// Get atomic access to a `&mut [bool]` slice.\n     ///\n     /// # Examples\n@@ -971,6 +1005,46 @@ impl<T> AtomicPtr<T> {\n         unsafe { &mut *(v as *mut *mut T as *mut Self) }\n     }\n \n+    /// Get non-atomic access to a `&mut [AtomicPtr]` slice.\n+    ///\n+    /// This is safe because the mutable reference guarantees that no other threads are\n+    /// concurrently accessing the atomic data.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+    /// use std::ptr::null_mut;\n+    /// use std::sync::atomic::{AtomicPtr, Ordering};\n+    ///\n+    /// let mut some_ptrs = [const { AtomicPtr::new(null_mut::<String>()) }; 10];\n+    ///\n+    /// let view: &mut [*mut String] = AtomicPtr::get_mut_slice(&mut some_ptrs);\n+    /// assert_eq!(view, [null_mut::<String>(); 10]);\n+    /// view\n+    ///     .iter_mut()\n+    ///     .enumerate()\n+    ///     .for_each(|(i, ptr)| *ptr = Box::into_raw(Box::new(format!(\"iteration#{i}\"))));\n+    ///\n+    /// std::thread::scope(|s| {\n+    ///     for ptr in &some_ptrs {\n+    ///         s.spawn(move || {\n+    ///             let ptr = ptr.load(Ordering::Relaxed);\n+    ///             assert!(!ptr.is_null());\n+    ///\n+    ///             let name = unsafe { Box::from_raw(ptr) };\n+    ///             println!(\"Hello, {name}!\");\n+    ///         });\n+    ///     }\n+    /// });\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+    pub fn get_mut_slice(this: &mut [Self]) -> &mut [*mut T] {\n+        // SAFETY: the mutable reference guarantees unique ownership.\n+        unsafe { &mut *(this as *mut [Self] as *mut [*mut T]) }\n+    }\n+\n     /// Get atomic access to a slice of pointers.\n     ///\n     /// # Examples\n@@ -1521,6 +1595,42 @@ macro_rules! atomic_int {\n                 unsafe { &mut *(v as *mut $int_type as *mut Self) }\n             }\n \n+            #[doc = concat!(\"Get non-atomic access to a `&mut [\", stringify!($atomic_type), \"]` slice\")]\n+            ///\n+            /// This is safe because the mutable reference guarantees that no other threads are\n+            /// concurrently accessing the atomic data.\n+            ///\n+            /// # Examples\n+            ///\n+            /// ```\n+            /// #![feature(atomic_from_mut, inline_const, scoped_threads)]\n+            #[doc = concat!($extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\")]\n+            ///\n+            #[doc = concat!(\"let mut some_ints = [const { \", stringify!($atomic_type), \"::new(0) }; 10];\")]\n+            ///\n+            #[doc = concat!(\"let view: &mut [\", stringify!($int_type), \"] = \", stringify!($atomic_type), \"::get_mut_slice(&mut some_ints);\")]\n+            /// assert_eq!(view, [0; 10]);\n+            /// view\n+            ///     .iter_mut()\n+            ///     .enumerate()\n+            ///     .for_each(|(idx, int)| *int = idx as _);\n+            ///\n+            /// std::thread::scope(|s| {\n+            ///     some_ints\n+            ///         .iter()\n+            ///         .enumerate()\n+            ///         .for_each(|(idx, int)| {\n+            ///             s.spawn(move || assert_eq!(int.load(Ordering::Relaxed), idx as _));\n+            ///         })\n+            /// });\n+            /// ```\n+            #[inline]\n+            #[unstable(feature = \"atomic_from_mut\", issue = \"76314\")]\n+            pub fn get_mut_slice(this: &mut [Self]) -> &mut [$int_type] {\n+                // SAFETY: the mutable reference guarantees unique ownership.\n+                unsafe { &mut *(this as *mut [Self] as *mut [$int_type]) }\n+            }\n+\n             #[doc = concat!(\"Get atomic access to a `&mut [\", stringify!($int_type), \"]` slice.\")]\n             ///\n             /// # Examples"}]}