{"sha": "a1b172224c0bc88ae2132726941ab267877a95b9", "node_id": "C_kwDOAAsO6NoAKGExYjE3MjIyNGMwYmM4OGFlMjEzMjcyNjk0MWFiMjY3ODc3YTk1Yjk", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T23:57:44Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-20T21:12:07Z"}, "message": "consistently use VTable over Vtable (matching stable stdlib API RawWakerVTable)", "tree": {"sha": "3b170d8b9e28ea175fb8a6ae09d0de3e7404c59b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b170d8b9e28ea175fb8a6ae09d0de3e7404c59b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b172224c0bc88ae2132726941ab267877a95b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b172224c0bc88ae2132726941ab267877a95b9", "html_url": "https://github.com/rust-lang/rust/commit/a1b172224c0bc88ae2132726941ab267877a95b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b172224c0bc88ae2132726941ab267877a95b9/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5cce742787315bbd974a08718a3020cb1fe3eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5cce742787315bbd974a08718a3020cb1fe3eaf", "html_url": "https://github.com/rust-lang/rust/commit/b5cce742787315bbd974a08718a3020cb1fe3eaf"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "2380f3e1df022c37d604cae0fbaf99800edad829", "filename": "src/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1b172224c0bc88ae2132726941ab267877a95b9/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b172224c0bc88ae2132726941ab267877a95b9/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=a1b172224c0bc88ae2132726941ab267877a95b9", "patch": "@@ -197,7 +197,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                 let (alloc_id, offset) = ptr.into_parts(); // we know the `offset` is relative\n                 // For vtables, get the underlying data allocation.\n                 let alloc_id = match fx.tcx.global_alloc(alloc_id) {\n-                    GlobalAlloc::Vtable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n+                    GlobalAlloc::VTable(ty, trait_ref) => fx.tcx.vtable_allocation((ty, trait_ref)),\n                     _ => alloc_id,\n                 };\n                 let base_addr = match fx.tcx.global_alloc(alloc_id) {\n@@ -221,7 +221,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                         fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                     }\n-                    GlobalAlloc::Vtable(..) => bug!(\"vtables are already handled\"),\n+                    GlobalAlloc::VTable(..) => bug!(\"vtables are already handled\"),\n                     GlobalAlloc::Static(def_id) => {\n                         assert!(fx.tcx.is_static(def_id));\n                         let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n@@ -364,7 +364,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 //println!(\"alloc_id {}\", alloc_id);\n                 let alloc = match tcx.global_alloc(alloc_id) {\n                     GlobalAlloc::Memory(alloc) => alloc,\n-                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::Vtable(..) => {\n+                    GlobalAlloc::Function(_) | GlobalAlloc::Static(_) | GlobalAlloc::VTable(..) => {\n                         unreachable!()\n                     }\n                 };\n@@ -442,7 +442,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 GlobalAlloc::Memory(target_alloc) => {\n                     data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n-                GlobalAlloc::Vtable(ty, trait_ref) => {\n+                GlobalAlloc::VTable(ty, trait_ref) => {\n                     let alloc_id = tcx.vtable_allocation((ty, trait_ref));\n                     data_id_for_alloc_id(cx, module, alloc_id, Mutability::Not)\n                 }"}]}