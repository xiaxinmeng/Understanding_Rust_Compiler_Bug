{"sha": "c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWU4ZmQ2MWE2Y2JkYmZjOGYxZTJlMGU2ZjQwZDkyN2RmOGMxOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T09:42:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-17T09:42:31Z"}, "message": "Auto merge of #29883 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #29868, #29873, #29874, #29875, #29876, #29880, #29881\n- Failed merges:", "tree": {"sha": "1c0c9a727240723a5a79b813ebf5532936c4ff5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c0c9a727240723a5a79b813ebf5532936c4ff5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "html_url": "https://github.com/rust-lang/rust/commit/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b2614847da94528ef2f284598de0062f132de2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b2614847da94528ef2f284598de0062f132de2d", "html_url": "https://github.com/rust-lang/rust/commit/1b2614847da94528ef2f284598de0062f132de2d"}, {"sha": "e81c72e78e958d54a3bd9e096d1dbf3fb6d0d104", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c72e78e958d54a3bd9e096d1dbf3fb6d0d104", "html_url": "https://github.com/rust-lang/rust/commit/e81c72e78e958d54a3bd9e096d1dbf3fb6d0d104"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "e6669f5c58d4120fe1a4b726a7490f61360122be", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -14,7 +14,7 @@\n # would create a variable HOST_i686-darwin-macos with the value\n # i386.\n define DEF_HOST_VAR\n-  HOST_$(1) = $(subst i686,i386,$(word 1,$(subst -, ,$(1))))\n+  HOST_$(1) = $(patsubst i%86,i386,$(word 1,$(subst -, ,$(1))))\n endef\n $(foreach t,$(CFG_TARGET),$(eval $(call DEF_HOST_VAR,$(t))))\n $(foreach t,$(CFG_TARGET),$(info cfg: host for $(t) is $(HOST_$(t))))"}, {"sha": "1f2961b586136c8738fc9219e4f801ed3c99f69a", "filename": "src/doc/nomicon/unbounded-lifetimes.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Fnomicon%2Funbounded-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Fnomicon%2Funbounded-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Funbounded-lifetimes.md?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -32,6 +32,5 @@ Within a function, bounding lifetimes is more error-prone. The safest and easies\n way to bound a lifetime is to return it from a function with a bound lifetime.\n However if this is unacceptable, the reference can be placed in a location with\n a specific lifetime. Unfortunately it's impossible to name all lifetimes involved\n-in a function. To get around this, you can in principle use `copy_lifetime`, though\n-these are unstable due to their awkward nature and questionable utility.\n+in a function.\n "}, {"sha": "17b263ef00ab786ea2f72a914724d64bea5b42ca", "filename": "src/doc/trpl/ownership.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Ftrpl%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Ftrpl%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fownership.md?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -187,7 +187,7 @@ fn change_truth(x: bool) -> bool {\n }\n ```\n \n-If we would have used types that do not implement the `Copy` trait,\n+If we had used types that do not implement the `Copy` trait,\n we would have gotten a compile error because we tried to use a moved value.\n \n ```text"}, {"sha": "7725970564be0305fad63308d0c43ef2da5f4484", "filename": "src/doc/trpl/ufcs.md", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Ftrpl%2Fufcs.md", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Fdoc%2Ftrpl%2Fufcs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fufcs.md?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -109,19 +109,28 @@ Here\u2019s an example of using the longer form.\n \n ```rust\n trait Foo {\n-    fn clone(&self);\n+    fn foo() -> i32;\n }\n \n-#[derive(Clone)]\n struct Bar;\n \n-impl Foo for Bar {\n-    fn clone(&self) {\n-        println!(\"Making a clone of Bar\");\n+impl Bar {\n+    fn foo() -> i32 {\n+        20\n+    }\n+}\n \n-        <Bar as Clone>::clone(self);\n+impl Foo for Bar {\n+    fn foo() -> i32 {\n+        10\n     }\n }\n+\n+fn main() {\n+    assert_eq!(10, <Bar as Foo>::foo());\n+    assert_eq!(20, Bar::foo());\n+}\n ```\n \n-This will call the `Clone` trait\u2019s `clone()` method, rather than `Foo`\u2019s.\n+Using the angle bracket syntax lets you call the trait method instead of the\n+inherent one."}, {"sha": "769faedf46e8ebf4b57b6677add6c55a8ba00abb", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -24,6 +24,8 @@\n use marker::Sized;\n \n /// A common trait for cloning an object.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Clone : Sized {\n     /// Returns a copy of the value."}, {"sha": "3ac4ffb22364f3a777c5149d1729163ae7906c0c", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -43,6 +43,8 @@ use option::Option::{self, Some};\n /// in terms of it by default. Any manual implementation of `ne` *must* respect\n /// the rule that `eq` is a strict inverse of `ne`; that is, `!(a == b)` if and\n /// only if `a != b`.\n+///\n+/// This trait can be used with `#[derive]`.\n #[lang = \"eq\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialEq<Rhs: ?Sized = Self> {\n@@ -69,6 +71,8 @@ pub trait PartialEq<Rhs: ?Sized = Self> {\n ///\n /// This property cannot be checked by the compiler, and therefore `Eq` implies\n /// `PartialEq`, and has no extra methods.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Eq: PartialEq<Self> {\n     // FIXME #13101: this method is used solely by #[deriving] to\n@@ -171,6 +175,8 @@ impl Ordering {\n /// - transitive, `a < b` and `b < c` implies `a < c`. The same must hold for both `==` and `>`.\n ///\n /// When this trait is `derive`d, it produces a lexicographic ordering.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Ord: Eq + PartialOrd<Self> {\n     /// This method returns an `Ordering` between `self` and `other`.\n@@ -227,6 +233,8 @@ impl PartialOrd for Ordering {\n /// However it remains possible to implement the others separately for types which do not have a\n /// total order. For example, for floating point numbers, `NaN < 0 == false` and `NaN >= 0 ==\n /// false` (cf. IEEE 754-2008 section 5.11).\n+///\n+/// This trait can be used with `#[derive]`.\n #[lang = \"ord\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PartialOrd<Rhs: ?Sized = Self>: PartialEq<Rhs> {"}, {"sha": "dfcc5781f0873d8b47b420f1440838abb0e41860", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -300,6 +300,8 @@ impl<'a> Display for Arguments<'a> {\n ///\n /// [module]: ../../std/fmt/index.html\n ///\n+/// This trait can be used with `#[derive]`.\n+///\n /// # Examples\n ///\n /// Deriving an implementation:"}, {"sha": "ea3a2f78d564ab3033848ae3681582fbfac1670c", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -93,6 +93,8 @@ mod sip;\n ///\n /// In other words, if two keys are equal, their hashes should also be equal.\n /// `HashMap` and `HashSet` both rely on this behavior.\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Hash {\n     /// Feeds this value into the state given, updating the hasher as necessary."}, {"sha": "84a6196cc87aeed306eac04d63022f8fe3372960", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -165,6 +165,10 @@ pub trait Unsize<T: ?Sized> {\n /// to consider though: if you think your type may _not_ be able to implement `Copy` in the future,\n /// then it might be prudent to not implement `Copy`. This is because removing `Copy` is a breaking\n /// change: that second example would fail to compile if we made `Foo` non-`Copy`.\n+///\n+/// # Derivable\n+///\n+/// This trait can be used with `#[derive]`.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[lang = \"copy\"]\n pub trait Copy : Clone {"}, {"sha": "dabc8090270294e8386a1cc7e0e352bb3abe5983", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -167,22 +167,20 @@ impl StdError for JoinPathsError {\n #[cfg(target_os = \"freebsd\")]\n pub fn current_exe() -> io::Result<PathBuf> {\n     unsafe {\n-        use libc::funcs::bsd44::*;\n-        use libc::consts::os::extra::*;\n-        let mut mib = [CTL_KERN as c_int,\n-                       KERN_PROC as c_int,\n-                       KERN_PROC_PATHNAME as c_int,\n+        let mut mib = [libc::CTL_KERN as c_int,\n+                       libc::KERN_PROC as c_int,\n+                       libc::KERN_PROC_PATHNAME as c_int,\n                        -1 as c_int];\n         let mut sz: libc::size_t = 0;\n-        let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n-                         ptr::null_mut(), &mut sz, ptr::null_mut(),\n-                         0 as libc::size_t);\n+        let err = libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n+                               ptr::null_mut(), &mut sz, ptr::null_mut(),\n+                               0 as libc::size_t);\n         if err != 0 { return Err(io::Error::last_os_error()); }\n         if sz == 0 { return Err(io::Error::last_os_error()); }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as usize);\n-        let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n-                         v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n-                         ptr::null_mut(), 0 as libc::size_t);\n+        let err = libc::sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n+                               v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n+                               ptr::null_mut(), 0 as libc::size_t);\n         if err != 0 { return Err(io::Error::last_os_error()); }\n         if sz == 0 { return Err(io::Error::last_os_error()); }\n         v.set_len(sz as usize - 1); // chop off trailing NUL"}, {"sha": "9bbfbb6822463083cad6d1252dbd58c06cbb3775", "filename": "src/test/run-pass/mir_raw_fat_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_raw_fat_ptr.rs?ref=c61e8fd61a6cbdbfc8f1e2e0e6f40d927df8c18f", "patch": "@@ -76,7 +76,7 @@ fn compare_au8(a: *const [u8], b: *const [u8]) -> ComparisonResults {\n     }\n }\n \n-#[rustc_mir(graphviz=\"comparefoo.gv\")]\n+#[rustc_mir]\n fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults {\n     ComparisonResults {\n         lt: a < b,\n@@ -88,7 +88,7 @@ fn compare_foo<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> ComparisonResults\n     }\n }\n \n-#[rustc_mir(graphviz=\"simpleeq.gv\")]\n+#[rustc_mir]\n fn simple_eq<'a>(a: *const (Foo+'a), b: *const (Foo+'a)) -> bool {\n     let result = a == b;\n     result"}]}