{"sha": "99e3aef02079e9c10583638520cd0c134dc3a01d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTNhZWYwMjA3OWU5YzEwNTgzNjM4NTIwY2QwYzEzNGRjM2EwMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T18:30:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-20T18:30:26Z"}, "message": "Auto merge of #85518 - GuillaumeGomez:rollup-mq4ohfy, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #85275 (Move `std::memchr` to `sys_common`)\n - #85326 (bootstrap: ensure host std when cross-compiling tools, fixes #85320)\n - #85375 (Fix missing lifetimes diagnostics after #83759)\n - #85507 (Extend escape key check)\n - #85509 (Prevent tab title to \"null\" if the URL is a search one)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "5e9f3cb53bb3cd75c4e69e85c3a2cf465ab48b6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e9f3cb53bb3cd75c4e69e85c3a2cf465ab48b6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e3aef02079e9c10583638520cd0c134dc3a01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e3aef02079e9c10583638520cd0c134dc3a01d", "html_url": "https://github.com/rust-lang/rust/commit/99e3aef02079e9c10583638520cd0c134dc3a01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e3aef02079e9c10583638520cd0c134dc3a01d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473", "html_url": "https://github.com/rust-lang/rust/commit/9a3214e9be41a5d50ae6ba9bb8422dcc2cb10473"}, {"sha": "247e2e24ebd427ddeb254cec9337de2803adfa0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/247e2e24ebd427ddeb254cec9337de2803adfa0a", "html_url": "https://github.com/rust-lang/rust/commit/247e2e24ebd427ddeb254cec9337de2803adfa0a"}], "stats": {"total": 120, "additions": 70, "deletions": 50}, "files": [{"sha": "aed36b12f3a222aabf6ea972aec910da11671c79", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -509,44 +509,23 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             }\n \n             AngleBrackets::Available => {\n-                // angle brackets exist, so we insert missing arguments after the existing args\n-\n-                assert!(!self.gen_args.args.is_empty());\n-\n-                if self.num_provided_lifetime_args() > 0 {\n-                    let last_lt_arg_span = self.gen_args.args\n-                        [self.num_provided_lifetime_args() - 1]\n-                        .span()\n-                        .shrink_to_hi();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(last_gen_arg) = source_map.span_to_snippet(last_lt_arg_span) {\n-                        let sugg = format!(\"{}, {}\", last_gen_arg, suggested_args);\n-\n-                        err.span_suggestion_verbose(\n-                            last_lt_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n+                let (sugg_span, is_first) = if self.num_provided_lifetime_args() == 0 {\n+                    (self.gen_args.span().unwrap().shrink_to_lo(), true)\n                 } else {\n-                    // Non-lifetime arguments included in `gen_args` -> insert missing lifetimes before\n-                    // existing arguments\n-                    let first_arg_span = self.gen_args.args[0].span().shrink_to_lo();\n-                    let source_map = self.tcx.sess.source_map();\n-\n-                    if let Ok(first_gen_arg) = source_map.span_to_snippet(first_arg_span) {\n-                        let sugg = format!(\"{}, {}\", suggested_args, first_gen_arg);\n-\n-                        err.span_suggestion_verbose(\n-                            first_arg_span,\n-                            &msg,\n-                            sugg,\n-                            Applicability::HasPlaceholders,\n-                        );\n-                    }\n-                }\n+                    let last_lt = &self.gen_args.args[self.num_provided_lifetime_args() - 1];\n+                    (last_lt.span().shrink_to_hi(), false)\n+                };\n+                let has_non_lt_args = self.num_provided_type_or_const_args() != 0;\n+                let has_bindings = !self.gen_args.bindings.is_empty();\n+\n+                let sugg_prefix = if is_first { \"\" } else { \", \" };\n+                let sugg_suffix =\n+                    if is_first && (has_non_lt_args || has_bindings) { \", \" } else { \"\" };\n+\n+                let sugg = format!(\"{}{}{}\", sugg_prefix, suggested_args, sugg_suffix);\n+                debug!(\"sugg: {:?}\", sugg);\n+\n+                err.span_suggestion_verbose(sugg_span, &msg, sugg, Applicability::HasPlaceholders);\n             }\n             AngleBrackets::Implied => {\n                 // We never encounter missing lifetimes in situations in which lifetimes are elided"}, {"sha": "2a4ef553be3997626f70db57441799c398411009", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -10,7 +10,6 @@ use crate::error::Error;\n use crate::fmt::{self, Write};\n use crate::io;\n use crate::mem;\n-use crate::memchr;\n use crate::num::NonZeroU8;\n use crate::ops;\n use crate::os::raw::c_char;\n@@ -20,6 +19,7 @@ use crate::slice;\n use crate::str::{self, Utf8Error};\n use crate::sync::Arc;\n use crate::sys;\n+use crate::sys_common::memchr;\n \n /// A type representing an owned, C-compatible, nul-terminated string with no nul bytes in the\n /// middle."}, {"sha": "0175d2693e894c9361a33eeb626815311b3a1443", "filename": "library/std/src/io/buffered/linewritershim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewritershim.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -1,5 +1,5 @@\n use crate::io::{self, BufWriter, IoSlice, Write};\n-use crate::memchr;\n+use crate::sys_common::memchr;\n \n /// Private helper struct for implementing the line-buffered writing logic.\n /// This shim temporarily wraps a BufWriter, and uses its internals to"}, {"sha": "a8f3412c611169ac4cf615516e82fdf2603e85cc", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -253,12 +253,12 @@ mod tests;\n \n use crate::cmp;\n use crate::fmt;\n-use crate::memchr;\n use crate::ops::{Deref, DerefMut};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys;\n+use crate::sys_common::memchr;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::buffered::IntoInnerError;"}, {"sha": "442b5628d1dc0703a464f6916b164496a0f56bfc", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -530,7 +530,6 @@ mod sys;\n pub mod alloc;\n \n // Private support modules\n-mod memchr;\n mod panicking;\n \n // The runtime entry point and a few unstable public functions used by the"}, {"sha": "40bd393098f5731d37db8127529f36883105d884", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -4,11 +4,11 @@ use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::marker::PhantomData;\n-use crate::memchr;\n use crate::path::{self, PathBuf};\n use crate::str;\n use crate::sync::Mutex;\n use crate::sys::hermit::abi;\n+use crate::sys::memchr;\n use crate::sys::unsupported;\n use crate::sys_common::os_str_bytes::*;\n use crate::vec;"}, {"sha": "bbc4691d963c6405ff08bb5156fd4e092b082d97", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -13,13 +13,13 @@ use crate::fmt;\n use crate::io;\n use crate::iter;\n use crate::mem;\n-use crate::memchr;\n use crate::path::{self, PathBuf};\n use crate::ptr;\n use crate::slice;\n use crate::str;\n use crate::sys::cvt;\n use crate::sys::fd;\n+use crate::sys::memchr;\n use crate::sys::rwlock::{RWLockReadGuard, StaticRWLock};\n use crate::sys_common::mutex::{StaticMutex, StaticMutexGuard};\n use crate::vec;"}, {"sha": "b219e87891264060f1ee3d87a0c9fcb617d0a010", "filename": "library/std/src/sys_common/memchr.rs", "status": "renamed", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -1,6 +1,8 @@\n // Original implementation taken from rust-memchr.\n // Copyright 2015 Andrew Gallant, bluss and Nicolas Koch\n \n+use crate::sys::memchr as sys;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -25,7 +27,7 @@ mod tests;\n /// ```\n #[inline]\n pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    crate::sys::memchr::memchr(needle, haystack)\n+    sys::memchr(needle, haystack)\n }\n \n /// A safe interface to `memrchr`.\n@@ -45,5 +47,5 @@ pub fn memchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n /// ```\n #[inline]\n pub fn memrchr(needle: u8, haystack: &[u8]) -> Option<usize> {\n-    crate::sys::memchr::memrchr(needle, haystack)\n+    sys::memrchr(needle, haystack)\n }", "previous_filename": "library/std/src/memchr.rs"}, {"sha": "557d749c7f63e2f2c3e0976f8b7abb610764bfc3", "filename": "library/std/src/sys_common/memchr/tests.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmemchr%2Ftests.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "previous_filename": "library/std/src/memchr/tests.rs"}, {"sha": "1a9caa22c92434a4b6a8d415003bbccdaa310173", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -25,6 +25,7 @@ pub mod bytestring;\n pub mod condvar;\n pub mod fs;\n pub mod io;\n+pub mod memchr;\n pub mod mutex;\n // `doc` is required because `sys/mod.rs` imports `unix/ext/mod.rs` on Windows\n // when generating documentation."}, {"sha": "98b5bfd3b980a379d4aff397f67fb819584015b9", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -52,7 +52,10 @@ impl Step for ToolBuild {\n         let is_optional_tool = self.is_optional_tool;\n \n         match self.mode {\n-            Mode::ToolRustc => builder.ensure(compile::Rustc { compiler, target }),\n+            Mode::ToolRustc => {\n+                builder.ensure(compile::Std { compiler, target: compiler.host });\n+                builder.ensure(compile::Rustc { compiler, target });\n+            }\n             Mode::ToolStd => builder.ensure(compile::Std { compiler, target }),\n             Mode::ToolBootstrap => {} // uses downloaded stage0 compiler libs\n             _ => panic!(\"unexpected Mode for tool build\"),"}, {"sha": "1ed94ec109c185efa9e2393a49ad0687f517dea9", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -161,7 +161,7 @@ function hideThemeButtonState() {\n         outputElement: function() {\n             return document.getElementById(\"search\");\n         },\n-        title: null,\n+        title: document.title,\n         titleBeforeSearch: document.title,\n         timeout: null,\n         // On the search screen, so you remain on the last tab you opened."}, {"sha": "ec034f52c972c07be40e7b0f4159da6930242fd3", "filename": "src/test/rustdoc-gui/escape-key.goml", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fescape-key.goml?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -22,6 +22,13 @@ assert: (\"#help\", \"class\", \"hidden\")\n assert: (\"#search\", \"class\", \"content\")\n assert: (\"#main\", \"class\", \"content hidden\")\n \n-// FIXME: Once https://github.com/rust-lang/rust/pull/84462 is merged, add check to ensure\n-// that Escape hides the search results when a result is focused.\n-// press-key: \"ArrowDown\"\n+// Check that Escape hides the search results when a search result is focused.\n+focus: \".search-input\"\n+assert: \".search-input:focus\"\n+press-key: \"ArrowDown\"\n+assert-false: \".search-input:focus\"\n+assert: \"#results a:focus\"\n+press-key: \"Escape\"\n+assert: (\"#help\", \"class\", \"hidden\")\n+assert: (\"#search\", \"class\", \"content hidden\")\n+assert: (\"#main\", \"class\", \"content\")"}, {"sha": "f08e38689d6af9e5300969bf74aebe6a919fe746", "filename": "src/test/ui/suggestions/issue-85347.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.rs?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -0,0 +1,10 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+use std::ops::Deref;\n+trait Foo {\n+    type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+    //~^ ERROR this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+    //~| HELP add missing\n+}\n+\n+fn main() {}"}, {"sha": "60594baa29cb65344806b4e1a208e40ebf12fe88", "filename": "src/test/ui/suggestions/issue-85347.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99e3aef02079e9c10583638520cd0c134dc3a01d/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-85347.stderr?ref=99e3aef02079e9c10583638520cd0c134dc3a01d", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/issue-85347.rs:5:42\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+   |                                          ^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-85347.rs:5:10\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<Target = Self>>;\n+   |          ^^^ --\n+help: add missing lifetime argument\n+   |\n+LL |     type Bar<'a>: Deref<Target = <Self>::Bar<'a, Target = Self>>;\n+   |                                              ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}