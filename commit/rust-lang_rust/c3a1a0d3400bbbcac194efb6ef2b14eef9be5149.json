{"sha": "c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTFhMGQzNDAwYmJiY2FjMTk0ZWZiNmVmMmIxNGVlZjliZTUxNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T10:04:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-26T10:04:42Z"}, "message": "Auto merge of #53824 - ljedrz:begone_onevector, r=michaelwoerister\n\nRemove OneVector, increase related SmallVec capacities\n\nRemoves the `OneVector` type alias (equivalent to `SmallVec<[T; 1]>`); it is used in scenarios where the capacity of 1 is often exceeded, which might be nullifying the performance wins (due to spilling to the heap) expected when using `SmallVec` instead of `Vec`.\n\nThe numbers I used in this PR are very rough estimates - it would probably be a good idea to adjust some/all of them, which is what this proposal is all about.\n\nIt might be a good idea to additionally create some local type aliases for the `SmallVec`s in the `Folder` trait, as they are repeated in quite a few spots; I'd be happy to apply this sort of adjustments.", "tree": {"sha": "0a75f20d6c5a9def5008fd24194e83946f9ac9db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a75f20d6c5a9def5008fd24194e83946f9ac9db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "html_url": "https://github.com/rust-lang/rust/commit/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b27c19dad8b90063b56eff7b6433ba3f390d96", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b27c19dad8b90063b56eff7b6433ba3f390d96", "html_url": "https://github.com/rust-lang/rust/commit/a2b27c19dad8b90063b56eff7b6433ba3f390d96"}, {"sha": "130a32fa7259d348dc3a684b38e688da398c30bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/130a32fa7259d348dc3a684b38e688da398c30bb", "html_url": "https://github.com/rust-lang/rust/commit/130a32fa7259d348dc3a684b38e688da398c30bb"}], "stats": {"total": 311, "additions": 134, "deletions": 177}, "files": [{"sha": "40a5ea6b12bf0fc226204bfa3b9285a754b7771f", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -2177,6 +2177,7 @@ dependencies = [\n  \"rustc_typeck 0.0.0\",\n  \"scoped-tls 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n+ \"smallvec 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syntax 0.0.0\",\n  \"syntax_ext 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "aa1bd6dd59ccf0e28d1ec9d7755b5ed576cb9195", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -52,7 +52,6 @@ use lint::builtin::{self, PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n use middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_data_structures::small_vec::OneVector;\n use rustc_data_structures::thin_vec::ThinVec;\n use session::Session;\n use util::common::FN_OUTPUT_NAME;\n@@ -62,6 +61,7 @@ use std::collections::BTreeMap;\n use std::fmt::Debug;\n use std::iter;\n use std::mem;\n+use smallvec::SmallVec;\n use syntax::attr;\n use syntax::ast;\n use syntax::ast::*;\n@@ -307,7 +307,7 @@ enum AnonymousLifetimeMode {\n     PassThrough,\n }\n \n-struct ImplTraitTypeIdVisitor<'a> { ids: &'a mut OneVector<hir::ItemId> }\n+struct ImplTraitTypeIdVisitor<'a> { ids: &'a mut SmallVec<[hir::ItemId; 1]> }\n \n impl<'a, 'b> Visitor<'a> for ImplTraitTypeIdVisitor<'b> {\n     fn visit_ty(&mut self, ty: &'a Ty) {\n@@ -1901,9 +1901,9 @@ impl<'a> LoweringContext<'a> {\n         )\n     }\n \n-    fn lower_local(&mut self, l: &Local) -> (P<hir::Local>, OneVector<hir::ItemId>) {\n+    fn lower_local(&mut self, l: &Local) -> (P<hir::Local>, SmallVec<[hir::ItemId; 1]>) {\n         let LoweredNodeId { node_id, hir_id } = self.lower_node_id(l.id);\n-        let mut ids = OneVector::<hir::ItemId>::new();\n+        let mut ids = SmallVec::<[hir::ItemId; 1]>::new();\n         if self.sess.features_untracked().impl_trait_in_bindings {\n             if let Some(ref ty) = l.ty {\n                 let mut visitor = ImplTraitTypeIdVisitor { ids: &mut ids };\n@@ -3211,7 +3211,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         decl: &FnDecl,\n         header: &FnHeader,\n-        ids: &mut OneVector<hir::ItemId>,\n+        ids: &mut SmallVec<[hir::ItemId; 1]>,\n     ) {\n         if let Some(id) = header.asyncness.opt_return_id() {\n             ids.push(hir::ItemId { id });\n@@ -3223,14 +3223,14 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_item_id(&mut self, i: &Item) -> OneVector<hir::ItemId> {\n+    fn lower_item_id(&mut self, i: &Item) -> SmallVec<[hir::ItemId; 1]> {\n         match i.node {\n             ItemKind::Use(ref use_tree) => {\n                 let mut vec = smallvec![hir::ItemId { id: i.id }];\n                 self.lower_item_id_use_tree(use_tree, i.id, &mut vec);\n                 vec\n             }\n-            ItemKind::MacroDef(..) => OneVector::new(),\n+            ItemKind::MacroDef(..) => SmallVec::new(),\n             ItemKind::Fn(ref decl, ref header, ..) => {\n                 let mut ids = smallvec![hir::ItemId { id: i.id }];\n                 self.lower_fn_impl_trait_ids(decl, header, &mut ids);\n@@ -3268,7 +3268,7 @@ impl<'a> LoweringContext<'a> {\n     fn lower_item_id_use_tree(&mut self,\n                               tree: &UseTree,\n                               base_id: NodeId,\n-                              vec: &mut OneVector<hir::ItemId>)\n+                              vec: &mut SmallVec<[hir::ItemId; 1]>)\n     {\n         match tree.kind {\n             UseTreeKind::Nested(ref nested_vec) => for &(ref nested, id) in nested_vec {\n@@ -4369,11 +4369,11 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    fn lower_stmt(&mut self, s: &Stmt) -> OneVector<hir::Stmt> {\n+    fn lower_stmt(&mut self, s: &Stmt) -> SmallVec<[hir::Stmt; 1]> {\n         smallvec![match s.node {\n             StmtKind::Local(ref l) => {\n                 let (l, item_ids) = self.lower_local(l);\n-                let mut ids: OneVector<hir::Stmt> = item_ids\n+                let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n                     .map(|item_id| Spanned {\n                         node: hir::StmtKind::Decl("}, {"sha": "5df68d49af5f7ae4009883687a86f8625175f9ed", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use rustc::middle::allocator::AllocatorKind;\n-use rustc_data_structures::small_vec::OneVector;\n use rustc_errors;\n+use smallvec::SmallVec;\n use syntax::{\n     ast::{\n         self, Arg, Attribute, Crate, Expr, FnHeader, Generics, Ident, Item, ItemKind,\n@@ -65,7 +65,7 @@ struct ExpandAllocatorDirectives<'a> {\n }\n \n impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n-    fn fold_item(&mut self, item: P<Item>) -> OneVector<P<Item>> {\n+    fn fold_item(&mut self, item: P<Item>) -> SmallVec<[P<Item>; 1]> {\n         debug!(\"in submodule {}\", self.in_submod);\n \n         let name = if attr::contains_name(&item.attrs, \"global_allocator\") {\n@@ -152,11 +152,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n         let module = f.cx.monotonic_expander().fold_item(module).pop().unwrap();\n \n         // Return the item and new submodule\n-        let mut ret = OneVector::with_capacity(2);\n-        ret.push(item);\n-        ret.push(module);\n-\n-        return ret;\n+        smallvec![item, module]\n     }\n \n     // If we enter a submodule, take note."}, {"sha": "43ab38698062615005d81f381667c100c379a0fe", "filename": "src/librustc_data_structures/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_data_structures%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_data_structures%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Flib.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -50,7 +50,6 @@ extern crate rustc_rayon as rayon;\n extern crate rustc_rayon_core as rayon_core;\n extern crate rustc_hash;\n extern crate serialize;\n-#[cfg_attr(test, macro_use)]\n extern crate smallvec;\n \n // See librustc_cratesio_shim/Cargo.toml for a comment explaining this.\n@@ -72,7 +71,6 @@ pub mod owning_ref;\n pub mod ptr_key;\n pub mod sip128;\n pub mod small_c_str;\n-pub mod small_vec;\n pub mod snapshot_map;\n pub use ena::snapshot_vec;\n pub mod sorted_map;"}, {"sha": "075b70c6426fb8407d4e00a3fd5835bf1a8bada7", "filename": "src/librustc_data_structures/small_vec.rs", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a2b27c19dad8b90063b56eff7b6433ba3f390d96/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b27c19dad8b90063b56eff7b6433ba3f390d96/src%2Flibrustc_data_structures%2Fsmall_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsmall_vec.rs?ref=a2b27c19dad8b90063b56eff7b6433ba3f390d96", "patch": "@@ -1,55 +0,0 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! A vector type intended to be used for small vectors.\n-//!\n-//! Space for up to N elements is provided on the stack. If more elements are collected, Vec is\n-//! used to store the values on the heap.\n-//!\n-//! The N above is determined by Array's implementor, by way of an associated constant.\n-\n-use smallvec::{Array, SmallVec};\n-\n-pub type OneVector<T> = SmallVec<[T; 1]>;\n-\n-pub trait ExpectOne<A: Array> {\n-    fn expect_one(self, err: &'static str) -> A::Item;\n-}\n-\n-impl<A: Array> ExpectOne<A> for SmallVec<A> {\n-    fn expect_one(self, err: &'static str) -> A::Item {\n-        assert!(self.len() == 1, err);\n-        self.into_iter().next().unwrap()\n-    }\n-}\n-\n-#[cfg(test)]\n-mod tests {\n-    extern crate test;\n-    use super::*;\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_expect_one_zero() {\n-        let _: isize = OneVector::new().expect_one(\"\");\n-    }\n-\n-    #[test]\n-    #[should_panic]\n-    fn test_expect_one_many() {\n-        OneVector::from_vec(vec![1, 2]).expect_one(\"\");\n-    }\n-\n-    #[test]\n-    fn test_expect_one_one() {\n-        assert_eq!(1, (smallvec![1] as OneVector<_>).expect_one(\"\"));\n-        assert_eq!(1, OneVector::from_vec(vec![1]).expect_one(\"\"));\n-    }\n-}"}, {"sha": "470c8b03d0bca212282d8bc9c4185eb58418f5e7", "filename": "src/librustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2FCargo.toml?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -35,5 +35,6 @@ rustc_codegen_utils = { path = \"../librustc_codegen_utils\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n serialize = { path = \"../libserialize\" }\n syntax = { path = \"../libsyntax\" }\n+smallvec = { version = \"0.6.5\", features = [\"union\"] }\n syntax_ext = { path = \"../libsyntax_ext\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "f8ca154d168bab2480d25f134a93d3f03d5589e8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -58,6 +58,7 @@ extern crate rustc_codegen_utils;\n extern crate rustc_typeck;\n extern crate scoped_tls;\n extern crate serialize;\n+extern crate smallvec;\n #[macro_use]\n extern crate log;\n extern crate syntax;"}, {"sha": "7e395f1e9a92f3ac3f7246c820463f6992bd53ff", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -24,7 +24,6 @@ use rustc::session::Session;\n use rustc::session::config::{Input, OutputFilenames};\n use rustc_borrowck as borrowck;\n use rustc_borrowck::graphviz as borrowck_dot;\n-use rustc_data_structures::small_vec::OneVector;\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_metadata::cstore::CStore;\n \n@@ -38,6 +37,7 @@ use syntax::ptr::P;\n use syntax_pos::{self, FileName};\n \n use graphviz as dot;\n+use smallvec::SmallVec;\n \n use std::cell::Cell;\n use std::fs::File;\n@@ -727,7 +727,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n         self.run(is_const, |s| fold::noop_fold_item_kind(i, s))\n     }\n \n-    fn fold_trait_item(&mut self, i: ast::TraitItem) -> OneVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, i: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let is_const = match i.node {\n             ast::TraitItemKind::Const(..) => true,\n             ast::TraitItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>\n@@ -737,7 +737,7 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n         self.run(is_const, |s| fold::noop_fold_trait_item(i, s))\n     }\n \n-    fn fold_impl_item(&mut self, i: ast::ImplItem) -> OneVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, i: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let is_const = match i.node {\n             ast::ImplItemKind::Const(..) => true,\n             ast::ImplItemKind::Method(ast::MethodSig { ref decl, ref header, .. }, _) =>"}, {"sha": "ed79ff62f176cc0332f8de99b606e2af10bc5eec", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -42,7 +42,6 @@ use errors::Applicability;\n use std::cell::Cell;\n use std::mem;\n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::small_vec::ExpectOne;\n \n #[derive(Clone, Copy)]\n crate struct FromPrelude(bool);\n@@ -190,7 +189,9 @@ impl<'a, 'crateloader: 'a> base::Resolver for Resolver<'a, 'crateloader> {\n             }\n         }\n \n-        EliminateCrateVar(self, item.span).fold_item(item).expect_one(\"\")\n+        let ret = EliminateCrateVar(self, item.span).fold_item(item);\n+        assert!(ret.len() == 1);\n+        ret.into_iter().next().unwrap()\n     }\n \n     fn is_whitelisted_legacy_custom_derive(&self, name: Name) -> bool {"}, {"sha": "3d9f4a92f818a3faeed4dfcf198be04838436afc", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -15,7 +15,7 @@ use ast;\n use source_map::Spanned;\n use edition::Edition;\n use parse::{token, ParseSess};\n-use OneVector;\n+use smallvec::SmallVec;\n use errors::Applicability;\n \n use ptr::P;\n@@ -338,22 +338,23 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n         Some(P(fold::noop_fold_expr(expr, self)))\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n         match self.configure_stmt(stmt) {\n             Some(stmt) => fold::noop_fold_stmt(stmt, self),\n-            None => return OneVector::new(),\n+            None => return SmallVec::new(),\n         }\n     }\n \n-    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         fold::noop_fold_item(configure!(self, item), self)\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]>\n+    {\n         fold::noop_fold_impl_item(configure!(self, item), self)\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         fold::noop_fold_trait_item(configure!(self, item), self)\n     }\n "}, {"sha": "1229db9b0e03819539ddf48130a5e3cb96233521", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -19,7 +19,6 @@ use ext::base::{ExtCtxt, MacEager, MacResult};\n use ext::build::AstBuilder;\n use parse::token;\n use ptr::P;\n-use OneVector;\n use symbol::{keywords, Symbol};\n use tokenstream::{TokenTree};\n \n@@ -131,15 +130,15 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt,\n     let sym = Ident::with_empty_ctxt(Symbol::gensym(&format!(\n         \"__register_diagnostic_{}\", code\n     )));\n-    MacEager::items(OneVector::from_vec(vec![\n+    MacEager::items(smallvec![\n         ecx.item_mod(\n             span,\n             span,\n             sym,\n             Vec::new(),\n             Vec::new()\n         )\n-    ]))\n+    ])\n }\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n@@ -214,7 +213,7 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n         ),\n     );\n \n-    MacEager::items(OneVector::from_vec(vec![\n+    MacEager::items(smallvec![\n         P(ast::Item {\n             ident: *name,\n             attrs: Vec::new(),\n@@ -227,5 +226,5 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             span,\n             tokens: None,\n         })\n-    ]))\n+    ])\n }"}, {"sha": "5bf1a7dd663cc228a0f556bc9e80fbac41d9b28f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -22,7 +22,7 @@ use fold::{self, Folder};\n use parse::{self, parser, DirectoryOwnership};\n use parse::token;\n use ptr::P;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::{keywords, Ident, Symbol};\n use ThinVec;\n \n@@ -332,22 +332,22 @@ pub trait MacResult {\n         None\n     }\n     /// Create zero or more items.\n-    fn make_items(self: Box<Self>) -> Option<OneVector<P<ast::Item>>> {\n+    fn make_items(self: Box<Self>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n         None\n     }\n \n     /// Create zero or more impl items.\n-    fn make_impl_items(self: Box<Self>) -> Option<OneVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n         None\n     }\n \n     /// Create zero or more trait items.\n-    fn make_trait_items(self: Box<Self>) -> Option<OneVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n         None\n     }\n \n     /// Create zero or more items in an `extern {}` block\n-    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> { None }\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> { None }\n \n     /// Create a pattern.\n     fn make_pat(self: Box<Self>) -> Option<P<ast::Pat>> {\n@@ -358,7 +358,7 @@ pub trait MacResult {\n     ///\n     /// By default this attempts to create an expression statement,\n     /// returning None if that fails.\n-    fn make_stmts(self: Box<Self>) -> Option<OneVector<ast::Stmt>> {\n+    fn make_stmts(self: Box<Self>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         make_stmts_default!(self)\n     }\n \n@@ -394,11 +394,11 @@ macro_rules! make_MacEager {\n make_MacEager! {\n     expr: P<ast::Expr>,\n     pat: P<ast::Pat>,\n-    items: OneVector<P<ast::Item>>,\n-    impl_items: OneVector<ast::ImplItem>,\n-    trait_items: OneVector<ast::TraitItem>,\n-    foreign_items: OneVector<ast::ForeignItem>,\n-    stmts: OneVector<ast::Stmt>,\n+    items: SmallVec<[P<ast::Item>; 1]>,\n+    impl_items: SmallVec<[ast::ImplItem; 1]>,\n+    trait_items: SmallVec<[ast::TraitItem; 1]>,\n+    foreign_items: SmallVec<[ast::ForeignItem; 1]>,\n+    stmts: SmallVec<[ast::Stmt; 1]>,\n     ty: P<ast::Ty>,\n }\n \n@@ -407,23 +407,23 @@ impl MacResult for MacEager {\n         self.expr\n     }\n \n-    fn make_items(self: Box<Self>) -> Option<OneVector<P<ast::Item>>> {\n+    fn make_items(self: Box<Self>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n         self.items\n     }\n \n-    fn make_impl_items(self: Box<Self>) -> Option<OneVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<Self>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n         self.impl_items\n     }\n \n-    fn make_trait_items(self: Box<Self>) -> Option<OneVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<Self>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n         self.trait_items\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n         self.foreign_items\n     }\n \n-    fn make_stmts(self: Box<Self>) -> Option<OneVector<ast::Stmt>> {\n+    fn make_stmts(self: Box<Self>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         match self.stmts.as_ref().map_or(0, |s| s.len()) {\n             0 => make_stmts_default!(self),\n             _ => self.stmts,\n@@ -514,40 +514,40 @@ impl MacResult for DummyResult {\n         Some(P(DummyResult::raw_pat(self.span)))\n     }\n \n-    fn make_items(self: Box<DummyResult>) -> Option<OneVector<P<ast::Item>>> {\n+    fn make_items(self: Box<DummyResult>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n         // this code needs a comment... why not always just return the Some() ?\n         if self.expr_only {\n             None\n         } else {\n-            Some(OneVector::new())\n+            Some(SmallVec::new())\n         }\n     }\n \n-    fn make_impl_items(self: Box<DummyResult>) -> Option<OneVector<ast::ImplItem>> {\n+    fn make_impl_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::ImplItem; 1]>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(OneVector::new())\n+            Some(SmallVec::new())\n         }\n     }\n \n-    fn make_trait_items(self: Box<DummyResult>) -> Option<OneVector<ast::TraitItem>> {\n+    fn make_trait_items(self: Box<DummyResult>) -> Option<SmallVec<[ast::TraitItem; 1]>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(OneVector::new())\n+            Some(SmallVec::new())\n         }\n     }\n \n-    fn make_foreign_items(self: Box<Self>) -> Option<OneVector<ast::ForeignItem>> {\n+    fn make_foreign_items(self: Box<Self>) -> Option<SmallVec<[ast::ForeignItem; 1]>> {\n         if self.expr_only {\n             None\n         } else {\n-            Some(OneVector::new())\n+            Some(SmallVec::new())\n         }\n     }\n \n-    fn make_stmts(self: Box<DummyResult>) -> Option<OneVector<ast::Stmt>> {\n+    fn make_stmts(self: Box<DummyResult>) -> Option<SmallVec<[ast::Stmt; 1]>> {\n         Some(smallvec![ast::Stmt {\n             id: ast::DUMMY_NODE_ID,\n             node: ast::StmtKind::Expr(DummyResult::raw_expr(self.span)),"}, {"sha": "87c53d16875433244f7b2afb22ba605441c7707f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -25,7 +25,7 @@ use parse::{DirectoryOwnership, PResult, ParseSess};\n use parse::token::{self, Token};\n use parse::parser::Parser;\n use ptr::P;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::Symbol;\n use symbol::keywords;\n use syntax_pos::{Span, DUMMY_SP, FileName};\n@@ -147,15 +147,19 @@ ast_fragments! {\n     Expr(P<ast::Expr>) { \"expression\"; one fn fold_expr; fn visit_expr; fn make_expr; }\n     Pat(P<ast::Pat>) { \"pattern\"; one fn fold_pat; fn visit_pat; fn make_pat; }\n     Ty(P<ast::Ty>) { \"type\"; one fn fold_ty; fn visit_ty; fn make_ty; }\n-    Stmts(OneVector<ast::Stmt>) { \"statement\"; many fn fold_stmt; fn visit_stmt; fn make_stmts; }\n-    Items(OneVector<P<ast::Item>>) { \"item\"; many fn fold_item; fn visit_item; fn make_items; }\n-    TraitItems(OneVector<ast::TraitItem>) {\n+    Stmts(SmallVec<[ast::Stmt; 1]>) {\n+        \"statement\"; many fn fold_stmt; fn visit_stmt; fn make_stmts;\n+    }\n+    Items(SmallVec<[P<ast::Item>; 1]>) {\n+        \"item\"; many fn fold_item; fn visit_item; fn make_items;\n+    }\n+    TraitItems(SmallVec<[ast::TraitItem; 1]>) {\n         \"trait item\"; many fn fold_trait_item; fn visit_trait_item; fn make_trait_items;\n     }\n-    ImplItems(OneVector<ast::ImplItem>) {\n+    ImplItems(SmallVec<[ast::ImplItem; 1]>) {\n         \"impl item\"; many fn fold_impl_item; fn visit_impl_item; fn make_impl_items;\n     }\n-    ForeignItems(OneVector<ast::ForeignItem>) {\n+    ForeignItems(SmallVec<[ast::ForeignItem; 1]>) {\n         \"foreign item\"; many fn fold_foreign_item; fn visit_foreign_item; fn make_foreign_items;\n     }\n }\n@@ -980,28 +984,28 @@ impl<'a> Parser<'a> {\n                               -> PResult<'a, AstFragment> {\n         Ok(match kind {\n             AstFragmentKind::Items => {\n-                let mut items = OneVector::new();\n+                let mut items = SmallVec::new();\n                 while let Some(item) = self.parse_item()? {\n                     items.push(item);\n                 }\n                 AstFragment::Items(items)\n             }\n             AstFragmentKind::TraitItems => {\n-                let mut items = OneVector::new();\n+                let mut items = SmallVec::new();\n                 while self.token != token::Eof {\n                     items.push(self.parse_trait_item(&mut false)?);\n                 }\n                 AstFragment::TraitItems(items)\n             }\n             AstFragmentKind::ImplItems => {\n-                let mut items = OneVector::new();\n+                let mut items = SmallVec::new();\n                 while self.token != token::Eof {\n                     items.push(self.parse_impl_item(&mut false)?);\n                 }\n                 AstFragment::ImplItems(items)\n             }\n             AstFragmentKind::ForeignItems => {\n-                let mut items = OneVector::new();\n+                let mut items = SmallVec::new();\n                 while self.token != token::Eof {\n                     if let Some(item) = self.parse_foreign_item()? {\n                         items.push(item);\n@@ -1010,7 +1014,7 @@ impl<'a> Parser<'a> {\n                 AstFragment::ForeignItems(items)\n             }\n             AstFragmentKind::Stmts => {\n-                let mut stmts = OneVector::new();\n+                let mut stmts = SmallVec::new();\n                 while self.token != token::Eof &&\n                       // won't make progress on a `}`\n                       self.token != token::CloseDelim(token::Brace) {\n@@ -1245,10 +1249,10 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         })\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n         let mut stmt = match self.cfg.configure_stmt(stmt) {\n             Some(stmt) => stmt,\n-            None => return OneVector::new(),\n+            None => return SmallVec::new(),\n         };\n \n         // we'll expand attributes on expressions separately\n@@ -1303,7 +1307,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         result\n     }\n \n-    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         let item = configure!(self, item);\n \n         let (attr, traits, item, together_with) = self.classify_item(item);\n@@ -1378,7 +1382,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         let item = configure!(self, item);\n \n         let (attr, traits, item, together_with) = self.classify_item(item);\n@@ -1397,7 +1401,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         let item = configure!(self, item);\n \n         let (attr, traits, item, together_with) = self.classify_item(item);\n@@ -1432,8 +1436,9 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         noop_fold_foreign_mod(self.cfg.configure_foreign_mod(foreign_mod), self)\n     }\n \n-    fn fold_foreign_item(&mut self,\n-                         foreign_item: ast::ForeignItem) -> OneVector<ast::ForeignItem> {\n+    fn fold_foreign_item(&mut self, foreign_item: ast::ForeignItem)\n+        -> SmallVec<[ast::ForeignItem; 1]>\n+    {\n         let (attr, traits, foreign_item, together_with) = self.classify_item(foreign_item);\n \n         if attr.is_some() || !traits.is_empty() {"}, {"sha": "7f31b04ef9c3c22832ed9b09602f84e5ac2550db", "filename": "src/libsyntax/ext/placeholders.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fplaceholders.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -16,7 +16,7 @@ use ext::hygiene::Mark;\n use tokenstream::TokenStream;\n use fold::*;\n use ptr::P;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::keywords;\n use ThinVec;\n use util::move_map::MoveMap;\n@@ -115,7 +115,7 @@ impl<'a, 'b> PlaceholderExpander<'a, 'b> {\n }\n \n impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n-    fn fold_item(&mut self, item: P<ast::Item>) -> OneVector<P<ast::Item>> {\n+    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         match item.node {\n             ast::ItemKind::Mac(_) => return self.remove(item.id).make_items(),\n             ast::ItemKind::MacroDef(_) => return smallvec![item],\n@@ -125,21 +125,21 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n         noop_fold_item(item, self)\n     }\n \n-    fn fold_trait_item(&mut self, item: ast::TraitItem) -> OneVector<ast::TraitItem> {\n+    fn fold_trait_item(&mut self, item: ast::TraitItem) -> SmallVec<[ast::TraitItem; 1]> {\n         match item.node {\n             ast::TraitItemKind::Macro(_) => self.remove(item.id).make_trait_items(),\n             _ => noop_fold_trait_item(item, self),\n         }\n     }\n \n-    fn fold_impl_item(&mut self, item: ast::ImplItem) -> OneVector<ast::ImplItem> {\n+    fn fold_impl_item(&mut self, item: ast::ImplItem) -> SmallVec<[ast::ImplItem; 1]> {\n         match item.node {\n             ast::ImplItemKind::Macro(_) => self.remove(item.id).make_impl_items(),\n             _ => noop_fold_impl_item(item, self),\n         }\n     }\n \n-    fn fold_foreign_item(&mut self, item: ast::ForeignItem) -> OneVector<ast::ForeignItem> {\n+    fn fold_foreign_item(&mut self, item: ast::ForeignItem) -> SmallVec<[ast::ForeignItem; 1]> {\n         match item.node {\n             ast::ForeignItemKind::Macro(_) => self.remove(item.id).make_foreign_items(),\n             _ => noop_fold_foreign_item(item, self),\n@@ -160,7 +160,7 @@ impl<'a, 'b> Folder for PlaceholderExpander<'a, 'b> {\n         }\n     }\n \n-    fn fold_stmt(&mut self, stmt: ast::Stmt) -> OneVector<ast::Stmt> {\n+    fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVec<[ast::Stmt; 1]> {\n         let (style, mut stmts) = match stmt.node {\n             ast::StmtKind::Mac(mac) => (mac.1, self.remove(stmt.id).make_stmts()),\n             _ => return noop_fold_stmt(stmt, self),"}, {"sha": "f5d1bd6255e2abe6d1800f59cd35254398c65a7b", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -17,7 +17,7 @@ use parse::{token, DirectoryOwnership};\n use parse;\n use print::pprust;\n use ptr::P;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::Symbol;\n use tokenstream;\n \n@@ -110,9 +110,9 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[tokenstream::T\n         fn make_expr(mut self: Box<ExpandResult<'a>>) -> Option<P<ast::Expr>> {\n             Some(panictry!(self.p.parse_expr()))\n         }\n-        fn make_items(mut self: Box<ExpandResult<'a>>)\n-                      -> Option<OneVector<P<ast::Item>>> {\n-            let mut ret = OneVector::new();\n+\n+        fn make_items(mut self: Box<ExpandResult<'a>>) -> Option<SmallVec<[P<ast::Item>; 1]>> {\n+            let mut ret = SmallVec::new();\n             while self.p.token != token::Eof {\n                 match panictry!(self.p.parse_item()) {\n                     Some(item) => ret.push(item),"}, {"sha": "03a8376e7636138ce00524d8618fa8d500616153", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -92,7 +92,7 @@ use parse::{Directory, ParseSess};\n use parse::parser::{Parser, PathStyle};\n use parse::token::{self, DocComment, Nonterminal, Token};\n use print::pprust;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::keywords;\n use tokenstream::{DelimSpan, TokenStream};\n \n@@ -440,10 +440,10 @@ fn token_name_eq(t1: &Token, t2: &Token) -> bool {\n /// A `ParseResult`. Note that matches are kept track of through the items generated.\n fn inner_parse_loop<'a>(\n     sess: &ParseSess,\n-    cur_items: &mut OneVector<MatcherPosHandle<'a>>,\n+    cur_items: &mut SmallVec<[MatcherPosHandle<'a>; 1]>,\n     next_items: &mut Vec<MatcherPosHandle<'a>>,\n-    eof_items: &mut OneVector<MatcherPosHandle<'a>>,\n-    bb_items: &mut OneVector<MatcherPosHandle<'a>>,\n+    eof_items: &mut SmallVec<[MatcherPosHandle<'a>; 1]>,\n+    bb_items: &mut SmallVec<[MatcherPosHandle<'a>; 1]>,\n     token: &Token,\n     span: syntax_pos::Span,\n ) -> ParseResult<()> {\n@@ -649,10 +649,10 @@ pub fn parse(\n \n     loop {\n         // Matcher positions black-box parsed by parser.rs (`parser`)\n-        let mut bb_items = OneVector::new();\n+        let mut bb_items = SmallVec::new();\n \n         // Matcher positions that would be valid if the macro invocation was over now\n-        let mut eof_items = OneVector::new();\n+        let mut eof_items = SmallVec::new();\n         assert!(next_items.is_empty());\n \n         // Process `cur_items` until either we have finished the input or we need to get some"}, {"sha": "ae486158fee69a6a54a446db686c190a1d977e71", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -15,7 +15,7 @@ use ext::tt::macro_parser::{NamedMatch, MatchedSeq, MatchedNonterminal};\n use ext::tt::quoted;\n use fold::noop_fold_tt;\n use parse::token::{self, Token, NtTT};\n-use OneVector;\n+use smallvec::SmallVec;\n use syntax_pos::DUMMY_SP;\n use tokenstream::{TokenStream, TokenTree, Delimited, DelimSpan};\n \n@@ -70,7 +70,7 @@ pub fn transcribe(cx: &ExtCtxt,\n                   interp: Option<FxHashMap<Ident, Rc<NamedMatch>>>,\n                   src: Vec<quoted::TokenTree>)\n                   -> TokenStream {\n-    let mut stack: OneVector<Frame> = smallvec![Frame::new(src)];\n+    let mut stack: SmallVec<[Frame; 1]> = smallvec![Frame::new(src)];\n     let interpolations = interp.unwrap_or_else(FxHashMap::default); /* just a convenience */\n     let mut repeats = Vec::new();\n     let mut result: Vec<TokenStream> = Vec::new();"}, {"sha": "3e422f5af81a731f9d0525527798f7cde539ab21", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -24,14 +24,24 @@ use syntax_pos::Span;\n use source_map::{Spanned, respan};\n use parse::token::{self, Token};\n use ptr::P;\n-use OneVector;\n+use smallvec::{Array, SmallVec};\n use symbol::keywords;\n use ThinVec;\n use tokenstream::*;\n use util::move_map::MoveMap;\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_data_structures::small_vec::ExpectOne;\n+\n+pub trait ExpectOne<A: Array> {\n+    fn expect_one(self, err: &'static str) -> A::Item;\n+}\n+\n+impl<A: Array> ExpectOne<A> for SmallVec<A> {\n+    fn expect_one(self, err: &'static str) -> A::Item {\n+        assert!(self.len() == 1, err);\n+        self.into_iter().next().unwrap()\n+    }\n+}\n \n pub trait Folder : Sized {\n     // Any additions to this trait should happen in form\n@@ -62,15 +72,15 @@ pub trait Folder : Sized {\n         noop_fold_use_tree(use_tree, self)\n     }\n \n-    fn fold_foreign_item(&mut self, ni: ForeignItem) -> OneVector<ForeignItem> {\n+    fn fold_foreign_item(&mut self, ni: ForeignItem) -> SmallVec<[ForeignItem; 1]> {\n         noop_fold_foreign_item(ni, self)\n     }\n \n     fn fold_foreign_item_simple(&mut self, ni: ForeignItem) -> ForeignItem {\n         noop_fold_foreign_item_simple(ni, self)\n     }\n \n-    fn fold_item(&mut self, i: P<Item>) -> OneVector<P<Item>> {\n+    fn fold_item(&mut self, i: P<Item>) -> SmallVec<[P<Item>; 1]> {\n         noop_fold_item(i, self)\n     }\n \n@@ -90,11 +100,11 @@ pub trait Folder : Sized {\n         noop_fold_item_kind(i, self)\n     }\n \n-    fn fold_trait_item(&mut self, i: TraitItem) -> OneVector<TraitItem> {\n+    fn fold_trait_item(&mut self, i: TraitItem) -> SmallVec<[TraitItem; 1]> {\n         noop_fold_trait_item(i, self)\n     }\n \n-    fn fold_impl_item(&mut self, i: ImplItem) -> OneVector<ImplItem> {\n+    fn fold_impl_item(&mut self, i: ImplItem) -> SmallVec<[ImplItem; 1]> {\n         noop_fold_impl_item(i, self)\n     }\n \n@@ -110,7 +120,7 @@ pub trait Folder : Sized {\n         noop_fold_block(b, self)\n     }\n \n-    fn fold_stmt(&mut self, s: Stmt) -> OneVector<Stmt> {\n+    fn fold_stmt(&mut self, s: Stmt) -> SmallVec<[Stmt; 1]> {\n         noop_fold_stmt(s, self)\n     }\n \n@@ -974,8 +984,7 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n     }\n }\n \n-pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n-                                       -> OneVector<TraitItem> {\n+pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T) -> SmallVec<[TraitItem; 1]> {\n     smallvec![TraitItem {\n         id: folder.new_id(i.id),\n         ident: folder.fold_ident(i.ident),\n@@ -1003,8 +1012,7 @@ pub fn noop_fold_trait_item<T: Folder>(i: TraitItem, folder: &mut T)\n     }]\n }\n \n-pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)\n-                                      -> OneVector<ImplItem> {\n+pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T)-> SmallVec<[ImplItem; 1]> {\n     smallvec![ImplItem {\n         id: folder.new_id(i.id),\n         vis: folder.fold_vis(i.vis),\n@@ -1080,7 +1088,7 @@ pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, span}: Crate,\n }\n \n // fold one item into possibly many items\n-pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> OneVector<P<Item>> {\n+pub fn noop_fold_item<T: Folder>(i: P<Item>, folder: &mut T) -> SmallVec<[P<Item>; 1]> {\n     smallvec![i.map(|i| folder.fold_item_simple(i))]\n }\n \n@@ -1102,7 +1110,8 @@ pub fn noop_fold_item_simple<T: Folder>(Item {id, ident, attrs, node, vis, span,\n }\n \n pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T)\n--> OneVector<ForeignItem> {\n+    -> SmallVec<[ForeignItem; 1]>\n+{\n     smallvec![folder.fold_foreign_item_simple(ni)]\n }\n \n@@ -1381,15 +1390,16 @@ pub fn noop_fold_exprs<T: Folder>(es: Vec<P<Expr>>, folder: &mut T) -> Vec<P<Exp\n     es.move_flat_map(|e| folder.fold_opt_expr(e))\n }\n \n-pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) -> OneVector<Stmt> {\n+pub fn noop_fold_stmt<T: Folder>(Stmt {node, span, id}: Stmt, folder: &mut T) -> SmallVec<[Stmt; 1]>\n+{\n     let id = folder.new_id(id);\n     let span = folder.new_span(span);\n     noop_fold_stmt_kind(node, folder).into_iter().map(|node| {\n         Stmt { id: id, node: node, span: span }\n     }).collect()\n }\n \n-pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> OneVector<StmtKind> {\n+pub fn noop_fold_stmt_kind<T: Folder>(node: StmtKind, folder: &mut T) -> SmallVec<[StmtKind; 1]> {\n     match node {\n         StmtKind::Local(local) => smallvec![StmtKind::Local(folder.fold_local(local))],\n         StmtKind::Item(item) => folder.fold_item(item).into_iter().map(StmtKind::Item).collect(),"}, {"sha": "a1b031a655f8577988016d249d4c967aac0e242b", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -47,7 +47,6 @@ extern crate serialize as rustc_serialize; // used by deriving\n \n use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bit_set::GrowableBitSet;\n-pub use rustc_data_structures::small_vec::OneVector;\n pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n "}, {"sha": "744e2e4a5fdb88e9fff02938f07281906e10f087", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -33,15 +33,14 @@ use ext::hygiene::{self, Mark, SyntaxContext};\n use fold::Folder;\n use feature_gate::Features;\n use util::move_map::MoveMap;\n-use fold;\n+use fold::{self, ExpectOne};\n use parse::{token, ParseSess};\n use print::pprust;\n use ast::{self, Ident};\n use ptr::P;\n-use OneVector;\n+use smallvec::SmallVec;\n use symbol::{self, Symbol, keywords};\n use ThinVec;\n-use rustc_data_structures::small_vec::ExpectOne;\n \n struct Test {\n     span: Span,\n@@ -113,7 +112,7 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n         folded\n     }\n \n-    fn fold_item(&mut self, i: P<ast::Item>) -> OneVector<P<ast::Item>> {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         let ident = i.ident;\n         if ident.name != keywords::Invalid.name() {\n             self.cx.path.push(ident);\n@@ -171,7 +170,7 @@ struct EntryPointCleaner {\n }\n \n impl fold::Folder for EntryPointCleaner {\n-    fn fold_item(&mut self, i: P<ast::Item>) -> OneVector<P<ast::Item>> {\n+    fn fold_item(&mut self, i: P<ast::Item>) -> SmallVec<[P<ast::Item>; 1]> {\n         self.depth += 1;\n         let folded = fold::noop_fold_item(i, self).expect_one(\"noop did something\");\n         self.depth -= 1;"}, {"sha": "51cae1b5d84ac50efe0279bdbb62da8c13b80cf3", "filename": "src/libsyntax/util/move_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Futil%2Fmove_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Flibsyntax%2Futil%2Fmove_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fmove_map.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::ptr;\n-use OneVector;\n+use smallvec::{Array, SmallVec};\n \n pub trait MoveMap<T>: Sized {\n     fn move_map<F>(self, mut f: F) -> Self where F: FnMut(T) -> T {\n@@ -77,7 +77,7 @@ impl<T> MoveMap<T> for ::ptr::P<[T]> {\n     }\n }\n \n-impl<T> MoveMap<T> for OneVector<T> {\n+impl<T, A: Array<Item = T>> MoveMap<T> for SmallVec<A> {\n     fn move_flat_map<F, I>(mut self, mut f: F) -> Self\n         where F: FnMut(T) -> I,\n               I: IntoIterator<Item=T>"}, {"sha": "7b7092c7e22e3d4ac2566ced29c6b28134855321", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-16723.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a1a0d3400bbbcac194efb6ef2b14eef9be5149/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-16723.rs?ref=c3a1a0d3400bbbcac194efb6ef2b14eef9be5149", "patch": "@@ -17,9 +17,10 @@ extern crate syntax;\n extern crate rustc;\n extern crate rustc_data_structures;\n extern crate rustc_plugin;\n+#[macro_use] extern crate smallvec;\n extern crate syntax_pos;\n \n-use rustc_data_structures::small_vec::OneVector;\n+use smallvec::SmallVec;\n use syntax::ext::base::{ExtCtxt, MacResult, MacEager};\n use syntax::tokenstream;\n use rustc_plugin::Registry;\n@@ -31,8 +32,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n fn expand(cx: &mut ExtCtxt, _: syntax_pos::Span, _: &[tokenstream::TokenTree])\n           -> Box<MacResult+'static> {\n-    MacEager::items(OneVector::from_vec(vec![\n+    MacEager::items(smallvec![\n         quote_item!(cx, struct Struct1;).unwrap(),\n         quote_item!(cx, struct Struct2;).unwrap()\n-    ]))\n+    ])\n }"}]}