{"sha": "0f34568924019caf1ed63c84143c12156b963abf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzQ1Njg5MjQwMTljYWYxZWQ2M2M4NDE0M2MxMjE1NmI5NjNhYmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-01T18:50:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-05-04T16:18:30Z"}, "message": "Turn eprintln!s into debug!s", "tree": {"sha": "ce94360052412dfe59b2eb4074b5011f4b54e301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce94360052412dfe59b2eb4074b5011f4b54e301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f34568924019caf1ed63c84143c12156b963abf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f34568924019caf1ed63c84143c12156b963abf", "html_url": "https://github.com/rust-lang/rust/commit/0f34568924019caf1ed63c84143c12156b963abf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f34568924019caf1ed63c84143c12156b963abf/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7310f3f801a8dff37503dd4ed3e3e2ecbf6bac2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7310f3f801a8dff37503dd4ed3e3e2ecbf6bac2e", "html_url": "https://github.com/rust-lang/rust/commit/7310f3f801a8dff37503dd4ed3e3e2ecbf6bac2e"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "a1ed0c028206f7c2d68c92f5e6cd2e6585f16dcc", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f34568924019caf1ed63c84143c12156b963abf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f34568924019caf1ed63c84143c12156b963abf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=0f34568924019caf1ed63c84143c12156b963abf", "patch": "@@ -1,6 +1,7 @@\n //! Trait solving using Chalk.\n use std::sync::{Arc, Mutex};\n \n+use log::debug;\n use chalk_ir::cast::Cast;\n \n use crate::{Crate, Trait, db::HirDatabase, ImplBlock};\n@@ -52,7 +53,7 @@ fn solve(\n     let context = ChalkContext { db, krate };\n     let solver = db.solver(krate);\n     let solution = solver.lock().unwrap().solve(&context, goal);\n-    eprintln!(\"solve({:?}) => {:?}\", goal, solution);\n+    debug!(\"solve({:?}) => {:?}\", goal, solution);\n     solution\n }\n \n@@ -73,7 +74,7 @@ pub(crate) fn implements(\n     trait_ref: Canonical<TraitRef>,\n ) -> Option<Solution> {\n     let goal: chalk_ir::Goal = trait_ref.value.to_chalk(db).cast();\n-    eprintln!(\"goal: {:?}\", goal);\n+    debug!(\"goal: {:?}\", goal);\n     let env = chalk_ir::Environment::new();\n     let in_env = chalk_ir::InEnvironment::new(&env, goal);\n     let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);"}, {"sha": "1adc1d6014013d68d10d6bc4dce0a4ce9757a468", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0f34568924019caf1ed63c84143c12156b963abf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f34568924019caf1ed63c84143c12156b963abf/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=0f34568924019caf1ed63c84143c12156b963abf", "patch": "@@ -1,6 +1,8 @@\n //! Conversion code from/to Chalk.\n use std::sync::Arc;\n \n+use log::debug;\n+\n use chalk_ir::{TypeId, ImplId, TypeKindId, ProjectionTy, Parameter, Identifier, cast::Cast, PlaceholderIndex, UniverseIndex, TypeName};\n use chalk_rust_ir::{AssociatedTyDatum, TraitDatum, StructDatum, ImplDatum};\n \n@@ -65,6 +67,7 @@ impl ToChalk for Ty {\n     }\n }\n \n+// TODO merge this into the ToChalk implementation for Ty\n impl ToChalk for ApplicationTy {\n     type Chalk = chalk_ir::ApplicationTy;\n \n@@ -173,7 +176,7 @@ where\n         unimplemented!()\n     }\n     fn trait_datum(&self, trait_id: chalk_ir::TraitId) -> Arc<TraitDatum> {\n-        eprintln!(\"trait_datum {:?}\", trait_id);\n+        debug!(\"trait_datum {:?}\", trait_id);\n         let trait_: Trait = from_chalk(self.db, trait_id);\n         let generic_params = trait_.generic_params(self.db);\n         let bound_vars = Substs::bound_vars(&generic_params);\n@@ -191,7 +194,7 @@ where\n         Arc::new(trait_datum)\n     }\n     fn struct_datum(&self, struct_id: chalk_ir::StructId) -> Arc<StructDatum> {\n-        eprintln!(\"struct_datum {:?}\", struct_id);\n+        debug!(\"struct_datum {:?}\", struct_id);\n         let type_ctor = from_chalk(self.db, struct_id);\n         // TODO might be nicer if we can create a fake GenericParams for the TypeCtor\n         let (num_params, upstream) = match type_ctor {\n@@ -232,7 +235,7 @@ where\n         Arc::new(struct_datum)\n     }\n     fn impl_datum(&self, impl_id: ImplId) -> Arc<ImplDatum> {\n-        eprintln!(\"impl_datum {:?}\", impl_id);\n+        debug!(\"impl_datum {:?}\", impl_id);\n         let impl_block: ImplBlock = from_chalk(self.db, impl_id);\n         let generic_params = impl_block.generic_params(self.db);\n         let bound_vars = Substs::bound_vars(&generic_params);\n@@ -256,7 +259,7 @@ where\n         Arc::new(impl_datum)\n     }\n     fn impls_for_trait(&self, trait_id: chalk_ir::TraitId) -> Vec<ImplId> {\n-        eprintln!(\"impls_for_trait {:?}\", trait_id);\n+        debug!(\"impls_for_trait {:?}\", trait_id);\n         let trait_ = from_chalk(self.db, trait_id);\n         self.db\n             .impls_for_trait(self.krate, trait_)\n@@ -273,7 +276,7 @@ where\n         auto_trait_id: chalk_ir::TraitId,\n         struct_id: chalk_ir::StructId,\n     ) -> bool {\n-        eprintln!(\"impl_provided_for {:?}, {:?}\", auto_trait_id, struct_id);\n+        debug!(\"impl_provided_for {:?}, {:?}\", auto_trait_id, struct_id);\n         false // FIXME\n     }\n     fn type_name(&self, _id: TypeKindId) -> Identifier {\n@@ -283,7 +286,7 @@ where\n         &self,\n         projection: &'p ProjectionTy,\n     ) -> (Arc<AssociatedTyDatum>, &'p [Parameter], &'p [Parameter]) {\n-        eprintln!(\"split_projection {:?}\", projection);\n+        debug!(\"split_projection {:?}\", projection);\n         unimplemented!()\n     }\n }"}]}