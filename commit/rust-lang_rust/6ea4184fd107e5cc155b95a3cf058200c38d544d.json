{"sha": "6ea4184fd107e5cc155b95a3cf058200c38d544d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTQxODRmZDEwN2U1Y2MxNTViOTVhM2NmMDU4MjAwYzM4ZDU0NGQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T15:53:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-08-20T16:53:05Z"}, "message": "translate \\n -> \\r\\n on the way out", "tree": {"sha": "ca8cd031e10e64149e3fa6dc2ab0b53833b0b398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca8cd031e10e64149e3fa6dc2ab0b53833b0b398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea4184fd107e5cc155b95a3cf058200c38d544d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea4184fd107e5cc155b95a3cf058200c38d544d", "html_url": "https://github.com/rust-lang/rust/commit/6ea4184fd107e5cc155b95a3cf058200c38d544d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea4184fd107e5cc155b95a3cf058200c38d544d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80a6e614465d8b16cae50f3626c15e912ad3c6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80a6e614465d8b16cae50f3626c15e912ad3c6f2", "html_url": "https://github.com/rust-lang/rust/commit/80a6e614465d8b16cae50f3626c15e912ad3c6f2"}], "stats": {"total": 83, "additions": 50, "deletions": 33}, "files": [{"sha": "73e31f9664d1a864625ba4b0008fdefcf8008a22", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -1092,7 +1092,7 @@ dependencies = [\n  \"ra_hir 0.1.0\",\n  \"ra_ide_api 0.1.0\",\n  \"ra_project_model 0.1.0\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.6\",\n  \"ra_vfs_glob 0.1.0\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1198,7 +1198,7 @@ dependencies = [\n  \"ra_project_model 0.1.0\",\n  \"ra_syntax 0.1.0\",\n  \"ra_text_edit 0.1.0\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.6\",\n  \"ra_vfs_glob 0.1.0\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1308,7 +1308,6 @@ dependencies = [\n [[package]]\n name = \"ra_vfs\"\n version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-channel 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1324,7 +1323,7 @@ name = \"ra_vfs_glob\"\n version = \"0.1.0\"\n dependencies = [\n  \"globset 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"ra_vfs 0.2.6\",\n ]\n \n [[package]]\n@@ -2135,7 +2134,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quote 0.6.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ce23b6b870e8f94f81fb0a363d65d86675884b34a09043c81e5562f11c1f8e1\"\n \"checksum quote 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"053a8c8bcc71fcce321828dc897a98ab9760bef03a4fc36693c231e5b3216cfe\"\n \"checksum ra_rustc_lexer 0.1.0-pre.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6baccda91574dfadd7f8a0bc8f9f110f874b6b484289b2536d3dbf4f0d5d97bb\"\n-\"checksum ra_vfs 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"865bb9e0f71916f7c7527af4843a2a67d1b0789f7c91c512a6b4ded69af98249\"\n \"checksum rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca\"\n \"checksum rand 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d47eab0e83d9693d40f825f86948aa16eff6750ead4bdffc4ab95b8b3a7f052c\"\n \"checksum rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"556d3a1ca6600bfcbab7c7c91ccb085ac7fbbcd70e008a98742e7847f4f7bcef\""}, {"sha": "849a6b90cfeb0c2806326de60e603655a79405db", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -6,3 +6,4 @@ incremental = true\n debug = 1 # only line info\n \n [patch.'crates-io']\n+ra_vfs = { path = \"../ra_vfs\" }"}, {"sha": "bd1ffd8f5147eb0e3b37aa6b2ff5965f38827bd3", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -11,6 +11,7 @@ use ra_ide_api::{\n };\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n+use ra_vfs::LineEndings;\n \n use crate::{req, world::WorldSnapshot, Result};\n \n@@ -88,10 +89,10 @@ impl Conv for Severity {\n     }\n }\n \n-impl ConvWith<&'_ LineIndex> for CompletionItem {\n+impl ConvWith<(&'_ LineIndex, LineEndings)> for CompletionItem {\n     type Output = ::lsp_types::CompletionItem;\n \n-    fn conv_with(self, ctx: &LineIndex) -> ::lsp_types::CompletionItem {\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> ::lsp_types::CompletionItem {\n         let mut additional_text_edits = Vec::new();\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n@@ -202,22 +203,27 @@ impl Conv for ra_ide_api::FunctionSignature {\n     }\n }\n \n-impl ConvWith<&'_ LineIndex> for TextEdit {\n+impl ConvWith<(&'_ LineIndex, LineEndings)> for TextEdit {\n     type Output = Vec<lsp_types::TextEdit>;\n \n-    fn conv_with(self, line_index: &LineIndex) -> Vec<lsp_types::TextEdit> {\n-        self.as_atoms().iter().map_conv_with(line_index).collect()\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> Vec<lsp_types::TextEdit> {\n+        self.as_atoms().iter().map_conv_with(ctx).collect()\n     }\n }\n \n-impl ConvWith<&'_ LineIndex> for &'_ AtomTextEdit {\n+impl ConvWith<(&'_ LineIndex, LineEndings)> for &'_ AtomTextEdit {\n     type Output = lsp_types::TextEdit;\n \n-    fn conv_with(self, line_index: &LineIndex) -> lsp_types::TextEdit {\n-        lsp_types::TextEdit {\n-            range: self.delete.conv_with(line_index),\n-            new_text: self.insert.clone(),\n+    fn conv_with(\n+        self,\n+        (line_index, line_endings): (&LineIndex, LineEndings),\n+    ) -> lsp_types::TextEdit {\n+        eprintln!(\"line_endings = {:?}\", line_endings);\n+        let mut new_text = self.insert.clone();\n+        if line_endings == LineEndings::Dos {\n+            new_text = new_text.replace('\\n', \"\\r\\n\");\n         }\n+        lsp_types::TextEdit { range: self.delete.conv_with(line_index), new_text }\n     }\n }\n \n@@ -352,7 +358,9 @@ impl TryConvWith for SourceFileEdit {\n             version: None,\n         };\n         let line_index = world.analysis().file_line_index(self.file_id)?;\n-        let edits = self.edit.as_atoms().iter().map_conv_with(&line_index).collect();\n+        let line_endings = world.file_line_endings(self.file_id);\n+        let edits =\n+            self.edit.as_atoms().iter().map_conv_with((&line_index, line_endings)).collect();\n         Ok(TextDocumentEdit { text_document, edits })\n     }\n }"}, {"sha": "3a559e845d30da79336143525966e85b04227270", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -138,6 +138,7 @@ pub fn handle_on_type_formatting(\n     let _p = profile(\"handle_on_type_formatting\");\n     let mut position = params.text_document_position.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n+    let line_endings = world.file_line_endings(position.file_id);\n \n     // in `ra_ide_api`, the `on_type` invariant is that\n     // `text.char_at(position) == typed_char`.\n@@ -156,7 +157,7 @@ pub fn handle_on_type_formatting(\n     // This should be a single-file edit\n     let edit = edit.source_file_edits.pop().unwrap();\n \n-    let change: Vec<TextEdit> = edit.edit.conv_with(&line_index);\n+    let change: Vec<TextEdit> = edit.edit.conv_with((&line_index, line_endings));\n     Ok(Some(change))\n }\n \n@@ -370,8 +371,9 @@ pub fn handle_completion(\n         Some(items) => items,\n     };\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n+    let line_endings = world.file_line_endings(position.file_id);\n     let items: Vec<CompletionItem> =\n-        items.into_iter().map(|item| item.conv_with(&line_index)).collect();\n+        items.into_iter().map(|item| item.conv_with((&line_index, line_endings))).collect();\n \n     Ok(Some(items.into()))\n }"}, {"sha": "10f96812fbd2bc01ae7a2e660254c3809fafe316", "filename": "crates/ra_lsp_server/src/world.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -9,7 +9,7 @@ use parking_lot::RwLock;\n use ra_ide_api::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, LibraryData, SourceRootId,\n };\n-use ra_vfs::{RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n+use ra_vfs::{LineEndings, RootEntry, Vfs, VfsChange, VfsFile, VfsRoot};\n use ra_vfs_glob::{Glob, RustPackageFilterBuilder};\n use relative_path::RelativePathBuf;\n \n@@ -210,6 +210,10 @@ impl WorldSnapshot {\n         Ok(url)\n     }\n \n+    pub fn file_line_endings(&self, id: FileId) -> LineEndings {\n+        self.vfs.read().file_line_endings(VfsFile(id.0))\n+    }\n+\n     pub fn path_to_uri(&self, root: SourceRootId, path: &RelativePathBuf) -> Result<Url> {\n         let base = self.vfs.read().root2path(VfsRoot(root.0));\n         let path = path.to_path(base);"}, {"sha": "152681062e52180dee327f1b1398525eac90fe7d", "filename": "crates/ra_lsp_server/tests/heavy_tests/main.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fmain.rs?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -208,7 +208,7 @@ pub use std::collections::HashMap;\n                 \"range\": {\n                     \"end\": {\n                         \"character\": 0,\n-                        \"line\": 6\n+                        \"line\": 7\n                     },\n                     \"start\": {\n                         \"character\": 0,\n@@ -418,15 +418,15 @@ fn main() {{}}\n #[test]\n fn preserves_dos_line_endings() {\n     let server = Project::with_fixture(\n-        &r#\"\n+        &\"\n //- Cargo.toml\n [package]\n-name = \"foo\"\n-version = \"0.0.0\"\n+name = \\\"foo\\\"\n+version = \\\"0.0.0\\\"\n \n //- src/main.rs\n /// Some Docs\\r\\nfn main() {}\n-\"#,\n+\",\n     )\n     .server();\n "}, {"sha": "816d01f09ef3dae729c69e9f2d88c6d160ff8026", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea4184fd107e5cc155b95a3cf058200c38d544d/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=6ea4184fd107e5cc155b95a3cf058200c38d544d", "patch": "@@ -134,21 +134,25 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n             }\n         };\n     };\n+\n     let margin = fixture\n         .lines()\n         .filter(|it| it.trim_start().starts_with(\"//-\"))\n         .map(|it| it.len() - it.trim_start().len())\n         .next()\n         .expect(\"empty fixture\");\n-    let lines = fixture.lines().filter_map(|line| {\n-        if line.len() >= margin {\n-            assert!(line[..margin].trim().is_empty());\n-            Some(&line[margin..])\n-        } else {\n-            assert!(line.trim().is_empty());\n-            None\n-        }\n-    });\n+\n+    let lines = fixture\n+        .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n+        .filter_map(|line| {\n+            if line.len() >= margin {\n+                assert!(line[..margin].trim().is_empty());\n+                Some(&line[margin..])\n+            } else {\n+                assert!(line.trim().is_empty());\n+                None\n+            }\n+        });\n \n     for line in lines {\n         if line.starts_with(\"//-\") {"}]}