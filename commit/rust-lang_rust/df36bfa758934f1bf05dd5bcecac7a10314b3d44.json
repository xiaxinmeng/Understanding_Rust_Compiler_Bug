{"sha": "df36bfa758934f1bf05dd5bcecac7a10314b3d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMzZiZmE3NTg5MzRmMWJmMDVkZDViY2VjYWM3YTEwMzE0YjNkNDQ=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T02:07:11Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:21:57Z"}, "message": "Repair RIMOV damage to libstd tests", "tree": {"sha": "ca2e0edd53517af31b856e59240d76ea5b985eaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca2e0edd53517af31b856e59240d76ea5b985eaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df36bfa758934f1bf05dd5bcecac7a10314b3d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df36bfa758934f1bf05dd5bcecac7a10314b3d44", "html_url": "https://github.com/rust-lang/rust/commit/df36bfa758934f1bf05dd5bcecac7a10314b3d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df36bfa758934f1bf05dd5bcecac7a10314b3d44/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "155f81d4a39fb6085633eab457cac1d7b4bf4180", "url": "https://api.github.com/repos/rust-lang/rust/commits/155f81d4a39fb6085633eab457cac1d7b4bf4180", "html_url": "https://github.com/rust-lang/rust/commit/155f81d4a39fb6085633eab457cac1d7b4bf4180"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "4066aecc581ca3b94b92a9de9d9b843449c9e7a3", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/df36bfa758934f1bf05dd5bcecac7a10314b3d44/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df36bfa758934f1bf05dd5bcecac7a10314b3d44/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=df36bfa758934f1bf05dd5bcecac7a10314b3d44", "patch": "@@ -754,7 +754,7 @@ mod test_qsort3 {\n             let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let mut v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];\n@@ -801,7 +801,7 @@ mod test_qsort {\n             let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let mut v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];\n@@ -818,7 +818,7 @@ mod test_qsort {\n \n         do quick_sort(names) |x, y| { int::le(*x, *y) };\n \n-        let immut_names = vec::cast_from_mut(move names);\n+        let immut_names = move names;\n \n         let pairs = vec::zip_slice(expected, immut_names);\n         for vec::each(pairs) |p| {\n@@ -951,7 +951,7 @@ mod test_tim_sort {\n             let mut v2: ~[int] = ~[];\n             check_sort(v1, v2);\n         }\n-        { let mut v1 = ~[9]; let v2 = ~[9]; check_sort(v1, v2); }\n+        { let mut v1 = ~[9]; let mut v2 = ~[9]; check_sort(v1, v2); }\n         {\n             let mut v1 = ~[9, 3, 3, 3, 9];\n             let mut v2 = ~[3, 3, 3, 9, 9];\n@@ -1024,7 +1024,7 @@ mod big_tests {\n         let res = do vec::from_fn(num) |i| {\n             arr[i % size]\n         };\n-        vec::cast_to_mut(move res)\n+        move res\n     }\n \n     fn makeRange(n: uint) -> ~[uint] {\n@@ -1050,7 +1050,7 @@ mod big_tests {\n             let arr = do vec::from_fn(n) |_i| {\n                 rng.gen_float()\n             };\n-            let arr = vec::cast_to_mut(move arr);\n+            let mut arr = move arr;\n \n             tim_sort(arr); // *sort\n             isSorted(arr);\n@@ -1088,7 +1088,7 @@ mod big_tests {\n             tim_sort(arr);\n             isSorted(arr);\n \n-            let arr = if n > 4 {\n+            let mut arr = if n > 4 {\n                 let part = vec::view(arr, 0, 4);\n                 multiplyVec(part, n)\n             } else { move arr };\n@@ -1122,7 +1122,7 @@ mod big_tests {\n             let arr = do vec::from_fn(n) |_i| {\n                 @rng.gen_float()\n             };\n-            let arr = vec::cast_to_mut(move arr);\n+            let mut arr = move arr;\n \n             tim_sort(arr); // *sort\n             isSorted(arr);\n@@ -1160,7 +1160,7 @@ mod big_tests {\n             tim_sort(arr);\n             isSorted(arr);\n \n-            let arr = if n > 4 {\n+            let mut arr = if n > 4 {\n                 let part = vec::view(arr, 0, 4);\n                 multiplyVec(part, n)\n             } else { move arr };"}]}