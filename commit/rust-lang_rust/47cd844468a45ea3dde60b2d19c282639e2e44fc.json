{"sha": "47cd844468a45ea3dde60b2d19c282639e2e44fc", "node_id": "C_kwDOAAsO6NoAKDQ3Y2Q4NDQ0NjhhNDVlYTNkZGU2MGIyZDE5YzI4MjYzOWUyZTQ0ZmM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-23T22:30:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-11-23T22:30:58Z"}, "message": "effective visibility: Stop recalculating current private visibility\n\nIt becomes relatively expensive if done often and shows up during perf profiling.", "tree": {"sha": "bb8e3556db678d2942c5d70dad27bc44dcaa65c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb8e3556db678d2942c5d70dad27bc44dcaa65c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47cd844468a45ea3dde60b2d19c282639e2e44fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47cd844468a45ea3dde60b2d19c282639e2e44fc", "html_url": "https://github.com/rust-lang/rust/commit/47cd844468a45ea3dde60b2d19c282639e2e44fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47cd844468a45ea3dde60b2d19c282639e2e44fc/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e76d94a225ee53fde0ddbbfd7285890d006db43", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e76d94a225ee53fde0ddbbfd7285890d006db43", "html_url": "https://github.com/rust-lang/rust/commit/7e76d94a225ee53fde0ddbbfd7285890d006db43"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "3aa8d52db038173b57eab84b0da899cefa0a9120", "filename": "compiler/rustc_resolve/src/effective_visibilities.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/47cd844468a45ea3dde60b2d19c282639e2e44fc/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47cd844468a45ea3dde60b2d19c282639e2e44fc/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Feffective_visibilities.rs?ref=47cd844468a45ea3dde60b2d19c282639e2e44fc", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::def_id::CRATE_DEF_ID;\n use rustc_middle::middle::privacy::{EffectiveVisibilities, EffectiveVisibility};\n use rustc_middle::middle::privacy::{IntoDefIdTree, Level};\n use rustc_middle::ty::{DefIdTree, Visibility};\n+use std::mem;\n \n type ImportId<'a> = Interned<'a, NameBinding<'a>>;\n \n@@ -35,6 +36,8 @@ pub struct EffectiveVisibilitiesVisitor<'r, 'a> {\n     /// keys in `Resolver::effective_visibilities` are not enough for that, because multiple\n     /// bindings can correspond to a single def id in imports. So we keep a separate table.\n     import_effective_visibilities: EffectiveVisibilities<ImportId<'a>>,\n+    // It's possible to recalculate this at any point, but it's relatively expensive.\n+    current_private_vis: Visibility,\n     changed: bool,\n }\n \n@@ -80,10 +83,12 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n             r,\n             def_effective_visibilities: Default::default(),\n             import_effective_visibilities: Default::default(),\n+            current_private_vis: Visibility::Public,\n             changed: false,\n         };\n \n         visitor.update(CRATE_DEF_ID, CRATE_DEF_ID);\n+        visitor.current_private_vis = Visibility::Restricted(CRATE_DEF_ID);\n         visitor.set_bindings_effective_visibilities(CRATE_DEF_ID);\n \n         while visitor.changed {\n@@ -155,6 +160,10 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n         }\n     }\n \n+    fn cheap_private_vis(&self, parent_id: ParentId<'_>) -> Option<Visibility> {\n+        matches!(parent_id, ParentId::Def(_)).then_some(self.current_private_vis)\n+    }\n+\n     fn effective_vis_or_private(&mut self, parent_id: ParentId<'a>) -> EffectiveVisibility {\n         // Private nodes are only added to the table for caching, they could be added or removed at\n         // any moment without consequences, so we don't set `changed` to true when adding them.\n@@ -170,23 +179,25 @@ impl<'r, 'a> EffectiveVisibilitiesVisitor<'r, 'a> {\n \n     fn update_import(&mut self, binding: ImportId<'a>, parent_id: ParentId<'a>) {\n         let nominal_vis = binding.vis.expect_local();\n+        let private_vis = self.cheap_private_vis(parent_id);\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n         self.changed |= self.import_effective_visibilities.update(\n             binding,\n             nominal_vis,\n-            |r| (r.private_vis_import(binding), r),\n+            |r| (private_vis.unwrap_or_else(|| r.private_vis_import(binding)), r),\n             inherited_eff_vis,\n             parent_id.level(),\n             &mut *self.r,\n         );\n     }\n \n     fn update_def(&mut self, def_id: LocalDefId, nominal_vis: Visibility, parent_id: ParentId<'a>) {\n+        let private_vis = self.cheap_private_vis(parent_id);\n         let inherited_eff_vis = self.effective_vis_or_private(parent_id);\n         self.changed |= self.def_effective_visibilities.update(\n             def_id,\n             nominal_vis,\n-            |r| (r.private_vis_def(def_id), r),\n+            |r| (private_vis.unwrap_or_else(|| r.private_vis_def(def_id)), r),\n             inherited_eff_vis,\n             parent_id.level(),\n             &mut *self.r,\n@@ -213,8 +224,11 @@ impl<'r, 'ast> Visitor<'ast> for EffectiveVisibilitiesVisitor<'ast, 'r> {\n             ),\n \n             ast::ItemKind::Mod(..) => {\n+                let prev_private_vis =\n+                    mem::replace(&mut self.current_private_vis, Visibility::Restricted(def_id));\n                 self.set_bindings_effective_visibilities(def_id);\n                 visit::walk_item(self, item);\n+                self.current_private_vis = prev_private_vis;\n             }\n \n             ast::ItemKind::Enum(EnumDef { ref variants }, _) => {"}]}