{"sha": "8dd36af9cb183200cd96eb87885dfcfa132f4c51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZDM2YWY5Y2IxODMyMDBjZDk2ZWI4Nzg4NWRmY2ZhMTMyZjRjNTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T18:48:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2018-01-25T21:49:47Z"}, "message": "Rollup merge of #47626 - eddyb:one-less-unwrap, r=nagisa\n\nrustc_trans: remove an unwrap by replacing a bool with Result.\n\nPrompted by @shepmaster.\nr? @nagisa", "tree": {"sha": "d09180eca12a89b7169c7e9da5b78db32ae3988a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09180eca12a89b7169c7e9da5b78db32ae3988a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dd36af9cb183200cd96eb87885dfcfa132f4c51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd36af9cb183200cd96eb87885dfcfa132f4c51", "html_url": "https://github.com/rust-lang/rust/commit/8dd36af9cb183200cd96eb87885dfcfa132f4c51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dd36af9cb183200cd96eb87885dfcfa132f4c51/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4856f07bb5dd3e946247c92e27ef59db079f3dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4856f07bb5dd3e946247c92e27ef59db079f3dcf", "html_url": "https://github.com/rust-lang/rust/commit/4856f07bb5dd3e946247c92e27ef59db079f3dcf"}, {"sha": "51fe2fe07fc81e177fe9b822bc4db91e51837e45", "url": "https://api.github.com/repos/rust-lang/rust/commits/51fe2fe07fc81e177fe9b822bc4db91e51837e45", "html_url": "https://github.com/rust-lang/rust/commit/51fe2fe07fc81e177fe9b822bc4db91e51837e45"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "62bac8469ce4bc75dddc20482c6a93d0047a8dd1", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/8dd36af9cb183200cd96eb87885dfcfa132f4c51/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dd36af9cb183200cd96eb87885dfcfa132f4c51/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=8dd36af9cb183200cd96eb87885dfcfa132f4c51", "patch": "@@ -182,44 +182,48 @@ pub fn compute_abi_info<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>, fty: &mut FnType<'tc\n     let mut sse_regs = 8; // XMM0-7\n \n     let mut x86_64_ty = |arg: &mut ArgType<'tcx>, is_arg: bool| {\n-        let cls = classify_arg(cx, arg);\n+        let mut cls_or_mem = classify_arg(cx, arg);\n \n         let mut needed_int = 0;\n         let mut needed_sse = 0;\n-        let in_mem = match cls {\n-            Err(Memory) => true,\n-            Ok(ref cls) if is_arg => {\n-                for &c in cls {\n+        if is_arg {\n+            if let Ok(cls) = cls_or_mem {\n+                for &c in &cls {\n                     match c {\n                         Some(Class::Int) => needed_int += 1,\n                         Some(Class::Sse) => needed_sse += 1,\n                         _ => {}\n                     }\n                 }\n-                arg.layout.is_aggregate() &&\n-                    (int_regs < needed_int || sse_regs < needed_sse)\n+                if arg.layout.is_aggregate() {\n+                    if int_regs < needed_int || sse_regs < needed_sse {\n+                        cls_or_mem = Err(Memory);\n+                    }\n+                }\n             }\n-            Ok(_) => false\n-        };\n+        }\n \n-        if in_mem {\n-            if is_arg {\n-                arg.make_indirect_byval();\n-            } else {\n-                // `sret` parameter thus one less integer register available\n-                arg.make_indirect();\n-                int_regs -= 1;\n+        match cls_or_mem {\n+            Err(Memory) => {\n+                if is_arg {\n+                    arg.make_indirect_byval();\n+                } else {\n+                    // `sret` parameter thus one less integer register available\n+                    arg.make_indirect();\n+                    int_regs -= 1;\n+                }\n             }\n-        } else {\n-            // split into sized chunks passed individually\n-            int_regs -= needed_int;\n-            sse_regs -= needed_sse;\n-\n-            if arg.layout.is_aggregate() {\n-                let size = arg.layout.size;\n-                arg.cast_to(cast_target(cls.as_ref().unwrap(), size))\n-            } else {\n-                arg.extend_integer_width_to(32);\n+            Ok(ref cls) => {\n+                // split into sized chunks passed individually\n+                int_regs -= needed_int;\n+                sse_regs -= needed_sse;\n+\n+                if arg.layout.is_aggregate() {\n+                    let size = arg.layout.size;\n+                    arg.cast_to(cast_target(cls, size))\n+                } else {\n+                    arg.extend_integer_width_to(32);\n+                }\n             }\n         }\n     };"}]}