{"sha": "f3c69552493b74de1644a3ab5dba0a762d6f3305", "node_id": "C_kwDOAAsO6NoAKGYzYzY5NTUyNDkzYjc0ZGUxNjQ0YTNhYjVkYmEwYTc2MmQ2ZjMzMDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-14T05:58:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T05:58:41Z"}, "message": "Rollup merge of #110276 - nnethercote:rm-BrAnon-Span, r=jackh726\n\nRemove all but one of the spans in `BoundRegionKind::BrAnon`\n\nThere are only three places where `BoundRegionKind::BrAnon` uses `Some(span)` instead of `None`. Two of them are easy to remove, which this PR does.\n\nr? ```@jackh726```", "tree": {"sha": "de61656ce6d543d2092e06138af7253d009e1080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de61656ce6d543d2092e06138af7253d009e1080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3c69552493b74de1644a3ab5dba0a762d6f3305", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOOuRCRBK7hj4Ov3rIwAA2KQIAKTB8OddiQ84ts19x7+t8YBM\nEhJefTqa8vQJ5/rJRwu4tmJ1whvUUYh9knMZ3NQ2JAJ8A1AdmRYl2Xm9rL+XJj7g\nlS1v/qG96n1CX8F5jvAc/5CHkTJy2Nw81OLAxKBv3Cvqz3Yuso8/nVNYxVHoadIk\nN3uAzeju1gJ274ymQr4C+u5j29/feTPtQ6WjTql91Hn52n81PIqVrrxu5tzQDMAe\nkbnel+aPzVINkw560nwQxVc9mi7QeEolxNhCthAW0ndP/NxYGG96dWDgeKBl5QJW\nC9IFkdh0fzeFknUxlFxkoz51ZrRaqx2YV1fogUmvo6JzDx1tVL+32moS9b+FFNw=\n=D3el\n-----END PGP SIGNATURE-----\n", "payload": "tree de61656ce6d543d2092e06138af7253d009e1080\nparent 69d7172b8e102f8da5654d10b681506e918e6e09\nparent f07c335e90d2705f2db5a18f0b912a08652610f5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681451921 +0200\ncommitter GitHub <noreply@github.com> 1681451921 +0200\n\nRollup merge of #110276 - nnethercote:rm-BrAnon-Span, r=jackh726\n\nRemove all but one of the spans in `BoundRegionKind::BrAnon`\n\nThere are only three places where `BoundRegionKind::BrAnon` uses `Some(span)` instead of `None`. Two of them are easy to remove, which this PR does.\n\nr? ```@jackh726```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c69552493b74de1644a3ab5dba0a762d6f3305", "html_url": "https://github.com/rust-lang/rust/commit/f3c69552493b74de1644a3ab5dba0a762d6f3305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3c69552493b74de1644a3ab5dba0a762d6f3305/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69d7172b8e102f8da5654d10b681506e918e6e09", "url": "https://api.github.com/repos/rust-lang/rust/commits/69d7172b8e102f8da5654d10b681506e918e6e09", "html_url": "https://github.com/rust-lang/rust/commit/69d7172b8e102f8da5654d10b681506e918e6e09"}, {"sha": "f07c335e90d2705f2db5a18f0b912a08652610f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f07c335e90d2705f2db5a18f0b912a08652610f5", "html_url": "https://github.com/rust-lang/rust/commit/f07c335e90d2705f2db5a18f0b912a08652610f5"}], "stats": {"total": 33, "additions": 14, "deletions": 19}, "files": [{"sha": "f3971080443332490a928ac749f293e8847f07a1", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f3c69552493b74de1644a3ab5dba0a762d6f3305/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3c69552493b74de1644a3ab5dba0a762d6f3305/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=f3c69552493b74de1644a3ab5dba0a762d6f3305", "patch": "@@ -239,8 +239,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             // typeck had previously found constraints that would cause them to be related.\n \n             let mut counter = 0;\n-            let mut mk_bound_region = |span| {\n-                let kind = ty::BrAnon(span);\n+            let mut mk_bound_region = |kind| {\n                 let var = ty::BoundVar::from_u32(counter);\n                 counter += 1;\n                 ty::BoundRegion { var, kind }\n@@ -252,24 +251,23 @@ pub fn resolve_interior<'a, 'tcx>(\n                         let origin = fcx.region_var_origin(vid);\n                         match origin {\n                             RegionVariableOrigin::EarlyBoundRegion(span, _) => {\n-                                mk_bound_region(Some(span))\n+                                mk_bound_region(ty::BrAnon(Some(span)))\n                             }\n-                            _ => mk_bound_region(None),\n+                            _ => mk_bound_region(ty::BrAnon(None)),\n                         }\n                     }\n-                    // FIXME: these should use `BrNamed`\n                     ty::ReEarlyBound(region) => {\n-                        mk_bound_region(Some(fcx.tcx.def_span(region.def_id)))\n+                        mk_bound_region(ty::BrNamed(region.def_id, region.name))\n                     }\n                     ty::ReLateBound(_, ty::BoundRegion { kind, .. })\n                     | ty::ReFree(ty::FreeRegion { bound_region: kind, .. }) => match kind {\n-                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(span),\n-                        ty::BoundRegionKind::BrNamed(def_id, _) => {\n-                            mk_bound_region(Some(fcx.tcx.def_span(def_id)))\n+                        ty::BoundRegionKind::BrAnon(span) => mk_bound_region(ty::BrAnon(span)),\n+                        ty::BoundRegionKind::BrNamed(def_id, sym) => {\n+                            mk_bound_region(ty::BrNamed(def_id, sym))\n                         }\n-                        ty::BoundRegionKind::BrEnv => mk_bound_region(None),\n+                        ty::BoundRegionKind::BrEnv => mk_bound_region(ty::BrAnon(None)),\n                     },\n-                    _ => mk_bound_region(None),\n+                    _ => mk_bound_region(ty::BrAnon(None)),\n                 };\n                 let r = fcx.tcx.mk_re_late_bound(current_depth, br);\n                 r\n@@ -293,10 +291,7 @@ pub fn resolve_interior<'a, 'tcx>(\n             type_causes,\n             FnMutDelegate {\n                 regions: &mut |br| {\n-                    let kind = match br.kind {\n-                        ty::BrAnon(span) => ty::BrAnon(span),\n-                        _ => br.kind,\n-                    };\n+                    let kind = br.kind;\n                     let var = ty::BoundVar::from_usize(bound_vars.len());\n                     bound_vars.push(ty::BoundVariableKind::Region(kind));\n                     counter += 1;"}, {"sha": "86dbad84d99d8930a245fd10532bc66328f038a0", "filename": "tests/ui/generic-associated-types/bugs/issue-100013.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3c69552493b74de1644a3ab5dba0a762d6f3305/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3c69552493b74de1644a3ab5dba0a762d6f3305/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-100013.stderr?ref=f3c69552493b74de1644a3ab5dba0a762d6f3305", "patch": "@@ -28,12 +28,12 @@ LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n-note: the lifetime defined here...\n+note: the lifetime `'b` defined here...\n   --> $DIR/issue-100013.rs:21:14\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n    |              ^^\n-note: ...must outlive the lifetime defined here\n+note: ...must outlive the lifetime `'a` defined here\n   --> $DIR/issue-100013.rs:21:10\n    |\n LL | fn call2<'a, 'b, I: FutureIterator>() -> impl Send {\n@@ -62,12 +62,12 @@ LL | |         async {}.await; // a yield point\n LL | |     }\n    | |_____^\n    |\n-note: the lifetime defined here...\n+note: the lifetime `'b` defined here...\n   --> $DIR/issue-100013.rs:28:18\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {\n    |                  ^^\n-note: ...must outlive the lifetime defined here\n+note: ...must outlive the lifetime `'a` defined here\n   --> $DIR/issue-100013.rs:28:10\n    |\n LL | fn call3<'a: 'b, 'b, I: FutureIterator>() -> impl Send {"}]}