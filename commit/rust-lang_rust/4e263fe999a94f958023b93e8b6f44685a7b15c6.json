{"sha": "4e263fe999a94f958023b93e8b6f44685a7b15c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMjYzZmU5OTlhOTRmOTU4MDIzYjkzZThiNmY0NDY4NWE3YjE1YzY=", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-10-13T18:18:46Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2020-10-13T18:18:46Z"}, "message": "Add test-examples for Cfg::simplify_with", "tree": {"sha": "9f9618759275ddf280ab63b85a09743de2f92a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f9618759275ddf280ab63b85a09743de2f92a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e263fe999a94f958023b93e8b6f44685a7b15c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e263fe999a94f958023b93e8b6f44685a7b15c6", "html_url": "https://github.com/rust-lang/rust/commit/4e263fe999a94f958023b93e8b6f44685a7b15c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e263fe999a94f958023b93e8b6f44685a7b15c6/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0544abe4b62021ad2849a24db9f89ca3d38ddb", "html_url": "https://github.com/rust-lang/rust/commit/6f0544abe4b62021ad2849a24db9f89ca3d38ddb"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "b659f3eab4318146b3a51c46f0862dcd4f7ea38e", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e263fe999a94f958023b93e8b6f44685a7b15c6/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e263fe999a94f958023b93e8b6f44685a7b15c6/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=4e263fe999a94f958023b93e8b6f44685a7b15c6", "patch": "@@ -205,6 +205,8 @@ impl Cfg {\n     /// Attempt to simplify this cfg by assuming that `assume` is already known to be true, will\n     /// return `None` if simplification managed to completely eliminate any requirements from this\n     /// `Cfg`.\n+    ///\n+    /// See `tests::test_simplify_with` for examples.\n     pub(crate) fn simplify_with(&self, assume: &Cfg) -> Option<Cfg> {\n         if self == assume {\n             return None;"}, {"sha": "3a78269f19af0a5a59ad71953c4f45a7927330fe", "filename": "src/librustdoc/clean/cfg/tests.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4e263fe999a94f958023b93e8b6f44685a7b15c6/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e263fe999a94f958023b93e8b6f44685a7b15c6/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg%2Ftests.rs?ref=4e263fe999a94f958023b93e8b6f44685a7b15c6", "patch": "@@ -433,3 +433,39 @@ fn test_render_long_html() {\n         );\n     })\n }\n+\n+#[test]\n+fn test_simplify_with() {\n+    // This is a tiny subset of things that could be simplified, but it likely covers 90% of\n+    // real world usecases well.\n+    with_default_session_globals(|| {\n+        let foo = word_cfg(\"foo\");\n+        let bar = word_cfg(\"bar\");\n+        let baz = word_cfg(\"baz\");\n+        let quux = word_cfg(\"quux\");\n+\n+        let foobar = Cfg::All(vec![foo.clone(), bar.clone()]);\n+        let barbaz = Cfg::All(vec![bar.clone(), baz.clone()]);\n+        let foobarbaz = Cfg::All(vec![foo.clone(), bar.clone(), baz.clone()]);\n+        let bazquux = Cfg::All(vec![baz.clone(), quux.clone()]);\n+\n+        // Unrelated cfgs don't affect each other\n+        assert_eq!(foo.simplify_with(&bar).as_ref(), Some(&foo));\n+        assert_eq!(foobar.simplify_with(&bazquux).as_ref(), Some(&foobar));\n+\n+        // Identical cfgs are eliminated\n+        assert_eq!(foo.simplify_with(&foo), None);\n+        assert_eq!(foobar.simplify_with(&foobar), None);\n+\n+        // Multiple cfgs eliminate a single assumed cfg\n+        assert_eq!(foobar.simplify_with(&foo).as_ref(), Some(&bar));\n+        assert_eq!(foobar.simplify_with(&bar).as_ref(), Some(&foo));\n+\n+        // A single cfg is eliminated by multiple assumed cfg containing it\n+        assert_eq!(foo.simplify_with(&foobar), None);\n+\n+        // Multiple cfgs eliminate the matching subset of multiple assumed cfg\n+        assert_eq!(foobar.simplify_with(&barbaz).as_ref(), Some(&foo));\n+        assert_eq!(foobar.simplify_with(&foobarbaz), None);\n+    });\n+}"}]}