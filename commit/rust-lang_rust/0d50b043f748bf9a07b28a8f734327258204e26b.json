{"sha": "0d50b043f748bf9a07b28a8f734327258204e26b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNTBiMDQzZjc0OGJmOWEwN2IyOGE4ZjczNDMyNzI1ODIwNGUyNmI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T20:26:09Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-05-13T22:47:56Z"}, "message": "syntax::parse: optimize file_to_filemap to read a string directly.", "tree": {"sha": "df2296f0595d53d8f611959c8baa5910401a7c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df2296f0595d53d8f611959c8baa5910401a7c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d50b043f748bf9a07b28a8f734327258204e26b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d50b043f748bf9a07b28a8f734327258204e26b", "html_url": "https://github.com/rust-lang/rust/commit/0d50b043f748bf9a07b28a8f734327258204e26b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d50b043f748bf9a07b28a8f734327258204e26b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a59d1824d11b6452463fcc23ad64cd142dfa203", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a59d1824d11b6452463fcc23ad64cd142dfa203", "html_url": "https://github.com/rust-lang/rust/commit/6a59d1824d11b6452463fcc23ad64cd142dfa203"}], "stats": {"total": 28, "additions": 7, "deletions": 21}, "files": [{"sha": "3d27363d6ff205058ae2a511eef54f4e7b5c3f27", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 7, "deletions": 21, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d50b043f748bf9a07b28a8f734327258204e26b/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d50b043f748bf9a07b28a8f734327258204e26b/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=0d50b043f748bf9a07b28a8f734327258204e26b", "patch": "@@ -221,30 +221,16 @@ pub fn new_parser_from_tts<'a>(sess: &'a ParseSess,\n /// Given a session and a path and an optional span (for error reporting),\n /// add the path to the session's codemap and return the new filemap.\n pub fn file_to_filemap(sess: &ParseSess, path: &Path, spanopt: Option<Span>)\n-    -> Rc<FileMap> {\n-    let err = |msg: &str| {\n+                       -> Rc<FileMap> {\n+    let mut contents = String::new();\n+    if let Err(e) = File::open(path).and_then(|mut f| f.read_to_string(&mut contents)) {\n+        let msg = format!(\"couldn't read {:?}: {}\", path.display(), e);\n         match spanopt {\n-            Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, msg)),\n-            None => sess.span_diagnostic.handler().fatal(msg),\n-        }\n-    };\n-    let mut bytes = Vec::new();\n-    match File::open(path).and_then(|mut f| f.read_to_end(&mut bytes)) {\n-        Ok(..) => {}\n-        Err(e) => {\n-            err(&format!(\"couldn't read {:?}: {}\", path.display(), e));\n-            unreachable!();\n-        }\n-    };\n-    match str::from_utf8(&bytes[..]).ok() {\n-        Some(s) => {\n-            sess.codemap().new_filemap(path.to_str().unwrap().to_string(), s.to_string())\n-        }\n-        None => {\n-            err(&format!(\"{:?} is not UTF-8 encoded\", path.display()));\n-            unreachable!();\n+            Some(sp) => panic!(sess.span_diagnostic.span_fatal(sp, &msg)),\n+            None => sess.span_diagnostic.handler().fatal(&msg)\n         }\n     }\n+    sess.codemap().new_filemap(path.to_str().unwrap().to_string(), contents)\n }\n \n /// Given a filemap, produce a sequence of token-trees"}]}