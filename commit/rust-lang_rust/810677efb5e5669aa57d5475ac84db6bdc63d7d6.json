{"sha": "810677efb5e5669aa57d5475ac84db6bdc63d7d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDY3N2VmYjVlNTY2OWFhNTdkNTQ3NWFjODRkYjZiZGM2M2Q3ZDY=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-26T05:38:29Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-06-29T00:10:06Z"}, "message": "Parse ~[...] as [...]/~. Same for @ and &. Closes #2747.", "tree": {"sha": "bd37d220240d211b7128a589e159493f3de27d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd37d220240d211b7128a589e159493f3de27d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/810677efb5e5669aa57d5475ac84db6bdc63d7d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/810677efb5e5669aa57d5475ac84db6bdc63d7d6", "html_url": "https://github.com/rust-lang/rust/commit/810677efb5e5669aa57d5475ac84db6bdc63d7d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/810677efb5e5669aa57d5475ac84db6bdc63d7d6/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6f103e7f987e7a323415d08a7c98da1617c12c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f103e7f987e7a323415d08a7c98da1617c12c0", "html_url": "https://github.com/rust-lang/rust/commit/b6f103e7f987e7a323415d08a7c98da1617c12c0"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "1543e1a1ba1832598b2da25f9b2d536015b287c0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=810677efb5e5669aa57d5475ac84db6bdc63d7d6", "patch": "@@ -373,10 +373,22 @@ class parser {\n             }\n         } else if self.token == token::AT {\n             self.bump();\n-            ty_box(self.parse_mt())\n+            // HACK: turn @[...] into a []/@\n+            alt self.parse_mt() {\n+              {ty: t @ @{node: ty_vec(_), _}, mutbl: m_imm} {\n+                ty_vstore(t, vstore_box)\n+              }\n+              mt { ty_box(mt) }\n+            }\n         } else if self.token == token::TILDE {\n             self.bump();\n-            ty_uniq(self.parse_mt())\n+            // HACK: turn ~[...] into a []/~\n+            alt self.parse_mt() {\n+              {ty: t @ @{node: ty_vec(_), _}, mutbl: m_imm} {\n+                ty_vstore(t, vstore_uniq)\n+              }\n+              mt { ty_uniq(mt) }\n+            }\n         } else if self.token == token::BINOP(token::STAR) {\n             self.bump();\n             ty_ptr(self.parse_mt())\n@@ -406,8 +418,13 @@ class parser {\n         } else if self.token == token::BINOP(token::AND) {\n             self.bump();\n             let region = self.parse_region_dot();\n-            let mt = self.parse_mt();\n-            ty_rptr(region, mt)\n+            // HACK: turn &a.[...] into a []/&a\n+            alt self.parse_mt() {\n+              {ty: t @ @{node: ty_vec(_), _}, mutbl: m_imm} {\n+                ty_vstore(t, vstore_slice(region))\n+              }\n+              mt { ty_rptr(region, mt) }\n+            }\n         } else if self.eat_keyword(\"pure\") {\n             self.parse_ty_fn(ast::pure_fn)\n         } else if self.eat_keyword(\"unsafe\") {\n@@ -1188,7 +1205,13 @@ class parser {\n                 let m = self.parse_mutability();\n                 let e = self.to_expr(self.parse_prefix_expr());\n                 hi = e.span.hi;\n-                ex = expr_addr_of(m, e);\n+                // HACK: turn &[...] into [...]/&\n+                ex = alt e.node {\n+                  expr_vec(*) if m == m_imm {\n+                    expr_vstore(e, vstore_slice(self.region_from_name(none)))\n+                  }\n+                  _ { expr_addr_of(m, e) }\n+                };\n               }\n               _ { ret self.parse_dot_or_call_expr(); }\n             }\n@@ -1198,14 +1221,22 @@ class parser {\n             let m = self.parse_mutability();\n             let e = self.to_expr(self.parse_prefix_expr());\n             hi = e.span.hi;\n-            ex = expr_unary(box(m), e);\n+            // HACK: turn @[...] into [...]/@\n+            ex = alt e.node {\n+              expr_vec(*) if m == m_imm { expr_vstore(e, vstore_box) }\n+              _ { expr_unary(box(m), e) }\n+            };\n           }\n           token::TILDE {\n             self.bump();\n             let m = self.parse_mutability();\n             let e = self.to_expr(self.parse_prefix_expr());\n             hi = e.span.hi;\n-            ex = expr_unary(uniq(m), e);\n+            // HACK: turn ~[...] into [...]/~\n+            ex = alt e.node {\n+              expr_vec(*) if m == m_imm { expr_vstore(e, vstore_uniq) }\n+              _ { expr_unary(uniq(m), e) }\n+            };\n           }\n           _ { ret self.parse_dot_or_call_expr(); }\n         }"}, {"sha": "10dc7937be9cf54caf6f4352e3570e56d64c98ed", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=810677efb5e5669aa57d5475ac84db6bdc63d7d6", "patch": "@@ -1,4 +1,4 @@\n-fn test(-foo: ~[int]) { assert (foo[0] == 10); }\n+fn test(-foo: ~[int]/~) { assert (foo[0] == 10); }\n \n fn main() {\n     let x = ~[10]/~;"}, {"sha": "c70f3733ab7ebbe541e2440df44dc909a8ac87f9", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/810677efb5e5669aa57d5475ac84db6bdc63d7d6/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=810677efb5e5669aa57d5475ac84db6bdc63d7d6", "patch": "@@ -1,4 +1,4 @@\n-fn test(-foo: @[int]) { assert (foo[0] == 10); }\n+fn test(-foo: @[int]/~) { assert (foo[0] == 10); }\n \n fn main() {\n     let x = @[10]/~;"}]}