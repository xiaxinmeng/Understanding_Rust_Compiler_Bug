{"sha": "24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTYyODRmY2QxZDQwYzBkOGY4YjU4ZDI5YTY3MmVjNzhjZmE5NGI=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-02-04T07:00:24Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-05-02T09:48:11Z"}, "message": "Fix failures in rustdoc", "tree": {"sha": "85c1a40ecea2b48b07006951185374af47aebc3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85c1a40ecea2b48b07006951185374af47aebc3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlrpiVsACgkQZ1erJvcv\nAITsghAAndNqZT+GU5+FFYcabjTmMqmgQ36MbjqOC8UYnMMtEPvBPU+z/q+HNJnm\nBmrf9Rr47MDUnFOaYs97pTYDVOJXJ1GW8rxZCVsG78d4J0vLAlvkN1TAFNURwyIK\n7n5JWwQSWXEz22xhqhq1gBt2zzUsrH+p2bpDZWhM5Lf6zMywOFm8H52PtcM6gYgW\nX8AGvMEujhbjtXiCUtuFp4g41u1+sCxqH+3Il+iPv2Q3qnETs7RBbLnTMaEIVaTU\n2fWGth1v7B65LjrYJveh5kJq4DVO2H0XGCakRZzqIP7M2cwEbVbTzQCBH8TtTH6g\n7R796i+ohQv7XuyHcbj3nWrNcm6rU7PlH270TwPVJvgkwI0k/VS/792m2pHRynFF\n9/5/OutVUTwDTNijiiZHB73Hh8t2dCA+HZplIhG8L6/XUvKSBLv3bgds7fnQBp+Y\nD8FFzs/H3PyvG2SZ71Y60OtiP/KwrHfSD/RnMOsf6GneSMbgdh9qHwJGL26+ZwwK\npaxmgwan/sKyvM7mssHTMeRmt3stNA0cBgbMXEM6rWRLI13nx/7KVrIDBznw76pa\nuLSgAKFVr2Nt8I9SCBymTZFA6B4Jxw707waR2NP/P8C1ubsMp4mHHw81jPpsEbSV\n6Eo++bZFElapse2NIFSV+vYZ8GuW5bEzNZzFuEap2Cd3brYaYJ4=\n=GTV6\n-----END PGP SIGNATURE-----", "payload": "tree 85c1a40ecea2b48b07006951185374af47aebc3f\nparent 0de65441170292f243806e6239967ee85bff6c66\nauthor Seiichi Uchida <seuchida@gmail.com> 1517727624 +0900\ncommitter flip1995 <uwdkn@student.kit.edu> 1525254491 +0200\n\nFix failures in rustdoc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "html_url": "https://github.com/rust-lang/rust/commit/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0de65441170292f243806e6239967ee85bff6c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/0de65441170292f243806e6239967ee85bff6c66", "html_url": "https://github.com/rust-lang/rust/commit/0de65441170292f243806e6239967ee85bff6c66"}], "stats": {"total": 242, "additions": 63, "deletions": 179}, "files": [{"sha": "f8cd6ebc4645bc24f68e5338e379b3469098e9ca", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 63, "deletions": 179, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "patch": "@@ -67,7 +67,7 @@ impl Cfg {\n     /// If the content is not properly formatted, it will return an error indicating what and where\n     /// the error is.\n     pub fn parse(cfg: &MetaItem) -> Result<Cfg, InvalidCfgError> {\n-        let name = cfg.ident.name;\n+        let name = cfg.name();\n         match cfg.node {\n             MetaItemKind::Word => Ok(Cfg::Cfg(name, None)),\n             MetaItemKind::NameValue(ref lit) => match lit.node {\n@@ -436,6 +436,42 @@ mod test {\n         Cfg::Cfg(Symbol::intern(name), Some(Symbol::intern(value)))\n     }\n \n+    fn dummy_meta_item_word(name: &str) -> MetaItem {\n+        MetaItem {\n+            name: Path::from_ident(DUMMY_SP, Ident::from_str(name)),\n+            node: MetaItemKind::Word,\n+            span: DUMMY_SP,\n+        }\n+    }\n+\n+    macro_rules! dummy_meta_item_list {\n+        ($name:ident, [$($list:ident),* $(,)*]) => {\n+            MetaItem {\n+                name: Path::from_ident(DUMMY_SP, Ident::from_str(stringify!($name))),\n+                node: MetaItemKind::List(vec![\n+                    $(\n+                        dummy_spanned(NestedMetaItemKind::MetaItem(\n+                            dummy_meta_item_word(stringify!($list)),\n+                        )),\n+                    )*\n+                ]),\n+                span: DUMMY_SP,\n+            }\n+        };\n+\n+        ($name:ident, [$($list:expr),* $(,)*]) => {\n+            MetaItem {\n+                name: Path::from_ident(DUMMY_SP, Ident::from_str(stringify!($name))),\n+                node: MetaItemKind::List(vec![\n+                    $(\n+                        dummy_spanned(NestedMetaItemKind::MetaItem($list)),\n+                    )*\n+                ]),\n+                span: DUMMY_SP,\n+            }\n+        };\n+    }\n+\n     #[test]\n     fn test_cfg_not() {\n         with_globals(|| {\n@@ -561,15 +597,11 @@ mod test {\n     #[test]\n     fn test_parse_ok() {\n         with_globals(|| {\n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"all\"),\n-                node: MetaItemKind::Word,\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_word(\"all\");\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n             let mi = MetaItem {\n-                ident: Ident::from_str(\"all\"),\n+                name: Path::from_ident(DUMMY_SP, Ident::from_str(\"all\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Str(\n                     Symbol::intern(\"done\"),\n                     StrStyle::Cooked,\n@@ -578,111 +610,24 @@ mod test {\n             };\n             assert_eq!(Cfg::parse(&mi), Ok(name_value_cfg(\"all\", \"done\")));\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"all\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"b\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(all, [a, b]);\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"a\") & word_cfg(\"b\")));\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"any\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"b\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(any, [a, b]);\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"a\") | word_cfg(\"b\")));\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"not\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(not, [a]);\n             assert_eq!(Cfg::parse(&mi), Ok(!word_cfg(\"a\")));\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"not\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"any\"),\n-                        node: MetaItemKind::List(vec![\n-                            dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                                ident: Ident::from_str(\"a\"),\n-                                node: MetaItemKind::Word,\n-                                span: DUMMY_SP,\n-                            })),\n-                            dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                                ident: Ident::from_str(\"all\"),\n-                                node: MetaItemKind::List(vec![\n-                                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                                        ident: Ident::from_str(\"b\"),\n-                                        node: MetaItemKind::Word,\n-                                        span: DUMMY_SP,\n-                                    })),\n-                                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                                        ident: Ident::from_str(\"c\"),\n-                                        node: MetaItemKind::Word,\n-                                        span: DUMMY_SP,\n-                                    })),\n-                                ]),\n-                                span: DUMMY_SP,\n-                            })),\n-                        ]),\n-                        span: DUMMY_SP,\n-                    })),\n+            let mi = dummy_meta_item_list!(not, [\n+                dummy_meta_item_list!(any, [\n+                    dummy_meta_item_word(\"a\"),\n+                    dummy_meta_item_list!(all, [b, c]),\n                 ]),\n-                span: DUMMY_SP,\n-            };\n+            ]);\n             assert_eq!(Cfg::parse(&mi), Ok(!(word_cfg(\"a\") | (word_cfg(\"b\") & word_cfg(\"c\")))));\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"all\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"b\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"c\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(all, [a, b, c]);\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"a\") & word_cfg(\"b\") & word_cfg(\"c\")));\n         })\n     }\n@@ -691,97 +636,36 @@ mod test {\n     fn test_parse_err() {\n         with_globals(|| {\n             let mi = MetaItem {\n-                ident: Ident::from_str(\"foo\"),\n+                name: Path::from_ident(DUMMY_SP, Ident::from_str(\"foo\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Bool(false))),\n                 span: DUMMY_SP,\n             };\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"not\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"b\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(not, [a, b]);\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"not\"),\n-                node: MetaItemKind::List(vec![]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(not, []);\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"foo\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(foo, []);\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"all\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"foo\"),\n-                        node: MetaItemKind::List(vec![]),\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"b\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(all, [\n+                dummy_meta_item_list!(foo, []),\n+                dummy_meta_item_word(\"b\"),\n+            ]);\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"any\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"a\"),\n-                        node: MetaItemKind::Word,\n-                        span: DUMMY_SP,\n-                    })),\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"foo\"),\n-                        node: MetaItemKind::List(vec![]),\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(any, [\n+                dummy_meta_item_word(\"a\"),\n+                dummy_meta_item_list!(foo, []),\n+            ]);\n             assert!(Cfg::parse(&mi).is_err());\n \n-            let mi = MetaItem {\n-                ident: Ident::from_str(\"not\"),\n-                node: MetaItemKind::List(vec![\n-                    dummy_spanned(NestedMetaItemKind::MetaItem(MetaItem {\n-                        ident: Ident::from_str(\"foo\"),\n-                        node: MetaItemKind::List(vec![]),\n-                        span: DUMMY_SP,\n-                    })),\n-                ]),\n-                span: DUMMY_SP,\n-            };\n+            let mi = dummy_meta_item_list!(not, [\n+                dummy_meta_item_list!(foo, []),\n+            ]);\n             assert!(Cfg::parse(&mi).is_err());\n         })\n     }"}]}