{"sha": "970f5cc0e422a959aa6df9a2e3a545203b271cc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MGY1Y2MwZTQyMmE5NTlhYTZkZjlhMmUzYTU0NTIwM2IyNzFjYzg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T12:32:17Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-23T12:32:17Z"}, "message": "Make ast::ty_method hold a fn_decl, rather than duplicating its fields", "tree": {"sha": "ba362618ed52ceb0beed04d266b19742c7e88e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba362618ed52ceb0beed04d266b19742c7e88e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/970f5cc0e422a959aa6df9a2e3a545203b271cc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/970f5cc0e422a959aa6df9a2e3a545203b271cc8", "html_url": "https://github.com/rust-lang/rust/commit/970f5cc0e422a959aa6df9a2e3a545203b271cc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/970f5cc0e422a959aa6df9a2e3a545203b271cc8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0dfbe7b1b8d630488441982cf3d46f82a3a89db", "html_url": "https://github.com/rust-lang/rust/commit/f0dfbe7b1b8d630488441982cf3d46f82a3a89db"}], "stats": {"total": 59, "additions": 20, "deletions": 39}, "files": [{"sha": "2997994b0a443dcce05bd41fe36493ee1e18db6b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=970f5cc0e422a959aa6df9a2e3a545203b271cc8", "patch": "@@ -356,21 +356,21 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         let tmeths: [ty::method] = [];\n         for m: ast::ty_method in meths {\n             let ins = [];\n-            for ta: ast::arg in m.node.inputs {\n+            for ta: ast::arg in m.decl.inputs {\n                 ins += [ast_arg_to_arg(tcx, mode, ta)];\n             }\n-            let out = ast_ty_to_ty(tcx, mode, m.node.output);\n+            let out = ast_ty_to_ty(tcx, mode, m.decl.output);\n \n             let out_constrs = [];\n-            for constr: @ast::constr in m.node.constrs {\n+            for constr: @ast::constr in m.decl.constraints {\n                 out_constrs += [ty::ast_constr_to_constr(tcx, constr)];\n             }\n             let new_m: ty::method =\n-                {proto: m.node.proto,\n-                 ident: m.node.ident,\n+                {proto: m.decl.proto,\n+                 ident: m.ident,\n                  inputs: ins,\n                  output: out,\n-                 cf: m.node.cf,\n+                 cf: m.decl.cf,\n                  constrs: out_constrs};\n             tmeths += [new_m];\n         }"}, {"sha": "a94e860b764914568b7e15cd57f585dad09a642d", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=970f5cc0e422a959aa6df9a2e3a545203b271cc8", "patch": "@@ -307,17 +307,9 @@ type mt = {ty: @ty, mut: mutability};\n \n type ty_field_ = {ident: ident, mt: mt};\n \n-type ty_method_ =\n-    {proto: proto,\n-     ident: ident,\n-     inputs: [arg],\n-     output: @ty,\n-     cf: ret_style,\n-     constrs: [@constr]};\n-\n type ty_field = spanned<ty_field_>;\n \n-type ty_method = spanned<ty_method_>;\n+type ty_method = {ident: ident, decl: fn_decl, span: span};\n \n tag int_ty { ty_i; ty_char; ty_i8; ty_i16; ty_i32; ty_i64; }\n "}, {"sha": "484659f4bc586765b6d32c6db9b599b05736dae7", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=970f5cc0e422a959aa6df9a2e3a545203b271cc8", "patch": "@@ -294,14 +294,7 @@ fn parse_ty_obj(p: parser) -> ast::ty_ {\n         expect(p, token::SEMI);\n         alt f {\n           ast::ty_fn(d) {\n-            // FIXME[fn_decl]\n-            ret spanned(flo, fhi,\n-                        {proto: d.proto,\n-                         ident: ident,\n-                         inputs: d.inputs,\n-                         output: d.output,\n-                         cf: d.cf,\n-                         constrs: d.constraints});\n+            {ident: ident, decl: d, span: ast_util::mk_sp(flo, fhi)}\n           }\n         }\n     }"}, {"sha": "e2856c60f8ded381a10c17fbdb877a3ca2006891", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=970f5cc0e422a959aa6df9a2e3a545203b271cc8", "patch": "@@ -306,8 +306,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n         pclose(s);\n       }\n       ast::ty_fn(d) {\n-        print_ty_fn(s, d.proto, none::<str>, d.inputs, d.output, d.cf,\n-                    d.constraints);\n+        print_ty_fn(s, d, none::<str>);\n       }\n       ast::ty_obj(methods) {\n         head(s, \"obj\");\n@@ -316,8 +315,7 @@ fn print_type(s: ps, &&ty: @ast::ty) {\n             hardbreak_if_not_bol(s);\n             cbox(s, indent_unit);\n             maybe_print_comment(s, m.span.lo);\n-            print_ty_fn(s, m.node.proto, some(m.node.ident), m.node.inputs,\n-                        m.node.output, m.node.cf, m.node.constrs);\n+            print_ty_fn(s, m.decl, some(m.ident));\n             word(s.s, \";\");\n             end(s);\n         }\n@@ -1338,11 +1336,9 @@ fn print_mt(s: ps, mt: ast::mt) {\n     print_type(s, mt.ty);\n }\n \n-fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n-               inputs: [ast::arg], output: @ast::ty, cf: ast::ret_style,\n-               constrs: [@ast::constr]) {\n+fn print_ty_fn(s: ps, decl: ast::fn_decl, id: option::t<ast::ident>) {\n     ibox(s, indent_unit);\n-    word(s.s, proto_to_str(proto));\n+    word(s.s, proto_to_str(decl.proto));\n     alt id { some(id) { word(s.s, \" \"); word(s.s, id); } _ { } }\n     zerobreak(s.s);\n     popen(s);\n@@ -1353,18 +1349,18 @@ fn print_ty_fn(s: ps, proto: ast::proto, id: option::t<ast::ident>,\n         }\n         print_type(s, input.ty);\n     }\n-    commasep(s, inconsistent, inputs, print_arg);\n+    commasep(s, inconsistent, decl.inputs, print_arg);\n     pclose(s);\n-    maybe_print_comment(s, output.span.lo);\n-    if output.node != ast::ty_nil {\n+    maybe_print_comment(s, decl.output.span.lo);\n+    if decl.output.node != ast::ty_nil {\n         space_if_not_bol(s);\n         ibox(s, indent_unit);\n         word_space(s, \"->\");\n-        if cf == ast::noreturn { word_nbsp(s, \"!\"); }\n-        else { print_type(s, output); }\n+        if decl.cf == ast::noreturn { word_nbsp(s, \"!\"); }\n+        else { print_type(s, decl.output); }\n         end(s);\n     }\n-    word(s.s, ast_ty_fn_constrs_str(constrs));\n+    word(s.s, ast_ty_fn_constrs_str(decl.constraints));\n     end(s);\n }\n "}, {"sha": "dc91064dba62e45641d836b3a723abb37d97ce20", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/970f5cc0e422a959aa6df9a2e3a545203b271cc8/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=970f5cc0e422a959aa6df9a2e3a545203b271cc8", "patch": "@@ -151,8 +151,8 @@ fn visit_ty<E>(t: @ty, e: E, v: vt<E>) {\n       }\n       ty_obj(tmeths) {\n         for m: ty_method in tmeths {\n-            for a in m.node.inputs { v.visit_ty(a.ty, e, v); }\n-            v.visit_ty(m.node.output, e, v);\n+            for a in m.decl.inputs { v.visit_ty(a.ty, e, v); }\n+            v.visit_ty(m.decl.output, e, v);\n         }\n       }\n       ty_path(p, _) { visit_path(p, e, v); }"}]}