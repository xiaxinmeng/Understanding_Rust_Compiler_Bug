{"sha": "e03edd287e774e737add22fd957e1cf4c813e1ea", "node_id": "C_kwDOAAsO6NoAKGUwM2VkZDI4N2U3NzRlNzM3YWRkMjJmZDk1N2UxY2Y0YzgxM2UxZWE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-27T14:31:24Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Inline a function that is only ever used in one place", "tree": {"sha": "6df037f8030c2a69f0a95c01fa92e211ad3e85fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df037f8030c2a69f0a95c01fa92e211ad3e85fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e03edd287e774e737add22fd957e1cf4c813e1ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e03edd287e774e737add22fd957e1cf4c813e1ea", "html_url": "https://github.com/rust-lang/rust/commit/e03edd287e774e737add22fd957e1cf4c813e1ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e03edd287e774e737add22fd957e1cf4c813e1ea/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22477784a72ab1e5b26f8cb555f02e691d066898", "url": "https://api.github.com/repos/rust-lang/rust/commits/22477784a72ab1e5b26f8cb555f02e691d066898", "html_url": "https://github.com/rust-lang/rust/commit/22477784a72ab1e5b26f8cb555f02e691d066898"}], "stats": {"total": 70, "additions": 2, "deletions": 68}, "files": [{"sha": "b455e7f149dbcc1afa15cdd3d06952fe171f489b", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 2, "deletions": 68, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e03edd287e774e737add22fd957e1cf4c813e1ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e03edd287e774e737add22fd957e1cf4c813e1ea/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=e03edd287e774e737add22fd957e1cf4c813e1ea", "patch": "@@ -71,43 +71,6 @@ pub struct OpaqueHiddenType<'tcx> {\n }\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n-    /// Links the opaque type with the given hidden type\n-    /// and creates appropriate obligations. For example, given the input:\n-    ///\n-    ///     opaque = impl Iterator<Item = impl Debug>\n-    ///     hidden = std::vec::IntoIter<i32>\n-    ///\n-    /// this method would register the opaque type `impl Iterator` to have\n-    /// the hidden type `std::vec::IntoIter<i32>` and create the type variable\n-    /// `?1` but also the obligations:\n-    ///\n-    ///     std::vec::IntoIter<i32>: Iterator<Item = ?1>\n-    ///     ?1: Debug\n-    ///\n-    /// Moreover, it returns an `OpaqueTypeMap` that would map `?0` to\n-    /// info about the `impl Iterator<..>` type and `?1` to info about\n-    /// the `impl Debug` type.\n-    ///\n-    /// # Parameters\n-    ///\n-    /// - `parent_def_id` -- the `DefId` of the function in which the opaque type\n-    ///   is defined\n-    /// - `body_id` -- the body-id with which the resulting obligations should\n-    ///   be associated\n-    /// - `param_env` -- the in-scope parameter environment to be used for\n-    ///   obligations\n-    /// - `value` -- the value within which we are instantiating opaque types\n-    /// - `value_span` -- the span where the value came from, used in error reporting\n-    pub fn instantiate_opaque_types(\n-        &self,\n-        ty: Ty<'tcx>,\n-        opaque: Ty<'tcx>,\n-        cause: ObligationCause<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> Option<InferResult<'tcx, ()>> {\n-        Instantiator { infcx: self, cause, param_env }.fold_opaque_ty_new(opaque, |_, _| ty)\n-    }\n-\n     pub fn handle_opaque_type(\n         &self,\n         a: Ty<'tcx>,\n@@ -123,7 +86,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 if !matches!(a.kind(), ty::Opaque(..)) {\n                     return None;\n                 }\n-                self.instantiate_opaque_types(b, a, cause.clone(), param_env)\n+                Instantiator { infcx: self, cause: cause.clone(), param_env }\n+                    .fold_opaque_ty_new(a, |_, _| b)\n             };\n             if let Some(res) = process(a, b) {\n                 res\n@@ -298,36 +262,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// but this is not necessary, because the opaque type we\n     /// create will be allowed to reference `T`. So we only generate a\n     /// constraint that `'0: 'a`.\n-    ///\n-    /// # The `free_region_relations` parameter\n-    ///\n-    /// The `free_region_relations` argument is used to find the\n-    /// \"minimum\" of the regions supplied to a given opaque type.\n-    /// It must be a relation that can answer whether `'a <= 'b`,\n-    /// where `'a` and `'b` are regions that appear in the \"substs\"\n-    /// for the opaque type references (the `<'a>` in `Foo1<'a>`).\n-    ///\n-    /// Note that we do not impose the constraints based on the\n-    /// generic regions from the `Foo1` definition (e.g., `'x`). This\n-    /// is because the constraints we are imposing here is basically\n-    /// the concern of the one generating the constraining type C1,\n-    /// which is the current function. It also means that we can\n-    /// take \"implied bounds\" into account in some cases:\n-    ///\n-    /// ```text\n-    /// trait SomeTrait<'a, 'b> { }\n-    /// fn foo<'a, 'b>(_: &'a &'b u32) -> impl SomeTrait<'a, 'b> { .. }\n-    /// ```\n-    ///\n-    /// Here, the fact that `'b: 'a` is known only because of the\n-    /// implied bounds from the `&'a &'b u32` parameter, and is not\n-    /// \"inherent\" to the opaque type definition.\n-    ///\n-    /// # Parameters\n-    ///\n-    /// - `opaque_types` -- the map produced by `instantiate_opaque_types`\n-    /// - `free_region_relations` -- something that can be used to relate\n-    ///   the free regions (`'a`) that appear in the impl trait.\n     #[instrument(level = \"debug\", skip(self))]\n     pub fn register_member_constraints(\n         &self,"}]}