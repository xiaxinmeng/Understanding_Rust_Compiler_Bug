{"sha": "b30e428689c25a0934def940d397495315b1e62f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMGU0Mjg2ODljMjVhMDkzNGRlZjk0MGQzOTc0OTUzMTViMWU2MmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T22:38:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T22:38:33Z"}, "message": "Rollup merge of #84409 - mzohreva:mz/tls-dtors-before-join, r=jethrogb\n\nEnsure TLS destructors run before thread joins in SGX\n\nThe excellent test is from ```@jethrogb```\n\nFor context see: https://github.com/rust-lang/rust/pull/83416#discussion_r617282907", "tree": {"sha": "dbc22ca3f3cc3348e9ec50b11e78ecc65d05b19c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbc22ca3f3cc3348e9ec50b11e78ecc65d05b19c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30e428689c25a0934def940d397495315b1e62f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJglG/qCRBK7hj4Ov3rIwAAbQQIAJmOSve2NL/JNDG4kuUELrMT\njx+VbKr/rHtzcAha54iCt3F6t02Rg2+Y/Zne5miAyY6hRlnxC6OTqCpjPnNGcmra\nOC4Yr7wjPMzGaBbyfFWC/z3Dv3RxczEsXG8vdCtPZSHVr2C0TV86hfH0ujbAaQo9\nls6qsMmxvW0DClpchi+aMZ+PgmXwHBVZH1jO3jaWFNswMbpotNeXK2ZmAxj+HvKr\nz5RfuSV3HQ1MoTpzpgpqqIZ3ngsedMY38kNrjuplWI/j+9G4HWFsJSV3pgtCeNtd\nMKxqSTcHkBIgiU852Task7FU0unMEgMjo7VvdUwei9b3ZztQJHpmfe/IpsXTzxQ=\n=f1Aq\n-----END PGP SIGNATURE-----\n", "payload": "tree dbc22ca3f3cc3348e9ec50b11e78ecc65d05b19c\nparent 676ee14729462585b969bbc52f32c307403f4126\nparent 2acd62d7c389bcdcf212673ed14120d2fd841df6\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620340713 +0200\ncommitter GitHub <noreply@github.com> 1620340713 +0200\n\nRollup merge of #84409 - mzohreva:mz/tls-dtors-before-join, r=jethrogb\n\nEnsure TLS destructors run before thread joins in SGX\n\nThe excellent test is from ```@jethrogb```\n\nFor context see: https://github.com/rust-lang/rust/pull/83416#discussion_r617282907\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30e428689c25a0934def940d397495315b1e62f", "html_url": "https://github.com/rust-lang/rust/commit/b30e428689c25a0934def940d397495315b1e62f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30e428689c25a0934def940d397495315b1e62f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "676ee14729462585b969bbc52f32c307403f4126", "url": "https://api.github.com/repos/rust-lang/rust/commits/676ee14729462585b969bbc52f32c307403f4126", "html_url": "https://github.com/rust-lang/rust/commit/676ee14729462585b969bbc52f32c307403f4126"}, {"sha": "2acd62d7c389bcdcf212673ed14120d2fd841df6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acd62d7c389bcdcf212673ed14120d2fd841df6", "html_url": "https://github.com/rust-lang/rust/commit/2acd62d7c389bcdcf212673ed14120d2fd841df6"}], "stats": {"total": 183, "additions": 173, "deletions": 10}, "files": [{"sha": "f9536c4203df2928c9e65c25cac6686e964c9e5d", "filename": "library/std/src/sys/sgx/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=b30e428689c25a0934def940d397495315b1e62f", "patch": "@@ -62,10 +62,12 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> EntryReturn {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());\n-    let _tls_guard = unsafe { tls.activate() };\n+    let tls_guard = unsafe { tls.activate() };\n \n     if secondary {\n-        super::thread::Thread::entry();\n+        let join_notifier = super::thread::Thread::entry();\n+        drop(tls_guard);\n+        drop(join_notifier);\n \n         EntryReturn(0, 0)\n     } else {"}, {"sha": "67e2e8b59d397d8e14ce783c414fff0d39b8f07c", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 61, "deletions": 8, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=b30e428689c25a0934def940d397495315b1e62f", "patch": "@@ -9,26 +9,37 @@ pub struct Thread(task_queue::JoinHandle);\n \n pub const DEFAULT_MIN_STACK_SIZE: usize = 4096;\n \n+pub use self::task_queue::JoinNotifier;\n+\n mod task_queue {\n-    use crate::sync::mpsc;\n+    use super::wait_notify;\n     use crate::sync::{Mutex, MutexGuard, Once};\n \n-    pub type JoinHandle = mpsc::Receiver<()>;\n+    pub type JoinHandle = wait_notify::Waiter;\n+\n+    pub struct JoinNotifier(Option<wait_notify::Notifier>);\n+\n+    impl Drop for JoinNotifier {\n+        fn drop(&mut self) {\n+            self.0.take().unwrap().notify();\n+        }\n+    }\n \n     pub(super) struct Task {\n         p: Box<dyn FnOnce()>,\n-        done: mpsc::Sender<()>,\n+        done: JoinNotifier,\n     }\n \n     impl Task {\n         pub(super) fn new(p: Box<dyn FnOnce()>) -> (Task, JoinHandle) {\n-            let (done, recv) = mpsc::channel();\n+            let (done, recv) = wait_notify::new();\n+            let done = JoinNotifier(Some(done));\n             (Task { p, done }, recv)\n         }\n \n-        pub(super) fn run(self) {\n+        pub(super) fn run(self) -> JoinNotifier {\n             (self.p)();\n-            let _ = self.done.send(());\n+            self.done\n         }\n     }\n \n@@ -47,6 +58,48 @@ mod task_queue {\n     }\n }\n \n+/// This module provides a synchronization primitive that does not use thread\n+/// local variables. This is needed for signaling that a thread has finished\n+/// execution. The signal is sent once all TLS destructors have finished at\n+/// which point no new thread locals should be created.\n+pub mod wait_notify {\n+    use super::super::waitqueue::{SpinMutex, WaitQueue, WaitVariable};\n+    use crate::sync::Arc;\n+\n+    pub struct Notifier(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Notifier {\n+        /// Notify the waiter. The waiter is either notified right away (if\n+        /// currently blocked in `Waiter::wait()`) or later when it calls the\n+        /// `Waiter::wait()` method.\n+        pub fn notify(self) {\n+            let mut guard = self.0.lock();\n+            *guard.lock_var_mut() = true;\n+            let _ = WaitQueue::notify_one(guard);\n+        }\n+    }\n+\n+    pub struct Waiter(Arc<SpinMutex<WaitVariable<bool>>>);\n+\n+    impl Waiter {\n+        /// Wait for a notification. If `Notifier::notify()` has already been\n+        /// called, this will return immediately, otherwise the current thread\n+        /// is blocked until notified.\n+        pub fn wait(self) {\n+            let guard = self.0.lock();\n+            if *guard.lock_var() {\n+                return;\n+            }\n+            WaitQueue::wait(guard, || {});\n+        }\n+    }\n+\n+    pub fn new() -> (Notifier, Waiter) {\n+        let inner = Arc::new(SpinMutex::new(WaitVariable::new(false)));\n+        (Notifier(inner.clone()), Waiter(inner))\n+    }\n+}\n+\n impl Thread {\n     // unsafe: see thread::Builder::spawn_unchecked for safety requirements\n     pub unsafe fn new(_stack: usize, p: Box<dyn FnOnce()>) -> io::Result<Thread> {\n@@ -57,7 +110,7 @@ impl Thread {\n         Ok(Thread(handle))\n     }\n \n-    pub(super) fn entry() {\n+    pub(super) fn entry() -> JoinNotifier {\n         let mut pending_tasks = task_queue::lock();\n         let task = rtunwrap!(Some, pending_tasks.pop());\n         drop(pending_tasks); // make sure to not hold the task queue lock longer than necessary\n@@ -78,7 +131,7 @@ impl Thread {\n     }\n \n     pub fn join(self) {\n-        let _ = self.0.recv();\n+        self.0.wait();\n     }\n }\n "}, {"sha": "f33d6129619318e8774303d9b77b930de34093f5", "filename": "library/std/src/thread/local/tests.rs", "status": "modified", "additions": 108, "deletions": 0, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30e428689c25a0934def940d397495315b1e62f/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal%2Ftests.rs?ref=b30e428689c25a0934def940d397495315b1e62f", "patch": "@@ -1,4 +1,5 @@\n use crate::cell::{Cell, UnsafeCell};\n+use crate::sync::atomic::{AtomicU8, Ordering};\n use crate::sync::mpsc::{channel, Sender};\n use crate::thread::{self, LocalKey};\n use crate::thread_local;\n@@ -207,3 +208,110 @@ fn dtors_in_dtors_in_dtors_const_init() {\n     });\n     rx.recv().unwrap();\n }\n+\n+// This test tests that TLS destructors have run before the thread joins. The\n+// test has no false positives (meaning: if the test fails, there's actually\n+// an ordering problem). It may have false negatives, where the test passes but\n+// join is not guaranteed to be after the TLS destructors. However, false\n+// negatives should be exceedingly rare due to judicious use of\n+// thread::yield_now and running the test several times.\n+#[test]\n+fn join_orders_after_tls_destructors() {\n+    // We emulate a synchronous MPSC rendezvous channel using only atomics and\n+    // thread::yield_now. We can't use std::mpsc as the implementation itself\n+    // may rely on thread locals.\n+    //\n+    // The basic state machine for an SPSC rendezvous channel is:\n+    //           FRESH -> THREAD1_WAITING -> MAIN_THREAD_RENDEZVOUS\n+    // where the first transition is done by the \u201creceiving\u201d thread and the 2nd\n+    // transition is done by the \u201csending\u201d thread.\n+    //\n+    // We add an additional state `THREAD2_LAUNCHED` between `FRESH` and\n+    // `THREAD1_WAITING` to block until all threads are actually running.\n+    //\n+    // A thread that joins on the \u201creceiving\u201d thread completion should never\n+    // observe the channel in the `THREAD1_WAITING` state. If this does occur,\n+    // we switch to the \u201cpoison\u201d state `THREAD2_JOINED` and panic all around.\n+    // (This is equivalent to \u201csending\u201d from an alternate producer thread.)\n+    const FRESH: u8 = 0;\n+    const THREAD2_LAUNCHED: u8 = 1;\n+    const THREAD1_WAITING: u8 = 2;\n+    const MAIN_THREAD_RENDEZVOUS: u8 = 3;\n+    const THREAD2_JOINED: u8 = 4;\n+    static SYNC_STATE: AtomicU8 = AtomicU8::new(FRESH);\n+\n+    for _ in 0..10 {\n+        SYNC_STATE.store(FRESH, Ordering::SeqCst);\n+\n+        let jh = thread::Builder::new()\n+            .name(\"thread1\".into())\n+            .spawn(move || {\n+                struct TlDrop;\n+\n+                impl Drop for TlDrop {\n+                    fn drop(&mut self) {\n+                        let mut sync_state = SYNC_STATE.swap(THREAD1_WAITING, Ordering::SeqCst);\n+                        loop {\n+                            match sync_state {\n+                                THREAD2_LAUNCHED | THREAD1_WAITING => thread::yield_now(),\n+                                MAIN_THREAD_RENDEZVOUS => break,\n+                                THREAD2_JOINED => panic!(\n+                                    \"Thread 1 still running after thread 2 joined on thread 1\"\n+                                ),\n+                                v => unreachable!(\"sync state: {}\", v),\n+                            }\n+                            sync_state = SYNC_STATE.load(Ordering::SeqCst);\n+                        }\n+                    }\n+                }\n+\n+                thread_local! {\n+                    static TL_DROP: TlDrop = TlDrop;\n+                }\n+\n+                TL_DROP.with(|_| {});\n+\n+                loop {\n+                    match SYNC_STATE.load(Ordering::SeqCst) {\n+                        FRESH => thread::yield_now(),\n+                        THREAD2_LAUNCHED => break,\n+                        v => unreachable!(\"sync state: {}\", v),\n+                    }\n+                }\n+            })\n+            .unwrap();\n+\n+        let jh2 = thread::Builder::new()\n+            .name(\"thread2\".into())\n+            .spawn(move || {\n+                assert_eq!(SYNC_STATE.swap(THREAD2_LAUNCHED, Ordering::SeqCst), FRESH);\n+                jh.join().unwrap();\n+                match SYNC_STATE.swap(THREAD2_JOINED, Ordering::SeqCst) {\n+                    MAIN_THREAD_RENDEZVOUS => return,\n+                    THREAD2_LAUNCHED | THREAD1_WAITING => {\n+                        panic!(\"Thread 2 running after thread 1 join before main thread rendezvous\")\n+                    }\n+                    v => unreachable!(\"sync state: {:?}\", v),\n+                }\n+            })\n+            .unwrap();\n+\n+        loop {\n+            match SYNC_STATE.compare_exchange_weak(\n+                THREAD1_WAITING,\n+                MAIN_THREAD_RENDEZVOUS,\n+                Ordering::SeqCst,\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => break,\n+                Err(FRESH) => thread::yield_now(),\n+                Err(THREAD2_LAUNCHED) => thread::yield_now(),\n+                Err(THREAD2_JOINED) => {\n+                    panic!(\"Main thread rendezvous after thread 2 joined thread 1\")\n+                }\n+                v => unreachable!(\"sync state: {:?}\", v),\n+            }\n+        }\n+        jh2.join().unwrap();\n+    }\n+}"}]}