{"sha": "4030b7394845602eebb42f40c0e847be803af58f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMzBiNzM5NDg0NTYwMmVlYmI0MmY0MGMwZTg0N2JlODAzYWY1OGY=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-07-02T20:03:59Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2020-07-02T20:03:59Z"}, "message": "Use `Span`s to identify unreachable subpatterns in or-patterns", "tree": {"sha": "5820083f29efa868c69ff21949dec536d9c80cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5820083f29efa868c69ff21949dec536d9c80cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4030b7394845602eebb42f40c0e847be803af58f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4030b7394845602eebb42f40c0e847be803af58f", "html_url": "https://github.com/rust-lang/rust/commit/4030b7394845602eebb42f40c0e847be803af58f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4030b7394845602eebb42f40c0e847be803af58f/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "html_url": "https://github.com/rust-lang/rust/commit/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "b5a655e4218f1f1d395330ae241b5395ea238d74", "filename": "src/librustc_mir_build/hair/pattern/_match.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4030b7394845602eebb42f40c0e847be803af58f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030b7394845602eebb42f40c0e847be803af58f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2F_match.rs?ref=4030b7394845602eebb42f40c0e847be803af58f", "patch": "@@ -1246,15 +1246,15 @@ impl<'p, 'tcx> Fields<'p, 'tcx> {\n }\n \n #[derive(Clone, Debug)]\n-crate enum Usefulness<'tcx, 'p> {\n+crate enum Usefulness<'tcx> {\n     /// Carries a list of unreachable subpatterns. Used only in the presence of or-patterns.\n-    Useful(Vec<&'p Pat<'tcx>>),\n+    Useful(Vec<Span>),\n     /// Carries a list of witnesses of non-exhaustiveness.\n     UsefulWithWitness(Vec<Witness<'tcx>>),\n     NotUseful,\n }\n \n-impl<'tcx, 'p> Usefulness<'tcx, 'p> {\n+impl<'tcx> Usefulness<'tcx> {\n     fn new_useful(preference: WitnessPreference) -> Self {\n         match preference {\n             ConstructWitness => UsefulWithWitness(vec![Witness(vec![])]),\n@@ -1269,7 +1269,7 @@ impl<'tcx, 'p> Usefulness<'tcx, 'p> {\n         }\n     }\n \n-    fn apply_constructor(\n+    fn apply_constructor<'p>(\n         self,\n         cx: &MatchCheckCtxt<'p, 'tcx>,\n         ctor: &Constructor<'tcx>,\n@@ -1828,7 +1828,7 @@ crate fn is_useful<'p, 'tcx>(\n     hir_id: HirId,\n     is_under_guard: bool,\n     is_top_level: bool,\n-) -> Usefulness<'tcx, 'p> {\n+) -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n     debug!(\"is_useful({:#?}, {:#?})\", matrix, v);\n \n@@ -1861,7 +1861,7 @@ crate fn is_useful<'p, 'tcx>(\n                     any_is_useful = true;\n                     unreachable_pats.extend(pats);\n                 }\n-                NotUseful => unreachable_pats.push(v.head()),\n+                NotUseful => unreachable_pats.push(v.head().span),\n                 UsefulWithWitness(_) => {\n                     bug!(\"Encountered or-pat in `v` during exhaustiveness checking\")\n                 }\n@@ -2014,7 +2014,7 @@ fn is_useful_specialized<'p, 'tcx>(\n     witness_preference: WitnessPreference,\n     hir_id: HirId,\n     is_under_guard: bool,\n-) -> Usefulness<'tcx, 'p> {\n+) -> Usefulness<'tcx> {\n     debug!(\"is_useful_specialized({:#?}, {:#?}, {:?})\", v, ctor, ty);\n \n     // We cache the result of `Fields::wildcards` because it is used a lot."}, {"sha": "6b8110fde691473c2e4003f14d6ac07500dab5f1", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4030b7394845602eebb42f40c0e847be803af58f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4030b7394845602eebb42f40c0e847be803af58f/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=4030b7394845602eebb42f40c0e847be803af58f", "patch": "@@ -392,8 +392,8 @@ fn check_arms<'p, 'tcx>(\n                 }\n             }\n             Useful(unreachable_subpatterns) => {\n-                for pat in unreachable_subpatterns {\n-                    unreachable_pattern(cx.tcx, pat.span, id, None);\n+                for span in unreachable_subpatterns {\n+                    unreachable_pattern(cx.tcx, span, id, None);\n                 }\n             }\n             UsefulWithWitness(_) => bug!(),"}]}