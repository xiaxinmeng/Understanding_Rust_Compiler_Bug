{"sha": "5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjODJiNjRjZTY1YWZmOGQzYmE5MWY0MjQzZGYzYTI0ZDk0MzBlMzU=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-03-14T00:59:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-14T00:59:23Z"}, "message": "Merge pull request #148 from dwrensha/write-bytes-intrinsic\n\nimplement the write_bytes() intrinsic", "tree": {"sha": "fd643cf496dfcb4373650f85c1c704c180ee0154", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd643cf496dfcb4373650f85c1c704c180ee0154"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "html_url": "https://github.com/rust-lang/rust/commit/5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c82b64ce65aff8d3ba91f4243df3a24d9430e35/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeb13c4b95a8291625a375df6d4d2122606e0aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeb13c4b95a8291625a375df6d4d2122606e0aa", "html_url": "https://github.com/rust-lang/rust/commit/feeb13c4b95a8291625a375df6d4d2122606e0aa"}, {"sha": "41c2aa677a0ad0e6ff7e77e738b410d7ed3d2980", "url": "https://api.github.com/repos/rust-lang/rust/commits/41c2aa677a0ad0e6ff7e77e738b410d7ed3d2980", "html_url": "https://github.com/rust-lang/rust/commit/41c2aa677a0ad0e6ff7e77e738b410d7ed3d2980"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "51404e7d13198780dee2eeef996b99891d5d72f8", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5c82b64ce65aff8d3ba91f4243df3a24d9430e35/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c82b64ce65aff8d3ba91f4243df3a24d9430e35/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "patch": "@@ -402,6 +402,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 }\n             }\n \n+            \"write_bytes\" => {\n+                let u8 = self.tcx.types.u8;\n+                let ty = substs.type_at(0);\n+                let ty_align = self.type_align(ty)?;\n+                let val_byte = self.value_to_primval(arg_vals[1], u8)?.to_u128()? as u8;\n+                let size = self.type_size(ty)?.expect(\"write_bytes() type must be sized\");\n+                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n+                let count = self.value_to_primval(arg_vals[2], usize)?.to_u64()?;\n+                self.memory.check_align(ptr, size * count, ty_align)?;\n+                self.memory.write_repeat(ptr, val_byte, size * count)?;\n+            }\n+\n             name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),\n         }\n "}, {"sha": "7c9a38fca696dd3e9401c355cb79b5ad00233cc4", "filename": "tests/run-pass/write-bytes.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5c82b64ce65aff8d3ba91f4243df3a24d9430e35/tests%2Frun-pass%2Fwrite-bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c82b64ce65aff8d3ba91f4243df3a24d9430e35/tests%2Frun-pass%2Fwrite-bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fwrite-bytes.rs?ref=5c82b64ce65aff8d3ba91f4243df3a24d9430e35", "patch": "@@ -0,0 +1,45 @@\n+#[repr(C)]\n+#[derive(Copy, Clone)]\n+struct Foo {\n+    a: u64,\n+    b: u64,\n+    c: u64,\n+}\n+\n+fn main() {\n+    const LENGTH: usize = 10;\n+    let mut v: [u64; LENGTH] = [0; LENGTH];\n+\n+    for idx in 0..LENGTH {\n+        assert_eq!(v[idx], 0);\n+    }\n+\n+    unsafe {\n+        let p = v.as_mut_ptr();\n+        ::std::ptr::write_bytes(p, 0xab, LENGTH);\n+    }\n+\n+    for idx in 0..LENGTH {\n+        assert_eq!(v[idx], 0xabababababababab);\n+    }\n+\n+    // -----\n+\n+    let mut w: [Foo; LENGTH] = [Foo { a: 0, b: 0, c: 0 }; LENGTH];\n+    for idx in 0..LENGTH {\n+        assert_eq!(w[idx].a, 0);\n+        assert_eq!(w[idx].b, 0);\n+        assert_eq!(w[idx].c, 0);\n+    }\n+\n+    unsafe {\n+        let p = w.as_mut_ptr();\n+        ::std::ptr::write_bytes(p, 0xcd, LENGTH);\n+    }\n+\n+    for idx in 0..LENGTH {\n+        assert_eq!(w[idx].a, 0xcdcdcdcdcdcdcdcd);\n+        assert_eq!(w[idx].b, 0xcdcdcdcdcdcdcdcd);\n+        assert_eq!(w[idx].c, 0xcdcdcdcdcdcdcdcd);\n+    }\n+}"}]}