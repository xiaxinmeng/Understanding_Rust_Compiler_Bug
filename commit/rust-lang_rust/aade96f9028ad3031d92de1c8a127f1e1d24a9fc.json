{"sha": "aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "node_id": "C_kwDOAAsO6NoAKGFhZGU5NmY5MDI4YWQzMDMxZDkyZGUxYzhhMTI3ZjFlMWQyNGE5ZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T14:29:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-14T14:29:22Z"}, "message": "Auto merge of #8626 - pitaj:format_add_string, r=llogiq\n\nNew lint `format_add_strings`\n\nCloses #6261\n\nchangelog: Added [`format_add_string`]: recommend using `write!` instead of appending the result of  `format!`", "tree": {"sha": "37b6af955695aeaba9dacb8e80b26854f3a76b88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37b6af955695aeaba9dacb8e80b26854f3a76b88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "html_url": "https://github.com/rust-lang/rust/commit/aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb3c3fc7edd43d6848f57f559bbddca1fae2e86", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb3c3fc7edd43d6848f57f559bbddca1fae2e86", "html_url": "https://github.com/rust-lang/rust/commit/ecb3c3fc7edd43d6848f57f559bbddca1fae2e86"}, {"sha": "67badbeef6ce5452cc47f2463d7146048ce64625", "url": "https://api.github.com/repos/rust-lang/rust/commits/67badbeef6ce5452cc47f2463d7146048ce64625", "html_url": "https://github.com/rust-lang/rust/commit/67badbeef6ce5452cc47f2463d7146048ce64625"}], "stats": {"total": 208, "additions": 163, "deletions": 45}, "files": [{"sha": "39786c08156dc627da3c9a4263f71e155b84fdbb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -3314,6 +3314,7 @@ Released 2018-09-13\n [`forget_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`format_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_in_format_args\n+[`format_push_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#format_push_string\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n [`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`from_str_radix_10`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_str_radix_10"}, {"sha": "10f67d301f887d5893974cdf2e8292da2f230007", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -1,5 +1,6 @@\n use crate::clippy_project_root;\n use indoc::indoc;\n+use std::fmt::Write as _;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::io::{self, ErrorKind};\n@@ -232,7 +233,8 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         )\n     });\n \n-    result.push_str(&format!(\n+    let _ = write!(\n+        result,\n         indoc! {r#\"\n             declare_clippy_lint! {{\n                 /// ### What it does\n@@ -256,7 +258,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         version = version,\n         name_upper = name_upper,\n         category = category,\n-    ));\n+    );\n \n     result.push_str(&if enable_msrv {\n         format!("}, {"sha": "d25e42f2468bcaeee9961e177103c8e70d723559", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -217,12 +217,13 @@ fn gen_lint_group_list<'a>(group_name: &str, lints: impl Iterator<Item = &'a Lin\n \n     let mut output = GENERATED_FILE_COMMENT.to_string();\n \n-    output.push_str(&format!(\n-        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\\n\",\n+    let _ = writeln!(\n+        output,\n+        \"store.register_group(true, \\\"clippy::{0}\\\", Some(\\\"clippy_{0}\\\"), vec![\",\n         group_name\n-    ));\n+    );\n     for (module, name) in details {\n-        output.push_str(&format!(\"    LintId::of({}::{}),\\n\", module, name));\n+        let _ = writeln!(output, \"    LintId::of({}::{}),\", module, name);\n     }\n     output.push_str(\"])\\n\");\n \n@@ -235,15 +236,16 @@ fn gen_deprecated(lints: &[DeprecatedLint]) -> String {\n     let mut output = GENERATED_FILE_COMMENT.to_string();\n     output.push_str(\"{\\n\");\n     for lint in lints {\n-        output.push_str(&format!(\n+        let _ = write!(\n+            output,\n             concat!(\n                 \"    store.register_removed(\\n\",\n                 \"        \\\"clippy::{}\\\",\\n\",\n                 \"        \\\"{}\\\",\\n\",\n                 \"    );\\n\"\n             ),\n             lint.name, lint.reason,\n-        ));\n+        );\n     }\n     output.push_str(\"}\\n\");\n \n@@ -269,7 +271,7 @@ fn gen_register_lint_list<'a>(\n         if !is_public {\n             output.push_str(\"    #[cfg(feature = \\\"internal\\\")]\\n\");\n         }\n-        output.push_str(&format!(\"    {}::{},\\n\", module_name, lint_name));\n+        let _ = writeln!(output, \"    {}::{},\", module_name, lint_name);\n     }\n     output.push_str(\"])\\n\");\n "}, {"sha": "ee15ae9f59aca8eb96429d52464b3c53ae689a5b", "filename": "clippy_lints/src/format_push_string.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Fformat_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Fformat_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat_push_string.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -0,0 +1,77 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_def_path, paths, peel_hir_expr_refs};\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Detects cases where the result of a `format!` call is\n+    /// appended to an existing `String`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Introduces an extra, avoidable heap allocation.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let mut s = String::new();\n+    /// s += &format!(\"0x{:X}\", 1024);\n+    /// s.push_str(&format!(\"0x{:X}\", 1024));\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// use std::fmt::Write as _; // import without risk of name clashing\n+    ///\n+    /// let mut s = String::new();\n+    /// let _ = write!(s, \"0x{:X}\", 1024);\n+    /// ```\n+    #[clippy::version = \"1.61.0\"]\n+    pub FORMAT_PUSH_STRING,\n+    perf,\n+    \"`format!(..)` appended to existing `String`\"\n+}\n+declare_lint_pass!(FormatPushString => [FORMAT_PUSH_STRING]);\n+\n+fn is_string(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(e).peel_refs(), sym::String)\n+}\n+fn is_format(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n+    if let Some(macro_def_id) = e.span.ctxt().outer_expn_data().macro_def_id {\n+        cx.tcx.get_diagnostic_name(macro_def_id) == Some(sym::format_macro)\n+    } else {\n+        false\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for FormatPushString {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let arg = match expr.kind {\n+            ExprKind::MethodCall(_, [_, arg], _) => {\n+                if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) &&\n+                match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n+                    arg\n+                } else {\n+                    return;\n+                }\n+            }\n+            ExprKind::AssignOp(op, left, arg)\n+            if op.node == BinOpKind::Add && is_string(cx, left) => {\n+                arg\n+            },\n+            _ => return,\n+        };\n+        let (arg, _) = peel_hir_expr_refs(arg);\n+        if is_format(cx, arg) {\n+            span_lint_and_help(\n+                cx,\n+                FORMAT_PUSH_STRING,\n+                expr.span,\n+                \"`format!(..)` appended to existing `String`\",\n+                None,\n+                \"consider using `write!` to avoid the extra allocation\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "14b22d2b50d054fdec8e0061666bf02d381bd518", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n+use std::fmt::Write as _;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -89,7 +90,7 @@ impl<'tcx> LateLintPass<'tcx> for InconsistentStructConstructor {\n                 let mut fields_snippet = String::new();\n                 let (last_ident, idents) = ordered_fields.split_last().unwrap();\n                 for ident in idents {\n-                    fields_snippet.push_str(&format!(\"{}, \", ident));\n+                    let _ = write!(fields_snippet, \"{}, \", ident);\n                 }\n                 fields_snippet.push_str(&last_ident.to_string());\n "}, {"sha": "2fa5973336596c6266f9208859928a97518dc63d", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -77,6 +77,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(format_impl::RECURSIVE_FORMAT_IMPL),\n+    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n     LintId::of(formatting::POSSIBLE_MISSING_COMMA),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n     LintId::of(formatting::SUSPICIOUS_ELSE_FORMATTING),"}, {"sha": "c608f634291f8e08e4ea7c01c2f4691c12077f11", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -165,6 +165,7 @@ store.register_lints(&[\n     format_args::TO_STRING_IN_FORMAT_ARGS,\n     format_impl::PRINT_IN_FORMAT_IMPL,\n     format_impl::RECURSIVE_FORMAT_IMPL,\n+    format_push_string::FORMAT_PUSH_STRING,\n     formatting::POSSIBLE_MISSING_COMMA,\n     formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n     formatting::SUSPICIOUS_ELSE_FORMATTING,"}, {"sha": "8f361fdad4ac459cc2cda617c11787a10ca9efc2", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),\n     LintId::of(format_args::TO_STRING_IN_FORMAT_ARGS),\n+    LintId::of(format_push_string::FORMAT_PUSH_STRING),\n     LintId::of(large_const_arrays::LARGE_CONST_ARRAYS),\n     LintId::of(large_enum_variant::LARGE_ENUM_VARIANT),\n     LintId::of(loops::MANUAL_MEMCPY),"}, {"sha": "88e8a0cc2af0470b598732c2a17cfc4c64545e0f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -231,6 +231,7 @@ mod floating_point_arithmetic;\n mod format;\n mod format_args;\n mod format_impl;\n+mod format_push_string;\n mod formatting;\n mod from_over_into;\n mod from_str_radix_10;\n@@ -873,6 +874,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n     store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n+    store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "1551d0ecb74026b753a6becdb402d8a43e396aae", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -14,6 +14,7 @@ use rustc_hir::{\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n+use std::fmt::Write as _;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -184,19 +185,19 @@ impl TraitBounds {\n                     for b in v.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\n+                            let _ = write!(hint_string,\n                                 \" {} +\",\n                                 snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            ));\n+                            );\n                         }\n                     }\n                     for b in p.bounds.iter() {\n                         if let GenericBound::Trait(ref poly_trait_ref, _) = b {\n                             let path = &poly_trait_ref.trait_ref.path;\n-                            hint_string.push_str(&format!(\n+                            let _ = write!(hint_string,\n                                 \" {} +\",\n                                 snippet_with_applicability(cx, path.span, \"..\", &mut applicability)\n-                            ));\n+                            );\n                         }\n                     }\n                     hint_string.truncate(hint_string.len() - 2);"}, {"sha": "ffd2b5aabcf0ecb68985c23af1d01177e4f4e380", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -18,7 +18,7 @@ use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n use std::convert::TryInto;\n-use std::fmt::Display;\n+use std::fmt::{Display, Write as _};\n use std::iter;\n use std::ops::{Add, Neg, Not, Sub};\n \n@@ -901,7 +901,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n             if cmt.place.projections.is_empty() {\n                 // handle item without any projection, that needs an explicit borrowing\n                 // i.e.: suggest `&x` instead of `x`\n-                self.suggestion_start.push_str(&format!(\"{}&{}\", start_snip, ident_str));\n+                let _ = write!(self.suggestion_start, \"{}&{}\", start_snip, ident_str);\n             } else {\n                 // cases where a parent `Call` or `MethodCall` is using the item\n                 // i.e.: suggest `.contains(&x)` for `.find(|x| [1, 2, 3].contains(x)).is_none()`\n@@ -916,8 +916,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                         // given expression is the self argument and will be handled completely by the compiler\n                         // i.e.: `|x| x.is_something()`\n                         ExprKind::MethodCall(_, [self_expr, ..], _) if self_expr.hir_id == cmt.hir_id => {\n-                            self.suggestion_start\n-                                .push_str(&format!(\"{}{}\", start_snip, ident_str_with_proj));\n+                            let _ = write!(self.suggestion_start, \"{}{}\", start_snip, ident_str_with_proj);\n                             self.next_pos = span.hi();\n                             return;\n                         },\n@@ -1025,8 +1024,7 @@ impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n                     }\n                 }\n \n-                self.suggestion_start\n-                    .push_str(&format!(\"{}{}\", start_snip, replacement_str));\n+                let _ = write!(self.suggestion_start, \"{}{}\", start_snip, replacement_str);\n             }\n             self.next_pos = span.hi();\n         }"}, {"sha": "16cf728e3cb0f41a4113949e25f99a991c803463", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::collapsible_else_if)]\n \n use std::ffi::OsStr;\n+use std::fmt::Write as _;\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::{collections::HashMap, io::ErrorKind};\n@@ -110,11 +111,12 @@ impl ClippyWarning {\n             let lint = format!(\"`{}`\", self.linttype);\n \n             let mut output = String::from(\"| \");\n-            output.push_str(&format!(\n+            let _ = write!(\n+                output,\n                 \"[`{}`](../target/lintcheck/sources/{}#L{})\",\n                 file_with_pos, file, self.line\n-            ));\n-            output.push_str(&format!(r#\" | {:<50} | \"{}\" |\"#, lint, self.message));\n+            );\n+            let _ = write!(output, r#\" | {:<50} | \"{}\" |\"#, lint, self.message);\n             output.push('\\n');\n             output\n         } else {\n@@ -835,10 +837,11 @@ pub fn main() {\n         text.push_str(\"| file | lint | message |\\n\");\n         text.push_str(\"| --- | --- | --- |\\n\");\n     }\n-    text.push_str(&format!(\"{}\", all_msgs.join(\"\")));\n+    write!(text, \"{}\", all_msgs.join(\"\"));\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n-    ices.iter()\n-        .for_each(|(cratename, msg)| text.push_str(&format!(\"{}: '{}'\", cratename, msg)));\n+    for (cratename, msg) in ices.iter() {\n+        let _ = write!(text, \"{}: '{}'\", cratename, msg);\n+    }\n \n     println!(\"Writing logs to {}\", config.lintcheck_results_path.display());\n     std::fs::create_dir_all(config.lintcheck_results_path.parent().unwrap()).unwrap();"}, {"sha": "4db13d650eb18f8b734e7b36e57ec9e3d7d40d30", "filename": "tests/ui/format_push_string.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fformat_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fformat_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_push_string.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -0,0 +1,7 @@\n+#![warn(clippy::format_push_string)]\n+\n+fn main() {\n+    let mut string = String::new();\n+    string += &format!(\"{:?}\", 1234);\n+    string.push_str(&format!(\"{:?}\", 5678));\n+}"}, {"sha": "953784bcc0684748ba65d296931fb27fb8015c04", "filename": "tests/ui/format_push_string.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fformat_push_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fformat_push_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat_push_string.stderr?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -0,0 +1,19 @@\n+error: `format!(..)` appended to existing `String`\n+  --> $DIR/format_push_string.rs:5:5\n+   |\n+LL |     string += &format!(\"{:?}\", 1234);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::format-push-string` implied by `-D warnings`\n+   = help: consider using `write!` to avoid the extra allocation\n+\n+error: `format!(..)` appended to existing `String`\n+  --> $DIR/format_push_string.rs:6:5\n+   |\n+LL |     string.push_str(&format!(\"{:?}\", 5678));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using `write!` to avoid the extra allocation\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9d39d7696354c50c1c9534f7af6175c20de9b8b6", "filename": "tests/ui/identity_op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt::Write as _;\n+\n const ONE: i64 = 1;\n const NEG_ONE: i64 = -1;\n const ZERO: i64 = 0;\n@@ -7,7 +9,7 @@ struct A(String);\n impl std::ops::Shl<i32> for A {\n     type Output = A;\n     fn shl(mut self, other: i32) -> Self {\n-        self.0.push_str(&format!(\"{}\", other));\n+        let _ = write!(self.0, \"{}\", other);\n         self\n     }\n }"}, {"sha": "e3c156b54291e5edf9471b61a218d065fafc9894", "filename": "tests/ui/identity_op.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aade96f9028ad3031d92de1c8a127f1e1d24a9fc/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=aade96f9028ad3031d92de1c8a127f1e1d24a9fc", "patch": "@@ -1,109 +1,109 @@\n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:37:5\n+  --> $DIR/identity_op.rs:39:5\n    |\n LL |     x + 0;\n    |     ^^^^^\n    |\n    = note: `-D clippy::identity-op` implied by `-D warnings`\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:38:5\n+  --> $DIR/identity_op.rs:40:5\n    |\n LL |     x + (1 - 1);\n    |     ^^^^^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:40:5\n+  --> $DIR/identity_op.rs:42:5\n    |\n LL |     0 + x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:43:5\n+  --> $DIR/identity_op.rs:45:5\n    |\n LL |     x | (0);\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:46:5\n+  --> $DIR/identity_op.rs:48:5\n    |\n LL |     x * 1;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:47:5\n+  --> $DIR/identity_op.rs:49:5\n    |\n LL |     1 * x;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:53:5\n+  --> $DIR/identity_op.rs:55:5\n    |\n LL |     -1 & x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `u`\n-  --> $DIR/identity_op.rs:56:5\n+  --> $DIR/identity_op.rs:58:5\n    |\n LL |     u & 255;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:59:5\n+  --> $DIR/identity_op.rs:61:5\n    |\n LL |     42 << 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:60:5\n+  --> $DIR/identity_op.rs:62:5\n    |\n LL |     1 >> 0;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `42`\n-  --> $DIR/identity_op.rs:61:5\n+  --> $DIR/identity_op.rs:63:5\n    |\n LL |     42 >> 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `&x`\n-  --> $DIR/identity_op.rs:62:5\n+  --> $DIR/identity_op.rs:64:5\n    |\n LL |     &x >> 0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `x`\n-  --> $DIR/identity_op.rs:63:5\n+  --> $DIR/identity_op.rs:65:5\n    |\n LL |     x >> &0;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `2`\n-  --> $DIR/identity_op.rs:70:5\n+  --> $DIR/identity_op.rs:72:5\n    |\n LL |     2 % 3;\n    |     ^^^^^\n \n error: the operation is ineffective. Consider reducing it to `-2`\n-  --> $DIR/identity_op.rs:71:5\n+  --> $DIR/identity_op.rs:73:5\n    |\n LL |     -2 % 3;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `2`\n-  --> $DIR/identity_op.rs:72:5\n+  --> $DIR/identity_op.rs:74:5\n    |\n LL |     2 % -3 + x;\n    |     ^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `-2`\n-  --> $DIR/identity_op.rs:73:5\n+  --> $DIR/identity_op.rs:75:5\n    |\n LL |     -2 % -3 + x;\n    |     ^^^^^^^\n \n error: the operation is ineffective. Consider reducing it to `1`\n-  --> $DIR/identity_op.rs:74:9\n+  --> $DIR/identity_op.rs:76:9\n    |\n LL |     x + 1 % 3;\n    |         ^^^^^"}]}