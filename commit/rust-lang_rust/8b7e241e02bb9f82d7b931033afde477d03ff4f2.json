{"sha": "8b7e241e02bb9f82d7b931033afde477d03ff4f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiN2UyNDFlMDJiYjlmODJkN2I5MzEwMzNhZmRlNDc3ZDAzZmY0ZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T09:10:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-31T09:10:24Z"}, "message": "auto merge of #8139 : brson/rust/rm-old-task-apis, r=pcwalton\n\nThis removes a bunch of options from the task builder interface that are irrelevant to the new scheduler and were generally unused anyway. It also bumps the stack size of new scheduler tasks so that there's enough room to run rustc and changes the interface to `Thread` to not implicitly join threads on destruction, but instead require an explicit, and mandatory, call to `join`.", "tree": {"sha": "84f3b2d5a4f8f81f86b7a04ab937d4a0d18a8366", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f3b2d5a4f8f81f86b7a04ab937d4a0d18a8366"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7e241e02bb9f82d7b931033afde477d03ff4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e241e02bb9f82d7b931033afde477d03ff4f2", "html_url": "https://github.com/rust-lang/rust/commit/8b7e241e02bb9f82d7b931033afde477d03ff4f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7e241e02bb9f82d7b931033afde477d03ff4f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a737b502067b1896686bd1f9df7a1446296d80b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a737b502067b1896686bd1f9df7a1446296d80b", "html_url": "https://github.com/rust-lang/rust/commit/8a737b502067b1896686bd1f9df7a1446296d80b"}, {"sha": "33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "url": "https://api.github.com/repos/rust-lang/rust/commits/33df9fc1d04c224a0c7ecb8d91b75feed75b412c", "html_url": "https://github.com/rust-lang/rust/commit/33df9fc1d04c224a0c7ecb8d91b75feed75b412c"}], "stats": {"total": 333, "additions": 89, "deletions": 244}, "files": [{"sha": "cd3db1b3a2898268319bf6d0666a12714fcc86be", "filename": "src/libextra/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibextra%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibextra%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsync.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -882,7 +882,7 @@ mod tests {\n     fn test_sem_runtime_friendly_blocking() {\n         // Force the runtime to schedule two threads on the same sched_loop.\n         // When one blocks, it should schedule the other one.\n-        do task::spawn_sched(task::ManualThreads(1)) {\n+        do task::spawn_sched(task::SingleThreaded) {\n             let s = ~Semaphore::new(1);\n             let s2 = ~s.clone();\n             let (p,c) = comm::stream();"}, {"sha": "a27ff559b2ba10cad8a8892c0fa1ec7e9deebc4e", "filename": "src/libstd/rt/comm.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fcomm.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -773,10 +773,11 @@ mod test {\n             do run_in_newsched_task {\n                 let (port, chan) = oneshot::<int>();\n                 let port_cell = Cell::new(port);\n-                let _thread = do spawntask_thread {\n+                let thread = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n                 let _chan = chan;\n+                thread.join();\n             }\n         }\n     }\n@@ -788,13 +789,15 @@ mod test {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     let _p = port_cell.take();\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     let c = chan_cell.take();\n                     c.send(1);\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }\n@@ -806,19 +809,21 @@ mod test {\n                 let (port, chan) = oneshot::<int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     let port_cell = Cell::new(port_cell.take());\n                     let res = do spawntask_try {\n                         port_cell.take().recv();\n                     };\n                     assert!(res.is_err());\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     let chan_cell = Cell::new(chan_cell.take());\n                     do spawntask {\n                         chan_cell.take();\n                     }\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }\n@@ -830,12 +835,14 @@ mod test {\n                 let (port, chan) = oneshot::<~int>();\n                 let chan_cell = Cell::new(chan);\n                 let port_cell = Cell::new(port);\n-                let _thread1 = do spawntask_thread {\n+                let thread1 = do spawntask_thread {\n                     chan_cell.take().send(~10);\n                 };\n-                let _thread2 = do spawntask_thread {\n+                let thread2 = do spawntask_thread {\n                     assert!(port_cell.take().recv() == ~10);\n                 };\n+                thread1.join();\n+                thread2.join();\n             }\n         }\n     }"}, {"sha": "dc8669b9264cc30dd97527e84148c356944d722a", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -346,7 +346,9 @@ fn run_(main: ~fn(), use_main_sched: bool) -> int {\n     }\n \n     // Wait for schedulers\n-    { let _threads = threads; }\n+    for threads.consume_iter().advance() |thread| {\n+        thread.join();\n+    }\n \n     // Return the exit code\n     unsafe {"}, {"sha": "98df38f9b1dc59a1793f62fe21e4ff8ae76163d3", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -901,10 +901,8 @@ mod test {\n                 sched.run();\n             };\n \n-            // wait for the end\n-            let _thread1 = normal_thread;\n-            let _thread2 = special_thread;\n-\n+            normal_thread.join();\n+            special_thread.join();\n         }\n     }\n \n@@ -1074,16 +1072,19 @@ mod test {\n             sched2.enqueue_task(task2);\n \n             let sched1_cell = Cell::new(sched1);\n-            let _thread1 = do Thread::start {\n+            let thread1 = do Thread::start {\n                 let sched1 = sched1_cell.take();\n                 sched1.run();\n             };\n \n             let sched2_cell = Cell::new(sched2);\n-            let _thread2 = do Thread::start {\n+            let thread2 = do Thread::start {\n                 let sched2 = sched2_cell.take();\n                 sched2.run();\n             };\n+\n+            thread1.join();\n+            thread2.join();\n         }\n     }\n "}, {"sha": "82d4f8fcc0424f433372b587a7a06049f249f922", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -219,7 +219,7 @@ impl Drop for Task {\n impl Coroutine {\n \n     pub fn new(stack_pool: &mut StackPool, start: ~fn()) -> Coroutine {\n-        static MIN_STACK_SIZE: uint = 100000; // XXX: Too much stack\n+        static MIN_STACK_SIZE: uint = 2000000; // XXX: Too much stack\n \n         let start = Coroutine::build_start_wrapper(start);\n         let mut stack = stack_pool.take_segment(MIN_STACK_SIZE);"}, {"sha": "260903cbcbfb4703a9dde3d8099460ee17f2e04b", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -125,7 +125,9 @@ pub fn run_in_mt_newsched_task(f: ~fn()) {\n         }\n \n         // Wait for schedulers\n-        let _threads = threads;\n+        for threads.consume_iter().advance() |thread| {\n+            thread.join();\n+        }\n     }\n \n }"}, {"sha": "ed0137d3b0ff52132172c335b03b02a2b47ee65f", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -16,7 +16,8 @@ type raw_thread = libc::c_void;\n \n pub struct Thread {\n     main: ~fn(),\n-    raw_thread: *raw_thread\n+    raw_thread: *raw_thread,\n+    joined: bool\n }\n \n impl Thread {\n@@ -27,18 +28,28 @@ impl Thread {\n         let raw = substart(&main);\n         Thread {\n             main: main,\n-            raw_thread: raw\n+            raw_thread: raw,\n+            joined: false\n         }\n     }\n+\n+    pub fn join(self) {\n+        assert!(!self.joined);\n+        let mut this = self;\n+        unsafe { rust_raw_thread_join(this.raw_thread); }\n+        this.joined = true;\n+    }\n }\n \n impl Drop for Thread {\n     fn drop(&self) {\n-        unsafe { rust_raw_thread_join_delete(self.raw_thread) }\n+        assert!(self.joined);\n+        unsafe { rust_raw_thread_delete(self.raw_thread) }\n     }\n }\n \n extern {\n     pub unsafe fn rust_raw_thread_start(f: &(~fn())) -> *raw_thread;\n-    pub unsafe fn rust_raw_thread_join_delete(thread: *raw_thread);\n+    pub unsafe fn rust_raw_thread_join(thread: *raw_thread);\n+    pub unsafe fn rust_raw_thread_delete(thread: *raw_thread);\n }"}, {"sha": "d0ca38317cbededd13675b41c17ad764ee7f982b", "filename": "src/libstd/rt/uv/async.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fasync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fasync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fasync.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -94,12 +94,13 @@ mod test {\n             let mut loop_ = Loop::new();\n             let watcher = AsyncWatcher::new(&mut loop_, |w, _| w.close(||()) );\n             let watcher_cell = Cell::new(watcher);\n-            let _thread = do Thread::start {\n+            let thread = do Thread::start {\n                 let mut watcher = watcher_cell.take();\n                 watcher.send();\n             };\n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n }"}, {"sha": "8ea4a197269a8d0e16f9a1d52e553d52a5761076", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -715,7 +715,7 @@ mod test {\n                 }\n             }\n \n-            let _client_thread = do Thread::start {\n+            let client_thread = do Thread::start {\n                 rtdebug!(\"starting client thread\");\n                 let mut loop_ = Loop::new();\n                 let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n@@ -739,6 +739,7 @@ mod test {\n             let mut loop_ = loop_;\n             loop_.run();\n             loop_.close();\n+            client_thread.join();\n         }\n     }\n \n@@ -790,7 +791,7 @@ mod test {\n                 }\n             }\n \n-            let _client_thread = do Thread::start {\n+            let client_thread = do Thread::start {\n                 rtdebug!(\"starting client thread\");\n                 let mut loop_ = Loop::new();\n                 let mut tcp_watcher = { TcpWatcher::new(&mut loop_) };\n@@ -814,6 +815,7 @@ mod test {\n             let mut loop_ = loop_;\n             loop_.run();\n             loop_.close();\n+            client_thread.join();\n         }\n     }\n \n@@ -855,7 +857,7 @@ mod test {\n                 server.close(||{});\n             }\n \n-            do Thread::start {\n+            let thread = do Thread::start {\n                 let mut loop_ = Loop::new();\n                 let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n@@ -873,6 +875,7 @@ mod test {\n \n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n \n@@ -914,7 +917,7 @@ mod test {\n                 server.close(||{});\n             }\n \n-            do Thread::start {\n+            let thread = do Thread::start {\n                 let mut loop_ = Loop::new();\n                 let mut client = UdpWatcher::new(&loop_);\n                 assert!(client.bind(client_addr).is_ok());\n@@ -932,6 +935,7 @@ mod test {\n \n             loop_.run();\n             loop_.close();\n+            thread.join();\n         }\n     }\n }"}, {"sha": "53ccd20186dfbb4d8ae4599f860ef9342a62881b", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -222,11 +222,12 @@ mod test_remote {\n                 };\n                 remote_cell.put_back(remote);\n             }\n-            let _thread = do Thread::start {\n+            let thread = do Thread::start {\n                 remote_cell.take().fire();\n             };\n \n             assert!(tube.recv() == 1);\n+            thread.join();\n         }\n     }\n }"}, {"sha": "6de0c78d00b5169e8d8e1fbca742e15d1e2b0571", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 95, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -44,7 +44,6 @@ use result::Result;\n use result;\n use rt::{context, OldTaskContext, TaskContext};\n use rt::local::Local;\n-use task::rt::{task_id, sched_id};\n use unstable::finally::Finally;\n use util;\n \n@@ -58,18 +57,6 @@ mod local_data_priv;\n pub mod rt;\n pub mod spawn;\n \n-/// A handle to a scheduler\n-#[deriving(Eq)]\n-pub enum Scheduler {\n-    SchedulerHandle(sched_id)\n-}\n-\n-/// A handle to a task\n-#[deriving(Eq)]\n-pub enum Task {\n-    TaskHandle(task_id)\n-}\n-\n /**\n  * Indicates the manner in which a task exited.\n  *\n@@ -92,23 +79,8 @@ pub enum TaskResult {\n pub enum SchedMode {\n     /// Run task on the default scheduler\n     DefaultScheduler,\n-    /// Run task on the current scheduler\n-    CurrentScheduler,\n-    /// Run task on a specific scheduler\n-    ExistingScheduler(Scheduler),\n-    /**\n-     * Tasks are scheduled on the main OS thread\n-     *\n-     * The main OS thread is the thread used to launch the runtime which,\n-     * in most cases, is the process's initial thread as created by the OS.\n-     */\n-    PlatformThread,\n     /// All tasks run in the same OS thread\n     SingleThreaded,\n-    /// Tasks are distributed among available CPUs\n-    ThreadPerTask,\n-    /// Tasks are distributed among a fixed number of OS threads\n-    ManualThreads(uint),\n }\n \n /**\n@@ -118,17 +90,9 @@ pub enum SchedMode {\n  *\n  * * sched_mode - The operating mode of the scheduler\n  *\n- * * foreign_stack_size - The size of the foreign stack, in bytes\n- *\n- *     Rust code runs on Rust-specific stacks. When Rust code calls foreign\n- *     code (via functions in foreign modules) it switches to a typical, large\n- *     stack appropriate for running code written in languages like C. By\n- *     default these foreign stacks have unspecified size, but with this\n- *     option their size can be precisely specified.\n  */\n pub struct SchedOpts {\n     mode: SchedMode,\n-    foreign_stack_size: Option<uint>,\n }\n \n /**\n@@ -446,7 +410,6 @@ pub fn default_task_opts() -> TaskOpts {\n         notify_chan: None,\n         sched: SchedOpts {\n             mode: DefaultScheduler,\n-            foreign_stack_size: None\n         }\n     }\n }\n@@ -591,18 +554,6 @@ pub fn failing() -> bool {\n     }\n }\n \n-pub fn get_task() -> Task {\n-    //! Get a handle to the running task\n-\n-    unsafe {\n-        TaskHandle(rt::get_task_id())\n-    }\n-}\n-\n-pub fn get_scheduler() -> Scheduler {\n-    SchedulerHandle(unsafe { rt::rust_get_sched_id() })\n-}\n-\n /**\n  * Temporarily make the task unkillable\n  *\n@@ -934,13 +885,6 @@ fn test_try_fail() {\n     }\n }\n \n-#[test]\n-#[should_fail]\n-#[ignore(cfg(windows))]\n-fn test_spawn_sched_no_threads() {\n-    do spawn_sched(ManualThreads(0u)) { }\n-}\n-\n #[test]\n fn test_spawn_sched() {\n     let (po, ch) = stream::<()>();\n@@ -1107,17 +1051,6 @@ fn test_avoid_copying_the_body_unlinked() {\n     }\n }\n \n-#[test]\n-fn test_platform_thread() {\n-    let (po, ch) = stream();\n-    let mut builder = task();\n-    builder.sched_mode(PlatformThread);\n-    do builder.spawn {\n-        ch.send(());\n-    }\n-    po.recv();\n-}\n-\n #[test]\n #[ignore(cfg(windows))]\n #[should_fail]\n@@ -1221,34 +1154,6 @@ fn test_child_doesnt_ref_parent() {\n     task::spawn(child_no(0));\n }\n \n-#[test]\n-fn test_spawn_thread_on_demand() {\n-    let (port, chan) = comm::stream();\n-\n-    do spawn_sched(ManualThreads(2)) || {\n-        unsafe {\n-            let max_threads = rt::rust_sched_threads();\n-            assert_eq!(max_threads as int, 2);\n-            let running_threads = rt::rust_sched_current_nonlazy_threads();\n-            assert_eq!(running_threads as int, 1);\n-\n-            let (port2, chan2) = comm::stream();\n-\n-            do spawn_sched(CurrentScheduler) || {\n-                chan2.send(());\n-            }\n-\n-            let running_threads2 = rt::rust_sched_current_nonlazy_threads();\n-            assert_eq!(running_threads2 as int, 2);\n-\n-            port2.recv();\n-            chan.send(());\n-        }\n-    }\n-\n-    port.recv();\n-}\n-\n #[test]\n fn test_simple_newsched_spawn() {\n     use rt::test::run_in_newsched_task;"}, {"sha": "13c51230dc237d5322beb0e694f18388c8af4d12", "filename": "src/libstd/task/rt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Frt.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -36,8 +36,6 @@ extern {\n \n     pub fn rust_get_sched_id() -> sched_id;\n     pub fn rust_new_sched(num_threads: libc::uintptr_t) -> sched_id;\n-    pub fn rust_sched_threads() -> libc::size_t;\n-    pub fn rust_sched_current_nonlazy_threads() -> libc::size_t;\n \n     pub fn get_task_id() -> task_id;\n     #[rust_stack]"}, {"sha": "54e468269766e174df49c4b4c994b2e3ed18a832", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 5, "deletions": 32, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -84,9 +84,8 @@ use local_data;\n use task::local_data_priv::{local_get, local_set, OldHandle};\n use task::rt::rust_task;\n use task::rt;\n-use task::{Failure, ManualThreads, PlatformThread, SchedOpts, SingleThreaded};\n-use task::{Success, TaskOpts, TaskResult, ThreadPerTask};\n-use task::{ExistingScheduler, SchedulerHandle};\n+use task::{Failure};\n+use task::{Success, TaskOpts, TaskResult};\n use task::unkillable;\n use to_bytes::IterBytes;\n use uint;\n@@ -747,7 +746,7 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n             // Create child task.\n             let new_task = match opts.sched.mode {\n                 DefaultScheduler => rt::new_task(),\n-                _ => new_task_in_sched(opts.sched)\n+                _ => new_task_in_sched()\n             };\n             assert!(!new_task.is_null());\n             // Getting killed after here would leak the task.\n@@ -805,35 +804,9 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n         return result;\n     }\n \n-    fn new_task_in_sched(opts: SchedOpts) -> *rust_task {\n-        if opts.foreign_stack_size != None {\n-            fail!(\"foreign_stack_size scheduler option unimplemented\");\n-        }\n-\n-        let num_threads = match opts.mode {\n-            DefaultScheduler\n-            | CurrentScheduler\n-            | ExistingScheduler(*)\n-            | PlatformThread => 0u, /* Won't be used */\n-            SingleThreaded => 1u,\n-            ThreadPerTask => {\n-                fail!(\"ThreadPerTask scheduling mode unimplemented\")\n-            }\n-            ManualThreads(threads) => {\n-                if threads == 0u {\n-                    fail!(\"can not create a scheduler with no threads\");\n-                }\n-                threads\n-            }\n-        };\n-\n+    fn new_task_in_sched() -> *rust_task {\n         unsafe {\n-            let sched_id = match opts.mode {\n-                CurrentScheduler => rt::rust_get_sched_id(),\n-                ExistingScheduler(SchedulerHandle(id)) => id,\n-                PlatformThread => rt::rust_osmain_sched_id(),\n-                _ => rt::rust_new_sched(num_threads)\n-            };\n+            let sched_id = rt::rust_new_sched(1);\n             rt::rust_new_task_in_sched(sched_id)\n         }\n     }"}, {"sha": "313567d1248ecda8e192529afe043c95c5d09ae4", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -12,7 +12,6 @@\n \n use comm::{GenericChan, GenericPort};\n use comm;\n-use libc;\n use prelude::*;\n use task;\n \n@@ -37,18 +36,16 @@ The executing thread has no access to a task pointer and will be using\n a normal large stack.\n */\n pub fn run_in_bare_thread(f: ~fn()) {\n+    use cell::Cell;\n+    use rt::thread::Thread;\n+\n+    let f_cell = Cell::new(f);\n     let (port, chan) = comm::stream();\n     // FIXME #4525: Unfortunate that this creates an extra scheduler but it's\n-    // necessary since rust_raw_thread_join_delete is blocking\n+    // necessary since rust_raw_thread_join is blocking\n     do task::spawn_sched(task::SingleThreaded) {\n-        unsafe {\n-            let closure: &fn() = || {\n-                f()\n-            };\n-            let thread = rust_raw_thread_start(&closure);\n-            rust_raw_thread_join_delete(thread);\n-            chan.send(());\n-        }\n+        Thread::start(f_cell.take()).join();\n+        chan.send(());\n     }\n     port.recv();\n }\n@@ -70,14 +67,6 @@ fn test_run_in_bare_thread_exchange() {\n     }\n }\n \n-#[allow(non_camel_case_types)] // runtime type\n-pub type raw_thread = libc::c_void;\n-\n-extern {\n-    fn rust_raw_thread_start(f: &(&fn())) -> *raw_thread;\n-    fn rust_raw_thread_join_delete(thread: *raw_thread);\n-}\n-\n \n /// Changes the current working directory to the specified\n /// path while acquiring a global lock, then calls `action`."}, {"sha": "3c9bff000ead6cc9f905501bf3354fb9ecc4661e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -549,18 +549,6 @@ start_task(rust_task *target, fn_env_pair *f) {\n     target->start(f->f, f->env, NULL);\n }\n \n-extern \"C\" CDECL size_t\n-rust_sched_current_nonlazy_threads() {\n-    rust_task *task = rust_get_current_task();\n-    return task->sched->number_of_threads();\n-}\n-\n-extern \"C\" CDECL size_t\n-rust_sched_threads() {\n-    rust_task *task = rust_get_current_task();\n-    return task->sched->max_number_of_threads();\n-}\n-\n // This is called by an intrinsic on the Rust stack and must run\n // entirely in the red zone. Do not call on the C stack.\n extern \"C\" CDECL MUST_CHECK bool\n@@ -751,9 +739,14 @@ rust_raw_thread_start(fn_env_pair *fn) {\n }\n \n extern \"C\" void\n-rust_raw_thread_join_delete(raw_thread *thread) {\n+rust_raw_thread_join(raw_thread *thread) {\n     assert(thread);\n     thread->join();\n+}\n+\n+extern \"C\" void\n+rust_raw_thread_delete(raw_thread *thread) {\n+    assert(thread);\n     delete thread;\n }\n "}, {"sha": "ccbff776dcff2a250b084dbe46af511c01037db8", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -41,8 +41,6 @@ rust_log_console_off\n rust_should_log_console\n rust_set_environ\n rust_unset_sigprocmask\n-rust_sched_current_nonlazy_threads\n-rust_sched_threads\n rust_set_exit_status\n rust_start\n rust_env_pairs\n@@ -211,7 +209,8 @@ linenoiseHistorySetMaxLen\n linenoiseHistorySave\n linenoiseHistoryLoad\n rust_raw_thread_start\n-rust_raw_thread_join_delete\n+rust_raw_thread_join\n+rust_raw_thread_delete\n rust_get_rt_tls_key\n swap_registers\n rust_readdir"}, {"sha": "6e7ba16ac0b77d2b8f8a8493d6a2b2774426a262", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -10,11 +10,11 @@\n \n // Test that we use fully-qualified type names in error messages.\n \n-use std::task::Task;\n+use std::option::Option;\n \n-fn bar(x: uint) -> Task {\n+fn bar(x: uint) -> Option<uint> {\n     return x;\n-    //~^ ERROR mismatched types: expected `std::task::Task`\n+    //~^ ERROR mismatched types: expected `std::option::Option<uint>`\n }\n \n fn main() {"}, {"sha": "fbd06c5e9cea1da42ef55ef707859df5ec11d3fd", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -12,16 +12,19 @@\n \n use std::util;\n \n+pub type Task = int;\n+\n // tjc: I don't know why\n pub mod pipes {\n+    use super::Task;\n     use std::cast::{forget, transmute};\n     use std::cast;\n     use std::task;\n     use std::util;\n \n     pub struct Stuff<T> {\n         state: state,\n-        blocked_task: Option<task::Task>,\n+        blocked_task: Option<Task>,\n         payload: Option<T>\n     }\n \n@@ -35,15 +38,15 @@ pub mod pipes {\n \n     pub struct packet<T> {\n         state: state,\n-        blocked_task: Option<task::Task>,\n+        blocked_task: Option<Task>,\n         payload: Option<T>\n     }\n \n     pub fn packet<T:Send>() -> *packet<T> {\n         unsafe {\n             let p: *packet<T> = cast::transmute(~Stuff{\n                 state: empty,\n-                blocked_task: None::<task::Task>,\n+                blocked_task: None::<Task>,\n                 payload: None::<T>\n             });\n             p"}, {"sha": "8569cd30cf5133592d1a2812e07c31a018aafeaa", "filename": "src/test/run-pass/platform_thread.rs", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/8a737b502067b1896686bd1f9df7a1446296d80b/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a737b502067b1896686bd1f9df7a1446296d80b/src%2Ftest%2Frun-pass%2Fplatform_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplatform_thread.rs?ref=8a737b502067b1896686bd1f9df7a1446296d80b", "patch": "@@ -1,44 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Jump back and forth between the OS main thread and a new scheduler.\n-// The OS main scheduler should continue to be available and not terminate\n-// while it is not in use.\n-\n-use std::task;\n-\n-pub fn main() {\n-    run(100);\n-}\n-\n-fn run(i: int) {\n-\n-    info!(i);\n-\n-    if i == 0 {\n-        return;\n-    }\n-\n-    let mut builder = task::task();\n-    builder.sched_mode(task::PlatformThread);\n-    builder.unlinked();\n-    do builder.spawn {\n-        task::yield();\n-        let mut builder = task::task();\n-        builder.sched_mode(task::SingleThreaded);\n-        builder.unlinked();\n-        do builder.spawn {\n-            task::yield();\n-            run(i - 1);\n-            task::yield();\n-        }\n-        task::yield();\n-    }\n-}"}, {"sha": "c811e548f3fb18f0226b94baba937a32634ea43e", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7e241e02bb9f82d7b931033afde477d03ff4f2/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=8b7e241e02bb9f82d7b931033afde477d03ff4f2", "patch": "@@ -27,7 +27,7 @@ impl Drop for notify {\n     fn drop(&self) {\n         unsafe {\n             error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n-                   task::get_task(),\n+                   0,\n                    ptr::to_unsafe_ptr(&(*(self.v))) as uint,\n                    task::failing(),\n                    *(self.v));\n@@ -48,7 +48,7 @@ fn joinable(f: ~fn()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: &fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\",\n-               task::get_task(),\n+               0,\n                ptr::to_unsafe_ptr(&(*b)) as uint);\n         let _r = notify(c, b);\n         f();\n@@ -71,13 +71,13 @@ fn supervised() {\n     // Yield to make sure the supervisor joins before we\n     // fail. This is currently not needed because the supervisor\n     // runs first, but I can imagine that changing.\n-    error!(\"supervised task=%?\", task::get_task);\n+    error!(\"supervised task=%?\", 0);\n     task::yield();\n     fail!();\n }\n \n fn supervisor() {\n-    error!(\"supervisor task=%?\", task::get_task());\n+    error!(\"supervisor task=%?\", 0);\n     let t = joinable(supervised);\n     join(t);\n }"}]}