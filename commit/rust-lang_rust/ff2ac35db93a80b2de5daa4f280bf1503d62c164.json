{"sha": "ff2ac35db93a80b2de5daa4f280bf1503d62c164", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmMmFjMzVkYjkzYTgwYjJkZTVkYWE0ZjI4MGJmMTUwM2Q2MmMxNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-12T18:45:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-12T18:45:00Z"}, "message": "Auto merge of #50686 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #50544 (Cleanup some dependencies)\n - #50545 (Made some functions in time module const)\n - #50550 (use fmt::Result where applicable)\n - #50558 (Remove all reference to DepGraph::work_products)\n - #50602 (Update canonicalize docs)\n - #50607 (Allocate Symbol strings from an arena)\n - #50613 (Migrate the toolstate update bot to rust-highfive)\n - #50624 (fs::write: Add example writing a &str)\n - #50634 (Do not silently truncate offsets for `read_at`/`write_at` on emscripten)\n - #50644 (AppVeyor: Read back trace from crash dump on failure.)\n - #50661 (Ignore non .rs files for tidy libcoretest)\n - #50663 (rustc: Allow an edition's feature on that edition)\n - #50667 (rustc: Only suggest deleting `extern crate` if it works)\n\nFailed merges:", "tree": {"sha": "d267bc43ba84346d4592ed77f5d2a7084d299304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d267bc43ba84346d4592ed77f5d2a7084d299304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff2ac35db93a80b2de5daa4f280bf1503d62c164", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff2ac35db93a80b2de5daa4f280bf1503d62c164", "html_url": "https://github.com/rust-lang/rust/commit/ff2ac35db93a80b2de5daa4f280bf1503d62c164", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff2ac35db93a80b2de5daa4f280bf1503d62c164/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0cea750a0a10a0ed5a101839e37968d87f8ef9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0cea750a0a10a0ed5a101839e37968d87f8ef9d", "html_url": "https://github.com/rust-lang/rust/commit/c0cea750a0a10a0ed5a101839e37968d87f8ef9d"}, {"sha": "da79ff3cc2265514483d2a5e1f4238c85baa70e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/da79ff3cc2265514483d2a5e1f4238c85baa70e9", "html_url": "https://github.com/rust-lang/rust/commit/da79ff3cc2265514483d2a5e1f4238c85baa70e9"}], "stats": {"total": 631, "additions": 354, "deletions": 277}, "files": [{"sha": "60f5b4be8def87b736c930bf7dafc996c428f1c4", "filename": "appveyor.yml", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -211,6 +211,11 @@ test_script:\n   - set NO_CCACHE=1\n   - sh src/ci/run.sh\n \n+on_failure:\n+  # Dump crash log\n+  - set PATH=%PATH%;\"C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\X64\"\n+  - if exist %LOCALAPPDATA%\\CrashDumps for %%f in (%LOCALAPPDATA%\\CrashDumps\\*) do cdb -c \"k;q\" -G -z \"%%f\"\n+\n branches:\n   only:\n     - auto"}, {"sha": "4364d7001cdfe039cbb60abb6e1503fdcd66f78d", "filename": "src/Cargo.lock", "status": "modified", "additions": 16, "deletions": 116, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -79,15 +79,15 @@ dependencies = [\n \n [[package]]\n name = \"assert_cli\"\n-version = \"0.5.4\"\n+version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"colored 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"difference 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"environment 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"failure_derive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"skeptic 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -183,11 +183,6 @@ dependencies = [\n name = \"build_helper\"\n version = \"0.1.0\"\n \n-[[package]]\n-name = \"bytecount\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"byteorder\"\n version = \"1.2.2\"\n@@ -240,18 +235,6 @@ dependencies = [\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"cargo_metadata\"\n-version = \"0.3.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.5.4\"\n@@ -312,7 +295,7 @@ dependencies = [\n  \"clippy-mini-macro-test 0.2.0\",\n  \"clippy_lints 0.0.198\",\n  \"compiletest_rs 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -574,24 +557,19 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"derive-new\"\n-version = \"0.5.2\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.12.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"proc-macro2 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"quote 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"diff\"\n version = \"0.1.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"difference\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"difference\"\n version = \"2.0.0\"\n@@ -1452,14 +1430,6 @@ dependencies = [\n  \"difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"proc-macro2\"\n-version = \"0.2.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"proc-macro2\"\n version = \"0.3.6\"\n@@ -1511,14 +1481,6 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"quote\"\n-version = \"0.4.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"quote\"\n version = \"0.5.1\"\n@@ -1588,7 +1550,7 @@ dependencies = [\n  \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.22 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1703,7 +1665,7 @@ name = \"rls-analysis\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"radix_trie 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-data 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2303,9 +2265,9 @@ dependencies = [\n name = \"rustfmt-nightly\"\n version = \"0.6.1\"\n dependencies = [\n- \"assert_cli 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"assert_cli 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.5.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2326,15 +2288,6 @@ dependencies = [\n  \"winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"same-file\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"same-file\"\n version = \"1.0.2\"\n@@ -2362,15 +2315,6 @@ name = \"scopeguard\"\n version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"semver\"\n-version = \"0.8.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"semver\"\n version = \"0.9.0\"\n@@ -2448,21 +2392,6 @@ name = \"siphasher\"\n version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"skeptic\"\n-version = \"0.13.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"bytecount 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"glob 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_json 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"tempdir 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"smallvec\"\n version = \"0.6.0\"\n@@ -2573,16 +2502,6 @@ dependencies = [\n  \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"syn\"\n-version = \"0.12.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"syn\"\n version = \"0.13.1\"\n@@ -2641,6 +2560,7 @@ dependencies = [\n name = \"syntax_pos\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena 0.0.0\",\n  \"rustc_data_structures 0.0.0\",\n  \"scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serialize 0.0.0\",\n@@ -2966,16 +2886,6 @@ name = \"void\"\n version = \"1.0.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n-[[package]]\n-name = \"walkdir\"\n-version = \"1.0.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"walkdir\"\n version = \"2.1.4\"\n@@ -3053,17 +2963,15 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n \"checksum ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"35c7a5669cb64f085739387e1308b74e6d44022464b7f1b63bbd4ceb6379ec31\"\n \"checksum arrayvec 0.4.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1e964f9e24d588183fcb43503abda40d288c8657dfc27311516ce2f05675aef\"\n-\"checksum assert_cli 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"72342c21057a3cb5f7c2d849bf7999a83795434dd36d74fa8c24680581bd1930\"\n+\"checksum assert_cli 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c8ca6beaa44a3520407b28a4a779a19b1364fcadcb2f258c41a7baf3102ced0\"\n \"checksum atty 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af80143d6f7608d746df1520709e5d141c96f240b0e62b0aa41bdfb53374d9d4\"\n \"checksum backtrace 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ebbe525f66f42d207968308ee86bc2dd60aa5fab535b22e616323a173d097d8e\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n \"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n-\"checksum bytecount 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af27422163679dea46a1a7239dffff64d3dcdc3ba5fe9c49c789fbfe0eb949de\"\n \"checksum byteorder 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"73b5bdfe7ee3ad0b99c9801d58807a9dbc9e09196365b0203853b99889ab3c87\"\n-\"checksum cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f56ec3e469bca7c276f2eea015aa05c5e381356febdbb0683c2580189604537\"\n \"checksum cargo_metadata 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ebd6272a2ca4fd39dbabbd6611eb03df45c2259b3b80b39a9ff8fbdcf42a4b3\"\n \"checksum cc 1.0.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0ebb87d1116151416c0cf66a0e3fb6430cccd120fd6300794b4dfaa050ac40ba\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n@@ -3085,9 +2993,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum curl 0.4.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aaf20bbe084f285f215eef2165feed70d6b75ba29cad24469badb853a4a287d0\"\n \"checksum curl-sys 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"71c63a540a9ee4e15e56c3ed9b11a2f121239b9f6d7b7fe30f616e048148df9a\"\n \"checksum debug_unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a032eac705ca39214d169f83e3d3da290af06d8d1d344d1baad2fd002dca4b3\"\n-\"checksum derive-new 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6fcb923bab47a948f1b01cec2f758fdebba95c9ebc255458654b2b88efe59d71\"\n+\"checksum derive-new 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ceed73957c449214f8440eec8ad7fa282b67dc9eacbb24a3085b15d60397a17a\"\n \"checksum diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3c2b69f912779fbb121ceb775d74d51e915af17aaebc38d28a592843a2dd0a3a\"\n-\"checksum difference 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3304d19798a8e067e48d8e69b2c37f0b5e9b4e462504ad9e27e9f3fce02bba8\"\n \"checksum difference 2.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"524cbf6897b527295dff137cec09ecf3a05f4fddffd7dfcd1585403449e74198\"\n \"checksum dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"09c3753c3db574d215cba4ea76018483895d7bff25a31b49ba45db21c48e50ab\"\n \"checksum either 1.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3be565ca5c557d7f59e7cfcf1844f9e3033650c929c6566f511e8005f205c1d0\"\n@@ -3178,13 +3085,11 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a8b4c6b8165cd1a1cd4b9b120978131389f64bdaf456435caa41e630edba903\"\n \"checksum precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"925383efa346730478fb4838dbe9137d2a47675ad789c546d150a6e1dd4ab31c\"\n \"checksum pretty_assertions 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a029430f0d744bc3d15dd474d591bed2402b645d024583082b9f63bb936dac6\"\n-\"checksum proc-macro2 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd07deb3c6d1d9ff827999c7f9b04cdfd66b1b17ae508e14fe47b620f2282ae0\"\n \"checksum proc-macro2 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49b6a521dc81b643e9a51e0d1cf05df46d5a2f3c0280ea72bcb68276ba64a118\"\n \"checksum pulldown-cmark 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6fdf85cda6cadfae5428a54661d431330b312bc767ddbc57adbedc24da66e32\"\n \"checksum quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eda5fe9b71976e62bc81b781206aaa076401769b2143379d3eb2118388babac4\"\n \"checksum quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"07589615d719a60c8dd8a4622e7946465dfef20d1a428f969e3443e7386d5f45\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n-\"checksum quote 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1eca14c727ad12702eb4b6bfb5a232287dcf8385cb8ca83a3eeaf6519c44c408\"\n \"checksum quote 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b0ff51282f28dc1b53fd154298feaa2e77c5ea0dba68e1fd8b03b72fbe13d2a\"\n \"checksum racer 2.0.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40d44bc30fc8d403b665286b2c9a83466ddbf69297668fb02b785c3e58eb8e0d\"\n \"checksum radix_trie 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"03d0d770481e8af620ca61d3d304bf014f965d7f78e923dc58545e6a545070a9\"\n@@ -3216,12 +3121,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n \"checksum rustc_version 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a54aa04a10c68c1c4eacb4337fd883b435997ede17a9385784b990777686b09a\"\n \"checksum rustfix 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"165a212dd11124d7070892da20f71d82970ef1d1dd41cd804b70f39740a21c85\"\n-\"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum same-file 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cfb6eded0b06a0b512c8ddbcf04089138c9b4362c2f696f3c3d76039d68f3637\"\n \"checksum schannel 0.1.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"85fd9df495640643ad2d00443b3d78aae69802ad488debab4f1dd52fc1806ade\"\n \"checksum scoped-tls 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8674d439c964889e2476f474a3bf198cc9e199e77499960893bac5de7e9218a4\"\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n-\"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n \"checksum serde 1.0.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"29465552c9b767d0cb44be3ddf4c3214be15d34975a7750f6cf4f409835f0248\"\n@@ -3232,7 +3135,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum shell-escape 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"170a13e64f2a51b77a45702ba77287f5c6829375b04a69cf2222acd17d0cfab9\"\n \"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n-\"checksum skeptic 0.13.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c8431f8fca168e2db4be547bd8329eac70d095dff1444fee4b0fa0fabc7df75a\"\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n \"checksum socket2 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff606e0486e88f5fc6cfeb3966e434fb409abbc7a3ab495238f70a1ca97f789d\"\n \"checksum stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"15132e0e364248108c5e2c02e3ab539be8d6f5d52a01ca9bbf27ed657316f02b\"\n@@ -3243,7 +3145,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum strum 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099e21b5dd6dd07b5adcf8c4b723a7c0b7efd7a9359bf963d58c0caae8532545\"\n \"checksum strum_macros 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0dd9bd569e88028750e3ae5c25616b8278ac16a8e61aba4339195c72396d49e1\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n-\"checksum syn 0.12.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c97c05b8ebc34ddd6b967994d5c6e9852fa92f8b82b3858c39451f97346dcce5\"\n \"checksum syn 0.13.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"91b52877572087400e83d24b9178488541e3d535259e04ff17a63df1e5ceff59\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n \"checksum synstructure 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3a761d12e6d8dcb4dcf952a7a89b475e3a9d69e4a69307e01a470977642914bd\"\n@@ -3282,7 +3183,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum vcpkg 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7ed0f6789c8a85ca41bbc1c9d175422116a9869bd1cf31bb08e1493ecce60380\"\n \"checksum vec_map 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"887b5b631c2ad01628bbbaa7dd4c869f80d3186688f8d0b6f58774fbe324988c\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\"\n-\"checksum walkdir 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb08f9e670fab86099470b97cd2b252d6527f0b3cc1401acdb595ffc9dd288ff\"\n \"checksum walkdir 2.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"63636bd0eb3d00ccb8b9036381b526efac53caf112b7783b730ab3f8e44da369\"\n \"checksum winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \"checksum winapi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"04e3bd221fcbe8a271359c04f21a76db7d0c6028862d1bb5512d85e1e2eb5bb3\""}, {"sha": "0f3b95236f069a5432daaf029dcec5d5a61af1f8", "filename": "src/libcore/tests/time.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibcore%2Ftests%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibcore%2Ftests%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ftime.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -23,9 +23,43 @@ fn creation() {\n #[test]\n fn secs() {\n     assert_eq!(Duration::new(0, 0).as_secs(), 0);\n+    assert_eq!(Duration::new(0, 500_000_005).as_secs(), 0);\n+    assert_eq!(Duration::new(0, 1_050_000_001).as_secs(), 1);\n     assert_eq!(Duration::from_secs(1).as_secs(), 1);\n     assert_eq!(Duration::from_millis(999).as_secs(), 0);\n     assert_eq!(Duration::from_millis(1001).as_secs(), 1);\n+    assert_eq!(Duration::from_micros(999_999).as_secs(), 0);\n+    assert_eq!(Duration::from_micros(1_000_001).as_secs(), 1);\n+    assert_eq!(Duration::from_nanos(999_999_999).as_secs(), 0);\n+    assert_eq!(Duration::from_nanos(1_000_000_001).as_secs(), 1);\n+}\n+\n+#[test]\n+fn millis() {\n+    assert_eq!(Duration::new(0, 0).subsec_millis(), 0);\n+    assert_eq!(Duration::new(0, 500_000_005).subsec_millis(), 500);\n+    assert_eq!(Duration::new(0, 1_050_000_001).subsec_millis(), 50);\n+    assert_eq!(Duration::from_secs(1).subsec_millis(), 0);\n+    assert_eq!(Duration::from_millis(999).subsec_millis(), 999);\n+    assert_eq!(Duration::from_millis(1001).subsec_millis(), 1);\n+    assert_eq!(Duration::from_micros(999_999).subsec_millis(), 999);\n+    assert_eq!(Duration::from_micros(1_001_000).subsec_millis(), 1);\n+    assert_eq!(Duration::from_nanos(999_999_999).subsec_millis(), 999);\n+    assert_eq!(Duration::from_nanos(1_001_000_000).subsec_millis(), 1);\n+}\n+\n+#[test]\n+fn micros() {\n+    assert_eq!(Duration::new(0, 0).subsec_micros(), 0);\n+    assert_eq!(Duration::new(0, 500_000_005).subsec_micros(), 500_000);\n+    assert_eq!(Duration::new(0, 1_050_000_001).subsec_micros(), 50_000);\n+    assert_eq!(Duration::from_secs(1).subsec_micros(), 0);\n+    assert_eq!(Duration::from_millis(999).subsec_micros(), 999_000);\n+    assert_eq!(Duration::from_millis(1001).subsec_micros(), 1_000);\n+    assert_eq!(Duration::from_micros(999_999).subsec_micros(), 999_999);\n+    assert_eq!(Duration::from_micros(1_000_001).subsec_micros(), 1);\n+    assert_eq!(Duration::from_nanos(999_999_999).subsec_micros(), 999_999);\n+    assert_eq!(Duration::from_nanos(1_000_001_000).subsec_micros(), 1);\n }\n \n #[test]\n@@ -34,8 +68,12 @@ fn nanos() {\n     assert_eq!(Duration::new(0, 5).subsec_nanos(), 5);\n     assert_eq!(Duration::new(0, 1_000_000_001).subsec_nanos(), 1);\n     assert_eq!(Duration::from_secs(1).subsec_nanos(), 0);\n-    assert_eq!(Duration::from_millis(999).subsec_nanos(), 999 * 1_000_000);\n-    assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1 * 1_000_000);\n+    assert_eq!(Duration::from_millis(999).subsec_nanos(), 999_000_000);\n+    assert_eq!(Duration::from_millis(1001).subsec_nanos(), 1_000_000);\n+    assert_eq!(Duration::from_micros(999_999).subsec_nanos(), 999_999_000);\n+    assert_eq!(Duration::from_micros(1_000_001).subsec_nanos(), 1000);\n+    assert_eq!(Duration::from_nanos(999_999_999).subsec_nanos(), 999_999_999);\n+    assert_eq!(Duration::from_nanos(1_000_000_001).subsec_nanos(), 1);\n }\n \n #[test]"}, {"sha": "c0b2b2a0bc682abf3fbe56df4108fef764b1fcdd", "filename": "src/libcore/time.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -203,8 +203,9 @@ impl Duration {\n     ///\n     /// [`subsec_nanos`]: #method.subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n-    pub fn as_secs(&self) -> u64 { self.secs }\n+    pub const fn as_secs(&self) -> u64 { self.secs }\n \n     /// Returns the fractional part of this `Duration`, in milliseconds.\n     ///\n@@ -222,8 +223,9 @@ impl Duration {\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n-    pub fn subsec_millis(&self) -> u32 { self.nanos / NANOS_PER_MILLI }\n+    pub const fn subsec_millis(&self) -> u32 { self.nanos / NANOS_PER_MILLI }\n \n     /// Returns the fractional part of this `Duration`, in microseconds.\n     ///\n@@ -241,8 +243,9 @@ impl Duration {\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n-    pub fn subsec_micros(&self) -> u32 { self.nanos / NANOS_PER_MICRO }\n+    pub const fn subsec_micros(&self) -> u32 { self.nanos / NANOS_PER_MICRO }\n \n     /// Returns the fractional part of this `Duration`, in nanoseconds.\n     ///\n@@ -260,8 +263,9 @@ impl Duration {\n     /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[rustc_const_unstable(feature=\"duration_getters\")]\n     #[inline]\n-    pub fn subsec_nanos(&self) -> u32 { self.nanos }\n+    pub const fn subsec_nanos(&self) -> u32 { self.nanos }\n \n     /// Checked `Duration` addition. Computes `self + other`, returning [`None`]\n     /// if overflow occurred."}, {"sha": "797332e699d4b99705cdaf4b9ce446b3cf728f0d", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc_data_structures::small_vec::SmallVec;\n-use rustc_data_structures::sync::{Lrc, RwLock, ReadGuard, Lock};\n+use rustc_data_structures::sync::{Lrc, Lock};\n use std::env;\n use std::hash::Hash;\n use ty::{self, TyCtxt};\n@@ -80,9 +80,6 @@ struct DepGraphData {\n     /// this map. We can later look for and extract that data.\n     previous_work_products: FxHashMap<WorkProductId, WorkProduct>,\n \n-    /// Work-products that we generate in this run.\n-    work_products: RwLock<FxHashMap<WorkProductId, WorkProduct>>,\n-\n     dep_node_debug: Lock<FxHashMap<DepNode, String>>,\n \n     // Used for testing, only populated when -Zquery-dep-graph is specified.\n@@ -103,7 +100,6 @@ impl DepGraph {\n         DepGraph {\n             data: Some(Lrc::new(DepGraphData {\n                 previous_work_products: prev_work_products,\n-                work_products: RwLock::new(FxHashMap()),\n                 dep_node_debug: Lock::new(FxHashMap()),\n                 current: Lock::new(CurrentDepGraph::new()),\n                 previous: prev_graph,\n@@ -462,19 +458,6 @@ impl DepGraph {\n         self.data.as_ref().unwrap().previous.node_to_index(dep_node)\n     }\n \n-    /// Indicates that we created the given work-product in this run\n-    /// for `v`. This record will be preserved and loaded in the next\n-    /// run.\n-    pub fn insert_work_product(&self, v: &WorkProductId, data: WorkProduct) {\n-        debug!(\"insert_work_product({:?}, {:?})\", v, data);\n-        self.data\n-            .as_ref()\n-            .unwrap()\n-            .work_products\n-            .borrow_mut()\n-            .insert(v.clone(), data);\n-    }\n-\n     /// Check whether a previous work product exists for `v` and, if\n     /// so, return the path that leads to it. Used to skip doing work.\n     pub fn previous_work_product(&self, v: &WorkProductId) -> Option<WorkProduct> {\n@@ -485,12 +468,6 @@ impl DepGraph {\n             })\n     }\n \n-    /// Access the map of work-products created during this run. Only\n-    /// used during saving of the dep-graph.\n-    pub fn work_products(&self) -> ReadGuard<FxHashMap<WorkProductId, WorkProduct>> {\n-        self.data.as_ref().unwrap().work_products.borrow()\n-    }\n-\n     /// Access the map of work-products created during the cached run. Only\n     /// used during saving of the dep-graph.\n     pub fn previous_work_products(&self) -> &FxHashMap<WorkProductId, WorkProduct> {"}, {"sha": "f56f4e12e7a02b9b16ffa34c2f9119ad0c492235", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -67,7 +67,7 @@ impl Fingerprint {\n }\n \n impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n+    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "54407658e6ccc85f77e27682800529d98db3fba0", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -175,7 +175,7 @@ impl<Node: Idx> DominatorTree<Node> {\n }\n \n impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&DominatorTreeNode {\n                             tree: self,\n                             node: self.root,\n@@ -190,7 +190,7 @@ struct DominatorTreeNode<'tree, Node: Idx> {\n }\n \n impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let subtrees: Vec<_> = self.tree\n             .children(self.node)\n             .iter()"}, {"sha": "aa113fac9fb7dff28baa92dfba7bfe5f0b80b50b", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1002,7 +1002,7 @@ impl<O, T: ?Sized> Debug for OwningRef<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f,\n                \"OwningRef {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1014,7 +1014,7 @@ impl<O, T: ?Sized> Debug for OwningRefMut<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f,\n                \"OwningRefMut {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1047,7 +1047,7 @@ unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n impl Debug for Erased {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n }"}, {"sha": "fd90e1cbe0866b16bdbfaefb2dfd20c4e6055a20", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -232,7 +232,7 @@ impl FatalError {\n }\n \n impl fmt::Display for FatalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"parser fatal error\")\n     }\n }\n@@ -249,7 +249,7 @@ impl error::Error for FatalError {\n pub struct ExplicitBug;\n \n impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"parser internal bug\")\n     }\n }"}, {"sha": "ababce69e3170d850e939df33dfefdc3b4039ad6", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -36,9 +36,9 @@ pub use persist::dep_graph_tcx_init;\n pub use persist::load_dep_graph;\n pub use persist::load_query_result_cache;\n pub use persist::LoadResult;\n+pub use persist::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use persist::save_dep_graph;\n-pub use persist::save_trans_partition;\n-pub use persist::save_work_products;\n+pub use persist::save_work_product_index;\n pub use persist::in_incr_comp_dir;\n pub use persist::prepare_session_directory;\n pub use persist::finalize_session_directory;"}, {"sha": "e1f00db56d5cbc0572214a3a15d94941e7a8b09e", "filename": "src/librustc_incremental/persist/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fmod.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -29,6 +29,6 @@ pub use self::load::load_dep_graph;\n pub use self::load::load_query_result_cache;\n pub use self::load::LoadResult;\n pub use self::save::save_dep_graph;\n-pub use self::save::save_work_products;\n-pub use self::work_product::save_trans_partition;\n+pub use self::save::save_work_product_index;\n+pub use self::work_product::copy_cgu_workproducts_to_incr_comp_cache_dir;\n pub use self::work_product::delete_workproduct_files;"}, {"sha": "be725b17933215661af70724ba01e6b4c432a7b7", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::{DepGraph, DepKind};\n+use rustc::dep_graph::{DepGraph, DepKind, WorkProduct, WorkProductId};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n use rustc::util::common::time;\n@@ -55,22 +55,22 @@ pub fn save_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     })\n }\n \n-pub fn save_work_products(sess: &Session, dep_graph: &DepGraph) {\n+pub fn save_work_product_index(sess: &Session,\n+                               dep_graph: &DepGraph,\n+                               new_work_products: FxHashMap<WorkProductId, WorkProduct>) {\n     if sess.opts.incremental.is_none() {\n         return;\n     }\n \n-    debug!(\"save_work_products()\");\n+    debug!(\"save_work_product_index()\");\n     dep_graph.assert_ignored();\n     let path = work_products_path(sess);\n-    save_in(sess, path, |e| encode_work_products(dep_graph, e));\n+    save_in(sess, path, |e| encode_work_product_index(&new_work_products, e));\n \n     // We also need to clean out old work-products, as not all of them are\n     // deleted during invalidation. Some object files don't change their\n     // content, they are just not needed anymore.\n-    let new_work_products = dep_graph.work_products();\n     let previous_work_products = dep_graph.previous_work_products();\n-\n     for (id, wp) in previous_work_products.iter() {\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n@@ -234,10 +234,9 @@ fn encode_dep_graph(tcx: TyCtxt,\n     Ok(())\n }\n \n-fn encode_work_products(dep_graph: &DepGraph,\n-                        encoder: &mut Encoder) -> io::Result<()> {\n-    let work_products: Vec<_> = dep_graph\n-        .work_products()\n+fn encode_work_product_index(work_products: &FxHashMap<WorkProductId, WorkProduct>,\n+                             encoder: &mut Encoder) -> io::Result<()> {\n+    let serialized_products: Vec<_> = work_products\n         .iter()\n         .map(|(id, work_product)| {\n             SerializedWorkProduct {\n@@ -247,7 +246,7 @@ fn encode_work_products(dep_graph: &DepGraph,\n         })\n         .collect();\n \n-    work_products.encode(encoder)\n+    serialized_products.encode(encoder)\n }\n \n fn encode_query_cache(tcx: TyCtxt,"}, {"sha": "d0c7766cbae08bd3338ba2db91baa965c359ec1a", "filename": "src/librustc_incremental/persist/work_product.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fwork_product.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -11,21 +11,22 @@\n //! This module contains files for saving intermediate work-products.\n \n use persist::fs::*;\n-use rustc::dep_graph::{WorkProduct, WorkProductId, DepGraph, WorkProductFileKind};\n+use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::session::Session;\n use rustc::util::fs::link_or_copy;\n use std::path::PathBuf;\n use std::fs as std_fs;\n \n-pub fn save_trans_partition(sess: &Session,\n-                            dep_graph: &DepGraph,\n-                            cgu_name: &str,\n-                            files: &[(WorkProductFileKind, PathBuf)]) {\n-    debug!(\"save_trans_partition({:?},{:?})\",\n+pub fn copy_cgu_workproducts_to_incr_comp_cache_dir(\n+    sess: &Session,\n+    cgu_name: &str,\n+    files: &[(WorkProductFileKind, PathBuf)]\n+) -> Option<(WorkProductId, WorkProduct)> {\n+    debug!(\"copy_cgu_workproducts_to_incr_comp_cache_dir({:?},{:?})\",\n            cgu_name,\n            files);\n     if sess.opts.incremental.is_none() {\n-        return\n+        return None\n     }\n     let work_product_id = WorkProductId::from_cgu_name(cgu_name);\n \n@@ -53,16 +54,16 @@ pub fn save_trans_partition(sess: &Session,\n              })\n              .collect();\n     let saved_files = match saved_files {\n+        None => return None,\n         Some(v) => v,\n-        None => return,\n     };\n \n     let work_product = WorkProduct {\n         cgu_name: cgu_name.to_string(),\n         saved_files,\n     };\n \n-    dep_graph.insert_work_product(&work_product_id, work_product);\n+    Some((work_product_id, work_product))\n }\n \n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {"}, {"sha": "0fb78b9f1b81d9166a78c009693a240b3ee168c4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1548,6 +1548,9 @@ impl LintPass for ExternCrate {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExternCrate {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        if !cx.tcx.features().extern_absolute_paths {\n+            return\n+        }\n         if let hir::ItemExternCrate(ref orig) =  it.node {\n             if it.attrs.iter().any(|a| a.check_name(\"macro_use\")) {\n                 return"}, {"sha": "57b8824191f7b86ab50e1e02148e1eb35c129fcc", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1185,7 +1185,7 @@ impl<'tcx> RegionDefinition<'tcx> {\n }\n \n impl fmt::Debug for Constraint {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             formatter,\n             \"({:?}: {:?} @ {:?}) due to {:?}\","}, {"sha": "56050318ca7faf808687a0dd313110f83d996ded", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -172,7 +172,7 @@ struct Elaborator<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n         Ok(())\n     }\n }"}, {"sha": "acfe7c33028274a1be426816e9dd3f19f2545693", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -17,8 +17,8 @@ use back::linker::LinkerInfo;\n use back::symbol_export::ExportedSymbols;\n use base;\n use consts;\n-use rustc_incremental::{save_trans_partition, in_incr_comp_dir};\n-use rustc::dep_graph::{DepGraph, WorkProductFileKind};\n+use rustc_incremental::{copy_cgu_workproducts_to_incr_comp_cache_dir, in_incr_comp_dir};\n+use rustc::dep_graph::{WorkProduct, WorkProductId, WorkProductFileKind};\n use rustc::middle::cstore::{LinkMeta, EncodedMetadata};\n use rustc::session::config::{self, OutputFilenames, OutputType, Passes, SomePasses,\n                              AllPasses, Sanitizer, Lto};\n@@ -1022,11 +1022,14 @@ pub fn start_async_translation(tcx: TyCtxt,\n     }\n }\n \n-fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n-                                              dep_graph: &DepGraph,\n-                                              compiled_modules: &CompiledModules) {\n+fn copy_all_cgu_workproducts_to_incr_comp_cache_dir(\n+    sess: &Session,\n+    compiled_modules: &CompiledModules\n+) -> FxHashMap<WorkProductId, WorkProduct> {\n+    let mut work_products = FxHashMap::default();\n+\n     if sess.opts.incremental.is_none() {\n-        return;\n+        return work_products;\n     }\n \n     for module in compiled_modules.modules.iter() {\n@@ -1042,8 +1045,13 @@ fn copy_module_artifacts_into_incr_comp_cache(sess: &Session,\n             files.push((WorkProductFileKind::BytecodeCompressed, path.clone()));\n         }\n \n-        save_trans_partition(sess, dep_graph, &module.name, &files);\n+        if let Some((id, product)) =\n+                copy_cgu_workproducts_to_incr_comp_cache_dir(sess, &module.name, &files) {\n+            work_products.insert(id, product);\n+        }\n     }\n+\n+    work_products\n }\n \n fn produce_final_output_artifacts(sess: &Session,\n@@ -2239,7 +2247,10 @@ pub struct OngoingCrateTranslation {\n }\n \n impl OngoingCrateTranslation {\n-    pub(crate) fn join(self, sess: &Session, dep_graph: &DepGraph) -> CrateTranslation {\n+    pub(crate) fn join(\n+        self,\n+        sess: &Session\n+    ) -> (CrateTranslation, FxHashMap<WorkProductId, WorkProduct>) {\n         self.shared_emitter_main.check(sess, true);\n         let compiled_modules = match self.future.join() {\n             Ok(Ok(compiled_modules)) => compiled_modules,\n@@ -2258,9 +2269,9 @@ impl OngoingCrateTranslation {\n             time_graph.dump(&format!(\"{}-timings\", self.crate_name));\n         }\n \n-        copy_module_artifacts_into_incr_comp_cache(sess,\n-                                                   dep_graph,\n-                                                   &compiled_modules);\n+        let work_products = copy_all_cgu_workproducts_to_incr_comp_cache_dir(sess,\n+                                                                             &compiled_modules);\n+\n         produce_final_output_artifacts(sess,\n                                        &compiled_modules,\n                                        &self.output_filenames);\n@@ -2284,7 +2295,7 @@ impl OngoingCrateTranslation {\n             metadata_module: compiled_modules.metadata_module,\n         };\n \n-        trans\n+        (trans, work_products)\n     }\n \n     pub(crate) fn submit_pre_translated_module_to_llvm(&self,"}, {"sha": "30780b8c965637704a683b5e16552ecd4e8bc0d6", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -212,16 +212,16 @@ impl TransCrate for LlvmTransCrate {\n         outputs: &OutputFilenames,\n     ) -> Result<(), CompileIncomplete>{\n         use rustc::util::common::time;\n-        let trans = trans.downcast::<::back::write::OngoingCrateTranslation>()\n+        let (trans, work_products) = trans.downcast::<::back::write::OngoingCrateTranslation>()\n             .expect(\"Expected LlvmTransCrate's OngoingCrateTranslation, found Box<Any>\")\n-            .join(sess, dep_graph);\n+            .join(sess);\n         if sess.opts.debugging_opts.incremental_info {\n             back::write::dump_incremental_data(&trans);\n         }\n \n         time(sess,\n              \"serialize work products\",\n-             move || rustc_incremental::save_work_products(sess, &dep_graph));\n+             move || rustc_incremental::save_work_product_index(sess, &dep_graph, work_products));\n \n         sess.compile_status()?;\n "}, {"sha": "fe9fc3ddd680ee5626cc42d67ae4b53daaf18c35", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -2579,7 +2579,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n-                      implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> Result<(), fmt::Error> {\n+                      implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> fmt::Result {\n     write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n@@ -2612,7 +2612,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n \n fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n                 traits: &[&&Impl],\n-                containing_item: &clean::Item) -> Result<(), fmt::Error> {\n+                containing_item: &clean::Item) -> fmt::Result {\n     for i in traits {\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);"}, {"sha": "442a0873ae075ad550e983747d6d91a06ecab75a", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -331,6 +331,7 @@ pub fn read_to_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n ///\n /// fn main() -> std::io::Result<()> {\n ///     fs::write(\"foo.txt\", b\"Lorem ipsum\")?;\n+///     fs::write(\"bar.txt\", \"dolor sit\")?;\n ///     Ok(())\n /// }\n /// ```\n@@ -1699,16 +1700,23 @@ pub fn read_link<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n     fs_imp::readlink(path.as_ref())\n }\n \n-/// Returns the canonical form of a path with all intermediate components\n-/// normalized and symbolic links resolved.\n+/// Returns the canonical, absolute form of a path with all intermediate\n+/// components normalized and symbolic links resolved.\n ///\n /// # Platform-specific behavior\n ///\n /// This function currently corresponds to the `realpath` function on Unix\n /// and the `CreateFile` and `GetFinalPathNameByHandle` functions on Windows.\n /// Note that, this [may change in the future][changes].\n ///\n+/// On Windows, this converts the path to use [extended length path][path]\n+/// syntax, which allows your program to use longer path names, but means you\n+/// can only join backslash-delimited paths to it, and it may be incompatible\n+/// with other applications (if passed to the application on the command-line,\n+/// or written to a file another application may read).\n+///\n /// [changes]: ../io/index.html#platform-specific-behavior\n+/// [path]: https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247(v=vs.85).aspx#maxpath\n ///\n /// # Errors\n ///"}, {"sha": "86478f0a523190fc6abc64772241f2c555d7fd4a", "filename": "src/libstd/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1460,7 +1460,7 @@ impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for PathBuf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }\n@@ -2284,8 +2284,8 @@ impl Path {\n         fs::symlink_metadata(self)\n     }\n \n-    /// Returns the canonical form of the path with all intermediate components\n-    /// normalized and symbolic links resolved.\n+    /// Returns the canonical, absolute form of the path with all intermediate\n+    /// components normalized and symbolic links resolved.\n     ///\n     /// This is an alias to [`fs::canonicalize`].\n     ///"}, {"sha": "1ef79547431f8ac0a23d9e3a85d92c288da346fa", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -48,13 +48,13 @@ impl Error {\n }\n \n impl fmt::Debug for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> result::Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }\n \n impl fmt::Display for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> result::Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }"}, {"sha": "67546d06b4e55055d98b767d0cd1b6a4fec43b5a", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -75,8 +75,15 @@ impl FileDesc {\n         unsafe fn cvt_pread64(fd: c_int, buf: *mut c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n+            use convert::TryInto;\n             use libc::pread64;\n-            cvt(pread64(fd, buf, count, offset as i32))\n+            // pread64 on emscripten actually takes a 32 bit offset\n+            if let Ok(o) = offset.try_into() {\n+                cvt(pread64(fd, buf, count, o))\n+            } else {\n+                Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                   \"cannot pread >2GB\"))\n+            }\n         }\n \n         #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]\n@@ -116,8 +123,15 @@ impl FileDesc {\n         unsafe fn cvt_pwrite64(fd: c_int, buf: *const c_void, count: usize, offset: i64)\n             -> io::Result<isize>\n         {\n+            use convert::TryInto;\n             use libc::pwrite64;\n-            cvt(pwrite64(fd, buf, count, offset as i32))\n+            // pwrite64 on emscripten actually takes a 32 bit offset\n+            if let Ok(o) = offset.try_into() {\n+                cvt(pwrite64(fd, buf, count, o))\n+            } else {\n+                Err(io::Error::new(io::ErrorKind::InvalidInput,\n+                                   \"cannot pwrite >2GB\"))\n+            }\n         }\n \n         #[cfg(not(any(target_os = \"android\", target_os = \"emscripten\")))]"}, {"sha": "14a2555adf9baa109e7d7afe08bbea07e685826a", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -56,7 +56,7 @@ pub struct CodePoint {\n /// Example: `U+1F4A9`\n impl fmt::Debug for CodePoint {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(formatter, \"U+{:04X}\", self.value)\n     }\n }\n@@ -144,7 +144,7 @@ impl ops::DerefMut for Wtf8Buf {\n /// Example: `\"a\\u{D800}\"` for a string with code points [U+0061, U+D800]\n impl fmt::Debug for Wtf8Buf {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }"}, {"sha": "b27568a61f85cfb16390130cf07086787abd047a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 46, "deletions": 41, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1861,56 +1861,61 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n             continue\n         }\n \n-        match attr.meta_item_list() {\n+        let list = match attr.meta_item_list() {\n+            Some(list) => list,\n             None => {\n                 span_err!(span_handler, attr.span, E0555,\n                           \"malformed feature attribute, expected #![feature(...)]\");\n+                continue\n+            }\n+        };\n+\n+        for mi in list {\n+            let name = if let Some(word) = mi.word() {\n+                word.name()\n+            } else {\n+                span_err!(span_handler, mi.span, E0556,\n+                          \"malformed feature, expected just one word\");\n+                continue\n+            };\n+\n+            if let Some((.., set)) = ACTIVE_FEATURES.iter().find(|f| name == f.0) {\n+                set(&mut features, mi.span);\n+                feature_checker.collect(&features, mi.span);\n+                continue\n             }\n-            Some(list) => {\n-                for mi in list {\n \n-                    let name = if let Some(word) = mi.word() {\n-                        word.name()\n-                    } else {\n-                        span_err!(span_handler, mi.span, E0556,\n-                                  \"malformed feature, expected just one word\");\n-                        continue\n-                    };\n-\n-                    if let Some(&(_, _, _, _, set)) = ACTIVE_FEATURES.iter()\n-                        .find(|& &(n, ..)| name == n) {\n-                        set(&mut features, mi.span);\n-                        feature_checker.collect(&features, mi.span);\n-                    }\n-                    else if let Some(&(.., reason)) = REMOVED_FEATURES.iter()\n-                            .find(|& &(n, ..)| name == n)\n-                        .or_else(|| STABLE_REMOVED_FEATURES.iter()\n-                            .find(|& &(n, ..)| name == n)) {\n-                        feature_removed(span_handler, mi.span, reason);\n-                    }\n-                    else if let Some(&(..)) = ACCEPTED_FEATURES.iter()\n-                        .find(|& &(n, ..)| name == n) {\n-                        features.declared_stable_lang_features.push((name, mi.span));\n-                    } else if let Some(&edition) = ALL_EDITIONS.iter()\n-                                                              .find(|e| name == e.feature_name()) {\n-                        if edition <= crate_edition {\n-                            feature_removed(span_handler, mi.span, None);\n-                        } else {\n-                            for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n-                                if let Some(f_edition) = f_edition {\n-                                    if edition >= f_edition {\n-                                        // FIXME(Manishearth) there is currently no way to set\n-                                        // lib features by edition\n-                                        set(&mut features, DUMMY_SP);\n-                                    }\n-                                }\n-                            }\n+            let removed = REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            let stable_removed = STABLE_REMOVED_FEATURES.iter().find(|f| name == f.0);\n+            if let Some((.., reason)) = removed.or(stable_removed) {\n+                feature_removed(span_handler, mi.span, *reason);\n+                continue\n+            }\n+\n+            if ACCEPTED_FEATURES.iter().any(|f| name == f.0) {\n+                features.declared_stable_lang_features.push((name, mi.span));\n+                continue\n+            }\n+\n+            if let Some(edition) = ALL_EDITIONS.iter().find(|e| name == e.feature_name()) {\n+                if *edition <= crate_edition {\n+                    continue\n+                }\n+\n+                for &(.., f_edition, set) in ACTIVE_FEATURES.iter() {\n+                    if let Some(f_edition) = f_edition {\n+                        if *edition >= f_edition {\n+                            // FIXME(Manishearth) there is currently no way to set\n+                            // lib features by edition\n+                            set(&mut features, DUMMY_SP);\n                         }\n-                    } else {\n-                        features.declared_lib_features.push((name, mi.span));\n                     }\n                 }\n+\n+                continue\n             }\n+\n+            features.declared_lib_features.push((name, mi.span));\n         }\n     }\n "}, {"sha": "2b8603c75a57b50733b0ac0ec611b8fd438b93d4", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -989,7 +989,7 @@ mod strcursor {\n     }\n \n     impl<'a> std::fmt::Debug for StrCursor<'a> {\n-        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n+        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {\n             write!(fmt, \"StrCursor({:?} | {:?})\", self.slice_before(), self.slice_after())\n         }\n     }"}, {"sha": "a9147b394f7a498406baec5c22449ed2943c1c16", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -11,5 +11,6 @@ crate-type = [\"dylib\"]\n [dependencies]\n serialize = { path = \"../libserialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+arena = { path = \"../libarena\" }\n scoped-tls = { version = \"0.1.1\", features = [\"nightly\"] }\n unicode-width = \"0.1.4\""}, {"sha": "d30d3d78ca5404dbea9f10b29f81f272b6c5af35", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -35,6 +35,7 @@ use std::path::PathBuf;\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{Lrc, Lock};\n \n+extern crate arena;\n extern crate rustc_data_structures;\n \n #[macro_use]"}, {"sha": "b84ff5697a4c8e3928244d0cf4e5487589cbb709", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -16,8 +16,10 @@ use hygiene::SyntaxContext;\n use {Span, DUMMY_SP, GLOBALS};\n \n use rustc_data_structures::fx::FxHashMap;\n+use arena::DroplessArena;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n+use std::str;\n use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n@@ -198,22 +200,35 @@ impl<T: ::std::ops::Deref<Target=str>> PartialEq<T> for Symbol {\n     }\n }\n \n-#[derive(Default)]\n+// The &'static strs in this type actually point into the arena\n pub struct Interner {\n-    names: FxHashMap<Box<str>, Symbol>,\n-    strings: Vec<Box<str>>,\n+    arena: DroplessArena,\n+    names: FxHashMap<&'static str, Symbol>,\n+    strings: Vec<&'static str>,\n     gensyms: Vec<Symbol>,\n }\n \n impl Interner {\n     pub fn new() -> Self {\n-        Interner::default()\n+        Interner {\n+            arena: DroplessArena::new(),\n+            names: Default::default(),\n+            strings: Default::default(),\n+            gensyms: Default::default(),\n+        }\n     }\n \n     fn prefill(init: &[&str]) -> Self {\n         let mut this = Interner::new();\n         for &string in init {\n-            this.intern(string);\n+            if string == \"\" {\n+                // We can't allocate empty strings in the arena, so handle this here\n+                let name = Symbol(this.strings.len() as u32);\n+                this.names.insert(\"\", name);\n+                this.strings.push(\"\");\n+            } else {\n+                this.intern(string);\n+            }\n         }\n         this\n     }\n@@ -224,8 +239,17 @@ impl Interner {\n         }\n \n         let name = Symbol(self.strings.len() as u32);\n-        let string = string.to_string().into_boxed_str();\n-        self.strings.push(string.clone());\n+\n+        // from_utf8_unchecked is safe since we just allocated a &str which is known to be utf8\n+        let string: &str = unsafe {\n+            str::from_utf8_unchecked(self.arena.alloc_slice(string.as_bytes()))\n+        };\n+        // It is safe to extend the arena allocation to 'static because we only access\n+        // these while the arena is still alive\n+        let string: &'static str =  unsafe {\n+            &*(string as *const str)\n+        };\n+        self.strings.push(string);\n         self.names.insert(string, name);\n         name\n     }\n@@ -254,7 +278,7 @@ impl Interner {\n \n     pub fn get(&self, symbol: Symbol) -> &str {\n         match self.strings.get(symbol.0 as usize) {\n-            Some(ref string) => string,\n+            Some(string) => string,\n             None => self.get(self.gensyms[(!0 - symbol.0) as usize]),\n         }\n     }"}, {"sha": "d26ab6d351830c851bce27e5eecf3ddfbdc817ed", "filename": "src/test/compile-fail/auxiliary/edition-extern-crate-allowed.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauxiliary%2Fedition-extern-crate-allowed.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// intentionally empty"}, {"sha": "286ee896161a6a5e40c8a2d05e02913d75f0a2a7", "filename": "src/test/compile-fail/edition-extern-crate-allowed.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-extern-crate-allowed.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:edition-extern-crate-allowed.rs\n+// compile-flags: --edition 2015\n+// compile-pass\n+\n+#![deny(rust_2018_idioms)]\n+\n+extern crate edition_extern_crate_allowed;\n+\n+fn main() {}"}, {"sha": "3a3a6ff95f97e9a73943244423eb261ba49a16ab", "filename": "src/test/compile-fail/edition-feature-ok.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fedition-feature-ok.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--edition 2018\n+// compile-pass\n+\n+#![feature(rust_2018_preview)]\n+\n+fn main() {}"}, {"sha": "2d478e954e7cb7cb493e98b9da4e2ad124f80b33", "filename": "src/test/run-pass/atomic-print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-print.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -15,7 +15,7 @@ use std::{env, fmt, process, sync, thread};\n \n struct SlowFmt(u32);\n impl fmt::Debug for SlowFmt {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         thread::sleep_ms(3);\n         self.0.fmt(f)\n     }"}, {"sha": "c1e408cc02ac6764aa95fc848f28fe26ddcf4549", "filename": "src/test/run-pass/union/union-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -15,7 +15,7 @@ union U {\n }\n \n impl fmt::Display for U {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         unsafe { write!(f, \"Oh hai {}\", self.a) }\n     }\n }"}, {"sha": "0f532d3da6a7307ad1f25993bb5705ee3be751c4", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: --edition 2018\n+\n #![deny(unnecessary_extern_crate)]\n #![feature(alloc, test, libc)]\n "}, {"sha": "b0b56f527e64f68c695c5a0141104de6ea91c75f", "filename": "src/test/ui-fulldeps/unnecessary-extern-crate.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Funnecessary-extern-crate.stderr?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -1,65 +1,65 @@\n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:14:1\n+  --> $DIR/unnecessary-extern-crate.rs:16:1\n    |\n LL | extern crate alloc;\n    | ^^^^^^^^^^^^^^^^^^^ help: remove it\n    |\n note: lint level defined here\n-  --> $DIR/unnecessary-extern-crate.rs:11:9\n+  --> $DIR/unnecessary-extern-crate.rs:13:9\n    |\n LL | #![deny(unnecessary_extern_crate)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:17:1\n+  --> $DIR/unnecessary-extern-crate.rs:19:1\n    |\n LL | extern crate alloc as x;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:23:1\n+  --> $DIR/unnecessary-extern-crate.rs:25:1\n    |\n LL | pub extern crate test as y;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:26:1\n+  --> $DIR/unnecessary-extern-crate.rs:28:1\n    |\n LL | pub extern crate libc;\n    | ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use libc`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:32:5\n+  --> $DIR/unnecessary-extern-crate.rs:34:5\n    |\n LL |     extern crate alloc;\n    |     ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:35:5\n+  --> $DIR/unnecessary-extern-crate.rs:37:5\n    |\n LL |     extern crate alloc as x;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:38:5\n+  --> $DIR/unnecessary-extern-crate.rs:40:5\n    |\n LL |     pub extern crate test;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:41:5\n+  --> $DIR/unnecessary-extern-crate.rs:43:5\n    |\n LL |     pub extern crate test as y;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `pub use`: `pub use test as y`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:45:9\n+  --> $DIR/unnecessary-extern-crate.rs:47:9\n    |\n LL |         extern crate alloc;\n    |         ^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc`\n \n error: `extern crate` is unnecessary in the new edition\n-  --> $DIR/unnecessary-extern-crate.rs:48:9\n+  --> $DIR/unnecessary-extern-crate.rs:50:9\n    |\n LL |         extern crate alloc as x;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `use`: `use alloc as x`"}, {"sha": "4481b75840487440d363502b2ec0f832fce9164e", "filename": "src/test/ui/const-eval/duration_conversion.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui%2Fconst-eval%2Fduration_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftest%2Fui%2Fconst-eval%2Fduration_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fduration_conversion.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![feature(duration_getters)]\n+\n+use std::time::Duration;\n+\n+fn main() {\n+    const _ONE_SECOND: Duration = Duration::from_nanos(1_000_000_000);\n+    const _ONE_MILLISECOND: Duration = Duration::from_nanos(1_000_000);\n+    const _ONE_MICROSECOND: Duration = Duration::from_nanos(1_000);\n+    const _ONE_NANOSECOND: Duration = Duration::from_nanos(1);\n+    const _ONE: usize = _ONE_SECOND.as_secs() as usize;\n+    const _TWO: usize = _ONE_MILLISECOND.subsec_millis() as usize;\n+    const _THREE: usize = _ONE_MICROSECOND.subsec_micros() as usize;\n+    const _FOUR: usize = _ONE_NANOSECOND.subsec_nanos() as usize;\n+    const _0: [[u8; _ONE]; _TWO] = [[1; _ONE]; _TWO];\n+    const _1: [[u8; _THREE]; _FOUR] = [[3; _THREE]; _FOUR];\n+}"}, {"sha": "363d01d964eb5da89624680234f263d03cfddf43", "filename": "src/tools/tidy/src/libcoretest.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff2ac35db93a80b2de5daa4f280bf1503d62c164/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flibcoretest.rs?ref=ff2ac35db93a80b2de5daa4f280bf1503d62c164", "patch": "@@ -22,12 +22,22 @@ pub fn check(path: &Path, bad: &mut bool) {\n         &libcore_path,\n         &mut |subpath| t!(subpath.strip_prefix(&libcore_path)).starts_with(\"tests\"),\n         &mut |subpath| {\n-            if t!(read_to_string(subpath)).contains(\"#[test]\") {\n-                tidy_error!(\n-                    bad,\n-                    \"{} contains #[test]; libcore tests must be placed inside `src/libcore/tests/`\",\n-                    subpath.display()\n-                );\n+            if let Some(\"rs\") = subpath.extension().and_then(|e| e.to_str()) {\n+                match read_to_string(subpath) {\n+                    Ok(contents) => {\n+                        if contents.contains(\"#[test]\") {\n+                            tidy_error!(\n+                                bad,\n+                                \"{} contains #[test]; libcore tests must be placed inside \\\n+                                `src/libcore/tests/`\",\n+                                subpath.display()\n+                            );\n+                        }\n+                    }\n+                    Err(err) => {\n+                        panic!(\"failed to read file {:?}: {}\", subpath, err);\n+                    }\n+                }\n             }\n         },\n     );"}]}