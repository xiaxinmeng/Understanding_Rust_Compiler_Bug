{"sha": "aa284de1fc246b55fb53783ded3e9786e04b03d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhMjg0ZGUxZmMyNDZiNTVmYjUzNzgzZGVkM2U5Nzg2ZTA0YjAzZDA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-19T01:45:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-02-19T01:45:56Z"}, "message": "rustc: For one-tuples, make parsing and printing the type work\n\nand add a test to reflect-visit-data", "tree": {"sha": "77cbec33ccd8c2af2c2888b5cf2c60499db1d32e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77cbec33ccd8c2af2c2888b5cf2c60499db1d32e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa284de1fc246b55fb53783ded3e9786e04b03d0", "comment_count": 18, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa284de1fc246b55fb53783ded3e9786e04b03d0", "html_url": "https://github.com/rust-lang/rust/commit/aa284de1fc246b55fb53783ded3e9786e04b03d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa284de1fc246b55fb53783ded3e9786e04b03d0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612553cb3921f428668602afda1b106e0fd54d73", "url": "https://api.github.com/repos/rust-lang/rust/commits/612553cb3921f428668602afda1b106e0fd54d73", "html_url": "https://github.com/rust-lang/rust/commit/612553cb3921f428668602afda1b106e0fd54d73"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "4cccc1d26382c01fb2d1a28cd19ef1b1f3af6f68", "filename": "src/libcore/to_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibcore%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibcore%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_str.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -43,6 +43,8 @@ impl ToStr for @str {\n     pure fn to_str(&self) -> ~str { ::str::from_slice(*self) }\n }\n \n+// FIXME #4898: impl for one-tuples\n+\n impl<A: ToStr, B: ToStr> ToStr for (A, B) {\n     #[inline(always)]\n     pure fn to_str(&self) -> ~str {"}, {"sha": "e49c1d26a06300fcaab7288339273975d42adaa9", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -111,6 +111,8 @@ impl<A: Copy, B: Copy> ExtendedTupleOps<A,B> for (~[A], ~[B]) {\n     }\n }\n \n+// FIXME #4898: impl for one-tuples\n+\n #[cfg(notest)]\n impl<A: Eq, B: Eq> Eq for (A, B) {\n     #[inline(always)]"}, {"sha": "a9b455c3304c9ee2323c501c1aa7884f937e4e64", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -576,12 +576,21 @@ pub impl Parser {\n                 self.bump();\n                 ty_nil\n             } else {\n+                // (t) is a parenthesized ty\n+                // (t,) is the type of a tuple with only one field,\n+                // of type t\n                 let mut ts = ~[self.parse_ty(false)];\n+                let mut one_tuple = false;\n                 while self.token == token::COMMA {\n                     self.bump();\n-                    ts.push(self.parse_ty(false));\n+                    if self.token != token::RPAREN {\n+                        ts.push(self.parse_ty(false));\n+                    }\n+                    else {\n+                        one_tuple = true;\n+                    }\n                 }\n-                let t = if vec::len(ts) == 1u { ts[0].node }\n+                let t = if ts.len() == 1 && !one_tuple { ts[0].node }\n                 else { ty_tup(ts) };\n                 self.expect(token::RPAREN);\n                 t"}, {"sha": "ccb3947f83493aa0ff985c1870ab747aec16627d", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -414,6 +414,9 @@ pub fn print_type_ex(s: @ps, &&ty: @ast::Ty, print_colons: bool) {\n       ast::ty_tup(elts) => {\n         popen(s);\n         commasep(s, inconsistent, elts, print_type);\n+        if elts.len() == 1 {\n+            word(s.s, ~\",\");\n+        }\n         pclose(s);\n       }\n       ast::ty_bare_fn(f) => {"}, {"sha": "9d01fbface0dd193f7dfbddb67aa53639b79151a", "filename": "src/test/run-pass/one-tuple.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Ftest%2Frun-pass%2Fone-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fone-tuple.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -16,5 +16,9 @@ fn main() {\n             assert x == 'c';\n         }\n     }\n+    // test the 1-tuple type too\n+    let x: (char,) = ('d',);\n+    let (y,) = x;\n+    assert y == 'd';\n }\n "}, {"sha": "3694ffdfde02f1c80babbc971152368423e2c5be", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa284de1fc246b55fb53783ded3e9786e04b03d0/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=aa284de1fc246b55fb53783ded3e9786e04b03d0", "patch": "@@ -636,11 +636,12 @@ struct Triple { x: int, y: int, z: int }\n \n pub fn main() {\n     unsafe {\n-        let r = (1,2,3,true,false, Triple {x:5,y:4,z:3});\n+        let r = (1,2,3,true,false, Triple {x:5,y:4,z:3}, (12,));\n         let p = ptr::addr_of(&r) as *c_void;\n         let u = my_visitor(@Stuff {mut ptr1: p,\n                              mut ptr2: p,\n-                             mut vals: ~[]});\n+                             mut vals: ~[]\n+                                  });\n         let v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n         unsafe { error!(\"tydesc sz: %u, align: %u\",\n@@ -653,7 +654,7 @@ pub fn main() {\n         }\n         error!(\"%?\", copy u.vals);\n         assert u.vals == ~[\n-            ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\"\n+            ~\"1\", ~\"2\", ~\"3\", ~\"true\", ~\"false\", ~\"5\", ~\"4\", ~\"3\", ~\"12\"\n         ];\n     }\n  }"}]}