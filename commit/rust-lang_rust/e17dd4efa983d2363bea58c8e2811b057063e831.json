{"sha": "e17dd4efa983d2363bea58c8e2811b057063e831", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2RkNGVmYTk4M2QyMzYzYmVhNThjOGUyODExYjA1NzA2M2U4MzE=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-03-23T22:37:38Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2019-03-23T22:37:38Z"}, "message": "rustup https://github.com/rust-lang/rust/pull/59096/", "tree": {"sha": "e836480592f1fba438a7faecd02069e10377aac4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e836480592f1fba438a7faecd02069e10377aac4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17dd4efa983d2363bea58c8e2811b057063e831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17dd4efa983d2363bea58c8e2811b057063e831", "html_url": "https://github.com/rust-lang/rust/commit/e17dd4efa983d2363bea58c8e2811b057063e831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17dd4efa983d2363bea58c8e2811b057063e831/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7d444508655eab132f0d24d81f9cdc08b848056", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7d444508655eab132f0d24d81f9cdc08b848056", "html_url": "https://github.com/rust-lang/rust/commit/c7d444508655eab132f0d24d81f9cdc08b848056"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "4313d040474a96d3c699e407015fb2bb3b0dea36", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -256,8 +256,7 @@ impl<'a, 'tcx> Functions {\n         hir_id: hir::HirId,\n     ) {\n         let expr = &body.value;\n-        let node_id = cx.tcx.hir().hir_to_node_id(hir_id);\n-        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(node_id) {\n+        if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(hir_id) {\n             let raw_ptrs = iter_input_pats(decl, body)\n                 .zip(decl.inputs.iter())\n                 .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))"}, {"sha": "dc55721eb29967c072b8548e081739ce50c1000a", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -148,9 +148,7 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n         }\n     }\n \n-    let trait_node_id = cx.tcx.hir().hir_to_node_id(visited_trait.hir_id);\n-\n-    if cx.access_levels.is_exported(trait_node_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, \"len\")) {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id_from_hir_id(visited_trait.hir_id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);\n@@ -195,7 +193,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n         if cx\n             .access_levels\n-            .is_exported(cx.tcx.hir().hir_to_node_id(is_empty.id.hir_id))\n+            .is_exported(is_empty.id.hir_id)\n         {\n             return;\n         } else {\n@@ -206,7 +204,7 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item, impl_items: &[ImplIte\n     };\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-        if cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(i.id.hir_id)) {\n+        if cx.access_levels.is_exported(i.id.hir_id) {\n             let def_id = cx.tcx.hir().local_def_id_from_hir_id(item.hir_id);\n             let ty = cx.tcx.type_of(def_id);\n "}, {"sha": "858184d7ea16c673bcb5382b841f969b6ccd4c1b", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -918,8 +918,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n             if let hir::ItemKind::Impl(_, _, _, _, None, ref self_ty, _) = item.node;\n             then {\n-                let node_id = cx.tcx.hir().hir_to_node_id(implitem.hir_id);\n-                if cx.access_levels.is_exported(node_id) {\n+                if cx.access_levels.is_exported(implitem.hir_id) {\n                 // check missing trait implementations\n                     for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if name == method_name &&"}, {"sha": "090ed6d242d149ff950cf1a9e21ea443fa7b64d5", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n             return;\n         }\n \n-        if !cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(it.hir_id)) {\n+        if !cx.access_levels.is_exported(it.hir_id) {\n             return;\n         }\n         match it.node {\n@@ -146,8 +146,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        let node_id = cx.tcx.hir().hir_to_node_id(impl_item.hir_id);\n-        if !cx.access_levels.is_exported(node_id) {\n+        if !cx.access_levels.is_exported(impl_item.hir_id) {\n             return;\n         }\n \n@@ -163,8 +162,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if let Some(n) = cx.tcx.hir().as_local_node_id(trait_def_id) {\n-                if !cx.access_levels.is_exported(n) {\n+            if cx.tcx.hir().as_local_node_id(trait_def_id).is_some() {\n+                if !cx.access_levels.is_exported(impl_item.hir_id) {\n                     // If a trait is being implemented for an item, and the\n                     // trait is not exported, we don't need #[inline]\n                     return;"}, {"sha": "3bf0c22c322c58b0987ddbce86e85e2f66a11c57", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -111,7 +111,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                     if let hir::ImplItemKind::Method(ref sig, _) = impl_item.node {\n                         let name = impl_item.ident.name;\n                         let id = impl_item.hir_id;\n-                        let node_id = cx.tcx.hir().hir_to_node_id(id);\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;\n@@ -129,7 +128,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                             // impl of `Default`\n                             return;\n                         }\n-                        if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(node_id) {\n+                        if sig.decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                             let self_did = cx.tcx.hir().local_def_id_from_hir_id(cx.tcx.hir().get_parent_item(id));\n                             let self_ty = cx.tcx.type_of(self_did);\n                             if_chain! {"}, {"sha": "33dea622b3587c48f3bb87e5adc0d3ca0d3519f1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17dd4efa983d2363bea58c8e2811b057063e831/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e17dd4efa983d2363bea58c8e2811b057063e831", "patch": "@@ -2075,7 +2075,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n             }\n         }\n \n-        if !cx.access_levels.is_exported(cx.tcx.hir().hir_to_node_id(item.hir_id)) {\n+        if !cx.access_levels.is_exported(item.hir_id) {\n             return;\n         }\n "}]}