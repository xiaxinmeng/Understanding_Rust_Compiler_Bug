{"sha": "ef5da14edb09d6425b1b6576d418e12c268ddf17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWRhMTRlZGIwOWQ2NDI1YjFiNjU3NmQ0MThlMTJjMjY4ZGRmMTc=", "commit": {"author": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-03T22:21:51Z"}, "committer": {"name": "Luqman Aden", "email": "laden@csclub.uwaterloo.ca", "date": "2014-12-29T00:40:47Z"}, "message": "libcore: Add NonZero lang item and implement some methods.", "tree": {"sha": "4efcc9b980e199e82c20b1d00d7e8d7c736decc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4efcc9b980e199e82c20b1d00d7e8d7c736decc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5da14edb09d6425b1b6576d418e12c268ddf17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5da14edb09d6425b1b6576d418e12c268ddf17", "html_url": "https://github.com/rust-lang/rust/commit/ef5da14edb09d6425b1b6576d418e12c268ddf17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5da14edb09d6425b1b6576d418e12c268ddf17/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46e73764896316ef1384591656cfca01280c5e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/46e73764896316ef1384591656cfca01280c5e5c", "html_url": "https://github.com/rust-lang/rust/commit/46e73764896316ef1384591656cfca01280c5e5c"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "910204edf70ab00d2a34377cd42dbd5fb9de23c5", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ef5da14edb09d6425b1b6576d418e12c268ddf17/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5da14edb09d6425b1b6576d418e12c268ddf17/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=ef5da14edb09d6425b1b6576d418e12c268ddf17", "patch": "@@ -90,6 +90,7 @@\n use mem;\n use clone::Clone;\n use intrinsics;\n+use kinds::Copy;\n use option::Option;\n use option::Option::{Some, None};\n use kinds::{Send, Sync};\n@@ -109,6 +110,15 @@ pub use intrinsics::copy_memory;\n #[experimental = \"uncertain about naming and semantics\"]\n pub use intrinsics::set_memory;\n \n+\n+/// A wrapper type for raw pointers and integers that will never be\n+/// NULL or 0 that might allow certain optimizations.\n+#[lang=\"non_zero\"]\n+#[deriving(Clone, PartialEq, Eq, PartialOrd)]\n+pub struct NonZero<T>(pub T);\n+\n+impl<T: Copy> Copy for NonZero<T> {}\n+\n /// Creates a null raw pointer.\n ///\n /// # Examples\n@@ -313,6 +323,32 @@ impl<T> RawPtr<T> for *const T {\n     }\n }\n \n+impl<T> RawPtr<T> for NonZero<*const T> {\n+    #[inline]\n+    fn null() -> NonZero<*const T> { NonZero(null()) }\n+\n+    #[inline]\n+    fn is_null(&self) -> bool { false }\n+\n+    #[inline]\n+    fn to_uint(&self) -> uint {\n+        let NonZero(p) = *self;\n+        p as uint\n+    }\n+\n+    #[inline]\n+    unsafe fn offset(self, count: int) -> NonZero<*const T> {\n+        let NonZero(p) = self;\n+        NonZero(intrinsics::offset(p, count))\n+    }\n+\n+    #[inline]\n+    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        let NonZero(p) = *self;\n+        Some(&*p)\n+    }\n+}\n+\n impl<T> RawPtr<T> for *mut T {\n     #[inline]\n     fn null() -> *mut T { null_mut() }\n@@ -338,6 +374,32 @@ impl<T> RawPtr<T> for *mut T {\n     }\n }\n \n+impl<T> RawPtr<T> for NonZero<*mut T> {\n+    #[inline]\n+    fn null() -> NonZero<*mut T> { NonZero(null_mut()) }\n+\n+    #[inline]\n+    fn is_null(&self) -> bool { false }\n+\n+    #[inline]\n+    fn to_uint(&self) -> uint {\n+        let NonZero(p) = *self;\n+        p as uint\n+    }\n+\n+    #[inline]\n+    unsafe fn offset(self, count: int) -> NonZero<*mut T> {\n+        let NonZero(p) = self;\n+        NonZero(intrinsics::offset(p as *const T, count) as *mut T)\n+    }\n+\n+    #[inline]\n+    unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        let NonZero(p) = *self;\n+        Some(&*p)\n+    }\n+}\n+\n impl<T> RawMutPtr<T> for *mut T {\n     #[inline]\n     unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n@@ -349,6 +411,14 @@ impl<T> RawMutPtr<T> for *mut T {\n     }\n }\n \n+impl<T> RawMutPtr<T> for NonZero<*mut T> {\n+    #[inline]\n+    unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n+        let NonZero(p) = *self;\n+        Some(&mut *p)\n+    }\n+}\n+\n // Equality for pointers\n impl<T> PartialEq for *const T {\n     #[inline]"}]}