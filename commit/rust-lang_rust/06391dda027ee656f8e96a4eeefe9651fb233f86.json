{"sha": "06391dda027ee656f8e96a4eeefe9651fb233f86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MzkxZGRhMDI3ZWU2NTZmOGU5NmE0ZWVlZmU5NjUxZmIyMzNmODY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T05:57:09Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-08T16:37:01Z"}, "message": "Make the interface to metadata::csearch more consistent", "tree": {"sha": "831d6cfe8740719dbf868cb7b8fdf7b0e3c15c18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/831d6cfe8740719dbf868cb7b8fdf7b0e3c15c18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06391dda027ee656f8e96a4eeefe9651fb233f86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06391dda027ee656f8e96a4eeefe9651fb233f86", "html_url": "https://github.com/rust-lang/rust/commit/06391dda027ee656f8e96a4eeefe9651fb233f86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06391dda027ee656f8e96a4eeefe9651fb233f86/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85212840c06ccd396ccc5c1d96e477ea3ac96b32", "url": "https://api.github.com/repos/rust-lang/rust/commits/85212840c06ccd396ccc5c1d96e477ea3ac96b32", "html_url": "https://github.com/rust-lang/rust/commit/85212840c06ccd396ccc5c1d96e477ea3ac96b32"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "90deb7bbfeb54a5527c45632da4660f3adec4e7c", "filename": "src/comp/metadata/csearch.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcsearch.rs?ref=06391dda027ee656f8e96a4eeefe9651fb233f86", "patch": "@@ -1,35 +1,37 @@\n-import driver::session;\n import syntax::ast;\n import middle::ty;\n import std::io;\n \n-fn get_symbol(session::session sess, ast::def_id def) -> str {\n+fn get_symbol(&cstore::cstore cstore, ast::def_id def) -> str {\n     auto cnum = def._0;\n     auto node_id = def._1;\n-    auto cstore = sess.get_cstore();\n     auto cdata = cstore::get_crate_data(cstore, cnum).data;\n     ret decoder::get_symbol(cdata, node_id);\n }\n \n fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> ty::variant_info[] {\n-    decoder::get_tag_variants(tcx, def)\n+    auto cstore = tcx.sess.get_cstore();\n+    auto cnum = def._0;\n+    auto cdata = cstore::get_crate_data(cstore, cnum).data;\n+    ret decoder::get_tag_variants(cdata, def, tcx)\n }\n \n fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n-    decoder::get_type(tcx, def)\n+    auto cstore = tcx.sess.get_cstore();\n+    auto cnum = def._0;\n+    auto cdata = cstore::get_crate_data(cstore, cnum).data;\n+    decoder::get_type(cdata, def, tcx)\n }\n \n-fn get_type_param_count(ty::ctxt tcx, &ast::def_id def) -> uint {\n+fn get_type_param_count(&cstore::cstore cstore, &ast::def_id def) -> uint {\n     auto cnum = def._0;\n     auto node_id = def._1;\n-    auto cstore = tcx.sess.get_cstore();\n     auto cdata = cstore::get_crate_data(cstore, cnum).data;\n     ret decoder::get_type_param_count(cdata, node_id);\n }\n \n-fn lookup_defs(session::session sess, ast::crate_num cnum,\n+fn lookup_defs(&cstore::cstore cstore, ast::crate_num cnum,\n                vec[ast::ident] path) -> vec[ast::def] {\n-    auto cstore = sess.get_cstore();\n     auto cdata = cstore::get_crate_data(cstore, cnum).data;\n     ret decoder::lookup_defs(cdata, cnum, path);\n }"}, {"sha": "d90cdcfbebd524f00c6dcf7ca3a96b4cd98b1c2e", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=06391dda027ee656f8e96a4eeefe9651fb233f86", "patch": "@@ -171,12 +171,12 @@ fn lookup_def(ast::crate_num cnum, vec[u8] data,\n     ret def;\n }\n \n-fn get_type(ty::ctxt tcx, ast::def_id def) -> ty::ty_param_count_and_ty {\n-    auto external_crate_id = def._0;\n-    auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n-                                       external_crate_id).data;\n-    auto item = lookup_item(def._1, data);\n-    auto t = item_type(item, external_crate_id, tcx);\n+fn get_type(&vec[u8] data, ast::def_id def,\n+            &ty::ctxt tcx) -> ty::ty_param_count_and_ty {\n+    auto this_cnum = def._0;\n+    auto node_id = def._1;\n+    auto item = lookup_item(node_id, data);\n+    auto t = item_type(item, this_cnum, tcx);\n     auto tp_count;\n     auto kind_ch = item_kind(item);\n     auto has_ty_params = kind_has_type_params(kind_ch);\n@@ -194,7 +194,8 @@ fn get_symbol(&vec[u8] data, ast::node_id id) -> str {\n     ret item_symbol(lookup_item(id, data));\n }\n \n-fn get_tag_variants(ty::ctxt tcx, ast::def_id def) -> ty::variant_info[] {\n+fn get_tag_variants(&vec[u8] data, ast::def_id def,\n+                    &ty::ctxt tcx) -> ty::variant_info[] {\n     auto external_crate_id = def._0;\n     auto data = cstore::get_crate_data(tcx.sess.get_cstore(),\n                                        external_crate_id).data;"}, {"sha": "0c795c971edd87eeeaaf74b87cc968cd2816adba", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=06391dda027ee656f8e96a4eeefe9651fb233f86", "patch": "@@ -1143,7 +1143,7 @@ fn ns_for_def(def d) -> namespace {\n \n fn lookup_external(&env e, int cnum, vec[ident] ids, namespace ns) ->\n    option::t[def] {\n-    for (def d in csearch::lookup_defs(e.sess, cnum, ids)) {\n+    for (def d in csearch::lookup_defs(e.sess.get_cstore(), cnum, ids)) {\n         e.ext_map.insert(ast::def_id_of_def(d), ids);\n         if (ns == ns_for_def(d)) { ret some(d); }\n     }"}, {"sha": "88f47246e3e3466ec91314a6435ef9542bbc8ba2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06391dda027ee656f8e96a4eeefe9651fb233f86/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=06391dda027ee656f8e96a4eeefe9651fb233f86", "patch": "@@ -2220,12 +2220,13 @@ fn trans_res_drop(@block_ctxt cx, ValueRef rs, &ast::def_id did,\n             case (_) { ccx.tcx.sess.bug(\"internal error in trans_res_drop\") }\n         }\n     } else {\n-        auto params = csearch::get_type_param_count(ccx.tcx, did);\n+        auto params = csearch::get_type_param_count(ccx.sess.get_cstore(),\n+                                                    did);\n         auto f_t = type_of_fn(ccx, cx.sp, ast::proto_fn,\n                               ~[rec(mode=ty::mo_alias(false), ty=inner_t)],\n                               ty::mk_nil(ccx.tcx), params);\n         get_extern_const(ccx.externs, ccx.llmod,\n-                         csearch::get_symbol(ccx.sess, did),\n+                         csearch::get_symbol(ccx.sess.get_cstore(), did),\n                          T_fn_pair(ccx.tn, f_t))\n     };\n     auto dtor_addr = cx.build.Load\n@@ -4942,7 +4943,7 @@ fn lval_val(&@block_ctxt cx, ValueRef val) -> lval_result {\n fn trans_external_path(&@block_ctxt cx, &ast::def_id did,\n                        &ty::ty_param_count_and_ty tpt) -> lval_result {\n     auto lcx = cx.fcx.lcx;\n-    auto name = csearch::get_symbol(lcx.ccx.sess, did);\n+    auto name = csearch::get_symbol(lcx.ccx.sess.get_cstore(), did);\n     auto v =\n         get_extern_const(lcx.ccx.externs, lcx.ccx.llmod, name,\n                          type_of_ty_param_count_and_ty(lcx, cx.sp, tpt));\n@@ -4988,7 +4989,7 @@ fn lookup_discriminant(&@local_ctxt lcx, &ast::def_id tid, &ast::def_id vid)\n             // It's an external discriminant that we haven't seen yet.\n \n             assert (vid._0 != ast::local_crate);\n-            auto sym = csearch::get_symbol(lcx.ccx.sess, vid);\n+            auto sym = csearch::get_symbol(lcx.ccx.sess.get_cstore(), vid);\n             auto gvar =\n                 llvm::LLVMAddGlobal(lcx.ccx.llmod, T_int(), str::buf(sym));\n             llvm::LLVMSetLinkage(gvar,"}]}