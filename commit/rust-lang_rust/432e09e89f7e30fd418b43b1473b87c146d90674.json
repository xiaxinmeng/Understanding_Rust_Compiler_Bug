{"sha": "432e09e89f7e30fd418b43b1473b87c146d90674", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMmUwOWU4OWY3ZTMwZmQ0MThiNDNiMTQ3M2I4N2MxNDZkOTA2NzQ=", "commit": {"author": {"name": "David Bar-On", "email": "david.cdb004@gmail.com", "date": "2021-01-08T13:56:05Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-02-18T02:47:20Z"}, "message": "Add the use of rewrite_assign_rhs_with_comments to 1.x", "tree": {"sha": "e71731236146dbe29ea5210e28cd462eef62e7cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e71731236146dbe29ea5210e28cd462eef62e7cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/432e09e89f7e30fd418b43b1473b87c146d90674", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/432e09e89f7e30fd418b43b1473b87c146d90674", "html_url": "https://github.com/rust-lang/rust/commit/432e09e89f7e30fd418b43b1473b87c146d90674", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/432e09e89f7e30fd418b43b1473b87c146d90674/comments", "author": {"login": "davidBar-On", "id": 61089727, "node_id": "MDQ6VXNlcjYxMDg5NzI3", "avatar_url": "https://avatars.githubusercontent.com/u/61089727?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidBar-On", "html_url": "https://github.com/davidBar-On", "followers_url": "https://api.github.com/users/davidBar-On/followers", "following_url": "https://api.github.com/users/davidBar-On/following{/other_user}", "gists_url": "https://api.github.com/users/davidBar-On/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidBar-On/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidBar-On/subscriptions", "organizations_url": "https://api.github.com/users/davidBar-On/orgs", "repos_url": "https://api.github.com/users/davidBar-On/repos", "events_url": "https://api.github.com/users/davidBar-On/events{/privacy}", "received_events_url": "https://api.github.com/users/davidBar-On/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b0ed96f2eed2e49da2cceba550732ce9e7e461e", "html_url": "https://github.com/rust-lang/rust/commit/4b0ed96f2eed2e49da2cceba550732ce9e7e461e"}], "stats": {"total": 196, "additions": 152, "deletions": 44}, "files": [{"sha": "0264a90c7d04694081f5526ce9b5d7ad4f9dde45", "filename": "src/comment.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=432e09e89f7e30fd418b43b1473b87c146d90674", "patch": "@@ -977,6 +977,7 @@ fn left_trim_comment_line<'a>(line: &'a str, style: &CommentStyle<'_>) -> (&'a s\n \n pub(crate) trait FindUncommented {\n     fn find_uncommented(&self, pat: &str) -> Option<usize>;\n+    fn find_last_uncommented(&self, pat: &str) -> Option<usize>;\n }\n \n impl FindUncommented for str {\n@@ -1002,6 +1003,19 @@ impl FindUncommented for str {\n             None => Some(self.len() - pat.len()),\n         }\n     }\n+\n+    fn find_last_uncommented(&self, pat: &str) -> Option<usize> {\n+        if let Some(left) = self.find_uncommented(pat) {\n+            let mut result = left;\n+            // add 1 to use find_last_uncommented for &str after pat\n+            while let Some(next) = self[(result + 1)..].find_last_uncommented(pat) {\n+                result += next + 1;\n+            }\n+            Some(result)\n+        } else {\n+            None\n+        }\n+    }\n }\n \n // Returns the first byte position after the first comment. The given string"}, {"sha": "4589b57dacb61e2300f1c3fbbdfe160e2263402c", "filename": "src/expr.rs", "status": "modified", "additions": 65, "deletions": 41, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=432e09e89f7e30fd418b43b1473b87c146d90674", "patch": "@@ -9,8 +9,8 @@ use rustc_span::{BytePos, Span};\n use crate::chains::rewrite_chain;\n use crate::closures;\n use crate::comment::{\n-    combine_strs_with_missing_comments, comment_style, contains_comment, recover_comment_removed,\n-    rewrite_comment, rewrite_missing_comment, CharClasses, FindUncommented,\n+    combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n+    rewrite_missing_comment, CharClasses, FindUncommented,\n };\n use crate::config::lists::*;\n use crate::config::{Config, ControlBraceStyle, IndentStyle, Version};\n@@ -829,38 +829,16 @@ impl<'a> ControlFlow<'a> {\n             let comments_lo = context\n                 .snippet_provider\n                 .span_after(self.span, self.connector.trim());\n-            let missing_comments = if let Some(comment) =\n-                rewrite_missing_comment(mk_sp(comments_lo, expr.span.lo()), cond_shape, context)\n-            {\n-                if !self.connector.is_empty() && !comment.is_empty() {\n-                    if comment_style(&comment, false).is_line_comment() || comment.contains(\"\\n\") {\n-                        let newline = &pat_shape\n-                            .indent\n-                            .block_indent(context.config)\n-                            .to_string_with_newline(context.config);\n-                        // An extra space is added when the lhs and rhs are joined\n-                        // so we need to remove one space from the end to ensure\n-                        // the comment and rhs are aligned.\n-                        let mut suffix = newline.as_ref().to_string();\n-                        if !suffix.is_empty() {\n-                            suffix.truncate(suffix.len() - 1);\n-                        }\n-                        format!(\"{}{}{}\", newline, comment, suffix)\n-                    } else {\n-                        format!(\" {}\", comment)\n-                    }\n-                } else {\n-                    comment\n-                }\n-            } else {\n-                \"\".to_owned()\n-            };\n-\n-            let result = format!(\n-                \"{}{}{}{}\",\n-                matcher, pat_string, self.connector, missing_comments\n+            let comments_span = mk_sp(comments_lo, expr.span.lo());\n+            return rewrite_assign_rhs_with_comments(\n+                context,\n+                &format!(\"{}{}{}\", matcher, pat_string, self.connector),\n+                expr,\n+                cond_shape,\n+                RhsTactics::Default,\n+                comments_span,\n+                true,\n             );\n-            return rewrite_assign_rhs(context, result, expr, cond_shape);\n         }\n \n         let expr_rw = expr.rewrite(context, cond_shape);\n@@ -1899,14 +1877,13 @@ pub(crate) fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     rewrite_assign_rhs_with(context, lhs, ex, shape, RhsTactics::Default)\n }\n \n-pub(crate) fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n+pub(crate) fn rewrite_assign_rhs_expr<R: Rewrite>(\n     context: &RewriteContext<'_>,\n-    lhs: S,\n+    lhs: &str,\n     ex: &R,\n     shape: Shape,\n     rhs_tactics: RhsTactics,\n ) -> Option<String> {\n-    let lhs = lhs.into();\n     let last_line_width = last_line_width(&lhs).saturating_sub(if lhs.contains('\\n') {\n         shape.indent.width()\n     } else {\n@@ -1918,22 +1895,67 @@ pub(crate) fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n         offset: shape.offset + last_line_width + 1,\n         ..shape\n     });\n-    let rhs = choose_rhs(\n+    let has_rhs_comment = if let Some(offset) = lhs.find_last_uncommented(\"=\") {\n+        lhs.trim_end().len() > offset + 1\n+    } else {\n+        false\n+    };\n+\n+    choose_rhs(\n         context,\n         ex,\n         orig_shape,\n         ex.rewrite(context, orig_shape),\n         rhs_tactics,\n-    )?;\n+        has_rhs_comment,\n+    )\n+}\n+\n+pub(crate) fn rewrite_assign_rhs_with<S: Into<String>, R: Rewrite>(\n+    context: &RewriteContext<'_>,\n+    lhs: S,\n+    ex: &R,\n+    shape: Shape,\n+    rhs_tactics: RhsTactics,\n+) -> Option<String> {\n+    let lhs = lhs.into();\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n     Some(lhs + &rhs)\n }\n \n+pub(crate) fn rewrite_assign_rhs_with_comments<S: Into<String>, R: Rewrite>(\n+    context: &RewriteContext<'_>,\n+    lhs: S,\n+    ex: &R,\n+    shape: Shape,\n+    rhs_tactics: RhsTactics,\n+    between_span: Span,\n+    allow_extend: bool,\n+) -> Option<String> {\n+    let lhs = lhs.into();\n+    let contains_comment = contains_comment(context.snippet(between_span));\n+    let shape = if contains_comment {\n+        shape.block_left(context.config.tab_spaces())?\n+    } else {\n+        shape\n+    };\n+    let rhs = rewrite_assign_rhs_expr(context, &lhs, ex, shape, rhs_tactics)?;\n+\n+    if contains_comment {\n+        let rhs = rhs.trim_start();\n+        combine_strs_with_missing_comments(context, &lhs, &rhs, between_span, shape, allow_extend)\n+    } else {\n+        Some(lhs + &rhs)\n+    }\n+}\n+\n fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext<'_>,\n     expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n     rhs_tactics: RhsTactics,\n+    has_rhs_comment: bool,\n ) -> Option<String> {\n     match orig_rhs {\n         Some(ref new_str)\n@@ -1950,13 +1972,14 @@ fn choose_rhs<R: Rewrite>(\n                 .indent\n                 .block_indent(context.config)\n                 .to_string_with_newline(context.config);\n+            let before_space_str = if has_rhs_comment { \"\" } else { \" \" };\n \n             match (orig_rhs, new_rhs) {\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n                     if wrap_str(new_rhs.clone(), context.config.max_width(), new_shape)\n                         .is_none() =>\n                 {\n-                    Some(format!(\" {}\", orig_rhs))\n+                    Some(format!(\"{}{}\", before_space_str, orig_rhs))\n                 }\n                 (Some(ref orig_rhs), Some(ref new_rhs))\n                     if prefer_next_line(orig_rhs, new_rhs, rhs_tactics) =>\n@@ -1966,10 +1989,11 @@ fn choose_rhs<R: Rewrite>(\n                 (None, Some(ref new_rhs)) => Some(format!(\"{}{}\", new_indent_str, new_rhs)),\n                 (None, None) if rhs_tactics == RhsTactics::AllowOverflow => {\n                     let shape = shape.infinite_width();\n-                    expr.rewrite(context, shape).map(|s| format!(\" {}\", s))\n+                    expr.rewrite(context, shape)\n+                        .map(|s| format!(\"{}{}\", before_space_str, s))\n                 }\n                 (None, None) => None,\n-                (Some(orig_rhs), _) => Some(format!(\" {}\", orig_rhs)),\n+                (Some(orig_rhs), _) => Some(format!(\"{}{}\", before_space_str, orig_rhs)),\n             }\n         }\n     }"}, {"sha": "6cdbb686ad830b7a3a670058f016099064b752a9", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432e09e89f7e30fd418b43b1473b87c146d90674/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=432e09e89f7e30fd418b43b1473b87c146d90674", "patch": "@@ -17,7 +17,8 @@ use crate::comment::{\n use crate::config::lists::*;\n use crate::config::{BraceStyle, Config, IndentStyle, Version};\n use crate::expr::{\n-    is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with, RhsTactics,\n+    is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n+    rewrite_assign_rhs_with_comments, RhsTactics,\n };\n use crate::lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use crate::macros::{rewrite_macro, MacroPosition};\n@@ -1822,14 +1823,22 @@ fn rewrite_static(\n     };\n \n     if let Some(expr) = static_parts.expr_opt {\n+        let comments_lo = context.snippet_provider.span_after(static_parts.span, \"=\");\n+        let expr_lo = expr.span.lo();\n+        let comments_span = mk_sp(comments_lo, expr_lo);\n+\n         let lhs = format!(\"{}{} =\", prefix, ty_str);\n+\n         // 1 = ;\n         let remaining_width = context.budget(offset.block_indent + 1);\n-        rewrite_assign_rhs(\n+        rewrite_assign_rhs_with_comments(\n             context,\n-            lhs,\n+            &lhs,\n             &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n+            RhsTactics::Default,\n+            comments_span,\n+            true,\n         )\n         .and_then(|res| recover_comment_removed(res, static_parts.span, context))\n         .map(|s| if s.ends_with(';') { s } else { s + \";\" })"}, {"sha": "e14e039b98f54aa6a23e50a3e1bd8e728ba7a340", "filename": "tests/source/issue-4427.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/432e09e89f7e30fd418b43b1473b87c146d90674/tests%2Fsource%2Fissue-4427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432e09e89f7e30fd418b43b1473b87c146d90674/tests%2Fsource%2Fissue-4427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4427.rs?ref=432e09e89f7e30fd418b43b1473b87c146d90674", "patch": "@@ -0,0 +1,31 @@\n+const A: usize = \n+  // Some constant\n+    2;\n+\n+const B: usize =   \n+/* constant */\n+3;\n+\n+const C :   usize   \n+      = /* foo */5;\n+\n+const D: usize =    // baz\n+/*    Some constant */\n+            /* ba */\n+ {  3  \n+ // foo   \n+    };\n+const E:   usize=             /* foo */5;\n+const F: usize =\n+{\n+        7\n+    };\n+const G: usize = /* foooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000xx00 */ 5;\n+                  const H: usize = /* asdfasdf */ match G > 1 {\n+                    true => 1,\n+                    false => 3,\n+                };\n+            \n+                pub static FOO_BAR: Vec<u8> =    //f\n+                {\n+                    vec![]};"}, {"sha": "c8a37ead8cb29de9bc89e785e017359d031dc597", "filename": "tests/target/issue-4427.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/432e09e89f7e30fd418b43b1473b87c146d90674/tests%2Ftarget%2Fissue-4427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/432e09e89f7e30fd418b43b1473b87c146d90674/tests%2Ftarget%2Fissue-4427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4427.rs?ref=432e09e89f7e30fd418b43b1473b87c146d90674", "patch": "@@ -0,0 +1,30 @@\n+const A: usize =\n+    // Some constant\n+    2;\n+\n+const B: usize =\n+    /* constant */\n+    3;\n+\n+const C: usize = /* foo */ 5;\n+\n+const D: usize = // baz\n+    /*    Some constant */\n+    /* ba */\n+    {\n+        3\n+        // foo\n+    };\n+const E: usize = /* foo */ 5;\n+const F: usize = { 7 };\n+const G: usize =\n+    /* foooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000xx00 */\n+    5;\n+const H: usize = /* asdfasdf */\n+    match G > 1 {\n+        true => 1,\n+        false => 3,\n+    };\n+\n+pub static FOO_BAR: Vec<u8> = //f\n+    { vec![] };"}]}