{"sha": "41752b02b984d93f50ce6ab6a8436f876723abfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNzUyYjAyYjk4NGQ5M2Y1MGNlNmFiNmE4NDM2Zjg3NjcyM2FiZmU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T23:42:40Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-11T23:46:01Z"}, "message": "Update FIXME numbers", "tree": {"sha": "b593c55a7144cf5d0183b56f8ee3647af9fb9b7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b593c55a7144cf5d0183b56f8ee3647af9fb9b7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41752b02b984d93f50ce6ab6a8436f876723abfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41752b02b984d93f50ce6ab6a8436f876723abfe", "html_url": "https://github.com/rust-lang/rust/commit/41752b02b984d93f50ce6ab6a8436f876723abfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41752b02b984d93f50ce6ab6a8436f876723abfe/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db679a738f10953e0682e277ab85d39c3c546fd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db679a738f10953e0682e277ab85d39c3c546fd1", "html_url": "https://github.com/rust-lang/rust/commit/db679a738f10953e0682e277ab85d39c3c546fd1"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "4e50f7a848e0a5d2a71ae0f66f8cf1515e87046e", "filename": "src/rustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -1465,7 +1465,7 @@ fn trans_assign_op(bcx: block,\n \n     // A user-defined operator method\n     if bcx.ccx().maps.method_map.find(expr.id).is_some() {\n-        // FIXME(#2582) evaluates the receiver twice!!\n+        // FIXME(#2528) evaluates the receiver twice!!\n         let scratch = scratch_datum(bcx, dst_datum.ty, false);\n         let bcx = trans_overloaded_op(bcx, expr, dst, ~[src],\n                                       SaveIn(scratch.val), DoAutorefArg);"}, {"sha": "dbf5ef810462fc38b19cf1030273156af359da68", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -909,7 +909,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n             let static_ti = get_tydesc(ccx, tp_ty);\n             glue::lazily_emit_all_tydesc_glue(ccx, static_ti);\n \n-            // FIXME (#2712): change this to T_ptr(ccx.tydesc_ty) when the\n+            // FIXME (#3727): change this to T_ptr(ccx.tydesc_ty) when the\n             // core::sys copy of the get_tydesc interface dies off.\n             let td = PointerCast(bcx, static_ti.tydesc, T_ptr(T_nil()));\n             Store(bcx, td, fcx.llretptr);"}, {"sha": "b78314a67478c797deae445c9c3e0f7979afb961", "filename": "src/rustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -466,7 +466,7 @@ fn iter_vec_raw(bcx: block, data_ptr: ValueRef, vec_ty: ty::t,\n     let unit_ty = ty::sequence_element_type(bcx.tcx(), vec_ty);\n \n     // Calculate the last pointer address we want to handle.\n-    // FIXME (#2536): Optimize this when the size of the unit type is\n+    // FIXME (#3729): Optimize this when the size of the unit type is\n     // statically known to not use pointer casts, which tend to confuse\n     // LLVM.\n     let data_end_ptr = pointer_add(bcx, data_ptr, fill);"}, {"sha": "c1ab29758f2df19f034ffac4d81c5b173d0350d4", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -2278,8 +2278,7 @@ fn check_enum_variants(ccx: @crate_ctxt,\n                 let cty = fcx.expr_ty(e);\n                 let declty = ty::mk_int(ccx.tcx);\n                 demand::suptype(fcx, e.span, declty, cty);\n-                // FIXME: issue #1417\n-                // Also, check_expr (from check_const pass) doesn't guarantee\n+                // check_expr (from check_const pass) doesn't guarantee\n                 // that the expression is in an form that eval_const_expr can\n                 // handle, so we may still get an internal compiler error\n                 match const_eval::eval_const_expr(ccx.tcx, e) {\n@@ -2620,7 +2619,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       }\n \n       ~\"get_tydesc\" => {\n-        // FIXME (#2712): return *intrinsic::tydesc, not *()\n+        // FIXME (#3730): return *intrinsic::tydesc, not *()\n         (1u, ~[], ty::mk_nil_ptr(tcx))\n       }\n       ~\"visit_tydesc\" => {"}, {"sha": "0d71d61bdaadb3a0b028954d64ccac4cce584b3f", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -363,7 +363,7 @@ impl LookupContext {\n         };\n         let method = &ms[index];\n \n-        /* FIXME(#3468) we should transform the vstore in accordance\n+        /* FIXME(#3157) we should transform the vstore in accordance\n            with the self type\n \n         match method.self_type {"}, {"sha": "1223f6b972329198cd67be8f7af179134d6e313b", "filename": "src/rustdoc/demo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdemo.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -7,7 +7,7 @@\n  * for testing purposes. It doesn't surve any functional\n  * purpose. This here, for instance, is just some filler text.\n  *\n- * FIXME (#1654): It would be nice if we could run some automated\n+ * FIXME (#3731): It would be nice if we could run some automated\n  * tests on this file\n  */\n "}, {"sha": "66c465b602157dde36a468cf6fc54705ff24503a", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41752b02b984d93f50ce6ab6a8436f876723abfe/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=41752b02b984d93f50ce6ab6a8436f876723abfe", "patch": "@@ -84,8 +84,9 @@ fn write_markdown(\n     doc: doc::Doc,\n     +writer_factory: WriterFactory\n ) {\n-    // FIXME #2484: There is easy parallelism to be had here but\n-    // we don't want to spawn too many pandoc processes\n+    // There is easy parallelism to be had here, but\n+    // we don't want to spawn too many pandoc processes.\n+    // (See #2484, which is closed.)\n     do doc.pages.map |page| {\n         let ctxt = {\n             w: writer_factory(*page)"}]}