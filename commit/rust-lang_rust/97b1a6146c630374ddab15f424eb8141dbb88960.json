{"sha": "97b1a6146c630374ddab15f424eb8141dbb88960", "node_id": "C_kwDOAAsO6NoAKDk3YjFhNjE0NmM2MzAzNzRkZGFiMTVmNDI0ZWI4MTQxZGJiODg5NjA", "commit": {"author": {"name": "Donough Liu", "email": "liudingming@bytdance.com", "date": "2022-08-29T18:06:36Z"}, "committer": {"name": "bogon-right", "email": "bogon-right@bytedance.com", "date": "2022-08-30T03:42:03Z"}, "message": "Use more `into_iter` rather than `drain(..)`", "tree": {"sha": "44b36c68cb488cf66023a8c5eda9fa788d117b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44b36c68cb488cf66023a8c5eda9fa788d117b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97b1a6146c630374ddab15f424eb8141dbb88960", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97b1a6146c630374ddab15f424eb8141dbb88960", "html_url": "https://github.com/rust-lang/rust/commit/97b1a6146c630374ddab15f424eb8141dbb88960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97b1a6146c630374ddab15f424eb8141dbb88960/comments", "author": null, "committer": null, "parents": [{"sha": "b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0", "html_url": "https://github.com/rust-lang/rust/commit/b96fa1a25ced4cfa72923e6d45f47f36c2c00ce0"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "fd5aa9391976f1a2f1686e33a0cbddd3c017ba09", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -555,7 +555,7 @@ impl TokenStreamBuilder {\n \n                 // Get the first stream, which will become the result stream.\n                 // If it's `None`, create an empty stream.\n-                let mut iter = streams.drain(..);\n+                let mut iter = streams.into_iter();\n                 let mut res_stream_lrc = iter.next().unwrap().0;\n \n                 // Append the subsequent elements to the result stream, after"}, {"sha": "937cb671573a1c97b2096d3dab4382075365a97e", "filename": "compiler/rustc_data_structures/src/sorted_map.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fsorted_map.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -164,7 +164,7 @@ impl<K: Ord, V> SortedMap<K, V> {\n     /// It is up to the caller to make sure that the elements are sorted by key\n     /// and that there are no duplicates.\n     #[inline]\n-    pub fn insert_presorted(&mut self, mut elements: Vec<(K, V)>) {\n+    pub fn insert_presorted(&mut self, elements: Vec<(K, V)>) {\n         if elements.is_empty() {\n             return;\n         }\n@@ -173,28 +173,28 @@ impl<K: Ord, V> SortedMap<K, V> {\n \n         let start_index = self.lookup_index_for(&elements[0].0);\n \n-        let drain = match start_index {\n+        let elements = match start_index {\n             Ok(index) => {\n-                let mut drain = elements.drain(..);\n-                self.data[index] = drain.next().unwrap();\n-                drain\n+                let mut elements = elements.into_iter();\n+                self.data[index] = elements.next().unwrap();\n+                elements\n             }\n             Err(index) => {\n                 if index == self.data.len() || elements.last().unwrap().0 < self.data[index].0 {\n                     // We can copy the whole range without having to mix with\n                     // existing elements.\n-                    self.data.splice(index..index, elements.drain(..));\n+                    self.data.splice(index..index, elements.into_iter());\n                     return;\n                 }\n \n-                let mut drain = elements.drain(..);\n-                self.data.insert(index, drain.next().unwrap());\n-                drain\n+                let mut elements = elements.into_iter();\n+                self.data.insert(index, elements.next().unwrap());\n+                elements\n             }\n         };\n \n         // Insert the rest\n-        for (k, v) in drain {\n+        for (k, v) in elements {\n             self.insert(k, v);\n         }\n     }"}, {"sha": "935a9639231b8ae85f661ea350b4729bac2e91a6", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -981,12 +981,12 @@ impl Diagnostic {\n     fn sub_with_highlights<M: Into<SubdiagnosticMessage>>(\n         &mut self,\n         level: Level,\n-        mut message: Vec<(M, Style)>,\n+        message: Vec<(M, Style)>,\n         span: MultiSpan,\n         render_span: Option<MultiSpan>,\n     ) {\n         let message = message\n-            .drain(..)\n+            .into_iter()\n             .map(|m| (self.subdiagnostic_message_to_diagnostic_message(m.0), m.1))\n             .collect();\n         let sub = SubDiagnostic { level, message, span, render_span };"}, {"sha": "4f407badb3f9eb777e3857ac835dccc9cdab1993", "filename": "compiler/rustc_errors/src/translation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Ftranslation.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -21,7 +21,7 @@ pub trait Translate {\n     /// Typically performed once for each diagnostic at the start of `emit_diagnostic` and then\n     /// passed around as a reference thereafter.\n     fn to_fluent_args<'arg>(&self, args: &[DiagnosticArg<'arg>]) -> FluentArgs<'arg> {\n-        FromIterator::from_iter(args.to_vec().drain(..))\n+        FromIterator::from_iter(args.iter().cloned())\n     }\n \n     /// Convert `DiagnosticMessage`s to a string, performing translation if necessary."}, {"sha": "2a4fe48a8aca28de4c5875ace0fb3f0f06051133", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -239,7 +239,7 @@ impl DiagnosticDeriveBuilder {\n             }\n         }\n \n-        Ok(tokens.drain(..).collect())\n+        Ok(tokens.into_iter().collect())\n     }\n \n     fn generate_field_attrs_code(&mut self, binding_info: &BindingInfo<'_>) -> TokenStream {"}, {"sha": "9ecf34e9ad3e71ac81b187cf6fded98962d1e86a", "filename": "compiler/rustc_typeck/src/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97b1a6146c630374ddab15f424eb8141dbb88960/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwriteback.rs?ref=97b1a6146c630374ddab15f424eb8141dbb88960", "patch": "@@ -501,7 +501,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n \n         if !errors_buffer.is_empty() {\n             errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n-            for mut diag in errors_buffer.drain(..) {\n+            for mut diag in errors_buffer {\n                 self.tcx().sess.diagnostic().emit_diagnostic(&mut diag);\n             }\n         }"}]}