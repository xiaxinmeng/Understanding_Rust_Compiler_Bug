{"sha": "51c49e257322babe0426327102357877a9015f4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYzQ5ZTI1NzMyMmJhYmUwNDI2MzI3MTAyMzU3ODc3YTkwMTVmNGQ=", "commit": {"author": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:25:40Z"}, "committer": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-10T12:25:40Z"}, "message": "fixed linter error", "tree": {"sha": "eabaa855cbff4a611f4537465b7e3735daa87c77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eabaa855cbff4a611f4537465b7e3735daa87c77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51c49e257322babe0426327102357877a9015f4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51c49e257322babe0426327102357877a9015f4d", "html_url": "https://github.com/rust-lang/rust/commit/51c49e257322babe0426327102357877a9015f4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51c49e257322babe0426327102357877a9015f4d/comments", "author": null, "committer": null, "parents": [{"sha": "66e4b3447110bb06930f4a606e5a47c55ca73a8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e4b3447110bb06930f4a606e5a47c55ca73a8a", "html_url": "https://github.com/rust-lang/rust/commit/66e4b3447110bb06930f4a606e5a47c55ca73a8a"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "53c576abb799821139bc46448a8248956f41f07d", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51c49e257322babe0426327102357877a9015f4d/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c49e257322babe0426327102357877a9015f4d/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=51c49e257322babe0426327102357877a9015f4d", "patch": "@@ -59,13 +59,13 @@ pub unsafe fn unreachable_unchecked() -> ! {\n /// busy-wait spin-loop without yielding control to the system's scheduler.\n ///\n /// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU or core and where the waiting\n-/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n-/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire CPU slice\n-/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or core or if the waiting times for acquiring the lock are longer, it is often better to\n-/// use [`std::thread::yield_now`].\n+/// contended lock is held by another thread executed on a different CPU or core and where the\n+/// waiting times are relatively small. Because entering busy-wait spin-loop does not trigger the\n+/// system's scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire\n+/// CPU slice before switching to the thread that holds the lock. If the contending lock is held by\n+/// a thread on the same CPU or core or if the waiting times for acquiring the lock are longer, it\n+/// is often better to use [`std::thread::yield_now`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all."}, {"sha": "38339996090b1b505a55a16c86d33b09f9ebc796", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/51c49e257322babe0426327102357877a9015f4d/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c49e257322babe0426327102357877a9015f4d/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=51c49e257322babe0426327102357877a9015f4d", "patch": "@@ -134,13 +134,13 @@ use crate::hint::spin_loop;\n /// busy-wait spin-loop without yielding control to the system's scheduler.\n ///\n /// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU or core and where the waiting\n-/// times are relatively small. Because entering busy-wait spin-loop does not trigger the system's\n-/// scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire CPU slice\n-/// before switching to the thread that holds the lock. If the contending lock is held by a thread\n-/// on the same CPU or core or if the waiting times for acquiring the lock are longer, it is often better to\n-/// use [`std::thread::yield_now`].\n+/// contended lock is held by another thread executed on a different CPU or core and where the\n+/// waiting times are relatively small. Because entering busy-wait spin-loop does not trigger the\n+/// system's scheduler, no overhead for switching threads occurs. However, if the thread holding the\n+/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire\n+/// CPU slice before switching to the thread that holds the lock. If the contending lock is held by\n+/// a thread on the same CPU or core or if the waiting times for acquiring the lock are longer, it\n+/// is often better to use [`std::thread::yield_now`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all."}]}