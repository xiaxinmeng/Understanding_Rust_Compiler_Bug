{"sha": "9216eb825839ecd17d67c2731537e5d6afffc54a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTZlYjgyNTgzOWVjZDE3ZDY3YzI3MzE1MzdlNWQ2YWZmZmM1NGE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-09T10:57:36Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-19T20:14:17Z"}, "message": "fix some comments", "tree": {"sha": "d4c7af3d61496b8f8a9112e7e90d662058c30fda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4c7af3d61496b8f8a9112e7e90d662058c30fda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9216eb825839ecd17d67c2731537e5d6afffc54a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9216eb825839ecd17d67c2731537e5d6afffc54a", "html_url": "https://github.com/rust-lang/rust/commit/9216eb825839ecd17d67c2731537e5d6afffc54a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9216eb825839ecd17d67c2731537e5d6afffc54a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a", "html_url": "https://github.com/rust-lang/rust/commit/7b99c8e1cf096c1ba71ba3ee58b19527a5b69c1a"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "37202276161c7424e41b26aff9f0d9ba7ae08b65", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9216eb825839ecd17d67c2731537e5d6afffc54a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9216eb825839ecd17d67c2731537e5d6afffc54a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=9216eb825839ecd17d67c2731537e5d6afffc54a", "patch": "@@ -374,7 +374,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                             // In theory, any zero-sized value could be borrowed\n                             // mutably without consequences. However, only &mut []\n-                            // is allowed right now, and only in functions.\n+                            // is allowed right now.\n                             if let ty::Array(_, len) = ty.kind() {\n                                 match len.try_eval_usize(self.tcx, self.param_env) {\n                                     Some(0) => {}\n@@ -524,7 +524,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n                                 if let Some(did) = c.check_static_ptr(self.tcx) {\n                                     // Evaluating a promoted may not read statics except if it got\n                                     // promoted from a static (this is a CTFE check). So we\n-                                    // can only promoted static accesses inside statics.\n+                                    // can only promote static accesses inside statics.\n                                     if let Some(hir::ConstContext::Static(..)) = self.const_kind {\n                                         // The `is_empty` predicate is introduced to exclude the case\n                                         // where the projection operations are [ .field, * ].\n@@ -586,9 +586,10 @@ impl<'tcx> Validator<'_, 'tcx> {\n                 if let Some(def_id) = c.check_static_ptr(self.tcx) {\n                     // Only allow statics (not consts) to refer to other statics.\n                     // FIXME(eddyb) does this matter at all for promotion?\n-                    // FIXME(RalfJung) it makes little sense to not promote this in `fn/`const fn`,\n-                    // and in `const` this cannot occur anyway. The concern is that we might promote\n-                    // even `let x = &STATIC` which would be useless.\n+                    // FIXME(RalfJung) it makes little sense to not promote this in `fn`/`const fn`,\n+                    // and in `const` this cannot occur anyway. The only concern is that we might\n+                    // promote even `let x = &STATIC` which would be useless, but this applies to\n+                    // promotion inside statics as well.\n                     let is_static = matches!(self.const_kind, Some(hir::ConstContext::Static(_)));\n                     if !is_static {\n                         return Err(Unpromotable);\n@@ -681,7 +682,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                     // In theory, any zero-sized value could be borrowed\n                     // mutably without consequences. However, only &mut []\n-                    // is allowed right now, and only in functions.\n+                    // is allowed right now.\n                     if let ty::Array(_, len) = ty.kind() {\n                         match len.try_eval_usize(self.tcx, self.param_env) {\n                             Some(0) => {}"}]}