{"sha": "dce288ec82f50e036abb7066aded9a4c0ae095d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTI4OGVjODJmNTBlMDM2YWJiNzA2NmFkZWQ5YTRjMGFlMDk1ZDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-16T08:56:50Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-05-21T09:13:19Z"}, "message": "rustc: don't expose Substs::fill_item as public.", "tree": {"sha": "3097c4b1b8a5cc89e126a2943eb85b6e25c05053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3097c4b1b8a5cc89e126a2943eb85b6e25c05053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce288ec82f50e036abb7066aded9a4c0ae095d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce288ec82f50e036abb7066aded9a4c0ae095d0", "html_url": "https://github.com/rust-lang/rust/commit/dce288ec82f50e036abb7066aded9a4c0ae095d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce288ec82f50e036abb7066aded9a4c0ae095d0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4", "html_url": "https://github.com/rust-lang/rust/commit/7e4d8718cb5f8be51d60fa0f889d504e01b7fce4"}], "stats": {"total": 53, "additions": 25, "deletions": 28}, "files": [{"sha": "57401ac19f3c565bf614877e783b8cb09f14481c", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dce288ec82f50e036abb7066aded9a4c0ae095d0/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce288ec82f50e036abb7066aded9a4c0ae095d0/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=dce288ec82f50e036abb7066aded9a4c0ae095d0", "patch": "@@ -195,10 +195,10 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         tcx.intern_substs(&result)\n     }\n \n-    pub fn fill_item<F>(substs: &mut Vec<Kind<'tcx>>,\n-                             tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                             defs: &ty::Generics,\n-                             mk_kind: &mut F)\n+    fn fill_item<F>(substs: &mut Vec<Kind<'tcx>>,\n+                    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n+                    defs: &ty::Generics,\n+                    mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n \n@@ -210,8 +210,8 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     }\n \n     fn fill_single<F>(substs: &mut Vec<Kind<'tcx>>,\n-                           defs: &ty::Generics,\n-                           mk_kind: &mut F)\n+                      defs: &ty::Generics,\n+                      mk_kind: &mut F)\n     where F: FnMut(&ty::GenericParamDef, &[Kind<'tcx>]) -> Kind<'tcx>\n     {\n         for param in &defs.params {"}, {"sha": "c89fe8ff5b67ab86da4101d8e07d0b7801cd591a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dce288ec82f50e036abb7066aded9a4c0ae095d0/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce288ec82f50e036abb7066aded9a4c0ae095d0/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=dce288ec82f50e036abb7066aded9a4c0ae095d0", "patch": "@@ -18,7 +18,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use middle::resolve_lifetime as rl;\n use namespace::Namespace;\n-use rustc::ty::subst::{UnpackedKind, Subst, Substs};\n+use rustc::ty::subst::{Subst, Substs};\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt, ToPredicate, TypeFoldable};\n use rustc::ty::GenericParamDefKind;\n@@ -1152,32 +1152,29 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         let tcx = self.tcx();\n         let generics = tcx.generics_of(def_id);\n \n-        // Fill in the substs of the parent generics\n         debug!(\"impl_trait_ty_to_ty: generics={:?}\", generics);\n-        let mut substs = Vec::with_capacity(generics.count());\n-        if let Some(parent_id) = generics.parent {\n-            let parent_generics = tcx.generics_of(parent_id);\n-            Substs::fill_item(&mut substs, tcx, parent_generics, &mut |param, _| {\n-                tcx.mk_param_from_def(param)\n-            });\n-\n-            // Replace all lifetimes with 'static\n-            for subst in &mut substs {\n-                if let UnpackedKind::Lifetime(_) = subst.unpack() {\n-                    *subst = tcx.types.re_static.into();\n+        let substs = Substs::for_item(tcx, def_id, |param, _| {\n+            if let Some(i) = (param.index as usize).checked_sub(generics.parent_count) {\n+                // Our own parameters are the resolved lifetimes.\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => {\n+                        self.ast_region_to_region(&lifetimes[i], None).into()\n+                    }\n+                    _ => bug!()\n+                }\n+            } else {\n+                // Replace all parent lifetimes with 'static.\n+                match param.kind {\n+                    GenericParamDefKind::Lifetime => {\n+                        tcx.types.re_static.into()\n+                    }\n+                    _ => tcx.mk_param_from_def(param)\n                 }\n             }\n-            debug!(\"impl_trait_ty_to_ty: substs from parent = {:?}\", substs);\n-        }\n-        assert_eq!(substs.len(), generics.parent_count);\n-\n-        // Fill in our own generics with the resolved lifetimes\n-        assert_eq!(lifetimes.len(), generics.params.len());\n-        substs.extend(lifetimes.iter().map(|lt| self.ast_region_to_region(lt, None).into()));\n-\n+        });\n         debug!(\"impl_trait_ty_to_ty: final substs = {:?}\", substs);\n \n-        tcx.mk_anon(def_id, tcx.intern_substs(&substs))\n+        tcx.mk_anon(def_id, substs)\n     }\n \n     pub fn ty_of_arg(&self,"}]}