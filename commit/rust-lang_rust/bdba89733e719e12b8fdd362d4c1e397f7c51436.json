{"sha": "bdba89733e719e12b8fdd362d4c1e397f7c51436", "node_id": "C_kwDOAAsO6NoAKGJkYmE4OTczM2U3MTllMTJiOGZkZDM2MmQ0YzFlMzk3ZjdjNTE0MzY", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-03-01T00:54:28Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-04-16T04:11:51Z"}, "message": "Update tests for sym support in global_asm!", "tree": {"sha": "e23d5f1f3d6b17990190e87b4092841784f7cd52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e23d5f1f3d6b17990190e87b4092841784f7cd52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdba89733e719e12b8fdd362d4c1e397f7c51436", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdba89733e719e12b8fdd362d4c1e397f7c51436", "html_url": "https://github.com/rust-lang/rust/commit/bdba89733e719e12b8fdd362d4c1e397f7c51436", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdba89733e719e12b8fdd362d4c1e397f7c51436/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "547405e80120117f3299d7271c839455bb670ad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/547405e80120117f3299d7271c839455bb670ad6", "html_url": "https://github.com/rust-lang/rust/commit/547405e80120117f3299d7271c839455bb670ad6"}], "stats": {"total": 173, "additions": 115, "deletions": 58}, "files": [{"sha": "b76ce7ac387facd52e042e716c52f5589505e680", "filename": "src/test/assembly/asm/global_asm.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fglobal_asm.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -1,15 +1,26 @@\n // only-x86_64\n+// only-linux\n // assembly-output: emit-asm\n // compile-flags: -C llvm-args=--x86-asm-syntax=intel\n \n-#![feature(asm_const)]\n+#![feature(asm_const, asm_sym)]\n #![crate_type = \"rlib\"]\n \n use std::arch::global_asm;\n \n+#[no_mangle]\n+fn my_func() {}\n+\n+#[no_mangle]\n+static MY_STATIC: i32 = 0;\n+\n // CHECK: mov eax, eax\n global_asm!(\"mov eax, eax\");\n // CHECK: mov ebx, 5\n global_asm!(\"mov ebx, {}\", const 5);\n // CHECK: mov ecx, 5\n global_asm!(\"movl ${}, %ecx\", const 5, options(att_syntax));\n+// CHECK: call my_func\n+global_asm!(\"call {}\", sym my_func);\n+// CHECK: lea rax, [rip + MY_STATIC]\n+global_asm!(\"lea rax, [rip + {}]\", sym MY_STATIC);"}, {"sha": "cbc93cd3f7530c6bcbb93d8a6b6dc4acc956c493", "filename": "src/test/ui/asm/aarch64/parse-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         asm!(\"{}\", in(reg) foo => bar);\n         //~^ ERROR expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n         asm!(\"{}\", sym foo + bar);\n-        //~^ ERROR argument to `sym` must be a path expression\n+        //~^ ERROR expected a path for argument to `sym`\n         asm!(\"\", options(foo));\n         //~^ ERROR expected one of\n         asm!(\"\", options(nomem foo));"}, {"sha": "f2013046cda4207043b3e2f6fd5146a170d39528", "filename": "src/test/ui/asm/aarch64/parse-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Fparse-error.stderr?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -58,7 +58,7 @@ error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n LL |         asm!(\"{}\", in(reg) foo => bar);\n    |                                ^^ expected one of 7 possible tokens\n \n-error: argument to `sym` must be a path expression\n+error: expected a path for argument to `sym`\n   --> $DIR/parse-error.rs:31:24\n    |\n LL |         asm!(\"{}\", sym foo + bar);\n@@ -350,17 +350,17 @@ LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n-error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n+error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n   --> $DIR/parse-error.rs:126:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n-   |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n+   |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n-error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n+error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n   --> $DIR/parse-error.rs:128:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n-   |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n+   |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n   --> $DIR/parse-error.rs:130:13"}, {"sha": "9e53a2e0c5230cfd768b6506f14faf97317de89a", "filename": "src/test/ui/asm/aarch64/type-check-2.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(repr_simd, never_type, asm_sym)]\n \n-use std::arch::asm;\n+use std::arch::{asm, global_asm};\n \n #[repr(simd)]\n #[derive(Clone, Copy)]\n@@ -39,9 +39,7 @@ fn main() {\n         asm!(\"{}\", sym S);\n         asm!(\"{}\", sym main);\n         asm!(\"{}\", sym C);\n-        //~^ ERROR asm `sym` operand must point to a fn or static\n-        asm!(\"{}\", sym x);\n-        //~^ ERROR asm `sym` operand must point to a fn or static\n+        //~^ ERROR invalid `sym` operand\n \n         // Register operands must be Copy\n \n@@ -84,3 +82,12 @@ fn main() {\n         asm!(\"{}\", in(reg) u);\n     }\n }\n+\n+// Sym operands must point to a function or static\n+\n+const C: i32 = 0;\n+static S: i32 = 0;\n+global_asm!(\"{}\", sym S);\n+global_asm!(\"{}\", sym main);\n+global_asm!(\"{}\", sym C);\n+//~^ ERROR invalid `sym` operand"}, {"sha": "6047bed6e7802bb36b8f8fda8e2ad87caeecf347", "filename": "src/test/ui/asm/aarch64/type-check-2.stderr", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Faarch64%2Ftype-check-2.stderr?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -1,21 +1,21 @@\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:48:31\n+  --> $DIR/type-check-2.rs:46:31\n    |\n LL |         asm!(\"{:v}\", in(vreg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:60:28: 60:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:58:28: 58:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:58:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:60:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,48 +24,52 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:64:28\n+  --> $DIR/type-check-2.rs:62:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:66:28\n+  --> $DIR/type-check-2.rs:64:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:74:31\n+  --> $DIR/type-check-2.rs:72:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:77:31\n+  --> $DIR/type-check-2.rs:75:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:41:24\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:41:20\n    |\n LL |         asm!(\"{}\", sym C);\n-   |                        ^\n+   |                    ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n \n-error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:43:24\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:92:19\n+   |\n+LL | global_asm!(\"{}\", sym C);\n+   |                   ^^^^^ is an `i32`\n    |\n-LL |         asm!(\"{}\", sym x);\n-   |                        ^\n+   = help: `sym` operands must refer to either a function or a static\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/type-check-2.rs:19:28"}, {"sha": "9f0121e11b4470a001e1f2f7e1ae3a1aa07aefaa", "filename": "src/test/ui/asm/type-check-1.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -3,7 +3,7 @@\n // ignore-spirv\n // ignore-wasm32\n \n-#![feature(asm_const)]\n+#![feature(asm_const, asm_sym)]\n \n use std::arch::{asm, global_asm};\n \n@@ -44,6 +44,8 @@ fn main() {\n         asm!(\"{}\", const const_bar(0));\n         asm!(\"{}\", const const_bar(x));\n         //~^ ERROR attempt to use a non-constant value in a constant\n+        asm!(\"{}\", sym x);\n+        //~^ ERROR invalid `sym` operand\n \n         // Const operands must be integers and must be constants.\n \n@@ -59,6 +61,11 @@ fn main() {\n     }\n }\n \n+unsafe fn generic<T>() {\n+    asm!(\"{}\", sym generic::<T>);\n+    //~^ generic parameters may not be used in const operations\n+}\n+\n // Const operands must be integers and must be constants.\n \n global_asm!(\"{}\", const 0);"}, {"sha": "7dba69fb7459276987dc7ac45bf996507fb44ab9", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -25,14 +25,31 @@ LL |         let x = 0;\n LL |         asm!(\"{}\", const const_bar(x));\n    |                                    ^ non-constant value\n \n+error: invalid `sym` operand\n+  --> $DIR/type-check-1.rs:47:24\n+   |\n+LL |         asm!(\"{}\", sym x);\n+   |                        ^ is a local variable\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n+\n+error: generic parameters may not be used in const operations\n+  --> $DIR/type-check-1.rs:65:30\n+   |\n+LL |     asm!(\"{}\", sym generic::<T>);\n+   |                              ^ cannot perform const operation using `T`\n+   |\n+   = note: type parameters may not be used in const expressions\n+   = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n+\n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:53:26\n+  --> $DIR/type-check-1.rs:55:26\n    |\n LL |         asm!(\"{}\", const 0f32);\n    |                          ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:55:26\n+  --> $DIR/type-check-1.rs:57:26\n    |\n LL |         asm!(\"{}\", const 0 as *mut u8);\n    |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n@@ -41,7 +58,7 @@ LL |         asm!(\"{}\", const 0 as *mut u8);\n            found raw pointer `*mut u8`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:57:26\n+  --> $DIR/type-check-1.rs:59:26\n    |\n LL |         asm!(\"{}\", const &0);\n    |                          ^^ expected integer, found `&{integer}`\n@@ -92,21 +109,21 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    = note: all inline asm arguments must have a statically known size\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:67:25\n+  --> $DIR/type-check-1.rs:74:25\n    |\n LL | global_asm!(\"{}\", const 0f32);\n    |                         ^^^^ expected integer, found `f32`\n \n error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:69:25\n+  --> $DIR/type-check-1.rs:76:25\n    |\n LL | global_asm!(\"{}\", const 0 as *mut u8);\n    |                         ^^^^^^^^^^^^ expected integer, found *-ptr\n    |\n    = note:     expected type `{integer}`\n            found raw pointer `*mut u8`\n \n-error: aborting due to 13 previous errors\n+error: aborting due to 15 previous errors\n \n Some errors have detailed explanations: E0277, E0308, E0435.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "9aeb6b2853fba8397aa322176a72af922ab1605f", "filename": "src/test/ui/asm/x86_64/parse-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -29,7 +29,7 @@ fn main() {\n         asm!(\"{}\", in(reg) foo => bar);\n         //~^ ERROR expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n         asm!(\"{}\", sym foo + bar);\n-        //~^ ERROR argument to `sym` must be a path expression\n+        //~^ ERROR expected a path for argument to `sym`\n         asm!(\"\", options(foo));\n         //~^ ERROR expected one of\n         asm!(\"\", options(nomem foo));"}, {"sha": "1fd317a96a8a6c09f5ab3c44e959f0ba4a497ba6", "filename": "src/test/ui/asm/x86_64/parse-error.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Fparse-error.stderr?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -58,7 +58,7 @@ error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n LL |         asm!(\"{}\", in(reg) foo => bar);\n    |                                ^^ expected one of 7 possible tokens\n \n-error: argument to `sym` must be a path expression\n+error: expected a path for argument to `sym`\n   --> $DIR/parse-error.rs:31:24\n    |\n LL |         asm!(\"{}\", sym foo + bar);\n@@ -362,17 +362,17 @@ LL | global_asm!(\"{a}\", a = const FOO, a = const BAR);\n    |\n    = help: if this argument is intentionally unused, consider using it in an asm comment: `\"/* {1} */\"`\n \n-error: expected one of `clobber_abi`, `const`, or `options`, found `\"\"`\n+error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"\"`\n   --> $DIR/parse-error.rs:130:28\n    |\n LL | global_asm!(\"\", options(), \"\");\n-   |                            ^^ expected one of `clobber_abi`, `const`, or `options`\n+   |                            ^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n-error: expected one of `clobber_abi`, `const`, or `options`, found `\"{}\"`\n+error: expected one of `clobber_abi`, `const`, `options`, or `sym`, found `\"{}\"`\n   --> $DIR/parse-error.rs:132:30\n    |\n LL | global_asm!(\"{}\", const FOO, \"{}\", const FOO);\n-   |                              ^^^^ expected one of `clobber_abi`, `const`, or `options`\n+   |                              ^^^^ expected one of `clobber_abi`, `const`, `options`, or `sym`\n \n error: asm template must be a string literal\n   --> $DIR/parse-error.rs:134:13"}, {"sha": "eb87ea91085f0ca5ab6f695f077622480f625d98", "filename": "src/test/ui/asm/x86_64/type-check-2.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.rs?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -2,7 +2,7 @@\n \n #![feature(repr_simd, never_type, asm_sym)]\n \n-use std::arch::asm;\n+use std::arch::{asm, global_asm};\n \n #[repr(simd)]\n struct SimdNonCopy(f32, f32, f32, f32);\n@@ -35,9 +35,7 @@ fn main() {\n         asm!(\"{}\", sym S);\n         asm!(\"{}\", sym main);\n         asm!(\"{}\", sym C);\n-        //~^ ERROR asm `sym` operand must point to a fn or static\n-        asm!(\"{}\", sym x);\n-        //~^ ERROR asm `sym` operand must point to a fn or static\n+        //~^ ERROR invalid `sym` operand\n \n         // Register operands must be Copy\n \n@@ -80,3 +78,12 @@ fn main() {\n         asm!(\"{}\", in(reg) u);\n     }\n }\n+\n+// Sym operands must point to a function or static\n+\n+const C: i32 = 0;\n+static S: i32 = 0;\n+global_asm!(\"{}\", sym S);\n+global_asm!(\"{}\", sym main);\n+global_asm!(\"{}\", sym C);\n+//~^ ERROR invalid `sym` operand"}, {"sha": "cb3960acdf9d317e0e0661e79c5d52463bd9c475", "filename": "src/test/ui/asm/x86_64/type-check-2.stderr", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bdba89733e719e12b8fdd362d4c1e397f7c51436/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fx86_64%2Ftype-check-2.stderr?ref=bdba89733e719e12b8fdd362d4c1e397f7c51436", "patch": "@@ -1,21 +1,21 @@\n error: arguments for inline assembly must be copyable\n-  --> $DIR/type-check-2.rs:44:32\n+  --> $DIR/type-check-2.rs:42:32\n    |\n LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `SimdNonCopy` does not implement the Copy trait\n \n-error: cannot use value of type `[closure@$DIR/type-check-2.rs:56:28: 56:38]` for inline assembly\n-  --> $DIR/type-check-2.rs:56:28\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:54:28: 54:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:54:28\n    |\n LL |         asm!(\"{}\", in(reg) |x: i32| x);\n    |                            ^^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `Vec<i32>` for inline assembly\n-  --> $DIR/type-check-2.rs:58:28\n+  --> $DIR/type-check-2.rs:56:28\n    |\n LL |         asm!(\"{}\", in(reg) vec![0]);\n    |                            ^^^^^^^\n@@ -24,48 +24,52 @@ LL |         asm!(\"{}\", in(reg) vec![0]);\n    = note: this error originates in the macro `vec` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use value of type `(i32, i32, i32)` for inline assembly\n-  --> $DIR/type-check-2.rs:60:28\n+  --> $DIR/type-check-2.rs:58:28\n    |\n LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `[i32; 3]` for inline assembly\n-  --> $DIR/type-check-2.rs:62:28\n+  --> $DIR/type-check-2.rs:60:28\n    |\n LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n    |                            ^^^^^^^^^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `fn() {main}` for inline assembly\n-  --> $DIR/type-check-2.rs:70:31\n+  --> $DIR/type-check-2.rs:68:31\n    |\n LL |         asm!(\"{}\", inout(reg) f);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n error: cannot use value of type `&mut i32` for inline assembly\n-  --> $DIR/type-check-2.rs:73:31\n+  --> $DIR/type-check-2.rs:71:31\n    |\n LL |         asm!(\"{}\", inout(reg) r);\n    |                               ^\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n-error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:37:24\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:37:20\n    |\n LL |         asm!(\"{}\", sym C);\n-   |                        ^\n+   |                    ^^^^^ is an `i32`\n+   |\n+   = help: `sym` operands must refer to either a function or a static\n \n-error: asm `sym` operand must point to a fn or static\n-  --> $DIR/type-check-2.rs:39:24\n+error: invalid `sym` operand\n+  --> $DIR/type-check-2.rs:88:19\n+   |\n+LL | global_asm!(\"{}\", sym C);\n+   |                   ^^^^^ is an `i32`\n    |\n-LL |         asm!(\"{}\", sym x);\n-   |                        ^\n+   = help: `sym` operands must refer to either a function or a static\n \n error[E0381]: use of possibly-uninitialized variable: `x`\n   --> $DIR/type-check-2.rs:15:28"}]}