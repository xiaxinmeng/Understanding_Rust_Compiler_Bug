{"sha": "4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MzM3ODY4NDhmNzlhOGE4YmMzYjg2NzliN2I0MDQxOGYxZjBmN2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-01-28T23:36:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-01-28T23:36:26Z"}, "message": "Merge pull request #2396 from topecongiro/issue-2389\n\nPut attributes and enum variants on different lines", "tree": {"sha": "1f3cf6a9ebb8e0bb7d665780c5e323dabc6e4633", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f3cf6a9ebb8e0bb7d665780c5e323dabc6e4633"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJabl56CRBK7hj4Ov3rIwAAdHIIAGhwyp+yGEEpHHCyxz0QASIL\neZLJtb7DyYZmTip1xu3pfPQnoHHhtAfSi+XITiIFgHL/ypbgzS+52W0dCfbo6ZPl\nopM69fpnrcUhAUEyV2HK6iQiLRRKp9dBaxsEGqDXX9M0XgoQ1MWWd79PDMAAsl0G\nolpQAcLzISnNH6Opp2sCiXudMkdHfWNqpYamHFOcwxPKDPlQDqNqZvo7Bpzd4yJC\n46gnkg9YoMHvUt6NY/UiI+BSUwkzggje8jU+83WzA2wtGuoRl68il2vcgqtkZ63A\ngtukMEdTXu6POBcZXYsCwPpmb70xeXZJBUCA9fFWK5s5ei40E048bxJ6UJFMFb4=\n=0IAf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f3cf6a9ebb8e0bb7d665780c5e323dabc6e4633\nparent dfc67a5df7e71d692fad67227cb06c0a98d8a020\nparent c60d865b98f325c83df35aa952b5f5b1720787e3\nauthor Nick Cameron <nrc@ncameron.org> 1517182586 +1100\ncommitter GitHub <noreply@github.com> 1517182586 +1100\n\nMerge pull request #2396 from topecongiro/issue-2389\n\nPut attributes and enum variants on different lines"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "html_url": "https://github.com/rust-lang/rust/commit/4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfc67a5df7e71d692fad67227cb06c0a98d8a020", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc67a5df7e71d692fad67227cb06c0a98d8a020", "html_url": "https://github.com/rust-lang/rust/commit/dfc67a5df7e71d692fad67227cb06c0a98d8a020"}, {"sha": "c60d865b98f325c83df35aa952b5f5b1720787e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c60d865b98f325c83df35aa952b5f5b1720787e3", "html_url": "https://github.com/rust-lang/rust/commit/c60d865b98f325c83df35aa952b5f5b1720787e3"}], "stats": {"total": 52, "additions": 41, "deletions": 11}, "files": [{"sha": "1862dda35813c67bf22225bc6bccffb947aa8d50", "filename": "src/comment.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "patch": "@@ -134,6 +134,11 @@ fn comment_style(orig: &str, normalize_comments: bool) -> CommentStyle {\n     }\n }\n \n+/// Combine `prev_str` and `next_str` into a single `String`. `span` may contain\n+/// comments between two strings. If there are such comments, then that will be\n+/// recovered. If `allow_extend` is true and there is no comment between the two\n+/// strings, then they will be put on a single line as long as doing so does not\n+/// exceed max width.\n pub fn combine_strs_with_missing_comments(\n     context: &RewriteContext,\n     prev_str: &str,"}, {"sha": "d0c5cf361c3dc9c7a89afcc8039c3adefa5957d1", "filename": "src/items.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "patch": "@@ -504,7 +504,7 @@ impl<'a> FmtVisitor<'a> {\n             items = itemize_list_with(0);\n         }\n \n-        let shape = self.shape().sub_width(2).unwrap();\n+        let shape = self.shape().sub_width(2)?;\n         let fmt = ListFormatting {\n             tactic: DefinitiveListTactic::Vertical,\n             separator: \",\",\n@@ -558,14 +558,7 @@ impl<'a> FmtVisitor<'a> {\n             }\n         };\n \n-        combine_strs_with_missing_comments(\n-            &context,\n-            &attrs_str,\n-            &variant_body,\n-            span,\n-            shape,\n-            is_attributes_extendable(&attrs_str),\n-        )\n+        combine_strs_with_missing_comments(&context, &attrs_str, &variant_body, span, shape, false)\n     }\n }\n "}, {"sha": "f3dbae4b84de4ce56ec4c8ac84e658574d097326", "filename": "tests/source/enum.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "patch": "@@ -180,3 +180,15 @@ enum WidthOf101 {\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n }\n+\n+// #2389\n+pub enum QlError {\n+    #[fail(display = \"Parsing error: {}\", 0)] LexError(parser::lexer::LexError),\n+    #[fail(display = \"Parsing error: {:?}\", 0)] ParseError(parser::ParseError),\n+    #[fail(display = \"Validation error: {:?}\", 0)] ValidationError(Vec<validation::Error>),\n+    #[fail(display = \"Execution error: {}\", 0)] ExecutionError(String),\n+    // (from, to)\n+    #[fail(display = \"Translation error: from {} to {}\", 0, 1)] TranslationError(String, String),\n+    // (kind, input, expected)\n+    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)] ResolveError(&'static str, String, Option<String>),\n+}"}, {"sha": "de88f610b6a68cddc0916ca012d2e748a4de026a", "filename": "tests/target/enum.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4633786848f79a8a8bc3b8679b7b40418f1f0f7f/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=4633786848f79a8a8bc3b8679b7b40418f1f0f7f", "patch": "@@ -24,7 +24,8 @@ enum EmtpyWithComment {\n // C-style enum\n enum Bar {\n     A = 1,\n-    #[someAttr(test)] B = 2, // comment\n+    #[someAttr(test)]\n+    B = 2, // comment\n     C,\n }\n \n@@ -225,11 +226,30 @@ enum AnError {\n \n // #2193\n enum WidthOf101 {\n-    #[fail(display = \".....................................................\")] Io(::std::io::Error),\n+    #[fail(display = \".....................................................\")]\n+    Io(::std::io::Error),\n     #[fail(display = \".....................................................\")]\n     Ioo(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(::std::io::Error),\n     Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(\n         ::std::io::Error,\n     ),\n }\n+\n+// #2389\n+pub enum QlError {\n+    #[fail(display = \"Parsing error: {}\", 0)]\n+    LexError(parser::lexer::LexError),\n+    #[fail(display = \"Parsing error: {:?}\", 0)]\n+    ParseError(parser::ParseError),\n+    #[fail(display = \"Validation error: {:?}\", 0)]\n+    ValidationError(Vec<validation::Error>),\n+    #[fail(display = \"Execution error: {}\", 0)]\n+    ExecutionError(String),\n+    // (from, to)\n+    #[fail(display = \"Translation error: from {} to {}\", 0, 1)]\n+    TranslationError(String, String),\n+    // (kind, input, expected)\n+    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)]\n+    ResolveError(&'static str, String, Option<String>),\n+}"}]}