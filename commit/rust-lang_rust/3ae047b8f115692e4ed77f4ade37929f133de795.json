{"sha": "3ae047b8f115692e4ed77f4ade37929f133de795", "node_id": "C_kwDOAAsO6NoAKDNhZTA0N2I4ZjExNTY5MmU0ZWQ3N2Y0YWRlMzc5MjlmMTMzZGU3OTU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-06T15:41:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-06T15:41:59Z"}, "message": "Rollup merge of #108790 - cjgillot:mono-cast, r=oli-obk\n\nDo not ICE when interpreting a cast between non-monomorphic types\n\nFixes https://github.com/rust-lang/rust/issues/101596", "tree": {"sha": "50cc8e0fbf56a0a00d4ba899473937a525e86f28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50cc8e0fbf56a0a00d4ba899473937a525e86f28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ae047b8f115692e4ed77f4ade37929f133de795", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkBgnHCRBK7hj4Ov3rIwAA01IIAD7+MsVlt3O5A1RRrCNLC2xT\n0VfITLGgUE4JrMCuBzMeJIwiTI+Od6llWGHItYBueNHcXGq6ESBrl9SV4HZhzc/M\nxeTtXn0JwORA0srnHvqIWK8K2toyj7kwPQdkxvna8/O348CjXUT15R60ortyWCz3\n0byOgCojBAyIAUtzhLs+rAVvaRn+rqlJ/76uOhU7wYwDN1EzAbRpHtOzzHWVePKk\nrlVKqtXLoNOZqXHdD4ezCmpN1FPK9Whz7RtRHYjEgDbrD3a9QUCR7xMNBRWSGwK0\neSg+WCn2s6Pn9YpG8ASEKEOvUZwRWH2lqcAEjwjx8xTw0aZJEq7zVCM6TRE3N1A=\n=k7aC\n-----END PGP SIGNATURE-----\n", "payload": "tree 50cc8e0fbf56a0a00d4ba899473937a525e86f28\nparent 4bd6f7fe1611a1f903f29ce65a3231d5e37b0632\nparent 858eab63912db10ee5e6706724df9c909c6502e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678117319 +0100\ncommitter GitHub <noreply@github.com> 1678117319 +0100\n\nRollup merge of #108790 - cjgillot:mono-cast, r=oli-obk\n\nDo not ICE when interpreting a cast between non-monomorphic types\n\nFixes https://github.com/rust-lang/rust/issues/101596\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ae047b8f115692e4ed77f4ade37929f133de795", "html_url": "https://github.com/rust-lang/rust/commit/3ae047b8f115692e4ed77f4ade37929f133de795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ae047b8f115692e4ed77f4ade37929f133de795/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bd6f7fe1611a1f903f29ce65a3231d5e37b0632", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bd6f7fe1611a1f903f29ce65a3231d5e37b0632", "html_url": "https://github.com/rust-lang/rust/commit/4bd6f7fe1611a1f903f29ce65a3231d5e37b0632"}, {"sha": "858eab63912db10ee5e6706724df9c909c6502e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/858eab63912db10ee5e6706724df9c909c6502e7", "html_url": "https://github.com/rust-lang/rust/commit/858eab63912db10ee5e6706724df9c909c6502e7"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "c14152a916a2937d8cf7c9e484f2ecffe6e3f449", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3ae047b8f115692e4ed77f4ade37929f133de795/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae047b8f115692e4ed77f4ade37929f133de795/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=3ae047b8f115692e4ed77f4ade37929f133de795", "patch": "@@ -67,12 +67,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ReifyFnPointer) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::FnDef(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_for_fn_ptr(\n                             *self.tcx,\n                             self.param_env,\n@@ -100,12 +100,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             Pointer(PointerCast::ClosureFnPointer(_)) => {\n+                // All reifications must be monomorphic, bail out otherwise.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+\n                 // The src operand does not matter, just its type\n                 match *src.layout.ty.kind() {\n                     ty::Closure(def_id, substs) => {\n-                        // All reifications must be monomorphic, bail out otherwise.\n-                        ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n-\n                         let instance = ty::Instance::resolve_closure(\n                             *self.tcx,\n                             def_id,\n@@ -359,8 +359,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let val = Immediate::new_dyn_trait(ptr, vtable, &*self.tcx);\n                 self.write_immediate(val, dest)\n             }\n-\n             _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty)?;\n+\n                 span_bug!(\n                     self.cur_span(),\n                     \"invalid pointer unsizing {:?} -> {:?}\",\n@@ -404,12 +407,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 }\n                 Ok(())\n             }\n-            _ => span_bug!(\n-                self.cur_span(),\n-                \"unsize_into: invalid conversion: {:?} -> {:?}\",\n-                src.layout,\n-                dest.layout\n-            ),\n+            _ => {\n+                // Do not ICE if we are not monomorphic enough.\n+                ensure_monomorphic_enough(*self.tcx, src.layout.ty)?;\n+                ensure_monomorphic_enough(*self.tcx, cast_ty.ty)?;\n+\n+                span_bug!(\n+                    self.cur_span(),\n+                    \"unsize_into: invalid conversion: {:?} -> {:?}\",\n+                    src.layout,\n+                    dest.layout\n+                )\n+            }\n         }\n     }\n }"}, {"sha": "45b5308c0938f58ff5d8fbb40b75d9857854e9d7", "filename": "tests/ui/mir/unsize-trait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3ae047b8f115692e4ed77f4ade37929f133de795/tests%2Fui%2Fmir%2Funsize-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ae047b8f115692e4ed77f4ade37929f133de795/tests%2Fui%2Fmir%2Funsize-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmir%2Funsize-trait.rs?ref=3ae047b8f115692e4ed77f4ade37929f133de795", "patch": "@@ -0,0 +1,15 @@\n+// Check that the interpreter does not ICE when trying to unsize `B` to `[u8]`.\n+// This is a `build` test to ensure that const-prop-lint runs.\n+// build-pass\n+\n+#![feature(unsize)]\n+\n+fn foo<B>(buffer: &mut [B; 2])\n+    where B: std::marker::Unsize<[u8]>,\n+{\n+    let buffer: &[u8] = &buffer[0];\n+}\n+\n+fn main() {\n+    foo(&mut [[0], [5]]);\n+}"}]}