{"sha": "f4e6ebd11aaea9fc412d78371fd3060468625056", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZTZlYmQxMWFhZWE5ZmM0MTJkNzgzNzFmZDMwNjA0Njg2MjUwNTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-21T03:14:41Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Fix tests and improve error message if `::` isn't found", "tree": {"sha": "097b0555ea3ae6fd8860b4e8dfb945feb0cafb4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/097b0555ea3ae6fd8860b4e8dfb945feb0cafb4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4e6ebd11aaea9fc412d78371fd3060468625056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e6ebd11aaea9fc412d78371fd3060468625056", "html_url": "https://github.com/rust-lang/rust/commit/f4e6ebd11aaea9fc412d78371fd3060468625056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4e6ebd11aaea9fc412d78371fd3060468625056/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bed035001b9a0bd6282326a243a926ea3d0424", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bed035001b9a0bd6282326a243a926ea3d0424", "html_url": "https://github.com/rust-lang/rust/commit/42bed035001b9a0bd6282326a243a926ea3d0424"}], "stats": {"total": 87, "additions": 33, "deletions": 54}, "files": [{"sha": "ea3ec1b6685cc407a289ea1da54dd584d4dc236f", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=f4e6ebd11aaea9fc412d78371fd3060468625056", "patch": "@@ -324,9 +324,10 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 })\n                 // If there's no `::`, it's not an associated item.\n                 // So we can be sure that `rustc_resolve` was accurate when it said it wasn't resolved.\n-                .ok_or(ErrorKind::Resolve(ResolutionFailure::NotInScope(\n-                    item_name.to_string().into(),\n-                )))?;\n+                .ok_or_else(|| {\n+                    debug!(\"found no `::`, assumming {} was correctly not in scope\", item_name);\n+                    ErrorKind::Resolve(ResolutionFailure::NotInScope(item_name.to_string().into()))\n+                })?;\n \n             if let Some((path, prim)) = is_primitive(&path_root, ns) {\n                 let impls = primitive_impl(cx, &path).ok_or_else(|| {\n@@ -361,6 +362,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n             let (_, ty_res) = cx\n                 .enter_resolver(|resolver| {\n+                    // only types can have associated items\n                     resolver.resolve_str_path_error(DUMMY_SP, &path_root, TypeNS, module_id)\n                 })\n                 .map_err(|_| {\n@@ -1450,10 +1452,7 @@ fn resolution_failure(\n                         // FIXME: when are items neither a primitive nor a Def?\n                         if let Res::Def(_, def_id) = res {\n                             let name = cx.tcx.item_name(def_id);\n-                            let note = format!(\n-                                \"`{}` has no field, variant, or associated item named `{}`\",\n-                                name, assoc_item\n-                            );\n+                            let note = format!(\"no `{}` in `{}`\", assoc_item, name,);\n                             diag.note(&note);\n                         }\n                     }"}, {"sha": "58abe4406a85d48a7f2b8586828bd5cf26632f8f", "filename": "src/test/rustdoc-ui/intra-doc-alias-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc-alias-ice.stderr?ref=f4e6ebd11aaea9fc412d78371fd3060468625056", "patch": "@@ -10,7 +10,7 @@ note: the lint level is defined here\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: this link partially resolves to the type alias `TypeAlias`\n-   = note: `TypeAlias` has no field, variant, or associated item named `hoge`\n+   = note: no `hoge` in `TypeAlias`\n \n error: aborting due to previous error\n "}, {"sha": "79ce57c22676f03afc8beaf3c0c0f0882c787100", "filename": "src/test/rustdoc-ui/intra-link-errors.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.rs?ref=f4e6ebd11aaea9fc412d78371fd3060468625056", "patch": "@@ -1,9 +1,6 @@\n #![deny(broken_intra_doc_links)]\n //~^ NOTE lint level is defined\n \n-//! [std::io::oops]\n-//! [std::io::oops::not::here]\n-\n // FIXME: this should say that it was skipped (maybe an allowed by default lint?)\n /// [<invalid syntax>]\n \n@@ -22,26 +19,26 @@\n /// [S::A]\n //~^ ERROR unresolved link\n //~| NOTE this link partially resolves\n-//~| NOTE `S` has no field\n+//~| NOTE no `A` in `S`\n \n /// [S::fmt]\n //~^ ERROR unresolved link\n //~| NOTE this link partially resolves\n-//~| NOTE `S` has no field\n+//~| NOTE no `fmt` in `S`\n \n /// [E::D]\n //~^ ERROR unresolved link\n //~| NOTE this link partially resolves\n-//~| NOTE `E` has no field\n+//~| NOTE no `D` in `E`\n \n /// [u8::not_found]\n //~^ ERROR unresolved link\n //~| NOTE the builtin type `u8` does not have an associated item named `not_found`\n \n /// [S!]\n //~^ ERROR unresolved link\n-//~| HELP to link to the unit struct, use its disambiguator\n-//~| NOTE this link resolves to the unit struct `S`\n+//~| HELP to link to the struct, use its disambiguator\n+//~| NOTE this link resolves to the struct `S`\n pub fn f() {}\n #[derive(Debug)]\n pub struct S;\n@@ -62,6 +59,9 @@ impl S {\n //~| NOTE not in the type namespace\n \n /// [T::h!]\n+//~^ ERROR unresolved link\n+//~| NOTE no item named `T::h`\n+//~| HELP to escape\n pub trait T {\n     fn g() {}\n }"}, {"sha": "4044c7fde66f2d9c523cfb75e05c2714a5bc2e21", "filename": "src/test/rustdoc-ui/intra-link-errors.stderr", "status": "modified", "additions": 17, "deletions": 37, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-link-errors.stderr?ref=f4e6ebd11aaea9fc412d78371fd3060468625056", "patch": "@@ -1,39 +1,19 @@\n-error: unresolved link to `std::io::oops`\n-  --> $DIR/intra-link-errors.rs:4:6\n+error: unresolved link to `path::to::nonexistent::module`\n+  --> $DIR/intra-link-errors.rs:8:6\n    |\n-LL | //! [std::io::oops]\n-   |      ^^^^^^^^^^^^^\n+LL | /// [path::to::nonexistent::module]\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/intra-link-errors.rs:1:9\n    |\n LL | #![deny(broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this link resolves to the crate `std`, which is not an enum\n-   = note: if this were an enum, it might have a variant which resolved\n-   = note: this link partially resolves to the module `io`\n-   = note: `io` has no field, variant, or associated item named `oops`\n-\n-error: unresolved link to `std::io::oops::not::here`\n-  --> $DIR/intra-link-errors.rs:5:6\n-   |\n-LL | //! [std::io::oops::not::here]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: no item named `std::io::oops::not` is in scope\n-   = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n-\n-error: unresolved link to `path::to::nonexistent::module`\n-  --> $DIR/intra-link-errors.rs:11:6\n-   |\n-LL | /// [path::to::nonexistent::module]\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n    = note: no item named `path::to::nonexistent` is in scope\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `f::A`\n-  --> $DIR/intra-link-errors.rs:17:6\n+  --> $DIR/intra-link-errors.rs:14:6\n    |\n LL | /// [f::A]\n    |      ^^^^\n@@ -42,58 +22,58 @@ LL | /// [f::A]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `S::A`\n-  --> $DIR/intra-link-errors.rs:22:6\n+  --> $DIR/intra-link-errors.rs:19:6\n    |\n LL | /// [S::A]\n    |      ^^^^\n    |\n    = note: this link partially resolves to the struct `S`\n-   = note: `S` has no field, variant, or associated item named `A`\n+   = note: no `A` in `S`\n \n error: unresolved link to `S::fmt`\n-  --> $DIR/intra-link-errors.rs:27:6\n+  --> $DIR/intra-link-errors.rs:24:6\n    |\n LL | /// [S::fmt]\n    |      ^^^^^^\n    |\n    = note: this link partially resolves to the struct `S`\n-   = note: `S` has no field, variant, or associated item named `fmt`\n+   = note: no `fmt` in `S`\n \n error: unresolved link to `E::D`\n-  --> $DIR/intra-link-errors.rs:32:6\n+  --> $DIR/intra-link-errors.rs:29:6\n    |\n LL | /// [E::D]\n    |      ^^^^\n    |\n    = note: this link partially resolves to the enum `E`\n-   = note: `E` has no field, variant, or associated item named `D`\n+   = note: no `D` in `E`\n \n error: unresolved link to `u8::not_found`\n-  --> $DIR/intra-link-errors.rs:37:6\n+  --> $DIR/intra-link-errors.rs:34:6\n    |\n LL | /// [u8::not_found]\n    |      ^^^^^^^^^^^^^\n    |\n    = note: the builtin type `u8` does not have an associated item named `not_found`\n \n error: unresolved link to `S`\n-  --> $DIR/intra-link-errors.rs:41:6\n+  --> $DIR/intra-link-errors.rs:38:6\n    |\n LL | /// [S!]\n    |      ^^ help: to link to the struct, use its disambiguator: `struct@S`\n    |\n    = note: this link resolves to the struct `S`, which is not in the macro namespace\n \n error: unresolved link to `T::g`\n-  --> $DIR/intra-link-errors.rs:59:6\n+  --> $DIR/intra-link-errors.rs:56:6\n    |\n LL | /// [type@T::g]\n    |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `T::g()`\n    |\n    = note: this link resolves to the associated function `g`, which is not in the type namespace\n \n error: unresolved link to `T::h`\n-  --> $DIR/intra-link-errors.rs:64:6\n+  --> $DIR/intra-link-errors.rs:61:6\n    |\n LL | /// [T::h!]\n    |      ^^^^^\n@@ -102,12 +82,12 @@ LL | /// [T::h!]\n    = help: to escape `[` and `]` characters, add '\\' before them like `\\[` or `\\]`\n \n error: unresolved link to `S::h`\n-  --> $DIR/intra-link-errors.rs:51:6\n+  --> $DIR/intra-link-errors.rs:48:6\n    |\n LL | /// [type@S::h]\n    |      ^^^^^^^^^ help: to link to the associated function, use its disambiguator: `S::h()`\n    |\n    = note: this link resolves to the associated function `h`, which is not in the type namespace\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "b51c8e89600b07b7cf69688c4ab3d9e6789c5ad1", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4e6ebd11aaea9fc412d78371fd3060468625056/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=f4e6ebd11aaea9fc412d78371fd3060468625056", "patch": "@@ -6,7 +6,7 @@ LL |        //! Test with [Foo::baz], [Bar::foo], ...\n    |\n    = note: `#[warn(broken_intra_doc_links)]` on by default\n    = note: this link partially resolves to the struct `Foo`\n-   = note: `Foo` has no field, variant, or associated item named `baz`\n+   = note: no `baz` in `Foo`\n \n warning: unresolved link to `Bar::foo`\n   --> $DIR/intra-links-warning.rs:3:35"}]}