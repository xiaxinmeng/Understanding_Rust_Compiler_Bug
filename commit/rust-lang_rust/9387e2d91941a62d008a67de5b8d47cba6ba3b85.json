{"sha": "9387e2d91941a62d008a67de5b8d47cba6ba3b85", "node_id": "C_kwDOAAsO6NoAKDkzODdlMmQ5MTk0MWE2MmQwMDhhNjdkZTViOGQ0N2NiYTZiYTNiODU", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T01:32:47Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T01:32:47Z"}, "message": "populate container name when traversing down blocks", "tree": {"sha": "9b51db28c3a3b26395eb7bbbc7ed7c6e3b3a40ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b51db28c3a3b26395eb7bbbc7ed7c6e3b3a40ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9387e2d91941a62d008a67de5b8d47cba6ba3b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9387e2d91941a62d008a67de5b8d47cba6ba3b85", "html_url": "https://github.com/rust-lang/rust/commit/9387e2d91941a62d008a67de5b8d47cba6ba3b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9387e2d91941a62d008a67de5b8d47cba6ba3b85/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fa1d9bb479c3af2b300b4f19656b7222495f2c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa1d9bb479c3af2b300b4f19656b7222495f2c7", "html_url": "https://github.com/rust-lang/rust/commit/8fa1d9bb479c3af2b300b4f19656b7222495f2c7"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "3ff45b4b08d4fe95be119765f8375540b42671ec", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9387e2d91941a62d008a67de5b8d47cba6ba3b85/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9387e2d91941a62d008a67de5b8d47cba6ba3b85/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=9387e2d91941a62d008a67de5b8d47cba6ba3b85", "patch": "@@ -545,13 +545,19 @@ fn collect_symbols_from_item_scope(\n     let collect_symbols_from_scope =\n         |scope: &ItemScope,\n          symbols: &mut Vec<FileSymbol>,\n-         bodies_to_traverse: &mut Vec<DefWithBodyId>| {\n-            let symbols_iter =\n-                scope.declarations().filter_map(|module_def_id| match module_def_id {\n+         bodies_to_traverse: &mut Vec<(Option<SmolStr>, DefWithBodyId)>,\n+         container_name: &Option<SmolStr>| {\n+            let symbols_iter = scope\n+                .declarations()\n+                .filter_map(|module_def_id| match module_def_id {\n                     ModuleDefId::ModuleId(module_id) => decl_module(db, module_id),\n                     ModuleDefId::FunctionId(function_id) => {\n-                        bodies_to_traverse.push(function_id.into());\n-                        decl_assoc(db, function_id, FileSymbolKind::Function)\n+                        let symbol = decl_assoc(db, function_id, FileSymbolKind::Function);\n+                        bodies_to_traverse.push((\n+                            symbol.as_ref().and_then(|x| Some(x.name.clone())),\n+                            function_id.into(),\n+                        ));\n+                        symbol\n                     }\n                     ModuleDefId::AdtId(AdtId::StructId(struct_id)) => {\n                         decl(db, struct_id, FileSymbolKind::Struct)\n@@ -563,37 +569,60 @@ fn collect_symbols_from_item_scope(\n                         decl(db, union_id, FileSymbolKind::Union)\n                     }\n                     ModuleDefId::ConstId(const_id) => {\n-                        bodies_to_traverse.push(const_id.into());\n-                        decl_assoc(db, const_id, FileSymbolKind::Const)\n+                        let symbol = decl_assoc(db, const_id, FileSymbolKind::Const);\n+                        bodies_to_traverse.push((\n+                            symbol.as_ref().and_then(|x| Some(x.name.clone())),\n+                            const_id.into(),\n+                        ));\n+                        symbol\n                     }\n                     ModuleDefId::StaticId(static_id) => {\n-                        bodies_to_traverse.push(static_id.into());\n-                        decl(db, static_id, FileSymbolKind::Static)\n+                        let symbol = decl(db, static_id, FileSymbolKind::Static);\n+                        bodies_to_traverse.push((\n+                            symbol.as_ref().and_then(|x| Some(x.name.clone())),\n+                            static_id.into(),\n+                        ));\n+                        symbol\n                     }\n                     ModuleDefId::TraitId(trait_id) => decl(db, trait_id, FileSymbolKind::Trait),\n                     ModuleDefId::TypeAliasId(alias_id) => {\n                         decl_assoc(db, alias_id, FileSymbolKind::TypeAlias)\n                     }\n                     ModuleDefId::BuiltinType(_) => None,\n                     ModuleDefId::EnumVariantId(_) => None,\n+                })\n+                .map(|mut s| {\n+                    // If a container name was not provided in the symbol, but within the scope of our traversal,\n+                    // we'll update the container name here.\n+                    if let Some(container_name) = &container_name {\n+                        s.container_name.get_or_insert_with(|| container_name.clone());\n+                    }\n+\n+                    s\n                 });\n \n             symbols.extend(symbols_iter);\n \n             for const_id in scope.unnamed_consts() {\n-                bodies_to_traverse.push(const_id.into())\n+                // since unnamed consts don't really have a name, we'll inherit parent scope's symbol name.\n+                bodies_to_traverse.push((container_name.clone(), const_id.into()));\n             }\n         };\n \n     let mut bodies_to_traverse = Vec::new();\n-    collect_symbols_from_scope(scope, symbols, &mut bodies_to_traverse);\n+    collect_symbols_from_scope(scope, symbols, &mut bodies_to_traverse, &None);\n \n-    while let Some(body) = bodies_to_traverse.pop() {\n+    while let Some((container_name, body)) = bodies_to_traverse.pop() {\n         let body = db.body(body);\n \n         for (_, block_def_map) in body.blocks(db) {\n             for (_, module_data) in block_def_map.modules() {\n-                collect_symbols_from_scope(&module_data.scope, symbols, &mut bodies_to_traverse);\n+                collect_symbols_from_scope(\n+                    &module_data.scope,\n+                    symbols,\n+                    &mut bodies_to_traverse,\n+                    &container_name,\n+                );\n             }\n         }\n     }"}]}