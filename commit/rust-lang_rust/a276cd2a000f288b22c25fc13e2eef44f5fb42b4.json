{"sha": "a276cd2a000f288b22c25fc13e2eef44f5fb42b4", "node_id": "C_kwDOAAsO6NoAKGEyNzZjZDJhMDAwZjI4OGIyMmMyNWZjMTNlMmVlZjQ0ZjVmYjQyYjQ", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-04T11:39:42Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-11-04T11:57:14Z"}, "message": "Add clippy docs to check for a specific type", "tree": {"sha": "efd3b3567cde411ef2a4bace12dc278bb5119ac3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efd3b3567cde411ef2a4bace12dc278bb5119ac3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a276cd2a000f288b22c25fc13e2eef44f5fb42b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEsfZNmu/fmIv8KDcv/Ny/Ka9k1gEFAmGDypoACgkQ/Ny/Ka9k\n1gEF8w/+LORg0dxJIhY8McbOb/rIq7321vK+o+yUX625fFeGrJtuvCbLwGQGJwXs\ngBjk4JAnWyzfCO8gB+YOAT5VhGCoJ//qER6WpeBy5xpSFRRGys+fE5UIDfg/gmB9\nPRuufHPJ18NeZUgJDPIm/KKDpVx+jDDpyA+7FaoK+gcBfGKUFnIODGqC8O+fePb1\nPBgM0K3VZ8GQs+NtnML7UBXAtwlbzAwkLJhXEfXtrcgb4JhOHQX5xKqqA60ChInd\nrGV/YJ2IokpNy9bGJAdF0N39rQ9lkynBSHOV3CQuaRTCbQFQZazjde/I6Ol+AnbH\nyL1/DdjcaMy/7QQ8M1xSdg1WOuuLXV7TOKwQMoyMvp29Yg/HyDQDw4n/paEVk8vf\nAxcjhULpileAc6BTud74IKaR+pEnrBxgfEEmT321pm95eFRtieyWVpZOsmFLlXj5\ndp0wqDfjlwUBss77LX4Xr2dwTu3+YrE3GguC4DOQsZitvKOYTDVfCLh70SgMVemi\ndDUASMjPUUPHMWgM14Bedir5XNl7oDyIiqQogc4pISk/Bu3I+Ml1jv/KUy8kLjLJ\nAOMsNt2fXkuhsENUrwYyBlg0QAXvh6vHpg7DWURLLWihy6sBnaemM3+jqTt0nCG0\nQrVO2YwHu2llT9IgoTe1491SzM/KFbsaVFiTJ8yMm4L+UbCObeE=\n=NcE3\n-----END PGP SIGNATURE-----", "payload": "tree efd3b3567cde411ef2a4bace12dc278bb5119ac3\nparent d134dddf706e16eb876a3b42c0a7f546626e5954\nauthor xFrednet <xFrednet@gmail.com> 1636025982 +0100\ncommitter xFrednet <xFrednet@gmail.com> 1636027034 +0100\n\nAdd clippy docs to check for a specific type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a276cd2a000f288b22c25fc13e2eef44f5fb42b4", "html_url": "https://github.com/rust-lang/rust/commit/a276cd2a000f288b22c25fc13e2eef44f5fb42b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a276cd2a000f288b22c25fc13e2eef44f5fb42b4/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d134dddf706e16eb876a3b42c0a7f546626e5954", "url": "https://api.github.com/repos/rust-lang/rust/commits/d134dddf706e16eb876a3b42c0a7f546626e5954", "html_url": "https://github.com/rust-lang/rust/commit/d134dddf706e16eb876a3b42c0a7f546626e5954"}], "stats": {"total": 54, "additions": 47, "deletions": 7}, "files": [{"sha": "3390e60297c8a1db3afc609ddc8bacca346e9291", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 47, "deletions": 7, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a276cd2a000f288b22c25fc13e2eef44f5fb42b4/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/a276cd2a000f288b22c25fc13e2eef44f5fb42b4/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=a276cd2a000f288b22c25fc13e2eef44f5fb42b4", "patch": "@@ -4,7 +4,8 @@ You may need following tooltips to catch up with common operations.\n \n - [Common tools for writing lints](#common-tools-for-writing-lints)\n   - [Retrieving the type of an expression](#retrieving-the-type-of-an-expression)\n-  - [Checking if an expression is calling a specific method](#checking-if-an-expr-is-calling-a-specific-method)\n+  - [Checking if an expr is calling a specific method](#checking-if-an-expr-is-calling-a-specific-method)\n+  - [Checking for a specific type](#checking-for-a-specific-type)\n   - [Checking if a type implements a specific trait](#checking-if-a-type-implements-a-specific-trait)\n   - [Checking if a type defines a specific method](#checking-if-a-type-defines-a-specific-method)\n   - [Dealing with macros](#dealing-with-macros)\n@@ -15,7 +16,7 @@ Useful Rustc dev guide links:\n - [Type checking](https://rustc-dev-guide.rust-lang.org/type-checking.html)\n - [Ty module](https://rustc-dev-guide.rust-lang.org/ty.html)\n \n-# Retrieving the type of an expression\n+## Retrieving the type of an expression\n \n Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for example to answer following questions:\n \n@@ -54,7 +55,7 @@ Two noticeable items here:\n   created by type checking step, it includes useful information such as types\n   of expressions, ways to resolve methods and so on.\n \n-# Checking if an expr is calling a specific method\n+## Checking if an expr is calling a specific method\n \n Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n \n@@ -63,9 +64,11 @@ impl LateLintPass<'_> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, _args, _) = &expr.kind;\n+            if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..], _) = &expr.kind;\n             // Check the name of this method is `some_method`\n             if path.ident.name == sym!(some_method);\n+            // Optionally, check the type of the self argument.\n+            // - See \"Checking for a specific type\"\n             then {\n                 // ...\n             }\n@@ -74,7 +77,44 @@ impl LateLintPass<'_> for MyStructLint {\n }\n ```\n \n-# Checking if a type implements a specific trait\n+## Checking for a specific type\n+\n+There are three ways to check if an expression type is a specific type we want to check for.\n+All of these methods only check for the base type, generic arguments have to be checked separately.\n+\n+```rust\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n+use clippy_utils::{paths, match_def_path};\n+use rustc_span::symbol::sym;\n+use rustc_hir::LangItem;\n+\n+impl LateLintPass<'_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        // Getting the expression type\n+        let ty = cx.typeck_results().expr_ty(expr);\n+\n+        // 1. Using diagnostic items\n+        // The last argument is the diagnostic item to check for\n+        if is_type_diagnostic_item(cx, ty, sym::Option) {\n+            // The type is an `Option`\n+        }\n+\n+        // 2. Using lang items\n+        if is_type_lang_item(cx, ty, LangItem::RangeFull) {\n+            // The type is a full range like `.drain(..)`\n+        }\n+\n+        // 3. Using the type path\n+        if match_def_path(cx, def_id, &paths::RESULT) {\n+            // The type is a `core::result::Result`\n+        }\n+    }\n+}\n+```\n+\n+Prefer using diagnostic items and lang items where possible.\n+\n+## Checking if a type implements a specific trait\n \n There are three ways to do this, depending on if the target trait has a diagnostic item, lang item or neither.\n \n@@ -114,7 +154,7 @@ impl LateLintPass<'_> for MyStructLint {\n We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n A list of defined paths for Clippy can be found in [paths.rs][paths]\n \n-# Checking if a type defines a specific method\n+## Checking if a type defines a specific method\n \n To check if our type defines a method called `some_method`:\n \n@@ -140,7 +180,7 @@ impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n }\n ```\n \n-# Dealing with macros\n+## Dealing with macros\n \n There are several helpers in [`clippy_utils`][utils] to deal with macros:\n "}]}