{"sha": "0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "node_id": "C_kwDOAAsO6NoAKDBiNjkzNGQ2YzZmZWQ2NmU1ZTc4M2IzNTVkZTFmMzNhYjNkNTFlZmI", "commit": {"author": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-10-28T05:38:59Z"}, "committer": {"name": "Yiming Lei", "email": "yiming.lei@futurewei.com", "date": "2022-11-10T01:42:17Z"}, "message": "remove redundent \"<>\" for ty::Slice with reference type\nthis fix #103271", "tree": {"sha": "4ed0ca2d69c7aa800720ceeb8781af6e9a069443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ed0ca2d69c7aa800720ceeb8781af6e9a069443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "html_url": "https://github.com/rust-lang/rust/commit/0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/comments", "author": null, "committer": null, "parents": [{"sha": "73c9eaf21454b718e7c549984d9eb6e1f75e995c", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c9eaf21454b718e7c549984d9eb6e1f75e995c", "html_url": "https://github.com/rust-lang/rust/commit/73c9eaf21454b718e7c549984d9eb6e1f75e995c"}], "stats": {"total": 74, "additions": 74, "deletions": 0}, "files": [{"sha": "f41f8731867a94c9fa172c28e6504cd86f3ff6f3", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "patch": "@@ -1804,6 +1804,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         | ty::Str\n                         | ty::Projection(_)\n                         | ty::Param(_) => format!(\"{deref_ty}\"),\n+                        // we need to test something like  <&[_]>::len\n+                        // and Vec::function();\n+                        // <&[_]>::len doesn't need an extra \"<>\" between\n+                        // but for Adt type like Vec::function()\n+                        // we would suggest <[_]>::function();\n+                        _ if self.tcx.sess.source_map().span_wrapped_by_angle_bracket(ty.span)  => format!(\"{deref_ty}\"),\n                         _ => format!(\"<{deref_ty}>\"),\n                     };\n                     err.span_suggestion_verbose("}, {"sha": "029cd93a52a3be023311cd41f4568e191917ee62", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "patch": "@@ -753,6 +753,50 @@ impl SourceMap {\n         }\n     }\n \n+    /// Given a 'Span', tries to tell if the next character is '>'\n+    /// and the previous charactoer is '<' after skipping white space\n+    /// return true if wrapped by '<>'\n+    pub fn span_wrapped_by_angle_bracket(&self, span: Span) -> bool {\n+        self.span_to_source(span, |src, start_index, end_index| {\n+            if src.get(start_index..end_index).is_none() {\n+                return Ok(false);\n+            }\n+            // test the right side to match '>' after skipping white space\n+            let end_src = &src[end_index..];\n+            let mut i = 0;\n+            while let Some(cc) = end_src.chars().nth(i) {\n+                if cc == ' ' {\n+                    i = i + 1;\n+                } else if cc == '>' {\n+                    // found > in the right;\n+                    break;\n+                } else {\n+                    // failed to find '>' return false immediately\n+                    return Ok(false);\n+                }\n+            }\n+            // test the left side to match '<' after skipping white space\n+            i = start_index;\n+            let start_src = &src[0..start_index];\n+            while let Some(cc) = start_src.chars().nth(i) {\n+                if cc == ' ' {\n+                    if i == 0 {\n+                        return Ok(false);\n+                    }\n+                    i = i - 1;\n+                } else if cc == '<' {\n+                    // found < in the left\n+                    break;\n+                } else {\n+                    // failed to find '<' return false immediately\n+                    return Ok(false);\n+                }\n+            }\n+            return Ok(true);\n+        })\n+        .map_or(false, |is_accessible| is_accessible)\n+    }\n+\n     /// Given a `Span`, tries to get a shorter span ending just after the first occurrence of `char`\n     /// `c`.\n     pub fn span_through_char(&self, sp: Span, c: char) -> Span {"}, {"sha": "bd3254af3df71837010a1eb3f74c77e537078889", "filename": "src/test/ui/type/issue-103271.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.rs?ref=0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    let iter_fun = <&[u32]>::iter;\n+    //~^ ERROR no function or associated item named `iter` found for reference `&[u32]` in the current scope [E0599]\n+    //~| function or associated item not found in `&[u32]`\n+    //~| HELP the function `iter` is implemented on `[u32]`\n+    for item in iter_fun(&[1,1]) {\n+        let x: &u32 = item;\n+        assert_eq!(x, &1);\n+    }\n+}"}, {"sha": "02a59d4b99c4df3cb7f4e39b1a55541207ea6ceb", "filename": "src/test/ui/type/issue-103271.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0b6934d6c6fed66e5e783b355de1f33ab3d51efb/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-103271.stderr?ref=0b6934d6c6fed66e5e783b355de1f33ab3d51efb", "patch": "@@ -0,0 +1,14 @@\n+error[E0599]: no function or associated item named `iter` found for reference `&[u32]` in the current scope\n+  --> $DIR/issue-103271.rs:2:30\n+   |\n+LL |     let iter_fun = <&[u32]>::iter;\n+   |                              ^^^^ function or associated item not found in `&[u32]`\n+   |\n+help: the function `iter` is implemented on `[u32]`\n+   |\n+LL |     let iter_fun = <[u32]>::iter;\n+   |                     ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}