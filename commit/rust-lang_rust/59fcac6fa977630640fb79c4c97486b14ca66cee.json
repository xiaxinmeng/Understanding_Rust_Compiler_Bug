{"sha": "59fcac6fa977630640fb79c4c97486b14ca66cee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZmNhYzZmYTk3NzYzMDY0MGZiNzljNGM5NzQ4NmIxNGNhNjZjZWU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-07-30T17:08:26Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-08-05T20:02:45Z"}, "message": "Improve dead code detection for unions", "tree": {"sha": "0185b5841f10fc0f08d3a5c058496f2662993ca2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0185b5841f10fc0f08d3a5c058496f2662993ca2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59fcac6fa977630640fb79c4c97486b14ca66cee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59fcac6fa977630640fb79c4c97486b14ca66cee", "html_url": "https://github.com/rust-lang/rust/commit/59fcac6fa977630640fb79c4c97486b14ca66cee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59fcac6fa977630640fb79c4c97486b14ca66cee/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46fe8e99665d6a210f6dc16590127ee808e60366", "url": "https://api.github.com/repos/rust-lang/rust/commits/46fe8e99665d6a210f6dc16590127ee808e60366", "html_url": "https://github.com/rust-lang/rust/commit/46fe8e99665d6a210f6dc16590127ee808e60366"}], "stats": {"total": 48, "additions": 32, "deletions": 16}, "files": [{"sha": "e751241669daea5c00a25a68b1c2827507f0b021", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59fcac6fa977630640fb79c4c97486b14ca66cee/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59fcac6fa977630640fb79c4c97486b14ca66cee/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=59fcac6fa977630640fb79c4c97486b14ca66cee", "patch": "@@ -877,7 +877,7 @@ pub fn walk_impl_item_ref<'v, V: Visitor<'v>>(visitor: &mut V, impl_item_ref: &'\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n     visitor.visit_id(struct_definition.id());\n-    walk_list!(visitor, visit_struct_field, struct_definition.fields());\n+    walk_list!(visitor, visit_struct_field, struct_definition.fields().iter().rev());\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {"}, {"sha": "2f0ee8d8f2fb24ea37db15e649d75c36618e4eb8", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59fcac6fa977630640fb79c4c97486b14ca66cee/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59fcac6fa977630640fb79c4c97486b14ca66cee/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=59fcac6fa977630640fb79c4c97486b14ca66cee", "patch": "@@ -422,6 +422,7 @@ fn get_struct_ctor_id(item: &hir::Item) -> Option<ast::NodeId> {\n struct DeadVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     live_symbols: Box<FxHashSet<ast::NodeId>>,\n+    need_check_next_union_field: bool,\n }\n \n impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n@@ -537,6 +538,16 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n         }\n     }\n \n+    fn visit_variant_data(&mut self,\n+                          s: &'tcx hir::VariantData,\n+                          _: ast::Name,\n+                          _: &'tcx hir::Generics,\n+                          _parent_id: ast::NodeId,\n+                          _: syntax_pos::Span) {\n+        self.need_check_next_union_field = true;\n+        intravisit::walk_struct_def(self, s)\n+    }\n+\n     fn visit_variant(&mut self,\n                      variant: &'tcx hir::Variant,\n                      g: &'tcx hir::Generics,\n@@ -557,23 +568,24 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n     }\n \n     fn visit_struct_field(&mut self, field: &'tcx hir::StructField) {\n-        if self.should_warn_about_field(&field) {\n-            let did = self.tcx.hir.get_parent_did(field.id);\n-            if if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n-                match self.tcx.hir.find(node_id) {\n-                    Some(hir_map::NodeItem(item)) => match item.node {\n-                        Item_::ItemUnion(_, _) => false,\n-                        _ => true,\n-                    },\n-                    _ => true,\n-                }\n-            } else {\n-                true\n-            } {\n+        if self.need_check_next_union_field {\n+            if self.should_warn_about_field(&field) {\n                 self.warn_dead_code(field.id, field.span, field.name, \"field\");\n+            } else {\n+                let did = self.tcx.hir.get_parent_did(field.id);\n+                if let Some(node_id) = self.tcx.hir.as_local_node_id(did) {\n+                    match self.tcx.hir.find(node_id) {\n+                        Some(hir_map::NodeItem(item)) => match item.node {\n+                            // If this is an union's field, it means all previous fields\n+                            // have been used as well so no need to check further.\n+                            Item_::ItemUnion(_, _) => self.need_check_next_union_field = false,\n+                            _ => {}\n+                        },\n+                        _ => {}\n+                    }\n+                }\n             }\n         }\n-\n         intravisit::walk_struct_field(self, field);\n     }\n \n@@ -615,6 +627,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n-    let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };\n+    let mut visitor = DeadVisitor {\n+        tcx: tcx,\n+        live_symbols: live_symbols,\n+        need_check_next_union_field: true,\n+    };\n     intravisit::walk_crate(&mut visitor, krate);\n }"}]}