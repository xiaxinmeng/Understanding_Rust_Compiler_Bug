{"sha": "f7415bcea235cab84b775d59dab3b9a0cb68dd01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NDE1YmNlYTIzNWNhYjg0Yjc3NWQ1OWRhYjNiOWEwY2I2OGRkMDE=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-04-29T12:22:48Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-04-29T12:53:31Z"}, "message": "update self format", "tree": {"sha": "aaafa965a93f00ee8ffdf9a430391a529bdd3fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaafa965a93f00ee8ffdf9a430391a529bdd3fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7415bcea235cab84b775d59dab3b9a0cb68dd01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7415bcea235cab84b775d59dab3b9a0cb68dd01", "html_url": "https://github.com/rust-lang/rust/commit/f7415bcea235cab84b775d59dab3b9a0cb68dd01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7415bcea235cab84b775d59dab3b9a0cb68dd01/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9cef5db170bc0ac2eb0cc42dff2013a4ad3d0c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cef5db170bc0ac2eb0cc42dff2013a4ad3d0c5", "html_url": "https://github.com/rust-lang/rust/commit/c9cef5db170bc0ac2eb0cc42dff2013a4ad3d0c5"}], "stats": {"total": 158, "additions": 100, "deletions": 58}, "files": [{"sha": "110925f8e02165477493f893f82db79bfa7e9c5a", "filename": "Configurations.md", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -1042,8 +1042,10 @@ Item layout inside a imports block\n ```rust\n use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n-          eeeeeeeeeeeeeeeeee, ffffffffffffffffff};\n+use foo::{\n+    aaaaaaaaaaaaaaaaaa, bbbbbbbbbbbbbbbbbb, cccccccccccccccccc, dddddddddddddddddd,\n+    eeeeeeeeeeeeeeeeee, ffffffffffffffffff,\n+};\n ```\n \n #### `\"Horizontal\"`:\n@@ -1061,27 +1063,33 @@ use foo::{aaa, bbb, ccc, ddd, eee, fff};\n ```rust\n use foo::{xxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz};\n \n-use foo::{aaaaaaaaaaaaaaaaaa,\n-          bbbbbbbbbbbbbbbbbb,\n-          cccccccccccccccccc,\n-          dddddddddddddddddd,\n-          eeeeeeeeeeeeeeeeee,\n-          ffffffffffffffffff};\n+use foo::{\n+    aaaaaaaaaaaaaaaaaa,\n+    bbbbbbbbbbbbbbbbbb,\n+    cccccccccccccccccc,\n+    dddddddddddddddddd,\n+    eeeeeeeeeeeeeeeeee,\n+    ffffffffffffffffff,\n+};\n ```\n \n #### `\"Vertical\"`:\n \n ```rust\n-use foo::{xxx,\n-          yyy,\n-          zzz};\n+use foo::{\n+    xxx,\n+    yyy,\n+    zzz,\n+};\n \n-use foo::{aaa,\n-          bbb,\n-          ccc,\n-          ddd,\n-          eee,\n-          fff};\n+use foo::{\n+    aaa,\n+    bbb,\n+    ccc,\n+    ddd,\n+    eee,\n+    fff,\n+};\n ```\n \n ## `merge_imports`\n@@ -2036,7 +2044,7 @@ fn foo() {\n \n ## `required_version`\n \n-Require a specific version of rustfmt. If you want to make sure that the \n+Require a specific version of rustfmt. If you want to make sure that the\n specific version of rustfmt is used in your CI, use this option.\n \n - **Default value**: `CARGO_PKG_VERSION`"}, {"sha": "46e18864d30a48827a00fb2b1414ad4014b8d1e9", "filename": "src/bin/main.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmain.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -24,8 +24,10 @@ use failure::err_msg;\n \n use getopts::{Matches, Options};\n \n-use rustfmt::{emit_post_matter, emit_pre_matter, load_config, CliOptions, Config, FmtResult,\n-              WriteMode, WRITE_MODE_LIST};\n+use rustfmt::{\n+    emit_post_matter, emit_pre_matter, load_config, CliOptions, Config, FmtResult, WriteMode,\n+    WRITE_MODE_LIST,\n+};\n use rustfmt::{format_and_emit_report, FileName, Input, Summary};\n \n fn main() {"}, {"sha": "2f05f4a2c4674bef38b29fcd802555815eb26e0e", "filename": "src/chains.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -70,8 +70,10 @@ use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n-use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp,\n-            trimmed_last_line_width, wrap_str};\n+use utils::{\n+    first_line_width, last_line_extendable, last_line_width, mk_sp, trimmed_last_line_width,\n+    wrap_str,\n+};\n \n use std::borrow::Cow;\n use std::cmp::min;"}, {"sha": "a048b1896c8c11b980135d65aa2919f39ffb547a", "filename": "src/expr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -19,11 +19,15 @@ use syntax::{ast, ptr};\n use chains::rewrite_chain;\n use closures;\n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n-              rewrite_comment, rewrite_missing_comment, CharClasses, FindUncommented};\n+use comment::{\n+    combine_strs_with_missing_comments, contains_comment, recover_comment_removed, rewrite_comment,\n+    rewrite_missing_comment, CharClasses, FindUncommented,\n+};\n use config::{Config, ControlBraceStyle, IndentStyle};\n-use lists::{definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting,\n-            struct_lit_shape, struct_lit_tactic, write_list, ListFormatting, ListItem, Separator};\n+use lists::{\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, ListFormatting, ListItem, Separator,\n+};\n use macros::{rewrite_macro, MacroArg, MacroPosition};\n use matches::rewrite_match;\n use overflow;\n@@ -33,9 +37,11 @@ use shape::{Indent, Shape};\n use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n-use utils::{colon_spaces, contains_skip, count_newlines, first_line_width, inner_attributes,\n-            last_line_extendable, last_line_width, mk_sp, outer_attributes, paren_overhead,\n-            ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str};\n+use utils::{\n+    colon_spaces, contains_skip, count_newlines, first_line_width, inner_attributes,\n+    last_line_extendable, last_line_width, mk_sp, outer_attributes, paren_overhead,\n+    ptr_vec_to_ref_vec, semicolon_for_stmt, wrap_str,\n+};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n "}, {"sha": "d6985c5b554095b40e4f613d708a470f2ef1c377", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -21,23 +21,29 @@ use syntax::visit;\n use syntax::{ast, ptr, symbol};\n \n use codemap::{LineRangeUtils, SpanUtils};\n-use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n-              recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n+use comment::{\n+    combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n+    recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented,\n+};\n use config::{BraceStyle, Config, Density, IndentStyle};\n-use expr::{format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs,\n-           rewrite_assign_rhs_with, ExprType, RhsTactics};\n+use expr::{\n+    format_expr, is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, rewrite_assign_rhs_with,\n+    ExprType, RhsTactics,\n+};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator};\n use macros::{rewrite_macro, MacroPosition};\n use overflow;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n use types::TraitTyParamBounds;\n-use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_auto,\n-            format_constness, format_defaultness, format_mutability, format_unsafety,\n-            format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n-            last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n-            stmt_expr, trimmed_last_line_width};\n+use utils::{\n+    colon_spaces, contains_skip, first_line_width, format_abi, format_auto, format_constness,\n+    format_defaultness, format_mutability, format_unsafety, format_visibility,\n+    is_attributes_extendable, last_line_contains_single_line_comment, last_line_used_width,\n+    last_line_width, mk_sp, semicolon_for_expr, starts_with_newline, stmt_expr,\n+    trimmed_last_line_width,\n+};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n "}, {"sha": "1fc150e1256b5b5b80363f07a4521f41ccc52406", "filename": "src/macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -33,8 +33,10 @@ use syntax::util::ThinVec;\n use syntax::{ast, ptr};\n \n use codemap::SpanUtils;\n-use comment::{contains_comment, remove_trailing_white_spaces, CharClasses, FindUncommented,\n-              FullCodeCharKind, LineClasses};\n+use comment::{\n+    contains_comment, remove_trailing_white_spaces, CharClasses, FindUncommented, FullCodeCharKind,\n+    LineClasses,\n+};\n use expr::rewrite_array;\n use lists::{itemize_list, write_list, ListFormatting};\n use overflow;"}, {"sha": "bc092b1a718a8b8537b918a537657e9c32a59f9d", "filename": "src/matches.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -19,14 +19,18 @@ use syntax::{ast, ptr};\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::{Config, ControlBraceStyle, IndentStyle};\n-use expr::{format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n-           rewrite_multiple_patterns, ExprType, RhsTactics, ToExpr};\n+use expr::{\n+    format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n+    rewrite_multiple_patterns, ExprType, RhsTactics, ToExpr,\n+};\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n-use utils::{contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable,\n-            mk_sp, ptr_vec_to_ref_vec, trimmed_last_line_width};\n+use utils::{\n+    contains_skip, extra_offset, first_line_width, inner_attributes, last_line_extendable, mk_sp,\n+    ptr_vec_to_ref_vec, trimmed_last_line_width,\n+};\n \n /// A simple wrapper type against `ast::Arm`. Used inside `write_list()`.\n struct ArmWrapper<'a> {"}, {"sha": "b42c6be90cafad392fc7058e505a28c8ab899548", "filename": "src/overflow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -23,7 +23,9 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListIte\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n-use utils::{count_newlines, extra_offset, first_line_width, last_line_width, mk_sp, paren_overhead};\n+use utils::{\n+    count_newlines, extra_offset, first_line_width, last_line_width, mk_sp, paren_overhead,\n+};\n \n use std::cmp::min;\n "}, {"sha": "b4865ad329e585b98f68e2d4dc2c4d2188bc12c1", "filename": "src/patterns.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -15,10 +15,13 @@ use syntax::ptr;\n \n use codemap::SpanUtils;\n use comment::FindUncommented;\n-use expr::{can_be_overflowed_expr, rewrite_pair, rewrite_unary_prefix, wrap_struct_field,\n-           PairParts};\n-use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n-            struct_lit_tactic, write_list};\n+use expr::{\n+    can_be_overflowed_expr, rewrite_pair, rewrite_unary_prefix, wrap_struct_field, PairParts,\n+};\n+use lists::{\n+    itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape, struct_lit_tactic,\n+    write_list,\n+};\n use macros::{rewrite_macro, MacroPosition};\n use overflow;\n use rewrite::{Rewrite, RewriteContext};"}, {"sha": "149769c5df778ab1ada60b6327436f7320bfad41", "filename": "src/types.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -18,16 +18,19 @@ use syntax::symbol::keywords;\n \n use codemap::SpanUtils;\n use config::{IndentStyle, TypeDensity};\n-use expr::{rewrite_assign_rhs, rewrite_pair, rewrite_tuple, rewrite_unary_prefix, PairParts,\n-           ToExpr};\n+use expr::{\n+    rewrite_assign_rhs, rewrite_pair, rewrite_tuple, rewrite_unary_prefix, PairParts, ToExpr,\n+};\n use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, Separator};\n use macros::{rewrite_macro, MacroPosition};\n use overflow;\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n use spanned::Spanned;\n-use utils::{colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n-            last_line_width, mk_sp};\n+use utils::{\n+    colon_spaces, extra_offset, first_line_width, format_abi, format_mutability, last_line_width,\n+    mk_sp,\n+};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum PathContext {"}, {"sha": "78efbf1159dd121de1de2f2fd79fbff5e2b05672", "filename": "src/utils.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -11,8 +11,10 @@\n use std::borrow::Cow;\n \n use rustc_target::spec::abi;\n-use syntax::ast::{self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem,\n-                  NestedMetaItemKind, Path, Visibility, VisibilityKind};\n+use syntax::ast::{\n+    self, Attribute, CrateSugar, MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind, Path,\n+    Visibility, VisibilityKind,\n+};\n use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n use syntax::ptr;\n "}, {"sha": "05f2e7e5cc1b18c6094f8827af06f4015ad65c58", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7415bcea235cab84b775d59dab3b9a0cb68dd01/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=f7415bcea235cab84b775d59dab3b9a0cb68dd01", "patch": "@@ -17,9 +17,11 @@ use attr::*;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{CodeCharKind, CommentCodeSlices, FindUncommented};\n use config::{BraceStyle, Config};\n-use items::{format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n-            rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n-            rewrite_type_alias, FnSig, StaticParts, StructParts};\n+use items::{\n+    format_impl, format_trait, format_trait_alias, is_mod_decl, is_use_item,\n+    rewrite_associated_impl_type, rewrite_associated_type, rewrite_extern_crate,\n+    rewrite_type_alias, FnSig, StaticParts, StructParts,\n+};\n use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};"}]}