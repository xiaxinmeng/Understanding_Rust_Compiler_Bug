{"sha": "72f5ff6903c6c914f6541422d004df3202916012", "node_id": "C_kwDOAAsO6NoAKDcyZjVmZjY5MDNjNmM5MTRmNjU0MTQyMmQwMDRkZjMyMDI5MTYwMTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T16:53:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-06T16:53:37Z"}, "message": "Auto merge of #7359 - joshrotenberg:clippy_guide, r=xFrednet\n\nClippy book\n\nA work in progress Clippy Book using mdbook. See #6011.\n\nThis is currently just a moving around of things:\n\n1. The current README.md split up a bit and put into sections.\n1. A rough outline of Clippy lint categories (currently no content, potentially add a basic introduction for each and some example, see questions below.\n1. The `docs` content repurposed into a top level `Development` section.\n1. The current Roadmap.\n\nSome big questions:\n\n1. is `guide/` the right place? I'm modeling after mdbook itself.\n1. What is the relationship between ALL the Clippy Lints and this guide? It seems like they can coexist. Does that mean the guide should just point to the current side with regard to actual lints, and maybe just include some examples to keep it interesting? Keeping both up to date seems like a maintenance nightmare unless its automated somehow. Or should the current ALL the Clippy lints somehow be incorporated into the book?\n1. Related to the above, where should this guide be published since the `gh-pages` branch is already in use?\n1. This PR doesn't currently change any existing content. Obviously that would make sense assuming the general structure and relocation is an acceptable approach.\n\n---\n\nOpen Tasks for follow up PR:\n- Set up CI/CD\n- Split up Installation and Usage\n- Add more content to Usage (and Installation) chapters\n- Enhance CI chapter with more examples for different CIs\n\n---\n\nchangelog: The first version of the *Clippy Book*\nstaring, *The Clippy Team*, *Bors* and *rustc*", "tree": {"sha": "b1ab39cc1d2aad85498602d7cdd691fafd5473b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1ab39cc1d2aad85498602d7cdd691fafd5473b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72f5ff6903c6c914f6541422d004df3202916012", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72f5ff6903c6c914f6541422d004df3202916012", "html_url": "https://github.com/rust-lang/rust/commit/72f5ff6903c6c914f6541422d004df3202916012", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72f5ff6903c6c914f6541422d004df3202916012/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad70bffa9eac28323964ff7d26380bc2dfeb81d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad70bffa9eac28323964ff7d26380bc2dfeb81d3", "html_url": "https://github.com/rust-lang/rust/commit/ad70bffa9eac28323964ff7d26380bc2dfeb81d3"}, {"sha": "b2660de8ecf3ad341837c8884835beabb5db044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2660de8ecf3ad341837c8884835beabb5db044b", "html_url": "https://github.com/rust-lang/rust/commit/b2660de8ecf3ad341837c8884835beabb5db044b"}], "stats": {"total": 1538, "additions": 1109, "deletions": 429}, "files": [{"sha": "503ae3c50903921c42c63f628073c5d51ae7a949", "filename": ".gitignore", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -39,3 +39,6 @@ helper.txt\n *.iml\n .vscode\n .idea\n+\n+# mdbook generated output\n+/book/book"}, {"sha": "e81e7ceedcb50fe372a273cc5ee1c2b710b28dbe", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 17, "deletions": 151, "changes": 168, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -13,44 +13,44 @@ anything, feel free to ask questions on issues or visit the `#clippy` on [Zulip]\n All contributors are expected to follow the [Rust Code of Conduct].\n \n - [Contributing to Clippy](#contributing-to-clippy)\n-  - [Getting started](#getting-started)\n-    - [High level approach](#high-level-approach)\n-    - [Finding something to fix/improve](#finding-something-to-fiximprove)\n+  - [The Clippy book](#the-clippy-book)\n+  - [High level approach](#high-level-approach)\n+  - [Finding something to fix/improve](#finding-something-to-fiximprove)\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n     - [IntelliJ Rust](#intellij-rust)\n     - [Rust Analyzer](#rust-analyzer)\n   - [How Clippy works](#how-clippy-works)\n-  - [Syncing changes between Clippy and `rust-lang/rust`](#syncing-changes-between-clippy-and-rust-langrust)\n-    - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n-    - [Performing the sync from `rust-lang/rust` to Clippy](#performing-the-sync-from-rust-langrust-to-clippy)\n-    - [Performing the sync from Clippy to `rust-lang/rust`](#performing-the-sync-from-clippy-to-rust-langrust)\n-    - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n   - [Contributions](#contributions)\n \n [Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/clippy\n [Rust Code of Conduct]: https://www.rust-lang.org/policies/code-of-conduct\n \n-## Getting started\n+## The Clippy book\n \n-**Note: If this is your first time contributing to Clippy, you should\n-first read the [Basics docs](doc/basics.md).**\n+If you're new to Clippy and don't know where to start the [Clippy book] includes\n+a developer guide and is a good place to start your journey.\n \n-### High level approach\n+<!-- FIXME: Link to the deployed book, once it is deployed through CI -->\n+[Clippy book]: book/src\n+\n+## High level approach\n \n 1. Find something to fix/improve\n 2. Change code (likely some file in `clippy_lints/src/`)\n-3. Follow the instructions in the [Basics docs](doc/basics.md) to get set up\n+3. Follow the instructions in the [Basics docs](book/src/development/basics.md)\n+   to get set up\n 4. Run `cargo test` in the root directory and wiggle code until it passes\n 5. Open a PR (also can be done after 2. if you run into problems)\n \n-### Finding something to fix/improve\n+## Finding something to fix/improve\n \n-All issues on Clippy are mentored, if you want help simply ask @Manishearth, @flip1995, @phansch\n-or @llogiq directly by mentioning them in the issue or over on [Zulip]. This list may be out of date.\n-All currently active mentors can be found [here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n+All issues on Clippy are mentored, if you want help simply ask someone from the\n+Clippy team directly by mentioning them in the issue or over on [Zulip]. All\n+currently active team members can be found\n+[here](https://github.com/rust-lang/highfive/blob/master/highfive/configs/rust-lang/rust-clippy.json#L3)\n \n Some issues are easier than others. The [`good-first-issue`] label can be used to find the easy\n issues. You can use `@rustbot claim` to assign the issue to yourself.\n@@ -91,20 +91,6 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [let chains]: https://github.com/rust-lang/rust/pull/94927\n [nest-less]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/bit_mask.rs#L133-L159\n \n-## Writing code\n-\n-Have a look at the [docs for writing lints][adding_lints] for more details.\n-\n-If you want to add a new lint or change existing ones apart from bugfixing, it's\n-also a good idea to give the [stability guarantees][rfc_stability] and\n-[lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n-quick read.\n-\n-[adding_lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n-[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n-[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n-[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n-\n ## Getting code-completion for rustc internals to work\n \n ### IntelliJ Rust\n@@ -205,126 +191,6 @@ That's why the `else_if_without_else` example uses the `register_early_pass` fun\n [early_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html\n [late_lint_pass]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.LateLintPass.html\n \n-## Syncing changes between Clippy and [`rust-lang/rust`]\n-\n-Clippy currently gets built with a pinned nightly version.\n-\n-In the `rust-lang/rust` repository, where rustc resides, there's a copy of Clippy\n-that compiler hackers modify from time to time to adapt to changes in the unstable\n-API of the compiler.\n-\n-We need to sync these changes back to this repository periodically, and the changes\n-made to this repository in the meantime also need to be synced to the `rust-lang/rust` repository.\n-\n-To avoid flooding the `rust-lang/rust` PR queue, this two-way sync process is done\n-in a bi-weekly basis if there's no urgent changes. This is done starting on the day of\n-the Rust stable release and then every other week. That way we guarantee that we keep\n-this repo up to date with the latest compiler API, and every feature in Clippy is available\n-for 2 weeks in nightly, before it can get to beta. For reference, the first sync\n-following this cadence was performed the 2020-08-27.\n-\n-This process is described in detail in the following sections. For general information\n-about `subtree`s in the Rust repository see [Rust's `CONTRIBUTING.md`][subtree].\n-\n-### Patching git-subtree to work with big repos\n-\n-Currently, there's a bug in `git-subtree` that prevents it from working properly\n-with the [`rust-lang/rust`] repo. There's an open PR to fix that, but it's stale.\n-Before continuing with the following steps, we need to manually apply that fix to\n-our local copy of `git-subtree`.\n-\n-You can get the patched version of `git-subtree` from [here][gitgitgadget-pr].\n-Put this file under `/usr/lib/git-core` (taking a backup of the previous file)\n-and make sure it has the proper permissions:\n-\n-```bash\n-sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree\n-sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n-sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n-```\n-\n-_Note:_ The first time running `git subtree push` a cache has to be built. This\n-involves going through the complete Clippy history once. For this you have to\n-increase the stack limit though, which you can do with `ulimit -s 60000`.\n-Make sure to run the `ulimit` command from the same session you call git subtree.\n-\n-_Note:_ If you are a Debian user, `dash` is the shell used by default for scripts instead of `sh`.\n-This shell has a hardcoded recursion limit set to 1000. In order to make this process work,\n-you need to force the script to run `bash` instead. You can do this by editing the first\n-line of the `git-subtree` script and changing `sh` to `bash`.\n-\n-### Performing the sync from [`rust-lang/rust`] to Clippy\n-\n-Here is a TL;DR version of the sync process (all of the following commands have\n-to be run inside the `rust` directory):\n-\n-1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n-2. Checkout the commit from the latest available nightly. You can get it using `rustup check`.\n-3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n-    ```bash\n-    # Make sure to change `your-github-name` to your github name in the following command. Also be\n-    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n-    # because changes cannot be fast forwarded\n-    git subtree push -P src/tools/clippy git@github.com:your-github-name/rust-clippy sync-from-rust\n-    ```\n-\n-    _Note:_ This will directly push to the remote repository. You can also push\n-    to your local copy by replacing the remote address with `/path/to/rust-clippy`\n-    directory.\n-\n-    _Note:_ Most of the time you have to create a merge commit in the\n-    `rust-clippy` repo (this has to be done in the Clippy repo, not in the\n-    rust-copy of Clippy):\n-    ```bash\n-    git fetch origin && git fetch upstream\n-    git checkout sync-from-rust\n-    git merge upstream/master\n-    ```\n-4. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n-   accelerate the process ping the `@rust-lang/clippy` team in your PR and/or\n-   ~~annoy~~ ask them in the [Zulip] stream.)\n-\n-### Performing the sync from Clippy to [`rust-lang/rust`]\n-\n-All of the following commands have to be run inside the `rust` directory.\n-\n-1. Make sure Clippy itself is up-to-date by following the steps outlined in the previous\n-section if necessary.\n-\n-2. Sync the `rust-lang/rust-clippy` master to the rust-copy of Clippy:\n-    ```bash\n-    git checkout -b sync-from-clippy\n-    git subtree pull -P src/tools/clippy https://github.com/rust-lang/rust-clippy master\n-    ```\n-3. Open a PR to [`rust-lang/rust`]\n-\n-### Defining remotes\n-\n-You may want to define remotes, so you don't have to type out the remote\n-addresses on every sync. You can do this with the following commands (these\n-commands still have to be run inside the `rust` directory):\n-\n-```bash\n-# Set clippy-upstream remote for pulls\n-$ git remote add clippy-upstream https://github.com/rust-lang/rust-clippy\n-# Make sure to not push to the upstream repo\n-$ git remote set-url --push clippy-upstream DISABLED\n-# Set clippy-origin remote to your fork for pushes\n-$ git remote add clippy-origin git@github.com:your-github-name/rust-clippy\n-# Set a local remote\n-$ git remote add clippy-local /path/to/rust-clippy\n-```\n-\n-You can then sync with the remote names from above, e.g.:\n-\n-```bash\n-$ git subtree push -P src/tools/clippy clippy-local sync-from-rust\n-```\n-\n-[gitgitgadget-pr]: https://github.com/gitgitgadget/git/pull/493\n-[subtree]: https://rustc-dev-guide.rust-lang.org/contributing.html#external-dependencies-subtree\n-[`rust-lang/rust`]: https://github.com/rust-lang/rust\n-\n ## Issue and PR triage\n \n Clippy is following the [Rust triage procedure][triage] for issues and pull"}, {"sha": "b652194d0d13b25ec38c99d56460923b5ab7b02f", "filename": "book/README.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,4 @@\n+# Clippy Book\n+\n+This is the source for the Clippy Book. See the\n+[book](src/infrastructure/book.md) for more information."}, {"sha": "93b6641f7e1e743c3705298c6a1593ab2719cbec", "filename": "book/book.toml", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fbook.toml", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fbook.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fbook.toml?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,28 @@\n+[book]\n+authors = [\"The Rust Clippy Developers\"]\n+language = \"en\"\n+multilingual = false\n+src = \"src\"\n+title = \"Clippy Documentation\"\n+\n+[rust]\n+edition = \"2018\"\n+\n+[output.html]\n+edit-url-template = \"https://github.com/rust-lang/rust-clippy/edit/master/book/{path}\"\n+git-repository-url = \"https://github.com/rust-lang/rust-clippy/tree/master/book\"\n+mathjax-support = true\n+site-url = \"/rust-clippy/\"\n+\n+[output.html.playground]\n+editable = true\n+line-numbers = true\n+\n+[output.html.search]\n+boost-hierarchy = 2\n+boost-paragraph = 1\n+boost-title = 2\n+expand = true\n+heading-split-level = 2\n+limit-results = 20\n+use-boolean-and = true"}, {"sha": "de1f70d7e9640080e1bc4873e48f94ce8c409feb", "filename": "book/src/README.md", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,34 @@\n+# Clippy\n+\n+[![Clippy Test](https://github.com/rust-lang/rust-clippy/workflows/Clippy%20Test/badge.svg?branch=auto&event=push)](https://github.com/rust-lang/rust-clippy/actions?query=workflow%3A%22Clippy+Test%22+event%3Apush+branch%3Aauto)\n+[![License: MIT OR Apache-2.0](https://img.shields.io/crates/l/clippy.svg)](#license)\n+\n+A collection of lints to catch common mistakes and improve your\n+[Rust](https://github.com/rust-lang/rust) code.\n+\n+[There are over 500 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+\n+Lints are divided into categories, each with a default [lint\n+level](https://doc.rust-lang.org/rustc/lints/levels.html). You can choose how\n+much Clippy is supposed to ~~annoy~~ help you by changing the lint level by\n+category.\n+\n+| Category              | Description                                                                         | Default level |\n+| --------------------- | ----------------------------------------------------------------------------------- | ------------- |\n+| `clippy::all`         | all lints that are on by default (correctness, suspicious, style, complexity, perf) | **warn/deny** |\n+| `clippy::correctness` | code that is outright wrong or useless                                              | **deny**      |\n+| `clippy::suspicious`  | code that is most likely wrong or useless                                           | **warn**      |\n+| `clippy::complexity`  | code that does something simple but in a complex way                                | **warn**      |\n+| `clippy::perf`        | code that can be written to run faster                                              | **warn**      |\n+| `clippy::style`       | code that should be written in a more idiomatic way                                 | **warn**      |\n+| `clippy::pedantic`    | lints which are rather strict or might have false positives                         | allow         |\n+| `clippy::nursery`     | new lints that are still under development                                          | allow         |\n+| `clippy::cargo`       | lints for the cargo manifest                                                        | allow         |                                   | allow         |\n+\n+More to come, please [file an\n+issue](https://github.com/rust-lang/rust-clippy/issues) if you have ideas!\n+\n+The [lint list](https://rust-lang.github.io/rust-clippy/master/index.html) also\n+contains \"restriction lints\", which are for things which are usually not\n+considered \"bad\", but may be useful to turn on in specific cases. These should\n+be used very selectively, if at all."}, {"sha": "0b945faf9b78effe2d1dbd0fc5d6a269c87c50a2", "filename": "book/src/SUMMARY.md", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2FSUMMARY.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,23 @@\n+# Summary\n+\n+[Introduction](README.md)\n+\n+- [Installation](installation.md)\n+- [Usage](usage.md)\n+- [Configuration](configuration.md)\n+- [Clippy's Lints](lints.md)\n+- [Continuous Integration](continuous_integration/README.md)\n+    - [GitHub Actions](continuous_integration/github_actions.md)\n+    - [Travis CI](continuous_integration/travis.md)\n+- [Development](development/README.md)\n+    - [Basics](development/basics.md)\n+    - [Adding Lints](development/adding_lints.md)\n+    - [Common Tools](development/common_tools_writing_lints.md)\n+    - [Infrastructure](development/infrastructure/README.md)\n+        - [Syncing changes between Clippy and rust-lang/rust](development/infrastructure/sync.md)\n+        - [Backporting Changes](development/infrastructure/backport.md)\n+        - [Updating the Changelog](development/infrastructure/changelog_update.md)\n+        - [Release a New Version](development/infrastructure/release.md)\n+        - [The Clippy Book](development/infrastructure/book.md)\n+    - [Proposals](development/proposals/README.md)\n+        - [Roadmap 2021](development/proposals/roadmap-2021.md)"}, {"sha": "6e295ac3181dd99e7c3e40324eafa69069076185", "filename": "book/src/configuration.md", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fconfiguration.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fconfiguration.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fconfiguration.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,92 @@\n+# Configuring Clippy\n+\n+> **Note:** The configuration file is unstable and may be deprecated in the future.\n+\n+Some lints can be configured in a TOML file named `clippy.toml` or `.clippy.toml`. It contains a\n+basic `variable = value` mapping eg.\n+\n+```toml\n+avoid-breaking-exported-api = false\n+blacklisted-names = [\"toto\", \"tata\", \"titi\"]\n+cognitive-complexity-threshold = 30\n+```\n+\n+See the [list of lints](https://rust-lang.github.io/rust-clippy/master/index.html) for more information about which\n+lints can be configured and the meaning of the variables.\n+\n+To deactivate the \"for further information visit *lint-link*\" message you can define the `CLIPPY_DISABLE_DOCS_LINKS`\n+environment variable.\n+\n+### Allowing/denying lints\n+\n+You can add options to your code to `allow`/`warn`/`deny` Clippy lints:\n+\n+* the whole set of `Warn` lints using the `clippy` lint group (`#![deny(clippy::all)]`)\n+\n+* all lints using both the `clippy` and `clippy::pedantic` lint groups (`#![deny(clippy::all)]`,\n+  `#![deny(clippy::pedantic)]`). Note that `clippy::pedantic` contains some very aggressive lints prone to false\n+  positives.\n+\n+* only some lints (`#![deny(clippy::single_match, clippy::box_vec)]`, etc.)\n+\n+* `allow`/`warn`/`deny` can be limited to a single function or module using `#[allow(...)]`, etc.\n+\n+Note: `allow` means to suppress the lint for your code. With `warn` the lint will only emit a warning, while with `deny`\n+the lint will emit an error, when triggering for your code. An error causes clippy to exit with an error code, so is\n+useful in scripts like CI/CD.\n+\n+If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra\n+flags to Clippy during the run:\n+\n+To allow `lint_name`, run\n+\n+```terminal\n+cargo clippy -- -A clippy::lint_name\n+```\n+\n+And to warn on `lint_name`, run\n+\n+```terminal\n+cargo clippy -- -W clippy::lint_name\n+```\n+\n+This also works with lint groups. For example you can run Clippy with warnings for all lints enabled:\n+\n+```terminal\n+cargo clippy -- -W clippy::pedantic\n+```\n+\n+If you care only about a single lint, you can allow all others and then explicitly warn on the lint(s) you are\n+interested in:\n+\n+```terminal\n+cargo clippy -- -A clippy::all -W clippy::useless_format -W clippy::...\n+```\n+\n+### Specifying the minimum supported Rust version\n+\n+Projects that intend to support old versions of Rust can disable lints pertaining to newer features by specifying the\n+minimum supported Rust version (MSRV) in the clippy configuration file.\n+\n+```toml\n+msrv = \"1.30.0\"\n+```\n+\n+The MSRV can also be specified as an inner attribute, like below.\n+\n+```rust\n+#![feature(custom_inner_attributes)]\n+#![clippy::msrv = \"1.30.0\"]\n+\n+fn main() {\n+    ...\n+}\n+```\n+\n+You can also omit the patch version when specifying the MSRV, so `msrv = 1.30`\n+is equivalent to `msrv = 1.30.0`.\n+\n+Note: `custom_inner_attributes` is an unstable feature so it has to be enabled explicitly.\n+\n+Lints that recognize this configuration option can be\n+found [here](https://rust-lang.github.io/rust-clippy/master/index.html#msrv)"}, {"sha": "e5c3673bde451f9c7b792c70c9f2b47227ce6282", "filename": "book/src/continuous_integration/README.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,18 @@\n+# Continuous Integration\n+\n+It is recommended to run Clippy on CI with `-Dwarnings`, so that Clippy lints\n+prevent CI from passing. To enforce errors on warnings on all `cargo` commands\n+not just `cargo clippy`, you can set the env var `RUSTFLAGS=\"-Dwarnings\"`.\n+\n+We recommend to use Clippy from the same toolchain, that you use for compiling\n+your crate for maximum compatibility. E.g. if your crate is compiled with the\n+`stable` toolchain, you should also use `stable` Clippy.\n+\n+> _Note:_ New Clippy lints are first added to the `nightly` toolchain. If you\n+> want to help with improving Clippy and have CI resources left, please consider\n+> adding a `nightly` Clippy check to your CI and report problems like false\n+> positives back to us. With that we can fix bugs early, before they can get to\n+> stable.\n+\n+This chapter will give an overview on how to use Clippy on different popular CI\n+providers."}, {"sha": "42a43ef1380166baa78ede87652b6ba4292f239f", "filename": "book/src/continuous_integration/github_actions.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2Fgithub_actions.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,21 @@\n+# GitHub Actions\n+\n+On the GitHub hosted runners, Clippy from the latest stable Rust version comes\n+pre-installed. So all you have to do is to run `cargo clippy`.\n+\n+```yml\n+on: push\n+name: Clippy check\n+\n+# Make sure CI fails on all warnings, including Clippy lints\n+env:\n+  RUSTFLAGS: \"-Dwarnings\"\n+\n+jobs:\n+  clippy_check:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: actions/checkout@v1\n+      - name: Run Clippy\n+        run: cargo clippy --all-targets --all-features\n+```"}, {"sha": "85b9ed53daeafde3135c07424c10982449178b84", "filename": "book/src/continuous_integration/travis.md", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fcontinuous_integration%2Ftravis.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,20 @@\n+# Travis CI\n+\n+You can add Clippy to Travis CI in the same way you use it locally:\n+\n+```yml\n+language: rust\n+rust:\n+  - stable\n+  - beta\n+before_script:\n+  - rustup component add clippy\n+script:\n+  - cargo clippy\n+  # if you want the build job to fail when encountering warnings, use\n+  - cargo clippy -- -D warnings\n+  # in order to also check tests and non-default crate features, use\n+  - cargo clippy --all-targets --all-features -- -D warnings\n+  - cargo test\n+  # etc.\n+```"}, {"sha": "5cf7201cffad7411104cac766896d7eff5290cb4", "filename": "book/src/development/README.md", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,43 @@\n+# Clippy Development\n+\n+Hello fellow Rustacean! If you made it here, you're probably interested in\n+making Clippy better by contributing to it. In that case, welcome to the\n+project!\n+\n+> _Note:_ If you're just interested in using Clippy, there's nothing to see from\n+> this point onward and you should return to one of the earlier chapters.\n+\n+## Getting started\n+\n+If this is your first time contributing to Clippy, you should first read the\n+[Basics docs](basics.md). This will explain the basics on how to get the source\n+code and how to compile and test the code.\n+\n+## Writing code\n+\n+If you have done the basic setup, it's time to start hacking.\n+\n+The [Adding lints](adding_lints.md) chapter is a walk through on how to add a\n+new lint to Clippy. This is also interesting if you just want to fix a lint,\n+because it also covers how to test lints and gives an overview of the bigger\n+picture.\n+\n+If you want to add a new lint or change existing ones apart from bugfixing, it's\n+also a good idea to give the [stability guarantees][rfc_stability] and\n+[lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n+quick read. The lint categories are also described [earlier in this\n+book](../lints.md).\n+\n+> _Note:_ Some higher level things about contributing to Clippy are still\n+> covered in the [`CONTRIBUTING.md`] document. Some of those will be moved to\n+> the book over time, like:\n+> - Finding something to fix\n+> - IDE setup\n+> - High level overview on how Clippy works\n+> - Triage procedure\n+> - Bors and Homu\n+\n+[clippy_rfc]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md\n+[rfc_stability]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#stability-guarantees\n+[rfc_lint_cats]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories\n+[`CONTRIBUTING.md`]: https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md"}, {"sha": "3da07fcb9686363fe3948d265202e32f1c9b930c", "filename": "book/src/development/adding_lints.md", "status": "renamed", "additions": 170, "deletions": 156, "changes": 326, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fadding_lints.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -45,9 +45,9 @@ take a look at our [lint naming guidelines][lint_naming]. To get started on this\n lint you can run `cargo dev new_lint --name=foo_functions --pass=early\n --category=pedantic` (category will default to nursery if not provided). This\n command will create two files: `tests/ui/foo_functions.rs` and\n-`clippy_lints/src/foo_functions.rs`, as well as\n-[registering the lint](#lint-registration). For cargo lints, two project\n-hierarchies (fail/pass) will be created by default under `tests/ui-cargo`.\n+`clippy_lints/src/foo_functions.rs`, as well as [registering the\n+lint](#lint-registration). For cargo lints, two project hierarchies (fail/pass)\n+will be created by default under `tests/ui-cargo`.\n \n Next, we'll open up these files and add our lint!\n \n@@ -58,8 +58,8 @@ Let's write some tests first that we can execute while we iterate on our lint.\n Clippy uses UI tests for testing. UI tests check that the output of Clippy is\n exactly as expected. Each test is just a plain Rust file that contains the code\n we want to check. The output of Clippy is compared against a `.stderr` file.\n-Note that you don't have to create this file yourself, we'll get to\n-generating the `.stderr` files further down.\n+Note that you don't have to create this file yourself, we'll get to generating\n+the `.stderr` files further down.\n \n We start by opening the test file created at `tests/ui/foo_functions.rs`.\n \n@@ -96,61 +96,57 @@ fn main() {\n }\n ```\n \n-Now we can run the test with `TESTNAME=foo_functions cargo uitest`,\n-currently this test is meaningless though.\n+Now we can run the test with `TESTNAME=foo_functions cargo uitest`, currently\n+this test is meaningless though.\n \n-While we are working on implementing our lint, we can keep running the UI\n-test. That allows us to check if the output is turning into what we want.\n+While we are working on implementing our lint, we can keep running the UI test.\n+That allows us to check if the output is turning into what we want.\n \n-Once we are satisfied with the output, we need to run\n-`cargo dev bless` to update the `.stderr` file for our lint.\n-Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n-every time before running `cargo dev bless`.\n-Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n-our lint, we need to commit the generated `.stderr` files, too. In general, you\n-should only commit files changed by `cargo dev bless` for the\n+Once we are satisfied with the output, we need to run `cargo dev bless` to\n+update the `.stderr` file for our lint. Please note that, we should run\n+`TESTNAME=foo_functions cargo uitest` every time before running `cargo dev\n+bless`. Running `TESTNAME=foo_functions cargo uitest` should pass then. When we\n+commit our lint, we need to commit the generated `.stderr` files, too. In\n+general, you should only commit files changed by `cargo dev bless` for the\n specific lint you are creating/editing. Note that if the generated files are\n empty, they should be removed.\n \n-Note that you can run multiple test files by specifying a comma separated list:\n-`TESTNAME=foo_functions,test2,test3`.\n+> _Note:_ you can run multiple test files by specifying a comma separated list:\n+> `TESTNAME=foo_functions,test2,test3`.\n \n ### Cargo lints\n \n-For cargo lints, the process of testing differs in that we are interested in\n-the `Cargo.toml` manifest file. We also need a minimal crate associated\n-with that manifest.\n+For cargo lints, the process of testing differs in that we are interested in the\n+`Cargo.toml` manifest file. We also need a minimal crate associated with that\n+manifest.\n \n-If our new lint is named e.g. `foo_categories`, after running `cargo dev new_lint`\n-we will find by default two new crates, each with its manifest file:\n+If our new lint is named e.g. `foo_categories`, after running `cargo dev\n+new_lint` we will find by default two new crates, each with its manifest file:\n \n-* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the new lint to raise an error.\n-* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger the lint.\n+* `tests/ui-cargo/foo_categories/fail/Cargo.toml`: this file should cause the\n+  new lint to raise an error.\n+* `tests/ui-cargo/foo_categories/pass/Cargo.toml`: this file should not trigger\n+  the lint.\n \n-If you need more cases, you can copy one of those crates (under `foo_categories`) and rename it.\n+If you need more cases, you can copy one of those crates (under\n+`foo_categories`) and rename it.\n \n-The process of generating the `.stderr` file is the same, and prepending the `TESTNAME`\n-variable to `cargo uitest` works too.\n+The process of generating the `.stderr` file is the same, and prepending the\n+`TESTNAME` variable to `cargo uitest` works too.\n \n ## Rustfix tests\n \n-If the lint you are working on is making use of structured suggestions, the\n-test file should include a `// run-rustfix` comment at the top. This will\n+If the lint you are working on is making use of structured suggestions, the test\n+file should include a `// run-rustfix` comment at the top. This will\n additionally run [rustfix] for that test. Rustfix will apply the suggestions\n-from the lint to the code of the test file and compare that to the contents of\n-a `.fixed` file.\n+from the lint to the code of the test file and compare that to the contents of a\n+`.fixed` file.\n \n-Use `cargo dev bless` to automatically generate the\n-`.fixed` file after running the tests.\n+Use `cargo dev bless` to automatically generate the `.fixed` file after running\n+the tests.\n \n [rustfix]: https://github.com/rust-lang/rustfix\n \n-## Edition 2018 tests\n-\n-Some features require the 2018 edition to work (e.g. `async_await`), but\n-compile-test tests run on the 2015 edition by default. To change this behavior\n-add `// edition:2018` at the top of the test file (note that it's space-sensitive).\n-\n ## Testing manually\n \n Manually testing against an example file can be useful if you have added some\n@@ -166,9 +162,9 @@ implementing our lint now.\n \n ## Lint declaration\n \n-Let's start by opening the new file created in the `clippy_lints` crate\n-at `clippy_lints/src/foo_functions.rs`. That's the crate where all the\n-lint code is. This file has already imported some initial things we will need:\n+Let's start by opening the new file created in the `clippy_lints` crate at\n+`clippy_lints/src/foo_functions.rs`. That's the crate where all the lint code\n+is. This file has already imported some initial things we will need:\n \n ```rust\n use rustc_lint::{EarlyLintPass, EarlyContext};\n@@ -178,7 +174,8 @@ use rustc_ast::ast::*;\n \n The next step is to update the lint declaration. Lints are declared using the\n [`declare_clippy_lint!`][declare_clippy_lint] macro, and we just need to update\n-the auto-generated lint declaration to have a real description, something like this:\n+the auto-generated lint declaration to have a real description, something like\n+this:\n \n ```rust\n declare_clippy_lint! {\n@@ -198,24 +195,25 @@ declare_clippy_lint! {\n ```\n \n * The section of lines prefixed with `///` constitutes the lint documentation\n-  section. This is the default documentation style and will be displayed\n-  [like this][example_lint_page]. To render and open this documentation locally\n-  in a browser, run `cargo dev serve`.\n-* The `#[clippy::version]` attribute will be rendered as part of the lint documentation.\n-  The value should be set to the current Rust version that the lint is developed in,\n-  it can be retrieved by running `rustc -vV` in the rust-clippy directory. The version\n-  is listed under *release*. (Use the version without the `-nightly`) suffix.\n-* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the\n-  [lint naming guidelines][lint_naming] here when naming your lint.\n-  In short, the name should state the thing that is being checked for and\n-  read well when used with `allow`/`warn`/`deny`.\n-* `pedantic` sets the lint level to `Allow`.\n-  The exact mapping can be found [here][category_level_mapping]\n+  section. This is the default documentation style and will be displayed [like\n+  this][example_lint_page]. To render and open this documentation locally in a\n+  browser, run `cargo dev serve`.\n+* The `#[clippy::version]` attribute will be rendered as part of the lint\n+  documentation. The value should be set to the current Rust version that the\n+  lint is developed in, it can be retrieved by running `rustc -vV` in the\n+  rust-clippy directory. The version is listed under *release*. (Use the version\n+  without the `-nightly`) suffix.\n+* `FOO_FUNCTIONS` is the name of our lint. Be sure to follow the [lint naming\n+  guidelines][lint_naming] here when naming your lint. In short, the name should\n+  state the thing that is being checked for and read well when used with\n+  `allow`/`warn`/`deny`.\n+* `pedantic` sets the lint level to `Allow`. The exact mapping can be found\n+  [here][category_level_mapping]\n * The last part should be a text that explains what exactly is wrong with the\n   code\n \n-The rest of this file contains an empty implementation for our lint pass,\n-which in this case is `EarlyLintPass` and should look like this:\n+The rest of this file contains an empty implementation for our lint pass, which\n+in this case is `EarlyLintPass` and should look like this:\n \n ```rust\n // clippy_lints/src/foo_functions.rs\n@@ -324,9 +322,9 @@ impl EarlyLintPass for FooFunctions {\n Running our UI test should now produce output that contains the lint message.\n \n According to [the rustc-dev-guide], the text should be matter of fact and avoid\n-capitalization and periods, unless multiple sentences are needed.\n-When code or an identifier must appear in a message or label, it should be\n-surrounded with single grave accents \\`.\n+capitalization and periods, unless multiple sentences are needed. When code or\n+an identifier must appear in a message or label, it should be surrounded with\n+single grave accents \\`.\n \n [check_fn]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/trait.EarlyLintPass.html#method.check_fn\n [diagnostics]: https://github.com/rust-lang/rust-clippy/blob/master/clippy_utils/src/diagnostics.rs\n@@ -382,8 +380,8 @@ fn is_foo_fn(fn_kind: FnKind<'_>) -> bool {\n ```\n \n Now we should also run the full test suite with `cargo test`. At this point\n-running `cargo test` should produce the expected output. Remember to run\n-`cargo dev bless` to update the `.stderr` file.\n+running `cargo test` should produce the expected output. Remember to run `cargo\n+dev bless` to update the `.stderr` file.\n \n `cargo test` (as opposed to `cargo uitest`) will also ensure that our lint\n implementation is not violating any Clippy lints itself.\n@@ -397,13 +395,16 @@ pass.\n \n ## Specifying the lint's minimum supported Rust version (MSRV)\n \n-Sometimes a lint makes suggestions that require a certain version of Rust. For example, the `manual_strip` lint suggests\n-using `str::strip_prefix` and `str::strip_suffix` which is only available after Rust 1.45. In such cases, you need to\n-ensure that the MSRV configured for the project is >= the MSRV of the required Rust feature. If multiple features are\n-required, just use the one with a lower MSRV.\n+Sometimes a lint makes suggestions that require a certain version of Rust. For\n+example, the `manual_strip` lint suggests using `str::strip_prefix` and\n+`str::strip_suffix` which is only available after Rust 1.45. In such cases, you\n+need to ensure that the MSRV configured for the project is >= the MSRV of the\n+required Rust feature. If multiple features are required, just use the one with\n+a lower MSRV.\n \n-First, add an MSRV alias for the required feature in [`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be\n-accessed later as `msrvs::STR_STRIP_PREFIX`, for example.\n+First, add an MSRV alias for the required feature in\n+[`clippy_utils::msrvs`](/clippy_utils/src/msrvs.rs). This can be accessed later\n+as `msrvs::STR_STRIP_PREFIX`, for example.\n \n ```rust\n msrv_aliases! {\n@@ -412,8 +413,9 @@ msrv_aliases! {\n }\n ```\n \n-In order to access the project-configured MSRV, you need to have an `msrv` field in the LintPass struct, and a\n-constructor to initialize the field. The `msrv` value is passed to the constructor in `clippy_lints/lib.rs`.\n+In order to access the project-configured MSRV, you need to have an `msrv` field\n+in the LintPass struct, and a constructor to initialize the field. The `msrv`\n+value is passed to the constructor in `clippy_lints/lib.rs`.\n \n ```rust\n pub struct ManualStrip {\n@@ -472,11 +474,10 @@ If you have trouble implementing your lint, there is also the internal `author`\n lint to generate Clippy code that detects the offending pattern. It does not\n work for all of the Rust syntax, but can give a good starting point.\n \n-The quickest way to use it, is the\n-[Rust playground: play.rust-lang.org][author_example].\n-Put the code you want to lint into the editor and add the `#[clippy::author]`\n-attribute above the item. Then run Clippy via `Tools -> Clippy` and you should\n-see the generated code in the output below.\n+The quickest way to use it, is the [Rust playground:\n+play.rust-lang.org][author_example]. Put the code you want to lint into the\n+editor and add the `#[clippy::author]` attribute above the item. Then run Clippy\n+via `Tools -> Clippy` and you should see the generated code in the output below.\n \n [Here][author_example] is an example on the playground.\n \n@@ -487,13 +488,15 @@ you are implementing your lint.\n \n ## Print HIR lint\n \n-To implement a lint, it's helpful to first understand the internal representation\n-that rustc uses. Clippy has the `#[clippy::dump]` attribute that prints the\n-[_High-Level Intermediate Representation (HIR)_] of the item, statement, or \n-expression that the attribute is attached to. To attach the attribute to expressions\n-you often need to enable `#![feature(stmt_expr_attributes)]`.\n+To implement a lint, it's helpful to first understand the internal\n+representation that rustc uses. Clippy has the `#[clippy::dump]` attribute that\n+prints the [_High-Level Intermediate Representation (HIR)_] of the item,\n+statement, or expression that the attribute is attached to. To attach the\n+attribute to expressions you often need to enable\n+`#![feature(stmt_expr_attributes)]`.\n \n-[Here][print_hir_example] you can find an example, just select _Tools_ and run _Clippy_.\n+[Here][print_hir_example] you can find an example, just select _Tools_ and run\n+_Clippy_.\n \n [_High-Level Intermediate Representation (HIR)_]: https://rustc-dev-guide.rust-lang.org/hir.html\n [print_hir_example]: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2021&gist=daf14db3a7f39ca467cd1b86c34b9afb\n@@ -518,7 +521,7 @@ declare_clippy_lint! {\n     /// ```rust,ignore\n     /// // A short example of code that triggers the lint\n     /// ```\n-    /// \n+    ///\n     /// Use instead:\n     /// ```rust,ignore\n     /// // A short example of improved code that doesn't trigger the lint\n@@ -537,9 +540,9 @@ list][lint_list].\n \n ## Running rustfmt\n \n-[Rustfmt] is a tool for formatting Rust code according to style guidelines.\n-Your code has to be formatted by `rustfmt` before a PR can be merged.\n-Clippy uses nightly `rustfmt` in the CI.\n+[Rustfmt] is a tool for formatting Rust code according to style guidelines. Your\n+code has to be formatted by `rustfmt` before a PR can be merged. Clippy uses\n+nightly `rustfmt` in the CI.\n \n It can be installed via `rustup`:\n \n@@ -575,94 +578,105 @@ Before submitting your PR make sure you followed all of the basic requirements:\n \n ## Adding configuration to a lint\n \n-Clippy supports the configuration of lints values using a `clippy.toml` file in the workspace\n-directory. Adding a configuration to a lint can be useful for thresholds or to constrain some\n-behavior that can be seen as a false positive for some users. Adding a configuration is done\n-in the following steps:\n+Clippy supports the configuration of lints values using a `clippy.toml` file in\n+the workspace directory. Adding a configuration to a lint can be useful for\n+thresholds or to constrain some behavior that can be seen as a false positive\n+for some users. Adding a configuration is done in the following steps:\n \n-1. Adding a new configuration entry to [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs)\n-    like this:\n-    ```rust\n-    /// Lint: LINT_NAME.\n-    ///\n-    /// <The configuration field doc comment>\n-    (configuration_ident: Type = DefaultValue),\n-    ```\n-    The doc comment is automatically added to the documentation of the listed lints. The default\n-    value will be formatted using the `Debug` implementation of the type.\n-2. Adding the configuration value to the lint impl struct:\n-    1. This first requires the definition of a lint impl struct. Lint impl structs are usually\n-        generated with the `declare_lint_pass!` macro. This struct needs to be defined manually\n-        to add some kind of metadata to it:\n-        ```rust\n-        // Generated struct definition\n-        declare_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-\n-        // New manual definition struct\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {}\n-\n-        impl_lint_pass!(StructName => [\n-            LINT_NAME\n-        ]);\n-        ```\n-\n-    2. Next add the configuration value and a corresponding creation method like this:\n-        ```rust\n-        #[derive(Copy, Clone)]\n-        pub struct StructName {\n-            configuration_ident: Type,\n-        }\n+1. Adding a new configuration entry to\n+   [clippy_lints::utils::conf](/clippy_lints/src/utils/conf.rs) like this:\n \n-        // ...\n+   ```rust\n+   /// Lint: LINT_NAME.\n+   ///\n+   /// <The configuration field doc comment>\n+   (configuration_ident: Type = DefaultValue),\n+   ```\n \n-        impl StructName {\n-            pub fn new(configuration_ident: Type) -> Self {\n-                Self {\n-                    configuration_ident,\n-                }\n-            }\n-        }\n-        ```\n+   The doc comment is automatically added to the documentation of the listed\n+   lints. The default value will be formatted using the `Debug` implementation\n+   of the type.\n+2. Adding the configuration value to the lint impl struct:\n+    1. This first requires the definition of a lint impl struct. Lint impl\n+       structs are usually generated with the `declare_lint_pass!` macro. This\n+       struct needs to be defined manually to add some kind of metadata to it:\n+       ```rust\n+       // Generated struct definition\n+       declare_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+\n+       // New manual definition struct\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {}\n+\n+       impl_lint_pass!(StructName => [\n+           LINT_NAME\n+       ]);\n+       ```\n+\n+    2. Next add the configuration value and a corresponding creation method like\n+       this:\n+       ```rust\n+       #[derive(Copy, Clone)]\n+       pub struct StructName {\n+           configuration_ident: Type,\n+       }\n+\n+       // ...\n+\n+       impl StructName {\n+           pub fn new(configuration_ident: Type) -> Self {\n+               Self {\n+                   configuration_ident,\n+               }\n+           }\n+       }\n+       ```\n 3. Passing the configuration value to the lint impl struct:\n \n-    First find the struct construction in the [clippy_lints lib file](/clippy_lints/src/lib.rs).\n-    The configuration value is now cloned or copied into a local value that is then passed to the\n-    impl struct like this:\n-    ```rust\n-    // Default generated registration:\n-    store.register_*_pass(|| box module::StructName);\n+   First find the struct construction in the [clippy_lints lib\n+   file](/clippy_lints/src/lib.rs). The configuration value is now cloned or\n+   copied into a local value that is then passed to the impl struct like this:\n+\n+   ```rust\n+   // Default generated registration:\n+   store.register_*_pass(|| box module::StructName);\n \n-    // New registration with configuration value\n-    let configuration_ident = conf.configuration_ident.clone();\n-    store.register_*_pass(move || box module::StructName::new(configuration_ident));\n-    ```\n+   // New registration with configuration value\n+   let configuration_ident = conf.configuration_ident.clone();\n+   store.register_*_pass(move || box module::StructName::new(configuration_ident));\n+   ```\n \n-    Congratulations the work is almost done. The configuration value can now be accessed\n-    in the linting code via `self.configuration_ident`.\n+   Congratulations the work is almost done. The configuration value can now be\n+   accessed in the linting code via `self.configuration_ident`.\n \n 4. Adding tests:\n-    1. The default configured value can be tested like any normal lint in [`tests/ui`](/tests/ui).\n-    2. The configuration itself will be tested separately in [`tests/ui-toml`](/tests/ui-toml).\n-        Simply add a new subfolder with a fitting name. This folder contains a `clippy.toml` file\n-        with the configuration value and a rust file that should be linted by Clippy. The test can\n-        otherwise be written as usual.\n+    1. The default configured value can be tested like any normal lint in\n+       [`tests/ui`](/tests/ui).\n+    2. The configuration itself will be tested separately in\n+       [`tests/ui-toml`](/tests/ui-toml). Simply add a new subfolder with a\n+       fitting name. This folder contains a `clippy.toml` file with the\n+       configuration value and a rust file that should be linted by Clippy. The\n+       test can otherwise be written as usual.\n \n ## Cheat Sheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n-  is already in here ([`is_type_diagnostic_item`], [`implements_trait`], [`snippet`], etc)\n+  is already in here ([`is_type_diagnostic_item`], [`implements_trait`],\n+  [`snippet`], etc)\n * [Clippy diagnostics][diagnostics]\n * [Let chains][let-chains]\n-* [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n+* [`from_expansion`][from_expansion] and\n+  [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n-* [Common tools for writing lints](common_tools_writing_lints.md) helps with common operations\n-* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler concepts\n+* [Common tools for writing lints](common_tools_writing_lints.md) helps with\n+  common operations\n+* [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler\n+  concepts\n * [The nightly rustc docs][nightly_docs] which has been linked to throughout\n   this guide\n ", "previous_filename": "doc/adding_lints.md"}, {"sha": "78c429ea0132247f555723fb03bf1452bcd3a05c", "filename": "book/src/development/basics.md", "status": "renamed", "additions": 43, "deletions": 29, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fbasics.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fbasics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fbasics.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -1,8 +1,8 @@\n # Basics for hacking on Clippy\n \n This document explains the basics for hacking on Clippy. Besides others, this\n-includes how to build and test Clippy. For a more in depth description on\n-the codebase take a look at [Adding Lints] or [Common Tools].\n+includes how to build and test Clippy. For a more in depth description on the\n+codebase take a look at [Adding Lints] or [Common Tools].\n \n [Adding Lints]: https://github.com/rust-lang/rust-clippy/blob/master/doc/adding_lints.md\n [Common Tools]: https://github.com/rust-lang/rust-clippy/blob/master/doc/common_tools_writing_lints.md\n@@ -62,8 +62,8 @@ TESTNAME=\"test_\" cargo uitest\n cargo test --test dogfood\n ```\n \n-If the output of a [UI test] differs from the expected output, you can update the\n-reference file with:\n+If the output of a [UI test] differs from the expected output, you can update\n+the reference file with:\n \n ```bash\n cargo dev bless\n@@ -72,8 +72,8 @@ cargo dev bless\n For example, this is necessary, if you fix a typo in an error message of a lint\n or if you modify a test file to add a test case.\n \n-_Note:_ This command may update more files than you intended. In that case only\n-commit the files you wanted to update.\n+> _Note:_ This command may update more files than you intended. In that case\n+> only commit the files you wanted to update.\n \n [UI test]: https://rustc-dev-guide.rust-lang.org/tests/adding.html#guide-to-the-ui-tests\n \n@@ -96,22 +96,26 @@ cargo dev setup git-hook\n # (experimental) Setup Clippy to work with IntelliJ-Rust\n cargo dev setup intellij\n ```\n-More about intellij command usage and reasons [here](../CONTRIBUTING.md#intellij-rust)\n+\n+More about intellij command usage and reasons\n+[here](../CONTRIBUTING.md#intellij-rust)\n \n ## lintcheck\n-`cargo lintcheck` will build and run clippy on a fixed set of crates and generate a log of the results.  \n-You can `git diff` the updated log against its previous version and\n-see what impact your lint made on a small set of crates.  \n-If you add a new lint, please audit the resulting warnings and make sure\n-there are no false positives and that the suggestions are valid.\n+\n+`cargo lintcheck` will build and run clippy on a fixed set of crates and\n+generate a log of the results.  You can `git diff` the updated log against its\n+previous version and see what impact your lint made on a small set of crates.\n+If you add a new lint, please audit the resulting warnings and make sure there\n+are no false positives and that the suggestions are valid.\n \n Refer to the tools [README] for more details.\n \n [README]: https://github.com/rust-lang/rust-clippy/blob/master/lintcheck/README.md\n+\n ## PR\n \n-We follow a rustc no merge-commit policy.\n-See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n+We follow a rustc no merge-commit policy. See\n+<https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n \n ## Common Abbreviations\n \n@@ -126,27 +130,34 @@ See <https://rustc-dev-guide.rust-lang.org/contributing.html#opening-a-pr>.\n | HIR          | High-Level Intermediate Representation |\n | TCX          | Type context                           |\n \n-This is a concise list of abbreviations that can come up during Clippy development. An extensive\n-general list can be found in the [rustc-dev-guide glossary][glossary]. Always feel free to ask if\n-an abbreviation or meaning is unclear to you.\n+This is a concise list of abbreviations that can come up during Clippy\n+development. An extensive general list can be found in the [rustc-dev-guide\n+glossary][glossary]. Always feel free to ask if an abbreviation or meaning is\n+unclear to you.\n \n ## Install from source\n \n-If you are hacking on Clippy and want to install it from source, do the following:\n+If you are hacking on Clippy and want to install it from source, do the\n+following:\n \n-First, take note of the toolchain [override](https://rust-lang.github.io/rustup/overrides.html) in `/rust-toolchain`.\n-We will use this override to install Clippy into the right toolchain.\n+First, take note of the toolchain\n+[override](https://rust-lang.github.io/rustup/overrides.html) in\n+`/rust-toolchain`. We will use this override to install Clippy into the right\n+toolchain.\n \n-> Tip: You can view the active toolchain for the current directory with `rustup show active-toolchain`.\n+> Tip: You can view the active toolchain for the current directory with `rustup\n+> show active-toolchain`.\n \n-From the Clippy project root, run the following command to build the Clippy binaries and copy them into the\n-toolchain directory. This will override the currently installed Clippy component.\n+From the Clippy project root, run the following command to build the Clippy\n+binaries and copy them into the toolchain directory. This will override the\n+currently installed Clippy component.\n \n ```terminal\n cargo build --release --bin cargo-clippy --bin clippy-driver -Zunstable-options --out-dir \"$(rustc --print=sysroot)/bin\"\n ```\n \n-Now you may run `cargo clippy` in any project, using the toolchain where you just installed Clippy.\n+Now you may run `cargo clippy` in any project, using the toolchain where you\n+just installed Clippy.\n \n ```terminal\n cd my-project\n@@ -159,16 +170,19 @@ cargo +nightly-2021-07-01 clippy\n clippy-driver +nightly-2021-07-01 <filename>\n ```\n \n-If you need to restore the default Clippy installation, run the following (from the Clippy project root).\n+If you need to restore the default Clippy installation, run the following (from\n+the Clippy project root).\n \n ```terminal\n rustup component remove clippy\n rustup component add clippy\n ```\n \n-> **DO NOT** install using `cargo install --path . --force` since this will overwrite rustup\n-> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is, `~/.cargo/bin/cargo-clippy` and\n-> `~/.cargo/bin/clippy-driver` should be hard or soft links to `~/.cargo/bin/rustup`. You can repair these by running\n-> `rustup update`.\n+> **DO NOT** install using `cargo install --path . --force` since this will\n+> overwrite rustup\n+> [proxies](https://rust-lang.github.io/rustup/concepts/proxies.html). That is,\n+> `~/.cargo/bin/cargo-clippy` and `~/.cargo/bin/clippy-driver` should be hard or\n+> soft links to `~/.cargo/bin/rustup`. You can repair these by running `rustup\n+> update`.\n \n [glossary]: https://rustc-dev-guide.rust-lang.org/appendix/glossary.html", "previous_filename": "doc/basics.md"}, {"sha": "e1ed89262f677c925ff49c0c77d8e20c9de82611", "filename": "book/src/development/common_tools_writing_lints.md", "status": "renamed", "additions": 72, "deletions": 59, "changes": 131, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fcommon_tools_writing_lints.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -18,15 +18,17 @@ Useful Rustc dev guide links:\n \n ## Retrieving the type of an expression\n \n-Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for example to answer following questions:\n+Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for\n+example to answer following questions:\n \n - which type does this expression correspond to (using its [`TyKind`][TyKind])?\n - is it a sized type?\n - is it a primitive type?\n - does it implement a trait?\n \n-This operation is performed using the [`expr_ty()`][expr_ty] method from the [`TypeckResults`][TypeckResults] struct,\n-that gives you access to the underlying structure [`Ty`][Ty].\n+This operation is performed using the [`expr_ty()`][expr_ty] method from the\n+[`TypeckResults`][TypeckResults] struct, that gives you access to the underlying\n+structure [`Ty`][Ty].\n \n Example of use:\n ```rust\n@@ -43,21 +45,22 @@ impl LateLintPass<'_> for MyStructLint {\n }\n ```\n \n-Similarly in [`TypeckResults`][TypeckResults] methods, you have the [`pat_ty()`][pat_ty] method\n-to retrieve a type from a pattern.\n+Similarly in [`TypeckResults`][TypeckResults] methods, you have the\n+[`pat_ty()`][pat_ty] method to retrieve a type from a pattern.\n \n Two noticeable items here:\n - `cx` is the lint context [`LateContext`][LateContext]. The two most useful\n   data structures in this context are `tcx` and the `TypeckResults` returned by\n   `LateContext::typeck_results`, allowing us to jump to type definitions and\n   other compilation stages such as HIR.\n - `typeck_results`'s return value is [`TypeckResults`][TypeckResults] and is\n-  created by type checking step, it includes useful information such as types\n-  of expressions, ways to resolve methods and so on.\n+  created by type checking step, it includes useful information such as types of\n+  expressions, ways to resolve methods and so on.\n \n ## Checking if an expr is calling a specific method\n \n-Starting with an `expr`, you can check whether it is calling a specific method `some_method`:\n+Starting with an `expr`, you can check whether it is calling a specific method\n+`some_method`:\n \n ```rust\n impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n@@ -77,8 +80,9 @@ impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n \n ## Checking for a specific type\n \n-There are three ways to check if an expression type is a specific type we want to check for.\n-All of these methods only check for the base type, generic arguments have to be checked separately.\n+There are three ways to check if an expression type is a specific type we want\n+to check for. All of these methods only check for the base type, generic\n+arguments have to be checked separately.\n \n ```rust\n use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n@@ -115,7 +119,8 @@ Prefer using diagnostic items and lang items where possible.\n \n ## Checking if a type implements a specific trait\n \n-There are three ways to do this, depending on if the target trait has a diagnostic item, lang item or neither.\n+There are three ways to do this, depending on if the target trait has a\n+diagnostic item, lang item or neither.\n \n ```rust\n use clippy_utils::{implements_trait, is_trait_method, match_trait_method, paths};\n@@ -151,8 +156,9 @@ impl LateLintPass<'_> for MyStructLint {\n \n > Prefer using diagnostic and lang items, if the target trait has one.\n \n-We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n-A list of defined paths for Clippy can be found in [paths.rs][paths]\n+We access lang items through the type context `tcx`. `tcx` is of type\n+[`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate. A list of defined\n+paths for Clippy can be found in [paths.rs][paths]\n \n ## Checking if a type defines a specific method\n \n@@ -182,14 +188,15 @@ impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n ## Dealing with macros and expansions\n \n Keep in mind that macros are already expanded and desugaring is already applied\n-to the code representation that you are working with in Clippy. This unfortunately causes a lot of\n-false positives because macro expansions are \"invisible\" unless you actively check for them.\n-Generally speaking, code with macro expansions should just be ignored by Clippy because that code can be\n-dynamic in ways that are difficult or impossible to see.\n-Use the following functions to deal with macros:\n+to the code representation that you are working with in Clippy. This\n+unfortunately causes a lot of false positives because macro expansions are\n+\"invisible\" unless you actively check for them. Generally speaking, code with\n+macro expansions should just be ignored by Clippy because that code can be\n+dynamic in ways that are difficult or impossible to see. Use the following\n+functions to deal with macros:\n \n-- `span.from_expansion()`: detects if a span is from macro expansion or desugaring.\n-  Checking this is a common first step in a lint.\n+- `span.from_expansion()`: detects if a span is from macro expansion or\n+  desugaring. Checking this is a common first step in a lint.\n \n    ```rust\n    if expr.span.from_expansion() {\n@@ -198,45 +205,51 @@ Use the following functions to deal with macros:\n    }\n    ```\n \n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, which macro call expanded it.\n-   It is sometimes useful to check if the context of two spans are equal.\n-\n-   ```rust\n-   // expands to `1 + 0`, but don't lint\n-   1 + mac!()\n-   ```\n-   ```rust\n-   if left.span.ctxt() != right.span.ctxt() {\n-       // the coder most likely cannot modify this expression\n-       return;\n-   }\n-   ```\n-  Note: Code that is not from expansion is in the \"root\" context. So any spans where `from_expansion` returns `true` can\n-  be assumed to have the same context. And so just using `span.from_expansion()` is often good enough.\n-\n-\n-- `in_external_macro(span)`: detect if the given span is from a macro defined in a foreign crate.\n-   If you want the lint to work with macro-generated code, this is the next line of defense to avoid macros\n-   not defined in the current crate. It doesn't make sense to lint code that the coder can't change.\n-\n-   You may want to use it for example to not start linting in macros from other crates\n-\n-   ```rust\n-   #[macro_use]\n-   extern crate a_crate_with_macros;\n-\n-   // `foo` is defined in `a_crate_with_macros`\n-   foo!(\"bar\");\n-\n-   // if we lint the `match` of `foo` call and test its span\n-   assert_eq!(in_external_macro(cx.sess(), match_span), true);\n-   ```\n-\n-- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, what expanded it\n-\n-One thing `SpanContext` is useful for is to check if two spans are in the same context. For example,\n-in `a == b`, `a` and `b` have the same context. In a `macro_rules!` with `a == $b`, `$b` is expanded to some\n-expression with a different context from `a`.\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, which macro call expanded it. It is sometimes useful to check if the\n+  context of two spans are equal.\n+\n+  ```rust\n+  // expands to `1 + 0`, but don't lint\n+  1 + mac!()\n+  ```\n+  ```rust\n+  if left.span.ctxt() != right.span.ctxt() {\n+      // the coder most likely cannot modify this expression\n+      return;\n+  }\n+  ```\n+  > Note: Code that is not from expansion is in the \"root\" context. So any spans\n+  > where `from_expansion` returns `true` can be assumed to have the same\n+  > context. And so just using `span.from_expansion()` is often good enough.\n+\n+\n+- `in_external_macro(span)`: detect if the given span is from a macro defined in\n+  a foreign crate. If you want the lint to work with macro-generated code, this\n+  is the next line of defense to avoid macros not defined in the current crate.\n+  It doesn't make sense to lint code that the coder can't change.\n+\n+  You may want to use it for example to not start linting in macros from other\n+  crates\n+\n+  ```rust\n+  #[macro_use]\n+  extern crate a_crate_with_macros;\n+\n+  // `foo` is defined in `a_crate_with_macros`\n+  foo!(\"bar\");\n+\n+  // if we lint the `match` of `foo` call and test its span\n+  assert_eq!(in_external_macro(cx.sess(), match_span), true);\n+  ```\n+\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and\n+  if so, what expanded it\n+\n+  One thing `SpanContext` is useful for is to check if two spans are in the same\n+  context. For example, in `a == b`, `a` and `b` have the same context. In a\n+  `macro_rules!` with `a == $b`, `$b` is expanded to some expression with a\n+  different context from `a`.\n \n    ```rust\n    macro_rules! m {", "previous_filename": "doc/common_tools_writing_lints.md"}, {"sha": "3b2a253999629c54d536f64a4bfad41b6c086dcd", "filename": "book/src/development/infrastructure/README.md", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,19 @@\n+# Infrastructure\n+\n+In order to deploy Clippy over `rustup`, some infrastructure is necessary. This\n+chapter describes the different parts of the Clippy infrastructure that need to\n+be maintained to make this possible.\n+\n+The most important part is the sync between the `rust-lang/rust` repository and\n+the Clippy repository that takes place every two weeks. This process is\n+described in the [Syncing changes between Clippy and `rust-lang/rust`](sync.md)\n+section.\n+\n+A new Clippy release is done together with every Rust release, so every six\n+weeks. The release process is described in the [Release a new Clippy\n+Version](release.md) section. During a release cycle a changelog entry for the\n+next release has to be written. The format of that and how to do that is\n+documented in the [Changelog Update](changelog_update.md) section.\n+\n+> _Note:_ The Clippy CI should also be described in this chapter, but for now is\n+> left as a TODO."}, {"sha": "15f3d1f080604d7286cf870a66569b9f123e287d", "filename": "book/src/development/infrastructure/backport.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbackport.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "previous_filename": "doc/backport.md"}, {"sha": "b62314c6735a2de4b48ecb07e11f2064c852f51d", "filename": "book/src/development/infrastructure/book.md", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fbook.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,42 @@\n+# The Clippy Book\n+\n+This document explains how to make additions and changes to the Clippy book, the\n+guide to Clippy that you're reading right now. The Clippy book is formatted with\n+[Markdown](https://www.markdownguide.org) and generated by\n+[mdbook](https://github.com/rust-lang/mdBook).\n+\n+- [Get mdbook](#get-mdbook)\n+- [Make changes](#make-changes)\n+\n+## Get mdbook\n+\n+While not strictly necessary since the book source is simply Markdown text\n+files, having mdbook locally will allow you to build, test and serve the book\n+locally to view changes before you commit them to the repository. You likely\n+already have `cargo` installed, so the easiest option is to simply:\n+\n+```shell\n+cargo install mdbook\n+```\n+\n+See the mdbook [installation](https://github.com/rust-lang/mdBook#installation)\n+instructions for other options.\n+\n+## Make changes\n+\n+The book's\n+[src](https://github.com/joshrotenberg/rust-clippy/tree/clippy_guide/book/src)\n+directory contains all of the markdown files used to generate the book. If you\n+want to see your changes in real time, you can use the mdbook `serve` command to\n+run a web server locally that will automatically update changes as they are\n+made. From the top level of your `rust-clippy` directory:\n+\n+```shell\n+mdbook serve book --open\n+```\n+\n+Then navigate to `http://localhost:3000` to see the generated book. While the\n+server is running, changes you make will automatically be updated.\n+\n+For more information, see the mdbook\n+[guide](https://rust-lang.github.io/mdBook/)."}, {"sha": "e560f4c6a3e51d5b752af5b7c4479509469ac5f0", "filename": "book/src/development/infrastructure/changelog_update.md", "status": "renamed", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fchangelog_update.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -1,6 +1,6 @@\n # Changelog Update\n \n-If you want to help with updating the [changelog][changelog], you're in the right place.\n+If you want to help with updating the [changelog], you're in the right place.\n \n ## When to update\n \n@@ -11,8 +11,8 @@ Rust release. For that purpose, the changelog is ideally updated during the week\n before an upcoming stable release. You can find the release dates on the [Rust\n Forge][forge].\n \n-Most of the time we only need to update the changelog for minor Rust releases. It's\n-been very rare that Clippy changes were included in a patch release.\n+Most of the time we only need to update the changelog for minor Rust releases.\n+It's been very rare that Clippy changes were included in a patch release.\n \n ## Changelog update walkthrough\n \n@@ -24,18 +24,21 @@ be found in the `tools` directory of the Rust repository.\n Depending on the current time and what exactly you want to update, the following\n bullet points might be helpful:\n \n-* When writing the release notes for the **upcoming stable release** you need to check\n-  out the Clippy commit of the current Rust `beta` branch. [Link][rust_beta_tools]\n-* When writing the release notes for the **upcoming beta release**, you need to check\n-  out the Clippy commit of the current Rust `master`. [Link][rust_master_tools]\n+* When writing the release notes for the **upcoming stable release** you need to\n+  check out the Clippy commit of the current Rust `beta` branch.\n+  [Link][rust_beta_tools]\n+* When writing the release notes for the **upcoming beta release**, you need to\n+  check out the Clippy commit of the current Rust `master`.\n+  [Link][rust_master_tools]\n * When writing the (forgotten) release notes for a **past stable release**, you\n   need to check out the Rust release tag of the stable release.\n   [Link][rust_stable_tools]\n \n Usually you want to write the changelog of the **upcoming stable release**. Make\n sure though, that `beta` was already branched in the Rust repository.\n \n-To find the commit hash, issue the following command when in a `rust-lang/rust` checkout:\n+To find the commit hash, issue the following command when in a `rust-lang/rust`\n+checkout:\n ```\n git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\"\n ```\n@@ -44,7 +47,9 @@ git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into\n \n Once you've got the correct commit range, run\n \n-    util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n+util/fetch_prs_between.sh commit1 commit2 > changes.txt\n+```\n \n and open that file in your editor of choice.\n \n@@ -54,14 +59,14 @@ already correct in the current changelog.\n ### 3. Authoring the final changelog\n \n The above script should have dumped all the relevant PRs to the file you\n-specified. It should have filtered out most of the irrelevant PRs\n-already, but it's a good idea to do a manual cleanup pass where you look for\n-more irrelevant PRs. If you're not sure about some PRs, just leave them in for\n-the review and ask for feedback.\n-\n-With the PRs filtered, you can start to take each PR and move the\n-`changelog: ` content to `CHANGELOG.md`. Adapt the wording as you see fit but\n-try to keep it somewhat coherent.\n+specified. It should have filtered out most of the irrelevant PRs already, but\n+it's a good idea to do a manual cleanup pass where you look for more irrelevant\n+PRs. If you're not sure about some PRs, just leave them in for the review and\n+ask for feedback.\n+\n+With the PRs filtered, you can start to take each PR and move the `changelog: `\n+content to `CHANGELOG.md`. Adapt the wording as you see fit but try to keep it\n+somewhat coherent.\n \n The order should roughly be:\n ", "previous_filename": "doc/changelog_update.md"}, {"sha": "0572281803e71ea99507d5304b2661be79f2f1c9", "filename": "book/src/development/infrastructure/release.md", "status": "renamed", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Frelease.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -1,7 +1,7 @@\n # Release a new Clippy Version\n \n-_NOTE: This document is probably only relevant to you, if you're a member of the\n-Clippy team._\n+> _NOTE:_ This document is probably only relevant to you, if you're a member of\n+> the Clippy team.\n \n Clippy is released together with stable Rust releases. The dates for these\n releases can be found at the [Rust Forge]. This document explains the necessary\n@@ -13,12 +13,11 @@ steps to create a Clippy release.\n 4. [Tag the stable commit](#tag-the-stable-commit)\n 5. [Update `CHANGELOG.md`](#update-changelogmd)\n \n-_NOTE: This document is for stable Rust releases, not for point releases. For\n-point releases, step 1. and 2. should be enough._\n+> _NOTE:_ This document is for stable Rust releases, not for point releases. For\n+> point releases, step 1. and 2. should be enough.\n \n [Rust Forge]: https://forge.rust-lang.org/\n \n-\n ## Remerge the `beta` branch\n \n This step is only necessary, if since the last release something was backported\n@@ -29,7 +28,7 @@ tree of the Clippy repository.\n To find out if this step is necessary run\n \n ```bash\n-# Assumes that the local master branch is up-to-date\n+# Assumes that the local master branch of rust-lang/rust-clippy is up-to-date\n $ git fetch upstream\n $ git branch master --contains upstream/beta\n ```\n@@ -45,9 +44,8 @@ $ git push origin backport_remerge  # This can be pushed to your fork\n ```\n \n After this, open a PR to the master branch. In this PR, the commit hash of the\n-`HEAD` of the `beta` branch must exists. In addition to that, no files should\n-be changed by this PR.\n-\n+`HEAD` of the `beta` branch must exists. In addition to that, no files should be\n+changed by this PR.\n \n ## Update the `beta` branch\n \n@@ -58,7 +56,8 @@ determined.\n \n ```bash\n # Assuming the current directory corresponds to the Rust repository\n-$ git checkout beta\n+$ git fetch upstream\n+$ git checkout upstream/beta\n $ BETA_SHA=$(git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\")\n ```\n \n@@ -72,7 +71,6 @@ $ git reset --hard $BETA_SHA\n $ git push upstream beta\n ```\n \n-\n ## Find the Clippy commit\n \n The first step is to tag the Clippy commit, that is included in the stable Rust\n@@ -85,7 +83,6 @@ $ git checkout 1.XX.0   # XX should be exchanged with the corresponding version\n $ SHA=$(git log --oneline -- src/tools/clippy/ | grep -o \"Merge commit '[a-f0-9]*' into .*\" | head -1 | sed -e \"s/Merge commit '\\([a-f0-9]*\\)' into .*/\\1/g\")\n ```\n \n-\n ## Tag the stable commit\n \n After finding the Clippy commit, it can be tagged with the release number.\n@@ -112,10 +109,10 @@ tag. Updating the stable branch from here is as easy as:\n $ git push upstream rust-1.XX.0:stable  # `upstream` is the `rust-lang/rust-clippy` remote\n ```\n \n-_NOTE: Usually there are no stable backports for Clippy, so this update should\n-be possible without force pushing or anything like this. If there should have\n-happened a stable backport, make sure to re-merge those changes just as with the\n-`beta` branch._\n+> _NOTE:_ Usually there are no stable backports for Clippy, so this update\n+> should be possible without force pushing or anything like this. If there\n+> should have happened a stable backport, make sure to re-merge those changes\n+> just as with the `beta` branch.\n \n ## Update `CHANGELOG.md`\n \n@@ -142,4 +139,4 @@ the following parts:\n   Current stable, released 20YY-MM-DD -> Released 20YY-MM-DD\n   ```\n \n-[how to update the changelog]: https://github.com/rust-lang/rust-clippy/blob/master/doc/changelog_update.md\n+[how to update the changelog]: changelog_update.md", "previous_filename": "doc/release.md"}, {"sha": "5a0f7409a2e4cebfd42d26bd7771d90912423501", "filename": "book/src/development/infrastructure/sync.md", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Finfrastructure%2Fsync.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,123 @@\n+# Syncing changes between Clippy and [`rust-lang/rust`]\n+\n+Clippy currently gets built with a pinned nightly version.\n+\n+In the `rust-lang/rust` repository, where rustc resides, there's a copy of\n+Clippy that compiler hackers modify from time to time to adapt to changes in the\n+unstable API of the compiler.\n+\n+We need to sync these changes back to this repository periodically, and the\n+changes made to this repository in the meantime also need to be synced to the\n+`rust-lang/rust` repository.\n+\n+To avoid flooding the `rust-lang/rust` PR queue, this two-way sync process is\n+done in a bi-weekly basis if there's no urgent changes. This is done starting on\n+the day of the Rust stable release and then every other week. That way we\n+guarantee that we keep this repo up to date with the latest compiler API, and\n+every feature in Clippy is available for 2 weeks in nightly, before it can get\n+to beta. For reference, the first sync following this cadence was performed the\n+2020-08-27.\n+\n+This process is described in detail in the following sections. For general\n+information about `subtree`s in the Rust repository see [Rust's\n+`CONTRIBUTING.md`][subtree].\n+\n+## Patching git-subtree to work with big repos\n+\n+Currently, there's a bug in `git-subtree` that prevents it from working properly\n+with the [`rust-lang/rust`] repo. There's an open PR to fix that, but it's\n+stale. Before continuing with the following steps, we need to manually apply\n+that fix to our local copy of `git-subtree`.\n+\n+You can get the patched version of `git-subtree` from [here][gitgitgadget-pr].\n+Put this file under `/usr/lib/git-core` (making a backup of the previous file)\n+and make sure it has the proper permissions:\n+\n+```bash\n+sudo cp --backup /path/to/patched/git-subtree.sh /usr/lib/git-core/git-subtree\n+sudo chmod --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+sudo chown --reference=/usr/lib/git-core/git-subtree~ /usr/lib/git-core/git-subtree\n+```\n+\n+> _Note:_ The first time running `git subtree push` a cache has to be built.\n+> This involves going through the complete Clippy history once. For this you\n+> have to increase the stack limit though, which you can do with `ulimit -s\n+> 60000`. Make sure to run the `ulimit` command from the same session you call\n+> git subtree.\n+\n+> _Note:_ If you are a Debian user, `dash` is the shell used by default for\n+> scripts instead of `sh`. This shell has a hardcoded recursion limit set to\n+> 1000. In order to make this process work, you need to force the script to run\n+> `bash` instead. You can do this by editing the first line of the `git-subtree`\n+> script and changing `sh` to `bash`.\n+\n+## Defining remotes\n+\n+You may want to define remotes, so you don't have to type out the remote\n+addresses on every sync. You can do this with the following commands (these\n+commands still have to be run inside the `rust` directory):\n+\n+```bash\n+# Set clippy-upstream remote for pulls\n+$ git remote add clippy-upstream https://github.com/rust-lang/rust-clippy\n+# Make sure to not push to the upstream repo\n+$ git remote set-url --push clippy-upstream DISABLED\n+# Set a local remote\n+$ git remote add clippy-local /path/to/rust-clippy\n+```\n+\n+> Note: The following sections assume that you have set those remotes with the\n+> above remote names.\n+\n+## Performing the sync from [`rust-lang/rust`] to Clippy\n+\n+Here is a TL;DR version of the sync process (all of the following commands have\n+to be run inside the `rust` directory):\n+\n+1. Clone the [`rust-lang/rust`] repository or make sure it is up to date.\n+2. Checkout the commit from the latest available nightly. You can get it using\n+   `rustup check`.\n+3. Sync the changes to the rust-copy of Clippy to your Clippy fork:\n+    ```bash\n+    # Make sure to change `your-github-name` to your github name in the following command. Also be\n+    # sure to either use a net-new branch, e.g. `sync-from-rust`, or delete the branch beforehand\n+    # because changes cannot be fast forwarded and you have to run this command again.\n+    git subtree push -P src/tools/clippy clippy-local sync-from-rust\n+    ```\n+\n+    > _Note:_ Most of the time you have to create a merge commit in the\n+    > `rust-clippy` repo (this has to be done in the Clippy repo, not in the\n+    > rust-copy of Clippy):\n+    ```bash\n+    git fetch upstream  # assuming upstream is the rust-lang/rust remote\n+    git checkout sync-from-rust\n+    git merge upstream/master --no-ff\n+    ```\n+    > Note: This is one of the few instances where a merge commit is allowed in\n+    > a PR.\n+4. Bump the nightly version in the Clippy repository by changing the date in the\n+   rust-toolchain file to the current date and committing it with the message:\n+   ```bash\n+   git commit -m \"Bump nightly version -> YYYY-MM-DD\"\n+   ```\n+5. Open a PR to `rust-lang/rust-clippy` and wait for it to get merged (to\n+   accelerate the process ping the `@rust-lang/clippy` team in your PR and/or\n+   ask them in the [Zulip] stream.)\n+\n+[Zulip]: https://rust-lang.zulipchat.com/#narrow/stream/clippy\n+\n+## Performing the sync from Clippy to [`rust-lang/rust`]\n+\n+All of the following commands have to be run inside the `rust` directory.\n+\n+1. Make sure you have checked out the latest `master` of `rust-lang/rust`.\n+2. Sync the `rust-lang/rust-clippy` master to the rust-copy of Clippy:\n+    ```bash\n+    git checkout -b sync-from-clippy\n+    git subtree pull -P src/tools/clippy clippy-upstream master\n+    ```\n+3. Open a PR to [`rust-lang/rust`]\n+\n+[gitgitgadget-pr]: https://github.com/gitgitgadget/git/pull/493\n+[subtree]: https://rustc-dev-guide.rust-lang.org/contributing.html#external-dependencies-subtree\n+[`rust-lang/rust`]: https://github.com/rust-lang/rust"}, {"sha": "78fe34ebf8fafdcf04e24d1c26b1285addf5efe8", "filename": "book/src/development/proposals/README.md", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2FREADME.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,11 @@\n+# Proposals\n+\n+This chapter is about accepted proposals for changes that should be worked on in\n+or around Clippy in the long run.\n+\n+Besides adding more and more lints and improve the lints that Clippy already\n+has, Clippy is also interested in making the experience of its users, developers\n+and maintainers better over time. Projects that address bigger picture things\n+like this usually take more time and it is useful to have a proposal for those\n+first. This is the place where such proposals are collected, so that we can\n+refer to them when working on them."}, {"sha": "fe8b080f56f2bc0c518c7b3e2049def4eed5b9f1", "filename": "book/src/development/proposals/roadmap-2021.md", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fdevelopment%2Fproposals%2Froadmap-2021.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "previous_filename": "doc/roadmap-2021.md"}, {"sha": "b2a28d0be622f1874e15f922d487016710ddd248", "filename": "book/src/installation.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Finstallation.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Finstallation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Finstallation.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,24 @@\n+# Installation\n+\n+If you're using `rustup` to install and manage you're Rust toolchains, Clippy is\n+usually **already installed**. In that case you can skip this chapter and go to\n+the [Usage] chapter.\n+\n+> Note: If you used the `minimal` profile when installing a Rust toolchain,\n+> Clippy is not automatically installed.\n+\n+## Using Rustup\n+\n+If Clippy was not installed for a toolchain, it can be installed with\n+\n+```\n+$ rustup component add clippy [--toolchain=<name>]\n+```\n+\n+## From Source\n+\n+Take a look at the [Basics] chapter in the Clippy developer guide to find step\n+by step instructions on how to build and install Clippy from source.\n+\n+[Basics]: development/basics.md#install-from-source\n+[Usage]: usage.md"}, {"sha": "35e30960b56c6276571144308efa5af9621e5c02", "filename": "book/src/lints.md", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Flints.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,105 @@\n+# Clippy's Lints\n+\n+Clippy offers a bunch of additional lints, to help its users write more correct\n+and idiomatic Rust code. A full list of all lints, that can be filtered by\n+category, lint level or keywords, can be found in the [Clippy lint\n+documentation].\n+\n+This chapter will give an overview of the different lint categories, which kind\n+of lints they offer and recommended actions when you should see a lint out of\n+that category. For examples, see the [Clippy lint documentation] and filter by\n+category.\n+\n+The different lint groups were defined in the [Clippy 1.0 RFC].\n+\n+## Correctness\n+\n+The `clippy::correctness` group is the only lint group in Clippy which lints are\n+deny-by-default and abort the compilation when triggered. This is for good\n+reason: If you see a `correctness` lint, it means that your code is outright\n+wrong or useless and you should try to fix it.\n+\n+Lints in this category are carefully picked and should be free of false\n+positives. So just `#[allow]`ing those lints is not recommended.\n+\n+## Suspicious\n+\n+The `clippy::suspicious` group is similar to the correctness lints in that it\n+contains lints that trigger on code that is really _sus_ and should be fixed. As\n+opposed to correctness lints, it might be possible that the linted code is\n+intentionally written like it is.\n+\n+It is still recommended to fix code that is linted by lints out of this group\n+instead of `#[allow]`ing the lint. In case you intentionally have written code\n+that offends the lint you should specifically and locally `#[allow]` the lint\n+and add give a reason why the code is correct as written.\n+\n+## Complexity\n+\n+The `clippy::complexity` group offers lints that give you suggestions on how to\n+simplify your code. It mostly focuses on code that can be written in a shorter\n+and more readable way, while preserving the semantics.\n+\n+If you should see a complexity lint, it usually means that you can remove or\n+replace some code and it is recommended to do so. However, if you need the more\n+complex code for some expressiveness reason, it is recommended to allow\n+complexity lints on a case-by-case basis.\n+\n+## Perf\n+\n+The `clippy::perf` group gives you suggestions on how you can increase the\n+performance of your code. Those lints are mostly about code that the compiler\n+can't trivially optimize, but has to be written in a slightly different way to\n+make the optimizer's job easier.\n+\n+Perf lints are usually easy to apply and it is recommended to do so.\n+\n+## Style\n+\n+The `clippy::style` group is mostly about writing idiomatic code. Because style\n+is subjective, this lint group is the most opinionated warn-by-default group in\n+Clippy.\n+\n+If you see a style lint, applying the suggestion usually makes your code more\n+readable and idiomatic. But because we know that this is opinionated, feel free\n+to sprinkle `#[allow]`s for style lints in your code or `#![allow]` a style lint\n+on your whole crate if you disagree with the suggested style completely.\n+\n+## Pedantic\n+\n+The `clippy::pedantic` group makes Clippy even more _pedantic_. You can enable\n+the whole group with `#![warn(clippy::pedantic)]` in the `lib.rs`/`main.rs` of\n+your crate. This lint group is for Clippy power users that want an in depth\n+check of their code.\n+\n+> _Note:_ Instead of enabling the whole group (like Clippy itself does), you may\n+> want to cherry-pick lints out of the pedantic group.\n+\n+If you enable this group, expect to also use `#[allow]` attributes generously\n+throughout your code. Lints in this group are designed to be pedantic and false\n+positives sometimes are intentional in order to prevent false negatives.\n+\n+## Restriction\n+\n+The `clippy::restriction` group contains lints that will _restrict_ you from\n+using certain parts of the Rust language. It is **not** recommended to enable\n+the whole group, but rather cherry-pick lints that are useful for your code base\n+and your use case.\n+\n+> _Note:_ Clippy will produce a warning if it finds a\n+> `#![warn(clippy::restriction)]` attribute in your code!\n+\n+Lints from this group will restrict you in some way. If you enable a restriction\n+lint for your crate it is recommended to also fix code that this lint triggers\n+on. However, those lints are really strict by design and you might want to\n+`#[allow]` them in some special cases, with a comment justifying that.\n+\n+## Cargo\n+\n+The `clippy::cargo` group gives you suggestions on how to improve your\n+`Cargo.toml` file. This might be especially interesting if you want to publish\n+your crate and are not sure if you have all useful information in your\n+`Cargo.toml`.\n+\n+[Clippy lint documentation]: https://rust-lang.github.io/rust-clippy/\n+[Clippy 1.0 RFC]: https://github.com/rust-lang/rfcs/blob/master/text/2476-clippy-uno.md#lint-audit-and-categories"}, {"sha": "337680aa3139b3921d9f959aa25b167f4a2bad55", "filename": "book/src/usage.md", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fusage.md", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/book%2Fsrc%2Fusage.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/book%2Fsrc%2Fusage.md?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -0,0 +1,151 @@\n+# Usage\n+\n+This chapter describes how to use Clippy to get the most out of it. Clippy can\n+be used as a `cargo` subcommand or, like `rustc`, directly with the\n+`clippy-driver` binary.\n+\n+> _Note:_ This chapter assumes that you have Clippy installed already. If you're\n+> not sure, take a look at the [Installation] chapter.\n+\n+## Cargo subcommand\n+\n+The easiest and most common way to run Clippy is through `cargo`. To do that,\n+just run\n+\n+```bash\n+cargo clippy\n+```\n+\n+### Lint configuration\n+\n+The above command will run the default set of lints, which are included in the\n+lint group `clippy::all`. You might want to use even more lints or you might not\n+agree with every Clippy lint, and for that there are ways to configure lint\n+levels.\n+\n+> _Note:_ Clippy is meant to be used with a generous sprinkling of\n+> `#[allow(..)]`s through your code. So if you disagree with a lint, don't feel\n+> bad disabling them for parts of your code or the whole project.\n+\n+#### Command line\n+\n+You can configure lint levels on the command line by adding\n+`-A/W/D clippy::lint_name` like this:\n+\n+```bash\n+cargo clippy -- -Aclippy::style -Wclippy::double_neg -Dclippy::perf\n+```\n+\n+For [CI] all warnings can be elevated to errors which will inturn fail\n+the build and cause Clippy to exit with a code other than `0`.\n+\n+```\n+cargo clippy -- -Dwarnings\n+```\n+\n+> _Note:_ Adding `-D warnings` will cause your build to fail if **any** warnings\n+> are found in your code. That includes warnings found by rustc (e.g.\n+> `dead_code`, etc.).\n+\n+For more information on configuring lint levels, see the [rustc documentation].\n+\n+[rustc documentation]: https://doc.rust-lang.org/rustc/lints/levels.html#configuring-warning-levels\n+\n+#### Even more lints\n+\n+Clippy has lint groups which are allow-by-default. This means, that you will\n+have to enable the lints in those groups manually.\n+\n+For a full list of all lints with their description and examples, please refere\n+to [Clippy's lint list]. The two most important allow-by-default groups are\n+described below:\n+\n+[Clippy's lint list]: https://rust-lang.github.io/rust-clippy/master/index.html\n+\n+##### `clippy::pedantic`\n+\n+The first group is the `pedantic` group. This group contains really opinionated\n+lints, that may have some intentional false positives in order to prevent false\n+negatives. So while this group is ready to be used in production, you can expect\n+to sprinkle multiple `#[allow(..)]`s in your code. If you find any false\n+positives, you're still welcome to report them to us for future improvements.\n+\n+> FYI: Clippy uses the whole group to lint itself.\n+\n+##### `clippy::restriction`\n+\n+The second group is the `restriction` group. This group contains lints that\n+\"restrict\" the language in some way. For example the `clippy::unwrap` lint from\n+this group won't allow you to use `.unwrap()` in your code. You may want to look\n+through the lints in this group and enable the ones that fit your need.\n+\n+> _Note:_ You shouldn't enable the whole lint group, but cherry-pick lints from\n+> this group. Some lints in this group will even contradict other Clippy lints!\n+\n+#### Too many lints\n+\n+The most opinionated warn-by-default group of Clippy is the `clippy::style`\n+group. Some people prefer to disable this group completely and then cherry-pick\n+some lints they like from this group. The same is of course possible with every\n+other of Clippy's lint groups.\n+\n+> _Note:_ We try to keep the warn-by-default groups free from false positives\n+> (FP). If you find that a lint wrongly triggers, please report it in an issue\n+> (if there isn't an issue for that FP already)\n+\n+#### Source Code\n+\n+You can configure lint levels in source code the same way you can configure\n+`rustc` lints:\n+\n+```rust\n+#![allow(clippy::style)]\n+\n+#[warn(clippy::double_neg)]\n+fn main() {\n+    let x = 1;\n+    let y = --x;\n+    //      ^^ warning: double negation\n+}\n+```\n+\n+### Automatically applying Clippy suggestions\n+\n+Clippy can automatically apply some lint suggestions, just like the compiler.\n+\n+```terminal\n+cargo clippy --fix\n+```\n+\n+### Workspaces\n+\n+All the usual workspace options should work with Clippy. For example the\n+following command will run Clippy on the `example` crate in your workspace:\n+\n+```terminal\n+cargo clippy -p example\n+```\n+\n+As with `cargo check`, this includes dependencies that are members of the\n+workspace, like path dependencies. If you want to run Clippy **only** on the\n+given crate, use the `--no-deps` option like this:\n+\n+```terminal\n+cargo clippy -p example -- --no-deps\n+```\n+\n+## Using Clippy without `cargo`: `clippy-driver`\n+\n+Clippy can also be used in projects that do not use cargo. To do so, run\n+`clippy-driver` with the same arguments you use for `rustc`. For example:\n+\n+```terminal\n+clippy-driver --edition 2018 -Cpanic=abort foo.rs\n+```\n+\n+> _Note:_ `clippy-driver` is designed for running Clippy and should not be used\n+> as a general replacement for `rustc`. `clippy-driver` may produce artifacts\n+> that are not optimized as expected, for example.\n+\n+[Installation]: installation.md\n+[CI]: continuous_integration"}, {"sha": "1bbd9a45b619e448daea496eb77f63fa6693756f", "filename": "clippy_dev/src/update_lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72f5ff6903c6c914f6541422d004df3202916012/clippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72f5ff6903c6c914f6541422d004df3202916012/clippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fupdate_lints.rs?ref=72f5ff6903c6c914f6541422d004df3202916012", "patch": "@@ -58,6 +58,16 @@ fn generate_lint_files(\n         },\n     );\n \n+    replace_region_in_file(\n+        update_mode,\n+        Path::new(\"book/src/README.md\"),\n+        \"[There are over \",\n+        \" lints included in this crate!]\",\n+        |res| {\n+            write!(res, \"{}\", round_to_fifty(usable_lints.len())).unwrap();\n+        },\n+    );\n+\n     replace_region_in_file(\n         update_mode,\n         Path::new(\"CHANGELOG.md\"),"}]}