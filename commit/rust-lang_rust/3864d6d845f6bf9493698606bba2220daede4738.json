{"sha": "3864d6d845f6bf9493698606bba2220daede4738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NjRkNmQ4NDVmNmJmOTQ5MzY5ODYwNmJiYTIyMjBkYWVkZTQ3Mzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-14T19:07:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T01:19:08Z"}, "message": "std: Rename the hashmap constructors to conform to new standards\n\nInstead of using the new_ prefix just name them after their type", "tree": {"sha": "206d35d98526bec1424c87f4c77af141e99bec4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/206d35d98526bec1424c87f4c77af141e99bec4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3864d6d845f6bf9493698606bba2220daede4738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3864d6d845f6bf9493698606bba2220daede4738", "html_url": "https://github.com/rust-lang/rust/commit/3864d6d845f6bf9493698606bba2220daede4738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3864d6d845f6bf9493698606bba2220daede4738/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "383a80199351c6b9f9f4834242231c8586fb2ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/383a80199351c6b9f9f4834242231c8586fb2ab6", "html_url": "https://github.com/rust-lang/rust/commit/383a80199351c6b9f9f4834242231c8586fb2ab6"}], "stats": {"total": 283, "additions": 140, "deletions": 143}, "files": [{"sha": "67a0230a7a064441d8cb431a5ff03b6ed6592b4c", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -387,7 +387,7 @@ fn configure(opts: options) -> cargo {\n         result::err(e) { fail e }\n     };\n \n-    let sources = map::new_str_hash::<source>();\n+    let sources = map::str_hash::<source>();\n     try_parse_sources(path::connect(syscargo, \"sources.json\"), sources);\n     try_parse_sources(path::connect(syscargo, \"local-sources.json\"), sources);\n     let c = {"}, {"sha": "40c44da8b4545e6c74144aa9d02dd226797b9475", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -7,8 +7,6 @@ import core::option;\n import option::{some, none};\n \n export doc;\n-\n-export new_doc;\n export doc_at;\n export maybe_get_doc;\n export get_doc;\n@@ -64,7 +62,7 @@ fn vuint_at(data: [u8], start: uint) -> {val: uint, next: uint} {\n     } else { #error(\"vint too big\"); fail; }\n }\n \n-fn new_doc(data: @[u8]) -> doc {\n+fn doc(data: @[u8]) -> doc {\n     ret {data: data, start: 0u, end: vec::len::<u8>(*data)};\n }\n \n@@ -575,7 +573,7 @@ fn test_option_int() {\n         let mbuf = io::mem_buffer();\n         let ebml_w = ebml::writer(io::mem_buffer_writer(mbuf));\n         serialize_0(ebml_w, v);\n-        let ebml_doc = ebml::new_doc(@io::mem_buffer_buf(mbuf));\n+        let ebml_doc = ebml::doc(@io::mem_buffer_buf(mbuf));\n         let deser = ebml_deserializer(ebml_doc);\n         let v1 = deserialize_0(deser);\n         #debug[\"v1 == %?\", v1];"}, {"sha": "216c881ab406abdeded1f619e4542e01b96d17c1", "filename": "src/libstd/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -407,7 +407,7 @@ impl parser for parser {\n         self.bump();\n         self.parse_whitespace();\n \n-        let values = map::new_str_hash();\n+        let values = map::str_hash();\n \n         if self.ch == '}' {\n           self.bump();\n@@ -501,7 +501,7 @@ fn eq(value0: json, value1: json) -> bool {\n #[cfg(test)]\n mod tests {\n     fn mk_dict(items: [(str, json)]) -> json {\n-        let d = map::new_str_hash();\n+        let d = map::str_hash();\n \n         vec::iter(items) { |item|\n             let (key, value) = item;"}, {"sha": "f5302082b8d6e5a3378d870f32b54aad133ccf3a", "filename": "src/libstd/map.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -1,8 +1,8 @@\n #[doc = \"A map type\"];\n \n import chained::hashmap;\n-export hashmap, hashfn, eqfn, set, map, chained, new_hashmap, new_str_hash;\n-export new_bytes_hash, new_int_hash, new_uint_hash, set_add;\n+export hashmap, hashfn, eqfn, set, map, chained, hashmap, str_hash;\n+export bytes_hash, int_hash, uint_hash, set_add;\n \n #[doc = \"\n A function that returns a hash of a value\n@@ -289,7 +289,7 @@ mod chained {\n }\n \n /*\n-Function: new_hashmap\n+Function: hashmap\n \n Construct a hashmap.\n \n@@ -298,33 +298,33 @@ Parameters:\n hasher - The hash function for key type K\n eqer - The equality function for key type K\n */\n-fn new_hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n+fn hashmap<K: copy, V: copy>(hasher: hashfn<K>, eqer: eqfn<K>)\n         -> hashmap<K, V> {\n     chained::mk(hasher, eqer)\n }\n \n #[doc = \"Construct a hashmap for string keys\"]\n-fn new_str_hash<V: copy>() -> hashmap<str, V> {\n-    ret new_hashmap(str::hash, str::eq);\n+fn str_hash<V: copy>() -> hashmap<str, V> {\n+    ret hashmap(str::hash, str::eq);\n }\n \n #[doc = \"Construct a hashmap for byte string keys\"]\n-fn new_bytes_hash<V: copy>() -> hashmap<[u8], V> {\n-    ret new_hashmap(vec::u8::hash, vec::u8::eq);\n+fn bytes_hash<V: copy>() -> hashmap<[u8], V> {\n+    ret hashmap(vec::u8::hash, vec::u8::eq);\n }\n \n #[doc = \"Construct a hashmap for int keys\"]\n-fn new_int_hash<V: copy>() -> hashmap<int, V> {\n+fn int_hash<V: copy>() -> hashmap<int, V> {\n     fn hash_int(&&x: int) -> uint { int::hash(x) }\n     fn eq_int(&&a: int, &&b: int) -> bool { ret a == b; }\n-    ret new_hashmap(hash_int, eq_int);\n+    ret hashmap(hash_int, eq_int);\n }\n \n #[doc = \"Construct a hashmap for uint keys\"]\n-fn new_uint_hash<V: copy>() -> hashmap<uint, V> {\n+fn uint_hash<V: copy>() -> hashmap<uint, V> {\n     fn hash_uint(&&x: uint) -> uint { uint::hash(x) }\n     fn eq_uint(&&a: uint, &&b: uint) -> bool { ret a == b; }\n-    ret new_hashmap(hash_uint, eq_uint);\n+    ret hashmap(hash_uint, eq_uint);\n }\n \n #[doc = \"\n@@ -346,7 +346,7 @@ mod tests {\n         let eqer_str: map::eqfn<str> = str::eq;\n         #debug(\"uint -> uint\");\n         let hm_uu: map::hashmap<uint, uint> =\n-            map::new_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n+            map::hashmap::<uint, uint>(hasher_uint, eqer_uint);\n         assert (hm_uu.insert(10u, 12u));\n         assert (hm_uu.insert(11u, 13u));\n         assert (hm_uu.insert(12u, 14u));\n@@ -362,7 +362,7 @@ mod tests {\n         let twelve: str = \"twelve\";\n         #debug(\"str -> uint\");\n         let hm_su: map::hashmap<str, uint> =\n-            map::new_hashmap::<str, uint>(hasher_str, eqer_str);\n+            map::hashmap::<str, uint>(hasher_str, eqer_str);\n         assert (hm_su.insert(\"ten\", 12u));\n         assert (hm_su.insert(eleven, 13u));\n         assert (hm_su.insert(\"twelve\", 14u));\n@@ -376,7 +376,7 @@ mod tests {\n         assert (hm_su.get(\"twelve\") == 12u);\n         #debug(\"uint -> str\");\n         let hm_us: map::hashmap<uint, str> =\n-            map::new_hashmap::<uint, str>(hasher_uint, eqer_uint);\n+            map::hashmap::<uint, str>(hasher_uint, eqer_uint);\n         assert (hm_us.insert(10u, \"twelve\"));\n         assert (hm_us.insert(11u, \"thirteen\"));\n         assert (hm_us.insert(12u, \"fourteen\"));\n@@ -389,7 +389,7 @@ mod tests {\n         assert (str::eq(hm_us.get(12u), \"twelve\"));\n         #debug(\"str -> str\");\n         let hm_ss: map::hashmap<str, str> =\n-            map::new_hashmap::<str, str>(hasher_str, eqer_str);\n+            map::hashmap::<str, str>(hasher_str, eqer_str);\n         assert (hm_ss.insert(ten, \"twelve\"));\n         assert (hm_ss.insert(eleven, \"thirteen\"));\n         assert (hm_ss.insert(twelve, \"fourteen\"));\n@@ -417,7 +417,7 @@ mod tests {\n         let hasher_uint: map::hashfn<uint> = uint_id;\n         let eqer_uint: map::eqfn<uint> = eq_uint;\n         let hm_uu: map::hashmap<uint, uint> =\n-            map::new_hashmap::<uint, uint>(hasher_uint, eqer_uint);\n+            map::hashmap::<uint, uint>(hasher_uint, eqer_uint);\n         let i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n@@ -444,7 +444,7 @@ mod tests {\n         let hasher_str: map::hashfn<str> = str::hash;\n         let eqer_str: map::eqfn<str> = str::eq;\n         let hm_ss: map::hashmap<str, str> =\n-            map::new_hashmap::<str, str>(hasher_str, eqer_str);\n+            map::hashmap::<str, str>(hasher_str, eqer_str);\n         i = 0u;\n         while i < num_to_insert {\n             assert hm_ss.insert(uint::to_str(i, 2u), uint::to_str(i * i, 2u));\n@@ -497,7 +497,7 @@ mod tests {\n         let hasher: map::hashfn<uint> = hash;\n         let eqer: map::eqfn<uint> = eq;\n         let hm: map::hashmap<uint, uint> =\n-            map::new_hashmap::<uint, uint>(hasher, eqer);\n+            map::hashmap::<uint, uint>(hasher, eqer);\n         let i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n@@ -560,7 +560,7 @@ mod tests {\n     #[test]\n     fn test_contains_key() {\n         let key = \"k\";\n-        let map = map::new_hashmap::<str, str>(str::hash, str::eq);\n+        let map = map::hashmap::<str, str>(str::hash, str::eq);\n         assert (!map.contains_key(key));\n         map.insert(key, \"val\");\n         assert (map.contains_key(key));\n@@ -569,7 +569,7 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let key = \"k\";\n-        let map = map::new_hashmap::<str, str>(str::hash, str::eq);\n+        let map = map::hashmap::<str, str>(str::hash, str::eq);\n         assert (option::is_none(map.find(key)));\n         map.insert(key, \"val\");\n         assert (option::get(map.find(key)) == \"val\");"}, {"sha": "f6f42de148a1ee17b7ba075f65cdb20a12cdd20b", "filename": "src/libstd/uv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Flibstd%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -131,17 +131,17 @@ fn loop_new() -> uv_loop unsafe {\n \n         // all state goes here\n         let handles: map::hashmap<[u8], *libc::c_void> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n         let id_to_handle: map::hashmap<[u8], uv_handle> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n         let after_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n         let close_callbacks: map::hashmap<[u8], fn~()> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n         let async_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n         let timer_cbs: map::hashmap<[u8], fn~(uv_handle)> =\n-            map::new_bytes_hash();\n+            map::bytes_hash();\n \n         // the main loop that this task blocks on.\n         // should have the same lifetime as the C libuv"}, {"sha": "324b2599b556bfec4f91cc553aadf7be0255f48c", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -178,7 +178,7 @@ fn get_install_prefix_rpath(cwd: path::path, target_triple: str) -> str {\n }\n \n fn minimize_rpaths(rpaths: [str]) -> [str] {\n-    let set = map::new_str_hash::<()>();\n+    let set = map::str_hash::<()>();\n     let minimized = [];\n     for rpath in rpaths {\n         if !set.contains_key(rpath) {"}, {"sha": "fd74034fd28bbb59fe74331c2f6febf1affcb38c", "filename": "src/rustc/front/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fattr.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -220,7 +220,7 @@ fn remove_meta_items_by_name(items: [@ast::meta_item], name: str) ->\n }\n \n fn require_unique_names(sess: session, metas: [@ast::meta_item]) {\n-    let map = map::new_str_hash();\n+    let map = map::str_hash();\n     for meta: @ast::meta_item in metas {\n         let name = get_meta_item_name(meta);\n         if map.contains_key(name) {"}, {"sha": "d3b8c92bd1792236f9d056b29441d9409bce8cce", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -940,8 +940,8 @@ fn name_has_type(tn: type_names, s: str) -> option<TypeRef> {\n fn mk_type_names() -> type_names {\n     fn hash(&&t: TypeRef) -> uint { ret t as uint; }\n     fn eq(&&a: TypeRef, &&b: TypeRef) -> bool { ret a as uint == b as uint; }\n-    @{type_names: std::map::new_hashmap(hash, eq),\n-      named_types: std::map::new_str_hash()}\n+    @{type_names: std::map::hashmap(hash, eq),\n+      named_types: std::map::str_hash()}\n }\n \n fn type_to_str(names: type_names, ty: TypeRef) -> str {"}, {"sha": "d095c2271a276fcba46392ab2b98daa01598235c", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -951,7 +951,7 @@ fn roundtrip(in_item: @ast::item) {\n     let mbuf = io::mem_buffer();\n     let ebml_w = ebml::writer(io::mem_buffer_writer(mbuf));\n     encode_item_ast(ebml_w, in_item);\n-    let ebml_doc = ebml::new_doc(@io::mem_buffer_buf(mbuf));\n+    let ebml_doc = ebml::doc(@io::mem_buffer_buf(mbuf));\n     let out_item = decode_item_ast(ebml_doc);\n     #debug[\"out_item = %s\", pprust::item_to_str(out_item)];\n     assert in_item == out_item;"}, {"sha": "aaceaa9bd07af452927c318b8774121f6ae6a670", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -9,7 +9,7 @@ import syntax::visit;\n import syntax::codemap::span;\n import util::{filesearch};\n import io::writer_util;\n-import std::map::{hashmap, new_int_hash};\n+import std::map::{hashmap, int_hash};\n import syntax::print::pprust;\n import common::*;\n \n@@ -20,7 +20,7 @@ export list_file_metadata;\n // libraries necessary for later resolving, typechecking, linking, etc.\n fn read_crates(sess: session::session, crate: ast::crate) {\n     let e = @{sess: sess,\n-              crate_cache: std::map::new_str_hash::<int>(),\n+              crate_cache: std::map::str_hash::<int>(),\n               mutable next_crate_num: 1};\n     let v =\n         visit::mk_simple_visitor(@{visit_view_item:\n@@ -275,7 +275,7 @@ fn resolve_crate_deps(e: env, cdata: @[u8]) -> cstore::cnum_map {\n     #debug(\"resolving deps of external crate\");\n     // The map from crate numbers in the crate we're resolving to local crate\n     // numbers\n-    let cnum_map = new_int_hash::<ast::crate_num>();\n+    let cnum_map = int_hash::<ast::crate_num>();\n     for dep: decoder::crate_dep in decoder::get_crate_deps(cdata) {\n         let extrn_cnum = dep.cnum;\n         let cname = dep.ident;"}, {"sha": "f8071538df4828477ef9f38aa08f9299b3551d4d", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -64,8 +64,8 @@ type use_crate_map = map::hashmap<ast::node_id, ast::crate_num>;\n fn p(cstore: cstore) -> cstore_private { alt cstore { private(p) { p } } }\n \n fn mk_cstore() -> cstore {\n-    let meta_cache = map::new_int_hash::<crate_metadata>();\n-    let crate_map = map::new_int_hash::<ast::crate_num>();\n+    let meta_cache = map::int_hash::<crate_metadata>();\n+    let crate_map = map::int_hash::<ast::crate_num>();\n     let mod_path_map = new_def_hash();\n     ret private(@{metas: meta_cache,\n                   use_crate_map: crate_map,"}, {"sha": "1af4b3f65a29c0dcf1251becd1becbcc4f6c2a61", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -81,7 +81,7 @@ fn find_item(item_id: int, items: ebml::doc) -> ebml::doc {\n // Looks up an item in the given metadata and returns an ebml doc pointing\n // to the item data.\n fn lookup_item(item_id: int, data: @[u8]) -> ebml::doc {\n-    let items = ebml::get_doc(ebml::new_doc(data), tag_items);\n+    let items = ebml::get_doc(ebml::doc(data), tag_items);\n     ret find_item(item_id, items);\n }\n \n@@ -169,7 +169,7 @@ fn resolve_path(path: [ast::ident], data: @[u8]) -> [ast::def_id] {\n         ret str::eq(str::from_bytes(data), s);\n     }\n     let s = str::connect(path, \"::\");\n-    let md = ebml::new_doc(data);\n+    let md = ebml::doc(data);\n     let paths = ebml::get_doc(md, tag_paths);\n     let eqer = bind eq_item(_, s);\n     let result: [ast::def_id] = [];\n@@ -274,7 +274,7 @@ fn maybe_get_item_ast(cdata: cmd, tcx: ty::ctxt, maps: maps,\n fn get_enum_variants(cdata: cmd, id: ast::node_id, tcx: ty::ctxt)\n     -> [ty::variant_info] {\n     let data = cdata.data;\n-    let items = ebml::get_doc(ebml::new_doc(data), tag_items);\n+    let items = ebml::get_doc(ebml::doc(data), tag_items);\n     let item = find_item(id, items);\n     let infos: [ty::variant_info] = [];\n     let variant_ids = enum_variant_ids(item, cdata);\n@@ -459,14 +459,14 @@ fn list_crate_attributes(md: ebml::doc, hash: str, out: io::writer) {\n }\n \n fn get_crate_attributes(data: @[u8]) -> [ast::attribute] {\n-    ret get_attributes(ebml::new_doc(data));\n+    ret get_attributes(ebml::doc(data));\n }\n \n type crate_dep = {cnum: ast::crate_num, ident: str};\n \n fn get_crate_deps(data: @[u8]) -> [crate_dep] {\n     let deps: [crate_dep] = [];\n-    let cratedoc = ebml::new_doc(data);\n+    let cratedoc = ebml::doc(data);\n     let depsdoc = ebml::get_doc(cratedoc, tag_crate_deps);\n     let crate_num = 1;\n     ebml::tagged_docs(depsdoc, tag_crate_dep) {|depdoc|\n@@ -488,7 +488,7 @@ fn list_crate_deps(data: @[u8], out: io::writer) {\n }\n \n fn get_crate_hash(data: @[u8]) -> str {\n-    let cratedoc = ebml::new_doc(data);\n+    let cratedoc = ebml::doc(data);\n     let hashdoc = ebml::get_doc(cratedoc, tag_crate_hash);\n     ret str::from_bytes(ebml::doc_data(hashdoc));\n }\n@@ -503,7 +503,7 @@ fn list_crate_items(bytes: @[u8], md: ebml::doc, out: io::writer) {\n }\n \n fn iter_crate_items(bytes: @[u8], proc: fn(str, ast::def_id)) {\n-    let md = ebml::new_doc(bytes);\n+    let md = ebml::doc(bytes);\n     let paths = ebml::get_doc(md, tag_paths);\n     let index = ebml::get_doc(paths, tag_index);\n     let bs = ebml::get_doc(index, tag_index_buckets);\n@@ -527,7 +527,7 @@ fn get_crate_module_paths(bytes: @[u8]) -> [(ast::def_id, str)] {\n     // find all module (path, def_ids), which are not\n     // fowarded path due to renamed import or reexport\n     let res = [];\n-    let mods = map::new_str_hash();\n+    let mods = map::str_hash();\n     iter_crate_items(bytes) {|path, did|\n         let m = mod_of_path(path);\n         if str::is_not_empty(m) {\n@@ -547,7 +547,7 @@ fn get_crate_module_paths(bytes: @[u8]) -> [(ast::def_id, str)] {\n \n fn list_crate_metadata(bytes: @[u8], out: io::writer) {\n     let hash = get_crate_hash(bytes);\n-    let md = ebml::new_doc(bytes);\n+    let md = ebml::doc(bytes);\n     list_crate_attributes(md, hash, out);\n     list_crate_deps(bytes, out);\n     list_crate_items(bytes, md, out);"}, {"sha": "9c9118071226426fd4ce46757394bc755a3c41d6", "filename": "src/rustc/metadata/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmetadata%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Freachable.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -21,7 +21,7 @@ type ctx = {ccx: @middle::trans::common::crate_ctxt,\n \n fn find_reachable(ccx: @middle::trans::common::crate_ctxt, crate_mod: _mod)\n     -> map {\n-    let rmap = std::map::new_int_hash();\n+    let rmap = std::map::int_hash();\n     traverse_public_mod({ccx: ccx, rmap: rmap}, crate_mod);\n     rmap\n }"}, {"sha": "043eeca5a65f01dfec39260f2381b1204dc98cfa", "filename": "src/rustc/middle/alias.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Falias.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -62,8 +62,8 @@ fn check_crate(tcx: ty::ctxt, crate: @ast::crate) -> (copy_map, ref_map) {\n     // Stores information about function arguments that's otherwise not easily\n     // available.\n     let cx = @{tcx: tcx,\n-               copy_map: std::map::new_int_hash(),\n-               ref_map: std::map::new_int_hash(),\n+               copy_map: std::map::int_hash(),\n+               ref_map: std::map::int_hash(),\n                mutable silent: false};\n     let v = @{visit_fn: bind visit_fn(cx, _, _, _, _, _, _, _),\n               visit_expr: bind visit_expr(cx, _, _, _),"}, {"sha": "196586fb10f6144259e6ef93b648631187389ea5", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -60,7 +60,7 @@ fn mk_ast_map_visitor() -> vt {\n }\n \n fn map_crate(sess: session, c: crate) -> map {\n-    let cx = {map: std::map::new_int_hash(),\n+    let cx = {map: std::map::int_hash(),\n               mutable path: [],\n               mutable local_id: 0u,\n               sess: sess};"}, {"sha": "aee3815abfab2ba9fafa3323ddf65cc8193c1ea7", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -34,7 +34,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n                         fn_proto: ast::proto,\n                         cap_clause: ast::capture_clause) {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n-    let seen_defs = map::new_int_hash();\n+    let seen_defs = map::int_hash();\n \n     let check_capture_item = fn@(&&cap_item: @ast::capture_item) {\n         let cap_def = tcx.def_map.get(cap_item.id);\n@@ -93,7 +93,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n                         fn_proto: ast::proto,\n                         cap_clause: ast::capture_clause) -> [capture_var] {\n     let freevars = freevars::get_freevars(tcx, fn_expr_id);\n-    let cap_map = map::new_int_hash();\n+    let cap_map = map::int_hash();\n \n     vec::iter(cap_clause.copies) { |cap_item|\n         let cap_def = tcx.def_map.get(cap_item.id);"}, {"sha": "37f32f657f7a07eab15328606da39123da0dd1b7", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -31,7 +31,7 @@ type freevar_map = hashmap<ast::node_id, freevar_info>;\n // in order to start the search.\n fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n     -> freevar_info {\n-    let seen = new_int_hash();\n+    let seen = int_hash();\n     let refs = @mutable [];\n \n     fn ignore_item(_i: @ast::item, &&_depth: int, _v: visit::vt<int>) { }\n@@ -86,7 +86,7 @@ fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n // one pass. This could be improved upon if it turns out to matter.\n fn annotate_freevars(def_map: resolve::def_map, crate: @ast::crate) ->\n    freevar_map {\n-    let freevars = new_int_hash();\n+    let freevars = int_hash();\n \n     let walk_fn = fn@(_fk: visit::fn_kind, _decl: ast::fn_decl,\n                       blk: ast::blk, _sp: span, nid: ast::node_id) {"}, {"sha": "3f38591198032bd74cdb2aa53f6478f7180422a3", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -39,7 +39,7 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n                last_uses: last_use::last_uses, crate: @crate)\n     -> rval_map {\n     let ctx = {tcx: tcx,\n-               rval_map: std::map::new_int_hash(),\n+               rval_map: std::map::int_hash(),\n                method_map: method_map,\n                last_uses: last_uses};\n     let visit = visit::mk_vt(@{"}, {"sha": "7b6266ecde57d00afa445180a1ace492ed6d31c7", "filename": "src/rustc/middle/last_use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flast_use.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -58,14 +58,14 @@ fn find_last_uses(c: @crate, def_map: resolve::def_map,\n                            visit_stmt: visit_stmt,\n                            visit_fn: visit_fn\n                            with *visit::default_visitor()});\n-    let cx = {last_uses: std::map::new_hashmap(hash_use_id, {|a, b| a == b}),\n+    let cx = {last_uses: std::map::hashmap(hash_use_id, {|a, b| a == b}),\n               def_map: def_map,\n               ref_map: ref_map,\n               tcx: tcx,\n               mutable current: [],\n               mutable blocks: nil};\n     visit::visit_crate(*c, cx, v);\n-    let mini_table = std::map::new_int_hash();\n+    let mini_table = std::map::int_hash();\n     cx.last_uses.items {|key, val|\n         if !val { ret; }\n         alt key {"}, {"sha": "c5105a2d1e6e544b4be35f3354a77c71614306e2", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -123,7 +123,7 @@ type mutbl_map = std::map::hashmap<node_id, ()>;\n type ctx = {tcx: ty::ctxt, mutbl_map: mutbl_map};\n \n fn check_crate(tcx: ty::ctxt, crate: @crate) -> mutbl_map {\n-    let cx = @{tcx: tcx, mutbl_map: std::map::new_int_hash()};\n+    let cx = @{tcx: tcx, mutbl_map: std::map::int_hash()};\n     let v = @{visit_expr: bind visit_expr(cx, _, _, _),\n               visit_decl: bind visit_decl(cx, _, _, _)\n               with *visit::default_visitor()};"}, {"sha": "4e57556af17ff4c7e017ed30c387af563d86ada9", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -16,7 +16,7 @@ type pat_id_map = std::map::hashmap<str, node_id>;\n // This is used because same-named variables in alternative patterns need to\n // use the node_id of their namesake in the first pattern.\n fn pat_id_map(dm: resolve::def_map, pat: @pat) -> pat_id_map {\n-    let map = std::map::new_str_hash();\n+    let map = std::map::str_hash();\n     pat_bindings(dm, pat) {|p_id, _s, n|\n       map.insert(path_to_ident(n), p_id);\n     };"}, {"sha": "0b33b6e2631afa52cfcbe57f070b680a68177cfc", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -296,14 +296,14 @@ fn resolve_crate(sess: session, def_map: resolve::def_map, crate: @ast::crate)\n         -> @region_map {\n     let cx: ctxt = {sess: sess,\n                     def_map: def_map,\n-                    region_map: @{parents: map::new_int_hash(),\n-                                  ast_type_to_region: map::new_int_hash(),\n-                                  local_blocks: map::new_int_hash(),\n+                    region_map: @{parents: map::int_hash(),\n+                                  ast_type_to_region: map::int_hash(),\n+                                  local_blocks: map::int_hash(),\n                                   region_name_to_fn: new_def_hash(),\n                                   ast_type_to_inferred_region:\n-                                    map::new_int_hash(),\n-                                  call_site_to_block: map::new_int_hash(),\n-                                  rvalue_to_block: map::new_int_hash()},\n+                                    map::int_hash(),\n+                                  call_site_to_block: map::int_hash(),\n+                                  rvalue_to_block: map::int_hash()},\n                     mut bindings: @list::nil,\n                     mut queued_locals: [],\n                     parent: pa_crate,"}, {"sha": "6b1296e5919a73d8c7c942751e88d4ce855a428c", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -8,12 +8,11 @@ import front::attr;\n import metadata::{csearch, cstore};\n import driver::session::session;\n import util::common::*;\n-import std::map::{new_int_hash, new_str_hash, new_hashmap};\n+import std::map::{int_hash, str_hash, hashmap};\n import syntax::codemap::span;\n import syntax::visit;\n import visit::vt;\n import std::{list, deque};\n-import std::map::hashmap;\n import std::list::{list, nil, cons};\n import option::{is_none, is_some};\n import syntax::print::pprust::*;\n@@ -82,7 +81,7 @@ fn new_ext_hash() -> ext_hash {\n         ret util::common::def_eq(v1.did, v2.did) &&\n                 str::eq(v1.ident, v2.ident) && v1.ns == v2.ns;\n     }\n-    ret std::map::new_hashmap::<key, def>(hash, eq);\n+    ret std::map::hashmap::<key, def>(hash, eq);\n }\n \n enum mod_index_entry {\n@@ -187,14 +186,14 @@ fn resolve_crate_reexports(sess: session, amap: ast_map::map,\n \n fn create_env(sess: session, amap: ast_map::map) -> @env {\n     @{cstore: sess.cstore,\n-      def_map: new_int_hash(),\n+      def_map: int_hash(),\n       ast_map: amap,\n-      imports: new_int_hash(),\n-      mutable exp_map: new_int_hash(),\n-      mod_map: new_int_hash(),\n-      block_map: new_int_hash(),\n+      imports: int_hash(),\n+      mutable exp_map: int_hash(),\n+      mod_map: int_hash(),\n+      block_map: int_hash(),\n       ext_map: new_def_hash(),\n-      impl_map: new_int_hash(),\n+      impl_map: int_hash(),\n       impl_cache: new_def_hash(),\n       ext_cache: new_ext_hash(),\n       used_imports: {mutable track: false, mutable data:  []},\n@@ -289,7 +288,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                                index: index_mod(md),\n                                mutable glob_imports: [],\n                                mutable globbed_exports: [],\n-                               glob_imported_names: new_str_hash(),\n+                               glob_imported_names: str_hash(),\n                                path: path_from_scope(sc, i.ident)});\n           }\n           ast::item_native_mod(nmd) {\n@@ -298,7 +297,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                                index: index_nmod(nmd),\n                                mutable glob_imports: [],\n                                mutable globbed_exports: [],\n-                               glob_imported_names: new_str_hash(),\n+                               glob_imported_names: str_hash(),\n                                path: path_from_scope(sc, i.ident)});\n           }\n           _ { }\n@@ -357,7 +356,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                        index: index_mod(c.node.module),\n                        mutable glob_imports: [],\n                        mutable globbed_exports: [],\n-                       glob_imported_names: new_str_hash(),\n+                       glob_imported_names: str_hash(),\n                        path: \"\"});\n \n     // Next, assemble the links for globbed imports and exports.\n@@ -1660,7 +1659,7 @@ fn index_view_items(view_items: [@ast::view_item],\n }\n \n fn index_mod(md: ast::_mod) -> mod_index {\n-    let index = new_str_hash::<list<mod_index_entry>>();\n+    let index = str_hash::<list<mod_index_entry>>();\n \n     index_view_items(md.view_items, index);\n \n@@ -1705,7 +1704,7 @@ fn index_mod(md: ast::_mod) -> mod_index {\n \n \n fn index_nmod(md: ast::native_mod) -> mod_index {\n-    let index = new_str_hash::<list<mod_index_entry>>();\n+    let index = str_hash::<list<mod_index_entry>>();\n \n     index_view_items(md.view_items, index);\n \n@@ -2141,7 +2140,7 @@ fn check_exports(e: @env) {\n     e.mod_map.values {|_mod|\n         alt _mod.m {\n           some(m) {\n-            let glob_is_re_exported = new_int_hash();\n+            let glob_is_re_exported = int_hash();\n \n             for vi in m.view_items {\n                 iter_export_paths(*vi) { |vp|"}, {"sha": "a4421752965b7582dbc559d931b9af0540095234", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -16,7 +16,7 @@\n import libc::c_uint;\n import std::{map, time};\n import std::map::hashmap;\n-import std::map::{new_int_hash, new_str_hash};\n+import std::map::{int_hash, str_hash};\n import driver::session;\n import session::session;\n import front::attr;\n@@ -3965,9 +3965,9 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt, path: path,\n           mutable llobstacktoken: none::<ValueRef>,\n           mutable llself: none,\n           mutable personality: none,\n-          llargs: new_int_hash::<local_val>(),\n-          lllocals: new_int_hash::<local_val>(),\n-          llupvars: new_int_hash::<ValueRef>(),\n+          llargs: int_hash::<local_val>(),\n+          lllocals: int_hash::<local_val>(),\n+          llupvars: int_hash::<ValueRef>(),\n           mutable lltyparams: [],\n           derived_tydescs: ty::new_ty_hash(),\n           id: id,\n@@ -4842,7 +4842,7 @@ fn declare_intrinsics(llmod: ModuleRef) -> hashmap<str, ValueRef> {\n         decl_cdecl_fn(llmod, \"llvm.memset.p0i8.i64\",\n                       T_fn(T_memset64_args, T_void()));\n     let trap = decl_cdecl_fn(llmod, \"llvm.trap\", T_fn(T_trap_args, T_void()));\n-    let intrinsics = new_str_hash::<ValueRef>();\n+    let intrinsics = str_hash::<ValueRef>();\n     intrinsics.insert(\"llvm.gcroot\", gcroot);\n     intrinsics.insert(\"llvm.gcread\", gcread);\n     intrinsics.insert(\"llvm.memmove.p0i8.p0i8.i32\", memmove32);\n@@ -5002,7 +5002,7 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n     lib::llvm::associate_type(tn, \"tydesc\", tydesc_type);\n     let crate_map = decl_crate_map(sess, link_meta.name, llmod);\n     let dbg_cx = if sess.opts.debuginfo {\n-        option::some(@{llmetadata: map::new_int_hash(),\n+        option::some(@{llmetadata: map::int_hash(),\n                        names: new_namegen()})\n     } else {\n         option::none\n@@ -5013,21 +5013,21 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           llmod: llmod,\n           td: td,\n           tn: tn,\n-          externs: new_str_hash::<ValueRef>(),\n+          externs: str_hash::<ValueRef>(),\n           intrinsics: intrinsics,\n-          item_vals: new_int_hash::<ValueRef>(),\n+          item_vals: int_hash::<ValueRef>(),\n           exp_map: emap,\n-          item_symbols: new_int_hash::<str>(),\n+          item_symbols: int_hash::<str>(),\n           mutable main_fn: none::<ValueRef>,\n           link_meta: link_meta,\n           enum_sizes: ty::new_ty_hash(),\n           discrims: ast_util::new_def_id_hash::<ValueRef>(),\n-          discrim_symbols: new_int_hash::<str>(),\n+          discrim_symbols: int_hash::<str>(),\n           tydescs: ty::new_ty_hash(),\n-          dicts: map::new_hashmap(hash_dict_id, {|a, b| a == b}),\n+          dicts: map::hashmap(hash_dict_id, {|a, b| a == b}),\n           external: util::common::new_def_hash(),\n-          monomorphized: map::new_hashmap(hash_mono_id, {|a, b| a == b}),\n-          module_data: new_str_hash::<ValueRef>(),\n+          monomorphized: map::hashmap(hash_mono_id, {|a, b| a == b}),\n+          module_data: str_hash::<ValueRef>(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(),\n           sha: sha,"}, {"sha": "38bfb1e4f71edb59e3053aca6aa70bfaade5b7ec", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -4,7 +4,7 @@ import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::{visit, codemap};\n import codemap::span;\n-import std::map::{hashmap, new_int_hash};\n+import std::map::{hashmap, int_hash};\n import syntax::print::pprust::path_to_str;\n import tstate::ann::{pre_and_post, pre_and_post_state, empty_ann, prestate,\n                      poststate, precond, postcond,\n@@ -484,7 +484,7 @@ fn num_constraints(m: fn_info) -> uint { ret m.num_constraints; }\n \n fn new_crate_ctxt(cx: ty::ctxt) -> crate_ctxt {\n     let na: [mutable ts_ann] = [mutable];\n-    ret {tcx: cx, node_anns: @mutable na, fm: new_int_hash::<fn_info>()};\n+    ret {tcx: cx, node_anns: @mutable na, fm: int_hash::<fn_info>()};\n }\n \n /* Use e's type to determine whether it returns."}, {"sha": "036b0177747ff89f86b781d3783da01588e4c496", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -332,18 +332,18 @@ fn mk_rcache() -> creader_cache {\n     fn eq_cache_entries(a: val, b: val) -> bool {\n         ret a.cnum == b.cnum && a.pos == b.pos && a.len == b.len;\n     }\n-    ret map::new_hashmap(hash_cache_entry, eq_cache_entries);\n+    ret map::hashmap(hash_cache_entry, eq_cache_entries);\n }\n \n fn new_ty_hash<V: copy>() -> map::hashmap<t, V> {\n-    map::new_hashmap({|&&t: t| type_id(t)},\n+    map::hashmap({|&&t: t| type_id(t)},\n                     {|&&a: t, &&b: t| type_id(a) == type_id(b)})\n }\n \n fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n            freevars: freevars::freevar_map,\n            region_map: @middle::region::region_map) -> ctxt {\n-    let interner = map::new_hashmap({|&&k: intern_key|\n+    let interner = map::hashmap({|&&k: intern_key|\n         hash_type_structure(k.struct) +\n             option::maybe(0u, k.o_def_id, ast_util::hash_def_id)\n     }, {|&&a, &&b| a == b});\n@@ -353,20 +353,20 @@ fn mk_ctxt(s: session::session, dm: resolve::def_map, amap: ast_map::map,\n       def_map: dm,\n       region_map: region_map,\n       node_types: @smallintmap::mk(),\n-      node_type_substs: map::new_int_hash(),\n+      node_type_substs: map::int_hash(),\n       items: amap,\n       freevars: freevars,\n       tcache: new_def_hash(),\n       rcache: mk_rcache(),\n       short_names_cache: new_ty_hash(),\n       needs_drop_cache: new_ty_hash(),\n       kind_cache: new_ty_hash(),\n-      ast_ty_to_ty_cache: map::new_hashmap(\n+      ast_ty_to_ty_cache: map::hashmap(\n           ast_util::hash_ty, ast_util::eq_ty),\n       enum_var_cache: new_def_hash(),\n       iface_method_cache: new_def_hash(),\n-      ty_param_bounds: map::new_int_hash(),\n-      inferred_modes: map::new_int_hash()}\n+      ty_param_bounds: map::int_hash(),\n+      inferred_modes: map::int_hash()}\n }\n \n "}, {"sha": "253b1a7b5329be19a23aa881434520bd9668161c", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -13,7 +13,7 @@ import middle::ty::{node_id_to_type, arg, block_ty,\n                     ty_param_bounds_and_ty, lookup_class_items};\n import util::ppaux::ty_to_str;\n import std::smallintmap;\n-import std::map::{hashmap, new_int_hash};\n+import std::map::{hashmap, int_hash};\n import syntax::print::pprust::*;\n \n export check_crate;\n@@ -1354,7 +1354,7 @@ fn gather_locals(ccx: @crate_ctxt,\n     let {vb: vb, locals: locals, nvi: nvi} = alt old_fcx {\n       none {\n         {vb: ty::unify::mk_var_bindings(),\n-         locals: new_int_hash::<int>(),\n+         locals: int_hash::<int>(),\n          nvi: @mutable 0}\n       }\n       some(fcx) {\n@@ -2956,7 +2956,7 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n           purity: ast::pure_fn,\n           proto: ast::proto_box,\n           var_bindings: ty::unify::mk_var_bindings(),\n-          locals: new_int_hash::<int>(),\n+          locals: int_hash::<int>(),\n           next_var_id: @mutable 0,\n           ccx: ccx};\n     check_expr(fcx, e);\n@@ -2975,7 +2975,7 @@ fn check_enum_variants(ccx: @crate_ctxt, sp: span, vs: [ast::variant],\n           purity: ast::pure_fn,\n           proto: ast::proto_box,\n           var_bindings: ty::unify::mk_var_bindings(),\n-          locals: new_int_hash::<int>(),\n+          locals: int_hash::<int>(),\n           next_var_id: @mutable 0,\n           ccx: ccx};\n     let disr_vals: [int] = [];\n@@ -3192,7 +3192,7 @@ fn check_method(ccx: @crate_ctxt, method: @ast::method) {\n }\n \n fn class_types(ccx: @crate_ctxt, members: [@ast::class_item]) -> class_map {\n-    let rslt = new_int_hash::<ty::t>();\n+    let rslt = int_hash::<ty::t>();\n     for m in members {\n       alt m.node.decl {\n          ast::instance_var(_,t,_,id) {\n@@ -3513,10 +3513,10 @@ fn check_crate(tcx: ty::ctxt, impl_map: resolve::impl_map,\n \n     let ccx = @{mutable self_infos: [],\n                 impl_map: impl_map,\n-                method_map: std::map::new_int_hash(),\n-                dict_map: std::map::new_int_hash(),\n+                method_map: std::map::int_hash(),\n+                dict_map: std::map::int_hash(),\n                 enclosing_class_id: none,\n-                enclosing_class: std::map::new_int_hash(),\n+                enclosing_class: std::map::int_hash(),\n                 tcx: tcx};\n     let visit = visit::mk_simple_visitor(@{\n         visit_item: bind check_item(ccx, _)"}, {"sha": "1182a2c40c3222d2cf7b8090f9f856cf03fbc836", "filename": "src/rustc/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast_util.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -227,7 +227,7 @@ fn eq_def_id(&&a: def_id, &&b: def_id) -> bool {\n }\n \n fn new_def_id_hash<T: copy>() -> std::map::hashmap<def_id, T> {\n-    std::map::new_hashmap(hash_def_id, eq_def_id)\n+    std::map::hashmap(hash_def_id, eq_def_id)\n }\n \n fn block_from_expr(e: @expr) -> blk {"}, {"sha": "9911930184d21ec68355f0e728b92057a6241a0d", "filename": "src/rustc/syntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -506,7 +506,7 @@ fn mk_ser_fn(cx: ext_ctxt, span: span, name: str, tps: [ast::ty_param],\n           id: cx.next_id()}]\n         + tp_inputs;\n \n-    let tps_map = map::new_str_hash();\n+    let tps_map = map::str_hash();\n     vec::iter2(tps, tp_inputs) {|tp, arg|\n         let arg_ident = arg.ident;\n         tps_map.insert(\n@@ -704,7 +704,7 @@ fn mk_deser_fn(cx: ext_ctxt, span: span, name: str, tps: [ast::ty_param],\n           id: cx.next_id()}]\n         + tp_inputs;\n \n-    let tps_map = map::new_str_hash();\n+    let tps_map = map::str_hash();\n     vec::iter2(tps, tp_inputs) {|tp, arg|\n         let arg_ident = arg.ident;\n         tps_map.insert("}, {"sha": "8a1dd70f360ecb7f2fe4963e02e98d31fd44ca51", "filename": "src/rustc/syntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fbase.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -1,7 +1,7 @@\n import std::map::hashmap;\n import driver::session::session;\n import codemap::{span, expn_info, expanded_from};\n-import std::map::new_str_hash;\n+import std::map::str_hash;\n \n type syntax_expander_ =\n     fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> @ast::expr;\n@@ -25,7 +25,7 @@ enum syntax_extension {\n fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n     fn builtin(f: syntax_expander_) -> syntax_extension\n         {normal({expander: f, span: none})}\n-    let syntax_expanders = new_str_hash::<syntax_extension>();\n+    let syntax_expanders = str_hash::<syntax_extension>();\n     syntax_expanders.insert(\"fmt\", builtin(ext::fmt::expand_syntax_ext));\n     syntax_expanders.insert(\"auto_serialize\",\n                             item_decorator(ext::auto_serialize::expand));"}, {"sha": "ffc1b8248fe4d2e6b77dc56c64396291dcd15475", "filename": "src/rustc/syntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fsimplext.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -1,7 +1,7 @@\n use std;\n \n import codemap::span;\n-import std::map::{hashmap, new_str_hash};\n+import std::map::{hashmap, str_hash};\n import driver::session::session;\n \n import base::*;\n@@ -148,7 +148,7 @@ fn acumm_bindings(_cx: ext_ctxt, _b_dest: bindings, _b_src: bindings) { }\n \n fn pattern_to_selectors(cx: ext_ctxt, e: @expr) -> binders {\n     let res: binders =\n-        {real_binders: new_str_hash::<selector>(),\n+        {real_binders: str_hash::<selector>(),\n          mutable literal_ast_matchers: []};\n     //this oughta return binders instead, but macro args are a sequence of\n     //expressions, rather than a single expression\n@@ -164,7 +164,7 @@ bindings. Most of the work is done in p_t_s, which generates the\n selectors. */\n \n fn use_selectors_to_bind(b: binders, e: @expr) -> option<bindings> {\n-    let res = new_str_hash::<arb_depth<matchable>>();\n+    let res = str_hash::<arb_depth<matchable>>();\n     //need to do this first, to check vec lengths.\n     for sel: selector in b.literal_ast_matchers {\n         alt sel(match_expr(e)) { none { ret none; } _ { } }\n@@ -241,7 +241,7 @@ fn follow_for_trans(cx: ext_ctxt, mmaybe: option<arb_depth<matchable>>,\n \n /* helper for transcribe_exprs: what vars from `b` occur in `e`? */\n fn free_vars(b: bindings, e: @expr, it: fn(ident)) {\n-    let idents: hashmap<ident, ()> = new_str_hash::<()>();\n+    let idents: hashmap<ident, ()> = str_hash::<()>();\n     fn mark_ident(&&i: ident, _fld: ast_fold, b: bindings,\n                   idents: hashmap<ident, ()>) -> ident {\n         if b.contains_key(i) { idents.insert(i, ()); }"}, {"sha": "8d3087a61a46d437b32736905fa86d2f24473964", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -1,5 +1,5 @@\n import either::{left, right};\n-import std::map::{hashmap, new_str_hash};\n+import std::map::{hashmap, str_hash};\n import token::can_begin_expr;\n import codemap::{span,fss_none};\n import util::interner;\n@@ -143,7 +143,7 @@ fn new_parser(sess: parse_sess, cfg: ast::crate_cfg, rdr: reader,\n // because, if used at the start of a line, they will cause the line to be\n // interpreted as a specific kind of statement, which would be confusing.\n fn bad_expr_word_table() -> hashmap<str, ()> {\n-    let words = new_str_hash();\n+    let words = str_hash();\n     for word in [\"alt\", \"assert\", \"be\", \"break\", \"check\", \"claim\",\n                  \"class\", \"const\", \"cont\", \"copy\", \"crust\", \"do\", \"else\",\n                  \"enum\", \"export\", \"fail\", \"fn\", \"for\", \"if\",  \"iface\","}, {"sha": "65f52b2fc46465d6bd582888917fc30b8cadf125", "filename": "src/rustc/syntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Futil%2Finterner.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -11,7 +11,7 @@ type interner<T> =\n      eqer: eqfn<T>};\n \n fn mk<T: copy>(hasher: hashfn<T>, eqer: eqfn<T>) -> interner<T> {\n-    let m = map::new_hashmap::<T, uint>(hasher, eqer);\n+    let m = map::hashmap::<T, uint>(hasher, eqer);\n     ret {map: m, mutable vect: [], hasher: hasher, eqer: eqer};\n }\n "}, {"sha": "d37347e15945e680ac17f66deac14383aad65204", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -21,7 +21,7 @@ fn hash_def(d: ast::def_id) -> uint {\n fn new_def_hash<V: copy>() -> std::map::hashmap<ast::def_id, V> {\n     let hasher: std::map::hashfn<ast::def_id> = hash_def;\n     let eqer: std::map::eqfn<ast::def_id> = def_eq;\n-    ret std::map::new_hashmap::<ast::def_id, V>(hasher, eqer);\n+    ret std::map::hashmap::<ast::def_id, V>(hasher, eqer);\n }\n \n fn field_expr(f: ast::field) -> @ast::expr { ret f.node.expr; }"}, {"sha": "05cea2a39d49753579f899f08cdfebc9288f5e02", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -71,7 +71,7 @@ fn from_def_assoc_list<V:copy>(\n fn from_str_assoc_list<V:copy>(\n     list: [(str, V)]\n ) -> map::hashmap<str, V> {\n-    from_assoc_list(list, bind map::new_str_hash())\n+    from_assoc_list(list, bind map::str_hash())\n }\n \n fn build_reexport_def_set(srv: astsrv::srv) -> def_set {\n@@ -155,7 +155,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n     let assoc_list = astsrv::exec(srv) {|ctxt|\n \n         let def_map = from_def_assoc_list(def_assoc_list);\n-        let path_map = map::new_str_hash();\n+        let path_map = map::str_hash();\n \n         ctxt.exp_map.items {|exp_id, defs|\n             let path = alt check ctxt.ast_map.get(exp_id) {"}, {"sha": "ca2b5f54150e056aaf39a0512d51ce4537e46bbe", "filename": "src/serializer/serializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Fserializer%2Fserializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Fserializer%2Fserializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fserializer%2Fserializer.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -7,7 +7,7 @@ import rustc::syntax::codemap::span;\n import rustc::middle::ty;\n import rustc::middle::ast_map;\n import rustc::util::ppaux;\n-import std::map::{hashmap, map, new_int_hash};\n+import std::map::{hashmap, map, int_hash};\n import std::getopts;\n import io::writer_util;\n import driver::build_session_options;\n@@ -90,7 +90,7 @@ impl serialize_ctx for serialize_ctx {\n \n     fn tp_map(ty_params: [ast::ty_param], tps: [ty::t]) -> tp_map {\n         assert vec::len(tps) == vec::len(ty_params);\n-        let tps_map = new_int_hash();\n+        let tps_map = int_hash();\n         vec::iter2(ty_params, tps) {|tp_def,tp_val|\n             tps_map.insert(tp_def.id, tp_val);\n         }"}, {"sha": "5883b047309b51631b270acfe9c73bf5bf31510b", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -106,7 +106,7 @@ fn writer(path: str, writech: comm::chan<comm::chan<line>>, size: uint)\n     };\n     cout.write_line(\"P4\");\n     cout.write_line(#fmt(\"%u %u\", size, size));\n-    let lines = std::map::new_uint_hash();\n+    let lines = std::map::uint_hash();\n     let done = 0_u;\n     let i = 0_u;\n     while i < size {"}, {"sha": "e8c889ad7ef43090131f9237cc8453389c15e2bc", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -71,7 +71,7 @@ mod map_reduce {\n \n     fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n         // log(error, \"map_task \" + input);\n-        let intermediates = map::new_str_hash();\n+        let intermediates = map::str_hash();\n \n         fn emit(im: map::hashmap<str, chan<reduce_proto>>,\n                 ctrl: chan<ctrl_proto>, key: str, val: int) {\n@@ -136,7 +136,7 @@ mod map_reduce {\n \n         let reducers: map::hashmap<str, chan<reduce_proto>>;\n \n-        reducers = map::new_str_hash();\n+        reducers = map::str_hash();\n \n         let num_mappers = vec::len(inputs) as int;\n         let results = start_mappers(chan(ctrl), inputs);"}, {"sha": "c4005048bf1b690cb3a33c4f732baaa730ae9a1c", "filename": "src/test/compile-fail/map-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Fcompile-fail%2Fmap-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmap-types.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -6,7 +6,7 @@ import std::map::map;\n // Test that iface types printed in error msgs include the type arguments.\n \n fn main() {\n-    let x: map<str,str> = map::new_str_hash::<str>() as map::<str,str>;\n+    let x: map<str,str> = map::str_hash::<str>() as map::<str,str>;\n     let y: map<uint,str> = x;\n     //!^ ERROR mismatched types: expected `std::map::map<uint,str>`\n }"}, {"sha": "8d79987a4fee352587004fd6e89b2df5c5f98d94", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -15,7 +15,7 @@ fn main() {\n         ret s == t;\n     }\n \n-    let map = map::new_hashmap(hash, eq);\n+    let map = map::hashmap(hash, eq);\n     let arr = [];\n     uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];"}, {"sha": "75d5fc8b357242b8d01a9ff20aeed67e1d36b441", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -26,7 +26,7 @@ fn test_ser_and_deser<A>(a1: A,\n     let buf = io::mem_buffer();\n     let w = ebml::writer(buf as io::writer);\n     ebml_ser_fn(w, a1);\n-    let d = ebml::new_doc(@io::mem_buffer_buf(buf));\n+    let d = ebml::doc(@io::mem_buffer_buf(buf));\n     let a2 = ebml_deser_fn(ebml::ebml_deserializer(d));\n     io::print(\"\\na1 = \");\n     io_ser_fn(io::stdout(), a1);"}, {"sha": "c241d3d9eb1aee45dc6875b2da65085b9870eec0", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -40,7 +40,7 @@ mod map_reduce {\n     }\n \n     fn map_task(ctrl: chan<ctrl_proto>, input: str) {\n-        let intermediates = map::new_str_hash();\n+        let intermediates = map::str_hash();\n \n         fn emit(im: map::hashmap<str, int>, ctrl: chan<ctrl_proto>, key: str,\n                 val: str) {\n@@ -71,7 +71,7 @@ mod map_reduce {\n \n         let reducers: map::hashmap<str, int>;\n \n-        reducers = map::new_str_hash();\n+        reducers = map::str_hash();\n \n         start_mappers(chan(ctrl), inputs);\n "}, {"sha": "ab142a895e556c1b6652d78bc570307e5ec5022a", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3864d6d845f6bf9493698606bba2220daede4738/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=3864d6d845f6bf9493698606bba2220daede4738", "patch": "@@ -3,7 +3,7 @@ import std::map;\n import std::map::hashmap;\n \n fn main() {\n-    let m = map::new_bytes_hash();\n+    let m = map::bytes_hash();\n     m.insert(str::bytes(\"foo\"), str::bytes(\"bar\"));\n     log(error, m);\n }"}]}