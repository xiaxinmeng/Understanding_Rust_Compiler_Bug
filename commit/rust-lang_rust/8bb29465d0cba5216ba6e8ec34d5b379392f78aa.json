{"sha": "8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYjI5NDY1ZDBjYmE1MjE2YmE2ZThlYzM0ZDViMzc5MzkyZjc4YWE=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-27T01:00:33Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-08-28T07:58:41Z"}, "message": "feature error span on attr. for fn_must_use, SIMD/align, macro re\u00ebxport\n\nThere were several feature-gated attributes for which the\nfeature-not-available error spans would point to the item annotated with\nthe gated attribute, when it would make more sense for the span to point\nto the attribute itself: if the attribute is removed, the\nfunction/struct/&c. likely still makes sense and the program will\ncompile. (Note that we decline to make the analogous change for the\n`main`, `start`, and `plugin_registrar` features, for in those cases it\nmakes sense for the span to implicate the entire function, of which\nthere is little hope of using without the gated attribute.)", "tree": {"sha": "835a273cf33ff0cb3a33fe039cc21ec0ea488d4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/835a273cf33ff0cb3a33fe039cc21ec0ea488d4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "html_url": "https://github.com/rust-lang/rust/commit/8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2668882406b68739c6ed33d420358d5d710e67b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2668882406b68739c6ed33d420358d5d710e67b", "html_url": "https://github.com/rust-lang/rust/commit/e2668882406b68739c6ed33d420358d5d710e67b"}], "stats": {"total": 143, "additions": 107, "deletions": 36}, "files": [{"sha": "f97a8f67e2243f09565be16277c56aeda9e4e34b", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -490,6 +490,10 @@ pub fn contains_name(attrs: &[Attribute], name: &str) -> bool {\n     })\n }\n \n+pub fn find_by_name<'a>(attrs: &'a [Attribute], name: &str) -> Option<&'a Attribute> {\n+    attrs.iter().find(|attr| attr.check_name(name))\n+}\n+\n pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: &str) -> Option<Symbol> {\n     attrs.iter()\n         .find(|at| at.check_name(name))"}, {"sha": "2526ac3021a69dfeb57a6ebd13278212eddfe34e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -1248,8 +1248,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_item(&mut self, i: &'a ast::Item) {\n         match i.node {\n             ast::ItemKind::ExternCrate(_) => {\n-                if attr::contains_name(&i.attrs[..], \"macro_reexport\") {\n-                    gate_feature_post!(&self, macro_reexport, i.span,\n+                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"macro_reexport\") {\n+                    gate_feature_post!(&self, macro_reexport, attr.span,\n                                        \"macros reexports are experimental \\\n                                         and possibly buggy\");\n                 }\n@@ -1276,36 +1276,32 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                         function may change over time, for now \\\n                                         a top-level `fn main()` is required\");\n                 }\n-                if attr::contains_name(&i.attrs[..], \"must_use\") {\n-                    gate_feature_post!(&self, fn_must_use, i.span,\n+                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"must_use\") {\n+                    gate_feature_post!(&self, fn_must_use, attr.span,\n                                        \"`#[must_use]` on functions is experimental\",\n                                        GateStrength::Soft);\n                 }\n             }\n \n             ast::ItemKind::Struct(..) => {\n-                if attr::contains_name(&i.attrs[..], \"simd\") {\n-                    gate_feature_post!(&self, simd, i.span,\n+                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"simd\") {\n+                    gate_feature_post!(&self, simd, attr.span,\n                                        \"SIMD types are experimental and possibly buggy\");\n-                    self.context.parse_sess.span_diagnostic.span_warn(i.span,\n+                    self.context.parse_sess.span_diagnostic.span_warn(attr.span,\n                                                                       \"the `#[simd]` attribute \\\n                                                                        is deprecated, use \\\n                                                                        `#[repr(simd)]` instead\");\n                 }\n-                for attr in &i.attrs {\n-                    if attr.path == \"repr\" {\n-                        for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n-                            if item.check_name(\"simd\") {\n-                                gate_feature_post!(&self, repr_simd, i.span,\n-                                                   \"SIMD types are experimental \\\n-                                                    and possibly buggy\");\n-\n-                            }\n-                            if item.check_name(\"align\") {\n-                                gate_feature_post!(&self, repr_align, i.span,\n-                                                   \"the struct `#[repr(align(u16))]` attribute \\\n-                                                    is experimental\");\n-                            }\n+                if let Some(attr) = attr::find_by_name(&i.attrs[..], \"repr\") {\n+                    for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n+                        if item.check_name(\"simd\") {\n+                            gate_feature_post!(&self, repr_simd, attr.span,\n+                                               \"SIMD types are experimental and possibly buggy\");\n+                        }\n+                        if item.check_name(\"align\") {\n+                            gate_feature_post!(&self, repr_align, attr.span,\n+                                               \"the struct `#[repr(align(u16))]` attribute \\\n+                                                is experimental\");\n                         }\n                     }\n                 }\n@@ -1334,8 +1330,8 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n                 for impl_item in impl_items {\n                     if let ast::ImplItemKind::Method(..) = impl_item.node {\n-                        if attr::contains_name(&impl_item.attrs[..], \"must_use\") {\n-                            gate_feature_post!(&self, fn_must_use, impl_item.span,\n+                        if let Some(attr) = attr::find_by_name(&impl_item.attrs[..], \"must_use\") {\n+                            gate_feature_post!(&self, fn_must_use, attr.span,\n                                                \"`#[must_use]` on methods is experimental\",\n                                                GateStrength::Soft);\n                         }"}, {"sha": "2a20c28cfb871f5abac1973d6edbfc906647a7ed", "filename": "src/test/compile-fail-fulldeps/gated-macro-reexports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-macro-reexports.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -16,6 +16,6 @@\n #![crate_type = \"dylib\"]\n \n #[macro_reexport(reexported)]\n+//~^ ERROR macros reexports are experimental and possibly buggy\n #[macro_use] #[no_link]\n extern crate macro_reexport_1;\n-//~^ ERROR macros reexports are experimental and possibly buggy"}, {"sha": "72fdcc76cf4f62a236e2453290f31db54a12f9df", "filename": "src/test/compile-fail/feature-gate-fn_must_use.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-fn_must_use.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -13,12 +13,12 @@\n struct MyStruct;\n \n impl MyStruct {\n-    #[must_use]\n-    fn need_to_use_method() -> bool { true } //~ WARN `#[must_use]` on methods is experimental\n+    #[must_use] //~ WARN `#[must_use]` on methods is experimental\n+    fn need_to_use_method() -> bool { true }\n }\n \n-#[must_use]\n-fn need_to_use_it() -> bool { true } //~ WARN `#[must_use]` on functions is experimental\n+#[must_use] //~ WARN `#[must_use]` on functions is experimental\n+fn need_to_use_it() -> bool { true }\n \n \n // Feature gates are tidy-required to have a specially named (or"}, {"sha": "429cec7ec90d05076456f82abf144c65f2624e0c", "filename": "src/test/compile-fail/feature-gate-repr-simd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr-simd.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[repr(simd)]\n-struct Foo(u64, u64); //~ error: SIMD types are experimental\n+#[repr(simd)] //~ error: SIMD types are experimental\n+struct Foo(u64, u64);\n \n fn main() {}"}, {"sha": "9591d367a2d191ef99a2e92476c602dc28184a10", "filename": "src/test/compile-fail/feature-gate-repr_align.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-repr_align.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n #![feature(attr_literals)]\n \n-#[repr(align(64))]\n-struct Foo(u64, u64); //~ error: the struct `#[repr(align(u16))]` attribute is experimental\n+#[repr(align(64))] //~ error: the struct `#[repr(align(u16))]` attribute is experimental\n+struct Foo(u64, u64);\n \n fn main() {}"}, {"sha": "025eaca5533362321cbf767b0ef7f7af67305c54", "filename": "src/test/compile-fail/feature-gate-simd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -11,13 +11,12 @@\n \n // pretty-expanded FIXME #23616\n \n-#[repr(simd)]\n+#[repr(simd)] //~ ERROR SIMD types are experimental\n struct RGBA {\n     r: f32,\n     g: f32,\n     b: f32,\n     a: f32\n }\n-//~^^^^^^ ERROR SIMD types are experimental and possibly buggy (see issue #27731)\n \n pub fn main() {}"}, {"sha": "6eec1779a2d87d689e5370e1ad3597af3f4ee022", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -354,8 +354,7 @@ mod repr {\n     #[repr = \"3900\"] fn f() { }\n     //~^ WARN unused attribute\n \n-    #[repr = \"3900\"] struct S;\n-    //~^ WARN unused attribute\n+    struct S;\n \n     #[repr = \"3900\"] type T = S;\n     //~^ WARN unused attribute"}, {"sha": "d5ccd2ea7ad3f6d2caf1c217169bed80affa1a7c", "filename": "src/test/ui/span/gated-features-attr-spans.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.rs?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(attr_literals)]\n+\n+#[repr(align(16))]\n+struct Gem {\n+    mohs_hardness: u8,\n+    poofed: bool,\n+    weapon: Weapon,\n+}\n+\n+#[repr(simd)]\n+struct Weapon {\n+    name: String,\n+    damage: u32\n+}\n+\n+impl Gem {\n+    #[must_use] fn summon_weapon(&self) -> Weapon { self.weapon }\n+}\n+\n+#[must_use]\n+fn bubble(gem: Gem) -> Result<Gem, ()> {\n+    if gem.poofed {\n+        Ok(gem)\n+    } else {\n+        Err(())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "66b2567f728a39e19f2fdadf8615dbde21f1ae4e", "filename": "src/test/ui/span/gated-features-attr-spans.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8bb29465d0cba5216ba6e8ec34d5b379392f78aa/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fgated-features-attr-spans.stderr?ref=8bb29465d0cba5216ba6e8ec34d5b379392f78aa", "patch": "@@ -0,0 +1,34 @@\n+error: the struct `#[repr(align(u16))]` attribute is experimental (see issue #33626)\n+  --> $DIR/gated-features-attr-spans.rs:13:1\n+   |\n+13 | #[repr(align(16))]\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_align)] to the crate attributes to enable\n+\n+error: SIMD types are experimental and possibly buggy (see issue #27731)\n+  --> $DIR/gated-features-attr-spans.rs:20:1\n+   |\n+20 | #[repr(simd)]\n+   | ^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(repr_simd)] to the crate attributes to enable\n+\n+warning: `#[must_use]` on methods is experimental (see issue #43302)\n+  --> $DIR/gated-features-attr-spans.rs:27:5\n+   |\n+27 |     #[must_use] fn summon_weapon(&self) -> Weapon { self.weapon }\n+   |     ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n+\n+warning: `#[must_use]` on functions is experimental (see issue #43302)\n+  --> $DIR/gated-features-attr-spans.rs:30:1\n+   |\n+30 | #[must_use]\n+   | ^^^^^^^^^^^\n+   |\n+   = help: add #![feature(fn_must_use)] to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+"}]}