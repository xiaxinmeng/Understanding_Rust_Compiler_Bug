{"sha": "c9de7d7a20c11d2df26a6580a964f5755a08ad15", "node_id": "C_kwDOAAsO6NoAKGM5ZGU3ZDdhMjBjMTFkMmRmMjZhNjU4MGE5NjRmNTc1NWEwOGFkMTU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-05T12:07:51Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-15T20:26:24Z"}, "message": "Use LocalDefId in rustc_passes::entry.", "tree": {"sha": "66d632d0d41de6daad4fe6dc6678eb9d3cf1c2cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d632d0d41de6daad4fe6dc6678eb9d3cf1c2cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9de7d7a20c11d2df26a6580a964f5755a08ad15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9de7d7a20c11d2df26a6580a964f5755a08ad15", "html_url": "https://github.com/rust-lang/rust/commit/c9de7d7a20c11d2df26a6580a964f5755a08ad15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9de7d7a20c11d2df26a6580a964f5755a08ad15/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60064726aee0d05c41bf6ff0eac4699f47762b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/60064726aee0d05c41bf6ff0eac4699f47762b05", "html_url": "https://github.com/rust-lang/rust/commit/60064726aee0d05c41bf6ff0eac4699f47762b05"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "8ab6c4eeae50058c92fd4638cdf0afcb75460c50", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c9de7d7a20c11d2df26a6580a964f5755a08ad15/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9de7d7a20c11d2df26a6580a964f5755a08ad15/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=c9de7d7a20c11d2df26a6580a964f5755a08ad15", "patch": "@@ -1,8 +1,8 @@\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{DefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n+use rustc_hir::{ForeignItem, ImplItem, Item, ItemKind, Node, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -18,14 +18,14 @@ struct EntryContext<'a, 'tcx> {\n     map: Map<'tcx>,\n \n     /// The function that has attribute named `main`.\n-    attr_main_fn: Option<(HirId, Span)>,\n+    attr_main_fn: Option<(LocalDefId, Span)>,\n \n     /// The function that has the attribute 'start' on it.\n-    start_fn: Option<(HirId, Span)>,\n+    start_fn: Option<(LocalDefId, Span)>,\n \n     /// The functions that one might think are `main` but aren't, e.g.\n     /// main functions not defined at the top level. For diagnostics.\n-    non_main_fns: Vec<(HirId, Span)>,\n+    non_main_fns: Vec<Span>,\n }\n \n impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n@@ -112,11 +112,11 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n         }\n         EntryPointType::MainNamed => (),\n         EntryPointType::OtherMain => {\n-            ctxt.non_main_fns.push((item.hir_id(), item.span));\n+            ctxt.non_main_fns.push(item.span);\n         }\n         EntryPointType::MainAttr => {\n             if ctxt.attr_main_fn.is_none() {\n-                ctxt.attr_main_fn = Some((item.hir_id(), item.span));\n+                ctxt.attr_main_fn = Some((item.def_id, item.span));\n             } else {\n                 struct_span_err!(\n                     ctxt.session,\n@@ -131,7 +131,7 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n         }\n         EntryPointType::Start => {\n             if ctxt.start_fn.is_none() {\n-                ctxt.start_fn = Some((item.hir_id(), item.span));\n+                ctxt.start_fn = Some((item.def_id, item.span));\n             } else {\n                 struct_span_err!(ctxt.session, item.span, E0138, \"multiple `start` functions\")\n                     .span_label(ctxt.start_fn.unwrap().1, \"previous `#[start]` function here\")\n@@ -143,16 +143,16 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n }\n \n fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n-    if let Some((hir_id, _)) = visitor.start_fn {\n-        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Start))\n-    } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n-        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Main))\n+    if let Some((def_id, _)) = visitor.start_fn {\n+        Some((def_id.to_def_id(), EntryFnType::Start))\n+    } else if let Some((def_id, _)) = visitor.attr_main_fn {\n+        Some((def_id.to_def_id(), EntryFnType::Main))\n     } else {\n         if let Some(main_def) = tcx.resolutions(()).main_def {\n             if let Some(def_id) = main_def.opt_fn_def_id() {\n                 // non-local main imports are handled below\n-                if def_id.is_local() {\n-                    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+                if let Some(def_id) = def_id.as_local() {\n+                    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n                     if matches!(tcx.hir().find(hir_id), Some(Node::ForeignItem(_))) {\n                         tcx.sess\n                             .struct_span_err(\n@@ -201,7 +201,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     );\n     let filename = &tcx.sess.local_crate_source_file;\n     let note = if !visitor.non_main_fns.is_empty() {\n-        for &(_, span) in &visitor.non_main_fns {\n+        for &span in &visitor.non_main_fns {\n             err.span_note(span, \"here is a function named `main`\");\n         }\n         err.note(\"you have one or more functions named `main` not defined at the crate level\");"}]}