{"sha": "90bb7a34764b460681dca1efb333ff378478dbd8", "node_id": "C_kwDOAAsO6NoAKDkwYmI3YTM0NzY0YjQ2MDY4MWRjYTFlZmIzMzNmZjM3ODQ3OGRiZDg", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-01T02:22:47Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-02-18T14:16:17Z"}, "message": "New lint `cast_enum_truncation`", "tree": {"sha": "4e54afc60f12512de277bd9cee49d6549cc905b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e54afc60f12512de277bd9cee49d6549cc905b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90bb7a34764b460681dca1efb333ff378478dbd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90bb7a34764b460681dca1efb333ff378478dbd8", "html_url": "https://github.com/rust-lang/rust/commit/90bb7a34764b460681dca1efb333ff378478dbd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90bb7a34764b460681dca1efb333ff378478dbd8/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a466454ab280f0dd405b713c1a3610de234d9ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a466454ab280f0dd405b713c1a3610de234d9ce", "html_url": "https://github.com/rust-lang/rust/commit/8a466454ab280f0dd405b713c1a3610de234d9ce"}], "stats": {"total": 235, "additions": 183, "deletions": 52}, "files": [{"sha": "1b52a6fcd05e979540ef2b559058779a8df04fef", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -3068,6 +3068,7 @@ Released 2018-09-13\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons\n+[`cast_enum_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_enum_truncation\n [`cast_lossless`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless\n [`cast_possible_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation\n [`cast_possible_wrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap"}, {"sha": "6c938062c1972157da5d56acb23f768ca8f30676", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -2,12 +2,14 @@ use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::expr_or_init;\n use clippy_utils::ty::is_isize_or_usize;\n+use rustc_ast::ast;\n+use rustc_attr::IntType;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, FloatTy, Ty};\n+use rustc_middle::ty::{self, FloatTy, Ty, VariantDiscr};\n \n-use super::{utils, CAST_POSSIBLE_TRUNCATION};\n+use super::{utils, CAST_ENUM_TRUNCATION, CAST_POSSIBLE_TRUNCATION};\n \n fn constant_int(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<u128> {\n     if let Some((Constant::Int(c), _)) = constant(cx, cx.typeck_results(), expr) {\n@@ -110,27 +112,54 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>,\n         },\n \n         (ty::Adt(def, _), true) if def.is_enum() => {\n-            if let ExprKind::Path(p) = &cast_expr.kind\n-                && let Res::Def(DefKind::Ctor(..), _) = cx.qpath_res(p, cast_expr.hir_id)\n+            let (from_nbits, variant) = if let ExprKind::Path(p) = &cast_expr.kind\n+                && let Res::Def(DefKind::Ctor(..), id) = cx.qpath_res(p, cast_expr.hir_id)\n             {\n-                return\n-            }\n-\n-            let from_nbits = utils::enum_ty_to_nbits(def, cx.tcx);\n+                let i = def.variant_index_with_ctor_id(id);\n+                let variant = &def.variants[i];\n+                let nbits: u64 = match variant.discr {\n+                    VariantDiscr::Explicit(id) => utils::read_explicit_enum_value(cx.tcx, id).unwrap().nbits(),\n+                    VariantDiscr::Relative(x) => {\n+                        match def.variants[(i.as_usize() - x as usize).into()].discr {\n+                            VariantDiscr::Explicit(id) => {\n+                                utils::read_explicit_enum_value(cx.tcx, id).unwrap().add(x).nbits()\n+                            }\n+                            VariantDiscr::Relative(_) => (32 - x.leading_zeros()).into(),\n+                        }\n+                    }\n+                };\n+                (nbits, Some(variant))\n+            } else {\n+                (utils::enum_ty_to_nbits(def, cx.tcx), None)\n+            };\n             let to_nbits = utils::int_ty_to_nbits(cast_to, cx.tcx);\n \n-            let suffix = if is_isize_or_usize(cast_to) {\n-                if from_nbits > 32 {\n-                    \" on targets with 32-bit wide pointers\"\n-                } else {\n-                    return;\n-                }\n-            } else if to_nbits < from_nbits {\n-                \"\"\n-            } else {\n-                return;\n+            let cast_from_ptr_size = def.repr.int.map_or(true, |ty| {\n+                matches!(\n+                    ty,\n+                    IntType::SignedInt(ast::IntTy::Isize) | IntType::UnsignedInt(ast::UintTy::Usize)\n+                )\n+            });\n+            let suffix = match (cast_from_ptr_size, is_isize_or_usize(cast_to)) {\n+                (false, false) if from_nbits > to_nbits => \"\",\n+                (true, false) if from_nbits > to_nbits => \"\",\n+                (false, true) if from_nbits > 64 => \"\",\n+                (false, true) if from_nbits > 32 => \" on targets with 32-bit wide pointers\",\n+                _ => return,\n             };\n \n+            if let Some(variant) = variant {\n+                span_lint(\n+                    cx,\n+                    CAST_ENUM_TRUNCATION,\n+                    expr.span,\n+                    &format!(\n+                        \"casting `{}::{}` to `{}` will truncate the value{}\",\n+                        cast_from, variant.name, cast_to, suffix,\n+                    ),\n+                );\n+                return;\n+            }\n             format!(\n                 \"casting `{}` to `{}` may truncate the value{}\",\n                 cast_from, cast_to, suffix,"}, {"sha": "f2077c569c04121a1232d7d3b483dc927f2069e2", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -390,6 +390,25 @@ declare_clippy_lint! {\n     \"casting using `as` from and to raw pointers that doesn't change its mutability, where `pointer::cast` could take the place of `as`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for casts from an enum type to an integral type which will definitely truncate the\n+    /// value.\n+    ///\n+    /// ### Why is this bad?\n+    /// The resulting integral value will not match the value of the variant it came from.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// enum E { X = 256 };\n+    /// let _ = E::X as u8;\n+    /// ```\n+    #[clippy::version = \"1.60.0\"]\n+    pub CAST_ENUM_TRUNCATION,\n+    suspicious,\n+    \"casts from an enum type to an integral type which will truncate the value\"\n+}\n+\n pub struct Casts {\n     msrv: Option<RustcVersion>,\n }\n@@ -415,6 +434,7 @@ impl_lint_pass!(Casts => [\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     CHAR_LIT_AS_U8,\n     PTR_AS_PTR,\n+    CAST_ENUM_TRUNCATION,\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {"}, {"sha": "fab0c194b37595f48ae5b75d058a042ad66d0327", "filename": "clippy_lints/src/casts/utils.rs", "status": "modified", "additions": 66, "deletions": 30, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Fcasts%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Futils.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -1,5 +1,6 @@\n use rustc_middle::mir::interpret::{ConstValue, Scalar};\n use rustc_middle::ty::{self, AdtDef, IntTy, Ty, TyCtxt, UintTy, VariantDiscr};\n+use rustc_span::def_id::DefId;\n use rustc_target::abi::Size;\n \n /// Returns the size in bits of an integral type.\n@@ -26,48 +27,83 @@ pub(super) fn int_ty_to_nbits(typ: Ty<'_>, tcx: TyCtxt<'_>) -> u64 {\n     }\n }\n \n+pub(super) enum EnumValue {\n+    Unsigned(u128),\n+    Signed(i128),\n+}\n+impl EnumValue {\n+    pub(super) fn add(self, n: u32) -> Self {\n+        match self {\n+            Self::Unsigned(x) => Self::Unsigned(x + u128::from(n)),\n+            Self::Signed(x) => Self::Signed(x + i128::from(n)),\n+        }\n+    }\n+\n+    pub(super) fn nbits(self) -> u64 {\n+        match self {\n+            Self::Unsigned(x) => 128 - x.leading_zeros(),\n+            Self::Signed(x) if x < 0 => 128 - (-(x + 1)).leading_zeros() + 1,\n+            Self::Signed(x) => 128 - x.leading_zeros(),\n+        }\n+        .into()\n+    }\n+}\n+\n+#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n+pub(super) fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n+    if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n+        match tcx.type_of(id).kind() {\n+            ty::Int(_) => Some(EnumValue::Signed(match value.size().bytes() {\n+                1 => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n+                2 => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n+                4 => i128::from(value.assert_bits(Size::from_bytes(4)) as u32 as i32),\n+                8 => i128::from(value.assert_bits(Size::from_bytes(8)) as u64 as i64),\n+                16 => value.assert_bits(Size::from_bytes(16)) as i128,\n+                _ => return None,\n+            })),\n+            ty::Uint(_) => Some(EnumValue::Unsigned(match value.size().bytes() {\n+                1 => value.assert_bits(Size::from_bytes(1)),\n+                2 => value.assert_bits(Size::from_bytes(2)),\n+                4 => value.assert_bits(Size::from_bytes(4)),\n+                8 => value.assert_bits(Size::from_bytes(8)),\n+                16 => value.assert_bits(Size::from_bytes(16)),\n+                _ => return None,\n+            })),\n+            _ => None,\n+        }\n+    } else {\n+        None\n+    }\n+}\n+\n pub(super) fn enum_ty_to_nbits(adt: &AdtDef, tcx: TyCtxt<'_>) -> u64 {\n     let mut explicit = 0i128;\n     let (start, end) = adt\n         .variants\n         .iter()\n-        .fold((i128::MAX, i128::MIN), |(start, end), variant| match variant.discr {\n+        .fold((0, i128::MIN), |(start, end), variant| match variant.discr {\n             VariantDiscr::Relative(x) => match explicit.checked_add(i128::from(x)) {\n                 Some(x) => (start, end.max(x)),\n                 None => (i128::MIN, end),\n             },\n-            VariantDiscr::Explicit(id) => {\n-                let ty = tcx.type_of(id);\n-                if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n-                    #[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n-                    let value = match (value.size().bytes(), ty.kind()) {\n-                        (1, ty::Int(_)) => i128::from(value.assert_bits(Size::from_bytes(1)) as u8 as i8),\n-                        (1, ty::Uint(_)) => i128::from(value.assert_bits(Size::from_bytes(1)) as u8),\n-                        (2, ty::Int(_)) => i128::from(value.assert_bits(Size::from_bytes(2)) as u16 as i16),\n-                        (2, ty::Uint(_)) => i128::from(value.assert_bits(Size::from_bytes(2)) as u16),\n-                        (4, ty::Int(_)) => i128::from(value.assert_bits(Size::from_bytes(4)) as u32 as i32),\n-                        (4, ty::Uint(_)) => i128::from(value.assert_bits(Size::from_bytes(4)) as u32),\n-                        (8, ty::Int(_)) => i128::from(value.assert_bits(Size::from_bytes(8)) as u64 as i64),\n-                        (8, ty::Uint(_)) => i128::from(value.assert_bits(Size::from_bytes(8)) as u64),\n-                        (16, ty::Int(_)) => value.assert_bits(Size::from_bytes(16)) as i128,\n-                        (16, ty::Uint(_)) => match i128::try_from(value.assert_bits(Size::from_bytes(16))) {\n-                            Ok(x) => x,\n-                            // Requires 128 bits\n-                            Err(_) => return (i128::MIN, end),\n-                        },\n-                        // Shouldn't happen if compilation was successful\n-                        _ => return (start, end),\n-                    };\n-                    explicit = value;\n-                    (start.min(value), end.max(value))\n-                } else {\n-                    // Shouldn't happen if compilation was successful\n-                    (start, end)\n-                }\n+            VariantDiscr::Explicit(id) => match read_explicit_enum_value(tcx, id) {\n+                Some(EnumValue::Signed(x)) => {\n+                    explicit = x;\n+                    (start.min(x), end.max(x))\n+                },\n+                Some(EnumValue::Unsigned(x)) => match i128::try_from(x) {\n+                    Ok(x) => {\n+                        explicit = x;\n+                        (start, end.max(x))\n+                    },\n+                    Err(_) => (i128::MIN, end),\n+                },\n+                None => (start, end),\n             },\n         });\n \n-    if start >= end {\n+    if start > end {\n+        // No variants.\n         0\n     } else {\n         let neg_bits = if start < 0 {"}, {"sha": "c6f8470cd7db72cd6531ec12d80552ddf7f1cfd8", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -23,6 +23,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),"}, {"sha": "75ef1b0a9d511125944d69610376da6e0ac5dad1", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -67,6 +67,7 @@ store.register_lints(&[\n     cargo::REDUNDANT_FEATURE_NAMES,\n     cargo::WILDCARD_DEPENDENCIES,\n     case_sensitive_file_extension_comparisons::CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n+    casts::CAST_ENUM_TRUNCATION,\n     casts::CAST_LOSSLESS,\n     casts::CAST_POSSIBLE_TRUNCATION,\n     casts::CAST_POSSIBLE_WRAP,"}, {"sha": "6a8859e19d71d1c15adbe0a77f2522f3ff035cef", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -7,6 +7,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_LOCK),\n     LintId::of(await_holding_invalid::AWAIT_HOLDING_REFCELL_REF),\n+    LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),"}, {"sha": "a21a87899aa168689289b78588d7479c9153943a", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -25,6 +25,7 @@\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n+extern crate rustc_attr;\n extern crate rustc_data_structures;\n extern crate rustc_driver;\n extern crate rustc_errors;"}, {"sha": "2e31ad3172ee8cef1a5271c27c2fd8367b7d417c", "filename": "tests/ui/cast.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -139,7 +139,9 @@ fn main() {\n     impl E2 {\n         fn test(self) {\n             let _ = self as u8;\n+            let _ = Self::B as u8;\n             let _ = self as i16; // Don't lint. `255..=256` fits in i16\n+            let _ = Self::A as u8; // Don't lint.\n         }\n     }\n \n@@ -174,7 +176,9 @@ fn main() {\n     impl E5 {\n         fn test(self) {\n             let _ = self as i8;\n+            let _ = Self::A as i8;\n             let _ = self as i16; // Don't lint. `-129..=127` fits in i16\n+            let _ = Self::B as u8; // Don't lint.\n         }\n     }\n \n@@ -189,6 +193,7 @@ fn main() {\n             let _ = self as i16;\n             let _ = Self::A as u16; // Don't lint. `2^16-1` fits in u16\n             let _ = self as u32; // Don't lint. `2^16-1..=2^16` fits in u32\n+            let _ = Self::A as u16; // Don't lint.\n         }\n     }\n \n@@ -201,6 +206,7 @@ fn main() {\n     impl E7 {\n         fn test(self) {\n             let _ = self as usize;\n+            let _ = Self::A as usize; // Don't lint.\n             let _ = self as u64; // Don't lint. `2^32-1..=2^32` fits in u64\n         }\n     }\n@@ -227,7 +233,22 @@ fn main() {\n     }\n     impl E9 {\n         fn test(self) {\n+            let _ = Self::A as u8; // Don't lint.\n             let _ = self as u128; // Don't lint. `0..=2^128-1` fits in u128\n         }\n     }\n+\n+    #[derive(Clone, Copy)]\n+    #[repr(usize)]\n+    enum E10 {\n+        A,\n+        B = u32::MAX as usize,\n+    }\n+    impl E10 {\n+        fn test(self) {\n+            let _ = self as u16;\n+            let _ = Self::B as u32; // Don't lint.\n+            let _ = self as u64; // Don't lint.\n+        }\n+    }\n }"}, {"sha": "7a68c0984f140dda78c8c6d5b927b6867b76beac", "filename": "tests/ui/cast.stderr", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/90bb7a34764b460681dca1efb333ff378478dbd8/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/90bb7a34764b460681dca1efb333ff378478dbd8/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=90bb7a34764b460681dca1efb333ff378478dbd8", "patch": "@@ -156,23 +156,43 @@ error: casting `main::E2` to `u8` may truncate the value\n LL |             let _ = self as u8;\n    |                     ^^^^^^^^^^\n \n+error: casting `main::E2::B` to `u8` will truncate the value\n+  --> $DIR/cast.rs:142:21\n+   |\n+LL |             let _ = Self::B as u8;\n+   |                     ^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::cast-enum-truncation` implied by `-D warnings`\n+\n error: casting `main::E5` to `i8` may truncate the value\n-  --> $DIR/cast.rs:176:21\n+  --> $DIR/cast.rs:178:21\n    |\n LL |             let _ = self as i8;\n    |                     ^^^^^^^^^^\n \n+error: casting `main::E5::A` to `i8` will truncate the value\n+  --> $DIR/cast.rs:179:21\n+   |\n+LL |             let _ = Self::A as i8;\n+   |                     ^^^^^^^^^^^^^\n+\n error: casting `main::E6` to `i16` may truncate the value\n-  --> $DIR/cast.rs:189:21\n+  --> $DIR/cast.rs:193:21\n    |\n LL |             let _ = self as i16;\n    |                     ^^^^^^^^^^^\n \n error: casting `main::E7` to `usize` may truncate the value on targets with 32-bit wide pointers\n-  --> $DIR/cast.rs:203:21\n+  --> $DIR/cast.rs:208:21\n    |\n LL |             let _ = self as usize;\n    |                     ^^^^^^^^^^^^^\n \n-error: aborting due to 28 previous errors\n+error: casting `main::E10` to `u16` may truncate the value\n+  --> $DIR/cast.rs:249:21\n+   |\n+LL |             let _ = self as u16;\n+   |                     ^^^^^^^^^^^\n+\n+error: aborting due to 31 previous errors\n "}]}