{"sha": "3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "node_id": "C_kwDOAAsO6NoAKDNiMjA3M2YwNzYyY2ZmNGQzZDYyNWJiMTAwMTdlMGNlNGU3YWJlNTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-17T19:16:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-17T19:16:11Z"}, "message": "Auto merge of #112746 - matthiaskrgr:rollup-se59bfd, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #110805 (Github action to periodically `cargo update` to keep dependencies current)\n - #112435 (Allow overwriting the sysroot compile flag via --rustc-args)\n - #112610 (Bump stdarch)\n - #112619 (Suggest bumping download-ci-llvm-stamp if the build config for llvm changes)\n - #112738 (make ice msg \"Unknown runtime phase\" a bit nicer)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3fb5fa730941ac781a9a2c3780c7e608e45b8596", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb5fa730941ac781a9a2c3780c7e608e45b8596"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "html_url": "https://github.com/rust-lang/rust/commit/3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a29070f07e47a244c8199ad582f93172019743", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a29070f07e47a244c8199ad582f93172019743", "html_url": "https://github.com/rust-lang/rust/commit/a8a29070f07e47a244c8199ad582f93172019743"}, {"sha": "5518eb863f3a4db17de449a0945e1d6647bda97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5518eb863f3a4db17de449a0945e1d6647bda97d", "html_url": "https://github.com/rust-lang/rust/commit/5518eb863f3a4db17de449a0945e1d6647bda97d"}], "stats": {"total": 158, "additions": 153, "deletions": 5}, "files": [{"sha": "2eccd28e5bb1fb76ae98d7a4d18b7ba1158daa72", "filename": ".github/workflows/dependencies.yml", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/.github%2Fworkflows%2Fdependencies.yml", "raw_url": "https://github.com/rust-lang/rust/raw/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/.github%2Fworkflows%2Fdependencies.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdependencies.yml?ref=3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "patch": "@@ -0,0 +1,139 @@\n+# Automatically run `cargo update` periodically\n+\n+---\n+name: Bump dependencies in Cargo.lock\n+on:\n+  schedule:\n+    # Run weekly\n+    - cron: '0 0 * * Sun'\n+  workflow_dispatch:\n+    # Needed so we can run it manually\n+permissions:\n+  contents: read\n+defaults:\n+  run:\n+    shell: bash\n+env:\n+  # So cargo doesn't complain about unstable features\n+  RUSTC_BOOTSTRAP: 1\n+  PR_TITLE: Weekly `cargo update`\n+  PR_MESSAGE: |\n+    Automation to keep dependencies in `Cargo.lock` current.\n+\n+    The following is the output from `cargo update`:\n+  COMMIT_MESSAGE: \"cargo update \\n\\n\"\n+\n+jobs:\n+  not-waiting-on-bors:\n+    name: skip if S-waiting-on-bors\n+    runs-on: ubuntu-latest\n+    steps:\n+      - env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: |\n+          # Fetch state and labels of PR\n+          # Or exit successfully if PR does not exist\n+          JSON=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json labels,state || exit 0)\n+          STATE=$(echo \"$JSON\" | jq -r '.state')\n+          WAITING_ON_BORS=$(echo \"$JSON\" | jq '.labels[] | any(.name == \"S-waiting-on-bors\"; .)')\n+\n+          # Exit with error if open and S-waiting-on-bors\n+          if [[ \"$STATE\" == \"OPEN\" && \"$WAITING_ON_BORS\" == \"true\" ]]; then\n+            exit 1\n+          fi\n+\n+  update:\n+    name: update dependencies\n+    needs: not-waiting-on-bors\n+    runs-on: ubuntu-latest\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v3\n+        with:\n+          submodules: recursive\n+      - name: install the bootstrap toolchain\n+        run: |\n+          # Extract the stage0 version\n+          TOOLCHAIN=$(jq -r '.compiler | {version,date} | join(\"-\")' -- src/stage0.json)\n+          # Install and set as default\n+          rustup toolchain install --no-self-update --profile minimal $TOOLCHAIN\n+          rustup default $TOOLCHAIN\n+\n+      - name: cargo update\n+        # Remove first line that always just says \"Updating crates.io index\"\n+        run: cargo update 2>&1 | sed '/crates.io index/d' | tee -a cargo_update.log\n+      - name: upload Cargo.lock artifact for use in PR\n+        uses: actions/upload-artifact@v3\n+        with:\n+          name: Cargo-lock\n+          path: Cargo.lock\n+          retention-days: 1\n+      - name: upload cargo-update log artifact for use in PR\n+        uses: actions/upload-artifact@v3\n+        with:\n+          name: cargo-updates\n+          path: cargo_update.log\n+          retention-days: 1\n+\n+  pr:\n+    name: amend PR\n+    needs: update\n+    runs-on: ubuntu-latest\n+    permissions:\n+      contents: write\n+      pull-requests: write\n+    steps:\n+      - name: checkout the source code\n+        uses: actions/checkout@v3\n+\n+      - name: download Cargo.lock from update job\n+        uses: actions/download-artifact@v3\n+        with:\n+          name: Cargo-lock\n+      - name: download cargo-update log from update job\n+        uses: actions/download-artifact@v3\n+        with:\n+          name: cargo-updates\n+\n+      - name: craft PR body and commit message\n+        run: |\n+          echo \"${COMMIT_MESSAGE}\" > commit.txt\n+          cat cargo_update.log >> commit.txt\n+\n+          echo \"${PR_MESSAGE}\" > body.md\n+          echo '```txt' >> body.md\n+          cat cargo_update.log >> body.md\n+          echo '```' >> body.md\n+\n+      - name: commit\n+        run: |\n+          git config user.name github-actions\n+          git config user.email github-actions@github.com\n+          git switch --force-create cargo_update\n+          git add ./Cargo.lock\n+          git commit --no-verify --file=commit.txt\n+\n+      - name: push\n+        run: git push --no-verify --force --set-upstream origin cargo_update\n+\n+      - name: edit existing open pull request\n+        id: edit\n+        # Don't fail job if we need to open new PR\n+        continue-on-error: true\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: |\n+          # Exit with error if PR is closed\n+          STATE=$(gh pr view cargo_update --repo $GITHUB_REPOSITORY --json state --jq '.state')\n+          if [[ \"$STATE\" != \"OPEN\" ]]; then\n+            exit 1\n+          fi\n+\n+          gh pr edit cargo_update --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY\n+\n+      - name: open new pull request\n+        # Only run if there wasn't an existing PR\n+        if: steps.edit.outcome != 'success'\n+        env:\n+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+        run: gh pr create --title \"${PR_TITLE}\" --body-file body.md --repo $GITHUB_REPOSITORY"}, {"sha": "6aa20dbed92947cdab31f01cdb2bcf305770f6d2", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "patch": "@@ -145,7 +145,7 @@ impl MirPhase {\n             }\n             \"analysis\" => Self::Analysis(AnalysisPhase::parse(phase)),\n             \"runtime\" => Self::Runtime(RuntimePhase::parse(phase)),\n-            _ => panic!(\"Unknown MIR dialect {}\", dialect),\n+            _ => bug!(\"Unknown MIR dialect: '{}'\", dialect),\n         }\n     }\n }\n@@ -159,7 +159,7 @@ impl AnalysisPhase {\n         match &*phase.to_ascii_lowercase() {\n             \"initial\" => Self::Initial,\n             \"post_cleanup\" | \"post-cleanup\" | \"postcleanup\" => Self::PostCleanup,\n-            _ => panic!(\"Unknown analysis phase {}\", phase),\n+            _ => bug!(\"Unknown analysis phase: '{}'\", phase),\n         }\n     }\n }\n@@ -174,7 +174,7 @@ impl RuntimePhase {\n             \"initial\" => Self::Initial,\n             \"post_cleanup\" | \"post-cleanup\" | \"postcleanup\" => Self::PostCleanup,\n             \"optimized\" => Self::Optimized,\n-            _ => panic!(\"Unknown runtime phase {}\", phase),\n+            _ => bug!(\"Unknown runtime phase: '{}'\", phase),\n         }\n     }\n }"}, {"sha": "d77878b7299dd7e286799a6e8447048b65d2a861", "filename": "library/stdarch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstdarch?ref=3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "patch": "@@ -1 +1 @@\n-Subproject commit 7e2cdc675b92165c5f8c4c794620252be4605e74\n+Subproject commit d77878b7299dd7e286799a6e8447048b65d2a861"}, {"sha": "25b16e38e534a461ba865bae71913539f1140da5", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "patch": "@@ -1951,7 +1951,9 @@ impl<'test> TestCx<'test> {\n         rustc.arg(\"-Ztranslate-remapped-path-to-local-path=no\");\n \n         // Optionally prevent default --sysroot if specified in test compile-flags.\n-        if !self.props.compile_flags.iter().any(|flag| flag.starts_with(\"--sysroot\")) {\n+        if !self.props.compile_flags.iter().any(|flag| flag.starts_with(\"--sysroot\"))\n+            && !self.config.host_rustcflags.iter().any(|flag| flag == \"--sysroot\")\n+        {\n             // In stage 0, make sure we use `stage0-sysroot` instead of the bootstrap sysroot.\n             rustc.arg(\"--sysroot\").arg(&self.config.sysroot_base);\n         }"}, {"sha": "9248e8fc28a13fffbef0e5136eb211b058fe9775", "filename": "triagebot.toml", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3b2073f0762cff4d3d625bb10017e0ce4e7abe50/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=3b2073f0762cff4d3d625bb10017e0ce4e7abe50", "patch": "@@ -477,6 +477,13 @@ message = \"This PR changes src/bootstrap/defaults/config.compiler.toml. If appro\n [mentions.\"src/bootstrap/defaults/config.codegen.toml\"]\n message = \"This PR changes src/bootstrap/defaults/config.codegen.toml. If appropriate, please also update `config.compiler.toml` so the defaults are in sync.\"\n \n+[mentions.\"src/bootstrap/llvm.rs\"]\n+message = \"This PR changes how LLVM is built. Consider updating src/bootstrap/download-ci-llvm-stamp.\"\n+[mentions.\"compiler/rustc_llvm/build.rs\"]\n+message = \"This PR changes how LLVM is built. Consider updating src/bootstrap/download-ci-llvm-stamp.\"\n+[mentions.\"compiler/rustc_llvm/llvm-wrapper\"]\n+message = \"This PR changes how LLVM is built. Consider updating src/bootstrap/download-ci-llvm-stamp.\"\n+\n [mentions.\"tests/ui/deriving/deriving-all-codegen.stdout\"]\n message = \"Changes to the code generated for builtin derived traits.\"\n cc = [\"@nnethercote\"]"}]}