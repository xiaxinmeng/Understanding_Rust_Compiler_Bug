{"sha": "9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MjNkM2FjMmZmNWIwMDhkMjA3MDEyZWM1ZDM3YjJjNjlmNDAyZWQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-10T01:59:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-10T01:59:21Z"}, "message": "Remove transitional code", "tree": {"sha": "35ad1b902932e98a5fd959f0615f79acc60589bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35ad1b902932e98a5fd959f0615f79acc60589bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "html_url": "https://github.com/rust-lang/rust/commit/9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55a3a5fcc973663af3694f32be7a4df10a1a2cd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/55a3a5fcc973663af3694f32be7a4df10a1a2cd1", "html_url": "https://github.com/rust-lang/rust/commit/55a3a5fcc973663af3694f32be7a4df10a1a2cd1"}], "stats": {"total": 253, "additions": 0, "deletions": 253}, "files": [{"sha": "26bae14d1608d556342257efb49357c3679db25a", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -145,16 +145,6 @@ pub pure fn from_elem<T: Copy>(n_elts: uint, t: T) -> @[T] {\n \n #[cfg(notest)]\n pub mod traits {\n-    #[cfg(stage0)]\n-    pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/[const T]) -> @[T] {\n-            append(self, (*rhs))\n-        }\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     pub impl<T: Copy> @[T] : Add<&[const T],@[T]> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> @[T] {"}, {"sha": "874a36eb9f0cbcf09c55a17c03480fbcfd54a778", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -358,15 +358,6 @@ impl<A: Copy> DVec<A> {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<A:Copy> DVec<A>: Index<uint,A> {\n-    #[inline(always)]\n-    pure fn index(idx: uint) -> A {\n-        self.get_elt(idx)\n-    }\n-}\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n impl<A:Copy> DVec<A>: Index<uint,A> {\n     #[inline(always)]\n     pure fn index(&self, idx: uint) -> A {"}, {"sha": "3c6f5638d8d7c17611ad99ea60c5c0459056ef29", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -18,14 +18,6 @@ pub trait Drop {\n     fn finalize(&self);  // XXX: Rename to \"drop\"? --pcwalton\n }\n \n-#[cfg(stage0)]\n-#[lang=\"add\"]\n-pub trait Add<RHS,Result> {\n-    pure fn add(rhs: &RHS) -> Result;\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n #[lang=\"add\"]\n pub trait Add<RHS,Result> {\n     pure fn add(&self, rhs: &RHS) -> Result;\n@@ -81,14 +73,6 @@ pub trait Shr<RHS,Result> {\n     pure fn shr(&self, rhs: &RHS) -> Result;\n }\n \n-#[cfg(stage0)]\n-#[lang=\"index\"]\n-pub trait Index<Index,Result> {\n-    pure fn index(index: Index) -> Result;\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n #[lang=\"index\"]\n pub trait Index<Index,Result> {\n     pure fn index(&self, index: Index) -> Result;"}, {"sha": "e8ed35029d381d158c764475aabe4b5e08b63fcb", "filename": "src/libcore/str.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -2107,15 +2107,6 @@ impl ~str: Trimmable {\n \n #[cfg(notest)]\n pub mod traits {\n-    #[cfg(stage0)]\n-    impl ~str : Add<&str,~str> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/str) -> ~str {\n-            append(copy self, (*rhs))\n-        }\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     impl ~str : Add<&str,~str> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/str) -> ~str {"}, {"sha": "3386214ce13354b46ddba9109edffd9a6a0b61a3", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -1439,31 +1439,13 @@ impl<T: Ord> @[T] : Ord {\n \n #[cfg(notest)]\n pub mod traits {\n-    #[cfg(stage0)]\n-    impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/[const T]) -> ~[T] {\n-            append(copy self, (*rhs))\n-        }\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     impl<T: Copy> ~[T] : Add<&[const T],~[T]> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> ~[T] {\n             append(copy *self, (*rhs))\n         }\n     }\n \n-    #[cfg(stage0)]\n-    impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n-        #[inline(always)]\n-        pure fn add(rhs: & &self/[const T]) -> ~[mut T] {\n-            append_mut(copy self, (*rhs))\n-        }\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     impl<T: Copy> ~[mut T] : Add<&[const T],~[mut T]> {\n         #[inline(always)]\n         pure fn add(&self, rhs: & &self/[const T]) -> ~[mut T] {"}, {"sha": "5b9dc6cf3a895ad5925ecfea5b8949860c8f86ed", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -565,14 +565,6 @@ pure fn land(w0: uint, w1: uint) -> uint { return w0 & w1; }\n \n pure fn right(_w0: uint, w1: uint) -> uint { return w1; }\n \n-#[cfg(stage0)]\n-impl Bitv: ops::Index<uint,bool> {\n-    pure fn index(i: uint) -> bool {\n-        self.get(i)\n-    }\n-}\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n impl Bitv: ops::Index<uint,bool> {\n     pure fn index(&self, i: uint) -> bool {\n         self.get(i)"}, {"sha": "d439eef7cced39e94217fff64c9d1c92b5855745", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -57,16 +57,6 @@ pub mod reader {\n \n     // ebml reading\n \n-    #[cfg(stage0)]\n-    impl Doc: ops::Index<uint,Doc> {\n-        pure fn index(tag: uint) -> Doc {\n-            unsafe {\n-                get_doc(self, tag)\n-            }\n-        }\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     impl Doc: ops::Index<uint,Doc> {\n         pure fn index(&self, tag: uint) -> Doc {\n             unsafe {"}, {"sha": "39124dfbfbae21c2ca46a75055eeaa9e55897921", "filename": "src/libstd/map.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -429,16 +429,6 @@ pub mod chained {\n         }\n     }\n \n-    #[cfg(stage0)]\n-    impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n-        pure fn index(k: K) -> V {\n-            unsafe {\n-                self.get(k)\n-            }\n-        }\n-    }\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n         pure fn index(&self, k: K) -> V {\n             unsafe {"}, {"sha": "b16cf99cb4eff53691bb75ca683d58751da9c5bb", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -150,16 +150,6 @@ impl<V: Copy> SmallIntMap<V>: map::Map<uint, V> {\n     }\n }\n \n-#[cfg(stage0)]\n-impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n-    pure fn index(key: uint) -> V {\n-        unsafe {\n-            get(self, key)\n-        }\n-    }\n-}\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n impl<V: Copy> SmallIntMap<V>: ops::Index<uint, V> {\n     pure fn index(&self, key: uint) -> V {\n         unsafe {"}, {"sha": "6481785e61af25a91628301fc8e469f5b2235ae7", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -59,15 +59,6 @@ impl BytePos: cmp::Ord {\n     pure fn gt(&self, other: &BytePos) -> bool { **self > **other }\n }\n \n-#[cfg(stage0)]\n-impl BytePos: Add<BytePos, BytePos> {\n-    pure fn add(rhs: &BytePos) -> BytePos {\n-        BytePos(*self + **rhs)\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n impl BytePos: Add<BytePos, BytePos> {\n     pure fn add(&self, rhs: &BytePos) -> BytePos {\n         BytePos(**self + **rhs)\n@@ -109,15 +100,6 @@ impl CharPos: to_bytes::IterBytes {\n     }\n }\n \n-#[cfg(stage0)]\n-impl CharPos: Add<CharPos, CharPos> {\n-    pure fn add(rhs: &CharPos) -> CharPos {\n-        CharPos(*self + **rhs)\n-    }\n-}\n-\n-#[cfg(stage1)]\n-#[cfg(stage2)]\n impl CharPos: Add<CharPos, CharPos> {\n     pure fn add(&self, rhs: &CharPos) -> CharPos {\n         CharPos(**self + **rhs)"}, {"sha": "2a7b09795ced681d3914e61fb3228c178f47acd4", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -122,32 +122,6 @@ impl ext_ctxt: ext_ctxt_ast_builder {\n           span: dummy_sp()}\n     }\n \n-    #[cfg(stage0)]\n-    fn stmt_let(ident: ident, e: @ast::expr) -> @ast::stmt {\n-        // If the quasiquoter could interpolate idents, this is all\n-        // we'd need.\n-        //\n-        //let ext_cx = self;\n-        //#ast[stmt] { let $(ident) = $(e) }\n-\n-        @{node: ast::stmt_decl(@{node: ast::decl_local(~[\n-            @{node: {is_mutbl: false,\n-                     ty: self.ty_infer(),\n-                     pat: @{id: self.next_id(),\n-                            node: ast::pat_ident(ast::bind_infer,\n-                                                 path(~[ident],\n-                                                      dummy_sp()),\n-                                                 None),\n-                            span: dummy_sp()},\n-                     init: Some(self.move_expr(e)),\n-                     id: self.next_id()},\n-              span: dummy_sp()}]),\n-                               span: dummy_sp()}, self.next_id()),\n-         span: dummy_sp()}\n-     }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn stmt_let(ident: ident, e: @ast::expr) -> @ast::stmt {\n         let ext_cx = self;\n         quote_stmt!( let $ident = $e; )"}, {"sha": "5ce3898b3e85909f950f53c6ce6bb7aacf4aa5e4", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9723d3ac2ff5b008d207012ec5d37b2c69f402ed/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=9723d3ac2ff5b008d207012ec5d37b2c69f402ed", "patch": "@@ -302,47 +302,6 @@ impl state: to_type_decls {\n \n impl protocol: gen_init {\n \n-    #[cfg(stage0)]\n-    fn gen_init(cx: ext_ctxt) -> @ast::item {\n-        let ext_cx = cx;\n-\n-        debug!(\"gen_init\");\n-        let start_state = self.states[0];\n-\n-        let body = if !self.is_bounded() {\n-            match start_state.dir {\n-              send => #ast { pipes::entangle() },\n-              recv => {\n-                #ast {{\n-                    let (s, c) = pipes::entangle();\n-                    (move c, move s)\n-                }}\n-              }\n-            }\n-        }\n-        else {\n-            let body = self.gen_init_bounded(ext_cx);\n-            match start_state.dir {\n-              send => body,\n-              recv => {\n-                #ast {{\n-                    let (s, c) = $(body);\n-                    (move c, move s)\n-                }}\n-              }\n-            }\n-        };\n-\n-        cx.parse_item(fmt!(\"pub fn init%s() -> (client::%s, server::%s)\\\n-                            { use pipes::HasBuffer; %s }\",\n-                           start_state.ty_params.to_source(cx),\n-                           start_state.to_ty(cx).to_source(cx),\n-                           start_state.to_ty(cx).to_source(cx),\n-                           body.to_source(cx)))\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn gen_init(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n \n@@ -381,17 +340,6 @@ impl protocol: gen_init {\n                            body.to_source(cx)))\n     }\n \n-    #[cfg(stage0)]\n-    fn gen_buffer_init(ext_cx: ext_ctxt) -> @ast::expr {\n-        ext_cx.rec(self.states.map_to_vec(|s| {\n-            let fty = s.to_ty(ext_cx);\n-            ext_cx.field_imm(ext_cx.ident_of(s.name),\n-                             #ast { pipes::mk_packet::<$(fty)>() })\n-        }))\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn gen_buffer_init(ext_cx: ext_ctxt) -> @ast::expr {\n         ext_cx.rec(self.states.map_to_vec(|s| {\n             let fty = s.to_ty(ext_cx);\n@@ -402,35 +350,6 @@ impl protocol: gen_init {\n         }))\n     }\n \n-    #[cfg(stage0)]\n-    fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n-        debug!(\"gen_init_bounded\");\n-        let buffer_fields = self.gen_buffer_init(ext_cx);\n-        let buffer = #ast {\n-            ~{header: pipes::BufferHeader(),\n-              data: $(buffer_fields)}\n-        };\n-\n-        let entangle_body = ext_cx.block_expr(\n-            ext_cx.block(\n-                self.states.map_to_vec(\n-                    |s| ext_cx.parse_stmt(\n-                        fmt!(\"data.%s.set_buffer_(buffer)\",\n-                             s.name))),\n-                ext_cx.parse_expr(\n-                    fmt!(\"ptr::addr_of(&(data.%s))\",\n-                         self.states[0].name))));\n-\n-        #ast {{\n-            let buffer = $(buffer);\n-            do pipes::entangle_buffer(move buffer) |buffer, data| {\n-                $(entangle_body)\n-            }\n-        }}\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn gen_init_bounded(ext_cx: ext_ctxt) -> @ast::expr {\n         debug!(\"gen_init_bounded\");\n         let buffer_fields = self.gen_buffer_init(ext_cx);\n@@ -472,34 +391,6 @@ impl protocol: gen_init {\n                                .add_tys(cx.ty_vars(params)))\n     }\n \n-    #[cfg(stage0)]\n-    fn gen_buffer_type(cx: ext_ctxt) -> @ast::item {\n-        let ext_cx = cx;\n-        let mut params: ~[ast::ty_param] = ~[];\n-        let fields = do (copy self.states).map_to_vec |s| {\n-            for s.ty_params.each |tp| {\n-                match params.find(|tpp| tp.ident == tpp.ident) {\n-                  None => params.push(*tp),\n-                  _ => ()\n-                }\n-            }\n-            let ty = s.to_ty(cx);\n-            let fty = #ast[ty] {\n-                pipes::Packet<$(ty)>\n-            };\n-\n-            cx.ty_field_imm(cx.ident_of(s.name), fty)\n-        };\n-\n-        cx.item_ty_poly(\n-            cx.ident_of(~\"__Buffer\"),\n-            dummy_sp(),\n-            cx.ty_rec(fields),\n-            params)\n-    }\n-\n-    #[cfg(stage1)]\n-    #[cfg(stage2)]\n     fn gen_buffer_type(cx: ext_ctxt) -> @ast::item {\n         let ext_cx = cx;\n         let mut params: ~[ast::ty_param] = ~[];"}]}