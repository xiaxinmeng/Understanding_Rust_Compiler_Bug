{"sha": "c166b0386888b253313e1e7e982a2a06cadaac8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNjZiMDM4Njg4OGIyNTMzMTNlMWU3ZTk4MmEyYTA2Y2FkYWFjOGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T14:45:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-08T14:45:16Z"}, "message": "Auto merge of #50497 - RalfJung:pinmut, r=withoutboats\n\nRename Pin to PinMut, and some more breaking changes\n\nAs discussed at [1] \u00a73 and [2] and [3], a formal look at pinning requires considering a distinguished \"shared pinned\" mode/typestate.  Given that, it seems desirable to at least eventually actually expose that typestate as a reference type.  This renames Pin to PinMut, freeing the name Pin in case we want to use it for a shared pinned reference later on.\n\n[1] https://www.ralfj.de/blog/2018/04/10/safe-intrusive-collections-with-pinning.html\n[2] https://github.com/rust-lang/rfcs/pull/2349#issuecomment-379250361\n[3] https://github.com/rust-lang/rust/issues/49150#issuecomment-380488275\n\nCc @withoutboats", "tree": {"sha": "d15d462362c9be390bfe8bd16455c73d34233c90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d15d462362c9be390bfe8bd16455c73d34233c90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c166b0386888b253313e1e7e982a2a06cadaac8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c166b0386888b253313e1e7e982a2a06cadaac8b", "html_url": "https://github.com/rust-lang/rust/commit/c166b0386888b253313e1e7e982a2a06cadaac8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c166b0386888b253313e1e7e982a2a06cadaac8b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9", "html_url": "https://github.com/rust-lang/rust/commit/b183bd0ad40b0188fc242bfb9f68a0cf1704dbd9"}, {"sha": "939c25a522ddeaae60f905c787a1f28ceb5d7ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/939c25a522ddeaae60f905c787a1f28ceb5d7ee8", "html_url": "https://github.com/rust-lang/rust/commit/939c25a522ddeaae60f905c787a1f28ceb5d7ee8"}], "stats": {"total": 65, "additions": 34, "deletions": 31}, "files": [{"sha": "a15673442355125b5eb9e4c71647a3f70e6ce4a9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=c166b0386888b253313e1e7e982a2a06cadaac8b", "patch": "@@ -62,7 +62,7 @@ use core::fmt;\n use core::hash::{Hash, Hasher};\n use core::iter::FusedIterator;\n use core::marker::{Unpin, Unsize};\n-use core::mem::{self, Pin};\n+use core::mem::{self, PinMut};\n use core::ops::{CoerceUnsized, Deref, DerefMut, Generator, GeneratorState};\n use core::ptr::{self, NonNull, Unique};\n use core::convert::From;\n@@ -771,8 +771,8 @@ impl<T> PinBox<T> {\n #[unstable(feature = \"pin\", issue = \"49150\")]\n impl<T: ?Sized> PinBox<T> {\n     /// Get a pinned reference to the data in this PinBox.\n-    pub fn as_pin<'a>(&'a mut self) -> Pin<'a, T> {\n-        unsafe { Pin::new_unchecked(&mut *self.inner) }\n+    pub fn as_pin_mut<'a>(&'a mut self) -> PinMut<'a, T> {\n+        unsafe { PinMut::new_unchecked(&mut *self.inner) }\n     }\n \n     /// Get a mutable reference to the data inside this PinBox."}, {"sha": "db5f50a99cadc3471b33d531670cbc2c8f016ddf", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=c166b0386888b253313e1e7e982a2a06cadaac8b", "patch": "@@ -595,15 +595,15 @@ unsafe impl<T: ?Sized> Freeze for *mut T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n \n-/// Types which can be moved out of a `Pin`.\n+/// Types which can be moved out of a `PinMut`.\n ///\n-/// The `Unpin` trait is used to control the behavior of the [`Pin`] type. If a\n+/// The `Unpin` trait is used to control the behavior of the [`PinMut`] type. If a\n /// type implements `Unpin`, it is safe to move a value of that type out of the\n-/// `Pin` pointer.\n+/// `PinMut` pointer.\n ///\n /// This trait is automatically implemented for almost every type.\n ///\n-/// [`Pin`]: ../mem/struct.Pin.html\n+/// [`PinMut`]: ../mem/struct.PinMut.html\n #[unstable(feature = \"pin\", issue = \"49150\")]\n pub unsafe auto trait Unpin {}\n "}, {"sha": "6cbe26afae9eb7c879810f05adfd5dbf3a5c25b2", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c166b0386888b253313e1e7e982a2a06cadaac8b/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c166b0386888b253313e1e7e982a2a06cadaac8b", "patch": "@@ -1101,69 +1101,72 @@ impl<T: ::hash::Hash> ::hash::Hash for ManuallyDrop<T> {\n /// value implements the `Unpin` trait.\n #[unstable(feature = \"pin\", issue = \"49150\")]\n #[fundamental]\n-pub struct Pin<'a, T: ?Sized + 'a> {\n+pub struct PinMut<'a, T: ?Sized + 'a> {\n     inner: &'a mut T,\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unpin> Pin<'a, T> {\n-    /// Construct a new `Pin` around a reference to some data of a type that\n+impl<'a, T: ?Sized + Unpin> PinMut<'a, T> {\n+    /// Construct a new `PinMut` around a reference to some data of a type that\n     /// implements `Unpin`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn new(reference: &'a mut T) -> Pin<'a, T> {\n-        Pin { inner: reference }\n+    pub fn new(reference: &'a mut T) -> PinMut<'a, T> {\n+        PinMut { inner: reference }\n     }\n }\n \n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> Pin<'a, T> {\n-    /// Construct a new `Pin` around a reference to some data of a type that\n+impl<'a, T: ?Sized> PinMut<'a, T> {\n+    /// Construct a new `PinMut` around a reference to some data of a type that\n     /// may or may not implement `Unpin`.\n     ///\n     /// This constructor is unsafe because we do not know what will happen with\n     /// that data after the reference ends. If you cannot guarantee that the\n     /// data will never move again, calling this constructor is invalid.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn new_unchecked(reference: &'a mut T) -> Pin<'a, T> {\n-        Pin { inner: reference }\n+    pub unsafe fn new_unchecked(reference: &'a mut T) -> PinMut<'a, T> {\n+        PinMut { inner: reference }\n     }\n \n-    /// Borrow a Pin for a shorter lifetime than it already has.\n+    /// Reborrow a `PinMut` for a shorter lifetime.\n+    ///\n+    /// For example, `PinMut::get_mut(x.reborrow())` (unsafely) returns a\n+    /// short-lived mutable reference reborrowing from `x`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub fn borrow<'b>(this: &'b mut Pin<'a, T>) -> Pin<'b, T> {\n-        Pin { inner: this.inner }\n+    pub fn reborrow<'b>(&'b mut self) -> PinMut<'b, T> {\n+        PinMut { inner: self.inner }\n     }\n \n-    /// Get a mutable reference to the data inside of this `Pin`.\n+    /// Get a mutable reference to the data inside of this `PinMut`.\n     ///\n     /// This function is unsafe. You must guarantee that you will never move\n     /// the data out of the mutable reference you receive when you call this\n     /// function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn get_mut<'b>(this: &'b mut Pin<'a, T>) -> &'b mut T {\n+    pub unsafe fn get_mut(this: PinMut<'a, T>) -> &'a mut T {\n         this.inner\n     }\n \n     /// Construct a new pin by mapping the interior value.\n     ///\n-    /// For example, if you  wanted to get a `Pin` of a field of something, you\n+    /// For example, if you  wanted to get a `PinMut` of a field of something, you\n     /// could use this to get access to that field in one line of code.\n     ///\n     /// This function is unsafe. You must guarantee that the data you return\n     /// will not move so long as the argument value does not move (for example,\n     /// because it is one of the fields of that value), and also that you do\n     /// not move out of the argument you receive to the interior function.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n-    pub unsafe fn map<'b, U, F>(this: &'b mut Pin<'a, T>, f: F) -> Pin<'b, U> where\n+    pub unsafe fn map<U, F>(this: PinMut<'a, T>, f: F) -> PinMut<'a, U> where\n         F: FnOnce(&mut T) -> &mut U\n     {\n-        Pin { inner: f(this.inner) }\n+        PinMut { inner: f(this.inner) }\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> Deref for Pin<'a, T> {\n+impl<'a, T: ?Sized> Deref for PinMut<'a, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n@@ -1172,35 +1175,35 @@ impl<'a, T: ?Sized> Deref for Pin<'a, T> {\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unpin> DerefMut for Pin<'a, T> {\n+impl<'a, T: ?Sized + Unpin> DerefMut for PinMut<'a, T> {\n     fn deref_mut(&mut self) -> &mut T {\n         self.inner\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for Pin<'a, T> {\n+impl<'a, T: fmt::Debug + ?Sized> fmt::Debug for PinMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, f)\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: fmt::Display + ?Sized> fmt::Display for Pin<'a, T> {\n+impl<'a, T: fmt::Display + ?Sized> fmt::Display for PinMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(&**self, f)\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized> fmt::Pointer for Pin<'a, T> {\n+impl<'a, T: ?Sized> fmt::Pointer for PinMut<'a, T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Pointer::fmt(&(&*self.inner as *const T), f)\n     }\n }\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Pin<'a, U>> for Pin<'a, T> {}\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<PinMut<'a, U>> for PinMut<'a, T> {}\n \n #[unstable(feature = \"pin\", issue = \"49150\")]\n-unsafe impl<'a, T: ?Sized> Unpin for Pin<'a, T> {}\n+unsafe impl<'a, T: ?Sized> Unpin for PinMut<'a, T> {}"}]}