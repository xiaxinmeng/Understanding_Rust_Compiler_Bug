{"sha": "7c96d90c2081f3ca84b3786a125cf2c415335e40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOTZkOTBjMjA4MWYzY2E4NGIzNzg2YTEyNWNmMmM0MTUzMzVlNDA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T01:24:00Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-09T15:20:13Z"}, "message": "More explicit diagnostic when using a `vec![]` in a pattern\n\n```\nerror: unexpected `(` after qualified path\n  --> $DIR/vec-macro-in-pattern.rs:3:14\n   |\nLL |         Some(vec![x]) => (),\n   |              ^^^^^^^\n   |              |\n   |              unexpected `(` after qualified path\n   |              in this macro invocation\n   |              use a slice pattern here instead\n   |\n   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n```", "tree": {"sha": "7b9bc7f69a5a318efb6388ebd41eff8ae03fa1a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b9bc7f69a5a318efb6388ebd41eff8ae03fa1a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c96d90c2081f3ca84b3786a125cf2c415335e40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c96d90c2081f3ca84b3786a125cf2c415335e40", "html_url": "https://github.com/rust-lang/rust/commit/7c96d90c2081f3ca84b3786a125cf2c415335e40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c96d90c2081f3ca84b3786a125cf2c415335e40/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "813a3a5d4b2be4e2101faa73a067da02a704a598", "url": "https://api.github.com/repos/rust-lang/rust/commits/813a3a5d4b2be4e2101faa73a067da02a704a598", "html_url": "https://github.com/rust-lang/rust/commit/813a3a5d4b2be4e2101faa73a067da02a704a598"}], "stats": {"total": 75, "additions": 68, "deletions": 7}, "files": [{"sha": "36f059531d39de73ef119edd7e264f3a74e70826", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -686,12 +686,13 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         );\n     }\n \n-    fn parse_ast_fragment(&mut self,\n-                          toks: TokenStream,\n-                          kind: AstFragmentKind,\n-                          path: &Path,\n-                          span: Span)\n-                          -> AstFragment {\n+    fn parse_ast_fragment(\n+        &mut self,\n+        toks: TokenStream,\n+        kind: AstFragmentKind,\n+        path: &Path,\n+        span: Span,\n+    ) -> AstFragment {\n         let mut parser = self.cx.new_parser_from_tts(&toks.into_trees().collect::<Vec<_>>());\n         match parser.parse_ast_fragment(kind, false) {\n             Ok(fragment) => {\n@@ -700,6 +701,21 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             }\n             Err(mut err) => {\n                 err.set_span(span);\n+                match kind {\n+                    AstFragmentKind::Ty => {\n+                        err.span_label(\n+                            span,\n+                            \"this macro call doesn't expand to a type\",\n+                        );\n+                    }\n+                    AstFragmentKind::Pat => {\n+                        err.span_label(\n+                            span,\n+                            \"this macro call doesn't expand to a pattern\",\n+                        );\n+                    }\n+                    _ => {}\n+                };\n                 err.emit();\n                 self.cx.trace_macros_diag();\n                 kind.dummy(span)"}, {"sha": "a9d0b739d6ac70aa576cd03643abaa1a16465f74", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -70,6 +70,29 @@ impl<'a> ParserAnyMacro<'a> {\n             } else if !parser.sess.source_map().span_to_filename(parser.token.span).is_real() {\n                 e.span_label(site_span, \"in this macro invocation\");\n             }\n+            match kind {\n+                AstFragmentKind::Ty => {\n+                    e.span_label(\n+                        site_span,\n+                        \"this macro call doesn't expand to a type\",\n+                    );\n+                }\n+                AstFragmentKind::Pat if macro_ident.name == sym::vec => {\n+                    e.span_label(\n+                        site_span,\n+                        \"use a slice pattern here instead\",\n+                    );\n+                    e.help(\"for more information, see https://doc.rust-lang.org/edition-guide/\\\n+                              rust-2018/slice-patterns.html\");\n+                }\n+                AstFragmentKind::Pat => {\n+                    e.span_label(\n+                        site_span,\n+                        \"this macro call doesn't expand to a pattern\",\n+                    );\n+                }\n+                _ => {}\n+            };\n             e\n         }));\n "}, {"sha": "6e91201405cc69dbc989567ed08f25f02f1d2dd1", "filename": "src/test/ui/proc-macro/lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Flifetimes.stderr?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `'`\n   --> $DIR/lifetimes.rs:9:10\n    |\n LL | type A = single_quote_alone!();\n-   |          ^^^^^^^^^^^^^^^^^^^^^\n+   |          ^^^^^^^^^^^^^^^^^^^^^ this macro call doesn't expand to a type\n \n error: aborting due to previous error\n "}, {"sha": "5c42a6bdbd44ed40fb79ed1adb8540047173b7f3", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.rs?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    match Some(vec![3]) {\n+        Some(vec![x]) => (), //~ ERROR unexpected `(` after qualified path\n+        _ => (),\n+    }\n+}"}, {"sha": "f94cb93a520b5abff0b4ba3c4adb74c6467b0062", "filename": "src/test/ui/suggestions/vec-macro-in-pattern.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fvec-macro-in-pattern.stderr?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -0,0 +1,15 @@\n+error: unexpected `(` after qualified path\n+  --> $DIR/vec-macro-in-pattern.rs:3:14\n+   |\n+LL |         Some(vec![x]) => (),\n+   |              ^^^^^^^\n+   |              |\n+   |              unexpected `(` after qualified path\n+   |              in this macro invocation\n+   |              use a slice pattern here instead\n+   |\n+   = help: for more information, see https://doc.rust-lang.org/edition-guide/rust-2018/slice-patterns.html\n+   = note: this warning originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "2f052341faead87e832f4591e779b231ec92c646", "filename": "src/test/ui/type/ascription/issue-47666.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7c96d90c2081f3ca84b3786a125cf2c415335e40/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fascription%2Fissue-47666.stderr?ref=7c96d90c2081f3ca84b3786a125cf2c415335e40", "patch": "@@ -6,6 +6,7 @@ LL |     let _ = Option:Some(vec![0, 1]);\n    |                   |     |\n    |                   |     expected type\n    |                   |     in this macro invocation\n+   |                   |     this macro call doesn't expand to a type\n    |                   help: maybe write a path separator here: `::`\n    |\n    = note: `#![feature(type_ascription)]` lets you annotate an expression with a type: `<expr>: <type>`"}]}