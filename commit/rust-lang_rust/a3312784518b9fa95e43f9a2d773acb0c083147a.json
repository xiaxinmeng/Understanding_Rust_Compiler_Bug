{"sha": "a3312784518b9fa95e43f9a2d773acb0c083147a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzMzEyNzg0NTE4YjlmYTk1ZTQzZjlhMmQ3NzNhY2IwYzA4MzE0N2E=", "commit": {"author": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-01-13T06:24:34Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2016-02-27T07:01:41Z"}, "message": "HIR: add inclusive ranges, desugar all ranges (remove ExprRange)", "tree": {"sha": "87599cbc80393efdfd20ebc3b49f7c8436e5e34d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87599cbc80393efdfd20ebc3b49f7c8436e5e34d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3312784518b9fa95e43f9a2d773acb0c083147a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3312784518b9fa95e43f9a2d773acb0c083147a", "html_url": "https://github.com/rust-lang/rust/commit/a3312784518b9fa95e43f9a2d773acb0c083147a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3312784518b9fa95e43f9a2d773acb0c083147a/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5daf13cae371ce4ee90450a1d3006b53395a40d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5daf13cae371ce4ee90450a1d3006b53395a40d7", "html_url": "https://github.com/rust-lang/rust/commit/5daf13cae371ce4ee90450a1d3006b53395a40d7"}], "stats": {"total": 94, "additions": 89, "deletions": 5}, "files": [{"sha": "cf9952248a850fd8bb07beb6e66e574dd9c0b570", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3312784518b9fa95e43f9a2d773acb0c083147a/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3312784518b9fa95e43f9a2d773acb0c083147a/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=a3312784518b9fa95e43f9a2d773acb0c083147a", "patch": "@@ -777,8 +777,6 @@ pub enum Expr_ {\n     ExprTupField(P<Expr>, Spanned<usize>),\n     /// An indexing operation (`foo[2]`)\n     ExprIndex(P<Expr>, P<Expr>),\n-    /// A range (`1..2`, `1..`, or `..2`)\n-    ExprRange(Option<P<Expr>>, Option<P<Expr>>),\n \n     /// Variable reference, possibly containing `::` and/or type\n     /// parameters, e.g. foo::bar::<baz>."}, {"sha": "5e39a7c817ac7e7a1821ab66ac7b85a273da3b3a", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 89, "deletions": 3, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/a3312784518b9fa95e43f9a2d773acb0c083147a/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3312784518b9fa95e43f9a2d773acb0c083147a/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=a3312784518b9fa95e43f9a2d773acb0c083147a", "patch": "@@ -65,6 +65,7 @@ use hir;\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;\n+use std::iter;\n use syntax::ast::*;\n use syntax::attr::{ThinAttributes, ThinAttributesExt};\n use syntax::ext::mtwt;\n@@ -1213,9 +1214,74 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n             ExprKind::Index(ref el, ref er) => {\n                 hir::ExprIndex(lower_expr(lctx, el), lower_expr(lctx, er))\n             }\n-            ExprKind::Range(ref e1, ref e2) => {\n-                hir::ExprRange(e1.as_ref().map(|x| lower_expr(lctx, x)),\n-                               e2.as_ref().map(|x| lower_expr(lctx, x)))\n+            ExprKind::Range(ref e1, ref e2, lims) => {\n+                fn make_struct(lctx: &LoweringContext,\n+                               ast_expr: &Expr,\n+                               path: &[&str],\n+                               fields: &[(&str, &P<Expr>)]) -> P<hir::Expr> {\n+                    let strs = std_path(lctx, &iter::once(&\"ops\")\n+                                                    .chain(path)\n+                                                    .map(|s| *s)\n+                                                    .collect::<Vec<_>>());\n+\n+                    let structpath = path_global(ast_expr.span, strs);\n+\n+                    let hir_expr = if fields.len() == 0 {\n+                        expr_path(lctx,\n+                                  structpath,\n+                                  ast_expr.attrs.clone())\n+                    } else {\n+                        expr_struct(lctx,\n+                                    ast_expr.span,\n+                                    structpath,\n+                                    fields.into_iter().map(|&(s, e)| {\n+                                        field(token::intern(s),\n+                                              lower_expr(lctx, &**e),\n+                                              ast_expr.span)\n+                                    }).collect(),\n+                                    None,\n+                                    ast_expr.attrs.clone())\n+                    };\n+\n+                    signal_block_expr(lctx,\n+                                      hir_vec![],\n+                                      hir_expr,\n+                                      ast_expr.span,\n+                                      hir::PushUnstableBlock,\n+                                      None)\n+                }\n+\n+                return cache_ids(lctx, e.id, |lctx| {\n+                    use syntax::ast::RangeLimits::*;\n+\n+                    match (e1, e2, lims) {\n+                        (&None,         &None,         HalfOpen) =>\n+                            make_struct(lctx, e, &[\"RangeFull\"],\n+                                                 &[]),\n+\n+                        (&Some(ref e1), &None,         HalfOpen) =>\n+                            make_struct(lctx, e, &[\"RangeFrom\"],\n+                                                 &[(\"start\", e1)]),\n+\n+                        (&None,         &Some(ref e2), HalfOpen) =>\n+                            make_struct(lctx, e, &[\"RangeTo\"],\n+                                                 &[(\"end\", e2)]),\n+\n+                        (&Some(ref e1), &Some(ref e2), HalfOpen) =>\n+                            make_struct(lctx, e, &[\"Range\"],\n+                                                 &[(\"start\", e1), (\"end\", e2)]),\n+\n+                        (&None,         &Some(ref e2), Closed)   =>\n+                            make_struct(lctx, e, &[\"RangeToInclusive\"],\n+                                                 &[(\"end\", e2)]),\n+\n+                        (&Some(ref e1), &Some(ref e2), Closed)   =>\n+                            make_struct(lctx, e, &[\"RangeInclusive\", \"NonEmpty\"],\n+                                                 &[(\"start\", e1), (\"end\", e2)]),\n+\n+                        _ => panic!(\"impossible range in AST\"),\n+                    }\n+                });\n             }\n             ExprKind::Path(ref qself, ref path) => {\n                 let hir_qself = qself.as_ref().map(|&QSelf { ref ty, position }| {\n@@ -1632,6 +1698,17 @@ fn arm(pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n     }\n }\n \n+fn field(name: Name, expr: P<hir::Expr>, span: Span) -> hir::Field {\n+    hir::Field {\n+        name: Spanned {\n+            node: name,\n+            span: span,\n+        },\n+        span: span,\n+        expr: expr,\n+    }\n+}\n+\n fn expr_break(lctx: &LoweringContext, span: Span,\n               attrs: ThinAttributes) -> P<hir::Expr> {\n     expr(lctx, span, hir::ExprBreak(None), attrs)\n@@ -1681,6 +1758,15 @@ fn expr_tuple(lctx: &LoweringContext, sp: Span, exprs: hir::HirVec<P<hir::Expr>>\n     expr(lctx, sp, hir::ExprTup(exprs), attrs)\n }\n \n+fn expr_struct(lctx: &LoweringContext,\n+               sp: Span,\n+               path: hir::Path,\n+               fields: hir::HirVec<hir::Field>,\n+               e: Option<P<hir::Expr>>,\n+               attrs: ThinAttributes) -> P<hir::Expr> {\n+    expr(lctx, sp, hir::ExprStruct(path, fields, e), attrs)\n+}\n+\n fn expr(lctx: &LoweringContext, span: Span, node: hir::Expr_,\n         attrs: ThinAttributes) -> P<hir::Expr> {\n     P(hir::Expr {"}]}