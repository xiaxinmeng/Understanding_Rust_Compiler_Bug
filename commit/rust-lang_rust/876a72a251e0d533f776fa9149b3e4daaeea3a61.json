{"sha": "876a72a251e0d533f776fa9149b3e4daaeea3a61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NmE3MmEyNTFlMGQ1MzNmNzc2ZmE5MTQ5YjNlNGRhYWVlYTNhNjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T08:00:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-27T08:00:58Z"}, "message": "Auto merge of #66677 - wesleywiser:fix_const_prop_alloc_id_ice, r=oli-obk\n\n[const prop] Fix \"alloc id without corresponding allocation\" ICE\n\nr? @oli-obk", "tree": {"sha": "611b300eb95320f9c6b0510f50ab43fa87cbd8f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/611b300eb95320f9c6b0510f50ab43fa87cbd8f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/876a72a251e0d533f776fa9149b3e4daaeea3a61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/876a72a251e0d533f776fa9149b3e4daaeea3a61", "html_url": "https://github.com/rust-lang/rust/commit/876a72a251e0d533f776fa9149b3e4daaeea3a61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/876a72a251e0d533f776fa9149b3e4daaeea3a61/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31", "html_url": "https://github.com/rust-lang/rust/commit/b5f265eeed23ac87ec6b4a7e6bc7cb4ea3e67c31"}, {"sha": "32e78ca2e38cdc83a8a18ee38cad43a5df72c1de", "url": "https://api.github.com/repos/rust-lang/rust/commits/32e78ca2e38cdc83a8a18ee38cad43a5df72c1de", "html_url": "https://github.com/rust-lang/rust/commit/32e78ca2e38cdc83a8a18ee38cad43a5df72c1de"}], "stats": {"total": 114, "additions": 78, "deletions": 36}, "files": [{"sha": "f82af62c5f39d40845e17fc6f10d80c79c292b41", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -458,7 +458,7 @@ impl<Tag> From<Pointer<Tag>> for Scalar<Tag> {\n     }\n }\n \n-#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable)]\n+#[derive(Clone, Copy, Eq, PartialEq, RustcEncodable, RustcDecodable, HashStable, Hash)]\n pub enum ScalarMaybeUndef<Tag = (), Id = AllocId> {\n     Scalar(Scalar<Tag, Id>),\n     Undef,"}, {"sha": "630f3f603449bb0fccd84250324ac0a39a934bc4", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -3,22 +3,34 @@\n //! After a const evaluation has computed a value, before we destroy the const evaluator's session\n //! memory, we need to extract all memory allocations to the global memory pool so they stay around.\n \n-use rustc::ty::{Ty, self};\n-use rustc::mir::interpret::{InterpResult, ErrorHandled};\n-use rustc::hir;\n use super::validity::RefTracking;\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc::hir;\n+use rustc::mir::interpret::{ErrorHandled, InterpResult};\n+use rustc::ty::{self, Ty};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use syntax::ast::Mutability;\n \n use super::{\n-    ValueVisitor, MemoryKind, AllocId, MPlaceTy, Scalar,\n+    AllocId, Allocation, InterpCx, Machine, MemoryKind, MPlaceTy, Scalar, ValueVisitor,\n };\n-use crate::const_eval::{CompileTimeInterpreter, CompileTimeEvalContext};\n \n-struct InternVisitor<'rt, 'mir, 'tcx> {\n+pub trait CompileTimeMachine<'mir, 'tcx> =\n+    Machine<\n+        'mir,\n+        'tcx,\n+        MemoryKinds = !,\n+        PointerTag = (),\n+        ExtraFnVal = !,\n+        FrameExtra = (),\n+        MemoryExtra = (),\n+        AllocExtra = (),\n+        MemoryMap = FxHashMap<AllocId, (MemoryKind<!>, Allocation)>,\n+    >;\n+\n+struct InternVisitor<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> {\n     /// The ectx from which we intern.\n-    ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,\n+    ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     /// Previously encountered safe references.\n     ref_tracking: &'rt mut RefTracking<(MPlaceTy<'tcx>, Mutability, InternMode)>,\n     /// A list of all encountered allocations. After type-based interning, we traverse this list to\n@@ -58,18 +70,15 @@ struct IsStaticOrFn;\n /// `immutable` things might become mutable if `ty` is not frozen.\n /// `ty` can be `None` if there is no potential interior mutability\n /// to account for (e.g. for vtables).\n-fn intern_shallow<'rt, 'mir, 'tcx>(\n-    ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,\n+fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n+    ecx: &'rt mut InterpCx<'mir, 'tcx, M>,\n     leftover_allocations: &'rt mut FxHashSet<AllocId>,\n     mode: InternMode,\n     alloc_id: AllocId,\n     mutability: Mutability,\n     ty: Option<Ty<'tcx>>,\n ) -> InterpResult<'tcx, Option<IsStaticOrFn>> {\n-    trace!(\n-        \"InternVisitor::intern {:?} with {:?}\",\n-        alloc_id, mutability,\n-    );\n+    trace!(\"InternVisitor::intern {:?} with {:?}\", alloc_id, mutability,);\n     // remove allocation\n     let tcx = ecx.tcx;\n     let (kind, mut alloc) = match ecx.memory.alloc_map.remove(&alloc_id) {\n@@ -130,7 +139,7 @@ fn intern_shallow<'rt, 'mir, 'tcx>(\n     Ok(None)\n }\n \n-impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n+impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>> InternVisitor<'rt, 'mir, 'tcx, M> {\n     fn intern_shallow(\n         &mut self,\n         alloc_id: AllocId,\n@@ -148,15 +157,15 @@ impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n     }\n }\n \n-impl<'rt, 'mir, 'tcx>\n-    ValueVisitor<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>\n+impl<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>\n+    ValueVisitor<'mir, 'tcx, M>\n for\n-    InternVisitor<'rt, 'mir, 'tcx>\n+    InternVisitor<'rt, 'mir, 'tcx, M>\n {\n     type V = MPlaceTy<'tcx>;\n \n     #[inline(always)]\n-    fn ecx(&self) -> &CompileTimeEvalContext<'mir, 'tcx> {\n+    fn ecx(&self) -> &InterpCx<'mir, 'tcx, M> {\n         &self.ecx\n     }\n \n@@ -265,8 +274,8 @@ for\n     }\n }\n \n-pub fn intern_const_alloc_recursive(\n-    ecx: &mut CompileTimeEvalContext<'mir, 'tcx>,\n+pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n+    ecx: &mut InterpCx<'mir, 'tcx, M>,\n     // The `mutability` of the place, ignoring the type.\n     place_mut: Option<hir::Mutability>,\n     ret: MPlaceTy<'tcx>,"}, {"sha": "8dd5807f7cfbfa85fc7237d4860ae46fc9a675d9", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -27,7 +27,7 @@ use rustc_macros::HashStable;\n /// operations and fat pointers. This idea was taken from rustc's codegen.\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Immediate`, and do not have to work with a `Place`.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n pub enum Immediate<Tag=(), Id=AllocId> {\n     Scalar(ScalarMaybeUndef<Tag, Id>),\n     ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n@@ -104,7 +104,7 @@ impl<'tcx, Tag> ::std::ops::Deref for ImmTy<'tcx, Tag> {\n /// An `Operand` is the result of computing a `mir::Operand`. It can be immediate,\n /// or still in memory. The latter is an optimization, to delay reading that chunk of\n /// memory and to avoid having to store arbitrary-sized data here.\n-#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, Hash)]\n pub enum Operand<Tag=(), Id=AllocId> {\n     Immediate(Immediate<Tag, Id>),\n     Indirect(MemPlace<Tag, Id>),\n@@ -134,7 +134,7 @@ impl<Tag> Operand<Tag> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub struct OpTy<'tcx, Tag=()> {\n     op: Operand<Tag>, // Keep this private; it helps enforce invariants.\n     pub layout: TyLayout<'tcx>,"}, {"sha": "cca76700ed101fa812e52e0bd7f8e1488b982b41", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -28,6 +28,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(range_is_empty)]\n #![feature(stmt_expr_attributes)]\n #![feature(bool_to_option)]\n+#![feature(trait_alias)]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "6f0b960cab1079a5182fea13bc2a43aa24e85158", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -30,7 +30,7 @@ use crate::interpret::{\n     self, InterpCx, ScalarMaybeUndef, Immediate, OpTy,\n     StackPopCleanup, LocalValue, LocalState, AllocId, Frame,\n     Allocation, MemoryKind, ImmTy, Pointer, Memory, PlaceTy,\n-    Operand as InterpOperand,\n+    Operand as InterpOperand, intern_const_alloc_recursive,\n };\n use crate::const_eval::error_to_const_error;\n use crate::transform::{MirPass, MirSource};\n@@ -647,9 +647,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn should_const_prop(&mut self, op: OpTy<'tcx>) -> bool {\n-        if self.tcx.sess.opts.debugging_opts.mir_opt_level >= 2 {\n-            return true;\n-        } else if self.tcx.sess.opts.debugging_opts.mir_opt_level == 0 {\n+        let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;\n+\n+        if mir_opt_level == 0 {\n             return false;\n         }\n \n@@ -659,6 +659,14 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             interpret::Operand::Immediate(Immediate::ScalarPair(ScalarMaybeUndef::Scalar(l),\n                                                                 ScalarMaybeUndef::Scalar(r))) =>\n                 l.is_bits() && r.is_bits(),\n+            interpret::Operand::Indirect(_) if mir_opt_level >= 2 => {\n+                intern_const_alloc_recursive(\n+                    &mut self.ecx,\n+                    None,\n+                    op.assert_mem_place()\n+                ).expect(\"failed to intern alloc\");\n+                true\n+            },\n             _ => false\n         }\n     }"}, {"sha": "3f82b81a47de5883a41b8572957721de8fd63e0e", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -23,9 +23,9 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _4 = const Scalar(AllocId(1).0x0) : &i32;\n-//      _3 = const Scalar(AllocId(1).0x0) : &i32;\n-//      _2 = const Value(Scalar(AllocId(1).0x0)) : *const i32;\n+//      _4 = const main::FOO;\n+//      _3 = _4;\n+//      _2 = move _3 as *const i32 (Misc);\n //      ...\n //      _1 = move _2 as usize (Misc);\n //      ..."}, {"sha": "d45ffdc87753539fdbcdeab9e5d6f20694a32388", "filename": "src/test/mir-opt/const_prop/ref_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -14,7 +14,7 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n // bb0: {\n //     ...\n-//     _2 = const Scalar(AllocId(0).0x0) : &i32;\n+//     _2 = &(promoted[0]: i32);\n //     _1 = const 4i32;\n //     ...\n // }"}, {"sha": "4d6fe905b0c3546e01bce91235e731a592281d22", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -16,7 +16,7 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = const main;\n+//      _3 = const main as fn() (Pointer(ReifyFnPointer));\n //      _2 = move _3 as usize (Misc);\n //      ...\n //      _1 = move _2 as *const fn() (Misc);"}, {"sha": "d6ff76b34b9b5fb7de1a4249bf2cff203ea48d94", "filename": "src/test/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -24,8 +24,8 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _4 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n-//      _3 = const Scalar(AllocId(0).0x0) : &[u32; 3];\n+//      _4 = &(promoted[0]: [u32; 3]);\n+//      _3 = _4;\n //      _2 = move _3 as &[u32] (Pointer(Unsize));\n //      ...\n //      _6 = const 1usize;"}, {"sha": "7d0de73007c8c81b6dfbc44665073a4317345d17", "filename": "src/test/ui/consts/issue-66345.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fui%2Fconsts%2Fissue-66345.rs", "raw_url": "https://github.com/rust-lang/rust/raw/876a72a251e0d533f776fa9149b3e4daaeea3a61/src%2Ftest%2Fui%2Fconsts%2Fissue-66345.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-66345.rs?ref=876a72a251e0d533f776fa9149b3e4daaeea3a61", "patch": "@@ -0,0 +1,24 @@\n+// run-pass\n+// compile-flags: -Z mir-opt-level=3\n+\n+// Checks that the compiler does not ICE when passing references to field of by-value struct\n+// with -Z mir-opt-level=3\n+\n+fn do_nothing(_: &()) {}\n+\n+pub struct Foo {\n+    bar: (),\n+}\n+\n+pub fn by_value_1(foo: Foo) {\n+    do_nothing(&foo.bar);\n+}\n+\n+pub fn by_value_2<T>(foo: Foo) {\n+    do_nothing(&foo.bar);\n+}\n+\n+fn main() {\n+    by_value_1(Foo { bar: () });\n+    by_value_2::<()>(Foo { bar: () });\n+}"}]}