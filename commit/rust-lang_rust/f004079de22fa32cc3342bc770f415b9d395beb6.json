{"sha": "f004079de22fa32cc3342bc770f415b9d395beb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMDQwNzlkZTIyZmEzMmNjMzM0MmJjNzcwZjQxNWI5ZDM5NWJlYjY=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-03T20:51:23Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2015-08-04T23:05:07Z"}, "message": "Actually commit tests", "tree": {"sha": "632e152f82feb0489ee0e24a95fd93bb33d749cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/632e152f82feb0489ee0e24a95fd93bb33d749cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f004079de22fa32cc3342bc770f415b9d395beb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f004079de22fa32cc3342bc770f415b9d395beb6", "html_url": "https://github.com/rust-lang/rust/commit/f004079de22fa32cc3342bc770f415b9d395beb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f004079de22fa32cc3342bc770f415b9d395beb6/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d401f6aba9166246e329b1aa18bd5f32fbed7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d401f6aba9166246e329b1aa18bd5f32fbed7e", "html_url": "https://github.com/rust-lang/rust/commit/89d401f6aba9166246e329b1aa18bd5f32fbed7e"}], "stats": {"total": 128, "additions": 127, "deletions": 1}, "files": [{"sha": "517fd9421ec694f93bcdafbda0a0072009dac655", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f004079de22fa32cc3342bc770f415b9d395beb6", "patch": "@@ -1580,7 +1580,7 @@ pub fn expand_type(t: P<ast::Ty>, fld: &mut MacroExpander) -> P<ast::Ty> {\n                     &fld.cx.parse_sess.span_diagnostic,\n                     \"type_macros\",\n                     t.span,\n-                    \"type macros are experimental (see tracking issue: 27336)\");\n+                    \"type macros are experimental (see issue: #27336)\");\n                 t\n             }\n         }"}, {"sha": "8e8f21519bc565c3bbc2e69e0ad38446805f42b1", "filename": "src/test/compile-fail/type-macros-fail.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-macros-fail.rs?ref=f004079de22fa32cc3342bc770f415b9d395beb6", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! Id {\n+    { $T:tt } => $T\n+}\n+\n+struct Foo<T> {\n+    x: Id!(T)\n+}\n+\n+fn main() {\n+    let foo = Foo { x: i32 };\n+}"}, {"sha": "7c7392894d974698dc9903710f83ccdff7da3f61", "filename": "src/test/run-pass/type-macros-hlist.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-hlist.rs?ref=f004079de22fa32cc3342bc770f415b9d395beb6", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+use std::ops::*;\n+\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Nil; // empty HList\n+#[derive(Copy, Clone, Debug, Eq, Ord, PartialEq, PartialOrd)]\n+struct Cons<H, T: HList>(H, T); // cons cell of HList\n+\n+// trait to classify valid HLists\n+trait HList {}\n+impl HList for Nil {}\n+impl<H, T: HList> HList for Cons<H, T> {}\n+\n+// term-level macro for HLists\n+macro_rules! hlist {\n+        {} => { Nil };\n+        { $head:expr } => { Cons($head, Nil) };\n+        { $head:expr, $($tail:expr),* } => { Cons($head, hlist!($($tail),*)) };\n+}\n+\n+// type-level macro for HLists\n+macro_rules! HList {\n+        {} => { Nil };\n+        { $head:ty } => { Cons<$head, Nil> };\n+        { $head:ty, $($tail:ty),* } => { Cons<$head, HList!($($tail),*)> };\n+}\n+\n+// nil case for HList append\n+impl<Ys: HList> Add<Ys> for Nil {\n+    type Output = Ys;\n+\n+    fn add(self, rhs: Ys) -> Ys {\n+        rhs\n+    }\n+}\n+\n+// cons case for HList append\n+impl<Rec: HList + Sized, X, Xs: HList, Ys: HList> Add<Ys> for Cons<X, Xs> where\n+    Xs: Add<Ys, Output = Rec>,\n+{\n+    type Output = Cons<X, Rec>;\n+\n+    fn add(self, rhs: Ys) -> Cons<X, Rec> {\n+        Cons(self.0, self.1 + rhs)\n+    }\n+}\n+\n+// type macro Expr allows us to expand the + operator appropriately\n+macro_rules! Expr {\n+        { ( $($LHS:tt)+ ) } => { Expr!($($LHS)+) };\n+        { HList ! [ $($LHS:tt)* ] + $($RHS:tt)+ } => {\n+            <Expr!(HList![$($LHS)*]) as Add<Expr!($($RHS)+)>>::Output\n+        };\n+        { $LHS:tt + $($RHS:tt)+ } => { <Expr!($LHS) as Add<Expr!($($RHS)+)>>::Output };\n+        { $LHS:ty } => { $LHS };\n+}\n+\n+// test demonstrating term level `xs + ys` and type level `Expr!(Xs + Ys)`\n+fn main() {\n+    fn aux<Xs: HList, Ys: HList>(xs: Xs, ys: Ys) -> Expr!(Xs + Ys)\n+        where Xs: Add<Ys> {\n+            xs + ys\n+        }\n+\n+    let xs: HList![&str, bool, Vec<u64>] = hlist![\"foo\", false, vec![]];\n+    let ys: HList![u64, [u8; 3], ()] = hlist![0, [0, 1, 2], ()];\n+\n+    // demonstrate recursive expansion of Expr!\n+    let zs: Expr!((HList![&str] + HList![bool] + HList![Vec<u64>]) +\n+                  (HList![u64] + HList![[u8; 3], ()]) +\n+                  HList![])\n+        = aux(xs, ys);\n+    assert_eq!(zs, hlist![\"foo\", false, vec![], 0, [0, 1, 2], ()])\n+}\n+"}, {"sha": "22dfd507f7e2e6e0c2e65021b1a62f805f640e37", "filename": "src/test/run-pass/type-macros-simple.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f004079de22fa32cc3342bc770f415b9d395beb6/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-macros-simple.rs?ref=f004079de22fa32cc3342bc770f415b9d395beb6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(type_macros)]\n+\n+macro_rules! Tuple {\n+    { $A:ty,$B:ty } => { ($A, $B) }\n+}\n+\n+fn main() {\n+    let x: Tuple!(i32, i32) = (1, 2);\n+}"}]}