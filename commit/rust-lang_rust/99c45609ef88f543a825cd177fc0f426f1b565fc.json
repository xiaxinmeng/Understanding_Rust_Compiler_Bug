{"sha": "99c45609ef88f543a825cd177fc0f426f1b565fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5YzQ1NjA5ZWY4OGY1NDNhODI1Y2QxNzdmYzBmNDI2ZjFiNTY1ZmM=", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-20T23:31:14Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2019-03-20T23:31:14Z"}, "message": "Improve performance and ordering", "tree": {"sha": "9a138aee542fafaa126a7737e8ec7a9ac83736ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a138aee542fafaa126a7737e8ec7a9ac83736ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99c45609ef88f543a825cd177fc0f426f1b565fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99c45609ef88f543a825cd177fc0f426f1b565fc", "html_url": "https://github.com/rust-lang/rust/commit/99c45609ef88f543a825cd177fc0f426f1b565fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99c45609ef88f543a825cd177fc0f426f1b565fc/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba6863754e6873249c29525bd24e9e5accf442df", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba6863754e6873249c29525bd24e9e5accf442df", "html_url": "https://github.com/rust-lang/rust/commit/ba6863754e6873249c29525bd24e9e5accf442df"}], "stats": {"total": 36, "additions": 15, "deletions": 21}, "files": [{"sha": "6e61a58fced06d29def6d43815264a68230a31fc", "filename": "crates/ra_assists/src/fill_struct_fields.rs", "status": "modified", "additions": 15, "deletions": 21, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99c45609ef88f543a825cd177fc0f426f1b565fc/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99c45609ef88f543a825cd177fc0f426f1b565fc/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_struct_fields.rs?ref=99c45609ef88f543a825cd177fc0f426f1b565fc", "patch": "@@ -1,6 +1,6 @@\n use std::fmt::Write;\n \n-use hir::{AdtDef, Ty, db::HirDatabase, source_binder::function_from_child_node, StructField};\n+use hir::{AdtDef, Ty, db::HirDatabase, source_binder::function_from_child_node};\n \n use ra_syntax::ast::{self, AstNode};\n \n@@ -26,7 +26,7 @@ pub(crate) fn fill_struct_fields(mut ctx: AssistCtx<impl HirDatabase>) -> Option\n struct FillStructFields<'a, 'b: 'a, DB> {\n     ctx: &'a mut AssistCtx<'b, DB>,\n     named_field_list: &'a ast::NamedFieldList,\n-    struct_fields: Vec<StructField>,\n+    struct_fields: Vec<(String, String)>,\n     struct_lit: &'a ast::StructLit,\n }\n \n@@ -64,35 +64,29 @@ where\n             Ty::Adt { def_id: AdtDef::Struct(s), .. } => s,\n             _ => return None,\n         };\n-        self.struct_fields = struct_def.fields(self.ctx.db);\n+        self.struct_fields = struct_def\n+            .fields(self.ctx.db)\n+            .into_iter()\n+            .map(|f| (f.name(self.ctx.db).to_string(), \"()\".into()))\n+            .collect();\n         Some(())\n     }\n \n     fn remove_already_included_fields(&mut self) -> Option<()> {\n         for ast_field in self.named_field_list.fields() {\n+            let expr = ast_field.expr()?.syntax().text().to_string();\n             let name_from_ast = ast_field.name_ref()?.text().to_string();\n-            if let Some(idx) = self\n-                .struct_fields\n-                .iter()\n-                .map(|f| f.name(self.ctx.db).to_string())\n-                .position(|n| n == name_from_ast)\n-            {\n-                self.struct_fields.remove(idx);\n+            if let Some(idx) = self.struct_fields.iter().position(|(n, _)| n == &name_from_ast) {\n+                self.struct_fields[idx] = (name_from_ast, expr);\n             }\n         }\n         Some(())\n     }\n \n-    fn struct_fields_string(&self) -> Option<String> {\n+    fn struct_fields_string(&mut self) -> Option<String> {\n         let mut buf = String::from(\"{\\n\");\n-        for field in self.named_field_list.fields() {\n-            let expr = field.expr()?.syntax().text().to_string();\n-            let field_name = field.name_ref()?.syntax().text().to_string();\n-            write!(&mut buf, \"    {}: {},\\n\", field_name, expr).unwrap();\n-        }\n-        for field in &self.struct_fields {\n-            let field_name = field.name(self.ctx.db).to_string();\n-            write!(&mut buf, \"    {}: (),\\n\", field_name).unwrap();\n+        for (name, expr) in &self.struct_fields {\n+            write!(&mut buf, \"    {}: {},\\n\", name, expr).unwrap();\n         }\n         buf.push_str(\"}\");\n         Some(buf)\n@@ -233,11 +227,11 @@ mod tests {\n \n             fn main() {\n                 let s = <|>S {\n-                    c: (1, 2),\n-                    e: \"foo\",\n                     a: (),\n                     b: (),\n+                    c: (1, 2),\n                     d: (),\n+                    e: \"foo\",\n                 }\n             }\n             \"#,"}]}