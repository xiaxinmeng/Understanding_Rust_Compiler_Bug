{"sha": "1225f719fe920587ebbe4170fc5aee1d87eadc22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMjVmNzE5ZmU5MjA1ODdlYmJlNDE3MGZjNWFlZTFkODdlYWRjMjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T17:27:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T17:27:45Z"}, "message": "Fix pointer syntax", "tree": {"sha": "52156de3b6fa67e7d7310374c094aac579ff9195", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52156de3b6fa67e7d7310374c094aac579ff9195"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1225f719fe920587ebbe4170fc5aee1d87eadc22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1225f719fe920587ebbe4170fc5aee1d87eadc22", "html_url": "https://github.com/rust-lang/rust/commit/1225f719fe920587ebbe4170fc5aee1d87eadc22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1225f719fe920587ebbe4170fc5aee1d87eadc22/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ac345a9f693e54aecd2ad70731acc75f982d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ac345a9f693e54aecd2ad70731acc75f982d2ae", "html_url": "https://github.com/rust-lang/rust/commit/1ac345a9f693e54aecd2ad70731acc75f982d2ae"}], "stats": {"total": 66, "additions": 36, "deletions": 30}, "files": [{"sha": "3c8f55f1e490befd9ac8c005d2618feb0749ec23", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 30, "deletions": 26, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/1225f719fe920587ebbe4170fc5aee1d87eadc22/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1225f719fe920587ebbe4170fc5aee1d87eadc22/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=1225f719fe920587ebbe4170fc5aee1d87eadc22", "patch": "@@ -99,56 +99,60 @@ impl Default for Config {\n impl Config {\n     #[rustfmt::skip]\n     pub fn update(&mut self, value: &serde_json::Value) {\n+        log::info!(\"Config::update({:#})\", value);\n+\n         let client_caps = self.client_caps.clone();\n         *self = Default::default();\n         self.client_caps = client_caps;\n \n-        set(value, \"publishDecorations\", &mut self.publish_decorations);\n-        set(value, \"excludeGlobs\", &mut self.exclude_globs);\n-        set(value, \"useClientWatching\", &mut self.use_client_watching);\n-        set(value, \"lruCapacity\", &mut self.lru_capacity);\n+        set(value, \"/publishDecorations\", &mut self.publish_decorations);\n+        set(value, \"/excludeGlobs\", &mut self.exclude_globs);\n+        set(value, \"/useClientWatching\", &mut self.use_client_watching);\n+        set(value, \"/lruCapacity\", &mut self.lru_capacity);\n \n-        set(value, \"inlayHintsType\", &mut self.inlay_hints.type_hints);\n-        set(value, \"inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n-        set(value, \"inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n-        set(value, \"inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n+        set(value, \"/inlayHintsType\", &mut self.inlay_hints.type_hints);\n+        set(value, \"/inlayHintsParameter\", &mut self.inlay_hints.parameter_hints);\n+        set(value, \"/inlayHintsChaining\", &mut self.inlay_hints.chaining_hints);\n+        set(value, \"/inlayHintsMaxLength\", &mut self.inlay_hints.max_length);\n \n         if let Some(false) = get(value, \"cargo_watch_enable\") {\n             self.check = None\n         } else {\n             if let Some(FlycheckConfig::CargoCommand { command, extra_args, all_targets }) = &mut self.check\n             {\n-                set(value, \"cargoWatchArgs\", extra_args);\n-                set(value, \"cargoWatchCommand\", command);\n-                set(value, \"cargoWatchAllTargets\", all_targets);\n+                set(value, \"/cargoWatchArgs\", extra_args);\n+                set(value, \"/cargoWatchCommand\", command);\n+                set(value, \"/cargoWatchAllTargets\", all_targets);\n             }\n         };\n \n-        set(value, \"withSysroot\", &mut self.with_sysroot);\n+        set(value, \"/withSysroot\", &mut self.with_sysroot);\n         if let RustfmtConfig::Rustfmt { extra_args } = &mut self.rustfmt {\n-            set(value, \"rustfmtArgs\", extra_args);\n+            set(value, \"/rustfmtArgs\", extra_args);\n         }\n \n-        set(value, \"cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n-        set(value, \"cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n-        set(value, \"cargoFeatures/features\", &mut self.cargo.features);\n-        set(value, \"cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+        set(value, \"/cargoFeatures/noDefaultFeatures\", &mut self.cargo.no_default_features);\n+        set(value, \"/cargoFeatures/allFeatures\", &mut self.cargo.all_features);\n+        set(value, \"/cargoFeatures/features\", &mut self.cargo.features);\n+        set(value, \"/cargoFeatures/loadOutDirsFromCheck\", &mut self.cargo.load_out_dirs_from_check);\n+\n+        set(value, \"/vscodeLldb\", &mut self.vscode_lldb);\n \n-        set(value, \"vscodeLldb\", &mut self.vscode_lldb);\n+        set(value, \"/featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n+        set(value, \"/featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n+        set(value, \"/featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n+        set(value, \"/featureFlags/completion.enable-postfix\", &mut self.completion.enable_postfix_completions);\n+        set(value, \"/featureFlags/completion.insertion.add-call-parenthesis\", &mut self.completion.add_call_parenthesis);\n+        set(value, \"/featureFlags/completion.insertion.add-argument-snippets\", &mut self.completion.add_call_argument_snippets);\n+        set(value, \"/featureFlags/call-info.full\", &mut self.call_info_full);\n \n-        set(value, \"featureFlags/lsp.diagnostics\", &mut self.publish_diagnostics);\n-        set(value, \"featureFlags/notifications.workspace-loaded\", &mut self.notifications.workspace_loaded);\n-        set(value, \"featureFlags/notifications.cargo-toml-not-found\", &mut self.notifications.cargo_toml_not_found);\n-        set(value, \"featureFlags/completion.enable-postfix\", &mut self.completion.enable_postfix_completions);\n-        set(value, \"featureFlags/completion.insertion.add-call-parenthesis\", &mut self.completion.add_call_parenthesis);\n-        set(value, \"featureFlags/completion.insertion.add-argument-snippets\", &mut self.completion.add_call_argument_snippets);\n-        set(value, \"featureFlags/call-info.full\", &mut self.call_info_full);\n+        log::info!(\"Config::update() = {:#?}\", self);\n \n         fn get<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str) -> Option<T> {\n             value.pointer(pointer).and_then(|it| T::deserialize(it).ok())\n         }\n \n-        fn set<'a, T: Deserialize<'a>>(value: &'a serde_json::Value, pointer: &str, slot: &mut T) {\n+        fn set<'a, T: Deserialize<'a> + std::fmt::Debug>(value: &'a serde_json::Value, pointer: &str, slot: &mut T) {\n             if let Some(new_value) = get(value, pointer) {\n                 *slot = new_value\n             }"}, {"sha": "45ae0ad9d17078874cf4ffdeecc4bc4c752bfe1b", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1225f719fe920587ebbe4170fc5aee1d87eadc22/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1225f719fe920587ebbe4170fc5aee1d87eadc22/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=1225f719fe920587ebbe4170fc5aee1d87eadc22", "patch": "@@ -364,10 +364,12 @@ fn loop_turn(\n                         (Some(err), _) => {\n                             log::error!(\"failed to fetch the server settings: {:?}\", err)\n                         }\n-                        (None, Some(new_config)) => {\n-                            let mut config = world_state.config.clone();\n-                            config.update(&new_config);\n-                            world_state.update_configuration(config);\n+                        (None, Some(configs)) => {\n+                            if let Some(new_config) = configs.get(0) {\n+                                let mut config = world_state.config.clone();\n+                                config.update(&new_config);\n+                                world_state.update_configuration(config);\n+                            }\n                         }\n                         (None, None) => {\n                             log::error!(\"received empty server settings response from the client\")"}]}