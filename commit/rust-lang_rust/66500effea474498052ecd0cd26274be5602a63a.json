{"sha": "66500effea474498052ecd0cd26274be5602a63a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NTAwZWZmZWE0NzQ0OTgwNTJlY2QwY2QyNjI3NGJlNTYwMmE2M2E=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2020-01-26T01:09:23Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-02-22T19:17:03Z"}, "message": "add generator_kind query", "tree": {"sha": "c94753a4043be6b534f615f9ce2778e92333dc93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c94753a4043be6b534f615f9ce2778e92333dc93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66500effea474498052ecd0cd26274be5602a63a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66500effea474498052ecd0cd26274be5602a63a", "html_url": "https://github.com/rust-lang/rust/commit/66500effea474498052ecd0cd26274be5602a63a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66500effea474498052ecd0cd26274be5602a63a/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "245062cdcd9907bd7f71822f958219dc8ce994d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/245062cdcd9907bd7f71822f958219dc8ce994d2", "html_url": "https://github.com/rust-lang/rust/commit/245062cdcd9907bd7f71822f958219dc8ce994d2"}], "stats": {"total": 100, "additions": 60, "deletions": 40}, "files": [{"sha": "3a6961660fd696286ed12c724e46584267e0c597", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -308,6 +308,9 @@ rustc_queries! {\n         /// Returns `Some(mutability)` if the node pointed to by `def_id` is a static item.\n         query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n \n+        /// Returns `Some(generator_kind)` if the node pointed to by `def_id` is a generator.\n+        query generator_kind(_: DefId) -> Option<hir::GeneratorKind> {}\n+\n         /// Gets a map with the variance of every item; use `item_variance` instead.\n         query crate_variances(_: CrateNum) -> &'tcx ty::CrateVariancesMap<'tcx> {\n             desc { \"computing the variances for items in this crate\" }"}, {"sha": "2d8601f9556a39e06ccd1d7cf93adc0d4c449705", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -5,7 +5,7 @@ use crate::dep_graph::DepGraph;\n use crate::dep_graph::{self, DepConstructor};\n use crate::hir::exports::Export;\n use crate::hir::map as hir_map;\n-use crate::hir::map::DefPathHash;\n+use crate::hir::map::{DefPathData, DefPathHash};\n use crate::ich::{NodeIdHashingMode, StableHashingContext};\n use crate::infer::canonical::{Canonical, CanonicalVarInfo, CanonicalVarInfos};\n use crate::lint::{struct_lint_level, LintSource};\n@@ -1513,14 +1513,18 @@ impl<'tcx> TyCtxt<'tcx> {\n         )\n     }\n \n-    /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"closure\")`).\n-    pub fn article_and_description(\n-        &self,\n-        def_id: crate::hir::def_id::DefId,\n-    ) -> (&'static str, &'static str) {\n-        match self.def_kind(def_id) {\n-            Some(def_kind) => (def_kind.article(), def_kind.descr(def_id)),\n-            None => self.type_of(def_id).kind.article_and_description(),\n+    /// Returns a displayable description and article for the given `def_id` (e.g. `(\"a\", \"struct\")`).\n+    pub fn article_and_description(&self, def_id: DefId) -> (&'static str, &'static str) {\n+        match self.def_key(def_id).disambiguated_data.data {\n+            DefPathData::TypeNs(..) | DefPathData::ValueNs(..) | DefPathData::MacroNs(..) => {\n+                let kind = self.def_kind(def_id).unwrap();\n+                (kind.article(), kind.descr(def_id))\n+            }\n+            DefPathData::ClosureExpr => {\n+                // TODO\n+                todo!();\n+            }\n+            _ => bug!(\"article_and_description called on def_id {:?}\", def_id),\n         }\n     }\n }"}, {"sha": "d09e68e34a6c393a04a31c136a4ca2b7fbd793a1", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -500,7 +500,7 @@ impl MetadataBlob {\n     }\n }\n \n-impl<'tcx> EntryKind<'tcx> {\n+impl EntryKind {\n     fn def_kind(&self) -> Option<DefKind> {\n         Some(match *self {\n             EntryKind::Const(..) => DefKind::Const,\n@@ -614,11 +614,11 @@ impl<'a, 'tcx> CrateMetadata {\n         self.root.proc_macro_data.and_then(|data| data.decode(self).find(|x| *x == id)).is_some()\n     }\n \n-    fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind<'tcx>> {\n+    fn maybe_kind(&self, item_id: DefIndex) -> Option<EntryKind> {\n         self.root.per_def.kind.get(self, item_id).map(|k| k.decode(self))\n     }\n \n-    fn kind(&self, item_id: DefIndex) -> EntryKind<'tcx> {\n+    fn kind(&self, item_id: DefIndex) -> EntryKind {\n         assert!(!self.is_proc_macro(item_id));\n         self.maybe_kind(item_id).unwrap_or_else(|| {\n             bug!(\n@@ -723,7 +723,7 @@ impl<'a, 'tcx> CrateMetadata {\n     fn get_variant(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        kind: &EntryKind<'_>,\n+        kind: &EntryKind,\n         index: DefIndex,\n         parent_did: DefId,\n     ) -> ty::VariantDef {\n@@ -1390,6 +1390,13 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    fn generator_kind(&self, id: DefIndex) -> Option<hir::GeneratorKind> {\n+        match self.kind(id) {\n+            EntryKind::Generator(data) => Some(data.decode(self)),\n+            _ => None,\n+        }\n+    }\n+\n     fn fn_sig(&self, id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n         self.root.per_def.fn_sig.get(self, id).unwrap().decode((self, tcx))\n     }\n@@ -1499,8 +1506,8 @@ impl<'a, 'tcx> CrateMetadata {\n                     );\n                     debug!(\n                         \"CrateMetaData::imported_source_files alloc \\\n-                        source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n-                        translated (start_pos {:?} end_pos {:?})\",\n+                         source_file {:?} original (start_pos {:?} end_pos {:?}) \\\n+                         translated (start_pos {:?} end_pos {:?})\",\n                         local_version.name,\n                         start_pos,\n                         end_pos,"}, {"sha": "e6270e903295cc8202c26b5add5982d540b3811b", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -134,6 +134,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     asyncness => { cdata.asyncness(def_id.index) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     static_mutability => { cdata.static_mutability(def_id.index) }\n+    generator_kind => { cdata.generator_kind(def_id.index) }\n     def_kind => { cdata.def_kind(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     lookup_stability => {"}, {"sha": "e985ec5fcdfda9a550518acd740fb2e26a17dd5f", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> EncodeContext<'tcx> {\n                 assert!(\n                     last_min_end <= lazy.position,\n                     \"make sure that the calls to `lazy*` \\\n-                    are in the same order as the metadata fields\",\n+                     are in the same order as the metadata fields\",\n                 );\n                 lazy.position.get() - last_min_end.get()\n             }\n@@ -1248,12 +1248,7 @@ impl EncodeContext<'tcx> {\n         self.encode_deprecation(def_id);\n     }\n \n-    fn encode_info_for_generic_param(\n-        &mut self,\n-        def_id: DefId,\n-        kind: EntryKind<'tcx>,\n-        encode_type: bool,\n-    ) {\n+    fn encode_info_for_generic_param(&mut self, def_id: DefId, kind: EntryKind, encode_type: bool) {\n         record!(self.per_def.kind[def_id] <- kind);\n         record!(self.per_def.visibility[def_id] <- ty::Visibility::Public);\n         record!(self.per_def.span[def_id] <- self.tcx.def_span(def_id));\n@@ -1271,11 +1266,8 @@ impl EncodeContext<'tcx> {\n         let ty = self.tcx.typeck_tables_of(def_id).node_type(hir_id);\n \n         record!(self.per_def.kind[def_id] <- match ty.kind {\n-            ty::Generator(def_id, ..) => {\n-                let layout = self.tcx.generator_layout(def_id);\n-                let data = GeneratorData {\n-                    layout: layout.clone(),\n-                };\n+            ty::Generator(..) => {\n+                let data = self.tcx.generator_kind(def_id).unwrap();\n                 EntryKind::Generator(self.lazy(data))\n             }\n "}, {"sha": "a3e3165f31edf1425a175ed4c45c34c95fe89fbf", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -252,7 +252,7 @@ macro_rules! define_per_def_tables {\n }\n \n define_per_def_tables! {\n-    kind: Table<DefIndex, Lazy!(EntryKind<'tcx>)>,\n+    kind: Table<DefIndex, Lazy<EntryKind>>,\n     visibility: Table<DefIndex, Lazy<ty::Visibility>>,\n     span: Table<DefIndex, Lazy<Span>>,\n     attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n@@ -279,7 +279,7 @@ define_per_def_tables! {\n }\n \n #[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n-enum EntryKind<'tcx> {\n+enum EntryKind {\n     Const(mir::ConstQualifs, Lazy<RenderedConst>),\n     ImmStatic,\n     MutStatic,\n@@ -302,7 +302,7 @@ enum EntryKind<'tcx> {\n     Mod(Lazy<ModData>),\n     MacroDef(Lazy<MacroDef>),\n     Closure,\n-    Generator(Lazy!(GeneratorData<'tcx>)),\n+    Generator(Lazy<hir::GeneratorKind>),\n     Trait(Lazy<TraitData>),\n     Impl(Lazy<ImplData>),\n     Method(Lazy<MethodData>),"}, {"sha": "8d991927d5437a3af9f3c6fd77ef1257f1ce36d8", "filename": "src/librustc_mir/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -427,15 +427,17 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n             errci.outlived_fr,\n         );\n \n-        let (_, escapes_from) =\n-            self.infcx.tcx.article_and_description(self.universal_regions.defining_ty.def_id());\n+        let (_, escapes_from) = self\n+            .infcx\n+            .tcx\n+            .article_and_description(self.regioncx.universal_regions().defining_ty.def_id());\n \n         // Revert to the normal error in these cases.\n         // Assignments aren't \"escapes\" in function items.\n         if (fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none())\n             || (*category == ConstraintCategory::Assignment\n-                && self.universal_regions.defining_ty.is_fn_def())\n-            || self.universal_regions.defining_ty.is_const()\n+                && self.regioncx.universal_regions().defining_ty.is_fn_def())\n+            || self.regioncx.universal_regions().defining_ty.is_const()\n         {\n             return self.report_general_error(&ErrorConstraintInfo {\n                 fr_is_local: true,"}, {"sha": "af4ea759f4f8b808adb054bf851d6f323fe9a2a3", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -132,16 +132,16 @@ impl<'tcx> DefiningTy<'tcx> {\n         }\n     }\n \n-    pub fn is_closure(&self) -> bool {\n+    pub fn is_fn_def(&self) -> bool {\n         match *self {\n-            DefiningTy::Closure(..) => true,\n+            DefiningTy::FnDef(..) => true,\n             _ => false,\n         }\n     }\n \n-    pub fn is_fn_def(&self) -> bool {\n+    pub fn is_const(&self) -> bool {\n         match *self {\n-            DefiningTy::FnDef(..) => true,\n+            DefiningTy::Const(..) => true,\n             _ => false,\n         }\n     }"}, {"sha": "2b85cba900394d68b0f7778004e9ef032c39d5df", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66500effea474498052ecd0cd26274be5602a63a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=66500effea474498052ecd0cd26274be5602a63a", "patch": "@@ -76,6 +76,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         impl_polarity,\n         is_foreign_item,\n         static_mutability,\n+        generator_kind,\n         codegen_fn_attrs,\n         collect_mod_item_types,\n         ..*providers\n@@ -1006,7 +1007,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n             .struct_span_err(\n                 item.span,\n                 \"the `#[rustc_paren_sugar]` attribute is a temporary means of controlling \\\n-             which traits can use parenthetical notation\",\n+                 which traits can use parenthetical notation\",\n             )\n             .help(\"add `#![feature(unboxed_closures)]` to the crate attributes to use it\")\n             .emit();\n@@ -2106,7 +2107,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n                         ast_ty.span,\n                         &format!(\n                             \"use of SIMD type `{}` in FFI is highly experimental and \\\n-                            may result in invalid code\",\n+                             may result in invalid code\",\n                             tcx.hir().hir_to_pretty_string(ast_ty.hir_id)\n                         ),\n                     )\n@@ -2145,6 +2146,16 @@ fn static_mutability(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::Mutability>\n     }\n }\n \n+fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind> {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Item(&hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })) => {\n+            tcx.hir().body(body_id).generator_kind()\n+        }\n+        Some(_) => None,\n+        _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n+    }\n+}\n+\n fn from_target_feature(\n     tcx: TyCtxt<'_>,\n     id: DefId,"}]}