{"sha": "fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjODFlMzYyNDJkZGRkYjcxNDlhMGQxY2E0NGViY2U3ZmI5ZWVmOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T17:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-07T17:56:23Z"}, "message": "Auto merge of #53327 - wesleywiser:wip_optimize_nll, r=nikomatsakis\n\n[nll] teach SCC about `'static`\n\nr? @nikomatsakis\n\nI think this is right? I am seeing better performance on the `html5ever` benchmark but I'd like a perf run to quantify the exact speedup. There's a few ui tests failing due to changes in the error messages. The main issue seems to be that returns aren't being detected correctly?\n\n`mir_check_cast_unsize.rs` before:\n\n```\nerror: unsatisfied lifetime constraints\n  --> mir_check_cast_unsize.rs:17:46\n   |\n17 |   fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n   |  ________--____________________________________^\n   | |        |\n   | |        lifetime `'a` defined here\n18 | |     //~^ ERROR unsatisfied lifetime constraints\n19 | |     x\n20 | |     //~^ WARNING not reporting region error due to nll\n21 | | }\n   | |_^ return requires that `'a` must outlive `'static`\n```\n\n`mir_check_cast_unsize.rs` after:\n\n```\nerror: unsatisfied lifetime constraints\n  --> mir_check_cast_unsize.rs:19:5\n   |\n17 | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n   |        -- lifetime `'a` defined here\n18 |     //~^ ERROR unsatisfied lifetime constraints\n19 |     x\n   |     ^ cast requires that `'a` must outlive `'static`\n```", "tree": {"sha": "ae68e6f14d8abcbd05accc9a93bb8d9aa04471fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae68e6f14d8abcbd05accc9a93bb8d9aa04471fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "html_url": "https://github.com/rust-lang/rust/commit/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ef47bccf487a2f80f71f228d71e35f89c5e1d3", "html_url": "https://github.com/rust-lang/rust/commit/24ef47bccf487a2f80f71f228d71e35f89c5e1d3"}, {"sha": "b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1211e870370cac1000a64c48ceb8a2ad6dc1f45", "html_url": "https://github.com/rust-lang/rust/commit/b1211e870370cac1000a64c48ceb8a2ad6dc1f45"}], "stats": {"total": 566, "additions": 376, "deletions": 190}, "files": [{"sha": "db931d0a739ff8e7eedeb75d2b333899a913ca87", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -2567,6 +2567,13 @@ fn insert_late_bound_lifetimes(\n     // - do not appear in the where-clauses\n     // - are not implicitly captured by `impl Trait`\n     for param in &generics.params {\n+        match param.kind {\n+            hir::GenericParamKind::Lifetime { .. } => { /* fall through */ }\n+\n+            // Types are not late-bound.\n+            hir::GenericParamKind::Type { .. } => continue,\n+        }\n+\n         let lt_name = hir::LifetimeName::Param(param.name.modern());\n         // appears in the where clauses? early-bound.\n         if appears_in_where_clause.regions.contains(&lt_name) {"}, {"sha": "b1e8b974379d61c0335e186b785da76f82cc37f0", "filename": "src/librustc_mir/borrow_check/nll/constraints/graph.rs", "status": "modified", "additions": 70, "deletions": 14, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fgraph.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use borrow_check::nll::type_check::Locations;\n use borrow_check::nll::constraints::{ConstraintIndex, ConstraintSet, OutlivesConstraint};\n use rustc::ty::RegionVid;\n use rustc_data_structures::graph;\n@@ -31,6 +32,7 @@ crate type ReverseConstraintGraph = ConstraintGraph<Reverse>;\n crate trait ConstraintGraphDirecton: Copy + 'static {\n     fn start_region(c: &OutlivesConstraint) -> RegionVid;\n     fn end_region(c: &OutlivesConstraint) -> RegionVid;\n+    fn is_normal() -> bool;\n }\n \n /// In normal mode, a `R1: R2` constraint results in an edge `R1 ->\n@@ -48,6 +50,10 @@ impl ConstraintGraphDirecton for Normal {\n     fn end_region(c: &OutlivesConstraint) -> RegionVid {\n         c.sub\n     }\n+\n+    fn is_normal() -> bool {\n+        true\n+    }\n }\n \n /// In reverse mode, a `R1: R2` constraint results in an edge `R2 ->\n@@ -65,6 +71,10 @@ impl ConstraintGraphDirecton for Reverse {\n     fn end_region(c: &OutlivesConstraint) -> RegionVid {\n         c.sup\n     }\n+\n+    fn is_normal() -> bool {\n+        false\n+    }\n }\n \n impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n@@ -98,32 +108,74 @@ impl<D: ConstraintGraphDirecton> ConstraintGraph<D> {\n     /// Given the constraint set from which this graph was built\n     /// creates a region graph so that you can iterate over *regions*\n     /// and not constraints.\n-    crate fn region_graph<'rg>(&'rg self, set: &'rg ConstraintSet) -> RegionGraph<'rg, D> {\n-        RegionGraph::new(set, self)\n+    crate fn region_graph<'rg>(\n+        &'rg self,\n+        set: &'rg ConstraintSet,\n+        static_region: RegionVid,\n+    ) -> RegionGraph<'rg, D> {\n+        RegionGraph::new(set, self, static_region)\n     }\n \n     /// Given a region `R`, iterate over all constraints `R: R1`.\n-    crate fn outgoing_edges(&self, region_sup: RegionVid) -> Edges<'_, D> {\n-        let first = self.first_constraints[region_sup];\n-        Edges {\n-            graph: self,\n-            pointer: first,\n+    crate fn outgoing_edges<'a>(\n+        &'a self,\n+        region_sup: RegionVid,\n+        constraints: &'a ConstraintSet,\n+        static_region: RegionVid,\n+    ) -> Edges<'a, D> {\n+        //if this is the `'static` region and the graph's direction is normal,\n+        //then setup the Edges iterator to return all regions #53178\n+        if region_sup == static_region && D::is_normal() {\n+            Edges {\n+                graph: self,\n+                constraints,\n+                pointer: None,\n+                next_static_idx: Some(0),\n+                static_region,\n+            }\n+        } else {\n+            //otherwise, just setup the iterator as normal\n+            let first = self.first_constraints[region_sup];\n+            Edges {\n+                graph: self,\n+                constraints,\n+                pointer: first,\n+                next_static_idx: None,\n+                static_region,\n+           }\n         }\n     }\n }\n \n crate struct Edges<'s, D: ConstraintGraphDirecton> {\n     graph: &'s ConstraintGraph<D>,\n+    constraints: &'s ConstraintSet,\n     pointer: Option<ConstraintIndex>,\n+    next_static_idx: Option<usize>,\n+    static_region: RegionVid,\n }\n \n impl<'s, D: ConstraintGraphDirecton> Iterator for Edges<'s, D> {\n-    type Item = ConstraintIndex;\n+    type Item = OutlivesConstraint;\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if let Some(p) = self.pointer {\n             self.pointer = self.graph.next_constraints[p];\n-            Some(p)\n+\n+            Some(self.constraints[p])\n+        } else if let Some(next_static_idx) = self.next_static_idx {\n+            self.next_static_idx =\n+                if next_static_idx == (self.graph.first_constraints.len() - 1) {\n+                    None\n+                } else {\n+                    Some(next_static_idx + 1)\n+                };\n+\n+            Some(OutlivesConstraint {\n+                sup: self.static_region,\n+                sub: next_static_idx.into(),\n+                locations: Locations::All,\n+            })\n         } else {\n             None\n         }\n@@ -136,40 +188,44 @@ impl<'s, D: ConstraintGraphDirecton> Iterator for Edges<'s, D> {\n crate struct RegionGraph<'s, D: ConstraintGraphDirecton> {\n     set: &'s ConstraintSet,\n     constraint_graph: &'s ConstraintGraph<D>,\n+    static_region: RegionVid,\n }\n \n impl<'s, D: ConstraintGraphDirecton> RegionGraph<'s, D> {\n     /// Create a \"dependency graph\" where each region constraint `R1:\n     /// R2` is treated as an edge `R1 -> R2`. We use this graph to\n     /// construct SCCs for region inference but also for error\n     /// reporting.\n-    crate fn new(set: &'s ConstraintSet, constraint_graph: &'s ConstraintGraph<D>) -> Self {\n+    crate fn new(\n+        set: &'s ConstraintSet,\n+        constraint_graph: &'s ConstraintGraph<D>,\n+        static_region: RegionVid,\n+    ) -> Self {\n         Self {\n             set,\n             constraint_graph,\n+            static_region,\n         }\n     }\n \n     /// Given a region `R`, iterate over all regions `R1` such that\n     /// there exists a constraint `R: R1`.\n     crate fn outgoing_regions(&self, region_sup: RegionVid) -> Successors<'_, D> {\n         Successors {\n-            set: self.set,\n-            edges: self.constraint_graph.outgoing_edges(region_sup),\n+            edges: self.constraint_graph.outgoing_edges(region_sup, self.set, self.static_region),\n         }\n     }\n }\n \n crate struct Successors<'s, D: ConstraintGraphDirecton> {\n-    set: &'s ConstraintSet,\n     edges: Edges<'s, D>,\n }\n \n impl<'s, D: ConstraintGraphDirecton> Iterator for Successors<'s, D> {\n     type Item = RegionVid;\n \n     fn next(&mut self) -> Option<Self::Item> {\n-        self.edges.next().map(|c| D::end_region(&self.set[c]))\n+        self.edges.next().map(|c| D::end_region(&c))\n     }\n }\n "}, {"sha": "9a8b0f391de9d1339d512a84239c0039964f355a", "filename": "src/librustc_mir/borrow_check/nll/constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fconstraints%2Fmod.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -58,8 +58,9 @@ impl ConstraintSet {\n     crate fn compute_sccs(\n         &self,\n         constraint_graph: &graph::NormalConstraintGraph,\n+        static_region: RegionVid,\n     ) -> Sccs<RegionVid, ConstraintSccIndex> {\n-        let region_graph = &constraint_graph.region_graph(self);\n+        let region_graph = &constraint_graph.region_graph(self, static_region);\n         Sccs::new(region_graph)\n     }\n }"}, {"sha": "0b9b9b33b3f154577bda5fa1edff3c0998b1899a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use borrow_check::nll::region_infer::{ConstraintIndex, RegionInferenceContext};\n+use borrow_check::nll::constraints::OutlivesConstraint;\n+use borrow_check::nll::region_infer::RegionInferenceContext;\n use borrow_check::nll::type_check::Locations;\n use rustc::hir::def_id::DefId;\n use rustc::infer::error_reporting::nice_region_error::NiceRegionError;\n@@ -53,7 +54,7 @@ impl fmt::Display for ConstraintCategory {\n #[derive(Copy, Clone, PartialEq, Eq)]\n enum Trace {\n     StartRegion,\n-    FromConstraint(ConstraintIndex),\n+    FromOutlivesConstraint(OutlivesConstraint),\n     NotVisited,\n }\n \n@@ -80,12 +81,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\n             \"best_blame_constraint: path={:#?}\",\n             path.iter()\n-                .map(|&ci| format!(\n-                    \"{:?}: {:?} ({:?}: {:?})\",\n-                    ci,\n-                    &self.constraints[ci],\n-                    self.constraint_sccs.scc(self.constraints[ci].sup),\n-                    self.constraint_sccs.scc(self.constraints[ci].sub),\n+                .map(|&c| format!(\n+                    \"{:?} ({:?}: {:?})\",\n+                    c,\n+                    self.constraint_sccs.scc(c.sup),\n+                    self.constraint_sccs.scc(c.sub),\n                 ))\n                 .collect::<Vec<_>>()\n         );\n@@ -121,7 +121,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // highlight (e.g., a call site or something).\n         let target_scc = self.constraint_sccs.scc(target_region);\n         let best_choice = (0..path.len()).rev().find(|&i| {\n-            let constraint = &self.constraints[path[i]];\n+            let constraint = path[i];\n \n             let constraint_sup_scc = self.constraint_sccs.scc(constraint.sup);\n \n@@ -164,7 +164,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         from_region: RegionVid,\n         target_test: impl Fn(RegionVid) -> bool,\n-    ) -> Option<(Vec<ConstraintIndex>, RegionVid)> {\n+    ) -> Option<(Vec<OutlivesConstraint>, RegionVid)> {\n         let mut context = IndexVec::from_elem(Trace::NotVisited, &self.definitions);\n         context[from_region] = Trace::StartRegion;\n \n@@ -185,9 +185,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         Trace::NotVisited => {\n                             bug!(\"found unvisited region {:?} on path to {:?}\", p, r)\n                         }\n-                        Trace::FromConstraint(c) => {\n+                        Trace::FromOutlivesConstraint(c) => {\n                             result.push(c);\n-                            p = self.constraints[c].sup;\n+                            p = c.sup;\n                         }\n \n                         Trace::StartRegion => {\n@@ -201,11 +201,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // Otherwise, walk over the outgoing constraints and\n             // enqueue any regions we find, keeping track of how we\n             // reached them.\n-            for constraint in self.constraint_graph.outgoing_edges(r) {\n-                assert_eq!(self.constraints[constraint].sup, r);\n-                let sub_region = self.constraints[constraint].sub;\n+            let fr_static = self.universal_regions.fr_static;\n+            for constraint in self.constraint_graph.outgoing_edges(r,\n+                                                                   &self.constraints,\n+                                                                   fr_static) {\n+                assert_eq!(constraint.sup, r);\n+                let sub_region = constraint.sub;\n                 if let Trace::NotVisited = context[sub_region] {\n-                    context[sub_region] = Trace::FromConstraint(constraint);\n+                    context[sub_region] = Trace::FromOutlivesConstraint(constraint);\n                     deque.push_back(sub_region);\n                 }\n             }\n@@ -216,8 +219,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n     /// This function will return true if a constraint is interesting and false if a constraint\n     /// is not. It is useful in filtering constraint paths to only interesting points.\n-    fn constraint_is_interesting(&self, index: ConstraintIndex) -> bool {\n-        let constraint = self.constraints[index];\n+    fn constraint_is_interesting(&self, constraint: OutlivesConstraint) -> bool {\n         debug!(\n             \"constraint_is_interesting: locations={:?} constraint={:?}\",\n             constraint.locations, constraint\n@@ -232,19 +234,18 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     /// This function classifies a constraint from a location.\n     fn classify_constraint(\n         &self,\n-        index: ConstraintIndex,\n+        constraint: OutlivesConstraint,\n         mir: &Mir<'tcx>,\n         tcx: TyCtxt<'_, '_, 'tcx>,\n     ) -> (ConstraintCategory, Span) {\n-        let constraint = self.constraints[index];\n         debug!(\"classify_constraint: constraint={:?}\", constraint);\n         let span = constraint.locations.span(mir);\n         let location = constraint\n             .locations\n             .from_location()\n             .unwrap_or(Location::START);\n \n-        if !self.constraint_is_interesting(index) {\n+        if !self.constraint_is_interesting(constraint) {\n             return (ConstraintCategory::Boring, span);\n         }\n "}, {"sha": "5ae123bdc18d16b45f81733cea4a71244af9cf03", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 53, "deletions": 45, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use borrow_check::nll::region_infer::RegionInferenceContext;\n-use borrow_check::nll::ToRegionVid;\n use borrow_check::nll::universal_regions::DefiningTy;\n+use borrow_check::nll::ToRegionVid;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n@@ -62,20 +62,26 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         assert!(self.universal_regions.is_universal_region(fr));\n \n-        self.give_name_from_error_region(infcx.tcx, mir_def_id, fr, counter, diag)\n+        let value = self.give_name_from_error_region(infcx.tcx, mir_def_id, fr, counter, diag)\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_arguments(\n-                    infcx, mir, mir_def_id, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag,\n+                )\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_upvars(\n-                    infcx.tcx, mir, fr, counter, diag)\n+                    infcx.tcx, mir, fr, counter, diag,\n+                )\n             })\n             .or_else(|| {\n                 self.give_name_if_anonymous_region_appears_in_output(\n-                    infcx, mir, mir_def_id, fr, counter, diag)\n+                    infcx, mir, mir_def_id, fr, counter, diag,\n+                )\n             })\n-            .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr))\n+            .unwrap_or_else(|| span_bug!(mir.span, \"can't make a name for free region {:?}\", fr));\n+\n+        debug!(\"give_region_a_name: gave name {:?}\", value);\n+        value\n     }\n \n     /// Check for the case where `fr` maps to something that the\n@@ -101,23 +107,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 } else {\n                     None\n                 }\n-            },\n+            }\n \n             ty::ReStatic => Some(keywords::StaticLifetime.name().as_interned_str()),\n \n             ty::ReFree(free_region) => match free_region.bound_region {\n                 ty::BoundRegion::BrNamed(_, name) => {\n                     self.highlight_named_span(tcx, error_region, &name, diag);\n                     Some(name)\n-                },\n+                }\n \n                 ty::BoundRegion::BrEnv => {\n                     let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n                     let def_ty = self.universal_regions.defining_ty;\n \n                     if let DefiningTy::Closure(def_id, substs) = def_ty {\n-                        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _)\n-                            = tcx.hir.expect_expr(mir_node_id).node\n+                        let args_span = if let hir::ExprKind::Closure(_, _, _, span, _) =\n+                            tcx.hir.expect_expr(mir_node_id).node\n                         {\n                             span\n                         } else {\n@@ -195,16 +201,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let node = tcx.hir.as_local_node_id(scope).unwrap_or(DUMMY_NODE_ID);\n \n         let mut sp = cm.def_span(tcx.hir.span(node));\n-        if let Some(param) = tcx.hir.get_generics(scope).and_then(|generics| {\n-            generics.get_named(name)\n-        }) {\n+        if let Some(param) = tcx.hir\n+            .get_generics(scope)\n+            .and_then(|generics| generics.get_named(name))\n+        {\n             sp = param.span;\n         }\n \n-        diag.span_label(\n-            sp,\n-            format!(\"lifetime `{}` defined here\", name),\n-        );\n+        diag.span_label(sp, format!(\"lifetime `{}` defined here\", name));\n     }\n \n     /// Find an argument that contains `fr` and label it with a fully\n@@ -242,14 +246,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             return Some(region_name);\n         }\n \n-        self.give_name_if_we_cannot_match_hir_ty(\n-            infcx,\n-            mir,\n-            fr,\n-            arg_ty,\n-            counter,\n-            diag,\n-        )\n+        self.give_name_if_we_cannot_match_hir_ty(infcx, mir, fr, arg_ty, counter, diag)\n     }\n \n     fn give_name_if_we_can_match_hir_ty_from_argument(\n@@ -314,8 +311,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             infcx.extract_type_name(&argument_ty)\n         });\n \n-        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n-               type_name, needle_fr);\n+        debug!(\n+            \"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n+            type_name, needle_fr\n+        );\n         let assigned_region_name = if type_name.find(&format!(\"'{}\", counter)).is_some() {\n             // Only add a label if we can confirm that a region was labelled.\n             let argument_index = self.get_argument_index_for_region(infcx.tcx, needle_fr)?;\n@@ -547,13 +546,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n         let upvar_index = self.get_upvar_index_for_region(tcx, fr)?;\n-        let (upvar_name, upvar_span) = self.get_upvar_name_and_span_for_region(tcx, mir,\n-                                                                               upvar_index);\n+        let (upvar_name, upvar_span) =\n+            self.get_upvar_name_and_span_for_region(tcx, mir, upvar_index);\n         let region_name = self.synthesize_region_name(counter);\n \n         diag.span_label(\n             upvar_span,\n-            format!(\"lifetime `{}` appears in the type of `{}`\", region_name, upvar_name),\n+            format!(\n+                \"lifetime `{}` appears in the type of `{}`\",\n+                region_name, upvar_name\n+            ),\n         );\n \n         Some(region_name)\n@@ -579,27 +581,33 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             \"give_name_if_anonymous_region_appears_in_output: return_ty = {:?}\",\n             return_ty\n         );\n-        if !infcx.tcx.any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr) {\n+        if !infcx\n+            .tcx\n+            .any_free_region_meets(&return_ty, |r| r.to_region_vid() == fr)\n+        {\n             return None;\n         }\n \n-        let type_name = with_highlight_region(fr, *counter, || {\n-            infcx.extract_type_name(&return_ty)\n-        });\n+        let type_name = with_highlight_region(fr, *counter, || infcx.extract_type_name(&return_ty));\n \n         let mir_node_id = tcx.hir.as_local_node_id(mir_def_id).expect(\"non-local mir\");\n \n-        let (return_span, mir_description) = if let hir::ExprKind::Closure(_, _, _, span, gen_move)\n-            = tcx.hir.expect_expr(mir_node_id).node\n-        {\n-            (\n-                tcx.sess.source_map().end_point(span),\n-                if gen_move.is_some() { \" of generator\" } else { \" of closure\" }\n-            )\n-        } else {\n-            // unreachable?\n-            (mir.span, \"\")\n-        };\n+        let (return_span, mir_description) =\n+            if let hir::ExprKind::Closure(_, _, _, span, gen_move) =\n+                tcx.hir.expect_expr(mir_node_id).node\n+            {\n+                (\n+                    tcx.sess.source_map().end_point(span),\n+                    if gen_move.is_some() {\n+                        \" of generator\"\n+                    } else {\n+                        \" of closure\"\n+                    },\n+                )\n+            } else {\n+                // unreachable?\n+                (mir.span, \"\")\n+            };\n \n         diag.span_label(\n             return_span,"}, {"sha": "bbdf2a929221093d88f37b7f083a4f5f5807901a", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -11,7 +11,7 @@\n use super::universal_regions::UniversalRegions;\n use borrow_check::nll::constraints::graph::NormalConstraintGraph;\n use borrow_check::nll::constraints::{\n-    ConstraintIndex, ConstraintSccIndex, ConstraintSet, OutlivesConstraint,\n+    ConstraintSccIndex, ConstraintSet, OutlivesConstraint,\n };\n use borrow_check::nll::region_infer::values::{RegionElement, ToElementIndex};\n use borrow_check::nll::type_check::free_region_relations::UniversalRegionRelations;\n@@ -234,7 +234,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n \n         let constraints = Rc::new(outlives_constraints); // freeze constraints\n         let constraint_graph = Rc::new(constraints.graph(definitions.len()));\n-        let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph));\n+        let fr_static = universal_regions.fr_static;\n+        let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n         let mut scc_values = RegionValues::new(elements, universal_regions.len(), max_universe);\n "}, {"sha": "357e9ee72102a6d59400a32847cfac8f616f440a", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -69,7 +69,8 @@ fn regions_that_outlive_free_regions(\n     // reachable from each free region, we will have all the\n     // regions that are forced to outlive some free region.\n     let rev_constraint_graph = constraint_set.reverse_graph(num_region_vars);\n-    let rev_region_graph = rev_constraint_graph.region_graph(constraint_set);\n+    let fr_static = universal_regions.fr_static;\n+    let rev_region_graph = rev_constraint_graph.region_graph(constraint_set, fr_static);\n \n     // Stack for the depth-first search. Start out with all the free regions.\n     let mut stack: Vec<_> = universal_regions.universal_regions().collect();"}, {"sha": "5115312825605c18b11f0e99d532d42b4a1a8fc5", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -241,8 +241,9 @@ impl<'tcx> UniversalRegions<'tcx> {\n             region_mapping.push(fr);\n         });\n \n-        for_each_late_bound_region_defined_on(\n-            tcx, closure_base_def_id, |r| { region_mapping.push(r); });\n+        for_each_late_bound_region_defined_on(tcx, closure_base_def_id, |r| {\n+            region_mapping.push(r);\n+        });\n \n         assert_eq!(\n             region_mapping.len(),\n@@ -352,9 +353,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         //     let c = || { let x: &'a u32 = ...; }\n         // }\n         if self.mir_def_id != closure_base_def_id {\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n-                self.mir_def_id,\n-                &mut indices)\n+            self.infcx\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices)\n         }\n \n         let bound_inputs_and_output = self.compute_inputs_and_output(&indices, defining_ty);\n@@ -371,9 +371,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         // Converse of above, if this is a function then the late-bound regions declared on its\n         // signature are local to the fn.\n         if self.mir_def_id == closure_base_def_id {\n-            self.infcx.replace_late_bound_regions_with_nll_infer_vars(\n-                self.mir_def_id,\n-                &mut indices);\n+            self.infcx\n+                .replace_late_bound_regions_with_nll_infer_vars(self.mir_def_id, &mut indices);\n         }\n \n         let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n@@ -582,11 +581,10 @@ trait InferCtxtExt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>;\n \n-\n     fn replace_late_bound_regions_with_nll_infer_vars(\n         &self,\n         mir_def_id: DefId,\n-        indices: &mut UniversalRegionIndices<'tcx>\n+        indices: &mut UniversalRegionIndices<'tcx>,\n     );\n }\n \n@@ -619,14 +617,15 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n             value, all_outlive_scope,\n         );\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n+            debug!(\"replace_bound_regions_with_nll_infer_vars: br={:?}\", br);\n             let liberated_region = self.tcx.mk_region(ty::ReFree(ty::FreeRegion {\n                 scope: all_outlive_scope,\n                 bound_region: br,\n             }));\n             let region_vid = self.next_nll_region_var(origin);\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n             debug!(\n-                \"liberated_region={:?} => {:?}\",\n+                \"replace_bound_regions_with_nll_infer_vars: liberated_region={:?} => {:?}\",\n                 liberated_region, region_vid\n             );\n             region_vid\n@@ -648,12 +647,18 @@ impl<'cx, 'gcx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'gcx, 'tcx> {\n         mir_def_id: DefId,\n         indices: &mut UniversalRegionIndices<'tcx>,\n     ) {\n+        debug!(\n+            \"replace_late_bound_regions_with_nll_infer_vars(mir_def_id={:?})\",\n+            mir_def_id\n+        );\n         let closure_base_def_id = self.tcx.closure_base_def_id(mir_def_id);\n         for_each_late_bound_region_defined_on(self.tcx, closure_base_def_id, |r| {\n+            debug!(\"replace_late_bound_regions_with_nll_infer_vars: r={:?}\", r);\n             if !indices.indices.contains_key(&r) {\n                 let region_vid = self.next_nll_region_var(FR);\n                 indices.insert_late_bound_region(r, region_vid.to_region_vid());\n-            }});\n+            }\n+        });\n     }\n }\n \n@@ -703,11 +708,14 @@ impl<'tcx> UniversalRegionIndices<'tcx> {\n fn for_each_late_bound_region_defined_on<'tcx>(\n     tcx: TyCtxt<'_, '_, 'tcx>,\n     fn_def_id: DefId,\n-    mut f: impl FnMut(ty::Region<'tcx>)\n-    ) {\n+    mut f: impl FnMut(ty::Region<'tcx>),\n+) {\n     if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.index) {\n         for late_bound in late_bounds.iter() {\n-            let hir_id = HirId{ owner: fn_def_id.index, local_id: *late_bound };\n+            let hir_id = HirId {\n+                owner: fn_def_id.index,\n+                local_id: *late_bound,\n+            };\n             let region_node_id = tcx.hir.hir_to_node_id(hir_id);\n             let name = tcx.hir.name(region_node_id).as_interned_str();\n             let region_def_id = tcx.hir.local_def_id(region_node_id);"}, {"sha": "c7fa7973a2d4d608d41778e5b1abb2850fb52a03", "filename": "src/test/mir-opt/nll/named-lifetimes-basic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -34,7 +34,7 @@ fn main() {\n // | '_#4r    | Local    | ['_#4r]\n // |\n // | Inferred Region Values\n-// | '_#0r    | U0 | {bb0[0..=1], '_#0r}\n+// | '_#0r    | U0 | {bb0[0..=1], '_#0r, '_#1r, '_#2r, '_#3r, '_#4r}\n // | '_#1r    | U0 | {bb0[0..=1], '_#1r}\n // | '_#2r    | U0 | {bb0[0..=1], '_#2r}\n // | '_#3r    | U0 | {bb0[0..=1], '_#3r}"}, {"sha": "2f632fec17e9ebee2649979208611da3a2d77f80", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -6,5 +6,15 @@ LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-contravariant.rs:48:4\n+   |\n+LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |    ^^^^^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "63e1f665005cc3cfac686e8d72b6f188e7e134b1", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -7,5 +7,16 @@ LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n LL |    bar(foo, x) //[transmute]~ ERROR E0495\n    |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/project-fn-ret-invariant.rs:58:13\n+   |\n+LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n+   |        -- -- lifetime `'b` defined here\n+   |        |\n+   |        lifetime `'a` defined here\n+...\n+LL |    bar(foo, x) //[transmute]~ ERROR E0495\n+   |             ^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d75de81fc1c7fad951aa779bce692990d69a86fe", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -4,15 +4,15 @@ error: unsatisfied lifetime constraints\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |         ^^^^^^ cast requires that `'1` must outlive `'static`\n \n error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    -- lifetime `'a` defined here\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n+   |         ^^^^^^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9963954c9c2d46a868b9bff6e9fe3f113214dd6f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -43,7 +43,8 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-        //~^ ERROR\n+        //~^ ERROR borrowed data escapes outside of function\n+        //~| ERROR unsatisfied lifetime constraints\n \n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())"}, {"sha": "f50864d946be9bf152caee72ad951d6f6779f87c", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -3,7 +3,8 @@ note: External requirements\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n    |  _______________________________________________^\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n@@ -22,8 +23,8 @@ note: No external requirements\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         //~^ ERROR\n-LL | |\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n ...  |\n LL | |     });\n LL | | }\n@@ -37,12 +38,23 @@ error: borrowed data escapes outside of function\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:29\n+   |\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d35b5c34a91811fefefc796833fad76fefcdabae", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -46,7 +46,8 @@ fn demand_y<'x, 'y>(_cell_x: &Cell<&'x u32>, _cell_y: &Cell<&'y u32>, _y: &'y u3\n #[rustc_regions]\n fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-        //~^ ERROR\n+        //~^ ERROR borrowed data escapes outside of function\n+        //~| ERROR unsatisfied lifetime constraints\n         // Only works if 'x: 'y:\n         demand_y(x, y, x.get())\n     });"}, {"sha": "8a89320d10cad82684df5f9af2cef4c23f9c7fbf", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -3,7 +3,8 @@ note: External requirements\n    |\n LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n    |  _______________________________________________^\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n@@ -21,9 +22,9 @@ note: No external requirements\n    |\n LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n+...  |\n LL | |     });\n LL | | }\n    | |_^\n@@ -36,11 +37,22 @@ error: borrowed data escapes outside of function\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n    |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         //~^ ERROR\n+LL | |         //~^ ERROR borrowed data escapes outside of function\n+LL | |         //~| ERROR unsatisfied lifetime constraints\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |     });\n    | |______^ `cell_a` escapes the function body here\n \n-error: aborting due to previous error\n+error: unsatisfied lifetime constraints\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:29\n+   |\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   |           --  -- lifetime `'b` defined here\n+   |           |\n+   |           lifetime `'a` defined here\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                             ^^^^^^^ requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "d1976b40df41496b4454d97f4d7cdc19933347b1", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -17,7 +17,7 @@ LL | |     });\n                i32,\n                extern \"rust-call\" fn((T,))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 2\n    = note: where T: '_#1r\n \n note: No external requirements"}, {"sha": "332ec7a7da28cc570f78189fa3581666dceb3909", "filename": "src/test/ui/nll/mir_check_cast_reify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -44,8 +44,8 @@ fn bar<'a>(x: &'a u32) -> &'static u32 {\n     // The MIR type checker must therefore relate `'?0` to `'?1` and `'?2`\n     // as part of checking the `ReifyFnPointer`.\n     let f: fn(_) -> _ = foo;\n+    //~^ ERROR unsatisfied lifetime constraints\n     f(x)\n-    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "fa5c4100c91e48e54166b6d940f6b34aa9ca4fdd", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_reify.rs:47:5\n+  --> $DIR/mir_check_cast_reify.rs:46:25\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     f(x)\n-   |     ^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     let f: fn(_) -> _ = foo;\n+   |                         ^^^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "937ab31c3158646b8d82c08a31bd03c200fb0d91", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -16,8 +16,8 @@ fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n     // Here the NLL checker must relate the types in `f` to the types\n     // in `g`. These are related via the `UnsafeFnPointer` cast.\n     let g: unsafe fn(_) -> _ = f;\n+    //~^ ERROR unsatisfied lifetime constraints\n     unsafe { g(input) }\n-    //~^ ERROR\n }\n \n fn main() {}"}, {"sha": "82ff71c0551571d72933b4afccdac11586c6c448", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,11 +1,11 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/mir_check_cast_unsafe_fn.rs:19:14\n+  --> $DIR/mir_check_cast_unsafe_fn.rs:18:32\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n    |        -- lifetime `'a` defined here\n ...\n-LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+LL |     let g: unsafe fn(_) -> _ = f;\n+   |                                ^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "77a2e8311f052c8c5e812692fb989e49cc75933e", "filename": "src/test/ui/nll/mir_check_cast_unsize.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsize.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -4,7 +4,7 @@ error: unsatisfied lifetime constraints\n LL | fn bar<'a>(x: &'a u32) -> &'static dyn Debug {\n    |        -- lifetime `'a` defined here\n LL |     x\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n+   |     ^ cast requires that `'a` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "9b7fe466696f8b0f0ace1bf1401b29953ef0a80b", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n@@ -50,7 +50,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n@@ -82,7 +82,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements\n@@ -124,7 +124,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements"}, {"sha": "24f4bea1ba2f8cb99f112ec470fcbf4707833026", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n    = note: where '_#1r: '_#2r\n \n@@ -63,7 +63,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -117,7 +117,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n \n@@ -171,7 +171,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n    = note: where '_#2r: '_#3r\n "}, {"sha": "df4f619b7763b07321f639381db3aecfeeec9ad9", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n@@ -54,7 +54,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -99,7 +99,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -144,7 +144,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n@@ -177,7 +177,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where '_#1r: '_#2r\n \n note: No external requirements"}, {"sha": "b492525352442c6967e27037b7a4a8d17b5e6594", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -46,7 +46,7 @@ where\n     T: Anything<'b, 'c>,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -56,7 +56,7 @@ where\n     'a: 'a,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -76,7 +76,7 @@ where\n     // can do better here with a more involved verification step.\n \n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+    //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n }\n \n #[rustc_regions]\n@@ -103,7 +103,7 @@ where\n     T: Anything<'b, 'b>,\n {\n     with_signature(cell, t, |cell, t| require(cell, t));\n-    //~^ ERROR\n+    //~^ ERROR unsatisfied lifetime constraints\n }\n \n #[rustc_regions]"}, {"sha": "176e45ae09872fa2786dc56ad591b55315294eeb", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -11,7 +11,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n@@ -22,7 +22,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -32,13 +32,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:58:29\n@@ -54,7 +54,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -65,7 +65,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n ...  |\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -76,13 +76,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:58:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n@@ -98,7 +98,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -109,7 +109,7 @@ LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n ...  |\n-LL | |     //~^ ERROR associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+LL | |     //~^ ERROR associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n LL | | }\n    | |_^\n    |\n@@ -120,13 +120,13 @@ LL | | }\n                T\n            ]\n \n-error[E0309]: the associated type `<T as Anything<'_#7r, '_#8r>>::AssocType` may not live long enough\n+error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n   --> $DIR/projection-two-region-trait-bound-closure.rs:78:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding an explicit lifetime bound `<T as Anything<'_#7r, '_#8r>>::AssocType: ReEarlyBound(0, 'a)`...\n+   = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: External requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:88:29\n@@ -142,7 +142,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -178,7 +178,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#4r ()>, T))\n            ]\n-   = note: number of external vids: 6\n+   = note: number of external vids: 5\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n@@ -212,7 +212,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n@@ -223,7 +223,7 @@ LL | | where\n LL | |     T: Anything<'b, 'b>,\n LL | | {\n LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |     //~^ ERROR\n+LL | |     //~^ ERROR unsatisfied lifetime constraints\n LL | | }\n    | |_^\n    |\n@@ -256,7 +256,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n@@ -289,7 +289,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements"}, {"sha": "1f5edf08957d6d64f7e3a1ab4aaa2afa67acdfa2", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -9,7 +9,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 3\n+   = note: number of external vids: 2\n    = note: where T: '_#1r\n \n note: No external requirements\n@@ -36,7 +36,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n                i16,\n                for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n note: No external requirements"}, {"sha": "9e69ae051732c260db94b5e91372ad33fa74ec1a", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -10,7 +10,7 @@ LL |     with_signature(x, |y| y)\n                i32,\n                extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#2r\n \n note: No external requirements"}, {"sha": "1b9baf61305d99cc2514617b5fded3941f775f59", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -16,7 +16,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#1r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#1r\n \n note: No external requirements\n@@ -69,7 +69,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 4\n+   = note: number of external vids: 3\n    = note: where T: '_#2r\n \n note: No external requirements\n@@ -106,7 +106,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#2r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#2r\n \n note: No external requirements\n@@ -156,7 +156,7 @@ LL | |     })\n                i32,\n                extern \"rust-call\" fn((std::cell::Cell<&'_#3r ()>, T))\n            ]\n-   = note: number of external vids: 5\n+   = note: number of external vids: 4\n    = note: where T: '_#3r\n \n note: No external requirements"}, {"sha": "a85822e48fa6a777ede73b7825d734a20cd2face", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-self.rs:17:37\n+  --> $DIR/regions-addr-of-self.rs:17:13\n    |\n LL |     pub fn chase_cat(&mut self) {\n    |                      - let's call the lifetime of this reference `'1`\n LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |             ^ requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}, {"sha": "9d6301af0fbea65c32c08dce7aff48d8437f63da", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,10 +1,22 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:41\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n    |\n LL |         let _f = || {\n    |                  -- lifetime `'1` represents this closure's body\n LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                                         ^^^^^^^^^^^^^^ requires that `'1` must outlive `'static`\n+   |                 ^ requires that `'1` must outlive `'static`\n+   |\n+   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-addr-of-upvar-self.rs:20:17\n+   |\n+LL |     pub fn chase_cat(&mut self) {\n+   |                      --------- lifetime `'2` appears in the type of `self`\n+LL |         let _f = || {\n+   |                  -- lifetime `'1` represents this closure's body\n+LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n+   |                 ^ requires that `'1` must outlive `'2`\n    |\n    = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n \n@@ -29,6 +41,6 @@ LL |     }\n    |\n    = note: borrowed value must be valid for the static lifetime...\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "e619431ddbbc35b9330883ef56c1a31e3f5d4ba5", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -1,10 +1,10 @@\n error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-2.rs:20:5\n+  --> $DIR/regions-close-object-into-object-2.rs:20:11\n    |\n LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n    |      -- lifetime `'a` defined here\n LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n+   |           ^^^ cast requires that `'a` must outlive `'static`\n \n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-2.rs:20:11"}, {"sha": "1de1cdc9807f92feba3e0eb59ca66e4b91aa758e", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -6,14 +6,6 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-4.rs:20:5\n-   |\n-LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n-   |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:9\n    |\n@@ -22,6 +14,14 @@ LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n    |\n    = help: consider adding an explicit lifetime bound `U: 'static`...\n \n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-close-object-into-object-4.rs:20:11\n+   |\n+LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+   |      -- lifetime `'a` defined here\n+LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n+   |           ^^^ cast requires that `'a` must outlive `'static`\n+\n error[E0597]: `*v` does not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:20:11\n    |"}, {"sha": "dc3a32cec6ac7b700d1eaa8821243451c253c61b", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -15,14 +15,35 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n-error: aborting due to 3 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:24:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'2`\n+   |             |\n+   |             let's call the lifetime of this reference `'1`\n+LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:27:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             let's call the lifetime of this reference `'2`\n+...\n+LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0621`."}, {"sha": "16add00eb41e13c73f7e6b440a02d1799f21a7b1", "filename": "src/test/ui/regions/regions-static-bound.ll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -20,7 +20,7 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`"}, {"sha": "dc3a32cec6ac7b700d1eaa8821243451c253c61b", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -15,14 +15,35 @@ LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of\n    |     ^^^^^^^^^^^^^ lifetime `'static` required\n \n error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:26:5\n+  --> $DIR/regions-static-bound.rs:27:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n ...\n LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n    |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n-error: aborting due to 3 previous errors\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:24:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'2`\n+   |             |\n+   |             let's call the lifetime of this reference `'1`\n+LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n+   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/regions-static-bound.rs:27:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             -       - let's call the lifetime of this reference `'1`\n+   |             |\n+   |             let's call the lifetime of this reference `'2`\n+...\n+LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0621`."}, {"sha": "34baf5ffff0a73755431ed6404ecebddb22d47ae", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -23,8 +23,10 @@ fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n fn error(u: &(), v: &()) {\n     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `u` [E0621]\n+    //[nll]~| ERROR unsatisfied lifetime constraints\n     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n     //[nll]~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    //[nll]~| ERROR unsatisfied lifetime constraints\n }\n \n fn main() {}"}, {"sha": "745c65c54df4a1497dd17a1234f76db758c526f9", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=fc81e36242ddddb7149a0d1ca44ebce7fb9eef8a", "patch": "@@ -5,7 +5,7 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                - let's call the lifetime of this reference `'1`\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ cast requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n "}]}