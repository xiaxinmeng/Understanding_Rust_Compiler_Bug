{"sha": "6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhODRkMzQ3ODQ0YWZjNWIyMjhhNjdhYzhiYjE0N2YzZDBlNDBkZGI=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-24T17:33:41Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-09-11T18:24:53Z"}, "message": "Create a valid `Res` in `external_path()`\n\nThe order of the `where` bounds on auto trait impls changed because\nrustdoc currently sorts auto trait `where` bounds based on the `Debug`\noutput for the bound. Now that the bounds have an actual `Res`, they are\nbeing unintentionally sorted by their `DefId` rather than their path.\nSo, I had to update a test for the change in ordering of the rendered\nbounds.", "tree": {"sha": "89569d7cdc35d6ab52e5f9e308f40ca5aff00268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89569d7cdc35d6ab52e5f9e308f40ca5aff00268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "html_url": "https://github.com/rust-lang/rust/commit/6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bb1c285af51def917dd17ec1b1815cb34d4b208", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb1c285af51def917dd17ec1b1815cb34d4b208", "html_url": "https://github.com/rust-lang/rust/commit/0bb1c285af51def917dd17ec1b1815cb34d4b208"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "fc4f22ca4f4807a82917c8e6fa73a1c89c9eb966", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "patch": "@@ -166,7 +166,7 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n         inline::record_extern_fqn(cx, trait_ref.def_id, kind);\n         let path = external_path(\n             cx,\n-            cx.tcx.item_name(trait_ref.def_id),\n+            trait_ref.def_id,\n             Some(trait_ref.def_id),\n             true,\n             bounds.to_vec(),\n@@ -1448,19 +1448,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => ItemType::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n+                let path = external_path(cx, did, None, false, vec![], substs);\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n-                let path = external_path(\n-                    cx,\n-                    cx.tcx.item_name(did),\n-                    None,\n-                    false,\n-                    vec![],\n-                    InternalSubsts::empty(),\n-                );\n+                let path = external_path(cx, did, None, false, vec![], InternalSubsts::empty());\n                 ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n@@ -1484,8 +1477,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n-                    let path =\n-                        external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n+                    let path = external_path(cx, did, Some(did), false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = PolyTrait {\n                         trait_: ResolvedPath { path, did, is_generic: false },\n@@ -1502,8 +1494,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     });\n                 }\n \n-                let path =\n-                    external_path(cx, cx.tcx.item_name(did), Some(did), false, bindings, substs);\n+                let path = external_path(cx, did, Some(did), false, bindings, substs);\n                 bounds.insert(\n                     0,\n                     PolyTrait {"}, {"sha": "8d89fae665777daf0460d9699aaf2c14fc62b324", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "patch": "@@ -1158,7 +1158,7 @@ impl GenericBound {\n     crate fn maybe_sized(cx: &mut DocContext<'_>) -> GenericBound {\n         let did = cx.tcx.require_lang_item(LangItem::Sized, None);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n+        let path = external_path(cx, did, Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {"}, {"sha": "b6911e8886766da4b631556dd1c60202cb115258", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "patch": "@@ -141,19 +141,21 @@ fn external_generic_args(\n     }\n }\n \n-// trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n-// from Fn<(A, B,), C> to Fn(A, B) -> C\n+/// trait_did should be set to a trait's DefId if called on a TraitRef, in order to sugar\n+/// from `Fn<(A, B,), C>` to `Fn(A, B) -> C`\n pub(super) fn external_path(\n     cx: &mut DocContext<'_>,\n-    name: Symbol,\n+    did: DefId,\n     trait_did: Option<DefId>,\n     has_self: bool,\n     bindings: Vec<TypeBinding>,\n     substs: SubstsRef<'_>,\n ) -> Path {\n+    let def_kind = cx.tcx.def_kind(did);\n+    let name = cx.tcx.item_name(did);\n     Path {\n         global: false,\n-        res: Res::Err,\n+        res: Res::Def(def_kind, did),\n         segments: vec![PathSegment {\n             name,\n             args: external_generic_args(cx, trait_did, has_self, bindings, substs),"}, {"sha": "16ab876e829ef8f25f4d82d79529e4c89c84f3ca", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a84d347844afc5b228a67ac8bb147f3d0e40ddb/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=6a84d347844afc5b228a67ac8bb147f3d0e40ddb", "patch": "@@ -10,7 +10,7 @@ where\n \n // @has no_redundancy/struct.Outer.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Outer<T> where T: Copy + Send\"\n+// \"impl<T> Send for Outer<T> where T: Send + Copy\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,\n }"}]}