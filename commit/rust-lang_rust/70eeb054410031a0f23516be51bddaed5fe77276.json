{"sha": "70eeb054410031a0f23516be51bddaed5fe77276", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZWViMDU0NDEwMDMxYTBmMjM1MTZiZTUxYmRkYWVkNWZlNzcyNzY=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-28T15:35:31Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-09-29T12:57:42Z"}, "message": "rustc/infer: readability improvements", "tree": {"sha": "a183436cd0aceb66df1a5e15a9198638f6f7c6c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a183436cd0aceb66df1a5e15a9198638f6f7c6c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70eeb054410031a0f23516be51bddaed5fe77276", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70eeb054410031a0f23516be51bddaed5fe77276", "html_url": "https://github.com/rust-lang/rust/commit/70eeb054410031a0f23516be51bddaed5fe77276", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70eeb054410031a0f23516be51bddaed5fe77276/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999d76812cc2403568a2c5740be3474d5f8fc36f", "url": "https://api.github.com/repos/rust-lang/rust/commits/999d76812cc2403568a2c5740be3474d5f8fc36f", "html_url": "https://github.com/rust-lang/rust/commit/999d76812cc2403568a2c5740be3474d5f8fc36f"}], "stats": {"total": 46, "additions": 21, "deletions": 25}, "files": [{"sha": "a327f1f5c9d50b462a5e1319da2eb57ac9d879cf", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=70eeb054410031a0f23516be51bddaed5fe77276", "patch": "@@ -499,24 +499,22 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n                     let ty::OutlivesPredicate(k1, r2) = constraint.skip_binder(); // restored below\n                     let k1 = substitute_value(self.tcx, result_subst, k1);\n                     let r2 = substitute_value(self.tcx, result_subst, r2);\n-                    match k1.unpack() {\n-                        UnpackedKind::Lifetime(r1) => Obligation::new(\n-                            cause.clone(),\n-                            param_env,\n-                            ty::Predicate::RegionOutlives(ty::Binder::dummy(\n-                                ty::OutlivesPredicate(r1, r2),\n+\n+                    Obligation::new(\n+                        cause.clone(),\n+                        param_env,\n+                        match k1.unpack() {\n+                            UnpackedKind::Lifetime(r1) => ty::Predicate::RegionOutlives(\n+                                ty::Binder::dummy(\n+                                    ty::OutlivesPredicate(r1, r2)\n                             )),\n-                        ),\n-\n-                        UnpackedKind::Type(t1) => Obligation::new(\n-                            cause.clone(),\n-                            param_env,\n-                            ty::Predicate::TypeOutlives(ty::Binder::dummy(ty::OutlivesPredicate(\n-                                t1, r2,\n-                            ))),\n-                        ),\n-                    }\n-                }),\n+                            UnpackedKind::Type(t1) => ty::Predicate::TypeOutlives(\n+                                ty::Binder::dummy(ty::OutlivesPredicate(\n+                                    t1, r2\n+                            )))\n+                        }\n+                    )\n+                })\n         ) as Box<dyn Iterator<Item = _>>\n     }\n "}, {"sha": "854960492c9bd4c897e3f357747a3c1dcdbbecf5", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=70eeb054410031a0f23516be51bddaed5fe77276", "patch": "@@ -77,24 +77,22 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         match (&a.sty, &b.sty) {\n             (&ty::Infer(TyVar(a_id)), &ty::Infer(TyVar(b_id))) => {\n                 infcx.type_variables.borrow_mut().equate(a_id, b_id);\n-                Ok(a)\n             }\n \n             (&ty::Infer(TyVar(a_id)), _) => {\n                 self.fields.instantiate(b, RelationDir::EqTo, a_id, self.a_is_expected)?;\n-                Ok(a)\n             }\n \n             (_, &ty::Infer(TyVar(b_id))) => {\n                 self.fields.instantiate(a, RelationDir::EqTo, b_id, self.a_is_expected)?;\n-                Ok(a)\n             }\n \n             _ => {\n                 self.fields.infcx.super_combine_tys(self, a, b)?;\n-                Ok(a)\n             }\n         }\n+\n+        Ok(a)\n     }\n \n     fn regions(&mut self, a: ty::Region<'tcx>, b: ty::Region<'tcx>)"}, {"sha": "300bc54d64e139d8bd115b6afcb71ce824c709b3", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=70eeb054410031a0f23516be51bddaed5fe77276", "patch": "@@ -137,8 +137,8 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n     pub(super) fn is_self_anon(&self, is_first: bool, scope_def_id: DefId) -> bool {\n         is_first\n             && self.tcx\n-                .opt_associated_item(scope_def_id)\n-                .map(|i| i.method_has_self_argument) == Some(true)\n+                   .opt_associated_item(scope_def_id)\n+                   .map(|i| i.method_has_self_argument) == Some(true)\n     }\n \n }"}, {"sha": "0ef97618572640f4ac5e1003963d1a3e56c7971b", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70eeb054410031a0f23516be51bddaed5fe77276/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=70eeb054410031a0f23516be51bddaed5fe77276", "patch": "@@ -153,8 +153,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if !t.needs_infer() && !ty::keep_local(&t) {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n-                // ^ we need to have the `keep_local` check to un-default\n-                // defaulted tuples.\n+              // ^ we need to have the `keep_local` check to un-default\n+              // defaulted tuples.\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n             match t.sty {"}]}