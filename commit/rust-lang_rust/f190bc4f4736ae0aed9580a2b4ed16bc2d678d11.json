{"sha": "f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOTBiYzRmNDczNmFlMGFlZDk1ODBhMmI0ZWQxNmJjMmQ2NzhkMTE=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-14T20:55:59Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-03-15T01:31:46Z"}, "message": "Introduce `proc_macro_back_compat` lint, and emit for `time-macros-impl`\n\nNow that future-incompat-report support has landed in nightly Cargo, we\ncan start to make progress towards removing the various proc-macro\nback-compat hacks that have accumulated in the compiler.\n\nThis PR introduces a new lint `proc_macro_back_compat`, which results in\na future-incompat-report entry being generated. All proc-macro\nback-compat warnings will be grouped under this lint. Note that this\nlint will never actually become a hard error - instead, we will remove\nthe special cases for various macros, which will cause older versions of\nthose crates to emit some other error.\n\nI've added code to fire this lint for the `time-macros-impl` case. This\nis the easiest case out of all of our current back-compat hacks - the\ncrate was renamed to `time-macros`, so seeing a filename with\n`time-macros-impl` guarantees that an older version of the parent `time`\ncrate is in use.\n\nWhen Cargo's future-incompat-report feature gets stabilized, affected\nusers will start to see future-incompat warnings when they build their\ncrates.", "tree": {"sha": "14456a9d09d0d9506cc11d24b8f6191a9af9acc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14456a9d09d0d9506cc11d24b8f6191a9af9acc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmBOuQMACgkQtAh+UQ6Y\nsWT8Ng/8Ds+OQT7J5tIHSc8KKqIpyNGEZ0CPwW8VLzsYhVrBHW5WgT95D+pJUzpK\nsgP6W+CxytpnGXGAUrgokiSf5LKgPyKQ6OF1G+hwRbo3NkhCtsM5NAiK5ZXr3hHG\n1wCI3rHdPnvpazHpzHQIjr40JTWa/EyWtiiOxvK6Zy7+gqFz4Ix4gdyH49uUmYJf\nPFsEd99LvrghQd7bxMYbyo70n4HH7CbRShHZ6sU/10qmcBAkTvbUALwb/9amMEbR\n6g3eDEOsEmEepTuE+hU+HSLVUqiPbtY5VNhPJ8s1NXuoPOz9J8SfosFQkOXk27XF\n8heCfbDNJVFNviHmF4AvF0kPEPi5m78X/Vh7Mf+7O48XA35vCnqxoeJw4wwYog8o\nYN3TwRsBZTIbTyYnnTsW+60WHdwJVjVvvQ2khR4gGy3x8h3aIea8Ze6eMJWatHi/\n9e1VKFj8V6OytYKo4SQzwK+gHd8ZyRHeaneNiM19ELK+TbBytJH9sTO+i3knVcr7\n4rLbiXMKSIfHt7vYV0CDEUXdyLEzNhjY1DLOal5DWk5tLDaX9x5NDM+LEanOpTC0\nYvChlNgxdHor/Fc5KFIWqKA4zivGaWnYbyRtgSsx5sw0dTf2t38MmEBj0oE/Mcz7\n3swjbHfMOuwKeY5Z/o5qLtkpDhf6CGdZfVa1DPiZaxpL/3u4tTM=\n=uVuc\n-----END PGP SIGNATURE-----", "payload": "tree 14456a9d09d0d9506cc11d24b8f6191a9af9acc8\nparent d6eaea1c8860adb5302d2fbaad409e36585ab217\nauthor Aaron Hill <aa1ronham@gmail.com> 1615755359 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1615771906 -0400\n\nIntroduce `proc_macro_back_compat` lint, and emit for `time-macros-impl`\n\nNow that future-incompat-report support has landed in nightly Cargo, we\ncan start to make progress towards removing the various proc-macro\nback-compat hacks that have accumulated in the compiler.\n\nThis PR introduces a new lint `proc_macro_back_compat`, which results in\na future-incompat-report entry being generated. All proc-macro\nback-compat warnings will be grouped under this lint. Note that this\nlint will never actually become a hard error - instead, we will remove\nthe special cases for various macros, which will cause older versions of\nthose crates to emit some other error.\n\nI've added code to fire this lint for the `time-macros-impl` case. This\nis the easiest case out of all of our current back-compat hacks - the\ncrate was renamed to `time-macros`, so seeing a filename with\n`time-macros-impl` guarantees that an older version of the parent `time`\ncrate is in use.\n\nWhen Cargo's future-incompat-report feature gets stabilized, affected\nusers will start to see future-incompat warnings when they build their\ncrates.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "html_url": "https://github.com/rust-lang/rust/commit/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6eaea1c8860adb5302d2fbaad409e36585ab217", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6eaea1c8860adb5302d2fbaad409e36585ab217", "html_url": "https://github.com/rust-lang/rust/commit/d6eaea1c8860adb5302d2fbaad409e36585ab217"}], "stats": {"total": 271, "additions": 206, "deletions": 65}, "files": [{"sha": "093f7f2668c4644be1abf12a75df6f0d154ee712", "filename": "compiler/rustc_ast/src/token.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftoken.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -11,11 +11,9 @@ use crate::tokenstream::TokenTree;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n-use rustc_span::hygiene::ExpnKind;\n-use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_span::{self, edition::Edition, FileName, RealFileName, Span, DUMMY_SP};\n+use rustc_span::{self, edition::Edition, Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::{fmt, mem};\n \n@@ -813,52 +811,6 @@ impl Nonterminal {\n         }\n         false\n     }\n-\n-    // See issue #74616 for details\n-    pub fn ident_name_compatibility_hack(\n-        &self,\n-        orig_span: Span,\n-        source_map: &SourceMap,\n-    ) -> Option<(Ident, bool)> {\n-        if let NtIdent(ident, is_raw) = self {\n-            if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n-                let filename = source_map.span_to_filename(orig_span);\n-                if let FileName::Real(RealFileName::Named(path)) = filename {\n-                    let matches_prefix = |prefix, filename| {\n-                        // Check for a path that ends with 'prefix*/src/<filename>'\n-                        let mut iter = path.components().rev();\n-                        iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n-                            && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n-                            && iter\n-                                .next()\n-                                .and_then(|p| p.as_os_str().to_str())\n-                                .map_or(false, |p| p.starts_with(prefix))\n-                    };\n-\n-                    if (macro_name == sym::impl_macros\n-                        && matches_prefix(\"time-macros-impl\", \"lib.rs\"))\n-                        || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n-                    {\n-                        let snippet = source_map.span_to_snippet(orig_span);\n-                        if snippet.as_deref() == Ok(\"$name\") {\n-                            return Some((*ident, *is_raw));\n-                        }\n-                    }\n-\n-                    if macro_name == sym::tuple_from_req\n-                        && (matches_prefix(\"actix-web\", \"extract.rs\")\n-                            || matches_prefix(\"actori-web\", \"extract.rs\"))\n-                    {\n-                        let snippet = source_map.span_to_snippet(orig_span);\n-                        if snippet.as_deref() == Ok(\"$T\") {\n-                            return Some((*ident, *is_raw));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        None\n-    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "837fad905800a89298296d23e23de818b5ff07c9", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 66, "deletions": 4, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -2,16 +2,21 @@ use crate::base::ExtCtxt;\n \n use rustc_ast as ast;\n use rustc_ast::token;\n+use rustc_ast::token::Nonterminal;\n+use rustc_ast::token::NtIdent;\n use rustc_ast::tokenstream::{self, CanSynthesizeMissingTokens};\n use rustc_ast::tokenstream::{DelimSpan, Spacing::*, TokenStream, TreeAndSpacing};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::Diagnostic;\n+use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n+use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::lexer::nfc_normalize;\n use rustc_parse::{nt_to_tokenstream, parse_stream_from_source_str};\n use rustc_session::parse::ParseSess;\n+use rustc_span::hygiene::ExpnKind;\n use rustc_span::symbol::{self, kw, sym, Symbol};\n-use rustc_span::{BytePos, FileName, MultiSpan, Pos, SourceFile, Span};\n+use rustc_span::{BytePos, FileName, MultiSpan, Pos, RealFileName, SourceFile, Span};\n \n use pm::bridge::{server, TokenTree};\n use pm::{Delimiter, Level, LineColumn, Spacing};\n@@ -174,9 +179,7 @@ impl FromInternal<(TreeAndSpacing, &'_ ParseSess, &'_ mut Vec<Self>)>\n             }\n \n             Interpolated(nt) => {\n-                if let Some((name, is_raw)) =\n-                    nt.ident_name_compatibility_hack(span, sess.source_map())\n-                {\n+                if let Some((name, is_raw)) = ident_name_compatibility_hack(&nt, span, sess) {\n                     TokenTree::Ident(Ident::new(sess, name.name, is_raw, name.span))\n                 } else {\n                     let stream = nt_to_tokenstream(&nt, sess, CanSynthesizeMissingTokens::No);\n@@ -711,3 +714,62 @@ impl server::Span for Rustc<'_> {\n         self.sess.source_map().span_to_snippet(span).ok()\n     }\n }\n+\n+// See issue #74616 for details\n+fn ident_name_compatibility_hack(\n+    nt: &Nonterminal,\n+    orig_span: Span,\n+    sess: &ParseSess,\n+) -> Option<(rustc_span::symbol::Ident, bool)> {\n+    if let NtIdent(ident, is_raw) = nt {\n+        if let ExpnKind::Macro(_, macro_name) = orig_span.ctxt().outer_expn_data().kind {\n+            let source_map = sess.source_map();\n+            let filename = source_map.span_to_filename(orig_span);\n+            if let FileName::Real(RealFileName::Named(path)) = filename {\n+                let matches_prefix = |prefix, filename| {\n+                    // Check for a path that ends with 'prefix*/src/<filename>'\n+                    let mut iter = path.components().rev();\n+                    iter.next().and_then(|p| p.as_os_str().to_str()) == Some(filename)\n+                        && iter.next().and_then(|p| p.as_os_str().to_str()) == Some(\"src\")\n+                        && iter\n+                            .next()\n+                            .and_then(|p| p.as_os_str().to_str())\n+                            .map_or(false, |p| p.starts_with(prefix))\n+                };\n+\n+                let time_macros_impl =\n+                    macro_name == sym::impl_macros && matches_prefix(\"time-macros-impl\", \"lib.rs\");\n+                if time_macros_impl\n+                    || (macro_name == sym::arrays && matches_prefix(\"js-sys\", \"lib.rs\"))\n+                {\n+                    let snippet = source_map.span_to_snippet(orig_span);\n+                    if snippet.as_deref() == Ok(\"$name\") {\n+                        if time_macros_impl {\n+                            sess.buffer_lint_with_diagnostic(\n+                                &PROC_MACRO_BACK_COMPAT,\n+                                orig_span,\n+                                ast::CRATE_NODE_ID,\n+                                \"using an old version of `time-macros-impl`\",\n+                                BuiltinLintDiagnostics::ProcMacroBackCompat(\n+                                \"the `time-macros-impl` crate will stop compiling in futures version of Rust. \\\n+                                Please update to the latest version of the `time` crate to avoid breakage\".to_string())\n+                            );\n+                        }\n+                        return Some((*ident, *is_raw));\n+                    }\n+                }\n+\n+                if macro_name == sym::tuple_from_req\n+                    && (matches_prefix(\"actix-web\", \"extract.rs\")\n+                        || matches_prefix(\"actori-web\", \"extract.rs\"))\n+                {\n+                    let snippet = source_map.span_to_snippet(orig_span);\n+                    if snippet.as_deref() == Ok(\"$T\") {\n+                        return Some((*ident, *is_raw));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    None\n+}"}, {"sha": "42ead89ca4f856381729ba4c27786388c3eca739", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -670,6 +670,9 @@ pub trait LintContext: Sized {\n                         json\n                     );\n                 }\n+                BuiltinLintDiagnostics::ProcMacroBackCompat(note) => {\n+                    db.note(&note);\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "005c4f9f6eaf73b4af297ec305202da18862dbbc", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -6,7 +6,7 @@\n //! compiler code, rather than using their own custom pass. Those\n //! lints are all available in `rustc_lint::builtin`.\n \n-use crate::{declare_lint, declare_lint_pass};\n+use crate::{declare_lint, declare_lint_pass, FutureBreakage};\n use rustc_span::edition::Edition;\n \n declare_lint! {\n@@ -2955,6 +2955,7 @@ declare_lint_pass! {\n         SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n         DISJOINT_CAPTURE_DROP_REORDER,\n         LEGACY_DERIVE_HELPERS,\n+        PROC_MACRO_BACK_COMPAT,\n     ]\n }\n \n@@ -3082,3 +3083,53 @@ declare_lint! {\n         edition: None,\n     };\n }\n+\n+declare_lint! {\n+    /// The `proc_macro_back_compat` lint detects uses of old versions of certain\n+    /// proc-macro crates, which have hardcoded workarounds in the compiler.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (needs-dependency)\n+    ///\n+    /// use time_macros_impl::impl_macros;\n+    /// struct Foo;\n+    /// impl_macros!(Foo);\n+    /// ```\n+    ///\n+    /// This will produce:\n+    ///\n+    /// ```text\n+    /// warning: using an old version of `time-macros-impl`\n+    ///   ::: $DIR/group-compat-hack.rs:27:5\n+    ///    |\n+    /// LL |     impl_macros!(Foo);\n+    ///    |     ------------------ in this macro invocation\n+    ///    |\n+    ///    = note: `#[warn(proc_macro_back_compat)]` on by default\n+    ///    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+    ///    = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+    ///    = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+    ///    = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+    /// ```\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Eventually, the backwards-compatibility hacks present in the compiler will be removed,\n+    /// causing older versions of certain crates to stop compiling.\n+    /// This is a [future-incompatible] lint to ease the transition to an error.\n+    /// See [issue #83125] for more details.\n+    ///\n+    /// [issue #83125]: https://github.com/rust-lang/rust/issues/83125\n+    /// [future-incompatible]: ../index.md#future-incompatible-lints\n+    pub PROC_MACRO_BACK_COMPAT,\n+    Warn,\n+    \"detects usage of old versions of certain proc-macro crates\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #83125 <https://github.com/rust-lang/rust/issues/83125>\",\n+        edition: None,\n+        future_breakage: Some(FutureBreakage {\n+            date: None\n+        })\n+    };\n+}"}, {"sha": "400b367095ec3b7107c4e8ada1db99b181555b0f", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -266,6 +266,7 @@ pub enum BuiltinLintDiagnostics {\n     PatternsInFnsWithoutBody(Span, Ident),\n     LegacyDeriveHelpers(Span),\n     ExternDepSpec(String, ExternDepSpec),\n+    ProcMacroBackCompat(String),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "7f3f5e36f50a94766bfcedfc8945b95c7c8d39a4", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.rs?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -24,7 +24,8 @@ mod no_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo);\n+    impl_macros!(Foo); //~ WARN  using an old version\n+                       //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n }\n@@ -40,7 +41,8 @@ mod with_version {\n     }\n \n     struct Foo;\n-    impl_macros!(Foo);\n+    impl_macros!(Foo); //~  WARN using an old version\n+                       //~| WARN this was previously\n     arrays!(Foo);\n     other!(Foo);\n }"}, {"sha": "9370440a63511d89f5897b0ceb3305a7f6870fdc", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stderr?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -0,0 +1,70 @@\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:27:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:44:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+warning: 2 warnings emitted\n+\n+Future incompatibility report: Future breakage date: None, diagnostic:\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:27:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = note: `#[warn(proc_macro_back_compat)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+Future breakage date: None, diagnostic:\n+warning: using an old version of `time-macros-impl`\n+  --> $DIR/time-macros-impl-0.1.0/src/lib.rs:5:32\n+   |\n+LL |         #[my_macro] struct One($name);\n+   |                                ^^^^^\n+   | \n+  ::: $DIR/group-compat-hack.rs:44:5\n+   |\n+LL |     impl_macros!(Foo);\n+   |     ------------------ in this macro invocation\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #83125 <https://github.com/rust-lang/rust/issues/83125>\n+   = note: the `time-macros-impl` crate will stop compiling in futures version of Rust. Please update to the latest version of the `time` crate to avoid breakage\n+   = note: this warning originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+"}, {"sha": "468cb5119151773b0b90b680cb09058b25b619c7", "filename": "src/test/ui/proc-macro/group-compat-hack/group-compat-hack.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/f190bc4f4736ae0aed9580a2b4ed16bc2d678d11/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fgroup-compat-hack%2Fgroup-compat-hack.stdout?ref=f190bc4f4736ae0aed9580a2b4ed16bc2d678d11", "patch": "@@ -1,10 +1,10 @@\n Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl/src/lib.rs:5:21: 5:27 (#6) }, Ident { ident: \"One\", span: $DIR/time-macros-impl/src/lib.rs:5:28: 5:31 (#6) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:27:18: 27:21 (#0) }], span: $DIR/time-macros-impl/src/lib.rs:5:31: 5:38 (#6) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl/src/lib.rs:5:38: 5:39 (#6) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:28:13: 28:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:12: 29:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:43:18: 43:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:13: 44:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:38:25: 38:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:38:32: 38:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:45:12: 45:15 (#0) }], span: $DIR/group-compat-hack.rs:38:38: 38:43 (#28) }], span: $DIR/group-compat-hack.rs:38:37: 38:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:38:44: 38:45 (#28) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:52:21: 52:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:59:21: 59:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:66:21: 66:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n-Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:73:21: 73:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys/src/lib.rs:5:21: 5:27 (#10) }, Ident { ident: \"Two\", span: $DIR/js-sys/src/lib.rs:5:28: 5:31 (#10) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:29:13: 29:16 (#0) }], span: $DIR/js-sys/src/lib.rs:5:31: 5:38 (#10) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys/src/lib.rs:5:38: 5:39 (#10) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:22:25: 22:31 (#14) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:22:32: 22:37 (#14) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:30:12: 30:15 (#0) }], span: $DIR/group-compat-hack.rs:22:38: 22:43 (#14) }], span: $DIR/group-compat-hack.rs:22:37: 22:44 (#14) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:22:44: 22:45 (#14) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:21: 5:27 (#20) }, Ident { ident: \"One\", span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:28: 5:31 (#20) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:44:18: 44:21 (#0) }], span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:31: 5:38 (#20) }, Punct { ch: ';', spacing: Alone, span: $DIR/time-macros-impl-0.1.0/src/lib.rs:5:38: 5:39 (#20) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:21: 5:27 (#24) }, Ident { ident: \"Two\", span: $DIR/js-sys-0.3.17/src/lib.rs:5:28: 5:31 (#24) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:46:13: 46:16 (#0) }], span: $DIR/js-sys-0.3.17/src/lib.rs:5:31: 5:38 (#24) }, Punct { ch: ';', spacing: Alone, span: $DIR/js-sys-0.3.17/src/lib.rs:5:38: 5:39 (#24) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/group-compat-hack.rs:39:25: 39:31 (#28) }, Ident { ident: \"Three\", span: $DIR/group-compat-hack.rs:39:32: 39:37 (#28) }, Group { delimiter: Parenthesis, stream: TokenStream [Group { delimiter: None, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:47:12: 47:15 (#0) }], span: $DIR/group-compat-hack.rs:39:38: 39:43 (#28) }], span: $DIR/group-compat-hack.rs:39:37: 39:44 (#28) }, Punct { ch: ';', spacing: Alone, span: $DIR/group-compat-hack.rs:39:44: 39:45 (#28) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web/src/extract.rs:5:21: 5:27 (#33) }, Ident { ident: \"Three\", span: $DIR/actix-web/src/extract.rs:5:28: 5:33 (#33) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:54:21: 54:24 (#0) }], span: $DIR/actix-web/src/extract.rs:5:33: 5:37 (#33) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web/src/extract.rs:5:37: 5:38 (#33) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:21: 5:27 (#38) }, Ident { ident: \"Three\", span: $DIR/actix-web-2.0.0/src/extract.rs:5:28: 5:33 (#38) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:61:21: 61:24 (#0) }], span: $DIR/actix-web-2.0.0/src/extract.rs:5:33: 5:37 (#38) }, Punct { ch: ';', spacing: Alone, span: $DIR/actix-web-2.0.0/src/extract.rs:5:37: 5:38 (#38) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web/src/extract.rs:5:21: 5:27 (#43) }, Ident { ident: \"Four\", span: $DIR/actori-web/src/extract.rs:5:28: 5:32 (#43) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:68:21: 68:24 (#0) }], span: $DIR/actori-web/src/extract.rs:5:32: 5:36 (#43) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web/src/extract.rs:5:36: 5:37 (#43) }]\n+Called proc_macro_hack with TokenStream [Ident { ident: \"struct\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:21: 5:27 (#48) }, Ident { ident: \"Four\", span: $DIR/actori-web-2.0.0/src/extract.rs:5:28: 5:32 (#48) }, Group { delimiter: Parenthesis, stream: TokenStream [Ident { ident: \"Foo\", span: $DIR/group-compat-hack.rs:75:21: 75:24 (#0) }], span: $DIR/actori-web-2.0.0/src/extract.rs:5:32: 5:36 (#48) }, Punct { ch: ';', spacing: Alone, span: $DIR/actori-web-2.0.0/src/extract.rs:5:36: 5:37 (#48) }]"}]}