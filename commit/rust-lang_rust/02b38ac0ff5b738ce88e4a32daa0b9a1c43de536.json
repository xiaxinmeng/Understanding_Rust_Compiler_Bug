{"sha": "02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjM4YWMwZmY1YjczOGNlODhlNGEzMmRhYTBiOWExYzQzZGU1MzY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T14:29:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-21T14:29:05Z"}, "message": "Rollup merge of #66468 - RalfJung:simd-cleanup, r=oli-obk\n\nCleanup Miri SIMD intrinsics\n\nr? @oli-obk @eddyb Cc @gnzlbg", "tree": {"sha": "d4147c635d29e1cab0ef69f40edad3ab1c2aee3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4147c635d29e1cab0ef69f40edad3ab1c2aee3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd1p8xCRBK7hj4Ov3rIwAAdHIIADfu22HX50JJwdMzWcHG1uZL\n61WTWx+Kc4u54H3JcEJtcPtKa4YZzVE83eZPabnQH+n1V1z9V1eBukXve2AU00HM\nA+cHh1pfCRQ68EAoNNW6ShLcis1dASEnrev0lrJiGu243xLHyeOplHZ4qg8GzBLD\n3hG34T/213qyd/+iz7S2cpC9/rD7kpMFgACCqcTfPdXYPjC8G5AhIsyvhPxWhO2y\nAZkagAmFHwVgOMRPRIiILyXSqY4na7GGMRon/SX5QrF3XPwPTt4TckQFJfifW11v\nhWP84XPJeczYqxAdxBdm+Sa7swt9IzQNqNKL7iZSCy4kblXaFMLTiASz+RVYUtQ=\n=B6If\n-----END PGP SIGNATURE-----\n", "payload": "tree d4147c635d29e1cab0ef69f40edad3ab1c2aee3e\nparent e4a634189e3ef7461a40e357633bdbc98cedf5ad\nparent 5e115a25ca3799a9232f2c3712ed36626025c752\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1574346545 +0100\ncommitter GitHub <noreply@github.com> 1574346545 +0100\n\nRollup merge of #66468 - RalfJung:simd-cleanup, r=oli-obk\n\nCleanup Miri SIMD intrinsics\n\nr? @oli-obk @eddyb Cc @gnzlbg\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "html_url": "https://github.com/rust-lang/rust/commit/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a634189e3ef7461a40e357633bdbc98cedf5ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a634189e3ef7461a40e357633bdbc98cedf5ad", "html_url": "https://github.com/rust-lang/rust/commit/e4a634189e3ef7461a40e357633bdbc98cedf5ad"}, {"sha": "5e115a25ca3799a9232f2c3712ed36626025c752", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e115a25ca3799a9232f2c3712ed36626025c752", "html_url": "https://github.com/rust-lang/rust/commit/5e115a25ca3799a9232f2c3712ed36626025c752"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "b9fc5f59b7bbc554f4813ad5ff39660d037e723c", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -697,7 +697,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // SIMD vector types.\n             ty::Adt(def, ..) if def.repr.simd() => {\n                 let element = self.layout_of(ty.simd_type(tcx))?;\n-                let count = ty.simd_size(tcx) as u64;\n+                let count = ty.simd_size(tcx);\n                 assert!(count > 0);\n                 let scalar = match element.abi {\n                     Abi::Scalar(ref scalar) => scalar.clone(),"}, {"sha": "ab6a3bc83b1d2ce8c427762607d8e9057224d0fe", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -1813,20 +1813,30 @@ impl<'tcx> TyS<'tcx> {\n \n     pub fn simd_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind {\n-            Adt(def, substs) => {\n-                def.non_enum_variant().fields[0].ty(tcx, substs)\n-            }\n+            Adt(def, substs) => def.non_enum_variant().fields[0].ty(tcx, substs),\n             _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n-    pub fn simd_size(&self, _cx: TyCtxt<'_>) -> usize {\n+    pub fn simd_size(&self, _tcx: TyCtxt<'tcx>) -> u64 {\n+        // Parameter currently unused, but probably needed in the future to\n+        // allow `#[repr(simd)] struct Simd<T, const N: usize>([T; N]);`.\n         match self.kind {\n-            Adt(def, _) => def.non_enum_variant().fields.len(),\n+            Adt(def, _) => def.non_enum_variant().fields.len() as u64,\n             _ => bug!(\"simd_size called on invalid type\")\n         }\n     }\n \n+    pub fn simd_size_and_type(&self, tcx: TyCtxt<'tcx>) -> (u64, Ty<'tcx>) {\n+        match self.kind {\n+            Adt(def, substs) => {\n+                let variant = def.non_enum_variant();\n+                (variant.fields.len() as u64, variant.fields[0].ty(tcx, substs))\n+            }\n+            _ => bug!(\"simd_size_and_type called on invalid type\")\n+        }\n+    }\n+\n     #[inline]\n     pub fn is_region_ptr(&self) -> bool {\n         match self.kind {"}, {"sha": "4277ce1d1f7546bd1f349abb3c705c400b865b8a", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -1105,8 +1105,8 @@ fn generic_simd_intrinsic(\n         let m_len = match in_ty.kind {\n             // Note that this `.unwrap()` crashes for isize/usize, that's sort\n             // of intentional as there's not currently a use case for that.\n-            ty::Int(i) => i.bit_width().unwrap(),\n-            ty::Uint(i) => i.bit_width().unwrap(),\n+            ty::Int(i) => i.bit_width().unwrap() as u64,\n+            ty::Uint(i) => i.bit_width().unwrap() as u64,\n             _ => return_error!(\"`{}` is not an integral type\", in_ty),\n         };\n         require_simd!(arg_tys[1], \"argument\");\n@@ -1116,7 +1116,7 @@ fn generic_simd_intrinsic(\n                  m_len, v_len\n         );\n         let i1 = bx.type_i1();\n-        let i1xn = bx.type_vector(i1, m_len as u64);\n+        let i1xn = bx.type_vector(i1, m_len);\n         let m_i1s = bx.bitcast(args[0].immediate(), i1xn);\n         return Ok(bx.select(m_i1s, args[1].immediate(), args[2].immediate()));\n     }\n@@ -1160,7 +1160,7 @@ fn generic_simd_intrinsic(\n     }\n \n     if name.starts_with(\"simd_shuffle\") {\n-        let n: usize = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n+        let n: u64 = name[\"simd_shuffle\".len()..].parse().unwrap_or_else(|_|\n             span_bug!(span, \"bad `simd_shuffle` instruction only caught in codegen?\"));\n \n         require_simd!(ret_ty, \"return\");\n@@ -1175,7 +1175,7 @@ fn generic_simd_intrinsic(\n                  in_elem, in_ty,\n                  ret_ty, ret_ty.simd_type(tcx));\n \n-        let total_len = in_len as u128 * 2;\n+        let total_len = u128::from(in_len) * 2;\n \n         let vector = args[2].immediate();\n \n@@ -1251,7 +1251,7 @@ fn generic_simd_intrinsic(\n         // trailing bits.\n         let expected_int_bits = in_len.max(8);\n         match ret_ty.kind {\n-           ty::Uint(i) if i.bit_width() == Some(expected_int_bits) => (),\n+           ty::Uint(i) if i.bit_width() == Some(expected_int_bits as usize) => (),\n             _ => return_error!(\n                 \"bitmask `{}`, expected `u{}`\",\n                 ret_ty, expected_int_bits\n@@ -1276,7 +1276,8 @@ fn generic_simd_intrinsic(\n \n         // Shift the MSB to the right by \"in_elem_bitwidth - 1\" into the first bit position.\n         let shift_indices = vec![\n-            bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _); in_len\n+            bx.cx.const_int(bx.type_ix(in_elem_bitwidth as _), (in_elem_bitwidth - 1) as _);\n+            in_len as _\n         ];\n         let i_xn_msb = bx.lshr(i_xn, bx.const_vector(shift_indices.as_slice()));\n         // Truncate vector to an <i1 x N>\n@@ -1291,7 +1292,7 @@ fn generic_simd_intrinsic(\n         name: &str,\n         in_elem: &::rustc::ty::TyS<'_>,\n         in_ty: &::rustc::ty::TyS<'_>,\n-        in_len: usize,\n+        in_len: u64,\n         bx: &mut Builder<'a, 'll, 'tcx>,\n         span: Span,\n         args: &[OperandRef<'tcx, &'ll Value>],\n@@ -1400,7 +1401,7 @@ fn generic_simd_intrinsic(\n     // FIXME: use:\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Function.h#L182\n     //  https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/Intrinsics.h#L81\n-    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: usize, no_pointers: usize) -> String {\n+    fn llvm_vector_str(elem_ty: Ty<'_>, vec_len: u64, no_pointers: usize) -> String {\n         let p0s: String = \"p0\".repeat(no_pointers);\n         match elem_ty.kind {\n             ty::Int(v) => format!(\"v{}{}i{}\", vec_len, p0s, v.bit_width().unwrap()),\n@@ -1410,7 +1411,7 @@ fn generic_simd_intrinsic(\n         }\n     }\n \n-    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: usize,\n+    fn llvm_vector_ty(cx: &CodegenCx<'ll, '_>, elem_ty: Ty<'_>, vec_len: u64,\n                       mut no_pointers: usize) -> &'ll Type {\n         // FIXME: use cx.layout_of(ty).llvm_type() ?\n         let mut elem_ty = match elem_ty.kind {\n@@ -1423,7 +1424,7 @@ fn generic_simd_intrinsic(\n             elem_ty = cx.type_ptr_to(elem_ty);\n             no_pointers -= 1;\n         }\n-        cx.type_vector(elem_ty, vec_len as u64)\n+        cx.type_vector(elem_ty, vec_len)\n     }\n \n \n@@ -1506,7 +1507,7 @@ fn generic_simd_intrinsic(\n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n             let i1 = bx.type_i1();\n-            let i1xn = bx.type_vector(i1, in_len as u64);\n+            let i1xn = bx.type_vector(i1, in_len);\n             (bx.trunc(args[2].immediate(), i1xn), i1xn)\n         };\n \n@@ -1606,7 +1607,7 @@ fn generic_simd_intrinsic(\n         // Truncate the mask vector to a vector of i1s:\n         let (mask, mask_ty) = {\n             let i1 = bx.type_i1();\n-            let i1xn = bx.type_vector(i1, in_len as u64);\n+            let i1xn = bx.type_vector(i1, in_len);\n             (bx.trunc(args[2].immediate(), i1xn), i1xn)\n         };\n "}, {"sha": "23f7b1acb54d470f73c08386288aeca37538f675", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -302,10 +302,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n             \"simd_insert\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as u64;\n-                let scalar = args[2];\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let elem = args[2];\n                 let input = args[0];\n-                let (len, e_ty) = self.read_vector_ty(input);\n+                let (len, e_ty) = input.layout.ty.simd_size_and_type(self.tcx.tcx);\n                 assert!(\n                     index < len,\n                     \"Index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n@@ -317,24 +317,24 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     dest.layout.ty, input.layout.ty\n                 );\n                 assert_eq!(\n-                    scalar.layout.ty, e_ty,\n-                    \"Scalar type `{}` must match vector element type `{}`\",\n-                    scalar.layout.ty, e_ty\n+                    elem.layout.ty, e_ty,\n+                    \"Scalar element type `{}` must match vector element type `{}`\",\n+                    elem.layout.ty, e_ty\n                 );\n \n                 for i in 0..len {\n                     let place = self.place_field(dest, i)?;\n                     let value = if i == index {\n-                        scalar\n+                        elem\n                     } else {\n                         self.operand_field(input, i)?\n                     };\n                     self.copy_op(value, place)?;\n                 }\n             }\n             \"simd_extract\" => {\n-                let index = self.read_scalar(args[1])?.to_u32()? as _;\n-                let (len, e_ty) = self.read_vector_ty(args[0]);\n+                let index = u64::from(self.read_scalar(args[1])?.to_u32()?);\n+                let (len, e_ty) = args[0].layout.ty.simd_size_and_type(self.tcx.tcx);\n                 assert!(\n                     index < len,\n                     \"index `{}` is out-of-bounds of vector type `{}` with length `{}`\","}, {"sha": "62797b313045e54eeba26ebf0cec11cdaca0d2de", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -316,17 +316,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Read vector length and element type\n-    pub fn read_vector_ty(\n-        &self, op: OpTy<'tcx, M::PointerTag>\n-    ) -> (u64, &rustc::ty::TyS<'tcx>) {\n-        if let layout::Abi::Vector { .. } = op.layout.abi {\n-            (op.layout.ty.simd_size(*self.tcx) as _, op.layout.ty.simd_type(*self.tcx))\n-        } else {\n-            bug!(\"Type `{}` is not a SIMD vector type\", op.layout.ty)\n-        }\n-    }\n-\n     /// Read a scalar from a place\n     pub fn read_scalar(\n         &self,"}, {"sha": "50c4a249c63c2741ef8bed3550213a67284b749e", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b38ac0ff5b738ce88e4a32daa0b9a1c43de536/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=02b38ac0ff5b738ce88e4a32daa0b9a1c43de536", "patch": "@@ -264,6 +264,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         match instance.def {\n             ty::InstanceDef::Intrinsic(..) => {\n+                assert!(caller_abi == Abi::RustIntrinsic || caller_abi == Abi::PlatformIntrinsic);\n+\n                 let old_stack = self.cur_frame();\n                 let old_bb = self.frame().block;\n                 M::call_intrinsic(self, span, instance, args, dest, ret, unwind)?;"}]}