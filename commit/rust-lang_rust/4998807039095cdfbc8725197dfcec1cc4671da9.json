{"sha": "4998807039095cdfbc8725197dfcec1cc4671da9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5OTg4MDcwMzkwOTVjZGZiYzg3MjUxOTdkZmNlYzFjYzQ2NzFkYTk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-11T22:17:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T22:17:40Z"}, "message": "Merge #6813\n\n6813: negative sign matching in mbe matching for literal r=edwin0cheng a=edwin0cheng\n\nFix #6292\r\n\r\nr @jonas-schievink \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "af363d79a9333bcdf35aa346b37cafad5a97c87f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af363d79a9333bcdf35aa346b37cafad5a97c87f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4998807039095cdfbc8725197dfcec1cc4671da9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0/AECRBK7hj4Ov3rIwAAdHIIAHaANIgm2EWj9hxLMvodY4pP\nWHl5FEmL9vn4FAPJ4FYIh5cyw8+Vo0giXLbo1NuDW+ff/4Mgq4OdwjtKaZOCpMlk\nh1ouCKf8N/Mxk1aE1b5CrzpKh4ylXoN0if7XQftDYksMVzrNpEUocZ99LDtBd/MO\n8SfwOdA2oY17TDeYcuPLC3/0U6uWoEczIcX2hUI5npVTGjGs0JbssZew3Mkz/GmH\ncwL9fhhzDlb9QRxrFGoacSGrqg+uCRMqqWONEb0BdyS44MoHkrEbyp6JrBIOJa2h\nQ/sLnnDruWn6uB766cWO2qOIJuTvJEPXC9PVBgx7RwYa3tu5v6OF4pDF6MYlMtE=\n=jLg6\n-----END PGP SIGNATURE-----\n", "payload": "tree af363d79a9333bcdf35aa346b37cafad5a97c87f\nparent c1ef62333819fceebff4414df53f40569e1ca909\nparent ae29fb021142464684478656e0c65deb912624bc\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607725060 +0000\ncommitter GitHub <noreply@github.com> 1607725060 +0000\n\nMerge #6813\n\n6813: negative sign matching in mbe matching for literal r=edwin0cheng a=edwin0cheng\n\nFix #6292\r\n\r\nr @jonas-schievink \n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4998807039095cdfbc8725197dfcec1cc4671da9", "html_url": "https://github.com/rust-lang/rust/commit/4998807039095cdfbc8725197dfcec1cc4671da9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4998807039095cdfbc8725197dfcec1cc4671da9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ef62333819fceebff4414df53f40569e1ca909", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ef62333819fceebff4414df53f40569e1ca909", "html_url": "https://github.com/rust-lang/rust/commit/c1ef62333819fceebff4414df53f40569e1ca909"}, {"sha": "ae29fb021142464684478656e0c65deb912624bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae29fb021142464684478656e0c65deb912624bc", "html_url": "https://github.com/rust-lang/rust/commit/ae29fb021142464684478656e0c65deb912624bc"}], "stats": {"total": 45, "additions": 39, "deletions": 6}, "files": [{"sha": "93ee77908619c37bc65cf528fc9339cdd174263f", "filename": "crates/mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4998807039095cdfbc8725197dfcec1cc4671da9/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4998807039095cdfbc8725197dfcec1cc4671da9/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=4998807039095cdfbc8725197dfcec1cc4671da9", "patch": "@@ -356,6 +356,18 @@ impl<'a> TtIter<'a> {\n             ExpandResult { value: _, err: Some(_) } => None,\n         }\n     }\n+\n+    pub(crate) fn eat_char(&mut self, c: char) -> Option<tt::TokenTree> {\n+        let mut fork = self.clone();\n+        match fork.expect_char(c) {\n+            Ok(_) => {\n+                let tt = self.next().cloned();\n+                *self = fork;\n+                tt\n+            }\n+            Err(_) => None,\n+        }\n+    }\n }\n \n pub(super) fn match_repeat(\n@@ -447,10 +459,22 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                     .expect_lifetime()\n                     .map(|tt| Some(tt))\n                     .map_err(|()| err!(\"expected lifetime\")),\n-                \"literal\" => input\n-                    .expect_literal()\n-                    .map(|literal| Some(tt::Leaf::from(literal.clone()).into()))\n-                    .map_err(|()| err!()),\n+                \"literal\" => {\n+                    let neg = input.eat_char('-');\n+                    input\n+                        .expect_literal()\n+                        .map(|literal| {\n+                            let lit = tt::Leaf::from(literal.clone());\n+                            match neg {\n+                                None => Some(lit.into()),\n+                                Some(neg) => Some(tt::TokenTree::Subtree(tt::Subtree {\n+                                    delimiter: None,\n+                                    token_trees: vec![neg, lit.into()],\n+                                })),\n+                            }\n+                        })\n+                        .map_err(|()| err!())\n+                }\n                 // `vis` is optional\n                 \"vis\" => match input.eat_vis() {\n                     Some(vis) => Ok(Some(vis)),"}, {"sha": "843054fe854933c10b434d9add3ee1b5efc0bcac", "filename": "crates/mbe/src/tests.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4998807039095cdfbc8725197dfcec1cc4671da9/crates%2Fmbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4998807039095cdfbc8725197dfcec1cc4671da9/crates%2Fmbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftests.rs?ref=4998807039095cdfbc8725197dfcec1cc4671da9", "patch": "@@ -1008,11 +1008,20 @@ fn test_literal() {\n     parse_macro(\n         r#\"\n         macro_rules! foo {\n-              ($ type:ty $ lit:literal) => { const VALUE: $ type = $ lit;};\n+              ($ type:ty , $ lit:literal) => { const VALUE: $ type = $ lit;};\n         }\n \"#,\n     )\n-    .assert_expand_items(r#\"foo!(u8 0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+    .assert_expand_items(r#\"foo!(u8,0);\"#, r#\"const VALUE : u8 = 0 ;\"#);\n+\n+    parse_macro(\n+        r#\"\n+        macro_rules! foo {\n+              ($ type:ty , $ lit:literal) => { const VALUE: $ type = $ lit;};\n+        }\n+\"#,\n+    )\n+    .assert_expand_items(r#\"foo!(i32,-1);\"#, r#\"const VALUE : i32 = - 1 ;\"#);\n }\n \n #[test]"}]}