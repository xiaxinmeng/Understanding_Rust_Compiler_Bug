{"sha": "b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "node_id": "C_kwDOAAsO6NoAKGI2NmRiZTg3ZjEwYzU2Zjg2MjcwY2U2ZWIwZWZkODhlNmU3ZmMxYzk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-10T12:34:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-10T12:34:15Z"}, "message": "Auto merge of #8228 - Jarcho:iter_not_returning_iterator_8225, r=giraffate\n\nfix `iter_not_returning_iterator`\n\nfixes #8225\n\nchangelog: Handle type projections in `iter_not_returning_iterator`\nchangelog: Don't lint `iter_not_returning_iterator` in trait implementations\nchangelog: Lint `iter_not_returning_iterator` in trait definitions", "tree": {"sha": "63a1fdedbd738104edf6cc2ef92e50d598606840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63a1fdedbd738104edf6cc2ef92e50d598606840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "html_url": "https://github.com/rust-lang/rust/commit/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18163617388c32edce09ff3d31adc86e0141cc7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18163617388c32edce09ff3d31adc86e0141cc7d", "html_url": "https://github.com/rust-lang/rust/commit/18163617388c32edce09ff3d31adc86e0141cc7d"}, {"sha": "d98339d3e002b8b1bddf225e98c3140d7f1cecc7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98339d3e002b8b1bddf225e98c3140d7f1cecc7", "html_url": "https://github.com/rust-lang/rust/commit/d98339d3e002b8b1bddf225e98c3140d7f1cecc7"}], "stats": {"total": 93, "additions": 72, "deletions": 21}, "files": [{"sha": "017a8a779d94290437e3c0655f2803c4888370b4", "filename": "clippy_lints/src/iter_not_returning_iterator.rs", "status": "modified", "additions": 45, "deletions": 20, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fiter_not_returning_iterator.rs?ref=b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "patch": "@@ -1,8 +1,7 @@\n-use clippy_utils::{diagnostics::span_lint, return_ty, ty::implements_trait};\n-use rustc_hir::{ImplItem, ImplItemKind};\n+use clippy_utils::{diagnostics::span_lint, get_parent_node, ty::implements_trait};\n+use rustc_hir::{def_id::LocalDefId, FnSig, ImplItem, ImplItemKind, Item, ItemKind, Node, TraitItem, TraitItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::symbol::kw;\n use rustc_span::symbol::sym;\n \n declare_clippy_lint! {\n@@ -41,25 +40,51 @@ declare_clippy_lint! {\n declare_lint_pass!(IterNotReturningIterator => [ITER_NOT_RETURNING_ITERATOR]);\n \n impl LateLintPass<'_> for IterNotReturningIterator {\n-    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'tcx>) {\n-        let name = impl_item.ident.name.as_str();\n-        if_chain! {\n-            if let ImplItemKind::Fn(fn_sig, _) = &impl_item.kind;\n-            let ret_ty = return_ty(cx, impl_item.hir_id());\n-            if matches!(name, \"iter\" | \"iter_mut\");\n-            if let [param] = cx.tcx.fn_arg_names(impl_item.def_id);\n-            if param.name == kw::SelfLower;\n-            if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n-            if !implements_trait(cx, ret_ty, iter_trait_id, &[]);\n+    fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n+        let name = item.ident.name.as_str();\n+        if matches!(name, \"iter\" | \"iter_mut\") {\n+            if let TraitItemKind::Fn(fn_sig, _) = &item.kind {\n+                check_sig(cx, name, fn_sig, item.def_id);\n+            }\n+        }\n+    }\n \n-            then {\n-                span_lint(\n-                    cx,\n-                    ITER_NOT_RETURNING_ITERATOR,\n-                    fn_sig.span,\n-                    &format!(\"this method is named `{}` but its return type does not implement `Iterator`\", name),\n-                );\n+    fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'tcx>) {\n+        let name = item.ident.name.as_str();\n+        if matches!(name, \"iter\" | \"iter_mut\")\n+            && !matches!(\n+                get_parent_node(cx.tcx, item.hir_id()),\n+                Some(Node::Item(Item { kind: ItemKind::Impl(i), .. })) if i.of_trait.is_some()\n+            )\n+        {\n+            if let ImplItemKind::Fn(fn_sig, _) = &item.kind {\n+                check_sig(cx, name, fn_sig, item.def_id);\n             }\n         }\n     }\n }\n+\n+fn check_sig(cx: &LateContext<'_>, name: &str, sig: &FnSig<'_>, fn_id: LocalDefId) {\n+    if sig.decl.implicit_self.has_implicit_self() {\n+        let ret_ty = cx.tcx.fn_sig(fn_id).skip_binder().output();\n+        let ret_ty = cx\n+            .tcx\n+            .try_normalize_erasing_regions(cx.param_env, ret_ty)\n+            .unwrap_or(ret_ty);\n+        if cx\n+            .tcx\n+            .get_diagnostic_item(sym::Iterator)\n+            .map_or(false, |iter_id| !implements_trait(cx, ret_ty, iter_id, &[]))\n+        {\n+            span_lint(\n+                cx,\n+                ITER_NOT_RETURNING_ITERATOR,\n+                sig.span,\n+                &format!(\n+                    \"this method is named `{}` but its return type does not implement `Iterator`\",\n+                    name\n+                ),\n+            );\n+        }\n+    }\n+}"}, {"sha": "2c91e02e84223cd3257a4b898ac739ac9b675415", "filename": "tests/ui/iter_not_returning_iterator.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/tests%2Fui%2Fiter_not_returning_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/tests%2Fui%2Fiter_not_returning_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.rs?ref=b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "patch": "@@ -44,4 +44,24 @@ impl Iterator for Counter {\n     }\n }\n \n+// Issue #8225\n+trait Iter {\n+    type I;\n+    fn iter(&self) -> Self::I;\n+}\n+\n+impl Iter for () {\n+    type I = core::slice::Iter<'static, ()>;\n+    fn iter(&self) -> Self::I {\n+        [].iter()\n+    }\n+}\n+\n+struct S;\n+impl S {\n+    fn iter(&self) -> <() as Iter>::I {\n+        ().iter()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "44f0295583695bfadd40376d53fd383c76ad0872", "filename": "tests/ui/iter_not_returning_iterator.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/tests%2Fui%2Fiter_not_returning_iterator.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9/tests%2Fui%2Fiter_not_returning_iterator.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fiter_not_returning_iterator.stderr?ref=b66dbe87f10c56f86270ce6eb0efd88e6e7fc1c9", "patch": "@@ -12,5 +12,11 @@ error: this method is named `iter_mut` but its return type does not implement `I\n LL |     fn iter_mut(&self) -> Counter2 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: this method is named `iter` but its return type does not implement `Iterator`\n+  --> $DIR/iter_not_returning_iterator.rs:50:5\n+   |\n+LL |     fn iter(&self) -> Self::I;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n "}]}