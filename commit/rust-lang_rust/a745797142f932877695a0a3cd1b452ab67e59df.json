{"sha": "a745797142f932877695a0a3cd1b452ab67e59df", "node_id": "C_kwDOAAsO6NoAKGE3NDU3OTcxNDJmOTMyODc3Njk1YTBhM2NkMWI0NTJhYjY3ZTU5ZGY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-01-26T13:02:45Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-02-02T15:40:11Z"}, "message": "Stop generating inference vars for nested impl trait and let type equality handle it.\n\nThis means we stop supporting the case where a locally defined trait has only a single impl so we can always use that impl (see nested-tait-inference.rs).", "tree": {"sha": "b457bf6116f61116d1413de2bcdfba4975fd7e04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b457bf6116f61116d1413de2bcdfba4975fd7e04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a745797142f932877695a0a3cd1b452ab67e59df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a745797142f932877695a0a3cd1b452ab67e59df", "html_url": "https://github.com/rust-lang/rust/commit/a745797142f932877695a0a3cd1b452ab67e59df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a745797142f932877695a0a3cd1b452ab67e59df/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bce50c01af576ca0132d9eddcd0ac85e82c9092", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bce50c01af576ca0132d9eddcd0ac85e82c9092", "html_url": "https://github.com/rust-lang/rust/commit/7bce50c01af576ca0132d9eddcd0ac85e82c9092"}], "stats": {"total": 120, "additions": 70, "deletions": 50}, "files": [{"sha": "ff636616db49bcc7ca3aff9b758604d209e2d3a8", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -1,4 +1,3 @@\n-use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{InferCtxt, InferOk};\n use crate::traits::{self, PredicateObligation, PredicateObligations};\n use hir::def_id::{DefId, LocalDefId};\n@@ -604,20 +603,6 @@ struct Instantiator<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n-    #[instrument(level = \"trace\", skip(self))]\n-    fn instantiate_opaque_types(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        if let Some(ty) = self.fold_opaque_ty_new(ty, |infcx, span| {\n-            infcx.next_ty_var(TypeVariableOrigin {\n-                kind: TypeVariableOriginKind::TypeInference,\n-                span,\n-            })\n-        }) {\n-            return ty;\n-        }\n-\n-        ty\n-    }\n-\n     fn fold_opaque_ty_new(\n         &mut self,\n         ty: Ty<'tcx>,\n@@ -720,7 +705,6 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n                     ty::Opaque(def_id2, substs2) if def_id == def_id2 && substs == substs2 => {\n                         ty_var\n                     }\n-                    ty::Opaque(..) => self.instantiate_opaque_types(ty),\n                     _ => ty,\n                 },\n                 lt_op: |lt| lt,"}, {"sha": "6eac2dece1f12677ee643ded3eab515470c414a9", "filename": "src/test/ui/impl-trait/nested_impl_trait.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.rs?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -4,6 +4,7 @@ fn fine(x: impl Into<u32>) -> impl Into<u32> { x }\n \n fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n //~^ ERROR nested `impl Trait` is not allowed\n+//~| ERROR `impl Into<u32>` doesn't implement `Debug`\n \n fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n //~^ ERROR nested `impl Trait` is not allowed\n@@ -16,6 +17,7 @@ struct X;\n impl X {\n     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n     //~^ ERROR nested `impl Trait` is not allowed\n+    //~| ERROR `impl Into<u32>` doesn't implement `Debug`\n }\n \n fn allowed_in_assoc_type() -> impl Iterator<Item=impl Fn()> {"}, {"sha": "87ff4ffc4fb17c8b319cf4c794ee6e043dade6d8", "filename": "src/test/ui/impl-trait/nested_impl_trait.stderr", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnested_impl_trait.stderr?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -8,7 +8,7 @@ LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                              outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:8:42\n+  --> $DIR/nested_impl_trait.rs:9:42\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ----------^^^^^^^^^^-\n@@ -17,7 +17,7 @@ LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:12:37\n+  --> $DIR/nested_impl_trait.rs:13:37\n    |\n LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           ----------^^^^^^^^^^-\n@@ -26,7 +26,7 @@ LL | fn bad_in_arg_position(_: impl Into<impl Debug>) { }\n    |                           outer `impl Trait`\n \n error[E0666]: nested `impl Trait` is not allowed\n-  --> $DIR/nested_impl_trait.rs:17:44\n+  --> $DIR/nested_impl_trait.rs:18:44\n    |\n LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  ----------^^^^^^^^^^-\n@@ -35,18 +35,40 @@ LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n    |                                  outer `impl Trait`\n \n error[E0562]: `impl Trait` not allowed outside of function and method return types\n-  --> $DIR/nested_impl_trait.rs:8:32\n+  --> $DIR/nested_impl_trait.rs:9:32\n    |\n LL | fn bad_in_fn_syntax(x: fn() -> impl Into<impl Debug>) {}\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0562]: `impl Trait` not allowed outside of function and method return types\n-  --> $DIR/nested_impl_trait.rs:25:42\n+  --> $DIR/nested_impl_trait.rs:27:42\n    |\n LL | fn allowed_in_ret_type() -> impl Fn() -> impl Into<u32> {\n    |                                          ^^^^^^^^^^^^^^\n \n-error: aborting due to 6 previous errors\n+error[E0277]: `impl Into<u32>` doesn't implement `Debug`\n+  --> $DIR/nested_impl_trait.rs:5:70\n+   |\n+LL | fn bad_in_ret_position(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                                                      ^ `impl Into<u32>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL | fn bad_in_ret_position(x: impl Into<u32> + std::fmt::Debug) -> impl Into<impl Debug> { x }\n+   |                                          +++++++++++++++++\n+\n+error[E0277]: `impl Into<u32>` doesn't implement `Debug`\n+  --> $DIR/nested_impl_trait.rs:18:58\n+   |\n+LL |     fn bad(x: impl Into<u32>) -> impl Into<impl Debug> { x }\n+   |                                                          ^ `impl Into<u32>` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+help: consider further restricting this bound\n+   |\n+LL |     fn bad(x: impl Into<u32> + std::fmt::Debug) -> impl Into<impl Debug> { x }\n+   |                              +++++++++++++++++\n+\n+error: aborting due to 8 previous errors\n \n-Some errors have detailed explanations: E0562, E0666.\n-For more information about an error, try `rustc --explain E0562`.\n+Some errors have detailed explanations: E0277, E0562, E0666.\n+For more information about an error, try `rustc --explain E0277`."}, {"sha": "ba780e301edc654fa9cd36fe570d6ef0b0f5844a", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.rs?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -15,5 +15,5 @@ impl<W> Trait<W> for () {}\n \n fn foo_desugared<T: TraitWithAssoc>(_: T) -> Foo<T::Assoc> {\n     ()\n-    //~^ ERROR type annotations needed\n+    //~^ ERROR non-defining opaque type use\n }"}, {"sha": "21e79ee36a6357a94713f662e61948a4b37f17ed", "filename": "src/test/ui/type-alias-impl-trait/bound_reduction2.stderr", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbound_reduction2.stderr?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -1,8 +1,14 @@\n-error[E0282]: type annotations needed\n+error: non-defining opaque type use in defining scope\n   --> $DIR/bound_reduction2.rs:17:5\n    |\n LL |     ()\n-   |     ^^ cannot infer type\n+   |     ^^\n+   |\n+note: used non-generic type `<T as TraitWithAssoc>::Assoc` for generic parameter\n+  --> $DIR/bound_reduction2.rs:9:10\n+   |\n+LL | type Foo<V> = impl Trait<V>;\n+   |          ^\n \n error: could not find defining uses\n   --> $DIR/bound_reduction2.rs:9:15\n@@ -12,4 +18,3 @@ LL | type Foo<V> = impl Trait<V>;\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0282`."}, {"sha": "78a665d97a0eab5e1fcdbc8a8c110072756b4673", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.rs?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -1,18 +1,19 @@\n #![feature(type_alias_impl_trait)]\n #![allow(dead_code)]\n \n-// check-pass\n-\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n+//~^ ERROR could not find defining uses\n \n trait Foo<A> { }\n \n impl Foo<()> for () { }\n \n fn foo() -> impl Foo<FooX> {\n+    // FIXME(type-alias-impl-trait): We could probably make this work.\n     ()\n+    //~^ ERROR: the trait bound `(): Foo<impl Debug>` is not satisfied\n }\n \n fn main() { }"}, {"sha": "d9585621d2dd2310bccac17207a2d58b6996dc17", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference.stderr?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n+  --> $DIR/nested-tait-inference.rs:15:5\n+   |\n+LL |     ()\n+   |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as Foo<()>>\n+\n+error: could not find defining uses\n+  --> $DIR/nested-tait-inference.rs:6:13\n+   |\n+LL | type FooX = impl Debug;\n+   |             ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4cbbe01ed513260a0575e4fb2ea5baf97aec3ef8", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.rs?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -13,8 +13,7 @@ impl Foo<u32> for () {}\n \n fn foo() -> impl Foo<FooX> {\n     ()\n-    //~^ ERROR: type annotations needed\n-    //~| ERROR: type annotations needed\n+    //~^ ERROR: the trait bound `(): Foo<impl Debug>` is not satisfied\n }\n \n fn main() {}"}, {"sha": "e08488287f5cdfe3f015fe5fa1fea4aa8fbd3dd6", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference2.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a745797142f932877695a0a3cd1b452ab67e59df/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference2.stderr?ref=a745797142f932877695a0a3cd1b452ab67e59df", "patch": "@@ -1,30 +1,19 @@\n-error[E0282]: type annotations needed\n+error[E0277]: the trait bound `(): Foo<impl Debug>` is not satisfied\n   --> $DIR/nested-tait-inference2.rs:15:5\n    |\n LL |     ()\n-   |     ^^ cannot infer type\n-\n-error[E0283]: type annotations needed\n-  --> $DIR/nested-tait-inference2.rs:15:5\n-   |\n-LL |     ()\n-   |     ^^ cannot infer type\n-   |\n-note: multiple `impl`s satisfying `(): Foo<_>` found\n-  --> $DIR/nested-tait-inference2.rs:11:1\n+   |     ^^ the trait `Foo<impl Debug>` is not implemented for `()`\n    |\n-LL | impl Foo<()> for () {}\n-   | ^^^^^^^^^^^^^^^^^^^\n-LL | impl Foo<u32> for () {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   = help: the following implementations were found:\n+             <() as Foo<()>>\n+             <() as Foo<u32>>\n \n error: could not find defining uses\n   --> $DIR/nested-tait-inference2.rs:6:13\n    |\n LL | type FooX = impl Debug;\n    |             ^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0282, E0283.\n-For more information about an error, try `rustc --explain E0282`.\n+For more information about this error, try `rustc --explain E0277`."}]}