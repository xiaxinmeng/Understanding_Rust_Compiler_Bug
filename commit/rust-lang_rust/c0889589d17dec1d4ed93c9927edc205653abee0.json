{"sha": "c0889589d17dec1d4ed93c9927edc205653abee0", "node_id": "C_kwDOAAsO6NoAKGMwODg5NTg5ZDE3ZGVjMWQ0ZWQ5M2M5OTI3ZWRjMjA1NjUzYWJlZTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:22:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-16T10:22:24Z"}, "message": "Auto merge of #14581 - Veykril:layout-ty, r=Veykril\n\ninternal: Move layout logic from hir-def to hir-ty", "tree": {"sha": "0987cf49d0041212882623dd4ac8bfa2b6b5b283", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0987cf49d0041212882623dd4ac8bfa2b6b5b283"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0889589d17dec1d4ed93c9927edc205653abee0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0889589d17dec1d4ed93c9927edc205653abee0", "html_url": "https://github.com/rust-lang/rust/commit/c0889589d17dec1d4ed93c9927edc205653abee0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0889589d17dec1d4ed93c9927edc205653abee0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c28f538568290ac34a36d5a2b81250a3621bcf88", "url": "https://api.github.com/repos/rust-lang/rust/commits/c28f538568290ac34a36d5a2b81250a3621bcf88", "html_url": "https://github.com/rust-lang/rust/commit/c28f538568290ac34a36d5a2b81250a3621bcf88"}, {"sha": "0bb9a173127b8ff270815e939cdc8dc0e9284dd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb9a173127b8ff270815e939cdc8dc0e9284dd8", "html_url": "https://github.com/rust-lang/rust/commit/0bb9a173127b8ff270815e939cdc8dc0e9284dd8"}], "stats": {"total": 257, "additions": 120, "deletions": 137}, "files": [{"sha": "0e4b033638a966276b4be0f67c24a554f6ac61ad", "filename": "crates/hir-def/src/data/adt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata%2Fadt.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n };\n use intern::Interned;\n use la_arena::{Arena, ArenaMap};\n-use rustc_abi::{Integer, IntegerType};\n+use rustc_abi::{Align, Integer, IntegerType, ReprFlags, ReprOptions};\n use syntax::ast::{self, HasName, HasVisibility};\n \n use crate::{\n@@ -22,7 +22,6 @@ use crate::{\n     db::DefDatabase,\n     item_tree::{AttrOwner, Field, FieldAstId, Fields, ItemTree, ModItem, RawVisibilityId},\n     lang_item::LangItem,\n-    layout::{Align, ReprFlags, ReprOptions},\n     nameres::diagnostics::DefDiagnostic,\n     src::HasChildSource,\n     src::HasSource,"}, {"sha": "873936b5b761092c5e540bfc2243310777fc525d", "filename": "crates/hir-def/src/layout.rs", "status": "removed", "additions": 0, "deletions": 98, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fhir-def%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28f538568290ac34a36d5a2b81250a3621bcf88/crates%2Fhir-def%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flayout.rs?ref=c28f538568290ac34a36d5a2b81250a3621bcf88", "patch": "@@ -1,98 +0,0 @@\n-//! Definitions needed for computing data layout of types.\n-\n-use std::cmp;\n-\n-use la_arena::{Idx, RawIdx};\n-pub use rustc_abi::{\n-    Abi, AbiAndPrefAlign, AddressSpace, Align, Endian, FieldsShape, Integer, IntegerType,\n-    LayoutCalculator, Niche, Primitive, ReprFlags, ReprOptions, Scalar, Size, StructKind,\n-    TargetDataLayout, TargetDataLayoutErrors, WrappingRange,\n-};\n-\n-use crate::LocalEnumVariantId;\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct RustcEnumVariantIdx(pub LocalEnumVariantId);\n-\n-impl rustc_index::vec::Idx for RustcEnumVariantIdx {\n-    fn new(idx: usize) -> Self {\n-        RustcEnumVariantIdx(Idx::from_raw(RawIdx::from(idx as u32)))\n-    }\n-\n-    fn index(self) -> usize {\n-        u32::from(self.0.into_raw()) as usize\n-    }\n-}\n-\n-pub type Layout = rustc_abi::LayoutS<RustcEnumVariantIdx>;\n-pub type TagEncoding = rustc_abi::TagEncoding<RustcEnumVariantIdx>;\n-pub type Variants = rustc_abi::Variants<RustcEnumVariantIdx>;\n-\n-pub trait IntegerExt {\n-    fn repr_discr(\n-        dl: &TargetDataLayout,\n-        repr: &ReprOptions,\n-        min: i128,\n-        max: i128,\n-    ) -> Result<(Integer, bool), LayoutError>;\n-}\n-\n-impl IntegerExt for Integer {\n-    /// Finds the appropriate Integer type and signedness for the given\n-    /// signed discriminant range and `#[repr]` attribute.\n-    /// N.B.: `u128` values above `i128::MAX` will be treated as signed, but\n-    /// that shouldn't affect anything, other than maybe debuginfo.\n-    fn repr_discr(\n-        dl: &TargetDataLayout,\n-        repr: &ReprOptions,\n-        min: i128,\n-        max: i128,\n-    ) -> Result<(Integer, bool), LayoutError> {\n-        // Theoretically, negative values could be larger in unsigned representation\n-        // than the unsigned representation of the signed minimum. However, if there\n-        // are any negative values, the only valid unsigned representation is u128\n-        // which can fit all i128 values, so the result remains unaffected.\n-        let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));\n-        let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));\n-\n-        if let Some(ity) = repr.int {\n-            let discr = Integer::from_attr(dl, ity);\n-            let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n-            if discr < fit {\n-                return Err(LayoutError::UserError(\n-                    \"Integer::repr_discr: `#[repr]` hint too small for \\\n-                      discriminant range of enum \"\n-                        .to_string(),\n-                ));\n-            }\n-            return Ok((discr, ity.is_signed()));\n-        }\n-\n-        let at_least = if repr.c() {\n-            // This is usually I32, however it can be different on some platforms,\n-            // notably hexagon and arm-none/thumb-none\n-            dl.c_enum_min_size\n-        } else {\n-            // repr(Rust) enums try to be as small as possible\n-            Integer::I8\n-        };\n-\n-        // If there are no negative values, we can use the unsigned fit.\n-        Ok(if min >= 0 {\n-            (cmp::max(unsigned_fit, at_least), false)\n-        } else {\n-            (cmp::max(signed_fit, at_least), true)\n-        })\n-    }\n-}\n-\n-#[derive(Debug, PartialEq, Eq, Clone)]\n-pub enum LayoutError {\n-    UserError(String),\n-    SizeOverflow,\n-    TargetLayoutNotAvailable,\n-    HasPlaceholder,\n-    HasErrorType,\n-    NotImplemented,\n-    Unknown,\n-}"}, {"sha": "5a0c1b66b9c134d5de9634a36bab4062d4081d77", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -29,7 +29,6 @@ pub mod item_tree;\n pub mod data;\n pub mod generics;\n pub mod lang_item;\n-pub mod layout;\n \n pub mod hir;\n pub use self::hir::type_ref;\n@@ -46,6 +45,8 @@ pub mod visibility;\n pub mod find_path;\n pub mod import_map;\n \n+pub use rustc_abi as layout;\n+\n #[cfg(test)]\n mod test_db;\n #[cfg(test)]"}, {"sha": "8cd287f7f30ff066c2fd4130a0b769e6f7db7356", "filename": "crates/hir-def/src/path.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -9,14 +9,12 @@ use std::{\n use crate::{\n     body::LowerCtx,\n     lang_item::LangItemTarget,\n-    type_ref::{ConstRefOrPath, LifetimeRef},\n+    type_ref::{ConstRefOrPath, LifetimeRef, TypeBound, TypeRef},\n };\n use hir_expand::name::Name;\n use intern::Interned;\n use syntax::ast;\n \n-use crate::type_ref::{TypeBound, TypeRef};\n-\n pub use hir_expand::mod_path::{path, ModPath, PathKind};\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "c415689399f164510285f3cb18e2f3e6b68872cd", "filename": "crates/hir-ty/src/db.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdb.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -5,18 +5,17 @@ use std::sync::Arc;\n \n use base_db::{impl_intern_key, salsa, CrateId, Upcast};\n use hir_def::{\n-    db::DefDatabase,\n-    hir::ExprId,\n-    layout::{Layout, LayoutError, TargetDataLayout},\n-    AdtId, BlockId, ConstId, ConstParamId, DefWithBodyId, EnumVariantId, FunctionId, GenericDefId,\n-    ImplId, LifetimeParamId, LocalFieldId, TypeOrConstParamId, VariantId,\n+    db::DefDatabase, hir::ExprId, layout::TargetDataLayout, AdtId, BlockId, ConstId, ConstParamId,\n+    DefWithBodyId, EnumVariantId, FunctionId, GenericDefId, ImplId, LifetimeParamId, LocalFieldId,\n+    TypeOrConstParamId, VariantId,\n };\n use la_arena::ArenaMap;\n use smallvec::SmallVec;\n \n use crate::{\n     chalk_db,\n     consteval::ConstEvalError,\n+    layout::{Layout, LayoutError},\n     method_resolution::{InherentImpls, TraitImpls, TyFingerprint},\n     mir::{BorrowckResult, MirBody, MirLowerError},\n     Binders, CallableDefId, ClosureId, Const, FnDefId, GenericArg, ImplTraitId, InferenceResult,"}, {"sha": "597bf4b9a88b3e191b265b9cc5094cfb9e7867f4", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -18,11 +18,11 @@ use std::{convert::identity, ops::Index};\n \n use chalk_ir::{cast::Cast, DebruijnIndex, Mutability, Safety, Scalar, TypeFlags};\n use either::Either;\n-use hir_def::hir::LabelId;\n use hir_def::{\n     body::Body,\n     builtin_type::{BuiltinInt, BuiltinType, BuiltinUint},\n     data::{ConstData, StaticData},\n+    hir::LabelId,\n     hir::{BindingAnnotation, BindingId, ExprId, ExprOrPatId, PatId},\n     lang_item::{LangItem, LangItemTarget},\n     layout::Integer,"}, {"sha": "512836afbf36f28603e06f2d8f5ee4f44580b41b", "filename": "crates/hir-ty/src/layout.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -4,16 +4,19 @@ use base_db::CrateId;\n use chalk_ir::{AdtId, TyKind};\n use hir_def::{\n     layout::{\n-        Abi, FieldsShape, Integer, Layout, LayoutCalculator, LayoutError, Primitive, ReprOptions,\n-        RustcEnumVariantIdx, Scalar, Size, StructKind, TargetDataLayout, Variants, WrappingRange,\n+        Abi, FieldsShape, Integer, LayoutCalculator, LayoutS, Primitive, ReprOptions, Scalar, Size,\n+        StructKind, TargetDataLayout, WrappingRange,\n     },\n-    LocalFieldId,\n+    LocalEnumVariantId, LocalFieldId,\n };\n+use la_arena::{Idx, RawIdx};\n use stdx::never;\n \n-use crate::{consteval::try_const_usize, db::HirDatabase, Interner, Substitution, Ty};\n+use crate::{\n+    consteval::try_const_usize, db::HirDatabase, layout::adt::struct_variant_idx, Interner,\n+    Substitution, Ty,\n+};\n \n-use self::adt::struct_variant_idx;\n pub use self::{\n     adt::{layout_of_adt_query, layout_of_adt_recover},\n     target::target_data_layout_query,\n@@ -28,6 +31,34 @@ macro_rules! user_error {\n mod adt;\n mod target;\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n+pub struct RustcEnumVariantIdx(pub LocalEnumVariantId);\n+\n+impl rustc_index::vec::Idx for RustcEnumVariantIdx {\n+    fn new(idx: usize) -> Self {\n+        RustcEnumVariantIdx(Idx::from_raw(RawIdx::from(idx as u32)))\n+    }\n+\n+    fn index(self) -> usize {\n+        u32::from(self.0.into_raw()) as usize\n+    }\n+}\n+\n+pub type Layout = LayoutS<RustcEnumVariantIdx>;\n+pub type TagEncoding = hir_def::layout::TagEncoding<RustcEnumVariantIdx>;\n+pub type Variants = hir_def::layout::Variants<RustcEnumVariantIdx>;\n+\n+#[derive(Debug, PartialEq, Eq, Clone)]\n+pub enum LayoutError {\n+    UserError(String),\n+    SizeOverflow,\n+    TargetLayoutNotAvailable,\n+    HasPlaceholder,\n+    HasErrorType,\n+    NotImplemented,\n+    Unknown,\n+}\n+\n struct LayoutCx<'a> {\n     krate: CrateId,\n     target: &'a TargetDataLayout,\n@@ -45,14 +76,6 @@ impl<'a> LayoutCalculator for LayoutCx<'a> {\n     }\n }\n \n-fn scalar_unit(dl: &TargetDataLayout, value: Primitive) -> Scalar {\n-    Scalar::Initialized { value, valid_range: WrappingRange::full(value.size(dl)) }\n-}\n-\n-fn scalar(dl: &TargetDataLayout, value: Primitive) -> Layout {\n-    Layout::scalar(dl, scalar_unit(dl, value))\n-}\n-\n pub fn layout_of_ty(db: &dyn HirDatabase, ty: &Ty, krate: CrateId) -> Result<Layout, LayoutError> {\n     let Some(target) = db.target_data_layout(krate) else { return Err(LayoutError::TargetLayoutNotAvailable) };\n     let cx = LayoutCx { krate, target: &target };\n@@ -287,5 +310,13 @@ fn field_ty(\n     db.field_types(def)[fd].clone().substitute(Interner, subst)\n }\n \n+fn scalar_unit(dl: &TargetDataLayout, value: Primitive) -> Scalar {\n+    Scalar::Initialized { value, valid_range: WrappingRange::full(value.size(dl)) }\n+}\n+\n+fn scalar(dl: &TargetDataLayout, value: Primitive) -> Layout {\n+    Layout::scalar(dl, scalar_unit(dl, value))\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "9dbf9b2419c16ff22e2c274e305d34cc3a48fe47", "filename": "crates/hir-ty/src/layout/adt.rs", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Fadt.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -1,16 +1,21 @@\n //! Compute the binary representation of structs, unions and enums\n \n-use std::ops::Bound;\n+use std::{cmp, ops::Bound};\n \n use hir_def::{\n     data::adt::VariantData,\n-    layout::{Integer, IntegerExt, Layout, LayoutCalculator, LayoutError, RustcEnumVariantIdx},\n+    layout::{Integer, LayoutCalculator, ReprOptions, TargetDataLayout},\n     AdtId, EnumVariantId, HasModule, LocalEnumVariantId, VariantId,\n };\n use la_arena::RawIdx;\n use smallvec::SmallVec;\n \n-use crate::{db::HirDatabase, lang_items::is_unsafe_cell, layout::field_ty, Substitution};\n+use crate::{\n+    db::HirDatabase,\n+    lang_items::is_unsafe_cell,\n+    layout::{field_ty, Layout, LayoutError, RustcEnumVariantIdx},\n+    Substitution,\n+};\n \n use super::{layout_of_ty, LayoutCx};\n \n@@ -73,7 +78,7 @@ pub fn layout_of_adt_query(\n             is_enum,\n             is_unsafe_cell(db, def),\n             layout_scalar_valid_range(db, def),\n-            |min, max| Integer::repr_discr(&dl, &repr, min, max).unwrap_or((Integer::I8, false)),\n+            |min, max| repr_discr(&dl, &repr, min, max).unwrap_or((Integer::I8, false)),\n             variants.iter_enumerated().filter_map(|(id, _)| {\n                 let AdtId::EnumId(e) = def else { return None };\n                 let d =\n@@ -125,3 +130,50 @@ pub fn layout_of_adt_recover(\n ) -> Result<Layout, LayoutError> {\n     user_error!(\"infinite sized recursive type\");\n }\n+\n+/// Finds the appropriate Integer type and signedness for the given\n+/// signed discriminant range and `#[repr]` attribute.\n+/// N.B.: `u128` values above `i128::MAX` will be treated as signed, but\n+/// that shouldn't affect anything, other than maybe debuginfo.\n+fn repr_discr(\n+    dl: &TargetDataLayout,\n+    repr: &ReprOptions,\n+    min: i128,\n+    max: i128,\n+) -> Result<(Integer, bool), LayoutError> {\n+    // Theoretically, negative values could be larger in unsigned representation\n+    // than the unsigned representation of the signed minimum. However, if there\n+    // are any negative values, the only valid unsigned representation is u128\n+    // which can fit all i128 values, so the result remains unaffected.\n+    let unsigned_fit = Integer::fit_unsigned(cmp::max(min as u128, max as u128));\n+    let signed_fit = cmp::max(Integer::fit_signed(min), Integer::fit_signed(max));\n+\n+    if let Some(ity) = repr.int {\n+        let discr = Integer::from_attr(dl, ity);\n+        let fit = if ity.is_signed() { signed_fit } else { unsigned_fit };\n+        if discr < fit {\n+            return Err(LayoutError::UserError(\n+                \"Integer::repr_discr: `#[repr]` hint too small for \\\n+                      discriminant range of enum \"\n+                    .to_string(),\n+            ));\n+        }\n+        return Ok((discr, ity.is_signed()));\n+    }\n+\n+    let at_least = if repr.c() {\n+        // This is usually I32, however it can be different on some platforms,\n+        // notably hexagon and arm-none/thumb-none\n+        dl.c_enum_min_size\n+    } else {\n+        // repr(Rust) enums try to be as small as possible\n+        Integer::I8\n+    };\n+\n+    // If there are no negative values, we can use the unsigned fit.\n+    Ok(if min >= 0 {\n+        (cmp::max(unsigned_fit, at_least), false)\n+    } else {\n+        (cmp::max(signed_fit, at_least), true)\n+    })\n+}"}, {"sha": "3cd0cd399c4de87a01c43f03d4a3549e9d631291", "filename": "crates/hir-ty/src/layout/tests.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flayout%2Ftests.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -2,13 +2,15 @@ use std::collections::HashMap;\n \n use base_db::fixture::WithFixture;\n use chalk_ir::{AdtId, TyKind};\n-use hir_def::{\n-    db::DefDatabase,\n+use hir_def::db::DefDatabase;\n+\n+use crate::{\n+    db::HirDatabase,\n     layout::{Layout, LayoutError},\n+    test_db::TestDB,\n+    Interner, Substitution,\n };\n \n-use crate::{db::HirDatabase, test_db::TestDB, Interner, Substitution};\n-\n use super::layout_of_ty;\n \n mod closure;"}, {"sha": "b39718fbdc40c593b6cdccd9095c7b9785483dec", "filename": "crates/hir-ty/src/mir/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -10,7 +10,7 @@ use chalk_ir::{\n use hir_def::{\n     builtin_type::BuiltinType,\n     lang_item::{lang_attr, LangItem},\n-    layout::{Layout, LayoutError, RustcEnumVariantIdx, TagEncoding, Variants},\n+    layout::{TagEncoding, Variants},\n     AdtId, DefWithBodyId, EnumVariantId, FunctionId, HasModule, ItemContainerId, Lookup, VariantId,\n };\n use intern::Interned;\n@@ -21,7 +21,7 @@ use crate::{\n     db::HirDatabase,\n     from_placeholder_idx,\n     infer::{normalize, PointerCast},\n-    layout::layout_of_ty,\n+    layout::{layout_of_ty, Layout, LayoutError, RustcEnumVariantIdx},\n     mapping::from_chalk,\n     method_resolution::{is_dyn_method, lookup_impl_method},\n     traits::FnTrait,"}, {"sha": "1f88cc57d0692f1a048d2e100fc5d8adecfe526b", "filename": "crates/hir-ty/src/mir/lower.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -11,7 +11,6 @@ use hir_def::{\n         RecordFieldPat, RecordLitField,\n     },\n     lang_item::{LangItem, LangItemTarget},\n-    layout::LayoutError,\n     path::Path,\n     resolver::{resolver_for_expr, ResolveValueResult, ValueNs},\n     AdtId, DefWithBodyId, EnumVariantId, HasModule, ItemContainerId, LocalFieldId, TraitId,\n@@ -26,7 +25,7 @@ use crate::{\n     display::HirDisplay,\n     infer::{CaptureKind, CapturedItem, TypeMismatch},\n     inhabitedness::is_ty_uninhabited_from,\n-    layout::layout_of_ty,\n+    layout::{layout_of_ty, LayoutError},\n     mapping::ToChalk,\n     static_lifetime,\n     utils::generics,"}, {"sha": "3e568a402150d9971918291cfd48e20dd41905ba", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0889589d17dec1d4ed93c9927edc205653abee0/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c0889589d17dec1d4ed93c9927edc205653abee0", "patch": "@@ -45,7 +45,7 @@ use hir_def::{\n     hir::{BindingAnnotation, BindingId, ExprOrPatId, LabelId, Pat},\n     item_tree::ItemTreeNode,\n     lang_item::{LangItem, LangItemTarget},\n-    layout::{Layout, LayoutError, ReprOptions},\n+    layout::ReprOptions,\n     nameres::{self, diagnostics::DefDiagnostic, ModuleOrigin},\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n@@ -61,7 +61,7 @@ use hir_ty::{\n     consteval::{try_const_usize, unknown_const_as_generic, ConstEvalError, ConstExt},\n     diagnostics::BodyValidationDiagnostic,\n     display::HexifiedConst,\n-    layout::layout_of_ty,\n+    layout::{layout_of_ty, Layout, LayoutError},\n     method_resolution::{self, TyFingerprint},\n     mir::{self, interpret_mir},\n     primitive::UintTy,"}]}