{"sha": "a99f255015b613015a37b5c244064d6b8eb0136b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5OWYyNTUwMTViNjEzMDE1YTM3YjVjMjQ0MDY0ZDZiOGViMDEzNmI=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-25T02:08:22Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-09-28T11:51:38Z"}, "message": "Allow reading non-mutable statics in const prop", "tree": {"sha": "d6a34cc3511db43c113262dbabd21f0a2f30cc68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6a34cc3511db43c113262dbabd21f0a2f30cc68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a99f255015b613015a37b5c244064d6b8eb0136b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a99f255015b613015a37b5c244064d6b8eb0136b", "html_url": "https://github.com/rust-lang/rust/commit/a99f255015b613015a37b5c244064d6b8eb0136b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a99f255015b613015a37b5c244064d6b8eb0136b/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcc6c28c53e6f59a6e966b47ec872a7d26e2b23b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcc6c28c53e6f59a6e966b47ec872a7d26e2b23b", "html_url": "https://github.com/rust-lang/rust/commit/dcc6c28c53e6f59a6e966b47ec872a7d26e2b23b"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "c30c59bbf10c8a57f553e5467587a0804fe262c9", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=a99f255015b613015a37b5c244064d6b8eb0136b", "patch": "@@ -194,10 +194,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         frame.locals[local].access()\n     }\n \n-    /// Called before a `StaticKind::Static` value is read.\n-    fn before_eval_static(\n-        _ecx: &InterpCx<'mir, 'tcx, Self>,\n-        _place_static: &mir::Static<'tcx>,\n+    /// Called before a `StaticKind::Static` value is accessed.\n+    fn before_access_static(\n+        _allocation: &Allocation,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n     }"}, {"sha": "924474c53175c3407bddcbe47f7c29ad9712cae2", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=a99f255015b613015a37b5c244064d6b8eb0136b", "patch": "@@ -462,6 +462,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     // Make sure we use the ID of the resolved memory, not the lazy one!\n                     let id = raw_const.alloc_id;\n                     let allocation = tcx.alloc_map.lock().unwrap_memory(id);\n+\n+                    M::before_access_static(allocation)?;\n                     Cow::Borrowed(allocation)\n                 }\n             }"}, {"sha": "1166ca9bf24443b30c8a550aad2f0708b8ca7021", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=a99f255015b613015a37b5c244064d6b8eb0136b", "patch": "@@ -601,8 +601,6 @@ where\n             }\n \n             StaticKind::Static => {\n-                M::before_eval_static(self, place_static)?;\n-\n                 let ty = place_static.ty;\n                 assert!(!ty.needs_subst());\n                 let layout = self.layout_of(ty)?;"}, {"sha": "612822b6d9d34362d41a9d0d1170023fb2089ccb", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=a99f255015b613015a37b5c244064d6b8eb0136b", "patch": "@@ -8,7 +8,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::{\n     AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n-    Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static,\n+    Local, NullOp, UnOp, StatementKind, Statement, LocalKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp,\n     SourceScope, SourceScopeLocalData, LocalDecl, BasicBlock,\n };\n@@ -17,6 +17,7 @@ use rustc::mir::visit::{\n };\n use rustc::mir::interpret::{Scalar, InterpResult, PanicInfo};\n use rustc::ty::{self, Instance, ParamEnv, Ty, TyCtxt};\n+use syntax::ast::Mutability;\n use syntax_pos::{Span, DUMMY_SP};\n use rustc::ty::subst::InternalSubsts;\n use rustc_data_structures::fx::FxHashMap;\n@@ -229,11 +230,16 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n         l.access()\n     }\n \n-    fn before_eval_static(\n-        _ecx: &InterpCx<'mir, 'tcx, Self>,\n-        _place_static: &Static<'tcx>,\n+    fn before_access_static(\n+        allocation: &Allocation<Self::PointerTag, Self::AllocExtra>,\n     ) -> InterpResult<'tcx> {\n-        throw_unsup_format!(\"can't eval statics in ConstProp\");\n+        // if the static allocation is mutable or if it has relocations (it may be legal to mutate\n+        // the memory behind that in the future), then we can't const prop it\n+        if allocation.mutability == Mutability::Mutable || allocation.relocations().len() > 0 {\n+            throw_unsup_format!(\"can't eval mutable statics in ConstProp\");\n+        }\n+\n+        Ok(())\n     }\n \n     fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {"}, {"sha": "c2902dbd7c12953cbe598d5e7a6ff24ee23bb7f7", "filename": "src/test/mir-opt/const_prop/read_immutable_static.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a99f255015b613015a37b5c244064d6b8eb0136b/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fread_immutable_static.rs?ref=a99f255015b613015a37b5c244064d6b8eb0136b", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags: -O\n+\n+static FOO: u8 = 2;\n+\n+fn main() {\n+    let x = FOO + FOO;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+//  bb0: {\n+//      ...\n+//      _2 = (FOO: u8);\n+//      ...\n+//      _3 = (FOO: u8);\n+//      _1 = Add(move _2, move _3);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+//  bb0: {\n+//      ...\n+//      _2 = const 2u8;\n+//      ...\n+//      _3 = const 2u8;\n+//      _1 = Add(move _2, move _3);\n+//      ...\n+//  }\n+// END rustc.main.ConstProp.after.mir"}]}