{"sha": "b4668ecb7317fe821844d89d27a718e50c930215", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NjY4ZWNiNzMxN2ZlODIxODQ0ZDg5ZDI3YTcxOGU1MGM5MzAyMTU=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-25T17:45:33Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-11-25T17:45:33Z"}, "message": "Improved version check", "tree": {"sha": "b2a38c68197d149f30e337336df9bf580ae48dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a38c68197d149f30e337336df9bf580ae48dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4668ecb7317fe821844d89d27a718e50c930215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4668ecb7317fe821844d89d27a718e50c930215", "html_url": "https://github.com/rust-lang/rust/commit/b4668ecb7317fe821844d89d27a718e50c930215", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4668ecb7317fe821844d89d27a718e50c930215/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5fef37d23f4e4471caea5508ab18da20522e51f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fef37d23f4e4471caea5508ab18da20522e51f", "html_url": "https://github.com/rust-lang/rust/commit/b5fef37d23f4e4471caea5508ab18da20522e51f"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "ff65726c83793f64bbe638139dbf4854139db4f9", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b4668ecb7317fe821844d89d27a718e50c930215/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4668ecb7317fe821844d89d27a718e50c930215/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=b4668ecb7317fe821844d89d27a718e50c930215", "patch": "@@ -26,6 +26,11 @@ use tracing::debug;\n /// undocumented details in Clang's implementation (that may or may not be important) were also\n /// replicated for Rust's Coverage Map.\n pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n+    // Ensure LLVM supports Coverage Map Version 4 (encoded as a zero-based value: 3).\n+    // If not, the LLVM Version must be less than 11.\n+    let version = coverageinfo::mapping_version();\n+    assert_eq!(version, 3, \"rustc option `-Z instrument-coverage` requires LLVM 11 or higher.\");\n+\n     let function_coverage_map = match cx.coverage_context() {\n         Some(ctx) => ctx.take_function_coverage_map(),\n         None => return,\n@@ -68,7 +73,7 @@ pub fn finalize<'ll, 'tcx>(cx: &CodegenCx<'ll, 'tcx>) {\n     let filenames_ref = coverageinfo::hash_bytes(filenames_buffer);\n \n     // Generate the LLVM IR representation of the coverage map and store it in a well-known global\n-    let cov_data_val = mapgen.generate_coverage_map(cx, filenames_size, filenames_val);\n+    let cov_data_val = mapgen.generate_coverage_map(cx, version, filenames_size, filenames_val);\n \n     for (mangled_function_name, function_source_hash, coverage_mapping_buffer) in function_data {\n         save_function_record(\n@@ -159,21 +164,18 @@ impl CoverageMapGenerator {\n     fn generate_coverage_map(\n         self,\n         cx: &CodegenCx<'ll, 'tcx>,\n+        version: u32,\n         filenames_size: usize,\n         filenames_val: &'ll llvm::Value,\n     ) -> &'ll llvm::Value {\n-        debug!(\n-            \"cov map: filenames_size = {}, 0-based version = {}\",\n-            filenames_size,\n-            coverageinfo::mapping_version()\n-        );\n+        debug!(\"cov map: filenames_size = {}, 0-based version = {}\", filenames_size, version);\n \n         // Create the coverage data header (Note, fields 0 and 2 are now always zero,\n         // as of `llvm::coverage::CovMapVersion::Version4`.)\n         let zero_was_n_records_val = cx.const_u32(0);\n         let filenames_size_val = cx.const_u32(filenames_size as u32);\n         let zero_was_coverage_size_val = cx.const_u32(0);\n-        let version_val = cx.const_u32(coverageinfo::mapping_version());\n+        let version_val = cx.const_u32(version);\n         let cov_data_header_val = cx.const_struct(\n             &[zero_was_n_records_val, filenames_size_val, zero_was_coverage_size_val, version_val],\n             /*packed=*/ false,"}, {"sha": "25badc3f4e17bd96cc954d6f765e5cd8ecc48cf5", "filename": "compiler/rustc_llvm/llvm-wrapper/CoverageMappingWrapper.cpp", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b4668ecb7317fe821844d89d27a718e50c930215/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b4668ecb7317fe821844d89d27a718e50c930215/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FCoverageMappingWrapper.cpp?ref=b4668ecb7317fe821844d89d27a718e50c930215", "patch": "@@ -73,8 +73,7 @@ extern \"C\" void LLVMRustCoverageWriteFuncSectionNameToString(LLVMModuleRef M,\n                                                              RustStringRef Str) {\n #if LLVM_VERSION_GE(11, 0)\n   WriteSectionNameToString(M, IPSK_covfun, Str);\n-#else\n-  report_fatal_error(\"rustc option `-Z instrument-coverage` requires LLVM 11 or higher.\");\n+// else do nothing; the `Version` check will abort codegen on the Rust side\n #endif\n }\n \n@@ -88,6 +87,6 @@ extern \"C\" uint32_t LLVMRustCoverageMappingVersion() {\n #if LLVM_VERSION_GE(11, 0)\n   return coverage::CovMapVersion::Version4;\n #else\n-  report_fatal_error(\"rustc option `-Z instrument-coverage` requires LLVM 11 or higher.\");\n+  return coverage::CovMapVersion::Version3;\n #endif\n }"}]}