{"sha": "f50a8e283398a8857425e80053db8db845980fa8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1MGE4ZTI4MzM5OGE4ODU3NDI1ZTgwMDUzZGI4ZGI4NDU5ODBmYTg=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-08T16:02:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-10T23:32:09Z"}, "message": "syntax: Simplify deriving to handle classes that take generics, like Encodable", "tree": {"sha": "e16656757ee36efdce9472438c443648e96c5df2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e16656757ee36efdce9472438c443648e96c5df2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50a8e283398a8857425e80053db8db845980fa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50a8e283398a8857425e80053db8db845980fa8", "html_url": "https://github.com/rust-lang/rust/commit/f50a8e283398a8857425e80053db8db845980fa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50a8e283398a8857425e80053db8db845980fa8/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "419f6acf0e609c18c6df5ee2ca8ed9cb6206bbfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/419f6acf0e609c18c6df5ee2ca8ed9cb6206bbfe", "html_url": "https://github.com/rust-lang/rust/commit/419f6acf0e609c18c6df5ee2ca8ed9cb6206bbfe"}], "stats": {"total": 62, "additions": 28, "deletions": 34}, "files": [{"sha": "c8ba6b990e47a6426cbfaaaa4c402c7cc72d8436", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=f50a8e283398a8857425e80053db8db845980fa8", "patch": "@@ -17,6 +17,7 @@ use ext::build;\n use ext::deriving::*;\n use codemap::{span, spanned};\n use ast_util;\n+use opt_vec;\n \n use core::uint;\n \n@@ -48,12 +49,13 @@ fn create_derived_clone_impl(cx: @ext_ctxt,\n                              method: @method)\n                           -> @item {\n     let methods = [ method ];\n-    let trait_path = [\n+    let trait_path = ~[\n         cx.ident_of(~\"core\"),\n         cx.ident_of(~\"clone\"),\n         cx.ident_of(~\"Clone\"),\n     ];\n-    create_derived_impl(cx, span, type_ident, generics, methods, trait_path)\n+    let trait_path = build::mk_raw_path_global(span, trait_path);\n+    create_derived_impl(cx, span, type_ident, generics, methods, trait_path, opt_vec::Empty)\n }\n // Creates a method from the given expression conforming to the signature of\n // the `clone` method."}, {"sha": "c427a206c2e329d76348e66d84e3aa274b820255", "filename": "src/libsyntax/ext/deriving/eq.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Feq.rs?ref=f50a8e283398a8857425e80053db8db845980fa8", "patch": "@@ -17,6 +17,7 @@ use ext::build;\n use ext::deriving::*;\n use codemap::{span, spanned};\n use ast_util;\n+use opt_vec;\n \n use core::uint;\n \n@@ -124,12 +125,13 @@ fn create_derived_eq_impl(cx: @ext_ctxt,\n                           ne_method: @method)\n                        -> @item {\n     let methods = [ eq_method, ne_method ];\n-    let trait_path = [\n+    let trait_path = ~[\n         cx.ident_of(~\"core\"),\n         cx.ident_of(~\"cmp\"),\n         cx.ident_of(~\"Eq\")\n     ];\n-    create_derived_impl(cx, span, type_ident, generics, methods, trait_path)\n+    let trait_path = build::mk_raw_path_global(span, trait_path);\n+    create_derived_impl(cx, span, type_ident, generics, methods, trait_path, opt_vec::Empty)\n }\n \n fn call_substructure_eq_method(cx: @ext_ctxt,"}, {"sha": "4124e6ee6c165ffdf45bec98e694f81cf1256025", "filename": "src/libsyntax/ext/deriving/iter_bytes.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fiter_bytes.rs?ref=f50a8e283398a8857425e80053db8db845980fa8", "patch": "@@ -17,6 +17,7 @@ use ext::build;\n use ext::deriving::*;\n use codemap::{span, spanned};\n use ast_util;\n+use opt_vec;\n \n use core::uint;\n \n@@ -49,12 +50,13 @@ fn create_derived_iter_bytes_impl(cx: @ext_ctxt,\n                                   method: @method)\n                                -> @item {\n     let methods = [ method ];\n-    let trait_path = [\n+    let trait_path = ~[\n         cx.ident_of(~\"core\"),\n         cx.ident_of(~\"to_bytes\"),\n         cx.ident_of(~\"IterBytes\")\n     ];\n-    create_derived_impl(cx, span, type_ident, generics, methods, trait_path)\n+    let trait_path = build::mk_raw_path_global(span, trait_path);\n+    create_derived_impl(cx, span, type_ident, generics, methods, trait_path, opt_vec::Empty)\n }\n \n // Creates a method from the given set of statements conforming to the"}, {"sha": "95bca7ff230c7bf00956e92892abdbada299333c", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50a8e283398a8857425e80053db8db845980fa8/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=f50a8e283398a8857425e80053db8db845980fa8", "patch": "@@ -14,7 +14,7 @@\n use core::prelude::*;\n \n use ast;\n-use ast::{TraitTyParamBound, Ty, bind_by_ref, deref, enum_def};\n+use ast::{Ty, bind_by_ref, deref, enum_def};\n use ast::{expr, expr_match, ident, item, item_};\n use ast::{item_enum, item_impl, item_struct, Generics};\n use ast::{m_imm, meta_item, method};\n@@ -153,12 +153,13 @@ pub fn create_self_type_with_params(cx: @ext_ctxt,\n }\n \n pub fn create_derived_impl(cx: @ext_ctxt,\n-                       span: span,\n-                       type_ident: ident,\n-                       generics: &Generics,\n-                       methods: &[@method],\n-                       trait_path: &[ident])\n-                    -> @item {\n+                           span: span,\n+                           type_ident: ident,\n+                           generics: &Generics,\n+                           methods: &[@method],\n+                           trait_path: @ast::Path,\n+                           mut impl_ty_params: opt_vec::OptVec<ast::TyParam>)\n+                        -> @item {\n     /*!\n      *\n      * Given that we are deriving a trait `Tr` for a type `T<'a, ...,\n@@ -175,29 +176,16 @@ pub fn create_derived_impl(cx: @ext_ctxt,\n         build::mk_lifetime(cx, l.span, l.ident)\n     });\n \n-    // Create the type parameters.\n-    let impl_ty_params = generics.ty_params.map(|ty_param| {\n-        let bound = build::mk_trait_ref_global(cx,\n-                                               span,\n-                                               trait_path.map(|x| *x));\n-        let bounds = @opt_vec::with(TraitTyParamBound(bound));\n-        build::mk_ty_param(cx, ty_param.ident, bounds)\n-    });\n-\n     // Create the reference to the trait.\n-    let trait_path = ast::Path {\n-        span: span,\n-        global: true,\n-        idents: trait_path.map(|x| *x),\n-        rp: None,\n-        types: ~[]\n-    };\n-    let trait_path = @trait_path;\n-    let trait_ref = ast::trait_ref {\n-        path: trait_path,\n-        ref_id: cx.next_id()\n+    let trait_ref = build::mk_trait_ref_(cx, trait_path);\n+\n+    // Create the type parameters.\n+    for generics.ty_params.each |ty_param| {\n+        let bounds = @opt_vec::with(\n+            build::mk_trait_ty_param_bound_(cx, trait_path)\n+        );\n+        impl_ty_params.push(build::mk_ty_param(cx, ty_param.ident, bounds));\n     };\n-    let trait_ref = @trait_ref;\n \n     // Create the type of `self`.\n     let self_type = create_self_type_with_params(cx,"}]}