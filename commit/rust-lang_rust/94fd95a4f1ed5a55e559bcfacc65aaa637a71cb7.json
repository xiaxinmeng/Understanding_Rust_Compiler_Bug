{"sha": "94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ZmQ5NWE0ZjFlZDVhNTVlNTU5YmNmYWNjNjVhYWE2MzdhNzFjYjc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-09T00:28:37Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-09T00:30:54Z"}, "message": "oldmap: rm unneeded unsafe", "tree": {"sha": "415cd2a1a039defd0605bc3b36b3fc17b84653fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/415cd2a1a039defd0605bc3b36b3fc17b84653fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7", "html_url": "https://github.com/rust-lang/rust/commit/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0127828b5bc5363e30f6f672e0465b7fa79c9907", "url": "https://api.github.com/repos/rust-lang/rust/commits/0127828b5bc5363e30f6f672e0465b7fa79c9907", "html_url": "https://github.com/rust-lang/rust/commit/0127828b5bc5363e30f6f672e0465b7fa79c9907"}], "stats": {"total": 44, "additions": 18, "deletions": 26}, "files": [{"sha": "cea6d17e35d7794ea8133c7aa5141089650ac3e0", "filename": "src/libstd/oldmap.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7/src%2Flibstd%2Foldmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7/src%2Flibstd%2Foldmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foldmap.rs?ref=94fd95a4f1ed5a55e559bcfacc65aaa637a71cb7", "patch": "@@ -90,15 +90,13 @@ pub mod chained {\n                   }\n                   Some(e1) => {\n                     comp += 1u;\n-                    unsafe {\n-                        if e1.hash == h && e1.key == *k {\n-                            debug!(\"search_tbl: present, comp %u, \\\n-                                    hash %u, idx %u\",\n-                                   comp, h, idx);\n-                            return FoundAfter(e0, e1);\n-                        } else {\n-                            e0 = e1;\n-                        }\n+                    if e1.hash == h && e1.key == *k {\n+                        debug!(\n+                            \"search_tbl: present, comp %u, hash %u, idx %u\",\n+                            comp, h, idx);\n+                        return FoundAfter(e0, e1);\n+                    } else {\n+                        e0 = e1;\n                     }\n                   }\n                 }\n@@ -114,14 +112,12 @@ pub mod chained {\n                 return NotFound;\n               }\n               Some(e) => {\n-                unsafe {\n-                    if e.hash == h && e.key == *k {\n-                        debug!(\"search_tbl: present, comp %u, hash %u, \\\n-                                idx %u\", 1u, h, idx);\n-                        return FoundFirst(idx, e);\n-                    } else {\n-                        return self.search_rem(k, h, idx, e);\n-                    }\n+                if e.hash == h && e.key == *k {\n+                    debug!(\"search_tbl: present, comp %u, hash %u, \\\n+                           idx %u\", 1u, h, idx);\n+                    return FoundFirst(idx, e);\n+                } else {\n+                    return self.search_rem(k, h, idx, e);\n                 }\n               }\n             }\n@@ -258,12 +254,10 @@ pub mod chained {\n \n     impl<K: Eq IterBytes Hash Copy, V: Copy> T<K, V> {\n         pure fn find(&self, k: &K) -> Option<V> {\n-            unsafe {\n-                match self.search_tbl(k, k.hash_keyed(0,0) as uint) {\n-                  NotFound => None,\n-                  FoundFirst(_, entry) => Some(entry.value),\n-                  FoundAfter(_, entry) => Some(entry.value)\n-                }\n+            match self.search_tbl(k, k.hash_keyed(0,0) as uint) {\n+              NotFound => None,\n+              FoundFirst(_, entry) => Some(entry.value),\n+              FoundAfter(_, entry) => Some(entry.value)\n             }\n         }\n \n@@ -364,9 +358,7 @@ pub mod chained {\n \n     impl<K:Eq IterBytes Hash Copy, V: Copy> T<K, V>: ops::Index<K, V> {\n         pure fn index(&self, k: K) -> V {\n-            unsafe {\n-                self.get(&k)\n-            }\n+            self.get(&k)\n         }\n     }\n "}]}