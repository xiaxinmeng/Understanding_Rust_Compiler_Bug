{"sha": "8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjA4NmEwYTNmMGRlM2NkMzFiMDFlYjIyM2QzNmNkMTUzMTRkNmY=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-08-19T06:41:25Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-09-05T04:26:41Z"}, "message": "check_block_with_expected returns the checked type", "tree": {"sha": "31ee5fc5bc82f47e3dd51d1397beba54adb37e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ee5fc5bc82f47e3dd51d1397beba54adb37e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "html_url": "https://github.com/rust-lang/rust/commit/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f54c47d34b0d8c898529c479a270ab034ce36f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/f54c47d34b0d8c898529c479a270ab034ce36f78", "html_url": "https://github.com/rust-lang/rust/commit/f54c47d34b0d8c898529c479a270ab034ce36f78"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "79dd951a5d85e118a8acb9910448b19af4e6e93d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6086a0a3f0de3cd31b01eb223d36cd15314d6f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8c6086a0a3f0de3cd31b01eb223d36cd15314d6f", "patch": "@@ -2850,8 +2850,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let cond_ty = self.check_expr_has_type(cond_expr, self.tcx.types.bool);\n \n         let expected = expected.adjust_for_branches(self);\n-        self.check_block_with_expected(then_blk, expected);\n-        let then_ty = self.node_ty(then_blk.id);\n+        let then_ty = self.check_block_with_expected(then_blk, expected);\n \n         let unit = self.tcx.mk_nil();\n         let (origin, expected, found, result) =\n@@ -3542,8 +3541,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               self.check_expr_closure(expr, capture, &decl, &body, expected)\n           }\n           hir::ExprBlock(ref b) => {\n-            self.check_block_with_expected(&b, expected);\n-            self.node_ty(b.id)\n+            self.check_block_with_expected(&b, expected)\n           }\n           hir::ExprCall(ref callee, ref args) => {\n               self.check_call(expr, &callee, &args[..], expected)\n@@ -3911,8 +3909,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn check_block_no_value(&self, blk: &'gcx hir::Block)  {\n-        self.check_block_with_expected(blk, ExpectHasType(self.tcx.mk_nil()));\n-        let blkty = self.node_ty(blk.id);\n+        let blkty = self.check_block_with_expected(blk, ExpectHasType(self.tcx.mk_nil()));\n         if blkty.references_error() {\n             self.write_error(blk.id);\n         } else {\n@@ -3923,7 +3920,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     fn check_block_with_expected(&self,\n                                  blk: &'gcx hir::Block,\n-                                 expected: Expectation<'tcx>) {\n+                                 expected: Expectation<'tcx>) -> Ty<'tcx> {\n         let prev = {\n             let mut fcx_ps = self.ps.borrow_mut();\n             let unsafety_state = fcx_ps.recurse(blk);\n@@ -3960,13 +3957,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                            s_ty.is_never();\n             any_err = any_err || s_ty.references_error();\n         }\n-        match blk.expr {\n+        let ty = match blk.expr {\n             None => if any_err {\n-                self.write_error(blk.id);\n+                self.tcx.types.err\n             } else if any_diverges {\n-                self.write_ty(blk.id, self.next_diverging_ty_var());\n+                self.next_diverging_ty_var()\n             } else {\n-                self.write_nil(blk.id);\n+                self.tcx.mk_nil()\n             },\n             Some(ref e) => {\n                 if any_diverges && !warned {\n@@ -3988,16 +3985,18 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n \n                 if any_err {\n-                    self.write_error(blk.id);\n+                    self.tcx.types.err\n                 } else if any_diverges {\n-                    self.write_ty(blk.id, self.next_diverging_ty_var());\n+                    self.next_diverging_ty_var()\n                 } else {\n-                    self.write_ty(blk.id, ety);\n+                    ety\n                 }\n             }\n         };\n+        self.write_ty(blk.id, ty);\n \n         *self.ps.borrow_mut() = prev;\n+        ty\n     }\n \n     // Instantiates the given path, which must refer to an item with the given"}]}