{"sha": "6be50f7d5de3737464853a589673375fc0cafa97", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTUwZjdkNWRlMzczNzQ2NDg1M2E1ODk2NzMzNzVmYzBjYWZhOTc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T20:41:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-10-31T20:41:43Z"}, "message": "Reformat all", "tree": {"sha": "2c6da7f3a1234c3f2fd3f330d2c9445953979598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c6da7f3a1234c3f2fd3f330d2c9445953979598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be50f7d5de3737464853a589673375fc0cafa97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be50f7d5de3737464853a589673375fc0cafa97", "html_url": "https://github.com/rust-lang/rust/commit/6be50f7d5de3737464853a589673375fc0cafa97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be50f7d5de3737464853a589673375fc0cafa97/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "857c1650efdb51650458f9ec1119adaa49b34371", "url": "https://api.github.com/repos/rust-lang/rust/commits/857c1650efdb51650458f9ec1119adaa49b34371", "html_url": "https://github.com/rust-lang/rust/commit/857c1650efdb51650458f9ec1119adaa49b34371"}], "stats": {"total": 788, "additions": 422, "deletions": 366}, "files": [{"sha": "6bd1233f9cba21733c6f0fa784d9864c363526d4", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,22 +1,22 @@\n-use rustc_hash::{FxHashMap, FxHashSet};\n-use ra_editor::{find_node_at_offset};\n+use ra_editor::find_node_at_offset;\n use ra_syntax::{\n-    AtomEdit, File, TextUnit, AstNode, SyntaxNodeRef,\n     algo::visit::{visitor, visitor_ctx, Visitor, VisitorCtx},\n     ast::{self, AstChildren, LoopBodyOwner, ModuleItemOwner},\n+    AstNode, AtomEdit, File,\n     SyntaxKind::*,\n+    SyntaxNodeRef, TextUnit,\n };\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    FileId, Cancelable,\n-    input::FilesDatabase,\n     db::{self, SyntaxDatabase},\n-    descriptors::DescriptorDatabase,\n     descriptors::function::FnScopes,\n-    descriptors::module::{ModuleTree, ModuleId, ModuleScope},\n+    descriptors::module::{ModuleId, ModuleScope, ModuleTree},\n+    descriptors::DescriptorDatabase,\n+    input::FilesDatabase,\n+    Cancelable, FileId,\n };\n \n-\n #[derive(Debug)]\n pub struct CompletionItem {\n     /// What user sees in pop-up\n@@ -27,7 +27,11 @@ pub struct CompletionItem {\n     pub snippet: Option<String>,\n }\n \n-pub(crate) fn resolve_based_completion(db: &db::RootDatabase, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n+pub(crate) fn resolve_based_completion(\n+    db: &db::RootDatabase,\n+    file_id: FileId,\n+    offset: TextUnit,\n+) -> Cancelable<Option<Vec<CompletionItem>>> {\n     let source_root_id = db.file_source_root(file_id);\n     let file = db.file_syntax(file_id);\n     let module_tree = db.module_tree(source_root_id)?;\n@@ -56,9 +60,12 @@ pub(crate) fn resolve_based_completion(db: &db::RootDatabase, file_id: FileId, o\n     Ok(Some(res))\n }\n \n-\n-\n-pub(crate) fn find_target_module(module_tree: &ModuleTree, module_id: ModuleId, file: &File, offset: TextUnit) -> Option<ModuleId> {\n+pub(crate) fn find_target_module(\n+    module_tree: &ModuleTree,\n+    module_id: ModuleId,\n+    file: &File,\n+    offset: TextUnit,\n+) -> Option<ModuleId> {\n     let name_ref: ast::NameRef = find_node_at_offset(file.syntax(), offset)?;\n     let mut crate_path = crate_path(name_ref)?;\n \n@@ -71,25 +78,25 @@ pub(crate) fn find_target_module(module_tree: &ModuleTree, module_id: ModuleId,\n }\n \n fn crate_path(name_ref: ast::NameRef) -> Option<Vec<ast::NameRef>> {\n-    let mut path = name_ref.syntax()\n-        .parent().and_then(ast::PathSegment::cast)?\n+    let mut path = name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(ast::PathSegment::cast)?\n         .parent_path();\n     let mut res = Vec::new();\n     loop {\n         let segment = path.segment()?;\n         match segment.kind()? {\n             ast::PathSegmentKind::Name(name) => res.push(name),\n             ast::PathSegmentKind::CrateKw => break,\n-            ast::PathSegmentKind::SelfKw | ast::PathSegmentKind::SuperKw =>\n-                return None,\n+            ast::PathSegmentKind::SelfKw | ast::PathSegmentKind::SuperKw => return None,\n         }\n         path = path.qualifier()?;\n     }\n     res.reverse();\n     Some(res)\n }\n \n-\n pub(crate) fn scope_completion(\n     db: &db::RootDatabase,\n     file_id: FileId,\n@@ -158,11 +165,7 @@ fn complete_module_items(\n     );\n }\n \n-fn complete_name_ref(\n-    file: &File,\n-    name_ref: ast::NameRef,\n-    acc: &mut Vec<CompletionItem>,\n-) {\n+fn complete_name_ref(file: &File, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n     if !is_node::<ast::Path>(name_ref.syntax()) {\n         return;\n     }\n@@ -273,7 +276,11 @@ fn is_in_loop_body(name_ref: ast::NameRef) -> bool {\n             .visit::<ast::LoopExpr, _>(LoopBodyOwner::loop_body)\n             .accept(node);\n         if let Some(Some(body)) = loop_body {\n-            if name_ref.syntax().range().is_subrange(&body.syntax().range()) {\n+            if name_ref\n+                .syntax()\n+                .range()\n+                .is_subrange(&body.syntax().range())\n+            {\n                 return true;\n             }\n         }\n@@ -368,9 +375,9 @@ fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<Completi\n \n #[cfg(test)]\n mod tests {\n-    use test_utils::{assert_eq_dbg};\n+    use test_utils::assert_eq_dbg;\n \n-    use crate::mock_analysis::{single_file_with_position};\n+    use crate::mock_analysis::single_file_with_position;\n \n     use super::*;\n "}, {"sha": "9ab273ad7faee006d9bafd3816cf2b438539ae02", "filename": "crates/ra_analysis/src/db.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdb.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,21 +1,18 @@\n-use std::{\n-    sync::Arc,\n-};\n+use std::sync::Arc;\n \n use ra_editor::LineIndex;\n use ra_syntax::File;\n use salsa;\n \n use crate::{\n     db,\n-    Cancelable, Canceled,\n     descriptors::{\n-        DescriptorDatabase, SubmodulesQuery, ModuleTreeQuery, ModuleScopeQuery,\n-        FnSyntaxQuery, FnScopesQuery\n+        DescriptorDatabase, FnScopesQuery, FnSyntaxQuery, ModuleScopeQuery, ModuleTreeQuery,\n+        SubmodulesQuery,\n     },\n     symbol_index::SymbolIndex,\n-    syntax_ptr::{SyntaxPtrDatabase, ResolveSyntaxPtrQuery},\n-    FileId,\n+    syntax_ptr::{ResolveSyntaxPtrQuery, SyntaxPtrDatabase},\n+    Cancelable, Canceled, FileId,\n };\n \n #[derive(Default, Debug)]"}, {"sha": "11fffeefcfa59184844994148b38c44f03b9fabe", "filename": "crates/ra_analysis/src/descriptors/function/imp.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fimp.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,14 +1,10 @@\n use std::sync::Arc;\n \n-use ra_syntax::{\n-    ast::{AstNode, FnDef, FnDefNode},\n-};\n+use ra_syntax::ast::{AstNode, FnDef, FnDefNode};\n \n-use crate::{\n-    descriptors::{\n-        DescriptorDatabase,\n-        function::{FnId, FnScopes},\n-    },\n+use crate::descriptors::{\n+    function::{FnId, FnScopes},\n+    DescriptorDatabase,\n };\n \n /// Resolve `FnId` to the corresponding `SyntaxNode`"}, {"sha": "d5db28a64006d2b3a8ef07ee2c99d9fed7641b24", "filename": "crates/ra_analysis/src/descriptors/function/mod.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,20 +1,16 @@\n pub(super) mod imp;\n mod scope;\n \n-use std::cmp::{min, max};\n+use std::cmp::{max, min};\n \n use ra_syntax::{\n     ast::{self, AstNode, DocCommentsOwner, NameOwner},\n-    TextRange, TextUnit\n+    TextRange, TextUnit,\n };\n \n-use crate::{\n-    FileId,\n-    syntax_ptr::SyntaxPtr\n-};\n-\n-pub(crate) use self::scope::{FnScopes, resolve_local_name};\n+use crate::{syntax_ptr::SyntaxPtr, FileId};\n \n+pub(crate) use self::scope::{resolve_local_name, FnScopes};\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(crate) struct FnId(SyntaxPtr);\n@@ -26,14 +22,13 @@ impl FnId {\n     }\n }\n \n-\n #[derive(Debug, Clone)]\n pub struct FnDescriptor {\n     pub name: String,\n     pub label: String,\n     pub ret_type: Option<String>,\n     pub params: Vec<String>,\n-    pub doc: Option<String>\n+    pub doc: Option<String>,\n }\n \n impl FnDescriptor {\n@@ -57,7 +52,9 @@ impl FnDescriptor {\n         };\n \n         if let Some((comment_range, docs)) = FnDescriptor::extract_doc_comments(node) {\n-            let comment_range = comment_range.checked_sub(node.syntax().range().start()).unwrap();\n+            let comment_range = comment_range\n+                .checked_sub(node.syntax().range().start())\n+                .unwrap();\n             let start = comment_range.start().to_usize();\n             let end = comment_range.end().to_usize();\n \n@@ -94,7 +91,7 @@ impl FnDescriptor {\n             ret_type,\n             params,\n             label: label.trim().to_owned(),\n-            doc\n+            doc,\n         })\n     }\n \n@@ -105,10 +102,13 @@ impl FnDescriptor {\n \n         let comment_text = node.doc_comment_text();\n \n-        let (begin, end) = node.doc_comments()\n+        let (begin, end) = node\n+            .doc_comments()\n             .map(|comment| comment.syntax().range())\n             .map(|range| (range.start().to_usize(), range.end().to_usize()))\n-            .fold((std::usize::MAX, std::usize::MIN), |acc, range| (min(acc.0, range.0), max(acc.1, range.1)));\n+            .fold((std::usize::MAX, std::usize::MIN), |acc, range| {\n+                (min(acc.0, range.0), max(acc.1, range.1))\n+            });\n \n         let range = TextRange::from_to(TextUnit::from_usize(begin), TextUnit::from_usize(end));\n \n@@ -134,4 +134,3 @@ impl FnDescriptor {\n         res\n     }\n }\n-"}, {"sha": "62b46ffba7773824d38a3fee53861bc78af1ed01", "filename": "crates/ra_analysis/src/descriptors/function/scope.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Ffunction%2Fscope.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -51,9 +51,7 @@ impl FnScopes {\n         &self.get(scope).entries\n     }\n     pub fn scope_chain<'a>(&'a self, node: SyntaxNodeRef) -> impl Iterator<Item = ScopeId> + 'a {\n-        generate(self.scope_for(node), move |&scope| {\n-            self.get(scope).parent\n-        })\n+        generate(self.scope_for(node), move |&scope| self.get(scope).parent)\n     }\n     fn root_scope(&mut self) -> ScopeId {\n         let res = ScopeId(self.scopes.len() as u32);\n@@ -273,13 +271,12 @@ pub fn resolve_local_name<'a>(\n \n #[cfg(test)]\n mod tests {\n+    use ra_editor::find_node_at_offset;\n     use ra_syntax::File;\n     use test_utils::extract_offset;\n-    use ra_editor::{find_node_at_offset};\n \n     use super::*;\n \n-\n     fn do_check(code: &str, expected: &[&str]) {\n         let (off, code) = extract_offset(code);\n         let code = {"}, {"sha": "c2876433610d3d0472250b1632a14956552f454c", "filename": "crates/ra_analysis/src/descriptors/mod.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,24 +1,22 @@\n-pub(crate) mod module;\n pub(crate) mod function;\n+pub(crate) mod module;\n \n use std::sync::Arc;\n \n use ra_syntax::{\n-    SmolStr,\n     ast::{self, AstNode, FnDefNode},\n-    TextRange\n+    SmolStr, TextRange,\n };\n \n use crate::{\n-    FileId, Cancelable,\n     db::SyntaxDatabase,\n-    descriptors::module::{ModuleTree, ModuleId, ModuleScope},\n-    descriptors::function::{FnId, FnScopes, resolve_local_name},\n+    descriptors::function::{resolve_local_name, FnId, FnScopes},\n+    descriptors::module::{ModuleId, ModuleScope, ModuleTree},\n     input::SourceRootId,\n-    syntax_ptr::{SyntaxPtrDatabase, LocalSyntaxPtr},\n+    syntax_ptr::{LocalSyntaxPtr, SyntaxPtrDatabase},\n+    Cancelable, FileId,\n };\n \n-\n salsa::query_group! {\n     pub(crate) trait DescriptorDatabase: SyntaxDatabase + SyntaxPtrDatabase {\n         fn module_tree(source_root_id: SourceRootId) -> Cancelable<Arc<ModuleTree>> {\n@@ -49,46 +47,43 @@ salsa::query_group! {\n #[derive(Debug)]\n pub struct ReferenceDescriptor {\n     pub range: TextRange,\n-    pub name: String\n+    pub name: String,\n }\n \n #[derive(Debug)]\n pub struct DeclarationDescriptor<'a> {\n     pat: ast::BindPat<'a>,\n-    pub range: TextRange\n+    pub range: TextRange,\n }\n \n impl<'a> DeclarationDescriptor<'a> {\n     pub fn new(pat: ast::BindPat) -> DeclarationDescriptor {\n         let range = pat.syntax().range();\n \n-        DeclarationDescriptor {\n-            pat,\n-            range\n-        }\n+        DeclarationDescriptor { pat, range }\n     }\n \n     pub fn find_all_refs(&self) -> Vec<ReferenceDescriptor> {\n         let name_ptr = LocalSyntaxPtr::new(self.pat.syntax());\n \n         let fn_def = match self.pat.syntax().ancestors().find_map(ast::FnDef::cast) {\n             Some(def) => def,\n-            None => return Default::default()\n+            None => return Default::default(),\n         };\n \n         let fn_scopes = FnScopes::new(fn_def);\n \n-        let refs : Vec<_> = fn_def.syntax().descendants()\n+        let refs: Vec<_> = fn_def\n+            .syntax()\n+            .descendants()\n             .filter_map(ast::NameRef::cast)\n-            .filter(|name_ref| {\n-                match resolve_local_name(*name_ref, &fn_scopes) {\n-                    None => false,\n-                    Some(entry) => entry.ptr() == name_ptr,\n-                }\n+            .filter(|name_ref| match resolve_local_name(*name_ref, &fn_scopes) {\n+                None => false,\n+                Some(entry) => entry.ptr() == name_ptr,\n             })\n             .map(|name_ref| ReferenceDescriptor {\n                 name: name_ref.syntax().text().to_string(),\n-                range : name_ref.syntax().range(),\n+                range: name_ref.syntax().range(),\n             })\n             .collect();\n "}, {"sha": "1c102f4e5dd3179a1217648e8dc5d581fa3ddc12", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,24 +1,25 @@\n use std::sync::Arc;\n \n-use relative_path::RelativePathBuf;\n-use rustc_hash::{FxHashMap, FxHashSet};\n use ra_syntax::{\n-    SmolStr,\n     ast::{self, NameOwner},\n+    SmolStr,\n };\n+use relative_path::RelativePathBuf;\n+use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n-    FileId, Cancelable, FileResolverImp, db,\n-    input::{SourceRoot, SourceRootId},\n+    db,\n     descriptors::DescriptorDatabase,\n+    input::{SourceRoot, SourceRootId},\n+    Cancelable, FileId, FileResolverImp,\n };\n \n-use super::{\n-    ModuleData, ModuleTree, ModuleId, LinkId, LinkData, Problem, ModuleScope\n-};\n-\n+use super::{LinkData, LinkId, ModuleData, ModuleId, ModuleScope, ModuleTree, Problem};\n \n-pub(crate) fn submodules(db: &impl DescriptorDatabase, file_id: FileId) -> Cancelable<Arc<Vec<SmolStr>>> {\n+pub(crate) fn submodules(\n+    db: &impl DescriptorDatabase,\n+    file_id: FileId,\n+) -> Cancelable<Arc<Vec<SmolStr>>> {\n     db::check_canceled(db)?;\n     let file = db.file_syntax(file_id);\n     let root = file.ast();\n@@ -57,13 +58,11 @@ pub(crate) fn module_tree(\n     Ok(Arc::new(res))\n }\n \n-\n #[derive(Clone, Hash, PartialEq, Eq, Debug)]\n pub struct Submodule {\n     pub name: SmolStr,\n }\n \n-\n fn create_module_tree<'a>(\n     db: &impl DescriptorDatabase,\n     source_root: SourceRootId,\n@@ -82,7 +81,15 @@ fn create_module_tree<'a>(\n             continue; // TODO: use explicit crate_roots here\n         }\n         assert!(!roots.contains_key(&file_id));\n-        let module_id = build_subtree(db, &source_root, &mut tree, &mut visited, &mut roots, None, file_id)?;\n+        let module_id = build_subtree(\n+            db,\n+            &source_root,\n+            &mut tree,\n+            &mut visited,\n+            &mut roots,\n+            None,\n+            file_id,\n+        )?;\n         roots.insert(file_id, module_id);\n     }\n     Ok(tree)"}, {"sha": "302e3e81cf2479928183e394cfc78d2eac3a877c", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,8 +1,11 @@\n pub(super) mod imp;\n pub(crate) mod scope;\n \n+use ra_syntax::{\n+    ast::{self, AstNode, NameOwner},\n+    SmolStr, SyntaxNode,\n+};\n use relative_path::RelativePathBuf;\n-use ra_syntax::{ast::{self, NameOwner, AstNode}, SmolStr, SyntaxNode};\n \n use crate::FileId;\n \n@@ -16,9 +19,11 @@ pub(crate) struct ModuleTree {\n \n impl ModuleTree {\n     pub(crate) fn modules_for_file(&self, file_id: FileId) -> Vec<ModuleId> {\n-        self.mods.iter()\n+        self.mods\n+            .iter()\n             .enumerate()\n-            .filter(|(_idx, it)| it.file_id == file_id).map(|(idx, _)| ModuleId(idx as u32))\n+            .filter(|(_idx, it)| it.file_id == file_id)\n+            .map(|(idx, _)| ModuleId(idx as u32))\n             .collect()\n     }\n \n@@ -50,7 +55,7 @@ impl ModuleId {\n     }\n     pub(crate) fn parent_link(self, tree: &ModuleTree) -> Option<LinkId> {\n         tree.module(self).parent\n-     }\n+    }\n     pub(crate) fn parent(self, tree: &ModuleTree) -> Option<ModuleId> {\n         let link = self.parent_link(tree)?;\n         Some(tree.link(link).owner)\n@@ -69,18 +74,15 @@ impl ModuleId {\n         curr\n     }\n     pub(crate) fn child(self, tree: &ModuleTree, name: &str) -> Option<ModuleId> {\n-        let link = tree.module(self)\n+        let link = tree\n+            .module(self)\n             .children\n             .iter()\n             .map(|&it| tree.link(it))\n             .find(|it| it.name == name)?;\n         Some(*link.points_to.first()?)\n     }\n-    pub(crate) fn problems(\n-        self,\n-        tree: &ModuleTree,\n-        root: ast::Root,\n-    ) -> Vec<(SyntaxNode, Problem)> {\n+    pub(crate) fn problems(self, tree: &ModuleTree, root: ast::Root) -> Vec<(SyntaxNode, Problem)> {\n         tree.module(self)\n             .children\n             .iter()\n@@ -98,11 +100,7 @@ impl LinkId {\n     pub(crate) fn owner(self, tree: &ModuleTree) -> ModuleId {\n         tree.link(self).owner\n     }\n-    pub(crate) fn bind_source<'a>(\n-        self,\n-        tree: &ModuleTree,\n-        root: ast::Root<'a>,\n-    ) -> ast::Module<'a> {\n+    pub(crate) fn bind_source<'a>(self, tree: &ModuleTree, root: ast::Root<'a>) -> ast::Module<'a> {\n         imp::modules(root)\n             .find(|(name, _)| name == &tree.link(self).name)\n             .unwrap()\n@@ -125,7 +123,6 @@ struct LinkData {\n     problem: Option<Problem>,\n }\n \n-\n impl ModuleTree {\n     fn module(&self, id: ModuleId) -> &ModuleData {\n         &self.mods[id.0 as usize]\n@@ -152,4 +149,3 @@ impl ModuleTree {\n         id\n     }\n }\n-"}, {"sha": "681e272c25733a6832b96493a4ee747fa8d78016", "filename": "crates/ra_analysis/src/descriptors/module/scope.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fscope.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,9 +1,8 @@\n //! Backend for module-level scope resolution & completion\n \n-\n use ra_syntax::{\n     ast::{self, ModuleItemOwner},\n-    File, AstNode, SmolStr,\n+    AstNode, File, SmolStr,\n };\n \n use crate::syntax_ptr::LocalSyntaxPtr;\n@@ -103,7 +102,7 @@ fn collect_imports(tree: ast::UseTree, acc: &mut Vec<Entry>) {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use ra_syntax::{File};\n+    use ra_syntax::File;\n \n     fn do_check(code: &str, expected: &[&str]) {\n         let file = File::parse(&code);"}, {"sha": "44077b50797a12a9f39cbaa794c08b6c1631981c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 42, "deletions": 35, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -13,24 +13,21 @@ use ra_syntax::{\n use rayon::prelude::*;\n use relative_path::RelativePath;\n use rustc_hash::FxHashSet;\n-use salsa::{ParallelDatabase, Database};\n+use salsa::{Database, ParallelDatabase};\n \n use crate::{\n-    AnalysisChange,\n-    db::{\n-        self, SyntaxDatabase, FileSyntaxQuery,\n-    },\n-    input::{SourceRootId, FilesDatabase, SourceRoot, WORKSPACE},\n+    completion::{resolve_based_completion, scope_completion, CompletionItem},\n+    db::{self, FileSyntaxQuery, SyntaxDatabase},\n     descriptors::{\n-        DescriptorDatabase, DeclarationDescriptor,\n-        module::{ModuleTree, Problem},\n         function::{FnDescriptor, FnId},\n+        module::{ModuleTree, Problem},\n+        DeclarationDescriptor, DescriptorDatabase,\n     },\n-    completion::{scope_completion, resolve_based_completion, CompletionItem},\n+    input::{FilesDatabase, SourceRoot, SourceRootId, WORKSPACE},\n     symbol_index::SymbolIndex,\n     syntax_ptr::SyntaxPtrDatabase,\n-    CrateGraph, CrateId, Diagnostic, FileId, FileResolver, FileSystemEdit, Position,\n-    Query, SourceChange, SourceFileEdit, Cancelable,\n+    AnalysisChange, Cancelable, CrateGraph, CrateId, Diagnostic, FileId, FileResolver,\n+    FileSystemEdit, Position, Query, SourceChange, SourceFileEdit,\n };\n \n #[derive(Clone, Debug)]\n@@ -94,7 +91,6 @@ pub(crate) struct AnalysisHostImpl {\n     db: db::RootDatabase,\n }\n \n-\n impl AnalysisHostImpl {\n     pub fn new() -> AnalysisHostImpl {\n         let db = db::RootDatabase::default();\n@@ -108,7 +104,7 @@ impl AnalysisHostImpl {\n     }\n     pub fn analysis(&self) -> AnalysisImpl {\n         AnalysisImpl {\n-            db: self.db.fork() // freeze revision here\n+            db: self.db.fork(), // freeze revision here\n         }\n     }\n     pub fn apply_change(&mut self, change: AnalysisChange) {\n@@ -120,7 +116,8 @@ impl AnalysisHostImpl {\n                 .set(file_id, Arc::new(text))\n         }\n         if !(change.files_added.is_empty() && change.files_removed.is_empty()) {\n-            let file_resolver = change.file_resolver\n+            let file_resolver = change\n+                .file_resolver\n                 .expect(\"change resolver when changing set of files\");\n             let mut source_root = SourceRoot::clone(&self.db.source_root(WORKSPACE));\n             for (file_id, text) in change.files_added {\n@@ -174,7 +171,8 @@ impl AnalysisHostImpl {\n                 .set((), Arc::new(libraries));\n         }\n         if let Some(crate_graph) = change.crate_graph {\n-            self.db.query(crate::input::CrateGraphQuery)\n+            self.db\n+                .query(crate::input::CrateGraphQuery)\n                 .set((), Arc::new(crate_graph))\n         }\n     }\n@@ -194,18 +192,22 @@ impl AnalysisImpl {\n     }\n     pub fn world_symbols(&self, query: Query) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let buf: Vec<Arc<SymbolIndex>> = if query.libs {\n-            self.db.libraries().iter()\n+            self.db\n+                .libraries()\n+                .iter()\n                 .map(|&lib_id| self.db.library_symbols(lib_id))\n                 .collect()\n         } else {\n             let files = &self.db.source_root(WORKSPACE).files;\n             let db = self.db.clone();\n-            files.par_iter()\n+            files\n+                .par_iter()\n                 .map_with(db, |db, &file_id| db.file_symbols(file_id))\n                 .filter_map(|it| it.ok())\n                 .collect()\n         };\n-        self.db.query(FileSyntaxQuery)\n+        self.db\n+            .query(FileSyntaxQuery)\n             .sweep(salsa::SweepStrategy::default().discard_values());\n         Ok(query.search(&buf))\n     }\n@@ -216,7 +218,8 @@ impl AnalysisImpl {\n     pub fn parent_module(&self, file_id: FileId) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         let module_tree = self.module_tree(file_id)?;\n \n-        let res = module_tree.modules_for_file(file_id)\n+        let res = module_tree\n+            .modules_for_file(file_id)\n             .into_iter()\n             .filter_map(|module_id| {\n                 let link = module_id.parent_link(&module_tree)?;\n@@ -237,7 +240,8 @@ impl AnalysisImpl {\n     pub fn crate_for(&self, file_id: FileId) -> Cancelable<Vec<CrateId>> {\n         let module_tree = self.module_tree(file_id)?;\n         let crate_graph = self.db.crate_graph();\n-        let res = module_tree.modules_for_file(file_id)\n+        let res = module_tree\n+            .modules_for_file(file_id)\n             .into_iter()\n             .map(|it| it.root(&module_tree))\n             .map(|it| it.file_id(&module_tree))\n@@ -249,7 +253,11 @@ impl AnalysisImpl {\n     pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n         self.db.crate_graph().crate_roots[&crate_id]\n     }\n-    pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n+    pub fn completions(\n+        &self,\n+        file_id: FileId,\n+        offset: TextUnit,\n+    ) -> Cancelable<Option<Vec<CompletionItem>>> {\n         let mut res = Vec::new();\n         let mut has_completions = false;\n         if let Some(scope_based) = scope_completion(&self.db, file_id, offset) {\n@@ -260,11 +268,7 @@ impl AnalysisImpl {\n             res.extend(scope_based);\n             has_completions = true;\n         }\n-        let res = if has_completions {\n-            Some(res)\n-        } else {\n-            None\n-        };\n+        let res = if has_completions { Some(res) } else { None };\n         Ok(res)\n     }\n     pub fn approximately_resolve_symbol(\n@@ -326,12 +330,11 @@ impl AnalysisImpl {\n         let syntax = file.syntax();\n \n         // Find the binding associated with the offset\n-        let maybe_binding = find_node_at_offset::<ast::BindPat>(syntax, offset)\n-            .or_else(|| {\n-                let name_ref = find_node_at_offset::<ast::NameRef>(syntax, offset)?;\n-                let resolved = resolve_local_name(&self.db, file_id, name_ref)?;\n-                find_node_at_offset::<ast::BindPat>(syntax, resolved.1.end())\n-            });\n+        let maybe_binding = find_node_at_offset::<ast::BindPat>(syntax, offset).or_else(|| {\n+            let name_ref = find_node_at_offset::<ast::NameRef>(syntax, offset)?;\n+            let resolved = resolve_local_name(&self.db, file_id, name_ref)?;\n+            find_node_at_offset::<ast::BindPat>(syntax, resolved.1.end())\n+        });\n \n         let binding = match maybe_binding {\n             None => return Vec::new(),\n@@ -341,8 +344,11 @@ impl AnalysisImpl {\n         let decl = DeclarationDescriptor::new(binding);\n \n         let mut ret = vec![(file_id, decl.range)];\n-        ret.extend(decl.find_all_refs().into_iter()\n-            .map(|ref_desc| (file_id, ref_desc.range )));\n+        ret.extend(\n+            decl.find_all_refs()\n+                .into_iter()\n+                .map(|ref_desc| (file_id, ref_desc.range)),\n+        );\n \n         ret\n     }\n@@ -526,7 +532,8 @@ impl AnalysisImpl {\n             Some(id) => id,\n             None => return Vec::new(),\n         };\n-        module_id.child(module_tree, name.as_str())\n+        module_id\n+            .child(module_tree, name.as_str())\n             .map(|it| it.file_id(module_tree))\n             .into_iter()\n             .collect()"}, {"sha": "ba8a17fd5a580a7d951726784848d9af0a23191b", "filename": "crates/ra_analysis/src/input.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Finput.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,12 +1,9 @@\n-use std::{\n-    sync::Arc,\n-    fmt,\n-};\n+use std::{fmt, sync::Arc};\n \n-use salsa;\n-use rustc_hash::FxHashSet;\n use relative_path::RelativePath;\n use rustc_hash::FxHashMap;\n+use rustc_hash::FxHashSet;\n+use salsa;\n \n use crate::{symbol_index::SymbolIndex, FileResolverImp};\n "}, {"sha": "32aa7a1fde2972ff1593896819837d8a64a35697", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -6,37 +6,33 @@ extern crate relative_path;\n extern crate rustc_hash;\n extern crate salsa;\n \n-mod input;\n+mod completion;\n mod db;\n mod descriptors;\n mod imp;\n+mod input;\n+pub mod mock_analysis;\n mod symbol_index;\n-mod completion;\n mod syntax_ptr;\n-pub mod mock_analysis;\n \n-use std::{\n-    fmt,\n-    sync::Arc,\n-};\n+use std::{fmt, sync::Arc};\n \n use ra_syntax::{AtomEdit, File, TextRange, TextUnit};\n-use relative_path::RelativePathBuf;\n use rayon::prelude::*;\n+use relative_path::RelativePathBuf;\n \n use crate::{\n     imp::{AnalysisHostImpl, AnalysisImpl, FileResolverImp},\n     symbol_index::SymbolIndex,\n };\n \n pub use crate::{\n-    descriptors::function::FnDescriptor,\n     completion::CompletionItem,\n-    input::{FileId, FileResolver, CrateGraph, CrateId},\n+    descriptors::function::FnDescriptor,\n+    input::{CrateGraph, CrateId, FileId, FileResolver},\n };\n pub use ra_editor::{\n-    FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable,\n-    RunnableKind, StructureNode,\n+    FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable, RunnableKind, StructureNode,\n };\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]\n@@ -50,8 +46,7 @@ impl std::fmt::Display for Canceled {\n     }\n }\n \n-impl std::error::Error for Canceled {\n-}\n+impl std::error::Error for Canceled {}\n \n #[derive(Default)]\n pub struct AnalysisChange {\n@@ -76,7 +71,6 @@ impl fmt::Debug for AnalysisChange {\n     }\n }\n \n-\n impl AnalysisChange {\n     pub fn new() -> AnalysisChange {\n         AnalysisChange::default()\n@@ -251,12 +245,15 @@ impl Analysis {\n     pub fn approximately_resolve_symbol(\n         &self,\n         file_id: FileId,\n-        offset: TextUnit\n+        offset: TextUnit,\n     ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n-        self.imp\n-            .approximately_resolve_symbol(file_id, offset)\n+        self.imp.approximately_resolve_symbol(file_id, offset)\n     }\n-    pub fn find_all_refs(&self, file_id: FileId, offset: TextUnit, ) -> Cancelable<Vec<(FileId, TextRange)>> {\n+    pub fn find_all_refs(\n+        &self,\n+        file_id: FileId,\n+        offset: TextUnit,\n+    ) -> Cancelable<Vec<(FileId, TextRange)>> {\n         Ok(self.imp.find_all_refs(file_id, offset))\n     }\n     pub fn parent_module(&self, file_id: FileId) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n@@ -276,7 +273,11 @@ impl Analysis {\n         let file = self.imp.file_syntax(file_id);\n         Ok(ra_editor::highlight(&file))\n     }\n-    pub fn completions(&self, file_id: FileId, offset: TextUnit) -> Cancelable<Option<Vec<CompletionItem>>> {\n+    pub fn completions(\n+        &self,\n+        file_id: FileId,\n+        offset: TextUnit,\n+    ) -> Cancelable<Option<Vec<CompletionItem>>> {\n         self.imp.completions(file_id, offset)\n     }\n     pub fn assists(&self, file_id: FileId, range: TextRange) -> Cancelable<Vec<SourceChange>> {\n@@ -307,7 +308,11 @@ impl LibraryData {\n             let file = File::parse(text);\n             (*file_id, file)\n         }));\n-        LibraryData { files, file_resolver: FileResolverImp::new(file_resolver), symbol_index }\n+        LibraryData {\n+            files,\n+            file_resolver: FileResolverImp::new(file_resolver),\n+            symbol_index,\n+        }\n     }\n }\n "}, {"sha": "76100f5484e4d71f98b704000738154c22074eb5", "filename": "crates/ra_analysis/src/mock_analysis.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,13 +1,10 @@\n-\n use std::sync::Arc;\n \n-use relative_path::{RelativePath, RelativePathBuf};\n use ra_syntax::TextUnit;\n+use relative_path::{RelativePath, RelativePathBuf};\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n-use crate::{\n-    AnalysisChange, Analysis, AnalysisHost, FileId, FileResolver,\n-};\n+use crate::{Analysis, AnalysisChange, AnalysisHost, FileId, FileResolver};\n \n #[derive(Debug)]\n pub struct FilePosition {\n@@ -51,7 +48,10 @@ impl MockAnalysis {\n         let mut res = MockAnalysis::new();\n         for entry in parse_fixture(fixture) {\n             if entry.text.contains(CURSOR_MARKER) {\n-                assert!(position.is_none(), \"only one marker (<|>) per fixture is allowed\");\n+                assert!(\n+                    position.is_none(),\n+                    \"only one marker (<|>) per fixture is allowed\"\n+                );\n                 position = Some(res.add_file_with_position(&entry.meta, &entry.text));\n             } else {\n                 res.add_file(&entry.meta, &entry.text);\n@@ -73,7 +73,10 @@ impl MockAnalysis {\n         FilePosition { file_id, offset }\n     }\n     pub fn id_of(&self, path: &str) -> FileId {\n-        let (idx, _) = self.files.iter().enumerate()\n+        let (idx, _) = self\n+            .files\n+            .iter()\n+            .enumerate()\n             .find(|(_, (p, _text))| path == p)\n             .expect(\"no file in this mock\");\n         FileId(idx as u32 + 1)"}, {"sha": "b57ad5d33137434b78ab2a1a6fef2a00d89e5cbb", "filename": "crates/ra_analysis/src/symbol_index.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsymbol_index.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -57,10 +57,7 @@ impl SymbolIndex {\n }\n \n impl Query {\n-    pub(crate) fn search(\n-        self,\n-        indices: &[Arc<SymbolIndex>],\n-    ) -> Vec<(FileId, FileSymbol)> {\n+    pub(crate) fn search(self, indices: &[Arc<SymbolIndex>]) -> Vec<(FileId, FileSymbol)> {\n         let mut op = fst::map::OpBuilder::new();\n         for file_symbols in indices.iter() {\n             let automaton = fst::automaton::Subsequence::new(&self.lowercased);"}, {"sha": "612f75cd9b5173d6a557399a2a2c3f1b80713b5e", "filename": "crates/ra_analysis/src/syntax_ptr.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_ptr.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,12 +1,12 @@\n use std::marker::PhantomData;\n \n use ra_syntax::{\n-    File, TextRange, SyntaxKind, SyntaxNode, SyntaxNodeRef,\n     ast::{self, AstNode},\n+    File, SyntaxKind, SyntaxNode, SyntaxNodeRef, TextRange,\n };\n \n-use crate::FileId;\n use crate::db::SyntaxDatabase;\n+use crate::FileId;\n \n salsa::query_group! {\n     pub(crate) trait SyntaxPtrDatabase: SyntaxDatabase {\n@@ -52,12 +52,10 @@ trait ToAst {\n impl<'a> ToAst for &'a OwnedAst<ast::FnDef<'static>> {\n     type Ast = ast::FnDef<'a>;\n     fn to_ast(self) -> ast::FnDef<'a> {\n-        ast::FnDef::cast(self.syntax.borrowed())\n-            .unwrap()\n+        ast::FnDef::cast(self.syntax.borrowed()).unwrap()\n     }\n }\n \n-\n /// A pionter to a syntax node inside a file.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub(crate) struct LocalSyntaxPtr {\n@@ -79,22 +77,29 @@ impl LocalSyntaxPtr {\n             if curr.range() == self.range && curr.kind() == self.kind {\n                 return curr.owned();\n             }\n-            curr = curr.children()\n+            curr = curr\n+                .children()\n                 .find(|it| self.range.is_subrange(&it.range()))\n                 .unwrap_or_else(|| panic!(\"can't resolve local ptr to SyntaxNode: {:?}\", self))\n         }\n     }\n \n     pub(crate) fn into_global(self, file_id: FileId) -> SyntaxPtr {\n-        SyntaxPtr { file_id, local: self}\n+        SyntaxPtr {\n+            file_id,\n+            local: self,\n+        }\n     }\n }\n \n-\n #[test]\n fn test_local_syntax_ptr() {\n     let file = File::parse(\"struct Foo { f: u32, }\");\n-    let field = file.syntax().descendants().find_map(ast::NamedFieldDef::cast).unwrap();\n+    let field = file\n+        .syntax()\n+        .descendants()\n+        .find_map(ast::NamedFieldDef::cast)\n+        .unwrap();\n     let ptr = LocalSyntaxPtr::new(field.syntax());\n     let field_syntax = ptr.resolve(&file);\n     assert_eq!(field.syntax(), field_syntax);"}, {"sha": "c2754c8e48411a992332eec601a3a10ed13f8207", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 73, "deletions": 32, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -5,42 +5,53 @@ extern crate relative_path;\n extern crate rustc_hash;\n extern crate test_utils;\n \n-use ra_syntax::{TextRange};\n-use test_utils::{assert_eq_dbg};\n+use ra_syntax::TextRange;\n+use test_utils::assert_eq_dbg;\n \n use ra_analysis::{\n+    mock_analysis::{analysis_and_position, single_file, single_file_with_position, MockAnalysis},\n     AnalysisChange, CrateGraph, FileId, FnDescriptor,\n-    mock_analysis::{MockAnalysis, single_file, single_file_with_position, analysis_and_position},\n };\n \n fn get_signature(text: &str) -> (FnDescriptor, Option<usize>) {\n     let (analysis, position) = single_file_with_position(text);\n-    analysis.resolve_callable(position.file_id, position.offset).unwrap().unwrap()\n+    analysis\n+        .resolve_callable(position.file_id, position.offset)\n+        .unwrap()\n+        .unwrap()\n }\n \n #[test]\n fn test_resolve_module() {\n-    let (analysis, pos) = analysis_and_position(\"\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n         //- /lib.rs\n         mod <|>foo;\n         //- /foo.rs\n         // empty\n-    \");\n+    \",\n+    );\n \n-    let symbols = analysis.approximately_resolve_symbol(pos.file_id, pos.offset).unwrap();\n+    let symbols = analysis\n+        .approximately_resolve_symbol(pos.file_id, pos.offset)\n+        .unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n     );\n \n-    let (analysis, pos) = analysis_and_position(\"\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n         //- /lib.rs\n         mod <|>foo;\n         //- /foo/mod.rs\n         // empty\n-    \");\n+    \",\n+    );\n \n-    let symbols = analysis.approximately_resolve_symbol(pos.file_id, pos.offset).unwrap();\n+    let symbols = analysis\n+        .approximately_resolve_symbol(pos.file_id, pos.offset)\n+        .unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n         &symbols,\n@@ -73,12 +84,14 @@ fn test_unresolved_module_diagnostic_no_diag_for_inline_mode() {\n \n #[test]\n fn test_resolve_parent_module() {\n-    let (analysis, pos) = analysis_and_position(\"\n+    let (analysis, pos) = analysis_and_position(\n+        \"\n         //- /lib.rs\n         mod foo;\n         //- /foo.rs\n         <|>// empty\n-    \");\n+    \",\n+    );\n     let symbols = analysis.parent_module(pos.file_id).unwrap();\n     assert_eq_dbg(\n         r#\"[(FileId(1), FileSymbol { name: \"foo\", node_range: [0; 8), kind: MODULE })]\"#,\n@@ -88,12 +101,14 @@ fn test_resolve_parent_module() {\n \n #[test]\n fn test_resolve_crate_root() {\n-    let mock = MockAnalysis::with_files(\"\n+    let mock = MockAnalysis::with_files(\n+        \"\n         //- /lib.rs\n         mod foo;\n         //- /foo.rs\n         // emtpy <|>\n-    \");\n+    \",\n+    );\n     let root_file = mock.id_of(\"/lib.rs\");\n     let mod_file = mock.id_of(\"/foo.rs\");\n     let mut host = mock.analysis_host();\n@@ -245,16 +260,21 @@ pub fn do() {\n     assert_eq!(desc.ret_type, Some(\"-> i32\".to_string()));\n     assert_eq!(param, Some(0));\n     assert_eq!(desc.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n-    assert_eq!(desc.doc, Some(\n-r#\"Adds one to the number given.\n+    assert_eq!(\n+        desc.doc,\n+        Some(\n+            r#\"Adds one to the number given.\n \n # Examples\n \n ```rust\n let five = 5;\n \n assert_eq!(6, my_crate::add_one(5));\n-```\"#.into()));\n+```\"#\n+                .into()\n+        )\n+    );\n }\n \n #[test]\n@@ -280,23 +300,29 @@ impl addr {\n pub fn do_it() {\n     addr {};\n     addr::add_one(<|>);\n-}\"#);\n+}\"#,\n+    );\n \n     assert_eq!(desc.name, \"add_one\".to_string());\n     assert_eq!(desc.params, vec![\"x\".to_string()]);\n     assert_eq!(desc.ret_type, Some(\"-> i32\".to_string()));\n     assert_eq!(param, Some(0));\n     assert_eq!(desc.label, \"pub fn add_one(x: i32) -> i32\".to_string());\n-    assert_eq!(desc.doc, Some(\n-r#\"Adds one to the number given.\n+    assert_eq!(\n+        desc.doc,\n+        Some(\n+            r#\"Adds one to the number given.\n \n # Examples\n \n ```rust\n let five = 5;\n \n assert_eq!(6, my_crate::add_one(5));\n-```\"#.into()));\n+```\"#\n+                .into()\n+        )\n+    );\n }\n \n #[test]\n@@ -329,22 +355,32 @@ pub fn foo() {\n     r.finished(<|>);\n }\n \n-\"#);\n+\"#,\n+    );\n \n     assert_eq!(desc.name, \"finished\".to_string());\n-    assert_eq!(desc.params, vec![\"&mut self\".to_string(), \"ctx\".to_string()]);\n+    assert_eq!(\n+        desc.params,\n+        vec![\"&mut self\".to_string(), \"ctx\".to_string()]\n+    );\n     assert_eq!(desc.ret_type, None);\n     assert_eq!(param, Some(1));\n-    assert_eq!(desc.doc, Some(\n-r#\"Method is called when writer finishes.\n-\n-By default this method stops actor's `Context`.\"#.into()));\n+    assert_eq!(\n+        desc.doc,\n+        Some(\n+            r#\"Method is called when writer finishes.\n+\n+By default this method stops actor's `Context`.\"#\n+                .into()\n+        )\n+    );\n }\n \n-\n fn get_all_refs(text: &str) -> Vec<(FileId, TextRange)> {\n     let (analysis, position) = single_file_with_position(text);\n-    analysis.find_all_refs(position.file_id, position.offset).unwrap()\n+    analysis\n+        .find_all_refs(position.file_id, position.offset)\n+        .unwrap()\n }\n \n #[test]\n@@ -390,14 +426,19 @@ fn test_find_all_refs_for_fn_param() {\n \n #[test]\n fn test_complete_crate_path() {\n-    let (analysis, position) = analysis_and_position(\"\n+    let (analysis, position) = analysis_and_position(\n+        \"\n         //- /lib.rs\n         mod foo;\n         struct Spam;\n         //- /foo.rs\n         use crate::Sp<|>\n-    \");\n-    let completions = analysis.completions(position.file_id, position.offset).unwrap().unwrap();\n+    \",\n+    );\n+    let completions = analysis\n+        .completions(position.file_id, position.offset)\n+        .unwrap()\n+        .unwrap();\n     assert_eq_dbg(\n         r#\"[CompletionItem { label: \"foo\", lookup: None, snippet: None },\n             CompletionItem { label: \"Spam\", lookup: None, snippet: None }]\"#,"}, {"sha": "0803c88913698c936053fc928f2d038dec962a2c", "filename": "crates/ra_editor/src/folding_ranges.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ffolding_ranges.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -174,8 +174,16 @@ mod tests {\n         let file = File::parse(&text);\n         let folds = folding_ranges(&file);\n \n-        assert_eq!(folds.len(), ranges.len(), \"The amount of folds is different than the expected amount\");\n-        assert_eq!(folds.len(), fold_kinds.len(), \"The amount of fold kinds is different than the expected amount\");\n+        assert_eq!(\n+            folds.len(),\n+            ranges.len(),\n+            \"The amount of folds is different than the expected amount\"\n+        );\n+        assert_eq!(\n+            folds.len(),\n+            fold_kinds.len(),\n+            \"The amount of fold kinds is different than the expected amount\"\n+        );\n         for ((fold, range), fold_kind) in folds\n             .into_iter()\n             .zip(ranges.into_iter())"}, {"sha": "481f4c9fcbf837154bee0a71b6e561b920c5a48f", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -148,8 +148,6 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n     leaf.ancestors().filter_map(N::cast).next()\n }\n \n-\n-\n #[cfg(test)]\n mod tests {\n     use super::*;"}, {"sha": "4e602d0e318efad2c741ceb4f9e297753aa0097a", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,12 +1,9 @@\n use crate::TextRange;\n \n use ra_syntax::{\n-    algo::{\n-        visit::{visitor, Visitor},\n-    },\n+    algo::visit::{visitor, Visitor},\n     ast::{self, NameOwner},\n-    AstNode, File, SmolStr, SyntaxKind, SyntaxNodeRef,\n-    WalkEvent,\n+    AstNode, File, SmolStr, SyntaxKind, SyntaxNodeRef, WalkEvent,\n };\n \n #[derive(Debug, Clone)]\n@@ -54,7 +51,6 @@ pub fn file_structure(file: &File) -> Vec<StructureNode> {\n     let mut res = Vec::new();\n     let mut stack = Vec::new();\n \n-\n     for event in file.syntax().preorder() {\n         match event {\n             WalkEvent::Enter(node) => {\n@@ -63,7 +59,7 @@ pub fn file_structure(file: &File) -> Vec<StructureNode> {\n                     stack.push(res.len());\n                     res.push(symbol);\n                 }\n-            },\n+            }\n             WalkEvent::Leave(node) => {\n                 if structure_node(node).is_some() {\n                     stack.pop().unwrap();"}, {"sha": "ac6aacfd3c86a1ef2d642c28a870e79c0159f377", "filename": "crates/ra_lsp_server/src/caps.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcaps.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,8 +1,8 @@\n use languageserver_types::{\n     CodeActionProviderCapability, CompletionOptions, DocumentOnTypeFormattingOptions,\n-    ExecuteCommandOptions, FoldingRangeProviderCapability, ServerCapabilities,\n-    SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n-    TextDocumentSyncOptions, RenameProviderCapability, RenameOptions\n+    ExecuteCommandOptions, FoldingRangeProviderCapability, RenameOptions, RenameProviderCapability,\n+    ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability, TextDocumentSyncKind,\n+    TextDocumentSyncOptions,\n };\n \n pub fn server_capabilities() -> ServerCapabilities {\n@@ -40,8 +40,8 @@ pub fn server_capabilities() -> ServerCapabilities {\n             more_trigger_character: None,\n         }),\n         folding_range_provider: Some(FoldingRangeProviderCapability::Simple(true)),\n-        rename_provider: Some(RenameProviderCapability::Options(RenameOptions{\n-            prepare_provider: Some(true)\n+        rename_provider: Some(RenameProviderCapability::Options(RenameOptions {\n+            prepare_provider: Some(true),\n         })),\n         color_provider: None,\n         execute_command_provider: Some(ExecuteCommandOptions {"}, {"sha": "84ffac2daa14f5ea0043e87d04a0c3656c8a58ea", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -192,7 +192,8 @@ impl TryConvWith for SourceChange {\n                     .map(|it| it.edits.as_slice())\n                     .unwrap_or(&[]);\n                 let line_col = translate_offset_with_edit(&*line_index, pos.offset, edits);\n-                let position = Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)));\n+                let position =\n+                    Position::new(u64::from(line_col.line), u64::from(u32::from(line_col.col)));\n                 Some(TextDocumentPositionParams {\n                     text_document: TextDocumentIdentifier::new(pos.file_id.try_conv_with(world)?),\n                     position,"}, {"sha": "f9481e04d2030ccff4b028e5cf25e8948d012c3b", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -36,4 +36,4 @@ pub mod thread_watcher;\n mod vfs;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n-pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError};\n\\ No newline at end of file\n+pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError};"}, {"sha": "c853ff65309ca3e5b462f02f24b5fc0d5115e0f0", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,29 +1,27 @@\n use std::collections::HashMap;\n \n-use rustc_hash::FxHashMap;\n+use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n     CodeActionResponse, Command, CompletionItem, CompletionItemKind, Diagnostic,\n-    DiagnosticSeverity, DocumentSymbol, FoldingRange, FoldingRangeKind, FoldingRangeParams,\n-    InsertTextFormat, Location, Position, SymbolInformation, TextDocumentIdentifier, TextEdit,\n-    RenameParams, WorkspaceEdit, PrepareRenameResponse, Documentation, MarkupContent, MarkupKind\n+    DiagnosticSeverity, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n+    FoldingRangeParams, InsertTextFormat, Location, MarkupContent, MarkupKind, Position,\n+    PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n+    WorkspaceEdit,\n };\n-use gen_lsp_server::ErrorCode;\n use ra_analysis::{FileId, FoldKind, Query, RunnableKind};\n use ra_syntax::text_utils::contains_offset_nonstrict;\n+use rustc_hash::FxHashMap;\n use serde_json::to_value;\n \n use crate::{\n     conv::{to_location, Conv, ConvWith, MapConvWith, TryConvWith},\n     project_model::TargetKind,\n     req::{self, Decoration},\n     server_world::ServerWorld,\n-    Result, LspError\n+    LspError, Result,\n };\n \n-pub fn handle_syntax_tree(\n-    world: ServerWorld,\n-    params: req::SyntaxTreeParams,\n-) -> Result<String> {\n+pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n     let res = world.analysis().syntax_tree(id);\n     Ok(res)\n@@ -182,10 +180,7 @@ pub fn handle_workspace_symbol(\n \n     return Ok(Some(res));\n \n-    fn exec_query(\n-        world: &ServerWorld,\n-        query: Query,\n-    ) -> Result<Vec<SymbolInformation>> {\n+    fn exec_query(world: &ServerWorld, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n         for (file_id, symbol) in world.analysis().symbol_search(query)? {\n             let line_index = world.analysis().file_line_index(file_id);\n@@ -290,7 +285,11 @@ pub fn handle_runnables(\n     });\n     return Ok(res);\n \n-    fn runnable_args(world: &ServerWorld, file_id: FileId, kind: &RunnableKind) -> Result<Vec<String>> {\n+    fn runnable_args(\n+        world: &ServerWorld,\n+        file_id: FileId,\n+        kind: &RunnableKind,\n+    ) -> Result<Vec<String>> {\n         let spec = CargoTargetSpec::for_file(world, file_id)?;\n         let mut res = Vec::new();\n         match kind {\n@@ -327,18 +326,15 @@ pub fn handle_runnables(\n             };\n             let file_id = world.analysis().crate_root(crate_id)?;\n             let path = world.path_map.get_path(file_id);\n-            let res = world\n-                .workspaces\n-                .iter()\n-                .find_map(|ws| {\n-                    let tgt = ws.target_by_root(path)?;\n-                    let res = CargoTargetSpec {\n-                        package: tgt.package(ws).name(ws).to_string(),\n-                        target: tgt.name(ws).to_string(),\n-                        target_kind: tgt.kind(ws),\n-                    };\n-                    Some(res)\n-                });\n+            let res = world.workspaces.iter().find_map(|ws| {\n+                let tgt = ws.target_by_root(path)?;\n+                let res = CargoTargetSpec {\n+                    package: tgt.package(ws).name(ws).to_string(),\n+                    target: tgt.name(ws).to_string(),\n+                    target_kind: tgt.kind(ws),\n+                };\n+                Some(res)\n+            });\n             Ok(res)\n         }\n \n@@ -367,7 +363,6 @@ pub fn handle_runnables(\n                 }\n                 TargetKind::Other => (),\n             }\n-\n         }\n     }\n }\n@@ -453,9 +448,7 @@ pub fn handle_signature_help(\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.conv_with(&line_index);\n \n-    if let Some((descriptor, active_param)) =\n-        world.analysis().resolve_callable(file_id, offset)?\n-    {\n+    if let Some((descriptor, active_param)) = world.analysis().resolve_callable(file_id, offset)? {\n         let parameters: Vec<ParameterInformation> = descriptor\n             .params\n             .iter()\n@@ -468,7 +461,7 @@ pub fn handle_signature_help(\n         let documentation = if let Some(doc) = descriptor.doc {\n             Some(Documentation::MarkupContent(MarkupContent {\n                 kind: MarkupKind::Markdown,\n-                value: doc\n+                value: doc,\n             }))\n         } else {\n             None\n@@ -511,16 +504,17 @@ pub fn handle_prepare_rename(\n     Ok(Some(PrepareRenameResponse::Range(loc.range)))\n }\n \n-pub fn handle_rename(\n-    world: ServerWorld,\n-    params: RenameParams,\n-) -> Result<Option<WorkspaceEdit>> {\n+pub fn handle_rename(world: ServerWorld, params: RenameParams) -> Result<Option<WorkspaceEdit>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.conv_with(&line_index);\n \n     if params.new_name.is_empty() {\n-        return Err(LspError::new(ErrorCode::InvalidParams as i32, \"New Name cannot be empty\".into()).into());\n+        return Err(LspError::new(\n+            ErrorCode::InvalidParams as i32,\n+            \"New Name cannot be empty\".into(),\n+        )\n+        .into());\n     }\n \n     let refs = world.analysis().find_all_refs(file_id, offset)?;\n@@ -531,19 +525,18 @@ pub fn handle_rename(\n     let mut changes = HashMap::new();\n     for r in refs {\n         if let Ok(loc) = to_location(r.0, r.1, &world, &line_index) {\n-            changes.entry(loc.uri).or_insert(Vec::new()).push(\n-                TextEdit {\n-                    range: loc.range,\n-                    new_text: params.new_name.clone()\n-                });\n+            changes.entry(loc.uri).or_insert(Vec::new()).push(TextEdit {\n+                range: loc.range,\n+                new_text: params.new_name.clone(),\n+            });\n         }\n     }\n \n     Ok(Some(WorkspaceEdit {\n         changes: Some(changes),\n \n         // TODO: return this instead if client/server support it. See #144\n-        document_changes : None,\n+        document_changes: None,\n     }))\n }\n \n@@ -557,9 +550,11 @@ pub fn handle_references(\n \n     let refs = world.analysis().find_all_refs(file_id, offset)?;\n \n-    Ok(Some(refs.into_iter()\n-        .filter_map(|r| to_location(r.0, r.1, &world, &line_index).ok())\n-        .collect()))\n+    Ok(Some(\n+        refs.into_iter()\n+            .filter_map(|r| to_location(r.0, r.1, &world, &line_index).ok())\n+            .collect(),\n+    ))\n }\n \n pub fn handle_code_action("}, {"sha": "c568706bdcc72118158e62d32be84ac3e261fd09", "filename": "crates/ra_lsp_server/src/main_loop/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -24,15 +24,18 @@ use crate::{\n };\n \n #[derive(Debug, Fail)]\n-#[fail(display = \"Language Server request failed with {}. ({})\", code, message)]\n+#[fail(\n+    display = \"Language Server request failed with {}. ({})\",\n+    code, message\n+)]\n pub struct LspError {\n     pub code: i32,\n     pub message: String,\n }\n \n impl LspError {\n     pub fn new(code: i32, message: String) -> LspError {\n-        LspError {code, message}\n+        LspError { code, message }\n     }\n }\n \n@@ -214,11 +217,7 @@ fn main_loop_inner(\n     }\n }\n \n-fn on_task(\n-    task: Task,\n-    msg_sender: &Sender<RawMessage>,\n-    pending_requests: &mut FxHashSet<u64>,\n-) {\n+fn on_task(task: Task, msg_sender: &Sender<RawMessage>, pending_requests: &mut FxHashSet<u64>) {\n     match task {\n         Task::Respond(response) => {\n             if pending_requests.remove(&response.id) {\n@@ -373,12 +372,16 @@ impl<'a> PoolDispatcher<'a> {\n                 self.pool.spawn(move || {\n                     let resp = match f(world, params) {\n                         Ok(resp) => RawResponse::ok::<R>(id, &resp),\n-                        Err(e) => {\n-                            match e.downcast::<LspError>() {\n-                                Ok(lsp_error) => RawResponse::err(id, lsp_error.code, lsp_error.message),\n-                                Err(e) => RawResponse::err(id, ErrorCode::InternalError as i32, format!(\"{}\\n{}\", e, e.backtrace()))\n+                        Err(e) => match e.downcast::<LspError>() {\n+                            Ok(lsp_error) => {\n+                                RawResponse::err(id, lsp_error.code, lsp_error.message)\n                             }\n-                        }\n+                            Err(e) => RawResponse::err(\n+                                id,\n+                                ErrorCode::InternalError as i32,\n+                                format!(\"{}\\n{}\", e, e.backtrace()),\n+                            ),\n+                        },\n                     };\n                     let task = Task::Respond(resp);\n                     sender.send(task);\n@@ -412,7 +415,7 @@ fn update_file_notifications_on_threadpool(\n                     if !is_canceled(&e) {\n                         error!(\"failed to compute diagnostics: {:?}\", e);\n                     }\n-                },\n+                }\n                 Ok(params) => {\n                     let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n                     sender.send(Task::Notify(not));\n@@ -423,7 +426,7 @@ fn update_file_notifications_on_threadpool(\n                     if !is_canceled(&e) {\n                         error!(\"failed to compute decorations: {:?}\", e);\n                     }\n-                },\n+                }\n                 Ok(params) => {\n                     let not = RawNotification::new::<req::PublishDecorations>(&params);\n                     sender.send(Task::Notify(not))"}, {"sha": "dd09fa10acb8efde30bce28d7984cc41e3598767", "filename": "crates/ra_lsp_server/src/path_map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fpath_map.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -33,7 +33,8 @@ impl PathMap {\n     }\n     pub fn get_or_insert(&mut self, path: PathBuf, root: Root) -> (bool, FileId) {\n         let mut inserted = false;\n-        let file_id = self.path2id\n+        let file_id = self\n+            .path2id\n             .get(path.as_path())\n             .map(|&id| id)\n             .unwrap_or_else(|| {"}, {"sha": "9d911912d9aa98f6504ce30495b06de3cd9d04cf", "filename": "crates/ra_lsp_server/src/req.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Freq.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -6,8 +6,8 @@ pub use languageserver_types::{\n     notification::*, request::*, ApplyWorkspaceEditParams, CodeActionParams, CompletionParams,\n     CompletionResponse, DocumentOnTypeFormattingParams, DocumentSymbolParams,\n     DocumentSymbolResponse, ExecuteCommandParams, Hover, InitializeResult,\n-    PublishDiagnosticsParams, SignatureHelp, TextDocumentEdit, TextDocumentPositionParams,\n-    TextEdit, WorkspaceSymbolParams, ReferenceParams,\n+    PublishDiagnosticsParams, ReferenceParams, SignatureHelp, TextDocumentEdit,\n+    TextDocumentPositionParams, TextEdit, WorkspaceSymbolParams,\n };\n \n pub enum SyntaxTree {}"}, {"sha": "3e76d2527b3b2d7a166633fb29af168a1c1b826a", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -5,7 +5,9 @@ use std::{\n };\n \n use languageserver_types::Url;\n-use ra_analysis::{Analysis, AnalysisHost, AnalysisChange, CrateGraph, FileId, FileResolver, LibraryData};\n+use ra_analysis::{\n+    Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, FileResolver, LibraryData,\n+};\n use rustc_hash::FxHashMap;\n \n use crate::{\n@@ -65,9 +67,7 @@ impl ServerWorldState {\n                         Some((file_id, text))\n                     }\n                 })\n-                .for_each(|(file_id, text)| {\n-                    change.add_file(file_id, text)\n-                });\n+                .for_each(|(file_id, text)| change.add_file(file_id, text));\n         }\n         if inserted {\n             change.set_file_resolver(Arc::new(self.path_map.clone()))"}, {"sha": "faf5a62111a833cbd986cb88849f595feab36be4", "filename": "crates/ra_syntax/src/algo/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,10 +1,7 @@\n pub mod visit;\n // pub mod walk;\n \n-use crate::{\n-    text_utils::{contains_offset_nonstrict},\n-    SyntaxNodeRef, TextRange, TextUnit,\n-};\n+use crate::{text_utils::contains_offset_nonstrict, SyntaxNodeRef, TextRange, TextUnit};\n \n pub fn find_leaf_at_offset(node: SyntaxNodeRef, offset: TextUnit) -> LeafAtOffset {\n     let range = node.range();"}, {"sha": "688ffff47d47fce7cc4a3dbd262175196d4f11b6", "filename": "crates/ra_syntax/src/ast/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmod.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -66,20 +66,25 @@ pub trait AttrsOwner<'a>: AstNode<'a> {\n }\n \n pub trait DocCommentsOwner<'a>: AstNode<'a> {\n-    fn doc_comments(self) -> AstChildren<'a, Comment<'a>> { children(self) }\n+    fn doc_comments(self) -> AstChildren<'a, Comment<'a>> {\n+        children(self)\n+    }\n \n     /// Returns the textual content of a doc comment block as a single string.\n     /// That is, strips leading `///` and joins lines\n     fn doc_comment_text(self) -> String {\n         self.doc_comments()\n             .map(|comment| {\n                 let prefix = comment.prefix();\n-                let trimmed = comment.text().as_str()\n+                let trimmed = comment\n+                    .text()\n+                    .as_str()\n                     .trim()\n                     .trim_start_matches(prefix)\n                     .trim_start();\n                 trimmed.to_owned()\n-            }).join(\"\\n\")\n+            })\n+            .join(\"\\n\")\n     }\n }\n \n@@ -250,7 +255,6 @@ impl<'a> IfExpr<'a> {\n     }\n }\n \n-\n #[derive(Debug, Clone, Copy)]\n pub enum PathSegmentKind<'a> {\n     Name(NameRef<'a>),\n@@ -261,7 +265,9 @@ pub enum PathSegmentKind<'a> {\n \n impl<'a> PathSegment<'a> {\n     pub fn parent_path(self) -> Path<'a> {\n-        self.syntax().parent().and_then(Path::cast)\n+        self.syntax()\n+            .parent()\n+            .and_then(Path::cast)\n             .expect(\"segments are always nested in paths\")\n     }\n "}, {"sha": "79394fd532fe6faa51cf8823494a66e4b966167d", "filename": "crates/ra_syntax/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -52,7 +52,9 @@ pub use crate::{\n     reparsing::AtomEdit,\n     rowan::{SmolStr, TextRange, TextUnit},\n     syntax_kinds::SyntaxKind,\n-    yellow::{Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent},\n+    yellow::{\n+        Direction, OwnedRoot, RefRoot, SyntaxError, SyntaxNode, SyntaxNodeRef, TreeRoot, WalkEvent,\n+    },\n };\n \n use crate::yellow::GreenNode;"}, {"sha": "00f00139a0d2eea63fe2b9879dace9739b1f9cd8", "filename": "crates/ra_syntax/src/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Fra_syntax%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Futils.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,6 +1,4 @@\n-use crate::{\n-    File, SyntaxKind, SyntaxNodeRef, WalkEvent\n-};\n+use crate::{File, SyntaxKind, SyntaxNodeRef, WalkEvent};\n use std::fmt::Write;\n \n /// Parse a file and create a string representation of the resulting parse tree."}, {"sha": "d9fbb9b5b53cbaf95b781e32f542fa45e676ad32", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -89,7 +89,6 @@ pub fn add_cursor(text: &str, offset: TextUnit) -> String {\n     res\n }\n \n-\n #[derive(Debug)]\n pub struct FixtureEntry {\n     pub meta: String,\n@@ -112,25 +111,29 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n     macro_rules! flush {\n         () => {\n             if let Some(meta) = meta {\n-                res.push(FixtureEntry { meta: meta.to_string(), text: buf.clone() });\n+                res.push(FixtureEntry {\n+                    meta: meta.to_string(),\n+                    text: buf.clone(),\n+                });\n                 buf.clear();\n             }\n         };\n     };\n-    let margin = fixture.lines()\n+    let margin = fixture\n+        .lines()\n         .filter(|it| it.trim_start().starts_with(\"//-\"))\n         .map(|it| it.len() - it.trim_start().len())\n-        .next().expect(\"empty fixture\");\n-    let lines = fixture.lines()\n-        .filter_map(|line| {\n-            if line.len() >= margin {\n-                assert!(line[..margin].trim().is_empty());\n-                Some(&line[margin..])\n-            } else {\n-                assert!(line.trim().is_empty());\n-                None\n-            }\n-        });\n+        .next()\n+        .expect(\"empty fixture\");\n+    let lines = fixture.lines().filter_map(|line| {\n+        if line.len() >= margin {\n+            assert!(line[..margin].trim().is_empty());\n+            Some(&line[margin..])\n+        } else {\n+            assert!(line.trim().is_empty());\n+            None\n+        }\n+    });\n \n     for line in lines {\n         if line.starts_with(\"//-\") {"}, {"sha": "3387d0620e47aa17839a00f7e98b0aa601c3a98a", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,16 +1,16 @@\n-extern crate itertools;\n extern crate failure;\n+extern crate itertools;\n extern crate teraron;\n \n use std::{\n     path::{Path, PathBuf},\n     process::Command,\n };\n \n-use itertools::Itertools;\n use failure::bail;\n+use itertools::Itertools;\n \n-pub use teraron::{Mode, Verify, Overwrite};\n+pub use teraron::{Mode, Overwrite, Verify};\n \n pub type Result<T> = ::std::result::Result<T, failure::Error>;\n \n@@ -63,16 +63,8 @@ pub fn generate(mode: Mode) -> Result<()> {\n     let grammar = project_root().join(GRAMMAR);\n     let syntax_kinds = project_root().join(SYNTAX_KINDS);\n     let ast = project_root().join(AST);\n-    teraron::generate(\n-        &syntax_kinds,\n-        &grammar,\n-        mode,\n-    )?;\n-    teraron::generate(\n-        &ast,\n-        &grammar,\n-        mode,\n-    )?;\n+    teraron::generate(&syntax_kinds, &grammar, mode)?;\n+    teraron::generate(&ast, &grammar, mode)?;\n     Ok(())\n }\n \n@@ -101,9 +93,18 @@ pub fn run(cmdline: &str, dir: &str) -> Result<()> {\n \n pub fn run_rustfmt(mode: Mode) -> Result<()> {\n     run(&format!(\"rustup install {}\", TOOLCHAIN), \".\")?;\n-    run(&format!(\"rustup component add rustfmt-preview --toolchain {}\", TOOLCHAIN), \".\")?;\n+    run(\n+        &format!(\n+            \"rustup component add rustfmt-preview --toolchain {}\",\n+            TOOLCHAIN\n+        ),\n+        \".\",\n+    )?;\n     if mode == Verify {\n-        run(&format!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN), \".\")?;\n+        run(\n+            &format!(\"rustup run {} -- cargo fmt -- --check\", TOOLCHAIN),\n+            \".\",\n+        )?;\n     } else {\n         run(&format!(\"rustup run {} -- cargo fmt\", TOOLCHAIN), \".\")?;\n     }"}, {"sha": "dc623a4640d387803ba3f068c57c88f19be21144", "filename": "crates/tools/src/main.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Fmain.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,19 +1,17 @@\n extern crate clap;\n extern crate failure;\n+extern crate teraron;\n extern crate tools;\n extern crate walkdir;\n-extern crate teraron;\n \n use clap::{App, Arg, SubCommand};\n+use failure::bail;\n use std::{\n     collections::HashMap,\n     fs,\n     path::{Path, PathBuf},\n };\n-use tools::{\n-    collect_tests, Result, Test, generate, Mode, Overwrite, Verify, run, run_rustfmt,\n-};\n-use failure::bail;\n+use tools::{collect_tests, generate, run, run_rustfmt, Mode, Overwrite, Result, Test, Verify};\n \n const GRAMMAR_DIR: &str = \"./crates/ra_syntax/src/grammar\";\n const INLINE_TESTS_DIR: &str = \"./crates/ra_syntax/tests/data/parser/inline\";"}, {"sha": "2d238d9ea5d114ba94750d36d8cbfd73c6cdf679", "filename": "crates/tools/tests/cli.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Ftests%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be50f7d5de3737464853a589673375fc0cafa97/crates%2Ftools%2Ftests%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Ftests%2Fcli.rs?ref=6be50f7d5de3737464853a589673375fc0cafa97", "patch": "@@ -1,8 +1,6 @@\n extern crate tools;\n \n-use tools::{\n-    generate, Verify, run_rustfmt,\n-};\n+use tools::{generate, run_rustfmt, Verify};\n \n #[test]\n fn verify_template_generation() {\n@@ -14,6 +12,9 @@ fn verify_template_generation() {\n #[test]\n fn check_code_formatting() {\n     if let Err(error) = run_rustfmt(Verify) {\n-        panic!(\"{}. Please format the code by running `cargo format`\", error);\n+        panic!(\n+            \"{}. Please format the code by running `cargo format`\",\n+            error\n+        );\n     }\n }"}]}