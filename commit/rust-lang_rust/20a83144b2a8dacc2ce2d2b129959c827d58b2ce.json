{"sha": "20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "node_id": "C_kwDOAAsO6NoAKDIwYTgzMTQ0YjJhOGRhY2MyY2UyZDJiMTI5OTU5YzgyN2Q1OGIyY2U", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-03T19:39:57Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-03T19:41:15Z"}, "message": "Support RTN on associated methods from supertraits", "tree": {"sha": "682dd5376ab42578af8cb381f39f1d90c3d85ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/682dd5376ab42578af8cb381f39f1d90c3d85ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "html_url": "https://github.com/rust-lang/rust/commit/20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82cd953c7c43e64dae6f705ce2f07b291f0e22e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cd953c7c43e64dae6f705ce2f07b291f0e22e3", "html_url": "https://github.com/rust-lang/rust/commit/82cd953c7c43e64dae6f705ce2f07b291f0e22e3"}], "stats": {"total": 146, "additions": 115, "deletions": 31}, "files": [{"sha": "703f168b7660d67e1bc45aadd03f90fce214d473", "filename": "compiler/rustc_hir_analysis/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fmessages.ftl?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -192,7 +192,7 @@ hir_analysis_return_type_notation_equality_bound =\n     return type notation is not allowed to use type equality\n \n hir_analysis_return_type_notation_missing_method =\n-    cannot find associated function `{$assoc_name}` in trait `{$trait_name}`\n+    cannot find associated function `{$assoc_name}` for `{$ty_name}`\n \n hir_analysis_placeholder_not_allowed_item_signatures = the placeholder `_` is not allowed within types on item signatures for {$kind}\n     .label = not allowed in type signatures"}, {"sha": "84c55f128872ee9745262f42f7e430eff48b9152", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 38, "deletions": 5, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -1118,11 +1118,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             ) {\n                 trait_ref\n             } else {\n-                return Err(tcx.sess.emit_err(crate::errors::ReturnTypeNotationMissingMethod {\n-                    span: binding.span,\n-                    trait_name: tcx.item_name(trait_ref.def_id()),\n-                    assoc_name: binding.item_name.name,\n-                }));\n+                self.one_bound_for_assoc_method(\n+                    traits::supertraits(tcx, trait_ref),\n+                    trait_ref.print_only_trait_path(),\n+                    binding.item_name,\n+                    path_span,\n+                )?\n             }\n         } else if self.trait_defines_associated_item_named(\n             trait_ref.def_id(),\n@@ -2057,6 +2058,38 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         Ok(bound)\n     }\n \n+    #[instrument(level = \"debug\", skip(self, all_candidates, ty_name), ret)]\n+    fn one_bound_for_assoc_method(\n+        &self,\n+        all_candidates: impl Iterator<Item = ty::PolyTraitRef<'tcx>>,\n+        ty_name: impl Display,\n+        assoc_name: Ident,\n+        span: Span,\n+    ) -> Result<ty::PolyTraitRef<'tcx>, ErrorGuaranteed> {\n+        let mut matching_candidates = all_candidates.filter(|r| {\n+            self.trait_defines_associated_item_named(r.def_id(), ty::AssocKind::Fn, assoc_name)\n+        });\n+\n+        let candidate = match matching_candidates.next() {\n+            Some(candidate) => candidate,\n+            None => {\n+                return Err(self.tcx().sess.emit_err(\n+                    crate::errors::ReturnTypeNotationMissingMethod {\n+                        span,\n+                        ty_name: ty_name.to_string(),\n+                        assoc_name: assoc_name.name,\n+                    },\n+                ));\n+            }\n+        };\n+\n+        if let Some(_conflicting_candidate) = matching_candidates.next() {\n+            todo!()\n+        }\n+\n+        Ok(candidate)\n+    }\n+\n     // Create a type from a path to an associated type or to an enum variant.\n     // For a path `A::B::C::D`, `qself_ty` and `qself_def` are the type and def for `A::B::C`\n     // and item_segment is the path segment for `D`. We return a type and a def for"}, {"sha": "44e4e65730ed09d747ccc5c8a8f978f47895677e", "filename": "compiler/rustc_hir_analysis/src/collect/resolve_bound_vars.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fresolve_bound_vars.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -1652,27 +1652,28 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n             if binding.gen_args.parenthesized == hir::GenericArgsParentheses::ReturnTypeNotation {\n                 let bound_vars = if let Some(type_def_id) = type_def_id\n                     && self.tcx.def_kind(type_def_id) == DefKind::Trait\n-                    // FIXME(return_type_notation): We could bound supertrait methods.\n-                    && let Some(assoc_fn) = self\n-                        .tcx\n-                        .associated_items(type_def_id)\n-                        .find_by_name_and_kind(self.tcx, binding.ident, ty::AssocKind::Fn, type_def_id)\n+                    && let Some((mut bound_vars, assoc_fn)) =\n+                        BoundVarContext::supertrait_hrtb_vars(\n+                            self.tcx,\n+                            type_def_id,\n+                            binding.ident,\n+                            ty::AssocKind::Fn,\n+                        )\n                 {\n-                    self.tcx\n-                        .generics_of(assoc_fn.def_id)\n-                        .params\n-                        .iter()\n-                        .map(|param| match param.kind {\n+                    bound_vars.extend(self.tcx.generics_of(assoc_fn.def_id).params.iter().map(\n+                        |param| match param.kind {\n                             ty::GenericParamDefKind::Lifetime => ty::BoundVariableKind::Region(\n                                 ty::BoundRegionKind::BrNamed(param.def_id, param.name),\n                             ),\n                             ty::GenericParamDefKind::Type { .. } => ty::BoundVariableKind::Ty(\n                                 ty::BoundTyKind::Param(param.def_id, param.name),\n                             ),\n                             ty::GenericParamDefKind::Const { .. } => ty::BoundVariableKind::Const,\n-                        })\n-                        .chain(self.tcx.fn_sig(assoc_fn.def_id).subst_identity().bound_vars())\n-                        .collect()\n+                        },\n+                    ));\n+                    bound_vars\n+                        .extend(self.tcx.fn_sig(assoc_fn.def_id).subst_identity().bound_vars());\n+                    bound_vars\n                 } else {\n                     self.tcx.sess.delay_span_bug(\n                         binding.ident.span,\n@@ -1689,8 +1690,13 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                     });\n                 });\n             } else if let Some(type_def_id) = type_def_id {\n-                let bound_vars =\n-                    BoundVarContext::supertrait_hrtb_vars(self.tcx, type_def_id, binding.ident);\n+                let bound_vars = BoundVarContext::supertrait_hrtb_vars(\n+                    self.tcx,\n+                    type_def_id,\n+                    binding.ident,\n+                    ty::AssocKind::Type,\n+                )\n+                .map(|(bound_vars, _)| bound_vars);\n                 self.with(scope, |this| {\n                     let scope = Scope::Supertrait {\n                         bound_vars: bound_vars.unwrap_or_default(),\n@@ -1720,11 +1726,15 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n         assoc_name: Ident,\n-    ) -> Option<Vec<ty::BoundVariableKind>> {\n+        assoc_kind: ty::AssocKind,\n+    ) -> Option<(Vec<ty::BoundVariableKind>, &'tcx ty::AssocItem)> {\n         let trait_defines_associated_type_named = |trait_def_id: DefId| {\n-            tcx.associated_items(trait_def_id)\n-                .find_by_name_and_kind(tcx, assoc_name, ty::AssocKind::Type, trait_def_id)\n-                .is_some()\n+            tcx.associated_items(trait_def_id).find_by_name_and_kind(\n+                tcx,\n+                assoc_name,\n+                assoc_kind,\n+                trait_def_id,\n+            )\n         };\n \n         use smallvec::{smallvec, SmallVec};\n@@ -1742,8 +1752,8 @@ impl<'a, 'tcx> BoundVarContext<'a, 'tcx> {\n                 _ => break None,\n             }\n \n-            if trait_defines_associated_type_named(def_id) {\n-                break Some(bound_vars.into_iter().collect());\n+            if let Some(assoc_item) = trait_defines_associated_type_named(def_id) {\n+                break Some((bound_vars.into_iter().collect(), assoc_item));\n             }\n             let predicates = tcx.super_predicates_that_define_assoc_type((def_id, assoc_name));\n             let obligations = predicates.predicates.iter().filter_map(|&(pred, _)| {"}, {"sha": "48330a94255841dfeacd0fc479f8f030440f25e2", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -512,7 +512,7 @@ pub(crate) struct ReturnTypeNotationEqualityBound {\n pub(crate) struct ReturnTypeNotationMissingMethod {\n     #[primary_span]\n     pub span: Span,\n-    pub trait_name: Symbol,\n+    pub ty_name: String,\n     pub assoc_name: Symbol,\n }\n "}, {"sha": "47972055ae9f83379d88369c4ca5f7f899a23f45", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -1570,7 +1570,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn trait_may_define_assoc_type(self, trait_def_id: DefId, assoc_name: Ident) -> bool {\n         self.super_traits_of(trait_def_id).any(|trait_did| {\n             self.associated_items(trait_did)\n-                .find_by_name_and_kind(self, assoc_name, ty::AssocKind::Type, trait_did)\n+                .find_by_name_and_kinds(\n+                    self,\n+                    assoc_name,\n+                    &[ty::AssocKind::Type, ty::AssocKind::Const, ty::AssocKind::Fn],\n+                    trait_did,\n+                )\n                 .is_some()\n         })\n     }"}, {"sha": "a52562d78f8ae6fbc75cd745f66a51c3e061fd07", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -8,6 +8,6 @@ trait Trait {\n }\n \n fn bar<T: Trait<methid(): Send>>() {}\n-//~^ ERROR cannot find associated function `methid` in trait `Trait`\n+//~^ ERROR cannot find associated function `methid` for `Trait`\n \n fn main() {}"}, {"sha": "5b1c4cb0b2c0acf9be0f66913f0a184adc1a2d97", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error: cannot find associated function `methid` in trait `Trait`\n+error: cannot find associated function `methid` for `Trait`\n   --> $DIR/missing.rs:10:17\n    |\n LL | fn bar<T: Trait<methid(): Send>>() {}"}, {"sha": "58ea3578db62eb3ade7ee4b106f2a5c5174919af", "filename": "tests/ui/async-await/return-type-notation/super-method-bound.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.rs?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -0,0 +1,25 @@\n+// edition:2021\n+// check-pass\n+\n+#![feature(async_fn_in_trait, return_type_notation)]\n+//~^ WARN the feature `return_type_notation` is incomplete\n+\n+trait Super<'a> {\n+    async fn test();\n+}\n+impl Super<'_> for () {\n+    async fn test() {}\n+}\n+\n+trait Foo: for<'a> Super<'a> {}\n+impl Foo for () {}\n+\n+fn test<T>()\n+where\n+    T: Foo<test(): Send>,\n+{\n+}\n+\n+fn main() {\n+    test::<()>();\n+}"}, {"sha": "ac0668d3c44923c2c06cc7ff79940143a03175c9", "filename": "tests/ui/async-await/return-type-notation/super-method-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20a83144b2a8dacc2ce2d2b129959c827d58b2ce/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fsuper-method-bound.stderr?ref=20a83144b2a8dacc2ce2d2b129959c827d58b2ce", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `return_type_notation` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/super-method-bound.rs:4:31\n+   |\n+LL | #![feature(async_fn_in_trait, return_type_notation)]\n+   |                               ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}]}