{"sha": "4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzc2YmEzY2VlNmU4YWFhNjU1ZjU0MWQwNGI1ODYxZDQ2NTFlMWU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-23T21:10:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-23T21:10:37Z"}, "message": "Merge #8954\n\n8954: internal: document ItemTree design r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "0f6bc9e01b63bc1a66dc1a4f0b3ff232ac7bba7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f6bc9e01b63bc1a66dc1a4f0b3ff232ac7bba7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgqsTNCRBK7hj4Ov3rIwAAadUIABYjaY5sV1BsDfdh5cpinvQ+\n0u+jlR8FcVcU2rsN5ibDpwyK9fAxdHQSoET2Uo0J+v5s7RBT9a/cmh2fUsgpml5K\nwAlh+2ThI1ghyPRTvodQcUrQani06GximCG4/KLcV6l9P2SDL3Xpahi20T2ttUL2\nYrnDjKFsMU0+ux2Jmlqbs32KuLQ/vVaQbAzIz7miHuZHxCNmJuK0bJILAjCQQAKi\nzFDRtrcQujP23+XN7Gznoe6ZfLUnpcxrr6uiHs3bvfhEx+NXZBNevjX3srGVJS0C\n1CB7S/KIurpaX2zMPN+/1j4/qosCt6gIMUQBsthmMpcc9WBPLlOO4kwWIT8qHPk=\n=2MWC\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f6bc9e01b63bc1a66dc1a4f0b3ff232ac7bba7f\nparent 951c0e95f44bf7947c2a46ef9e8ff2616823faba\nparent 693325fc39363c04d4efcf4a2e575b6ab1bac383\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1621804237 +0000\ncommitter GitHub <noreply@github.com> 1621804237 +0000\n\nMerge #8954\n\n8954: internal: document ItemTree design r=jonas-schievink a=jonas-schievink\n\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "html_url": "https://github.com/rust-lang/rust/commit/4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e376ba3cee6e8aaa655f541d04b5861d4651e1e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "951c0e95f44bf7947c2a46ef9e8ff2616823faba", "url": "https://api.github.com/repos/rust-lang/rust/commits/951c0e95f44bf7947c2a46ef9e8ff2616823faba", "html_url": "https://github.com/rust-lang/rust/commit/951c0e95f44bf7947c2a46ef9e8ff2616823faba"}, {"sha": "693325fc39363c04d4efcf4a2e575b6ab1bac383", "url": "https://api.github.com/repos/rust-lang/rust/commits/693325fc39363c04d4efcf4a2e575b6ab1bac383", "html_url": "https://github.com/rust-lang/rust/commit/693325fc39363c04d4efcf4a2e575b6ab1bac383"}], "stats": {"total": 34, "additions": 32, "deletions": 2}, "files": [{"sha": "4a5f44027edca64e51728d1ba6a2fe048b9039e4", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4e376ba3cee6e8aaa655f541d04b5861d4651e1e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e376ba3cee6e8aaa655f541d04b5861d4651e1e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=4e376ba3cee6e8aaa655f541d04b5861d4651e1e", "patch": "@@ -1,4 +1,34 @@\n //! A simplified AST that only contains items.\n+//!\n+//! This is the primary IR used throughout `hir_def`. It is the input to the name resolution\n+//! algorithm, as well as to the queries defined in `adt.rs`, `data.rs`, and most things in\n+//! `attr.rs`.\n+//!\n+//! `ItemTree`s are built per `HirFileId`, from the syntax tree of the parsed file. This means that\n+//! they are crate-independent: they don't know which `#[cfg]`s are active or which module they\n+//! belong to, since those concepts don't exist at this level (a single `ItemTree` might be part of\n+//! multiple crates, or might be included into the same crate twice via `#[path]`).\n+//!\n+//! One important purpose of this layer is to provide an \"invalidation barrier\" for incremental\n+//! computations: when typing inside an item body, the `ItemTree` of the modified file is typically\n+//! unaffected, so we don't have to recompute name resolution results or item data (see `data.rs`).\n+//!\n+//! The `ItemTree` for the currently open file can be displayed by using the VS Code command\n+//! \"Rust Analyzer: Debug ItemTree\".\n+//!\n+//! Compared to rustc's architecture, `ItemTree` has properties from both rustc's AST and HIR: many\n+//! syntax-level Rust features are already desugared to simpler forms in the `ItemTree`, but name\n+//! resolution has not yet been performed. `ItemTree`s are per-file, while rustc's AST and HIR are\n+//! per-crate, because we are interested in incrementally computing it.\n+//!\n+//! The representation of items in the `ItemTree` should generally mirror the surface syntax: it is\n+//! usually a bad idea to desugar a syntax-level construct to something that is structurally\n+//! different here. Name resolution needs to be able to process attributes and expand macros\n+//! (including attribute macros), and having a 1-to-1 mapping between syntax and the `ItemTree`\n+//! avoids introducing subtle bugs.\n+//!\n+//! In general, any item in the `ItemTree` stores its `AstId`, which allows mapping it back to its\n+//! surface syntax.\n \n mod lower;\n mod pretty;\n@@ -500,8 +530,8 @@ pub struct Import {\n     pub alias: Option<ImportAlias>,\n     pub visibility: RawVisibilityId,\n     pub is_glob: bool,\n-    /// AST ID of the `use` or `extern crate` item this import was derived from. Note that many\n-    /// `Import`s can map to the same `use` item.\n+    /// AST ID of the `use` item this import was derived from. Note that many `Import`s can map to\n+    /// the same `use` item.\n     pub ast_id: FileAstId<ast::Use>,\n     /// Index of this `Import` when the containing `Use` is visited via `ModPath::expand_use_item`.\n     ///"}]}