{"sha": "269667e152e9377dfe8894b661e110fbd773bdd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2OTY2N2UxNTJlOTM3N2RmZTg4OTRiNjYxZTExMGZiZDc3M2JkZDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T07:08:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-22T21:46:53Z"}, "message": "implement _nonzero intrinsics", "tree": {"sha": "86883fed74f374f6e6783cef68f9cd5fb3a14842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86883fed74f374f6e6783cef68f9cd5fb3a14842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/269667e152e9377dfe8894b661e110fbd773bdd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/269667e152e9377dfe8894b661e110fbd773bdd2", "html_url": "https://github.com/rust-lang/rust/commit/269667e152e9377dfe8894b661e110fbd773bdd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/269667e152e9377dfe8894b661e110fbd773bdd2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a1d741df9bcad1ef55f97499a09187c992e0977", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a1d741df9bcad1ef55f97499a09187c992e0977", "html_url": "https://github.com/rust-lang/rust/commit/1a1d741df9bcad1ef55f97499a09187c992e0977"}], "stats": {"total": 61, "additions": 55, "deletions": 6}, "files": [{"sha": "496cefad33d555715374bfc74cabe197d9b0829d", "filename": "src/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/269667e152e9377dfe8894b661e110fbd773bdd2/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269667e152e9377dfe8894b661e110fbd773bdd2/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=269667e152e9377dfe8894b661e110fbd773bdd2", "patch": "@@ -33,6 +33,7 @@ pub enum EvalError<'tcx> {\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n+    Intrinsic(String),\n     OverflowingMath,\n     InvalidChar(u128),\n     OutOfMemory {\n@@ -104,6 +105,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::Intrinsic(..) =>\n+                \"intrinsic failed\",\n             EvalError::OverflowingMath =>\n                 \"attempted to do overflowing math\",\n             EvalError::NoMirFor(..) =>\n@@ -168,6 +171,8 @@ impl<'tcx> fmt::Display for EvalError<'tcx> {\n                 write!(f, \"index out of bounds: the len is {} but the index is {} at {:?}\", len, index, span),\n             EvalError::Math(span, ref err) =>\n                 write!(f, \"{:?} at {:?}\", err, span),\n+            EvalError::Intrinsic(ref err) =>\n+                write!(f, \"{}\", err),\n             EvalError::InvalidChar(c) =>\n                 write!(f, \"tried to interpret an invalid 32-bit value as a char: {}\", c),\n             EvalError::OutOfMemory { allocation_size, memory_size, memory_usage } =>"}, {"sha": "5fd0cc58022033e58cce99fdffbd5b94a061e344", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/269667e152e9377dfe8894b661e110fbd773bdd2/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269667e152e9377dfe8894b661e110fbd773bdd2/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=269667e152e9377dfe8894b661e110fbd773bdd2", "patch": "@@ -154,12 +154,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n             \"ctpop\" |\n             \"cttz\" |\n+            \"cttz_nonzero\" |\n             \"ctlz\" |\n+            \"ctlz_nonzero\" |\n             \"bswap\" => {\n                 let ty = substs.type_at(0);\n-                let num = self.value_to_primval(arg_vals[0], ty)?;\n+                let num = self.value_to_primval(arg_vals[0], ty)?.to_bytes()?;\n                 let kind = self.ty_to_primval_kind(ty)?;\n-                let num = numeric_intrinsic(intrinsic_name, num, kind)?;\n+                let num = if intrinsic_name.ends_with(\"_nonzero\") {\n+                    if num == 0 {\n+                        return Err(EvalError::Intrinsic(format!(\"{} called on 0\", intrinsic_name)))\n+                    }\n+                    numeric_intrinsic(intrinsic_name.trim_right_matches(\"_nonzero\"), num, kind)?\n+                } else {\n+                    numeric_intrinsic(intrinsic_name, num, kind)?\n+                };\n                 self.write_primval(dest, num, ty)?;\n             }\n \n@@ -538,13 +547,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n fn numeric_intrinsic<'tcx>(\n     name: &str,\n-    val: PrimVal,\n+    bytes: u128,\n     kind: PrimValKind\n ) -> EvalResult<'tcx, PrimVal> {\n     macro_rules! integer_intrinsic {\n         ($method:ident) => ({\n-            let bytes = val.to_bytes()?;\n-\n             use value::PrimValKind::*;\n             let result_bytes = match kind {\n                 I8 => (bytes as i8).$method() as u128,\n@@ -557,7 +564,7 @@ fn numeric_intrinsic<'tcx>(\n                 U64 => (bytes as u64).$method() as u128,\n                 I128 => (bytes as i128).$method() as u128,\n                 U128 => bytes.$method() as u128,\n-                _ => bug!(\"invalid `{}` argument: {:?}\", name, val),\n+                _ => bug!(\"invalid `{}` argument: {:?}\", name, bytes),\n             };\n \n             PrimVal::Bytes(result_bytes)"}, {"sha": "4896f02da20b0b280e6fde0dbd555a4e5c4c8c1e", "filename": "tests/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/269667e152e9377dfe8894b661e110fbd773bdd2/tests%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/269667e152e9377dfe8894b661e110fbd773bdd2/tests%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics-integer.rs?ref=269667e152e9377dfe8894b661e110fbd773bdd2", "patch": "@@ -14,7 +14,9 @@ mod rusti {\n     extern \"rust-intrinsic\" {\n         pub fn ctpop<T>(x: T) -> T;\n         pub fn ctlz<T>(x: T) -> T;\n+        pub fn ctlz_nonzero<T>(x: T) -> T;\n         pub fn cttz<T>(x: T) -> T;\n+        pub fn cttz_nonzero<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n     }\n }\n@@ -68,6 +70,21 @@ pub fn main() {\n         assert_eq!(ctlz(100u32), 25); assert_eq!(ctlz(100i32), 25);\n         assert_eq!(ctlz(100u64), 57); assert_eq!(ctlz(100i64), 57);\n \n+        assert_eq!(ctlz_nonzero(1u8), 7); assert_eq!(ctlz_nonzero(1i8), 7);\n+        assert_eq!(ctlz_nonzero(1u16), 15); assert_eq!(ctlz_nonzero(1i16), 15);\n+        assert_eq!(ctlz_nonzero(1u32), 31); assert_eq!(ctlz_nonzero(1i32), 31);\n+        assert_eq!(ctlz_nonzero(1u64), 63); assert_eq!(ctlz_nonzero(1i64), 63);\n+\n+        assert_eq!(ctlz_nonzero(10u8), 4); assert_eq!(ctlz_nonzero(10i8), 4);\n+        assert_eq!(ctlz_nonzero(10u16), 12); assert_eq!(ctlz_nonzero(10i16), 12);\n+        assert_eq!(ctlz_nonzero(10u32), 28); assert_eq!(ctlz_nonzero(10i32), 28);\n+        assert_eq!(ctlz_nonzero(10u64), 60); assert_eq!(ctlz_nonzero(10i64), 60);\n+\n+        assert_eq!(ctlz_nonzero(100u8), 1); assert_eq!(ctlz_nonzero(100i8), 1);\n+        assert_eq!(ctlz_nonzero(100u16), 9); assert_eq!(ctlz_nonzero(100i16), 9);\n+        assert_eq!(ctlz_nonzero(100u32), 25); assert_eq!(ctlz_nonzero(100i32), 25);\n+        assert_eq!(ctlz_nonzero(100u64), 57); assert_eq!(ctlz_nonzero(100i64), 57);\n+\n         assert_eq!(cttz(-1i8 as u8), 0); assert_eq!(cttz(-1i8), 0);\n         assert_eq!(cttz(-1i16 as u16), 0); assert_eq!(cttz(-1i16), 0);\n         assert_eq!(cttz(-1i32 as u32), 0); assert_eq!(cttz(-1i32), 0);\n@@ -93,6 +110,26 @@ pub fn main() {\n         assert_eq!(cttz(100u32), 2); assert_eq!(cttz(100i32), 2);\n         assert_eq!(cttz(100u64), 2); assert_eq!(cttz(100i64), 2);\n \n+        assert_eq!(cttz_nonzero(-1i8 as u8), 0); assert_eq!(cttz_nonzero(-1i8), 0);\n+        assert_eq!(cttz_nonzero(-1i16 as u16), 0); assert_eq!(cttz_nonzero(-1i16), 0);\n+        assert_eq!(cttz_nonzero(-1i32 as u32), 0); assert_eq!(cttz_nonzero(-1i32), 0);\n+        assert_eq!(cttz_nonzero(-1i64 as u64), 0); assert_eq!(cttz_nonzero(-1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(1u8), 0); assert_eq!(cttz_nonzero(1i8), 0);\n+        assert_eq!(cttz_nonzero(1u16), 0); assert_eq!(cttz_nonzero(1i16), 0);\n+        assert_eq!(cttz_nonzero(1u32), 0); assert_eq!(cttz_nonzero(1i32), 0);\n+        assert_eq!(cttz_nonzero(1u64), 0); assert_eq!(cttz_nonzero(1i64), 0);\n+\n+        assert_eq!(cttz_nonzero(10u8), 1); assert_eq!(cttz_nonzero(10i8), 1);\n+        assert_eq!(cttz_nonzero(10u16), 1); assert_eq!(cttz_nonzero(10i16), 1);\n+        assert_eq!(cttz_nonzero(10u32), 1); assert_eq!(cttz_nonzero(10i32), 1);\n+        assert_eq!(cttz_nonzero(10u64), 1); assert_eq!(cttz_nonzero(10i64), 1);\n+\n+        assert_eq!(cttz_nonzero(100u8), 2); assert_eq!(cttz_nonzero(100i8), 2);\n+        assert_eq!(cttz_nonzero(100u16), 2); assert_eq!(cttz_nonzero(100i16), 2);\n+        assert_eq!(cttz_nonzero(100u32), 2); assert_eq!(cttz_nonzero(100i32), 2);\n+        assert_eq!(cttz_nonzero(100u64), 2); assert_eq!(cttz_nonzero(100i64), 2);\n+\n         assert_eq!(bswap(0x0Au8), 0x0A); // no-op\n         assert_eq!(bswap(0x0Ai8), 0x0A); // no-op\n         assert_eq!(bswap(0x0A0Bu16), 0x0B0A);"}]}