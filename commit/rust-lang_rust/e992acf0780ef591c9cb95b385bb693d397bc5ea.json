{"sha": "e992acf0780ef591c9cb95b385bb693d397bc5ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OTJhY2YwNzgwZWY1OTFjOWNiOTViMzg1YmI2OTNkMzk3YmM1ZWE=", "commit": {"author": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-03-23T15:23:01Z"}, "committer": {"name": "hi-rustin", "email": "rustin.liu@gmail.com", "date": "2021-03-24T03:52:44Z"}, "message": "correct `convert to guard return` let_stmt\n\nfix\n\nfix\n\nadd check", "tree": {"sha": "f5712030baf9e1a72d4d198c18778db799226606", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5712030baf9e1a72d4d198c18778db799226606"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e992acf0780ef591c9cb95b385bb693d397bc5ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e992acf0780ef591c9cb95b385bb693d397bc5ea", "html_url": "https://github.com/rust-lang/rust/commit/e992acf0780ef591c9cb95b385bb693d397bc5ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e992acf0780ef591c9cb95b385bb693d397bc5ea/comments", "author": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hi-rustin", "id": 29879298, "node_id": "MDQ6VXNlcjI5ODc5Mjk4", "avatar_url": "https://avatars.githubusercontent.com/u/29879298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hi-rustin", "html_url": "https://github.com/hi-rustin", "followers_url": "https://api.github.com/users/hi-rustin/followers", "following_url": "https://api.github.com/users/hi-rustin/following{/other_user}", "gists_url": "https://api.github.com/users/hi-rustin/gists{/gist_id}", "starred_url": "https://api.github.com/users/hi-rustin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hi-rustin/subscriptions", "organizations_url": "https://api.github.com/users/hi-rustin/orgs", "repos_url": "https://api.github.com/users/hi-rustin/repos", "events_url": "https://api.github.com/users/hi-rustin/events{/privacy}", "received_events_url": "https://api.github.com/users/hi-rustin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258afb8fb8331e43a75e4f19df255d85d2430be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/258afb8fb8331e43a75e4f19df255d85d2430be7", "html_url": "https://github.com/rust-lang/rust/commit/258afb8fb8331e43a75e4f19df255d85d2430be7"}], "stats": {"total": 77, "additions": 70, "deletions": 7}, "files": [{"sha": "2148df7c81f2418cd0d6bc1dd09d015720c85e9d", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 70, "deletions": 7, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e992acf0780ef591c9cb95b385bb693d397bc5ea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e992acf0780ef591c9cb95b385bb693d397bc5ea/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=e992acf0780ef591c9cb95b385bb693d397bc5ea", "patch": "@@ -56,7 +56,11 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n             match path.qualifier() {\n                 None => {\n                     let bound_ident = pat.fields().next().unwrap();\n-                    Some((path, bound_ident))\n+                    if ast::IdentPat::can_cast(bound_ident.syntax().kind()) {\n+                        Some((path, bound_ident))\n+                    } else {\n+                        return None;\n+                    }\n                 }\n                 Some(_) => return None,\n             }\n@@ -143,10 +147,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                         make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n                     };\n \n-                    let let_stmt = make::let_stmt(\n-                        make::ident_pat(make::name(&bound_ident.syntax().to_string())).into(),\n-                        Some(match_expr),\n-                    );\n+                    let let_stmt = make::let_stmt(bound_ident, Some(match_expr));\n                     let let_stmt = let_stmt.indent(if_indent_level);\n                     replace(let_stmt.syntax(), &then_block, &parent_block, &if_expr)\n                 }\n@@ -284,7 +285,7 @@ mod tests {\n             r#\"\n             fn main(n: Option<String>) {\n                 bar();\n-                if$0 let Ok(n) = n {\n+                if$0 let Some(n) = n {\n                     foo(n);\n \n                     //comment\n@@ -296,7 +297,69 @@ mod tests {\n             fn main(n: Option<String>) {\n                 bar();\n                 let n = match n {\n-                    Ok(it) => it,\n+                    Some(it) => it,\n+                    _ => return,\n+                };\n+                foo(n);\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_mut_ok_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                if$0 let Some(mut n) = n {\n+                    foo(n);\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main(n: Option<String>) {\n+                bar();\n+                let mut n = match n {\n+                    Some(it) => it,\n+                    _ => return,\n+                };\n+                foo(n);\n+\n+                //comment\n+                bar();\n+            }\n+            \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn convert_let_ref_ok_inside_fn() {\n+        check_assist(\n+            convert_to_guarded_return,\n+            r#\"\n+            fn main(n: Option<&str>) {\n+                bar();\n+                if$0 let Some(ref n) = n {\n+                    foo(n);\n+\n+                    //comment\n+                    bar();\n+                }\n+            }\n+            \"#,\n+            r#\"\n+            fn main(n: Option<&str>) {\n+                bar();\n+                let ref n = match n {\n+                    Some(it) => it,\n                     _ => return,\n                 };\n                 foo(n);"}]}