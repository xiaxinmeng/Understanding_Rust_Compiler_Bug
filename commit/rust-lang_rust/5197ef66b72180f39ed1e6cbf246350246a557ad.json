{"sha": "5197ef66b72180f39ed1e6cbf246350246a557ad", "node_id": "C_kwDOAAsO6NoAKDUxOTdlZjY2YjcyMTgwZjM5ZWQxZTZjYmYyNDYzNTAyNDZhNTU3YWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-24T07:42:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-24T07:42:33Z"}, "message": "Rollup merge of #103908 - estebank:consider-cloning, r=compiler-errors\n\nSuggest `.clone()` or `ref binding` on E0382", "tree": {"sha": "28923f73e71b2fdccb8a7876ae053459257ae74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28923f73e71b2fdccb8a7876ae053459257ae74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5197ef66b72180f39ed1e6cbf246350246a557ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfyBpCRBK7hj4Ov3rIwAAg9IIAHaDm7Q0mj93HHA8WF8wL6MA\n5yCTLGhg+SUWRHBkN07ccbEHNO2r3wX6wjJAMS4trrA6py562qqtN9WCi9pTO7VW\niChmFN7cAgTjgWfJaaco5v343fS3HlaPyWqx4Wxn0NaF7FG2/tX+0Z9DS+K6sXEi\nB5yqE4T+T/G5+wOK4FMQxKSiwmNcvLYsW1fhllULNV2c5n2i8f1/zepu6hbffiMc\nyhM8YFxUZ0ZN61NDUg6Hm5B81lK4bsJ8GtCsi804PCgEJB99CPpoNZ7XfyAmT8yW\nkEZYAtMxpzVjshUciSEIneZDjYHNAA/yHyHfM5RondA6uIB78oKgQ+cwEoHC3IE=\n=70zx\n-----END PGP SIGNATURE-----\n", "payload": "tree 28923f73e71b2fdccb8a7876ae053459257ae74c\nparent fd815a5091eb4d49cd317f8ad272f17b7a5f550d\nparent 78b8d126db36fb031915e67a6498efd29b3438a0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669275753 +0100\ncommitter GitHub <noreply@github.com> 1669275753 +0100\n\nRollup merge of #103908 - estebank:consider-cloning, r=compiler-errors\n\nSuggest `.clone()` or `ref binding` on E0382\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5197ef66b72180f39ed1e6cbf246350246a557ad", "html_url": "https://github.com/rust-lang/rust/commit/5197ef66b72180f39ed1e6cbf246350246a557ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5197ef66b72180f39ed1e6cbf246350246a557ad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd815a5091eb4d49cd317f8ad272f17b7a5f550d", "html_url": "https://github.com/rust-lang/rust/commit/fd815a5091eb4d49cd317f8ad272f17b7a5f550d"}, {"sha": "78b8d126db36fb031915e67a6498efd29b3438a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/78b8d126db36fb031915e67a6498efd29b3438a0", "html_url": "https://github.com/rust-lang/rust/commit/78b8d126db36fb031915e67a6498efd29b3438a0"}], "stats": {"total": 1485, "additions": 1407, "deletions": 78}, "files": [{"sha": "28072f153a4792513914f67fac059e1148194d9c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -1376,7 +1376,7 @@ pub enum ExprKind {\n     /// Conditionless loop (can be exited with `break`, `continue`, or `return`).\n     ///\n     /// `'label: loop { block }`\n-    Loop(P<Block>, Option<Label>),\n+    Loop(P<Block>, Option<Label>, Span),\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n     /// A closure (e.g., `move |a, b, c| a + b + c`)."}, {"sha": "a5b24c403dd376d10c75550310a53300d59201a7", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -1355,9 +1355,10 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_block(body);\n             visit_opt(label, |label| vis.visit_label(label));\n         }\n-        ExprKind::Loop(body, label) => {\n+        ExprKind::Loop(body, label, span) => {\n             vis.visit_block(body);\n             visit_opt(label, |label| vis.visit_label(label));\n+            vis.visit_span(span);\n         }\n         ExprKind::Match(expr, arms) => {\n             vis.visit_expr(expr);"}, {"sha": "c528118be08085869bac97af434e5f37978784a8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -824,7 +824,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Loop(block, opt_label) => {\n+        ExprKind::Loop(block, opt_label, _) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }"}, {"sha": "3c217c0249abac6a596fcee06e0659f01a89be8b", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -131,12 +131,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let span = this.mark_span_with_reason(DesugaringKind::WhileLoop, e.span, None);\n                     this.lower_expr_while_in_loop_scope(span, cond, body, *opt_label)\n                 }),\n-                ExprKind::Loop(body, opt_label) => self.with_loop_scope(e.id, |this| {\n+                ExprKind::Loop(body, opt_label, span) => self.with_loop_scope(e.id, |this| {\n                     hir::ExprKind::Loop(\n                         this.lower_block(body, false),\n                         this.lower_label(*opt_label),\n                         hir::LoopSource::Loop,\n-                        DUMMY_SP,\n+                        this.lower_span(*span),\n                     )\n                 }),\n                 ExprKind::TryBlock(body) => self.lower_expr_try_block(body),"}, {"sha": "4b37fa027f53b75046029d2180ff43f8e9c5a00f", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -377,7 +377,7 @@ impl<'a> State<'a> {\n                 self.space();\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Loop(ref blk, opt_label) => {\n+            ast::ExprKind::Loop(ref blk, opt_label, _) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");"}, {"sha": "5c645c66cd71c64341a018ed9fcda18b9842a3ab", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 194, "deletions": 30, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -167,10 +167,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 );\n             }\n \n-            self.add_moved_or_invoked_closure_note(location, used_place, &mut err);\n+            let closure = self.add_moved_or_invoked_closure_note(location, used_place, &mut err);\n \n             let mut is_loop_move = false;\n             let mut in_pattern = false;\n+            let mut seen_spans = FxHashSet::default();\n \n             for move_site in &move_site_vec {\n                 let move_out = self.move_data.moves[(*move_site).moi];\n@@ -191,37 +192,25 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     is_loop_move = true;\n                 }\n \n-                self.explain_captures(\n-                    &mut err,\n-                    span,\n-                    move_span,\n-                    move_spans,\n-                    *moved_place,\n-                    partially_str,\n-                    loop_message,\n-                    move_msg,\n-                    is_loop_move,\n-                    maybe_reinitialized_locations.is_empty(),\n-                );\n-\n-                if let (UseSpans::PatUse(span), []) =\n-                    (move_spans, &maybe_reinitialized_locations[..])\n-                {\n-                    if maybe_reinitialized_locations.is_empty() {\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_lo(),\n-                            &format!(\n-                                \"borrow this field in the pattern to avoid moving {}\",\n-                                self.describe_place(moved_place.as_ref())\n-                                    .map(|n| format!(\"`{}`\", n))\n-                                    .unwrap_or_else(|| \"the value\".to_string())\n-                            ),\n-                            \"ref \",\n-                            Applicability::MachineApplicable,\n-                        );\n-                        in_pattern = true;\n+                if !seen_spans.contains(&move_span) {\n+                    if !closure {\n+                        self.suggest_ref_or_clone(mpi, move_span, &mut err, &mut in_pattern);\n                     }\n+\n+                    self.explain_captures(\n+                        &mut err,\n+                        span,\n+                        move_span,\n+                        move_spans,\n+                        *moved_place,\n+                        partially_str,\n+                        loop_message,\n+                        move_msg,\n+                        is_loop_move,\n+                        maybe_reinitialized_locations.is_empty(),\n+                    );\n                 }\n+                seen_spans.insert(move_span);\n             }\n \n             use_spans.var_path_only_subdiag(&mut err, desired_action);\n@@ -317,6 +306,160 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         }\n     }\n \n+    fn suggest_ref_or_clone(\n+        &mut self,\n+        mpi: MovePathIndex,\n+        move_span: Span,\n+        err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n+        in_pattern: &mut bool,\n+    ) {\n+        struct ExpressionFinder<'hir> {\n+            expr_span: Span,\n+            expr: Option<&'hir hir::Expr<'hir>>,\n+            pat: Option<&'hir hir::Pat<'hir>>,\n+            parent_pat: Option<&'hir hir::Pat<'hir>>,\n+        }\n+        impl<'hir> Visitor<'hir> for ExpressionFinder<'hir> {\n+            fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n+                if e.span == self.expr_span {\n+                    self.expr = Some(e);\n+                }\n+                hir::intravisit::walk_expr(self, e);\n+            }\n+            fn visit_pat(&mut self, p: &'hir hir::Pat<'hir>) {\n+                if p.span == self.expr_span {\n+                    self.pat = Some(p);\n+                }\n+                if let hir::PatKind::Binding(hir::BindingAnnotation::NONE, _, i, sub) = p.kind {\n+                    if i.span == self.expr_span || p.span == self.expr_span {\n+                        self.pat = Some(p);\n+                    }\n+                    // Check if we are in a situation of `ident @ ident` where we want to suggest\n+                    // `ref ident @ ref ident` or `ref ident @ Struct { ref ident }`.\n+                    if let Some(subpat) = sub && self.pat.is_none() {\n+                        self.visit_pat(subpat);\n+                        if self.pat.is_some() {\n+                            self.parent_pat = Some(p);\n+                        }\n+                        return;\n+                    }\n+                }\n+                hir::intravisit::walk_pat(self, p);\n+            }\n+        }\n+        let hir = self.infcx.tcx.hir();\n+        if let Some(hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Fn(_, _, body_id),\n+            ..\n+        })) = hir.find(hir.local_def_id_to_hir_id(self.mir_def_id()))\n+            && let Some(hir::Node::Expr(expr)) = hir.find(body_id.hir_id)\n+        {\n+            let place = &self.move_data.move_paths[mpi].place;\n+            let span = place.as_local()\n+                .map(|local| self.body.local_decls[local].source_info.span);\n+            let mut finder = ExpressionFinder {\n+                expr_span: move_span,\n+                expr: None,\n+                pat: None,\n+                parent_pat: None,\n+            };\n+            finder.visit_expr(expr);\n+            if let Some(span) = span && let Some(expr) = finder.expr {\n+                for (_, expr) in hir.parent_iter(expr.hir_id) {\n+                    if let hir::Node::Expr(expr) = expr {\n+                        if expr.span.contains(span) {\n+                            // If the let binding occurs within the same loop, then that\n+                            // loop isn't relevant, like in the following, the outermost `loop`\n+                            // doesn't play into `x` being moved.\n+                            // ```\n+                            // loop {\n+                            //     let x = String::new();\n+                            //     loop {\n+                            //         foo(x);\n+                            //     }\n+                            // }\n+                            // ```\n+                            break;\n+                        }\n+                        if let hir::ExprKind::Loop(.., loop_span) = expr.kind {\n+                            err.span_label(loop_span, \"inside of this loop\");\n+                        }\n+                    }\n+                }\n+                let typeck = self.infcx.tcx.typeck(self.mir_def_id());\n+                let hir_id = hir.get_parent_node(expr.hir_id);\n+                if let Some(parent) = hir.find(hir_id) {\n+                    let (def_id, args, offset) = if let hir::Node::Expr(parent_expr) = parent\n+                        && let hir::ExprKind::MethodCall(_, _, args, _) = parent_expr.kind\n+                        && let Some(def_id) = typeck.type_dependent_def_id(parent_expr.hir_id)\n+                    {\n+                        (def_id.as_local(), args, 1)\n+                    } else if let hir::Node::Expr(parent_expr) = parent\n+                        && let hir::ExprKind::Call(call, args) = parent_expr.kind\n+                        && let ty::FnDef(def_id, _) = typeck.node_type(call.hir_id).kind()\n+                    {\n+                        (def_id.as_local(), args, 0)\n+                    } else {\n+                        (None, &[][..], 0)\n+                    };\n+                    if let Some(def_id) = def_id\n+                        && let Some(node) = hir.find(hir.local_def_id_to_hir_id(def_id))\n+                        && let Some(fn_sig) = node.fn_sig()\n+                        && let Some(ident) = node.ident()\n+                        && let Some(pos) = args.iter().position(|arg| arg.hir_id == expr.hir_id)\n+                        && let Some(arg) = fn_sig.decl.inputs.get(pos + offset)\n+                    {\n+                        let mut span: MultiSpan = arg.span.into();\n+                        span.push_span_label(\n+                            arg.span,\n+                            \"this parameter takes ownership of the value\".to_string(),\n+                        );\n+                        let descr = match node.fn_kind() {\n+                            Some(hir::intravisit::FnKind::ItemFn(..)) | None => \"function\",\n+                            Some(hir::intravisit::FnKind::Method(..)) => \"method\",\n+                            Some(hir::intravisit::FnKind::Closure) => \"closure\",\n+                        };\n+                        span.push_span_label(\n+                            ident.span,\n+                            format!(\"in this {descr}\"),\n+                        );\n+                        err.span_note(\n+                            span,\n+                            format!(\n+                                \"consider changing this parameter type in {descr} `{ident}` to \\\n+                                 borrow instead if owning the value isn't necessary\",\n+                            ),\n+                        );\n+                    }\n+                    let place = &self.move_data.move_paths[mpi].place;\n+                    let ty = place.ty(self.body, self.infcx.tcx).ty;\n+                    if let hir::Node::Expr(parent_expr) = parent\n+                        && let hir::ExprKind::Call(call_expr, _) = parent_expr.kind\n+                        && let hir::ExprKind::Path(\n+                            hir::QPath::LangItem(LangItem::IntoIterIntoIter, _, _)\n+                        ) = call_expr.kind\n+                    {\n+                        // Do not suggest `.clone()` in a `for` loop, we already suggest borrowing.\n+                    } else {\n+                        self.suggest_cloning(err, ty, move_span);\n+                    }\n+                }\n+            }\n+            if let Some(pat) = finder.pat {\n+                *in_pattern = true;\n+                let mut sugg = vec![(pat.span.shrink_to_lo(), \"ref \".to_string())];\n+                if let Some(pat) = finder.parent_pat {\n+                    sugg.insert(0, (pat.span.shrink_to_lo(), \"ref \".to_string()));\n+                }\n+                err.multipart_suggestion_verbose(\n+                    \"borrow this binding in the pattern to avoid moving the value\",\n+                    sugg,\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+        }\n+    }\n+\n     fn report_use_of_uninitialized(\n         &self,\n         mpi: MovePathIndex,\n@@ -590,6 +733,27 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         true\n     }\n \n+    fn suggest_cloning(&self, err: &mut Diagnostic, ty: Ty<'tcx>, span: Span) {\n+        let tcx = self.infcx.tcx;\n+        // Try to find predicates on *generic params* that would allow copying `ty`\n+        let infcx = tcx.infer_ctxt().build();\n+        if infcx\n+            .type_implements_trait(\n+                tcx.lang_items().clone_trait().unwrap(),\n+                [tcx.erase_regions(ty)],\n+                self.param_env,\n+            )\n+            .must_apply_modulo_regions()\n+        {\n+            err.span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                \"consider cloning the value if the performance cost is acceptable\",\n+                \".clone()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     fn suggest_adding_copy_bounds(&self, err: &mut Diagnostic, ty: Ty<'tcx>, span: Span) {\n         let tcx = self.infcx.tcx;\n         let generics = tcx.generics_of(self.mir_def_id());"}, {"sha": "c500cbc49e4a3700e69b7421976d8708867bfb93", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -70,7 +70,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         place: PlaceRef<'tcx>,\n         diag: &mut Diagnostic,\n-    ) {\n+    ) -> bool {\n         debug!(\"add_moved_or_invoked_closure_note: location={:?} place={:?}\", location, place);\n         let mut target = place.local_or_deref_local();\n         for stmt in &self.body[location.block].statements[location.statement_index..] {\n@@ -106,7 +106,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         {\n                             place.local_or_deref_local().unwrap()\n                         }\n-                        _ => return,\n+                        _ => return false,\n                     };\n \n                     debug!(\"add_moved_or_invoked_closure_note: closure={:?}\", closure);\n@@ -125,7 +125,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                     ty::place_to_string_for_capture(self.infcx.tcx, hir_place)\n                                 ),\n                             );\n-                            return;\n+                            return true;\n                         }\n                     }\n                 }\n@@ -149,9 +149,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             ty::place_to_string_for_capture(self.infcx.tcx, hir_place)\n                         ),\n                     );\n+                    return true;\n                 }\n             }\n         }\n+        false\n     }\n \n     /// End-user visible description of `place` if one can be found."}, {"sha": "9f42a0c2d585cdef4270de56762ab529b45dc6ac", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -307,7 +307,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::InlineAsm(_)\n             | ExprKind::Let(_, _, _)\n             | ExprKind::Lit(_)\n-            | ExprKind::Loop(_, _)\n+            | ExprKind::Loop(_, _, _)\n             | ExprKind::MacCall(_)\n             | ExprKind::Match(_, _)\n             | ExprKind::Path(_, _)"}, {"sha": "e369dba55242c8f1703b38120a99489ca2c80e0f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -1044,11 +1044,19 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n                     name,\n                     typeck_results.node_type(pat.hir_id),\n                 );\n-                sess.struct_span_err(pat.span, \"borrow of moved value\")\n-                    .span_label(binding_span, format!(\"value moved into `{}` here\", name))\n+                let mut err = sess.struct_span_err(pat.span, \"borrow of moved value\");\n+                err.span_label(binding_span, format!(\"value moved into `{}` here\", name))\n                     .span_label(binding_span, occurs_because)\n-                    .span_labels(conflicts_ref, \"value borrowed here after move\")\n-                    .emit();\n+                    .span_labels(conflicts_ref, \"value borrowed here after move\");\n+                if pat.span.contains(binding_span) {\n+                    err.span_suggestion_verbose(\n+                        binding_span.shrink_to_lo(),\n+                        \"borrow this binding in the pattern to avoid moving the value\",\n+                        \"ref \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                err.emit();\n             }\n             return;\n         }"}, {"sha": "9f2267efb82872569ea399de4c47ea569cf98c66", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -1734,7 +1734,7 @@ impl<'a> Parser<'a> {\n                         expr.kind,\n                         ExprKind::While(_, _, None)\n                             | ExprKind::ForLoop(_, _, _, None)\n-                            | ExprKind::Loop(_, None)\n+                            | ExprKind::Loop(_, None, _)\n                             | ExprKind::Block(_, None)\n                     )\n                 {\n@@ -2444,10 +2444,11 @@ impl<'a> Parser<'a> {\n \n     /// Parses `loop { ... }` (`loop` token already eaten).\n     fn parse_loop_expr(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n+        let loop_span = self.prev_token.span;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n-            ExprKind::Loop(body, opt_label),\n+            ExprKind::Loop(body, opt_label, loop_span),\n             attrs,\n         ))\n     }"}, {"sha": "93b0f5814dedf297a9e92d96bea6085df0de393f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -3841,7 +3841,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 }\n             }\n \n-            ExprKind::Loop(ref block, label) => self.resolve_labeled_block(label, expr.id, &block),\n+            ExprKind::Loop(ref block, label, _) => {\n+                self.resolve_labeled_block(label, expr.id, &block)\n+            }\n \n             ExprKind::While(ref cond, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {"}, {"sha": "0ec2ae8839e7982480ec5f420a5ac5ed28210cda", "filename": "src/test/ui/binding/issue-53114-borrow-checks.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -17,6 +17,10 @@ LL |     match mm { (_, _y) => { } }\n    |           ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     match mm { (ref _x, _) => { } }\n+   |                 +++\n \n error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:29:11\n@@ -28,6 +32,10 @@ LL |     match mm { (_, _) => { } }\n    |           ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     match mm { (_, ref _y) => { } }\n+   |                    +++\n \n error[E0382]: use of moved value: `m`\n   --> $DIR/issue-53114-borrow-checks.rs:36:16\n@@ -48,6 +56,10 @@ LL |     if let (_, _y) = mm { }\n    |                      ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     if let (ref _x, _) = mm { }\n+   |             +++\n \n error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:43:21\n@@ -59,6 +71,10 @@ LL |     if let (_, _) = mm { }\n    |                     ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     if let (_, ref _y) = mm { }\n+   |                +++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "994eaf9d8c77885a219ea90c5a0a41e07896e4ec", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -32,6 +32,10 @@ LL |     +\n LL |     x.clone();\n    |     ^^^^^^^^^ value borrowed here after move\n    |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     x.clone()\n+   |      ++++++++\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Add<Output=()> + Clone + Copy>(x: T) {"}, {"sha": "50eee1049db6e479e2c827046b8f484927995f4c", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -27,6 +27,11 @@ LL |         a @ [.., _] => (),\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ [.., _] => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:28:5\n@@ -71,13 +76,15 @@ LL | fn bindings_after_at_or_patterns_move(x: Option<Test>) {\n    |                                       - move occurs because `x` has type `Option<Test>`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n-   |         ---\n-   |         |\n-   |         value moved here\n-   |         value moved here\n+   |         --- value moved here\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref foo @ Some(Test::Foo | Test::Bar) => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:86:5\n@@ -122,13 +129,15 @@ LL | fn bindings_after_at_slice_patterns_or_patterns_moves(x: [Option<Test>; 4])\n    |                                                       - move occurs because `x` has type `[Option<Test>; 4]`, which does not implement the `Copy` trait\n LL |     match x {\n LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n-   |         -\n-   |         |\n-   |         value moved here\n-   |         value moved here\n+   |         - value moved here\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ [.., Some(Test::Foo | Test::Bar)] => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:144:5"}, {"sha": "d2e9497d0795cf6e3b3a202ddb4d48ec36fffaec", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,18 @@ LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `consume` to borrow instead if owning the value isn't necessary\n+  --> $DIR/borrowck-consume-unsize-vec.rs:3:15\n+   |\n+LL | fn consume(_: Box<[i32]>) {\n+   |    -------    ^^^^^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     consume(b.clone());\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ed7e883ca63924c0cc68a116fe375221867d811d", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,14 @@ LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `consume` to borrow instead if owning the value isn't necessary\n+  --> $DIR/borrowck-consume-upcast-box.rs:5:15\n+   |\n+LL | fn consume(_: Box<dyn Foo>) {\n+   |    -------    ^^^^^^^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error: aborting due to previous error\n "}, {"sha": "eaf4bb38bc5905532ba39d0081673df2cd6e3107", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -9,6 +9,11 @@ LL |         Some(_) if { drop(my_str); false } => {}\n LL |         Some(_) => {}\n LL |         None => { foo(my_str); }\n    |                       ^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if { drop(my_str.clone()); false } => {}\n+   |                                 ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e1b99162088054e024b885cfb391afac15e6d7d1", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               -    ^^^^^^^^^ value borrowed here after move\n    |               |\n    |               value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = {x.clone()} + x.clone(); // the `{x}` forces a move to occur\n+   |                ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "67b00c1dd90ce7695fa2bc2f57fb252120045c26", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |         [.., _y] => {}\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-match.rs:23:14\n@@ -19,6 +23,10 @@ LL |         [.., _y] => {}\n    |              ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:33:15\n@@ -30,6 +38,10 @@ LL |         [.., (_y, _)] => {}\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:44:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:55:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:66:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:77:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n@@ -85,6 +113,10 @@ LL |         [(_x, _), _, _] => {}\n    |           ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _, _] => {}\n+   |          +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:99:15\n@@ -96,6 +128,10 @@ LL |         [.., (_x, _)] => {}\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _y @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n@@ -107,6 +143,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _] => {}\n+   |          +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "47429ea3eebae32927f0def3ef6bae5f62f2708b", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:28:11\n@@ -19,6 +23,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:41:11\n@@ -30,6 +38,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:52:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:63:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:74:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, ref _y @ ..] => {}\n+   |             +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n@@ -85,6 +113,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n@@ -96,6 +128,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _, _] => {}\n+   |          +++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "bfab13d42d2a16151132110737c16fc17a9c88be", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:23:14\n@@ -19,6 +23,10 @@ LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:33:15\n@@ -30,6 +38,10 @@ LL |         [.., (ref _y, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:44:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:55:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:66:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:77:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n@@ -85,6 +113,10 @@ LL |         [(ref _x, _), _, _] => {}\n    |           ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _, _] => {}\n+   |          +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:99:15\n@@ -96,6 +128,10 @@ LL |         [.., (ref _x, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _y @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n@@ -107,6 +143,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:123:5\n@@ -118,6 +158,10 @@ LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:131:5\n@@ -129,6 +173,10 @@ LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n@@ -140,6 +188,10 @@ LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n@@ -151,6 +203,10 @@ LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x @ ..] => {}\n+   |                +++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "8412c24fe61122b09dd3280fde6054a6957f4b17", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:28:11\n@@ -19,6 +23,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:41:11\n@@ -30,6 +38,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:52:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:63:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:74:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, ref _y @ ..] => {}\n+   |             +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n@@ -85,6 +113,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n@@ -96,6 +128,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _, _] => {}\n+   |          +++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e2aeaafc63c25320f6894415016c0f709eea0e5b", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,10 @@ LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:16:14\n@@ -17,6 +21,10 @@ LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use.rs:22:15\n@@ -27,6 +35,10 @@ LL |     let [.., (ref _y, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:30:10\n@@ -37,6 +49,10 @@ LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _x, _, _] = a;\n+   |          +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:36:16\n@@ -47,6 +63,10 @@ LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., ref _x] = a;\n+   |              +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:42:10\n@@ -57,6 +77,10 @@ LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [(ref _x, _), _, _] = a;\n+   |           +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:48:16\n@@ -67,6 +91,10 @@ LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., (ref _x, _)] = a;\n+   |               +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n@@ -77,6 +105,10 @@ LL |     let [(ref _x, _), _, _] = a;\n    |           ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:60:15\n@@ -87,6 +119,10 @@ LL |     let [.., (ref _x, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n@@ -97,6 +133,10 @@ LL |     let [_, ref _y @ ..] = a;\n    |             ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref x @ .., _] = a;\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:76:5\n@@ -107,6 +147,10 @@ LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:82:5\n@@ -117,6 +161,10 @@ LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n@@ -127,6 +175,10 @@ LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x @ ..] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n@@ -137,6 +189,10 @@ LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x @ ..] = a;\n+   |                +++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "dd456681f57bc691d42d3b22ee2d46e7a5c14eb4", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,10 @@ LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array.rs:16:14\n@@ -17,6 +21,10 @@ LL |     let [.., _y] = a;\n    |              ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:22:15\n@@ -27,6 +35,10 @@ LL |     let [.., (_y, _)] = a;\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:30:10\n@@ -37,6 +49,10 @@ LL |     let [_y @ .., _, _] = a;\n    |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _x, _, _] = a;\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:36:16\n@@ -47,6 +63,10 @@ LL |     let [_, _, _y @ ..] = a;\n    |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., ref _x] = a;\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:42:10\n@@ -57,6 +77,10 @@ LL |     let [_y @ .., _, _] = a;\n    |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [(ref _x, _), _, _] = a;\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:48:16\n@@ -67,6 +91,10 @@ LL |     let [_, _, _y @ ..] = a;\n    |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., (ref _x, _)] = a;\n+   |               +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:54:11\n@@ -77,6 +105,10 @@ LL |     let [(_x, _), _, _] = a;\n    |           ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:60:15\n@@ -87,6 +119,10 @@ LL |     let [.., (_x, _)] = a;\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:68:13\n@@ -97,6 +133,10 @@ LL |     let [_, _y @ ..] = a;\n    |             ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref x @ .., _] = a;\n+   |          +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "f94cbc30db421d77c381e2f123be1c4b464b9bc5", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -40,6 +40,11 @@ LL |     thread::spawn(move|| {\n ...\n LL |         drop(x1);\n    |              -- use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x1.clone());\n+   |            ++++++++\n \n error[E0382]: use of moved value: `x2`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n@@ -53,6 +58,11 @@ LL |     thread::spawn(move|| {\n ...\n LL |         drop(x2);\n    |              -- use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x2.clone());\n+   |            ++++++++\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:41:14\n@@ -100,6 +110,11 @@ LL |     thread::spawn(move|| {\n LL |\n LL |         drop(x);\n    |              - use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x.clone());\n+   |           ++++++++\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fb0e274c2919ab2958b9110b31ed8337cf3d617d", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -33,6 +33,11 @@ LL |     println!(\"{}\", f[s]);\n ...\n LL |     f[s] = 10;\n    |       ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     println!(\"{}\", f[s.clone()]);\n+   |                       ++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f785900d53fc0c8b3b19d212699458361cc38d01", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,11 @@ LL |     drop(x);\n    |          - value moved here\n LL |     let _ = (1,x);\n    |                ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x.clone());\n+   |           ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ad898fcabd9dbfab6df5fb1b94e7b02585f10aad", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,11 @@ LL |         Some(_) if { drop(a); false } => None,\n    |                           - value moved here\n LL |         x => x,\n    |         ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if { drop(a.clone()); false } => None,\n+   |                            ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "716cc9d0c8ba26af893beac1735a2a62d15e7100", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `Vec<bool>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `maybe.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref thing) = maybe {\n    |                     +++"}, {"sha": "2552fff860cd369a94b66b767d80f63f8a27df7e", "filename": "src/test/ui/borrowck/issue-83760.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |             val = None;\n    |             ---------- this reinitialization might get skipped\n    |\n    = note: move occurs because value has type `Struct`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     while let Some(ref foo) = val {\n+   |                    +++\n \n error[E0382]: use of moved value: `foo`\n   --> $DIR/issue-83760.rs:21:14"}, {"sha": "55948afca733b763e35c15ec362211499da800d0", "filename": "src/test/ui/borrowck/move-in-pattern-mut-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(mut _x) = opt {}\n    |                     ^^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `&mut i32`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `opt.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref mut _x) = opt {}\n    |                     +++"}, {"sha": "dd3471e2c8be58dcd66f5e4d64e21b904cf0d274", "filename": "src/test/ui/borrowck/move-in-pattern-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,7 +8,7 @@ LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `s.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     if let Some(ref mut x) = s {\n    |                 +++\n@@ -23,7 +23,7 @@ LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `e.s`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     let E::V { s: ref mut x } = e;\n    |                   +++"}, {"sha": "250acbe5928a0aed75da3fa8446a6d28277d4a53", "filename": "src/test/ui/borrowck/move-in-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,7 +8,7 @@ LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `s.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     if let Some(ref x) = s {\n    |                 +++\n@@ -23,7 +23,7 @@ LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `e.s`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     let E::V { s: ref x } = e;\n    |                   +++"}, {"sha": "74e7067c9afaa46a35ee835b9fb43d2fac3e5dc0", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -4,9 +4,17 @@ error[E0382]: use of moved value: `value`\n LL | fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n    |                         ----- move occurs because `value` has type `&mut Events<R>`, which does not implement the `Copy` trait\n LL |     for _ in 0..3 {\n+   |     ------------- inside of this loop\n LL |         Other::handle(value);\n    |                       ^^^^^ value moved here, in previous iteration of loop\n    |\n+note: consider changing this parameter type in function `handle` to borrow instead if owning the value isn't necessary\n+  --> $DIR/mut-borrow-in-loop-2.rs:9:22\n+   |\n+LL |     fn handle(value: T) -> Self;\n+   |        ------        ^ this parameter takes ownership of the value\n+   |        |\n+   |        in this function\n help: consider creating a fresh reborrow of `value` here\n    |\n LL |         Other::handle(&mut *value);"}, {"sha": "9501798bb06d0f6ef12b4a81455bc7fba5e2364d", "filename": "src/test/ui/borrowck/or-patterns.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ((ref y, _) | (_, y),) => (),\n+   |           +++\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:10:5\n@@ -19,6 +23,10 @@ LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ((y, _) | (_, ref y),) => (),\n+   |                       +++\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:18:5\n@@ -77,6 +85,10 @@ LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ((ref y, _) | (_, y),) = x;\n+   |           +++\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:40:5\n@@ -88,6 +100,10 @@ LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ((y, _) | (_, ref y),) = x;\n+   |                       +++\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:46:5"}, {"sha": "080f6c39449f040993ae98e851ad7fc8e5fbaeea", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -15,6 +15,10 @@ note: this function takes ownership of the receiver `self`, which moves `some_ve\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     some_vec.clone().into_iter();\n+   |             ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f030228f71ae493ff87f9f28bb9a3853f0b1e335", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let _bar = foo;\n    |                --- value moved here\n LL |     let _baz = [foo; 0];\n    |                 ^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _bar = foo.clone();\n+   |                   ++++++++\n \n error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/repeat-drop-2.rs:7:25"}, {"sha": "92ee5cf22b719a7fa8a5e573fbbf073443be0f7e", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -9,6 +9,11 @@ LL |         0 if { drop(s); false } => String::from(\"oops\"),\n ...\n LL |             s\n    |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         0 if { drop(s.clone()); false } => String::from(\"oops\"),\n+   |                      ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f2971df5db27594cdd277d9eeccfe98c918cd84a", "filename": "src/test/ui/issues/issue-42796.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -10,6 +10,10 @@ LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut s_copy = s.clone();\n+   |                       ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d14cd6cb4e03a04a4255047ab22d2feca8451c29", "filename": "src/test/ui/liveness/liveness-move-call-arg.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -3,9 +3,23 @@ error[E0382]: use of moved value: `x`\n    |\n LL |     let x: Box<isize> = Box::new(25);\n    |         - move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n+   |\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n+  --> $DIR/liveness-move-call-arg.rs:1:13\n+   |\n+LL | fn take(_x: Box<isize>) {}\n+   |    ----     ^^^^^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         take(x.clone());\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a060914f17859539736a35de38fd893a9074b419", "filename": "src/test/ui/liveness/liveness-move-in-loop.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -4,8 +4,22 @@ error[E0382]: use of moved value: `y`\n LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n+LL |         println!(\"{}\", y);\n+LL |         loop {\n+   |         ---- inside of this loop\n+LL |             loop {\n+   |             ---- inside of this loop\n+LL |                 loop {\n+   |                 ---- inside of this loop\n LL |                     x = y;\n    |                         ^ value moved here, in previous iteration of loop\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |                     x = y.clone();\n+   |                          ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4dff7447dd7661cad7ed453b177107669294ef77", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -24,12 +24,22 @@ error[E0382]: borrow of moved value: `y`\n LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         println!(\"{}\", y);\n    |                        ^ value borrowed here after move\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n-   |                                                    - value moved here, in previous iteration of loop\n+   |         ----------   ----------   ----------       - value moved here, in previous iteration of loop\n+   |         |            |            |\n+   |         |            |            inside of this loop\n+   |         |            inside of this loop\n+   |         inside of this loop\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         while true { while true { while true { x = y.clone(); x.clone(); } } }\n+   |                                                     ++++++++\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "3accba197a13deee42616521336538cd42ee99e3", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -10,6 +10,10 @@ LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let y = x.clone();\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "65d55ca8f7073ae3ec92de307d75cf1c0e7d8d2e", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,7 +8,16 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n+note: consider changing this parameter type in function `send` to borrow instead if owning the value isn't necessary\n+  --> $DIR/liveness-use-after-send.rs:3:54\n+   |\n+LL | fn send<T:Send + std::fmt::Debug>(ch: Chan<T>, data: T) {\n+   |    ---- in this function                             ^ this parameter takes ownership of the value\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     send(ch, message.clone());\n+   |                     ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "9a84ddef7e64e88be01eda170acc9d6db34ccf9b", "filename": "src/test/ui/moves/borrow-closures-instead-of-move.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -4,9 +4,17 @@ error[E0382]: use of moved value: `f`\n LL | fn takes_fn(f: impl Fn()) {\n    |             - move occurs because `f` has type `impl Fn()`, which does not implement the `Copy` trait\n LL |     loop {\n+   |     ---- inside of this loop\n LL |         takes_fnonce(f);\n    |                      ^ value moved here, in previous iteration of loop\n    |\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if owning the value isn't necessary\n+  --> $DIR/borrow-closures-instead-of-move.rs:34:20\n+   |\n+LL | fn takes_fnonce(_: impl FnOnce()) {}\n+   |    ------------    ^^^^^^^^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n help: consider borrowing `f`\n    |\n LL |         takes_fnonce(&f);\n@@ -24,6 +32,13 @@ LL |         takes_fnonce(m);\n LL |     takes_fnonce(m);\n    |                  ^ value used here after move\n    |\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if owning the value isn't necessary\n+  --> $DIR/borrow-closures-instead-of-move.rs:34:20\n+   |\n+LL | fn takes_fnonce(_: impl FnOnce()) {}\n+   |    ------------    ^^^^^^^^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n help: consider mutably borrowing `m`\n    |\n LL |         takes_fnonce(&mut m);"}, {"sha": "94bc9e6f4546535fac1925442960e7a171e80429", "filename": "src/test/ui/moves/issue-46099-move-in-macro.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -5,6 +5,11 @@ LL |     let b = Box::new(true);\n    |         - move occurs because `b` has type `Box<bool>`, which does not implement the `Copy` trait\n LL |     test!({b});\n    |            ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     test!({b.clone()});\n+   |             ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "56c225bab8cbca0c2858e522c4adab734db99e3c", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -25,7 +25,7 @@ fn moved_here_1() {\n fn moved_here_2() {\n     let value = NonCopy{};\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used = value;\n         //~^ NOTE value moved here\n         loop {\n@@ -38,7 +38,7 @@ fn moved_here_2() {\n fn moved_loop_1() {\n     let value = NonCopy{};\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used = value; //~ ERROR use of moved value: `value`\n         //~^ NOTE value moved here, in previous iteration of loop\n     }\n@@ -49,7 +49,7 @@ fn moved_loop_2() {\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n     let _used = value;\n     value = NonCopy{};\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used2 = value; //~ ERROR use of moved value: `value`\n         //~^ NOTE value moved here, in previous iteration of loop\n     }"}, {"sha": "7e119fe8cda64f2d49c562e2589c71f704dd5ef1", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -15,7 +15,9 @@ error[E0382]: use of moved value: `value`\n    |\n LL |     let value = NonCopy{};\n    |         ----- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used = value;\n    |                     ----- value moved here\n ...\n@@ -27,7 +29,9 @@ error[E0382]: use of moved value: `value`\n    |\n LL |     let value = NonCopy{};\n    |         ----- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used = value;\n    |                     ^^^^^ value moved here, in previous iteration of loop\n \n@@ -37,6 +41,8 @@ error[E0382]: use of moved value: `value`\n LL |     let mut value = NonCopy{};\n    |         --------- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used2 = value;\n    |                      ^^^^^ value moved here, in previous iteration of loop\n "}, {"sha": "c13dc58826eb83bfa27ff49b2575db210dd877ee", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -96,6 +96,10 @@ note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n    |                    ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     rc_foo.clone().use_rc_self();\n+   |           ++++++++\n \n error[E0382]: use of moved value: `foo_add`\n   --> $DIR/move-fn-self-receiver.rs:59:5\n@@ -137,6 +141,11 @@ LL |     for _val in explicit_into_iter.into_iter() {}\n    |                                    ----------- `explicit_into_iter` moved due to this method call\n LL |     explicit_into_iter;\n    |     ^^^^^^^^^^^^^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     for _val in explicit_into_iter.clone().into_iter() {}\n+   |                                   ++++++++\n \n error[E0382]: use of moved value: `container`\n   --> $DIR/move-fn-self-receiver.rs:71:5\n@@ -160,6 +169,7 @@ error[E0382]: use of moved value: `foo2`\n LL |     let foo2 = Foo;\n    |         ---- move occurs because `foo2` has type `Foo`, which does not implement the `Copy` trait\n LL |     loop {\n+   |     ---- inside of this loop\n LL |         foo2.use_self();\n    |         ^^^^ ---------- `foo2` moved due to this method call, in previous iteration of loop\n "}, {"sha": "86e5f65248b977f14352d87b403e7631ca8ef478", "filename": "src/test/ui/moves/move-guard-same-consts.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,18 @@ LL |         (1, 2) if take(x) => (),\n    |                        - value moved here\n LL |         (1, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n+  --> $DIR/move-guard-same-consts.rs:25:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (1, 2) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f04cb34d7c46e0e84b5e3797c93eb1d560246823", "filename": "src/test/ui/moves/move-in-guard-1.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,18 @@ LL |         (1, _) if take(x) => (),\n    |                        - value moved here\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n+  --> $DIR/move-in-guard-1.rs:15:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (1, _) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "26047861f55d704df5023072644fa212bda525e3", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -6,6 +6,18 @@ LL |     let x: Box<_> = Box::new(1);\n ...\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `take` to borrow instead if owning the value isn't necessary\n+  --> $DIR/move-in-guard-2.rs:13:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (_, 2) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a49ee31b46622c8570e21cd0969b656e176437d3", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -13,6 +13,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     consume(x.clone().into_iter().next().unwrap());\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "db4382b58fcb21c07c6d084227b86687a4d95566", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,7 +8,7 @@ LL |     consume(node) + r\n    |             ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `Box<List>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `node.next.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref right) => consume(right),\n    |              +++"}, {"sha": "0930df148059dae9dd5329c268b575d15dfc264e", "filename": "src/test/ui/moves/moves-based-on-type-distribute-copy-over-paren.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -9,6 +9,11 @@ LL |     let _y = Foo { f:x };\n LL |\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:x.clone() };\n+   |                       ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-distribute-copy-over-paren.rs:21:11\n@@ -21,6 +26,11 @@ LL |     let _y = Foo { f:(((x))) };\n LL |\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:(((x))).clone() };\n+   |                             ++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "838b1282cb4ed883de4561af3c7104e08b719655", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let _y = Foo { f:x };\n    |                      - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:x.clone() };\n+   |                       ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:18:11\n@@ -17,6 +22,11 @@ LL |     let _y = (x, 3);\n    |               - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = (x.clone(), 3);\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:35:11\n@@ -29,6 +39,11 @@ LL |         x\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         x.clone()\n+   |          ++++++++\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:36:11\n@@ -41,6 +56,11 @@ LL |         y\n ...\n LL |     touch(&y);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         y.clone()\n+   |          ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:46:11\n@@ -53,6 +73,11 @@ LL |         true => x,\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         true => x.clone(),\n+   |                  ++++++++\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:47:11\n@@ -65,6 +90,11 @@ LL |         false => y\n ...\n LL |     touch(&y);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false => y.clone()\n+   |                   ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:58:11\n@@ -77,6 +107,18 @@ LL |         _ if guard(x) => 10,\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in function `guard` to borrow instead if owning the value isn't necessary\n+  --> $DIR/moves-based-on-type-exprs.rs:6:14\n+   |\n+LL | fn guard(_s: String) -> bool {panic!()}\n+   |    -----     ^^^^^^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         _ if guard(x.clone()) => 10,\n+   |                     ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:65:11\n@@ -87,6 +129,11 @@ LL |     let _y = [x];\n    |               - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = [x.clone()];\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:71:11\n@@ -97,6 +144,11 @@ LL |     let _y = vec![x];\n    |                   - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = vec![x.clone()];\n+   |                    ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:77:11\n@@ -113,6 +165,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = x.clone().into_iter().next().unwrap();\n+   |               ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n@@ -129,6 +185,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n+   |                ++++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "225935532ead73c39f577a429bc7d3062362d74a", "filename": "src/test/ui/moves/moves-based-on-type-match-bindings.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,10 @@ LL |     touch(&x);\n    |           ^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `x.f` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Foo {ref f} => {}\n+   |              +++\n \n error: aborting due to previous error\n "}, {"sha": "0bcce30126306a421268bb2d87803c64d42f468b", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,11 @@ LL |     Box::new((x, x))\n    |               -  ^ value used here after move\n    |               |\n    |               value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     Box::new((x.clone(), x))\n+   |                ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "22e7951dbe3670d8229fd6cf6e8a655ac54dd452", "filename": "src/test/ui/moves/use_of_moved_value_clone_suggestions.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n    |      value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     (t.clone(), t)\n+   |       ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0a09353b8ec0a52f941f11331dd54b180b04e1e7", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -67,6 +67,11 @@ LL |     || x.len();\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = x.clone();\n+   |              ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:40:5\n@@ -79,6 +84,11 @@ LL |     || x = String::new();\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = x.clone();\n+   |              ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:45:5"}, {"sha": "97ed414b1eceb8ced620331d99e3d08b24314486", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -37,6 +37,11 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         move occurs because `t` has type `(u32, Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut t: T = (0, Box::new(0)); drop(t.clone());\n+   |                                            ++++++++\n \n error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:123:5\n@@ -77,6 +82,11 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         move occurs because `t` has type `(u32, Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut t: T = (0, Box::new(0)); drop(t.clone());\n+   |                                            ++++++++\n \n error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:149:5\n@@ -208,6 +218,11 @@ LL |         c2 => {\n    |         -- value moved here\n LL |             c.0 = 2;\n    |             ^^^^^^^ value partially assigned here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:255:13\n@@ -219,6 +234,11 @@ LL |         c2 => {\n    |         -- value moved here\n LL |             (c.1).0 = 2;\n    |             ^^^^^^^^^^^ value partially assigned here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error[E0382]: assign to part of moved value: `c.1`\n   --> $DIR/issue-21232-partial-init-and-use.rs:263:13\n@@ -229,6 +249,10 @@ LL |             ((c.1).1).0 = 3;\n    |             ^^^^^^^^^^^^^^^ value partially assigned here after move\n    |\n    = note: move occurs because `c.1` has type `(i32, (i32, String))`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "072e96788b17ebe16a8ab4e8d3c57a70baf0c627", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let r = range;\n    |             ----- value moved here\n LL |     let x = range.start;\n    |             ^^^^^^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = range.clone();\n+   |                  ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d8f58b591311d8a90beef915b84796c471bcf427", "filename": "src/test/ui/nll/issue-53807.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `Vec<bool>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `maybe.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref thing) = maybe {\n    |                     +++"}, {"sha": "f72ed3af71823de592dba52b3fe33f787507c125", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -26,6 +26,11 @@ LL |         false if { drop(x); true } => 1,\n LL |         true => {\n LL |             x;\n    |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false if { drop(x.clone()); true } => 1,\n+   |                          ++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b1f5117cb0243abc1781cc2f9632399f9ad01b4a", "filename": "src/test/ui/nll/ref-suggestion.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let y = x;\n    |             - value moved here\n LL |     x;\n    |     ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let y = x.clone();\n+   |              ++++++++\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/ref-suggestion.rs:8:5\n@@ -17,6 +22,11 @@ LL |     let mut y = x;\n    |                 - value moved here\n LL |     x;\n    |     ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut y = x.clone();\n+   |                  ++++++++\n \n error[E0382]: use of partially moved value: `x`\n   --> $DIR/ref-suggestion.rs:16:5\n@@ -28,7 +38,7 @@ LL |     x;\n    |     ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         (Some(ref y), ()) => {},\n    |               +++"}, {"sha": "c8b45fd24d98c00c916c3b7b292ecf6be0d7c480", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -16,6 +16,11 @@ LL |         Some(_z @ ref _y) => {}\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Some(ref _z @ ref _y) => {}\n+   |              +++\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n@@ -35,6 +40,11 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Some(ref _z @ ref mut _y) => {}\n+   |              +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14\n@@ -45,7 +55,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref _y @ ref _z) => {}\n    |                       +++\n@@ -59,7 +69,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref mut _y @ ref _z) => {}\n    |                           +++"}, {"sha": "324897151124cba965713e64fb97bd208fb0d815", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -6,6 +6,11 @@ LL |     let a @ b = U;\n    |         |   |\n    |         |   value moved here\n    |         value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = U;\n+   |         +++     +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:13:9\n@@ -16,6 +21,10 @@ LL |     let a @ (b, c) = (U, U);\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (b, ref c) = (U, U);\n+   |         +++         +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:15:9\n@@ -26,6 +35,10 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (b, ref c) = (u(), u());\n+   |         +++         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:18:16\n@@ -36,6 +49,11 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         -      ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Ok(b) | a @ Err(b) => {}\n+   |         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:18:29\n@@ -46,6 +64,11 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     -       ^ value used here after move\n    |                     |\n    |                     value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Ok(b) | ref a @ Err(b) => {}\n+   |                     +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:25:9\n@@ -56,6 +79,10 @@ LL |         xs @ [a, .., b] => {}\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref xs @ [a, .., ref b] => {}\n+   |         +++              +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:29:9\n@@ -66,6 +93,10 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref xs @ [_, ref ys @ .., _] => {}\n+   |         +++          +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:22:12"}, {"sha": "f27df32ccfa5ce2afbe63b73b2f62255371b7228", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -79,6 +79,10 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed here after move\n    |\n    = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ box ref b = Box::new(NC);\n+   |                     +++\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:38:9"}, {"sha": "d6474f1b49fb0f5c112ffec62a4ca78646afb718", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let a @ ref b = U;\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = U;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "389e86e646457ec2586b521ea93ee7dc065e080a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let a @ ref b = U;\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = U;\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n@@ -18,6 +23,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:14\n@@ -28,6 +38,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (ref mut b @ ref mut c, d @ ref e) = (U, U);\n+   |              +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:33\n@@ -38,6 +53,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n+   |                                 +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n@@ -49,6 +69,11 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ [ref mut b, ref c] = [U, U];\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n@@ -59,6 +84,11 @@ LL |     let a @ ref b = u();\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = u();\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n@@ -70,6 +100,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:14\n@@ -80,6 +115,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (ref mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |              +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:33\n@@ -90,6 +130,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n+   |                                 +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n@@ -101,6 +146,11 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ [ref mut b, ref c] = [u(), u()];\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:42:9\n@@ -111,6 +161,11 @@ LL |         a @ Some(ref b) => {}\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:9\n@@ -122,6 +177,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:19\n@@ -132,6 +192,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n@@ -142,6 +207,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n@@ -153,6 +223,11 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n@@ -163,6 +238,11 @@ LL |         a @ Some(ref b) => {}\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n@@ -174,6 +254,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n@@ -184,6 +269,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n@@ -194,6 +284,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n@@ -205,6 +300,11 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n@@ -215,6 +315,11 @@ LL |     fn f1(a @ ref b: U) {}\n    |           |   value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f1(ref a @ ref b: U) {}\n+   |           +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n@@ -226,6 +331,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           |            value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n@@ -236,6 +346,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    |   value borrowed here after move\n    |                    value moved into `b` here\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n@@ -246,6 +361,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               |       value borrowed here after move\n    |                               value moved into `d` here\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n+   |                               +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n@@ -257,6 +377,11 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           |    value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n@@ -267,6 +392,10 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n+   |         +++                         +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n@@ -277,6 +406,10 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n+   |         +++                         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n@@ -285,6 +418,11 @@ LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         - value moved here           ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:30\n@@ -305,6 +443,11 @@ LL |         a @ Some(ref b) => {}\n    |         -        ^^^^^ value borrowed here after move\n    |         |\n    |         value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n@@ -313,6 +456,11 @@ LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         - value moved here           ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:30"}, {"sha": "770bb89530ccaa60c2a1b63605854ca5f76e29f9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -242,6 +242,10 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ [b, ref mut c] = [U, U];\n+   |                         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n@@ -251,6 +255,11 @@ LL |     let ref a @ b = u();\n    |         |       |\n    |         |       value moved here\n    |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = u();\n+   |                 +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n@@ -261,6 +270,10 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref b @ ref mut c, ref d @ e) = (u(), u());\n+   |                          +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n@@ -271,6 +284,10 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ ref e) = (u(), u());\n+   |                                         +++\n \n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n@@ -281,6 +298,10 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ [b, ref mut c] = [u(), u()];\n+   |                         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n@@ -291,7 +312,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n    |                               +++\n@@ -305,7 +326,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              +++"}, {"sha": "ad4ce7952ca7494b065b86b9f62107b24655d5ea", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -97,6 +97,11 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n@@ -109,6 +114,11 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (b, [c, d]) = &mut val; // Same as ^--\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n@@ -119,6 +129,11 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ &mut ref mut b = &mut U;\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n@@ -130,6 +145,11 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         |         value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n+   |         +++\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9"}, {"sha": "e0e623fa544f773af68f1d0dfc9719e2631d788b", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,10 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ NC(b, ref c @ NC(d, e)) = NC(C, NC(C, C));\n+   |         +++           +++\n \n error: aborting due to previous error\n "}, {"sha": "638bdd6db7606761b035dfea6375a9b9761c5487", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -34,6 +34,11 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             |   value borrowed here after move\n    |                             value moved into `b` here\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Ok(ref a @ b) | Err(ref b @ ref a) => {\n+   |                             +++\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:42:9\n@@ -52,6 +57,11 @@ LL |     let ref mut a @ b = NotCopy;\n    |         |           |\n    |         |           value moved here\n    |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ ref b = NotCopy;\n+   |                     +++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "bb7b818368b78dca3969c32b35f92d5c45371b04", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -129,6 +129,10 @@ LL |     drop(tup.1);\n    |          ^^^^^ value used here after move\n    |\n    = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let (ref _x0, ref _x1, ref _x2, ..) = tup;\n+   |                   +++\n \n error[E0382]: borrow of moved value: `tup.1`\n   --> $DIR/borrowck-move-ref-pattern.rs:29:20"}, {"sha": "06699b947be40f2bb66426cfde35e04c8de7d81e", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,12 @@ LL |     let _ = dbg!(a);\n    |             ------- value moved here\n LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+  --> $SRC_DIR/std/src/macros.rs:LL:COL\n+   |\n+LL |             ref tmp => {\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "0cc8994fe1f2d7589f564287f46c730d45824769", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -12,6 +12,7 @@ error[E0382]: use of moved value: `a`\n LL |     let a = vec![1, 2, 3];\n    |         - move occurs because `a` has type `Vec<i32>`, which does not implement the `Copy` trait\n LL |     for i in &a {\n+   |     ----------- inside of this loop\n LL |         for j in a {\n    |                  ^ `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |"}, {"sha": "c36040eeca3012397ccc38058b1ab566d4c45e96", "filename": "src/test/ui/suggestions/ref-pattern-binding.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+fn main() {\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); // ok\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; // ok\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+}"}, {"sha": "c0d4feb033098844624c30c67819776d9b122f42", "filename": "src/test/ui/suggestions/ref-pattern-binding.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+fn main() {\n+    let _moved @ _from = String::from(\"foo\"); //~ ERROR\n+    let _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ _from = String::from(\"foo\"); //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); // ok\n+    let _moved @ S { f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    let ref _moved @ S { f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; // ok\n+    let _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+}"}, {"sha": "10447ba7089caae7eff7065aefdd1ccf4b8a63f3", "filename": "src/test/ui/suggestions/ref-pattern-binding.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -0,0 +1,107 @@\n+error: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:10:9\n+   |\n+LL |     let _moved @ ref _from = String::from(\"foo\");\n+   |         ------^^^---------\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved into `_moved` here\n+   |         move occurs because `_moved` has type `String` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/ref-pattern-binding.rs:11:9\n+   |\n+LL |     let ref _moved @ _from = String::from(\"foo\");\n+   |         ----------^^^-----\n+   |         |            |\n+   |         |            value moved into `_from` here\n+   |         value borrowed, by `_moved`, here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/ref-pattern-binding.rs:15:9\n+   |\n+LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ----------^^^^^^^-^^\n+   |         |                |\n+   |         |                value moved into `f` here\n+   |         value borrowed, by `_moved`, here\n+\n+error: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:18:9\n+   |\n+LL |     let _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         ------^^^^^^^-----^^\n+   |         |            |\n+   |         |            value borrowed here after move\n+   |         value moved into `_moved` here\n+   |         move occurs because `_moved` has type `S` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         +++\n+\n+error[E0382]: use of moved value\n+  --> $DIR/ref-pattern-binding.rs:9:9\n+   |\n+LL |     let _moved @ _from = String::from(\"foo\");\n+   |         ^^^^^^   -----   ------------------- move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |         |        |\n+   |         |        value moved here\n+   |         value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++          +++\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:11:9\n+   |\n+LL |     let ref _moved @ _from = String::from(\"foo\");\n+   |         ^^^^^^^^^^   -----   ------------------- move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |         |            |\n+   |         |            value moved here\n+   |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |                      +++\n+\n+error[E0382]: use of partially moved value\n+  --> $DIR/ref-pattern-binding.rs:14:9\n+   |\n+LL |     let _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ^^^^^^       - value partially moved here\n+   |         |\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         +++              +++\n+\n+error[E0382]: borrow of partially moved value\n+  --> $DIR/ref-pattern-binding.rs:15:9\n+   |\n+LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ^^^^^^^^^^       - value partially moved here\n+   |         |\n+   |         value borrowed here after partial move\n+   |\n+   = note: partial move occurs because value has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |                          +++\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "fe13e5ef3f5467ab93e85e200dca553d4958a4df", "filename": "src/test/ui/track-diagnostics/track2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -7,6 +7,11 @@ LL |     let _moved @ _from = String::from(\"foo\");\n    |         |        value moved here\n    |         value used here after move\n -Ztrack-diagnostics: created at compiler/rustc_borrowck/src/borrowck_errors.rs:LL:CC\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++          +++\n \n error: aborting due to previous error\n "}, {"sha": "f738b03eed6b8441cba5d88252b8dd6ddb39a1cb", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -23,6 +23,10 @@ LL |         println!(\"{}\", x);\n    |                        ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |             ::std::mem::drop(x.clone());\n+   |                               ++++++++\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "6381ae874ba81d56f72f0711be0bec8a342297e7", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,14 @@ LL |         move_out(x.f1_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/union-move.rs:45:18\n@@ -19,6 +27,14 @@ LL |         move_out(x.f2_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n   --> $DIR/union-move.rs:52:18"}, {"sha": "6381ae874ba81d56f72f0711be0bec8a342297e7", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -8,6 +8,14 @@ LL |         move_out(x.f1_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/union-move.rs:45:18\n@@ -19,6 +27,14 @@ LL |         move_out(x.f2_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in function `move_out` to borrow instead if owning the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n   --> $DIR/union-move.rs:52:18"}, {"sha": "d52a92b8888e8dde0ec433d54af6072b6b5be0cd", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -14,6 +14,10 @@ note: calling this operator moves the left-hand side\n    |\n LL |     fn not(self) -> Self::Output;\n    |            ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     !x.clone();\n+   |       ++++++++\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Not<Output=T> + Clone + Copy>(x: T) {"}, {"sha": "d8bffd4f9cf3e51f94559b79fcd34feec564898d", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -28,6 +28,14 @@ LL |         drop_unsized(y);\n ...\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if owning the value isn't necessary\n+  --> $DIR/borrow-after-move.rs:14:31\n+   |\n+LL | fn drop_unsized<T: ?Sized>(_: T) {}\n+   |    ------------               ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrow-after-move.rs:31:24\n@@ -66,6 +74,11 @@ LL |         x.foo();\n    |         - value moved here\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         x.clone().foo();\n+   |          ++++++++\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "71534818141caeb3fc06791687887b757dd799ca", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -16,6 +16,14 @@ LL |         drop_unsized(y);\n    |                      - value moved here\n LL |         drop_unsized(y);\n    |                      ^ value used here after move\n+   |\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if owning the value isn't necessary\n+  --> $DIR/double-move.rs:14:31\n+   |\n+LL | fn drop_unsized<T: ?Sized>(_: T) {}\n+   |    ------------               ^ this parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/double-move.rs:27:22"}, {"sha": "7b4d2454994d7175a2cf6f70afc69bfcf458d04b", "filename": "src/test/ui/use/use-after-move-based-on-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -9,6 +9,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = x.clone();\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "dfa0c04836eb3b7f66b2b26709d16e5129158448", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -9,6 +9,14 @@ LL |     l.push(n);\n LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in method `push` to borrow instead if owning the value isn't necessary\n+  --> $DIR/use-after-move-implicity-coerced-object.rs:17:27\n+   |\n+LL |     fn push(&mut self, n: Box<dyn ToString + 'static>) {\n+   |        ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ this parameter takes ownership of the value\n+   |        |\n+   |        in this method\n \n error: aborting due to previous error\n "}, {"sha": "e111c7d22915186b12a00f803f5a6960ce690938", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -582,7 +582,7 @@ fn ident_difference_expr_with_base_location(\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))\n-        | (Loop(_, _), Loop(_, _))\n+        | (Loop(_, _, _), Loop(_, _, _))\n         | (ForLoop(_, _, _, _), ForLoop(_, _, _, _))\n         | (While(_, _, _), While(_, _, _))\n         | (If(_, _, _), If(_, _, _))"}, {"sha": "6bcf0bbd7eb75f8ef50e8ea81b390d2e610be8cb", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -171,7 +171,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (ForLoop(lp, li, lt, ll), ForLoop(rp, ri, rt, rl)) => {\n             eq_label(ll, rl) && eq_pat(lp, rp) && eq_expr(li, ri) && eq_block(lt, rt)\n         },\n-        (Loop(lt, ll), Loop(rt, rl)) => eq_label(ll, rl) && eq_block(lt, rt),\n+        (Loop(lt, ll, _), Loop(rt, rl, _)) => eq_label(ll, rl) && eq_block(lt, rt),\n         (Block(lb, ll), Block(rb, rl)) => eq_label(ll, rl) && eq_block(lb, rb),\n         (TryBlock(l), TryBlock(r)) => eq_block(l, r),\n         (Yield(l), Yield(r)) | (Ret(l), Ret(r)) => eq_expr_opt(l, r),"}, {"sha": "414e767690bd090af990c13beb68d4bf2cb8fc25", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5197ef66b72180f39ed1e6cbf246350246a557ad/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=5197ef66b72180f39ed1e6cbf246350246a557ad", "patch": "@@ -660,7 +660,7 @@ fn to_control_flow(expr: &ast::Expr, expr_type: ExprType) -> Option<ControlFlow<\n         ast::ExprKind::ForLoop(ref pat, ref cond, ref block, label) => {\n             Some(ControlFlow::new_for(pat, cond, block, label, expr.span))\n         }\n-        ast::ExprKind::Loop(ref block, label) => {\n+        ast::ExprKind::Loop(ref block, label, _) => {\n             Some(ControlFlow::new_loop(block, label, expr.span))\n         }\n         ast::ExprKind::While(ref cond, ref block, label) => {"}]}