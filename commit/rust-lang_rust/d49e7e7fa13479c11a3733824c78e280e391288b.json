{"sha": "d49e7e7fa13479c11a3733824c78e280e391288b", "node_id": "C_kwDOAAsO6NoAKGQ0OWU3ZTdmYTEzNDc5YzExYTM3MzM4MjRjNzhlMjgwZTM5MTI4OGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T05:17:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-26T05:17:46Z"}, "message": "Auto merge of #103279 - compiler-errors:normalize-hack-back, r=lcnr\n\nAdd eval hack in `super_relate_consts` back\n\nPartially reverts 01adb7e98d5656c06497f33dd2747df144e78356.\n\nThis extra eval call *still* needs to happen, for example, in `normalize_param_env_or_error` when a param-env predicate has an unnormalized constant, since the param-env candidates never get normalized during candidate assembly (everywhere else we can assume that they are normalized fully).\n\nr? `@lcnr,` though I feel like I've assigned quite a few PRs to you in the last few days, so feel free to reassign to someone else familiar with this code if you're busy!\n\ncc #103243 (fixes the issue, but don't want to auto-close that until a backport is performed).", "tree": {"sha": "6b1b6c90d46f65d6ebc27211d9903c7746fcbeba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b1b6c90d46f65d6ebc27211d9903c7746fcbeba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49e7e7fa13479c11a3733824c78e280e391288b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49e7e7fa13479c11a3733824c78e280e391288b", "html_url": "https://github.com/rust-lang/rust/commit/d49e7e7fa13479c11a3733824c78e280e391288b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49e7e7fa13479c11a3733824c78e280e391288b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5406feb1cf1a9f2479b72917cf4225e5f6aa240", "html_url": "https://github.com/rust-lang/rust/commit/a5406feb1cf1a9f2479b72917cf4225e5f6aa240"}, {"sha": "6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e6fe30d0f7e3dcbbf3988650311cee179992e5d", "html_url": "https://github.com/rust-lang/rust/commit/6e6fe30d0f7e3dcbbf3988650311cee179992e5d"}], "stats": {"total": 62, "additions": 58, "deletions": 4}, "files": [{"sha": "0c212cf59e17fe1d5b2e26eccd8fa04699289a8c", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=d49e7e7fa13479c11a3733824c78e280e391288b", "patch": "@@ -554,6 +554,13 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         val: &mir::ConstantKind<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n     ) -> InterpResult<'tcx, OpTy<'tcx, M::Provenance>> {\n+        // FIXME(const_prop): normalization needed b/c const prop lint in\n+        // `mir_drops_elaborated_and_const_checked`, which happens before\n+        // optimized MIR. Only after optimizing the MIR can we guarantee\n+        // that the `RevealAll` pass has happened and that the body's consts\n+        // are normalized, so any call to resolve before that needs to be\n+        // manually normalized.\n+        let val = self.tcx.normalize_erasing_regions(self.param_env, *val);\n         match val {\n             mir::ConstantKind::Ty(ct) => {\n                 match ct.kind() {\n@@ -585,7 +592,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     }\n                 }\n             }\n-            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(*val, *ty, layout),\n+            mir::ConstantKind::Val(val, ty) => self.const_val_to_op(val, ty, layout),\n             mir::ConstantKind::Unevaluated(uv, _) => {\n                 let instance = self.resolve(uv.def, uv.substs)?;\n                 Ok(self.eval_to_allocation(GlobalId { instance, promoted: uv.promoted })?.into())"}, {"sha": "b25b4bd4fe363ad145507a327d05fc500cc72a05", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=d49e7e7fa13479c11a3733824c78e280e391288b", "patch": "@@ -574,8 +574,8 @@ pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n /// it.\n pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n-    a: ty::Const<'tcx>,\n-    b: ty::Const<'tcx>,\n+    mut a: ty::Const<'tcx>,\n+    mut b: ty::Const<'tcx>,\n ) -> RelateResult<'tcx, ty::Const<'tcx>> {\n     debug!(\"{}.super_relate_consts(a = {:?}, b = {:?})\", relation.tag(), a, b);\n     let tcx = relation.tcx();\n@@ -596,6 +596,17 @@ pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n         );\n     }\n \n+    // HACK(const_generics): We still need to eagerly evaluate consts when\n+    // relating them because during `normalize_param_env_or_error`,\n+    // we may relate an evaluated constant in a obligation against\n+    // an unnormalized (i.e. unevaluated) const in the param-env.\n+    // FIXME(generic_const_exprs): Once we always lazily unify unevaluated constants\n+    // these `eval` calls can be removed.\n+    if !relation.tcx().features().generic_const_exprs {\n+        a = a.eval(tcx, relation.param_env());\n+        b = b.eval(tcx, relation.param_env());\n+    }\n+\n     // Currently, the values that can be unified are primitive types,\n     // and those that derive both `PartialEq` and `Eq`, corresponding\n     // to structural-match types."}, {"sha": "2526522a25c8c882aa536d9864245aeb6c555c15", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49e7e7fa13479c11a3733824c78e280e391288b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=d49e7e7fa13479c11a3733824c78e280e391288b", "patch": "@@ -483,7 +483,12 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         // Use `Reveal::All` here because patterns are always monomorphic even if their function\n         // isn't.\n         let param_env_reveal_all = self.param_env.with_reveal_all_normalized(self.tcx);\n-        let substs = self.typeck_results.node_substs(id);\n+        // N.B. There is no guarantee that substs collected in typeck results are fully normalized,\n+        // so they need to be normalized in order to pass to `Instance::resolve`, which will ICE\n+        // if given unnormalized types.\n+        let substs = self\n+            .tcx\n+            .normalize_erasing_regions(param_env_reveal_all, self.typeck_results.node_substs(id));\n         let instance = match ty::Instance::resolve(self.tcx, param_env_reveal_all, def_id, substs) {\n             Ok(Some(i)) => i,\n             Ok(None) => {"}, {"sha": "a7bbe4db992904d8e0da039f536606398b4185a0", "filename": "src/test/ui/consts/unnormalized-param-env.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d49e7e7fa13479c11a3733824c78e280e391288b/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49e7e7fa13479c11a3733824c78e280e391288b/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funnormalized-param-env.rs?ref=d49e7e7fa13479c11a3733824c78e280e391288b", "patch": "@@ -0,0 +1,31 @@\n+// check-pass\n+\n+pub trait CSpace<const N: usize> {\n+    type Traj;\n+}\n+\n+pub struct Const<const R: usize>;\n+\n+pub trait Obstacle<CS, const N: usize> {\n+    fn trajectory_free<FT, S1>(&self, t: &FT)\n+    where\n+        CS::Traj: Sized,\n+        CS: CSpace<N>;\n+}\n+\n+// -----\n+\n+const N: usize = 4;\n+\n+struct ObstacleSpace2df32;\n+\n+impl<CS> Obstacle<CS, N> for ObstacleSpace2df32 {\n+    fn trajectory_free<TF, S1>(&self, t: &TF)\n+    where\n+        CS::Traj: Sized,\n+        CS: CSpace<N>,\n+    {\n+    }\n+}\n+\n+fn main() {}"}]}