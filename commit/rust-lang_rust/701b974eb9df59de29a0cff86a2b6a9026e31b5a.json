{"sha": "701b974eb9df59de29a0cff86a2b6a9026e31b5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwMWI5NzRlYjlkZjU5ZGUyOWEwY2ZmODZhMmI2YTkwMjZlMzFiNWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-04T02:47:18Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T12:32:55Z"}, "message": "extract find_struct_error_after_field_looking_code", "tree": {"sha": "c66f6fe8ca07242d411740259a02de0efc5b65bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c66f6fe8ca07242d411740259a02de0efc5b65bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/701b974eb9df59de29a0cff86a2b6a9026e31b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/701b974eb9df59de29a0cff86a2b6a9026e31b5a", "html_url": "https://github.com/rust-lang/rust/commit/701b974eb9df59de29a0cff86a2b6a9026e31b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/701b974eb9df59de29a0cff86a2b6a9026e31b5a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8480b31ba9ca615d6c1e3e6a4a42d5757b447a0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8480b31ba9ca615d6c1e3e6a4a42d5757b447a0c", "html_url": "https://github.com/rust-lang/rust/commit/8480b31ba9ca615d6c1e3e6a4a42d5757b447a0c"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "5170a0b9d073208a4a8995d0afb042e7bb360ff7", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 26, "deletions": 23, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/701b974eb9df59de29a0cff86a2b6a9026e31b5a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/701b974eb9df59de29a0cff86a2b6a9026e31b5a/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=701b974eb9df59de29a0cff86a2b6a9026e31b5a", "patch": "@@ -1780,9 +1780,7 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::DotDot) {\n                 let exp_span = self.prev_span;\n                 match self.parse_expr() {\n-                    Ok(e) => {\n-                        base = Some(e);\n-                    }\n+                    Ok(e) => base = Some(e),\n                     Err(mut e) => {\n                         e.emit();\n                         self.recover_stmt();\n@@ -1792,24 +1790,9 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n-            let mut recovery_field = None;\n-            if let token::Ident(name, _) = self.token.kind {\n-                if !self.token.is_reserved_ident() && self.look_ahead(1, |t| *t == token::Colon) {\n-                    // Use in case of error after field-looking code: `S { foo: () with a }`.\n-                    recovery_field = Some(ast::Field {\n-                        ident: Ident::new(name, self.token.span),\n-                        span: self.token.span,\n-                        expr: self.mk_expr(self.token.span, ExprKind::Err, AttrVec::new()),\n-                        is_shorthand: false,\n-                        attrs: AttrVec::new(),\n-                        id: DUMMY_NODE_ID,\n-                        is_placeholder: false,\n-                    });\n-                }\n-            }\n-            let mut parsed_field = None;\n-            match self.parse_field() {\n-                Ok(f) => parsed_field = Some(f),\n+            let recovery_field = self.find_struct_error_after_field_looking_code();\n+            let parsed_field = match self.parse_field() {\n+                Ok(f) => Some(f),\n                 Err(mut e) => {\n                     e.span_label(struct_sp, \"while parsing this struct\");\n                     e.emit();\n@@ -1823,8 +1806,9 @@ impl<'a> Parser<'a> {\n                             break;\n                         }\n                     }\n+                    None\n                 }\n-            }\n+            };\n \n             match self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)]) {\n                 Ok(_) => {\n@@ -1847,7 +1831,26 @@ impl<'a> Parser<'a> {\n \n         let span = lo.to(self.token.span);\n         self.expect(&token::CloseDelim(token::Brace))?;\n-        return Ok(self.mk_expr(span, ExprKind::Struct(pth, fields, base), attrs));\n+        Ok(self.mk_expr(span, ExprKind::Struct(pth, fields, base), attrs))\n+    }\n+\n+    /// Use in case of error after field-looking code: `S { foo: () with a }`.\n+    fn find_struct_error_after_field_looking_code(&self) -> Option<Field> {\n+        if let token::Ident(name, _) = self.token.kind {\n+            if !self.token.is_reserved_ident() && self.look_ahead(1, |t| *t == token::Colon) {\n+                let span = self.token.span;\n+                return Some(ast::Field {\n+                    ident: Ident::new(name, span),\n+                    span,\n+                    expr: self.mk_expr_err(span),\n+                    is_shorthand: false,\n+                    attrs: AttrVec::new(),\n+                    id: DUMMY_NODE_ID,\n+                    is_placeholder: false,\n+                });\n+            }\n+        }\n+        None\n     }\n \n     fn recover_struct_comma_after_dotdot(&mut self, span: Span) {"}]}