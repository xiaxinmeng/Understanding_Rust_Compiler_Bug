{"sha": "1fdb7595278df6568cc73028a734ca7d0615e622", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGI3NTk1Mjc4ZGY2NTY4Y2M3MzAyOGE3MzRjYTdkMDYxNWU2MjI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-11-06T23:10:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-11-07T02:15:59Z"}, "message": "Make EnumSet not silently corrupt data.\n\nAssert at run time instead. Fixes #13756.\n\nI\u2019d rather have this be detected at compile-time, but I don\u2019t know how to do that.", "tree": {"sha": "16c21d4eb207e70541dc3cd69a8e585898f065fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16c21d4eb207e70541dc3cd69a8e585898f065fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fdb7595278df6568cc73028a734ca7d0615e622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdb7595278df6568cc73028a734ca7d0615e622", "html_url": "https://github.com/rust-lang/rust/commit/1fdb7595278df6568cc73028a734ca7d0615e622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fdb7595278df6568cc73028a734ca7d0615e622/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45cbdec4174778bf915f17561ef971c068a7fcbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/45cbdec4174778bf915f17561ef971c068a7fcbc", "html_url": "https://github.com/rust-lang/rust/commit/45cbdec4174778bf915f17561ef971c068a7fcbc"}], "stats": {"total": 31, "additions": 30, "deletions": 1}, "files": [{"sha": "c2c56554f7c0bb44f1ec01a56dee7459dd18bfdd", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1fdb7595278df6568cc73028a734ca7d0615e622/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdb7595278df6568cc73028a734ca7d0615e622/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=1fdb7595278df6568cc73028a734ca7d0615e622", "patch": "@@ -52,7 +52,9 @@ pub trait CLike {\n }\n \n fn bit<E:CLike>(e: &E) -> uint {\n-    1 << e.to_uint()\n+    let value = e.to_uint();\n+    assert!(value < ::core::uint::BITS);\n+    1 << value\n }\n \n impl<E:CLike> EnumSet<E> {\n@@ -378,4 +380,31 @@ mod test {\n         let elems = e_subtract.iter().collect();\n         assert_eq!(vec![A], elems)\n     }\n+\n+    #[test]\n+    #[should_fail]\n+    fn test_overflow() {\n+        #[allow(dead_code)]\n+        #[repr(uint)]\n+        enum Bar {\n+            V00, V01, V02, V03, V04, V05, V06, V07, V08, V09,\n+            V10, V11, V12, V13, V14, V15, V16, V17, V18, V19,\n+            V20, V21, V22, V23, V24, V25, V26, V27, V28, V29,\n+            V30, V31, V32, V33, V34, V35, V36, V37, V38, V39,\n+            V40, V41, V42, V43, V44, V45, V46, V47, V48, V49,\n+            V50, V51, V52, V53, V54, V55, V56, V57, V58, V59,\n+            V60, V61, V62, V63, V64, V65, V66, V67, V68, V69,\n+        }\n+        impl CLike for Bar {\n+            fn to_uint(&self) -> uint {\n+                *self as uint\n+            }\n+\n+            fn from_uint(v: uint) -> Bar {\n+                unsafe { mem::transmute(v) }\n+            }\n+        }\n+        let mut set = EnumSet::empty();\n+        set.add(V64);\n+    }\n }"}]}