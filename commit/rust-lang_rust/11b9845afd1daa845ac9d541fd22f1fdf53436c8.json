{"sha": "11b9845afd1daa845ac9d541fd22f1fdf53436c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjk4NDVhZmQxZGFhODQ1YWM5ZDU0MWZkMjJmMWZkZjUzNDM2Yzg=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-10T10:13:39Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-08-12T19:43:00Z"}, "message": "Improve debug logging a bit", "tree": {"sha": "02255a7e45efad49bf5c5652c70330298d159082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02255a7e45efad49bf5c5652c70330298d159082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b9845afd1daa845ac9d541fd22f1fdf53436c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b9845afd1daa845ac9d541fd22f1fdf53436c8", "html_url": "https://github.com/rust-lang/rust/commit/11b9845afd1daa845ac9d541fd22f1fdf53436c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b9845afd1daa845ac9d541fd22f1fdf53436c8/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6265497523469990ce39e6817423c35a17055a54", "url": "https://api.github.com/repos/rust-lang/rust/commits/6265497523469990ce39e6817423c35a17055a54", "html_url": "https://github.com/rust-lang/rust/commit/6265497523469990ce39e6817423c35a17055a54"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "642dd02cbe0b481737df6b7ca82c1e4d255eaf49", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/11b9845afd1daa845ac9d541fd22f1fdf53436c8/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b9845afd1daa845ac9d541fd22f1fdf53436c8/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=11b9845afd1daa845ac9d541fd22f1fdf53436c8", "patch": "@@ -692,3 +692,17 @@ impl HirDisplay for TraitRef {\n         Ok(())\n     }\n }\n+\n+impl HirDisplay for Obligation {\n+    fn hir_fmt(&self, f: &mut HirFormatter<impl HirDatabase>) -> fmt::Result {\n+        match self {\n+            Obligation::Trait(tr) => write!(f, \"Implements({})\", tr.display(f.db)),\n+            Obligation::Projection(proj) => write!(\n+                f,\n+                \"Normalize({} => {})\",\n+                proj.projection_ty.display(f.db),\n+                proj.ty.display(f.db)\n+            ),\n+        }\n+    }\n+}"}, {"sha": "fde5d8a47d1411f7f1f9c8430354a0946fc7831b", "filename": "crates/ra_hir/src/ty/traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11b9845afd1daa845ac9d541fd22f1fdf53436c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b9845afd1daa845ac9d541fd22f1fdf53436c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits.rs?ref=11b9845afd1daa845ac9d541fd22f1fdf53436c8", "patch": "@@ -7,7 +7,7 @@ use parking_lot::Mutex;\n use ra_prof::profile;\n use rustc_hash::FxHashSet;\n \n-use super::{Canonical, GenericPredicate, ProjectionTy, TraitRef, Ty};\n+use super::{Canonical, GenericPredicate, HirDisplay, ProjectionTy, TraitRef, Ty};\n use crate::{db::HirDatabase, Crate, ImplBlock, Trait};\n \n use self::chalk::{from_chalk, ToChalk};\n@@ -61,7 +61,6 @@ fn solve(\n ) -> Option<chalk_solve::Solution> {\n     let context = ChalkContext { db, krate };\n     let solver = db.trait_solver(krate);\n-    debug!(\"solve goal: {:?}\", goal);\n     let solution = solver.lock().solve(&context, goal);\n     debug!(\"solve({:?}) => {:?}\", goal, solution);\n     solution\n@@ -120,10 +119,11 @@ pub struct ProjectionPredicate {\n pub(crate) fn trait_solve_query(\n     db: &impl HirDatabase,\n     krate: Crate,\n-    trait_ref: Canonical<InEnvironment<Obligation>>,\n+    goal: Canonical<InEnvironment<Obligation>>,\n ) -> Option<Solution> {\n     let _p = profile(\"trait_solve_query\");\n-    let canonical = trait_ref.to_chalk(db).cast();\n+    debug!(\"trait_solve_query({})\", goal.value.value.display(db));\n+    let canonical = goal.to_chalk(db).cast();\n     // We currently don't deal with universes (I think / hope they're not yet\n     // relevant for our use cases?)\n     let u_canonical = chalk_ir::UCanonical { canonical, universes: 1 };"}]}