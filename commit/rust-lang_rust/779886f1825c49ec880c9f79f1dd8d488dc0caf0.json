{"sha": "779886f1825c49ec880c9f79f1dd8d488dc0caf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3OTg4NmYxODI1YzQ5ZWM4ODBjOWY3OWYxZGQ4ZDQ4OGRjMGNhZjA=", "commit": {"author": {"name": "Thomas Karpiniec", "email": "tk@1.21jiggawatts.net", "date": "2017-10-24T13:04:01Z"}, "committer": {"name": "Thomas Karpiniec", "email": "tk@1.21jiggawatts.net", "date": "2017-10-24T13:04:01Z"}, "message": "Improve recovery after unexpected tokens parsing sequence", "tree": {"sha": "3fb966d4f9d37ce488e38d561b267dc7068cb321", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fb966d4f9d37ce488e38d561b267dc7068cb321"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/779886f1825c49ec880c9f79f1dd8d488dc0caf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/779886f1825c49ec880c9f79f1dd8d488dc0caf0", "html_url": "https://github.com/rust-lang/rust/commit/779886f1825c49ec880c9f79f1dd8d488dc0caf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/779886f1825c49ec880c9f79f1dd8d488dc0caf0/comments", "author": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thombles", "id": 5511175, "node_id": "MDQ6VXNlcjU1MTExNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/5511175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thombles", "html_url": "https://github.com/thombles", "followers_url": "https://api.github.com/users/thombles/followers", "following_url": "https://api.github.com/users/thombles/following{/other_user}", "gists_url": "https://api.github.com/users/thombles/gists{/gist_id}", "starred_url": "https://api.github.com/users/thombles/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thombles/subscriptions", "organizations_url": "https://api.github.com/users/thombles/orgs", "repos_url": "https://api.github.com/users/thombles/repos", "events_url": "https://api.github.com/users/thombles/events{/privacy}", "received_events_url": "https://api.github.com/users/thombles/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a789fa0440214347e1bf6228fdb8fd36bf2f4520", "url": "https://api.github.com/repos/rust-lang/rust/commits/a789fa0440214347e1bf6228fdb8fd36bf2f4520", "html_url": "https://github.com/rust-lang/rust/commit/a789fa0440214347e1bf6228fdb8fd36bf2f4520"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "cf56be25665da080e9d294b8503730c5cb2209bf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/779886f1825c49ec880c9f79f1dd8d488dc0caf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779886f1825c49ec880c9f79f1dd8d488dc0caf0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=779886f1825c49ec880c9f79f1dd8d488dc0caf0", "patch": "@@ -1033,7 +1033,23 @@ impl<'a> Parser<'a> {\n                 } else {\n                     if let Err(e) = self.expect(t) {\n                         fe(e);\n-                        break;\n+                        // Attempt to keep parsing if it was a similar separator\n+                        if let Some(ref tokens) = t.similar_tokens() {\n+                            if tokens.contains(&self.token) {\n+                                self.bump();\n+                            }\n+                        }\n+                        // Attempt to keep parsing if it was an omitted separator\n+                        match f(self) {\n+                            Ok(t) => {\n+                                v.push(t);\n+                                continue;\n+                            },\n+                            Err(mut e) => {\n+                                e.cancel();\n+                                break;\n+                            }\n+                        }\n                     }\n                 }\n             }"}, {"sha": "09dc05a4167e61c558ab6884d422f2c5e7625960", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/779886f1825c49ec880c9f79f1dd8d488dc0caf0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/779886f1825c49ec880c9f79f1dd8d488dc0caf0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=779886f1825c49ec880c9f79f1dd8d488dc0caf0", "patch": "@@ -433,6 +433,16 @@ impl Token {\n         })\n     }\n \n+    /// Returns tokens that are likely to be typed accidentally instead of the current token.\n+    /// Enables better error recovery when the wrong token is found.\n+    pub fn similar_tokens(&self) -> Option<Vec<Token>> {\n+        match *self {\n+            Comma => Some(vec![Dot, Lt]),\n+            Semi => Some(vec![Colon]),\n+            _ => None\n+        }\n+    }\n+\n     /// Returns `true` if the token is either a special identifier or a keyword.\n     pub fn is_reserved_ident(&self) -> bool {\n         self.is_special_ident() || self.is_used_keyword() || self.is_unused_keyword()"}]}