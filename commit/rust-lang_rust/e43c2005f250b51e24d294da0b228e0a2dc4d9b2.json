{"sha": "e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0M2MyMDA1ZjI1MGI1MWUyNGQyOTRkYTBiMjI4ZTBhMmRjNGQ5YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T13:52:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-09T13:52:56Z"}, "message": "Auto merge of #84030 - jyn514:no-blanket-impls, r=GuillaumeGomez\n\nrustdoc: Don't generate blanket impls when running --show-coverage\n\n`get_blanket_impls` is the slowest part of rustdoc, and the coverage pass\ncompletely ignores blanket impls. This stops running it at all, and also\nremoves some unnecessary checks in `calculate_doc_coverage` that ignored\nthe impl anyway.\n\nWe don't currently measure --show-coverage in perf.rlo, but I tested\nthis locally on cargo and it brought the time down from 2.9 to 1.6\nseconds.\n\nThis also adds back a commented-out test; Rustdoc has been able to deal with `impl trait` for almost a year now.\n\nr? `@GuillaumeGomez`", "tree": {"sha": "dbafdf673487f14363822e9ed00e412510a96916", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbafdf673487f14363822e9ed00e412510a96916"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "html_url": "https://github.com/rust-lang/rust/commit/e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc66b92f7f1114a78b98504a927ca9c0aa12c71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc66b92f7f1114a78b98504a927ca9c0aa12c71a", "html_url": "https://github.com/rust-lang/rust/commit/bc66b92f7f1114a78b98504a927ca9c0aa12c71a"}, {"sha": "f67103b9b26f9e8dfea1c6f144cc003e380060a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67103b9b26f9e8dfea1c6f144cc003e380060a5", "html_url": "https://github.com/rust-lang/rust/commit/f67103b9b26f9e8dfea1c6f144cc003e380060a5"}], "stats": {"total": 69, "additions": 16, "deletions": 53}, "files": [{"sha": "fdac33fd60e2aef31de0c1d84b5cf6c99fcd2796", "filename": "src/librustdoc/passes/calculate_doc_coverage.rs", "status": "modified", "additions": 7, "deletions": 43, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcalculate_doc_coverage.rs?ref=e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "patch": "@@ -7,7 +7,6 @@ use crate::passes::Pass;\n use rustc_lint::builtin::MISSING_DOCS;\n use rustc_middle::lint::LintLevelSource;\n use rustc_session::lint;\n-use rustc_span::symbol::sym;\n use rustc_span::FileName;\n use serde::Serialize;\n \n@@ -193,48 +192,13 @@ impl<'a, 'b> fold::DocFolder for CoverageCalculator<'a, 'b> {\n                 // don't count items in stripped modules\n                 return Some(i);\n             }\n-            clean::ImportItem(..) | clean::ExternCrateItem { .. } => {\n-                // docs on `use` and `extern crate` statements are not displayed, so they're not\n-                // worth counting\n-                return Some(i);\n-            }\n-            clean::ImplItem(ref impl_)\n-                if i.attrs\n-                    .other_attrs\n-                    .iter()\n-                    .any(|item| item.has_name(sym::automatically_derived))\n-                    || impl_.synthetic\n-                    || impl_.blanket_impl.is_some() =>\n-            {\n-                // built-in derives get the `#[automatically_derived]` attribute, and\n-                // synthetic/blanket impls are made up by rustdoc and can't be documented\n-                // FIXME(misdreavus): need to also find items that came out of a derive macro\n-                return Some(i);\n-            }\n-            clean::ImplItem(ref impl_) => {\n-                let filename = i.span.filename(self.ctx.sess());\n-                if let Some(ref tr) = impl_.trait_ {\n-                    debug!(\n-                        \"impl {:#} for {:#} in {}\",\n-                        tr.print(&self.ctx.cache, self.ctx.tcx),\n-                        impl_.for_.print(&self.ctx.cache, self.ctx.tcx),\n-                        filename,\n-                    );\n-\n-                    // don't count trait impls, the missing-docs lint doesn't so we shouldn't\n-                    // either\n-                    return Some(i);\n-                } else {\n-                    // inherent impls *can* be documented, and those docs show up, but in most\n-                    // cases it doesn't make sense, as all methods on a type are in one single\n-                    // impl block\n-                    debug!(\n-                        \"impl {:#} in {}\",\n-                        impl_.for_.print(&self.ctx.cache, self.ctx.tcx),\n-                        filename\n-                    );\n-                }\n-            }\n+            // docs on `use` and `extern crate` statements are not displayed, so they're not\n+            // worth counting\n+            clean::ImportItem(..) | clean::ExternCrateItem { .. } => {}\n+            // Don't count trait impls, the missing-docs lint doesn't so we shouldn't either.\n+            // Inherent impls *can* be documented, and those docs show up, but in most cases it\n+            // doesn't make sense, as all methods on a type are in one single impl block\n+            clean::ImplItem(_) => {}\n             _ => {\n                 let has_docs = !i.attrs.doc_strings.is_empty();\n                 let mut tests = Tests { found_tests: 0 };"}, {"sha": "0e86fe45640f8ec80d728be3cd9aa536c7f02b06", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "patch": "@@ -110,7 +110,6 @@ crate const DEFAULT_PASSES: &[ConditionalPass] = &[\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n crate const COVERAGE_PASSES: &[ConditionalPass] = &[\n-    ConditionalPass::always(COLLECT_TRAIT_IMPLS),\n     ConditionalPass::new(STRIP_HIDDEN, WhenNotDocumentHidden),\n     ConditionalPass::new(STRIP_PRIVATE, WhenNotDocumentPrivate),\n     ConditionalPass::always(CALCULATE_DOC_COVERAGE),"}, {"sha": "2a108dac2a5dbb787eba13f19ff3789ab02aa209", "filename": "src/test/rustdoc-ui/coverage/traits.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.rs?ref=e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "patch": "@@ -2,6 +2,7 @@\n // check-pass\n \n #![feature(trait_alias)]\n+#![feature(min_type_alias_impl_trait)]\n \n /// look at this trait right here\n pub trait ThisTrait {\n@@ -16,6 +17,7 @@ pub trait ThisTrait {\n }\n \n /// so what happens if we take some struct...\n+#[derive(Clone)]\n pub struct SomeStruct;\n \n /// ...and slap this trait on it?\n@@ -29,10 +31,8 @@ impl ThisTrait for SomeStruct {\n /// but what about those aliases? i hear they're pretty exotic\n pub trait MyAlias = ThisTrait + Send + Sync;\n \n-// FIXME(58624): once rustdoc can process opaque `impl Trait` types,\n-// we need to make sure they're counted\n-// /// woah, getting all opaque in here\n-// pub type ThisExists = impl ThisTrait;\n-//\n-// /// why don't we get a little more concrete\n-// pub fn defines() -> ThisExists { SomeStruct {} }\n+/// woah, getting all opaque in here\n+pub type ThisExists = impl ThisTrait;\n+\n+/// why don't we get a little more concrete\n+pub fn defines() -> ThisExists { SomeStruct {} }"}, {"sha": "5053d02090c446e664f247683a283dafc7d0f8bc", "filename": "src/test/rustdoc-ui/coverage/traits.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e43c2005f250b51e24d294da0b228e0a2dc4d9b2/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Ftraits.stdout?ref=e43c2005f250b51e24d294da0b228e0a2dc4d9b2", "patch": "@@ -1,7 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...st/rustdoc-ui/coverage/traits.rs |          6 |      85.7% |          0 |       0.0% |\n+| ...st/rustdoc-ui/coverage/traits.rs |          8 |      88.9% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          6 |      85.7% |          0 |       0.0% |\n+| Total                               |          8 |      88.9% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+"}]}