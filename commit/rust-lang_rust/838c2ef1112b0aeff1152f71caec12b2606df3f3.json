{"sha": "838c2ef1112b0aeff1152f71caec12b2606df3f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzOGMyZWYxMTEyYjBhZWZmMTE1MmY3MWNhZWMxMmIyNjA2ZGYzZjM=", "commit": {"author": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2021-03-13T00:40:13Z"}, "committer": {"name": "Fran\u00e7ois Mockers", "email": "mockersf@gmail.com", "date": "2021-04-13T20:13:41Z"}, "message": "fix source link when in a trait implementation", "tree": {"sha": "839f0dbee44a2574eb65ad49ec1aaa93b19e2a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/839f0dbee44a2574eb65ad49ec1aaa93b19e2a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/838c2ef1112b0aeff1152f71caec12b2606df3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/838c2ef1112b0aeff1152f71caec12b2606df3f3", "html_url": "https://github.com/rust-lang/rust/commit/838c2ef1112b0aeff1152f71caec12b2606df3f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/838c2ef1112b0aeff1152f71caec12b2606df3f3/comments", "author": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mockersf", "id": 8672791, "node_id": "MDQ6VXNlcjg2NzI3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/8672791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mockersf", "html_url": "https://github.com/mockersf", "followers_url": "https://api.github.com/users/mockersf/followers", "following_url": "https://api.github.com/users/mockersf/following{/other_user}", "gists_url": "https://api.github.com/users/mockersf/gists{/gist_id}", "starred_url": "https://api.github.com/users/mockersf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mockersf/subscriptions", "organizations_url": "https://api.github.com/users/mockersf/orgs", "repos_url": "https://api.github.com/users/mockersf/repos", "events_url": "https://api.github.com/users/mockersf/events{/privacy}", "received_events_url": "https://api.github.com/users/mockersf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45964368f4a2e31c94e9bcf1cef933c087d21544", "url": "https://api.github.com/repos/rust-lang/rust/commits/45964368f4a2e31c94e9bcf1cef933c087d21544", "html_url": "https://github.com/rust-lang/rust/commit/45964368f4a2e31c94e9bcf1cef933c087d21544"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "1eb70eb6364cc1a2e7abb6e79cd911b4424d66e0", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/838c2ef1112b0aeff1152f71caec12b2606df3f3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/838c2ef1112b0aeff1152f71caec12b2606df3f3/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=838c2ef1112b0aeff1152f71caec12b2606df3f3", "patch": "@@ -1459,9 +1459,20 @@ fn render_impl(\n                 // Only render when the method is not static or we allow static methods\n                 if render_method_item {\n                     let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n+                    let source_id = trait_\n+                        .and_then(|trait_| trait_\n+                            .items.iter()\n+                            .find(|item| item.name.map(|n| n.as_str().eq(&name.as_str())).unwrap_or(false))\n+                        ).map(|item| format!(\"{}.{}\", item.type_(), name));\n                     write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\">\", id, item_type, extra_class, in_trait_class);\n                     w.write_str(\"<code>\");\n-                    render_assoc_item(w, item, link.anchor(&id), ItemType::Impl, cx);\n+                    render_assoc_item(\n+                        w,\n+                        item,\n+                        link.anchor(source_id.as_ref().unwrap_or(&id)),\n+                        ItemType::Impl,\n+                        cx\n+                    );\n                     w.write_str(\"</code>\");\n                     render_stability_since_raw(\n                         w,\n@@ -1476,14 +1487,15 @@ fn render_impl(\n                 }\n             }\n             clean::TypedefItem(ref tydef, _) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", ItemType::AssocType, name));\n+                let source_id = format!(\"{}.{}\", ItemType::AssocType, name);\n+                let id = cx.derive_id(source_id.clone());\n                 write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n                 assoc_type(\n                     w,\n                     item,\n                     &Vec::new(),\n                     Some(&tydef.type_),\n-                    link.anchor(&id),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n                     cx.cache(),\n                     tcx,\n@@ -1493,9 +1505,18 @@ fn render_impl(\n                 w.write_str(\"</h4>\");\n             }\n             clean::AssocConstItem(ref ty, ref default) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n+                let source_id = format!(\"{}.{}\", item_type, name);\n+                let id = cx.derive_id(source_id.clone());\n                 write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n-                assoc_const(w, item, ty, default.as_ref(), link.anchor(&id), \"\", cx);\n+                assoc_const(\n+                    w,\n+                    item,\n+                    ty,\n+                    default.as_ref(),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n+                    \"\",\n+                    cx\n+                );\n                 w.write_str(\"</code>\");\n                 render_stability_since_raw(\n                     w,\n@@ -1509,14 +1530,15 @@ fn render_impl(\n                 w.write_str(\"</h4>\");\n             }\n             clean::AssocTypeItem(ref bounds, ref default) => {\n-                let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n+                let source_id = format!(\"{}.{}\", item_type, name);\n+                let id = cx.derive_id(source_id.clone());\n                 write!(w, \"<h4 id=\\\"{}\\\" class=\\\"{}{}{}\\\"><code>\", id, item_type, extra_class, in_trait_class);\n                 assoc_type(\n                     w,\n                     item,\n                     bounds,\n                     default.as_ref(),\n-                    link.anchor(&id),\n+                    link.anchor(if trait_.is_some() { &source_id } else { &id }),\n                     \"\",\n                     cx.cache(),\n                     tcx,\n@@ -1613,7 +1635,7 @@ fn render_impl(\n                 true,\n                 outer_version,\n                 outer_const_version,\n-                None,\n+                Some(t),\n                 show_def_docs,\n             );\n         }"}]}