{"sha": "aadd5e52636c4a48fd515357cad78b9f010074ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZGQ1ZTUyNjM2YzRhNDhmZDUxNTM1N2NhZDc4YjlmMDEwMDc0Y2E=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-09T20:59:10Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-15T16:42:10Z"}, "message": "Factor out getting the boundaries of an `IntRange`", "tree": {"sha": "e947d1cd5325e5a99a3d4fe9427cc199719f28ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e947d1cd5325e5a99a3d4fe9427cc199719f28ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aadd5e52636c4a48fd515357cad78b9f010074ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aadd5e52636c4a48fd515357cad78b9f010074ca", "html_url": "https://github.com/rust-lang/rust/commit/aadd5e52636c4a48fd515357cad78b9f010074ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aadd5e52636c4a48fd515357cad78b9f010074ca/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84784dd68e03d83bbf7c79258cd96307e4d931ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/84784dd68e03d83bbf7c79258cd96307e4d931ea", "html_url": "https://github.com/rust-lang/rust/commit/84784dd68e03d83bbf7c79258cd96307e4d931ea"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "ee18e70528e5dcf523b1f0167fc95a67508cad21", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/aadd5e52636c4a48fd515357cad78b9f010074ca/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aadd5e52636c4a48fd515357cad78b9f010074ca/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=aadd5e52636c4a48fd515357cad78b9f010074ca", "patch": "@@ -1283,6 +1283,10 @@ impl<'tcx> IntRange<'tcx> {\n         self.range.start() == self.range.end()\n     }\n \n+    fn boundaries(&self) -> (u128, u128) {\n+        (*self.range.start(), *self.range.end())\n+    }\n+\n     fn should_treat_range_exhaustively(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         // Don't treat `usize`/`isize` exhaustively unless the `precise_pointer_size_matching`\n         // feature is enabled.\n@@ -1395,11 +1399,11 @@ impl<'tcx> IntRange<'tcx> {\n \n     /// Returns a collection of ranges that spans the values covered by `ranges`, subtracted\n     /// by the values covered by `self`: i.e., `ranges \\ self` (in set notation).\n-    fn subtract_from(self, ranges: Vec<IntRange<'tcx>>) -> Vec<IntRange<'tcx>> {\n+    fn subtract_from(&self, ranges: Vec<IntRange<'tcx>>) -> Vec<IntRange<'tcx>> {\n         let mut remaining_ranges = vec![];\n         let ty = self.ty;\n         let span = self.span;\n-        let (lo, hi) = self.range.into_inner();\n+        let (lo, hi) = self.boundaries();\n         for subrange in ranges {\n             let (subrange_lo, subrange_hi) = subrange.range.into_inner();\n             if lo > subrange_hi || subrange_lo > hi {\n@@ -1424,8 +1428,8 @@ impl<'tcx> IntRange<'tcx> {\n \n     fn intersection(&self, tcx: TyCtxt<'tcx>, other: &Self) -> Option<Self> {\n         let ty = self.ty;\n-        let (lo, hi) = (*self.range.start(), *self.range.end());\n-        let (other_lo, other_hi) = (*other.range.start(), *other.range.end());\n+        let (lo, hi) = self.boundaries();\n+        let (other_lo, other_hi) = other.boundaries();\n         if Self::should_treat_range_exhaustively(tcx, ty) {\n             if lo <= other_hi && other_lo <= hi {\n                 let span = other.span;\n@@ -1451,13 +1455,13 @@ impl<'tcx> IntRange<'tcx> {\n         // `true` in the following cases:\n         // 1 -------          // 1       -------\n         // 2       --------   // 2 -------\n-        let (lo, hi) = (*self.range.start(), *self.range.end());\n-        let (other_lo, other_hi) = (*other.range.start(), *other.range.end());\n+        let (lo, hi) = self.boundaries();\n+        let (other_lo, other_hi) = other.boundaries();\n         (lo == other_hi || hi == other_lo)\n     }\n \n     fn to_pat(&self, tcx: TyCtxt<'tcx>) -> Pat<'tcx> {\n-        let (lo, hi) = (self.range.start(), self.range.end());\n+        let (lo, hi) = self.boundaries();\n \n         let bias = IntRange::signed_bias(tcx, self.ty);\n         let (lo, hi) = (lo ^ bias, hi ^ bias);\n@@ -2309,8 +2313,8 @@ fn specialize_one_pattern<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                     (Some(ctor), Some(pat)) => ctor.intersection(cx.tcx, &pat).map(|_| {\n                         // Constructor splitting should ensure that all intersections we encounter\n                         // are actually inclusions.\n-                        let (pat_lo, pat_hi) = pat.range.into_inner();\n-                        let (ctor_lo, ctor_hi) = ctor.range.into_inner();\n+                        let (pat_lo, pat_hi) = pat.boundaries();\n+                        let (ctor_lo, ctor_hi) = ctor.boundaries();\n                         assert!(pat_lo <= ctor_lo && ctor_hi <= pat_hi);\n                         PatStack::default()\n                     }),"}]}