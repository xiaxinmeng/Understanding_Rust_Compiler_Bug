{"sha": "c76d66e9238840d96b1910ba57a839ef7902485c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NmQ2NmU5MjM4ODQwZDk2YjE5MTBiYTU3YTgzOWVmNzkwMjQ4NWM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-27T15:33:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-30T12:27:53Z"}, "message": "Generalize dropck to ignore item-less traits.\n\nFix #24805\n\n(see follow-on commit for test.)", "tree": {"sha": "d25191714f76847de07ad1b7d1d509f555f87978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d25191714f76847de07ad1b7d1d509f555f87978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c76d66e9238840d96b1910ba57a839ef7902485c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c76d66e9238840d96b1910ba57a839ef7902485c", "html_url": "https://github.com/rust-lang/rust/commit/c76d66e9238840d96b1910ba57a839ef7902485c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c76d66e9238840d96b1910ba57a839ef7902485c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42bfeec53c266fb0b08ad90d324206bd3d64df16", "url": "https://api.github.com/repos/rust-lang/rust/commits/42bfeec53c266fb0b08ad90d324206bd3d64df16", "html_url": "https://github.com/rust-lang/rust/commit/42bfeec53c266fb0b08ad90d324206bd3d64df16"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "5391060cb01e46a41d8e4ce8c2da7fa8e650884b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c76d66e9238840d96b1910ba57a839ef7902485c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c76d66e9238840d96b1910ba57a839ef7902485c/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=c76d66e9238840d96b1910ba57a839ef7902485c", "patch": "@@ -453,29 +453,25 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n             let dtor_predicates = ty::lookup_predicates(rcx.tcx(), impl_did);\n \n             let has_pred_of_interest = dtor_predicates.predicates.iter().any(|pred| {\n-                // In `impl<T> Drop where ...`, we automatically\n-                // assume some predicate will be meaningful and thus\n-                // represents a type through which we could reach\n-                // borrowed data. However, there can be implicit\n-                // predicates (namely for Sized), and so we still need\n-                // to walk through and filter out those cases.\n+                // In `impl<T> Drop where ...`, assume most predicates\n+                // represent capability on `T` via which a destructor\n+                // could access borrowed data. But some bounds (Sized,\n+                // Copy, etc), have no items, i.e. no added capabilty\n+                // for such type-specific access.\n \n                 let result = match *pred {\n                     ty::Predicate::Trait(ty::Binder(ref t_pred)) => {\n                         let def_id = t_pred.trait_ref.def_id;\n-                        match rcx.tcx().lang_items.to_builtin_kind(def_id) {\n-                            // Issue 24895: deliberately do not include `BoundCopy` here.\n-                            Some(ty::BoundSend) |\n-                            Some(ty::BoundSized) |\n-                            Some(ty::BoundSync) => false,\n-                            _ => true,\n-                        }\n+                        // A OIBIT (or even a normal builtin) trait\n+                        // defines no associated items, and is\n+                        // uninteresting from point of view of dropck.\n+                        ty::trait_items(rcx.tcx(), def_id).len() != 0\n                     }\n                     ty::Predicate::Equate(..) |\n                     ty::Predicate::RegionOutlives(..) |\n                     ty::Predicate::TypeOutlives(..) |\n                     ty::Predicate::Projection(..) => {\n-                        // we assume all of these where-clauses may\n+                        // for now, assume all other where-clauses may\n                         // give the drop implementation the capabilty\n                         // to access borrowed data.\n                         true"}]}