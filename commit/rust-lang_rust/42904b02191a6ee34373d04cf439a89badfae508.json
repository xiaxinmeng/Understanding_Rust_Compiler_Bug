{"sha": "42904b02191a6ee34373d04cf439a89badfae508", "node_id": "C_kwDOAAsO6NoAKDQyOTA0YjAyMTkxYTZlZTM0MzczZDA0Y2Y0MzlhODliYWRmYWU1MDg", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-09T23:17:14Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T23:58:23Z"}, "message": "Delete Decoder::read_seq", "tree": {"sha": "cbb847a6fca4f38393b68ddc8dd726d9f7d4d9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbb847a6fca4f38393b68ddc8dd726d9f7d4d9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42904b02191a6ee34373d04cf439a89badfae508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42904b02191a6ee34373d04cf439a89badfae508", "html_url": "https://github.com/rust-lang/rust/commit/42904b02191a6ee34373d04cf439a89badfae508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42904b02191a6ee34373d04cf439a89badfae508/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75614c06ee2212bf171a301e6d6e0a2f5429126f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75614c06ee2212bf171a301e6d6e0a2f5429126f", "html_url": "https://github.com/rust-lang/rust/commit/75614c06ee2212bf171a301e6d6e0a2f5429126f"}], "stats": {"total": 118, "additions": 54, "deletions": 64}, "files": [{"sha": "9778f77384cf93dd9bc974c177de2b54fec4bbe2", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=42904b02191a6ee34373d04cf439a89badfae508", "patch": "@@ -130,16 +130,16 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n             let _i: SerializedDepNodeIndex = fingerprints.push(fingerprint);\n             debug_assert_eq!(_i.index(), _index);\n \n-            d.read_seq(|d, len| {\n-                let start = edge_list_data.len().try_into().unwrap();\n-                for _ in 0..len {\n-                    let edge = Decodable::decode(d);\n-                    edge_list_data.push(edge);\n-                }\n-                let end = edge_list_data.len().try_into().unwrap();\n-                let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n-                debug_assert_eq!(_i.index(), _index);\n-            })\n+            // Deserialize edges -- sequence of DepNodeIndex\n+            let len = d.read_usize();\n+            let start = edge_list_data.len().try_into().unwrap();\n+            for _ in 0..len {\n+                let edge = Decodable::decode(d);\n+                edge_list_data.push(edge);\n+            }\n+            let end = edge_list_data.len().try_into().unwrap();\n+            let _i: SerializedDepNodeIndex = edge_list_indices.push((start, end));\n+            debug_assert_eq!(_i.index(), _index);\n         }\n \n         let index: FxHashMap<_, _> ="}, {"sha": "41faf4f70ac633970fb662bdb97a6815a9a3f9c2", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=42904b02191a6ee34373d04cf439a89badfae508", "patch": "@@ -18,7 +18,8 @@ impl<S: Encoder, A: Array<Item: Encodable<S>>> Encodable<S> for SmallVec<A> {\n \n impl<D: Decoder, A: Array<Item: Decodable<D>>> Decodable<D> for SmallVec<A> {\n     fn decode(d: &mut D) -> SmallVec<A> {\n-        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n+        let len = d.read_usize();\n+        (0..len).map(|_| Decodable::decode(d)).collect()\n     }\n }\n \n@@ -35,7 +36,8 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for LinkedList<T> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for LinkedList<T> {\n     fn decode(d: &mut D) -> LinkedList<T> {\n-        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n+        let len = d.read_usize();\n+        (0..len).map(|_| Decodable::decode(d)).collect()\n     }\n }\n \n@@ -52,7 +54,8 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for VecDeque<T> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for VecDeque<T> {\n     fn decode(d: &mut D) -> VecDeque<T> {\n-        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n+        let len = d.read_usize();\n+        (0..len).map(|_| Decodable::decode(d)).collect()\n     }\n }\n \n@@ -109,13 +112,12 @@ where\n     T: Decodable<D> + PartialEq + Ord,\n {\n     fn decode(d: &mut D) -> BTreeSet<T> {\n-        d.read_seq(|d, len| {\n-            let mut set = BTreeSet::new();\n-            for _ in 0..len {\n-                set.insert(Decodable::decode(d));\n-            }\n-            set\n-        })\n+        let len = d.read_usize();\n+        let mut set = BTreeSet::new();\n+        for _ in 0..len {\n+            set.insert(Decodable::decode(d));\n+        }\n+        set\n     }\n }\n \n@@ -187,14 +189,13 @@ where\n     S: BuildHasher + Default,\n {\n     fn decode(d: &mut D) -> HashSet<T, S> {\n-        d.read_seq(|d, len| {\n-            let state = Default::default();\n-            let mut set = HashSet::with_capacity_and_hasher(len, state);\n-            for _ in 0..len {\n-                set.insert(Decodable::decode(d));\n-            }\n-            set\n-        })\n+        let len = d.read_usize();\n+        let state = Default::default();\n+        let mut set = HashSet::with_capacity_and_hasher(len, state);\n+        for _ in 0..len {\n+            set.insert(Decodable::decode(d));\n+        }\n+        set\n     }\n }\n \n@@ -256,14 +257,13 @@ where\n     S: BuildHasher + Default,\n {\n     fn decode(d: &mut D) -> indexmap::IndexSet<T, S> {\n-        d.read_seq(|d, len| {\n-            let state = Default::default();\n-            let mut set = indexmap::IndexSet::with_capacity_and_hasher(len, state);\n-            for _ in 0..len {\n-                set.insert(Decodable::decode(d));\n-            }\n-            set\n-        })\n+        let len = d.read_usize();\n+        let state = Default::default();\n+        let mut set = indexmap::IndexSet::with_capacity_and_hasher(len, state);\n+        for _ in 0..len {\n+            set.insert(Decodable::decode(d));\n+        }\n+        set\n     }\n }\n "}, {"sha": "e36e3033fcc891598a5a93e02a71652587b8f992", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42904b02191a6ee34373d04cf439a89badfae508/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=42904b02191a6ee34373d04cf439a89badfae508", "patch": "@@ -201,14 +201,6 @@ pub trait Decoder {\n     fn read_str(&mut self) -> Cow<'_, str>;\n     fn read_raw_bytes_into(&mut self, s: &mut [u8]);\n \n-    fn read_seq<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self, usize) -> T,\n-    {\n-        let len = self.read_usize();\n-        f(self, len)\n-    }\n-\n     fn read_map<T, F>(&mut self, f: F) -> T\n     where\n         F: FnOnce(&mut Self, usize) -> T,\n@@ -397,19 +389,18 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for Vec<T> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n     default fn decode(d: &mut D) -> Vec<T> {\n-        d.read_seq(|d, len| {\n-            // SAFETY: we set the capacity in advance, only write elements, and\n-            // only set the length at the end once the writing has succeeded.\n-            let mut vec = Vec::with_capacity(len);\n-            unsafe {\n-                let ptr: *mut T = vec.as_mut_ptr();\n-                for i in 0..len {\n-                    std::ptr::write(ptr.offset(i as isize), Decodable::decode(d));\n-                }\n-                vec.set_len(len);\n+        let len = d.read_usize();\n+        // SAFETY: we set the capacity in advance, only write elements, and\n+        // only set the length at the end once the writing has succeeded.\n+        let mut vec = Vec::with_capacity(len);\n+        unsafe {\n+            let ptr: *mut T = vec.as_mut_ptr();\n+            for i in 0..len {\n+                std::ptr::write(ptr.offset(i as isize), Decodable::decode(d));\n             }\n-            vec\n-        })\n+            vec.set_len(len);\n+        }\n+        vec\n     }\n }\n \n@@ -422,14 +413,13 @@ impl<S: Encoder, T: Encodable<S>, const N: usize> Encodable<S> for [T; N] {\n \n impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n     fn decode(d: &mut D) -> [u8; N] {\n-        d.read_seq(|d, len| {\n-            assert!(len == N);\n-            let mut v = [0u8; N];\n-            for i in 0..len {\n-                v[i] = Decodable::decode(d);\n-            }\n-            v\n-        })\n+        let len = d.read_usize();\n+        assert!(len == N);\n+        let mut v = [0u8; N];\n+        for i in 0..len {\n+            v[i] = Decodable::decode(d);\n+        }\n+        v\n     }\n }\n "}]}