{"sha": "75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1ZWE3YzdmYzI3ZTJjYTMwNmQ3YTVjN2I5MmEyYTUzMWIyNjI2MDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-05T08:28:33Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-10T07:58:17Z"}, "message": "typos and spaces", "tree": {"sha": "9cf497493884e0c65abaae5d90932da48edb7689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cf497493884e0c65abaae5d90932da48edb7689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "html_url": "https://github.com/rust-lang/rust/commit/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03545109f46a564ac21771125c036332d5b95bb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/03545109f46a564ac21771125c036332d5b95bb1", "html_url": "https://github.com/rust-lang/rust/commit/03545109f46a564ac21771125c036332d5b95bb1"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "9e54b146fd02a61edcf79d88ccd9de0ca1d9804d", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> ConstValue<'tcx> {\n /// size. Like a range of bytes in an `Allocation`, a `Scalar` can either represent the raw bytes\n /// of a simple value or a pointer into another `Allocation`\n #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum Scalar<Tag=(),Id=AllocId> {\n+pub enum Scalar<Tag=(), Id=AllocId> {\n     /// The raw bytes of a simple value.\n     Bits {\n         /// The first `size` bytes are the value.\n@@ -96,7 +96,7 @@ pub enum Scalar<Tag=(),Id=AllocId> {\n     /// A pointer into an `Allocation`. An `Allocation` in the `memory` module has a list of\n     /// relocations, but a `Scalar` is only large enough to contain one, so we just represent the\n     /// relocation and its associated offset together as a `Pointer` here.\n-    Ptr(Pointer<Tag,Id>),\n+    Ptr(Pointer<Tag, Id>),\n }\n \n impl<'tcx> Scalar<()> {"}, {"sha": "b44ed2d0d35be70952ac94d5dcb2781173441ab9", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "patch": "@@ -765,7 +765,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n         // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and\n         // `dest` could possibly overlap.\n-        // The pointers above remain valid even if the `HashMap` table moved around because they\n+        // The pointers above remain valid even if the `HashMap` table is moved around because they\n         // point into the `Vec` storing the bytes.\n         unsafe {\n             assert_eq!(size.bytes() as usize as u64, size.bytes());"}, {"sha": "039a92cee2ca2fcfba65f06617ece23d6de56141", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "patch": "@@ -25,8 +25,8 @@ use rustc::mir::interpret::{\n use super::{EvalContext, Machine, MemPlace, MPlaceTy, MemoryKind};\n \n #[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, RustcEncodable, RustcDecodable, Hash)]\n-pub enum ScalarMaybeUndef<Tag=(),Id=AllocId> {\n-    Scalar(Scalar<Tag,Id>),\n+pub enum ScalarMaybeUndef<Tag=(), Id=AllocId> {\n+    Scalar(Scalar<Tag, Id>),\n     Undef,\n }\n \n@@ -147,9 +147,9 @@ impl<'tcx, Tag> ScalarMaybeUndef<Tag> {\n /// In particular, thanks to `ScalarPair`, arithmetic operations and casts can be entirely\n /// defined on `Value`, and do not have to work with a `Place`.\n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n-pub enum Value<Tag=(),Id=AllocId> {\n-    Scalar(ScalarMaybeUndef<Tag,Id>),\n-    ScalarPair(ScalarMaybeUndef<Tag,Id>, ScalarMaybeUndef<Tag,Id>),\n+pub enum Value<Tag=(), Id=AllocId> {\n+    Scalar(ScalarMaybeUndef<Tag, Id>),\n+    ScalarPair(ScalarMaybeUndef<Tag, Id>, ScalarMaybeUndef<Tag, Id>),\n }\n \n impl Value {"}, {"sha": "06aee8605c6e10cc05fadee13a6503f3e0f3959e", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75ea7c7fc27e2ca306d7a5c7b92a2a531b262600/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=75ea7c7fc27e2ca306d7a5c7b92a2a531b262600", "patch": "@@ -110,7 +110,7 @@ macro_rules! impl_snapshot_for {\n         impl<'a, Ctx> self::Snapshot<'a, Ctx> for $enum_name\n             where Ctx: self::SnapshotContext<'a>,\n         {\n-            type Item = $enum_name<(),AllocIdSnapshot<'a>>;\n+            type Item = $enum_name<(), AllocIdSnapshot<'a>>;\n \n             #[inline]\n             fn snapshot(&self, __ctx: &'a Ctx) -> Self::Item {\n@@ -131,7 +131,7 @@ macro_rules! impl_snapshot_for {\n         impl<'a, Ctx> self::Snapshot<'a, Ctx> for $struct_name\n             where Ctx: self::SnapshotContext<'a>,\n         {\n-            type Item = $struct_name<(),AllocIdSnapshot<'a>>;\n+            type Item = $struct_name<(), AllocIdSnapshot<'a>>;\n \n             #[inline]\n             fn snapshot(&self, __ctx: &'a Ctx) -> Self::Item {\n@@ -183,7 +183,7 @@ impl_snapshot_for!(struct Pointer {\n impl<'a, Ctx> Snapshot<'a, Ctx> for Scalar\n     where Ctx: SnapshotContext<'a>,\n {\n-    type Item = Scalar<(),AllocIdSnapshot<'a>>;\n+    type Item = Scalar<(), AllocIdSnapshot<'a>>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n         match self {\n@@ -237,7 +237,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for Place {\n impl<'a, Ctx> Snapshot<'a, Ctx> for Place\n     where Ctx: SnapshotContext<'a>,\n {\n-    type Item = Place<(),AllocIdSnapshot<'a>>;\n+    type Item = Place<(), AllocIdSnapshot<'a>>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n         match self {\n@@ -281,7 +281,7 @@ impl_snapshot_for!(enum LocalValue {\n impl<'a, Ctx> Snapshot<'a, Ctx> for Relocations\n     where Ctx: SnapshotContext<'a>,\n {\n-    type Item = Relocations<(),AllocIdSnapshot<'a>>;\n+    type Item = Relocations<(), AllocIdSnapshot<'a>>;\n \n     fn snapshot(&self, ctx: &'a Ctx) -> Self::Item {\n         Relocations::from_presorted(self.iter()\n@@ -293,7 +293,7 @@ impl<'a, Ctx> Snapshot<'a, Ctx> for Relocations\n #[derive(Eq, PartialEq)]\n struct AllocationSnapshot<'a> {\n     bytes: &'a [u8],\n-    relocations: Relocations<(),AllocIdSnapshot<'a>>,\n+    relocations: Relocations<(), AllocIdSnapshot<'a>>,\n     undef_mask: &'a UndefMask,\n     align: &'a Align,\n     mutability: &'a Mutability,\n@@ -337,8 +337,8 @@ struct FrameSnapshot<'a, 'tcx: 'a> {\n     instance: &'a ty::Instance<'tcx>,\n     span: &'a Span,\n     return_to_block: &'a StackPopCleanup,\n-    return_place: Place<(),AllocIdSnapshot<'a>>,\n-    locals: IndexVec<mir::Local, LocalValue<(),AllocIdSnapshot<'a>>>,\n+    return_place: Place<(), AllocIdSnapshot<'a>>,\n+    locals: IndexVec<mir::Local, LocalValue<(), AllocIdSnapshot<'a>>>,\n     block: &'a mir::BasicBlock,\n     stmt: usize,\n }"}]}