{"sha": "3754572b0a6859c4ab2730c2ccaafa89217bfb04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NTQ1NzJiMGE2ODU5YzRhYjI3MzBjMmNjYWFmYTg5MjE3YmZiMDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-02T06:00:23Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-04T01:12:48Z"}, "message": "Release of an Undef local is fine, and a NOP", "tree": {"sha": "2513cc872bd0e20c1779e068ce6bd53684ad62b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2513cc872bd0e20c1779e068ce6bd53684ad62b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3754572b0a6859c4ab2730c2ccaafa89217bfb04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3754572b0a6859c4ab2730c2ccaafa89217bfb04", "html_url": "https://github.com/rust-lang/rust/commit/3754572b0a6859c4ab2730c2ccaafa89217bfb04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3754572b0a6859c4ab2730c2ccaafa89217bfb04/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85dc3e563ea52f54e57f1a1f2422c54c3680e2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/85dc3e563ea52f54e57f1a1f2422c54c3680e2ec", "html_url": "https://github.com/rust-lang/rust/commit/85dc3e563ea52f54e57f1a1f2422c54c3680e2ec"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "bc3affed836ef09bfd3368c2cefc847b4e499257", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3754572b0a6859c4ab2730c2ccaafa89217bfb04/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3754572b0a6859c4ab2730c2ccaafa89217bfb04/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=3754572b0a6859c4ab2730c2ccaafa89217bfb04", "patch": "@@ -11,7 +11,7 @@ use super::{\n     EvalError, EvalResult, EvalErrorKind,\n     EvalContext, DynamicLifetime,\n     AccessKind, LockInfo,\n-    Value,\n+    PrimVal, Value,\n     Lvalue, LvalueExtra,\n     Machine,\n };\n@@ -179,14 +179,16 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n         }\n \n+        // Release of an Undef local is fine, and a NOP.\n         // HACK: For now, bail out if we hit a dead local during recovery (can happen because sometimes we have\n         // StorageDead before EndRegion).\n         // TODO: We should rather fix the MIR.\n         match query.lval {\n             Lvalue::Local { frame, local } => {\n                 let res = self.stack[frame].get_local(local);\n                 match (res, mode) {\n-                    (Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..}), ValidationMode::Recover(_)) => {\n+                    (Err(EvalError{ kind: EvalErrorKind::DeadLocal, ..}), ValidationMode::Recover(_)) |\n+                    (Ok(Value::ByVal(PrimVal::Undef)), ValidationMode::Release) => {\n                         return Ok(());\n                     }\n                     _ => {},"}]}