{"sha": "30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "node_id": "C_kwDOAAsO6NoAKDMwYWRmZDZhMTdiZDBkN2M0ZDEzMDJjYzRhMGY5Mjk2MjU3N2RlNGE", "commit": {"author": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-27T23:50:11Z"}, "committer": {"name": "Nathan Stocks", "email": "cleancut@github.com", "date": "2022-08-31T16:56:42Z"}, "message": "port 5 new diagnostics that appeared in master", "tree": {"sha": "41decd9dd784a2674813e33dc8c8c5ee06615c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41decd9dd784a2674813e33dc8c8c5ee06615c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "html_url": "https://github.com/rust-lang/rust/commit/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/comments", "author": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "committer": {"login": "CleanCut", "id": 5838512, "node_id": "MDQ6VXNlcjU4Mzg1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/5838512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CleanCut", "html_url": "https://github.com/CleanCut", "followers_url": "https://api.github.com/users/CleanCut/followers", "following_url": "https://api.github.com/users/CleanCut/following{/other_user}", "gists_url": "https://api.github.com/users/CleanCut/gists{/gist_id}", "starred_url": "https://api.github.com/users/CleanCut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CleanCut/subscriptions", "organizations_url": "https://api.github.com/users/CleanCut/orgs", "repos_url": "https://api.github.com/users/CleanCut/repos", "events_url": "https://api.github.com/users/CleanCut/events{/privacy}", "received_events_url": "https://api.github.com/users/CleanCut/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "0d65819d529f222e47164f6c8132d8134909f2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d65819d529f222e47164f6c8132d8134909f2a4", "html_url": "https://github.com/rust-lang/rust/commit/0d65819d529f222e47164f6c8132d8134909f2a4"}], "stats": {"total": 87, "additions": 67, "deletions": 20}, "files": [{"sha": "00067a1bf6ad72362cffabacaa9b5804c8703f70", "filename": "compiler/rustc_error_messages/locales/en-US/metadata.ftl", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmetadata.ftl?ref=30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "patch": "@@ -255,3 +255,18 @@ metadata_crate_location_unknown_type =\n \n metadata_lib_filename_form =\n     file name should be lib*.rlib or {dll_prefix}*.{dll_suffix}\n+\n+metadata_multiple_import_name_type =\n+    multiple `import_name_type` arguments in a single `#[link]` attribute\n+\n+metadata_import_name_type_form =\n+    import name type must be of the form `import_name_type = \"string\"`\n+\n+metadata_import_name_type_x86 =\n+    import name type is only supported on x86\n+\n+metadata_unknown_import_name_type =\n+    unknown import name type `{$import_name_type}`, expected one of: decorated, noprefix, undecorated\n+\n+metadata_import_name_type_raw =\n+    import name type can only be used with link kind `raw-dylib`"}, {"sha": "18d0248333a510ad7861e4307a95429cc22b2968", "filename": "compiler/rustc_metadata/src/errors.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Ferrors.rs?ref=30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "patch": "@@ -634,3 +634,39 @@ pub struct LibFilenameForm<'a> {\n     pub dll_prefix: &'a str,\n     pub dll_suffix: &'a str,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::multiple_import_name_type)]\n+pub struct MultipleImportNameType {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::import_name_type_form)]\n+pub struct ImportNameTypeForm {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::import_name_type_x86)]\n+pub struct ImportNameTypeX86 {\n+    #[primary_span]\n+    pub span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::unknown_import_name_type)]\n+pub struct UnknownImportNameType<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub import_name_type: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(metadata::import_name_type_raw)]\n+pub struct ImportNameTypeRaw {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "87b5e750f1cb14fba7110775e572e53af2aa34ae", "filename": "compiler/rustc_metadata/src/native_libs.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30adfd6a17bd0d7c4d1302cc4a0f92962577de4a/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fnative_libs.rs?ref=30adfd6a17bd0d7c4d1302cc4a0f92962577de4a", "patch": "@@ -13,13 +13,14 @@ use rustc_target::spec::abi::Abi;\n \n use crate::errors::{\n     AsNeededCompatibility, BundleNeedsStatic, EmptyLinkName, EmptyRenamingTarget,\n-    FrameworkOnlyWindows, IncompatibleWasmLink, InvalidLinkModifier, LibFrameworkApple,\n-    LinkCfgForm, LinkCfgSinglePredicate, LinkFrameworkApple, LinkKindForm, LinkModifiersForm,\n-    LinkNameForm, LinkOrdinalRawDylib, LinkRequiresName, MultipleCfgs, MultipleKindsInLink,\n-    MultipleLinkModifiers, MultipleModifiers, MultipleNamesInLink, MultipleRenamings,\n-    MultipleWasmImport, NoLinkModOverride, RawDylibNoNul, RenamingNoLink, UnexpectedLinkArg,\n-    UnknownLinkKind, UnknownLinkModifier, UnsupportedAbi, UnsupportedAbiI686, WasmImportForm,\n-    WholeArchiveNeedsStatic,\n+    FrameworkOnlyWindows, ImportNameTypeForm, ImportNameTypeRaw, ImportNameTypeX86,\n+    IncompatibleWasmLink, InvalidLinkModifier, LibFrameworkApple, LinkCfgForm,\n+    LinkCfgSinglePredicate, LinkFrameworkApple, LinkKindForm, LinkModifiersForm, LinkNameForm,\n+    LinkOrdinalRawDylib, LinkRequiresName, MultipleCfgs, MultipleImportNameType,\n+    MultipleKindsInLink, MultipleLinkModifiers, MultipleModifiers, MultipleNamesInLink,\n+    MultipleRenamings, MultipleWasmImport, NoLinkModOverride, RawDylibNoNul, RenamingNoLink,\n+    UnexpectedLinkArg, UnknownImportNameType, UnknownLinkKind, UnknownLinkModifier, UnsupportedAbi,\n+    UnsupportedAbiI686, WasmImportForm, WholeArchiveNeedsStatic,\n };\n \n pub(crate) fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n@@ -178,18 +179,15 @@ impl<'tcx> Collector<'tcx> {\n                     }\n                     sym::import_name_type => {\n                         if import_name_type.is_some() {\n-                            let msg = \"multiple `import_name_type` arguments in a single `#[link]` attribute\";\n-                            sess.span_err(item.span(), msg);\n+                            sess.emit_err(MultipleImportNameType { span: item.span() });\n                             continue;\n                         }\n                         let Some(link_import_name_type) = item.value_str() else {\n-                            let msg = \"import name type must be of the form `import_name_type = \\\"string\\\"`\";\n-                            sess.span_err(item.span(), msg);\n+                            sess.emit_err(ImportNameTypeForm { span: item.span() });\n                             continue;\n                         };\n                         if self.tcx.sess.target.arch != \"x86\" {\n-                            let msg = \"import name type is only supported on x86\";\n-                            sess.span_err(item.span(), msg);\n+                            sess.emit_err(ImportNameTypeX86 { span: item.span() });\n                             continue;\n                         }\n \n@@ -198,11 +196,10 @@ impl<'tcx> Collector<'tcx> {\n                             \"noprefix\" => PeImportNameType::NoPrefix,\n                             \"undecorated\" => PeImportNameType::Undecorated,\n                             import_name_type => {\n-                                let msg = format!(\n-                                    \"unknown import name type `{import_name_type}`, expected one of: \\\n-                                     decorated, noprefix, undecorated\"\n-                                );\n-                                sess.span_err(item.span(), msg);\n+                                sess.emit_err(UnknownImportNameType {\n+                                    span: item.span(),\n+                                    import_name_type,\n+                                });\n                                 continue;\n                             }\n                         };\n@@ -301,8 +298,7 @@ impl<'tcx> Collector<'tcx> {\n             // Do this outside of the loop so that `import_name_type` can be specified before `kind`.\n             if let Some((_, span)) = import_name_type {\n                 if kind != Some(NativeLibKind::RawDylib) {\n-                    let msg = \"import name type can only be used with link kind `raw-dylib`\";\n-                    sess.span_err(span, msg);\n+                    sess.emit_err(ImportNameTypeRaw { span });\n                 }\n             }\n "}]}