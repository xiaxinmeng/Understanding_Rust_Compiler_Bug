{"sha": "3b4d34d4faa10336847335e68417f49eb8882693", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNGQzNGQ0ZmFhMTAzMzY4NDczMzVlNjg0MTdmNDllYjg4ODI2OTM=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-04-18T19:20:02Z"}, "committer": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2017-04-20T18:33:05Z"}, "message": "Expanded docs and examples for PathBuf::file_name and friends", "tree": {"sha": "9f4015d85bfee16abb43f09317cdeb7d1199d564", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f4015d85bfee16abb43f09317cdeb7d1199d564"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4d34d4faa10336847335e68417f49eb8882693", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4d34d4faa10336847335e68417f49eb8882693", "html_url": "https://github.com/rust-lang/rust/commit/3b4d34d4faa10336847335e68417f49eb8882693", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4d34d4faa10336847335e68417f49eb8882693/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "968ae7babecfc6c62ef9699ff052d9ab00411848", "url": "https://api.github.com/repos/rust-lang/rust/commits/968ae7babecfc6c62ef9699ff052d9ab00411848", "html_url": "https://github.com/rust-lang/rust/commit/968ae7babecfc6c62ef9699ff052d9ab00411848"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "15bc74a83401096c22d6d7799e24ff9c8e110736", "filename": "src/libstd/path.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3b4d34d4faa10336847335e68417f49eb8882693/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4d34d4faa10336847335e68417f49eb8882693/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=3b4d34d4faa10336847335e68417f49eb8882693", "patch": "@@ -1189,8 +1189,13 @@ impl PathBuf {\n     /// If [`self.file_name`] was [`None`], this is equivalent to pushing\n     /// `file_name`.\n     ///\n+    /// Otherwise it is equivalent to calling [`pop`] and then pushing\n+    /// `file_name`. The new path will be a sibling of the original path.\n+    /// (That is, it will have the same parent.)\n+    ///\n     /// [`self.file_name`]: struct.PathBuf.html#method.file_name\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`pop`]: struct.PathBuf.html#method.pop\n     ///\n     /// # Examples\n     ///\n@@ -1725,7 +1730,10 @@ impl Path {\n         })\n     }\n \n-    /// Returns the final component of the `Path`, if it is a normal file.\n+    /// Returns the final component of the `Path`, if there is one.\n+    ///\n+    /// If the path is a normal file, this is the file name. If it's the path of a directory, this\n+    /// is the directory name.\n     ///\n     /// Returns [`None`] If the path terminates in `..`.\n     ///\n@@ -1737,10 +1745,12 @@ impl Path {\n     /// use std::path::Path;\n     /// use std::ffi::OsStr;\n     ///\n-    /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt\").file_name());\n+    /// assert_eq!(Some(OsStr::new(\"bin\")), Path::new(\"/usr/bin/\").file_name());\n+    /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"tmp/foo.txt\").file_name());\n     /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.\").file_name());\n     /// assert_eq!(Some(OsStr::new(\"foo.txt\")), Path::new(\"foo.txt/.//\").file_name());\n     /// assert_eq!(None, Path::new(\"foo.txt/..\").file_name());\n+    /// assert_eq!(None, Path::new(\"/\").file_name());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn file_name(&self) -> Option<&OsStr> {\n@@ -1926,6 +1936,9 @@ impl Path {\n     ///\n     /// let path = Path::new(\"/tmp/foo.txt\");\n     /// assert_eq!(path.with_file_name(\"bar.txt\"), PathBuf::from(\"/tmp/bar.txt\"));\n+    ///\n+    /// let path = Path::new(\"/tmp\");\n+    /// assert_eq!(path.with_file_name(\"var\"), PathBuf::from(\"/var\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn with_file_name<S: AsRef<OsStr>>(&self, file_name: S) -> PathBuf {"}]}