{"sha": "a36c9d8b5ce8f6468f9387fab590ad48381c1313", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzNmM5ZDhiNWNlOGY2NDY4ZjkzODdmYWI1OTBhZDQ4MzgxYzEzMTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-21T19:41:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T19:41:59Z"}, "message": "Merge #9669\n\n9669: minor: Move out fn_param tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "7e619a31a5c28a3961e4977c65f2629226adbc26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e619a31a5c28a3961e4977c65f2629226adbc26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a36c9d8b5ce8f6468f9387fab590ad48381c1313", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+HiHCRBK7hj4Ov3rIwAAGn8IADkfqNJ7JsJpAE8RhqK8TxPa\nMxg8ozOBLXvr1LS9ZhCvWeGkVU1do3JwqdOuZReo8sxE9P/A85S+KN42emF+L19Y\nCVBXZw3wSfmV6la4FIzK6YAFuQRpapJPnTeti+OsqIsKnPJFn8AgWRn3PZFRy5vm\nyt/o5zN4J+iBNaRJDa1J8Pp5hGDLip/DjX5K7tszskfwJU1WGgCZNFLmGTyqkSwr\nKI4DDA/4MtYZSa8lPUv+B/Rfn+ZaHX4ePMvZqjJSK2Y7ZgAqwVeCaG9WqBKgY6+H\nt0gvI88+GEsJCRg8jK7ULVlWmLzybSDoSq46exNUKngoPGbfV7dybj9khlAZ2CQ=\n=Vqgm\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e619a31a5c28a3961e4977c65f2629226adbc26\nparent b7e80d14f599701f0c09c045159b56a6bf5c609b\nparent 03efb50ae8f453dbc01f436f042eef2d253862d2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626896519 +0000\ncommitter GitHub <noreply@github.com> 1626896519 +0000\n\nMerge #9669\n\n9669: minor: Move out fn_param tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a36c9d8b5ce8f6468f9387fab590ad48381c1313", "html_url": "https://github.com/rust-lang/rust/commit/a36c9d8b5ce8f6468f9387fab590ad48381c1313", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a36c9d8b5ce8f6468f9387fab590ad48381c1313/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7e80d14f599701f0c09c045159b56a6bf5c609b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e80d14f599701f0c09c045159b56a6bf5c609b", "html_url": "https://github.com/rust-lang/rust/commit/b7e80d14f599701f0c09c045159b56a6bf5c609b"}, {"sha": "03efb50ae8f453dbc01f436f042eef2d253862d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/03efb50ae8f453dbc01f436f042eef2d253862d2", "html_url": "https://github.com/rust-lang/rust/commit/03efb50ae8f453dbc01f436f042eef2d253862d2"}], "stats": {"total": 274, "additions": 152, "deletions": 122}, "files": [{"sha": "80ad3b9c8f65a23dfe1385c0f6dc93e9bff01884", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=a36c9d8b5ce8f6468f9387fab590ad48381c1313", "patch": "@@ -75,124 +75,3 @@ fn add_new_item_to_acc(\n     item.kind(CompletionItemKind::Binding).lookup_by(lookup);\n     item.add_to(acc)\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::{tests::filtered_completion_list, CompletionKind};\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n-        expect.assert_eq(&actual);\n-    }\n-\n-    #[test]\n-    fn test_param_completion_last_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn bar(file_id: FileId) {}\n-fn baz(file$0) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_first_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn bar(file_id: FileId) {}\n-fn baz(file$0 id: u32) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_nth_param() {\n-        check(\n-            r#\"\n-fn foo(file_id: FileId) {}\n-fn baz(file$0, x: i32) {}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_param_completion_trait_param() {\n-        check(\n-            r#\"\n-pub(crate) trait SourceRoot {\n-    pub fn contains(&self, file_id: FileId) -> bool;\n-    pub fn module_map(&self) -> &ModuleMap;\n-    pub fn lines(&self, file_id: FileId) -> &LineIndex;\n-    pub fn syntax(&self, file$0)\n-}\n-\"#,\n-            expect![[r#\"\n-                bn file_id: FileId\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_param_in_inner_function() {\n-        check(\n-            r#\"\n-fn outer(text: String) {\n-    fn inner($0)\n-}\n-\"#,\n-            expect![[r#\"\n-                bn text: String\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_non_ident_pat_param() {\n-        check(\n-            r#\"\n-struct Bar { bar: u32 }\n-\n-fn foo(Bar { bar }: Bar) {}\n-fn foo2($0) {}\n-\"#,\n-            expect![[r#\"\n-                bn Bar { bar }: Bar\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn test_param_completion_self_param() {\n-        check(\n-            r#\"\n-                struct A {}\n-\n-                impl A {\n-                    fn foo(file_id: FileId) {}\n-                    fn new($0) {\n-                    }\n-                }\n-            \"#,\n-            expect![[r#\"\n-                bn self\n-                bn &self\n-                bn mut self\n-                bn &mut self\n-                bn file_id: FileId\n-            \"#]],\n-        )\n-    }\n-}"}, {"sha": "0b0c828617513844b453f57ddfa7d22d0de4abcd", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=a36c9d8b5ce8f6468f9387fab590ad48381c1313", "patch": "@@ -5,6 +5,7 @@\n //! Notable examples for completions that are being tested in this module's submodule are paths.\n \n mod attribute;\n+mod fn_param;\n mod item_list;\n mod item;\n mod pattern;"}, {"sha": "8a07aefafe34abcad7aa4cd4381f8b8205a8e500", "filename": "crates/ide_completion/src/tests/fn_param.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=a36c9d8b5ce8f6468f9387fab590ad48381c1313", "patch": "@@ -0,0 +1,150 @@\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual);\n+}\n+\n+#[test]\n+fn only_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(file$0) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn last_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(foo: (), file$0) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn first_param() {\n+    check(\n+        r#\"\n+fn foo(file_id: usize) {}\n+fn bar(file_id: usize) {}\n+fn baz(file$0 id: u32) {}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn trait_param() {\n+    check(\n+        r#\"\n+pub(crate) trait SourceRoot {\n+    pub fn contains(file_id: usize) -> bool;\n+    pub fn syntax(file$0)\n+}\n+\"#,\n+        expect![[r#\"\n+            bn file_id: usize\n+            kw mut\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn in_inner_function() {\n+    check(\n+        r#\"\n+fn outer(text: &str) {\n+    fn inner($0)\n+}\n+\"#,\n+        expect![[r#\"\n+            bn text: &str\n+            kw mut\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn shows_non_ident_pat_param() {\n+    check(\n+        r#\"\n+struct Bar { bar: u32 }\n+fn foo(Bar { bar }: Bar) {}\n+fn foo2($0) {}\n+\"#,\n+        expect![[r#\"\n+            bn Bar { bar }: Bar\n+            kw mut\n+            bn Bar              Bar { bar$1 }: Bar$0\n+            st Bar\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_only_param() {\n+    check(\n+        r#\"\n+struct A {}\n+\n+impl A {\n+    fn foo(file_id: usize) {}\n+    fn new($0) {}\n+}\n+\"#,\n+        expect![[r#\"\n+            bn self\n+            bn &self\n+            bn mut self\n+            bn &mut self\n+            bn file_id: usize\n+            kw mut\n+            sp Self\n+            st A\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn in_impl_after_self() {\n+    // FIXME: self completions should not be here\n+    check(\n+        r#\"\n+struct A {}\n+\n+impl A {\n+    fn foo(file_id: usize) {}\n+    fn new(self, $0) {}\n+}\n+\"#,\n+        expect![[r#\"\n+            bn self\n+            bn &self\n+            bn mut self\n+            bn &mut self\n+            bn file_id: usize\n+            kw mut\n+            sp Self\n+            st A\n+        \"#]],\n+    )\n+}"}, {"sha": "4795e25650bee16c4346aa1b2c5a24a74f8f6c7a", "filename": "crates/ide_db/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a36c9d8b5ce8f6468f9387fab590ad48381c1313/crates%2Fide_db%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fcall_info.rs?ref=a36c9d8b5ce8f6468f9387fab590ad48381c1313", "patch": "@@ -166,7 +166,7 @@ impl ActiveParameter {\n \n         let idx = active_parameter?;\n         let mut params = signature.params(sema.db);\n-        if params.len() <= idx {\n+        if !(idx < params.len()) {\n             cov_mark::hit!(too_many_arguments);\n             return None;\n         }"}]}