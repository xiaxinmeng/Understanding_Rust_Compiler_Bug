{"sha": "5bcc154dffb0aa58eef270f9e7396ec440101ca5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViY2MxNTRkZmZiMGFhNThlZWYyNzBmOWU3Mzk2ZWM0NDAxMDFjYTU=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-20T13:37:14Z"}, "committer": {"name": "Jakub Wieczorek", "email": "jakub@jakub.cc", "date": "2014-09-24T19:03:55Z"}, "message": "Remove unused enum variants", "tree": {"sha": "8f16daae1582095b2e9209d0bb61d8eb30c76a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f16daae1582095b2e9209d0bb61d8eb30c76a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bcc154dffb0aa58eef270f9e7396ec440101ca5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bcc154dffb0aa58eef270f9e7396ec440101ca5", "html_url": "https://github.com/rust-lang/rust/commit/5bcc154dffb0aa58eef270f9e7396ec440101ca5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bcc154dffb0aa58eef270f9e7396ec440101ca5/comments", "author": null, "committer": null, "parents": [{"sha": "3530e4a6471b6948c719f709bc10923c3f5524a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3530e4a6471b6948c719f709bc10923c3f5524a5", "html_url": "https://github.com/rust-lang/rust/commit/3530e4a6471b6948c719f709bc10923c3f5524a5"}], "stats": {"total": 116, "additions": 17, "deletions": 99}, "files": [{"sha": "92ef0c281f282eecc5095b4a9d226925e4fc02b5", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 9, "deletions": 46, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -28,21 +28,12 @@ pub enum ExponentFormat {\n     /// Use exponential notation with the exponent having a base of 10 and the\n     /// exponent sign being `e` or `E`. For example, 1000 would be printed\n     /// 1e3.\n-    ExpDec,\n-    /// Use exponential notation with the exponent having a base of 2 and the\n-    /// exponent sign being `p` or `P`. For example, 8 would be printed 1p3.\n-    ExpBin,\n+    ExpDec\n }\n \n /// The number of digits used for emitting the fractional part of a number, if\n /// any.\n pub enum SignificantDigits {\n-    /// All calculable digits will be printed.\n-    ///\n-    /// Note that bignums or fractions may cause a surprisingly large number\n-    /// of digits to be printed.\n-    DigAll,\n-\n     /// At most the given number of digits will be printed, truncating any\n     /// trailing zeroes.\n     DigMax(uint),\n@@ -53,17 +44,11 @@ pub enum SignificantDigits {\n \n /// How to emit the sign of a number.\n pub enum SignFormat {\n-    /// No sign will be printed. The exponent sign will also be emitted.\n-    SignNone,\n     /// `-` will be printed for negative values, but no sign will be emitted\n     /// for positive numbers.\n-    SignNeg,\n-    /// `+` will be printed for positive values, and `-` will be printed for\n-    /// negative values.\n-    SignAll,\n+    SignNeg\n }\n \n-static DIGIT_P_RADIX: uint = ('p' as uint) - ('a' as uint) + 11u;\n static DIGIT_E_RADIX: uint = ('e' as uint) - ('a' as uint) + 11u;\n \n /**\n@@ -111,9 +96,6 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n         ExpDec if radix >= DIGIT_E_RADIX       // decimal exponent 'e'\n           => fail!(\"float_to_str_bytes_common: radix {} incompatible with \\\n                     use of 'e' as decimal exponent\", radix),\n-        ExpBin if radix >= DIGIT_P_RADIX       // binary exponent 'p'\n-          => fail!(\"float_to_str_bytes_common: radix {} incompatible with \\\n-                    use of 'p' as binary exponent\", radix),\n         _ => ()\n     }\n \n@@ -123,16 +105,10 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n     match num.classify() {\n         FPNaN => return f(\"NaN\".as_bytes()),\n         FPInfinite if num > _0 => {\n-            return match sign {\n-                SignAll => return f(\"+inf\".as_bytes()),\n-                _       => return f(\"inf\".as_bytes()),\n-            };\n+            return f(\"inf\".as_bytes());\n         }\n         FPInfinite if num < _0 => {\n-            return match sign {\n-                SignNone => return f(\"inf\".as_bytes()),\n-                _        => return f(\"-inf\".as_bytes()),\n-            };\n+            return f(\"-inf\".as_bytes());\n         }\n         _ => {}\n     }\n@@ -147,11 +123,10 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n \n     let (num, exp) = match exp_format {\n         ExpNone => (num, 0i32),\n-        ExpDec | ExpBin if num == _0 => (num, 0i32),\n-        ExpDec | ExpBin => {\n+        ExpDec if num == _0 => (num, 0i32),\n+        ExpDec => {\n             let (exp, exp_base) = match exp_format {\n                 ExpDec => (num.abs().log10().floor(), cast::<f64, T>(10.0f64).unwrap()),\n-                ExpBin => (num.abs().log2().floor(), cast::<f64, T>(2.0f64).unwrap()),\n                 ExpNone => fail!(\"unreachable\"),\n             };\n \n@@ -185,21 +160,16 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n \n     // If limited digits, calculate one digit more for rounding.\n     let (limit_digits, digit_count, exact) = match digits {\n-        DigAll          => (false, 0u,      false),\n-        DigMax(count)   => (true,  count+1, false),\n-        DigExact(count) => (true,  count+1, true)\n+        DigMax(count)   => (true, count + 1, false),\n+        DigExact(count) => (true, count + 1, true)\n     };\n \n     // Decide what sign to put in front\n     match sign {\n-        SignNeg | SignAll if neg => {\n+        SignNeg if neg => {\n             buf[end] = b'-';\n             end += 1;\n         }\n-        SignAll => {\n-            buf[end] = b'+';\n-            end += 1;\n-        }\n         _ => ()\n     }\n \n@@ -329,8 +299,6 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n             buf[end] = match exp_format {\n                 ExpDec if exp_upper => 'E',\n                 ExpDec if !exp_upper => 'e',\n-                ExpBin if exp_upper => 'P',\n-                ExpBin if !exp_upper => 'p',\n                 _ => fail!(\"unreachable\"),\n             } as u8;\n             end += 1;\n@@ -356,11 +324,6 @@ pub fn float_to_str_bytes_common<T: Primitive + Float, U>(\n                         fmt::write(&mut filler, args)\n                     }, \"{:-}\", exp);\n                 }\n-                SignNone | SignAll => {\n-                    let _ = format_args!(|args| {\n-                        fmt::write(&mut filler, args)\n-                    }, \"{}\", exp);\n-                }\n             }\n         }\n     }"}, {"sha": "3919bf6bb9442d3fe634b3a14dd9c22409de214b", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -1269,11 +1269,6 @@ impl LintPass for UnusedMut {\n     }\n }\n \n-enum Allocation {\n-    VectorAllocation,\n-    BoxAllocation\n-}\n-\n declare_lint!(UNNECESSARY_ALLOCATION, Warn,\n               \"detects unnecessary allocations that can be eliminated\")\n \n@@ -1285,30 +1280,21 @@ impl LintPass for UnnecessaryAllocation {\n     }\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n-        // Warn if boxing expressions are immediately borrowed.\n-        let allocation = match e.node {\n-            ast::ExprUnary(ast::UnUniq, _) |\n-            ast::ExprUnary(ast::UnBox, _) => BoxAllocation,\n-\n+        match e.node {\n+            ast::ExprUnary(ast::UnUniq, _) | ast::ExprUnary(ast::UnBox, _) => (),\n             _ => return\n-        };\n+        }\n \n         match cx.tcx.adjustments.borrow().find(&e.id) {\n             Some(adjustment) => {\n                 match *adjustment {\n                     ty::AdjustDerefRef(ty::AutoDerefRef { ref autoref, .. }) => {\n-                        match (allocation, autoref) {\n-                            (VectorAllocation, &Some(ty::AutoPtr(_, _, None))) => {\n-                                cx.span_lint(UNNECESSARY_ALLOCATION, e.span,\n-                                             \"unnecessary allocation, the sigil can be removed\");\n-                            }\n-                            (BoxAllocation,\n-                             &Some(ty::AutoPtr(_, ast::MutImmutable, None))) => {\n+                        match autoref {\n+                            &Some(ty::AutoPtr(_, ast::MutImmutable, None)) => {\n                                 cx.span_lint(UNNECESSARY_ALLOCATION, e.span,\n                                              \"unnecessary allocation, use & instead\");\n                             }\n-                            (BoxAllocation,\n-                             &Some(ty::AutoPtr(_, ast::MutMutable, None))) => {\n+                            &Some(ty::AutoPtr(_, ast::MutMutable, None)) => {\n                                 cx.span_lint(UNNECESSARY_ALLOCATION, e.span,\n                                              \"unnecessary allocation, use &mut instead\");\n                             }"}, {"sha": "4f18d00070ad6f232fd5239de7c11c75141e25bd", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -243,12 +243,6 @@ struct BorrowStats {\n \n pub type BckResult<T> = Result<T, BckError>;\n \n-#[deriving(PartialEq)]\n-pub enum PartialTotal {\n-    Partial,   // Loan affects some portion\n-    Total      // Loan affects entire path\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // Loans and loan paths\n "}, {"sha": "7d88ba57ad7b7434208e5a85401a1bbcc479b4b6", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -488,7 +488,6 @@ enum ParentLink {\n #[deriving(PartialEq)]\n enum ModuleKind {\n     NormalModuleKind,\n-    ExternModuleKind,\n     TraitModuleKind,\n     ImplModuleKind,\n     AnonymousModuleKind,\n@@ -3348,7 +3347,6 @@ impl<'a> Resolver<'a> {\n                                     parents\");\n                             return Failed(None);\n                         }\n-                        ExternModuleKind |\n                         TraitModuleKind |\n                         ImplModuleKind |\n                         AnonymousModuleKind => {\n@@ -3446,7 +3444,6 @@ impl<'a> Resolver<'a> {\n                     let new_module = new_module.upgrade().unwrap();\n                     match new_module.kind.get() {\n                         NormalModuleKind => return Some(new_module),\n-                        ExternModuleKind |\n                         TraitModuleKind |\n                         ImplModuleKind |\n                         AnonymousModuleKind => module_ = new_module,\n@@ -3462,7 +3459,6 @@ impl<'a> Resolver<'a> {\n                                                 -> Rc<Module> {\n         match module_.kind.get() {\n             NormalModuleKind => return module_,\n-            ExternModuleKind |\n             TraitModuleKind |\n             ImplModuleKind |\n             AnonymousModuleKind => {"}, {"sha": "5f76c748417b7e48f476434b4c77a3aeee3260ec", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -361,7 +361,6 @@ enum ResolveReason {\n     ResolvingLocal(Span),\n     ResolvingPattern(Span),\n     ResolvingUpvar(ty::UpvarId),\n-    ResolvingImplRes(Span),\n     ResolvingUnboxedClosure(ast::DefId),\n }\n \n@@ -374,7 +373,6 @@ impl ResolveReason {\n             ResolvingUpvar(upvar_id) => {\n                 ty::expr_span(tcx, upvar_id.closure_expr_id)\n             }\n-            ResolvingImplRes(s) => s,\n             ResolvingUnboxedClosure(did) => {\n                 if did.krate == ast::LOCAL_CRATE {\n                     ty::expr_span(tcx, did.node)\n@@ -462,11 +460,6 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                         infer::fixup_err_to_string(e));\n                 }\n \n-                ResolvingImplRes(span) => {\n-                    span_err!(self.tcx.sess, span, E0105,\n-                        \"cannot determine a type for impl supertrait\");\n-                }\n-\n                 ResolvingUnboxedClosure(_) => {\n                     let span = self.reason.span(self.tcx);\n                     self.tcx.sess.span_err(span,"}, {"sha": "3af744824ff9667b7659839627d3a7a54f77ebb0", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -271,9 +271,7 @@ pub enum RegionVariableOrigin {\n pub enum fixup_err {\n     unresolved_int_ty(IntVid),\n     unresolved_float_ty(FloatVid),\n-    unresolved_ty(TyVid),\n-    unresolved_region(RegionVid),\n-    region_var_bound_by_region_var(RegionVid, RegionVid)\n+    unresolved_ty(TyVid)\n }\n \n pub fn fixup_err_to_string(f: fixup_err) -> String {\n@@ -287,11 +285,6 @@ pub fn fixup_err_to_string(f: fixup_err) -> String {\n            the type explicitly\".to_string()\n       }\n       unresolved_ty(_) => \"unconstrained type\".to_string(),\n-      unresolved_region(_) => \"unconstrained region\".to_string(),\n-      region_var_bound_by_region_var(r1, r2) => {\n-        format!(\"region var {:?} bound by another region var {:?}; \\\n-                 this is a bug in rustc\", r1, r2)\n-      }\n     }\n }\n "}, {"sha": "1ed41e6870d7ef3692cb63cccaa5536318248a66", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bcc154dffb0aa58eef270f9e7396ec440101ca5/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=5bcc154dffb0aa58eef270f9e7396ec440101ca5", "patch": "@@ -24,8 +24,7 @@ use std::string;\n #[deriving(PartialEq)]\n enum ArgumentType {\n     Known(string::String),\n-    Unsigned,\n-    String,\n+    Unsigned\n }\n \n enum Position {\n@@ -691,12 +690,6 @@ impl<'a, 'b> Context<'a, 'b> {\n                     }\n                 }\n             }\n-            String => {\n-                return ecx.expr_call_global(sp, vec![\n-                        ecx.ident_of(\"std\"),\n-                        ecx.ident_of(\"fmt\"),\n-                        ecx.ident_of(\"argumentstr\")], vec![arg])\n-            }\n             Unsigned => {\n                 return ecx.expr_call_global(sp, vec![\n                         ecx.ident_of(\"std\"),"}]}