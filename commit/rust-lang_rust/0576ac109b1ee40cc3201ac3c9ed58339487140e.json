{"sha": "0576ac109b1ee40cc3201ac3c9ed58339487140e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NzZhYzEwOWIxZWU0MGNjMzIwMWFjM2M5ZWQ1ODMzOTQ4NzE0MGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-24T17:53:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-24T17:53:45Z"}, "message": "Auto merge of #59397 - kennytm:rollup, r=kennytm\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #59213 (Track changes to robots.txt)\n - #59239 (Remove inline assembly from hint::spin_loop)\n - #59251 (Use a valid name for graphviz graphs)\n - #59296 (Do not encode gensymed imports in metadata)\n - #59328 (Implement specialized nth_back() for Box and Windows.)\n - #59355 (Fix ICE with const generic param in struct)\n - #59377 (Correct minimum system LLVM version in tests)", "tree": {"sha": "c867bd1efbff0bb9b2a4b5bb2e31a0eca7946661", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c867bd1efbff0bb9b2a4b5bb2e31a0eca7946661"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0576ac109b1ee40cc3201ac3c9ed58339487140e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0576ac109b1ee40cc3201ac3c9ed58339487140e", "html_url": "https://github.com/rust-lang/rust/commit/0576ac109b1ee40cc3201ac3c9ed58339487140e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0576ac109b1ee40cc3201ac3c9ed58339487140e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b5f4d0f7ccf5d40168f541d4418bb76d9cb513", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b5f4d0f7ccf5d40168f541d4418bb76d9cb513", "html_url": "https://github.com/rust-lang/rust/commit/c7b5f4d0f7ccf5d40168f541d4418bb76d9cb513"}, {"sha": "00478a0f3c56db92e2abe4dd73b45d7f380fe43f", "url": "https://api.github.com/repos/rust-lang/rust/commits/00478a0f3c56db92e2abe4dd73b45d7f380fe43f", "html_url": "https://github.com/rust-lang/rust/commit/00478a0f3c56db92e2abe4dd73b45d7f380fe43f"}], "stats": {"total": 307, "additions": 233, "deletions": 74}, "files": [{"sha": "a54ec508c1befb41a372f81f5026e21bf59e103e", "filename": "src/doc/robots.txt", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fdoc%2Frobots.txt", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fdoc%2Frobots.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frobots.txt?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,19 @@\n+# NB: This file is not automatically deployed. After changes, it needs to be uploaded manually to doc.rust-lang.org\n+User-agent: *\n+Disallow: /0.3/\n+Disallow: /0.4/\n+Disallow: /0.5/\n+Disallow: /0.6/\n+Disallow: /0.7/\n+Disallow: /0.8/\n+Disallow: /0.9/\n+Disallow: /0.10/\n+Disallow: /0.11.0/\n+Disallow: /0.12.0/\n+Disallow: /1.0.0-alpha/\n+Disallow: /1.0.0-alpha.2/\n+Disallow: /1.0.0-beta/\n+Disallow: /1.0.0-beta.2/\n+Disallow: /1.0.0-beta.3/\n+Disallow: /1.0.0-beta.4/\n+Disallow: /1.0.0-beta.5/"}, {"sha": "b2315c6a7390795bd3a71bc957e8f9014b637dde", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -677,6 +677,9 @@ impl<I: DoubleEndedIterator + ?Sized> DoubleEndedIterator for Box<I> {\n     fn next_back(&mut self) -> Option<I::Item> {\n         (**self).next_back()\n     }\n+    fn nth_back(&mut self, n: usize) -> Option<I::Item> {\n+        (**self).nth_back(n)\n+    }\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I: ExactSizeIterator + ?Sized> ExactSizeIterator for Box<I> {"}, {"sha": "90ff56814fbb153b97dd4452dd53aee29bccfc27", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -115,6 +115,7 @@\n #![feature(maybe_uninit, maybe_uninit_slice, maybe_uninit_array)]\n #![feature(alloc_layout_extra)]\n #![feature(try_trait)]\n+#![feature(iter_nth_back)]\n \n // Allow testing this library\n "}, {"sha": "b2f82ef0d175ccf3124b89728a1e292aeb0895b4", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -62,13 +62,32 @@ pub unsafe fn unreachable_unchecked() -> ! {\n #[inline]\n #[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n pub fn spin_loop() {\n-    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n-    unsafe {\n-        asm!(\"pause\" ::: \"memory\" : \"volatile\");\n+    #[cfg(\n+        all(\n+            any(target_arch = \"x86\", target_arch = \"x86_64\"),\n+            target_feature = \"sse2\"\n+        )\n+    )] {\n+        #[cfg(target_arch = \"x86\")] {\n+            unsafe { crate::arch::x86::_mm_pause() };\n+        }\n+\n+        #[cfg(target_arch = \"x86_64\")] {\n+            unsafe { crate::arch::x86_64::_mm_pause() };\n+        }\n     }\n \n-    #[cfg(target_arch = \"aarch64\")]\n-    unsafe {\n-        asm!(\"yield\" ::: \"memory\" : \"volatile\");\n+    #[cfg(\n+        any(\n+            target_arch = \"aarch64\",\n+            all(target_arch = \"arm\", target_feature = \"v6\")\n+        )\n+    )] {\n+        #[cfg(target_arch = \"aarch64\")] {\n+            unsafe { crate::arch::aarch64::__yield() };\n+        }\n+        #[cfg(target_arch = \"arm\")] {\n+            unsafe { crate::arch::arm::__yield() };\n+        }\n     }\n }"}, {"sha": "4eb5bddb5d2f469d7bb74ae410facfe7907dca8c", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -3867,6 +3867,19 @@ impl<'a, T> DoubleEndedIterator for Windows<'a, T> {\n             ret\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let (end, overflow) = self.v.len().overflowing_sub(n);\n+        if end < self.size || overflow {\n+            self.v = &[];\n+            None\n+        } else {\n+            let ret = &self.v[end-self.size..end];\n+            self.v = &self.v[..end-1];\n+            Some(ret)\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "4946fd52a7e12d7c914e842d1f6cd45347753355", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -578,6 +578,19 @@ fn test_windows_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_windows_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.windows(2);\n+    assert_eq!(c.nth_back(2).unwrap()[0], 2);\n+    assert_eq!(c.next_back().unwrap()[1], 2);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let mut c2 = v2.windows(4);\n+    assert_eq!(c2.nth_back(1).unwrap()[1], 1);\n+    assert_eq!(c2.next_back(), None);\n+}\n+\n #[test]\n fn test_windows_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];"}, {"sha": "8efa025e3dd9d4bfb07637bd3d26bb627fa30b50", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -1156,12 +1156,14 @@ fn prepare_union_metadata(\n // Enums\n //=-----------------------------------------------------------------------------\n \n-// DWARF variant support is only available starting in LLVM 7.\n+// DWARF variant support is only available starting in LLVM 8.\n // Although the earlier enum debug info output did not work properly\n // in all situations, it is better for the time being to continue to\n // sometimes emit the old style rather than emit something completely\n-// useless when rust is compiled against LLVM 6 or older.  This\n-// function decides which representation will be emitted.\n+// useless when rust is compiled against LLVM 6 or older. LLVM 7\n+// contains an early version of the DWARF variant support, and will\n+// crash when handling the new debug info format. This function\n+// decides which representation will be emitted.\n fn use_enum_fallback(cx: &CodegenCx<'_, '_>) -> bool {\n     // On MSVC we have to use the fallback mode, because LLVM doesn't\n     // lower variant parts to PDB."}, {"sha": "ace5198deaf2edb7794520853125c882f227dd50", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -633,10 +633,20 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n     let body = tcx.hir().body(body_id);\n     let cfg = cfg::CFG::new(tcx, &body);\n     let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n+    let hir_id = code.id();\n+    // We have to disassemble the hir_id because name must be ASCII\n+    // alphanumeric. This does not appear in the rendered graph, so it does not\n+    // have to be user friendly.\n+    let name = format!(\n+        \"hir_id_{}_{}_{}\",\n+        hir_id.owner.address_space().index(),\n+        hir_id.owner.as_array_index(),\n+        hir_id.local_id.index(),\n+    );\n     let lcfg = LabelledCFG {\n         tcx,\n         cfg: &cfg,\n-        name: format!(\"node_{}\", code.id()),\n+        name,\n         labelled_edges,\n     };\n "}, {"sha": "551f18b95fe5280d263ccdfc3257f603e467f86b", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -156,7 +156,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let mut flow_inits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n@@ -191,7 +191,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_borrows = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         Borrows::new(tcx, mir, regioncx.clone(), &borrow_set),\n@@ -200,7 +200,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_uninits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n@@ -209,7 +209,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let flow_ever_inits = FlowAtLocation::new(do_dataflow(\n         tcx,\n         mir,\n-        id,\n+        def_id,\n         &attributes,\n         &dead_unwinds,\n         EverInitializedPlaces::new(tcx, mir, &mdpe),"}, {"sha": "d68377681f1ca935ad6a2cc4468a320059c4b483", "filename": "src/librustc_mir/dataflow/graphviz.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fgraphviz.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -1,20 +1,22 @@\n //! Hook into libgraphviz for rendering dataflow graphs for MIR.\n \n-use rustc::hir::HirId;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::{BasicBlock, Mir};\n \n use std::fs;\n use std::io;\n use std::marker::PhantomData;\n use std::path::Path;\n \n+use crate::util::graphviz_safe_def_name;\n+\n use super::{BitDenotation, DataflowState};\n use super::DataflowBuilder;\n use super::DebugFormatted;\n \n pub trait MirWithFlowState<'tcx> {\n     type BD: BitDenotation<'tcx>;\n-    fn hir_id(&self) -> HirId;\n+    fn def_id(&self) -> DefId;\n     fn mir(&self) -> &Mir<'tcx>;\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD>;\n }\n@@ -23,7 +25,7 @@ impl<'a, 'tcx, BD> MirWithFlowState<'tcx> for DataflowBuilder<'a, 'tcx, BD>\n     where BD: BitDenotation<'tcx>\n {\n     type BD = BD;\n-    fn hir_id(&self) -> HirId { self.hir_id }\n+    fn def_id(&self) -> DefId { self.def_id }\n     fn mir(&self) -> &Mir<'tcx> { self.flow_state.mir() }\n     fn flow_state(&self) -> &DataflowState<'tcx, Self::BD> { &self.flow_state.flow_state }\n }\n@@ -47,8 +49,8 @@ pub(crate) fn print_borrowck_graph_to<'a, 'tcx, BD, P>(\n     let g = Graph { mbcx, phantom: PhantomData, render_idx };\n     let mut v = Vec::new();\n     dot::render(&g, &mut v)?;\n-    debug!(\"print_borrowck_graph_to path: {} hir_id: {}\",\n-           path.display(), mbcx.hir_id);\n+    debug!(\"print_borrowck_graph_to path: {} def_id: {:?}\",\n+           path.display(), mbcx.def_id);\n     fs::write(path, v)\n }\n \n@@ -69,9 +71,8 @@ impl<'a, 'tcx, MWF, P> dot::Labeller<'a> for Graph<'a, 'tcx, MWF, P>\n     type Node = Node;\n     type Edge = Edge;\n     fn graph_id(&self) -> dot::Id<'_> {\n-        dot::Id::new(format!(\"graph_for_node_{}\",\n-                             self.mbcx.hir_id()))\n-            .unwrap()\n+        let name = graphviz_safe_def_name(self.mbcx.def_id());\n+        dot::Id::new(format!(\"graph_for_def_id_{}\", name)).unwrap()\n     }\n \n     fn node_id(&self, n: &Node) -> dot::Id<'_> {"}, {"sha": "af0e3f5a2709130764cb7e211568a8f7f1bca623", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::bit_set::{BitSet, BitSetOperator, HybridBitSet};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::work_queue::WorkQueue;\n \n-use rustc::hir::HirId;\n+use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n use rustc::mir::{self, Mir, BasicBlock, BasicBlockData, Location, Statement, Terminator};\n use rustc::mir::traversal;\n@@ -39,7 +39,7 @@ pub(crate) struct DataflowBuilder<'a, 'tcx: 'a, BD>\n where\n     BD: BitDenotation<'tcx>\n {\n-    hir_id: HirId,\n+    def_id: DefId,\n     flow_state: DataflowAnalysis<'a, 'tcx, BD>,\n     print_preflow_to: Option<String>,\n     print_postflow_to: Option<String>,\n@@ -117,7 +117,7 @@ pub struct MoveDataParamEnv<'gcx, 'tcx> {\n \n pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                                  mir: &'a Mir<'tcx>,\n-                                                 hir_id: HirId,\n+                                                 def_id: DefId,\n                                                  attributes: &[ast::Attribute],\n                                                  dead_unwinds: &BitSet<BasicBlock>,\n                                                  bd: BD,\n@@ -127,14 +127,14 @@ pub(crate) fn do_dataflow<'a, 'gcx, 'tcx, BD, P>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n           P: Fn(&BD, BD::Idx) -> DebugFormatted\n {\n     let flow_state = DataflowAnalysis::new(mir, dead_unwinds, bd);\n-    flow_state.run(tcx, hir_id, attributes, p)\n+    flow_state.run(tcx, def_id, attributes, p)\n }\n \n impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation<'tcx>\n {\n     pub(crate) fn run<P>(self,\n                          tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         hir_id: HirId,\n+                         def_id: DefId,\n                          attributes: &[ast::Attribute],\n                          p: P) -> DataflowResults<'tcx, BD>\n         where P: Fn(&BD, BD::Idx) -> DebugFormatted\n@@ -159,7 +159,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitD\n             name_found(tcx.sess, attributes, \"borrowck_graphviz_postflow\");\n \n         let mut mbcx = DataflowBuilder {\n-            hir_id,\n+            def_id,\n             print_preflow_to, print_postflow_to, flow_state: self,\n         };\n "}, {"sha": "023a61588c42e9c964b754319659c4a2f136b725", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -28,7 +28,7 @@ impl MirPass for ElaborateDrops {\n     {\n         debug!(\"elaborate_drops({:?} @ {:?})\", src, mir.span);\n \n-        let id = tcx.hir().as_local_hir_id(src.def_id()).unwrap();\n+        let def_id = src.def_id();\n         let param_env = tcx.param_env(src.def_id()).with_reveal_all();\n         let move_data = match MoveData::gather_moves(mir, tcx) {\n             Ok(move_data) => move_data,\n@@ -50,13 +50,13 @@ impl MirPass for ElaborateDrops {\n                 move_data,\n                 param_env,\n             };\n-            let dead_unwinds = find_dead_unwinds(tcx, mir, id, &env);\n+            let dead_unwinds = find_dead_unwinds(tcx, mir, def_id, &env);\n             let flow_inits =\n-                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                             MaybeInitializedPlaces::new(tcx, mir, &env),\n                             |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n             let flow_uninits =\n-                do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+                do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                             MaybeUninitializedPlaces::new(tcx, mir, &env),\n                             |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n \n@@ -80,7 +80,7 @@ impl MirPass for ElaborateDrops {\n fn find_dead_unwinds<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     mir: &Mir<'tcx>,\n-    id: hir::HirId,\n+    def_id: hir::def_id::DefId,\n     env: &MoveDataParamEnv<'tcx, 'tcx>)\n     -> BitSet<BasicBlock>\n {\n@@ -89,7 +89,7 @@ fn find_dead_unwinds<'a, 'tcx>(\n     // reach cleanup blocks, which can't have unwind edges themselves.\n     let mut dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n     let flow_inits =\n-        do_dataflow(tcx, mir, id, &[], &dead_unwinds,\n+        do_dataflow(tcx, mir, def_id, &[], &dead_unwinds,\n                     MaybeInitializedPlaces::new(tcx, mir, &env),\n                     |bd, p| DebugFormatted::new(&bd.move_data().move_paths[p]));\n     for (bb, bb_data) in mir.basic_blocks().iter_enumerated() {"}, {"sha": "c4e303eb9aa1f044b4980d9144eab05e61482fa4", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -390,13 +390,13 @@ fn locals_live_across_suspend_points(\n     FxHashMap<BasicBlock, liveness::LiveVarSet>,\n ) {\n     let dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n-    let hir_id = tcx.hir().as_local_hir_id(source.def_id()).unwrap();\n+    let def_id = source.def_id();\n \n     // Calculate when MIR locals have live storage. This gives us an upper bound of their\n     // lifetimes.\n     let storage_live_analysis = MaybeStorageLive::new(mir);\n     let storage_live =\n-        do_dataflow(tcx, mir, hir_id, &[], &dead_unwinds, storage_live_analysis,\n+        do_dataflow(tcx, mir, def_id, &[], &dead_unwinds, storage_live_analysis,\n                     |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n \n     // Find the MIR locals which do not use StorageLive/StorageDead statements.\n@@ -410,7 +410,7 @@ fn locals_live_across_suspend_points(\n     let borrowed_locals = if !movable {\n         let analysis = HaveBeenBorrowedLocals::new(mir);\n         let result =\n-            do_dataflow(tcx, mir, hir_id, &[], &dead_unwinds, analysis,\n+            do_dataflow(tcx, mir, def_id, &[], &dead_unwinds, analysis,\n                         |bd, p| DebugFormatted::new(&bd.mir().local_decls[p]));\n         Some((analysis, result))\n     } else {"}, {"sha": "246f876235d71c384a782fbf24ec7523d0d14581", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -3,7 +3,7 @@ use syntax::ast;\n use syntax_pos::Span;\n \n use rustc::ty::{self, TyCtxt};\n-use rustc::hir;\n+use rustc::hir::def_id::DefId;\n use rustc::mir::{self, Mir, Location};\n use rustc_data_structures::bit_set::BitSet;\n use crate::transform::{MirPass, MirSource};\n@@ -27,7 +27,6 @@ impl MirPass for SanityCheck {\n     fn run_pass<'a, 'tcx>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           src: MirSource<'tcx>, mir: &mut Mir<'tcx>) {\n         let def_id = src.def_id();\n-        let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         if !tcx.has_attr(def_id, \"rustc_mir\") {\n             debug!(\"skipping rustc_peek::SanityCheck on {}\", tcx.def_path_str(def_id));\n             return;\n@@ -41,26 +40,26 @@ impl MirPass for SanityCheck {\n         let mdpe = MoveDataParamEnv { move_data: move_data, param_env: param_env };\n         let dead_unwinds = BitSet::new_empty(mir.basic_blocks().len());\n         let flow_inits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         MaybeInitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_uninits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         MaybeUninitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n         let flow_def_inits =\n-            do_dataflow(tcx, mir, id, &attributes, &dead_unwinds,\n+            do_dataflow(tcx, mir, def_id, &attributes, &dead_unwinds,\n                         DefinitelyInitializedPlaces::new(tcx, mir, &mdpe),\n                         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]));\n \n         if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_init\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_inits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_inits);\n         }\n         if has_rustc_mir_with(&attributes, \"rustc_peek_maybe_uninit\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_uninits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_uninits);\n         }\n         if has_rustc_mir_with(&attributes, \"rustc_peek_definite_init\").is_some() {\n-            sanity_check_via_rustc_peek(tcx, mir, id, &attributes, &flow_def_inits);\n+            sanity_check_via_rustc_peek(tcx, mir, def_id, &attributes, &flow_def_inits);\n         }\n         if has_rustc_mir_with(&attributes, \"stop_after_dataflow\").is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n@@ -86,12 +85,12 @@ impl MirPass for SanityCheck {\n /// errors are not intended to be used for unit tests.)\n pub fn sanity_check_via_rustc_peek<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                 mir: &Mir<'tcx>,\n-                                                id: hir::HirId,\n+                                                def_id: DefId,\n                                                 _attributes: &[ast::Attribute],\n                                                 results: &DataflowResults<'tcx, O>)\n     where O: BitDenotation<'tcx, Idx=MovePathIndex> + HasMoveData<'tcx>\n {\n-    debug!(\"sanity_check_via_rustc_peek id: {:?}\", id);\n+    debug!(\"sanity_check_via_rustc_peek def_id: {:?}\", def_id);\n     // FIXME: this is not DRY. Figure out way to abstract this and\n     // `dataflow::build_sets`. (But note it is doing non-standard\n     // stuff, so such generalization may not be realistic.)"}, {"sha": "f87714b58c4423940affa94017ee041d2a5c25ae", "filename": "src/librustc_mir/util/graphviz.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fgraphviz.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def_id::DefId;\n use rustc::mir::*;\n use rustc::ty::TyCtxt;\n+use rustc_data_structures::indexed_vec::Idx;\n use std::fmt::Debug;\n use std::io::{self, Write};\n \n@@ -20,14 +21,25 @@ pub fn write_mir_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n     Ok(())\n }\n \n+// Must match `[0-9A-Za-z_]*`. This does not appear in the rendered graph, so\n+// it does not have to be user friendly.\n+pub fn graphviz_safe_def_name(def_id: DefId) -> String {\n+    format!(\n+        \"{}_{}_{}\",\n+        def_id.krate.index(),\n+        def_id.index.address_space().index(),\n+        def_id.index.as_array_index(),\n+    )\n+}\n+\n /// Write a graphviz DOT graph of the MIR.\n pub fn write_mir_fn_graphviz<'tcx, W>(tcx: TyCtxt<'_, '_, 'tcx>,\n                                       def_id: DefId,\n                                       mir: &Mir<'_>,\n                                       w: &mut W) -> io::Result<()>\n     where W: Write\n {\n-    writeln!(w, \"digraph Mir_{} {{\", tcx.hir().as_local_hir_id(def_id).unwrap())?;\n+    writeln!(w, \"digraph Mir_{} {{\", graphviz_safe_def_name(def_id))?;\n \n     // Global graph properties\n     writeln!(w, r#\"    graph [fontname=\"monospace\"];\"#)?;"}, {"sha": "1a5a2a92247dd3f120bd354f0ca370ca5369af71", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -15,7 +15,7 @@ pub mod collect_writes;\n \n pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};\n-pub use self::graphviz::{write_mir_graphviz};\n+pub use self::graphviz::{graphviz_safe_def_name, write_mir_graphviz};\n pub use self::graphviz::write_node_label as write_graphviz_node_label;\n \n /// If possible, suggest replacing `ref` with `ref mut`."}, {"sha": "f312ef216822d1c74af14aa51f6fb34c7887af7d", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -303,7 +303,7 @@ impl<'a> Resolver<'a> {\n                 }\n \n                 // Empty groups `a::b::{}` are turned into synthetic `self` imports\n-                // `a::b::c::{self as _}`, so that their prefixes are correctly\n+                // `a::b::c::{self as __dummy}`, so that their prefixes are correctly\n                 // resolved and checked for privacy/stability/etc.\n                 if items.is_empty() && !empty_for_self(&prefix) {\n                     let new_span = prefix[prefix.len() - 1].ident.span;\n@@ -312,7 +312,7 @@ impl<'a> Resolver<'a> {\n                             Ident::new(keywords::SelfLower.name(), new_span)\n                         ),\n                         kind: ast::UseTreeKind::Simple(\n-                            Some(Ident::new(keywords::Underscore.name().gensymed(), new_span)),\n+                            Some(Ident::new(Name::gensym(\"__dummy\"), new_span)),\n                             ast::DUMMY_NODE_ID,\n                             ast::DUMMY_NODE_ID,\n                         ),"}, {"sha": "5a123e8b1a6a3ad8832be0d691f872c8bdde894d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -814,7 +814,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         debug!(\"(resolving function) entering function\");\n         let (rib_kind, asyncness) = match function_kind {\n             FnKind::ItemFn(_, ref header, ..) =>\n-                (ItemRibKind, header.asyncness.node),\n+                (FnItemRibKind, header.asyncness.node),\n             FnKind::Method(_, ref sig, _, _) =>\n                 (TraitOrImplItemRibKind, sig.header.asyncness.node),\n             FnKind::Closure(_) =>\n@@ -950,6 +950,10 @@ enum RibKind<'a> {\n     /// upvars).\n     TraitOrImplItemRibKind,\n \n+    /// We passed through a function definition. Disallow upvars.\n+    /// Permit only those const parameters that are specified in the function's generics.\n+    FnItemRibKind,\n+\n     /// We passed through an item scope. Disallow upvars.\n     ItemRibKind,\n \n@@ -3863,7 +3867,7 @@ impl<'a> Resolver<'a> {\n                                 seen.insert(node_id, depth);\n                             }\n                         }\n-                        ItemRibKind | TraitOrImplItemRibKind => {\n+                        ItemRibKind | FnItemRibKind | TraitOrImplItemRibKind => {\n                             // This was an attempt to access an upvar inside a\n                             // named function item. This is not allowed, so we\n                             // report an error.\n@@ -3897,7 +3901,7 @@ impl<'a> Resolver<'a> {\n                         ConstantItemRibKind => {\n                             // Nothing to do. Continue.\n                         }\n-                        ItemRibKind => {\n+                        ItemRibKind | FnItemRibKind => {\n                             // This was an attempt to use a type parameter outside its scope.\n                             if record_used {\n                                 resolve_error(\n@@ -3912,12 +3916,15 @@ impl<'a> Resolver<'a> {\n                 }\n             }\n             Def::ConstParam(..) => {\n-                // A const param is always declared in a signature, which is always followed by\n-                // some kind of function rib kind (specifically, ItemRibKind in the case of a\n-                // normal function), so we can skip the first rib as it will be guaranteed to\n-                // (spuriously) conflict with the const param.\n-                for rib in &ribs[1..] {\n-                    if let ItemRibKind = rib.kind {\n+                let mut ribs = ribs.iter().peekable();\n+                if let Some(Rib { kind: FnItemRibKind, .. }) = ribs.peek() {\n+                    // When declaring const parameters inside function signatures, the first rib\n+                    // is always a `FnItemRibKind`. In this case, we can skip it, to avoid it\n+                    // (spuriously) conflicting with the const param.\n+                    ribs.next();\n+                }\n+                for rib in ribs {\n+                    if let ItemRibKind | FnItemRibKind = rib.kind {\n                         // This was an attempt to use a const parameter outside its scope.\n                         if record_used {\n                             resolve_error("}, {"sha": "bda59c6c46c8bd2a83ac2093b53cbaf152941960", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -1295,9 +1295,11 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                 None => continue,\n             };\n \n-            // Filter away \"empty import canaries\" and ambiguous imports.\n+            // Filter away ambiguous and gensymed imports. Gensymed imports\n+            // (e.g. implicitly injected `std`) cannot be properly encoded in metadata,\n+            // so they can cause name conflict errors downstream.\n             let is_good_import = binding.is_import() && !binding.is_ambiguity() &&\n-                                 binding.vis != ty::Visibility::Invisible;\n+                                 !(ident.name.is_gensymed() && ident.name != \"_\");\n             if is_good_import || binding.is_macro_def() {\n                 let def = binding.def();\n                 if def != Def::Err {"}, {"sha": "f61aa4284d29b65030568fd0c0c8e241b78484b4", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -179,6 +179,10 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n+    pub fn is_gensymed(self) -> bool {\n+        with_interner(|interner| interner.is_gensymed(self))\n+    }\n+\n     pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n             LocalInternedString {"}, {"sha": "f268c8bcbccdb2291783f5f4b69a19aa29f546af", "filename": "src/test/codegen/enum-debug-clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-clike.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -4,7 +4,7 @@\n \n // ignore-tidy-linelength\n // ignore-windows\n-// min-system-llvm-version 7.0\n+// min-system-llvm-version 8.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "aa6cbf66b4aa3bc24ad4334acecce3e4a64760e5", "filename": "src/test/codegen/enum-debug-niche-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche-2.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -4,7 +4,7 @@\n \n // ignore-tidy-linelength\n // ignore-windows\n-// min-system-llvm-version 7.0\n+// min-system-llvm-version 8.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "93eebde7b8f42bdc22c56d54b6847761d8c364bf", "filename": "src/test/codegen/enum-debug-niche.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-niche.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -4,7 +4,7 @@\n \n // ignore-tidy-linelength\n // ignore-windows\n-// min-system-llvm-version 7.0\n+// min-system-llvm-version 8.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "84976ce97af4b1bad724c45ac0e40588ffaa5bfa", "filename": "src/test/codegen/enum-debug-tagged.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-debug-tagged.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -4,7 +4,7 @@\n \n // ignore-tidy-linelength\n // ignore-windows\n-// min-system-llvm-version 7.0\n+// min-system-llvm-version 8.0\n \n // compile-flags: -g -C no-prepopulate-passes\n "}, {"sha": "63c11f59c157d598422cae0cf43a3aaa2743f345", "filename": "src/test/debuginfo/borrowed-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -1,7 +1,7 @@\n // ignore-tidy-linelength\n \n // Require LLVM with DW_TAG_variant_part and a gdb or lldb that can read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "e26294cb730a06a0baae024d0e6f46a8770ad042", "filename": "src/test/debuginfo/generic-enum-with-different-disr-sizes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-enum-with-different-disr-sizes.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -3,7 +3,7 @@\n // min-lldb-version: 310\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "3dc5cb807b452349c7c424c8819a363d0318cb04", "filename": "src/test/debuginfo/generic-struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-struct-style-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n // min-lldb-version: 310\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "b16634ee6d7f99a8203a7195131da086e6995c6c", "filename": "src/test/debuginfo/generic-tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-tuple-style-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n \n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "8fb83b7956be3309b818fae9d100b8b38302daad", "filename": "src/test/debuginfo/recursive-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Frecursive-struct.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n // ignore-lldb\n \n // Require LLVM with DW_TAG_variant_part and a gdb that can read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n \n // compile-flags:-g"}, {"sha": "5843b076b1f465d9a11f45cc35bb74f5d79f1922", "filename": "src/test/debuginfo/struct-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fstruct-style-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n \n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "4d9727a388b8ed87e4b35df1d95edbcc7bbd22b7", "filename": "src/test/debuginfo/tuple-style-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftuple-style-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n \n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "32bd93f1ed2cee2671feda502eec1fd4a0936d2f", "filename": "src/test/debuginfo/unique-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fdebuginfo%2Funique-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funique-enum.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -2,7 +2,7 @@\n \n // Require LLVM with DW_TAG_variant_part and a gdb and lldb that can\n // read it.\n-// min-system-llvm-version: 7.0\n+// min-system-llvm-version: 8.0\n // min-gdb-version: 8.2\n // rust-lldb\n "}, {"sha": "660576996e5d42103cf1cca6b75d131eda1fb75e", "filename": "src/test/mir-opt/graphviz.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fmir-opt%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgraphviz.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,23 @@\n+// Test graphviz output\n+// compile-flags: -Z dump-mir-graphviz\n+\n+// ignore-tidy-linelength\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+// START rustc.main.mir_map.0.dot\n+// digraph Mir_0_0_3 { // The name here MUST be an ASCII identifier.\n+//     graph [fontname=\"monospace\"];\n+//     node [fontname=\"monospace\"];\n+//     edge [fontname=\"monospace\"];\n+//     label=<fn main() -&gt; ()<br align=\"left\"/>>;\n+//     bb0 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">0</td></tr><tr><td align=\"left\" balign=\"left\">_0 = ()<br/></td></tr><tr><td align=\"left\">goto</td></tr></table>\n+// >];\n+//     bb1 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">1</td></tr><tr><td align=\"left\">resume</td></tr></table>\n+// >];\n+//     bb2 [shape=\"none\", label=<<table border=\"0\" cellborder=\"1\" cellspacing=\"0\"><tr><td bgcolor=\"gray\" align=\"center\" colspan=\"1\">2</td></tr><tr><td align=\"left\">return</td></tr></table>\n+// >];\n+//     bb0 -> bb2 [label=\"\"];\n+// }\n+// END rustc.main.mir_map.0.dot"}, {"sha": "207b07bf69514ea7deeff86e290b2b3fbe2865d1", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,6 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct S<const C: u8>(C); //~ ERROR expected type, found const parameter\n+\n+fn main() {}"}, {"sha": "561464b21cc8f0a23c8fb139e9f418a179b8c0ab", "filename": "src/test/ui/const-generics/struct-with-invalid-const-param.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstruct-with-invalid-const-param.stderr?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,15 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/struct-with-invalid-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+\n+error[E0573]: expected type, found const parameter `C`\n+  --> $DIR/struct-with-invalid-const-param.rs:4:23\n+   |\n+LL | struct S<const C: u8>(C);\n+   |                       ^ help: a struct with a similar name exists: `S`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0573`."}, {"sha": "bbb19f5ec65199e60ca8d273f8c180a30a47eaf2", "filename": "src/test/ui/imports/auxiliary/gensymed.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fgensymed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fgensymed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fauxiliary%2Fgensymed.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,3 @@\n+// edition:2018\n+\n+mod std {}"}, {"sha": "317441079ff87c71953eaa45dec3eefb24e28f0e", "filename": "src/test/ui/imports/gensymed.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fimports%2Fgensymed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0576ac109b1ee40cc3201ac3c9ed58339487140e/src%2Ftest%2Fui%2Fimports%2Fgensymed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fgensymed.rs?ref=0576ac109b1ee40cc3201ac3c9ed58339487140e", "patch": "@@ -0,0 +1,7 @@\n+// compile-pass\n+// edition:2018\n+// aux-build:gensymed.rs\n+\n+extern crate gensymed;\n+\n+fn main() {}"}]}