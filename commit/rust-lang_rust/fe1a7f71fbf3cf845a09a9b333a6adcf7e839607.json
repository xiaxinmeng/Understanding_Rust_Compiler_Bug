{"sha": "fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMWE3ZjcxZmJmM2NmODQ1YTA5YTliMzMzYTZhZGNmN2U4Mzk2MDc=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-08-21T19:51:34Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-08-28T19:18:46Z"}, "message": "rustc: use more correct span data in for loop desugaring\n\nBefore:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     for x in DroppingSlice(&*v).iter(); {\n         |                                       +\n\nAfter:\n\n      help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n         |\n      LL |     };\n         |      +\n\nThis seems like a reasonable fix: since the desugared \"expr_drop_temps_mut\"\ncontains the entire desugared loop construct, its span should contain the\nentire loop construct as well.", "tree": {"sha": "5b43977dd3f95093d053e1b069541852bfc46dfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b43977dd3f95093d053e1b069541852bfc46dfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "html_url": "https://github.com/rust-lang/rust/commit/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9583fd1bdd0127328e25e5b8c24dff575ec2c86b", "html_url": "https://github.com/rust-lang/rust/commit/9583fd1bdd0127328e25e5b8c24dff575ec2c86b"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "487e229543af799f995db81304b58c326ccbc975", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "patch": "@@ -1401,8 +1401,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             )\n         };\n \n+        // #82462: to correctly diagnose borrow errors, the block that contains\n+        // the iter expr needs to have a span that covers the loop body.\n+        let desugared_full_span =\n+            self.mark_span_with_reason(DesugaringKind::ForLoop(ForLoopLoc::Head), e.span, None);\n+\n         let match_expr = self.arena.alloc(self.expr_match(\n-            desugared_span,\n+            desugared_full_span,\n             into_iter_expr,\n             arena_vec![self; iter_arm],\n             hir::MatchSource::ForLoopDesugar,\n@@ -1416,7 +1421,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // surrounding scope of the `match` since the `match` is not a terminating scope.\n         //\n         // Also, add the attributes to the outer returned expr node.\n-        self.expr_drop_temps_mut(desugared_span, match_expr, attrs.into())\n+        self.expr_drop_temps_mut(desugared_full_span, match_expr, attrs.into())\n     }\n \n     /// Desugar `ExprKind::Try` from: `<expr>?` into:"}, {"sha": "1a4e30bbfffb375c2d6d509e37a357adc6c5b41b", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "patch": "@@ -80,7 +80,7 @@\n -         StorageDead(_7);                 // scope 3 at $DIR/remove_storage_markers.rs:8:18: 8:19\n -         StorageDead(_6);                 // scope 2 at $DIR/remove_storage_markers.rs:10:5: 10:6\n -         StorageDead(_4);                 // scope 1 at $DIR/remove_storage_markers.rs:10:5: 10:6\n--         StorageDead(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:8:18: 8:19\n+-         StorageDead(_2);                 // scope 1 at $DIR/remove_storage_markers.rs:10:5: 10:6\n -         StorageDead(_1);                 // scope 0 at $DIR/remove_storage_markers.rs:11:1: 11:2\n           return;                          // scope 0 at $DIR/remove_storage_markers.rs:11:2: 11:2\n       }"}, {"sha": "10497c30e64f72b3e8c32e562622b95295725eac", "filename": "src/test/ui/borrowck/issue-82462.nll.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.nll.stderr?ref=fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "patch": "@@ -0,0 +1,22 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-82462.rs:18:9\n+   |\n+LL |     for x in DroppingSlice(&*v).iter() {\n+   |              ------------------\n+   |              |               |\n+   |              |               immutable borrow occurs here\n+   |              a temporary with access to the immutable borrow is created here ...\n+LL |         v.push(*x);\n+   |         ^ mutable borrow occurs here\n+LL |         break;\n+LL |     }\n+   |     - ... and the immutable borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DroppingSlice`\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     };\n+   |      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "5a3c64255cc64a1604625314b0b2b5897c815de2", "filename": "src/test/ui/borrowck/issue-82462.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.rs?ref=fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "patch": "@@ -0,0 +1,21 @@\n+struct DroppingSlice<'a>(&'a [i32]);\n+\n+impl Drop for DroppingSlice<'_> {\n+    fn drop(&mut self) {\n+        println!(\"hi from slice\");\n+    }\n+}\n+\n+impl DroppingSlice<'_> {\n+    fn iter(&self) -> std::slice::Iter<'_, i32> {\n+        self.0.iter()\n+    }\n+}\n+\n+fn main() {\n+    let mut v = vec![1, 2, 3, 4];\n+    for x in DroppingSlice(&*v).iter() {\n+        v.push(*x); //~ERROR\n+        break;\n+    }\n+}"}, {"sha": "a2c291f77979221b98788db63509df88d23138c4", "filename": "src/test/ui/borrowck/issue-82462.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fe1a7f71fbf3cf845a09a9b333a6adcf7e839607/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-82462.stderr?ref=fe1a7f71fbf3cf845a09a9b333a6adcf7e839607", "patch": "@@ -0,0 +1,22 @@\n+error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\n+  --> $DIR/issue-82462.rs:18:9\n+   |\n+LL |     for x in DroppingSlice(&*v).iter() {\n+   |              ------------------\n+   |              |               |\n+   |              |               immutable borrow occurs here\n+   |              a temporary with access to the immutable borrow is created here ...\n+LL |         v.push(*x);\n+   |         ^^^^^^^^^^ mutable borrow occurs here\n+LL |         break;\n+LL |     }\n+   |     - ... and the immutable borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `DroppingSlice`\n+   |\n+help: consider adding semicolon after the expression so its temporaries are dropped sooner, before the local variables declared by the block are dropped\n+   |\n+LL |     };\n+   |      +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0502`."}]}