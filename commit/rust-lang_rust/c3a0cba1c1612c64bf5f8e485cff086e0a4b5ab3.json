{"sha": "c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTBjYmExYzE2MTJjNjRiZjVmOGU0ODVjZmYwODZlMGE0YjVhYjM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-05T15:57:23Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:05:04Z"}, "message": "initial cleanup", "tree": {"sha": "9a21cec64e98611cc090edacb812ea3dbe33a0c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a21cec64e98611cc090edacb812ea3dbe33a0c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "html_url": "https://github.com/rust-lang/rust/commit/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/93d15b94804d262be22f043c3dd9f66e3ce5a2fa", "html_url": "https://github.com/rust-lang/rust/commit/93d15b94804d262be22f043c3dd9f66e3ce5a2fa"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "894b392f1c036a8e2d741eb99225bb050c9edce3", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -558,7 +558,7 @@ declare_features! (\n \n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n-    \n+\n     /// Lazily evaluate constants. Which allows constants to depend on type parameters.\n     (active, lazy_normalization_consts, \"1.44.0\", Some(60471), None),\n "}, {"sha": "e67ea56cf891167e73af6967d44d9d61103cb986", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -595,8 +595,8 @@ where\n             b = self.infcx.shallow_resolve(b);\n         }\n \n-        match (a.val, b.val) {\n-            (_, ty::ConstKind::Infer(InferConst::Var(_))) if D::forbid_inference_vars() => {\n+        match b.val {\n+            ty::ConstKind::Infer(InferConst::Var(_)) if D::forbid_inference_vars() => {\n                 // Forbid inference variables in the RHS.\n                 bug!(\"unexpected inference var {:?}\", b)\n             }"}, {"sha": "e2c82a397c7384c150db62c9fa0f5d55de309acf", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -870,7 +870,7 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n-        \"lazily evaluate constants (experimental)\"),\n+        \"keep hygiene data after analysis (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n     link_only: bool = (false, parse_bool, [TRACKED],"}, {"sha": "139b86007222447b02bc49be1fee5fe3a289021a", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -616,7 +616,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         )\n                     }\n \n-                    \n                     ty::Predicate::ConstEquate(..) => {\n                         // Errors for `ConstEquate` predicates show up as\n                         // `SelectionError::ConstEvalFailure`,"}, {"sha": "cf107a6c5b5abbf80c194ddad0c94bc5a451cf98", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -539,7 +539,10 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                             Ok(val) => Ok(Const::from_value(self.selcx.tcx(), val, c.ty)),\n                             Err(ErrorHandled::TooGeneric) => {\n                                 stalled_on.append(\n-                                    &mut substs.types().filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty)).collect(),\n+                                    &mut substs\n+                                        .types()\n+                                        .filter_map(|ty| TyOrConstInferVar::maybe_from_ty(ty))\n+                                        .collect(),\n                                 );\n                                 Err(ProcessResult::Unchanged)\n                             }"}, {"sha": "a34006dd4fc06b54000ac93fbb22ad90054c34ae", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -17,7 +17,8 @@ use rustc_errors::{Applicability, FatalError};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts, Subst};\n-use rustc_middle::ty::{self, Predicate, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n+use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n+use rustc_middle::ty::{Predicate, ToPredicate};\n use rustc_session::lint::builtin::WHERE_CLAUSES_OBJECT_SAFETY;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;"}, {"sha": "a29a9a6a99750d2e88ba28e58e26242166c6afa8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c3a0cba1c1612c64bf5f8e485cff086e0a4b5ab3", "patch": "@@ -1168,7 +1168,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         Node::AnonConst(_) => {\n             if tcx.features().lazy_normalization_consts {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n-                Some(tcx.hir().local_def_id(parent_id))\n+                Some(tcx.hir().local_def_id(parent_id).to_def_id())\n             } else {\n                 None\n             }"}]}