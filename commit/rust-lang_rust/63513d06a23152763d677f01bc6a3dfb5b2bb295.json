{"sha": "63513d06a23152763d677f01bc6a3dfb5b2bb295", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNTEzZDA2YTIzMTUyNzYzZDY3N2YwMWJjNmEzZGZiNWIyYmIyOTU=", "commit": {"author": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-02-28T12:56:32Z"}, "committer": {"name": "Ms2ger", "email": "ms2ger@gmail.com", "date": "2015-02-28T12:56:32Z"}, "message": "Remove the re-exports for InlineAttr variants.", "tree": {"sha": "9ea67f605156f0dbcccf1c93862c9d3800dc4ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea67f605156f0dbcccf1c93862c9d3800dc4ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63513d06a23152763d677f01bc6a3dfb5b2bb295", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63513d06a23152763d677f01bc6a3dfb5b2bb295", "html_url": "https://github.com/rust-lang/rust/commit/63513d06a23152763d677f01bc6a3dfb5b2bb295", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63513d06a23152763d677f01bc6a3dfb5b2bb295/comments", "author": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ms2ger", "id": 111161, "node_id": "MDQ6VXNlcjExMTE2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/111161?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ms2ger", "html_url": "https://github.com/Ms2ger", "followers_url": "https://api.github.com/users/Ms2ger/followers", "following_url": "https://api.github.com/users/Ms2ger/following{/other_user}", "gists_url": "https://api.github.com/users/Ms2ger/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ms2ger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ms2ger/subscriptions", "organizations_url": "https://api.github.com/users/Ms2ger/orgs", "repos_url": "https://api.github.com/users/Ms2ger/repos", "events_url": "https://api.github.com/users/Ms2ger/events{/privacy}", "received_events_url": "https://api.github.com/users/Ms2ger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48aeaba9347a25b2e3848e0dcbc1d8f6b0076718", "url": "https://api.github.com/repos/rust-lang/rust/commits/48aeaba9347a25b2e3848e0dcbc1d8f6b0076718", "html_url": "https://github.com/rust-lang/rust/commit/48aeaba9347a25b2e3848e0dcbc1d8f6b0076718"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "5db9f2bc10c9464532313e74fee75b8b54e9487d", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63513d06a23152763d677f01bc6a3dfb5b2bb295/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63513d06a23152763d677f01bc6a3dfb5b2bb295/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=63513d06a23152763d677f01bc6a3dfb5b2bb295", "patch": "@@ -433,13 +433,13 @@ pub fn set_inline_hint(f: ValueRef) {\n }\n \n pub fn set_llvm_fn_attrs(ccx: &CrateContext, attrs: &[ast::Attribute], llfn: ValueRef) {\n-    use syntax::attr::*;\n+    use syntax::attr::{find_inline_attr, InlineAttr};\n     // Set the inline hint if there is one\n     match find_inline_attr(Some(ccx.sess().diagnostic()), attrs) {\n-        InlineHint   => set_inline_hint(llfn),\n-        InlineAlways => set_always_inline(llfn),\n-        InlineNever  => set_no_inline(llfn),\n-        InlineNone   => { /* fallthrough */ }\n+        InlineAttr::Hint   => set_inline_hint(llfn),\n+        InlineAttr::Always => set_always_inline(llfn),\n+        InlineAttr::Never  => set_no_inline(llfn),\n+        InlineAttr::None   => { /* fallthrough */ }\n     }\n \n     for attr in attrs {"}, {"sha": "1c7930b9bc99288279fe1d91ed8d59a629afe915", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/63513d06a23152763d677f01bc6a3dfb5b2bb295/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63513d06a23152763d677f01bc6a3dfb5b2bb295/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=63513d06a23152763d677f01bc6a3dfb5b2bb295", "patch": "@@ -10,7 +10,6 @@\n \n // Functions dealing with attributes and meta items\n \n-pub use self::InlineAttr::*;\n pub use self::StabilityLevel::*;\n pub use self::ReprAttr::*;\n pub use self::IntType::*;\n@@ -285,33 +284,33 @@ pub fn find_crate_name(attrs: &[Attribute]) -> Option<InternedString> {\n \n #[derive(Copy, PartialEq)]\n pub enum InlineAttr {\n-    InlineNone,\n-    InlineHint,\n-    InlineAlways,\n-    InlineNever,\n+    None,\n+    Hint,\n+    Always,\n+    Never,\n }\n \n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(diagnostic: Option<&SpanHandler>, attrs: &[Attribute]) -> InlineAttr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n-    attrs.iter().fold(InlineNone, |ia,attr| {\n+    attrs.iter().fold(InlineAttr::None, |ia,attr| {\n         match attr.node.value.node {\n             MetaWord(ref n) if *n == \"inline\" => {\n                 mark_used(attr);\n-                InlineHint\n+                InlineAttr::Hint\n             }\n             MetaList(ref n, ref items) if *n == \"inline\" => {\n                 mark_used(attr);\n                 if items.len() != 1 {\n                     diagnostic.map(|d|{ d.span_err(attr.span, \"expected one argument\"); });\n-                    InlineNone\n+                    InlineAttr::None\n                 } else if contains_name(&items[..], \"always\") {\n-                    InlineAlways\n+                    InlineAttr::Always\n                 } else if contains_name(&items[..], \"never\") {\n-                    InlineNever\n+                    InlineAttr::Never\n                 } else {\n                     diagnostic.map(|d|{ d.span_err((*items[0]).span, \"invalid argument\"); });\n-                    InlineNone\n+                    InlineAttr::None\n                 }\n             }\n             _ => ia\n@@ -322,8 +321,8 @@ pub fn find_inline_attr(diagnostic: Option<&SpanHandler>, attrs: &[Attribute]) -\n /// True if `#[inline]` or `#[inline(always)]` is present in `attrs`.\n pub fn requests_inline(attrs: &[Attribute]) -> bool {\n     match find_inline_attr(None, attrs) {\n-        InlineHint | InlineAlways => true,\n-        InlineNone | InlineNever => false,\n+        InlineAttr::Hint | InlineAttr::Always => true,\n+        InlineAttr::None | InlineAttr::Never => false,\n     }\n }\n "}]}