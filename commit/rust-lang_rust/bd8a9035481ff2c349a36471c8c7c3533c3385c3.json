{"sha": "bd8a9035481ff2c349a36471c8c7c3533c3385c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkOGE5MDM1NDgxZmYyYzM0OWEzNjQ3MWM4YzdjMzUzM2MzMzg1YzM=", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-10T02:36:38Z"}, "committer": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2021-01-10T02:36:38Z"}, "message": "Remove unnecessary allocation\n\nThe case-insensitive prefix/suffix check can be performed\ncharacter-by-character. This allows the check to be done without having\nto allocate a new string. As a side effect, it's also no longer\nnecessary to convert the entire string to lowercase, as it's done as\nneeded. As the only case equality we're handling is ASCII, this\noperation can be further optimized by using byte equality, rather than\ncharacter equality.", "tree": {"sha": "1f553b31f0e6c9505f6ef864a8c2baad10024b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f553b31f0e6c9505f6ef864a8c2baad10024b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8a9035481ff2c349a36471c8c7c3533c3385c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTgxeqBxcDGar1sVhy4DhnkZitapAUCX/pp5AAKCRC4DhnkZita\npNTCAQDlr0VOHnFAqP/6XUtDIxZFCobz3sW2xnV7uZHMSTZXzwEAilvu9wvRZtO7\nGW2bojUYGonI8d0HXJ1hTkWG2+gyDwc=\n=sFe7\n-----END PGP SIGNATURE-----", "payload": "tree 1f553b31f0e6c9505f6ef864a8c2baad10024b1a\nparent bcb9ae18de1fa405eb2add56409ae264267607bb\nauthor Jacob Pratt <jacob@jhpratt.dev> 1610246198 -0500\ncommitter Jacob Pratt <jacob@jhpratt.dev> 1610246198 -0500\n\nRemove unnecessary allocation\n\nThe case-insensitive prefix/suffix check can be performed\ncharacter-by-character. This allows the check to be done without having\nto allocate a new string. As a side effect, it's also no longer\nnecessary to convert the entire string to lowercase, as it's done as\nneeded. As the only case equality we're handling is ASCII, this\noperation can be further optimized by using byte equality, rather than\ncharacter equality.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8a9035481ff2c349a36471c8c7c3533c3385c3", "html_url": "https://github.com/rust-lang/rust/commit/bd8a9035481ff2c349a36471c8c7c3533c3385c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8a9035481ff2c349a36471c8c7c3533c3385c3/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb9ae18de1fa405eb2add56409ae264267607bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb9ae18de1fa405eb2add56409ae264267607bb", "html_url": "https://github.com/rust-lang/rust/commit/bcb9ae18de1fa405eb2add56409ae264267607bb"}], "stats": {"total": 19, "additions": 12, "deletions": 7}, "files": [{"sha": "ddab9a168a7581f2df0f80d0a8cc445d33f9e0e5", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd8a9035481ff2c349a36471c8c7c3533c3385c3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8a9035481ff2c349a36471c8c7c3533c3385c3/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=bd8a9035481ff2c349a36471c8c7c3533c3385c3", "patch": "@@ -353,13 +353,18 @@ fn is_argument_similar_to_param_name(\n     }\n     match get_string_representation(argument) {\n         None => false,\n-        Some(mut repr) => {\n-            let param_name = param_name.to_ascii_lowercase();\n-            let argument_string = {\n-                repr.make_ascii_lowercase();\n-                repr.trim_start_matches('_')\n-            };\n-            argument_string.starts_with(&param_name) || argument_string.ends_with(&param_name)\n+        Some(argument_string) => {\n+            let mut arg_bytes = argument_string.bytes().skip_while(|&c| c == b'_');\n+            let starts_with_pattern = param_name.bytes().all(\n+                |expected| matches!(arg_bytes.next(), Some(actual) if expected.eq_ignore_ascii_case(&actual)),\n+            );\n+\n+            let mut arg_bytes = argument_string.bytes();\n+            let ends_with_pattern = param_name.bytes().rev().all(\n+                |expected| matches!(arg_bytes.next_back(), Some(actual) if expected.eq_ignore_ascii_case(&actual)),\n+            );\n+\n+            starts_with_pattern || ends_with_pattern\n         }\n     }\n }"}]}