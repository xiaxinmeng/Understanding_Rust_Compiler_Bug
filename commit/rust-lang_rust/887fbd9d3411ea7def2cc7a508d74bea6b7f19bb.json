{"sha": "887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4N2ZiZDlkMzQxMWVhN2RlZjJjYzdhNTA4ZDc0YmVhNmI3ZjE5YmI=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T21:17:31Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T22:08:59Z"}, "message": "Split out async fn and generator test\n\nThis keeps FileCheck from tripping over unimportant differences in\ncodegen.", "tree": {"sha": "5d4402988879e15dbf62390668ccd1f59abfaef0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d4402988879e15dbf62390668ccd1f59abfaef0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "html_url": "https://github.com/rust-lang/rust/commit/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe3df646fe415123d0a6bd09df698dc69074263a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe3df646fe415123d0a6bd09df698dc69074263a", "html_url": "https://github.com/rust-lang/rust/commit/fe3df646fe415123d0a6bd09df698dc69074263a"}], "stats": {"total": 174, "additions": 102, "deletions": 72}, "files": [{"sha": "4e145b81ecbf73c5ad8bbf33a66064ee328ed034", "filename": "src/test/codegen/async-fn-debug-msvc.rs", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug-msvc.rs?ref=887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "patch": "@@ -0,0 +1,48 @@\n+// Verify debuginfo for generators:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// only-msvc\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// For brevity, we only check the struct name and members of the last variant.\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 12,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+\n+fn main() {\n+    let _dummy = async_fn_test();\n+}"}, {"sha": "8fa4be1ae86d8dc81850ea3ee2853150ca12b0be", "filename": "src/test/codegen/async-fn-debug.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasync-fn-debug.rs?ref=887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "patch": "@@ -0,0 +1,51 @@\n+// Verify debuginfo for async fn:\n+//  - Each variant points to the file and line of its yield point\n+//  - The generator types and variants are marked artificial\n+//  - Captured vars from the source are not marked artificial\n+//\n+// ignore-tidy-linelength\n+// compile-flags: -C debuginfo=2 --edition=2018\n+// ignore-msvc\n+\n+async fn foo() {}\n+async fn async_fn_test() {\n+    foo().await;\n+    let s = String::from(\"foo\");\n+    foo().await;\n+}\n+\n+// FIXME: No way to reliably check the filename.\n+\n+// CHECK-DAG:  [[ASYNC_FN:!.*]] = !DINamespace(name: \"async_fn_test\"\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN]], {{.*}}flags: DIFlagArtificial\n+// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE:![0-9]*]], line: 11,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DICompositeType(tag: DW_TAG_structure_type, name: \"Unresumed\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 15,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 12,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n+// CHECK-SAME: file: [[FILE]], line: 14,\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n+// CHECK-NOT:  flags: DIFlagArtificial\n+// CHECK-SAME: )\n+// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[ASYNC_FN]],\n+// CHECK-SAME: flags: DIFlagArtificial\n+\n+fn main() {\n+    let _dummy = async_fn_test();\n+}"}, {"sha": "82a1568ea95849deb6cb1958c3d72e42f74223af", "filename": "src/test/codegen/generator-debug-msvc.rs", "status": "modified", "additions": 3, "deletions": 37, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug-msvc.rs?ref=887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "patch": "@@ -4,7 +4,7 @@\n //  - Captured vars from the source are not marked artificial\n //\n // ignore-tidy-linelength\n-// compile-flags: -C debuginfo=2 --edition=2018\n+// compile-flags: -C debuginfo=2\n // only-msvc\n \n #![feature(generators, generator_trait)]\n@@ -18,19 +18,12 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n     }\n }\n \n-async fn foo() {}\n-async fn async_fn_test() {\n-    foo().await;\n-    let s = String::from(\"foo\");\n-    foo().await;\n-}\n-\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]],\n+// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[GEN_FN]], {{.*}}flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// For brevity, we just check the struct name and members of the last variant.\n+// For brevity, we only check the struct name and members of the last variant.\n // CHECK-SAME: file: [[FILE:![0-9]*]], line: 14,\n // CHECK-SAME: flags: DIFlagArtificial\n // CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n@@ -54,33 +47,6 @@ async fn async_fn_test() {\n // CHECK-NOT:  flags: DIFlagArtificial\n // CHECK-SAME: )\n \n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_union_type, name: \"generator-0\", scope: [[ASYNC_FN:![0-9]*]], {{.*}}flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// For brevity, we just check the struct name and members of the last variant.\n-// CHECK-SAME: file: [[FILE]], line: 22,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 26,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 26,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 23,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, scope: [[GEN]],\n-// CHECK-SAME: file: [[FILE]], line: 25,\n-// CHECK-SAME: baseType: [[VARIANT:![0-9]*]]\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"RUST$ENUM$DISR\", scope: [[S1]],\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n-// CHECK-NOT:  flags: DIFlagArtificial\n-// CHECK-SAME: )\n-\n fn main() {\n     let _dummy = generator_test();\n-    let _dummy = async_fn_test();\n }"}, {"sha": "5c7c64148189a7ffa1f53f19463ed561d34524eb", "filename": "src/test/codegen/generator-debug.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887fbd9d3411ea7def2cc7a508d74bea6b7f19bb/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fgenerator-debug.rs?ref=887fbd9d3411ea7def2cc7a508d74bea6b7f19bb", "patch": "@@ -18,13 +18,6 @@ fn generator_test() -> impl Generator<Yield = i32, Return = ()> {\n     }\n }\n \n-async fn foo() {}\n-async fn async_fn_test() {\n-    foo().await;\n-    let s = String::from(\"foo\");\n-    foo().await;\n-}\n-\n // FIXME: No way to reliably check the filename.\n \n // CHECK-DAG:  [[GEN_FN:!.*]] = !DINamespace(name: \"generator_test\"\n@@ -57,34 +50,6 @@ async fn async_fn_test() {\n // CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[GEN_FN]],\n // CHECK-SAME: flags: DIFlagArtificial\n \n-// CHECK-DAG:  [[GEN:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"generator-0\", scope: [[ASYNC_FN:![0-9]*]], {{.*}}flags: DIFlagArtificial\n-// CHECK:      [[VARIANT:!.*]] = !DICompositeType(tag: DW_TAG_variant_part, scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK-SAME: discriminator: [[DISC:![0-9]*]]\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"0\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 22,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"1\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 26,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"2\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 26,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"3\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 23,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"4\", scope: [[VARIANT]],\n-// CHECK-SAME: file: [[FILE]], line: 25,\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      [[S1:!.*]] = !DICompositeType(tag: DW_TAG_structure_type, name: \"Suspend1\", scope: [[GEN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n-// CHECK:      {{!.*}} = !DIDerivedType(tag: DW_TAG_member, name: \"s\", scope: [[S1]]\n-// CHECK-NOT:  flags: DIFlagArtificial\n-// CHECK-SAME: )\n-// CHECK:      [[DISC]] = !DIDerivedType(tag: DW_TAG_member, name: \"__state\", scope: [[ASYNC_FN]],\n-// CHECK-SAME: flags: DIFlagArtificial\n-\n fn main() {\n     let _dummy = generator_test();\n-    let _dummy = async_fn_test();\n }"}]}