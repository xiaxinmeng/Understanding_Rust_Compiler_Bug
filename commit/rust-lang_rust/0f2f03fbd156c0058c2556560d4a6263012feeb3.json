{"sha": "0f2f03fbd156c0058c2556560d4a6263012feeb3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMmYwM2ZiZDE1NmMwMDU4YzI1NTY1NjBkNGE2MjYzMDEyZmVlYjM=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2019-11-15T13:44:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T13:44:52Z"}, "message": "Rollup merge of #66443 - GuillaumeGomez:port-erased-cleanup, r=Mark-Simulacrum\n\nPort erased cleanup\n\nJust realised that the changes I made in #65965 were removed after the move of all error codes so here it is. I made them into separate commits to make the history look better this time.\n\nr? @Mark-Simulacrum", "tree": {"sha": "c4326f32a97223d054df71a46bc02d77378a0ab6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4326f32a97223d054df71a46bc02d77378a0ab6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f2f03fbd156c0058c2556560d4a6263012feeb3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdzqvUCRBK7hj4Ov3rIwAAdHIIAEhVIzB1yMFhUsEp5mAYxxyB\ndy6zG9JwUomqxqWI5AIcd1RAAI3DAkTXFaAQT4OHffjY2NwoKA1cZOODBX0pDLy5\n3yIPXBiMlBU+/4a6ThuTDJztb/9wFaT9zixqIpWBW2xsoulKPCP6L9zbN7hEkyD+\nK+HomDaJVc1zlQZ+i62TBoT7U/+xj2yF95PrjMb0YNcQEeaSy0fjDSTufC2miXe3\nZ9s4AEvjwcXglBZ1d1s1W+5V7qKzrUoKMNAv6uDvWkOOf4auLhCofPEv2Ub1GIgM\nmo3DYME9YU0cOGqMcJIopcuf6hnF3WxmnzluhtREMCwNDvc9HBl68cF+YUPCkj4=\n=bSii\n-----END PGP SIGNATURE-----\n", "payload": "tree c4326f32a97223d054df71a46bc02d77378a0ab6\nparent d99026e8913a401f39d5928f4efeb45e6a77d895\nparent f9fdc380c785290c86568181f78a1584dfad4863\nauthor Tyler Mandry <tmandry@gmail.com> 1573825492 +0100\ncommitter GitHub <noreply@github.com> 1573825492 +0100\n\nRollup merge of #66443 - GuillaumeGomez:port-erased-cleanup, r=Mark-Simulacrum\n\nPort erased cleanup\n\nJust realised that the changes I made in #65965 were removed after the move of all error codes so here it is. I made them into separate commits to make the history look better this time.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f2f03fbd156c0058c2556560d4a6263012feeb3", "html_url": "https://github.com/rust-lang/rust/commit/0f2f03fbd156c0058c2556560d4a6263012feeb3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f2f03fbd156c0058c2556560d4a6263012feeb3/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d99026e8913a401f39d5928f4efeb45e6a77d895", "url": "https://api.github.com/repos/rust-lang/rust/commits/d99026e8913a401f39d5928f4efeb45e6a77d895", "html_url": "https://github.com/rust-lang/rust/commit/d99026e8913a401f39d5928f4efeb45e6a77d895"}, {"sha": "f9fdc380c785290c86568181f78a1584dfad4863", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9fdc380c785290c86568181f78a1584dfad4863", "html_url": "https://github.com/rust-lang/rust/commit/f9fdc380c785290c86568181f78a1584dfad4863"}], "stats": {"total": 211, "additions": 135, "deletions": 76}, "files": [{"sha": "ffefe51f854f5e7fa2bd42828a5abb040ec9dc32", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,6 +1,11 @@\n // Error messages for EXXXX errors.  Each message should start and end with a\n // new line, and be wrapped to 80 characters.  In vim you can `:set tw=80` and\n // use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n+//\n+// /!\\ IMPORTANT /!\\\n+//\n+// Error messages' format must follow the RFC 1567 available here:\n+// https://github.com/rust-lang/rfcs/pull/1567\n \n crate::register_diagnostics! {\n "}, {"sha": "23a9d22a60d823cc5ce2e66577c90809d29005f0", "filename": "src/librustc_error_codes/error_codes/E0023.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0023.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,6 +1,6 @@\n-A pattern used to match against an enum variant must provide a sub-pattern for\n-each field of the enum variant. This error indicates that a pattern attempted to\n-extract an incorrect number of fields from a variant.\n+A pattern attempted to extract an incorrect number of fields from a variant.\n+\n+Erroneous code example:\n \n ```\n enum Fruit {\n@@ -9,6 +9,9 @@ enum Fruit {\n }\n ```\n \n+A pattern used to match against an enum variant must provide a sub-pattern for\n+each field of the enum variant.\n+\n Here the `Apple` variant has two fields, and should be matched against like so:\n \n ```"}, {"sha": "a85dc8c1978b2145cfb7ce8ba34bf6d6437f4251", "filename": "src/librustc_error_codes/error_codes/E0025.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0025.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0025.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0025.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,5 +1,6 @@\n-Each field of a struct can only be bound once in a pattern. Erroneous code\n-example:\n+Each field of a struct can only be bound once in a pattern.\n+\n+Erroneous code example:\n \n ```compile_fail,E0025\n struct Foo {"}, {"sha": "72c575aabb64380dfdbda2fb233906a789fa6114", "filename": "src/librustc_error_codes/error_codes/E0026.md", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0026.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0026.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0026.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,51 +1,34 @@\n-This error indicates that a struct pattern attempted to extract a non-existent\n-field from a struct. Struct fields are identified by the name used before the\n-colon `:` so struct patterns should resemble the declaration of the struct type\n-being matched.\n+A struct pattern attempted to extract a non-existent field from a struct.\n \n-```\n-// Correct matching.\n-struct Thing {\n-    x: u32,\n-    y: u32\n-}\n-\n-let thing = Thing { x: 1, y: 2 };\n-\n-match thing {\n-    Thing { x: xfield, y: yfield } => {}\n-}\n-```\n-\n-If you are using shorthand field patterns but want to refer to the struct field\n-by a different name, you should rename it explicitly.\n-\n-Change this:\n+Erroneous code example:\n \n ```compile_fail,E0026\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, z } => {}\n+    Thing { x, z } => {} // error: `Thing::z` field doesn't exist\n }\n ```\n \n-To this:\n+If you are using shorthand field patterns but want to refer to the struct field\n+by a different name, you should rename it explicitly. Struct fields are\n+identified by the name used before the colon `:` so struct patterns should\n+resemble the declaration of the struct type being matched.\n \n ```\n struct Thing {\n     x: u32,\n-    y: u32\n+    y: u32,\n }\n \n let thing = Thing { x: 0, y: 0 };\n \n match thing {\n-    Thing { x, y: z } => {}\n+    Thing { x, y: z } => {} // we renamed `y` to `z`\n }\n ```"}, {"sha": "a8b1340ca0c780c7aa83e63c502d3d1b8bf70f66", "filename": "src/librustc_error_codes/error_codes/E0027.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0027.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0027.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0027.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,8 +1,7 @@\n-This error indicates that a pattern for a struct fails to specify a sub-pattern\n-for every one of the struct's fields. Ensure that each field from the struct's\n-definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n+A pattern for a struct fails to specify a sub-pattern for every one of the\n+struct's fields.\n \n-For example:\n+Erroneous code example:\n \n ```compile_fail,E0027\n struct Dog {\n@@ -18,7 +17,8 @@ match d {\n }\n ```\n \n-This is correct (explicit):\n+To fix this error, ensure that each field from the struct's definition is\n+mentioned in the pattern, or use `..` to ignore unwanted fields. Example:\n \n ```\n struct Dog {"}, {"sha": "d12d85b9b4c993e80acf14e9ce72ba16111c93aa", "filename": "src/librustc_error_codes/error_codes/E0029.md", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0029.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0029.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0029.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,8 +1,6 @@\n-In a match expression, only numbers and characters can be matched against a\n-range. This is because the compiler checks that the range is non-empty at\n-compile-time, and is unable to evaluate arbitrary comparison functions. If you\n-want to capture values of an orderable type between two end-points, you can use\n-a guard.\n+Something other than numbers and characters has been used for a range.\n+\n+Erroneous code example:\n \n ```compile_fail,E0029\n let string = \"salutations !\";\n@@ -20,3 +18,9 @@ match string {\n     _ => {}\n }\n ```\n+\n+In a match expression, only numbers and characters can be matched against a\n+range. This is because the compiler checks that the range is non-empty at\n+compile-time, and is unable to evaluate arbitrary comparison functions. If you\n+want to capture values of an orderable type between two end-points, you can use\n+a guard."}, {"sha": "c49cedf2d586997ead2d2c0a2e0b813ade94e4bc", "filename": "src/librustc_error_codes/error_codes/E0033.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0033.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,8 +1,6 @@\n-This error indicates that a pointer to a trait type cannot be implicitly\n-dereferenced by a pattern. Every trait defines a type, but because the\n-size of trait implementers isn't fixed, this type has no compile-time size.\n-Therefore, all accesses to trait types must be through pointers. If you\n-encounter this error you should try to avoid dereferencing the pointer.\n+A trait type has been dereferenced.\n+\n+Erroneous code example:\n \n ```compile_fail,E0033\n # trait SomeTrait { fn method_one(&self){} fn method_two(&self){} }\n@@ -17,7 +15,13 @@ trait_obj.method_one();\n trait_obj.method_two();\n ```\n \n+A pointer to a trait type cannot be implicitly dereferenced by a pattern. Every\n+trait defines a type, but because the size of trait implementers isn't fixed,\n+this type has no compile-time size. Therefore, all accesses to trait types must\n+be through pointers. If you encounter this error you should try to avoid\n+dereferencing the pointer.\n+\n You can read more about trait objects in the [Trait Objects] section of the\n Reference.\n \n-[Trait Objects]: https://doc.rust-lang.org/reference/types.html#trait-objects\n+[Trait Objects]: https://doc.rust-lang.org/reference/types.html#trait-objects\n\\ No newline at end of file"}, {"sha": "2a21f3441c660fd5dfd039c431b9542b5296b744", "filename": "src/librustc_error_codes/error_codes/E0034.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0034.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0034.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0034.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,5 +1,7 @@\n The compiler doesn't know what method to call because more than one method\n-has the same prototype. Erroneous code example:\n+has the same prototype.\n+\n+Erroneous code example:\n \n ```compile_fail,E0034\n struct Test;"}, {"sha": "1373f8340d8f6ddbc6497c76ccebaee6273e49ae", "filename": "src/librustc_error_codes/error_codes/E0040.md", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0040.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0040.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0040.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,8 +1,6 @@\n-It is not allowed to manually call destructors in Rust. It is also not\n-necessary to do this since `drop` is called automatically whenever a value goes\n-out of scope.\n+It is not allowed to manually call destructors in Rust.\n \n-Here's an example of this error:\n+Erroneous code example:\n \n ```compile_fail,E0040\n struct Foo {\n@@ -20,3 +18,22 @@ fn main() {\n     x.drop(); // error: explicit use of destructor method\n }\n ```\n+\n+It is unnecessary to do this since `drop` is called automatically whenever a\n+value goes out of scope. However, if you really need to drop a value by hand,\n+you can use the `std::mem::drop` function:\n+\n+```\n+struct Foo {\n+    x: i32,\n+}\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    drop(x); // ok!\n+}\n+```"}, {"sha": "635ff95329013a00b5789ec2c0fdc4f3bee9aab7", "filename": "src/librustc_error_codes/error_codes/E0044.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0044.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0044.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0044.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,4 +1,5 @@\n You cannot use type or const parameters on foreign items.\n+\n Example of erroneous code:\n \n ```compile_fail,E0044"}, {"sha": "143c693bf7c0778e4a35651300aa13b9ab869d46", "filename": "src/librustc_error_codes/error_codes/E0045.md", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0045.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0045.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0045.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,18 +1,18 @@\n-Rust only supports variadic parameters for interoperability with C code in its\n-FFI. As such, variadic parameters can only be used with functions which are\n-using the C ABI. Examples of erroneous code:\n-\n-```compile_fail\n-#![feature(unboxed_closures)]\n+Variadic parameters have been used on a non-C ABI function.\n \n-extern \"rust-call\" { fn foo(x: u8, ...); }\n+Erroneous code example:\n \n-// or\n+```compile_fail,E0045\n+#![feature(unboxed_closures)]\n \n-fn foo(x: u8, ...) {}\n+extern \"rust-call\" {\n+    fn foo(x: u8, ...); // error!\n+}\n ```\n \n-To fix such code, put them in an extern \"C\" block:\n+Rust only supports variadic parameters for interoperability with C code in its\n+FFI. As such, variadic parameters can only be used with functions which are\n+using the C ABI. To fix such code, put them in an extern \"C\" block:\n \n ```\n extern \"C\" {"}, {"sha": "d8f95330c364bd032ee07613cb5d7180b1fc6a1d", "filename": "src/librustc_error_codes/error_codes/E0046.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0046.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0046.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0046.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,4 +1,6 @@\n-Items are missing in a trait implementation. Erroneous code example:\n+Items are missing in a trait implementation.\n+\n+Erroneous code example:\n \n ```compile_fail,E0046\n trait Foo {"}, {"sha": "a2034a3428b2d6986586c7fa9edad672d1db41d3", "filename": "src/librustc_error_codes/error_codes/E0049.md", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0049.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0049.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0049.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,8 +1,7 @@\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of type or const parameters.\n+An attempted implementation of a trait method has the wrong number of type or\n+const parameters.\n \n-For example, the trait below has a method `foo` with a type parameter `T`,\n-but the implementation of `foo` for the type `Bar` is missing this parameter:\n+Erroneous code example:\n \n ```compile_fail,E0049\n trait Foo {\n@@ -17,3 +16,21 @@ impl Foo for Bar {\n     fn foo(x: bool) -> Self { Bar }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with a type parameter `T`,\n+but the implementation of `foo` for the type `Bar` is missing this parameter.\n+To fix this error, they must have the same type parameters:\n+\n+```\n+trait Foo {\n+    fn foo<T: Default>(x: T) -> Self;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo<T: Default>(x: T) -> Self { // ok!\n+        Bar\n+    }\n+}\n+```"}, {"sha": "7b84c48007399b7035460ac9e442aa9ebb38c08c", "filename": "src/librustc_error_codes/error_codes/E0050.md", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0050.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0050.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0050.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,9 +1,7 @@\n-This error indicates that an attempted implementation of a trait method\n-has the wrong number of function parameters.\n+An attempted implementation of a trait method has the wrong number of function\n+parameters.\n \n-For example, the trait below has a method `foo` with two function parameters\n-(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n-the `u8` parameter:\n+Erroneous code example:\n \n ```compile_fail,E0050\n trait Foo {\n@@ -18,3 +16,21 @@ impl Foo for Bar {\n     fn foo(&self) -> bool { true }\n }\n ```\n+\n+For example, the `Foo` trait has a method `foo` with two function parameters\n+(`&self` and `u8`), but the implementation of `foo` for the type `Bar` omits\n+the `u8` parameter. To fix this error, they must have the same parameters:\n+\n+```\n+trait Foo {\n+    fn foo(&self, x: u8) -> bool;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(&self, x: u8) -> bool { // ok!\n+        true\n+    }\n+}\n+```"}, {"sha": "cb2a8638a29c538ff3771deeef800cb8772989ea", "filename": "src/librustc_error_codes/error_codes/E0053.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0053.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0053.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0053.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,7 +1,7 @@\n The parameters of any trait method must match between a trait implementation\n and the trait definition.\n \n-Here are a couple examples of this error:\n+Erroneous code example:\n \n ```compile_fail,E0053\n trait Foo {"}, {"sha": "c3eb375fbcc9a07e066a7af1ce3803346d81611c", "filename": "src/librustc_error_codes/error_codes/E0054.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0054.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f2f03fbd156c0058c2556560d4a6263012feeb3/src%2Flibrustc_error_codes%2Ferror_codes%2FE0054.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0054.md?ref=0f2f03fbd156c0058c2556560d4a6263012feeb3", "patch": "@@ -1,5 +1,6 @@\n-It is not allowed to cast to a bool. If you are trying to cast a numeric type\n-to a bool, you can compare it with zero instead:\n+It is not allowed to cast to a bool.\n+\n+Erroneous code example:\n \n ```compile_fail,E0054\n let x = 5;\n@@ -8,6 +9,9 @@ let x = 5;\n let x_is_nonzero = x as bool;\n ```\n \n+If you are trying to cast a numeric type to a bool, you can compare it with\n+zero instead:\n+\n ```\n let x = 5;\n "}]}