{"sha": "a4f0021f897630f8e12ef59b83d1859b9031c224", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZjAwMjFmODk3NjMwZjhlMTJlZjU5YjgzZDE4NTliOTAzMWMyMjQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-17T17:10:18Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-17T17:10:18Z"}, "message": "Update and copyedit README for rustc\n\nLindsey pointed out that the location of librustsyntax was out-of-date,\nso I fixed that; noticed a lot of other out-of-date info; and updated it.\nI also obliterated all passive voice. Yay!\n\nCloses #2382", "tree": {"sha": "3e77d3238e281a9092b988f9ce490d7e5ecd8f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e77d3238e281a9092b988f9ce490d7e5ecd8f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4f0021f897630f8e12ef59b83d1859b9031c224", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f0021f897630f8e12ef59b83d1859b9031c224", "html_url": "https://github.com/rust-lang/rust/commit/a4f0021f897630f8e12ef59b83d1859b9031c224", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4f0021f897630f8e12ef59b83d1859b9031c224/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0343b0553b4b5586f9f71923128c0eb9584cd99d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0343b0553b4b5586f9f71923128c0eb9584cd99d", "html_url": "https://github.com/rust-lang/rust/commit/0343b0553b4b5586f9f71923128c0eb9584cd99d"}], "stats": {"total": 55, "additions": 35, "deletions": 20}, "files": [{"sha": "adf9492e1eda050d213ddd9f5c8951208586fa9e", "filename": "src/rustc/README.txt", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a4f0021f897630f8e12ef59b83d1859b9031c224/src%2Frustc%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/a4f0021f897630f8e12ef59b83d1859b9031c224/src%2Frustc%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FREADME.txt?ref=a4f0021f897630f8e12ef59b83d1859b9031c224", "patch": "@@ -1,25 +1,38 @@\n An informal guide to reading and working on the rustc compiler.\n ==================================================================\n \n-If you wish to expand on this document, or have one of the\n-slightly-more-familiar authors add anything else to it, please get in\n-touch or file a bug. Your concerns are probably the same as someone\n-else's.\n+If you wish to expand on this document, or have a more experienced\n+Rust contributor add anything else to it, please get in touch:\n+\n+https://github.com/mozilla/rust/wiki/Note-development-policy\n+(\"Communication\" subheading)\n+\n+or file a bug:\n+\n+https://github.com/mozilla/rust/issues\n+\n+Your concerns are probably the same as someone else's.\n \n \n High-level concepts\n ===================\n \n Rustc consists of the following subdirectories:\n \n-syntax/   - pure syntax concerns: lexer, parser, AST.\n front/    - front-end: attributes, conditional compilation\n-middle/   - middle-end: resolving, typechecking, translating\n+middle/   - middle-end: resolving, typechecking, generating LLVM code\n back/     - back-end: linking and ABI\n+metadata/ - serializer and deserializer for data required by\n+                    separate compilation\n driver/   - command-line processing, main() entrypoint\n util/     - ubiquitous types and helper functions\n lib/      - bindings to LLVM\n-pretty/   - pretty-printing\n+\n+The files concerned purely with syntax -- that is, the AST, parser,\n+pretty-printer, lexer, macro expander, and utilities for traversing\n+ASTs -- are in a separate crate called \"rustsyntax\", whose files are\n+in ./../librustsyntax if the parent directory of front/, middle/,\n+back/, and so on is . .\n \n The entry-point for the compiler is main() in driver/rustc.rs, and\n this file sequences the various parts together.\n@@ -28,10 +41,9 @@ this file sequences the various parts together.\n The 3 central data structures:\n ------------------------------\n \n-#1: syntax/ast.rs defines the AST. The AST is treated as immutable\n-    after parsing despite containing some mutable types (hashtables\n-    and such).  There are three interesting details to know about this\n-    structure:\n+#1: ../librustsyntax/ast.rs defines the AST. The AST is treated as immutable\n+    after parsing, but it depends on mutable context data structures\n+    (mainly hash maps) to give it meaning.\n \n       - Many -- though not all -- nodes within this data structure are\n         wrapped in the type spanned<T>, meaning that the front-end has\n@@ -55,7 +67,7 @@ The 3 central data structures:\n \n #3: lib/llvm.rs defines the exported types ValueRef, TypeRef,\n     BasicBlockRef, and several others. Each of these is an opaque\n-    pointer to an LLVM type, manipulated through the lib.llvm\n+    pointer to an LLVM type, manipulated through the lib::llvm\n     interface.\n \n \n@@ -65,13 +77,16 @@ Control and information flow within the compiler:\n - main() in driver/rustc.rs assumes control on startup. Options are\n   parsed, platform is detected, etc.\n \n-- front/parser.rs is driven over the input files.\n+- librustsyntax/parse/parser.rs parses the input files and produces an\n+  AST that represents the input crate.\n \n-- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs) are\n-  run over the resulting AST. Each pass generates new information\n-  about the AST which is stored in various side data structures.\n+- Multiple middle-end passes (middle/resolve.rs, middle/typeck.rs)\n+  analyze the semantics of the resulting AST. Each pass generates new\n+  information about the AST and stores it in various environment data\n+  structures. The driver is in charge of passing the correct\n+  environments to each compiler pass that needs to refer to them.\n \n-- Finally middle/trans.rs is applied to the AST, which performs a\n-  type-directed translation to LLVM-ese. When it's finished\n-  synthesizing LLVM values, rustc asks LLVM to write them out in some\n-  form (.bc, .o) and possibly run the system linker.\n+- Finally middle/trans.rs translates the Rust AST to LLVM bitcode in a\n+  type-directed way. When it's finished synthesizing LLVM values,\n+  rustc asks LLVM to write them out in some form (.bc, .o) and\n+  possibly run the system linker."}]}