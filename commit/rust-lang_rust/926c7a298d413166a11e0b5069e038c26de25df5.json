{"sha": "926c7a298d413166a11e0b5069e038c26de25df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNmM3YTI5OGQ0MTMxNjZhMTFlMGI1MDY5ZTAzOGMyNmRlMjVkZjU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-05T21:14:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-05-02T16:51:44Z"}, "message": "typeck: always expose explicit enum discriminant `AnonConst`s' parent in `generics_of`.", "tree": {"sha": "126af810e03f29076fc46ef9c2198a2cea00cbb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/126af810e03f29076fc46ef9c2198a2cea00cbb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/926c7a298d413166a11e0b5069e038c26de25df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/926c7a298d413166a11e0b5069e038c26de25df5", "html_url": "https://github.com/rust-lang/rust/commit/926c7a298d413166a11e0b5069e038c26de25df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/926c7a298d413166a11e0b5069e038c26de25df5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c29f0cc8e599d8cb0394f9220c509f40dd240d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c29f0cc8e599d8cb0394f9220c509f40dd240d6", "html_url": "https://github.com/rust-lang/rust/commit/2c29f0cc8e599d8cb0394f9220c509f40dd240d6"}], "stats": {"total": 85, "additions": 83, "deletions": 2}, "files": [{"sha": "d01177e2fb561a7d5f96cc97e6aceeac7878f88d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -1178,9 +1178,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n                 match parent_node {\n                     // HACK(eddyb) this provides the correct generics for repeat\n-                    // expressions' count (i.e. `N` in `[x; N]`), as they shouldn't\n-                    // be able to cause query cycle errors.\n+                    // expressions' count (i.e. `N` in `[x; N]`), and explicit\n+                    // `enum` discriminants (i.e. `D` in `enum Foo { Bar = D }`),\n+                    // as they shouldn't be able to cause query cycle errors.\n                     Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n+                    | Node::Variant(Variant { disr_expr: Some(ref constant), .. })\n                         if constant.hir_id == hir_id =>\n                     {\n                         Some(parent_def_id.to_def_id())"}, {"sha": "0cfb93d466835adc95d29a8337d8fdab578eadda", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.rs?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -0,0 +1,16 @@\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+    None = 0,\n+    Some(T) = std::mem::size_of::<T>(),\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::Some(0u8)), 1);\n+}"}, {"sha": "91d488a07cc6df61575be045f6ab1d7fd06dac89", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice-2.stderr?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-70453-generics-in-discr-ice-2.rs:9:15\n+   |\n+LL |     Some(T) = std::mem::size_of::<T>(),\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "676f1115dde01cd8e8ee574c8810d98c5796bc21", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.rs?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -0,0 +1,17 @@\n+#![feature(core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+//~^ ERROR parameter `T` is never used\n+    None = 0,\n+    Some = std::mem::size_of::<T>(),\n+    //~^ ERROR constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::<u8>::Some), 1);\n+}"}, {"sha": "52e58aa4c6d70039075a63f1d15881686b7e6b4d", "filename": "src/test/ui/enum-discriminant/issue-70453-generics-in-discr-ice.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-generics-in-discr-ice.stderr?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -0,0 +1,19 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-70453-generics-in-discr-ice.rs:10:12\n+   |\n+LL |     Some = std::mem::size_of::<T>(),\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/issue-70453-generics-in-discr-ice.rs:7:20\n+   |\n+LL | enum MyWeirdOption<T> {\n+   |                    ^ unused parameter\n+   |\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0392`."}, {"sha": "05911a9a3036e7088388b17aff54b71d5a133424", "filename": "src/test/ui/enum-discriminant/issue-70453-polymorphic-ctfe.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926c7a298d413166a11e0b5069e038c26de25df5/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fissue-70453-polymorphic-ctfe.rs?ref=926c7a298d413166a11e0b5069e038c26de25df5", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(arbitrary_enum_discriminant, core_intrinsics)]\n+\n+extern crate core;\n+use core::intrinsics::discriminant_value;\n+\n+#[repr(usize)]\n+enum MyWeirdOption<T> {\n+    None = 0,\n+    Some(T) = core::mem::size_of::<*mut T>(),\n+}\n+\n+fn main() {\n+    assert_eq!(discriminant_value(&MyWeirdOption::<()>::None), 0);\n+    assert_eq!(discriminant_value(&MyWeirdOption::Some(())), core::mem::size_of::<usize>() as u64);\n+}"}]}