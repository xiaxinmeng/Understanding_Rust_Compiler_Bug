{"sha": "c48730cb72919df7f1426085872846524b5a3cb2", "node_id": "C_kwDOAAsO6NoAKGM0ODczMGNiNzI5MTlkZjdmMTQyNjA4NTg3Mjg0NjUyNGI1YTNjYjI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-26T17:51:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-26T17:51:33Z"}, "message": "Merge #10639 #10640\n\n10639: fix: make `goto_declaration` multi-token mapping aware r=Veykril a=spookyvision\n\n\n\n10640: assume valid identifier r=Veykril a=spookyvision\n\nimprove https://github.com/rust-analyzer/rust-analyzer/pull/10637/ by always returning `Some(potentially_empty_vec)` instead of `None` in the empty case\n\nCo-authored-by: Anatol Ulrich <anatol.ulrich@ferrous-systems.com>", "tree": {"sha": "c8ce4e0316525b721ee467c2eaaf605cc5562db9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8ce4e0316525b721ee467c2eaaf605cc5562db9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c48730cb72919df7f1426085872846524b5a3cb2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJheEAlCRBK7hj4Ov3rIwAAXHUIAJ7HR0brSJETUGd/riaBCVro\nSPQ3y3QI8V7Na6QcLGzMKkr+3b2vou67TTBxtZrJpCUS6OxECPjIwhifjMvPuKCG\nYLejZ8X5qMtQDPLyoBXH10bmWxDpv00SU2Kbp/I2f4VWR1fF0wiPZR3SgvOQxUZx\neJO4dodv4K+eLajp89weIsbJL6bwuwQZZ2yj9ctedL6JcRqpYYk4i8xWI2F1tup2\nE29G5JSTZ4Bg5K46C/bwc8cqJrcF6xPYFY9Xo1duL3N8MyN7xKI0ZdLdbJFdTsxG\n0YGlf3NLciacJOZSacsx6b5MgzjqDeQZ+5vQ+5z+lHmBIBX1LHd95HFTIavdWBs=\n=oGjb\n-----END PGP SIGNATURE-----\n", "payload": "tree c8ce4e0316525b721ee467c2eaaf605cc5562db9\nparent ba2b599131218691493fc891884d4b5003a58d90\nparent d8ed15b6a67bb4dd04ebc6548253b9eb553ad023\nparent 53be26df5063fec8f626bc82747138973ec51633\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1635270693 +0000\ncommitter GitHub <noreply@github.com> 1635270693 +0000\n\nMerge #10639 #10640\n\n10639: fix: make `goto_declaration` multi-token mapping aware r=Veykril a=spookyvision\n\n\n\n10640: assume valid identifier r=Veykril a=spookyvision\n\nimprove https://github.com/rust-analyzer/rust-analyzer/pull/10637/ by always returning `Some(potentially_empty_vec)` instead of `None` in the empty case\n\nCo-authored-by: Anatol Ulrich <anatol.ulrich@ferrous-systems.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c48730cb72919df7f1426085872846524b5a3cb2", "html_url": "https://github.com/rust-lang/rust/commit/c48730cb72919df7f1426085872846524b5a3cb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c48730cb72919df7f1426085872846524b5a3cb2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba2b599131218691493fc891884d4b5003a58d90", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2b599131218691493fc891884d4b5003a58d90", "html_url": "https://github.com/rust-lang/rust/commit/ba2b599131218691493fc891884d4b5003a58d90"}, {"sha": "d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023", "html_url": "https://github.com/rust-lang/rust/commit/d8ed15b6a67bb4dd04ebc6548253b9eb553ad023"}, {"sha": "53be26df5063fec8f626bc82747138973ec51633", "url": "https://api.github.com/repos/rust-lang/rust/commits/53be26df5063fec8f626bc82747138973ec51633", "html_url": "https://github.com/rust-lang/rust/commit/53be26df5063fec8f626bc82747138973ec51633"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "c79015c71604dc42454f94c18947a94afdefa081", "filename": "crates/ide/src/goto_declaration.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c48730cb72919df7f1426085872846524b5a3cb2/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48730cb72919df7f1426085872846524b5a3cb2/crates%2Fide%2Fsrc%2Fgoto_declaration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_declaration.rs?ref=c48730cb72919df7f1426085872846524b5a3cb2", "patch": "@@ -19,28 +19,35 @@ pub(crate) fn goto_declaration(\n     let original_token = file\n         .token_at_offset(position.offset)\n         .find(|it| matches!(it.kind(), IDENT | T![self] | T![super] | T![crate]))?;\n-    let token = sema.descend_into_macros_single(original_token.clone());\n-    let parent = token.parent()?;\n-    let def = match_ast! {\n-        match parent {\n-            ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n-                NameRefClass::Definition(it) => Some(it),\n-                _ => None\n-            },\n-            ast::Name(name) => match NameClass::classify(&sema, &name)? {\n-                NameClass::Definition(it) => Some(it),\n-                _ => None\n-            },\n-            _ => None,\n-        }\n-    };\n-    match def? {\n-        Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(RangeInfo::new(\n-            original_token.text_range(),\n-            vec![NavigationTarget::from_module_to_decl(db, module)],\n-        )),\n-        _ => None,\n-    }\n+    let range = original_token.text_range();\n+    let info: Vec<NavigationTarget> = sema\n+        .descend_into_macros(original_token)\n+        .iter()\n+        .filter_map(|token| {\n+            let parent = token.parent()?;\n+            let def = match_ast! {\n+                match parent {\n+                    ast::NameRef(name_ref) => match NameRefClass::classify(&sema, &name_ref)? {\n+                        NameRefClass::Definition(it) => Some(it),\n+                        _ => None\n+                    },\n+                    ast::Name(name) => match NameClass::classify(&sema, &name)? {\n+                        NameClass::Definition(it) => Some(it),\n+                        _ => None\n+                    },\n+                    _ => None\n+                }\n+            };\n+            match def? {\n+                Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n+                    Some(NavigationTarget::from_module_to_decl(db, module))\n+                }\n+                _ => None,\n+            }\n+        })\n+        .collect();\n+\n+    Some(RangeInfo::new(range, info))\n }\n \n #[cfg(test)]"}, {"sha": "693098e3f29e14a9916db1393fcdfd6fe6ae4171", "filename": "crates/ide/src/goto_type_definition.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c48730cb72919df7f1426085872846524b5a3cb2/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c48730cb72919df7f1426085872846524b5a3cb2/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_type_definition.rs?ref=c48730cb72919df7f1426085872846524b5a3cb2", "patch": "@@ -81,11 +81,7 @@ pub(crate) fn goto_type_definition(\n                 }\n             });\n         });\n-    if res.is_empty() {\n-        None\n-    } else {\n-        Some(RangeInfo::new(range, res))\n-    }\n+    Some(RangeInfo::new(range, res))\n }\n \n #[cfg(test)]"}]}