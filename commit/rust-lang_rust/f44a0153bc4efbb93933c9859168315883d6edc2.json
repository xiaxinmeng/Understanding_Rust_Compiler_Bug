{"sha": "f44a0153bc4efbb93933c9859168315883d6edc2", "node_id": "C_kwDOAAsO6NoAKGY0NGEwMTUzYmM0ZWZiYjkzOTMzYzk4NTkxNjgzMTU4ODNkNmVkYzI", "commit": {"author": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-11-24T02:15:50Z"}, "committer": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-12-05T23:05:43Z"}, "message": "Support Option and similar enums as type of static variable with linkage attribute.\n\nCompiler MCP:\nhttps://github.com/rust-lang/compiler-team/issues/565", "tree": {"sha": "6acfeac9359739c1f65c722626e632551919eb1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6acfeac9359739c1f65c722626e632551919eb1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44a0153bc4efbb93933c9859168315883d6edc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44a0153bc4efbb93933c9859168315883d6edc2", "html_url": "https://github.com/rust-lang/rust/commit/f44a0153bc4efbb93933c9859168315883d6edc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44a0153bc4efbb93933c9859168315883d6edc2/comments", "author": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5873ebeef3a4497c14b4199abba705fe7b530935", "url": "https://api.github.com/repos/rust-lang/rust/commits/5873ebeef3a4497c14b4199abba705fe7b530935", "html_url": "https://github.com/rust-lang/rust/commit/5873ebeef3a4497c14b4199abba705fe7b530935"}], "stats": {"total": 72, "additions": 67, "deletions": 5}, "files": [{"sha": "31a709c36d4bc57461cf93cc57840ece6635ebc2", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -494,6 +494,7 @@ E0786: include_str!(\"./error_codes/E0786.md\"),\n E0787: include_str!(\"./error_codes/E0787.md\"),\n E0788: include_str!(\"./error_codes/E0788.md\"),\n E0790: include_str!(\"./error_codes/E0790.md\"),\n+E0791: include_str!(\"./error_codes/E0791.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "61d2f511a348db34cd81db91fb581945e5ae605f", "filename": "compiler/rustc_error_codes/src/error_codes/E0791.md", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0791.md?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -0,0 +1,41 @@\n+Static variables with the `#[linkage]` attribute within external blocks\n+must have one of the following types, which are equivalent to a nullable\n+pointer in C:\n+\n+* `*mut T` or `*const T`, where `T` may be any type.\n+\n+* An enumerator type with no `#[repr]` attribute and with two variants, where\n+  one of the variants has no fields, and the other has a single field of one of\n+  the following non-nullable types:\n+  * Reference type\n+  * Function pointer type\n+\n+  The variants can appear in either order.\n+\n+For example, the following declaration is invalid:\n+\n+```compile_fail,E0791\n+#![feature(linkage)]\n+\n+extern \"C\" {\n+    #[linkage = \"extern_weak\"]\n+    static foo: i8;\n+}\n+```\n+\n+The following declarations are valid:\n+\n+```\n+#![feature(linkage)]\n+\n+extern \"C\" {\n+    #[linkage = \"extern_weak\"]\n+    static foo: Option<unsafe extern \"C\" fn()>;\n+\n+    #[linkage = \"extern_weak\"]\n+    static bar: Option<&'static i8>;\n+\n+    #[linkage = \"extern_weak\"]\n+    static baz: *mut i8;\n+}\n+```"}, {"sha": "a4910dacd5ff01cce2ab23d8ea3a31e7b4aa8b4b", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -115,4 +115,4 @@ hir_analysis_self_in_impl_self =\n     .note = replace `Self` with a different type\n \n hir_analysis_linkage_type =\n-    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+    invalid type for variable with `#[linkage]` attribute"}, {"sha": "fc0ca62090d19c62b3a1656963ef85f026d1b793", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::middle::stability::EvalResult;\n use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n-use rustc_middle::ty::{self, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n+use rustc_middle::ty::{self, AdtDef, ParamEnv, Ty, TyCtxt, TypeSuperVisitable, TypeVisitable};\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n@@ -479,10 +479,29 @@ fn check_opaque_meets_bounds<'tcx>(\n     let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n }\n \n+fn is_enum_of_nonnullable_ptr<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    adt_def: AdtDef<'tcx>,\n+    substs: SubstsRef<'tcx>,\n+) -> bool {\n+    if adt_def.repr().inhibit_enum_layout_opt() {\n+        return false;\n+    }\n+\n+    let [var_one, var_two] = &adt_def.variants().raw[..] else {\n+        return false;\n+    };\n+    let (([], [field]) | ([field], [])) = (&var_one.fields[..], &var_two.fields[..]) else {\n+        return false;\n+    };\n+    matches!(field.ty(tcx, substs).kind(), ty::FnPtr(..) | ty::Ref(..))\n+}\n+\n fn check_static_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n     if tcx.codegen_fn_attrs(def_id).import_linkage.is_some() {\n         if match tcx.type_of(def_id).kind() {\n             ty::RawPtr(_) => false,\n+            ty::Adt(adt_def, substs) => !is_enum_of_nonnullable_ptr(tcx, *adt_def, *substs),\n             _ => true,\n         } {\n             tcx.sess.emit_err(LinkageType { span: tcx.def_span(def_id) });"}, {"sha": "1ac53fb6ddf29bf20f5e885880ecd059ca8637ef", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -287,7 +287,7 @@ pub struct SelfInImplSelf {\n }\n \n #[derive(Diagnostic)]\n-#[diag(hir_analysis_linkage_type)]\n+#[diag(hir_analysis_linkage_type, code = \"E0791\")]\n pub(crate) struct LinkageType {\n     #[primary_span]\n     pub span: Span,"}, {"sha": "aa42874f7ba8a64767d80708e2282fb1e349d88c", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -5,7 +5,7 @@\n extern \"C\" {\n     #[linkage = \"extern_weak\"]\n     static foo: i32;\n-//~^ ERROR: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+//~^ ERROR: invalid type for variable with `#[linkage]` attribute\n }\n \n fn main() {"}, {"sha": "7265f711fd01643ca2020957052fadab196312d4", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f44a0153bc4efbb93933c9859168315883d6edc2/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44a0153bc4efbb93933c9859168315883d6edc2/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=f44a0153bc4efbb93933c9859168315883d6edc2", "patch": "@@ -1,8 +1,9 @@\n-error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n+error[E0791]: invalid type for variable with `#[linkage]` attribute\n   --> $DIR/linkage2.rs:7:5\n    |\n LL |     static foo: i32;\n    |     ^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0791`."}]}