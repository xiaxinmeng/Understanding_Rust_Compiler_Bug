{"sha": "fed881aafc9fe4889a32a74060dc1d4294960477", "node_id": "C_kwDOAAsO6NoAKGZlZDg4MWFhZmM5ZmU0ODg5YTMyYTc0MDYwZGMxZDQyOTQ5NjA0Nzc", "commit": {"author": {"name": "LegionMammal978", "email": "mattlloydhouse@gmail.com", "date": "2021-12-14T17:02:45Z"}, "committer": {"name": "Matthew House", "email": "mattlloydhouse@gmail.com", "date": "2021-12-16T19:29:43Z"}, "message": "Remove `in_band_lifetimes` from `rustc_mir_dataflow`\n\nSee #91867 for more information.", "tree": {"sha": "d1b5cfc5d11eeaa2523419162d8685033e638835", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b5cfc5d11eeaa2523419162d8685033e638835"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fed881aafc9fe4889a32a74060dc1d4294960477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fed881aafc9fe4889a32a74060dc1d4294960477", "html_url": "https://github.com/rust-lang/rust/commit/fed881aafc9fe4889a32a74060dc1d4294960477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fed881aafc9fe4889a32a74060dc1d4294960477/comments", "author": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegionMammal978", "id": 7880963, "node_id": "MDQ6VXNlcjc4ODA5NjM=", "avatar_url": "https://avatars.githubusercontent.com/u/7880963?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegionMammal978", "html_url": "https://github.com/LegionMammal978", "followers_url": "https://api.github.com/users/LegionMammal978/followers", "following_url": "https://api.github.com/users/LegionMammal978/following{/other_user}", "gists_url": "https://api.github.com/users/LegionMammal978/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegionMammal978/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegionMammal978/subscriptions", "organizations_url": "https://api.github.com/users/LegionMammal978/orgs", "repos_url": "https://api.github.com/users/LegionMammal978/repos", "events_url": "https://api.github.com/users/LegionMammal978/events{/privacy}", "received_events_url": "https://api.github.com/users/LegionMammal978/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d01550f7ea9fce1cf625128fefc73b9da3c1508", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d01550f7ea9fce1cf625128fefc73b9da3c1508", "html_url": "https://github.com/rust-lang/rust/commit/1d01550f7ea9fce1cf625128fefc73b9da3c1508"}], "stats": {"total": 130, "additions": 70, "deletions": 60}, "files": [{"sha": "102e74397724a5a96d7570d77882be385293e6c0", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -18,7 +18,7 @@ pub trait Direction {\n     /// Applies all effects between the given `EffectIndex`s.\n     ///\n     /// `effects.start()` must precede or equal `effects.end()` in this direction.\n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -27,23 +27,23 @@ pub trait Direction {\n     ) where\n         A: Analysis<'tcx>;\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n     ) where\n         A: Analysis<'tcx>;\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n         block_data: &mir::BasicBlockData<'tcx>,\n     ) where\n         A: GenKillAnalysis<'tcx>;\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -52,7 +52,7 @@ pub trait Direction {\n     ) where\n         R: ResultsVisitable<'tcx, FlowState = F>;\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n@@ -72,7 +72,7 @@ impl Direction for Backward {\n         false\n     }\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -92,7 +92,7 @@ impl Direction for Backward {\n         }\n     }\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n@@ -112,7 +112,7 @@ impl Direction for Backward {\n         }\n     }\n \n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -189,7 +189,7 @@ impl Direction for Backward {\n         analysis.apply_statement_effect(state, statement, location);\n     }\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -221,7 +221,7 @@ impl Direction for Backward {\n         vis.visit_block_start(state, block_data, block);\n     }\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         body: &mir::Body<'tcx>,\n@@ -294,7 +294,7 @@ impl Direction for Forward {\n         true\n     }\n \n-    fn apply_effects_in_block<A>(\n+    fn apply_effects_in_block<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -314,7 +314,7 @@ impl Direction for Forward {\n         analysis.apply_terminator_effect(state, terminator, location);\n     }\n \n-    fn gen_kill_effects_in_block<A>(\n+    fn gen_kill_effects_in_block<'tcx, A>(\n         analysis: &A,\n         trans: &mut GenKillSet<A::Idx>,\n         block: BasicBlock,\n@@ -334,7 +334,7 @@ impl Direction for Forward {\n         analysis.terminator_effect(trans, terminator, location);\n     }\n \n-    fn apply_effects_in_range<A>(\n+    fn apply_effects_in_range<'tcx, A>(\n         analysis: &A,\n         state: &mut A::Domain,\n         block: BasicBlock,\n@@ -407,7 +407,7 @@ impl Direction for Forward {\n         }\n     }\n \n-    fn visit_results_in_block<F, R>(\n+    fn visit_results_in_block<'mir, 'tcx, F, R>(\n         state: &mut F,\n         block: BasicBlock,\n         block_data: &'mir mir::BasicBlockData<'tcx>,\n@@ -438,7 +438,7 @@ impl Direction for Forward {\n         vis.visit_block_end(state, block_data, block);\n     }\n \n-    fn join_state_into_successors_of<A>(\n+    fn join_state_into_successors_of<'tcx, A>(\n         analysis: &A,\n         _tcx: TyCtxt<'tcx>,\n         _body: &mir::Body<'tcx>,\n@@ -591,7 +591,7 @@ where\n //\n // FIXME: Figure out how to express this using `Option::clone_from`, or maybe lift it into the\n // standard library?\n-fn opt_clone_from_or_clone<T: Clone>(opt: &'a mut Option<T>, val: &T) -> &'a mut T {\n+fn opt_clone_from_or_clone<'a, T: Clone>(opt: &'a mut Option<T>, val: &T) -> &'a mut T {\n     if opt.is_some() {\n         let ret = opt.as_mut().unwrap();\n         ret.clone_from(val);"}, {"sha": "e8a6d8dad439eb5e02cbee55007d7be5d654c12a", "filename": "compiler/rustc_mir_dataflow/src/framework/engine.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fengine.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -31,12 +31,15 @@ where\n     pub(super) entry_sets: IndexVec<BasicBlock, A::Domain>,\n }\n \n-impl<A> Results<'tcx, A>\n+impl<'tcx, A> Results<'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n     /// Creates a `ResultsCursor` that can inspect these `Results`.\n-    pub fn into_results_cursor(self, body: &'mir mir::Body<'tcx>) -> ResultsCursor<'mir, 'tcx, A> {\n+    pub fn into_results_cursor<'mir>(\n+        self,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> ResultsCursor<'mir, 'tcx, A> {\n         ResultsCursor::new(body, self)\n     }\n \n@@ -45,7 +48,7 @@ where\n         &self.entry_sets[block]\n     }\n \n-    pub fn visit_with(\n+    pub fn visit_with<'mir>(\n         &self,\n         body: &'mir mir::Body<'tcx>,\n         blocks: impl IntoIterator<Item = BasicBlock>,\n@@ -54,7 +57,7 @@ where\n         visit_results(body, blocks, self, vis)\n     }\n \n-    pub fn visit_reachable_with(\n+    pub fn visit_reachable_with<'mir>(\n         &self,\n         body: &'mir mir::Body<'tcx>,\n         vis: &mut impl ResultsVisitor<'mir, 'tcx, FlowState = A::Domain>,\n@@ -85,7 +88,7 @@ where\n     apply_trans_for_block: Option<Box<dyn Fn(BasicBlock, &mut A::Domain)>>,\n }\n \n-impl<A, D, T> Engine<'a, 'tcx, A>\n+impl<'a, 'tcx, A, D, T> Engine<'a, 'tcx, A>\n where\n     A: GenKillAnalysis<'tcx, Idx = T, Domain = D>,\n     D: Clone + JoinSemiLattice + GenKill<T> + BorrowMut<BitSet<T>>,\n@@ -119,7 +122,7 @@ where\n     }\n }\n \n-impl<A, D> Engine<'a, 'tcx, A>\n+impl<'a, 'tcx, A, D> Engine<'a, 'tcx, A>\n where\n     A: Analysis<'tcx, Domain = D>,\n     D: Clone + JoinSemiLattice,\n@@ -257,7 +260,7 @@ where\n \n /// Writes a DOT file containing the results of a dataflow analysis if the user requested it via\n /// `rustc_mir` attributes.\n-fn write_graphviz_results<A>(\n+fn write_graphviz_results<'tcx, A>(\n     tcx: TyCtxt<'tcx>,\n     body: &mir::Body<'tcx>,\n     results: &Results<'tcx, A>,\n@@ -330,7 +333,7 @@ struct RustcMirAttrs {\n }\n \n impl RustcMirAttrs {\n-    fn parse(tcx: TyCtxt<'tcx>, def_id: DefId) -> Result<Self, ()> {\n+    fn parse(tcx: TyCtxt<'_>, def_id: DefId) -> Result<Self, ()> {\n         let attrs = tcx.get_attrs(def_id);\n \n         let mut result = Ok(());\n@@ -373,7 +376,7 @@ impl RustcMirAttrs {\n \n     fn set_field<T>(\n         field: &mut Option<T>,\n-        tcx: TyCtxt<'tcx>,\n+        tcx: TyCtxt<'_>,\n         attr: &ast::NestedMetaItem,\n         mapper: impl FnOnce(Symbol) -> Result<T, ()>,\n     ) -> Result<(), ()> {"}, {"sha": "34bc157a744a7f96319275de61e1c2029da58d4f", "filename": "compiler/rustc_mir_dataflow/src/framework/graphviz.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fgraphviz.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -36,7 +36,7 @@ where\n     style: OutputStyle,\n }\n \n-impl<A> Formatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> Formatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n@@ -52,7 +52,7 @@ pub struct CfgEdge {\n     index: usize,\n }\n \n-fn dataflow_successors(body: &Body<'tcx>, bb: BasicBlock) -> Vec<CfgEdge> {\n+fn dataflow_successors(body: &Body<'_>, bb: BasicBlock) -> Vec<CfgEdge> {\n     body[bb]\n         .terminator()\n         .successors()\n@@ -61,7 +61,7 @@ fn dataflow_successors(body: &Body<'tcx>, bb: BasicBlock) -> Vec<CfgEdge> {\n         .collect()\n }\n \n-impl<A> dot::Labeller<'_> for Formatter<'a, 'tcx, A>\n+impl<'tcx, A> dot::Labeller<'_> for Formatter<'_, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -100,7 +100,7 @@ where\n     }\n }\n \n-impl<A> dot::GraphWalk<'a> for Formatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> dot::GraphWalk<'a> for Formatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n {\n@@ -138,7 +138,7 @@ where\n     style: OutputStyle,\n }\n \n-impl<A> BlockFormatter<'a, 'tcx, A>\n+impl<'a, 'tcx, A> BlockFormatter<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -491,7 +491,7 @@ where\n     after: Vec<String>,\n }\n \n-impl<A> StateDiffCollector<'a, 'tcx, A>\n+impl<'a, 'tcx, A> StateDiffCollector<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -514,7 +514,7 @@ where\n     }\n }\n \n-impl<A> ResultsVisitor<'a, 'tcx> for StateDiffCollector<'a, 'tcx, A>\n+impl<'a, 'tcx, A> ResultsVisitor<'a, 'tcx> for StateDiffCollector<'a, 'tcx, A>\n where\n     A: Analysis<'tcx>,\n     A::Domain: DebugWithContext<A>,\n@@ -524,7 +524,7 @@ where\n     fn visit_block_start(\n         &mut self,\n         state: &Self::FlowState,\n-        _block_data: &'mir mir::BasicBlockData<'tcx>,\n+        _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n         if A::Direction::is_forward() {\n@@ -535,7 +535,7 @@ where\n     fn visit_block_end(\n         &mut self,\n         state: &Self::FlowState,\n-        _block_data: &'mir mir::BasicBlockData<'tcx>,\n+        _block_data: &mir::BasicBlockData<'tcx>,\n         _block: BasicBlock,\n     ) {\n         if A::Direction::is_backward() {\n@@ -546,7 +546,7 @@ where\n     fn visit_statement_before_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _statement: &'mir mir::Statement<'tcx>,\n+        _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n@@ -558,7 +558,7 @@ where\n     fn visit_statement_after_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _statement: &'mir mir::Statement<'tcx>,\n+        _statement: &mir::Statement<'tcx>,\n         _location: Location,\n     ) {\n         self.after.push(diff_pretty(state, &self.prev_state, self.analysis));\n@@ -568,7 +568,7 @@ where\n     fn visit_terminator_before_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _terminator: &'mir mir::Terminator<'tcx>,\n+        _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n         if let Some(before) = self.before.as_mut() {\n@@ -580,7 +580,7 @@ where\n     fn visit_terminator_after_primary_effect(\n         &mut self,\n         state: &Self::FlowState,\n-        _terminator: &'mir mir::Terminator<'tcx>,\n+        _terminator: &mir::Terminator<'tcx>,\n         _location: Location,\n     ) {\n         self.after.push(diff_pretty(state, &self.prev_state, self.analysis));"}, {"sha": "dac6720a6e5435130a81198866f29b956403979d", "filename": "compiler/rustc_mir_dataflow/src/framework/mod.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fmod.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -214,7 +214,11 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     ///     .iterate_to_fixpoint()\n     ///     .into_results_cursor(body);\n     /// ```\n-    fn into_engine(self, tcx: TyCtxt<'tcx>, body: &'mir mir::Body<'tcx>) -> Engine<'mir, 'tcx, Self>\n+    fn into_engine<'mir>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> Engine<'mir, 'tcx, Self>\n     where\n         Self: Sized,\n     {\n@@ -296,7 +300,7 @@ pub trait GenKillAnalysis<'tcx>: Analysis<'tcx> {\n     }\n }\n \n-impl<A> Analysis<'tcx> for A\n+impl<'tcx, A> Analysis<'tcx> for A\n where\n     A: GenKillAnalysis<'tcx>,\n     A::Domain: GenKill<A::Idx> + BorrowMut<BitSet<A::Idx>>,\n@@ -368,7 +372,11 @@ where\n \n     /* Extension methods */\n \n-    fn into_engine(self, tcx: TyCtxt<'tcx>, body: &'mir mir::Body<'tcx>) -> Engine<'mir, 'tcx, Self>\n+    fn into_engine<'mir>(\n+        self,\n+        tcx: TyCtxt<'tcx>,\n+        body: &'mir mir::Body<'tcx>,\n+    ) -> Engine<'mir, 'tcx, Self>\n     where\n         Self: Sized,\n     {"}, {"sha": "3cc8d30259c0e6ad2faf7d677c79569caf36a012", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -85,7 +85,7 @@ struct MockAnalysis<'tcx, D> {\n     dir: PhantomData<D>,\n }\n \n-impl<D: Direction> MockAnalysis<'tcx, D> {\n+impl<D: Direction> MockAnalysis<'_, D> {\n     const BASIC_BLOCK_OFFSET: usize = 100;\n \n     /// The entry set for each `BasicBlock` is the ID of that block offset by a fixed amount to\n@@ -160,7 +160,7 @@ impl<D: Direction> MockAnalysis<'tcx, D> {\n     }\n }\n \n-impl<D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n+impl<'tcx, D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n     type Domain = BitSet<usize>;\n     type Direction = D;\n \n@@ -175,7 +175,7 @@ impl<D: Direction> AnalysisDomain<'tcx> for MockAnalysis<'tcx, D> {\n     }\n }\n \n-impl<D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n+impl<'tcx, D: Direction> Analysis<'tcx> for MockAnalysis<'tcx, D> {\n     fn apply_statement_effect(\n         &self,\n         state: &mut Self::Domain,\n@@ -260,7 +260,7 @@ impl SeekTarget {\n     }\n }\n \n-fn test_cursor<D: Direction>(analysis: MockAnalysis<'tcx, D>) {\n+fn test_cursor<D: Direction>(analysis: MockAnalysis<'_, D>) {\n     let body = analysis.body;\n \n     let mut cursor ="}, {"sha": "75b4e150a8a33f8760b1c472407da542191a2d96", "filename": "compiler/rustc_mir_dataflow/src/framework/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fvisitor.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -4,7 +4,7 @@ use super::{Analysis, Direction, Results};\n \n /// Calls the corresponding method in `ResultsVisitor` for every location in a `mir::Body` with the\n /// dataflow state at that location.\n-pub fn visit_results<F, V>(\n+pub fn visit_results<'mir, 'tcx, F, V>(\n     body: &'mir mir::Body<'tcx>,\n     blocks: impl IntoIterator<Item = BasicBlock>,\n     results: &V,"}, {"sha": "bb9755e4f48ddb61bb2eea398d24447e2c510afb", "filename": "compiler/rustc_mir_dataflow/src/impls/borrowed_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fborrowed_locals.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -45,7 +45,7 @@ impl MaybeBorrowedLocals {\n     }\n }\n \n-impl AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n+impl<'tcx> AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n     type Domain = BitSet<Local>;\n     const NAME: &'static str = \"maybe_borrowed_locals\";\n \n@@ -59,7 +59,7 @@ impl AnalysisDomain<'tcx> for MaybeBorrowedLocals {\n     }\n }\n \n-impl GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n+impl<'tcx> GenKillAnalysis<'tcx> for MaybeBorrowedLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -95,7 +95,7 @@ struct TransferFunction<'a, T> {\n     ignore_borrow_on_drop: bool,\n }\n \n-impl<T> Visitor<'tcx> for TransferFunction<'a, T>\n+impl<'tcx, T> Visitor<'tcx> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {"}, {"sha": "b355871d64f6f16ef0e4ecda358944ef20d64fb6", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -10,7 +10,7 @@ use rustc_middle::mir::{self, BasicBlock, Local, Location};\n \n pub struct MaybeInitializedLocals;\n \n-impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_init_locals\";\n@@ -28,7 +28,7 @@ impl crate::AnalysisDomain<'tcx> for MaybeInitializedLocals {\n     }\n }\n \n-impl crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeInitializedLocals {\n     type Idx = Local;\n \n     fn statement_effect(\n@@ -73,7 +73,7 @@ struct TransferFunction<'a, T> {\n     trans: &'a mut T,\n }\n \n-impl<T> Visitor<'tcx> for TransferFunction<'a, T>\n+impl<T> Visitor<'_> for TransferFunction<'_, T>\n where\n     T: GenKill<Local>,\n {"}, {"sha": "65c388f8124a3cd25d6801c959aec590c572d9af", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -48,12 +48,12 @@ use crate::{AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis\n pub struct MaybeLiveLocals;\n \n impl MaybeLiveLocals {\n-    fn transfer_function<T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n+    fn transfer_function<'a, T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n         TransferFunction(trans)\n     }\n }\n \n-impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n+impl<'tcx> AnalysisDomain<'tcx> for MaybeLiveLocals {\n     type Domain = BitSet<Local>;\n     type Direction = Backward;\n \n@@ -69,7 +69,7 @@ impl AnalysisDomain<'tcx> for MaybeLiveLocals {\n     }\n }\n \n-impl GenKillAnalysis<'tcx> for MaybeLiveLocals {\n+impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n     type Idx = Local;\n \n     fn statement_effect("}, {"sha": "5dc8a003b47783f864df864fbb4d1126e6075d90", "filename": "compiler/rustc_mir_dataflow/src/impls/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fmod.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for EverInitializedPlaces<'_, 'tcx> {\n ///\n /// If the basic block matches this pattern, this function returns the place corresponding to the\n /// enum (`_1` in the example above) as well as the `AdtDef` of that enum.\n-fn switch_on_enum_discriminant(\n+fn switch_on_enum_discriminant<'mir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &'mir mir::Body<'tcx>,\n     block: &'mir mir::BasicBlockData<'tcx>,"}, {"sha": "896377f2bc30714064280ef855b130117f7c44b5", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -17,7 +17,7 @@ impl MaybeStorageLive {\n     }\n }\n \n-impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n+impl<'tcx> crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     type Domain = BitSet<Local>;\n \n     const NAME: &'static str = \"maybe_storage_live\";\n@@ -39,7 +39,7 @@ impl crate::AnalysisDomain<'tcx> for MaybeStorageLive {\n     }\n }\n \n-impl crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n+impl<'tcx> crate::GenKillAnalysis<'tcx> for MaybeStorageLive {\n     type Idx = Local;\n \n     fn statement_effect("}, {"sha": "6c2d1b85646b171aabed143b2bc88b52e0c588ba", "filename": "compiler/rustc_mir_dataflow/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Flib.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -3,7 +3,6 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(exact_size_is_empty)]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "218d4557215fbf4bb806c4ac417a568e6e224ce1", "filename": "compiler/rustc_mir_dataflow/src/storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fed881aafc9fe4889a32a74060dc1d4294960477/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fstorage.rs?ref=fed881aafc9fe4889a32a74060dc1d4294960477", "patch": "@@ -11,7 +11,7 @@ use rustc_middle::mir::{self, Local};\n pub struct AlwaysLiveLocals(BitSet<Local>);\n \n impl AlwaysLiveLocals {\n-    pub fn new(body: &mir::Body<'tcx>) -> Self {\n+    pub fn new(body: &mir::Body<'_>) -> Self {\n         let mut always_live_locals = AlwaysLiveLocals(BitSet::new_filled(body.local_decls.len()));\n \n         for block in body.basic_blocks() {"}]}