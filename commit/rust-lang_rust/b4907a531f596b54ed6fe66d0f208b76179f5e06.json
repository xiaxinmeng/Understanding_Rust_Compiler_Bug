{"sha": "b4907a531f596b54ed6fe66d0f208b76179f5e06", "node_id": "C_kwDOAAsO6NoAKGI0OTA3YTUzMWY1OTZiNTRlZDZmZTY2ZDBmMjA4Yjc2MTc5ZjVlMDY", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-04T17:29:27Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-06-04T17:29:27Z"}, "message": "Fix missing terminator for slice pattern", "tree": {"sha": "d09f382f3ad3d75a30e49298ead5680a993394f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d09f382f3ad3d75a30e49298ead5680a993394f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4907a531f596b54ed6fe66d0f208b76179f5e06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4907a531f596b54ed6fe66d0f208b76179f5e06", "html_url": "https://github.com/rust-lang/rust/commit/b4907a531f596b54ed6fe66d0f208b76179f5e06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4907a531f596b54ed6fe66d0f208b76179f5e06/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0408af6453e2bf9850731db2963ec5fb68dccc91", "url": "https://api.github.com/repos/rust-lang/rust/commits/0408af6453e2bf9850731db2963ec5fb68dccc91", "html_url": "https://github.com/rust-lang/rust/commit/0408af6453e2bf9850731db2963ec5fb68dccc91"}], "stats": {"total": 115, "additions": 70, "deletions": 45}, "files": [{"sha": "ff43c64a9e60f87510d93b9848d29031f1887458", "filename": "crates/hir-ty/src/mir/lower/pattern_matching.rs", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/b4907a531f596b54ed6fe66d0f208b76179f5e06/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4907a531f596b54ed6fe66d0f208b76179f5e06/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Flower%2Fpattern_matching.rs?ref=b4907a531f596b54ed6fe66d0f208b76179f5e06", "patch": "@@ -206,56 +206,60 @@ impl MirLowerCtx<'_> {\n                 (current, current_else)\n             }\n             Pat::Slice { prefix, slice, suffix } => {\n-                if let TyKind::Slice(_) = self.infer[pattern].kind(Interner) {\n-                    let pattern_len = prefix.len() + suffix.len();\n-                    let place_len: Place =\n-                        self.temp(TyBuilder::usize(), current, pattern.into())?.into();\n-                    self.push_assignment(\n-                        current,\n-                        place_len.clone(),\n-                        Rvalue::Len((&mut cond_place).clone()),\n-                        pattern.into(),\n-                    );\n-                    let else_target = *current_else.get_or_insert_with(|| self.new_basic_block());\n-                    let next = self.new_basic_block();\n-                    if slice.is_none() {\n-                        self.set_terminator(\n-                            current,\n-                            TerminatorKind::SwitchInt {\n-                                discr: Operand::Copy(place_len),\n-                                targets: SwitchTargets::static_if(\n-                                    pattern_len as u128,\n-                                    next,\n-                                    else_target,\n-                                ),\n-                            },\n-                            pattern.into(),\n-                        );\n-                    } else {\n-                        let c = Operand::from_concrete_const(\n-                            pattern_len.to_le_bytes().to_vec(),\n-                            MemoryMap::default(),\n-                            TyBuilder::usize(),\n-                        );\n-                        let discr: Place =\n-                            self.temp(TyBuilder::bool(), current, pattern.into())?.into();\n+                if mode == MatchingMode::Check {\n+                    // emit runtime length check for slice\n+                    if let TyKind::Slice(_) = self.infer[pattern].kind(Interner) {\n+                        let pattern_len = prefix.len() + suffix.len();\n+                        let place_len: Place =\n+                            self.temp(TyBuilder::usize(), current, pattern.into())?.into();\n                         self.push_assignment(\n                             current,\n-                            discr.clone(),\n-                            Rvalue::CheckedBinaryOp(BinOp::Le, c, Operand::Copy(place_len)),\n-                            pattern.into(),\n-                        );\n-                        let discr = Operand::Copy(discr);\n-                        self.set_terminator(\n-                            current,\n-                            TerminatorKind::SwitchInt {\n-                                discr,\n-                                targets: SwitchTargets::static_if(1, next, else_target),\n-                            },\n+                            place_len.clone(),\n+                            Rvalue::Len((&mut cond_place).clone()),\n                             pattern.into(),\n                         );\n+                        let else_target =\n+                            *current_else.get_or_insert_with(|| self.new_basic_block());\n+                        let next = self.new_basic_block();\n+                        if slice.is_none() {\n+                            self.set_terminator(\n+                                current,\n+                                TerminatorKind::SwitchInt {\n+                                    discr: Operand::Copy(place_len),\n+                                    targets: SwitchTargets::static_if(\n+                                        pattern_len as u128,\n+                                        next,\n+                                        else_target,\n+                                    ),\n+                                },\n+                                pattern.into(),\n+                            );\n+                        } else {\n+                            let c = Operand::from_concrete_const(\n+                                pattern_len.to_le_bytes().to_vec(),\n+                                MemoryMap::default(),\n+                                TyBuilder::usize(),\n+                            );\n+                            let discr: Place =\n+                                self.temp(TyBuilder::bool(), current, pattern.into())?.into();\n+                            self.push_assignment(\n+                                current,\n+                                discr.clone(),\n+                                Rvalue::CheckedBinaryOp(BinOp::Le, c, Operand::Copy(place_len)),\n+                                pattern.into(),\n+                            );\n+                            let discr = Operand::Copy(discr);\n+                            self.set_terminator(\n+                                current,\n+                                TerminatorKind::SwitchInt {\n+                                    discr,\n+                                    targets: SwitchTargets::static_if(1, next, else_target),\n+                                },\n+                                pattern.into(),\n+                            );\n+                        }\n+                        current = next;\n                     }\n-                    current = next;\n                 }\n                 for (i, &pat) in prefix.iter().enumerate() {\n                     let next_place = (&mut cond_place).project(ProjectionElem::ConstantIndex {"}, {"sha": "f61460e317f78be183ca6afc80cd7c0270935257", "filename": "crates/ide-diagnostics/src/handlers/mutability_errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b4907a531f596b54ed6fe66d0f208b76179f5e06/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4907a531f596b54ed6fe66d0f208b76179f5e06/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Fmutability_errors.rs?ref=b4907a531f596b54ed6fe66d0f208b76179f5e06", "patch": "@@ -993,6 +993,27 @@ fn f() {\n         );\n     }\n \n+    #[test]\n+    fn slice_pattern() {\n+        check_diagnostics(\n+            r#\"\n+//- minicore: coerce_unsized, deref_mut, slice, copy\n+fn x(t: &[u8]) {\n+    match t {\n+        &[a, mut b] | &[a, _, mut b] => {\n+           //^^^^^ \ud83d\udca1 weak: variable does not need to be mutable\n+\n+            a = 2;\n+          //^^^^^ \ud83d\udca1 error: cannot mutate immutable variable `a`\n+\n+        }\n+        _ => {}\n+    }\n+}\n+            \"#,\n+        );\n+    }\n+\n     #[test]\n     fn boxes() {\n         check_diagnostics("}]}