{"sha": "34c28c1bbca08858966a90614a5b739efbb1f1c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YzI4YzFiYmNhMDg4NTg5NjZhOTA2MTRhNWI3MzllZmJiMWYxYzg=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-28T14:41:35Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-28T14:41:35Z"}, "message": "Include `self` in usage search for modules in their definition source", "tree": {"sha": "3345c6c4d95ca3f32cab0de0566620b640e123c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3345c6c4d95ca3f32cab0de0566620b640e123c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34c28c1bbca08858966a90614a5b739efbb1f1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34c28c1bbca08858966a90614a5b739efbb1f1c8", "html_url": "https://github.com/rust-lang/rust/commit/34c28c1bbca08858966a90614a5b739efbb1f1c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34c28c1bbca08858966a90614a5b739efbb1f1c8/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fa82adfdca502a13f4dd952f9a50574870f5b7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fa82adfdca502a13f4dd952f9a50574870f5b7b", "html_url": "https://github.com/rust-lang/rust/commit/1fa82adfdca502a13f4dd952f9a50574870f5b7b"}], "stats": {"total": 84, "additions": 79, "deletions": 5}, "files": [{"sha": "537d02e12b7efda04047414d556e12ca8798fe33", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=34c28c1bbca08858966a90614a5b739efbb1f1c8", "patch": "@@ -59,7 +59,11 @@ fn highlight_references(\n     FilePosition { offset, file_id }: FilePosition,\n ) -> Option<Vec<HighlightedRange>> {\n     let def = references::find_def(sema, syntax, offset)?;\n-    let usages = def.usages(sema).set_scope(Some(SearchScope::single_file(file_id))).all();\n+    let usages = def\n+        .usages(sema)\n+        .set_scope(Some(SearchScope::single_file(file_id)))\n+        .include_self_refs()\n+        .all();\n \n     let declaration = match def {\n         Definition::ModuleDef(hir::ModuleDef::Module(module)) => {\n@@ -315,6 +319,7 @@ use self$0;\n mod foo;\n //- /foo.rs\n use self$0;\n+ // ^^^^\n \"#,\n         );\n     }"}, {"sha": "aa03de4e417d85f0500abfee432dfba2b0c0afcd", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=34c28c1bbca08858966a90614a5b739efbb1f1c8", "patch": "@@ -707,6 +707,7 @@ use self$0;\n             expect![[r#\"\n                 foo Module FileId(0) 0..8 4..7\n \n+                FileId(1) 4..8\n             \"#]],\n         );\n     }"}, {"sha": "7342ef4fcf402137ab17ee7c228214ea5a61e271", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=34c28c1bbca08858966a90614a5b739efbb1f1c8", "patch": "@@ -934,12 +934,18 @@ mod outer { mod fo$0o; }\n         check(\n             \"baz\",\n             r#\"\n-mod $0foo { pub fn bar() {} }\n+mod $0foo {\n+    pub use self::bar as qux;\n+    pub fn bar() {}\n+}\n \n fn main() { foo::bar(); }\n \"#,\n             r#\"\n-mod baz { pub fn bar() {} }\n+mod baz {\n+    pub use self::bar as qux;\n+    pub fn bar() {}\n+}\n \n fn main() { baz::bar(); }\n \"#,"}, {"sha": "7be76dca107bb34a59bc5dfea5bb066a8d7c3391", "filename": "crates/ide_db/src/search.rs", "status": "modified", "additions": 64, "deletions": 2, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide_db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34c28c1bbca08858966a90614a5b739efbb1f1c8/crates%2Fide_db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsearch.rs?ref=34c28c1bbca08858966a90614a5b739efbb1f1c8", "patch": "@@ -305,7 +305,13 @@ impl Definition {\n     }\n \n     pub fn usages<'a>(self, sema: &'a Semantics<RootDatabase>) -> FindUsages<'a> {\n-        FindUsages { def: self, sema, scope: None, include_self_kw_refs: None }\n+        FindUsages {\n+            def: self,\n+            sema,\n+            scope: None,\n+            include_self_kw_refs: None,\n+            search_self_mod: false,\n+        }\n     }\n }\n \n@@ -314,12 +320,14 @@ pub struct FindUsages<'a> {\n     sema: &'a Semantics<'a, RootDatabase>,\n     scope: Option<SearchScope>,\n     include_self_kw_refs: Option<hir::Type>,\n+    search_self_mod: bool,\n }\n \n impl<'a> FindUsages<'a> {\n-    /// Enable searching for `Self` when the definition is a type.\n+    /// Enable searching for `Self` when the definition is a type or `self` for modules.\n     pub fn include_self_refs(mut self) -> FindUsages<'a> {\n         self.include_self_kw_refs = def_to_ty(self.sema, &self.def);\n+        self.search_self_mod = true;\n         self\n     }\n \n@@ -416,6 +424,41 @@ impl<'a> FindUsages<'a> {\n                 }\n             }\n         }\n+\n+        // search for module `self` references in our module's definition source\n+        match self.def {\n+            Definition::ModuleDef(hir::ModuleDef::Module(module)) if self.search_self_mod => {\n+                let src = module.definition_source(sema.db);\n+                let file_id = src.file_id.original_file(sema.db);\n+                let (file_id, search_range) = match src.value {\n+                    ModuleSource::Module(m) => (file_id, Some(m.syntax().text_range())),\n+                    ModuleSource::BlockExpr(b) => (file_id, Some(b.syntax().text_range())),\n+                    ModuleSource::SourceFile(_) => (file_id, None),\n+                };\n+\n+                let text = sema.db.file_text(file_id);\n+                let search_range =\n+                    search_range.unwrap_or_else(|| TextRange::up_to(TextSize::of(text.as_str())));\n+\n+                let tree = Lazy::new(|| sema.parse(file_id).syntax().clone());\n+\n+                for (idx, _) in text.match_indices(\"self\") {\n+                    let offset: TextSize = idx.try_into().unwrap();\n+                    if !search_range.contains_inclusive(offset) {\n+                        continue;\n+                    }\n+\n+                    if let Some(ast::NameLike::NameRef(name_ref)) =\n+                        sema.find_node_at_offset_with_descend(&tree, offset)\n+                    {\n+                        if self.found_self_module_name_ref(&name_ref, sink) {\n+                            return;\n+                        }\n+                    }\n+                }\n+            }\n+            _ => {}\n+        }\n     }\n \n     fn found_self_ty_name_ref(\n@@ -440,6 +483,25 @@ impl<'a> FindUsages<'a> {\n         }\n     }\n \n+    fn found_self_module_name_ref(\n+        &self,\n+        name_ref: &ast::NameRef,\n+        sink: &mut dyn FnMut(FileId, FileReference) -> bool,\n+    ) -> bool {\n+        match NameRefClass::classify(self.sema, name_ref) {\n+            Some(NameRefClass::Definition(def @ Definition::ModuleDef(_))) if def == self.def => {\n+                let FileRange { file_id, range } = self.sema.original_range(name_ref.syntax());\n+                let reference = FileReference {\n+                    range,\n+                    name: ast::NameLike::NameRef(name_ref.clone()),\n+                    access: None,\n+                };\n+                sink(file_id, reference)\n+            }\n+            _ => false,\n+        }\n+    }\n+\n     fn found_lifetime(\n         &self,\n         lifetime: &ast::Lifetime,"}]}