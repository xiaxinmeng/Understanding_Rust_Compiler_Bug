{"sha": "7975973e2b806a7ee8e54b40f9e774528a777e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NzU5NzNlMmI4MDZhN2VlOGU1NGI0MGY5ZTc3NDUyOGE3NzdlMzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-16T15:09:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-16T15:09:40Z"}, "message": "Rollup merge of #64451 - RalfJung:miri-manifest, r=pietroalbini\n\nwhen Miri tests are not passing, do not add Miri component\n\nThis makes build-manifest query the toolstate repo at https://github.com/rust-lang-nursery/rust-toolstate to figure out if the tests of the Miri component are passing. If they are not, we remove the component from the manifest, to avoid shipping a broken Miri.\n\nI tested this locally by running build-manifest and making sure that it correctly detects the toolstate of 02785dabad07d19b8c76a7f86763801d5d3497ff as broken.\n\nr? @pietroalbini\nCc @kennytm @alexcrichton\n\nFixes https://github.com/rust-lang/rust/issues/60301", "tree": {"sha": "d12c0bf6f35a0fc78200a75ff12c38f26a25f669", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d12c0bf6f35a0fc78200a75ff12c38f26a25f669"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7975973e2b806a7ee8e54b40f9e774528a777e31", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdf6W0CRBK7hj4Ov3rIwAAdHIIAAaj79lZ1XUJzSjX4GhHUX0v\naUw2AlEGKMCvBmMnhqHY4qlL33jkHNme5QT9VGfhYmCzG4qdEFjoY+tKnEqStVmo\n2WykJpYUrCnFF4QfXkxi7GD2YBK/x0KrGIFA8lbzq42E7UzN7kummhoHeDGEj0LX\nPjv2spy5fhVqDv7GBPyalxGlZcbVAY034bTfS6rX1NvoQGk9vn2mredYI/h2lSjN\nl8lFxcX41ljWh8uj0ijfg0w17dfQ7JquPzbMeVC0keaXRsspvajUmGfqVh1th4y/\n5geZobW8sGgyf/qAWXgCsCu+LsOgHz0KxFj4SRdK3osF4Y+tdCfHTTvdZwzre/M=\n=ESOM\n-----END PGP SIGNATURE-----\n", "payload": "tree d12c0bf6f35a0fc78200a75ff12c38f26a25f669\nparent f0320e54c7c2c923e2e05996ac1d74f781115bbc\nparent 766c4a556e95b4c47f811932a710e326c263634c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1568646580 +0200\ncommitter GitHub <noreply@github.com> 1568646580 +0200\n\nRollup merge of #64451 - RalfJung:miri-manifest, r=pietroalbini\n\nwhen Miri tests are not passing, do not add Miri component\n\nThis makes build-manifest query the toolstate repo at https://github.com/rust-lang-nursery/rust-toolstate to figure out if the tests of the Miri component are passing. If they are not, we remove the component from the manifest, to avoid shipping a broken Miri.\n\nI tested this locally by running build-manifest and making sure that it correctly detects the toolstate of 02785dabad07d19b8c76a7f86763801d5d3497ff as broken.\n\nr? @pietroalbini\nCc @kennytm @alexcrichton\n\nFixes https://github.com/rust-lang/rust/issues/60301\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7975973e2b806a7ee8e54b40f9e774528a777e31", "html_url": "https://github.com/rust-lang/rust/commit/7975973e2b806a7ee8e54b40f9e774528a777e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7975973e2b806a7ee8e54b40f9e774528a777e31/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0320e54c7c2c923e2e05996ac1d74f781115bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0320e54c7c2c923e2e05996ac1d74f781115bbc", "html_url": "https://github.com/rust-lang/rust/commit/f0320e54c7c2c923e2e05996ac1d74f781115bbc"}, {"sha": "766c4a556e95b4c47f811932a710e326c263634c", "url": "https://api.github.com/repos/rust-lang/rust/commits/766c4a556e95b4c47f811932a710e326c263634c", "html_url": "https://github.com/rust-lang/rust/commit/766c4a556e95b4c47f811932a710e326c263634c"}], "stats": {"total": 72, "additions": 63, "deletions": 9}, "files": [{"sha": "db7c890b8ad714baaa5ca52308a766d0856d4191", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7975973e2b806a7ee8e54b40f9e774528a777e31/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7975973e2b806a7ee8e54b40f9e774528a777e31/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7975973e2b806a7ee8e54b40f9e774528a777e31", "patch": "@@ -201,7 +201,9 @@ dependencies = [\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n+ \"reqwest\",\n  \"serde\",\n+ \"serde_json\",\n  \"toml\",\n ]\n "}, {"sha": "076bcd878df7196a23fa23d0b4c617ba88850d41", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=7975973e2b806a7ee8e54b40f9e774528a777e31", "patch": "@@ -2000,6 +2000,8 @@ impl Step for HashSign {\n     }\n \n     fn run(self, builder: &Builder<'_>) {\n+        // This gets called by `promote-release`\n+        // (https://github.com/rust-lang/rust-central-station/tree/master/promote-release).\n         let mut cmd = builder.tool_cmd(Tool::BuildManifest);\n         if builder.config.dry_run {\n             return;\n@@ -2010,10 +2012,14 @@ impl Step for HashSign {\n         let addr = builder.config.dist_upload_addr.as_ref().unwrap_or_else(|| {\n             panic!(\"\\n\\nfailed to specify `dist.upload-addr` in `config.toml`\\n\\n\")\n         });\n-        let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n-            panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n-        });\n-        let pass = t!(fs::read_to_string(&file));\n+        let pass = if env::var(\"BUILD_MANIFEST_DISABLE_SIGNING\").is_err() {\n+            let file = builder.config.dist_gpg_password_file.as_ref().unwrap_or_else(|| {\n+                panic!(\"\\n\\nfailed to specify `dist.gpg-password-file` in `config.toml`\\n\\n\")\n+            });\n+            t!(fs::read_to_string(&file))\n+        } else {\n+            String::new()\n+        };\n \n         let today = output(Command::new(\"date\").arg(\"+%Y-%m-%d\"));\n "}, {"sha": "63ae445f99b6003eb346dfebff7e9c55b6c9eaab", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=7975973e2b806a7ee8e54b40f9e774528a777e31", "patch": "@@ -7,3 +7,5 @@ edition = \"2018\"\n [dependencies]\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n+serde_json = \"1.0\"\n+reqwest = \"0.9\""}, {"sha": "c2d642bb136be9c7a7b9392707fcc5177f7c52c2", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 49, "deletions": 5, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7975973e2b806a7ee8e54b40f9e774528a777e31/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=7975973e2b806a7ee8e54b40f9e774528a777e31", "patch": "@@ -1,12 +1,19 @@\n+//! Build a dist manifest, hash and sign everything.\n+//! This gets called by `promote-release`\n+//! (https://github.com/rust-lang/rust-central-station/tree/master/promote-release)\n+//! via `x.py dist hash-and-sign`; the cmdline arguments are set up\n+//! by rustbuild (in `src/bootstrap/dist.rs`).\n+\n use toml;\n use serde::Serialize;\n \n use std::collections::BTreeMap;\n use std::env;\n use std::fs;\n-use std::io::{self, Read, Write};\n+use std::io::{self, Read, Write, BufRead, BufReader};\n use std::path::{PathBuf, Path};\n use std::process::{Command, Stdio};\n+use std::collections::HashMap;\n \n static HOSTS: &[&str] = &[\n     \"aarch64-unknown-linux-gnu\",\n@@ -146,6 +153,9 @@ static MINGW: &[&str] = &[\n     \"x86_64-pc-windows-gnu\",\n ];\n \n+static TOOLSTATE: &str =\n+    \"https://raw.githubusercontent.com/rust-lang-nursery/rust-toolstate/master/history/linux.tsv\";\n+\n #[derive(Serialize)]\n #[serde(rename_all = \"kebab-case\")]\n struct Manifest {\n@@ -270,6 +280,7 @@ fn main() {\n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n     if should_sign {\n+        // `x.py` passes the passphrase via stdin.\n         t!(io::stdin().read_to_string(&mut passphrase));\n     }\n \n@@ -353,6 +364,7 @@ impl Builder {\n         self.lldb_git_commit_hash = self.git_commit_hash(\"lldb\", \"x86_64-unknown-linux-gnu\");\n         self.miri_git_commit_hash = self.git_commit_hash(\"miri\", \"x86_64-unknown-linux-gnu\");\n \n+        self.check_toolstate();\n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n         self.write_channel_files(&self.rust_release, &manifest);\n@@ -362,6 +374,37 @@ impl Builder {\n         }\n     }\n \n+    /// If a tool does not pass its tests, don't ship it.\n+    /// Right now, we do this only for Miri.\n+    fn check_toolstate(&mut self) {\n+        // Get the toolstate for this rust revision.\n+        let rev = self.rust_git_commit_hash.as_ref().expect(\"failed to determine rust git hash\");\n+        let toolstates = reqwest::get(TOOLSTATE).expect(\"failed to get toolstates\");\n+        let toolstates = BufReader::new(toolstates);\n+        let toolstate = toolstates.lines()\n+            .find_map(|line| {\n+                let line = line.expect(\"failed to read toolstate lines\");\n+                let mut pieces = line.splitn(2, '\\t');\n+                let commit = pieces.next().expect(\"malformed toolstate line\");\n+                if commit != rev {\n+                    // Not the right commit.\n+                    return None;\n+                }\n+                // Return the 2nd piece, the JSON.\n+                Some(pieces.next().expect(\"malformed toolstate line\").to_owned())\n+            })\n+            .expect(\"failed to find toolstate for rust commit\");\n+        let toolstate: HashMap<String, String> =\n+            serde_json::from_str(&toolstate).expect(\"toolstate is malformed JSON\");\n+        // Mark some tools as missing based on toolstate.\n+        if toolstate.get(\"miri\").map(|s| &*s as &str) != Some(\"test-pass\") {\n+            println!(\"Miri tests are not passing, removing component\");\n+            self.miri_version = None;\n+            self.miri_git_commit_hash = None;\n+        }\n+    }\n+\n+    /// Hash all files, compute their signatures, and collect the hashes in `self.digests`.\n     fn digest_and_sign(&mut self) {\n         for file in t!(self.input.read_dir()).map(|e| t!(e).path()) {\n             let filename = file.file_name().unwrap().to_str().unwrap();\n@@ -532,19 +575,20 @@ impl Builder {\n             .as_ref()\n             .cloned()\n             .map(|version| (version, true))\n-            .unwrap_or_default();\n+            .unwrap_or_default(); // `is_present` defaults to `false` here.\n \n-        // miri needs to build std with xargo, which doesn't allow stable/beta:\n-        // <https://github.com/japaric/xargo/pull/204#issuecomment-374888868>\n+        // Miri is nightly-only; never ship it for other trains.\n         if pkgname == \"miri-preview\" && self.rust_release != \"nightly\" {\n-            is_present = false; // ignore it\n+            is_present = false; // Pretend the component is entirely missing.\n         }\n \n         let targets = targets.iter().map(|name| {\n             if is_present {\n+                // The component generally exists, but it might still be missing for this target.\n                 let filename = self.filename(pkgname, name);\n                 let digest = match self.digests.remove(&filename) {\n                     Some(digest) => digest,\n+                    // This component does not exist for this target -- skip it.\n                     None => return (name.to_string(), Target::unavailable()),\n                 };\n                 let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");"}]}