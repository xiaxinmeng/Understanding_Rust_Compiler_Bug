{"sha": "03735be3174d195c3de53051dd7194283266368c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzNzM1YmUzMTc0ZDE5NWMzZGU1MzA1MWRkNzE5NDI4MzI2NjM2OGM=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-16T22:43:42Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-05-16T22:43:42Z"}, "message": "fix doctest inside impl block #4449\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "93ee9c305a5dbddd6bc96c6e40729990af7fec52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ee9c305a5dbddd6bc96c6e40729990af7fec52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03735be3174d195c3de53051dd7194283266368c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03735be3174d195c3de53051dd7194283266368c", "html_url": "https://github.com/rust-lang/rust/commit/03735be3174d195c3de53051dd7194283266368c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03735be3174d195c3de53051dd7194283266368c/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebaa05a4478096aaf3bc2a48d0d171a287422c7c", "html_url": "https://github.com/rust-lang/rust/commit/ebaa05a4478096aaf3bc2a48d0d171a287422c7c"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "009ea813a02e8b6ff5290b3d958e14ea836f6d3f", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 65, "deletions": 5, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/03735be3174d195c3de53051dd7194283266368c/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03735be3174d195c3de53051dd7194283266368c/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=03735be3174d195c3de53051dd7194283266368c", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::Semantics;\n+use hir::{AsAssocItem, HirDisplay, Semantics};\n use itertools::Itertools;\n use ra_ide_db::RootDatabase;\n use ra_syntax::{\n@@ -65,14 +65,36 @@ fn runnable_fn(sema: &Semantics<RootDatabase>, fn_def: ast::FnDef) -> Option<Run\n         RunnableKind::Bin\n     } else {\n         let test_id = if let Some(module) = sema.to_def(&fn_def).map(|def| def.module(sema.db)) {\n-            let path = module\n+            let def = sema.to_def(&fn_def)?;\n+            let impl_trait_name =\n+                def.as_assoc_item(sema.db).and_then(|assoc_item| {\n+                    match assoc_item.container(sema.db) {\n+                        hir::AssocItemContainer::Trait(trait_item) => {\n+                            Some(trait_item.name(sema.db).to_string())\n+                        }\n+                        hir::AssocItemContainer::ImplDef(impl_def) => impl_def\n+                            .target_ty(sema.db)\n+                            .as_adt()\n+                            .map(|adt| adt.name(sema.db).to_string()),\n+                    }\n+                });\n+\n+            let path_iter = module\n                 .path_to_root(sema.db)\n                 .into_iter()\n                 .rev()\n                 .filter_map(|it| it.name(sema.db))\n-                .map(|name| name.to_string())\n-                .chain(std::iter::once(name_string))\n-                .join(\"::\");\n+                .map(|name| name.to_string());\n+\n+            let path = if let Some(impl_trait_name) = impl_trait_name {\n+                path_iter\n+                    .chain(std::iter::once(impl_trait_name))\n+                    .chain(std::iter::once(name_string))\n+                    .join(\"::\")\n+            } else {\n+                path_iter.chain(std::iter::once(name_string)).join(\"::\")\n+            };\n+\n             TestId::Path(path)\n         } else {\n             TestId::Name(name_string)\n@@ -237,6 +259,44 @@ mod tests {\n                 );\n     }\n \n+    #[test]\n+    fn test_runnables_doc_test_in_impl() {\n+        let (analysis, pos) = analysis_and_position(\n+            r#\"\n+        //- /lib.rs\n+        <|> //empty\n+        fn main() {}\n+        \n+        struct Data;\n+        impl Data {\n+            /// ```\n+            /// let x = 5;\n+            /// ```\n+            fn foo() {}\n+        }\n+        \"#,\n+        );\n+        let runnables = analysis.runnables(pos.file_id).unwrap();\n+        assert_debug_snapshot!(&runnables,\n+        @r###\"\n+        [\n+            Runnable {\n+                range: 1..21,\n+                kind: Bin,\n+            },\n+            Runnable {\n+                range: 52..106,\n+                kind: DocTest {\n+                    test_id: Path(\n+                        \"Data::foo\",\n+                    ),\n+                },\n+            },\n+        ]\n+        \"###\n+                );\n+    }\n+\n     #[test]\n     fn test_runnables_module() {\n         let (analysis, pos) = analysis_and_position("}]}