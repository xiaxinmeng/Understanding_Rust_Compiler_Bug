{"sha": "6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZWFkMGU0Y2NmYTY1YTg5YmVlOGRiNmQ0NTg3ZTI5N2ZiYTFhNTc=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T14:52:28Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T14:52:28Z"}, "message": "Use operator names for operator methods\n\nThe methods used to implement operators now simply use\nthe name of the operator itself, except for unary -, which is called\nmin to not clash with binary -. Index is called [].\n\nCloses #1520", "tree": {"sha": "c50c451789f8c0227ff0f5a38b3b39d078d0f7e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50c451789f8c0227ff0f5a38b3b39d078d0f7e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "html_url": "https://github.com/rust-lang/rust/commit/6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aed4b04cee15408536e9d89b866dc16447d1afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aed4b04cee15408536e9d89b866dc16447d1afb", "html_url": "https://github.com/rust-lang/rust/commit/3aed4b04cee15408536e9d89b866dc16447d1afb"}], "stats": {"total": 75, "additions": 40, "deletions": 35}, "files": [{"sha": "1feddbdb54c304e9db4b7760a6a5ed2b5a05deb8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "patch": "@@ -2219,8 +2219,8 @@ fn trans_assign_op(bcx: @block_ctxt, ex: @ast::expr, op: ast::binop,\n         let fty = ty::node_id_to_monotype(bcx_tcx(bcx), callee_id);\n         ret trans_call_inner(bcx, fty, {|bcx|\n             // FIXME provide the already-computed address, not the expr\n-            trans_impl::trans_method_callee(bcx, callee_id, src, origin)\n-        }, [dst], ex.id, save_in(lhs_res.val));\n+            trans_impl::trans_method_callee(bcx, callee_id, dst, origin)\n+        }, [src], ex.id, save_in(lhs_res.val));\n       }\n       _ {}\n     }\n@@ -2333,32 +2333,32 @@ fn trans_lazy_binop(bcx: @block_ctxt, op: ast::binop, a: @ast::expr,\n \n \n \n-fn trans_binary(bcx: @block_ctxt, op: ast::binop, a: @ast::expr,\n-                b: @ast::expr, dest: dest, ex: @ast::expr) -> @block_ctxt {\n+fn trans_binary(bcx: @block_ctxt, op: ast::binop, lhs: @ast::expr,\n+                rhs: @ast::expr, dest: dest, ex: @ast::expr) -> @block_ctxt {\n     // User-defined operators\n     alt bcx_ccx(bcx).method_map.find(ex.id) {\n       some(origin) {\n         let callee_id = ast_util::op_expr_callee_id(ex);\n         let fty = ty::node_id_to_monotype(bcx_tcx(bcx), callee_id);\n         ret trans_call_inner(bcx, fty, {|bcx|\n-            trans_impl::trans_method_callee(bcx, callee_id, a, origin)\n-        }, [b], ex.id, dest);\n+            trans_impl::trans_method_callee(bcx, callee_id, lhs, origin)\n+        }, [rhs], ex.id, dest);\n       }\n       _ {}\n     }\n \n     // First couple cases are lazy:\n     alt op {\n       ast::and | ast::or {\n-        ret trans_lazy_binop(bcx, op, a, b, dest);\n+        ret trans_lazy_binop(bcx, op, lhs, rhs, dest);\n       }\n       _ {\n         // Remaining cases are eager:\n-        let lhs = trans_temp_expr(bcx, a);\n-        let rhs = trans_temp_expr(lhs.bcx, b);\n-        ret trans_eager_binop(rhs.bcx, op, lhs.val,\n-                              ty::expr_ty(bcx_tcx(bcx), a), rhs.val,\n-                              ty::expr_ty(bcx_tcx(bcx), b), dest);\n+        let lhs_res = trans_temp_expr(bcx, lhs);\n+        let rhs_res = trans_temp_expr(lhs_res.bcx, rhs);\n+        ret trans_eager_binop(rhs_res.bcx, op, lhs_res.val,\n+                              ty::expr_ty(bcx_tcx(bcx), lhs), rhs_res.val,\n+                              ty::expr_ty(bcx_tcx(bcx), rhs), dest);\n       }\n     }\n }\n@@ -3517,8 +3517,8 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       ast::expr_tup(args) { ret trans_tup(bcx, args, e.id, dest); }\n       ast::expr_lit(lit) { ret trans_lit(bcx, *lit, dest); }\n       ast::expr_vec(args, _) { ret tvec::trans_vec(bcx, args, e.id, dest); }\n-      ast::expr_binary(op, x, y) {\n-        ret trans_binary(bcx, op, x, y, dest, e);\n+      ast::expr_binary(op, lhs, rhs) {\n+        ret trans_binary(bcx, op, lhs, rhs, dest, e);\n       }\n       ast::expr_unary(op, x) {\n         assert op != ast::deref; // lvals are handled above"}, {"sha": "743bc19079616e8806acefd6f9fcb82433abd8a8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "patch": "@@ -1768,17 +1768,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n \n     fn binop_method(op: ast::binop) -> option::t<str> {\n         alt op {\n-          ast::add { some(\"op_add\") }\n-          ast::subtract { some(\"op_sub\") }\n-          ast::mul { some(\"op_mul\") }\n-          ast::div { some(\"op_div\") }\n-          ast::rem { some(\"op_rem\") }\n-          ast::bitxor { some(\"op_xor\") }\n-          ast::bitand { some(\"op_and\") }\n-          ast::bitor { some(\"op_or\") }\n-          ast::lsl { some(\"op_shift_left\") }\n-          ast::lsr { some(\"op_shift_right\") }\n-          ast::asr { some(\"op_ashift_right\") }\n+          ast::add | ast::subtract | ast::mul | ast::div | ast::rem |\n+          ast::bitxor | ast::bitand | ast::bitor | ast::lsl | ast::lsr |\n+          ast::asr { some(ast_util::binop_to_str(op)) }\n           _ { none }\n         }\n     }\n@@ -1904,14 +1896,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             oper_t = structurally_resolved_type(fcx, oper.span, oper_t);\n             if !(ty::type_is_integral(tcx, oper_t) ||\n                  ty::struct(tcx, oper_t) == ty::ty_bool) {\n-                oper_t = check_user_unop(fcx, \"!\", \"op_not\", expr, oper_t);\n+                oper_t = check_user_unop(fcx, \"!\", \"!\", expr, oper_t);\n             }\n           }\n           ast::neg {\n             oper_t = structurally_resolved_type(fcx, oper.span, oper_t);\n             if !(ty::type_is_integral(tcx, oper_t) ||\n                  ty::type_is_fp(tcx, oper_t)) {\n-                oper_t = check_user_unop(fcx, \"-\", \"op_neg\", expr, oper_t);\n+                oper_t = check_user_unop(fcx, \"-\", \"neg\", expr, oper_t);\n             }\n           }\n         }\n@@ -2337,7 +2329,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           _ {\n             let resolved = structurally_resolved_type(fcx, expr.span,\n                                                       raw_base_t);\n-            alt lookup_op_method(fcx, expr, resolved, \"op_index\",\n+            alt lookup_op_method(fcx, expr, resolved, \"[]\",\n                                  [some(idx)]) {\n               some(ret_ty) { write::ty_only_fixup(fcx, id, ret_ty); }\n               _ {"}, {"sha": "8b2d6cf36a7e996a4be85c771fb39ecc47e0f503", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "patch": "@@ -284,7 +284,7 @@ fn parse_ty_methods(p: parser) -> [ast::ty_method] {\n     parse_seq(token::LBRACE, token::RBRACE, seq_sep_none(), {|p|\n         let flo = p.span.lo;\n         expect_word(p, \"fn\");\n-        let ident = parse_value_ident(p);\n+        let ident = parse_method_name(p);\n         let tps = parse_ty_params(p);\n         let f = parse_ty_fn(ast::proto_bare, p), fhi = p.last_span.hi;\n         expect(p, token::SEMI);\n@@ -1824,10 +1824,19 @@ fn parse_item_fn(p: parser, purity: ast::purity,\n                 ast::item_fn(decl, t.tps, body), attrs);\n }\n \n+fn parse_method_name(p: parser) -> ast::ident {\n+    alt p.token {\n+      token::BINOP(op) { p.bump(); token::binop_to_str(op) }\n+      token::NOT { p.bump(); \"!\" }\n+      token::LBRACKET { p.bump(); expect(p, token::RBRACKET); \"[]\" }\n+      _ { parse_value_ident(p) }\n+    }\n+}\n+\n fn parse_method(p: parser) -> @ast::method {\n     let lo = p.span.lo;\n     expect_word(p, \"fn\");\n-    let ident = parse_value_ident(p);\n+    let ident = parse_method_name(p);\n     let tps = parse_ty_params(p);\n     let decl = parse_fn_decl(p, ast::impure_fn);\n     let body = parse_block(p);"}, {"sha": "412e1fd538c27688b922c8d07823df42495f3165", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bead0e4ccfa65a89bee8db6d4587e297fba1a57/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=6bead0e4ccfa65a89bee8db6d4587e297fba1a57", "patch": "@@ -1,20 +1,24 @@\n type point = {x: int, y: int};\n \n-impl add_point for point {\n-    fn op_add(other: point) -> point {\n+impl point_ops for point {\n+    fn +(other: point) -> point {\n         {x: self.x + other.x, y: self.y + other.y}\n     }\n-    fn op_neg() -> point {\n+    fn -(other: point) -> point {\n+        {x: self.x - other.x, y: self.y - other.y}\n+    }\n+    fn neg() -> point {\n         {x: -self.x, y: -self.y}\n     }\n-    fn op_index(x: bool) -> int {\n+    fn [](x: bool) -> int {\n         x ? self.x : self.y\n     }\n }\n \n fn main() {\n     let p = {x: 10, y: 20};\n-    p += {x: 1, y: 2};\n+    p += {x: 101, y: 102};\n+    p -= {x: 100, y: 100};\n     assert p + {x: 5, y: 5} == {x: 16, y: 27};\n     assert -p == {x: -11, y: -22};\n     assert p[true] == 11;"}]}