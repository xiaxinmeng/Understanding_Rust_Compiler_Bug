{"sha": "4337089098e5adefa56ef249a5b200cb0693fcf5", "node_id": "C_kwDOAAsO6NoAKDQzMzcwODkwOThlNWFkZWZhNTZlZjI0OWE1YjIwMGNiMDY5M2ZjZjU", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-12T10:48:04Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-09-24T16:26:27Z"}, "message": "Add basic checks for well-formedness of `fn`/`fn_mut` lang items", "tree": {"sha": "7cbf298bc028314c936be134062f4e16723c1251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cbf298bc028314c936be134062f4e16723c1251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4337089098e5adefa56ef249a5b200cb0693fcf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4337089098e5adefa56ef249a5b200cb0693fcf5", "html_url": "https://github.com/rust-lang/rust/commit/4337089098e5adefa56ef249a5b200cb0693fcf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4337089098e5adefa56ef249a5b200cb0693fcf5/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0648eab3686f100c7ab9b0d38472c740079cce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0648eab3686f100c7ab9b0d38472c740079cce4", "html_url": "https://github.com/rust-lang/rust/commit/a0648eab3686f100c7ab9b0d38472c740079cce4"}], "stats": {"total": 167, "additions": 161, "deletions": 6}, "files": [{"sha": "e007d971bb072bd1ae109b0c70fca6803e4915b6", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -246,12 +246,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if borrow {\n                     // Check for &self vs &mut self in the method signature. Since this is either\n                     // the Fn or FnMut trait, it should be one of those.\n-                    let (region, mutbl) =\n-                        if let ty::Ref(r, _, mutbl) = method.sig.inputs()[0].kind() {\n-                            (r, mutbl)\n-                        } else {\n-                            span_bug!(call_expr.span, \"input to call/call_mut is not a ref?\");\n-                        };\n+                    let (region, mutbl) = if let ty::Ref(r, _, mutbl) =\n+                        method.sig.inputs()[0].kind()\n+                    {\n+                        (r, mutbl)\n+                    } else {\n+                        // The `fn`/`fn_mut` lang item is ill-formed, which should have\n+                        // caused an error elsewhere.\n+                        self.tcx\n+                            .sess\n+                            .delay_span_bug(call_expr.span, \"input to call/call_mut is not a ref?\");\n+                        return None;\n+                    };\n \n                     let mutbl = match mutbl {\n                         hir::Mutability::Not => AutoBorrowMutability::Not,"}, {"sha": "d9f9d9dafff525076de6dac376191c3d8768535d", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -200,6 +200,40 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n     check_associated_item(tcx, trait_item.hir_id(), span, method_sig);\n+\n+    let encl_trait_hir_id = tcx.hir().get_parent_item(hir_id);\n+    let encl_trait = tcx.hir().expect_item(encl_trait_hir_id);\n+    if [tcx.lang_items().fn_trait(), tcx.lang_items().fn_mut_trait()]\n+        .contains(&Some(encl_trait.def_id.to_def_id()))\n+        && trait_item.ident.name.to_ident_string() == \"call\"\n+    {\n+        // We are looking at the `call` function of the `fn` or `fn_mut` lang item.\n+        // Do some rudimentary sanity checking to avoid an ICE later (issue #83471).\n+        if let Some(method_sig @ hir::FnSig { decl, .. }) = method_sig {\n+            if let &[self_ty, _] = &decl.inputs {\n+                if !matches!(self_ty.kind, hir::TyKind::Rptr(_, _)) {\n+                    tcx.sess.struct_span_err(\n+                        self_ty.span,\n+                        \"first argument of `call` in `fn`/`fn_mut` lang item must be a reference\",\n+                    ).emit();\n+                }\n+            } else {\n+                tcx.sess\n+                    .struct_span_err(\n+                        method_sig.span,\n+                        \"`call` function in `fn`/`fn_mut` lang item takes exactly two arguments\",\n+                    )\n+                    .emit();\n+            }\n+        } else {\n+            tcx.sess\n+                .struct_span_err(\n+                    trait_item.span,\n+                    \"`call` trait item in `fn`/`fn_mut` lang item must be a function\",\n+                )\n+                .emit();\n+        }\n+    }\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {"}, {"sha": "90dc972d8a84aee04146ebce7d2eefbc48c7bcc9", "filename": "src/test/ui/lang-items/fn-fn_mut-call-ill-formed.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -0,0 +1,27 @@\n+// Make sure that an error is reported if the `call` function of the\n+// `fn`/`fn_mut` lang item is grossly ill-formed.\n+\n+#![feature(lang_items)]\n+#![feature(no_core)]\n+#![no_core]\n+\n+#[lang = \"fn\"]\n+trait MyFn<T> {\n+    const call: i32 = 42;\n+    //~^ ERROR: `call` trait item in `fn`/`fn_mut` lang item must be a function\n+}\n+\n+#[lang = \"fn_mut\"]\n+trait MyFnMut<T> {\n+    fn call(i: i32, j: i32) -> i32 { i + j }\n+    //~^ ERROR: first argument of `call` in `fn`/`fn_mut` lang item must be a reference\n+}\n+\n+fn main() {\n+    let a = || 42;\n+    a();\n+\n+    let mut i = 0;\n+    let mut b = || { i += 1; };\n+    b();\n+}"}, {"sha": "fea8e52b891d6ebd9092732633bcb5bf4f8f76c0", "filename": "src/test/ui/lang-items/fn-fn_mut-call-ill-formed.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -0,0 +1,14 @@\n+error: `call` trait item in `fn`/`fn_mut` lang item must be a function\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:10:5\n+   |\n+LL |     const call: i32 = 42;\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: first argument of `call` in `fn`/`fn_mut` lang item must be a reference\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:16:16\n+   |\n+LL |     fn call(i: i32, j: i32) -> i32 { i + j }\n+   |                ^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b32aa0341515243a43f44cc5758ae50b9f03cd37", "filename": "src/test/ui/lang-items/issue-83471.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.rs?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for the ICE reported in issue #83471.\n+\n+#![crate_type=\"lib\"]\n+#![feature(no_core)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+//~^ ERROR: language items are subject to change [E0658]\n+trait Sized {}\n+\n+#[lang = \"fn\"]\n+//~^ ERROR: language items are subject to change [E0658]\n+//~| ERROR: `fn` language item must be applied to a trait with 1 generic argument\n+trait Fn {\n+    fn call(export_name);\n+    //~^ ERROR: expected type\n+    //~| WARNING: anonymous parameters are deprecated\n+    //~| WARNING: this is accepted in the current edition\n+}\n+fn call_through_fn_trait() {\n+    a()\n+    //~^ ERROR: cannot find function\n+}"}, {"sha": "c6130bb3370be94c47d196a7e862b64791bbfe6c", "filename": "src/test/ui/lang-items/issue-83471.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4337089098e5adefa56ef249a5b200cb0693fcf5/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Fissue-83471.stderr?ref=4337089098e5adefa56ef249a5b200cb0693fcf5", "patch": "@@ -0,0 +1,51 @@\n+error[E0573]: expected type, found built-in attribute `export_name`\n+  --> $DIR/issue-83471.rs:15:13\n+   |\n+LL |     fn call(export_name);\n+   |             ^^^^^^^^^^^ not a type\n+\n+error[E0425]: cannot find function `a` in this scope\n+  --> $DIR/issue-83471.rs:21:5\n+   |\n+LL |     a()\n+   |     ^ not found in this scope\n+\n+error[E0658]: language items are subject to change\n+  --> $DIR/issue-83471.rs:7:1\n+   |\n+LL | #[lang = \"sized\"]\n+   | ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(lang_items)]` to the crate attributes to enable\n+\n+error[E0658]: language items are subject to change\n+  --> $DIR/issue-83471.rs:11:1\n+   |\n+LL | #[lang = \"fn\"]\n+   | ^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(lang_items)]` to the crate attributes to enable\n+\n+warning: anonymous parameters are deprecated and will be removed in the next edition.\n+  --> $DIR/issue-83471.rs:15:13\n+   |\n+LL |     fn call(export_name);\n+   |             ^^^^^^^^^^^ help: try naming the parameter or explicitly ignoring it: `_: export_name`\n+   |\n+   = note: `#[warn(anonymous_parameters)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2015) but is a hard error in Rust 2018!\n+   = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n+\n+error[E0718]: `fn` language item must be applied to a trait with 1 generic argument\n+  --> $DIR/issue-83471.rs:11:1\n+   |\n+LL | #[lang = \"fn\"]\n+   | ^^^^^^^^^^^^^^\n+...\n+LL | trait Fn {\n+   |         - this trait has 0 generic arguments\n+\n+error: aborting due to 5 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0425, E0573, E0658, E0718.\n+For more information about an error, try `rustc --explain E0425`."}]}