{"sha": "c0e481731ba72eb120a74da454bb806397ca165c", "node_id": "C_kwDOAAsO6NoAKGMwZTQ4MTczMWJhNzJlYjEyMGE3NGRhNDU0YmI4MDYzOTdjYTE2NWM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-03T19:26:59Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-23T20:17:47Z"}, "message": "Remove logic duplication", "tree": {"sha": "925aeba96197784694e6837aba664f86b242c41e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/925aeba96197784694e6837aba664f86b242c41e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0e481731ba72eb120a74da454bb806397ca165c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e481731ba72eb120a74da454bb806397ca165c", "html_url": "https://github.com/rust-lang/rust/commit/c0e481731ba72eb120a74da454bb806397ca165c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0e481731ba72eb120a74da454bb806397ca165c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42d7174bbc6f89f15a233d663f212e5e731f4722", "url": "https://api.github.com/repos/rust-lang/rust/commits/42d7174bbc6f89f15a233d663f212e5e731f4722", "html_url": "https://github.com/rust-lang/rust/commit/42d7174bbc6f89f15a233d663f212e5e731f4722"}], "stats": {"total": 89, "additions": 37, "deletions": 52}, "files": [{"sha": "18d8bbf90475afca92ac19a937472a9a5db9ab9b", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 18, "deletions": 33, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -380,61 +380,46 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 let typeck = self.infcx.tcx.typeck(self.mir_def_id());\n                 let hir_id = hir.get_parent_node(expr.hir_id);\n                 if let Some(parent) = hir.find(hir_id) {\n-                    if let hir::Node::Expr(parent_expr) = parent\n+                    let (def_id, args, offset) = if let hir::Node::Expr(parent_expr) = parent\n                         && let hir::ExprKind::MethodCall(_, _, args, _) = parent_expr.kind\n                         && let Some(def_id) = typeck.type_dependent_def_id(parent_expr.hir_id)\n-                        && let Some(def_id) = def_id.as_local()\n-                        && let Some(node) = hir.find(hir.local_def_id_to_hir_id(def_id))\n-                        && let Some(fn_sig) = node.fn_sig()\n-                        && let Some(ident) = node.ident()\n-                        && let Some(pos) = args.iter()\n-                            .position(|arg| arg.hir_id == expr.hir_id)\n-                        && let Some(arg) = fn_sig.decl.inputs.get(pos + 1)\n                     {\n-                        let mut span: MultiSpan = arg.span.into();\n-                        span.push_span_label(\n-                            arg.span,\n-                            \"this type parameter takes ownership of the value\".to_string(),\n-                        );\n-                        span.push_span_label(\n-                            ident.span,\n-                            \"in this method\".to_string(),\n-                        );\n-                        err.span_note(\n-                            span,\n-                            format!(\n-                                \"consider changing this parameter type in `{}` to borrow instead \\\n-                                 if ownering the value isn't necessary\",\n-                                ident,\n-                            ),\n-                        );\n-                    }\n-                    if let hir::Node::Expr(parent_expr) = parent\n+                        (def_id.as_local(), args, 1)\n+                    } else if let hir::Node::Expr(parent_expr) = parent\n                         && let hir::ExprKind::Call(call, args) = parent_expr.kind\n                         && let ty::FnDef(def_id, _) = typeck.node_type(call.hir_id).kind()\n-                        && let Some(def_id) = def_id.as_local()\n+                    {\n+                        (def_id.as_local(), args, 0)\n+                    } else {\n+                        (None, &[][..], 0)\n+                    };\n+                    if let Some(def_id) = def_id\n                         && let Some(node) = hir.find(hir.local_def_id_to_hir_id(def_id))\n                         && let Some(fn_sig) = node.fn_sig()\n                         && let Some(ident) = node.ident()\n                         && let Some(pos) = args.iter()\n                             .position(|arg| arg.hir_id == expr.hir_id)\n-                        && let Some(arg) = fn_sig.decl.inputs.get(pos)\n+                        && let Some(arg) = fn_sig.decl.inputs.get(pos + offset)\n                     {\n                         let mut span: MultiSpan = arg.span.into();\n                         span.push_span_label(\n                             arg.span,\n                             \"this type parameter takes ownership of the value\".to_string(),\n                         );\n+                        let descr = match node.fn_kind() {\n+                            Some(hir::intravisit::FnKind::ItemFn(..)) | None => \"function\",\n+                            Some(hir::intravisit::FnKind::Method(..)) => \"method\",\n+                            Some(hir::intravisit::FnKind::Closure) => \"closure\",\n+                        };\n                         span.push_span_label(\n                             ident.span,\n-                            \"in this function\".to_string(),\n+                            format!(\"in this {descr}\"),\n                         );\n                         err.span_note(\n                             span,\n                             format!(\n-                                \"consider changing this parameter type in `{}` to borrow instead \\\n-                                 if ownering the value isn't necessary\",\n-                                ident,\n+                                \"consider changing this parameter type in {descr} `{ident}` to \\\n+                                 borrow instead if ownering the value isn't necessary\",\n                             ),\n                         );\n                     }"}, {"sha": "cfaa8c08df836852a3ce183e99e76a2606679b8d", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -8,7 +8,7 @@ LL |     consume(b);\n LL |     consume(b);\n    |             ^ value used here after move\n    |\n-note: consider changing this parameter type in `consume` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `consume` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrowck-consume-unsize-vec.rs:3:15\n    |\n LL | fn consume(_: Box<[i32]>) {"}, {"sha": "c73d1df971acff7f030fd9461a02b44ae1c7bce6", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -8,7 +8,7 @@ LL |     consume(b);\n LL |     consume(b);\n    |             ^ value used here after move\n    |\n-note: consider changing this parameter type in `consume` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `consume` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrowck-consume-upcast-box.rs:5:15\n    |\n LL | fn consume(_: Box<dyn Foo>) {"}, {"sha": "4f287d3a735e10fc7534605de0388a64079dfb93", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -8,7 +8,7 @@ LL |     for _ in 0..3 {\n LL |         Other::handle(value);\n    |                       ^^^^^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in `handle` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `handle` to borrow instead if ownering the value isn't necessary\n   --> $DIR/mut-borrow-in-loop-2.rs:9:22\n    |\n LL |     fn handle(value: T) -> Self;"}, {"sha": "4a869cdce4a178734904a394db4cc0fa29feb476", "filename": "src/test/ui/liveness/liveness-move-call-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -9,7 +9,7 @@ LL |     loop {\n LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n   --> $DIR/liveness-move-call-arg.rs:1:13\n    |\n LL | fn take(_x: Box<isize>) {}"}, {"sha": "cf4aa8fc9c41493b4c8c3d379afe639c09112a9f", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -8,7 +8,7 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in `send` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `send` to borrow instead if ownering the value isn't necessary\n   --> $DIR/liveness-use-after-send.rs:3:54\n    |\n LL | fn send<T:Send + std::fmt::Debug>(ch: Chan<T>, data: T) {"}, {"sha": "d3f250e69b24c049c3fcf92863215d199065cb5f", "filename": "src/test/ui/moves/borrow-closures-instead-of-move.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -8,7 +8,7 @@ LL |     loop {\n LL |         takes_fnonce(f);\n    |                      ^ value moved here, in previous iteration of loop\n    |\n-note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}\n@@ -32,7 +32,7 @@ LL |         takes_fnonce(m);\n LL |     takes_fnonce(m);\n    |                  ^ value used here after move\n    |\n-note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}\n@@ -58,7 +58,7 @@ note: closure cannot be moved more than once as it is not `Copy` due to moving t\n    |\n LL |         x += 1;\n    |         ^\n-note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `takes_fnonce` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrow-closures-instead-of-move.rs:34:20\n    |\n LL | fn takes_fnonce(_: impl FnOnce()) {}"}, {"sha": "687e8497dc6e8cde148dd09c48e83c14dd1ceff0", "filename": "src/test/ui/moves/move-guard-same-consts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -9,7 +9,7 @@ LL |         (1, 2) if take(x) => (),\n LL |         (1, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n   --> $DIR/move-guard-same-consts.rs:25:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "a21dca7f16ee5b272ad4c8ad9debdbb4060f1c7f", "filename": "src/test/ui/moves/move-in-guard-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -9,7 +9,7 @@ LL |         (1, _) if take(x) => (),\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n   --> $DIR/move-in-guard-1.rs:15:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "5277a812a44c84c910969484a3b9cfbc96ff289c", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -7,7 +7,7 @@ LL |     let x: Box<_> = Box::new(1);\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n    |\n-note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `take` to borrow instead if ownering the value isn't necessary\n   --> $DIR/move-in-guard-2.rs:13:15\n    |\n LL | fn take<T>(_: T) -> bool { false }"}, {"sha": "37fb40ffe78c07392774bbc85e895b89bcac27f2", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -108,7 +108,7 @@ LL |         _ if guard(x) => 10,\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in `guard` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `guard` to borrow instead if ownering the value isn't necessary\n   --> $DIR/moves-based-on-type-exprs.rs:6:14\n    |\n LL | fn guard(_s: String) -> bool {panic!()}"}, {"sha": "46b7be440e04e18b2fda5174db3292aff50084d3", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -9,7 +9,7 @@ LL |         move_out(x.f1_nocopy);\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}\n@@ -28,7 +28,7 @@ LL |         move_out(x.f2_nocopy);\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}"}, {"sha": "46b7be440e04e18b2fda5174db3292aff50084d3", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -9,7 +9,7 @@ LL |         move_out(x.f1_nocopy);\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}\n@@ -28,7 +28,7 @@ LL |         move_out(x.f2_nocopy);\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n    |\n-note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `move_out` to borrow instead if ownering the value isn't necessary\n   --> $DIR/union-move.rs:10:19\n    |\n LL | fn move_out<T>(x: T) {}"}, {"sha": "f63684407ecb29171b20c806767e1ecf3b3907be", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -29,7 +29,7 @@ LL |         drop_unsized(y);\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in `drop_unsized` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if ownering the value isn't necessary\n   --> $DIR/borrow-after-move.rs:14:31\n    |\n LL | fn drop_unsized<T: ?Sized>(_: T) {}"}, {"sha": "b883067427f43654ce1258c0f08f1f0e148be33a", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -17,7 +17,7 @@ LL |         drop_unsized(y);\n LL |         drop_unsized(y);\n    |                      ^ value used here after move\n    |\n-note: consider changing this parameter type in `drop_unsized` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in function `drop_unsized` to borrow instead if ownering the value isn't necessary\n   --> $DIR/double-move.rs:14:31\n    |\n LL | fn drop_unsized<T: ?Sized>(_: T) {}"}, {"sha": "7d94aa216828cfab96c2b0047d1ec21ba10ef9c1", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0e481731ba72eb120a74da454bb806397ca165c/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=c0e481731ba72eb120a74da454bb806397ca165c", "patch": "@@ -10,7 +10,7 @@ LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n    |\n-note: consider changing this parameter type in `push` to borrow instead if ownering the value isn't necessary\n+note: consider changing this parameter type in method `push` to borrow instead if ownering the value isn't necessary\n   --> $DIR/use-after-move-implicity-coerced-object.rs:17:27\n    |\n LL |     fn push(&mut self, n: Box<dyn ToString + 'static>) {"}]}