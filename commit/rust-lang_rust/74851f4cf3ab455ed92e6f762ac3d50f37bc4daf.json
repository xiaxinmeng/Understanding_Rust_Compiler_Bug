{"sha": "74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ODUxZjRjZjNhYjQ1NWVkOTJlNmY3NjJhYzNkNTBmMzdiYzRkYWY=", "commit": {"author": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2020-06-02T21:10:22Z"}, "committer": {"name": "Jack Huey", "email": "jack.huey@umassmed.edu", "date": "2021-03-31T14:11:47Z"}, "message": "count bound vars", "tree": {"sha": "6599e215fae9cbee77185e9b1263311b3bc7fe90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6599e215fae9cbee77185e9b1263311b3bc7fe90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "html_url": "https://github.com/rust-lang/rust/commit/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97a22a4f9cee6d48d0dad51e638c5f2306de084f", "url": "https://api.github.com/repos/rust-lang/rust/commits/97a22a4f9cee6d48d0dad51e638c5f2306de084f", "html_url": "https://github.com/rust-lang/rust/commit/97a22a4f9cee6d48d0dad51e638c5f2306de084f"}], "stats": {"total": 98, "additions": 92, "deletions": 6}, "files": [{"sha": "15ce0ad39703503c04d6d42930e84aaff2c743c3", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "patch": "@@ -888,6 +888,54 @@ impl<'tcx> TypeVisitor<'tcx> for HasEscapingVarsVisitor {\n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n struct FoundFlags;\n \n+crate struct CountBoundVars {\n+    crate outer_index: ty::DebruijnIndex,\n+    crate bound_tys: FxHashSet<ty::BoundTy>,\n+    crate bound_regions: FxHashSet<ty::BoundRegion>,\n+    crate bound_consts: FxHashSet<ty::BoundVar>,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for CountBoundVars {\n+    type BreakTy = ();\n+\n+    fn visit_binder<T: TypeFoldable<'tcx>>(&mut self, t: &Binder<T>) -> ControlFlow<Self::BreakTy> {\n+        self.outer_index.shift_in(1);\n+        let result = t.super_visit_with(self);\n+        self.outer_index.shift_out(1);\n+        result\n+    }\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match t.kind {\n+            ty::Bound(debruijn, ty) if debruijn == self.outer_index => {\n+                self.bound_tys.insert(ty);\n+                ControlFlow::CONTINUE\n+            }\n+            _ => t.super_visit_with(self),\n+        }\n+    }\n+\n+    fn visit_region(&mut self, r: ty::Region<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match r {\n+            ty::ReLateBound(debruijn, re) if *debruijn == self.outer_index => {\n+                self.bound_regions.insert(*re);\n+                ControlFlow::CONTINUE\n+            }\n+            _ => r.super_visit_with(self),\n+        }\n+    }\n+\n+    fn visit_const(&mut self, ct: &'tcx ty::Const<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match ct.val {\n+            ty::ConstKind::Bound(debruijn, c) if debruijn == self.outer_index => {\n+                self.bound_consts.insert(c);\n+                ControlFlow::CONTINUE\n+            }\n+            _ => ct.super_visit_with(self),\n+        }\n+    }\n+}\n+\n // FIXME: Optimize for checking for infer flags\n struct HasTypeFlagsVisitor {\n     flags: ty::TypeFlags,"}, {"sha": "7c7afc0b296012a0488f1ca158963b878febadf1", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74851f4cf3ab455ed92e6f762ac3d50f37bc4daf/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=74851f4cf3ab455ed92e6f762ac3d50f37bc4daf", "patch": "@@ -959,24 +959,58 @@ impl<'tcx> PolyExistentialTraitRef<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n pub struct Binder<T>(T, u32);\n \n-impl<T> Binder<T> {\n+impl<'tcx, T> Binder<T>\n+where\n+    T: TypeFoldable<'tcx>,\n+{\n     /// Wraps `value` in a binder, asserting that `value` does not\n     /// contain any bound vars that would be bound by the\n     /// binder. This is commonly used to 'inject' a value T into a\n     /// different binding level.\n-    pub fn dummy<'tcx>(value: T) -> Binder<T>\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n+    pub fn dummy(value: T) -> Binder<T> {\n         debug_assert!(!value.has_escaping_bound_vars());\n         Binder(value, 0)\n     }\n \n     /// Wraps `value` in a binder, binding higher-ranked vars (if any).\n     pub fn bind(value: T) -> Binder<T> {\n-        Binder(value, 0)\n+        use crate::ty::fold::CountBoundVars;\n+        use rustc_data_structures::fx::FxHashSet;\n+        let mut counter = CountBoundVars {\n+            outer_index: ty::INNERMOST,\n+            bound_tys: FxHashSet::default(),\n+            bound_regions: FxHashSet::default(),\n+            bound_consts: FxHashSet::default(),\n+        };\n+        value.visit_with(&mut counter);\n+        let bound_tys = counter.bound_tys.len();\n+        let bound_regions = if !counter.bound_regions.is_empty() {\n+            let mut env = false;\n+            let mut anons = FxHashSet::default();\n+            let mut named = FxHashSet::default();\n+            for br in counter.bound_regions {\n+                match br.kind {\n+                    ty::BrAnon(idx) => {\n+                        anons.insert(idx);\n+                    }\n+                    ty::BrNamed(def_id, _) => {\n+                        named.insert(def_id);\n+                    }\n+                    ty::BrEnv => env = true,\n+                }\n+            }\n+            (if env { 1 } else { 0 }) + anons.len() + named.len()\n+        } else {\n+            0\n+        };\n+        let bound_consts = counter.bound_consts.len();\n+\n+        let bound_vars = bound_tys + bound_regions + bound_consts;\n+        Binder(value, bound_vars as u32)\n     }\n+}\n \n+impl<T> Binder<T> {\n     /// Skips the binder and returns the \"bound\" value. This is a\n     /// risky thing to do because it's easy to get confused about\n     /// De Bruijn indices and the like. It is usually better to\n@@ -997,6 +1031,10 @@ impl<T> Binder<T> {\n         self.0\n     }\n \n+    pub fn bound_vars(&self) -> u32 {\n+        self.1\n+    }\n+\n     pub fn as_ref(&self) -> Binder<&T> {\n         Binder(&self.0, self.1)\n     }"}]}