{"sha": "45b97f2b8b465d13925f544a7d17eee21b472ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Yjk3ZjJiOGI0NjVkMTM5MjVmNTQ0YTdkMTdlZWUyMWI0NzJlZDA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-11T14:53:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-11T14:53:35Z"}, "message": "miri: use backtrace crate printing instead of rolling our own", "tree": {"sha": "d55eed554baa1f0e12e4143316e7a16d6f33549e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55eed554baa1f0e12e4143316e7a16d6f33549e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45b97f2b8b465d13925f544a7d17eee21b472ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45b97f2b8b465d13925f544a7d17eee21b472ed0", "html_url": "https://github.com/rust-lang/rust/commit/45b97f2b8b465d13925f544a7d17eee21b472ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45b97f2b8b465d13925f544a7d17eee21b472ed0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a3121337122637fa11f0e5d42aec67551e8c125", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3121337122637fa11f0e5d42aec67551e8c125", "html_url": "https://github.com/rust-lang/rust/commit/3a3121337122637fa11f0e5d42aec67551e8c125"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "8b16aafd314d7d0d53a20c652d85c2214a54a875", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45b97f2b8b465d13925f544a7d17eee21b472ed0/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45b97f2b8b465d13925f544a7d17eee21b472ed0/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=45b97f2b8b465d13925f544a7d17eee21b472ed0", "patch": "@@ -183,50 +183,14 @@ pub struct EvalError<'tcx> {\n impl<'tcx> EvalError<'tcx> {\n     pub fn print_backtrace(&mut self) {\n         if let Some(ref mut backtrace) = self.backtrace {\n-            eprintln!(\"{}\", print_backtrace(&mut *backtrace));\n+            print_backtrace(&mut *backtrace);\n         }\n     }\n }\n \n-fn print_backtrace(backtrace: &mut Backtrace) -> String {\n-    use std::fmt::Write;\n-\n+fn print_backtrace(backtrace: &mut Backtrace) {\n     backtrace.resolve();\n-\n-    let mut trace_text = \"\\n\\nAn error occurred in miri:\\n\".to_string();\n-    write!(trace_text, \"backtrace frames: {}\\n\", backtrace.frames().len()).unwrap();\n-    'frames: for (i, frame) in backtrace.frames().iter().enumerate() {\n-        if frame.symbols().is_empty() {\n-            write!(trace_text, \"  {}: no symbols\\n\", i).unwrap();\n-        }\n-        let mut first = true;\n-        for symbol in frame.symbols() {\n-            if first {\n-                write!(trace_text, \"  {}: \", i).unwrap();\n-                first = false;\n-            } else {\n-                let len = i.to_string().len();\n-                write!(trace_text, \"  {}  \", \" \".repeat(len)).unwrap();\n-            }\n-            if let Some(name) = symbol.name() {\n-                write!(trace_text, \"{}\\n\", name).unwrap();\n-            } else {\n-                write!(trace_text, \"<unknown>\\n\").unwrap();\n-            }\n-            write!(trace_text, \"           at \").unwrap();\n-            if let Some(file_path) = symbol.filename() {\n-                write!(trace_text, \"{}\", file_path.display()).unwrap();\n-            } else {\n-                write!(trace_text, \"<unknown_file>\").unwrap();\n-            }\n-            if let Some(line) = symbol.lineno() {\n-                write!(trace_text, \":{}\\n\", line).unwrap();\n-            } else {\n-                write!(trace_text, \"\\n\").unwrap();\n-            }\n-        }\n-    }\n-    trace_text\n+    eprintln!(\"\\n\\nAn error occurred in miri:\\n{:?}\", backtrace);\n }\n \n impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n@@ -238,7 +202,7 @@ impl<'tcx> From<EvalErrorKind<'tcx, u64>> for EvalError<'tcx> {\n \n                 if val == \"immediate\" {\n                     // Print it now\n-                    eprintln!(\"{}\", print_backtrace(&mut backtrace));\n+                    print_backtrace(&mut backtrace);\n                     None\n                 } else {\n                     Some(Box::new(backtrace))"}]}