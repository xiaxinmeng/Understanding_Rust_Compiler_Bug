{"sha": "2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "node_id": "C_kwDOAAsO6NoAKDJkYzdkYmMwMTIxOWFjMmQ4YTc1NDNhZjdmYTVmZjcwMjY3ODY1Njk", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-26T22:31:49Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-01-26T22:39:34Z"}, "message": "Run rustc's testsuite in release mode", "tree": {"sha": "6b4060bb3fbd1366c6302459cfc552b9a5d86af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4060bb3fbd1366c6302459cfc552b9a5d86af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "html_url": "https://github.com/rust-lang/rust/commit/2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dc7dbc01219ac2d8a7543af7fa5ff7026786569/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41f5e701e69a164acae301574938c30e2fd605a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/41f5e701e69a164acae301574938c30e2fd605a5", "html_url": "https://github.com/rust-lang/rust/commit/41f5e701e69a164acae301574938c30e2fd605a5"}], "stats": {"total": 128, "additions": 121, "deletions": 7}, "files": [{"sha": "c4e99469bc20b4fcf27dc2da43507a728d445555", "filename": ".github/workflows/release.yml", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2dc7dbc01219ac2d8a7543af7fa5ff7026786569/.github%2Fworkflows%2Frelease.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc7dbc01219ac2d8a7543af7fa5ff7026786569/.github%2Fworkflows%2Frelease.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yml?ref=2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "patch": "@@ -20,6 +20,10 @@ jobs:\n       matrix:\n         libgccjit_version:\n           - { gcc: \"libgccjit.so\", artifacts_branch: \"master\" }\n+        commands: [\n+          \"--test-successful-rustc --nb-parts 2 --current-part 0\",\n+          \"--test-successful-rustc --nb-parts 2 --current-part 1\",\n+        ]\n \n     steps:\n     - uses: actions/checkout@v3\n@@ -104,10 +108,4 @@ jobs:\n \n     - name: Run tests\n       run: |\n-        ./test.sh --release --clean --release-sysroot --build-sysroot --mini-tests --std-tests --test-libcore\n-        # TODO(antoyo): also run the rustc's test suite.\n-\n-    - name: Run stdarch tests\n-      run: |\n-        cd build_sysroot/sysroot_src/library/stdarch/\n-        CHANNEL=release TARGET=x86_64-unknown-linux-gnu ../../../../cargo.sh test\n+        ./test.sh --release --clean --release-sysroot --build-sysroot ${{ matrix.commands }}"}, {"sha": "42fb35e738ffdbe3bfe14baa80287847a4b6531e", "filename": ".github/workflows/stdarch.yml", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/2dc7dbc01219ac2d8a7543af7fa5ff7026786569/.github%2Fworkflows%2Fstdarch.yml", "raw_url": "https://github.com/rust-lang/rust/raw/2dc7dbc01219ac2d8a7543af7fa5ff7026786569/.github%2Fworkflows%2Fstdarch.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fstdarch.yml?ref=2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "patch": "@@ -0,0 +1,116 @@\n+name: stdarch tests with sysroot compiled in release mode\n+\n+on:\n+  - push\n+  - pull_request\n+\n+permissions:\n+  contents: read\n+\n+env:\n+  # Enable backtraces for easier debugging\n+  RUST_BACKTRACE: 1\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        libgccjit_version:\n+          - { gcc: \"libgccjit.so\", artifacts_branch: \"master\" }\n+        commands: [\n+          \"--test-successful-rustc --nb-parts 2 --current-part 0\",\n+          \"--test-successful-rustc --nb-parts 2 --current-part 1\",\n+        ]\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - uses: actions/checkout@v3\n+      with:\n+        repository: llvm/llvm-project\n+        path: llvm\n+\n+    - name: Install packages\n+      run: sudo apt-get install ninja-build ripgrep\n+\n+    - name: Download artifact\n+      uses: dawidd6/action-download-artifact@v2\n+      with:\n+          workflow: main.yml\n+          name: ${{ matrix.libgccjit_version.gcc }}\n+          path: gcc-build\n+          repo: antoyo/gcc\n+          branch: ${{ matrix.libgccjit_version.artifacts_branch }}\n+          event: push\n+          search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.\n+\n+    - name: Setup path to libgccjit\n+      run: |\n+          echo $(readlink -f gcc-build) > gcc_path\n+          # NOTE: the filename is still libgccjit.so even when the artifact name is different.\n+          ln gcc-build/libgccjit.so gcc-build/libgccjit.so.0\n+\n+    - name: Set env\n+      run: |\n+        echo \"LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"LD_LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"workspace=\"$GITHUB_WORKSPACE >> $GITHUB_ENV\n+\n+    - name: Set RUST_COMPILER_RT_ROOT\n+      run: echo \"RUST_COMPILER_RT_ROOT=\"${{ env.workspace }}/llvm/compiler-rt >> $GITHUB_ENV\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/bin\n+        key: cargo-installed-crates2-ubuntu-latest\n+\n+    - name: Cache cargo registry\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/registry\n+        key: ${{ runner.os }}-cargo-registry2-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo index\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v3\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}\n+\n+    - name: Build\n+      run: |\n+        ./prepare_build.sh\n+        ./build.sh --release --release-sysroot\n+        cargo test\n+        ./clean_all.sh\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    # Compile is a separate step, as the actions-rs/cargo action supports error annotations\n+    - name: Compile\n+      uses: actions-rs/cargo@v1.0.3\n+      with:\n+        command: build\n+        args: --release\n+\n+    - name: Run tests\n+      run: |\n+        ./test.sh --release --clean --release-sysroot --build-sysroot --mini-tests --std-tests --test-libcore\n+\n+    - name: Run stdarch tests\n+      run: |\n+        cd build_sysroot/sysroot_src/library/stdarch/\n+        CHANNEL=release TARGET=x86_64-unknown-linux-gnu ../../../../cargo.sh test"}]}