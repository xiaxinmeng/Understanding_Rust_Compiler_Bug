{"sha": "8991002644dc23588ca57c99d33001a13ec24061", "node_id": "C_kwDOAAsO6NoAKDg5OTEwMDI2NDRkYzIzNTg4Y2E1N2M5OWQzMzAwMWExM2VjMjQwNjE", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-05-08T23:50:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-12-06T20:05:22Z"}, "message": "Remove separate RPO traversal\n\nThis integrates the preorder and postorder traversals into one.", "tree": {"sha": "deef2039a249bdbd547abec90845d73a404267c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deef2039a249bdbd547abec90845d73a404267c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8991002644dc23588ca57c99d33001a13ec24061", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8991002644dc23588ca57c99d33001a13ec24061", "html_url": "https://github.com/rust-lang/rust/commit/8991002644dc23588ca57c99d33001a13ec24061", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8991002644dc23588ca57c99d33001a13ec24061/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d12767dc590e544d500d034f466a7b2d0d82d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d12767dc590e544d500d034f466a7b2d0d82d57", "html_url": "https://github.com/rust-lang/rust/commit/7d12767dc590e544d500d034f466a7b2d0d82d57"}], "stats": {"total": 24, "additions": 7, "deletions": 17}, "files": [{"sha": "043e706c3987726e896f34fe3fe7f1e4589734ad", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8991002644dc23588ca57c99d33001a13ec24061/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8991002644dc23588ca57c99d33001a13ec24061/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=8991002644dc23588ca57c99d33001a13ec24061", "patch": "@@ -4,46 +4,33 @@\n //! \"Linear-Time Algorithms for Dominators and Related Problems\",\n //! ftp://ftp.cs.princeton.edu/techreports/2005/737.pdf\n \n-use super::iterate::reverse_post_order;\n use super::ControlFlowGraph;\n use rustc_index::vec::{Idx, IndexVec};\n use std::cmp::Ordering;\n \n #[cfg(test)]\n mod tests;\n \n-pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n-    let start_node = graph.start_node();\n-    let rpo = reverse_post_order(&graph, start_node);\n-    dominators_given_rpo(graph, &rpo)\n-}\n-\n struct PreOrderFrame<Node, Iter> {\n     node: Node,\n     iter: Iter,\n }\n \n-fn dominators_given_rpo<G: ControlFlowGraph>(graph: G, rpo: &[G::Node]) -> Dominators<G::Node> {\n-    let start_node = graph.start_node();\n-    assert_eq!(rpo[0], start_node);\n-\n+pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n     // compute the post order index (rank) for each node\n     let mut post_order_rank = IndexVec::from_elem_n(0, graph.num_nodes());\n-    for (index, node) in rpo.iter().rev().cloned().enumerate() {\n-        post_order_rank[node] = index;\n-    }\n-\n     let mut visited = BitSet::new_empty(graph.num_nodes());\n-    let mut parent: IndexVec<usize, Option<usize>> = IndexVec::from_elem_n(None, rpo.len());\n+    let mut parent: IndexVec<usize, Option<usize>> = IndexVec::from_elem_n(None, graph.num_nodes());\n \n     let mut stack = vec![PreOrderFrame { node: 0, iter: graph.successors(graph.start_node()) }];\n     visited.insert(graph.start_node());\n-    let mut pre_order_to_real = Vec::with_capacity(rpo.len());\n+    let mut pre_order_to_real = Vec::with_capacity(graph.num_nodes());\n     let mut real_to_pre_order: IndexVec<G::Node, Option<usize>> =\n         IndexVec::from_elem_n(None, graph.num_nodes());\n     pre_order_to_real.push(graph.start_node());\n     real_to_pre_order[graph.start_node()] = Some(0);\n     let mut idx = 1;\n+    let mut post_order_idx = 0;\n \n     'recurse: while let Some(frame) = stack.last_mut() {\n         while let Some(successor) = frame.iter.next() {\n@@ -57,6 +44,9 @@ fn dominators_given_rpo<G: ControlFlowGraph>(graph: G, rpo: &[G::Node]) -> Domin\n                 continue 'recurse;\n             }\n         }\n+        post_order_rank[pre_order_to_real[frame.node]] = post_order_idx;\n+        post_order_idx += 1;\n+\n         stack.pop();\n     }\n "}]}