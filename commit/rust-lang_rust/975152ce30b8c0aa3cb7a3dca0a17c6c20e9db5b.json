{"sha": "975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "node_id": "C_kwDOAAsO6NoAKDk3NTE1MmNlMzBiOGMwYWEzY2I3YTNkY2EwYTE3YzZjMjBlOWRiNWI", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2022-07-27T22:03:16Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-06-13T13:46:54Z"}, "message": "Add MVP suggestion for `unsafe_op_in_unsafe_fn`\n\nNemo157 rebase notes: Migrated the changes to the lint into fluent", "tree": {"sha": "86168ff07a14bcb6b7888dee11e77dcab9973068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86168ff07a14bcb6b7888dee11e77dcab9973068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIYEABYIAC4WIQSil6aeYAADwGp0ncHG9XSMbdFgewUCZIhzUBAcZ2l0QG5lbW8x\nNTcuY29tAAoJEMb1dIxt0WB7CekBAMChVIBXedZ5SO1/WOe8obm85bjVvXbubkLu\nDK1UZypPAP9TFLiKyaOloy0E1FAOL+/4KE7t2RdODI9xA3UYkVf5BQ==\n=5x51\n-----END PGP SIGNATURE-----", "payload": "tree 86168ff07a14bcb6b7888dee11e77dcab9973068\nparent a525c7ddba5997b132efa46515e0ce90c173f480\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1658959396 +0200\ncommitter Wim Looman <git@nemo157.com> 1686664014 +0200\n\nAdd MVP suggestion for `unsafe_op_in_unsafe_fn`\n\nNemo157 rebase notes: Migrated the changes to the lint into fluent\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "html_url": "https://github.com/rust-lang/rust/commit/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a525c7ddba5997b132efa46515e0ce90c173f480", "url": "https://api.github.com/repos/rust-lang/rust/commits/a525c7ddba5997b132efa46515e0ce90c173f480", "html_url": "https://github.com/rust-lang/rust/commit/a525c7ddba5997b132efa46515e0ce90c173f480"}], "stats": {"total": 116, "additions": 105, "deletions": 11}, "files": [{"sha": "300e592a6b4637662d12f081ac48a433bec43ed2", "filename": "compiler/rustc_mir_transform/messages.ftl", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fmessages.ftl?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -55,6 +55,7 @@ mir_transform_unaligned_packed_ref = reference to packed field is unaligned\n mir_transform_union_access_label = access to union field\n mir_transform_union_access_note = the field may not be properly initialized: using uninitialized data will cause undefined behavior\n mir_transform_unsafe_op_in_unsafe_fn = {$details} is unsafe and requires unsafe block (error E0133)\n+    .suggestion = consider wrapping the function body in an unsafe block\n \n mir_transform_unused_unsafe = unnecessary `unsafe` block\n     .label = because it's nested under this `unsafe` block"}, {"sha": "fd8e02ebeab7931880c1aefdf073717be7dbbfe3", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -527,6 +527,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     }\n \n     let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n+    // Only suggest wrapping the entire function body in an unsafe block once\n+    let mut suggest_unsafe_block = true;\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n         let details = errors::RequiresUnsafeDetail { violation: details, span: source_info.span };\n@@ -561,12 +563,24 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                     op_in_unsafe_fn_allowed,\n                 });\n             }\n-            UnsafetyViolationKind::UnsafeFn => tcx.emit_spanned_lint(\n-                UNSAFE_OP_IN_UNSAFE_FN,\n-                lint_root,\n-                source_info.span,\n-                errors::UnsafeOpInUnsafeFn { details },\n-            ),\n+            UnsafetyViolationKind::UnsafeFn => {\n+                tcx.emit_spanned_lint(\n+                    UNSAFE_OP_IN_UNSAFE_FN,\n+                    lint_root,\n+                    source_info.span,\n+                    errors::UnsafeOpInUnsafeFn {\n+                        details,\n+                        suggest_unsafe_block: suggest_unsafe_block.then(|| {\n+                            let body = tcx.hir().body_owned_by(def_id);\n+                            let body_span = tcx.hir().body(body).value.span;\n+                            let start = tcx.sess.source_map().start_point(body_span).shrink_to_hi();\n+                            let end = tcx.sess.source_map().end_point(body_span).shrink_to_lo();\n+                            (start, end)\n+                        }),\n+                    },\n+                );\n+                suggest_unsafe_block = false;\n+            }\n         }\n     }\n "}, {"sha": "b546e34f037df3c5379c833f048766aba04af425", "filename": "compiler/rustc_mir_transform/src/errors.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Ferrors.rs?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -1,5 +1,6 @@\n use rustc_errors::{\n-    DecorateLint, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler, IntoDiagnostic,\n+    Applicability, DecorateLint, DiagnosticBuilder, DiagnosticMessage, EmissionGuarantee, Handler,\n+    IntoDiagnostic,\n };\n use rustc_macros::{Diagnostic, LintDiagnostic, Subdiagnostic};\n use rustc_middle::mir::{AssertKind, UnsafetyViolationDetails};\n@@ -130,6 +131,7 @@ impl RequiresUnsafeDetail {\n \n pub(crate) struct UnsafeOpInUnsafeFn {\n     pub details: RequiresUnsafeDetail,\n+    pub suggest_unsafe_block: Option<(Span, Span)>,\n }\n \n impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n@@ -138,13 +140,20 @@ impl<'a> DecorateLint<'a, ()> for UnsafeOpInUnsafeFn {\n         self,\n         diag: &'b mut DiagnosticBuilder<'a, ()>,\n     ) -> &'b mut DiagnosticBuilder<'a, ()> {\n-        let desc = diag\n-            .handler()\n-            .expect(\"lint should not yet be emitted\")\n-            .eagerly_translate_to_string(self.details.label(), [].into_iter());\n+        let handler = diag.handler().expect(\"lint should not yet be emitted\");\n+        let desc = handler.eagerly_translate_to_string(self.details.label(), [].into_iter());\n         diag.set_arg(\"details\", desc);\n         diag.span_label(self.details.span, self.details.label());\n         diag.note(self.details.note());\n+\n+        if let Some((start, end)) = self.suggest_unsafe_block {\n+            diag.multipart_suggestion_verbose(\n+                crate::fluent_generated::mir_transform_suggestion,\n+                vec![(start, \" unsafe {\".into()), (end, \"}\".into())],\n+                Applicability::MaybeIncorrect,\n+            );\n+        }\n+\n         diag\n     }\n "}, {"sha": "2333f710c40500370da820a77712c697623f6511", "filename": "tests/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -10,6 +10,14 @@ note: the lint level is defined here\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider wrapping the function body in an unsafe block\n+   |\n+LL ~ unsafe fn deny_level() { unsafe {\n+LL |     unsf();\n+ ...\n+LL |\n+LL ~ }}\n+   |\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:15:5\n@@ -52,6 +60,14 @@ note: the lint level is defined here\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n+help: consider wrapping the function body in an unsafe block\n+   |\n+LL ~ unsafe fn warning_level() { unsafe {\n+LL |     unsf();\n+ ...\n+LL |\n+LL ~ }}\n+   |\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5"}, {"sha": "81b7d68bc4aca40839644c41e3531bea6a321626", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+unsafe fn unsf() {}\n+\n+pub unsafe fn foo() { unsafe {\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+}}\n+\n+fn main() {}"}, {"sha": "ef6936d91d18772d98b7649dd208f8d68719d7ec", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -0,0 +1,12 @@\n+// run-rustfix\n+\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n+unsafe fn unsf() {}\n+\n+pub unsafe fn foo() {\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+    unsf(); //~ ERROR call to unsafe function is unsafe\n+}\n+\n+fn main() {}"}, {"sha": "7283ee08bdfa2fb3c41cb1e335c3e11cec441c3a", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr?ref=975152ce30b8c0aa3cb7a3dca0a17c6c20e9db5b", "patch": "@@ -0,0 +1,30 @@\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:8:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: the lint level is defined here\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:3:9\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+help: consider wrapping the function body in an unsafe block\n+   |\n+LL ~ pub unsafe fn foo() { unsafe {\n+LL |     unsf();\n+LL |     unsf();\n+LL ~ }}\n+   |\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:9:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 2 previous errors\n+"}]}