{"sha": "d08f1c3dff1827d401bafb82ab509a9d1e954008", "node_id": "C_kwDOAAsO6NoAKGQwOGYxYzNkZmYxODI3ZDQwMWJhZmI4MmFiNTA5YTlkMWU5NTQwMDg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T11:44:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-11T11:44:32Z"}, "message": "Auto merge of #13382 - lowr:fix/reorder-dyn-bounds-on-render, r=lowr\n\nfix: reorder dyn bounds on render\n\nFixes #13368\n\n#13192 changed the order of dyn bounds, violating the [contract](https://github.com/rust-lang/rust-analyzer/blob/3a69435af7a1e6273744085cb251adb2b9c30a03/crates/hir-ty/src/display.rs#L896-L901) with `write_bounds_like_dyn_trait()` on render. The projection bounds are expected to come right after the trait bound they are accompanied with.\n\nAlthough the reordering procedure can be made a bit more efficient, I opted for relying only on the [invariants](https://github.com/rust-lang/rust-analyzer/blob/3a69435af7a1e6273744085cb251adb2b9c30a03/crates/hir-ty/src/lower.rs#L995-L998) currently documented in `lower_dyn_trait()`. It's not the hottest path and dyn bounds tend to be short so I believe it shouldn't hurt performance noticeably.", "tree": {"sha": "12ed26b5f042877ea79cdd5f696036983973dad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12ed26b5f042877ea79cdd5f696036983973dad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d08f1c3dff1827d401bafb82ab509a9d1e954008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d08f1c3dff1827d401bafb82ab509a9d1e954008", "html_url": "https://github.com/rust-lang/rust/commit/d08f1c3dff1827d401bafb82ab509a9d1e954008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d08f1c3dff1827d401bafb82ab509a9d1e954008/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d4995191326a3710206d152a710470e196e4466", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4995191326a3710206d152a710470e196e4466", "html_url": "https://github.com/rust-lang/rust/commit/5d4995191326a3710206d152a710470e196e4466"}, {"sha": "5e43ea96aad65fbaae5806ea6732ab59977ede1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e43ea96aad65fbaae5806ea6732ab59977ede1c", "html_url": "https://github.com/rust-lang/rust/commit/5e43ea96aad65fbaae5806ea6732ab59977ede1c"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "a6602747ef799a078ce02e6e9f2b162ddc81a3a1", "filename": "crates/hir-ty/src/display.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d08f1c3dff1827d401bafb82ab509a9d1e954008/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f1c3dff1827d401bafb82ab509a9d1e954008/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fdisplay.rs?ref=d08f1c3dff1827d401bafb82ab509a9d1e954008", "patch": "@@ -751,9 +751,19 @@ impl HirDisplay for Ty {\n             }\n             TyKind::BoundVar(idx) => idx.hir_fmt(f)?,\n             TyKind::Dyn(dyn_ty) => {\n+                // Reorder bounds to satisfy `write_bounds_like_dyn_trait()`'s expectation.\n+                // FIXME: `Iterator::partition_in_place()` or `Vec::drain_filter()` may make it\n+                // more efficient when either of them hits stable.\n+                let mut bounds: SmallVec<[_; 4]> =\n+                    dyn_ty.bounds.skip_binders().iter(Interner).cloned().collect();\n+                let (auto_traits, others): (SmallVec<[_; 4]>, _) =\n+                    bounds.drain(1..).partition(|b| b.skip_binders().trait_id().is_some());\n+                bounds.extend(others);\n+                bounds.extend(auto_traits);\n+\n                 write_bounds_like_dyn_trait_with_prefix(\n                     \"dyn\",\n-                    dyn_ty.bounds.skip_binders().interned(),\n+                    &bounds,\n                     SizedByDefault::NotSized,\n                     f,\n                 )?;"}, {"sha": "8a8ff08cfe8cdab81a7250bdd273175ec3a47179", "filename": "crates/hir-ty/src/tests/display_source_code.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d08f1c3dff1827d401bafb82ab509a9d1e954008/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d08f1c3dff1827d401bafb82ab509a9d1e954008/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fdisplay_source_code.rs?ref=d08f1c3dff1827d401bafb82ab509a9d1e954008", "patch": "@@ -55,6 +55,28 @@ fn main() {\n     );\n }\n \n+#[test]\n+fn render_dyn_ty_independent_of_order() {\n+    check_types_source_code(\n+        r#\"\n+auto trait Send {}\n+trait A {\n+    type Assoc;\n+}\n+trait B: A {}\n+\n+fn test(\n+    _: &(dyn A<Assoc = ()> + Send),\n+  //^ &(dyn A<Assoc = ()> + Send)\n+    _: &(dyn Send + A<Assoc = ()>),\n+  //^ &(dyn A<Assoc = ()> + Send)\n+    _: &dyn B<Assoc = ()>,\n+  //^ &(dyn B<Assoc = ()>)\n+) {}\n+        \"#,\n+    );\n+}\n+\n #[test]\n fn render_dyn_for_ty() {\n     // FIXME"}]}