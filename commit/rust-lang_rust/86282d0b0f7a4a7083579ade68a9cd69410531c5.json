{"sha": "86282d0b0f7a4a7083579ade68a9cd69410531c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MjgyZDBiMGY3YTRhNzA4MzU3OWFkZTY4YTljZDY5NDEwNTMxYzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T21:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T21:05:31Z"}, "message": "Rollup merge of #67314 - matthewjasper:union-move-errors, r=nikomatsakis\n\nDon't suppress move errors for union fields\n\ncloses #66500", "tree": {"sha": "a3c96c6449d77b9acd418f1572b2534d0025efcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3c96c6449d77b9acd418f1572b2534d0025efcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86282d0b0f7a4a7083579ade68a9cd69410531c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/TecCRBK7hj4Ov3rIwAAdHIIACm1ay/omX+BWSpYXzzdRwXT\n2qXmLQINYAqhnD3934CyJjqH+QuWZhxajyNU521dTDJ5MCrocWaj/VbdKQixlMMU\nhemD+N82JN1G4ilPUbpdxM7HmeRR2VteapwW1+VVWkH+bV7FwPAPj3RKh9rDdhdF\nkCw56d2tXTCOwZy7o5cuUty7nAj89KD1ztnASpCnSm552DZm/I12tfBarreakoJG\nrj2/JnyECf1l+ll6XpW96cPXURVTFsK7myL5QklBnD9ugSzOaYdUgXWxrVF7Wik6\nNCBsdyW1DgvhGcsF0oNgFKWphTQTwRCK3vR4wjdD7+tlYxl8ReXIB4VkC6GYLGw=\n=Y5KL\n-----END PGP SIGNATURE-----\n", "payload": "tree a3c96c6449d77b9acd418f1572b2534d0025efcd\nparent e613f9238f6db2fb4223d1df75d94168ba75d186\nparent 97219d87feee2a87bc93f7f7ef5120e526a6307d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576875931 +0100\ncommitter GitHub <noreply@github.com> 1576875931 +0100\n\nRollup merge of #67314 - matthewjasper:union-move-errors, r=nikomatsakis\n\nDon't suppress move errors for union fields\n\ncloses #66500\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86282d0b0f7a4a7083579ade68a9cd69410531c5", "html_url": "https://github.com/rust-lang/rust/commit/86282d0b0f7a4a7083579ade68a9cd69410531c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86282d0b0f7a4a7083579ade68a9cd69410531c5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e613f9238f6db2fb4223d1df75d94168ba75d186", "url": "https://api.github.com/repos/rust-lang/rust/commits/e613f9238f6db2fb4223d1df75d94168ba75d186", "html_url": "https://github.com/rust-lang/rust/commit/e613f9238f6db2fb4223d1df75d94168ba75d186"}, {"sha": "97219d87feee2a87bc93f7f7ef5120e526a6307d", "url": "https://api.github.com/repos/rust-lang/rust/commits/97219d87feee2a87bc93f7f7ef5120e526a6307d", "html_url": "https://github.com/rust-lang/rust/commit/97219d87feee2a87bc93f7f7ef5120e526a6307d"}], "stats": {"total": 88, "additions": 79, "deletions": 9}, "files": [{"sha": "0b8f41f51a1ee04739e7dbe5efb865ad35cd5f88", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=86282d0b0f7a4a7083579ade68a9cd69410531c5", "patch": "@@ -103,6 +103,13 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             }\n         };\n \n+        // The move path index of the first union that we find. Once this is\n+        // some we stop creating child move paths, since moves from unions\n+        // move the whole thing.\n+        // We continue looking for other move errors though so that moving\n+        // from `*(u.f: &_)` isn't allowed.\n+        let mut union_path = None;\n+\n         for (i, elem) in place.projection.iter().enumerate() {\n             let proj_base = &place.projection[..i];\n             let body = self.builder.body;\n@@ -127,9 +134,8 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                         InteriorOfTypeWithDestructor { container_ty: place_ty },\n                     ));\n                 }\n-                // move out of union - always move the entire union\n                 ty::Adt(adt, _) if adt.is_union() => {\n-                    return Err(MoveError::UnionMove { path: base });\n+                    union_path.get_or_insert(base);\n                 }\n                 ty::Slice(_) => {\n                     return Err(MoveError::cannot_move_out_of(\n@@ -155,15 +161,22 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                 _ => {}\n             };\n \n-            base = self.add_move_path(base, elem, |tcx| {\n-                Place {\n-                    base: place.base.clone(),\n-                    projection: tcx.intern_place_elems(&place.projection[..i+1]),\n-                }\n-            });\n+            if union_path.is_none() {\n+                base = self.add_move_path(base, elem, |tcx| {\n+                    Place {\n+                        base: place.base.clone(),\n+                        projection: tcx.intern_place_elems(&place.projection[..i+1]),\n+                    }\n+                });\n+            }\n         }\n \n-        Ok(base)\n+        if let Some(base) = union_path {\n+            // Move out of union - always move the entire union.\n+            Err(MoveError::UnionMove { path: base })\n+        } else {\n+            Ok(base)\n+        }\n     }\n \n     fn add_move_path("}, {"sha": "8fbf120fc1c78e1a8a9827595f84067033861ce9", "filename": "src/test/ui/borrowck/move-from-union-field-issue-66500.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.rs?ref=86282d0b0f7a4a7083579ade68a9cd69410531c5", "patch": "@@ -0,0 +1,30 @@\n+// Moving from a reference/raw pointer should be an error, even when they're\n+// the field of a union.\n+\n+#![feature(untagged_unions)]\n+\n+union Pointers {\n+    a: &'static String,\n+    b: &'static mut String,\n+    c: *const String,\n+    d: *mut String,\n+}\n+\n+unsafe fn move_ref(u: Pointers) -> String {\n+    *u.a\n+    //~^ ERROR cannot move out of `*u.a`\n+}\n+unsafe fn move_ref_mut(u: Pointers) -> String {\n+    *u.b\n+    //~^ ERROR cannot move out of `*u.b`\n+}\n+unsafe fn move_ptr(u: Pointers) -> String {\n+    *u.c\n+    //~^ ERROR cannot move out of `*u.c`\n+}\n+unsafe fn move_ptr_mut(u: Pointers) -> String {\n+    *u.d\n+    //~^ ERROR cannot move out of `*u.d`\n+}\n+\n+fn main() {}"}, {"sha": "a7cb1c9e2213547e9c8c0e00dc8acaba0b84829d", "filename": "src/test/ui/borrowck/move-from-union-field-issue-66500.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86282d0b0f7a4a7083579ade68a9cd69410531c5/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-from-union-field-issue-66500.stderr?ref=86282d0b0f7a4a7083579ade68a9cd69410531c5", "patch": "@@ -0,0 +1,27 @@\n+error[E0507]: cannot move out of `*u.a` which is behind a shared reference\n+  --> $DIR/move-from-union-field-issue-66500.rs:14:5\n+   |\n+LL |     *u.a\n+   |     ^^^^ move occurs because `*u.a` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0507]: cannot move out of `*u.b` which is behind a mutable reference\n+  --> $DIR/move-from-union-field-issue-66500.rs:18:5\n+   |\n+LL |     *u.b\n+   |     ^^^^ move occurs because `*u.b` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0507]: cannot move out of `*u.c` which is behind a raw pointer\n+  --> $DIR/move-from-union-field-issue-66500.rs:22:5\n+   |\n+LL |     *u.c\n+   |     ^^^^ move occurs because `*u.c` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0507]: cannot move out of `*u.d` which is behind a raw pointer\n+  --> $DIR/move-from-union-field-issue-66500.rs:26:5\n+   |\n+LL |     *u.d\n+   |     ^^^^ move occurs because `*u.d` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}]}