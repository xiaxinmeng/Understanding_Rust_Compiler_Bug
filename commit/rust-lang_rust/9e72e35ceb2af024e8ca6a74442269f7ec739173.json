{"sha": "9e72e35ceb2af024e8ca6a74442269f7ec739173", "node_id": "C_kwDOAAsO6NoAKDllNzJlMzVjZWIyYWYwMjRlOGNhNmE3NDQ0MjI2OWY3ZWM3MzkxNzM", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-03T04:22:24Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-23T20:17:47Z"}, "message": "Suggest `.clone()` or `ref binding` on E0382", "tree": {"sha": "0ece761391df7d3342f6cb34e9524cdf08aa38c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ece761391df7d3342f6cb34e9524cdf08aa38c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e72e35ceb2af024e8ca6a74442269f7ec739173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e72e35ceb2af024e8ca6a74442269f7ec739173", "html_url": "https://github.com/rust-lang/rust/commit/9e72e35ceb2af024e8ca6a74442269f7ec739173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e72e35ceb2af024e8ca6a74442269f7ec739173/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d121aa3b5584eb919a4aaf64dbae0ea1e8e30231", "url": "https://api.github.com/repos/rust-lang/rust/commits/d121aa3b5584eb919a4aaf64dbae0ea1e8e30231", "html_url": "https://github.com/rust-lang/rust/commit/d121aa3b5584eb919a4aaf64dbae0ea1e8e30231"}], "stats": {"total": 1141, "additions": 1092, "deletions": 49}, "files": [{"sha": "28072f153a4792513914f67fac059e1148194d9c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -1376,7 +1376,7 @@ pub enum ExprKind {\n     /// Conditionless loop (can be exited with `break`, `continue`, or `return`).\n     ///\n     /// `'label: loop { block }`\n-    Loop(P<Block>, Option<Label>),\n+    Loop(P<Block>, Option<Label>, Span),\n     /// A `match` block.\n     Match(P<Expr>, Vec<Arm>),\n     /// A closure (e.g., `move |a, b, c| a + b + c`)."}, {"sha": "a5b24c403dd376d10c75550310a53300d59201a7", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -1355,9 +1355,10 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_block(body);\n             visit_opt(label, |label| vis.visit_label(label));\n         }\n-        ExprKind::Loop(body, label) => {\n+        ExprKind::Loop(body, label, span) => {\n             vis.visit_block(body);\n             visit_opt(label, |label| vis.visit_label(label));\n+            vis.visit_span(span);\n         }\n         ExprKind::Match(expr, arms) => {\n             vis.visit_expr(expr);"}, {"sha": "c528118be08085869bac97af434e5f37978784a8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -824,7 +824,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(subexpression);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Loop(block, opt_label) => {\n+        ExprKind::Loop(block, opt_label, _) => {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }"}, {"sha": "6215d9af3702b52d0f78f877b601bfbb831f3319", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -131,12 +131,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let span = this.mark_span_with_reason(DesugaringKind::WhileLoop, e.span, None);\n                     this.lower_expr_while_in_loop_scope(span, cond, body, *opt_label)\n                 }),\n-                ExprKind::Loop(body, opt_label) => self.with_loop_scope(e.id, |this| {\n+                ExprKind::Loop(body, opt_label, span) => self.with_loop_scope(e.id, |this| {\n                     hir::ExprKind::Loop(\n                         this.lower_block(body, false),\n                         this.lower_label(*opt_label),\n                         hir::LoopSource::Loop,\n-                        DUMMY_SP,\n+                        this.lower_span(span),\n                     )\n                 }),\n                 ExprKind::TryBlock(body) => self.lower_expr_try_block(body),"}, {"sha": "4b37fa027f53b75046029d2180ff43f8e9c5a00f", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -377,7 +377,7 @@ impl<'a> State<'a> {\n                 self.space();\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Loop(ref blk, opt_label) => {\n+            ast::ExprKind::Loop(ref blk, opt_label, _) => {\n                 if let Some(label) = opt_label {\n                     self.print_ident(label.ident);\n                     self.word_space(\":\");"}, {"sha": "9b6836039a1386452ef506885705270699e09dad", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 173, "deletions": 19, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -191,6 +191,146 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     is_loop_move = true;\n                 }\n \n+                struct ExpressionFinder<'hir> {\n+                    expr_span: Span,\n+                    expr: Option<&'hir hir::Expr<'hir>>,\n+                    pat: Option<&'hir hir::Pat<'hir>>,\n+                }\n+                impl<'hir> Visitor<'hir> for ExpressionFinder<'hir> {\n+                    fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n+                        if e.span == self.expr_span {\n+                            self.expr = Some(e);\n+                        }\n+                        hir::intravisit::walk_expr(self, e);\n+                    }\n+                    fn visit_pat(&mut self, p: &'hir hir::Pat<'hir>) {\n+                        if p.span == self.expr_span {\n+                            self.pat = Some(p);\n+                        }\n+                        if let hir::PatKind::Binding(hir::BindingAnnotation::NONE, _, i, _) = p.kind\n+                            && i.span == self.expr_span\n+                        {\n+                            self.pat = Some(p);\n+                        }\n+                        hir::intravisit::walk_pat(self, p);\n+                    }\n+                }\n+\n+                let hir = self.infcx.tcx.hir();\n+                if let Some(hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::Fn(_, _, body_id),\n+                    ..\n+                })) = hir.find(hir.local_def_id_to_hir_id(self.mir_def_id()))\n+                    && let Some(hir::Node::Expr(expr)) = hir.find(body_id.hir_id)\n+                {\n+                    let place = &self.move_data.move_paths[mpi].place;\n+                    let span = place.as_local()\n+                        .map(|local| self.body.local_decls[local].source_info.span);\n+                    let mut finder = ExpressionFinder {\n+                        expr_span: move_span,\n+                        expr: None,\n+                        pat: None,\n+                    };\n+                    finder.visit_expr(expr);\n+                    if let Some(span) = span && let Some(expr) = finder.expr {\n+                        for (_, expr) in hir.parent_iter(expr.hir_id) {\n+                            if let hir::Node::Expr(expr) = expr {\n+                                if expr.span.contains(span) {\n+                                    // If the let binding occurs within the same loop, then that\n+                                    // loop isn't relevant, like in the following, the outermost `loop`\n+                                    // doesn't play into `x` being moved.\n+                                    // ```\n+                                    // loop {\n+                                    //     let x = String::new();\n+                                    //     loop {\n+                                    //         foo(x);\n+                                    //     }\n+                                    // }\n+                                    // ```\n+                                    break;\n+                                }\n+                                if let hir::ExprKind::Loop(.., loop_span) = expr.kind {\n+                                    err.span_label(loop_span, \"inside of this loop\");\n+                                }\n+                            }\n+                        }\n+                        let typeck = self.infcx.tcx.typeck(self.mir_def_id());\n+                        let hir_id = hir.get_parent_node(expr.hir_id);\n+                        if let Some(parent) = hir.find(hir_id) {\n+                            if let hir::Node::Expr(parent_expr) = parent\n+                                && let hir::ExprKind::MethodCall(_, _, args, _) = parent_expr.kind\n+                                && let Some(def_id) = typeck.type_dependent_def_id(parent_expr.hir_id)\n+                                && let Some(def_id) = def_id.as_local()\n+                                && let Some(node) = hir.find(hir.local_def_id_to_hir_id(def_id))\n+                                && let Some(fn_sig) = node.fn_sig()\n+                                && let Some(ident) = node.ident()\n+                                && let Some(pos) = args.iter()\n+                                    .position(|arg| arg.hir_id == expr.hir_id)\n+                                && let Some(arg) = fn_sig.decl.inputs.get(pos + 1)\n+                            {\n+                                let mut span: MultiSpan = arg.span.into();\n+                                span.push_span_label(\n+                                    arg.span,\n+                                    \"this type parameter takes ownership of the value\".to_string(),\n+                                );\n+                                span.push_span_label(\n+                                    ident.span,\n+                                    \"in this method\".to_string(),\n+                                );\n+                                err.span_note(\n+                                    span,\n+                                    format!(\n+                                        \"consider changing this parameter type in `{}` to borrow \\\n+                                         instead if ownering the value isn't necessary\",\n+                                        ident,\n+                                    ),\n+                                );\n+                            }\n+                            if let hir::Node::Expr(parent_expr) = parent\n+                                && let hir::ExprKind::Call(call, args) = parent_expr.kind\n+                                && let ty::FnDef(def_id, _) = typeck.node_type(call.hir_id).kind()\n+                                && let Some(def_id) = def_id.as_local()\n+                                && let Some(node) = hir.find(hir.local_def_id_to_hir_id(def_id))\n+                                && let Some(fn_sig) = node.fn_sig()\n+                                && let Some(ident) = node.ident()\n+                                && let Some(pos) = args.iter()\n+                                    .position(|arg| arg.hir_id == expr.hir_id)\n+                                && let Some(arg) = fn_sig.decl.inputs.get(pos)\n+                            {\n+                                let mut span: MultiSpan = arg.span.into();\n+                                span.push_span_label(\n+                                    arg.span,\n+                                    \"this type parameter takes ownership of the value\".to_string(),\n+                                );\n+                                span.push_span_label(\n+                                    ident.span,\n+                                    \"in this function\".to_string(),\n+                                );\n+                                err.span_note(\n+                                    span,\n+                                    format!(\n+                                        \"consider changing this parameter type in `{}` to borrow \\\n+                                         instead if ownering the value isn't necessary\",\n+                                        ident,\n+                                    ),\n+                                );\n+                            }\n+                            let place = &self.move_data.move_paths[mpi].place;\n+                            let ty = place.ty(self.body, self.infcx.tcx).ty;\n+                            self.suggest_cloning(&mut err, ty, move_span);\n+                        }\n+                    }\n+                    if let Some(pat) = finder.pat {\n+                        in_pattern = true;\n+                        err.span_suggestion_verbose(\n+                            pat.span.shrink_to_lo(),\n+                            \"borrow this binding in the pattern to avoid moving the value\",\n+                            \"ref \".to_string(),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n+                }\n+\n                 self.explain_captures(\n                     &mut err,\n                     span,\n@@ -203,25 +343,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     is_loop_move,\n                     maybe_reinitialized_locations.is_empty(),\n                 );\n-\n-                if let (UseSpans::PatUse(span), []) =\n-                    (move_spans, &maybe_reinitialized_locations[..])\n-                {\n-                    if maybe_reinitialized_locations.is_empty() {\n-                        err.span_suggestion_verbose(\n-                            span.shrink_to_lo(),\n-                            &format!(\n-                                \"borrow this field in the pattern to avoid moving {}\",\n-                                self.describe_place(moved_place.as_ref())\n-                                    .map(|n| format!(\"`{}`\", n))\n-                                    .unwrap_or_else(|| \"the value\".to_string())\n-                            ),\n-                            \"ref \",\n-                            Applicability::MachineApplicable,\n-                        );\n-                        in_pattern = true;\n-                    }\n-                }\n             }\n \n             use_spans.var_path_only_subdiag(&mut err, desired_action);\n@@ -590,6 +711,39 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         true\n     }\n \n+    fn suggest_cloning(&self, err: &mut Diagnostic, ty: Ty<'tcx>, span: Span) {\n+        let tcx = self.infcx.tcx;\n+\n+        // Try to find predicates on *generic params* that would allow copying `ty`\n+        let infcx = tcx.infer_ctxt().build();\n+        let mut fulfill_cx = <dyn rustc_infer::traits::TraitEngine<'_>>::new(infcx.tcx);\n+\n+        let clone_did = infcx.tcx.lang_items().clone_trait().unwrap();\n+        let cause = ObligationCause::new(\n+            span,\n+            self.mir_hir_id(),\n+            rustc_infer::traits::ObligationCauseCode::MiscObligation,\n+        );\n+        fulfill_cx.register_bound(\n+            &infcx,\n+            self.param_env,\n+            // Erase any region vids from the type, which may not be resolved\n+            infcx.tcx.erase_regions(ty),\n+            clone_did,\n+            cause,\n+        );\n+        // Select all, including ambiguous predicates\n+        let errors = fulfill_cx.select_all_or_error(&infcx);\n+        if errors.is_empty() {\n+            err.span_suggestion_verbose(\n+                span.shrink_to_hi(),\n+                \"consider cloning the value if the performance cost is acceptable\",\n+                \".clone()\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+\n     fn suggest_adding_copy_bounds(&self, err: &mut Diagnostic, ty: Ty<'tcx>, span: Span) {\n         let tcx = self.infcx.tcx;\n         let generics = tcx.generics_of(self.mir_def_id());"}, {"sha": "9f42a0c2d585cdef4270de56762ab529b45dc6ac", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -307,7 +307,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::InlineAsm(_)\n             | ExprKind::Let(_, _, _)\n             | ExprKind::Lit(_)\n-            | ExprKind::Loop(_, _)\n+            | ExprKind::Loop(_, _, _)\n             | ExprKind::MacCall(_)\n             | ExprKind::Match(_, _)\n             | ExprKind::Path(_, _)"}, {"sha": "9f2267efb82872569ea399de4c47ea569cf98c66", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -1734,7 +1734,7 @@ impl<'a> Parser<'a> {\n                         expr.kind,\n                         ExprKind::While(_, _, None)\n                             | ExprKind::ForLoop(_, _, _, None)\n-                            | ExprKind::Loop(_, None)\n+                            | ExprKind::Loop(_, None, _)\n                             | ExprKind::Block(_, None)\n                     )\n                 {\n@@ -2444,10 +2444,11 @@ impl<'a> Parser<'a> {\n \n     /// Parses `loop { ... }` (`loop` token already eaten).\n     fn parse_loop_expr(&mut self, opt_label: Option<Label>, lo: Span) -> PResult<'a, P<Expr>> {\n+        let loop_span = self.prev_token.span;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n         Ok(self.mk_expr_with_attrs(\n             lo.to(self.prev_token.span),\n-            ExprKind::Loop(body, opt_label),\n+            ExprKind::Loop(body, opt_label, loop_span),\n             attrs,\n         ))\n     }"}, {"sha": "93b0f5814dedf297a9e92d96bea6085df0de393f", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -3841,7 +3841,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 }\n             }\n \n-            ExprKind::Loop(ref block, label) => self.resolve_labeled_block(label, expr.id, &block),\n+            ExprKind::Loop(ref block, label, _) => {\n+                self.resolve_labeled_block(label, expr.id, &block)\n+            }\n \n             ExprKind::While(ref cond, ref block, label) => {\n                 self.with_resolved_label(label, expr.id, |this| {"}, {"sha": "0ec2ae8839e7982480ec5f420a5ac5ed28210cda", "filename": "src/test/ui/binding/issue-53114-borrow-checks.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fissue-53114-borrow-checks.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -17,6 +17,10 @@ LL |     match mm { (_, _y) => { } }\n    |           ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     match mm { (ref _x, _) => { } }\n+   |                 +++\n \n error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:29:11\n@@ -28,6 +32,10 @@ LL |     match mm { (_, _) => { } }\n    |           ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     match mm { (_, ref _y) => { } }\n+   |                    +++\n \n error[E0382]: use of moved value: `m`\n   --> $DIR/issue-53114-borrow-checks.rs:36:16\n@@ -48,6 +56,10 @@ LL |     if let (_, _y) = mm { }\n    |                      ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.0` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     if let (ref _x, _) = mm { }\n+   |             +++\n \n error[E0382]: use of partially moved value: `mm`\n   --> $DIR/issue-53114-borrow-checks.rs:43:21\n@@ -59,6 +71,10 @@ LL |     if let (_, _) = mm { }\n    |                     ^^ value used here after partial move\n    |\n    = note: partial move occurs because `mm.1` has type `M`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     if let (_, ref _y) = mm { }\n+   |                +++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "994eaf9d8c77885a219ea90c5a0a41e07896e4ec", "filename": "src/test/ui/binop/binop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -32,6 +32,10 @@ LL |     +\n LL |     x.clone();\n    |     ^^^^^^^^^ value borrowed here after move\n    |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     x.clone()\n+   |      ++++++++\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Add<Output=()> + Clone + Copy>(x: T) {"}, {"sha": "f58672f0666be817355b09f9fb9bf5b2f1ed8c8f", "filename": "src/test/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -27,6 +27,11 @@ LL |         a @ [.., _] => (),\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ [.., _] => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as immutable because it is also borrowed as mutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:28:5\n@@ -78,6 +83,15 @@ LL |         foo @ Some(Test::Foo | Test::Bar) => (),\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref foo @ Some(Test::Foo | Test::Bar) => (),\n+   |         +++\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref foo @ Some(Test::Foo | Test::Bar) => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:86:5\n@@ -129,6 +143,15 @@ LL |         a @ [.., Some(Test::Foo | Test::Bar)] => (),\n ...\n LL |     &x;\n    |     ^^ value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ [.., Some(Test::Foo | Test::Bar)] => (),\n+   |         +++\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ [.., Some(Test::Foo | Test::Bar)] => (),\n+   |         +++\n \n error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:144:5"}, {"sha": "00bb13caebdb57338ab93ac2c17d15df19c6a897", "filename": "src/test/ui/borrowck/borrowck-consume-unsize-vec.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-unsize-vec.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,18 @@ LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n+   |\n+note: consider changing this parameter type in `consume` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrowck-consume-unsize-vec.rs:3:15\n+   |\n+LL | fn consume(_: Box<[i32]>) {\n+   |    -------    ^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     consume(b.clone());\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "103f45155d7ba7b409df2704850d8bd3c26fca00", "filename": "src/test/ui/borrowck/borrowck-consume-upcast-box.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-consume-upcast-box.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,14 @@ LL |     consume(b);\n    |             - value moved here\n LL |     consume(b);\n    |             ^ value used here after move\n+   |\n+note: consider changing this parameter type in `consume` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrowck-consume-upcast-box.rs:5:15\n+   |\n+LL | fn consume(_: Box<dyn Foo>) {\n+   |    -------    ^^^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error: aborting due to previous error\n "}, {"sha": "eaf4bb38bc5905532ba39d0081673df2cd6e3107", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -9,6 +9,11 @@ LL |         Some(_) if { drop(my_str); false } => {}\n LL |         Some(_) => {}\n LL |         None => { foo(my_str); }\n    |                       ^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if { drop(my_str.clone()); false } => {}\n+   |                                 ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "e1b99162088054e024b885cfb391afac15e6d7d1", "filename": "src/test/ui/borrowck/borrowck-loan-in-overloaded-op.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-in-overloaded-op.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     let _y = {x} + x.clone(); // the `{x}` forces a move to occur\n    |               -    ^^^^^^^^^ value borrowed here after move\n    |               |\n    |               value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = {x.clone()} + x.clone(); // the `{x}` forces a move to occur\n+   |                ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "67b00c1dd90ce7695fa2bc2f57fb252120045c26", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |         [.., _y] => {}\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-match.rs:23:14\n@@ -19,6 +23,10 @@ LL |         [.., _y] => {}\n    |              ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:33:15\n@@ -30,6 +38,10 @@ LL |         [.., (_y, _)] => {}\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:44:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:55:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:66:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:77:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:89:11\n@@ -85,6 +113,10 @@ LL |         [(_x, _), _, _] => {}\n    |           ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _, _] => {}\n+   |          +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-match.rs:99:15\n@@ -96,6 +128,10 @@ LL |         [.., (_x, _)] => {}\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _y @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-match.rs:110:11\n@@ -107,6 +143,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _] => {}\n+   |          +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "47429ea3eebae32927f0def3ef6bae5f62f2708b", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:28:11\n@@ -19,6 +23,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:41:11\n@@ -30,6 +38,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:52:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:63:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:74:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:85:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, ref _y @ ..] => {}\n+   |             +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:96:11\n@@ -85,6 +113,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:109:11\n@@ -96,6 +128,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _, _] => {}\n+   |          +++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "bfab13d42d2a16151132110737c16fc17a9c88be", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:23:14\n@@ -19,6 +23,10 @@ LL |         [.., ref _y] => {}\n    |              ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:33:15\n@@ -30,6 +38,10 @@ LL |         [.., (ref _y, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:44:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:55:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:66:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:77:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:89:11\n@@ -85,6 +113,10 @@ LL |         [(ref _x, _), _, _] => {}\n    |           ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _, _] => {}\n+   |          +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:99:15\n@@ -96,6 +128,10 @@ LL |         [.., (ref _x, _)] => {}\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _y @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:110:11\n@@ -107,6 +143,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:123:5\n@@ -118,6 +158,10 @@ LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:131:5\n@@ -129,6 +173,10 @@ LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:139:5\n@@ -140,6 +188,10 @@ LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x @ ..] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-match.rs:147:5\n@@ -151,6 +203,10 @@ LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x @ ..] => {}\n+   |                +++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "8412c24fe61122b09dd3280fde6054a6957f4b17", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, ref _x] => {}\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:28:11\n@@ -19,6 +23,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, _, (ref _x, _)] => {}\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:41:11\n@@ -30,6 +38,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _x, _, _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:52:11\n@@ -41,6 +53,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., ref _x] => {}\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:63:11\n@@ -52,6 +68,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [(ref _x, _), _, _] => {}\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:74:11\n@@ -63,6 +83,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [.., (ref _x, _)] => {}\n+   |               +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:85:11\n@@ -74,6 +98,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [_, ref _y @ ..] => {}\n+   |             +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:96:11\n@@ -85,6 +113,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref _y @ .., _] => {}\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:109:11\n@@ -96,6 +128,10 @@ LL |     match a {\n    |           ^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         [ref x @ .., _, _] => {}\n+   |          +++\n \n error: aborting due to 9 previous errors\n "}, {"sha": "e2aeaafc63c25320f6894415016c0f709eea0e5b", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,10 @@ LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:16:14\n@@ -17,6 +21,10 @@ LL |     let [.., ref _y] = a;\n    |              ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: borrow of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array-use.rs:22:15\n@@ -27,6 +35,10 @@ LL |     let [.., (ref _y, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:30:10\n@@ -37,6 +49,10 @@ LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _x, _, _] = a;\n+   |          +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:36:16\n@@ -47,6 +63,10 @@ LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., ref _x] = a;\n+   |              +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:42:10\n@@ -57,6 +77,10 @@ LL |     let [ref _y @ .., _, _] = a;\n    |          ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [(ref _x, _), _, _] = a;\n+   |           +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:48:16\n@@ -67,6 +91,10 @@ LL |     let [_, _, ref _y @ ..] = a;\n    |                ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., (ref _x, _)] = a;\n+   |               +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:54:11\n@@ -77,6 +105,10 @@ LL |     let [(ref _x, _), _, _] = a;\n    |           ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          +++\n \n error[E0382]: borrow of moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array-use.rs:60:15\n@@ -87,6 +119,10 @@ LL |     let [.., (ref _x, _)] = a;\n    |               ^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                +++\n \n error[E0382]: borrow of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:68:13\n@@ -97,6 +133,10 @@ LL |     let [_, ref _y @ ..] = a;\n    |             ^^^^^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref x @ .., _] = a;\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:76:5\n@@ -107,6 +147,10 @@ LL |     a[2] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:82:5\n@@ -117,6 +161,10 @@ LL |     a[2].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:88:5\n@@ -127,6 +175,10 @@ LL |     a[0] = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x @ ..] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array-use.rs:94:5\n@@ -137,6 +189,10 @@ LL |     a[0].1 = Default::default();\n    |     ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x @ ..] = a;\n+   |                +++\n \n error: aborting due to 14 previous errors\n "}, {"sha": "dd456681f57bc691d42d3b22ee2d46e7a5c14eb4", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,10 @@ LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _x] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a[..]`\n   --> $DIR/borrowck-move-out-from-array.rs:16:14\n@@ -17,6 +21,10 @@ LL |     let [.., _y] = a;\n    |              ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:22:15\n@@ -27,6 +35,10 @@ LL |     let [.., (_y, _)] = a;\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, (ref _x, _)] = a;\n+   |                 +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:30:10\n@@ -37,6 +49,10 @@ LL |     let [_y @ .., _, _] = a;\n    |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _x, _, _] = a;\n+   |          +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:36:16\n@@ -47,6 +63,10 @@ LL |     let [_, _, _y @ ..] = a;\n    |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., ref _x] = a;\n+   |              +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:42:10\n@@ -57,6 +77,10 @@ LL |     let [_y @ .., _, _] = a;\n    |          ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [(ref _x, _), _, _] = a;\n+   |           +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:48:16\n@@ -67,6 +91,10 @@ LL |     let [_, _, _y @ ..] = a;\n    |                ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..].0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [.., (ref _x, _)] = a;\n+   |               +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:54:11\n@@ -77,6 +105,10 @@ LL |     let [(_x, _), _, _] = a;\n    |           ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          +++\n \n error[E0382]: use of moved value: `a[..].0`\n   --> $DIR/borrowck-move-out-from-array.rs:60:15\n@@ -87,6 +119,10 @@ LL |     let [.., (_x, _)] = a;\n    |               ^^ value used here after move\n    |\n    = note: move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                +++\n \n error[E0382]: use of partially moved value: `a`\n   --> $DIR/borrowck-move-out-from-array.rs:68:13\n@@ -97,6 +133,10 @@ LL |     let [_, _y @ ..] = a;\n    |             ^^ value used here after partial move\n    |\n    = note: partial move occurs because `a[..]` has type `(String, String)`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let [ref x @ .., _] = a;\n+   |          +++\n \n error: aborting due to 10 previous errors\n "}, {"sha": "f94cbc30db421d77c381e2f123be1c4b464b9bc5", "filename": "src/test/ui/borrowck/borrowck-multiple-captures.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-multiple-captures.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -40,6 +40,11 @@ LL |     thread::spawn(move|| {\n ...\n LL |         drop(x1);\n    |              -- use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x1.clone());\n+   |            ++++++++\n \n error[E0382]: use of moved value: `x2`\n   --> $DIR/borrowck-multiple-captures.rs:27:19\n@@ -53,6 +58,11 @@ LL |     thread::spawn(move|| {\n ...\n LL |         drop(x2);\n    |              -- use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x2.clone());\n+   |            ++++++++\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-multiple-captures.rs:41:14\n@@ -100,6 +110,11 @@ LL |     thread::spawn(move|| {\n LL |\n LL |         drop(x);\n    |              - use occurs due to use in closure\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x.clone());\n+   |           ++++++++\n \n error: aborting due to 8 previous errors\n "}, {"sha": "fb0e274c2919ab2958b9110b31ed8337cf3d617d", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -33,6 +33,11 @@ LL |     println!(\"{}\", f[s]);\n ...\n LL |     f[s] = 10;\n    |       ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     println!(\"{}\", f[s.clone()]);\n+   |                       ++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "f785900d53fc0c8b3b19d212699458361cc38d01", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,11 @@ LL |     drop(x);\n    |          - value moved here\n LL |     let _ = (1,x);\n    |                ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     drop(x.clone());\n+   |           ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ad898fcabd9dbfab6df5fb1b94e7b02585f10aad", "filename": "src/test/ui/borrowck/issue-31287-drop-in-guard.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-31287-drop-in-guard.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,11 @@ LL |         Some(_) if { drop(a); false } => None,\n    |                           - value moved here\n LL |         x => x,\n    |         ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         Some(_) if { drop(a.clone()); false } => None,\n+   |                            ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "716cc9d0c8ba26af893beac1735a2a62d15e7100", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `Vec<bool>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `maybe.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref thing) = maybe {\n    |                     +++"}, {"sha": "2552fff860cd369a94b66b767d80f63f8a27df7e", "filename": "src/test/ui/borrowck/issue-83760.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-83760.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |             val = None;\n    |             ---------- this reinitialization might get skipped\n    |\n    = note: move occurs because value has type `Struct`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     while let Some(ref foo) = val {\n+   |                    +++\n \n error[E0382]: use of moved value: `foo`\n   --> $DIR/issue-83760.rs:21:14"}, {"sha": "55948afca733b763e35c15ec362211499da800d0", "filename": "src/test/ui/borrowck/move-in-pattern-mut-in-loop.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut-in-loop.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(mut _x) = opt {}\n    |                     ^^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `&mut i32`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `opt.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref mut _x) = opt {}\n    |                     +++"}, {"sha": "dd3471e2c8be58dcd66f5e4d64e21b904cf0d274", "filename": "src/test/ui/borrowck/move-in-pattern-mut.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern-mut.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,7 +8,7 @@ LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `s.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     if let Some(ref mut x) = s {\n    |                 +++\n@@ -23,7 +23,7 @@ LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `e.s`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     let E::V { s: ref mut x } = e;\n    |                   +++"}, {"sha": "250acbe5928a0aed75da3fa8446a6d28277d4a53", "filename": "src/test/ui/borrowck/move-in-pattern.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-pattern.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,7 +8,7 @@ LL |     foo(s);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `s.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     if let Some(ref x) = s {\n    |                 +++\n@@ -23,7 +23,7 @@ LL |     bar(e);\n    |         ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `S`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `e.s`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |     let E::V { s: ref x } = e;\n    |                   +++"}, {"sha": "eaf53868014fadd42a4aa295dae2cc7aff8657a2", "filename": "src/test/ui/borrowck/mut-borrow-in-loop-2.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-in-loop-2.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -4,9 +4,17 @@ error[E0382]: use of moved value: `value`\n LL | fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n    |                         ----- move occurs because `value` has type `&mut Events<R>`, which does not implement the `Copy` trait\n LL |     for _ in 0..3 {\n+   |     ------------- inside of this loop\n LL |         Other::handle(value);\n    |                       ^^^^^ value moved here, in previous iteration of loop\n    |\n+note: consider changing this parameter type in `handle` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/mut-borrow-in-loop-2.rs:9:22\n+   |\n+LL |     fn handle(value: T) -> Self;\n+   |        ------        ^ this type parameter takes ownership of the value\n+   |        |\n+   |        in this function\n help: consider creating a fresh reborrow of `value` here\n    |\n LL |         Other::handle(&mut *value);"}, {"sha": "9501798bb06d0f6ef12b4a81455bc7fba5e2364d", "filename": "src/test/ui/borrowck/or-patterns.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ((ref y, _) | (_, y),) => (),\n+   |           +++\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:10:5\n@@ -19,6 +23,10 @@ LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ((y, _) | (_, ref y),) => (),\n+   |                       +++\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:18:5\n@@ -77,6 +85,10 @@ LL |     &x.0 .0;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.0` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ((ref y, _) | (_, y),) = x;\n+   |           +++\n \n error[E0382]: borrow of moved value: `x.0.1`\n   --> $DIR/or-patterns.rs:40:5\n@@ -88,6 +100,10 @@ LL |     &x.0 .1;\n    |     ^^^^^^^ value borrowed here after move\n    |\n    = note: move occurs because `x.0.1` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ((y, _) | (_, ref y),) = x;\n+   |                       +++\n \n error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n   --> $DIR/or-patterns.rs:46:5"}, {"sha": "4e436ca7c03f562e7f0fed15792867c913a99a45", "filename": "src/test/ui/closure_context/issue-42065.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure_context%2Fissue-42065.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -16,6 +16,10 @@ note: this value implements `FnOnce`, which causes it to be moved when called\n    |\n LL |     debug_dump_dict();\n    |     ^^^^^^^^^^^^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     debug_dump_dict.clone()();\n+   |                    ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "080f6c39449f040993ae98e851ad7fc8e5fbaeea", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -15,6 +15,10 @@ note: this function takes ownership of the receiver `self`, which moves `some_ve\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     some_vec.clone().into_iter();\n+   |             ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f030228f71ae493ff87f9f28bb9a3853f0b1e335", "filename": "src/test/ui/drop/repeat-drop-2.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Frepeat-drop-2.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     let _bar = foo;\n    |                --- value moved here\n LL |     let _baz = [foo; 0];\n    |                 ^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _bar = foo.clone();\n+   |                   ++++++++\n \n error[E0493]: destructor of `String` cannot be evaluated at compile-time\n   --> $DIR/repeat-drop-2.rs:7:25"}, {"sha": "92ee5cf22b719a7fa8a5e573fbbf073443be0f7e", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -9,6 +9,11 @@ LL |         0 if { drop(s); false } => String::from(\"oops\"),\n ...\n LL |             s\n    |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         0 if { drop(s.clone()); false } => String::from(\"oops\"),\n+   |                      ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "f2971df5db27594cdd277d9eeccfe98c918cd84a", "filename": "src/test/ui/issues/issue-42796.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-42796.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -10,6 +10,10 @@ LL |     println!(\"{}\", s);\n    |                    ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut s_copy = s.clone();\n+   |                       ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0f6f30531b332639cb44161480a218fd697f55a6", "filename": "src/test/ui/issues/issue-61108.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-61108.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -14,6 +14,10 @@ note: this function takes ownership of the receiver `self`, which moves `bad_let\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     for l in bad_letters.clone() {\n+   |                         ++++++++\n help: consider iterating over a slice of the `Vec<char>`'s content to avoid moving into the `for` loop\n    |\n LL |     for l in &bad_letters {"}, {"sha": "5c04cefa5304ba076e1aabc86bcb5d5f30d3cb35", "filename": "src/test/ui/issues/issue-64559.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64559.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -15,6 +15,10 @@ note: this function takes ownership of the receiver `self`, which moves `orig`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     for _val in orig.clone() {}\n+   |                     ++++++++\n help: consider iterating over a slice of the `Vec<bool>`'s content to avoid moving into the `for` loop\n    |\n LL |     for _val in &orig {}"}, {"sha": "bd45aa53458855dfe67ae974489c32528dcfdf05", "filename": "src/test/ui/liveness/liveness-move-call-arg.stderr", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-call-arg.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -3,9 +3,23 @@ error[E0382]: use of moved value: `x`\n    |\n LL |     let x: Box<isize> = Box::new(25);\n    |         - move occurs because `x` has type `Box<isize>`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         take(x);\n    |              ^ value moved here, in previous iteration of loop\n+   |\n+note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/liveness-move-call-arg.rs:1:13\n+   |\n+LL | fn take(_x: Box<isize>) {}\n+   |    ----     ^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         take(x.clone());\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a060914f17859539736a35de38fd893a9074b419", "filename": "src/test/ui/liveness/liveness-move-in-loop.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-loop.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -4,8 +4,22 @@ error[E0382]: use of moved value: `y`\n LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n+LL |         println!(\"{}\", y);\n+LL |         loop {\n+   |         ---- inside of this loop\n+LL |             loop {\n+   |             ---- inside of this loop\n+LL |                 loop {\n+   |                 ---- inside of this loop\n LL |                     x = y;\n    |                         ^ value moved here, in previous iteration of loop\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |                     x = y.clone();\n+   |                          ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4dff7447dd7661cad7ed453b177107669294ef77", "filename": "src/test/ui/liveness/liveness-move-in-while.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-move-in-while.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -24,12 +24,22 @@ error[E0382]: borrow of moved value: `y`\n LL |     let y: Box<isize> = 42.into();\n    |         - move occurs because `y` has type `Box<isize>`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         println!(\"{}\", y);\n    |                        ^ value borrowed here after move\n LL |         while true { while true { while true { x = y; x.clone(); } } }\n-   |                                                    - value moved here, in previous iteration of loop\n+   |         ----------   ----------   ----------       - value moved here, in previous iteration of loop\n+   |         |            |            |\n+   |         |            |            inside of this loop\n+   |         |            inside of this loop\n+   |         inside of this loop\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         while true { while true { while true { x = y.clone(); x.clone(); } } }\n+   |                                                     ++++++++\n \n error: aborting due to previous error; 3 warnings emitted\n "}, {"sha": "3accba197a13deee42616521336538cd42ee99e3", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -10,6 +10,10 @@ LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let y = x.clone();\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "c407827d320509751a60f4a13652928e33c9fdc0", "filename": "src/test/ui/liveness/liveness-use-after-send.stderr", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-send.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,7 +8,16 @@ LL |     send(ch, message);\n LL |     println!(\"{}\", message);\n    |                    ^^^^^^^ value borrowed here after move\n    |\n+note: consider changing this parameter type in `send` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/liveness-use-after-send.rs:3:54\n+   |\n+LL | fn send<T:Send + std::fmt::Debug>(ch: Chan<T>, data: T) {\n+   |    ---- in this function                             ^ this type parameter takes ownership of the value\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     send(ch, message.clone());\n+   |                     ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "11fcb1cc263819f73ba5e439ac76a7ae419c7e8e", "filename": "src/test/ui/moves/borrow-closures-instead-of-move.stderr", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fborrow-closures-instead-of-move.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -4,9 +4,17 @@ error[E0382]: use of moved value: `f`\n LL | fn takes_fn(f: impl Fn()) {\n    |             - move occurs because `f` has type `impl Fn()`, which does not implement the `Copy` trait\n LL |     loop {\n+   |     ---- inside of this loop\n LL |         takes_fnonce(f);\n    |                      ^ value moved here, in previous iteration of loop\n    |\n+note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrow-closures-instead-of-move.rs:34:20\n+   |\n+LL | fn takes_fnonce(_: impl FnOnce()) {}\n+   |    ------------    ^^^^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n help: consider borrowing `f`\n    |\n LL |         takes_fnonce(&f);\n@@ -24,6 +32,13 @@ LL |         takes_fnonce(m);\n LL |     takes_fnonce(m);\n    |                  ^ value used here after move\n    |\n+note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrow-closures-instead-of-move.rs:34:20\n+   |\n+LL | fn takes_fnonce(_: impl FnOnce()) {}\n+   |    ------------    ^^^^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n help: consider mutably borrowing `m`\n    |\n LL |         takes_fnonce(&mut m);\n@@ -43,6 +58,13 @@ note: closure cannot be moved more than once as it is not `Copy` due to moving t\n    |\n LL |         x += 1;\n    |         ^\n+note: consider changing this parameter type in `takes_fnonce` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrow-closures-instead-of-move.rs:34:20\n+   |\n+LL | fn takes_fnonce(_: impl FnOnce()) {}\n+   |    ------------    ^^^^^^^^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n help: consider mutably borrowing `closure`\n    |\n LL |     takes_fnonce(&mut closure);"}, {"sha": "94bc9e6f4546535fac1925442960e7a171e80429", "filename": "src/test/ui/moves/issue-46099-move-in-macro.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-46099-move-in-macro.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -5,6 +5,11 @@ LL |     let b = Box::new(true);\n    |         - move occurs because `b` has type `Box<bool>`, which does not implement the `Copy` trait\n LL |     test!({b});\n    |            ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     test!({b.clone()});\n+   |             ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "56c225bab8cbca0c2858e522c4adab734db99e3c", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.rs?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -25,7 +25,7 @@ fn moved_here_1() {\n fn moved_here_2() {\n     let value = NonCopy{};\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used = value;\n         //~^ NOTE value moved here\n         loop {\n@@ -38,7 +38,7 @@ fn moved_here_2() {\n fn moved_loop_1() {\n     let value = NonCopy{};\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used = value; //~ ERROR use of moved value: `value`\n         //~^ NOTE value moved here, in previous iteration of loop\n     }\n@@ -49,7 +49,7 @@ fn moved_loop_2() {\n     //~^ NOTE move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n     let _used = value;\n     value = NonCopy{};\n-    loop {\n+    loop { //~ NOTE inside of this loop\n         let _used2 = value; //~ ERROR use of moved value: `value`\n         //~^ NOTE value moved here, in previous iteration of loop\n     }"}, {"sha": "7e119fe8cda64f2d49c562e2589c71f704dd5ef1", "filename": "src/test/ui/moves/issue-72649-uninit-in-loop.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fissue-72649-uninit-in-loop.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -15,7 +15,9 @@ error[E0382]: use of moved value: `value`\n    |\n LL |     let value = NonCopy{};\n    |         ----- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used = value;\n    |                     ----- value moved here\n ...\n@@ -27,7 +29,9 @@ error[E0382]: use of moved value: `value`\n    |\n LL |     let value = NonCopy{};\n    |         ----- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n-...\n+LL |\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used = value;\n    |                     ^^^^^ value moved here, in previous iteration of loop\n \n@@ -37,6 +41,8 @@ error[E0382]: use of moved value: `value`\n LL |     let mut value = NonCopy{};\n    |         --------- move occurs because `value` has type `NonCopy`, which does not implement the `Copy` trait\n ...\n+LL |     loop {\n+   |     ---- inside of this loop\n LL |         let _used2 = value;\n    |                      ^^^^^ value moved here, in previous iteration of loop\n "}, {"sha": "b331b10a3b79e48b0aa94fe74cc3ba0c72d2508e", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -96,6 +96,10 @@ note: this function takes ownership of the receiver `self`, which moves `rc_foo`\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n    |                    ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     rc_foo.clone().use_rc_self();\n+   |           ++++++++\n \n error[E0382]: use of moved value: `foo_add`\n   --> $DIR/move-fn-self-receiver.rs:59:5\n@@ -123,6 +127,10 @@ LL |     for _val in implicit_into_iter {}\n LL |     implicit_into_iter;\n    |     ^^^^^^^^^^^^^^^^^^ value used here after move\n    |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     for _val in implicit_into_iter.clone() {}\n+   |                                   ++++++++\n help: consider iterating over a slice of the `Vec<bool>`'s content to avoid moving into the `for` loop\n    |\n LL |     for _val in &implicit_into_iter {}\n@@ -137,6 +145,11 @@ LL |     for _val in explicit_into_iter.into_iter() {}\n    |                                    ----------- `explicit_into_iter` moved due to this method call\n LL |     explicit_into_iter;\n    |     ^^^^^^^^^^^^^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     for _val in explicit_into_iter.clone().into_iter() {}\n+   |                                   ++++++++\n \n error[E0382]: use of moved value: `container`\n   --> $DIR/move-fn-self-receiver.rs:71:5\n@@ -160,6 +173,7 @@ error[E0382]: use of moved value: `foo2`\n LL |     let foo2 = Foo;\n    |         ---- move occurs because `foo2` has type `Foo`, which does not implement the `Copy` trait\n LL |     loop {\n+   |     ---- inside of this loop\n LL |         foo2.use_self();\n    |         ^^^^ ---------- `foo2` moved due to this method call, in previous iteration of loop\n "}, {"sha": "04a41b9ce26231afba0f263bd5967daae7ad5dc6", "filename": "src/test/ui/moves/move-guard-same-consts.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-guard-same-consts.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,18 @@ LL |         (1, 2) if take(x) => (),\n    |                        - value moved here\n LL |         (1, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/move-guard-same-consts.rs:25:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (1, 2) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d435426f2ec97b27f9e7d4c86e4e0d8c1a317ed4", "filename": "src/test/ui/moves/move-in-guard-1.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-1.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,18 @@ LL |         (1, _) if take(x) => (),\n    |                        - value moved here\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/move-in-guard-1.rs:15:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (1, _) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0f4895c2ac132c94cb07d6be61885bae1b993a99", "filename": "src/test/ui/moves/move-in-guard-2.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-in-guard-2.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -6,6 +6,18 @@ LL |     let x: Box<_> = Box::new(1);\n ...\n LL |         (_, 2) if take(x) => (),\n    |                        ^ value used here after move\n+   |\n+note: consider changing this parameter type in `take` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/move-in-guard-2.rs:13:15\n+   |\n+LL | fn take<T>(_: T) -> bool { false }\n+   |    ----       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         (_, 2) if take(x.clone()) => (),\n+   |                         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a49ee31b46622c8570e21cd0969b656e176437d3", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -13,6 +13,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     consume(x.clone().into_iter().next().unwrap());\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "db4382b58fcb21c07c6d084227b86687a4d95566", "filename": "src/test/ui/moves/moves-based-on-type-cyclic-types-issue-4821.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-cyclic-types-issue-4821.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,7 +8,7 @@ LL |     consume(node) + r\n    |             ^^^^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `Box<List>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `node.next.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref right) => consume(right),\n    |              +++"}, {"sha": "0930df148059dae9dd5329c268b575d15dfc264e", "filename": "src/test/ui/moves/moves-based-on-type-distribute-copy-over-paren.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-distribute-copy-over-paren.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -9,6 +9,11 @@ LL |     let _y = Foo { f:x };\n LL |\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:x.clone() };\n+   |                       ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-distribute-copy-over-paren.rs:21:11\n@@ -21,6 +26,11 @@ LL |     let _y = Foo { f:(((x))) };\n LL |\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:(((x))).clone() };\n+   |                             ++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "78138d214f9a45acba59eb7bdcfd728b4d7672f1", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     let _y = Foo { f:x };\n    |                      - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = Foo { f:x.clone() };\n+   |                       ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:18:11\n@@ -17,6 +22,11 @@ LL |     let _y = (x, 3);\n    |               - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = (x.clone(), 3);\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:35:11\n@@ -29,6 +39,11 @@ LL |         x\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         x.clone()\n+   |          ++++++++\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:36:11\n@@ -41,6 +56,11 @@ LL |         y\n ...\n LL |     touch(&y);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         y.clone()\n+   |          ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:46:11\n@@ -53,6 +73,11 @@ LL |         true => x,\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         true => x.clone(),\n+   |                  ++++++++\n \n error[E0382]: borrow of moved value: `y`\n   --> $DIR/moves-based-on-type-exprs.rs:47:11\n@@ -65,6 +90,11 @@ LL |         false => y\n ...\n LL |     touch(&y);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false => y.clone()\n+   |                   ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:58:11\n@@ -77,6 +107,18 @@ LL |         _ if guard(x) => 10,\n ...\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in `guard` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/moves-based-on-type-exprs.rs:6:14\n+   |\n+LL | fn guard(_s: String) -> bool {panic!()}\n+   |    -----     ^^^^^^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         _ if guard(x.clone()) => 10,\n+   |                     ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:65:11\n@@ -87,6 +129,11 @@ LL |     let _y = [x];\n    |               - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = [x.clone()];\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:71:11\n@@ -97,6 +144,11 @@ LL |     let _y = vec![x];\n    |                   - value moved here\n LL |     touch(&x);\n    |           ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = vec![x.clone()];\n+   |                    ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:77:11\n@@ -113,6 +165,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = x.clone().into_iter().next().unwrap();\n+   |               ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n@@ -129,6 +185,10 @@ note: this function takes ownership of the receiver `self`, which moves `x`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n+   |                ++++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "225935532ead73c39f577a429bc7d3062362d74a", "filename": "src/test/ui/moves/moves-based-on-type-match-bindings.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-match-bindings.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,10 @@ LL |     touch(&x);\n    |           ^^ value borrowed here after partial move\n    |\n    = note: partial move occurs because `x.f` has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Foo {ref f} => {}\n+   |              +++\n \n error: aborting due to previous error\n "}, {"sha": "0bcce30126306a421268bb2d87803c64d42f468b", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,11 @@ LL |     Box::new((x, x))\n    |               -  ^ value used here after move\n    |               |\n    |               value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     Box::new((x.clone(), x))\n+   |                ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "22e7951dbe3670d8229fd6cf6e8a655ac54dd452", "filename": "src/test/ui/moves/use_of_moved_value_clone_suggestions.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_clone_suggestions.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     (t, t)\n    |      -  ^ value used here after move\n    |      |\n    |      value moved here\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     (t.clone(), t)\n+   |       ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "0a09353b8ec0a52f941f11331dd54b180b04e1e7", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -67,6 +67,11 @@ LL |     || x.len();\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = x.clone();\n+   |              ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:40:5\n@@ -79,6 +84,11 @@ LL |     || x = String::new();\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = x.clone();\n+   |              ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:45:5"}, {"sha": "97ed414b1eceb8ced620331d99e3d08b24314486", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -37,6 +37,11 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         move occurs because `t` has type `(u32, Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut t: T = (0, Box::new(0)); drop(t.clone());\n+   |                                            ++++++++\n \n error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:123:5\n@@ -77,6 +82,11 @@ LL |     let mut t: T = (0, Box::new(0)); drop(t);\n    |         move occurs because `t` has type `(u32, Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut t: T = (0, Box::new(0)); drop(t.clone());\n+   |                                            ++++++++\n \n error[E0381]: partially assigned binding `s` isn't fully initialized\n   --> $DIR/issue-21232-partial-init-and-use.rs:149:5\n@@ -208,6 +218,11 @@ LL |         c2 => {\n    |         -- value moved here\n LL |             c.0 = 2;\n    |             ^^^^^^^ value partially assigned here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:255:13\n@@ -219,6 +234,11 @@ LL |         c2 => {\n    |         -- value moved here\n LL |             (c.1).0 = 2;\n    |             ^^^^^^^^^^^ value partially assigned here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error[E0382]: assign to part of moved value: `c.1`\n   --> $DIR/issue-21232-partial-init-and-use.rs:263:13\n@@ -229,6 +249,10 @@ LL |             ((c.1).1).0 = 3;\n    |             ^^^^^^^^^^^^^^^ value partially assigned here after move\n    |\n    = note: move occurs because `c.1` has type `(i32, (i32, String))`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref c2 => {\n+   |         +++\n \n error: aborting due to 23 previous errors\n "}, {"sha": "072e96788b17ebe16a8ab4e8d3c57a70baf0c627", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     let r = range;\n    |             ----- value moved here\n LL |     let x = range.start;\n    |             ^^^^^^^^^^^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let r = range.clone();\n+   |                  ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "d8f58b591311d8a90beef915b84796c471bcf427", "filename": "src/test/ui/nll/issue-53807.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-53807.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -5,7 +5,7 @@ LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n    = note: move occurs because value has type `Vec<bool>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `maybe.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         if let Some(ref thing) = maybe {\n    |                     +++"}, {"sha": "f72ed3af71823de592dba52b3fe33f787507c125", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -26,6 +26,11 @@ LL |         false if { drop(x); true } => 1,\n LL |         true => {\n LL |             x;\n    |             ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         false if { drop(x.clone()); true } => 1,\n+   |                          ++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b1f5117cb0243abc1781cc2f9632399f9ad01b4a", "filename": "src/test/ui/nll/ref-suggestion.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fref-suggestion.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,11 @@ LL |     let y = x;\n    |             - value moved here\n LL |     x;\n    |     ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let y = x.clone();\n+   |              ++++++++\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/ref-suggestion.rs:8:5\n@@ -17,6 +22,11 @@ LL |     let mut y = x;\n    |                 - value moved here\n LL |     x;\n    |     ^ value used here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let mut y = x.clone();\n+   |                  ++++++++\n \n error[E0382]: use of partially moved value: `x`\n   --> $DIR/ref-suggestion.rs:16:5\n@@ -28,7 +38,7 @@ LL |     x;\n    |     ^ value used here after partial move\n    |\n    = note: partial move occurs because value has type `Vec<i32>`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         (Some(ref y), ()) => {},\n    |               +++"}, {"sha": "e79e4e7dfa336a77ffa250fed5d440f8ae5f6992", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -45,7 +45,7 @@ LL |         Some(ref _y @ _z) => {}\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref _y @ ref _z) => {}\n    |                       +++\n@@ -59,7 +59,7 @@ LL |         Some(ref mut _y @ _z) => {}\n    |              value borrowed here after move\n    |\n    = note: move occurs because value has type `X`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving `x.0`\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         Some(ref mut _y @ ref _z) => {}\n    |                           +++"}, {"sha": "077583dd2527c42021c227d111af9758a0d4f873", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -6,6 +6,11 @@ LL |     let a @ b = U;\n    |         |   |\n    |         |   value moved here\n    |         value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ ref b = U;\n+   |             +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:13:9\n@@ -16,6 +21,10 @@ LL |     let a @ (b, c) = (U, U);\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (b, ref c) = (U, U);\n+   |                 +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:15:9\n@@ -26,6 +35,10 @@ LL |     let a @ (b, c) = (u(), u());\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (b, ref c) = (u(), u());\n+   |                 +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:18:16\n@@ -36,6 +49,11 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         -      ^ value used here after move\n    |         |\n    |         value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Ok(b) | a @ Err(b) => {}\n+   |         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:18:29\n@@ -46,6 +64,11 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     -       ^ value used here after move\n    |                     |\n    |                     value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Ok(b) | ref a @ Err(b) => {}\n+   |                     +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:25:9\n@@ -56,6 +79,10 @@ LL |         xs @ [a, .., b] => {}\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         xs @ [a, .., ref b] => {}\n+   |                      +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:29:9\n@@ -66,6 +93,10 @@ LL |         xs @ [_, ys @ .., _] => {}\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         xs @ [_, ref ys @ .., _] => {}\n+   |                  +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:22:12"}, {"sha": "f27df32ccfa5ce2afbe63b73b2f62255371b7228", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -79,6 +79,10 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         value borrowed here after move\n    |\n    = note: move occurs because value has type `NC`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ box ref b = Box::new(NC);\n+   |                     +++\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:38:9"}, {"sha": "a41ebf1931f94094001d16677626c94abcdd8668", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -267,6 +267,10 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n+   |                                 +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n@@ -277,6 +281,10 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n+   |                                 +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n@@ -285,6 +293,11 @@ LL |     match Some((U, U)) {\n    |           ------------ move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         - value moved here           ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:30\n@@ -305,6 +318,11 @@ LL |         a @ Some(ref b) => {}\n    |         -        ^^^^^ value borrowed here after move\n    |         |\n    |         value moved here\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n@@ -313,6 +331,11 @@ LL |     match Some((u(), u())) {\n    |           ---------------- move occurs because value has type `Option<(U, U)>`, which does not implement the `Copy` trait\n LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         - value moved here           ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:30"}, {"sha": "770bb89530ccaa60c2a1b63605854ca5f76e29f9", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -242,6 +242,10 @@ LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ [b, ref mut c] = [U, U];\n+   |                         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n@@ -251,6 +255,11 @@ LL |     let ref a @ b = u();\n    |         |       |\n    |         |       value moved here\n    |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = u();\n+   |                 +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n@@ -261,6 +270,10 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref b @ ref mut c, ref d @ e) = (u(), u());\n+   |                          +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n@@ -271,6 +284,10 @@ LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref b @ mut c, ref d @ ref e) = (u(), u());\n+   |                                         +++\n \n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n@@ -281,6 +298,10 @@ LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         value borrowed here after partial move\n    |\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ [b, ref mut c] = [u(), u()];\n+   |                         +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n@@ -291,7 +312,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         ref a @ Some((ref b @ ref mut c, ref d @ e)) => {}\n    |                               +++\n@@ -305,7 +326,7 @@ LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      value borrowed here after move\n    |\n    = note: move occurs because value has type `U`, which does not implement the `Copy` trait\n-help: borrow this field in the pattern to avoid moving the value\n+help: borrow this binding in the pattern to avoid moving the value\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ ref e)) => {}\n    |                                              +++"}, {"sha": "4ea3dfefb77a3321b2d7229584ad8ef8e537d3b2", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,10 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    |         value used here after partial move\n    |\n    = note: partial move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ NC(b, ref c @ NC(d, e)) = NC(C, NC(C, C));\n+   |                   +++\n \n error: aborting due to previous error\n "}, {"sha": "43e4b6990d2a29df07631c37e422d2282512e07b", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -52,6 +52,11 @@ LL |     let ref mut a @ b = NotCopy;\n    |         |           |\n    |         |           value moved here\n    |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref mut a @ ref b = NotCopy;\n+   |                     +++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "bb7b818368b78dca3969c32b35f92d5c45371b04", "filename": "src/test/ui/pattern/move-ref-patterns/borrowck-move-ref-pattern.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fmove-ref-patterns%2Fborrowck-move-ref-pattern.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -129,6 +129,10 @@ LL |     drop(tup.1);\n    |          ^^^^^ value used here after move\n    |\n    = note: move occurs because `tup.1` has type `U`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let (ref _x0, ref _x1, ref _x2, ..) = tup;\n+   |                   +++\n \n error[E0382]: borrow of moved value: `tup.1`\n   --> $DIR/borrowck-move-ref-pattern.rs:29:20"}, {"sha": "06699b947be40f2bb66426cfde35e04c8de7d81e", "filename": "src/test/ui/rfc-2361-dbg-macro/dbg-macro-move-semantics.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-move-semantics.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -7,6 +7,12 @@ LL |     let _ = dbg!(a);\n    |             ------- value moved here\n LL |     let _ = dbg!(a);\n    |                  ^ value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+  --> $SRC_DIR/std/src/macros.rs:LL:COL\n+   |\n+LL |             ref tmp => {\n+   |             +++\n \n error: aborting due to previous error\n "}, {"sha": "7cd411dde6c2165651d7b85f4ebdfb68fcc53e30", "filename": "src/test/ui/suggestions/borrow-for-loop-head.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fborrow-for-loop-head.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -12,6 +12,7 @@ error[E0382]: use of moved value: `a`\n LL |     let a = vec![1, 2, 3];\n    |         - move occurs because `a` has type `Vec<i32>`, which does not implement the `Copy` trait\n LL |     for i in &a {\n+   |     ----------- inside of this loop\n LL |         for j in a {\n    |                  ^ `a` moved due to this implicit call to `.into_iter()`, in previous iteration of loop\n    |\n@@ -20,6 +21,10 @@ note: this function takes ownership of the receiver `self`, which moves `a`\n    |\n LL |     fn into_iter(self) -> Self::IntoIter;\n    |                  ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         for j in a.clone() {\n+   |                   ++++++++\n help: consider iterating over a slice of the `Vec<i32>`'s content to avoid moving into the `for` loop\n    |\n LL |         for j in &a {"}, {"sha": "f738b03eed6b8441cba5d88252b8dd6ddb39a1cb", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -23,6 +23,10 @@ LL |         println!(\"{}\", x);\n    |                        ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |             ::std::mem::drop(x.clone());\n+   |                               ++++++++\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}, {"sha": "3175d2942d5a7ff5cc15929be5979e1a0ba7b1db", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-call-twice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-call-twice.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -16,6 +16,10 @@ note: this value implements `FnOnce`, which causes it to be moved when called\n    |\n LL |     tick();\n    |     ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     tick.clone()();\n+   |         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ffeafb10fda2c988643c04cf843ac2b013df3b34", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnonce-move-call-twice.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnonce-move-call-twice.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -16,6 +16,10 @@ note: this value implements `FnOnce`, which causes it to be moved when called\n    |\n LL |     tick();\n    |     ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     tick.clone()();\n+   |         ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "91f2eaad944eb539d058eb2835b9f4b8318c1d37", "filename": "src/test/ui/union/union-move.mirunsafeck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.mirunsafeck.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,14 @@ LL |         move_out(x.f1_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/union-move.rs:45:18\n@@ -19,6 +27,14 @@ LL |         move_out(x.f2_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n   --> $DIR/union-move.rs:52:18"}, {"sha": "91f2eaad944eb539d058eb2835b9f4b8318c1d37", "filename": "src/test/ui/union/union-move.thirunsafeck.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-move.thirunsafeck.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -8,6 +8,14 @@ LL |         move_out(x.f1_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f2_nocopy);\n    |                  ^^^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/union-move.rs:45:18\n@@ -19,6 +27,14 @@ LL |         move_out(x.f2_nocopy);\n    |                  ----------- value moved here\n LL |         move_out(x.f3_copy);\n    |                  ^^^^^^^^^ value used here after move\n+   |\n+note: consider changing this parameter type in `move_out` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/union-move.rs:10:19\n+   |\n+LL | fn move_out<T>(x: T) {}\n+   |    --------       ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0509]: cannot move out of type `U2`, which implements the `Drop` trait\n   --> $DIR/union-move.rs:52:18"}, {"sha": "d52a92b8888e8dde0ec433d54af6072b6b5be0cd", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -14,6 +14,10 @@ note: calling this operator moves the left-hand side\n    |\n LL |     fn not(self) -> Self::Output;\n    |            ^^^^\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     !x.clone();\n+   |       ++++++++\n help: consider further restricting this bound\n    |\n LL | fn move_then_borrow<T: Not<Output=T> + Clone + Copy>(x: T) {"}, {"sha": "e6964a1984238da71c450b2922b64131a4e331d5", "filename": "src/test/ui/unsized-locals/borrow-after-move.stderr", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fborrow-after-move.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -28,6 +28,14 @@ LL |         drop_unsized(y);\n ...\n LL |         println!(\"{}\", &y);\n    |                        ^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in `drop_unsized` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/borrow-after-move.rs:14:31\n+   |\n+LL | fn drop_unsized<T: ?Sized>(_: T) {}\n+   |    ------------               ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/borrow-after-move.rs:31:24\n@@ -66,6 +74,11 @@ LL |         x.foo();\n    |         - value moved here\n LL |         println!(\"{}\", &x);\n    |                        ^^ value borrowed here after move\n+   |\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |         x.clone().foo();\n+   |          ++++++++\n \n error: aborting due to 5 previous errors; 1 warning emitted\n "}, {"sha": "7d7586b0a0bc0bb53553b371a6f5d68e068e4c30", "filename": "src/test/ui/unsized-locals/double-move.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fdouble-move.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -16,6 +16,14 @@ LL |         drop_unsized(y);\n    |                      - value moved here\n LL |         drop_unsized(y);\n    |                      ^ value used here after move\n+   |\n+note: consider changing this parameter type in `drop_unsized` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/double-move.rs:14:31\n+   |\n+LL | fn drop_unsized<T: ?Sized>(_: T) {}\n+   |    ------------               ^ this type parameter takes ownership of the value\n+   |    |\n+   |    in this function\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/double-move.rs:27:22"}, {"sha": "7b4d2454994d7175a2cf6f70afc69bfcf458d04b", "filename": "src/test/ui/use/use-after-move-based-on-type.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-based-on-type.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -9,6 +9,10 @@ LL |     println!(\"{}\", x);\n    |                    ^ value borrowed here after move\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider cloning the value if the performance cost is acceptable\n+   |\n+LL |     let _y = x.clone();\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a671434a30394506b8e6542f477669ab805da214", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e72e35ceb2af024e8ca6a74442269f7ec739173/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=9e72e35ceb2af024e8ca6a74442269f7ec739173", "patch": "@@ -9,6 +9,14 @@ LL |     l.push(n);\n LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n+   |\n+note: consider changing this parameter type in `push` to borrow instead if ownering the value isn't necessary\n+  --> $DIR/use-after-move-implicity-coerced-object.rs:17:27\n+   |\n+LL |     fn push(&mut self, n: Box<dyn ToString + 'static>) {\n+   |        ----               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ this type parameter takes ownership of the value\n+   |        |\n+   |        in this method\n \n error: aborting due to previous error\n "}]}