{"sha": "a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmZhOTZkMTg3MWVlNzFjYzM4MmEyNzZhM2U1MmY2ZjZlNTZlMDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-23T23:28:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-23T23:28:20Z"}, "message": "Auto merge of #35951 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #35910, #35912, #35913, #35936, #35939, #35949\n- Failed merges: #35395", "tree": {"sha": "630701937e85c1b47be629e24cf7f8fe41f5c140", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630701937e85c1b47be629e24cf7f8fe41f5c140"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "html_url": "https://github.com/rust-lang/rust/commit/a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "012f45eaf70ca7f5d86e15fb304328786b446da9", "url": "https://api.github.com/repos/rust-lang/rust/commits/012f45eaf70ca7f5d86e15fb304328786b446da9", "html_url": "https://github.com/rust-lang/rust/commit/012f45eaf70ca7f5d86e15fb304328786b446da9"}, {"sha": "16d459f292e5bbffa02f82986a782833f15a6116", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d459f292e5bbffa02f82986a782833f15a6116", "html_url": "https://github.com/rust-lang/rust/commit/16d459f292e5bbffa02f82986a782833f15a6116"}], "stats": {"total": 82, "additions": 64, "deletions": 18}, "files": [{"sha": "78fe07ec1be165acc58a0e5d3fd0afb999d6b6b1", "filename": "src/doc/book/macros.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Fdoc%2Fbook%2Fmacros.md", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Fdoc%2Fbook%2Fmacros.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fmacros.md?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -662,7 +662,7 @@ Here are some common macros you\u2019ll see in Rust code.\n This macro causes the current thread to panic. You can give it a message\n to panic with:\n \n-```rust,no_run\n+```rust,should_panic\n panic!(\"oh no!\");\n ```\n \n@@ -688,7 +688,7 @@ These two macros are used in tests. `assert!` takes a boolean. `assert_eq!`\n takes two values and checks them for equality. `true` passes, `false` `panic!`s.\n Like this:\n \n-```rust,no_run\n+```rust,should_panic\n // A-ok!\n \n assert!(true);"}, {"sha": "a0dd38c983b89fd826d1f9585d36eb35fcb2f0f0", "filename": "src/libcore/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdefault.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -38,7 +38,6 @@ use marker::Sized;\n ///     bar: f32,\n /// }\n ///\n-///\n /// fn main() {\n ///     let options: SomeOptions = Default::default();\n /// }"}, {"sha": "c9124249bf5030d150e1542729ccb0a0c97503a9", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -421,25 +421,68 @@ mul_impl! { usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n ///\n /// # Examples\n ///\n-/// A trivial implementation of `Div`. When `Foo / Foo` happens, it ends up\n-/// calling `div`, and therefore, `main` prints `Dividing!`.\n+/// Implementing a `Div`idable rational number struct:\n ///\n /// ```\n /// use std::ops::Div;\n ///\n-/// struct Foo;\n+/// // The uniqueness of rational numbers in lowest terms is a consequence of\n+/// // the fundamental theorem of arithmetic.\n+/// #[derive(Eq)]\n+/// #[derive(PartialEq, Debug)]\n+/// struct Rational {\n+///     nominator: usize,\n+///     denominator: usize,\n+/// }\n ///\n-/// impl Div for Foo {\n-///     type Output = Foo;\n+/// impl Rational {\n+///     fn new(nominator: usize, denominator: usize) -> Self {\n+///         if denominator == 0 {\n+///             panic!(\"Zero is an invalid denominator!\");\n+///         }\n ///\n-///     fn div(self, _rhs: Foo) -> Foo {\n-///         println!(\"Dividing!\");\n-///         self\n+///         // Reduce to lowest terms by dividing by the greatest common\n+///         // divisor.\n+///         let gcd = gcd(nominator, denominator);\n+///         Rational {\n+///             nominator: nominator / gcd,\n+///             denominator: denominator / gcd,\n+///         }\n+///     }\n+/// }\n+///\n+/// impl Div for Rational {\n+///     // The division of rational numbers is a closed operation.\n+///     type Output = Self;\n+///\n+///     fn div(self, rhs: Self) -> Self {\n+///         if rhs.nominator == 0 {\n+///             panic!(\"Cannot divide by zero-valued `Rational`!\");\n+///         }\n+///\n+///         let nominator = self.nominator * rhs.denominator;\n+///         let denominator = self.denominator * rhs.nominator;\n+///         Rational::new(nominator, denominator)\n+///     }\n+/// }\n+///\n+/// // Euclid's two-thousand-year-old algorithm for finding the greatest common\n+/// // divisor.\n+/// fn gcd(x: usize, y: usize) -> usize {\n+///     let mut x = x;\n+///     let mut y = y;\n+///     while y != 0 {\n+///         let t = y;\n+///         y = x % y;\n+///         x = t;\n ///     }\n+///     x\n /// }\n ///\n /// fn main() {\n-///     Foo / Foo;\n+///     assert_eq!(Rational::new(1, 2), Rational::new(2, 4));\n+///     assert_eq!(Rational::new(1, 2) / Rational::new(3, 4),\n+///                Rational::new(2, 3));\n /// }\n /// ```\n ///"}, {"sha": "5dc5880e310d038115dd234e965de44f96097200", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -388,8 +388,9 @@ pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<\n /// Reads the last code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n #[inline]\n-fn next_code_point_reverse<'a,\n-                           I: DoubleEndedIterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n+fn next_code_point_reverse<'a, I>(bytes: &mut I) -> Option<u32>\n+    where I: DoubleEndedIterator<Item = &'a u8>,\n+{\n     // Decode UTF-8\n     let w = match bytes.next_back() {\n         None => return None,"}, {"sha": "78476e814006fc6ecbfead875a005785997462b1", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -469,10 +469,11 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         // are zero. Since I don't quite know how to phrase things at\n         // the moment, give a kind of vague error message.\n         if trait_params.len() != impl_params.len() {\n-            span_err!(ccx.tcx.sess, span, E0195,\n+            struct_span_err!(ccx.tcx.sess, span, E0195,\n                 \"lifetime parameters or bounds on method `{}` do \\\n-                         not match the trait declaration\",\n-                         impl_m.name);\n+                 not match the trait declaration\",impl_m.name)\n+                .span_label(span, &format!(\"lifetimes do not match trait\"))\n+                .emit();\n             return false;\n         }\n "}, {"sha": "755bc3db4ff795865ea31b5b4f38ac920d8acacb", "filename": "src/rust-installer", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frust-installer?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -1 +1 @@\n-Subproject commit c37d3747da75c280237dc2d6b925078e69555499\n+Subproject commit 755bc3db4ff795865ea31b5b4f38ac920d8acacb"}, {"sha": "06dd903b23db83925187cd1b49838c15f8468884", "filename": "src/test/compile-fail/E0195.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2FE0195.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2FE0195.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0195.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -16,6 +16,7 @@ struct Foo;\n \n impl Trait for Foo {\n     fn bar<'a,'b>(x: &'a str, y: &'b str) { //~ ERROR E0195\n+                                            //~^ lifetimes do not match trait\n     }\n }\n "}, {"sha": "5012556dedddc3c98c3fc1e0a912243f97568a89", "filename": "src/test/compile-fail/issue-16048.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66fa96d1871ee71cc382a276a3e52f6f6e56e01/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16048.rs?ref=a66fa96d1871ee71cc382a276a3e52f6f6e56e01", "patch": "@@ -29,6 +29,7 @@ impl<'a> Test<'a> for Foo<'a> {\n impl<'a> NoLifetime for Foo<'a> {\n     fn get<'p, T : Test<'a>>(&self) -> T {\n //~^ ERROR E0195\n+//~| lifetimes do not match trait\n         return *self as T;\n     }\n }"}]}