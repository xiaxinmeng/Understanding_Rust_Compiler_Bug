{"sha": "fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "node_id": "C_kwDOAAsO6NoAKGZiZGVkMTc4ZmExYzRjZGVjMTdkMTFiM2JkZWFjNWYwZTExMTdjZWQ", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-14T12:24:27Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-04-14T12:24:27Z"}, "message": "Improve ItemTree pretty print output", "tree": {"sha": "f7d2f369e65a3c7260efd39686f35318b387969e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7d2f369e65a3c7260efd39686f35318b387969e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "html_url": "https://github.com/rust-lang/rust/commit/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cee507d28f52cf79d9fc93e08b6702789145806", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cee507d28f52cf79d9fc93e08b6702789145806", "html_url": "https://github.com/rust-lang/rust/commit/4cee507d28f52cf79d9fc93e08b6702789145806"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "f12d9a1273cc16bba0c6e67c3e0cbcbbeafb4bd9", "filename": "crates/hir_def/src/item_tree/pretty.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Fpretty.rs?ref=fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "patch": "@@ -90,11 +90,10 @@ impl<'a> Printer<'a> {\n         for attr in &**attrs {\n             wln!(\n                 self,\n-                \"#{}[{}{}]  // {:?}\",\n+                \"#{}[{}{}]\",\n                 inner,\n                 attr.path,\n                 attr.input.as_ref().map(|it| it.to_string()).unwrap_or_default(),\n-                attr.id,\n             );\n         }\n     }\n@@ -242,10 +241,19 @@ impl<'a> Printer<'a> {\n                     ast_id: _,\n                     flags,\n                 } = &self.tree[it];\n-                if flags.bits != 0 {\n-                    wln!(self, \"// flags = 0x{:X}\", flags.bits);\n-                }\n                 self.print_visibility(*visibility);\n+                if flags.contains(FnFlags::HAS_DEFAULT_KW) {\n+                    w!(self, \"default \");\n+                }\n+                if flags.contains(FnFlags::HAS_CONST_KW) {\n+                    w!(self, \"const \");\n+                }\n+                if flags.contains(FnFlags::HAS_ASYNC_KW) {\n+                    w!(self, \"async \");\n+                }\n+                if flags.contains(FnFlags::HAS_UNSAFE_KW) {\n+                    w!(self, \"unsafe \");\n+                }\n                 if let Some(abi) = abi {\n                     w!(self, \"extern \\\"{}\\\" \", abi);\n                 }\n@@ -254,7 +262,7 @@ impl<'a> Printer<'a> {\n                 w!(self, \"(\");\n                 if !params.is_empty() {\n                     self.indented(|this| {\n-                        for param in params.clone() {\n+                        for (i, param) in params.clone().enumerate() {\n                             this.print_attrs_of(param);\n                             match &this.tree[param] {\n                                 Param::Normal(name, ty) => {\n@@ -263,7 +271,12 @@ impl<'a> Printer<'a> {\n                                         None => w!(this, \"_: \"),\n                                     }\n                                     this.print_type_ref(ty);\n-                                    wln!(this, \",\");\n+                                    w!(this, \",\");\n+                                    if flags.contains(FnFlags::HAS_SELF_PARAM) && i == 0 {\n+                                        wln!(this, \"  // self\");\n+                                    } else {\n+                                        wln!(this);\n+                                    }\n                                 }\n                                 Param::Varargs => {\n                                     wln!(this, \"...\");\n@@ -275,7 +288,11 @@ impl<'a> Printer<'a> {\n                 w!(self, \") -> \");\n                 self.print_type_ref(ret_type);\n                 self.print_where_clause(explicit_generic_params);\n-                wln!(self, \";\");\n+                if flags.contains(FnFlags::HAS_BODY) {\n+                    wln!(self, \" {{ ... }}\");\n+                } else {\n+                    wln!(self, \";\");\n+                }\n             }\n             ModItem::Struct(it) => {\n                 let Struct { visibility, name, fields, generic_params, ast_id: _ } = &self.tree[it];"}, {"sha": "fb3811dbd56b6cbd3894d69549c8333dfc7f0e76", "filename": "crates/hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 25, "deletions": 30, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbded178fa1c4cdec17d11b3bdeac5f0e1117ced/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=fbded178fa1c4cdec17d11b3bdeac5f0e1117ced", "patch": "@@ -30,9 +30,9 @@ use crate::{A, B};\n use a::{c, d::{e}};\n         \"#,\n         expect![[r##\"\n-            #![doc = \" file comment\"]  // AttrId { ast_index: 0 }\n-            #![no_std]  // AttrId { ast_index: 1 }\n-            #![doc = \" another file comment\"]  // AttrId { ast_index: 2 }\n+            #![doc = \" file comment\"]\n+            #![no_std]\n+            #![doc = \" another file comment\"]\n \n             pub(self) extern crate self as renamed;\n \n@@ -42,7 +42,7 @@ use a::{c, d::{e}};\n \n             pub(self) use globs::*;\n \n-            #[doc = \" docs on import\"]  // AttrId { ast_index: 0 }\n+            #[doc = \" docs on import\"]\n             pub(self) use crate::{A, B};\n \n             pub(self) use a::{c, d::{e}};\n@@ -67,15 +67,15 @@ extern \"C\" {\n }\n         \"#,\n         expect![[r##\"\n-            #[on_extern_block]  // AttrId { ast_index: 0 }\n+            #[on_extern_block]\n             extern \"C\" {\n-                #[on_extern_type]  // AttrId { ast_index: 0 }\n+                #[on_extern_type]\n                 pub(self) type ExType;\n \n-                #[on_extern_static]  // AttrId { ast_index: 0 }\n+                #[on_extern_static]\n                 pub(self) static EX_STATIC: u8 = _;\n \n-                #[on_extern_fn]  // AttrId { ast_index: 0 }\n+                #[on_extern_fn]\n                 pub(self) fn ex_fn() -> ();\n             }\n         \"##]],\n@@ -115,14 +115,14 @@ enum E {\n         expect![[r##\"\n             pub(self) struct Unit;\n \n-            #[derive(Debug)]  // AttrId { ast_index: 0 }\n+            #[derive(Debug)]\n             pub(self) struct Struct {\n-                #[doc = \" fld docs\"]  // AttrId { ast_index: 0 }\n+                #[doc = \" fld docs\"]\n                 pub(self) fld: (),\n             }\n \n             pub(self) struct Tuple(\n-                #[attr]  // AttrId { ast_index: 0 }\n+                #[attr]\n                 pub(self) 0: u8,\n             );\n \n@@ -132,14 +132,14 @@ enum E {\n             }\n \n             pub(self) enum E {\n-                #[doc = \" comment on Unit\"]  // AttrId { ast_index: 0 }\n+                #[doc = \" comment on Unit\"]\n                 Unit,\n-                #[doc = \" comment on Tuple\"]  // AttrId { ast_index: 0 }\n+                #[doc = \" comment on Tuple\"]\n                 Tuple(\n                     pub(self) 0: u8,\n                 ),\n                 Struct {\n-                    #[doc = \" comment on a: u8\"]  // AttrId { ast_index: 0 }\n+                    #[doc = \" comment on a: u8\"]\n                     pub(self) a: u8,\n                 },\n             }\n@@ -170,14 +170,13 @@ trait Tr: SuperTrait + 'lifetime {\n \n             pub(self) const _: Anon = _;\n \n-            #[attr]  // AttrId { ast_index: 0 }\n-            #[inner_attr_in_fn]  // AttrId { ast_index: 1 }\n-            // flags = 0x2\n+            #[attr]\n+            #[inner_attr_in_fn]\n             pub(self) fn f(\n-                #[attr]  // AttrId { ast_index: 0 }\n+                #[attr]\n                 arg: u8,\n                 _: (),\n-            ) -> ();\n+            ) -> () { ... }\n \n             pub(self) trait Tr<Self>\n             where\n@@ -186,9 +185,8 @@ trait Tr: SuperTrait + 'lifetime {\n             {\n                 pub(self) type Assoc: AssocBound = Default;\n \n-                // flags = 0x1\n                 pub(self) fn method(\n-                    _: &Self,\n+                    _: &Self,  // self\n                 ) -> ();\n             }\n         \"##]],\n@@ -211,13 +209,12 @@ mod inline {\n mod outline;\n         \"#,\n         expect![[r##\"\n-            #[doc = \" outer\"]  // AttrId { ast_index: 0 }\n-            #[doc = \" inner\"]  // AttrId { ast_index: 1 }\n+            #[doc = \" outer\"]\n+            #[doc = \" inner\"]\n             pub(self) mod inline {\n                 pub(self) use super::*;\n \n-                // flags = 0x2\n-                pub(self) fn fn_in_module() -> ();\n+                pub(self) fn fn_in_module() -> () { ... }\n             }\n \n             pub(self) mod outline;\n@@ -338,12 +335,11 @@ trait Tr<'a, T: 'a>: Super where Self: for<'a> Tr<'a, T> {}\n                 T: 'a,\n                 T: 'b\n             {\n-                // flags = 0x2\n                 pub(self) fn f<G>(\n                     arg: impl Copy,\n                 ) -> impl Copy\n                 where\n-                    G: 'a;\n+                    G: 'a { ... }\n             }\n \n             pub(self) enum Enum<'a, T, const U: u8> {\n@@ -392,10 +388,9 @@ pub(crate) trait Tr {\n             pub(crate) trait Tr<Self> {\n                 pub(crate) fn f() -> ();\n \n-                // flags = 0x3\n                 pub(crate) fn method(\n-                    _: &Self,\n-                ) -> ();\n+                    _: &Self,  // self\n+                ) -> () { ... }\n             }\n         \"#]],\n     )"}]}