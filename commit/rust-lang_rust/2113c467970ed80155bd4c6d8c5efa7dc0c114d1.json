{"sha": "2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMTNjNDY3OTcwZWQ4MDE1NWJkNGM2ZDhjNWVmYTdkYzBjMTE0ZDE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-19T20:31:24Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-19T20:33:29Z"}, "message": "Cleanup insert_use tests", "tree": {"sha": "349e09755a03480e318d32acd322bbee78787abd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349e09755a03480e318d32acd322bbee78787abd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "html_url": "https://github.com/rust-lang/rust/commit/2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2aa7782d65c4f2765f68b99f00f4203e1f143c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2aa7782d65c4f2765f68b99f00f4203e1f143c1", "html_url": "https://github.com/rust-lang/rust/commit/c2aa7782d65c4f2765f68b99f00f4203e1f143c1"}], "stats": {"total": 169, "additions": 78, "deletions": 91}, "files": [{"sha": "6ce3777106ad91aef8bf0ce49ffece26cf88176b", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "patch": "@@ -106,7 +106,7 @@ impl ChangeFixture {\n                     let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n                     assert!(file_position.is_none());\n                     file_position = Some((file_id, range_or_offset));\n-                    text.to_string()\n+                    text\n                 }\n             } else {\n                 entry.text.clone()"}, {"sha": "accc345fc62554f65be330609ebd462184168971", "filename": "crates/ide_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 0, "deletions": 58, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "patch": "@@ -992,64 +992,6 @@ mod foo {}\n const _: () = {\n     Foo\n };\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn respects_cfg_attr() {\n-        check_assist(\n-            auto_import,\n-            r#\"\n-mod bar {\n-    pub struct Bar;\n-}\n-\n-#[cfg(test)]\n-fn foo() {\n-    Bar$0\n-}\n-\"#,\n-            r#\"\n-mod bar {\n-    pub struct Bar;\n-}\n-\n-#[cfg(test)]\n-fn foo() {\n-use bar::Bar;\n-\n-    Bar\n-}\n-\"#,\n-        );\n-    }\n-\n-    #[test]\n-    fn respects_cfg_attr2() {\n-        check_assist(\n-            auto_import,\n-            r#\"\n-mod bar {\n-    pub struct Bar;\n-}\n-\n-#[cfg(test)]\n-const FOO: Bar = {\n-    Bar$0\n-}\n-\"#,\n-            r#\"\n-mod bar {\n-    pub struct Bar;\n-}\n-\n-#[cfg(test)]\n-const FOO: Bar = {\n-use bar::Bar;\n-\n-    Bar\n-}\n \"#,\n         );\n     }"}, {"sha": "01894630a8f321d337b750a6ec3f19188ce61b8d", "filename": "crates/ide_db/src/helpers/insert_use/tests.rs", "status": "modified", "additions": 77, "deletions": 32, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2113c467970ed80155bd4c6d8c5efa7dc0c114d1/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Finsert_use%2Ftests.rs?ref=2113c467970ed80155bd4c6d8c5efa7dc0c114d1", "patch": "@@ -1,7 +1,43 @@\n use super::*;\n \n use hir::PrefixKind;\n-use test_utils::assert_eq_text;\n+use test_utils::{assert_eq_text, extract_range_or_offset, CURSOR_MARKER};\n+\n+#[test]\n+fn respects_cfg_attr_fn() {\n+    check(\n+        r\"bar::Bar\",\n+        r#\"\n+#[cfg(test)]\n+fn foo() {$0}\n+\"#,\n+        r#\"\n+#[cfg(test)]\n+fn foo() {\n+use bar::Bar;\n+}\n+\"#,\n+        ImportGranularity::Crate,\n+    );\n+}\n+\n+#[test]\n+fn respects_cfg_attr_const() {\n+    check(\n+        r\"bar::Bar\",\n+        r#\"\n+#[cfg(test)]\n+const FOO: Bar = {$0};\n+\"#,\n+        r#\"\n+#[cfg(test)]\n+const FOO: Bar = {\n+use bar::Bar;\n+};\n+\"#,\n+        ImportGranularity::Crate,\n+    );\n+}\n \n #[test]\n fn insert_skips_lone_glob_imports() {\n@@ -15,15 +51,13 @@ use foo::bar::*;\n use foo::baz::A;\n \",\n         ImportGranularity::Crate,\n-        false,\n-        false,\n     );\n }\n \n #[test]\n fn insert_not_group() {\n     cov_mark::check!(insert_no_grouping_last);\n-    check(\n+    check_with_config(\n         \"use external_crate2::bar::A\",\n         r\"\n use std::bar::B;\n@@ -38,24 +72,32 @@ use crate::bar::A;\n use self::bar::A;\n use super::bar::A;\n use external_crate2::bar::A;\",\n-        ImportGranularity::Item,\n-        false,\n-        false,\n+        &InsertUseConfig {\n+            granularity: ImportGranularity::Item,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group: false,\n+            skip_glob_imports: true,\n+        },\n     );\n }\n \n #[test]\n fn insert_not_group_empty() {\n     cov_mark::check!(insert_no_grouping_last2);\n-    check(\n+    check_with_config(\n         \"use external_crate2::bar::A\",\n         r\"\",\n         r\"use external_crate2::bar::A;\n \n \",\n-        ImportGranularity::Item,\n-        false,\n-        false,\n+        &InsertUseConfig {\n+            granularity: ImportGranularity::Item,\n+            enforce_granularity: true,\n+            prefix_kind: PrefixKind::Plain,\n+            group: false,\n+            skip_glob_imports: true,\n+        },\n     );\n }\n \n@@ -294,13 +336,15 @@ fn insert_empty_module() {\n     cov_mark::check!(insert_group_empty_module);\n     check(\n         \"foo::bar\",\n-        \"mod x {}\",\n-        r\"{\n+        r\"\n+mod x {$0}\n+\",\n+        r\"\n+mod x {\n     use foo::bar;\n-}\",\n+}\n+\",\n         ImportGranularity::Item,\n-        true,\n-        true,\n     )\n }\n \n@@ -555,7 +599,6 @@ fn merge_mod_into_glob() {\n         \"token::TokenKind\",\n         r\"use token::TokenKind::*;\",\n         r\"use token::TokenKind::{*, self};\",\n-        false,\n         &InsertUseConfig {\n             granularity: ImportGranularity::Crate,\n             enforce_granularity: true,\n@@ -573,7 +616,6 @@ fn merge_self_glob() {\n         \"self\",\n         r\"use self::*;\",\n         r\"use self::{*, self};\",\n-        false,\n         &InsertUseConfig {\n             granularity: ImportGranularity::Crate,\n             enforce_granularity: true,\n@@ -798,14 +840,20 @@ fn check_with_config(\n     path: &str,\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n-    module: bool,\n     config: &InsertUseConfig,\n ) {\n-    let mut syntax = ast::SourceFile::parse(ra_fixture_before).tree().syntax().clone();\n-    if module {\n-        syntax = syntax.descendants().find_map(ast::Module::cast).unwrap().syntax().clone();\n-    }\n-    let file = super::ImportScope::from(syntax.clone_for_update()).unwrap();\n+    let (text, pos) = if ra_fixture_before.contains(CURSOR_MARKER) {\n+        let (range_or_offset, text) = extract_range_or_offset(ra_fixture_before);\n+        (text, Some(range_or_offset))\n+    } else {\n+        (ra_fixture_before.to_owned(), None)\n+    };\n+    let syntax = ast::SourceFile::parse(&text).tree().syntax().clone_for_update();\n+    let file = pos\n+        .and_then(|pos| syntax.token_at_offset(pos.expect_offset()).next()?.parent())\n+        .and_then(|it| super::ImportScope::find_insert_use_container(&it))\n+        .or_else(|| super::ImportScope::from(syntax))\n+        .unwrap();\n     let path = ast::SourceFile::parse(&format!(\"use {};\", path))\n         .tree()\n         .syntax()\n@@ -814,7 +862,7 @@ fn check_with_config(\n         .unwrap();\n \n     insert_use(&file, path, config);\n-    let result = file.as_syntax_node().to_string();\n+    let result = file.as_syntax_node().ancestors().last().unwrap().to_string();\n     assert_eq_text!(ra_fixture_after, &result);\n }\n \n@@ -823,34 +871,31 @@ fn check(\n     ra_fixture_before: &str,\n     ra_fixture_after: &str,\n     granularity: ImportGranularity,\n-    module: bool,\n-    group: bool,\n ) {\n     check_with_config(\n         path,\n         ra_fixture_before,\n         ra_fixture_after,\n-        module,\n         &InsertUseConfig {\n             granularity,\n             enforce_granularity: true,\n             prefix_kind: PrefixKind::Plain,\n-            group,\n+            group: true,\n             skip_glob_imports: true,\n         },\n     )\n }\n \n fn check_crate(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Crate, false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Crate)\n }\n \n fn check_module(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Module, false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Module)\n }\n \n fn check_none(path: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Item, false, true)\n+    check(path, ra_fixture_before, ra_fixture_after, ImportGranularity::Item)\n }\n \n fn check_merge_only_fail(ra_fixture0: &str, ra_fixture1: &str, mb: MergeBehavior) {"}]}