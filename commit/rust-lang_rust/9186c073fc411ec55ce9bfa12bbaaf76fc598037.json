{"sha": "9186c073fc411ec55ce9bfa12bbaaf76fc598037", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxODZjMDczZmM0MTFlYzU1Y2U5YmZhMTJiYmFhZjc2ZmM1OTgwMzc=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-22T12:06:12Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-11-22T12:37:39Z"}, "message": "BTreeMap: fix minor testing mistakes in #78903", "tree": {"sha": "820e7f54d8d581e496f8c5e594260e32f731b93c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/820e7f54d8d581e496f8c5e594260e32f731b93c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9186c073fc411ec55ce9bfa12bbaaf76fc598037", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9186c073fc411ec55ce9bfa12bbaaf76fc598037", "html_url": "https://github.com/rust-lang/rust/commit/9186c073fc411ec55ce9bfa12bbaaf76fc598037", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9186c073fc411ec55ce9bfa12bbaaf76fc598037/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20328b532336017213ccb4095740955d81060ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/20328b532336017213ccb4095740955d81060ebc", "html_url": "https://github.com/rust-lang/rust/commit/20328b532336017213ccb4095740955d81060ebc"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "74e61e56e214b9984e5196c58707594245a6be95", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9186c073fc411ec55ce9bfa12bbaaf76fc598037/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9186c073fc411ec55ce9bfa12bbaaf76fc598037/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=9186c073fc411ec55ce9bfa12bbaaf76fc598037", "patch": "@@ -56,24 +56,23 @@ impl<K, V> BTreeMap<K, V> {\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n \n-            // Check consistenty of `length` and some of the navigation.\n+            // Check consistency of `length` with what navigation code encounters.\n             assert_eq!(self.length, root_node.calc_length());\n-            assert_eq!(self.length, self.keys().count());\n \n             // Lastly, check the invariant causing the least harm.\n             root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n-            // Check consistenty of `length` and some of the navigation.\n             assert_eq!(self.length, 0);\n-            assert_eq!(self.length, self.keys().count());\n         }\n+\n+        // Check that `assert_strictly_ascending` will encounter all keys.\n+        assert_eq!(self.length, self.keys().count());\n     }\n \n     // Panics if the map is corrupted or if the keys are not in strictly\n     // ascending order, in the current opinion of the `Ord` implementation.\n-    // If the `Ord` implementation does not honor transitivity, this method\n-    // does not guarantee that all the keys are unique, just that adjacent\n-    // keys are unique.\n+    // If the `Ord` implementation violates transitivity, this method does not\n+    // guarantee that all keys are unique, just that adjacent keys are unique.\n     fn check(&self)\n     where\n         K: Debug + Ord,\n@@ -879,6 +878,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator, where most test cases drop it instantly.\n     #[test]\n     fn consumed_keeping_all() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -887,6 +887,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator, where most test cases drop it instantly.\n     #[test]\n     fn consumed_removing_all() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -896,15 +897,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n-    #[test]\n-    fn dropped_removing_all() {\n-        let pairs = (0..3).map(|i| (i, i));\n-        let mut map: BTreeMap<_, _> = pairs.collect();\n-        map.drain_filter(|_, _| true);\n-        assert!(map.is_empty());\n-        map.check();\n-    }\n-\n+    // Explicitly consumes the iterator and modifies values through it.\n     #[test]\n     fn mutating_and_keeping() {\n         let pairs = (0..3).map(|i| (i, i));\n@@ -921,6 +914,7 @@ mod test_drain_filter {\n         map.check();\n     }\n \n+    // Explicitly consumes the iterator and modifies values through it.\n     #[test]\n     fn mutating_and_removing() {\n         let pairs = (0..3).map(|i| (i, i));"}, {"sha": "96ce7c15790463b3770285f6395859d64ea9afdc", "filename": "library/alloc/src/collections/btree/map/tests/ord_chaos.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9186c073fc411ec55ce9bfa12bbaaf76fc598037/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9186c073fc411ec55ce9bfa12bbaaf76fc598037/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests%2Ford_chaos.rs?ref=9186c073fc411ec55ce9bfa12bbaaf76fc598037", "patch": "@@ -2,6 +2,7 @@ use std::cell::Cell;\n use std::cmp::Ordering::{self, *};\n use std::ptr;\n \n+// Minimal type with an `Ord` implementation violating transitivity.\n #[derive(Debug)]\n pub enum Cyclic3 {\n     A,\n@@ -34,6 +35,7 @@ impl PartialEq for Cyclic3 {\n \n impl Eq for Cyclic3 {}\n \n+// Controls the ordering of values wrapped by `Governed`.\n #[derive(Debug)]\n pub struct Governor {\n     flipped: Cell<bool>,\n@@ -49,6 +51,9 @@ impl Governor {\n     }\n }\n \n+// Type with an `Ord` implementation that forms a total order at any moment\n+// (assuming that `T` respects total order), but can suddenly be made to invert\n+// that total order.\n #[derive(Debug)]\n pub struct Governed<'a, T>(pub T, pub &'a Governor);\n "}]}