{"sha": "6e509d3462d20b696a1b5d18f14884b4e391a6ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlNTA5ZDM0NjJkMjBiNjk2YTFiNWQxOGYxNDg4NGI0ZTM5MWE2YmE=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-07-20T10:08:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-07-24T14:25:43Z"}, "message": "Deprecated `str::raw::from_buf_len`\n\nReplaced by `string::raw::from_buf_len`\n\n[breaking-change]", "tree": {"sha": "f6cd81cd6c4838bf5f5db742189727df4e4485cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6cd81cd6c4838bf5f5db742189727df4e4485cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e509d3462d20b696a1b5d18f14884b4e391a6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e509d3462d20b696a1b5d18f14884b4e391a6ba", "html_url": "https://github.com/rust-lang/rust/commit/6e509d3462d20b696a1b5d18f14884b4e391a6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e509d3462d20b696a1b5d18f14884b4e391a6ba/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feeae27a56f034a0d041a4985fa731ee5b42d315", "url": "https://api.github.com/repos/rust-lang/rust/commits/feeae27a56f034a0d041a4985fa731ee5b42d315", "html_url": "https://github.com/rust-lang/rust/commit/feeae27a56f034a0d041a4985fa731ee5b42d315"}], "stats": {"total": 77, "additions": 43, "deletions": 34}, "files": [{"sha": "731c761351c26a8a6c1dee50444a88bee1a5b7d3", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -558,7 +558,6 @@ pub mod raw {\n     use core::mem;\n     use core::raw::Slice;\n     use core::ptr::RawPtr;\n-\n     use string::{mod, String};\n     use vec::Vec;\n \n@@ -567,14 +566,10 @@ pub mod raw {\n     pub use core::str::raw::{from_utf8, c_str_to_static_slice, slice_bytes};\n     pub use core::str::raw::{slice_unchecked};\n \n-    /// Create a Rust string from a *u8 buffer of the given length\n+    /// Deprecated. Replaced by `string::raw::from_buf_len`\n+    #[deprecated = \"Use string::raw::from_buf_len\"]\n     pub unsafe fn from_buf_len(buf: *const u8, len: uint) -> String {\n-        let mut result = String::new();\n-        result.push_bytes(mem::transmute(Slice {\n-            data: buf,\n-            len: len,\n-        }));\n-        result\n+        string::raw::from_buf_len(buf, len)\n     }\n \n     /// Deprecated. Use `CString::as_str().unwrap().to_string()`\n@@ -598,22 +593,10 @@ pub mod raw {\n         string::raw::from_utf8(v)\n     }\n \n-    /// Deprecated. Use `String::from_bytes`\n-    #[deprecated = \"Use String::from_bytes\"]\n+    /// Deprecated. Use `string::raw::from_utf8`\n+    #[deprecated = \"Use string::raw::from_utf8\"]\n     pub unsafe fn from_byte(u: u8) -> String {\n-        String::from_bytes(vec![u])\n-    }\n-\n-    #[test]\n-    fn test_from_buf_len() {\n-        use slice::ImmutableVector;\n-\n-        unsafe {\n-            let a = vec![65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n-            let b = a.as_ptr();\n-            let c = from_buf_len(b, 3u);\n-            assert_eq!(c, String::from_str(\"AAA\"));\n-        }\n+        string::raw::from_utf8(vec![u])\n     }\n }\n "}, {"sha": "bb8424bd36338aff5f57dd39ef5e9faab9c28e6c", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -571,6 +571,9 @@ impl<S: Str> Add<S, String> for String {\n }\n \n pub mod raw {\n+    use core::mem;\n+    use core::raw::Slice;\n+\n     use super::String;\n     use vec::Vec;\n \n@@ -581,6 +584,20 @@ pub mod raw {\n     pub unsafe fn from_utf8(bytes: Vec<u8>) -> String {\n         String { vec: bytes }\n     }\n+\n+    /// Create a Rust string from a *u8 buffer of the given length\n+    ///\n+    /// This function is unsafe because of two reasons:\n+    /// * A raw pointer is dereferenced and transmuted to `&[u8]`\n+    /// * The slice is not checked to see whether it contains valid UTF-8\n+    pub unsafe fn from_buf_len(buf: *const u8, len: uint) -> String {\n+        use slice::CloneableVector;\n+        let slice: &[u8] = mem::transmute(Slice {\n+            data: buf,\n+            len: len,\n+        });\n+        self::from_utf8(slice.to_vec())\n+    }\n }\n \n #[cfg(test)]\n@@ -740,6 +757,14 @@ mod tests {\n                    String::from_str(\"\\uFFFD\ud801\udc8b\\uFFFD\"));\n     }\n \n+    #[test]\n+    fn test_from_buf_len() {\n+        unsafe {\n+            let a = vec![65u8, 65, 65, 65, 65, 65, 65, 0];\n+            assert_eq!(super::raw::from_buf_len(a.as_ptr(), 3), String::from_str(\"AAA\"));\n+        }\n+    }\n+\n     #[test]\n     fn test_push_bytes() {\n         let mut s = String::from_str(\"ABC\");"}, {"sha": "1811c4f8612f01560e8678b2451e7f5c4a33d825", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -233,7 +233,7 @@ use std::io;\n use std::mem;\n use std::ptr;\n use std::slice;\n-use std::str;\n+use std::string;\n \n use std::collections::{HashMap, HashSet};\n use flate;\n@@ -772,7 +772,7 @@ fn get_metadata_section_imp(os: abi::Os, filename: &Path) -> Result<MetadataBlob\n         while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n             let mut name_buf = ptr::null();\n             let name_len = llvm::LLVMRustGetSectionName(si.llsi, &mut name_buf);\n-            let name = str::raw::from_buf_len(name_buf as *const u8,\n+            let name = string::raw::from_buf_len(name_buf as *const u8,\n                                               name_len as uint);\n             debug!(\"get_metadata_section: name {}\", name);\n             if read_meta_section_name(os).as_slice() == name.as_slice() {"}, {"sha": "97fa58d50777401da65ee74765eb8073c2384319", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -32,6 +32,7 @@ use std::cell::{RefCell, Cell};\n use std::fmt;\n use std::slice;\n use std::str;\n+use std::string;\n use std::collections::HashMap;\n \n use html::toc::TocBuilder;\n@@ -222,7 +223,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n             \"\".to_string()\n         } else {\n             unsafe {\n-                str::raw::from_buf_len((*text).data, (*text).size as uint)\n+                string::raw::from_buf_len((*text).data, (*text).size as uint)\n             }\n         };\n "}, {"sha": "f5183ab7188cbe852cdf44664472a980a52cd8fe", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -47,9 +47,9 @@ use ptr;\n use result::{Err, Ok, Result};\n use slice::{Vector, ImmutableVector, MutableVector, ImmutableEqVector};\n use str::{Str, StrSlice, StrAllocating};\n-use str;\n use string::String;\n use sync::atomics::{AtomicInt, INIT_ATOMIC_INT, SeqCst};\n+use to_str::ToString;\n use vec::Vec;\n \n #[cfg(unix)]\n@@ -135,7 +135,7 @@ pub fn getcwd() -> Path {\n             fail!();\n         }\n     }\n-    Path::new(String::from_utf16(str::truncate_utf16_at_nul(buf))\n+    Path::new(String::from_utf16(::str::truncate_utf16_at_nul(buf))\n               .expect(\"GetCurrentDirectoryW returned invalid UTF-16\"))\n }\n \n@@ -413,7 +413,7 @@ pub fn setenv<T: BytesContainer>(n: &str, v: T) {\n     fn _setenv(n: &str, v: &[u8]) {\n         let n: Vec<u16> = n.utf16_units().collect();\n         let n = n.append_one(0);\n-        let v: Vec<u16> = str::from_utf8(v).unwrap().utf16_units().collect();\n+        let v: Vec<u16> = ::str::from_utf8(v).unwrap().utf16_units().collect();\n         let v = v.append_one(0);\n \n         unsafe {\n@@ -1045,7 +1045,7 @@ pub fn error_string(errnum: uint) -> String {\n                 return format!(\"OS Error {} (FormatMessageW() returned error {})\", errnum, fm_err);\n             }\n \n-            let msg = String::from_utf16(str::truncate_utf16_at_nul(buf));\n+            let msg = String::from_utf16(::str::truncate_utf16_at_nul(buf));\n             match msg {\n                 Some(msg) => format!(\"OS Error {}: {}\", errnum, msg),\n                 None => format!(\"OS Error {} (FormatMessageW() returned invalid UTF-16)\", errnum),\n@@ -1202,7 +1202,7 @@ fn real_args() -> Vec<String> {\n \n         // Push it onto the list.\n         let opt_s = slice::raw::buf_as_slice(ptr as *const _, len, |buf| {\n-            String::from_utf16(str::truncate_utf16_at_nul(buf))\n+            String::from_utf16(::str::truncate_utf16_at_nul(buf))\n         });\n         opt_s.expect(\"CommandLineToArgvW returned invalid UTF-16\")\n     });"}, {"sha": "0fef3dd4aac24937dc794d4a57425307fac2579a", "filename": "src/test/run-pass/const-str-ptr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e509d3462d20b696a1b5d18f14884b4e391a6ba/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-str-ptr.rs?ref=6e509d3462d20b696a1b5d18f14884b4e391a6ba", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::str;\n+use std::{str, string};\n \n static A: [u8, ..2] = ['h' as u8, 'i' as u8];\n static B: &'static [u8, ..2] = &A;\n@@ -18,8 +18,8 @@ pub fn main() {\n     unsafe {\n         let foo = &A as *const u8;\n         assert_eq!(str::raw::from_utf8(A), \"hi\");\n-        assert_eq!(str::raw::from_buf_len(foo, A.len()), \"hi\".to_string());\n-        assert_eq!(str::raw::from_buf_len(C, B.len()), \"hi\".to_string());\n+        assert_eq!(string::raw::from_buf_len(foo, A.len()), \"hi\".to_string());\n+        assert_eq!(string::raw::from_buf_len(C, B.len()), \"hi\".to_string());\n         assert!(*C == A[0]);\n         assert!(*(&B[0] as *const u8) == A[0]);\n "}]}