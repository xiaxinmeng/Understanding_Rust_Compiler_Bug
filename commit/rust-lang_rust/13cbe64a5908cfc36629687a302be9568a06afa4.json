{"sha": "13cbe64a5908cfc36629687a302be9568a06afa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzY2JlNjRhNTkwOGNmYzM2NjI5Njg3YTMwMmJlOTU2OGEwNmFmYTQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-28T19:57:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-28T19:57:23Z"}, "message": "Merge #9423\n\n9423: fix: Resolve attribute paths in attribute highlighting r=Veykril a=Veykril\n\nAttributes have a new highlighting format now, whereas the `#[` `]` tokens are now tagged with `attribute.attribute` like before, but all other idents inside token trees are now `generic.attribute`. If a path in an attribute can't be resolved it will instead get the `builtinAttribute.attribute` tags now as highlighting doesn't know about builtins like `allow` yet, so we don't want to emit unresolved references.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c47100c843f1970146f20deaceec1efb55966373", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c47100c843f1970146f20deaceec1efb55966373"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13cbe64a5908cfc36629687a302be9568a06afa4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg2imjCRBK7hj4Ov3rIwAAYdoIACMs97rh53GRqgIuifIDwKhz\njtslGaNeywfVBUWG/TuyDl3WcgNGXpiAza3NW54xFul/I3rW55esPkATGC3fCvZR\n79FEcLg9zD/1RbHP1lD9Fy9m3nVPKNFQhVuy+X/LNR50sQBLx16oXXQelqWm6bR5\nE2QEbcR6nfdkSeBG4HilKFbbqILQ6Z63gVY7oaLAIIdVImBw2f3BneAM/8vjwwko\nW9Eejbtzz16LkVb5BpEocSX0q4huViW/pFwjDx0vS7ZYzuRe3eUceky77EA4bmZH\nyqga9egeCBaG2k0JIhnNbqfruv+8ivQnB3HKdhajgM4isn7+o0VhnXvRQttdWqE=\n=Q/i3\n-----END PGP SIGNATURE-----\n", "payload": "tree c47100c843f1970146f20deaceec1efb55966373\nparent 3ce1a0226cc0b5dc8061628e1d0021c290aa7b2f\nparent 9a1b9b3c781ebf339eaa99a1318bf31e99d78550\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624910243 +0000\ncommitter GitHub <noreply@github.com> 1624910243 +0000\n\nMerge #9423\n\n9423: fix: Resolve attribute paths in attribute highlighting r=Veykril a=Veykril\n\nAttributes have a new highlighting format now, whereas the `#[` `]` tokens are now tagged with `attribute.attribute` like before, but all other idents inside token trees are now `generic.attribute`. If a path in an attribute can't be resolved it will instead get the `builtinAttribute.attribute` tags now as highlighting doesn't know about builtins like `allow` yet, so we don't want to emit unresolved references.\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13cbe64a5908cfc36629687a302be9568a06afa4", "html_url": "https://github.com/rust-lang/rust/commit/13cbe64a5908cfc36629687a302be9568a06afa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13cbe64a5908cfc36629687a302be9568a06afa4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ce1a0226cc0b5dc8061628e1d0021c290aa7b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ce1a0226cc0b5dc8061628e1d0021c290aa7b2f", "html_url": "https://github.com/rust-lang/rust/commit/3ce1a0226cc0b5dc8061628e1d0021c290aa7b2f"}, {"sha": "9a1b9b3c781ebf339eaa99a1318bf31e99d78550", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a1b9b3c781ebf339eaa99a1318bf31e99d78550", "html_url": "https://github.com/rust-lang/rust/commit/9a1b9b3c781ebf339eaa99a1318bf31e99d78550"}], "stats": {"total": 171, "additions": 97, "deletions": 74}, "files": [{"sha": "d39206f2b0060a93fd6d642e4510b541ef72b735", "filename": "crates/hir_expand/src/builtin_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -1,4 +1,4 @@\n-//! Builtin derives.\n+//! Builtin attributes.\n \n use syntax::ast;\n "}, {"sha": "55ee85434a586530d9b58a1a8ce90239d1347878", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -102,7 +102,8 @@ pub struct HlRange {\n // //-\n //\n // [horizontal]\n-// attribute:: Emitted for attributes.\n+// attribute:: Emitted for the `#[` `]` tokens.\n+// builtinAttribute:: Emitted for names to builtin attributes in attribute path, the `repr` in `#[repr(u8)]` for example.\n // builtinType:: Emitted for builtin types like `u32`, `str` and `f32`.\n // comment:: Emitted for comments.\n // constParameter:: Emitted for const parameters."}, {"sha": "e9b8eb407c5c8f324a20cd0bc9bd298fd8e5f266", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 76, "deletions": 58, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -71,68 +71,88 @@ pub(super) fn element(\n         }\n         // Highlight references like the definitions they resolve to\n         NAME_REF if element.ancestors().any(|it| it.kind() == ATTR) => {\n-            // even though we track whether we are in an attribute or not we still need this special case\n-            // as otherwise we would emit unresolved references for name refs inside attributes\n-            SymbolKind::Function.into()\n+            // FIXME: We highlight paths in attributes slightly differently to work around this module\n+            // currently not knowing about tool attributes and rustc builtin attributes as\n+            // we do not want to resolve those to functions that may be defined in scope.\n+            let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n+            match NameRefClass::classify(sema, &name_ref) {\n+                Some(name_class) => match name_class {\n+                    NameRefClass::Definition(Definition::ModuleDef(hir::ModuleDef::Module(_)))\n+                        if name_ref\n+                            .syntax()\n+                            .ancestors()\n+                            .find_map(ast::Path::cast)\n+                            .map_or(false, |it| it.parent_path().is_some()) =>\n+                    {\n+                        HlTag::Symbol(SymbolKind::Module)\n+                    }\n+                    NameRefClass::Definition(Definition::Macro(m))\n+                        if m.kind() == hir::MacroKind::Attr =>\n+                    {\n+                        HlTag::Symbol(SymbolKind::Macro)\n+                    }\n+                    _ => HlTag::BuiltinAttr,\n+                },\n+                None => HlTag::BuiltinAttr,\n+            }\n+            .into()\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n-            highlight_func_by_name_ref(sema, krate, &name_ref).unwrap_or_else(|| {\n-                let is_self = name_ref.self_token().is_some();\n-                let h = match NameRefClass::classify(sema, &name_ref) {\n-                    Some(name_kind) => match name_kind {\n-                        NameRefClass::ExternCrate(_) => SymbolKind::Module.into(),\n-                        NameRefClass::Definition(def) => {\n-                            if let Definition::Local(local) = &def {\n-                                if let Some(name) = local.name(db) {\n-                                    let shadow_count =\n-                                        bindings_shadow_count.entry(name.clone()).or_default();\n-                                    binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n-                                }\n-                            };\n-\n-                            let mut h = highlight_def(db, krate, def);\n-\n-                            match def {\n-                                Definition::Local(local)\n-                                    if is_consumed_lvalue(\n-                                        name_ref.syntax().clone().into(),\n-                                        &local,\n-                                        db,\n-                                    ) =>\n-                                {\n-                                    h |= HlMod::Consuming;\n-                                }\n-                                Definition::ModuleDef(hir::ModuleDef::Trait(trait_))\n-                                    if trait_.is_unsafe(db) =>\n-                                {\n-                                    if ast::Impl::for_trait_name_ref(&name_ref).is_some() {\n-                                        h |= HlMod::Unsafe;\n-                                    }\n+            highlight_method_call_by_name_ref(sema, krate, &name_ref).unwrap_or_else(|| {\n+                let name_class = match NameRefClass::classify(sema, &name_ref) {\n+                    Some(name_kind) => name_kind,\n+                    None => {\n+                        return if syntactic_name_ref_highlighting {\n+                            highlight_name_ref_by_syntax(name_ref, sema, krate)\n+                        } else {\n+                            HlTag::UnresolvedReference.into()\n+                        }\n+                    }\n+                };\n+                let h = match name_class {\n+                    NameRefClass::ExternCrate(_) => SymbolKind::Module.into(),\n+                    NameRefClass::Definition(def) => {\n+                        if let Definition::Local(local) = &def {\n+                            if let Some(name) = local.name(db) {\n+                                let shadow_count =\n+                                    bindings_shadow_count.entry(name.clone()).or_default();\n+                                binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n+                            }\n+                        };\n+\n+                        let mut h = highlight_def(db, krate, def);\n+\n+                        match def {\n+                            Definition::Local(local)\n+                                if is_consumed_lvalue(name_ref.syntax(), &local, db) =>\n+                            {\n+                                h |= HlMod::Consuming;\n+                            }\n+                            Definition::ModuleDef(hir::ModuleDef::Trait(trait_))\n+                                if trait_.is_unsafe(db) =>\n+                            {\n+                                if ast::Impl::for_trait_name_ref(&name_ref).is_some() {\n+                                    h |= HlMod::Unsafe;\n                                 }\n-                                Definition::Field(field) => {\n-                                    if let Some(parent) = name_ref.syntax().parent() {\n-                                        if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n-                                            if let hir::VariantDef::Union(_) = field.parent_def(db)\n-                                            {\n-                                                h |= HlMod::Unsafe;\n-                                            }\n+                            }\n+                            Definition::Field(field) => {\n+                                if let Some(parent) = name_ref.syntax().parent() {\n+                                    if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n+                                        if let hir::VariantDef::Union(_) = field.parent_def(db) {\n+                                            h |= HlMod::Unsafe;\n                                         }\n                                     }\n                                 }\n-                                _ => (),\n                             }\n-\n-                            h\n+                            _ => (),\n                         }\n-                        NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n-                    },\n-                    None if syntactic_name_ref_highlighting => {\n-                        highlight_name_ref_by_syntax(name_ref, sema, krate)\n+\n+                        h\n                     }\n-                    None => HlTag::UnresolvedReference.into(),\n+                    NameRefClass::FieldShorthand { .. } => SymbolKind::Field.into(),\n                 };\n-                if h.tag == HlTag::Symbol(SymbolKind::Module) && is_self {\n+                if h.tag == HlTag::Symbol(SymbolKind::Module) && name_ref.self_token().is_some() {\n                     SymbolKind::SelfParam.into()\n                 } else {\n                     h\n@@ -172,6 +192,7 @@ pub(super) fn element(\n                 _ => Highlight::from(SymbolKind::LifetimeParam) | HlMod::Definition,\n             }\n         }\n+        IDENT if parent_matches::<ast::TokenTree>(&element) => HlTag::None.into(),\n         p if p.is_punct() => match p {\n             T![&] if parent_matches::<ast::BinExpr>(&element) => HlOperator::Bitwise.into(),\n             T![&] => {\n@@ -450,7 +471,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n     h\n }\n \n-fn highlight_func_by_name_ref(\n+fn highlight_method_call_by_name_ref(\n     sema: &Semantics<RootDatabase>,\n     krate: Option<hir::Crate>,\n     name_ref: &ast::NameRef,\n@@ -599,13 +620,10 @@ fn highlight_name_ref_by_syntax(\n     }\n }\n \n-fn is_consumed_lvalue(\n-    node: NodeOrToken<SyntaxNode, SyntaxToken>,\n-    local: &hir::Local,\n-    db: &RootDatabase,\n-) -> bool {\n+fn is_consumed_lvalue(node: &SyntaxNode, local: &hir::Local, db: &RootDatabase) -> bool {\n     // When lvalues are passed as arguments and they're not Copy, then mark them as Consuming.\n-    parents_match(node, &[PATH_SEGMENT, PATH, PATH_EXPR, ARG_LIST]) && !local.ty(db).is_copy(db)\n+    parents_match(node.clone().into(), &[PATH_SEGMENT, PATH, PATH_EXPR, ARG_LIST])\n+        && !local.ty(db).is_copy(db)\n }\n \n /// Returns true if the parent nodes of `node` all match the `SyntaxKind`s in `kinds` exactly."}, {"sha": "82c5b609eb85587045612080a9f6053cfdf06091", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -20,6 +20,7 @@ pub enum HlTag {\n \n     Attribute,\n     BoolLiteral,\n+    BuiltinAttr,\n     BuiltinType,\n     ByteLiteral,\n     CharLiteral,\n@@ -141,6 +142,7 @@ impl HlTag {\n             },\n             HlTag::Attribute => \"attribute\",\n             HlTag::BoolLiteral => \"bool_literal\",\n+            HlTag::BuiltinAttr => \"builtin_attr\",\n             HlTag::BuiltinType => \"builtin_type\",\n             HlTag::ByteLiteral => \"byte_literal\",\n             HlTag::CharLiteral => \"char_literal\","}, {"sha": "4ae702ba5d519786e19107f11c5a1cfd92ff6d72", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -70,7 +70,7 @@\n     <span class=\"comment documentation\">/// # Examples</span>\n     <span class=\"comment documentation\">///</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"function attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"attribute attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n+    <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"builtin_attr attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static public\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n@@ -140,12 +140,12 @@\n <span class=\"comment documentation\">///</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"false\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"</span><span class=\"keyword control injected\">loop</span><span class=\"none injected\"> </span><span class=\"brace injected\">{</span><span class=\"brace injected\">}</span><span class=\"string_literal attribute\">\"</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"comment documentation\">///</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">feature </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> doc </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```rust\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">cfg_attr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">not</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">feature</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"alloc\"</span><span class=\"parenthesis attribute\">)</span><span class=\"comma attribute\">,</span><span class=\"attribute attribute\"> </span><span class=\"none attribute\">doc</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"```ignore\"</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"punctuation injected\">_</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"function injected\">example</span><span class=\"parenthesis injected\">(</span><span class=\"operator injected\">&</span><span class=\"none injected\">alloc::</span><span class=\"macro injected\">vec!</span><span class=\"bracket injected\">[</span><span class=\"numeric_literal injected\">1</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">2</span><span class=\"comma injected\">,</span><span class=\"none injected\"> </span><span class=\"numeric_literal injected\">3</span><span class=\"bracket injected\">]</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n <span class=\"comment documentation\">/// ```</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function declaration public\">mix_and_match</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>"}, {"sha": "b409a6765951bb086a006e6e0b445140ef19c9aa", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -43,7 +43,7 @@\n         <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>io<span class=\"colon\">:</span><span class=\"colon\">:</span>_print<span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>format_args_nl<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"brace\">}</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>args<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>"}, {"sha": "bf745f40560d833372dda9d7a9072684a3bd61d7", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_unsafe.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_unsafe.html?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -57,7 +57,7 @@\n \n <span class=\"keyword\">static</span> <span class=\"keyword\">mut</span> <span class=\"static declaration mutable unsafe\">global_mut</span><span class=\"colon\">:</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"operator\">=</span> <span class=\"struct\">TypeForStaticMut</span> <span class=\"brace\">{</span> <span class=\"field\">a</span><span class=\"colon\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">repr</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">packed</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">Packed</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">a</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u16</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "96969a7bb3306fed8b2a71403627e1110e4081e9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -41,23 +41,23 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"brace\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro</span> <span class=\"macro declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment\">// Needed for function consuming vs normal</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">marker</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration public\">ops</span> <span class=\"brace\">{</span>\n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_once\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn_mut\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnOnce</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n-    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n+    <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"fn\"</span><span class=\"attribute attribute\">]</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">trait</span> <span class=\"trait declaration public\">Fn</span><span class=\"angle\">&lt;</span><span class=\"type_param declaration\">Args</span><span class=\"angle\">&gt;</span><span class=\"colon\">:</span> <span class=\"trait public\">FnMut</span><span class=\"angle\">&lt;</span><span class=\"type_param\">Args</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n@@ -91,7 +91,7 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"attribute attribute\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">derive</span><span class=\"parenthesis attribute\">(</span><span class=\"none attribute\">Copy</span><span class=\"parenthesis attribute\">)</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">FooCopy</span> <span class=\"brace\">{</span>\n     <span class=\"field declaration\">x</span><span class=\"colon\">:</span> <span class=\"builtin_type\">u32</span><span class=\"comma\">,</span>\n <span class=\"brace\">}</span>"}, {"sha": "81a98a606effabefcee00b1acc659ec6ee249be1", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -378,7 +378,7 @@ fn benchmark_syntax_highlighting_parser() {\n             .filter(|it| it.highlight.tag == HlTag::Symbol(SymbolKind::Function))\n             .count()\n     };\n-    assert_eq!(hash, 1632);\n+    assert_eq!(hash, 1616);\n }\n \n #[test]"}, {"sha": "8535e8a135a1e8e178e51a2f0e528c0417a3157b", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -45,6 +45,7 @@ define_semantic_token_types![\n     (BOOLEAN, \"boolean\"),\n     (BRACE, \"brace\"),\n     (BRACKET, \"bracket\"),\n+    (BUILTIN_ATTRIBUTE, \"builtinAttribute\"),\n     (BUILTIN_TYPE, \"builtinType\"),\n     (CHAR, \"character\"),\n     (COLON, \"colon\"),"}, {"sha": "5e440f0d996d06f611ee879c8dff3316e7f26e45", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13cbe64a5908cfc36629687a302be9568a06afa4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=13cbe64a5908cfc36629687a302be9568a06afa4", "patch": "@@ -464,6 +464,7 @@ fn semantic_token_type_and_modifiers(\n         },\n         HlTag::Attribute => semantic_tokens::ATTRIBUTE,\n         HlTag::BoolLiteral => semantic_tokens::BOOLEAN,\n+        HlTag::BuiltinAttr => semantic_tokens::BUILTIN_ATTRIBUTE,\n         HlTag::BuiltinType => semantic_tokens::BUILTIN_TYPE,\n         HlTag::ByteLiteral | HlTag::NumericLiteral => lsp_types::SemanticTokenType::NUMBER,\n         HlTag::CharLiteral => semantic_tokens::CHAR,"}]}