{"sha": "9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "node_id": "C_kwDOAAsO6NoAKDk3ODNmY2MxM2I4MzYyZDhjYzVkZGNhMWJjMWQ1Yjg3MTRiMTE3N2U", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-11T09:13:27Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2023-02-13T10:24:49Z"}, "message": "Make folding traits generic over the Interner", "tree": {"sha": "ceb9f9e513a280bfe58a71febe83181daed89df3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceb9f9e513a280bfe58a71febe83181daed89df3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEvrRBFuOXsbT1OVTHfUwvbCISJTIFAmPqD/ERHGVnZ3lhbEBn\nbWFpbC5jb20ACgkQfUwvbCISJTLtKhAAoV7TIh8HT/yYYvD2vNGwgLsBqt65oxpU\nGjNv/YwBH4skj3NW6sbh33XKt2kbODZ6qd6iEqHcFTg+/7eaibrfncRZsTDQRXkl\nhveXO48KxdoCxLtH8VF2yZxPyTFeLkGtm6ZhkqFqhmR58285wHgLi5xNc6dDwMxr\n0Xz2x9RPfL9jDWOCyFtVFmpOjUUEqDFhuzHvsF+DlCVdHFSnjRmQVyq3sBlI77Jq\npIH+LlyIG6bK3R6PmXSBnHD4lBJWS8xBeIIgkACGu9wF0UkradhYXqXwtSmv3eCO\nJhwCJX0RKR59OV2N4at+fZlaKjvg9Ozl/bK/K6C3FoYnYWEABg22GZkvhRfOHExW\nZ7H94lV1oKxUc6zxQiINqiYK7EwJuB1zAYSbV4yb2r1lv54qFiInGf0mnRHWomfR\n9PZOr2tSiVKI7Iprt91YcRSapgacNy+rrVHOM2ZQ6JhjvYJvw3XiwICgXop3qy9E\n7Kr/OOnh9LuA9eRwlbcvi/cOLEia4Ny7OHEkeXNeNpjwbxu7l4VQS+XxNlyD1Euf\nqyEVesSBJe3499nldenLHq1tI6UzSMEx40EWRDGVyFHTnGXjl8j5KwZP0KDPu1Qa\nssoz2/OqXIW7Y4m/l+23dxi6gDCpkkk2LUxakdliO6Dgb6GcDNUAw02H7UVFddQf\nrtR5WZeirio=\n=VC5x\n-----END PGP SIGNATURE-----", "payload": "tree ceb9f9e513a280bfe58a71febe83181daed89df3\nparent dea342d8615fcd0dd6638a3f0f1cda9062286d8e\nauthor Alan Egerton <eggyal@gmail.com> 1676106807 +0000\ncommitter Alan Egerton <eggyal@gmail.com> 1676283889 +0000\n\nMake folding traits generic over the Interner\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "html_url": "https://github.com/rust-lang/rust/commit/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dea342d8615fcd0dd6638a3f0f1cda9062286d8e", "html_url": "https://github.com/rust-lang/rust/commit/dea342d8615fcd0dd6638a3f0f1cda9062286d8e"}], "stats": {"total": 290, "additions": 160, "deletions": 130}, "files": [{"sha": "2b23a07657124b63ce495d1f905b7e7c3a5ca5aa", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -464,7 +464,7 @@ struct RemapLateBound<'a, 'tcx> {\n     mapping: &'a FxHashMap<ty::BoundRegionKind, ty::BoundRegionKind>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RemapLateBound<'_, 'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RemapLateBound<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -829,7 +829,7 @@ impl<'a, 'tcx> ImplTraitInTraitCollector<'a, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ImplTraitInTraitCollector<'_, 'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ImplTraitInTraitCollector<'_, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.ocx.infcx.tcx\n     }"}, {"sha": "0c6cdc35b92aa8ad2621ceb21726d72e770efcd5", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -850,7 +850,7 @@ fn infer_placeholder_type<'a>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for MakeNameable<'tcx> {\n         fn tcx(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "a27f6cc2a804278bc7886848683dd492d68e8cc8", "filename": "compiler/rustc_hir_analysis/src/hir_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fhir_wf_check.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -189,7 +189,7 @@ struct EraseAllBoundRegions<'tcx> {\n // us an inaccurate span for an error message, but cannot\n // lead to unsoundness (we call `delay_span_bug` at the start\n // of `diagnostic_hir_wf_check`).\n-impl<'tcx> TypeFolder<'tcx> for EraseAllBoundRegions<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseAllBoundRegions<'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "83afbcfad1fd33dd645e055cf0713ebdf7f2da11", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -963,7 +963,7 @@ fn is_builtin_binop<'tcx>(lhs: Ty<'tcx>, rhs: Ty<'tcx>, op: hir::BinOp) -> bool\n \n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n-impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for TypeParamEraser<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }"}, {"sha": "caa75ef2112b29b6dfd08edb3969bb3b20711820", "filename": "compiler/rustc_hir_typeck/src/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fwriteback.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -763,7 +763,7 @@ struct EraseEarlyRegions<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for EraseEarlyRegions<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -779,7 +779,7 @@ impl<'tcx> TypeFolder<'tcx> for EraseEarlyRegions<'tcx> {\n     }\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Resolver<'cx, 'tcx> {\n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "2895d477ce5239d4011f994d873a08c75c100438", "filename": "compiler/rustc_infer/src/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -326,7 +326,7 @@ struct Canonicalizer<'cx, 'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'cx, 'tcx> TypeFolder<'tcx> for Canonicalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> TypeFolder<TyCtxt<'tcx>> for Canonicalizer<'cx, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "4e0a09baf13db741ab98df959c6497f29a966520", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -844,7 +844,7 @@ struct ConstInferUnifier<'cx, 'tcx> {\n     target_vid: ty::ConstVid<'tcx>,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for ConstInferUnifier<'_, 'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for ConstInferUnifier<'_, 'tcx> {\n     type Error = TypeError<'tcx>;\n \n     fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {"}, {"sha": "9b9f34175e5dbc55a9399bd10dc12b8d52b66c73", "filename": "compiler/rustc_infer/src/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffreshen.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx> TypeFreshener<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for TypeFreshener<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for TypeFreshener<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "3520a0f07b7394a1fd2f6a72cee103a1e564194a", "filename": "compiler/rustc_infer/src/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ffudge.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -175,7 +175,7 @@ pub struct InferenceFudger<'a, 'tcx> {\n     const_vars: (Range<ConstVid<'tcx>>, Vec<ConstVariableOrigin>),\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for InferenceFudger<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceFudger<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "23904d90fa3f94016095974538d7b19ec7043276", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -1852,7 +1852,7 @@ struct InferenceLiteralEraser<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for InferenceLiteralEraser<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for InferenceLiteralEraser<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1870,7 +1870,7 @@ struct ShallowResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ShallowResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -2064,7 +2064,7 @@ fn replace_param_and_infer_substs_with_placeholder<'tcx>(\n         idx: u32,\n     }\n \n-    impl<'tcx> TypeFolder<'tcx> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n+    impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceParamAndInferWithPlaceholder<'tcx> {\n         fn tcx(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "553c8130c1bcd3911d899fd9a9abacd86a19155d", "filename": "compiler/rustc_infer/src/infer/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fresolve.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -31,7 +31,7 @@ impl<'a, 'tcx> OpportunisticVarResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticVarResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticVarResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         TypeFolder::tcx(&self.shallow_resolver)\n     }\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> OpportunisticRegionResolver<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for OpportunisticRegionResolver<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for OpportunisticRegionResolver<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -211,7 +211,7 @@ struct FullTypeResolver<'a, 'tcx> {\n     infcx: &'a InferCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> FallibleTypeFolder<'tcx> for FullTypeResolver<'a, 'tcx> {\n+impl<'a, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for FullTypeResolver<'a, 'tcx> {\n     type Error = FixupError<'tcx>;\n \n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {"}, {"sha": "95df6cd62b90bd59888a2812fa5fc0e5f888dc1e", "filename": "compiler/rustc_infer/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -61,7 +61,7 @@ impl<'tcx> fmt::Debug for traits::MismatchedProjectionTypes<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n \n-impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for traits::Obligation<'tcx, O> {\n+impl<'tcx, O: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for traits::Obligation<'tcx, O> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(traits::Obligation {\n             cause: self.cause,"}, {"sha": "95bb27ef4f423102d4699e43ecdb9365e180bbee", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -23,7 +23,7 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n     });\n \n     s.bound_impl(\n-        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<'tcx>),\n+        quote!(::rustc_middle::ty::fold::ir::TypeFoldable<::rustc_middle::ty::TyCtxt<'tcx>>),\n         quote! {\n             fn try_fold_with<__F: ::rustc_middle::ty::fold::FallibleTypeFolder<'tcx>>(\n                 self,"}, {"sha": "ada516aa0329d2cb47987fc90cc54cbb1c07a5cb", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -42,7 +42,7 @@ pub struct Canonical<'tcx, V> {\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n \n-impl<'tcx> ty::ir::TypeFoldable<'tcx> for CanonicalVarInfos<'tcx> {\n+impl<'tcx> ty::ir::TypeFoldable<TyCtxt<'tcx>> for CanonicalVarInfos<'tcx> {\n     fn try_fold_with<F: ty::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,"}, {"sha": "08cf12559d71177f2cafe029f709975955c4bcba", "filename": "compiler/rustc_middle/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmacros.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -69,7 +69,7 @@ macro_rules! CloneLiftImpls {\n macro_rules! TrivialTypeTraversalImpls {\n     (for <$tcx:lifetime> { $($ty:ty,)+ }) => {\n         $(\n-            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$tcx> for $ty {\n+            impl<$tcx> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $ty {\n                 fn try_fold_with<F: $crate::ty::fold::FallibleTypeFolder<$tcx>>(\n                     self,\n                     _: &mut F,\n@@ -121,7 +121,7 @@ macro_rules! EnumTypeTraversalImpl {\n     (impl<$($p:tt),*> TypeFoldable<$tcx:tt> for $s:path {\n         $($variants:tt)*\n     } $(where $($wc:tt)*)*) => {\n-        impl<$($p),*> $crate::ty::fold::ir::TypeFoldable<$tcx> for $s\n+        impl<$($p),*> $crate::ty::fold::ir::TypeFoldable<$crate::ty::TyCtxt<$tcx>> for $s\n             $(where $($wc)*)*\n         {\n             fn try_fold_with<V: $crate::ty::fold::FallibleTypeFolder<$tcx>>("}, {"sha": "e0dfc4bbddc77ebd5c42d096832559f96fd157a0", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -2742,7 +2742,7 @@ impl UserTypeProjection {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for UserTypeProjection {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for UserTypeProjection {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(UserTypeProjection {\n             base: self.base.try_fold_with(folder)?,"}, {"sha": "006085c0ef51c92b520dbe293663a812d94b7869", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -30,25 +30,25 @@ TrivialTypeTraversalImpls! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [InlineAsmTemplatePiece] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [InlineAsmTemplatePiece] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx [Span] {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx [Span] {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::List<PlaceElem<'tcx>> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<PlaceElem<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_place_elems(v))\n     }\n }\n \n-impl<'tcx, R: Idx, C: Idx> TypeFoldable<'tcx> for BitMatrix<R, C> {\n+impl<'tcx, R: Idx, C: Idx> TypeFoldable<TyCtxt<'tcx>> for BitMatrix<R, C> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }"}, {"sha": "de46a0b46b2d1680ac8610a5e88455d673d3b543", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -26,7 +26,7 @@ pub struct ExternalConstraintsData<'tcx> {\n     pub opaque_types: Vec<(Ty<'tcx>, Ty<'tcx>)>,\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ExternalConstraints<'tcx> {\n+impl<'tcx> TypeFoldable<TyCtxt<'tcx>> for ExternalConstraints<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(ir::FallibleTypeFolder::tcx(folder).intern_external_constraints(\n             ExternalConstraintsData {"}, {"sha": "232fa588fe55f9c907c3da86d96956aa5d6ee8f7", "filename": "compiler/rustc_middle/src/ty/abstract_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fabstract_const.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -52,7 +52,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             tcx: TyCtxt<'tcx>,\n         }\n \n-        impl<'tcx> TypeFolder<'tcx> for Expander<'tcx> {\n+        impl<'tcx> TypeFolder<TyCtxt<'tcx>> for Expander<'tcx> {\n             fn tcx(&self) -> TyCtxt<'tcx> {\n                 self.tcx\n             }"}, {"sha": "c848395d887637e1fa544937efe1cc7d54491b81", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -536,7 +536,7 @@ pub struct MakeSuggestableFolder<'tcx> {\n     infer_suggestable: bool,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for MakeSuggestableFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for MakeSuggestableFolder<'tcx> {\n     type Error = ();\n \n     fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "4cbbdf4126ee2689dce1f07486adb4eab1676078", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -34,7 +34,7 @@ struct RegionEraserVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for RegionEraserVisitor<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "f973c91f10dcc769288743b38e873c7038ed9be2", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 79, "deletions": 49, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -48,20 +48,20 @@ use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n \n-pub trait TypeFoldable<'tcx> = ir::TypeFoldable<'tcx> + TypeVisitable<'tcx>;\n-pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<'tcx>;\n-pub trait TypeFolder<'tcx> = ir::TypeFolder<'tcx>;\n-pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<'tcx>;\n+pub trait TypeFoldable<'tcx> = ir::TypeFoldable<TyCtxt<'tcx>> + TypeVisitable<'tcx>;\n+pub trait TypeSuperFoldable<'tcx> = ir::TypeSuperFoldable<TyCtxt<'tcx>>;\n+pub trait TypeFolder<'tcx> = ir::TypeFolder<TyCtxt<'tcx>>;\n+pub trait FallibleTypeFolder<'tcx> = ir::FallibleTypeFolder<TyCtxt<'tcx>>;\n \n pub mod ir {\n-    use crate::ty::{self, ir::TypeVisitable, Binder, Ty, TyCtxt};\n+    use crate::ty::{ir::TypeVisitable, Interner};\n \n     /// This trait is implemented for every type that can be folded,\n     /// providing the skeleton of the traversal.\n     ///\n     /// To implement this conveniently, use the derive macro located in\n     /// `rustc_macros`.\n-    pub trait TypeFoldable<'tcx>: TypeVisitable<TyCtxt<'tcx>> {\n+    pub trait TypeFoldable<I: Interner>: TypeVisitable<I> {\n         /// The entry point for folding. To fold a value `t` with a folder `f`\n         /// call: `t.try_fold_with(f)`.\n         ///\n@@ -72,36 +72,33 @@ pub mod ir {\n         /// calls a folder method specifically for that type (such as\n         /// `F::try_fold_ty`). This is where control transfers from `TypeFoldable`\n         /// to `TypeFolder`.\n-        fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n-            self,\n-            folder: &mut F,\n-        ) -> Result<Self, F::Error>;\n+        fn try_fold_with<F: FallibleTypeFolder<I>>(self, folder: &mut F) -> Result<Self, F::Error>;\n \n         /// A convenient alternative to `try_fold_with` for use with infallible\n         /// folders. Do not override this method, to ensure coherence with\n         /// `try_fold_with`.\n-        fn fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        fn fold_with<F: TypeFolder<I>>(self, folder: &mut F) -> Self {\n             self.try_fold_with(folder).into_ok()\n         }\n     }\n \n     // This trait is implemented for types of interest.\n-    pub trait TypeSuperFoldable<'tcx>: TypeFoldable<'tcx> {\n+    pub trait TypeSuperFoldable<I: Interner>: TypeFoldable<I> {\n         /// Provides a default fold for a type of interest. This should only be\n         /// called within `TypeFolder` methods, when a non-custom traversal is\n         /// desired for the value of the type of interest passed to that method.\n         /// For example, in `MyFolder::try_fold_ty(ty)`, it is valid to call\n         /// `ty.try_super_fold_with(self)`, but any other folding should be done\n         /// with `xyz.try_fold_with(self)`.\n-        fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n+        fn try_super_fold_with<F: FallibleTypeFolder<I>>(\n             self,\n             folder: &mut F,\n         ) -> Result<Self, F::Error>;\n \n         /// A convenient alternative to `try_super_fold_with` for use with\n         /// infallible folders. Do not override this method, to ensure coherence\n         /// with `try_super_fold_with`.\n-        fn super_fold_with<F: TypeFolder<'tcx>>(self, folder: &mut F) -> Self {\n+        fn super_fold_with<F: TypeFolder<I>>(self, folder: &mut F) -> Self {\n             self.try_super_fold_with(folder).into_ok()\n         }\n     }\n@@ -115,29 +112,42 @@ pub mod ir {\n     /// A blanket implementation of [`FallibleTypeFolder`] will defer to\n     /// the infallible methods of this trait to ensure that the two APIs\n     /// are coherent.\n-    pub trait TypeFolder<'tcx>: FallibleTypeFolder<'tcx, Error = !> {\n-        fn tcx(&self) -> TyCtxt<'tcx>;\n+    pub trait TypeFolder<I: Interner>: FallibleTypeFolder<I, Error = !> {\n+        fn tcx(&self) -> I;\n \n-        fn fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Binder<'tcx, T>\n+        fn fold_binder<T>(&mut self, t: I::Binder<T>) -> I::Binder<T>\n         where\n-            T: TypeFoldable<'tcx>,\n+            T: TypeFoldable<I>,\n+            I::Binder<T>: TypeSuperFoldable<I>,\n         {\n             t.super_fold_with(self)\n         }\n \n-        fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n+        fn fold_ty(&mut self, t: I::Ty) -> I::Ty\n+        where\n+            I::Ty: TypeSuperFoldable<I>,\n+        {\n             t.super_fold_with(self)\n         }\n \n-        fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        fn fold_region(&mut self, r: I::Region) -> I::Region\n+        where\n+            I::Region: TypeSuperFoldable<I>,\n+        {\n             r.super_fold_with(self)\n         }\n \n-        fn fold_const(&mut self, c: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        fn fold_const(&mut self, c: I::Const) -> I::Const\n+        where\n+            I::Const: TypeSuperFoldable<I>,\n+        {\n             c.super_fold_with(self)\n         }\n \n-        fn fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> ty::Predicate<'tcx> {\n+        fn fold_predicate(&mut self, p: I::Predicate) -> I::Predicate\n+        where\n+            I::Predicate: TypeSuperFoldable<I>,\n+        {\n             p.super_fold_with(self)\n         }\n     }\n@@ -149,73 +159,93 @@ pub mod ir {\n     /// A blanket implementation of this trait (that defers to the relevant\n     /// method of [`TypeFolder`]) is provided for all infallible folders in\n     /// order to ensure the two APIs are coherent.\n-    pub trait FallibleTypeFolder<'tcx>: Sized {\n+    pub trait FallibleTypeFolder<I: Interner>: Sized {\n         type Error;\n \n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n+        fn tcx<'a>(&'a self) -> I;\n \n-        fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, Self::Error>\n+        fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, Self::Error>\n         where\n-            T: TypeFoldable<'tcx>,\n+            T: TypeFoldable<I>,\n+            I::Binder<T>: TypeSuperFoldable<I>,\n         {\n             t.try_super_fold_with(self)\n         }\n \n-        fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n+        fn try_fold_ty(&mut self, t: I::Ty) -> Result<I::Ty, Self::Error>\n+        where\n+            I::Ty: TypeSuperFoldable<I>,\n+        {\n             t.try_super_fold_with(self)\n         }\n \n-        fn try_fold_region(\n-            &mut self,\n-            r: ty::Region<'tcx>,\n-        ) -> Result<ty::Region<'tcx>, Self::Error> {\n+        fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, Self::Error>\n+        where\n+            I::Region: TypeSuperFoldable<I>,\n+        {\n             r.try_super_fold_with(self)\n         }\n \n-        fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, Self::Error> {\n+        fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, Self::Error>\n+        where\n+            I::Const: TypeSuperFoldable<I>,\n+        {\n             c.try_super_fold_with(self)\n         }\n \n-        fn try_fold_predicate(\n-            &mut self,\n-            p: ty::Predicate<'tcx>,\n-        ) -> Result<ty::Predicate<'tcx>, Self::Error> {\n+        fn try_fold_predicate(&mut self, p: I::Predicate) -> Result<I::Predicate, Self::Error>\n+        where\n+            I::Predicate: TypeSuperFoldable<I>,\n+        {\n             p.try_super_fold_with(self)\n         }\n     }\n \n     // This blanket implementation of the fallible trait for infallible folders\n     // delegates to infallible methods to ensure coherence.\n-    impl<'tcx, F> FallibleTypeFolder<'tcx> for F\n+    impl<I: Interner, F> FallibleTypeFolder<I> for F\n     where\n-        F: TypeFolder<'tcx>,\n+        F: TypeFolder<I>,\n     {\n         type Error = !;\n \n-        fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n+        fn tcx<'a>(&'a self) -> I {\n             TypeFolder::tcx(self)\n         }\n \n-        fn try_fold_binder<T>(&mut self, t: Binder<'tcx, T>) -> Result<Binder<'tcx, T>, !>\n+        fn try_fold_binder<T>(&mut self, t: I::Binder<T>) -> Result<I::Binder<T>, !>\n         where\n-            T: TypeFoldable<'tcx>,\n+            T: TypeFoldable<I>,\n+            I::Binder<T>: TypeSuperFoldable<I>,\n         {\n             Ok(self.fold_binder(t))\n         }\n \n-        fn try_fold_ty(&mut self, t: Ty<'tcx>) -> Result<Ty<'tcx>, !> {\n+        fn try_fold_ty(&mut self, t: I::Ty) -> Result<I::Ty, !>\n+        where\n+            I::Ty: TypeSuperFoldable<I>,\n+        {\n             Ok(self.fold_ty(t))\n         }\n \n-        fn try_fold_region(&mut self, r: ty::Region<'tcx>) -> Result<ty::Region<'tcx>, !> {\n+        fn try_fold_region(&mut self, r: I::Region) -> Result<I::Region, !>\n+        where\n+            I::Region: TypeSuperFoldable<I>,\n+        {\n             Ok(self.fold_region(r))\n         }\n \n-        fn try_fold_const(&mut self, c: ty::Const<'tcx>) -> Result<ty::Const<'tcx>, !> {\n+        fn try_fold_const(&mut self, c: I::Const) -> Result<I::Const, !>\n+        where\n+            I::Const: TypeSuperFoldable<I>,\n+        {\n             Ok(self.fold_const(c))\n         }\n \n-        fn try_fold_predicate(&mut self, p: ty::Predicate<'tcx>) -> Result<ty::Predicate<'tcx>, !> {\n+        fn try_fold_predicate(&mut self, p: I::Predicate) -> Result<I::Predicate, !>\n+        where\n+            I::Predicate: TypeSuperFoldable<I>,\n+        {\n             Ok(self.fold_predicate(p))\n         }\n     }\n@@ -236,7 +266,7 @@ where\n     pub ct_op: H,\n }\n \n-impl<'tcx, F, G, H> ir::TypeFolder<'tcx> for BottomUpFolder<'tcx, F, G, H>\n+impl<'tcx, F, G, H> ir::TypeFolder<TyCtxt<'tcx>> for BottomUpFolder<'tcx, F, G, H>\n where\n     F: FnMut(Ty<'tcx>) -> Ty<'tcx>,\n     G: FnMut(ty::Region<'tcx>) -> ty::Region<'tcx>,\n@@ -326,7 +356,7 @@ impl<'a, 'tcx> RegionFolder<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> ir::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -400,7 +430,7 @@ impl<'tcx, D: BoundVarReplacerDelegate<'tcx>> BoundVarReplacer<'tcx, D> {\n     }\n }\n \n-impl<'tcx, D> ir::TypeFolder<'tcx> for BoundVarReplacer<'tcx, D>\n+impl<'tcx, D> ir::TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'tcx, D>\n where\n     D: BoundVarReplacerDelegate<'tcx>,\n {\n@@ -666,7 +696,7 @@ impl<'tcx> Shifter<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFolder<'tcx> for Shifter<'tcx> {\n+impl<'tcx> ir::TypeFolder<TyCtxt<'tcx>> for Shifter<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "212331f0b024c7dc82a056391d7a23173ca13d64", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -674,7 +674,7 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl<'tcx> ty::ir::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n+    impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "4ed0484438f2ed52ae20e1e0ecf963fb7181bbd1", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -917,7 +917,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for Term<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for Term<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Term<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self.unpack().try_fold_with(folder)?.pack())\n     }\n@@ -1619,7 +1619,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for ParamEnv<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for ParamEnv<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ParamEnv<'tcx> {\n     fn try_fold_with<F: ty::fold::FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,"}, {"sha": "68e1c3e569ffd28030c26bced4fccac582d34fa5", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -205,7 +205,7 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -241,7 +241,7 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "900134fe506bd558fba1f8cfa57230aee048001d", "filename": "compiler/rustc_middle/src/ty/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fopaque_types.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> ReverseMapper<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReverseMapper<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseMapper<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "8bec9ea1e3473423ec917e4940c3d72474425668", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -2221,7 +2221,7 @@ struct RegionFolder<'a, 'tcx> {\n             ),\n }\n \n-impl<'a, 'tcx> ty::ir::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n+impl<'a, 'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for RegionFolder<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "43f045c6335356cde748c1dfa0fc4e2200b27356", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -363,7 +363,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::ParamEnv<'a> {\n // TypeFoldable implementations.\n \n /// AdtDefs are basically the same as a DefId.\n-impl<'tcx> ir::TypeFoldable<'tcx> for ty::AdtDef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n@@ -375,7 +375,7 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::AdtDef<'tcx> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for (T, U) {\n+impl<'tcx, T: TypeFoldable<'tcx>, U: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for (T, U) {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -394,7 +394,7 @@ impl<'tcx, T: TypeVisitable<'tcx>, U: TypeVisitable<'tcx>> ir::TypeVisitable<TyC\n }\n \n impl<'tcx, A: TypeFoldable<'tcx>, B: TypeFoldable<'tcx>, C: TypeFoldable<'tcx>>\n-    ir::TypeFoldable<'tcx> for (A, B, C)\n+    ir::TypeFoldable<TyCtxt<'tcx>> for (A, B, C)\n {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n@@ -444,7 +444,7 @@ EnumTypeTraversalImpl! {\n     } where T: TypeVisitable<'tcx>, E: TypeVisitable<'tcx>,\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Rc<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Rc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n@@ -490,7 +490,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Rc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Arc<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Arc<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(\n         mut self,\n         folder: &mut F,\n@@ -536,7 +536,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Arc<T> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Box<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|value| value.try_fold_with(folder))\n     }\n@@ -548,7 +548,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<T> {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Vec<T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Vec<T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n@@ -566,7 +566,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &[T] {\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for Box<[T]> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for Box<[T]> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|t| t.try_fold_with(folder))\n     }\n@@ -578,7 +578,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for Box<[T]>\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_binder(self)\n     }\n@@ -590,7 +590,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Binde\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<'tcx> for ty::Binder<'tcx, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Binder<'tcx, T> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -605,25 +605,25 @@ impl<'tcx, T: TypeVisitable<'tcx>> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Bind\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::PolyExistentialPredicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_poly_existential_predicates(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::Const<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Const<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.mk_const_list(v.iter()))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ProjectionKind> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ProjectionKind> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_projs(v))\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_ty(self)\n     }\n@@ -635,7 +635,7 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for Ty<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for Ty<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -729,7 +729,7 @@ impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for Ty<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_region(self)\n     }\n@@ -741,7 +741,7 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Region<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         _folder: &mut F,\n@@ -756,7 +756,7 @@ impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Region<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_predicate(self)\n     }\n@@ -768,7 +768,7 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Predicate<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -784,13 +784,13 @@ impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Predicate<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<ty::Predicate<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<ty::Predicate<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         ty::util::fold_list(self, folder, |tcx, v| tcx.intern_predicates(v))\n     }\n }\n \n-impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> ir::TypeFoldable<'tcx> for IndexVec<I, T> {\n+impl<'tcx, T: TypeFoldable<'tcx>, I: Idx> ir::TypeFoldable<TyCtxt<'tcx>> for IndexVec<I, T> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         self.try_map_id(|x| x.try_fold_with(folder))\n     }\n@@ -802,7 +802,7 @@ impl<'tcx, T: TypeVisitable<'tcx>, I: Idx> ir::TypeVisitable<TyCtxt<'tcx>> for I\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         folder.try_fold_const(self)\n     }\n@@ -814,7 +814,7 @@ impl<'tcx> ir::TypeVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeSuperFoldable<'tcx> for ty::Const<'tcx> {\n+impl<'tcx> TypeSuperFoldable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     fn try_super_fold_with<F: FallibleTypeFolder<'tcx>>(\n         self,\n         folder: &mut F,\n@@ -836,7 +836,7 @@ impl<'tcx> TypeSuperVisitable<TyCtxt<'tcx>> for ty::Const<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for InferConst<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for InferConst<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, _folder: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }"}, {"sha": "12cab479cd9d592f21f3ea230eecc1ce95c7efaf", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -1149,7 +1149,7 @@ struct SkipBindersAt<'tcx> {\n     index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> FallibleTypeFolder<'tcx> for SkipBindersAt<'tcx> {\n+impl<'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for SkipBindersAt<'tcx> {\n     type Error = ();\n \n     fn tcx(&self) -> TyCtxt<'tcx> {"}, {"sha": "f4ddfc4633caae50df8c394027b2dd144789ffa0", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -227,7 +227,7 @@ impl<'a, 'tcx> Lift<'tcx> for GenericArg<'a> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for GenericArg<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for GenericArg<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.try_fold_with(folder).map(Into::into),\n@@ -475,7 +475,7 @@ impl<'tcx> InternalSubsts<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for SubstsRef<'tcx> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for SubstsRef<'tcx> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is hot enough that it's worth specializing for the most\n         // common length lists, to avoid the overhead of `SmallVec` creation.\n@@ -503,7 +503,7 @@ impl<'tcx> ir::TypeFoldable<'tcx> for SubstsRef<'tcx> {\n     }\n }\n \n-impl<'tcx> ir::TypeFoldable<'tcx> for &'tcx ty::List<Ty<'tcx>> {\n+impl<'tcx> ir::TypeFoldable<TyCtxt<'tcx>> for &'tcx ty::List<Ty<'tcx>> {\n     fn try_fold_with<F: FallibleTypeFolder<'tcx>>(self, folder: &mut F) -> Result<Self, F::Error> {\n         // This code is fairly hot, though not as hot as `SubstsRef`.\n         //\n@@ -553,7 +553,7 @@ impl<'tcx, T: TypeVisitable<'tcx>> ir::TypeVisitable<TyCtxt<'tcx>> for &'tcx ty:\n pub struct EarlyBinder<T>(pub T);\n \n /// For early binders, you should first call `subst` before using any visitors.\n-impl<'tcx, T> !ir::TypeFoldable<'tcx> for ty::EarlyBinder<T> {}\n+impl<'tcx, T> !ir::TypeFoldable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n impl<'tcx, T> !ir::TypeVisitable<TyCtxt<'tcx>> for ty::EarlyBinder<T> {}\n \n impl<T> EarlyBinder<T> {\n@@ -776,7 +776,7 @@ struct SubstFolder<'a, 'tcx> {\n     binders_passed: u32,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for SubstFolder<'a, 'tcx> {\n     #[inline]\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx"}, {"sha": "46e40e415c0e8282ed810461843725b7020a9e1a", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -842,7 +842,7 @@ impl<'tcx> OpaqueTypeExpander<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for OpaqueTypeExpander<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for OpaqueTypeExpander<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "51aa42ccd5fea20219c754cf649a0a078725fc4e", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -859,7 +859,7 @@ pub struct RegionReplacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "a94c7cdeeacf9c31658c00226a6def1db6251d03", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -2674,7 +2674,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             var_map: FxHashMap<Ty<'tcx>, Ty<'tcx>>,\n         }\n \n-        impl<'a, 'tcx> TypeFolder<'tcx> for ParamToVarFolder<'a, 'tcx> {\n+        impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for ParamToVarFolder<'a, 'tcx> {\n             fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n                 self.infcx.tcx\n             }"}, {"sha": "a497f26c60871f95f1a9c69910608317f1fb8ee3", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -4081,7 +4081,7 @@ struct ReplaceImplTraitFolder<'tcx> {\n     replace_ty: Ty<'tcx>,\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReplaceImplTraitFolder<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReplaceImplTraitFolder<'tcx> {\n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n         if let ty::Param(ty::ParamTy { index, .. }) = t.kind() {\n             if self.param.index == *index {"}, {"sha": "f5852485f550dbcfce5746a3e348a5ca562d497d", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -448,7 +448,7 @@ impl<'a, 'b, 'tcx> AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {\n         self.selcx.tcx()\n     }\n@@ -740,7 +740,7 @@ impl<'me, 'tcx> BoundVarReplacer<'me, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for BoundVarReplacer<'_, 'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for BoundVarReplacer<'_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }\n@@ -846,7 +846,7 @@ impl<'me, 'tcx> PlaceholderReplacer<'me, 'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for PlaceholderReplacer<'_, 'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for PlaceholderReplacer<'_, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "50bf6f5fdb58f3922ee8c76280561418b443cc21", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -170,7 +170,7 @@ struct QueryNormalizer<'cx, 'tcx> {\n     universes: Vec<Option<ty::UniverseIndex>>,\n }\n \n-impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n+impl<'cx, 'tcx> FallibleTypeFolder<TyCtxt<'tcx>> for QueryNormalizer<'cx, 'tcx> {\n     type Error = NoSolution;\n \n     fn tcx<'c>(&'c self) -> TyCtxt<'tcx> {"}, {"sha": "f87b1a6078645699e3a1294a340241082d076516", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -769,7 +769,7 @@ struct ReplaceOpaqueTyFolder<'tcx> {\n     binder_index: ty::DebruijnIndex,\n }\n \n-impl<'tcx> ty::ir::TypeFolder<'tcx> for ReplaceOpaqueTyFolder<'tcx> {\n+impl<'tcx> ty::ir::TypeFolder<TyCtxt<'tcx>> for ReplaceOpaqueTyFolder<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "416bc764f0099dcf00463ff12470c84dac313ac4", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -1007,7 +1007,7 @@ impl<'a, 'tcx> NamedBoundVarSubstitutor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for NamedBoundVarSubstitutor<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for NamedBoundVarSubstitutor<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1063,7 +1063,7 @@ impl<'tcx> ParamsSubstitutor<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ParamsSubstitutor<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ParamsSubstitutor<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1139,7 +1139,7 @@ impl<'tcx> ReverseParamsSubstitutor<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFolder<'tcx> for ReverseParamsSubstitutor<'tcx> {\n+impl<'tcx> TypeFolder<TyCtxt<'tcx>> for ReverseParamsSubstitutor<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "c86971aefbe603d91d0a6f469890246ae1ae243c", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=9783fcc13b8362d8cc5ddca1bc1d5b8714b1177e", "patch": "@@ -734,7 +734,7 @@ struct RegionReplacer<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> TypeFolder<'tcx> for RegionReplacer<'a, 'tcx> {\n+impl<'a, 'tcx> TypeFolder<TyCtxt<'tcx>> for RegionReplacer<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}]}