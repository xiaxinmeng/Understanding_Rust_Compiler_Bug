{"sha": "49d3a93c52e65b5b37370390dd352471c21dbaf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZDNhOTNjNTJlNjViNWIzNzM3MDM5MGRkMzUyNDcxYzIxZGJhZjc=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-14T10:03:14Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-07-14T10:10:40Z"}, "message": "save-analysis: fix def_ids for method calls\n\nWe were sometime emitting the decl as a def.", "tree": {"sha": "3bc64274f5fb8ecfb6b21b8d60a795f7029c44a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bc64274f5fb8ecfb6b21b8d60a795f7029c44a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49d3a93c52e65b5b37370390dd352471c21dbaf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49d3a93c52e65b5b37370390dd352471c21dbaf7", "html_url": "https://github.com/rust-lang/rust/commit/49d3a93c52e65b5b37370390dd352471c21dbaf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49d3a93c52e65b5b37370390dd352471c21dbaf7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94f13ac376f44711106f08175241ed909578de06", "url": "https://api.github.com/repos/rust-lang/rust/commits/94f13ac376f44711106f08175241ed909578de06", "html_url": "https://github.com/rust-lang/rust/commit/94f13ac376f44711106f08175241ed909578de06"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "5c10cc6aaa8dbe23003e61649cc228f5bde3651b", "filename": "src/librustc/ast_map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/49d3a93c52e65b5b37370390dd352471c21dbaf7/src%2Flibrustc%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d3a93c52e65b5b37370390dd352471c21dbaf7/src%2Flibrustc%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fast_map%2Fmod.rs?ref=49d3a93c52e65b5b37370390dd352471c21dbaf7", "patch": "@@ -411,6 +411,13 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem {\n+        match self.find(id) {\n+            Some(NodeTraitItem(item)) => item,\n+            _ => panic!(\"expected trait item, found {}\", self.node_to_string(id))\n+        }\n+    }\n+\n     pub fn expect_struct(&self, id: NodeId) -> &'ast StructDef {\n         match self.find(id) {\n             Some(NodeItem(i)) => {"}, {"sha": "26da803de6557538a42e487d35f663f7f59e1120", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/49d3a93c52e65b5b37370390dd352471c21dbaf7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49d3a93c52e65b5b37370390dd352471c21dbaf7/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=49d3a93c52e65b5b37370390dd352471c21dbaf7", "patch": "@@ -548,13 +548,12 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     let ti = self.tcx.impl_or_trait_item(decl_id);\n                     match provenence {\n                         def::FromTrait(def_id) => {\n-                            Some(self.tcx.trait_items(def_id)\n-                                    .iter()\n-                                    .find(|mr| {\n-                                        mr.name() == ti.name()\n-                                    })\n-                                    .unwrap()\n-                                    .def_id())\n+                            self.tcx.trait_items(def_id)\n+                                .iter()\n+                                .find(|mr| {\n+                                    mr.name() == ti.name() && self.trait_method_has_body(mr)\n+                                })\n+                                .map(|mr| mr.def_id())\n                         }\n                         def::FromImpl(def_id) => {\n                             let impl_items = self.tcx.impl_items.borrow();\n@@ -594,6 +593,20 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         }\n     }\n \n+    fn trait_method_has_body(&self, mr: &ty::ImplOrTraitItem) -> bool {\n+        let def_id = mr.def_id();\n+        if def_id.krate != ast::LOCAL_CRATE {\n+            return false;\n+        }\n+\n+        let trait_item = self.tcx.map.expect_trait_item(def_id.node);\n+        if let ast::TraitItem_::MethodTraitItem(_, Some(_)) = trait_item.node {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+\n     pub fn get_field_ref_data(&self,\n                               field_ref: &ast::Field,\n                               struct_id: DefId,"}]}