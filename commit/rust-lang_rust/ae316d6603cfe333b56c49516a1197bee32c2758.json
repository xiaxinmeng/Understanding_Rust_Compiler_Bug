{"sha": "ae316d6603cfe333b56c49516a1197bee32c2758", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMzE2ZDY2MDNjZmUzMzNiNTZjNDk1MTZhMTE5N2JlZTMyYzI3NTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-25T21:15:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-25T21:15:13Z"}, "message": "Rollup merge of #84499 - estebank:issue-84272, r=jackh726\n\nTweak trait not `use`d suggestion\n\nFix #84272. Follow up to #83667.", "tree": {"sha": "11ef4a6993acacd11b0e62e77dabad9f9d0275df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11ef4a6993acacd11b0e62e77dabad9f9d0275df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae316d6603cfe333b56c49516a1197bee32c2758", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJghdviCRBK7hj4Ov3rIwAAcGsIAJQuW/BIZFTeSbIxEapUWFp4\nyTO/Dr/WOwyReC6aB04uLt9kgihTs+0hy4HYyNMaHbBGasFv666oG03cDKmOSsKj\nYsjb3s1sr71YRqLwfHdWb/dk+1n8ZVCd7kLU8Pyum2BOZXPGtmhk92vkg9gzlIC7\nb87XGWfvtTctpVRiMYUvJhE8fDp/f8ik/RfEFGEGlAlqcbWcF50RaAfoHhSoPCxf\nP3pzMp2EbVTNzs1lfva270NJGstj/H6eiIg6xFqN+feyFy/L9PQGg3kki+joa3wp\nqd1c2ToEu4R9MRDHjxnf+iq5YpMb7DvA4pKnsGBJNBeqOVQWPpECqctkz69E6jE=\n=IeW1\n-----END PGP SIGNATURE-----\n", "payload": "tree 11ef4a6993acacd11b0e62e77dabad9f9d0275df\nparent a0dcbdf7fd826bac839fc7c8097f807812cc02a0\nparent fb1fb7d2ef45760bfe133381286dc750fe51e49e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1619385313 +0200\ncommitter GitHub <noreply@github.com> 1619385313 +0200\n\nRollup merge of #84499 - estebank:issue-84272, r=jackh726\n\nTweak trait not `use`d suggestion\n\nFix #84272. Follow up to #83667.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae316d6603cfe333b56c49516a1197bee32c2758", "html_url": "https://github.com/rust-lang/rust/commit/ae316d6603cfe333b56c49516a1197bee32c2758", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae316d6603cfe333b56c49516a1197bee32c2758/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0dcbdf7fd826bac839fc7c8097f807812cc02a0", "html_url": "https://github.com/rust-lang/rust/commit/a0dcbdf7fd826bac839fc7c8097f807812cc02a0"}, {"sha": "fb1fb7d2ef45760bfe133381286dc750fe51e49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1fb7d2ef45760bfe133381286dc750fe51e49e", "html_url": "https://github.com/rust-lang/rust/commit/fb1fb7d2ef45760bfe133381286dc750fe51e49e"}], "stats": {"total": 104, "additions": 96, "deletions": 8}, "files": [{"sha": "73e35f0171aa773b21358c50652487073c8887e4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -988,6 +988,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut alt_rcvr_sugg = false;\n         if let SelfSource::MethodCall(rcvr) = source {\n             debug!(?span, ?item_name, ?rcvr_ty, ?rcvr);\n+            let skippable = [\n+                self.tcx.lang_items().clone_trait(),\n+                self.tcx.lang_items().deref_trait(),\n+                self.tcx.lang_items().deref_mut_trait(),\n+                self.tcx.lang_items().drop_trait(),\n+            ];\n             // Try alternative arbitrary self types that could fulfill this call.\n             // FIXME: probe for all types that *could* be arbitrary self-types, not\n             // just this list.\n@@ -996,6 +1002,27 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (self.tcx.mk_mut_ref(&ty::ReErased, rcvr_ty), \"&mut \"),\n                 (self.tcx.mk_imm_ref(&ty::ReErased, rcvr_ty), \"&\"),\n             ] {\n+                if let Ok(pick) = self.lookup_probe(\n+                    span,\n+                    item_name,\n+                    rcvr_ty,\n+                    rcvr,\n+                    crate::check::method::probe::ProbeScope::AllTraits,\n+                ) {\n+                    // If the method is defined for the receiver we have, it likely wasn't `use`d.\n+                    // We point at the method, but we just skip the rest of the check for arbitrary\n+                    // self types and rely on the suggestion to `use` the trait from\n+                    // `suggest_valid_traits`.\n+                    let did = Some(pick.item.container.id());\n+                    let skip = skippable.contains(&did);\n+                    if pick.autoderefs == 0 && !skip {\n+                        err.span_label(\n+                            pick.item.ident.span,\n+                            &format!(\"the method is available for `{}` here\", rcvr_ty),\n+                        );\n+                    }\n+                    break;\n+                }\n                 for (rcvr_ty, pre) in &[\n                     (self.tcx.mk_lang_item(rcvr_ty, LangItem::OwnedBox), \"Box::new\"),\n                     (self.tcx.mk_lang_item(rcvr_ty, LangItem::Pin), \"Pin::new\"),\n@@ -1015,13 +1042,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // We don't want to suggest a container type when the missing\n                             // method is `.clone()` or `.deref()` otherwise we'd suggest\n                             // `Arc::new(foo).clone()`, which is far from what the user wants.\n-                            let skip = [\n-                                self.tcx.lang_items().clone_trait(),\n-                                self.tcx.lang_items().deref_trait(),\n-                                self.tcx.lang_items().deref_mut_trait(),\n-                                self.tcx.lang_items().drop_trait(),\n-                            ]\n-                            .contains(&did);\n+                            let skip = skippable.contains(&did);\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`\n@@ -1047,7 +1068,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n-        if !alt_rcvr_sugg && self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n+        if self.suggest_valid_traits(err, valid_out_of_scope_traits) {\n             return;\n         }\n "}, {"sha": "2913a955dce1b2cf37ff2c61d62528093fb1f549", "filename": "src/test/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `f` found for unit type `()` in the current scope\n   --> $DIR/trait_items.rs:17:24\n    |\n+LL |         fn f(&self) {}\n+   |            - the method is available for `()` here\n+...\n LL |     fn f() { ::baz::m!(); }\n    |              ------------ in this macro invocation\n ..."}, {"sha": "b993115502fd5f8cde39577ec156aa9a5e18824c", "filename": "src/test/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -37,6 +37,9 @@ LL | use no_method_suggested_traits::Reexported;\n error[E0599]: no method named `method` found for type `char` in the current scope\n   --> $DIR/no-method-suggested-traits.rs:30:9\n    |\n+LL |         fn method(&self) {}\n+   |            ------ the method is available for `char` here\n+...\n LL |     'a'.method();\n    |         ^^^^^^ method not found in `char`\n    |\n@@ -63,6 +66,11 @@ error[E0599]: no method named `method` found for type `i32` in the current scope\n    |\n LL |     1i32.method();\n    |          ^^^^^^ method not found in `i32`\n+   | \n+  ::: $DIR/auxiliary/no_method_suggested_traits.rs:8:12\n+   |\n+LL |         fn method(&self) {}\n+   |            ------ the method is available for `i32` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "3a3767c349d651a65d7dd877b67aa1198de0005d", "filename": "src/test/ui/issues/issue-43189.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43189.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -3,6 +3,11 @@ error[E0599]: no method named `a` found for unit type `()` in the current scope\n    |\n LL |     ().a();\n    |        ^ method not found in `()`\n+   | \n+  ::: $DIR/auxiliary/xcrate-issue-43189-a.rs:5:8\n+   |\n+LL |     fn a(&self) {}\n+   |        - the method is available for `()` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "e6b0fffce663dae0044dc9299e3126767d43178a", "filename": "src/test/ui/issues/issue-56175.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56175.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -3,6 +3,11 @@ error[E0599]: no method named `trait_method` found for struct `FooStruct` in the\n    |\n LL |     reexported_trait::FooStruct.trait_method();\n    |                                 ^^^^^^^^^^^^ method not found in `FooStruct`\n+   | \n+  ::: $DIR/auxiliary/reexported-trait.rs:3:12\n+   |\n+LL |         fn trait_method(&self) {\n+   |            ------------ the method is available for `FooStruct` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n@@ -15,6 +20,11 @@ error[E0599]: no method named `trait_method_b` found for struct `FooStruct` in t\n    |\n LL |     reexported_trait::FooStruct.trait_method_b();\n    |                                 ^^^^^^^^^^^^^^ method not found in `FooStruct`\n+   | \n+  ::: $DIR/auxiliary/reexported-trait.rs:7:12\n+   |\n+LL |         fn trait_method_b(&self) {\n+   |            -------------- the method is available for `FooStruct` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:"}, {"sha": "2cf5a073fe5c22334a30fb79d4f5b1c06f826b5f", "filename": "src/test/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `foobar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:22:11\n    |\n+LL |             fn foobar(&self) { }\n+   |                ------ the method is available for `u32` here\n+...\n LL |         x.foobar();\n    |           ^^^^^^ method not found in `u32`\n    |\n@@ -11,6 +14,9 @@ LL |         x.foobar();\n error[E0599]: no method named `bar` found for type `u32` in the current scope\n   --> $DIR/trait-import-suggestions.rs:28:7\n    |\n+LL |         fn bar(&self) { }\n+   |            --- the method is available for `u32` here\n+...\n LL |     x.bar();\n    |       ^^^ method not found in `u32`\n    |"}, {"sha": "c3b9084affdb3cbabf6f24cd57e1adeee6414d52", "filename": "src/test/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -1,6 +1,9 @@\n error[E0599]: no method named `f` found for unit type `()` in the current scope\n   --> $DIR/shadowed-trait-methods.rs:13:8\n    |\n+LL |     pub trait T { fn f(&self) {} }\n+   |                      - the method is available for `()` here\n+...\n LL |     ().f()\n    |        ^ method not found in `()`\n    |"}, {"sha": "646f68dea14e869e8c248c72e0a7b453776cf513", "filename": "src/test/ui/suggestions/import-trait-for-method-call.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.rs?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -0,0 +1,9 @@\n+use std::hash::BuildHasher;\n+\n+fn next_u64() -> u64 {\n+    let bh = std::collections::hash_map::RandomState::new();\n+    let h = bh.build_hasher();\n+    h.finish() //~ ERROR no method named `finish` found for struct `DefaultHasher`\n+}\n+\n+fn main() {}"}, {"sha": "f3ae20552f3d53c2293d1d0300f1aa71f01370e6", "filename": "src/test/ui/suggestions/import-trait-for-method-call.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -0,0 +1,20 @@\n+error[E0599]: no method named `finish` found for struct `DefaultHasher` in the current scope\n+  --> $DIR/import-trait-for-method-call.rs:6:7\n+   |\n+LL |     h.finish()\n+   |       ^^^^^^ method not found in `DefaultHasher`\n+   | \n+  ::: $SRC_DIR/core/src/hash/mod.rs:LL:COL\n+   |\n+LL |     fn finish(&self) -> u64;\n+   |        ------ the method is available for `DefaultHasher` here\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use std::hash::Hasher;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "30daf8e27702441b0504987446bc7d6c30d70a38", "filename": "src/test/ui/traits/item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae316d6603cfe333b56c49516a1197bee32c2758/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=ae316d6603cfe333b56c49516a1197bee32c2758", "patch": "@@ -20,6 +20,9 @@ error[E0599]: no method named `b` found for struct `S` in the current scope\n LL | struct S;\n    | --------- method `b` not found for this\n ...\n+LL |         fn b(&self) { }\n+   |            - the method is available for `S` here\n+...\n LL |     S.b();\n    |       ^ method not found in `S`\n    |"}]}