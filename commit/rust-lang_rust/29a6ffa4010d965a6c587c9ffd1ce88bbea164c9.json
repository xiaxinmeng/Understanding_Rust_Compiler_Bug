{"sha": "29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTZmZmE0MDEwZDk2NWE2YzU4N2M5ZmZkMWNlODhiYmVhMTY0Yzk=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2016-11-30T22:33:52Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2016-11-30T22:33:52Z"}, "message": "incr.comp.: Add more output to -Z incremental-info.", "tree": {"sha": "615d76eac49c78cca5e3d39a99d3ace705ec727e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/615d76eac49c78cca5e3d39a99d3ace705ec727e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "html_url": "https://github.com/rust-lang/rust/commit/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5db4826410b4ffcc0e4cb45566a0411a0858b6bf", "html_url": "https://github.com/rust-lang/rust/commit/5db4826410b4ffcc0e4cb45566a0411a0858b6bf"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "b67caa6750a81b59de426b5923fb98199345a6e7", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "patch": "@@ -24,6 +24,7 @@ use std::path::Path;\n use std::fs::File;\n use std::env;\n \n+use rustc::session::Session;\n use rustc::session::config::nightly_options;\n \n /// The first few bytes of files generated by incremental compilation\n@@ -59,7 +60,7 @@ pub fn write_file_header<W: io::Write>(stream: &mut W) -> io::Result<()> {\n ///   incompatible version of the compiler.\n /// - Returns `Err(..)` if some kind of IO error occurred while reading the\n ///   file.\n-pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> {\n+pub fn read_file(sess: &Session, path: &Path) -> io::Result<Option<Vec<u8>>> {\n     if !path.exists() {\n         return Ok(None);\n     }\n@@ -72,6 +73,7 @@ pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> {\n         let mut file_magic = [0u8; 4];\n         file.read_exact(&mut file_magic)?;\n         if file_magic != FILE_MAGIC {\n+            report_format_mismatch(sess, path, \"Wrong FILE_MAGIC\");\n             return Ok(None)\n         }\n     }\n@@ -85,6 +87,7 @@ pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> {\n                                     ((header_format_version[1] as u16) << 8);\n \n         if header_format_version != HEADER_FORMAT_VERSION {\n+            report_format_mismatch(sess, path, \"Wrong HEADER_FORMAT_VERSION\");\n             return Ok(None)\n         }\n     }\n@@ -99,6 +102,7 @@ pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> {\n         file.read_exact(&mut buffer[..])?;\n \n         if &buffer[..] != rustc_version().as_bytes() {\n+            report_format_mismatch(sess, path, \"Different compiler version\");\n             return Ok(None);\n         }\n     }\n@@ -109,6 +113,16 @@ pub fn read_file(path: &Path) -> io::Result<Option<Vec<u8>>> {\n     Ok(Some(data))\n }\n \n+fn report_format_mismatch(sess: &Session, file: &Path, message: &str) {\n+    debug!(\"read_file: {}\", message);\n+\n+    if sess.opts.debugging_opts.incremental_info {\n+        println!(\"incremental: ignoring cache artifact `{}`: {}\",\n+                 file.file_name().unwrap().to_string_lossy(),\n+                 message);\n+    }\n+}\n+\n fn rustc_version() -> String {\n     if nightly_options::is_nightly_build() {\n         if let Some(val) = env::var_os(\"RUSTC_FORCE_INCR_COMP_ARTIFACT_HEADER\") {"}, {"sha": "2ad37e98c708a1af3e797d98e4f38812d7533c7f", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "patch": "@@ -435,8 +435,8 @@ fn copy_files(target_dir: &Path,\n     }\n \n     if print_stats_on_success {\n-        println!(\"incr. comp. session directory: {} files hard-linked\", files_linked);\n-        println!(\"incr. comp. session directory: {} files copied\", files_copied);\n+        println!(\"incremental: session directory: {} files hard-linked\", files_linked);\n+        println!(\"incremental: session directory: {} files copied\", files_copied);\n     }\n \n     Ok(files_linked > 0 || files_copied == 0)"}, {"sha": "e5203ea02b45a8095ba4c1b14b3810d7660a4535", "filename": "src/librustc_incremental/persist/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fhash.rs?ref=29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "patch": "@@ -156,7 +156,7 @@ impl<'a, 'tcx> HashContext<'a, 'tcx> {\n \n             let hashes_file_path = metadata_hash_import_path(&session_dir);\n \n-            match file_format::read_file(&hashes_file_path)\n+            match file_format::read_file(self.tcx.sess, &hashes_file_path)\n             {\n                 Ok(Some(data)) => {\n                     match self.load_from_data(cnum, &data, svh) {"}, {"sha": "ec7e0bf2cf7fc1599e7f25e0fa96d07bedd15fff", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "patch": "@@ -93,7 +93,7 @@ fn load_dep_graph_if_exists<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn load_data(sess: &Session, path: &Path) -> Option<Vec<u8>> {\n-    match file_format::read_file(path) {\n+    match file_format::read_file(sess, path) {\n         Ok(Some(data)) => return Some(data),\n         Ok(None) => {\n             // The file either didn't exist or was produced by an incompatible\n@@ -132,6 +132,10 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let prev_commandline_args_hash = u64::decode(&mut dep_graph_decoder)?;\n \n     if prev_commandline_args_hash != tcx.sess.opts.dep_tracking_hash() {\n+        if tcx.sess.opts.debugging_opts.incremental_info {\n+            println!(\"incremental: completely ignoring cache because of \\\n+                      differing commandline arguments\");\n+        }\n         // We can't reuse the cache, purge it.\n         debug!(\"decode_dep_graph: differing commandline arg hashes\");\n         for swp in work_products {\n@@ -192,7 +196,8 @@ pub fn decode_dep_graph<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 if tcx.sess.opts.debugging_opts.incremental_info {\n                     // It'd be nice to pretty-print these paths better than just\n                     // using the `Debug` impls, but wev.\n-                    println!(\"module {:?} is dirty because {:?} changed or was removed\",\n+                    println!(\"incremental: module {:?} is dirty because {:?} \\\n+                              changed or was removed\",\n                              target_node,\n                              raw_source_node.map_def(|&index| {\n                                  Some(directory.def_path_string(tcx, index))\n@@ -277,14 +282,19 @@ fn reconcile_work_products<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"reconcile_work_products: dep-node for {:?} is dirty\", swp);\n             delete_dirty_work_product(tcx, swp);\n         } else {\n-            let all_files_exist =\n-                swp.work_product\n-                   .saved_files\n-                   .iter()\n-                   .all(|&(_, ref file_name)| {\n-                       let path = in_incr_comp_dir_sess(tcx.sess, &file_name);\n-                       path.exists()\n-                   });\n+            let mut all_files_exist = true;\n+            for &(_, ref file_name) in swp.work_product.saved_files.iter() {\n+                let path = in_incr_comp_dir_sess(tcx.sess, file_name);\n+                if !path.exists() {\n+                    all_files_exist = false;\n+\n+                    if tcx.sess.opts.debugging_opts.incremental_info {\n+                        println!(\"incremental: could not find file for up-to-date work product: {}\",\n+                                 path.display());\n+                    }\n+                }\n+            }\n+\n             if all_files_exist {\n                 debug!(\"reconcile_work_products: all files for {:?} exist\", swp);\n                 tcx.dep_graph.insert_previous_work_product(&swp.id, swp.work_product);\n@@ -331,7 +341,7 @@ fn load_prev_metadata_hashes(tcx: TyCtxt,\n \n     debug!(\"load_prev_metadata_hashes() - File: {}\", file_path.display());\n \n-    let data = match file_format::read_file(&file_path) {\n+    let data = match file_format::read_file(tcx.sess, &file_path) {\n         Ok(Some(data)) => data,\n         Ok(None) => {\n             debug!(\"load_prev_metadata_hashes() - File produced by incompatible \\"}, {"sha": "259ef2a780cc251fb6a594dc86afd876531da619", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a6ffa4010d965a6c587c9ffd1ce88bbea164c9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=29a6ffa4010d965a6c587c9ffd1ce88bbea164c9", "patch": "@@ -1981,6 +1981,11 @@ fn trans_reuse_previous_work_products(tcx: TyCtxt,\n                     debug!(\"trans_reuse_previous_work_products: reusing {:?}\", work_product);\n                     return Some(work_product);\n                 } else {\n+                    if tcx.sess.opts.debugging_opts.incremental_info {\n+                        println!(\"incremental: CGU `{}` invalidated because of \\\n+                                  changed partitioning hash.\",\n+                                  cgu.name());\n+                    }\n                     debug!(\"trans_reuse_previous_work_products: \\\n                             not reusing {:?} because hash changed to {:?}\",\n                            work_product, hash);"}]}