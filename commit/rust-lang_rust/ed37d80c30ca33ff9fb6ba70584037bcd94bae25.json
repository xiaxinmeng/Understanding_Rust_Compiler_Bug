{"sha": "ed37d80c30ca33ff9fb6ba70584037bcd94bae25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMzdkODBjMzBjYTMzZmY5ZmI2YmE3MDU4NDAzN2JjZDk0YmFlMjU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-30T10:55:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-30T10:55:33Z"}, "message": "Rollup merge of #55476 - ljedrz:flat_map_to_filter_map, r=cramertj\n\nChange a flat_map with 0/1-element vecs to a filter_map\n\nNo need to use vectors in this case - `Option`s are quite sufficient.", "tree": {"sha": "61b51720233301725842512e70363f01fc982f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61b51720233301725842512e70363f01fc982f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed37d80c30ca33ff9fb6ba70584037bcd94bae25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb2DilCRBK7hj4Ov3rIwAAdHIIAALG4PnVP5v2mMP16Uey4wrI\nlWSfz4FE7aCcrj/fVU273eREx6Mm49o9efxRjuKZgs16BARG5oO9vzqbvJACrV9z\ngVzXiml2U5PFLKjGJiT1R9uk94WofFKCUj6BthCnxgCetfR6B9S1PkJoT7uUjROr\n87o50A2DlWmgq+R5W7Blx+/6AhYLZ0ZW3sv2R6IhnlZIWE7WdYvm/2sYkhRsO7GM\nBBQDg4RbzTav2lTxdwwzpt07N88nEJU3hRBOiHgkhOKDEhc5wfKkaAF/Xucr/jdR\nvQY7EFTgvezUyCvTot09dw6ihfBQGc9D5Reuo3Y0m14K8EAeLE08EEMhOYA9b3k=\n=ThjU\n-----END PGP SIGNATURE-----\n", "payload": "tree 61b51720233301725842512e70363f01fc982f0a\nparent 3176239d344d501895220ef62b63da5dfc66d445\nparent bb3e77d28443835d03c0148bfeb84ecad56b986d\nauthor kennytm <kennytm@gmail.com> 1540896933 +0800\ncommitter GitHub <noreply@github.com> 1540896933 +0800\n\nRollup merge of #55476 - ljedrz:flat_map_to_filter_map, r=cramertj\n\nChange a flat_map with 0/1-element vecs to a filter_map\n\nNo need to use vectors in this case - `Option`s are quite sufficient.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed37d80c30ca33ff9fb6ba70584037bcd94bae25", "html_url": "https://github.com/rust-lang/rust/commit/ed37d80c30ca33ff9fb6ba70584037bcd94bae25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed37d80c30ca33ff9fb6ba70584037bcd94bae25/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3176239d344d501895220ef62b63da5dfc66d445", "url": "https://api.github.com/repos/rust-lang/rust/commits/3176239d344d501895220ef62b63da5dfc66d445", "html_url": "https://github.com/rust-lang/rust/commit/3176239d344d501895220ef62b63da5dfc66d445"}, {"sha": "bb3e77d28443835d03c0148bfeb84ecad56b986d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3e77d28443835d03c0148bfeb84ecad56b986d", "html_url": "https://github.com/rust-lang/rust/commit/bb3e77d28443835d03c0148bfeb84ecad56b986d"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "cde08f6832ace274442b89c18e51996c782ed491", "filename": "src/librustc_traits/implied_outlives_bounds.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed37d80c30ca33ff9fb6ba70584037bcd94bae25/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed37d80c30ca33ff9fb6ba70584037bcd94bae25/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fimplied_outlives_bounds.rs?ref=ed37d80c30ca33ff9fb6ba70584037bcd94bae25", "patch": "@@ -159,14 +159,14 @@ fn implied_bounds_from_components(\n ) -> Vec<OutlivesBound<'tcx>> {\n     sup_components\n         .into_iter()\n-        .flat_map(|component| {\n+        .filter_map(|component| {\n             match component {\n                 Component::Region(r) =>\n-                    vec![OutlivesBound::RegionSubRegion(sub_region, r)],\n+                    Some(OutlivesBound::RegionSubRegion(sub_region, r)),\n                 Component::Param(p) =>\n-                    vec![OutlivesBound::RegionSubParam(sub_region, p)],\n+                    Some(OutlivesBound::RegionSubParam(sub_region, p)),\n                 Component::Projection(p) =>\n-                    vec![OutlivesBound::RegionSubProjection(sub_region, p)],\n+                    Some(OutlivesBound::RegionSubProjection(sub_region, p)),\n                 Component::EscapingProjection(_) =>\n                 // If the projection has escaping regions, don't\n                 // try to infer any implied bounds even for its\n@@ -176,9 +176,9 @@ fn implied_bounds_from_components(\n                 // idea is that the WAY that the caller proves\n                 // that may change in the future and we want to\n                 // give ourselves room to get smarter here.\n-                    vec![],\n+                    None,\n                 Component::UnresolvedInferenceVariable(..) =>\n-                    vec![],\n+                    None,\n             }\n         })\n         .collect()"}]}