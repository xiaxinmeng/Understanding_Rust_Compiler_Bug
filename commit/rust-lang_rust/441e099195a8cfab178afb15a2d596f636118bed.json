{"sha": "441e099195a8cfab178afb15a2d596f636118bed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0MWUwOTkxOTVhOGNmYWIxNzhhZmIxNWEyZDU5NmY2MzYxMThiZWQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-29T12:39:24Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_metadata: fix compilation", "tree": {"sha": "d41a684df9a1ea16f02c9255a1e89449aae9c678", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d41a684df9a1ea16f02c9255a1e89449aae9c678"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/441e099195a8cfab178afb15a2d596f636118bed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/441e099195a8cfab178afb15a2d596f636118bed", "html_url": "https://github.com/rust-lang/rust/commit/441e099195a8cfab178afb15a2d596f636118bed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/441e099195a8cfab178afb15a2d596f636118bed/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "html_url": "https://github.com/rust-lang/rust/commit/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "69e1ecb5f81709ba145174f5a48cc7ba66565054", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/441e099195a8cfab178afb15a2d596f636118bed/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e099195a8cfab178afb15a2d596f636118bed/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=441e099195a8cfab178afb15a2d596f636118bed", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir;\n use rustc::hir::map as ast_map;\n \n-use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange};\n+use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange, NestedVisitMode};\n \n use cstore::CrateMetadata;\n use encoder::EncodeContext;\n@@ -43,7 +44,7 @@ enum TableEntry<'tcx> {\n }\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n-    pub fn encode_inlined_item(&mut self, ii: InlinedItemRef) -> Lazy<Ast<'tcx>> {\n+    pub fn encode_inlined_item(&mut self, ii: InlinedItemRef<'tcx>) -> Lazy<Ast<'tcx>> {\n         let mut id_visitor = IdRangeComputingVisitor::new(&self.tcx.map);\n         match ii {\n             InlinedItemRef::Item(_, i) => id_visitor.visit_item(i),\n@@ -81,7 +82,11 @@ struct SideTableEncodingIdVisitor<'a, 'b: 'a, 'tcx: 'b> {\n     count: usize,\n }\n \n-impl<'a, 'b, 'tcx, 'v> Visitor<'v> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n+impl<'a, 'b, 'tcx> Visitor<'tcx> for SideTableEncodingIdVisitor<'a, 'b, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.ecx.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n+\n     fn visit_id(&mut self, id: ast::NodeId) {\n         debug!(\"Encoding side tables for id {}\", id);\n "}, {"sha": "ca730afc52ad42a9819178efe9f697ff5f1f71e6", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/441e099195a8cfab178afb15a2d596f636118bed/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/441e099195a8cfab178afb15a2d596f636118bed/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=441e099195a8cfab178afb15a2d596f636118bed", "patch": "@@ -39,7 +39,7 @@ use syntax_pos;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n-use rustc::hir::intravisit::Visitor;\n+use rustc::hir::intravisit::{Visitor, NestedVisitMode};\n use rustc::hir::intravisit;\n \n use super::index_builder::{FromId, IndexBuilder, Untracked};\n@@ -630,7 +630,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.tcx.lookup_deprecation(def_id).map(|depr| self.lazy(&depr))\n     }\n \n-    fn encode_info_for_item(&mut self, (def_id, item): (DefId, &hir::Item)) -> Entry<'tcx> {\n+    fn encode_info_for_item(&mut self, (def_id, item): (DefId, &'tcx hir::Item)) -> Entry<'tcx> {\n         let tcx = self.tcx;\n \n         debug!(\"encoding info for item at {}\",\n@@ -973,6 +973,9 @@ struct EncodeVisitor<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.index.tcx.map, NestedVisitMode::OnlyBodies))\n+    }\n     fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n         intravisit::walk_expr(self, ex);\n         self.index.encode_info_for_expr(ex);"}]}