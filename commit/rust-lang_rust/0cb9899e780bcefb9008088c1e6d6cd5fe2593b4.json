{"sha": "0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "node_id": "C_kwDOAAsO6NoAKDBjYjk4OTllNzgwYmNlZmI5MDA4MDg4YzFlNmQ2Y2Q1ZmUyNTkzYjQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T17:30:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-17T17:30:16Z"}, "message": "Auto merge of #97892 - klensy:fix-spaces, r=oli-obk\n\ndiagnostics: remove trailing spaces\n\nRemove few occurrences of trailing spaces and drive by fix of needless alloc of const string.", "tree": {"sha": "99ff5236e8bf7662db9f6071acec6369d560272f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99ff5236e8bf7662db9f6071acec6369d560272f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "html_url": "https://github.com/rust-lang/rust/commit/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43c47db0b04627dbd0e16a1e7cad14a4a5a60d3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/43c47db0b04627dbd0e16a1e7cad14a4a5a60d3a", "html_url": "https://github.com/rust-lang/rust/commit/43c47db0b04627dbd0e16a1e7cad14a4a5a60d3a"}, {"sha": "6fc412fb73e64c22e028b082d05c4b31c6b96a17", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc412fb73e64c22e028b082d05c4b31c6b96a17", "html_url": "https://github.com/rust-lang/rust/commit/6fc412fb73e64c22e028b082d05c4b31c6b96a17"}], "stats": {"total": 1470, "additions": 737, "deletions": 733}, "files": [{"sha": "a4cbc73978d5b6a356eab7842acd3467e9e4038d", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -771,8 +771,12 @@ impl EmitterWriter {\n         self\n     }\n \n-    fn maybe_anonymized(&self, line_num: usize) -> String {\n-        if self.ui_testing { ANONYMIZED_LINE_NUM.to_string() } else { line_num.to_string() }\n+    fn maybe_anonymized(&self, line_num: usize) -> Cow<'static, str> {\n+        if self.ui_testing {\n+            Cow::Borrowed(ANONYMIZED_LINE_NUM)\n+        } else {\n+            Cow::Owned(line_num.to_string())\n+        }\n     }\n \n     fn draw_line(\n@@ -819,7 +823,7 @@ impl EmitterWriter {\n         }\n         buffer.puts(line_offset, 0, &self.maybe_anonymized(line_index), Style::LineNumber);\n \n-        draw_col_separator(buffer, line_offset, width_offset - 2);\n+        draw_col_separator_no_space(buffer, line_offset, width_offset - 2);\n     }\n \n     fn render_source_line(\n@@ -1929,7 +1933,7 @@ impl EmitterWriter {\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n             if let DisplaySuggestion::Diff | DisplaySuggestion::Underline = show_code_change {\n-                draw_col_separator(&mut buffer, row_num, max_line_num_len + 1);\n+                draw_col_separator_no_space(&mut buffer, row_num, max_line_num_len + 1);\n                 for part in parts {\n                     let span_start_pos = sm.lookup_char_pos(part.span.lo()).col_display;\n                     let span_end_pos = sm.lookup_char_pos(part.span.hi()).col_display;"}, {"sha": "ee35749ce7f43be802e3190b0c6bd3df7a66cab3", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -68,7 +68,7 @@ help: to link to the macro, add an exclamation mark\n    |\n LL - /// Link to [derive@m]\n LL + /// Link to [m!]\n-   | \n+   |\n \n error: unresolved link to `m`\n   --> $DIR/disambiguator-mismatch.rs:46:14\n@@ -124,7 +124,7 @@ help: to link to the constant, prefix with `const@`\n    |\n LL - /// Link to [c()]\n LL + /// Link to [const@c]\n-   | \n+   |\n \n error: incompatible link kind for `f`\n   --> $DIR/disambiguator-mismatch.rs:72:14\n@@ -136,7 +136,7 @@ help: to link to the function, add parentheses\n    |\n LL - /// Link to [const@f]\n LL + /// Link to [f()]\n-   | \n+   |\n \n error: unresolved link to `std`\n   --> $DIR/disambiguator-mismatch.rs:77:14"}, {"sha": "9a1896fb0cd6375e650c85d78a110c6ecc9adca9", "filename": "src/test/rustdoc-ui/intra-doc/errors.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Ferrors.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -98,7 +98,7 @@ help: to link to the associated function, add parentheses\n    |\n LL - /// [type@Vec::into_iter]\n LL + /// [Vec::into_iter()]\n-   | \n+   |\n \n error: unresolved link to `S`\n   --> $DIR/errors.rs:68:6\n@@ -110,7 +110,7 @@ help: to link to the struct, prefix with `struct@`\n    |\n LL - /// [S!]\n LL + /// [struct@S]\n-   | \n+   |\n \n error: unresolved link to `S::h`\n   --> $DIR/errors.rs:78:6\n@@ -122,7 +122,7 @@ help: to link to the associated function, add parentheses\n    |\n LL - /// [type@S::h]\n LL + /// [S::h()]\n-   | \n+   |\n \n error: unresolved link to `T::g`\n   --> $DIR/errors.rs:86:6\n@@ -134,7 +134,7 @@ help: to link to the associated function, add parentheses\n    |\n LL - /// [type@T::g]\n LL + /// [T::g()]\n-   | \n+   |\n \n error: unresolved link to `T::h`\n   --> $DIR/errors.rs:91:6"}, {"sha": "72915e46becd34896f75647ea492afd871300163", "filename": "src/test/rustdoc-ui/test-compile-fail1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-compile-fail1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `f` is defined multiple times\n   |\n 6 | pub fn f() {}\n   | ---------- previous definition of the value `f` here\n-7 | \n+7 |\n 8 | pub fn f() {}\n   | ^^^^^^^^^^ `f` redefined here\n   |"}, {"sha": "62ddabea0d72df9829c0ded4326515af3c431859", "filename": "src/test/ui/argument-suggestions/issue-97484.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fargument-suggestions%2Fissue-97484.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -16,7 +16,7 @@ help: consider removing the ``\n    |\n LL -     foo(&&A, B, C, D, E, F, G);\n LL +     foo(&&A, B, C, D, E, F, G);\n-   | \n+   |\n help: remove the extra arguments\n    |\n LL |     foo(&&A, D, {&E}, G);"}, {"sha": "5a997b47d73eb5d9e6fd1b2abd59ecdf273d3d5c", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -58,7 +58,7 @@ help: consider removing the borrow\n    |\n LL -         asm!(\"{}\", const &0);\n LL +         asm!(\"{}\", const 0);\n-   | \n+   |\n \n error: invalid asm output\n   --> $DIR/type-check-1.rs:15:29"}, {"sha": "c22b80b889edce37b37993146d8cba2c9b8b2505", "filename": "src/test/ui/associated-type-bounds/type-alias.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Ftype-alias.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere1<T> where T: Iterator<Item: Copy> = T;\n LL + type _TaWhere1<T>  = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:6:25\n@@ -21,7 +21,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere2<T> where T: Iterator<Item: 'static> = T;\n LL + type _TaWhere2<T>  = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:7:25\n@@ -33,7 +33,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere3<T> where T: Iterator<Item: 'static> = T;\n LL + type _TaWhere3<T>  = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:8:25\n@@ -45,7 +45,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere4<T> where T: Iterator<Item: 'static + Copy + Send> = T;\n LL + type _TaWhere4<T>  = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:9:25\n@@ -57,7 +57,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere5<T> where T: Iterator<Item: for<'a> Into<&'a u8>> = T;\n LL + type _TaWhere5<T>  = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias.rs:10:25\n@@ -69,7 +69,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type _TaWhere6<T> where T: Iterator<Item: Iterator<Item: Copy>> = T;\n LL + type _TaWhere6<T>  = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:12:20\n@@ -81,7 +81,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline1<T: Iterator<Item: Copy>> = T;\n LL + type _TaInline1<T> = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:13:20\n@@ -93,7 +93,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline2<T: Iterator<Item: 'static>> = T;\n LL + type _TaInline2<T> = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:14:20\n@@ -105,7 +105,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline3<T: Iterator<Item: 'static>> = T;\n LL + type _TaInline3<T> = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:15:20\n@@ -117,7 +117,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline4<T: Iterator<Item: 'static + Copy + Send>> = T;\n LL + type _TaInline4<T> = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:16:20\n@@ -129,7 +129,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline5<T: Iterator<Item: for<'a> Into<&'a u8>>> = T;\n LL + type _TaInline5<T> = T;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias.rs:17:20\n@@ -141,7 +141,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type _TaInline6<T: Iterator<Item: Iterator<Item: Copy>>> = T;\n LL + type _TaInline6<T> = T;\n-   | \n+   |\n \n warning: 12 warnings emitted\n "}, {"sha": "2d61b2a647bfde4c37279de0274eba367c8c7235", "filename": "src/test/ui/associated-types/defaults-specialization.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-specialization.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -30,7 +30,7 @@ error[E0053]: method `make` has an incompatible type for trait\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n-LL | \n+LL |\n LL |     fn make() -> bool { true }\n    |                  ^^^^\n    |                  |\n@@ -50,7 +50,7 @@ error[E0308]: mismatched types\n    |\n LL |     type Ty = u8;\n    |     ------------- associated type defaults can't be assumed inside the trait defining them\n-LL | \n+LL |\n LL |     fn make() -> Self::Ty {\n    |                  -------- expected `<Self as Tr>::Ty` because of return type\n LL |         0u8\n@@ -77,7 +77,7 @@ error[E0308]: mismatched types\n    |\n LL |     default type Ty = bool;\n    |     ----------------------- expected this associated type\n-LL | \n+LL |\n LL |     fn make() -> Self::Ty { true }\n    |                  --------   ^^^^ expected associated type, found `bool`\n    |                  |"}, {"sha": "71655d54baa2c21253c8f16453e94d8390637b78", "filename": "src/test/ui/associated-types/issue-22560.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-22560.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL | / trait Sub<Rhs=Self> {\n LL | |     type Output;\n LL | | }\n    | |_- type parameter `Rhs` must be specified for this\n-LL | \n+LL |\n LL |   type Test = dyn Add + Sub;\n    |                         ^^^ help: set the type parameter to the desired type: `Sub<Rhs>`\n    |"}, {"sha": "80e42b61d2057ea1a045d6ec6d41176d9bcea655", "filename": "src/test/ui/associated-types/issue-36499.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-36499.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: try removing the `+`\n    |\n LL -     2 + +2;\n LL +     2 + 2;\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "492e06fbbc06c93d508bb0c5b570fec006294efb", "filename": "src/test/ui/async-await/issue-67765-async-diagnostic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67765-async-diagnostic.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0515]: cannot return value referencing local variable `s`\n    |\n LL |     let b = &s[..];\n    |              - `s` is borrowed here\n-LL | \n+LL |\n LL |     Err(b)?;\n    |     ^^^^^^^ returns a value referencing data owned by the current function\n "}, {"sha": "a88bce6cc99a9a74e758ec26f68bf1acc52ddc9c", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -31,7 +31,7 @@ help: remove the `.await`\n    |\n LL -     [1; ().await];\n LL +     [1; ()];\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "8cc849dd985443c0b50fa629a1c168ec7a68051c", "filename": "src/test/ui/async-await/issues/issue-54752-async-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-54752-async-block.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: remove these parentheses\n    |\n LL - fn main() { let _a = (async { }); }\n LL + fn main() { let _a = async { }; }\n-   | \n+   |\n \n warning: 1 warning emitted\n "}, {"sha": "ccdd9c57a0f552078c789064999ae2e3a69b820b", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -37,7 +37,7 @@ help: remove the `.await`\n    |\n LL -     (|_| 2333).await;\n LL +     (|_| 2333);\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e7e61c2baaf0426b24b878a7308187ffcf9f7803", "filename": "src/test/ui/async-await/unnecessary-await.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove the `.await`\n    |\n LL -     boo().await;\n LL +     boo();\n-   | \n+   |\n help: alternatively, consider making `fn boo` asynchronous\n    |\n LL | async fn boo() {}"}, {"sha": "7f9e8008929186165b62d1f9e77857bf0d2ae070", "filename": "src/test/ui/blind/blind-item-item-shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblind%2Fblind-item-item-shadow.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | mod foo { pub mod foo {  } }\n    | ------- previous definition of the module `foo` here\n-LL | \n+LL |\n LL | use foo::foo;\n    |     ^^^^^^^^ `foo` reimported here\n    |"}, {"sha": "211a6052864e8eade0d248828b6e57d13df57016", "filename": "src/test/ui/block-result/issue-5500.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fblock-result%2Fissue-5500.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing the borrow\n    |\n LL -     &panic!()\n LL +     panic!()\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6f7b7e08070bf15be21d66def3f98896c6193870", "filename": "src/test/ui/borrowck/borrow-raw-address-of-borrowed.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-borrowed.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `x` as mutable because it is also borrowed as immuta\n    |\n LL |     let y = &x;\n    |             -- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let q = &raw mut x;\n    |             ^^^^^^^^^^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     drop(y);\n    |          - immutable borrow later used here\n \n@@ -15,7 +15,7 @@ error[E0502]: cannot borrow `x` as immutable because it is also borrowed as muta\n    |\n LL |     let y = &mut x;\n    |             ------ mutable borrow occurs here\n-LL | \n+LL |\n LL |     let p = &raw const x;\n    |             ^^^^^^^^^^^^ immutable borrow occurs here\n ...\n@@ -30,7 +30,7 @@ LL |     let y = &mut x;\n ...\n LL |     let q = &raw mut x;\n    |             ^^^^^^^^^^ second mutable borrow occurs here\n-LL | \n+LL |\n LL |     drop(y);\n    |          - first borrow later used here\n "}, {"sha": "5963dab9f4aab255fa97c9f4f5a5cd22182a526f", "filename": "src/test/ui/borrowck/borrow-raw-address-of-deref-mutability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-raw-address-of-deref-mutability.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `&` reference\n    |\n LL |     let x = &0;\n    |             -- help: consider changing this to be a mutable reference: `&mut 0`\n-LL | \n+LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n@@ -12,7 +12,7 @@ error[E0596]: cannot borrow `*x` as mutable, as it is behind a `*const` pointer\n    |\n LL |     let x = &0 as *const i32;\n    |             -- help: consider changing this to be a mutable pointer: `&mut 0`\n-LL | \n+LL |\n LL |     let q = &raw mut *x;\n    |             ^^^^^^^^^^^ `x` is a `*const` pointer, so the data it refers to cannot be borrowed as mutable\n "}, {"sha": "befa751a6007b49c39a9530b025ccd59b7b46c75", "filename": "src/test/ui/borrowck/borrow-tuple-fields.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrow-tuple-fields.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     let r = &x.0;\n    |             ---- borrow of `x.0` occurs here\n LL |     let y = x;\n    |             ^ move out of `x` occurs here\n-LL | \n+LL |\n LL |     r.use_ref();\n    |     ----------- borrow later used here\n "}, {"sha": "b80174ae6872e5e39388d2ddc0e6e16940f179c8", "filename": "src/test/ui/borrowck/borrowck-assign-comp-idx.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-assign-comp-idx.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `p` as mutable because it is also borrowed as immuta\n    |\n LL |     let q: &isize = &p[0];\n    |                      - immutable borrow occurs here\n-LL | \n+LL |\n LL |     p[0] = 5;\n    |     ^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", *q);\n    |                    -- immutable borrow later used here\n "}, {"sha": "24cc4933ef1b055efa4cf821bb90816c98ce1e46", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr-overloaded-op.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr-overloaded-op.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `p` because it was mutably borrowed\n    |\n LL |     let q = &mut p;\n    |             ------ borrow of `p` occurs here\n-LL | \n+LL |\n LL |     p + 3;\n    |     ^ use of borrowed `p`\n ...\n@@ -18,7 +18,7 @@ LL |     let q = &mut p;\n ...\n LL |     p.times(3);\n    |     ^^^^^^^^^^ immutable borrow occurs here\n-LL | \n+LL |\n LL |     *q + 3; // OK to use the new alias `q`\n    |     -- mutable borrow later used here\n "}, {"sha": "1d6bd4e2ec8d8e441f75b7a87f8a7da94f645aea", "filename": "src/test/ui/borrowck/borrowck-loan-rcvr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-loan-rcvr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -18,7 +18,7 @@ LL |     let l = &mut p;\n    |             ------ mutable borrow occurs here\n LL |     p.impurem();\n    |     ^^^^^^^^^^^ immutable borrow occurs here\n-LL | \n+LL |\n LL |     l.x += 1;\n    |     -------- mutable borrow later used here\n "}, {"sha": "f833abcc02acf83a4335359c739c0658ec4eda33", "filename": "src/test/ui/borrowck/borrowck-move-from-subpath-of-borrowed-path.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-subpath-of-borrowed-path.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `*a` because it is borrowed\n    |\n LL |     let b = &a;\n    |             -- borrow of `a` occurs here\n-LL | \n+LL |\n LL |     let z = *a;\n    |             ^^ move out of `*a` occurs here\n LL |     b.use_ref();"}, {"sha": "9509ebb7cde9a6fa66f3afe396d9c83d27b86985", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0382]: use of moved value: `t`\n    |\n LL |     let t: Box<_> = Box::new(3);\n    |         - move occurs because `t` has type `Box<isize>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     call_f(move|| { *t + 1 });\n    |            ------   -- variable moved due to use in closure\n    |            |"}, {"sha": "e01c26adcfc2d51d60c5e912f1fd01cd032b82d8", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-index.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-index.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `s` because it is borrowed\n    |\n LL |     let rs = &mut s;\n    |              ------ borrow of `s` occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", f[s]);\n    |                      ^ move out of `s` occurs here\n ..."}, {"sha": "b8ac7a3a4469d4433d8c634cc323d5d5d0d69d60", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -23,7 +23,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n    |                 ------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let [_, _, ref mut from_begin2, ..] = *s;\n    |                ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[from_begin2, from_end1, from_end3, from_end4]);\n@@ -45,7 +45,7 @@ error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as im\n    |\n LL |     let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n    |                                               --------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     let [.., ref mut from_end3, _,  _] = *s;\n    |              ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |     nop(&[from_begin0, from_begin1, from_begin3, from_end3]);"}, {"sha": "090c7b6b51a31cf27390e59e9cbdf0ee4a6555d6", "filename": "src/test/ui/borrowck/borrowck-union-borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-union-borrow.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -99,7 +99,7 @@ LL |             let ra = &mut u.a;\n    |                      -------- borrow of `u.a` occurs here\n LL |             let b = u.b;\n    |                     ^^^ use of borrowed `u.a`\n-LL | \n+LL |\n LL |             drop(ra);\n    |                  -- borrow later used here\n "}, {"sha": "1685acf87184b944d1b4af9927a512ceb0019d49", "filename": "src/test/ui/borrowck/copy-suggestion-region-vid.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fcopy-suggestion-region-vid.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `helpers`\n    |\n LL |         let helpers = [vec![], vec![]];\n    |             ------- move occurs because `helpers` has type `[Vec<&i64>; 2]`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |         HelperStruct { helpers, is_empty: helpers[0].is_empty() }\n    |                        -------            ^^^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n    |                        |"}, {"sha": "57803247ba8d05fa0ee37e700456d830d7558b81", "filename": "src/test/ui/borrowck/issue-58776-borrowck-scans-children.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-58776-borrowck-scans-children.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     let res = (|| (|| &greeting)())();\n    |                --      -------- borrow occurs due to use in closure\n    |                |\n    |                borrow of `greeting` occurs here\n-LL | \n+LL |\n LL |     greeting = \"DEALLOCATED\".to_string();\n    |     ^^^^^^^^ assignment to borrowed `greeting` occurs here\n ..."}, {"sha": "7782047574ce8e7b6b8ba9b6180c280fdf66d8bc", "filename": "src/test/ui/borrowck/mut-borrow-of-mut-ref.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmut-borrow-of-mut-ref.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: try removing `&mut` here\n    |\n LL -     h(&mut b);\n LL +     h(b);\n-   | \n+   |\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:11:12\n@@ -30,7 +30,7 @@ help: try removing `&mut` here\n    |\n LL -     g(&mut &mut b);\n LL +     g(&mut b);\n-   | \n+   |\n \n error[E0596]: cannot borrow `b` as mutable, as it is not declared as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:18:12\n@@ -47,7 +47,7 @@ help: try removing `&mut` here\n    |\n LL -     h(&mut &mut b);\n LL +     h(&mut b);\n-   | \n+   |\n \n error[E0596]: cannot borrow `f` as mutable, as it is not declared as mutable\n   --> $DIR/mut-borrow-of-mut-ref.rs:35:5"}, {"sha": "a57ceb847394563448a27e5c98711b60c6814ef9", "filename": "src/test/ui/borrowck/two-phase-allow-access-during-reservation.nll_target.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-allow-access-during-reservation.nll_target.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0503]: cannot use `i` because it was mutably borrowed\n    |\n LL |     /*1*/ let p = &mut i; // (reservation of `i` starts here)\n    |                   ------ borrow of `i` occurs here\n-LL | \n+LL |\n LL |     /*2*/ let j = i;      // OK: `i` is only reserved here\n    |                   ^ use of borrowed `i`\n ..."}, {"sha": "9e0f68b654338a8a0cf183b25239203d389a8daf", "filename": "src/test/ui/borrowck/two-phase-reservation-sharing-interference-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-reservation-sharing-interference-2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `v` as mutable because it is also borrowed as immuta\n    |\n LL |     let shared = &v;\n    |                  -- immutable borrow occurs here\n-LL | \n+LL |\n LL |     v.extend(shared);\n    |     ^^------^^^^^^^^\n    |     | |"}, {"sha": "117d7ceaeefe0c04947ad80259da124c6eafeb8c", "filename": "src/test/ui/borrowck/two-phase-sneaky.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Ftwo-phase-sneaky.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     v[0].push_str({\n    |     -    -------- first borrow later used by call\n    |     |\n    |     first mutable borrow occurs here\n-LL | \n+LL |\n LL |         v.push(format!(\"foo\"));\n    |         ^^^^^^^^^^^^^^^^^^^^^^ second mutable borrow occurs here\n "}, {"sha": "bf3c3537fade134ad7f2fa09b24e3fa84d1b3476", "filename": "src/test/ui/cast/issue-89497.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-89497.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider borrowing the value\n    |\n LL -     let _reference: &'static i32 = unsafe { pointer as *const i32 as &'static i32 };\n LL +     let _reference: &'static i32 = unsafe { &*(pointer as *const i32) };\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "481d7e58529eebe089afd91fe0460ba870b05600", "filename": "src/test/ui/closures/2229_closure_analysis/diagnostics/mut_ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdiagnostics%2Fmut_ref.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `**ref_mref_x` as mutable, as it is behind a `&` ref\n    |\n LL |     let ref_mref_x = &mref_x;\n    |                      ------- help: consider changing this to be a mutable reference: `&mut mref_x`\n-LL | \n+LL |\n LL |     let c = || {\n    |             ^^ `ref_mref_x` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n LL |"}, {"sha": "6a40db0d51d4bc72a87b9aed6287fe3f9a6baa7e", "filename": "src/test/ui/closures/issue-6801.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-6801.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |       let sq =  || { *x * *x };\n    |                 --   -- borrow occurs due to use in closure\n    |                 |\n    |                 borrow of `x` occurs here\n-LL | \n+LL |\n LL |       twice(x);\n    |             ^ move out of `x` occurs here\n LL |       invoke(sq);"}, {"sha": "802284b265821121fcb6fc5fa6bd7b2dbaf811d7", "filename": "src/test/ui/closures/issue-82438-mut-without-upvar.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-82438-mut-without-upvar.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0596]: cannot borrow `c` as mutable, as it is not declared as mutable\n    |\n LL |     let c = |a, b, c, d| {};\n    |         - help: consider changing this to be mutable: `mut c`\n-LL | \n+LL |\n LL |     A.f(participant_name, &mut c);\n    |                           ^^^^^^ cannot borrow as mutable\n "}, {"sha": "1110197734f7adb68b4a9860501081dda71603fe", "filename": "src/test/ui/coherence/coherence-conflicting-negative-trait-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-conflicting-negative-trait-impl.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0751]: found both positive and negative implementation of trait `std::mar\n    |\n LL | unsafe impl<T: MyTrait + 'static> Send for TestType<T> {}\n    | ------------------------------------------------------ positive implementation here\n-LL | \n+LL |\n LL | impl<T: MyTrait> !Send for TestType<T> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ negative implementation here\n "}, {"sha": "8612ce60d18759a65421e13e02d5706a29f2316f", "filename": "src/test/ui/coherence/coherence-fn-implied-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-implied-bounds.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `Trait` for type `for<'a, 'b> fn(&'a\n    |\n LL | impl Trait for for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32 {}\n    | ------------------------------------------------------------------ first implementation here\n-LL | \n+LL |\n LL | impl Trait for for<'c> fn(&'c &'c u32, &'c &'c u32) -> &'c u32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a &'b u32, &'b &'a u32) -> &'b u32`\n    |"}, {"sha": "af18655b06fcd101216be6f6d39f79b78d56f55e", "filename": "src/test/ui/coherence/coherence-free-vs-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-free-vs-bound-region.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `TheTrait` for type `fn(&u8)`\n    |\n LL | impl<'a> TheTrait for fn(&'a u8) {}\n    | -------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl TheTrait for fn(&u8) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `fn(&u8)`\n    |"}, {"sha": "8e7d4589e61407033552e6d164c7c79e9f3c4fad", "filename": "src/test/ui/coherence/coherence-projection-conflict-orphan.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-orphan.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Iterator> Foo<A::Item> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n    |"}, {"sha": "6492747bb261d76feaf95330d9ee65ceebf95667", "filename": "src/test/ui/coherence/coherence-projection-conflict-ty-param.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict-ty-param.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<_>` for type `std::optio\n    |\n LL | impl <P, T: Foo<P>> Foo<P> for Option<T> {}\n    | ---------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl<T, U> Foo<T> for Option<U> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `std::option::Option<_>`\n "}, {"sha": "7d2c584c37067935b1a7466319bb2a52fc3d9b94", "filename": "src/test/ui/coherence/coherence-projection-conflict.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-projection-conflict.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo<i32>` for type `i32`\n    |\n LL | impl Foo<i32> for i32 { }\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl<A:Bar> Foo<A::Output> for A { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `i32`\n "}, {"sha": "25d8c875653d08a3427364648f134557596d0752", "filename": "src/test/ui/coherence/coherence-subtyping.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-subtyping.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ warning: conflicting implementations of trait `TheTrait` for type `for<'a, 'b> f\n    |\n LL | impl TheTrait for for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8 {}\n    | ---------------------------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl TheTrait for for<'a> fn(&'a u8, &'a u8) -> &'a u8 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'a, 'b> fn(&'a u8, &'b u8) -> &'a u8`\n    |"}, {"sha": "2ceba59cf05c75de5e4ed59fddb4a467f6fc8134", "filename": "src/test/ui/const-generics/const-argument-if-length.full.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.full.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - pub struct AtLeastByte<T: ?Sized> {\n LL + pub struct AtLeastByte<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,"}, {"sha": "f85e60f63fb3b4e0745d3df0e40188ca24a67ca0", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -21,7 +21,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - pub struct AtLeastByte<T: ?Sized> {\n LL + pub struct AtLeastByte<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,"}, {"sha": "1de24bff4692e831d6da54eed581aaa7299bf297", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013-no-assoc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013-no-assoc.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: the `const` keyword is only needed in the definition of the type\n    |\n LL - impl Foo<const 3> for Bar {\n LL + impl Foo<3> for Bar {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "583749a85734e12f49e8d00d3b9591f9b646e922", "filename": "src/test/ui/const-generics/parser-error-recovery/issue-89013.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparser-error-recovery%2Fissue-89013.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: the `const` keyword is only needed in the definition of the type\n    |\n LL - impl Foo<N = const 3> for Bar {\n LL + impl Foo<N = 3> for Bar {\n-   | \n+   |\n \n error[E0658]: associated const equality is incomplete\n   --> $DIR/issue-89013.rs:9:10"}, {"sha": "553a3a0f88ebae22e415562ff78016bcef43657b", "filename": "src/test/ui/const-generics/unused_braces.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Funused_braces.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these braces\n    |\n LL -     let _: A<{ 7 }>;\n LL +     let _: A<7>;\n-   | \n+   |\n \n warning: 1 warning emitted\n "}, {"sha": "63c8a6eef7f296bb6e4f8e998e314215eec89187", "filename": "src/test/ui/deprecation/try-macro-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdeprecation%2Ftry-macro-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdeprecation%2Ftry-macro-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Ftry-macro-suggestion.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -21,7 +21,7 @@ help: you can use the `?` operator instead\n    |\n LL -     Ok(try!(Ok(())))\n LL +     Ok(Ok(())?)\n-   | \n+   |\n help: alternatively, you can still access the deprecated `try!()` macro using the \"raw identifier\" syntax\n    |\n LL |     Ok(r#try!(Ok(())))"}, {"sha": "c94d566f5df22060dd78065b255933c219c8e0b5", "filename": "src/test/ui/derives/issue-91550.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderives%2Fissue-91550.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -23,7 +23,7 @@ error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its\n    |\n LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Eq`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_eq` not found for this\n ...\n@@ -42,7 +42,7 @@ error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but it\n    |\n LL | pub struct NoDerives;\n    | --------------------- doesn't satisfy `NoDerives: Ord`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_ord` not found for this\n ...\n@@ -64,7 +64,7 @@ LL | pub struct NoDerives;\n    | |\n    | doesn't satisfy `NoDerives: Ord`\n    | doesn't satisfy `NoDerives: PartialOrd`\n-LL | \n+LL |\n LL | struct Object<T>(T);\n    | -------------------- method `use_ord_and_partial_ord` not found for this\n ..."}, {"sha": "18a889837dfdb6852c7da225426dbd3cb1033acc", "filename": "src/test/ui/destructure-trait-ref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdestructure-trait-ref.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -30,7 +30,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let &&x = &1isize as &dyn T;\n LL +     let &x = &1isize as &dyn T;\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:36:11\n@@ -46,7 +46,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let &&&x = &(&1isize as &dyn T);\n LL +     let &&x = &(&1isize as &dyn T);\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/destructure-trait-ref.rs:40:13"}, {"sha": "a16cdee44623a0ec153d87fbbbfeb87018601d65", "filename": "src/test/ui/did_you_mean/compatible-variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fcompatible-variants.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -71,7 +71,7 @@ help: try removing this `?`\n    |\n LL -     c()?\n LL +     c()\n-   | \n+   |\n help: try adding an expression at the end of the block\n    |\n LL ~     c()?;"}, {"sha": "5343acea4adc96be3c88698ac08b0aa0698ded17", "filename": "src/test/ui/did_you_mean/issue-34126.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-34126.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: try removing `&mut` here\n    |\n LL -         self.run(&mut self);\n LL +         self.run(self);\n-   | \n+   |\n \n error[E0502]: cannot borrow `self` as mutable because it is also borrowed as immutable\n   --> $DIR/issue-34126.rs:6:18"}, {"sha": "5bd47736626da0ff49523f7c8740f44ad88d3f1b", "filename": "src/test/ui/dst/dst-object-from-unsized-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-object-from-unsized-type.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test1<T: ?Sized + Foo>(t: &T) {\n LL + fn test1<T: Foo>(t: &T) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:13:23\n@@ -26,7 +26,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn test2<T: ?Sized + Foo>(t: &T) {\n LL + fn test2<T: Foo>(t: &T) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/dst-object-from-unsized-type.rs:18:28"}, {"sha": "34699bb26582ecd3375d5749ba894f7a200c5571", "filename": "src/test/ui/dyn-keyword/dyn-2018-edition-lint.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2018-edition-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -29,7 +29,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:17:14\n@@ -43,7 +43,7 @@ help: use `dyn`\n    |\n LL -     let _x: &SomeTrait = todo!();\n LL +     let _x: &dyn SomeTrait = todo!();\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n@@ -57,7 +57,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:17\n@@ -71,7 +71,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -85,7 +85,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/dyn-2018-edition-lint.rs:4:35\n@@ -99,7 +99,7 @@ help: use `dyn`\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   | \n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "9e212c77dc77c17219afe5524e7d6f28c4bbcbc1", "filename": "src/test/ui/dyn-keyword/dyn-2021-edition-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-2021-edition-error.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: add `dyn` keyword before this trait\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &dyn SomeTrait, y: Box<SomeTrait>) {\n-   | \n+   |\n \n error[E0782]: trait objects must include the `dyn` keyword\n   --> $DIR/dyn-2021-edition-error.rs:3:35\n@@ -20,7 +20,7 @@ help: add `dyn` keyword before this trait\n    |\n LL - fn function(x: &SomeTrait, y: Box<SomeTrait>) {\n LL + fn function(x: &SomeTrait, y: Box<dyn SomeTrait>) {\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9bc603fba54664affe8a5dacd87d9c35e6ca3162", "filename": "src/test/ui/dyn-keyword/dyn-angle-brackets.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-keyword%2Fdyn-angle-brackets.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: use `dyn`\n    |\n LL -         <fmt::Debug>::fmt(self, f)\n LL +         <dyn fmt::Debug>::fmt(self, f)\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c15253ba9cd7882bdbf5084884d81751f2edb95d", "filename": "src/test/ui/empty/empty-struct-unit-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-struct-unit-expr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -24,7 +24,7 @@ help: `E::Empty4` is a unit variant, you need to write it without the parenthese\n    |\n LL -     let e4 = E::Empty4();\n LL +     let e4 = E::Empty4;\n-   | \n+   |\n \n error[E0618]: expected function, found `empty_struct::XEmpty2`\n   --> $DIR/empty-struct-unit-expr.rs:18:15\n@@ -46,7 +46,7 @@ help: `XE::XEmpty4` is a unit variant, you need to write it without the parenthe\n    |\n LL -     let xe4 = XE::XEmpty4();\n LL +     let xe4 = XE::XEmpty4;\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7858a9e3028f01eb24963bbcbfb98f1191b30744", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: primitive type `u32` doesn't have generic parameters\n    |\n LL - type X = u32<i32>;\n LL + type X = u32;\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "68f98b6f17dace33f4598d5033f045c071630d6f", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: primitive type `u32` doesn't have generic parameters\n    |\n LL - type X = u32<'static>;\n LL + type X = u32;\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "352c5ba5be095005c48399f4652202a71d279f49", "filename": "src/test/ui/error-codes/E0255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0255.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `foo` is defined multiple times\n    |\n LL | use bar::foo;\n    |     -------- previous import of the value `foo` here\n-LL | \n+LL |\n LL | fn foo() {}\n    | ^^^^^^^^ `foo` redefined here\n    |"}, {"sha": "06cbc5b4fb5f23bf92133427806288a8dc2f190c", "filename": "src/test/ui/error-codes/E0259.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0259.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0259]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-LL | \n+LL |\n LL | extern crate libc as alloc;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `alloc` reimported here\n    |"}, {"sha": "2d3305bd15b0c1659ffb005b4396c036c8715fcb", "filename": "src/test/ui/error-codes/E0260.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0260.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0260]: the name `alloc` is defined multiple times\n    |\n LL | extern crate alloc;\n    | ------------------- previous import of the extern crate `alloc` here\n-LL | \n+LL |\n LL | mod alloc {\n    | ^^^^^^^^^ `alloc` redefined here\n    |"}, {"sha": "8aadf5c8b47126a928f00f75307ddf6d671d71af", "filename": "src/test/ui/error-codes/E0393.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0393.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n    |\n LL | trait A<T=Self> {}\n    | ------------------ type parameter `T` must be specified for this\n-LL | \n+LL |\n LL | fn together_we_will_rule_the_galaxy(son: &dyn A) {}\n    |                                               ^ help: set the type parameter to the desired type: `A<T>`\n    |"}, {"sha": "8f2ef8c8e6b3e85363618b4bae02f34c7195748e", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -31,7 +31,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `Fo\n    |\n LL |     struct Foo { a: bool };\n    |     ---------------------- `Foo` defined here\n-LL | \n+LL |\n LL |     let f = Foo();\n    |             ^^^^^\n ..."}, {"sha": "08b99232ee22ba572b53055ea1250067209305cb", "filename": "src/test/ui/error-codes/E0429.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0429.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider importing the module directly\n    |\n LL - use std::fmt::self;\n LL + use std::fmt;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use std::fmt::{self};"}, {"sha": "35e79e448d5acf1d672c82ed5eabb3df1a9955da", "filename": "src/test/ui/error-codes/E0446.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0446.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0446]: private type `Bar` in public interface\n    |\n LL |     struct Bar(u32);\n    |     ---------------- `Bar` declared as private\n-LL | \n+LL |\n LL |     pub fn bar() -> Bar {\n    |     ^^^^^^^^^^^^^^^^^^^ can't leak private type\n "}, {"sha": "f982ed26f5c0b8de32b28a4fbaf141dbeb321a70", "filename": "src/test/ui/error-codes/E0453.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0453.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(non_snake_case) incompatible with previous forbid\n    |\n LL | #![forbid(non_snake_case)]\n    |           -------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(non_snake_case) incompatible with previous forbid\n    |\n LL | #![forbid(non_snake_case)]\n    |           -------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(non_snake_case)]\n    |         ^^^^^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "e677e8916154240fb531b4e282c1871393e908de", "filename": "src/test/ui/error-codes/E0504.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0504.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `fancy_num` because it is borrowed\n    |\n LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n-LL | \n+LL |\n LL |     let x = move || {\n    |             ^^^^^^^ move out of `fancy_num` occurs here\n LL |         println!(\"child function: {}\", fancy_num.num);"}, {"sha": "d70406b750afcf6cb04f1e3f7945b9e6ef9e68c0", "filename": "src/test/ui/error-codes/E0506.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0506.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     let fancy_ref = &fancy_num;\n    |                     ---------- borrow of `fancy_num` occurs here\n LL |     fancy_num = FancyNum { num: 6 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ assignment to borrowed `fancy_num` occurs here\n-LL | \n+LL |\n LL |     println!(\"Num: {}, Ref: {}\", fancy_num.num, fancy_ref.num);\n    |                                                 ------------- borrow later used here\n "}, {"sha": "e385b339402ff1aecb123a2f3218e3787a7aaedd", "filename": "src/test/ui/error-codes/E0605.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0605.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: consider borrowing the value\n    |\n LL -     v as &u8;\n LL +     &*v;\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fcee6b47c1d2b79b8757365015af4324d3ecce58", "filename": "src/test/ui/error-codes/E0618.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0618.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: `X::Entry` is a unit variant, you need to write it without the parentheses\n    |\n LL -     X::Entry();\n LL +     X::Entry;\n-   | \n+   |\n \n error[E0618]: expected function, found `i32`\n   --> $DIR/E0618.rs:9:5"}, {"sha": "737a5d604483fb3797ade4eae6860e224cd73074", "filename": "src/test/ui/expr/if/if-no-match-bindings.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexpr%2Fif%2Fif-no-match-bindings.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -30,7 +30,7 @@ help: consider removing the borrow\n    |\n LL -     if &true {}\n LL +     if true {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:21:8\n@@ -42,7 +42,7 @@ help: consider removing the borrow\n    |\n LL -     if &mut true {}\n LL +     if true {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:24:11\n@@ -76,7 +76,7 @@ help: consider removing the borrow\n    |\n LL -     while &true {}\n LL +     while true {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/if-no-match-bindings.rs:27:11\n@@ -88,7 +88,7 @@ help: consider removing the borrow\n    |\n LL -     while &mut true {}\n LL +     while true {}\n-   | \n+   |\n \n error: aborting due to 8 previous errors\n "}, {"sha": "d4c201b5d3ec58a3cf414229978b63b9a9106917", "filename": "src/test/ui/feature-gates/feature-gate-with_negative_coherence.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-with_negative_coherence.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0119]: conflicting implementations of trait `Foo` for type `&_`\n    |\n LL | impl<T: std::ops::DerefMut> Foo for T { }\n    | ------------------------------------- first implementation here\n-LL | \n+LL |\n LL | impl<T> Foo for &T { }\n    | ^^^^^^^^^^^^^^^^^^ conflicting implementation for `&_`\n "}, {"sha": "8a32c225485fec7ba697fbbc0f313599a197791d", "filename": "src/test/ui/fmt/format-string-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-string-error.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -93,7 +93,7 @@ error: invalid format string: expected `'}'` but string was terminated\n    |\n LL |     {\n    |     - because of this opening brace\n-LL | \n+LL |\n LL | \"###);\n    | ^ expected `'}'` in format string\n    |"}, {"sha": "d78f7a7fbcee1cbb6671a60ab8c1f5e9d556303f", "filename": "src/test/ui/generic-associated-types/equality-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fequality-bound.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: if `Iterator::Item` is an associated type you're trying to set, use the as\n    |\n LL - fn sum<I: Iterator<Item = ()>>(i: I) -> i32 where I::Item = i32 {\n LL + fn sum<I: Iterator<Item = (), Item = i32>>(i: I) -> i32 where  {\n-   | \n+   |\n \n error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/equality-bound.rs:5:41\n@@ -22,7 +22,7 @@ help: if `Iterator::Item` is an associated type you're trying to set, use the as\n    |\n LL - fn sum2<I: Iterator>(i: I) -> i32 where I::Item = i32 {\n LL + fn sum2<I: Iterator<Item = i32>>(i: I) -> i32 where  {\n-   | \n+   |\n \n error: equality constraints are not yet supported in `where` clauses\n   --> $DIR/equality-bound.rs:9:41"}, {"sha": "d6e7a1d45f08bd9db97a5caf4224ba8cf027e697", "filename": "src/test/ui/hashmap/hashmap-iter-value-lifetime.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhashmap%2Fhashmap-iter-value-lifetime.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,10 +3,10 @@ error[E0502]: cannot borrow `my_stuff` as mutable because it is also borrowed as\n    |\n LL |     let (_, thing) = my_stuff.iter().next().unwrap();\n    |                      --------------- immutable borrow occurs here\n-LL | \n+LL |\n LL |     my_stuff.clear();\n    |     ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n-LL | \n+LL |\n LL |     println!(\"{}\", *thing);\n    |                    ------ immutable borrow later used here\n "}, {"sha": "489afd7615f5434c6319859d615e934671526e48", "filename": "src/test/ui/impl-trait/impl-generic-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-generic-mismatch.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: try removing the generic parameter and using `impl Trait` instead\n    |\n LL -     fn foo<U: Debug>(&self, _: &U) { }\n LL +     fn foo(&self, _: &impl Debug) { }\n-   | \n+   |\n \n error[E0643]: method `bar` has incompatible signature for trait\n   --> $DIR/impl-generic-mismatch.rs:17:23"}, {"sha": "b514e9fef4d793df5fb9b2b0fb782f0dc6aac20e", "filename": "src/test/ui/impl-trait/recursive-impl-trait-type-through-non-recursive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-impl-trait-type-through-non-recursive.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0720]: cannot resolve opaque type\n    |\n LL | fn id<T>(t: T) -> impl Sized { t }\n    |                   ---------- returning this opaque type `impl Sized`\n-LL | \n+LL |\n LL | fn recursive_id() -> impl Sized {\n    |                      ^^^^^^^^^^ recursive opaque type\n LL |     id(recursive_id2())\n@@ -25,7 +25,7 @@ error[E0720]: cannot resolve opaque type\n    |\n LL | fn wrap<T>(t: T) -> impl Sized { (t,) }\n    |                     ---------- returning this opaque type `impl Sized`\n-LL | \n+LL |\n LL | fn recursive_wrap() -> impl Sized {\n    |                        ^^^^^^^^^^ recursive opaque type\n LL |     wrap(recursive_wrap2())"}, {"sha": "0c9424f308351905939a9bd1e3cfcd6705bcbbe6", "filename": "src/test/ui/imports/issue-45829/import-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-45829%2Fimport-self.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: consider importing the module directly\n    |\n LL - use foo::self;\n LL + use foo;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use foo::{self};"}, {"sha": "b969515e2f0e69235a83dd01a224937e3ff7cf83", "filename": "src/test/ui/imports/issue-59764.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fissue-59764.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::foo::{baz, makro};\n LL +     use issue_59764::{makro, foo::{baz}};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:21:9\n@@ -52,7 +52,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::foo::{baz, makro, foobar};\n LL +     use issue_59764::{makro, foo::{baz, foobar}};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:40:9\n@@ -97,7 +97,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::{foobaz, foo::makro};\n LL +     use issue_59764::{makro, foobaz};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:59:42\n@@ -110,7 +110,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::{foobaz, foo::{baz, makro}};\n LL +     use issue_59764::{makro, foobaz, foo::{baz}};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:68:13\n@@ -155,7 +155,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::{foobaz, foo::{baz, makro, barbaz::{barfoo}}};\n LL +     use issue_59764::{makro, foobaz, foo::{baz, barbaz::{barfoo}}};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:93:13\n@@ -196,7 +196,7 @@ help: a macro with this name exists at the root of the crate\n    |\n LL -     use issue_59764::foo::{baz, makro as foobar};\n LL +     use issue_59764::{makro as foobar, foo::{baz}};\n-   | \n+   |\n \n error[E0432]: unresolved import `issue_59764::foo::makro`\n   --> $DIR/issue-59764.rs:120:17"}, {"sha": "e763e17e51786f3c0d2860acd75b947ecf62d05c", "filename": "src/test/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -48,7 +48,7 @@ help: consider removing the borrow\n    |\n LL -     foo(&\"aaa\".to_owned());\n LL +     foo(\"aaa\".to_owned());\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:32:9\n@@ -67,7 +67,7 @@ help: consider removing the borrow\n    |\n LL -     foo(&mut \"aaa\".to_owned());\n LL +     foo(\"aaa\".to_owned());\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/deref-suggestion.rs:2:20"}, {"sha": "c814eedd22614fb511fbc884d9e424ebcaa0ac31", "filename": "src/test/ui/issues/issue-11873.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-11873.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -7,7 +7,7 @@ LL |     let mut f = || v.push(2);\n    |                 borrow of `v` occurs here\n LL |     let _w = v;\n    |              ^ move out of `v` occurs here\n-LL | \n+LL |\n LL |     f();\n    |     - borrow later used here\n "}, {"sha": "4da346f56ab7607f2627e9a6f4ac9303f604c7df", "filename": "src/test/ui/issues/issue-22370.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22370.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0393]: the type parameter `T` must be explicitly specified\n    |\n LL | trait A<T=Self> {}\n    | ------------------ type parameter `T` must be specified for this\n-LL | \n+LL |\n LL | fn f(a: &dyn A) {}\n    |              ^ help: set the type parameter to the desired type: `A<T>`\n    |"}, {"sha": "051ed25b6c9d92bc20589e046f46609ec5fe2b11", "filename": "src/test/ui/issues/issue-28472.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28472.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `foo` is defined multiple times\n    |\n LL |     fn foo();\n    |     --------- previous definition of the value `foo` here\n-LL | \n+LL |\n LL | /   pub\n LL | |   fn foo();\n    | |___________^ `foo` redefined here"}, {"sha": "0d09612c6c2c6aa7230a51d1f15434ed9bd615cd", "filename": "src/test/ui/issues/issue-2995.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2995.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider borrowing the value\n    |\n LL -     let _q: &isize = p as &isize;\n LL +     let _q: &isize = &*p;\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e3733cebba58ed7ad14dc1b37fef5a515e9e9ac9", "filename": "src/test/ui/issues/issue-3099-a.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-a.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `A` is defined multiple times\n    |\n LL | enum A { B, C }\n    | ------ previous definition of the type `A` here\n-LL | \n+LL |\n LL | enum A { D, E }\n    | ^^^^^^ `A` redefined here\n    |"}, {"sha": "c0cfefeb940f492d1c2b37a645392442e913cdd3", "filename": "src/test/ui/issues/issue-3099-b.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3099-b.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0428]: the name `a` is defined multiple times\n    |\n LL | pub mod a {}\n    | --------- previous definition of the module `a` here\n-LL | \n+LL |\n LL | pub mod a {}\n    | ^^^^^^^^^ `a` redefined here\n    |"}, {"sha": "319886f878384e7c6d30a215452680f11c282212", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | struct Foo(u32);\n    | ---------------- fn(u32) -> Foo {Foo} defined here\n-LL | \n+LL |\n LL | fn test() -> Foo { Foo }\n    |              ---   ^^^ expected struct `Foo`, found fn item\n    |              |"}, {"sha": "e88f31ea1ee17a95a31f01c51c8557d75c189c70", "filename": "src/test/ui/issues/issue-40510-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |     let mut x: Box<()> = Box::new(());\n    |         ----- variable defined here\n-LL | \n+LL |\n LL |     || {\n    |      - inferred to be a `FnMut` closure\n LL |         &mut x"}, {"sha": "22186ba9a67b6a2aa05f3fadc03ed6b0d7e747d7", "filename": "src/test/ui/issues/issue-40510-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: captured variable cannot escape `FnMut` closure body\n    |\n LL |       let mut x: Vec<()> = Vec::new();\n    |           ----- variable defined here\n-LL | \n+LL |\n LL |       || {\n    |        - inferred to be a `FnMut` closure\n LL | /         || {"}, {"sha": "acdf963ed3bd7af476cea4d328c62addd21c49d4", "filename": "src/test/ui/issues/issue-4265.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL | /     fn bar() {\n LL | |         Foo { baz: 0 }.bar();\n LL | |     }\n    | |_____- previous definition of `bar` here\n-LL | \n+LL |\n LL | /     fn bar() {\n LL | |     }\n    | |_____^ duplicate definition"}, {"sha": "4e28874e140a40f28e46333666290f4e58c76c86", "filename": "src/test/ui/issues/issue-47646.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47646.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0502]: cannot borrow `heap` as immutable because it is also borrowed as m\n    |\n LL |     let borrow = heap.peek_mut();\n    |                  --------------- mutable borrow occurs here\n-LL | \n+LL |\n LL |     match (borrow, ()) {\n    |           ------------ a temporary with access to the mutable borrow is created here ...\n LL |         (Some(_), ()) => {"}, {"sha": "846467f7f22681ae47b60cbf5c31724af38c5475", "filename": "src/test/ui/issues/issue-49257.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49257.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: move the `..` to the end of the field list\n    |\n LL -     let Point { .., y, } = p;\n LL +     let Point { y, .. } = p;\n-   | \n+   |\n \n error: expected `}`, found `,`\n   --> $DIR/issue-49257.rs:11:19\n@@ -26,7 +26,7 @@ help: move the `..` to the end of the field list\n    |\n LL -     let Point { .., y } = p;\n LL +     let Point { y , .. } = p;\n-   | \n+   |\n \n error: expected `}`, found `,`\n   --> $DIR/issue-49257.rs:12:19"}, {"sha": "cc0726bcade32cd2b9d3d6558e428b83dbb8f5a1", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: try removing this `?`\n    |\n LL -     missing_discourses()?\n LL +     missing_discourses()\n-   | \n+   |\n help: try wrapping the expression in `Ok`\n    |\n LL |     Ok(missing_discourses()?)"}, {"sha": "2ec151d24d1c6cd3b4815293feb4bd833c69ce35", "filename": "src/test/ui/issues/issue-64792-bad-unicode-ctor.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-64792-bad-unicode-ctor.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0423]: expected function, tuple struct or tuple variant, found struct `X`\n    |\n LL | struct X {}\n    | ----------- `X` defined here\n-LL | \n+LL |\n LL | const Y: X = X(\"\u00f6\");\n    |              ^^^^^^ help: use struct literal syntax instead: `X {}`\n "}, {"sha": "399c940ca195c13aa130c186bcacfec88b331199", "filename": "src/test/ui/issues/issue-86756.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-86756.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -27,7 +27,7 @@ help: use `dyn`\n    |\n LL -     eq::<dyn, Foo>\n LL +     eq::<dyn, dyn Foo>\n-   | \n+   |\n \n error[E0107]: missing generics for trait `Foo`\n   --> $DIR/issue-86756.rs:5:15"}, {"sha": "9b3125058377c2e2cbd9f17e18fbb6e0c0d07e56", "filename": "src/test/ui/iterators/into-iter-on-arrays-2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-2018.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -59,7 +59,7 @@ help: or remove `.into_iter()` to iterate by value\n    |\n LL -     for _ in [1, 2, 3].into_iter() {}\n LL +     for _ in [1, 2, 3] {}\n-   | \n+   |\n \n warning: 5 warnings emitted\n "}, {"sha": "961f9de6614afad2bcc45414eb4851db8a87af34", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl-3.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0621]: explicit lifetime required in the type of `x`\n    |\n LL |   fn foo<'a>(&'a self, x: &i32) -> &i32 {\n    |                           ---- help: add explicit lifetime `'a` to the type of `x`: `&'a i32`\n-LL | \n+LL |\n LL |     if true { &self.field } else { x }\n    |                                    ^ lifetime `'a` required\n "}, {"sha": "5bb763813322d5b23ebdaa1292399384747257f3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n    |            --     - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n-LL | \n+LL |\n LL |         if x > y { x } else { y }\n    |                    ^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n "}, {"sha": "4bcd7cf9578db906f1bd8f3d041f13d8aac13663", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n    |          --  - let's call the lifetime of this reference `'1`\n    |          |\n    |          lifetime `'a` defined here\n-LL | \n+LL |\n LL |     x\n    |     ^ associated function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n "}, {"sha": "34a64f8a63e6073558fa2f0c6705c94e20cd8319", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n    |            --  - let's call the lifetime of this reference `'1`\n    |            |\n    |            lifetime `'a` defined here\n-LL | \n+LL |\n LL |         if true { x } else { self }\n    |                              ^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n "}, {"sha": "891fa9885f3294fb7153f7fcd63012633d93f2e9", "filename": "src/test/ui/lint/forbid-group-member.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-group-member.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n@@ -16,7 +16,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |\n@@ -28,7 +28,7 @@ warning: allow(unused_variables) incompatible with previous forbid\n    |\n LL | #![forbid(unused)]\n    |           ------ `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^ overruled by previous forbid\n    |"}, {"sha": "e65301778332a2a104b4f0648cee286444dc18d1", "filename": "src/test/ui/lint/forbid-member-group.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforbid-member-group.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(unused) incompatible with previous forbid\n    |\n LL | #![forbid(unused_variables)]\n    |           ---------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(unused) incompatible with previous forbid\n    |\n LL | #![forbid(unused_variables)]\n    |           ---------------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(unused)]\n    |         ^^^^^^ overruled by previous forbid\n "}, {"sha": "8d826bd1457626e403fc0822816a743992cc521f", "filename": "src/test/ui/lint/force-warn/allowed-group-warn-by-default-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fallowed-group-warn-by-default-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n@@ -25,7 +25,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/allowed-group-warn-by-default-lint.rs:10:25\n@@ -39,7 +39,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "978270872c45c3157298520a521825c237fdea09", "filename": "src/test/ui/lint/force-warn/cap-lints-allow.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fcap-lints-allow.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n@@ -25,7 +25,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/cap-lints-allow.rs:8:25\n@@ -39,7 +39,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "6e67ebf2747337bd0c11d04e7392a052112bbc7a", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-cli-warn-by-default-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-cli-warn-by-default-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n@@ -25,7 +25,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-cli-warn-by-default-lint.rs:8:25\n@@ -39,7 +39,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "c5dea84b8f358f0eaf1aace4d8804d41c3212286", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-lint-group.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-lint-group.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n@@ -25,7 +25,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-lint-group.rs:10:25\n@@ -39,7 +39,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "acd0c503d9c02596318302d3d6a69da0b9f358bf", "filename": "src/test/ui/lint/force-warn/lint-group-allowed-warn-by-default-lint.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Flint-group-allowed-warn-by-default-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n@@ -25,7 +25,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/lint-group-allowed-warn-by-default-lint.rs:10:25\n@@ -39,7 +39,7 @@ help: use `dyn`\n    |\n LL - pub fn function(_x: Box<SomeTrait>) {}\n LL + pub fn function(_x: Box<dyn SomeTrait>) {}\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "1d397f43133fa7c5ba94ed2bcc5f07d2251d9eb0", "filename": "src/test/ui/lint/issue-80988.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fissue-80988.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |\n@@ -16,7 +16,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |\n@@ -28,7 +28,7 @@ warning: deny(warnings) incompatible with previous forbid\n    |\n LL | #![forbid(warnings)]\n    |           -------- `forbid` level set here\n-LL | \n+LL |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^ overruled by previous forbid\n    |"}, {"sha": "5977b9c949d5042c17300b57cccc796c4bf8d378", "filename": "src/test/ui/lint/lint-forbid-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-forbid-attr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0453]: allow(deprecated) incompatible with previous forbid\n    |\n LL | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n \n@@ -12,7 +12,7 @@ error[E0453]: allow(deprecated) incompatible with previous forbid\n    |\n LL | #![forbid(deprecated)]\n    |           ---------- `forbid` level set here\n-LL | \n+LL |\n LL | #[allow(deprecated)]\n    |         ^^^^^^^^^^ overruled by previous forbid\n "}, {"sha": "afbab9896765f40bd9607a38cfa135d3500b9956", "filename": "src/test/ui/lint/lint-incoherent-auto-trait-objects.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-incoherent-auto-trait-objects.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Se\n    |\n LL | impl Foo for dyn Send {}\n    | --------------------- first implementation here\n-LL | \n+LL |\n LL | impl Foo for dyn Send + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + 'static)`\n    |\n@@ -16,7 +16,7 @@ error: conflicting implementations of trait `Foo` for type `(dyn std::marker::Se\n    |\n LL | impl Foo for dyn Send + Sync {}\n    | ---------------------------- first implementation here\n-LL | \n+LL |\n LL | impl Foo for dyn Sync + Send {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `(dyn std::marker::Send + std::marker::Sync + 'static)`\n    |"}, {"sha": "e13620f06ce08b57d2dcab0240d63d8eb1c2affd", "filename": "src/test/ui/lint/lint-unnecessary-parens.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unnecessary-parens.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     return (1);\n LL +     return 1;\n-   | \n+   |\n \n error: unnecessary parentheses around `return` value\n   --> $DIR/lint-unnecessary-parens.rs:16:12\n@@ -25,7 +25,7 @@ help: remove these parentheses\n    |\n LL -     return (X { y });\n LL +     return X { y };\n-   | \n+   |\n \n error: unnecessary parentheses around type\n   --> $DIR/lint-unnecessary-parens.rs:19:46\n@@ -37,7 +37,7 @@ help: remove these parentheses\n    |\n LL - pub fn unused_parens_around_return_type() -> (u32) {\n LL + pub fn unused_parens_around_return_type() -> u32 {\n-   | \n+   |\n \n error: unnecessary parentheses around block return value\n   --> $DIR/lint-unnecessary-parens.rs:25:9\n@@ -49,7 +49,7 @@ help: remove these parentheses\n    |\n LL -         (5)\n LL +         5\n-   | \n+   |\n \n error: unnecessary parentheses around block return value\n   --> $DIR/lint-unnecessary-parens.rs:27:5\n@@ -61,7 +61,7 @@ help: remove these parentheses\n    |\n LL -     (5)\n LL +     5\n-   | \n+   |\n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:44:31\n@@ -73,7 +73,7 @@ help: remove these parentheses\n    |\n LL - pub const CONST_ITEM: usize = (10);\n LL + pub const CONST_ITEM: usize = 10;\n-   | \n+   |\n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:45:33\n@@ -85,7 +85,7 @@ help: remove these parentheses\n    |\n LL - pub static STATIC_ITEM: usize = (10);\n LL + pub static STATIC_ITEM: usize = 10;\n-   | \n+   |\n \n error: unnecessary parentheses around function argument\n   --> $DIR/lint-unnecessary-parens.rs:49:9\n@@ -97,7 +97,7 @@ help: remove these parentheses\n    |\n LL -     bar((true));\n LL +     bar(true);\n-   | \n+   |\n \n error: unnecessary parentheses around `if` condition\n   --> $DIR/lint-unnecessary-parens.rs:51:8\n@@ -109,7 +109,7 @@ help: remove these parentheses\n    |\n LL -     if (true) {}\n LL +     if true {}\n-   | \n+   |\n \n error: unnecessary parentheses around `while` condition\n   --> $DIR/lint-unnecessary-parens.rs:52:11\n@@ -121,7 +121,7 @@ help: remove these parentheses\n    |\n LL -     while (true) {}\n LL +     while true {}\n-   | \n+   |\n \n error: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:53:11\n@@ -133,7 +133,7 @@ help: remove these parentheses\n    |\n LL -     match (true) {\n LL +     match true {\n-   | \n+   |\n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:56:16\n@@ -145,7 +145,7 @@ help: remove these parentheses\n    |\n LL -     if let 1 = (1) {}\n LL +     if let 1 = 1 {}\n-   | \n+   |\n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/lint-unnecessary-parens.rs:57:19\n@@ -157,7 +157,7 @@ help: remove these parentheses\n    |\n LL -     while let 1 = (2) {}\n LL +     while let 1 = 2 {}\n-   | \n+   |\n \n error: unnecessary parentheses around method argument\n   --> $DIR/lint-unnecessary-parens.rs:73:24\n@@ -169,7 +169,7 @@ help: remove these parentheses\n    |\n LL -     X { y: false }.foo((true));\n LL +     X { y: false }.foo(true);\n-   | \n+   |\n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:75:18\n@@ -181,7 +181,7 @@ help: remove these parentheses\n    |\n LL -     let mut _a = (0);\n LL +     let mut _a = 0;\n-   | \n+   |\n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:76:10\n@@ -193,7 +193,7 @@ help: remove these parentheses\n    |\n LL -     _a = (0);\n LL +     _a = 0;\n-   | \n+   |\n \n error: unnecessary parentheses around assigned value\n   --> $DIR/lint-unnecessary-parens.rs:77:11\n@@ -205,7 +205,7 @@ help: remove these parentheses\n    |\n LL -     _a += (1);\n LL +     _a += 1;\n-   | \n+   |\n \n error: aborting due to 17 previous errors\n "}, {"sha": "5f000014c7dba2565c8c11b9b6a16f4f3da4e18a", "filename": "src/test/ui/lint/must_not_suspend/ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Fref.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: `Umm` held across a suspend point, but should not be\n    |\n LL |         let guard = &mut self.u;\n    |                          ^^^^^^\n-LL | \n+LL |\n LL |         other().await;\n    |                ------ the value is held across this suspend point\n    |"}, {"sha": "60369430a3e350481072a0707b25ddc90a0758bb", "filename": "src/test/ui/lint/must_not_suspend/trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fmust_not_suspend%2Ftrait.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -23,7 +23,7 @@ error: boxed `Wow` trait object held across a suspend point, but should not be\n    |\n LL |     let _guard2 = r#dyn();\n    |         ^^^^^^^\n-LL | \n+LL |\n LL |     other().await;\n    |            ------ the value is held across this suspend point\n    |"}, {"sha": "e926719bb6be9445673a59cdfa6da256fabb749f", "filename": "src/test/ui/lint/renamed-lints-still-apply.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frenamed-lints-still-apply.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -23,7 +23,7 @@ help: elide the single-use lifetime\n    |\n LL - fn _foo<'a>(_x: &'a u32) {}\n LL + fn _foo(_x: &u32) {}\n-   | \n+   |\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "f4c0e2141b23295aad99e068d25c58658f57c0f6", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -21,7 +21,7 @@ help: remove these parentheses\n    |\n LL -         let mut registry_no = (format!(\"NX-{}\", 74205));\n LL +         let mut registry_no = format!(\"NX-{}\", 74205);\n-   | \n+   |\n \n warning: variable does not need to be mutable\n   --> $DIR/suggestions.rs:48:13"}, {"sha": "c73884663c8f5adf06e6b8d3036a5c58aafe8cbf", "filename": "src/test/ui/lint/unused/issue-54538-unused-parens-lint.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-54538-unused-parens-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     let (a) = 0;\n LL +     let a = 0;\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:17:9\n@@ -25,7 +25,7 @@ help: remove these parentheses\n    |\n LL -     for (a) in 0..1 {}\n LL +     for a in 0..1 {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:18:12\n@@ -37,7 +37,7 @@ help: remove these parentheses\n    |\n LL -     if let (a) = 0 {}\n LL +     if let a = 0 {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:19:15\n@@ -49,7 +49,7 @@ help: remove these parentheses\n    |\n LL -     while let (a) = 0 {}\n LL +     while let a = 0 {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:20:12\n@@ -61,7 +61,7 @@ help: remove these parentheses\n    |\n LL -     fn foo((a): u8) {}\n LL +     fn foo(a: u8) {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:21:14\n@@ -73,7 +73,7 @@ help: remove these parentheses\n    |\n LL -     let _ = |(a): u8| 0;\n LL +     let _ = |a: u8| 0;\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:49:12\n@@ -85,7 +85,7 @@ help: remove these parentheses\n    |\n LL -     if let (0 | 1) = 0 {}\n LL +     if let 0 | 1 = 0 {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:50:13\n@@ -97,7 +97,7 @@ help: remove these parentheses\n    |\n LL -     if let ((0 | 1),) = (0,) {}\n LL +     if let (0 | 1,) = (0,) {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:51:13\n@@ -109,7 +109,7 @@ help: remove these parentheses\n    |\n LL -     if let [(0 | 1)] = [0] {}\n LL +     if let [0 | 1] = [0] {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:52:16\n@@ -121,7 +121,7 @@ help: remove these parentheses\n    |\n LL -     if let 0 | (1 | 2) = 0 {}\n LL +     if let 0 | 1 | 2 = 0 {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:54:15\n@@ -133,7 +133,7 @@ help: remove these parentheses\n    |\n LL -     if let TS((0 | 1)) = TS(0) {}\n LL +     if let TS(0 | 1) = TS(0) {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:56:20\n@@ -145,7 +145,7 @@ help: remove these parentheses\n    |\n LL -     if let NS { f: (0 | 1) } = (NS { f: 0 }) {}\n LL +     if let NS { f: 0 | 1 } = (NS { f: 0 }) {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:66:9\n@@ -157,7 +157,7 @@ help: remove these parentheses\n    |\n LL -         (_) => {}\n LL +         _ => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:67:9\n@@ -169,7 +169,7 @@ help: remove these parentheses\n    |\n LL -         (y) => {}\n LL +         y => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:68:9\n@@ -181,7 +181,7 @@ help: remove these parentheses\n    |\n LL -         (ref r) => {}\n LL +         ref r => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:69:9\n@@ -193,7 +193,7 @@ help: remove these parentheses\n    |\n LL -         (e @ 1...2) => {}\n LL +         e @ 1...2 => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:75:9\n@@ -205,7 +205,7 @@ help: remove these parentheses\n    |\n LL -         (e @ &(1...2)) => {}\n LL +         e @ &(1...2) => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:76:10\n@@ -217,7 +217,7 @@ help: remove these parentheses\n    |\n LL -         &(_) => {}\n LL +         &_ => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:87:9\n@@ -229,7 +229,7 @@ help: remove these parentheses\n    |\n LL -         (_) => {}\n LL +         _ => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:88:9\n@@ -241,7 +241,7 @@ help: remove these parentheses\n    |\n LL -         (y) => {}\n LL +         y => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:89:9\n@@ -253,7 +253,7 @@ help: remove these parentheses\n    |\n LL -         (ref r) => {}\n LL +         ref r => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:90:9\n@@ -265,7 +265,7 @@ help: remove these parentheses\n    |\n LL -         (e @ 1..=2) => {}\n LL +         e @ 1..=2 => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:96:9\n@@ -277,7 +277,7 @@ help: remove these parentheses\n    |\n LL -         (e @ &(1..=2)) => {}\n LL +         e @ &(1..=2) => {}\n-   | \n+   |\n \n error: unnecessary parentheses around pattern\n   --> $DIR/issue-54538-unused-parens-lint.rs:97:10\n@@ -289,7 +289,7 @@ help: remove these parentheses\n    |\n LL -         &(_) => {}\n LL +         &_ => {}\n-   | \n+   |\n \n error: aborting due to 24 previous errors\n "}, {"sha": "3f1fee332bec5f473f84ce858ed597eb7ed1defc", "filename": "src/test/ui/lint/unused/issue-74883-unused-paren-baren-yield.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-74883-unused-paren-baren-yield.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -         while let Some(_) = ({yield}) {}\n LL +         while let Some(_) = {yield} {}\n-   | \n+   |\n \n error: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:15:29\n@@ -25,7 +25,7 @@ help: remove these parentheses\n    |\n LL -         while let Some(_) = ((yield)) {}\n LL +         while let Some(_) = (yield) {}\n-   | \n+   |\n \n error: unnecessary braces around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:16:10\n@@ -42,7 +42,7 @@ help: remove these braces\n    |\n LL -         {{yield}};\n LL +         {yield};\n-   | \n+   |\n \n error: unnecessary parentheses around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:17:10\n@@ -54,7 +54,7 @@ help: remove these parentheses\n    |\n LL -         {( yield )};\n LL +         {yield};\n-   | \n+   |\n \n error: unnecessary parentheses around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:18:30\n@@ -66,7 +66,7 @@ help: remove these parentheses\n    |\n LL -         while let Some(_) = {(yield)} {}\n LL +         while let Some(_) = {yield} {}\n-   | \n+   |\n \n error: unnecessary braces around block return value\n   --> $DIR/issue-74883-unused-paren-baren-yield.rs:19:30\n@@ -78,7 +78,7 @@ help: remove these braces\n    |\n LL -         while let Some(_) = {{yield}} {}\n LL +         while let Some(_) = {yield} {}\n-   | \n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "b3b809d5f42d4c59ca6417ba2462ad8f4d617a50", "filename": "src/test/ui/lint/unused/issue-90807-unused-paren-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     for _ in (1..loop { break 2 }) {}\n LL +     for _ in 1..loop { break 2 } {}\n-   | \n+   |\n \n error: unnecessary parentheses around `for` iterator expression\n   --> $DIR/issue-90807-unused-paren-error.rs:8:14\n@@ -25,7 +25,7 @@ help: remove these parentheses\n    |\n LL -     for _ in (1..match () { () => 2 }) {}\n LL +     for _ in 1..match () { () => 2 } {}\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "7773f44ea2d38c0860855afe26fd1cc50f0643a8", "filename": "src/test/ui/lint/unused_braces.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     let _ = (7);\n LL +     let _ = 7;\n-   | \n+   |\n \n warning: unnecessary braces around `if` condition\n   --> $DIR/unused_braces.rs:26:8\n@@ -30,7 +30,7 @@ help: remove these braces\n    |\n LL -     if { true } {\n LL +     if true {\n-   | \n+   |\n \n warning: unnecessary braces around `while` condition\n   --> $DIR/unused_braces.rs:30:11\n@@ -42,7 +42,7 @@ help: remove these braces\n    |\n LL -     while { false } {\n LL +     while false {\n-   | \n+   |\n \n warning: unnecessary braces around const expression\n   --> $DIR/unused_braces.rs:34:17\n@@ -54,7 +54,7 @@ help: remove these braces\n    |\n LL -     let _: [u8; { 3 }];\n LL +     let _: [u8; 3];\n-   | \n+   |\n \n warning: unnecessary braces around function argument\n   --> $DIR/unused_braces.rs:37:13\n@@ -66,7 +66,7 @@ help: remove these braces\n    |\n LL -     consume({ 7 });\n LL +     consume(7);\n-   | \n+   |\n \n warning: 5 warnings emitted\n "}, {"sha": "05f7432b8ab36e7c9ce0889f27e691c9edcaaec2", "filename": "src/test/ui/lint/unused_braces_borrow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_braces_borrow.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these braces\n    |\n LL -     consume({ a.b });\n LL +     consume(a.b);\n-   | \n+   |\n \n warning: 1 warning emitted\n "}, {"sha": "ea19e0cdc0cb3a7982c1110b379571314728ff32", "filename": "src/test/ui/lint/unused_parens_json_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_json_suggestion.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     let _a = (1 / (2 + 3));\n LL +     let _a = 1 / (2 + 3);\n-   | \n+   |\n \n \"}\n {\"message\":\"aborting due to previous error\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to previous error"}, {"sha": "f4c6ceaf1dc1b97605f607da5cae6f43e17dd1cd", "filename": "src/test/ui/lint/unused_parens_remove_json_suggestion.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_parens_remove_json_suggestion.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     if (_b) {\n LL +     if _b {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":612,\"byte_end\":613,\"line_start\":28,\"line_end\":28,\"column_start\":7,\"column_end\":8,\"is_primary\":true,\"text\":[{\"text\":\"    if(c) {\n@@ -26,7 +26,7 @@ help: remove these parentheses\n    |\n LL -     if(c) {\n LL +     if c {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":692,\"byte_end\":693,\"line_start\":32,\"line_end\":32,\"column_start\":8,\"column_end\":9,\"is_primary\":true,\"text\":[{\"text\":\"    if (c){\n@@ -39,7 +39,7 @@ help: remove these parentheses\n    |\n LL -     if (c){\n LL +     if c {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":774,\"byte_end\":775,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":788,\"byte_end\":789,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":null,\"suggestion_applicability\":null,\"expansion\":null}],\"children\":[{\"message\":\"remove these parentheses\",\"code\":null,\"level\":\"help\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":774,\"byte_end\":775,\"line_start\":36,\"line_end\":36,\"column_start\":11,\"column_end\":12,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":11,\"highlight_end\":12}],\"label\":null,\"suggested_replacement\":\"\",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null},{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":788,\"byte_end\":789,\"line_start\":36,\"line_end\":36,\"column_start\":25,\"column_end\":26,\"is_primary\":true,\"text\":[{\"text\":\"    while (false && true){\",\"highlight_start\":25,\"highlight_end\":26}],\"label\":null,\"suggested_replacement\":\" \",\"suggestion_applicability\":\"MachineApplicable\",\"expansion\":null}],\"children\":[],\"rendered\":null}],\"rendered\":\"error: unnecessary parentheses around `while` condition\n@@ -52,7 +52,7 @@ help: remove these parentheses\n    |\n LL -     while (false && true){\n LL +     while false && true {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `if` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":802,\"byte_end\":803,\"line_start\":37,\"line_end\":37,\"column_start\":12,\"column_end\":13,\"is_primary\":true,\"text\":[{\"text\":\"        if (c) {\n@@ -65,7 +65,7 @@ help: remove these parentheses\n    |\n LL -         if (c) {\n LL +         if c {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":899,\"byte_end\":900,\"line_start\":43,\"line_end\":43,\"column_start\":10,\"column_end\":11,\"is_primary\":true,\"text\":[{\"text\":\"    while(true && false) {\n@@ -78,7 +78,7 @@ help: remove these parentheses\n    |\n LL -     while(true && false) {\n LL +     while true && false {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":968,\"byte_end\":969,\"line_start\":44,\"line_end\":44,\"column_start\":18,\"column_end\":19,\"is_primary\":true,\"text\":[{\"text\":\"        for _ in (0 .. 3){\n@@ -91,7 +91,7 @@ help: remove these parentheses\n    |\n LL -         for _ in (0 .. 3){\n LL +         for _ in 0 .. 3 {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `for` iterator expression\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1069,\"byte_end\":1070,\"line_start\":49,\"line_end\":49,\"column_start\":14,\"column_end\":15,\"is_primary\":true,\"text\":[{\"text\":\"    for _ in (0 .. 3) {\n@@ -104,7 +104,7 @@ help: remove these parentheses\n    |\n LL -     for _ in (0 .. 3) {\n LL +     for _ in 0 .. 3 {\n-   | \n+   |\n \n \"}\n {\"message\":\"unnecessary parentheses around `while` condition\",\"code\":{\"code\":\"unused_parens\",\"explanation\":null},\"level\":\"error\",\"spans\":[{\"file_name\":\"$DIR/unused_parens_remove_json_suggestion.rs\",\"byte_start\":1128,\"byte_end\":1129,\"line_start\":50,\"line_end\":50,\"column_start\":15,\"column_end\":16,\"is_primary\":true,\"text\":[{\"text\":\"        while (true && false) {\n@@ -117,7 +117,7 @@ help: remove these parentheses\n    |\n LL -         while (true && false) {\n LL +         while true && false {\n-   | \n+   |\n \n \"}\n {\"message\":\"aborting due to 9 previous errors\",\"code\":null,\"level\":\"error\",\"spans\":[],\"children\":[],\"rendered\":\"error: aborting due to 9 previous errors"}, {"sha": "f7d131109ea8f9f6248abebe83deface18ac49cd", "filename": "src/test/ui/liveness/liveness-use-after-move.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fliveness%2Fliveness-use-after-move.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL |     let x: Box<_> = 5.into();\n    |         - move occurs because `x` has type `Box<i32>`, which does not implement the `Copy` trait\n LL |     let y = x;\n    |             - value moved here\n-LL | \n+LL |\n LL |     println!(\"{}\", *x);\n    |                    ^^ value borrowed here after move\n    |"}, {"sha": "4ea760ab82b9c6f7bcc13e3ac4e431d8b697f350", "filename": "src/test/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if you import `bar`, refer to it directly\n    |\n LL -     a::bar();\n LL +     bar();\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a6add31d1c510707f62bbc97825f030499778137", "filename": "src/test/ui/match/match-tag-nullary.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-tag-nullary.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | enum B { B }\n    |          - unit variant defined here\n-LL | \n+LL |\n LL | fn main() { let x: A = A::A; match x { B::B => { } } }\n    |                                    -   ^^^^ expected enum `A`, found enum `B`\n    |                                    |"}, {"sha": "e63ca6e11de59f31bcdb5f33f0b14f4836efb691", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -30,7 +30,7 @@ help: consider borrowing the value\n    |\n LL -     let _ = v as &u8;\n LL +     let _ = &*v;\n-   | \n+   |\n \n error[E0605]: non-primitive cast: `*const u8` as `E`\n   --> $DIR/cast-rfc0401.rs:30:13"}, {"sha": "f43427f9832d03d0ebc4b989a4394269f1d74113", "filename": "src/test/ui/mismatched_types/issue-38371.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-38371.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: to take parameter `_a` by reference, move `&` to the type\n    |\n LL - fn foo(&_a: Foo) {}\n LL + fn foo(_a: &Foo) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/issue-38371.rs:16:9\n@@ -28,7 +28,7 @@ help: consider removing `&` from the pattern\n    |\n LL - fn agh(&&_a: &u32) {}\n LL + fn agh(&_a: &u32) {}\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0e8f8853fb751d3baf37bbf6a87be70641e096d9", "filename": "src/test/ui/mismatched_types/ref-pat-suggestions.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fref-pat-suggestions.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: to take parameter `_a` by reference, move `&` to the type\n    |\n LL - fn _f0(&_a: u32) {}\n LL + fn _f0(_a: &u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:4:8\n@@ -28,7 +28,7 @@ help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL - fn _f1(&mut _a: u32) {}\n LL + fn _f1(_a: &mut u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:5:9\n@@ -44,7 +44,7 @@ help: consider removing `&` from the pattern\n    |\n LL - fn _f2(&&_a: &u32) {}\n LL + fn _f2(&_a: &u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:6:13\n@@ -60,7 +60,7 @@ help: consider removing `&` from the pattern\n    |\n LL - fn _f3(&mut &_a: &mut u32) {}\n LL + fn _f3(&mut _a: &mut u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:7:9\n@@ -76,7 +76,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL - fn _f4(&&mut _a: &u32) {}\n LL + fn _f4(&_a: &u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:8:13\n@@ -92,7 +92,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL - fn _f5(&mut &mut _a: &mut u32) {}\n LL + fn _f5(&mut _a: &mut u32) {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:11:23\n@@ -109,7 +109,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let _: fn(u32) = |&_a| ();\n LL +     let _: fn(u32) = |_a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:12:23\n@@ -126,7 +126,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(u32) = |&mut _a| ();\n LL +     let _: fn(u32) = |_a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:13:25\n@@ -143,7 +143,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let _: fn(&u32) = |&&_a| ();\n LL +     let _: fn(&u32) = |&_a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:14:33\n@@ -160,7 +160,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let _: fn(&mut u32) = |&mut &_a| ();\n LL +     let _: fn(&mut u32) = |&mut _a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:15:25\n@@ -177,7 +177,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(&u32) = |&&mut _a| ();\n LL +     let _: fn(&u32) = |&_a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:16:33\n@@ -194,7 +194,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     let _: fn(&mut u32) = |&mut &mut _a| ();\n LL +     let _: fn(&mut u32) = |&mut _a| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:18:14\n@@ -210,7 +210,7 @@ help: to take parameter `_a` by reference, move `&` to the type\n    |\n LL -     let _ = |&_a: u32| ();\n LL +     let _ = |_a: &u32| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:19:14\n@@ -226,7 +226,7 @@ help: to take parameter `_a` by reference, move `&mut` to the type\n    |\n LL -     let _ = |&mut _a: u32| ();\n LL +     let _ = |_a: &mut u32| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:20:15\n@@ -242,7 +242,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let _ = |&&_a: &u32| ();\n LL +     let _ = |&_a: &u32| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:21:19\n@@ -258,7 +258,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     let _ = |&mut &_a: &mut u32| ();\n LL +     let _ = |&mut _a: &mut u32| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:22:15\n@@ -274,7 +274,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     let _ = |&&mut _a: &u32| ();\n LL +     let _ = |&_a: &u32| ();\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/ref-pat-suggestions.rs:23:19\n@@ -290,7 +290,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     let _ = |&mut &mut _a: &mut u32| ();\n LL +     let _ = |&mut _a: &mut u32| ();\n-   | \n+   |\n \n error: aborting due to 18 previous errors\n "}, {"sha": "f33951c98bfb3aa5d67b5d0b21e2574b0540400b", "filename": "src/test/ui/missing/missing-items/missing-type-parameter2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-items%2Fmissing-type-parameter2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0412]: cannot find type `N` in this scope\n    |\n LL | struct X<const N: u8>();\n    | ------------------------ similarly named struct `X` defined here\n-LL | \n+LL |\n LL | impl X<N> {}\n    |        ^\n    |"}, {"sha": "ccdd4dd272e9b534338768122e67b84451bbe7c1", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -22,7 +22,7 @@ help: if you import `S`, refer to it directly\n    |\n LL -     check(m1::S);\n LL +     check(S);\n-   | \n+   |\n \n error[E0423]: expected value, found type alias `xm1::S`\n   --> $DIR/namespace-mix.rs:40:11\n@@ -50,7 +50,7 @@ help: if you import `S`, refer to it directly\n    |\n LL -     check(xm1::S);\n LL +     check(S);\n-   | \n+   |\n \n error[E0423]: expected value, found struct variant `m7::V`\n   --> $DIR/namespace-mix.rs:100:11\n@@ -81,7 +81,7 @@ help: if you import `V`, refer to it directly\n    |\n LL -     check(m7::V);\n LL +     check(V);\n-   | \n+   |\n \n error[E0423]: expected value, found struct variant `xm7::V`\n   --> $DIR/namespace-mix.rs:106:11\n@@ -114,7 +114,7 @@ help: if you import `V`, refer to it directly\n    |\n LL -     check(xm7::V);\n LL +     check(V);\n-   | \n+   |\n \n error[E0277]: the trait bound `c::Item: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:33:11"}, {"sha": "52d07ae170c417a677c21e9b5f87c100276ac27d", "filename": "src/test/ui/never_type/diverging-tuple-parts-39485.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fdiverging-tuple-parts-39485.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: consider removing the borrow\n    |\n LL -     &panic!()\n LL +     panic!()\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/diverging-tuple-parts-39485.rs:12:5"}, {"sha": "3c0daa4c55f017b39ece743b5d2e666600688ac0", "filename": "src/test/ui/never_type/issue-52443.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-52443.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -27,7 +27,7 @@ help: consider removing the borrow\n    |\n LL -     [(); & { loop { continue } } ];\n LL +     [(); { loop { continue } } ];\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/issue-52443.rs:4:17"}, {"sha": "cdfe7f6db82a929eb29c4c6f1f7e608aaa4b7004", "filename": "src/test/ui/nll/capture-ref-in-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcapture-ref-in-struct.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -6,7 +6,7 @@ LL |             y: &y,\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "49ec0dd931ac0e42c5ebd910322277bba7ed346d", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -32,7 +32,7 @@ LL |         closure(&mut p, &y);\n LL |\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "f0ae4c7fb0492430dc6171bfa54401647dbdbb44", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -54,7 +54,7 @@ LL |             let mut closure1 = || p = &y;\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "e99fc4b43a23ddb050f7653c70ae323a21b2de31", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -36,7 +36,7 @@ LL |         let mut closure = || p = &y;\n ...\n LL |     }\n    |     - `y` dropped here while still borrowed\n-LL | \n+LL |\n LL |     deref(p);\n    |           - borrow later used here\n "}, {"sha": "ac385e056b9f81712c7e58248950222e04f9d72a", "filename": "src/test/ui/nll/issue-52534-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52534-2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -6,7 +6,7 @@ LL |         y = &x\n LL |\n LL |     }\n    |     - `x` dropped here while still borrowed\n-LL | \n+LL |\n LL |     println!(\"{}\", y);\n    |                    - borrow later used here\n "}, {"sha": "d8f43cbc92a1e7874581d6af9fa21704c9cec2be", "filename": "src/test/ui/nll/issue-54382-use-span-of-tail-of-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54382-use-span-of-tail-of-block.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ LL |             D(\"other\").next(&_thing1)\n ...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n-LL | \n+LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |"}, {"sha": "92f5ffdf388ed22e724e4e53ab1df8efb8ee84ed", "filename": "src/test/ui/nll/issue-54556-temps-in-tail-diagnostic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-54556-temps-in-tail-diagnostic.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ LL |         D(&_thing1).end()\n    |         a temporary with access to the borrow is created here ...\n LL |     }\n    |     - `_thing1` dropped here while still borrowed\n-LL | \n+LL |\n LL |     ;\n    |     - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `D`\n    |"}, {"sha": "7fa2090e3e614d348c3a2b0374a2842712148221", "filename": "src/test/ui/no-capture-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fno-capture-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-capture-arc.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `arc_v`\n    |\n LL |     let arc_v = Arc::new(v);\n    |         ----- move occurs because `arc_v` has type `Arc<Vec<i32>>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);"}, {"sha": "bcc4506dc8d1c928c36755ff634d9643a2369390", "filename": "src/test/ui/no-reuse-move-arc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-reuse-move-arc.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0382]: borrow of moved value: `arc_v`\n    |\n LL |     let arc_v = Arc::new(v);\n    |         ----- move occurs because `arc_v` has type `Arc<Vec<i32>>`, which does not implement the `Copy` trait\n-LL | \n+LL |\n LL |     thread::spawn(move|| {\n    |                   ------ value moved into closure here\n LL |         assert_eq!((*arc_v)[3], 4);"}, {"sha": "4da97ed5d60eb481bb12bbb0e075e77b5b796a7f", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -296,7 +296,7 @@ help: remove the `format!(..)` macro call\n    |\n LL -     panic!(format!(\"{}\", 1));\n LL +     panic!(\"{}\", 1);\n-   | \n+   |\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:50:18\n@@ -311,7 +311,7 @@ help: remove the `format!(..)` macro call\n    |\n LL -     unreachable!(format!(\"{}\", 1));\n LL +     unreachable!(\"{}\", 1);\n-   | \n+   |\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:51:20\n@@ -326,7 +326,7 @@ help: remove the `format!(..)` macro call\n    |\n LL -     assert!(false, format!(\"{}\", 1));\n LL +     assert!(false, \"{}\", 1);\n-   | \n+   |\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:52:26\n@@ -341,7 +341,7 @@ help: remove the `format!(..)` macro call\n    |\n LL -     debug_assert!(false, format!(\"{}\", 1));\n LL +     debug_assert!(false, \"{}\", 1);\n-   | \n+   |\n \n warning: panic message is not a string literal\n   --> $DIR/non-fmt-panic.rs:54:12"}, {"sha": "78b35569c21629151808ebd604f076a9b1e40d71", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -6,7 +6,7 @@ LL |       let hello = move || {\n LL | |         println!(\"Hello {}\", a.0);\n LL | |     };\n    | |_____- within this `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n-LL | \n+LL |\n LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |"}, {"sha": "0836ceaecd1985554791cb7b1af05821c598b7cd", "filename": "src/test/ui/packed/issue-27060-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpacked%2Fissue-27060-2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - pub struct Bad<T: ?Sized> {\n LL + pub struct Bad<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     data: &T,"}, {"sha": "7bb3db0301b3a7eb53bbb60fac72ec4b8e5005a6", "filename": "src/test/ui/parser/attr-stmt-expr-attr-bad.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-stmt-expr-attr-bad.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -322,7 +322,7 @@ help: to annotate the item macro invocation, change the attribute from inner to\n    |\n LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!(); }\n LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!(); }\n-   | \n+   |\n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:80:32\n@@ -338,7 +338,7 @@ help: to annotate the item macro invocation, change the attribute from inner to\n    |\n LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo![]; }\n LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo![]; }\n-   | \n+   |\n \n error: an inner attribute is not permitted following an outer attribute\n   --> $DIR/attr-stmt-expr-attr-bad.rs:82:32\n@@ -354,7 +354,7 @@ help: to annotate the item macro invocation, change the attribute from inner to\n    |\n LL - #[cfg(FALSE)] fn s() { #[attr] #![attr] foo!{}; }\n LL + #[cfg(FALSE)] fn s() { #[attr] #[attr] foo!{}; }\n-   | \n+   |\n \n error[E0586]: inclusive range with no end\n   --> $DIR/attr-stmt-expr-attr-bad.rs:88:35"}, {"sha": "0de3490b8ea98b9be7bc76a1d5f5104d51f51faf", "filename": "src/test/ui/parser/attr-with-a-semicolon.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr-with-a-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr-with-a-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr-with-a-semicolon.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider removing this semicolon\n    |\n LL - #[derive(Debug, Clone)];\n LL + #[derive(Debug, Clone)]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "7cd0ac2244afea754a3fb69e5cb35f3b5c591734", "filename": "src/test/ui/parser/attr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fattr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fattr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: to annotate the function, change the attribute from inner to outer style\n    |\n LL - #![lang = \"foo\"]\n LL + #[lang = \"foo\"]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1094def6014a97704924e52e27be3adc0aea00f1", "filename": "src/test/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -18,7 +18,7 @@ help: if you import `hi_str`, refer to it directly\n    |\n LL -     println!(\"{}\", circular_modules_main::hi_str());\n LL +     println!(\"{}\", hi_str());\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fc0bc507370af93d8eb91715891dcf43d04fc1ec", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: you might have meant to write a regular comment\n    |\n LL -     if true /*!*/ {}\n LL +     if true /**/ {}\n-   | \n+   |\n \n error: outer attributes are not allowed on `if` and `else` branches\n   --> $DIR/doc-comment-in-if-statement.rs:2:13"}, {"sha": "9b939f05e024d25a2abee18e6bc6ee4394795a3a", "filename": "src/test/ui/parser/expr-as-stmt-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt-2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -40,7 +40,7 @@ help: consider removing the `&&`\n    |\n LL -     &&\n LL +     if let Some(y) = a { true } else { false }\n-   | \n+   |\n help: parentheses are required to parse this as an expression\n    |\n LL |     (if let Some(x) = a { true } else { false })"}, {"sha": "8eb81301bc3e8f667d1de091c72a89a7b8ae443c", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -174,7 +174,7 @@ help: consider removing the `&&`\n    |\n LL -     { true } && { true }\n LL +     { true } { true }\n-   | \n+   |\n help: parentheses are required to parse this as an expression\n    |\n LL |     ({ true }) && { true }"}, {"sha": "1dc69fd9f465946d77f34bfc2f3f9bbdb38cda48", "filename": "src/test/ui/parser/increment-autofix.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-autofix.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: use `+= 1` instead\n    |\n LL -     ++i;\n LL +     i += 1;\n-   | \n+   |\n \n error: Rust has no prefix increment operator\n   --> $DIR/increment-autofix.rs:11:11\n@@ -33,7 +33,7 @@ help: use `+= 1` instead\n    |\n LL -     ++tmp;\n LL +     tmp += 1;\n-   | \n+   |\n \n error: Rust has no prefix increment operator\n   --> $DIR/increment-autofix.rs:25:11"}, {"sha": "352d98cf82ec7aca1df839c5af739a99cde5b506", "filename": "src/test/ui/parser/increment-notfixed.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fincrement-notfixed.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ LL |     { let tmp = i; i += 1; tmp };\n    |     +++++++++++  ~~~~~~~~~~~~~~~\n LL -     i++;\n LL +     i += 1;\n-   | \n+   |\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:17:12\n@@ -26,7 +26,7 @@ LL |     while { let tmp = i; i += 1; tmp } < 5 {\n    |           +++++++++++  ~~~~~~~~~~~~~~~\n LL -     while i++ < 5 {\n LL +     while i += 1 < 5 {\n-   | \n+   |\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:25:8\n@@ -40,7 +40,7 @@ LL |     { let tmp_ = tmp; tmp += 1; tmp_ };\n    |     ++++++++++++    ~~~~~~~~~~~~~~~~~~\n LL -     tmp++;\n LL +     tmp += 1;\n-   | \n+   |\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:31:14\n@@ -56,7 +56,7 @@ LL |     while { let tmp_ = tmp; tmp += 1; tmp_ } < 5 {\n    |           ++++++++++++    ~~~~~~~~~~~~~~~~~~\n LL -     while tmp++ < 5 {\n LL +     while tmp += 1 < 5 {\n-   | \n+   |\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:39:16\n@@ -70,7 +70,7 @@ LL |     { let tmp = foo.bar.qux; foo.bar.qux += 1; tmp };\n    |     +++++++++++            ~~~~~~~~~~~~~~~~~~~~~~~~~\n LL -     foo.bar.qux++;\n LL +     foo.bar.qux += 1;\n-   | \n+   |\n \n error: Rust has no postfix increment operator\n   --> $DIR/increment-notfixed.rs:49:10\n@@ -84,7 +84,7 @@ LL |     { let tmp = s.tmp; s.tmp += 1; tmp };\n    |     +++++++++++      ~~~~~~~~~~~~~~~~~~~\n LL -     s.tmp++;\n LL +     s.tmp += 1;\n-   | \n+   |\n \n error: Rust has no prefix increment operator\n   --> $DIR/increment-notfixed.rs:56:5\n@@ -96,7 +96,7 @@ help: use `+= 1` instead\n    |\n LL -     ++foo.bar.qux;\n LL +     foo.bar.qux += 1;\n-   | \n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "2cfafac7794261e810ff735978394ad6260cf7e1", "filename": "src/test/ui/parser/inner-attr-after-doc-comment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr-after-doc-comment.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL | / /**\n LL | |  * My module\n LL | |  */\n    | |___- previous doc comment\n-LL | \n+LL |\n LL |   #![recursion_limit=\"100\"]\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n LL |\n@@ -17,7 +17,7 @@ help: to annotate the function, change the attribute from inner to outer style\n    |\n LL - #![recursion_limit=\"100\"]\n LL + #[recursion_limit=\"100\"]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "331c254a52b48aaa470bc4a2b2917fbbdb3e2723", "filename": "src/test/ui/parser/inner-attr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Finner-attr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: an inner attribute is not permitted following an outer attribute\n    |\n LL | #[feature(lang_items)]\n    | ---------------------- previous outer attribute\n-LL | \n+LL |\n LL | #![recursion_limit=\"100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^ not permitted following an outer attribute\n LL | fn main() {}\n@@ -14,7 +14,7 @@ help: to annotate the function, change the attribute from inner to outer style\n    |\n LL - #![recursion_limit=\"100\"]\n LL + #[recursion_limit=\"100\"]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c441a92abad92c99cfa345e248ab1415f08fae7e", "filename": "src/test/ui/parser/issues/issue-30318.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-30318.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-30318.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-30318.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -25,7 +25,7 @@ help: to annotate the function, change the attribute from inner to outer style\n    |\n LL - #![test]\n LL + #[test]\n-   | \n+   |\n \n error[E0753]: expected outer doc comment\n   --> $DIR/issue-30318.rs:13:1\n@@ -52,7 +52,7 @@ help: you might have meant to write a regular comment\n    |\n LL - //! Misplaced comment...\n LL + // Misplaced comment...\n-   | \n+   |\n \n error[E0753]: expected outer doc comment\n   --> $DIR/issue-30318.rs:23:1\n@@ -65,7 +65,7 @@ help: you might have meant to write a regular comment\n    |\n LL - /*! Misplaced comment... */\n LL + /* Misplaced comment... */\n-   | \n+   |\n \n error: expected item after doc comment\n   --> $DIR/issue-30318.rs:23:1"}, {"sha": "0e2b0d62ef6d3935945c52e0a60e35252919959f", "filename": "src/test/ui/parser/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-34255-1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if `Test::Drill` is a function, use the arguments directly\n    |\n LL -     Test::Drill(field: 42);\n LL +     Test::Drill(42);\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4cf273d8be50c925738d26d3018e52cea6a96732", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -23,7 +23,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     vec![1, 2, 3]: Vec<i32>[0];\n LL +     vec![1, 2, 3][0];\n-   | \n+   |\n \n error: casts cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:17:5\n@@ -50,7 +50,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     (&[0i32]): &[i32; 1][0];\n LL +     (&[0i32])[0];\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:39:13\n@@ -66,7 +66,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     let _ = 0i32: i32: i32.count_ones();\n LL +     let _ = 0i32: i32.count_ones();\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:41:13\n@@ -82,7 +82,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     let _ = 0 as i32: i32.count_ones();\n LL +     let _ = 0 as i32.count_ones();\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:43:13\n@@ -131,7 +131,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     let _ = 0i32: i32.count_ones(): u32;\n LL +     let _ = 0i32.count_ones(): u32;\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:51:13\n@@ -158,7 +158,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     let _ = 0i32: i32.count_ones() as u32;\n LL +     let _ = 0i32.count_ones() as u32;\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:55:13\n@@ -185,7 +185,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     let _ = 0i32: i32: i32.count_ones() as u32 as i32;\n LL +     let _ = 0i32: i32.count_ones() as u32 as i32;\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:62:13\n@@ -237,7 +237,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     0: i32.max(0);\n LL +     0.max(0);\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:92:8\n@@ -264,7 +264,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     if 5u64: u64.max(0) == 0 {\n LL +     if 5u64.max(0) == 0 {\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:102:9\n@@ -291,7 +291,7 @@ help: alternatively, remove the type ascription\n    |\n LL -         5u64: u64.max(0) == 0\n LL +         5u64.max(0) == 0\n-   | \n+   |\n \n error: casts cannot be followed by indexing\n   --> $DIR/issue-35813-postfix-after-cast.rs:111:24\n@@ -318,7 +318,7 @@ help: alternatively, remove the type ascription\n    |\n LL - static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n LL + static bar2: &[i32] = &(&[1i32,2,3][0..1]);\n-   | \n+   |\n \n error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n@@ -345,7 +345,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     Err(0u64): Result<u64,u64>?;\n LL +     Err(0u64)?;\n-   | \n+   |\n \n error: casts cannot be followed by a function call\n   --> $DIR/issue-35813-postfix-after-cast.rs:145:5\n@@ -372,7 +372,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     drop_ptr: fn(u8)(0);\n LL +     drop_ptr(0);\n-   | \n+   |\n \n error: casts cannot be followed by `.await`\n   --> $DIR/issue-35813-postfix-after-cast.rs:152:5\n@@ -399,7 +399,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     Box::pin(noop()): Pin<Box<_>>.await;\n LL +     Box::pin(noop()).await;\n-   | \n+   |\n \n error: casts cannot be followed by a field access\n   --> $DIR/issue-35813-postfix-after-cast.rs:167:5\n@@ -426,7 +426,7 @@ help: alternatively, remove the type ascription\n    |\n LL -     Foo::default(): Foo.bar;\n LL +     Foo::default().bar;\n-   | \n+   |\n \n error: casts cannot be followed by a method call\n   --> $DIR/issue-35813-postfix-after-cast.rs:84:9\n@@ -453,7 +453,7 @@ help: alternatively, remove the type ascription\n    |\n LL -         if true { 33 } else { 44 }: i32.max(0)\n LL +         if true { 33 } else { 44 }.max(0)\n-   | \n+   |\n \n error[E0214]: parenthesized type parameters may only be used with a `Fn` trait\n   --> $DIR/issue-35813-postfix-after-cast.rs:131:13"}, {"sha": "1f0c1ea4c2f13b032ab6f55c50bf6e2f1f1cc66a", "filename": "src/test/ui/parser/issues/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-44406.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -27,7 +27,7 @@ help: if `bar` is a function, use the arguments directly\n    |\n LL -         bar(baz: $rest)\n LL +         bar(: $rest)\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "081a72054e8da88772d7a92040eb221171d4a950", "filename": "src/test/ui/parser/issues/issue-45296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-45296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-45296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-45296.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: to annotate the function, change the attribute from inner to outer style\n    |\n LL -     #![allow(unused_variables)]\n LL +     #[allow(unused_variables)]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "2fa05dd2dfbb389295126e1441c2e9344998d2b1", "filename": "src/test/ui/parser/issues/issue-56031.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-56031.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-56031.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-56031.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: for an inherent impl, drop this `for`\n    |\n LL - impl for T {}\n LL + impl T {}\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ae89926914ebaa7d6c4592d6df24afdf2ea2e64f", "filename": "src/test/ui/parser/issues/issue-62894.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62894.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -6,7 +6,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -18,7 +18,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -30,7 +30,7 @@ LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |        |           |\n    |        |           unclosed delimiter\n    |        unclosed delimiter\n-LL | \n+LL |\n LL | fn main() {}\n    |              ^\n \n@@ -39,7 +39,7 @@ error: expected one of `(`, `[`, or `{`, found keyword `fn`\n    |\n LL | fn f() { assert_eq!(f(), (), assert_eq!(assert_eq!\n    |                                                   - expected one of `(`, `[`, or `{`\n-LL | \n+LL |\n LL | fn main() {}\n    | ^^ unexpected token\n    |"}, {"sha": "bc3358fc6baa6f7c661005dc50cab7e634967419", "filename": "src/test/ui/parser/issues/issue-62973.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-62973.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,8 +5,8 @@ LL | fn p() { match s { v, E { [) {) }\n    |        -         - unclosed delimiter\n    |        |\n    |        unclosed delimiter\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^\n \n error: this file contains an unclosed delimiter\n@@ -16,8 +16,8 @@ LL | fn p() { match s { v, E { [) {) }\n    |        -         - unclosed delimiter\n    |        |\n    |        unclosed delimiter\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^\n \n error: expected one of `,` or `}`, found `{`\n@@ -51,8 +51,8 @@ error: expected one of `.`, `?`, `{`, or an operator, found `}`\n    |\n LL | fn p() { match s { v, E { [) {) }\n    |          ----- while parsing this `match` expression\n-LL | \n-LL | \n+LL |\n+LL |\n    |  ^ expected one of `.`, `?`, `{`, or an operator\n \n error: mismatched closing delimiter: `)`"}, {"sha": "363e08201f48245be5d1efe091c103eba694d79a", "filename": "src/test/ui/parser/issues/issue-88276-unary-plus.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88276-unary-plus.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88276-unary-plus.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88276-unary-plus.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: try removing the `+`\n    |\n LL -     let _ = +1;\n LL +     let _ = 1;\n-   | \n+   |\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:5:20\n@@ -20,7 +20,7 @@ help: try removing the `+`\n    |\n LL -     let _ = (1.0 + +2.0) * +3.0;\n LL +     let _ = (1.0 + 2.0) * +3.0;\n-   | \n+   |\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:5:28\n@@ -32,7 +32,7 @@ help: try removing the `+`\n    |\n LL -     let _ = (1.0 + +2.0) * +3.0;\n LL +     let _ = (1.0 + +2.0) * 3.0;\n-   | \n+   |\n \n error: leading `+` is not supported\n   --> $DIR/issue-88276-unary-plus.rs:7:14\n@@ -44,7 +44,7 @@ help: try removing the `+`\n    |\n LL -     let _ = [+3, 4+6];\n LL +     let _ = [3, 4+6];\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6e624c5a284e820740a642e1d909c65557492983", "filename": "src/test/ui/parser/issues/issue-88818.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88818.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88818.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-88818.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: for an inherent impl, drop this `for`\n    |\n LL - impl for S { }\n LL + impl S { }\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a5ee244452007ffcdd9748f8aba6a036836cf0c8", "filename": "src/test/ui/parser/issues/issue-89971-outer-attr-following-inner-attr-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-89971-outer-attr-following-inner-attr-ice.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: to annotate the struct, change the attribute from inner to outer style\n    |\n LL - #![deny(missing_docs)]\n LL + #[deny(missing_docs)]\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "a258bd3ccde57562afa8eae6eeeb399454af9a18", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -52,7 +52,7 @@ help: consider removing the label\n    |\n LL -     'l4 0;\n LL +     0;\n-   | \n+   |\n \n error: labeled expression must be followed by `:`\n   --> $DIR/labeled-no-colon-expr.rs:8:9"}, {"sha": "165eb8ae9328217aaa8177b88fc299aff0da0b47", "filename": "src/test/ui/parser/mismatched-delim-brace-empty-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-delim-brace-empty-block.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: unexpected closing delimiter: `}`\n    |\n LL | fn main() {\n    |           - this opening brace...\n-LL | \n+LL |\n LL | }\n    | - ...matches this closing brace\n LL |     let _ = ();"}, {"sha": "152f7f2fb0626b792df954196fa9ce5530c18570", "filename": "src/test/ui/parser/recover-assoc-eq-missing-term.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-assoc-eq-missing-term.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: remove the `=` if `Item` is a type\n    |\n LL -     bar::<Item =   >();\n LL +     bar::<Item >();\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "3bad29f20afc589d15cd5ef86d15d01c65f3d7f1", "filename": "src/test/ui/parser/recover-for-loop-parens-around-head.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-for-loop-parens-around-head.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: remove parentheses in `for` loop\n    |\n LL -     for ( elem in vec ) {\n LL +     for  elem in vec  {\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/recover-for-loop-parens-around-head.rs:13:38"}, {"sha": "483312c16cc9cef974dddc0756eb3e20a158cf4d", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if `Enum::Foo` is a function, use the arguments directly\n    |\n LL -     let x = Enum::Foo(a: 3, b: 4);\n LL +     let x = Enum::Foo(3, 4);\n-   | \n+   |\n \n error[E0532]: expected tuple struct or tuple variant, found struct variant `Enum::Foo`\n   --> $DIR/recover-from-bad-variant.rs:10:9"}, {"sha": "04fc1203e90ed55aad74680011b97ecead265539", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider removing the label\n    |\n LL -     let _ = 'label: 1 + 1;\n LL +     let _ = 1 + 1;\n-   | \n+   |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n   --> $DIR/recover-labeled-non-block-expr.rs:6:13\n@@ -20,7 +20,7 @@ help: consider removing the label\n    |\n LL -     'label: match () { () => {}, };\n LL +     match () { () => {}, };\n-   | \n+   |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n   --> $DIR/recover-labeled-non-block-expr.rs:7:13"}, {"sha": "6eb9c7238cb82f7ced2760e7947e8d5eb06f4202", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: remove the parentheses\n    |\n LL - fn foo2(_: &dyn (Drop + AsRef<str>)) {}\n LL + fn foo2(_: &dyn Drop + AsRef<str>) {}\n-   | \n+   |\n \n error: expected parameter name, found `{`\n   --> $DIR/trait-object-delimiters.rs:8:17"}, {"sha": "7ee965bd2babd7b9b408009fecc5e4581d00b7b3", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -29,7 +29,7 @@ help: use `dyn`\n    |\n LL -     let _: Box<(Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n LL +     let _: Box<dyn (Obj) + (?Sized) + (for<'a> Trait<'a>)>;\n-   | \n+   |\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:8:35\n@@ -54,7 +54,7 @@ help: use `dyn`\n    |\n LL -     let _: Box<?Sized + (for<'a> Trait<'a>) + (Obj)>;\n LL +     let _: Box<dyn ?Sized + (for<'a> Trait<'a>) + (Obj)>;\n-   | \n+   |\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:13:47\n@@ -79,7 +79,7 @@ help: use `dyn`\n    |\n LL -     let _: Box<for<'a> Trait<'a> + (Obj) + (?Sized)>;\n LL +     let _: Box<dyn for<'a> Trait<'a> + (Obj) + (?Sized)>;\n-   | \n+   |\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/trait-object-trait-parens.rs:18:36"}, {"sha": "abfeb62fcbb46e6849d9856d481684f3a46b3c9f", "filename": "src/test/ui/parser/type-alias-where-fixable.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftype-alias-where-fixable.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: move it to the end of the type declaration\n    |\n LL -     type Assoc where u32: Copy = ();\n LL +     type Assoc  = () where u32: Copy;\n-   | \n+   |\n \n warning: where clause not allowed here\n   --> $DIR/type-alias-where-fixable.rs:18:17\n@@ -23,7 +23,7 @@ help: move it to the end of the type declaration\n    |\n LL -     type Assoc2 where u32: Copy = () where i32: Copy;\n LL +     type Assoc2  = () where i32: Copy, u32: Copy;\n-   | \n+   |\n \n warning: where clause not allowed here\n   --> $DIR/type-alias-where-fixable.rs:26:17\n@@ -36,7 +36,7 @@ help: move it to the end of the type declaration\n    |\n LL -     type Assoc2 where u32: Copy, i32: Copy = ();\n LL +     type Assoc2  = () where u32: Copy, i32: Copy;\n-   | \n+   |\n \n warning: 3 warnings emitted\n "}, {"sha": "2cc786fd947c2cea42fc71a4d6b015967419fc42", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     return (<T as ToString>::to_string(&arg));\n LL +     return <T as ToString>::to_string(&arg);\n-   | \n+   |\n \n warning: 1 warning emitted\n "}, {"sha": "ad737f7bd15e17f94d4f37070ff2d27ed63c7966", "filename": "src/test/ui/pattern/for-loop-bad-item.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Ffor-loop-bad-item.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing `&mut` from the pattern\n    |\n LL -     for ((_, _), (&mut c, _)) in &mut map {\n LL +     for ((_, _), (c, _)) in &mut map {\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/for-loop-bad-item.rs:14:14"}, {"sha": "5f2c4935bad374d36da16f12a8e7a9575091845f", "filename": "src/test/ui/privacy/private-in-public-warn.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-in-public-warn.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -320,7 +320,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL -     pub type Alias<T: PrivTr> = T;\n LL +     pub type Alias<T> = T;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/private-in-public-warn.rs:74:29\n@@ -332,7 +332,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL -     pub type Alias<T> where T: PrivTr = T;\n LL +     pub type Alias<T>  = T;\n-   | \n+   |\n \n error: aborting due to 34 previous errors; 2 warnings emitted\n "}, {"sha": "cb1b760c282b5e5e28dbd17f9b59e5adb8b5b402", "filename": "src/test/ui/reachable/unreachable-code.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Funreachable-code.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error: unreachable statement\n    |\n LL |   loop{}\n    |   ------ any code following this expression is unreachable\n-LL | \n+LL |\n LL |   let a = 3;\n    |   ^^^^^^^^^^ unreachable statement\n    |"}, {"sha": "6448e596d56cf380bb7c34953f43fc0762fd1c00", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if you import `A`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::A;\n LL +     let _ = A;\n-   | \n+   |\n \n error[E0425]: cannot find function, tuple struct or tuple variant `B` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:7:31\n@@ -28,7 +28,7 @@ help: if you import `B`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::B(10);\n LL +     let _ = B(10);\n-   | \n+   |\n \n error[E0422]: cannot find struct, variant or union type `C` in crate `namespaced_enums`\n   --> $DIR/enums-are-namespaced-xc.rs:9:31\n@@ -44,7 +44,7 @@ help: if you import `C`, refer to it directly\n    |\n LL -     let _ = namespaced_enums::C { a: 10 };\n LL +     let _ = C { a: 10 };\n-   | \n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "8b89c350c846098f0a0e0f29545cb612ad856459", "filename": "src/test/ui/resolve/issue-23716.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23716.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | static foo: i32 = 0;\n    | -------------------- the static `foo` is defined here\n-LL | \n+LL |\n LL | fn bar(foo: i32) {}\n    |        ^^^ cannot be named the same as a static\n \n@@ -12,7 +12,7 @@ error[E0530]: function parameters cannot shadow statics\n    |\n LL | use self::submod::answer;\n    |     -------------------- the static `answer` is imported here\n-LL | \n+LL |\n LL | fn question(answer: i32) {}\n    |             ^^^^^^ cannot be named the same as a static\n "}, {"sha": "910deddd8bcdc729abb389011e1d12e2da866b3d", "filename": "src/test/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-50599.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -14,7 +14,7 @@ help: if you import `LOG10_2`, refer to it directly\n    |\n LL -     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n LL +     const M: usize = (f64::from(N) * LOG10_2) as usize;\n-   | \n+   |\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/issue-50599.rs:4:29"}, {"sha": "7258174ba89b30139117b486bacfe1facfa004d0", "filename": "src/test/ui/resolve/issue-81508.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-81508.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0433]: failed to resolve: use of undeclared type `Baz`\n    |\n LL |     let Baz: &str = \"\";\n    |         --- help: `Baz` is defined here, but is not a type\n-LL | \n+LL |\n LL |     println!(\"{}\", Baz::Bar);\n    |                    ^^^ use of undeclared type `Baz`\n "}, {"sha": "249a7e53d45462cf3b20137ee16558fdf2ef4d93", "filename": "src/test/ui/resolve/levenshtein.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Flevenshtein.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ error[E0412]: cannot find type `Baz` in this scope\n    |\n LL | enum Bar { }\n    | -------- similarly named enum `Bar` defined here\n-LL | \n+LL |\n LL | type A = Baz; // Misspelled type name.\n    |          ^^^ help: an enum with a similar name exists: `Bar`\n "}, {"sha": "3d49b2e5dfcd8f5bd9b4ce4bee2e85aeac0157ce", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if you import `HashMap`, refer to it directly\n    |\n LL -     let _map = std::hahmap::HashMap::new();\n LL +     let _map = HashMap::new();\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "81d8a34881c0cbf1bb48cdaad29655aa0eef9b4a", "filename": "src/test/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -109,7 +109,7 @@ help: if you import `E`, refer to it directly\n    |\n LL -     let _: E = m::E;\n LL +     let _: E = E;\n-   | \n+   |\n \n error[E0423]: expected value, found struct variant `m::E::Struct`\n   --> $DIR/privacy-enum-ctor.rs:45:16\n@@ -347,7 +347,7 @@ help: `Z::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL -         let _ = Z::Unit();\n LL +         let _ = Z::Unit;\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:43:16\n@@ -382,7 +382,7 @@ help: `m::E::Unit` is a unit variant, you need to write it without the parenthes\n    |\n LL -     let _: E = m::E::Unit();\n LL +     let _: E = m::E::Unit;\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/privacy-enum-ctor.rs:51:16\n@@ -417,7 +417,7 @@ help: `E::Unit` is a unit variant, you need to write it without the parentheses\n    |\n LL -     let _: E = E::Unit();\n LL +     let _: E = E::Unit;\n-   | \n+   |\n \n error: aborting due to 23 previous errors\n "}, {"sha": "5e5c9f6b3d8e26fe3894598845cea7eb65516c21", "filename": "src/test/ui/resolve/resolve-conflict-item-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-item-vs-import.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `transmute` is defined multiple times\n    |\n LL | use std::mem::transmute;\n    |     ------------------- previous import of the value `transmute` here\n-LL | \n+LL |\n LL | fn transmute() {}\n    | ^^^^^^^^^^^^^^ `transmute` redefined here\n    |"}, {"sha": "198ef10311ee98baf80f56ca9948a60962b20ccd", "filename": "src/test/ui/resolve/resolve-conflict-type-vs-import.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-conflict-type-vs-import.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0255]: the name `Iter` is defined multiple times\n    |\n LL | use std::slice::Iter;\n    |     ---------------- previous import of the type `Iter` here\n-LL | \n+LL |\n LL | struct Iter;\n    | ^^^^^^^^^^^^ `Iter` redefined here\n    |"}, {"sha": "f0eb1a4f487375576da404128fb56b1cd57b153a", "filename": "src/test/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -18,7 +18,7 @@ help: if you import `u8`, refer to it directly\n    |\n LL -     let _: ::u8;\n LL +     let _: u8;\n-   | \n+   |\n \n error[E0061]: this function takes 0 arguments but 1 argument was supplied\n   --> $DIR/resolve-primitive-fallback.rs:3:5"}, {"sha": "dfc7fdc1ed2db6888d9422e08e53aa4f6ca6dba4", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -982,7 +982,7 @@ help: consider removing the borrow\n    |\n LL -     if &let 0 = 0 {}\n LL +     if let 0 = 0 {}\n-   | \n+   |\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:94:8\n@@ -1149,7 +1149,7 @@ help: consider removing the `&&`\n    |\n LL -     if let Range { start: true, end } = t..&&false {}\n LL +     if let Range { start: true, end } = t..false {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:144:8\n@@ -1178,7 +1178,7 @@ help: consider removing the borrow\n    |\n LL -     while &let 0 = 0 {}\n LL +     while let 0 = 0 {}\n-   | \n+   |\n \n error[E0614]: type `bool` cannot be dereferenced\n   --> $DIR/disallowed-positions.rs:158:11\n@@ -1345,7 +1345,7 @@ help: consider removing the `&&`\n    |\n LL -     while let Range { start: true, end } = t..&&false {}\n LL +     while let Range { start: true, end } = t..false {}\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:208:11"}, {"sha": "709084c86e0ae9d6aab472375027234ada13fca6", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-recovery.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-recovery.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: you might have meant to write a const trait impl\n    |\n LL - const impl Foo for i32 {}\n LL + impl const Foo for i32 {}\n-   | \n+   |\n \n error: expected identifier, found keyword `impl`\n   --> $DIR/const-impl-recovery.rs:9:7\n@@ -20,7 +20,7 @@ help: you might have meant to write a const trait impl\n    |\n LL - const impl<T: Foo> Bar for T {}\n LL + impl<T: Foo> const Bar for T {}\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "251d74094caa94ed087024235ee178116f9d7810", "filename": "src/test/ui/rust-2018/edition-lint-infer-outlives-multispan.stderr", "status": "modified", "additions": 68, "deletions": 68, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-infer-outlives-multispan.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b> {\n LL +     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:18:61\n@@ -25,7 +25,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n LL +     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:23:53\n@@ -37,7 +37,7 @@ help: remove these bounds\n    |\n LL -     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n LL +     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:29:48\n@@ -49,7 +49,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n LL +     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:35:48\n@@ -61,7 +61,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n LL +     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:41:46\n@@ -73,7 +73,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n LL +     struct TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:47:67\n@@ -85,7 +85,7 @@ help: remove these bounds\n    |\n LL -     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n LL +     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:53:53\n@@ -97,7 +97,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n LL +     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:59:53\n@@ -109,7 +109,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n LL +     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:65:69\n@@ -121,7 +121,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n LL +     struct TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:71:69\n@@ -133,7 +133,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n LL +     struct TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:77:38\n@@ -145,7 +145,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n LL +     struct BeeOutlivesAyTeeBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:82:40\n@@ -157,7 +157,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n LL +     struct BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:87:55\n@@ -169,7 +169,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n LL +     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:92:68\n@@ -181,7 +181,7 @@ help: remove these bounds\n    |\n LL -     struct BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n LL +     struct BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:97:58\n@@ -193,7 +193,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n LL +     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:104:18\n@@ -205,7 +205,7 @@ help: remove these bounds\n    |\n LL -         where U: 'a + Debug + 'b, 'b: 'a\n LL +         where U: Debug, \n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:115:47\n@@ -217,7 +217,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b>(&'a &'b T);\n LL +     struct TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug>(&'a &'b T);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:118:72\n@@ -229,7 +229,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: 'a + Debug + 'b;\n LL +     struct TeeWhereOutlivesAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:121:53\n@@ -241,7 +241,7 @@ help: remove these bounds\n    |\n LL -     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b>(T, &'a &'b U);\n LL +     struct TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug>(T, &'a &'b U);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:124:48\n@@ -253,7 +253,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug>(&'a T, &'b U);\n LL +     struct TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug>(&'a T, &'b U);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:127:48\n@@ -265,7 +265,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b>(&'a T, &'b U);\n LL +     struct TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug>(&'a T, &'b U);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:130:46\n@@ -277,7 +277,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: 'b;\n LL +     struct TeeOutlivesAyYooWhereBee<'a, 'b, T, U>(&'a T, &'b U) ;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:133:81\n@@ -289,7 +289,7 @@ help: remove these bounds\n    |\n LL -     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U>(T, &'a &'b U) where U: 'a + Debug + 'b;\n LL +     struct TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U>(T, &'a &'b U) where U: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:136:53\n@@ -301,7 +301,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: 'b + Debug;\n LL +     struct TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:139:53\n@@ -313,7 +313,7 @@ help: remove these bounds\n    |\n LL -     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U>(&'a T, &'b U) where U: Debug + 'b;\n LL +     struct TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:142:75\n@@ -325,7 +325,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where T: 'a, U: 'b + Debug;\n LL +     struct TeeWhereAyYooWhereBeeIsDebug<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:145:75\n@@ -337,7 +337,7 @@ help: remove these bounds\n    |\n LL -     struct TeeWhereAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where T: 'a, U: Debug + 'b;\n LL +     struct TeeWhereAyYooWhereIsDebugBee<'a, 'b, T, U>(&'a T, &'b U) where U: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:148:38\n@@ -349,7 +349,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b>(&'a &'b T);\n LL +     struct BeeOutlivesAyTeeBee<'a, 'b, T>(&'a &'b T);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:151:40\n@@ -361,7 +361,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b>(&'a &'b T);\n LL +     struct BeeOutlivesAyTeeAyBee<'a, 'b, T>(&'a &'b T);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:154:55\n@@ -373,7 +373,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b>(&'a &'b T);\n LL +     struct BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug>(&'a &'b T);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:157:71\n@@ -385,7 +385,7 @@ help: remove these bounds\n    |\n LL -     struct BeeWhereAyTeeWhereAyIsDebugBee<'a, 'b, T>(&'a &'b T) where 'b: 'a, T: 'a + Debug + 'b;\n LL +     struct BeeWhereAyTeeWhereAyIsDebugBee<'a, 'b, T>(&'a &'b T) where T: Debug;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:160:58\n@@ -397,7 +397,7 @@ help: remove these bounds\n    |\n LL -     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b>(T, &'a &'b U);\n LL +     struct BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug>(T, &'a &'b U);\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:164:18\n@@ -409,7 +409,7 @@ help: remove these bounds\n    |\n LL -         where U: 'a + Debug + 'b, 'b: 'a;\n LL +         where U: Debug, ;\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:171:45\n@@ -421,7 +421,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b> {\n LL +     enum TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:176:59\n@@ -433,7 +433,7 @@ help: remove these bounds\n    |\n LL -     enum TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n LL +     enum TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:181:51\n@@ -445,7 +445,7 @@ help: remove these bounds\n    |\n LL -     enum TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n LL +     enum TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:187:46\n@@ -457,7 +457,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n LL +     enum TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:193:46\n@@ -469,7 +469,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n LL +     enum TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:199:44\n@@ -481,7 +481,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n LL +     enum TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:205:65\n@@ -493,7 +493,7 @@ help: remove these bounds\n    |\n LL -     enum TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n LL +     enum TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:211:51\n@@ -505,7 +505,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n LL +     enum TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:217:51\n@@ -517,7 +517,7 @@ help: remove these bounds\n    |\n LL -     enum TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n LL +     enum TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:223:67\n@@ -529,7 +529,7 @@ help: remove these bounds\n    |\n LL -     enum TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n LL +     enum TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:229:67\n@@ -541,7 +541,7 @@ help: remove these bounds\n    |\n LL -     enum TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n LL +     enum TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:235:36\n@@ -553,7 +553,7 @@ help: remove these bounds\n    |\n LL -     enum BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n LL +     enum BeeOutlivesAyTeeBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:240:38\n@@ -565,7 +565,7 @@ help: remove these bounds\n    |\n LL -     enum BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n LL +     enum BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:246:53\n@@ -577,7 +577,7 @@ help: remove these bounds\n    |\n LL -     enum BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n LL +     enum BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:251:66\n@@ -589,7 +589,7 @@ help: remove these bounds\n    |\n LL -     enum BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n LL +     enum BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:256:56\n@@ -601,7 +601,7 @@ help: remove these bounds\n    |\n LL -     enum BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n LL +     enum BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:262:75\n@@ -613,7 +613,7 @@ help: remove these bounds\n    |\n LL -     enum BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b, 'b: 'a {\n LL +     enum BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:271:46\n@@ -625,7 +625,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyIsDebugBee<'a, 'b, T: 'a + Debug + 'b> {\n LL +     union TeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:276:60\n@@ -637,7 +637,7 @@ help: remove these bounds\n    |\n LL -     union TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: 'a + Debug + 'b {\n LL +     union TeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:281:52\n@@ -649,7 +649,7 @@ help: remove these bounds\n    |\n LL -     union TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: 'a + Debug + 'b> {\n LL +     union TeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:287:47\n@@ -661,7 +661,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyYooBeeIsDebug<'a, 'b, T: 'a, U: 'b + Debug> {\n LL +     union TeeOutlivesAyYooBeeIsDebug<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:293:47\n@@ -673,7 +673,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyYooIsDebugBee<'a, 'b, T: 'a, U: Debug + 'b> {\n LL +     union TeeOutlivesAyYooIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:299:45\n@@ -685,7 +685,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyYooWhereBee<'a, 'b, T: 'a, U> where U: 'b {\n LL +     union TeeOutlivesAyYooWhereBee<'a, 'b, T, U> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:305:66\n@@ -697,7 +697,7 @@ help: remove these bounds\n    |\n LL -     union TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b {\n LL +     union TeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:311:52\n@@ -709,7 +709,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T: 'a, U> where U: 'b + Debug {\n LL +     union TeeOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:317:52\n@@ -721,7 +721,7 @@ help: remove these bounds\n    |\n LL -     union TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T: 'a, U> where U: Debug + 'b {\n LL +     union TeeOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:323:68\n@@ -733,7 +733,7 @@ help: remove these bounds\n    |\n LL -     union TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where T: 'a, U: 'b + Debug {\n LL +     union TeeWhereOutlivesAyYooWhereBeeIsDebug<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:329:68\n@@ -745,7 +745,7 @@ help: remove these bounds\n    |\n LL -     union TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where T: 'a, U: Debug + 'b {\n LL +     union TeeWhereOutlivesAyYooWhereIsDebugBee<'a, 'b, T, U> where U: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:335:37\n@@ -757,7 +757,7 @@ help: remove these bounds\n    |\n LL -     union BeeOutlivesAyTeeBee<'a, 'b: 'a, T: 'b> {\n LL +     union BeeOutlivesAyTeeBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:340:39\n@@ -769,7 +769,7 @@ help: remove these bounds\n    |\n LL -     union BeeOutlivesAyTeeAyBee<'a, 'b: 'a, T: 'a + 'b> {\n LL +     union BeeOutlivesAyTeeAyBee<'a, 'b, T> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:345:54\n@@ -781,7 +781,7 @@ help: remove these bounds\n    |\n LL -     union BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b: 'a, T: 'a + Debug + 'b> {\n LL +     union BeeOutlivesAyTeeOutlivesAyIsDebugBee<'a, 'b, T: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:350:67\n@@ -793,7 +793,7 @@ help: remove these bounds\n    |\n LL -     union BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where 'b: 'a, T: 'a + Debug + 'b {\n LL +     union BeeWhereAyTeeWhereOutlivesAyIsDebugBee<'a, 'b, T> where T: Debug {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:355:57\n@@ -805,7 +805,7 @@ help: remove these bounds\n    |\n LL -     union BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b: 'a, T, U: 'a + Debug + 'b> {\n LL +     union BeeOutlivesAyTeeYooOutlivesAyIsDebugBee<'a, 'b, T, U: Debug> {\n-   | \n+   |\n \n error: outlives requirements can be inferred\n   --> $DIR/edition-lint-infer-outlives-multispan.rs:361:76\n@@ -817,7 +817,7 @@ help: remove these bounds\n    |\n LL -     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: 'a + Debug + 'b, 'b: 'a {\n LL +     union BeeWhereAyTeeYooWhereOutlivesAyIsDebugBee<'a, 'b, T, U> where U: Debug,  {\n-   | \n+   |\n \n error: aborting due to 68 previous errors\n "}, {"sha": "647a9f3931254e7ecb17f89861f1d532706adc69", "filename": "src/test/ui/rust-2021/reserved-prefixes-migration.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes-migration.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m2!(z\"hey\");\n LL +     m2!(z \"hey\");\n-   | \n+   |\n \n warning: prefix `prefix` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:19:9\n@@ -29,7 +29,7 @@ help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m2!(prefix\"hey\");\n LL +     m2!(prefix \"hey\");\n-   | \n+   |\n \n warning: prefix `hey` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:22:9\n@@ -43,7 +43,7 @@ help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m3!(hey#123);\n LL +     m3!(hey #123);\n-   | \n+   |\n \n warning: prefix `hey` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:25:9\n@@ -57,7 +57,7 @@ help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     m3!(hey#hey);\n LL +     m3!(hey #hey);\n-   | \n+   |\n \n warning: prefix `kind` is unknown\n   --> $DIR/reserved-prefixes-migration.rs:35:14\n@@ -71,7 +71,7 @@ help: insert whitespace here to avoid this being parsed as a prefix in Rust 2021\n    |\n LL -     #name = #kind#value\n LL +     #name = #kind #value\n-   | \n+   |\n \n warning: 5 warnings emitted\n "}, {"sha": "df31aee66fea7a6452ea2e4d678c0d4224b45f27", "filename": "src/test/ui/rust-2021/reserved-prefixes.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Freserved-prefixes.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo3!(foo#bar);\n LL +     demo3!(foo #bar);\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:17:12\n@@ -22,7 +22,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo2!(foo\"bar\");\n LL +     demo2!(foo \"bar\");\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:18:12\n@@ -35,7 +35,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo2!(foo'b');\n LL +     demo2!(foo 'b');\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:20:12\n@@ -48,7 +48,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo2!(foo'b);\n LL +     demo2!(foo 'b);\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:21:12\n@@ -61,7 +61,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo3!(foo# bar);\n LL +     demo3!(foo # bar);\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:22:12\n@@ -74,7 +74,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo4!(foo#! bar);\n LL +     demo4!(foo #! bar);\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:23:12\n@@ -87,7 +87,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo4!(foo## bar);\n LL +     demo4!(foo ## bar);\n-   | \n+   |\n \n error: prefix `foo` is unknown\n   --> $DIR/reserved-prefixes.rs:25:12\n@@ -100,7 +100,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo4!(foo#bar#);\n LL +     demo4!(foo #bar#);\n-   | \n+   |\n \n error: prefix `bar` is unknown\n   --> $DIR/reserved-prefixes.rs:25:16\n@@ -113,7 +113,7 @@ help: consider inserting whitespace here\n    |\n LL -     demo4!(foo#bar#);\n LL +     demo4!(foo#bar #);\n-   | \n+   |\n \n error: aborting due to 9 previous errors\n "}, {"sha": "55959def4f37ddc8d3b6b62a12d7897ca1bb5085", "filename": "src/test/ui/single-use-lifetime/fn-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ffn-types.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL -   a: for<'a> fn(&'a u32),\n LL +   a: fn(&u32),\n-   | \n+   |\n \n error[E0581]: return type references lifetime `'a`, which is not constrained by the fn input types\n   --> $DIR/fn-types.rs:12:22"}, {"sha": "93f16f5bad5f0e6552055d26175ee9864f22c73e", "filename": "src/test/ui/single-use-lifetime/one-use-in-fn-argument.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-fn-argument.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL - fn a<'a>(x: &'a u32) {\n LL + fn a(x: &u32) {\n-   | \n+   |\n \n error: lifetime parameter `'m` only used once\n   --> $DIR/one-use-in-fn-argument.rs:15:11\n@@ -29,7 +29,7 @@ help: elide the single-use lifetime\n    |\n LL - fn center<'m>(_: Single<'m>) {}\n LL + fn center(_: Single<'_>) {}\n-   | \n+   |\n \n error: lifetime parameter `'y` only used once\n   --> $DIR/one-use-in-fn-argument.rs:17:13\n@@ -41,7 +41,7 @@ help: elide the single-use lifetime\n    |\n LL - fn left<'x, 'y>(foo: Double<'x, 'y>) -> &'x u32 { foo.f }\n LL + fn left<'x>(foo: Double<'x, '_>) -> &'x u32 { foo.f }\n-   | \n+   |\n \n error: lifetime parameter `'x` only used once\n   --> $DIR/one-use-in-fn-argument.rs:19:10\n@@ -53,7 +53,7 @@ help: elide the single-use lifetime\n    |\n LL - fn right<'x, 'y>(foo: Double<'x, 'y>) -> &'y u32 { foo.f }\n LL + fn right<'y>(foo: Double<'_, 'y>) -> &'y u32 { foo.f }\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "94129560f404334945387e918ba4b340c0500314", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-impl-header.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-impl-header.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL - impl<'f> Foo<'f> {\n LL + impl Foo<'_> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "39507785bbea2d57166d768747eb0fc76ab58bdc", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-argument.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL - impl<'f> Foo<'f> {\n LL + impl Foo<'_> {\n-   | \n+   |\n \n error: lifetime parameter `'a` only used once\n   --> $DIR/one-use-in-inherent-method-argument.rs:13:19\n@@ -29,7 +29,7 @@ help: elide the single-use lifetime\n    |\n LL -     fn inherent_a<'a>(&self, data: &'a u32) {\n LL +     fn inherent_a(&self, data: &u32) {\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "69578fe2f8830e90f9530eacc68c90c0a9b40efb", "filename": "src/test/ui/single-use-lifetime/one-use-in-inherent-method-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-inherent-method-return.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL - impl<'f> Foo<'f> {\n LL + impl Foo<'_> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "1a6e8310d303a37864a9528d9e8a8231ed749ee2", "filename": "src/test/ui/single-use-lifetime/one-use-in-trait-method-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Fone-use-in-trait-method-argument.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL -     fn next<'g>(&'g mut self) -> Option<Self::Item> {\n LL +     fn next(&mut self) -> Option<Self::Item> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "4794566eae4dc4f78528e5af4ae46534b9b95ecd", "filename": "src/test/ui/single-use-lifetime/two-uses-in-inherent-method-argument-and-return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsingle-use-lifetime%2Ftwo-uses-in-inherent-method-argument-and-return.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: elide the single-use lifetime\n    |\n LL - impl<'f> Foo<'f> {\n LL + impl Foo<'_> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "e0cfe04cf418efd0abd29a058b358fe089387b42", "filename": "src/test/ui/span/issue-39018.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -66,7 +66,7 @@ help: remove the borrow to obtain an owned `String`\n    |\n LL -     let _ = &a + &b;\n LL +     let _ = a + &b;\n-   | \n+   |\n \n error[E0369]: cannot add `String` to `&String`\n   --> $DIR/issue-39018.rs:27:16\n@@ -81,7 +81,7 @@ help: remove the borrow on the left and add one on the right\n    |\n LL -     let _ = &a + b;\n LL +     let _ = a + &b;\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/issue-39018.rs:29:17"}, {"sha": "8732b10d8f803bca0c227696354318472ddf5d29", "filename": "src/test/ui/specialization/issue-52050.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-52050.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -17,7 +17,7 @@ LL | |     I: Iterator,\n LL | | {\n LL | | }\n    | |_- first implementation here\n-LL | \n+LL |\n LL |   impl IntoPyDictPointer for ()\n    |   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n    |"}, {"sha": "6b56cd6f3fc12cba03d0aaed7c7eea7e40936aaf", "filename": "src/test/ui/str/str-lit-type-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-lit-type-mismatch.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -42,7 +42,7 @@ help: consider removing the leading `b`\n    |\n LL -     let z: &str = b\"foo\";\n LL +     let z: &str = \"foo\";\n-   | \n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "4bd0fb38985642a78627c300d2e8bf61ced24fa3", "filename": "src/test/ui/structs/struct-path-self.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs%2Fstruct-path-self.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -16,7 +16,7 @@ help: the `Self` type doesn't accept type parameters\n    |\n LL -         let z = Self::<u8> {};\n LL +         let z = Self {};\n-   | \n+   |\n \n error[E0071]: expected struct, variant or union type, found type parameter `Self`\n   --> $DIR/struct-path-self.rs:7:17\n@@ -50,7 +50,7 @@ help: the `Self` type doesn't accept type parameters\n    |\n LL -         let z = Self::<u8> {};\n LL +         let z = Self {};\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on self type\n   --> $DIR/struct-path-self.rs:30:24\n@@ -72,7 +72,7 @@ help: the `Self` type doesn't accept type parameters\n    |\n LL -         let z = Self::<u8> {};\n LL +         let z = Self {};\n-   | \n+   |\n \n error: aborting due to 6 previous errors\n "}, {"sha": "40b4b42f742934589c9176d46d81f66d3ae8fa5a", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -105,7 +105,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - struct Struct5<T: ?Sized>{\n LL + struct Struct5<T>{\n-   | \n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "fac6a5a5f48cb97d953e10c6b43b719916b997a2", "filename": "src/test/ui/suggestions/format-borrow.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fformat-borrow.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: consider removing the borrow\n    |\n LL -     let a: String = &String::from(\"a\");\n LL +     let a: String = String::from(\"a\");\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:4:21\n@@ -24,7 +24,7 @@ help: consider removing the borrow\n    |\n LL -     let b: String = &format!(\"b\");\n LL +     let b: String = format!(\"b\");\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:6:21\n@@ -38,7 +38,7 @@ help: consider removing the borrow\n    |\n LL -     let c: String = &mut format!(\"c\");\n LL +     let c: String = format!(\"c\");\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/format-borrow.rs:8:21\n@@ -52,7 +52,7 @@ help: consider removing the borrow\n    |\n LL -     let d: String = &mut (format!(\"d\"));\n LL +     let d: String = format!(\"d\"));\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "c0d776e59ab8d4c55a23a94533e00af53f0c62d4", "filename": "src/test/ui/suggestions/issue-61963.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61963.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: use `dyn`\n    |\n LL -     bar: Box<Bar>,\n LL +     bar: Box<dyn Bar>,\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -29,7 +29,7 @@ help: use `dyn`\n    |\n LL - pub struct Foo {\n LL + dyn pub struct Foo {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:28:14\n@@ -43,7 +43,7 @@ help: use `dyn`\n    |\n LL -     bar: Box<Bar>,\n LL +     bar: Box<dyn Bar>,\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:28:14\n@@ -57,7 +57,7 @@ help: use `dyn`\n    |\n LL -     bar: Box<Bar>,\n LL +     bar: Box<dyn Bar>,\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -71,7 +71,7 @@ help: use `dyn`\n    |\n LL - pub struct Foo {\n LL + dyn pub struct Foo {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -85,7 +85,7 @@ help: use `dyn`\n    |\n LL - pub struct Foo {\n LL + dyn pub struct Foo {\n-   | \n+   |\n \n error: trait objects without an explicit `dyn` are deprecated\n   --> $DIR/issue-61963.rs:18:1\n@@ -99,7 +99,7 @@ help: use `dyn`\n    |\n LL - pub struct Foo {\n LL + dyn pub struct Foo {\n-   | \n+   |\n \n error: aborting due to 7 previous errors\n "}, {"sha": "e4e8ad15d17891b3e4f22ee849b75ef1af40d5fd", "filename": "src/test/ui/suggestions/issue-82361.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-82361.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -31,7 +31,7 @@ help: consider removing the borrow\n    |\n LL -         &1\n LL +         1\n-   | \n+   |\n \n error[E0308]: `if` and `else` have incompatible types\n   --> $DIR/issue-82361.rs:22:9\n@@ -49,7 +49,7 @@ help: consider removing the borrow\n    |\n LL -         &mut 1\n LL +         1\n-   | \n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "a1a603cf246dc7e467701f5f248d06189a867197", "filename": "src/test/ui/suggestions/issue-96555.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-96555.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove the `.await`\n    |\n LL -     m::f1().await;\n LL +     m::f1();\n-   | \n+   |\n help: alternatively, consider making `fn f1` asynchronous\n    |\n LL |     pub async fn f1() {}\n@@ -34,7 +34,7 @@ help: remove the `.await`\n    |\n LL -     m::f2().await;\n LL +     m::f2();\n-   | \n+   |\n help: alternatively, consider making `fn f2` asynchronous\n    |\n LL |     pub(crate) async fn f2() {}\n@@ -55,7 +55,7 @@ help: remove the `.await`\n    |\n LL -     m::f3().await;\n LL +     m::f3();\n-   | \n+   |\n help: alternatively, consider making `fn f3` asynchronous\n    |\n LL |     pub async"}, {"sha": "aa2b407bf561656aeb1cd8ffd665f9f632d47f0b", "filename": "src/test/ui/suggestions/match-ergonomics.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-ergonomics.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing `&` from the pattern\n    |\n LL -         [&v] => {},\n LL +         [v] => {},\n-   | \n+   |\n \n error[E0529]: expected an array or slice, found `Vec<i32>`\n   --> $DIR/match-ergonomics.rs:8:9\n@@ -44,7 +44,7 @@ help: consider removing `&` from the pattern\n    |\n LL -         &v => {},\n LL +         v => {},\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/match-ergonomics.rs:40:13\n@@ -60,7 +60,7 @@ help: consider removing `&` from the pattern\n    |\n LL -     if let [&v] = &x[..] {}\n LL +     if let [v] = &x[..] {}\n-   | \n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "8d735b71f827821b72db818d12fff85008c0fea3", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -30,7 +30,7 @@ help: consider removing this semicolon\n    |\n LL -             async_dummy();\n LL +             async_dummy()\n-   | \n+   |\n \n error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:48:18"}, {"sha": "6071b10d387c2348de166cfd9dcf4ffec4f47c6b", "filename": "src/test/ui/suggestions/removal-of-multiline-trait-bound-in-where-clause.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fremoval-of-multiline-trait-bound-in-where-clause.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -25,7 +25,7 @@ LL -     T\n LL -     :\n LL -     ?\n LL -     Sized\n-   | \n+   |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:14:16\n@@ -50,7 +50,7 @@ LL | struct Wrapper<T>(T);\n help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - where T: ?Sized\n-   | \n+   |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/removal-of-multiline-trait-bound-in-where-clause.rs:21:16\n@@ -76,7 +76,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - where\n LL -     T: ?Sized\n-   | \n+   |\n \n error: aborting due to 3 previous errors\n "}, {"sha": "889b11a741084c09f25260b17841ca65dde369e8", "filename": "src/test/ui/suggestions/suggest-change-mut.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-change-mut.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: consider removing the leading `&`-reference\n    |\n LL -         let mut stream_reader = BufReader::new(&stream);\n LL +         let mut stream_reader = BufReader::new(stream);\n-   | \n+   |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |\n LL | fn issue_81421<T: Read + Write>(mut stream: T) where &T: std::io::Read {"}, {"sha": "fc880d6b86a71be0fc8fbca6e8b88b9193b50e1d", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait-edition-2021.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait-edition-2021.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -41,7 +41,7 @@ help: add `dyn` keyword before this trait\n    |\n LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n-   | \n+   |\n \n error: aborting due to 4 previous errors\n "}, {"sha": "f5143762da8e5052ed62604ce841679591ee5612", "filename": "src/test/ui/suggestions/suggest-swapping-self-ty-and-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-swapping-self-ty-and-trait.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -44,7 +44,7 @@ help: use `dyn`\n    |\n LL - impl<'a, T> Struct<T> for Trait<'a, T> {}\n LL + impl<'a, T> Struct<T> for dyn Trait<'a, T> {}\n-   | \n+   |\n \n error: aborting due to 3 previous errors; 1 warning emitted\n "}, {"sha": "4abc34466106dc2af12fc90ae85fc50e625bbe2a", "filename": "src/test/ui/suggestions/suggest-trait-items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-trait-items.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -48,7 +48,7 @@ error[E0046]: not all trait items implemented, missing: `Type`, `foo`, `bar`, `q\n    |\n LL |     type Type;\n    |     ---------- `Type` from trait\n-LL | \n+LL |\n LL |     fn foo();\n    |     --------- `foo` from trait\n LL |     fn bar();"}, {"sha": "b297662955e391f2b4674a37ecdb94630798cdfe", "filename": "src/test/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: if you import `Trait`, refer to it directly\n    |\n LL -     pub struct A<H: A::Trait>(pub H);\n LL +     pub struct A<H: Trait>(pub H);\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "ec85ada7a8d40e2458494663a450de52aaafb816", "filename": "src/test/ui/trait-bounds/unsized-bound.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-bounds%2Funsized-bound.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -16,7 +16,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n LL + impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait<A: ?Sized> {}\n@@ -35,7 +35,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B> Trait<(A, B)> for (A, B) where A: ?Sized, B: ?Sized, {}\n LL + impl<A, B> Trait<(A, B)> for (A, B) where B: ?Sized, {}\n-   | \n+   |\n \n error[E0277]: the size for values of type `C` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:5:31\n@@ -55,7 +55,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n LL + impl<A, B: ?Sized, C> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait<A: ?Sized> {}\n@@ -74,7 +74,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n LL + impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C)  {}\n-   | \n+   |\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:5:52\n@@ -89,7 +89,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A, B: ?Sized, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n LL + impl<A, B, C: ?Sized> Trait<(A, B, C)> for (A, B, C) where A: ?Sized, {}\n-   | \n+   |\n \n error[E0277]: the size for values of type `B` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:10:28\n@@ -109,7 +109,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n LL + impl<A: ?Sized, B> Trait2<(A, B)> for (A, B) {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait2<A: ?Sized> {}\n@@ -128,7 +128,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A: ?Sized, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n LL + impl<A, B: ?Sized> Trait2<(A, B)> for (A, B) {}\n-   | \n+   |\n \n error[E0277]: the size for values of type `A` cannot be known at compilation time\n   --> $DIR/unsized-bound.rs:14:9\n@@ -147,7 +147,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A> Trait3<A> for A where A: ?Sized {}\n LL + impl<A> Trait3<A> for A  {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait3<A: ?Sized> {}\n@@ -170,7 +170,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<A: ?Sized> Trait4<A> for A {}\n LL + impl<A> Trait4<A> for A {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait4<A: ?Sized> {}\n@@ -193,7 +193,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y> Trait5<X, Y> for X where X: ?Sized {}\n LL + impl<X, Y> Trait5<X, Y> for X  {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait5<A: ?Sized, B> {}\n@@ -216,7 +216,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized, Y> Trait6<X, Y> for X {}\n LL + impl<X, Y> Trait6<X, Y> for X {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait6<A: ?Sized, B> {}\n@@ -239,7 +239,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y> Trait7<X, Y> for X where Y: ?Sized {}\n LL + impl<X, Y> Trait7<X, Y> for X  {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait7<A, B: ?Sized> {}\n@@ -262,7 +262,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X, Y: ?Sized> Trait8<X, Y> for X {}\n LL + impl<X, Y> Trait8<X, Y> for X {}\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait Trait8<A, B: ?Sized> {}"}, {"sha": "bf244b97e9b132baea6c41d1ac4eaad442e04e3b", "filename": "src/test/ui/traits/alias/no-duplicates.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-duplicates.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -262,7 +262,7 @@ LL | trait _5 = Obj + Send;\n    |            |\n    |            additional non-auto trait\n    |            first non-auto trait\n-LL | \n+LL |\n LL | type _T20 = dyn _5 + _5;\n    |                 --   ^^ trait alias used in trait object type (additional use)\n    |                 |\n@@ -326,7 +326,7 @@ LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n    |            --   -- referenced here (additional use)\n    |            |\n    |            referenced here (first use)\n-LL | \n+LL |\n LL | type _T30 = dyn _6;\n    |                 ^^\n    |                 |\n@@ -392,7 +392,7 @@ LL | trait _7 = _5 + Sync;\n    |            -- referenced here (first use)\n LL | trait _8 = Unpin + _7;\n    |                    -- referenced here (first use)\n-LL | \n+LL |\n LL | type _T40 = dyn _8 + Obj;\n    |                 --   ^^^ additional non-auto trait\n    |                 |"}, {"sha": "4b1ddf6843c3dd4be2759725a7e5ea5aa6cdf022", "filename": "src/test/ui/traits/alias/no-extra-traits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fno-extra-traits.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -148,7 +148,7 @@ LL | trait _1 = _0;\n ...\n LL | trait _5 = Sync + ObjB + Send;\n    |                   ---- first non-auto trait\n-LL | \n+LL |\n LL | type _T20 = dyn _5 + _1;\n    |                 --   ^^ trait alias used in trait object type (additional use)\n    |                 |\n@@ -460,7 +460,7 @@ LL | trait _9 = _5 + Sync;\n    |            -- referenced here (first use)\n LL | trait _10 = Unpin + _9;\n    |                     -- referenced here (first use)\n-LL | \n+LL |\n LL | type _T40 = dyn _10 + ObjA;\n    |                 ---   ^^^^ additional non-auto trait\n    |                 |"}, {"sha": "06c707e4332a5694a6defadce9e2da4dcb3db2a8", "filename": "src/test/ui/traits/alias/only-maybe-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fonly-maybe-bound.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ error[E0224]: at least one trait is required for an object type\n    |\n LL | trait _2 = _1 + _1;\n    | ------------------- this alias does not contain a trait\n-LL | \n+LL |\n LL | type _T1 = dyn _2;\n    |            ^^^^^^\n "}, {"sha": "8a92dd11872c4ba3ba5481b57d60968a0bd27f6b", "filename": "src/test/ui/traits/bound/not-on-bare-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-bare-trait.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: use `dyn`\n    |\n LL - fn foo(_x: Foo + Send) {\n LL + fn foo(_x: dyn Foo + Send) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `(dyn Foo + Send + 'static)` cannot be known at compilation time\n   --> $DIR/not-on-bare-trait.rs:7:8"}, {"sha": "2de35dc7fc37603a9fdb801d65dc7571f0ee7e78", "filename": "src/test/ui/traits/bound/not-on-struct.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fbound%2Fnot-on-struct.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -47,7 +47,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn a() -> A + 'static {\n LL + fn a() -> A {\n-   | \n+   |\n \n error[E0404]: expected trait, found enum `Result`\n   --> $DIR/not-on-struct.rs:16:34\n@@ -66,7 +66,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn b<'a,T,E>(iter: Iterator<Item=Result<T,E> + 'a>) {\n LL + fn b<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n-   | \n+   |\n \n error[E0404]: expected trait, found struct `A`\n   --> $DIR/not-on-struct.rs:19:21\n@@ -85,7 +85,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn c() -> 'static + A {\n LL + fn c() -> A {\n-   | \n+   |\n \n error[E0404]: expected trait, found enum `Result`\n   --> $DIR/not-on-struct.rs:22:39\n@@ -104,7 +104,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn d<'a,T,E>(iter: Iterator<Item='a + Result<T,E>>) {\n LL + fn d<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n-   | \n+   |\n \n error[E0404]: expected trait, found struct `A`\n   --> $DIR/not-on-struct.rs:25:21\n@@ -123,7 +123,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn e() -> 'static + A + 'static {\n LL + fn e() -> A {\n-   | \n+   |\n \n error[E0404]: expected trait, found enum `Result`\n   --> $DIR/not-on-struct.rs:29:39\n@@ -142,7 +142,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn f<'a,T,E>(iter: Iterator<Item='a + Result<T,E> + 'a>) {\n LL + fn f<'a,T,E>(iter: Iterator<Item=Result<T,E>>) {\n-   | \n+   |\n \n error[E0404]: expected trait, found struct `Traitor`\n   --> $DIR/not-on-struct.rs:35:11\n@@ -163,7 +163,7 @@ help: if you meant to use a type and not a trait here, remove the bounds\n    |\n LL - fn g() -> Traitor + 'static {\n LL + fn g() -> Traitor {\n-   | \n+   |\n help: a trait with a similar name exists\n    |\n LL | fn g() -> Trait + 'static {"}, {"sha": "21b339d12a8de5d4fc17a301937e4949e608cd3f", "filename": "src/test/ui/traits/suggest-where-clause.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fsuggest-where-clause.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -16,7 +16,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n LL + fn check<T: Iterator, U>() {\n-   | \n+   |\n \n error[E0277]: the size for values of type `U` cannot be known at compilation time\n   --> $DIR/suggest-where-clause.rs:10:5\n@@ -41,7 +41,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn check<T: Iterator, U: ?Sized>() {\n LL + fn check<T: Iterator, U>() {\n-   | \n+   |\n \n error[E0277]: the trait bound `u64: From<T>` is not satisfied\n   --> $DIR/suggest-where-clause.rs:15:5"}, {"sha": "c4f8294e26356a81f183af1fbb8b991eca42cc75", "filename": "src/test/ui/traits/vtable/issue-97381.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fvtable%2Fissue-97381.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0505]: cannot move out of `v` because it is borrowed\n    |\n LL |     let el = &v[0];\n    |               - borrow of `v` occurs here\n-LL | \n+LL |\n LL |     for _ in v {\n    |              ^ move out of `v` occurs here\n LL |"}, {"sha": "d66e468873ba4f1adca921e57aa2106f4c4a77a0", "filename": "src/test/ui/trivial-bounds/trivial-bounds-inconsistent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-inconsistent.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -35,7 +35,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type Y where i32: Foo = ();\n LL + type Y  = ();\n-   | \n+   |\n \n warning: trait bound i32: Foo does not depend on any type or lifetime parameters\n   --> $DIR/trivial-bounds-inconsistent.rs:22:19"}, {"sha": "ea079e30d9c395858450c640a2bf29bc2da0f22d", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -42,7 +42,7 @@ LL |         let k = &mut i;\n ...\n LL |         i = 40;\n    |         ^^^^^^ assignment to borrowed `i` occurs here\n-LL | \n+LL |\n LL |         let i_ptr = if let Err(i_ptr) = j { i_ptr } else { panic ! (\"\") };\n    |                                         - borrow later used here\n "}, {"sha": "9fc0b661f1e7d543093a064cadd6f2d9afd863e9", "filename": "src/test/ui/try-block/try-block-unreachable-code-lint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unreachable-code-lint.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ warning: unreachable expression\n    |\n LL |           return;\n    |           ------ any code following this expression is unreachable\n-LL | \n+LL |\n LL | /         try {\n LL | |             loop {\n LL | |                 err()?;\n@@ -32,7 +32,7 @@ LL | /         loop {\n LL | |             err()?;\n LL | |         }\n    | |_________- any code following this expression is unreachable\n-LL | \n+LL |\n LL |           42\n    |           ^^ unreachable expression\n "}, {"sha": "765cd9c0fc4f6076bcbfc42986367f95377b79d5", "filename": "src/test/ui/try-block/try-block-unused-delims.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-unused-delims.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove these parentheses\n    |\n LL -     consume((try {}));\n LL +     consume(try {});\n-   | \n+   |\n \n warning: unnecessary braces around function argument\n   --> $DIR/try-block-unused-delims.rs:14:13\n@@ -30,7 +30,7 @@ help: remove these braces\n    |\n LL -     consume({ try {} });\n LL +     consume(try {});\n-   | \n+   |\n \n warning: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:17:11\n@@ -42,7 +42,7 @@ help: remove these parentheses\n    |\n LL -     match (try {}) {\n LL +     match try {} {\n-   | \n+   |\n \n warning: unnecessary parentheses around `let` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:22:22\n@@ -54,7 +54,7 @@ help: remove these parentheses\n    |\n LL -     if let Err(()) = (try {}) {}\n LL +     if let Err(()) = try {} {}\n-   | \n+   |\n \n warning: unnecessary parentheses around `match` scrutinee expression\n   --> $DIR/try-block-unused-delims.rs:25:11\n@@ -66,7 +66,7 @@ help: remove these parentheses\n    |\n LL -     match (try {}) {\n LL +     match try {} {\n-   | \n+   |\n \n warning: 5 warnings emitted\n "}, {"sha": "cfc596e1b78ee08a54ca0872c964339cd6bc0df3", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -119,7 +119,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -         Self::SVariant::<()> { v: () };\n LL +         Enum::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:28:35\n@@ -200,7 +200,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -         Self::<()>::SVariant::<()> { v: () };\n LL +         Enum::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/enum-variant-generic-args.rs:34:41\n@@ -363,7 +363,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -     Alias::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:77:29\n@@ -378,7 +378,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -     Alias::<()>::SVariant::<()> { v: () };\n LL +     Alias::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:80:28\n@@ -393,7 +393,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -     AliasFixed::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0107]: this type alias takes 0 generic arguments but 1 generic argument was supplied\n   --> $DIR/enum-variant-generic-args.rs:82:5\n@@ -436,7 +436,7 @@ help: you might have meant to specity type parameters on enum `Enum`\n    |\n LL -     AliasFixed::<()>::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:90:28"}, {"sha": "8ddf9f7cd6819544605d82aea2f6782217d54a2d", "filename": "src/test/ui/type-alias-enum-variants/incorrect-variant-form-through-alias-caught.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fincorrect-variant-form-through-alias-caught.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -31,7 +31,7 @@ help: `Alias::Unit` is a unit variant, you need to write it without the parenthe\n    |\n LL -     Alias::Unit();\n LL +     Alias::Unit;\n-   | \n+   |\n \n error[E0164]: expected tuple struct or tuple variant, found unit variant `Alias::Unit`\n   --> $DIR/incorrect-variant-form-through-alias-caught.rs:17:9"}, {"sha": "33f81a77aaf0a41da744db2aafa3442f9c0ebbc0", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -21,7 +21,7 @@ error[E0308]: mismatched types\n    |\n LL | type Closure = impl FnOnce();\n    |                ------------- the expected opaque type\n-LL | \n+LL |\n LL | fn c() -> Closure {\n    |           ------- expected `Closure` because of return type\n LL |     || -> Closure { || () }"}, {"sha": "573e691b4cc077f1aad00083d45da012fc598454", "filename": "src/test/ui/type-alias-impl-trait/issue-74280.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74280.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -3,7 +3,7 @@ error[E0308]: mismatched types\n    |\n LL | type Test = impl Copy;\n    |             --------- the expected opaque type\n-LL | \n+LL |\n LL | fn test() -> Test {\n    |              ---- expected `Test` because of return type\n LL |     let y = || -> Test { () };"}, {"sha": "125ffbbb41757c3f1171c39625356d2d87eb214e", "filename": "src/test/ui/type/issue-67690-type-alias-bound-diagnostic-crash.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-67690-type-alias-bound-diagnostic-crash.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - pub type T<P: Send + Send + Send> = P;\n LL + pub type T<P> = P;\n-   | \n+   |\n \n warning: 1 warning emitted\n "}, {"sha": "1df5a2cf07b666200dbe0b8f894bb2b8674ed0d3", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -47,7 +47,7 @@ help: primitive type `u8` doesn't have generic parameters\n    |\n LL -     0: u8(\u0163\n LL +     0: u8\n-   | \n+   |\n \n error[E0308]: mismatched types\n   --> $DIR/issue-91268.rs:9:5"}, {"sha": "92e573393c90e4cac0298fcaf2c2ea953218e24e", "filename": "src/test/ui/type/type-alias-bounds.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-alias-bounds.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type SVec<T: Send + Send> = Vec<T>;\n LL + type SVec<T> = Vec<T>;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:10:21\n@@ -21,7 +21,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type S2Vec<T> where T: Send = Vec<T>;\n LL + type S2Vec<T>  = Vec<T>;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:12:19\n@@ -33,7 +33,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type VVec<'b, 'a: 'b + 'b> = (&'b u32, Vec<&'a i32>);\n LL + type VVec<'b, 'a> = (&'b u32, Vec<&'a i32>);\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:14:18\n@@ -45,7 +45,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type WVec<'b, T: 'b + 'b> = (&'b u32, Vec<T>);\n LL + type WVec<'b, T> = (&'b u32, Vec<T>);\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:16:25\n@@ -57,7 +57,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type W2Vec<'b, T> where T: 'b, T: 'b = (&'b u32, Vec<T>);\n LL + type W2Vec<'b, T>  = (&'b u32, Vec<T>);\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:47:12\n@@ -74,7 +74,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type T1<U: Bound> = U::Assoc;\n LL + type T1<U> = U::Assoc;\n-   | \n+   |\n \n warning: where clauses are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:48:18\n@@ -91,7 +91,7 @@ help: the clause will not be checked when the type alias is used, and should be\n    |\n LL - type T2<U> where U: Bound = U::Assoc;\n LL + type T2<U>  = U::Assoc;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:56:12\n@@ -103,7 +103,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type T5<U: Bound> = <U as Bound>::Assoc;\n LL + type T5<U> = <U as Bound>::Assoc;\n-   | \n+   |\n \n warning: bounds on generic parameters are not enforced in type aliases\n   --> $DIR/type-alias-bounds.rs:57:12\n@@ -115,7 +115,7 @@ help: the bound will not be checked when the type alias is used, and should be r\n    |\n LL - type T6<U: Bound> = ::std::vec::Vec<U>;\n LL + type T6<U> = ::std::vec::Vec<U>;\n-   | \n+   |\n \n warning: 9 warnings emitted\n "}, {"sha": "ea259cf3d378590b089c002c541601b2c8513c30", "filename": "src/test/ui/type/type-parameter-defaults-referencing-Self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-parameter-defaults-referencing-Self.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL | / trait Foo<T=Self> {\n LL | |     fn method(&self);\n LL | | }\n    | |_- type parameter `T` must be specified for this\n-LL | \n+LL |\n LL |   fn foo(x: &dyn Foo) { }\n    |                  ^^^ help: set the type parameter to the desired type: `Foo<T>`\n    |"}, {"sha": "645c04b87a1fdb3991b21a58db35af897474dee9", "filename": "src/test/ui/typeck/issue-88803-call-expr-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftypeck%2Fissue-88803-call-expr-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftypeck%2Fissue-88803-call-expr-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-88803-call-expr-method.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: remove wrapping parentheses to call the method\n    |\n LL -         (a.unwrap)()\n LL +         a.unwrap()\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "cdc7e96bfc5fcb98e92a1f558add6a5ba08e2ab1", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<isize>;\n LL + let _x: isize;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:5:12\n@@ -24,7 +24,7 @@ help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<isize>;\n LL + let _x: i8;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:6:13\n@@ -38,7 +38,7 @@ help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<isize>;\n LL + let _x: i16;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:7:13\n@@ -52,7 +52,7 @@ help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<isize>;\n LL + let _x: i32;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:8:13\n@@ -66,7 +66,7 @@ help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<isize>;\n LL + let _x: i64;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:9:15\n@@ -80,7 +80,7 @@ help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<isize>;\n LL + let _x: usize;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:10:12\n@@ -94,7 +94,7 @@ help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<isize>;\n LL + let _x: u8;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:11:13\n@@ -108,7 +108,7 @@ help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<isize>;\n LL + let _x: u16;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:12:13\n@@ -122,7 +122,7 @@ help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<isize>;\n LL + let _x: u32;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:13:13\n@@ -136,7 +136,7 @@ help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<isize>;\n LL + let _x: u64;\n-   | \n+   |\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:14:14\n@@ -150,7 +150,7 @@ help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<isize>;\n LL + let _x: char;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:16:15\n@@ -164,7 +164,7 @@ help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<'static>;\n LL + let _x: isize;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:17:12\n@@ -178,7 +178,7 @@ help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<'static>;\n LL + let _x: i8;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:18:13\n@@ -192,7 +192,7 @@ help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<'static>;\n LL + let _x: i16;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:19:13\n@@ -206,7 +206,7 @@ help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<'static>;\n LL + let _x: i32;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:20:13\n@@ -220,7 +220,7 @@ help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<'static>;\n LL + let _x: i64;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:21:15\n@@ -234,7 +234,7 @@ help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<'static>;\n LL + let _x: usize;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:22:12\n@@ -248,7 +248,7 @@ help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<'static>;\n LL + let _x: u8;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:23:13\n@@ -262,7 +262,7 @@ help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<'static>;\n LL + let _x: u16;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:24:13\n@@ -276,7 +276,7 @@ help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<'static>;\n LL + let _x: u32;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:25:13\n@@ -290,7 +290,7 @@ help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<'static>;\n LL + let _x: u64;\n-   | \n+   |\n \n error[E0109]: lifetime arguments are not allowed on this type\n   --> $DIR/prim-with-args.rs:26:14\n@@ -304,7 +304,7 @@ help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<'static>;\n LL + let _x: char;\n-   | \n+   |\n \n error: aborting due to 22 previous errors\n "}, {"sha": "cbdb4dd0fb5c8cd939aa1f7f68e8ab7960899f50", "filename": "src/test/ui/unboxed-closures/unboxed-closures-failed-recursive-fn-1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-failed-recursive-fn-1.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -31,7 +31,7 @@ error[E0597]: `factorial` does not live long enough\n    |\n LL |     let mut factorial: Option<Box<dyn Fn(u32) -> u32 + 'static>> = None;\n    |                        ----------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n-LL | \n+LL |\n LL |     let f = |x: u32| -> u32 {\n    |             --------------- value captured here\n LL |         let g = factorial.as_ref().unwrap();\n@@ -45,7 +45,7 @@ error[E0506]: cannot assign to `factorial` because it is borrowed\n    |\n LL |     let mut factorial: Option<Box<dyn Fn(u32) -> u32 + 'static>> = None;\n    |                        ----------------------------------------- type annotation requires that `factorial` is borrowed for `'static`\n-LL | \n+LL |\n LL |     let f = |x: u32| -> u32 {\n    |             --------------- borrow of `factorial` occurs here\n LL |         let g = factorial.as_ref().unwrap();"}, {"sha": "3fe6e71f3b863af81d45a5a13a08b9dc2c47845d", "filename": "src/test/ui/union/union-sized-field.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-sized-field.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - union Foo<T: ?Sized> {\n LL + union Foo<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n@@ -36,7 +36,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - struct Foo2<T: ?Sized> {\n LL + struct Foo2<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     value: &T,\n@@ -60,7 +60,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum Foo3<T: ?Sized> {\n LL + enum Foo3<T> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     Value(&T),"}, {"sha": "14052486cbbc97158d53be07c7ae0529c38321f1", "filename": "src/test/ui/unop-move-semantics.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funop-move-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -5,7 +5,7 @@ LL | fn move_then_borrow<T: Not<Output=T> + Clone>(x: T) {\n    |                                               - move occurs because `x` has type `T`, which does not implement the `Copy` trait\n LL |     !x;\n    |     -- `x` moved due to usage in operator\n-LL | \n+LL |\n LL |     x.clone();\n    |     ^^^^^^^^^ value borrowed here after move\n    |"}, {"sha": "1eff14be8e19a4c75480542bcdc9e0b807c78487", "filename": "src/test/ui/unsized/unsized-bare-typaram.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-bare-typaram.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo<T: ?Sized>() { bar::<T>() }\n LL + fn foo<T>() { bar::<T>() }\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5f2e224308f3a6333e5c8ca94657a117eea50ec5", "filename": "src/test/ui/unsized/unsized-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -22,7 +22,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n LL + fn foo2<T>() { not_sized::<Foo<T>>() }\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "00b80327c9b771e29b9da48b59ac167dbe70e57d", "filename": "src/test/ui/unsized/unsized-enum2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-enum2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL + enum E<W, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     VA(&W),\n@@ -38,7 +38,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL + enum E<W: ?Sized, X, Y: ?Sized, Z: ?Sized> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     VB{x: &X},\n@@ -63,7 +63,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL + enum E<W: ?Sized, X: ?Sized, Y, Z: ?Sized> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     VC(isize, &Y),\n@@ -88,7 +88,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n LL + enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     VD{u: isize, x: &Z},"}, {"sha": "404fa5291b3e24b5f45a8d7197eef0e34092d826", "filename": "src/test/ui/unsized/unsized-fn-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-arg.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -11,7 +11,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f<T: ?Sized>(t: T) {}\n LL + fn f<T>(t: T) {}\n-   | \n+   |\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn f<T: ?Sized>(t: &T) {}"}, {"sha": "a952aa063d10b6801494c8c1e4984acd004bb072", "filename": "src/test/ui/unsized/unsized-inherent-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-inherent-impl-self-type.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -22,7 +22,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized> S5<X> {\n LL + impl<X> S5<X> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c9510e92fecb42bb1e1d32cfb3d747c8bf4c2a27", "filename": "src/test/ui/unsized/unsized-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-struct.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -22,7 +22,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn foo2<T: ?Sized>() { not_sized::<Foo<T>>() }\n LL + fn foo2<T>() { not_sized::<Foo<T>>() }\n-   | \n+   |\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/unsized-struct.rs:13:24\n@@ -46,7 +46,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn bar2<T: ?Sized>() { is_sized::<Bar<T>>() }\n LL + fn bar2<T>() { is_sized::<Bar<T>>() }\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f6ba9a80cb1c29c61978a6f027aa3ac9c5cd6468", "filename": "src/test/ui/unsized/unsized-trait-impl-self-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-self-type.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -22,7 +22,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized> T3<X> for S5<X> {\n LL + impl<X> T3<X> for S5<X> {\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f81487d5231ab514249c0222b0a85fc8aad3282a", "filename": "src/test/ui/unsized/unsized-trait-impl-trait-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-trait-impl-trait-arg.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized> T2<X> for S4<X> {\n LL + impl<X> T2<X> for S4<X> {\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T2<Z: ?Sized> {"}, {"sha": "65bdc4c2ea35292f4c984c8063ea79cedbbcfb1a", "filename": "src/test/ui/unsized/unsized3.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized3.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -17,7 +17,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f1<X: ?Sized>(x: &X) {\n LL + fn f1<X>(x: &X) {\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f2<X: ?Sized>(x: &X) {\n@@ -42,7 +42,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f3<X: ?Sized + T>(x: &X) {\n LL + fn f3<X: T>(x: &X) {\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f4<X: T + ?Sized>(x: &X) {\n@@ -72,7 +72,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f8<X: ?Sized>(x1: &S<X>, x2: &S<X>) {\n LL + fn f8<X>(x1: &S<X>, x2: &S<X>) {\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | fn f5<Y: ?Sized>(x: &Y) {}\n@@ -98,7 +98,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f9<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f9<X>(x1: Box<S<X>>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized3.rs:45:8\n@@ -121,7 +121,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f10<X: ?Sized>(x1: Box<S<X>>) {\n LL + fn f10<X>(x1: Box<S<X>>) {\n-   | \n+   |\n \n error: aborting due to 5 previous errors\n "}, {"sha": "03ed0c4574ab96600a3f0a4b3024d25da6966c3b", "filename": "src/test/ui/unsized/unsized5.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized5.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - struct S1<X: ?Sized> {\n LL + struct S1<X> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     f1: &X,\n@@ -37,7 +37,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - struct S2<X: ?Sized> {\n LL + struct S2<X> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     g: &X,\n@@ -97,7 +97,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum E<X: ?Sized> {\n LL + enum E<X> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     V1(&X, isize),\n@@ -121,7 +121,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - enum F<X: ?Sized> {\n LL + enum F<X> {\n-   | \n+   |\n help: borrowed types always have a statically known size\n    |\n LL |     V2{f1: &X, f: isize},"}, {"sha": "011f2b426c7cf140ae71f82de0bc1c41646faa76", "filename": "src/test/ui/unsized/unsized6.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized6.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL + fn f1<W: ?Sized, X: ?Sized, Y, Z: ?Sized>(x: &X) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:7:12\n@@ -29,7 +29,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL + fn f1<W: ?Sized, X, Y: ?Sized, Z: ?Sized>(x: &X) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `Z` cannot be known at compilation time\n   --> $DIR/unsized6.rs:11:12\n@@ -45,7 +45,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized>(x: &X) {\n LL + fn f1<W: ?Sized, X: ?Sized, Y: ?Sized, Z>(x: &X) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:15:9\n@@ -61,7 +61,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL + fn f2<X, Y: ?Sized>(x: &X) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `Y` cannot be known at compilation time\n   --> $DIR/unsized6.rs:17:12\n@@ -77,7 +77,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f2<X: ?Sized, Y: ?Sized>(x: &X) {\n LL + fn f2<X: ?Sized, Y>(x: &X) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:22:9\n@@ -93,7 +93,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:24:9\n@@ -110,7 +110,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:26:10\n@@ -127,7 +127,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f3<X: ?Sized>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f3<X>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:30:9\n@@ -143,7 +143,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:32:9\n@@ -160,7 +160,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:34:10\n@@ -177,7 +177,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn f4<X: ?Sized + T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n LL + fn f4<X: T>(x1: Box<X>, x2: Box<X>, x3: Box<X>) {\n-   | \n+   |\n \n error[E0277]: the size for values of type `X` cannot be known at compilation time\n   --> $DIR/unsized6.rs:38:18\n@@ -192,7 +192,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn g1<X: ?Sized>(x: X) {}\n LL + fn g1<X>(x: X) {}\n-   | \n+   |\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn g1<X: ?Sized>(x: &X) {}\n@@ -211,7 +211,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - fn g2<X: ?Sized + T>(x: X) {}\n LL + fn g2<X: T>(x: X) {}\n-   | \n+   |\n help: function arguments must have a statically known size, borrowed types always have a known size\n    |\n LL | fn g2<X: ?Sized + T>(x: &X) {}"}, {"sha": "1555b9df4f8d43b0f7381fc095d251b28f253d5a", "filename": "src/test/ui/unsized/unsized7.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized7.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -15,7 +15,7 @@ help: consider removing the `?Sized` bound to make the type parameter `Sized`\n    |\n LL - impl<X: ?Sized + T> T1<X> for S3<X> {\n LL + impl<X: T> T1<X> for S3<X> {\n-   | \n+   |\n help: consider relaxing the implicit `Sized` restriction\n    |\n LL | trait T1<Z: T + ?Sized> {"}, {"sha": "26804216d9da7466ae7a9f37611dfd441f35a486", "filename": "src/test/ui/use/use-after-move-implicity-coerced-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-after-move-implicity-coerced-object.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -6,7 +6,7 @@ LL |     let n: Box<_> = Number { n: 42 }.into();\n LL |     let mut l: Box<_> = List { list: Vec::new() }.into();\n LL |     l.push(n);\n    |            - value moved here\n-LL | \n+LL |\n LL |     let x = n.to_string();\n    |             ^^^^^^^^^^^^^ value borrowed here after move\n "}, {"sha": "0b4fbadb45829fbb430e9472852be50167960be0", "filename": "src/test/ui/use/use-mod/use-mod-4.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-4.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider importing the module directly\n    |\n LL - use foo::self;\n LL + use foo;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use foo::{self};\n@@ -24,7 +24,7 @@ help: consider importing the module directly\n    |\n LL - use std::mem::self;\n LL + use std::mem;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use std::mem::{self};"}, {"sha": "62859e261a36a303c085f4cfeaaa27002e73915b", "filename": "src/test/ui/use/use-mod/use-mod-5.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-5.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider importing the module directly\n    |\n LL - use foo::bar::self;\n LL + use foo::bar;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use foo::bar::{self};"}, {"sha": "2d2c90067aa61d48bf952beb222f91f574b6cf7d", "filename": "src/test/ui/use/use-mod/use-mod-6.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-mod%2Fuse-mod-6.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -8,7 +8,7 @@ help: consider importing the module directly\n    |\n LL - use foo::bar::self as abc;\n LL + use foo::bar as abc;\n-   | \n+   |\n help: alternatively, use the multi-path `use` syntax to import `self`\n    |\n LL | use foo::bar::{self as abc};"}, {"sha": "b398010110498ac0cf4c2eaf3ac476a9c5a40260", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -10,7 +10,7 @@ help: primitive type `usize` doesn't have generic parameters\n    |\n LL -     let x: usize<foo>;\n LL +     let x: usize;\n-   | \n+   |\n \n error: aborting due to previous error\n "}, {"sha": "f137787bff0c786f5f1f5f85ab03c8e23b3816ef", "filename": "src/tools/clippy/tests/ui/eprint_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Feprint_with_newline.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello/n\");\n LL +     eprintln!(\"Hello\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:6:5\n@@ -21,7 +21,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello {}/n\", \"world\");\n LL +     eprintln!(\"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:7:5\n@@ -33,7 +33,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"Hello {} {}/n\", \"world\", \"#2\");\n LL +     eprintln!(\"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:8:5\n@@ -45,7 +45,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"{}/n\", 1265);\n LL +     eprintln!(\"{}\", 1265);\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:9:5\n@@ -57,7 +57,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"/n\");\n LL +     eprintln!();\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:28:5\n@@ -69,7 +69,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"//n\"); // should fail\n LL +     eprintln!(\"/\"); // should fail\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:35:5\n@@ -111,7 +111,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"/r/n\"); //~ ERROR\n LL +     eprintln!(\"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `eprint!()` with a format string that ends in a single newline\n   --> $DIR/eprint_with_newline.rs:48:5\n@@ -123,7 +123,7 @@ help: use `eprintln!` instead\n    |\n LL -     eprint!(\"foo/rbar/n\") // ~ ERROR\n LL +     eprintln!(\"foo/rbar\") // ~ ERROR\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}, {"sha": "2696694680ad7abd56549743231a3b882444e28c", "filename": "src/tools/clippy/tests/ui/manual_split_once.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_split_once.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_split_once.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_split_once.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -96,12 +96,12 @@ help: remove the `iter` usages\n    |\n LL -     let l = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let r = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: manual implementation of `split_once`\n   --> $DIR/manual_split_once.rs:49:5\n@@ -121,12 +121,12 @@ help: remove the `iter` usages\n    |\n LL -     let l = iter.next()?;\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let r = iter.next()?;\n LL +     \n-   | \n+   |\n \n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:53:5\n@@ -146,12 +146,12 @@ help: remove the `iter` usages\n    |\n LL -     let r = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let l = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: manual implementation of `rsplit_once`\n   --> $DIR/manual_split_once.rs:57:5\n@@ -171,12 +171,12 @@ help: remove the `iter` usages\n    |\n LL -     let r = iter.next()?;\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let l = iter.next()?;\n LL +     \n-   | \n+   |\n \n error: manual implementation of `split_once`\n   --> $DIR/manual_split_once.rs:142:13\n@@ -202,12 +202,12 @@ help: remove the `iter` usages\n    |\n LL -     let a = iter.next().unwrap();\n LL +     \n-   | \n+   |\n help: remove the `iter` usages\n    |\n LL -     let b = iter.next().unwrap();\n LL +     \n-   | \n+   |\n \n error: aborting due to 19 previous errors\n "}, {"sha": "abc9c1ece327aaec9831d88941c4cd05c6ea9ae7", "filename": "src/tools/clippy/tests/ui/map_unwrap_or.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_unwrap_or.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -12,7 +12,7 @@ help: use `map_or(<a>, <f>)` instead\n    |\n LL -     let _ = opt.map(|x| x + 1)\n LL +     let _ = opt.map_or(0, |x| x + 1);\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:20:13\n@@ -59,7 +59,7 @@ help: use `and_then(<f>)` instead\n    |\n LL -     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n LL +     let _ = opt.and_then(|x| Some(x + 1));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(<f>)` instead\n   --> $DIR/map_unwrap_or.rs:31:13\n@@ -92,7 +92,7 @@ help: use `and_then(<f>)` instead\n    |\n LL -         .map(|x| Some(x + 1))\n LL +         .and_then(|x| Some(x + 1));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:46:13\n@@ -104,7 +104,7 @@ help: use `map_or(<a>, <f>)` instead\n    |\n LL -     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n LL +     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n-   | \n+   |\n \n error: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value. This can be done more directly by calling `map_or_else(<g>, <f>)` instead\n   --> $DIR/map_unwrap_or.rs:50:13"}, {"sha": "313cdbbeba183c3222fec8dd7848e48b27bb511b", "filename": "src/tools/clippy/tests/ui/needless_late_init.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -164,7 +164,7 @@ help: remove the assignments from the `match` arms\n    |\n LL -         1 => f = \"three\",\n LL +         1 => \"three\",\n-   | \n+   |\n \n error: unneeded late initialization\n   --> $DIR/needless_late_init.rs:76:5\n@@ -180,7 +180,7 @@ help: remove the assignments from the branches\n    |\n LL -         g = 5;\n LL +         5\n-   | \n+   |\n help: add a semicolon after the `if` expression\n    |\n LL |     };"}, {"sha": "72aae0756033a5593826f90b900296a292a2d0df", "filename": "src/tools/clippy/tests/ui/print_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_literal.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     print!(\"Hello {}\", \"world\");\n LL +     print!(\"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:26:36\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     println!(\"Hello {} {}\", world, \"world\");\n LL +     println!(\"Hello {} world\", world);\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:27:26\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     println!(\"Hello {}\", \"world\");\n LL +     println!(\"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:25\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     println!(\"{0} {1}\", \"hello\", \"world\");\n LL +     println!(\"hello {1}\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:32:34\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     println!(\"{0} {1}\", \"hello\", \"world\");\n LL +     println!(\"{0} world\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:25\n@@ -69,7 +69,7 @@ help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n LL +     println!(\"{1} hello\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:33:34\n@@ -81,7 +81,7 @@ help: try this\n    |\n LL -     println!(\"{1} {0}\", \"hello\", \"world\");\n LL +     println!(\"world {0}\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:36:29\n@@ -93,7 +93,7 @@ help: try this\n    |\n LL -     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"hello {bar}\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:36:44\n@@ -105,7 +105,7 @@ help: try this\n    |\n LL -     println!(\"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"{foo} world\", foo = \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:37:29\n@@ -117,7 +117,7 @@ help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"{bar} hello\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/print_literal.rs:37:44\n@@ -129,7 +129,7 @@ help: try this\n    |\n LL -     println!(\"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     println!(\"world {foo}\", foo = \"hello\");\n-   | \n+   |\n \n error: aborting due to 11 previous errors\n "}, {"sha": "edbaa1cdf979fb0bc3f0f7a226cd555c70f10b97", "filename": "src/tools/clippy/tests/ui/print_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fprint_with_newline.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello/n\");\n LL +     println!(\"Hello\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:9:5\n@@ -21,7 +21,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello {}/n\", \"world\");\n LL +     println!(\"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:10:5\n@@ -33,7 +33,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"Hello {} {}/n\", \"world\", \"#2\");\n LL +     println!(\"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:11:5\n@@ -45,7 +45,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"{}/n\", 1265);\n LL +     println!(\"{}\", 1265);\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:12:5\n@@ -57,7 +57,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"/n\");\n LL +     println!();\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:31:5\n@@ -69,7 +69,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"//n\"); // should fail\n LL +     println!(\"/\"); // should fail\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:38:5\n@@ -111,7 +111,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"/r/n\"); //~ ERROR\n LL +     println!(\"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `print!()` with a format string that ends in a single newline\n   --> $DIR/print_with_newline.rs:51:5\n@@ -123,7 +123,7 @@ help: use `println!` instead\n    |\n LL -     print!(\"foo/rbar/n\") // ~ ERROR\n LL +     println!(\"foo/rbar\") // ~ ERROR\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}, {"sha": "8f151e620a25eb9c6059e6256789679df83349d5", "filename": "src/tools/clippy/tests/ui/unnecessary_iter_cloned.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_iter_cloned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_iter_cloned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_iter_cloned.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -13,7 +13,7 @@ help: remove this `&`\n    |\n LL -         let other = match get_file_path(&t) {\n LL +         let other = match get_file_path(t) {\n-   | \n+   |\n \n error: unnecessary use of `copied`\n   --> $DIR/unnecessary_iter_cloned.rs:46:22\n@@ -29,7 +29,7 @@ help: remove this `&`\n    |\n LL -         let other = match get_file_path(&t) {\n LL +         let other = match get_file_path(t) {\n-   | \n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "243b4599dba427ccc2c657014b473aef7a4ed750", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -489,7 +489,7 @@ help: remove this `&`\n    |\n LL -         let path = match get_file_path(&t) {\n LL +         let path = match get_file_path(t) {\n-   | \n+   |\n \n error: unnecessary use of `to_vec`\n   --> $DIR/unnecessary_to_owned.rs:221:14"}, {"sha": "3c5ec91d3e0fb8f3a6459b0cbfe2acd1d0c859a3", "filename": "src/tools/clippy/tests/ui/write_literal.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     write!(v, \"Hello {}\", \"world\");\n LL +     write!(v, \"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:31:39\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     writeln!(v, \"Hello {} {}\", world, \"world\");\n LL +     writeln!(v, \"Hello {} world\", world);\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:32:29\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     writeln!(v, \"Hello {}\", \"world\");\n LL +     writeln!(v, \"Hello world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:28\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n LL +     writeln!(v, \"hello {1}\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:37:37\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{0} {1}\", \"hello\", \"world\");\n LL +     writeln!(v, \"{0} world\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:28\n@@ -69,7 +69,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n LL +     writeln!(v, \"{1} hello\", \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:38:37\n@@ -81,7 +81,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{1} {0}\", \"hello\", \"world\");\n LL +     writeln!(v, \"world {0}\", \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:41:32\n@@ -93,7 +93,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"hello {bar}\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:41:47\n@@ -105,7 +105,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{foo} {bar}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"{foo} world\", foo = \"hello\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:42:32\n@@ -117,7 +117,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"{bar} hello\", bar = \"world\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal.rs:42:47\n@@ -129,7 +129,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{bar} {foo}\", foo = \"hello\", bar = \"world\");\n LL +     writeln!(v, \"world {foo}\", foo = \"hello\");\n-   | \n+   |\n \n error: aborting due to 11 previous errors\n "}, {"sha": "9ff297069c402c3876e0678e4498919571d0f821", "filename": "src/tools/clippy/tests/ui/write_literal_2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_literal_2.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", \"{hello}\");\n LL +     writeln!(v, \"{{hello}}\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:10:24\n@@ -21,7 +21,7 @@ help: try this\n    |\n LL -     writeln!(v, r\"{}\", r\"{hello}\");\n LL +     writeln!(v, r\"{{hello}}\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:11:23\n@@ -33,7 +33,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", '/'');\n LL +     writeln!(v, \"'\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:12:23\n@@ -45,7 +45,7 @@ help: try this\n    |\n LL -     writeln!(v, \"{}\", '\"');\n LL +     writeln!(v, \"/\"\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:14:24\n@@ -57,7 +57,7 @@ help: try this\n    |\n LL -     writeln!(v, r\"{}\", '/'');\n LL +     writeln!(v, r\"'\");\n-   | \n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:18:9"}, {"sha": "5f55431be0bd99a0abe28999aff27b3c668d1022", "filename": "src/tools/clippy/tests/ui/write_with_newline.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0cb9899e780bcefb9008088c1e6d6cd5fe2593b4/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fwrite_with_newline.stderr?ref=0cb9899e780bcefb9008088c1e6d6cd5fe2593b4", "patch": "@@ -9,7 +9,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello/n\");\n LL +     writeln!(v, \"Hello\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:14:5\n@@ -21,7 +21,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello {}/n\", \"world\");\n LL +     writeln!(v, \"Hello {}\", \"world\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:15:5\n@@ -33,7 +33,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"Hello {} {}/n\", \"world\", \"#2\");\n LL +     writeln!(v, \"Hello {} {}\", \"world\", \"#2\");\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:16:5\n@@ -45,7 +45,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"{}/n\", 1265);\n LL +     writeln!(v, \"{}\", 1265);\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:17:5\n@@ -57,7 +57,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"/n\");\n LL +     writeln!(v);\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:36:5\n@@ -69,7 +69,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"//n\"); // should fail\n LL +     writeln!(v, \"/\"); // should fail\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:43:5\n@@ -115,7 +115,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"/r/n\"); //~ ERROR\n LL +     writeln!(v, \"/r\"); //~ ERROR\n-   | \n+   |\n \n error: using `write!()` with a format string that ends in a single newline\n   --> $DIR/write_with_newline.rs:58:5\n@@ -127,7 +127,7 @@ help: use `writeln!()` instead\n    |\n LL -     write!(v, \"foo/rbar/n\");\n LL +     writeln!(v, \"foo/rbar\");\n-   | \n+   |\n \n error: aborting due to 10 previous errors\n "}]}