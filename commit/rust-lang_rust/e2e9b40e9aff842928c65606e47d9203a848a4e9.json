{"sha": "e2e9b40e9aff842928c65606e47d9203a848a4e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyZTliNDBlOWFmZjg0MjkyOGM2NTYwNmU0N2Q5MjAzYTg0OGE0ZTk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-23T02:01:58Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-27T11:51:22Z"}, "message": "Build rustdoc on-demand.\n\nRustdoc is no longer compiled in every stage, alongside rustc, instead\nit is only compiled when requested, and generally only for the last\nstage.", "tree": {"sha": "e66fc893468c1041a1abfb8ee00021f995d70379", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66fc893468c1041a1abfb8ee00021f995d70379"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2e9b40e9aff842928c65606e47d9203a848a4e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2e9b40e9aff842928c65606e47d9203a848a4e9", "html_url": "https://github.com/rust-lang/rust/commit/e2e9b40e9aff842928c65606e47d9203a848a4e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2e9b40e9aff842928c65606e47d9203a848a4e9/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe0eca0d3f028affeccbc4c422d54c80b5837157", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0eca0d3f028affeccbc4c422d54c80b5837157", "html_url": "https://github.com/rust-lang/rust/commit/fe0eca0d3f028affeccbc4c422d54c80b5837157"}], "stats": {"total": 173, "additions": 106, "deletions": 67}, "files": [{"sha": "e193cc612c52d6b67c264a1e0edfe393fe5c5025", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -439,6 +439,9 @@ dependencies = [\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rustdoc 0.0.0\",\n+]\n \n [[package]]\n name = \"filetime\"\n@@ -1222,7 +1225,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_back 0.0.0\",\n  \"rustc_driver 0.0.0\",\n- \"rustdoc 0.0.0\",\n ]\n \n [[package]]\n@@ -1560,25 +1562,18 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_driver 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"rustc_lint 0.0.0\",\n- \"rustc_metadata 0.0.0\",\n- \"rustc_resolve 0.0.0\",\n- \"rustc_trans 0.0.0\",\n- \"rustc_typeck 0.0.0\",\n- \"serialize 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"rustdoc-tool\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustdoc 0.0.0\",\n ]\n \n [[package]]"}, {"sha": "4b84272df98126b69284165fbb2b7755d248739d", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -16,6 +16,7 @@ members = [\n   \"tools/remote-test-server\",\n   \"tools/rust-installer\",\n   \"tools/cargo\",\n+  \"tools/rustdoc\",\n   \"tools/rls\",\n   # FIXME(https://github.com/rust-lang/cargo/issues/4089): move these to exclude\n   \"tools/rls/test_data/borrow_error\","}, {"sha": "04730081e586cf4766a58773012da27cf615306a", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -256,7 +256,7 @@ impl<'a> Builder<'a> {\n                 compile::StartupObjects, tool::BuildManifest, tool::Rustbook, tool::ErrorIndex,\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n-                tool::RustInstaller, tool::Cargo, tool::Rls),\n+                tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n                 check::Cargotest, check::Cargo, check::Rls, check::Docs, check::ErrorIndex,\n@@ -412,12 +412,22 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n-    /// Get the `rustdoc` executable next to the specified compiler\n     pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n-        let mut rustdoc = self.rustc(compiler);\n-        rustdoc.pop();\n-        rustdoc.push(exe(\"rustdoc\", &compiler.host));\n-        rustdoc\n+        self.ensure(tool::Rustdoc { target_compiler: compiler })\n+    }\n+\n+    pub fn rustdoc_cmd(&self, compiler: Compiler) -> Command {\n+        let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n+        cmd\n+            .env(\"RUSTC_STAGE\", compiler.stage.to_string())\n+            .env(\"RUSTC_SYSROOT\", if compiler.is_snapshot(&self.build) {\n+                INTERNER.intern_path(self.build.rustc_snapshot_libdir())\n+            } else {\n+                self.sysroot(compiler)\n+            })\n+            .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n+            .env(\"RUSTDOC_REAL\", self.rustdoc(compiler));\n+        cmd\n     }\n \n     /// Prepares an invocation of `cargo` to be run.\n@@ -469,7 +479,11 @@ impl<'a> Builder<'a> {\n              .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n-             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n+             .env(\"RUSTDOC_REAL\", if cmd == \"doc\" || cmd == \"test\" {\n+                 self.rustdoc(compiler)\n+             } else {\n+                 PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n+             })\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n         if mode != Mode::Tool {"}, {"sha": "3b3b062b151e95fbaad8dfd2d0d1146f74395984", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -809,8 +809,7 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n     }\n \n     println!(\"doc tests for: {}\", markdown.display());\n-    let mut cmd = Command::new(builder.rustdoc(compiler));\n-    builder.add_rustc_lib_path(compiler, &mut cmd);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n     build.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);"}, {"sha": "92a42b59212b4be3a1d137d88ecac6fc766e3fc0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -719,15 +719,6 @@ impl Step for Assemble {\n         let _ = fs::remove_file(&compiler);\n         copy(&rustc, &compiler);\n \n-        // See if rustdoc exists to link it into place\n-        let rustdoc = exe(\"rustdoc\", &*host);\n-        let rustdoc_src = out_dir.join(&rustdoc);\n-        let rustdoc_dst = bindir.join(&rustdoc);\n-        if fs::metadata(&rustdoc_src).is_ok() {\n-            let _ = fs::remove_file(&rustdoc_dst);\n-            copy(&rustdoc_src, &rustdoc_dst);\n-        }\n-\n         target_compiler\n     }\n }"}, {"sha": "c322d75dd5b45e04bf4664d845459ef10abb31bc", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -413,6 +413,9 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(image.join(\"bin\")));\n             cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n \n+            install(&builder.ensure(tool::Rustdoc { target_compiler: compiler }),\n+                &image.join(\"bin\"), 0o755);\n+\n             // Copy runtime DLLs needed by the compiler\n             if libdir != \"bin\" {\n                 for entry in t!(src.join(libdir).read_dir()).map(|e| t!(e)) {"}, {"sha": "88612db0d3a83afe86b3cb8a748868efa2498c31", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -21,7 +21,6 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io;\n use std::path::{PathBuf, Path};\n-use std::process::Command;\n \n use Mode;\n use build_helper::up_to_date;\n@@ -242,12 +241,8 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n     let build = builder.build;\n     let out = build.doc_out(target);\n \n-    let compiler = builder.compiler(0, build.build);\n-\n     let path = build.src.join(\"src/doc\").join(markdown);\n \n-    let rustdoc = builder.rustdoc(compiler);\n-\n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n \n@@ -263,9 +258,7 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n         t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n     }\n \n-    let mut cmd = Command::new(&rustdoc);\n-\n-    builder.add_rustc_lib_path(compiler, &mut cmd);\n+    let mut cmd = builder.rustdoc_cmd(builder.compiler(0, build.build));\n \n     let out = out.join(\"book\");\n \n@@ -357,8 +350,7 @@ impl Step for Standalone {\n                 continue\n             }\n \n-            let mut cmd = Command::new(&rustdoc);\n-            builder.add_rustc_lib_path(compiler, &mut cmd);\n+            let mut cmd = builder.rustdoc_cmd(compiler);\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)"}, {"sha": "cbb312e2e4cbc7e40c05b4e40db90aa396a944ad", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -8,14 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fs;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n \n use Mode;\n use Compiler;\n use builder::{Step, RunConfig, ShouldRun, Builder};\n-use util::{exe, add_lib_path};\n+use util::{copy, exe, add_lib_path};\n use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n use native;\n use channel::GitInfo;\n@@ -223,6 +224,56 @@ impl Step for RemoteTestServer {\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustdoc {\n+    pub target_compiler: Compiler,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustdoc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustdoc {\n+            target_compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        let target_compiler = self.target_compiler;\n+        let build_compiler = if target_compiler.stage == 0 {\n+            target_compiler\n+        } else {\n+            builder.compiler(target_compiler.stage - 1, target_compiler.host)\n+        };\n+\n+        let tool_rustdoc = builder.ensure(ToolBuild {\n+            compiler: build_compiler,\n+            target: build_compiler.host,\n+            tool: \"rustdoc\",\n+            mode: Mode::Librustc,\n+        });\n+\n+        // don't create a stage0-sysroot/bin directory.\n+        if target_compiler.stage > 0 {\n+            let sysroot = builder.sysroot(target_compiler);\n+            let bindir = sysroot.join(\"bin\");\n+            t!(fs::create_dir_all(&bindir));\n+            let bin_rustdoc = bindir.join(exe(\"rustdoc\", &*target_compiler.host));\n+            let _ = fs::remove_file(&bin_rustdoc);\n+            copy(&tool_rustdoc, &bin_rustdoc);\n+            bin_rustdoc\n+        } else {\n+            tool_rustdoc\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n     pub compiler: Compiler,"}, {"sha": "f9400e68a16c58d2c15a527207758794d5685027", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -7,25 +7,10 @@ build = \"build.rs\"\n [lib]\n name = \"rustdoc\"\n path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n \n [dependencies]\n-arena = { path = \"../libarena\" }\n env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n-rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_driver = { path = \"../librustc_driver\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_lint = { path = \"../librustc_lint\" }\n-rustc_metadata = { path = \"../librustc_metadata\" }\n-rustc_resolve = { path = \"../librustc_resolve\" }\n-rustc_typeck = { path = \"../librustc_typeck\" }\n-rustc_trans = { path = \"../librustc_trans\" }\n-serialize = { path = \"../libserialize\" }\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n pulldown-cmark = { version = \"0.0.14\", default-features = false }\n \n [build-dependencies]"}, {"sha": "64240d26894d00347cfc339b4df197e68d42c504", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -17,6 +17,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(warnings)]\n \n+#![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(libc)]"}, {"sha": "4452f4a2f446bb804b1f3a82085a1ecd529d88ac", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -7,16 +7,11 @@ version = \"0.0.0\"\n name = \"rustc\"\n path = \"rustc.rs\"\n \n-[[bin]]\n-name = \"rustdoc\"\n-path = \"rustdoc.rs\"\n-\n # All optional dependencies so the features passed to this Cargo.toml select\n # what should actually be built.\n [dependencies]\n rustc_back = { path = \"../librustc_back\" }\n rustc_driver = { path = \"../librustc_driver\" }\n-rustdoc = { path = \"../librustdoc\" }\n \n [features]\n jemalloc = [\"rustc_back/jemalloc\"]"}, {"sha": "7f8783c9d89bea3af6ac58f65122d855ed2851b6", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -3,6 +3,9 @@ authors = [\"The Rust Project Developers\"]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n \n+[dependencies]\n+rustdoc = { path = \"../../librustdoc\" }\n+\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}, {"sha": "b6edb76d7f98f8a2acfa457357dd603713d241e3", "filename": "src/tools/rustdoc/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Frustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Frustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2FCargo.toml?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"rustdoc-tool\"\n+version = \"0.0.0\"\n+authors = [\"The Rust Project Developers\"]\n+\n+[[bin]]\n+name = \"rustdoc\"\n+path = \"main.rs\"\n+\n+[dependencies]\n+rustdoc = { path = \"../../librustdoc\" }"}, {"sha": "9c37e249ba8cc9bdf0f674a6152ee3160c21382a", "filename": "src/tools/rustdoc/main.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Frustdoc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2e9b40e9aff842928c65606e47d9203a848a4e9/src%2Ftools%2Frustdoc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2Fmain.rs?ref=e2e9b40e9aff842928c65606e47d9203a848a4e9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n-\n extern crate rustdoc;\n \n fn main() { rustdoc::main() }", "previous_filename": "src/rustc/rustdoc.rs"}]}