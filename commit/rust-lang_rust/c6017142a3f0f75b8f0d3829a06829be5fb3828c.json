{"sha": "c6017142a3f0f75b8f0d3829a06829be5fb3828c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MDE3MTQyYTNmMGY3NWI4ZjBkMzgyOWEwNjgyOWJlNWZiMzgyOGM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-31T10:51:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-31T10:51:40Z"}, "message": "Rollup merge of #75969 - nixphix:docs/mod, r=jyn514\n\nSwitch to intra-doc links in core/src/{convert,iter}/mod.rs\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\ncouldn't fix these\n\n```rust\n     ../../std/string/struct.String.html\n     ../../std/primitive.never.html\n     ../../std/sync/mpsc/struct.TryIter.html\n```", "tree": {"sha": "fd6187078a3b835f25ff0c5d929dab628993f347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd6187078a3b835f25ff0c5d929dab628993f347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6017142a3f0f75b8f0d3829a06829be5fb3828c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfTNY9CRBK7hj4Ov3rIwAAdHIIAHyesVKIBaALZmjMl8Ls0XRZ\n3dIXFux58CdUpe094hSF9bxclgIYz7SJ5F8NFiYCltLB1m9257kqI5RyDRPNcRgV\nuSl0S9BWZ/G4QDXagEqnfs02ZZZpqDEF6JaP4sGT58QVmuqOsrySHCvztnrY4ODF\nhbWaOjNUVER7p06NQsr9NWxR8wNBYSamu6MHeUw0jX/SJsGCGi2/4GdF5hFQFggW\nKOZMJ9XplwgfYqgLOR91NMOYEmN2Lq/lnvkzWq07xH1OsM4BoG8n/Y4BLeEX2rBB\nvULj1zdojFnv/WjCarwXv7GhwimBF1/D09CQh9GVs7Qvfrzc7/prsb2j5VkJ4Js=\n=JIjM\n-----END PGP SIGNATURE-----\n", "payload": "tree fd6187078a3b835f25ff0c5d929dab628993f347\nparent 6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44\nparent 523fea4d1405c4e2d4a96d126f4d990d342de6cc\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1598871100 +0200\ncommitter GitHub <noreply@github.com> 1598871100 +0200\n\nRollup merge of #75969 - nixphix:docs/mod, r=jyn514\n\nSwitch to intra-doc links in core/src/{convert,iter}/mod.rs\n\nPartial fix for #75080\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\ncouldn't fix these\n\n```rust\n     ../../std/string/struct.String.html\n     ../../std/primitive.never.html\n     ../../std/sync/mpsc/struct.TryIter.html\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6017142a3f0f75b8f0d3829a06829be5fb3828c", "html_url": "https://github.com/rust-lang/rust/commit/c6017142a3f0f75b8f0d3829a06829be5fb3828c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6017142a3f0f75b8f0d3829a06829be5fb3828c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44", "html_url": "https://github.com/rust-lang/rust/commit/6c44bcc4ffeb0ee8059c2c167388c69dedf1ea44"}, {"sha": "523fea4d1405c4e2d4a96d126f4d990d342de6cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/523fea4d1405c4e2d4a96d126f4d990d342de6cc", "html_url": "https://github.com/rust-lang/rust/commit/523fea4d1405c4e2d4a96d126f4d990d342de6cc"}], "stats": {"total": 74, "additions": 24, "deletions": 50}, "files": [{"sha": "2bfeb49b5fab7fa5fb0f3ae253ed2c52d06cbe4d", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c6017142a3f0f75b8f0d3829a06829be5fb3828c/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6017142a3f0f75b8f0d3829a06829be5fb3828c/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=c6017142a3f0f75b8f0d3829a06829be5fb3828c", "patch": "@@ -31,13 +31,6 @@\n //!   `into` themselves and `from` themselves\n //!\n //! See each trait for usage examples.\n-//!\n-//! [`Into`]: trait.Into.html\n-//! [`From`]: trait.From.html\n-//! [`TryFrom`]: trait.TryFrom.html\n-//! [`TryInto`]: trait.TryInto.html\n-//! [`AsRef`]: trait.AsRef.html\n-//! [`AsMut`]: trait.AsMut.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -141,13 +134,11 @@ pub const fn identity<T>(x: T) -> T {\n /// want to accept all references that can be converted to [`&str`] as an argument.\n /// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n-/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n-/// [`Hash`]: ../../std/hash/trait.Hash.html\n-/// [`Eq`]: ../../std/cmp/trait.Eq.html\n-/// [`Ord`]: ../../std/cmp/trait.Ord.html\n-/// [`&str`]: ../../std/primitive.str.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n+/// [`Borrow`]: crate::borrow::Borrow\n+/// [`Eq`]: crate::cmp::Eq\n+/// [`Ord`]: crate::cmp::Ord\n /// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```\n@@ -177,8 +168,8 @@ pub trait AsRef<T: ?Sized> {\n /// **Note: This trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n ///\n /// # Generic Implementations\n ///\n@@ -278,12 +269,9 @@ pub trait AsMut<T: ?Sized> {\n /// is_hello(s);\n /// ```\n ///\n-/// [`TryInto`]: trait.TryInto.html\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`From`]: trait.From.html\n-/// [`Into`]: trait.Into.html\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n@@ -370,12 +358,10 @@ pub trait Into<T>: Sized {\n /// }\n /// ```\n ///\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`Into`]: trait.Into.html\n-/// [`from`]: trait.From.html#tymethod.from\n+/// [`from`]: From::from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[rustc_diagnostic_item = \"from_trait\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -404,9 +390,6 @@ pub trait From<T>: Sized {\n ///\n /// This suffers the same restrictions and reasoning as implementing\n /// [`Into`], see there for details.\n-///\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Into`]: trait.Into.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -485,11 +468,9 @@ pub trait TryInto<T>: Sized {\n /// assert!(try_successful_smaller_number.is_ok());\n /// ```\n ///\n-/// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n-/// [`TryInto`]: trait.TryInto.html\n-/// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n+/// [`i32::MAX`]: crate::i32::MAX\n+/// [`try_from`]: TryFrom::try_from\n /// [`!`]: ../../std/primitive.never.html\n-/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -676,7 +657,6 @@ impl AsRef<str> for str {\n ///\n /// \u2026 and eventually deprecate `Infallible`.\n ///\n-///\n /// However there is one case where `!` syntax can be used\n /// before `!` is stabilized as a full-fledged type: in the position of a function\u2019s return type.\n /// Specifically, it is possible implementations for two different function pointer types:\n@@ -692,10 +672,6 @@ impl AsRef<str> for str {\n /// the two `impl`s will start to overlap\n /// and therefore will be disallowed by the language\u2019s trait coherence rules.\n ///\n-/// [`Ok`]: ../result/enum.Result.html#variant.Ok\n-/// [`Result`]: ../result/enum.Result.html\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n #[derive(Copy)]"}, {"sha": "28b22f80e2c1be770c49e693dba26f1d0024b03f", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6017142a3f0f75b8f0d3829a06829be5fb3828c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6017142a3f0f75b8f0d3829a06829be5fb3828c/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=c6017142a3f0f75b8f0d3829a06829be5fb3828c", "patch": "@@ -54,8 +54,7 @@\n //! below for more details.\n //!\n //! [`Some(Item)`]: Some\n-//! [`Iterator`]: trait.Iterator.html\n-//! [`next`]: trait.Iterator.html#tymethod.next\n+//! [`next`]: Iterator::next\n //! [`TryIter`]: ../../std/sync/mpsc/struct.TryIter.html\n //!\n //! # The three forms of iteration\n@@ -159,8 +158,7 @@\n //! Let's take a look at that `for` loop again, and what the compiler converts\n //! it into:\n //!\n-//! [`IntoIterator`]: trait.IntoIterator.html\n-//! [`into_iter`]: trait.IntoIterator.html#tymethod.into_iter\n+//! [`into_iter`]: IntoIterator::into_iter\n //!\n //! ```\n //! let values = vec![1, 2, 3, 4, 5];\n@@ -222,9 +220,9 @@\n //! across versions of Rust, so you should avoid relying on the exact values\n //! returned by an iterator which panicked.\n //!\n-//! [`map`]: trait.Iterator.html#method.map\n-//! [`take`]: trait.Iterator.html#method.take\n-//! [`filter`]: trait.Iterator.html#method.filter\n+//! [`map`]: Iterator::map\n+//! [`take`]: Iterator::take\n+//! [`filter`]: Iterator::filter\n //!\n //! # Laziness\n //!\n@@ -261,13 +259,13 @@\n //! }\n //! ```\n //!\n-//! [`map`]: trait.Iterator.html#method.map\n-//! [`for_each`]: trait.Iterator.html#method.for_each\n+//! [`map`]: Iterator::map\n+//! [`for_each`]: Iterator::for_each\n //!\n //! Another common way to evaluate an iterator is to use the [`collect`]\n //! method to produce a new collection.\n //!\n-//! [`collect`]: trait.Iterator.html#method.collect\n+//! [`collect`]: Iterator::collect\n //!\n //! # Infinity\n //!\n@@ -305,8 +303,8 @@\n //! println!(\"The smallest number one is {}.\", least);\n //! ```\n //!\n-//! [`take`]: trait.Iterator.html#method.take\n-//! [`min`]: trait.Iterator.html#method.min\n+//! [`take`]: Iterator::take\n+//! [`min`]: Iterator::min\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}