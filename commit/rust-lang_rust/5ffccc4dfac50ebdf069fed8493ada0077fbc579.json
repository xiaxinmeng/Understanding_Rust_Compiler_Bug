{"sha": "5ffccc4dfac50ebdf069fed8493ada0077fbc579", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmZmNjYzRkZmFjNTBlYmRmMDY5ZmVkODQ5M2FkYTAwNzdmYmM1Nzk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-05T09:29:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-05T09:29:59Z"}, "message": "Rollup merge of #78742 - vn-ki:fix-issue-78655, r=oli-obk\n\nmake intern_const_alloc_recursive return error\n\nfix #78655\n\nr? ``@oli-obk``", "tree": {"sha": "5e6244f054ee3a7a2e9a2639242565fd784246d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e6244f054ee3a7a2e9a2639242565fd784246d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ffccc4dfac50ebdf069fed8493ada0077fbc579", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfo8YXCRBK7hj4Ov3rIwAAdHIIAAc7OWMiPjIZAyyvyXvLtQs6\nsq2frWQq72/l4NpzGCS6/e6MveKNLl8QnRNSDDH3Z/qjM+cEcFHqxFy6a/GxXwEd\ntun7RNSYJEi7gPF8SSr0LbtO2cHqnRr65YC0oVEO+UawEELrDydqtViqhO8HT1lx\nNKI05KxmtwYp9Bfa8E8WjH3QbVCRG05oNbDc+OvfSgqmjY0N5Ry6wUg7qgbHJhCo\n6I5rsoU7o+RdFMRnevLdRvAoFZifN3ZZfoTG0DcEbDYHCCE4Ev95Ym9P0TtRgGT9\nwVOBG1emRTFv6PNCBlMhGeBDuOYq5Q9upJkq3jJHFf0XHYGLZ5ZxuI1gD/hQP8c=\n=Xdgz\n-----END PGP SIGNATURE-----\n", "payload": "tree 5e6244f054ee3a7a2e9a2639242565fd784246d5\nparent 171d29c9c5bb6fb7cc60702d9c24bee8558c622a\nparent a15ee4d7c844c317043116969cede8341d932a46\nauthor Mara Bos <m-ou.se@m-ou.se> 1604568599 +0100\ncommitter GitHub <noreply@github.com> 1604568599 +0100\n\nRollup merge of #78742 - vn-ki:fix-issue-78655, r=oli-obk\n\nmake intern_const_alloc_recursive return error\n\nfix #78655\n\nr? ``@oli-obk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ffccc4dfac50ebdf069fed8493ada0077fbc579", "html_url": "https://github.com/rust-lang/rust/commit/5ffccc4dfac50ebdf069fed8493ada0077fbc579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ffccc4dfac50ebdf069fed8493ada0077fbc579/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171d29c9c5bb6fb7cc60702d9c24bee8558c622a", "url": "https://api.github.com/repos/rust-lang/rust/commits/171d29c9c5bb6fb7cc60702d9c24bee8558c622a", "html_url": "https://github.com/rust-lang/rust/commit/171d29c9c5bb6fb7cc60702d9c24bee8558c622a"}, {"sha": "a15ee4d7c844c317043116969cede8341d932a46", "url": "https://api.github.com/repos/rust-lang/rust/commits/a15ee4d7c844c317043116969cede8341d932a46", "html_url": "https://github.com/rust-lang/rust/commit/a15ee4d7c844c317043116969cede8341d932a46"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "e35ff6b996ee08662944cc3c09265d0744c1b537", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -81,6 +81,12 @@ impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     }\n }\n \n+impl From<ErrorReported> for InterpErrorInfo<'_> {\n+    fn from(err: ErrorReported) -> Self {\n+        InterpError::InvalidProgram(InvalidProgramInfo::AlreadyReported(err)).into()\n+    }\n+}\n+\n impl<'tcx> From<InterpError<'tcx>> for InterpErrorInfo<'tcx> {\n     fn from(kind: InterpError<'tcx>) -> Self {\n         let capture_backtrace = tls::with_opt(|tcx| {\n@@ -115,8 +121,8 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error.\n     ReferencedConstant,\n-    /// Abort in case type errors are reached.\n-    TypeckError(ErrorReported),\n+    /// Abort in case errors are already reported.\n+    AlreadyReported(ErrorReported),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An invalid transmute happened.\n@@ -129,7 +135,7 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            TypeckError(ErrorReported) => {\n+            AlreadyReported(ErrorReported) => {\n                 write!(f, \"encountered constants with type errors, stopping evaluation\")\n             }\n             Layout(ref err) => write!(f, \"{}\", err),"}, {"sha": "39358e03e7590932fec370cb1fb55957f7b8232b", "filename": "compiler/rustc_mir/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Ferror.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -141,7 +141,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n                 return ErrorHandled::TooGeneric;\n             }\n-            err_inval!(TypeckError(error_reported)) => {\n+            err_inval!(AlreadyReported(error_reported)) => {\n                 return ErrorHandled::Reported(error_reported);\n             }\n             // We must *always* hard error on these, even if the caller wants just a lint."}, {"sha": "0cac7c087d4ac5401f32725527631a9fb0c29216", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -67,7 +67,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n             None => InternKind::Constant,\n         }\n     };\n-    intern_const_alloc_recursive(ecx, intern_kind, ret);\n+    intern_const_alloc_recursive(ecx, intern_kind, ret)?;\n \n     debug!(\"eval_body_using_ecx done: {:?}\", *ret);\n     Ok(ret)"}, {"sha": "9dd2a8592a7e0a0d5d47110727e2de5df73db714", "filename": "compiler/rustc_mir/src/const_eval/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmod.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -29,7 +29,9 @@ pub(crate) fn const_caller_location(\n     let mut ecx = mk_eval_cx(tcx, DUMMY_SP, ty::ParamEnv::reveal_all(), false);\n \n     let loc_place = ecx.alloc_caller_location(file, line, col);\n-    intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place);\n+    if intern_const_alloc_recursive(&mut ecx, InternKind::Constant, loc_place).is_err() {\n+        bug!(\"intern_const_alloc_recursive should not error in this case\")\n+    }\n     ConstValue::Scalar(loc_place.ptr)\n }\n "}, {"sha": "8d0c8c18537eabd612e417027b0010b802f6f980", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -469,7 +469,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         if let Some(def) = def.as_local() {\n             if self.tcx.has_typeck_results(def.did) {\n                 if let Some(error_reported) = self.tcx.typeck_opt_const_arg(def).tainted_by_errors {\n-                    throw_inval!(TypeckError(error_reported))\n+                    throw_inval!(AlreadyReported(error_reported))\n                 }\n             }\n         }\n@@ -525,8 +525,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Ok(Some(instance)) => Ok(instance),\n             Ok(None) => throw_inval!(TooGeneric),\n \n-            // FIXME(eddyb) this could be a bit more specific than `TypeckError`.\n-            Err(error_reported) => throw_inval!(TypeckError(error_reported)),\n+            // FIXME(eddyb) this could be a bit more specific than `AlreadyReported`.\n+            Err(error_reported) => throw_inval!(AlreadyReported(error_reported)),\n         }\n     }\n "}, {"sha": "413be427339f3bd2838879289056e54b4fec377a", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -16,6 +16,7 @@\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::InterpResult;\n use rustc_middle::ty::{self, layout::TyAndLayout, Ty};\n@@ -285,11 +286,13 @@ pub enum InternKind {\n /// tracks where in the value we are and thus can show much better error messages.\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n+#[tracing::instrument(skip(ecx))]\n pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,\n     ret: MPlaceTy<'tcx>,\n-) where\n+) -> Result<(), ErrorReported>\n+where\n     'tcx: 'mir,\n {\n     let tcx = ecx.tcx;\n@@ -405,12 +408,14 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             // Codegen does not like dangling pointers, and generally `tcx` assumes that\n             // all allocations referenced anywhere actually exist. So, make sure we error here.\n             ecx.tcx.sess.span_err(ecx.tcx.span, \"encountered dangling pointer in final constant\");\n+            return Err(ErrorReported);\n         } else if ecx.tcx.get_global_alloc(alloc_id).is_none() {\n             // We have hit an `AllocId` that is neither in local or global memory and isn't\n             // marked as dangling by local memory.  That should be impossible.\n             span_bug!(ecx.tcx.span, \"encountered unknown alloc id {:?}\", alloc_id);\n         }\n     }\n+    Ok(())\n }\n \n impl<'mir, 'tcx: 'mir, M: super::intern::CompileTimeMachine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {"}, {"sha": "d9437a312aec0d00549f26a4c8196c26797280d2", "filename": "compiler/rustc_mir/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Foperand.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -544,7 +544,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) | ty::ConstKind::Bound(..) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n+            ty::ConstKind::Error(_) => throw_inval!(AlreadyReported(ErrorReported)),\n             ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 let instance = self.resolve(def, substs)?;\n                 return Ok(self.eval_to_allocation(GlobalId { instance, promoted })?.into());"}, {"sha": "95acacdb78795ef6e8dff7cbdf66c1d002838668", "filename": "src/test/ui/consts/dangling-alloc-id-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -6,7 +6,7 @@ union Foo<'a> {\n     long_live_the_unit: &'static (),\n }\n \n-const FOO: &() = { //~ ERROR it is undefined behavior to use this value\n+const FOO: &() = {\n //~^ ERROR encountered dangling pointer in final constant\n     let y = ();\n     unsafe { Foo { y: &y }.long_live_the_unit }"}, {"sha": "24f57449872250a4434d1558b0eb214611030ae6", "filename": "src/test/ui/consts/dangling-alloc-id-ice.stderr", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fdangling-alloc-id-ice.stderr?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -8,18 +8,5 @@ LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n LL | | };\n    | |__^\n \n-error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/dangling-alloc-id-ice.rs:9:1\n-   |\n-LL | / const FOO: &() = {\n-LL | |\n-LL | |     let y = ();\n-LL | |     unsafe { Foo { y: &y }.long_live_the_unit }\n-LL | | };\n-   | |__^ type validation failed: encountered a dangling reference (use-after-free)\n-   |\n-   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "066764bc46fc4ca158168c9006c4cac16d495b8f", "filename": "src/test/ui/consts/issue-78655.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.rs?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -0,0 +1,10 @@\n+const FOO: *const u32 = { //~ ERROR encountered dangling pointer in final constant\n+    let x;\n+    &x //~ ERROR borrow of possibly-uninitialized variable: `x`\n+};\n+\n+fn main() {\n+    let FOO = FOO;\n+    //~^ ERROR could not evaluate constant pattern\n+    //~| ERROR could not evaluate constant pattern\n+}"}, {"sha": "cf3fe18f802fbafb058a639f771d03fa031c7d31", "filename": "src/test/ui/consts/issue-78655.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5ffccc4dfac50ebdf069fed8493ada0077fbc579/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-78655.stderr?ref=5ffccc4dfac50ebdf069fed8493ada0077fbc579", "patch": "@@ -0,0 +1,30 @@\n+error[E0381]: borrow of possibly-uninitialized variable: `x`\n+  --> $DIR/issue-78655.rs:3:5\n+   |\n+LL |     &x\n+   |     ^^ use of possibly-uninitialized `x`\n+\n+error: encountered dangling pointer in final constant\n+  --> $DIR/issue-78655.rs:1:1\n+   |\n+LL | / const FOO: *const u32 = {\n+LL | |     let x;\n+LL | |     &x\n+LL | | };\n+   | |__^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-78655.rs:7:9\n+   |\n+LL |     let FOO = FOO;\n+   |         ^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-78655.rs:7:9\n+   |\n+LL |     let FOO = FOO;\n+   |         ^^^\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0381`."}]}