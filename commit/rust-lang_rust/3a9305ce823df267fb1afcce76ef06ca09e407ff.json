{"sha": "3a9305ce823df267fb1afcce76ef06ca09e407ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhOTMwNWNlODIzZGYyNjdmYjFhZmNjZTc2ZWYwNmNhMDllNDA3ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-14T09:22:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-14T09:22:24Z"}, "message": "auto merge of #19690 : barosl/rust/struct-variant-as-a-function-ice, r=alexcrichton\n\nUnlike a tuple variant constructor which can be called as a function, a struct variant constructor is not a function, so cannot be called.\r\n\r\nIf the user tries to assign the constructor to a variable, an ICE occurs, because there is no way to use it later. So we should stop the constructor from being used like that.\r\n\r\nA similar mechanism already exists for a normal struct, as it prohibits a struct from being resolved. This commit does the same for a struct variant.\r\n\r\nThis commit also includes some changes to the existing tests.\r\n\r\nFixes #19452.", "tree": {"sha": "75b3af504a1218014bec477c86bd2910899b5b33", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75b3af504a1218014bec477c86bd2910899b5b33"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a9305ce823df267fb1afcce76ef06ca09e407ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9305ce823df267fb1afcce76ef06ca09e407ff", "html_url": "https://github.com/rust-lang/rust/commit/3a9305ce823df267fb1afcce76ef06ca09e407ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a9305ce823df267fb1afcce76ef06ca09e407ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10ac5b72f1974775bed499105c2a3cf18da98f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/10ac5b72f1974775bed499105c2a3cf18da98f32", "html_url": "https://github.com/rust-lang/rust/commit/10ac5b72f1974775bed499105c2a3cf18da98f32"}, {"sha": "cfee5b7e881d6cfd65557ca98aff043d9b8fea49", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfee5b7e881d6cfd65557ca98aff043d9b8fea49", "html_url": "https://github.com/rust-lang/rust/commit/cfee5b7e881d6cfd65557ca98aff043d9b8fea49"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "bec3fa77b07feeef1c4d188d2f5810bd06a71d24", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=3a9305ce823df267fb1afcce76ef06ca09e407ff", "patch": "@@ -5807,16 +5807,30 @@ impl<'a> Resolver<'a> {\n                 // This is a local path in the value namespace. Walk through\n                 // scopes looking for it.\n \n+                let path_name = self.path_names_to_string(path);\n+\n                 match self.resolve_path(expr.id, path, ValueNS, true) {\n+                    // Check if struct variant\n+                    Some((DefVariant(_, _, true), _)) => {\n+                        self.resolve_error(expr.span,\n+                                format!(\"`{}` is a struct variant name, but \\\n+                                         this expression \\\n+                                         uses it like a function name\",\n+                                        path_name).as_slice());\n+\n+                        self.session.span_help(expr.span,\n+                            format!(\"Did you mean to write: \\\n+                                    `{} {{ /* fields */ }}`?\",\n+                                    path_name).as_slice());\n+                    }\n                     Some(def) => {\n                         // Write the result into the def map.\n                         debug!(\"(resolving expr) resolved `{}`\",\n-                               self.path_names_to_string(path));\n+                               path_name);\n \n                         self.record_def(expr.id, def);\n                     }\n                     None => {\n-                        let wrong_name = self.path_names_to_string(path);\n                         // Be helpful if the name refers to a struct\n                         // (The pattern matching def_tys where the id is in self.structs\n                         // matches on regular structs while excluding tuple- and enum-like\n@@ -5829,12 +5843,12 @@ impl<'a> Resolver<'a> {\n                                         format!(\"`{}` is a structure name, but \\\n                                                  this expression \\\n                                                  uses it like a function name\",\n-                                                wrong_name).as_slice());\n+                                                path_name).as_slice());\n \n                                 self.session.span_help(expr.span,\n                                     format!(\"Did you mean to write: \\\n                                             `{} {{ /* fields */ }}`?\",\n-                                            wrong_name).as_slice());\n+                                            path_name).as_slice());\n \n                             }\n                             _ => {\n@@ -5851,7 +5865,7 @@ impl<'a> Resolver<'a> {\n                                 });\n \n                                 if method_scope && token::get_name(self.self_name).get()\n-                                                                   == wrong_name {\n+                                                                   == path_name {\n                                         self.resolve_error(\n                                             expr.span,\n                                             \"`self` is not available \\\n@@ -5863,18 +5877,18 @@ impl<'a> Resolver<'a> {\n                                         NoSuggestion => {\n                                             // limit search to 5 to reduce the number\n                                             // of stupid suggestions\n-                                            self.find_best_match_for_name(wrong_name.as_slice(), 5)\n+                                            self.find_best_match_for_name(path_name.as_slice(), 5)\n                                                                 .map_or(\"\".to_string(),\n                                                                         |x| format!(\"`{}`\", x))\n                                         }\n                                         Field =>\n-                                            format!(\"`self.{}`\", wrong_name),\n+                                            format!(\"`self.{}`\", path_name),\n                                         Method\n                                         | TraitItem =>\n-                                            format!(\"to call `self.{}`\", wrong_name),\n+                                            format!(\"to call `self.{}`\", path_name),\n                                         TraitMethod(path_str)\n                                         | StaticMethod(path_str) =>\n-                                            format!(\"to call `{}::{}`\", path_str, wrong_name)\n+                                            format!(\"to call `{}::{}`\", path_str, path_name)\n                                     };\n \n                                     if msg.len() > 0 {\n@@ -5884,7 +5898,7 @@ impl<'a> Resolver<'a> {\n                                     self.resolve_error(\n                                         expr.span,\n                                         format!(\"unresolved name `{}`{}\",\n-                                                wrong_name,\n+                                                path_name,\n                                                 msg).as_slice());\n                                 }\n                             }"}, {"sha": "02493b96dc88d5f537d63797e9ced74c37b2a54f", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=3a9305ce823df267fb1afcce76ef06ca09e407ff", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42u); //~ ERROR expected function, found `Foo`\n+    let f = Foo::Variant(42u); //~ ERROR uses it like a function\n }"}, {"sha": "2270ba594ad2bfc5439f1be512f89054bcad6648", "filename": "src/test/compile-fail/issue-19452.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a9305ce823df267fb1afcce76ef06ca09e407ff/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19452.rs?ref=3a9305ce823df267fb1afcce76ef06ca09e407ff", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Homura {\n+    Madoka { age: u32 }\n+}\n+\n+fn main() {\n+    let homura = Homura::Madoka; //~ ERROR uses it like a function\n+}"}]}