{"sha": "af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmE5YTJjNjJiYTJlN2ZlNTRmNTM4ODRiOTRmY2QyZjlhOTI2NWI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-04-02T21:29:28Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T18:37:38Z"}, "message": "Handle the visibility/lint scope distinction better\n\n* Don't generate an extra lint scope for each `let` statement.\n* Place match guards inside the visiblility scope of the bindings for\n  their arm.", "tree": {"sha": "179e395ad9f6443e5cf7f2ac087f7f13101988c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/179e395ad9f6443e5cf7f2ac087f7f13101988c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "html_url": "https://github.com/rust-lang/rust/commit/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e784595c280da04c98e76a5ce9d603b58f6a88e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e784595c280da04c98e76a5ce9d603b58f6a88e2", "html_url": "https://github.com/rust-lang/rust/commit/e784595c280da04c98e76a5ce9d603b58f6a88e2"}], "stats": {"total": 112, "additions": 45, "deletions": 67}, "files": [{"sha": "591f713f81f79bc39f0e284f4e10e4457f7e7a12", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -1313,10 +1313,8 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Arm {\n-            hir_id,\n+            hir_id: self.next_id(),\n             attrs: self.lower_attrs(&arm.attrs),\n             pats: arm.pats.iter().map(|x| self.lower_pat(x)).collect(),\n             guard: match arm.guard {\n@@ -5027,10 +5025,8 @@ impl<'a> LoweringContext<'a> {\n     // Helper methods for building HIR.\n \n     fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n-        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n-\n         hir::Arm {\n-            hir_id,\n+            hir_id: self.next_id(),\n             attrs: hir_vec![],\n             pats,\n             guard: None,"}, {"sha": "b5bab1585342a1cacf4329ee69aacafcf31d31e1", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 22, "deletions": 14, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -113,31 +113,39 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let remainder_span = remainder_scope.span(this.hir.tcx(),\n                                                               &this.hir.region_scope_tree);\n \n-                    let scope;\n+                    let visibility_scope =\n+                        Some(this.new_source_scope(remainder_span, LintLevel::Inherited, None));\n \n                     // Evaluate the initializer, if present.\n                     if let Some(init) = initializer {\n                         let initializer_span = init.span();\n \n-                        scope = this.declare_bindings(\n-                            None,\n-                            remainder_span,\n-                            lint_level,\n-                            &pattern,\n-                            ArmHasGuard(false),\n-                            Some((None, initializer_span)),\n-                        );\n                         unpack!(block = this.in_opt_scope(\n                             opt_destruction_scope.map(|de|(de, source_info)), |this| {\n                                 let scope = (init_scope, source_info);\n                                 this.in_scope(scope, lint_level, |this| {\n+                                    this.declare_bindings(\n+                                        visibility_scope,\n+                                        remainder_span,\n+                                        &pattern,\n+                                        ArmHasGuard(false),\n+                                        Some((None, initializer_span)),\n+                                    );\n                                     this.expr_into_pattern(block, pattern, init)\n                                 })\n                             }));\n                     } else {\n-                        scope = this.declare_bindings(\n-                            None, remainder_span, lint_level, &pattern,\n-                            ArmHasGuard(false), None);\n+                        let scope = (init_scope, source_info);\n+                        unpack!(this.in_scope(scope, lint_level, |this| {\n+                            this.declare_bindings(\n+                                visibility_scope,\n+                                remainder_span,\n+                                &pattern,\n+                                ArmHasGuard(false),\n+                                None,\n+                            );\n+                            block.unit()\n+                        }));\n \n                         debug!(\"ast_block_stmts: pattern={:?}\", pattern);\n                         this.visit_bindings(\n@@ -149,8 +157,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             })\n                     }\n \n-                    // Enter the source scope, after evaluating the initializer.\n-                    if let Some(source_scope) = scope {\n+                    // Enter the visibility scope, after evaluating the initializer.\n+                    if let Some(source_scope) = visibility_scope {\n                         this.source_scope = source_scope;\n                     }\n                 }"}, {"sha": "93a702dc44e25254f7f90387ad9a7fde57ea13a2", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -259,12 +259,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let scope = self.declare_bindings(\n                 None,\n                 body.span,\n-                LintLevel::Inherited,\n                 &arm.patterns[0],\n                 ArmHasGuard(arm.guard.is_some()),\n                 Some((Some(&scrutinee_place), scrutinee_span)),\n             );\n \n+            if let Some(source_scope) = scope {\n+                this.source_scope = source_scope;\n+            }\n+\n             for candidate in candidates {\n                 self.bind_and_guard_matched_candidate(\n                     candidate,\n@@ -275,9 +278,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 );\n             }\n \n-            if let Some(source_scope) = scope {\n-                self.source_scope = source_scope;\n-            }\n \n             unpack!(arm_block = self.into(destination, arm_block, body));\n \n@@ -489,33 +489,20 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         &mut self,\n         mut visibility_scope: Option<SourceScope>,\n         scope_span: Span,\n-        lint_level: LintLevel,\n         pattern: &Pattern<'tcx>,\n         has_guard: ArmHasGuard,\n         opt_match_place: Option<(Option<&Place<'tcx>>, Span)>,\n     ) -> Option<SourceScope> {\n-        assert!(\n-            !(visibility_scope.is_some() && lint_level.is_explicit()),\n-            \"can't have both a visibility and a lint scope at the same time\"\n-        );\n-        let mut scope = self.source_scope;\n         debug!(\"declare_bindings: pattern={:?}\", pattern);\n         self.visit_bindings(\n             &pattern,\n             UserTypeProjections::none(),\n             &mut |this, mutability, name, mode, var, span, ty, user_ty| {\n                 if visibility_scope.is_none() {\n-                    // If we have lints, create a new source scope\n-                    // that marks the lints for the locals. See the comment\n-                    // on the `source_info` field for why this is needed.\n-                    if lint_level.is_explicit() {\n-                        scope = this.new_source_scope(scope_span, lint_level, None);\n-                    }\n-                visibility_scope = Some(this.new_source_scope(scope_span,\n-                                                           LintLevel::Inherited,\n-                                                           None));\n+                    visibility_scope =\n+                        Some(this.new_source_scope(scope_span, LintLevel::Inherited, None));\n                 }\n-                let source_info = SourceInfo { span, scope };\n+                let source_info = SourceInfo { span, this.source_scope };\n                 let visibility_scope = visibility_scope.unwrap();\n                 this.declare_binding(\n                     source_info,"}, {"sha": "8cd4ac0ad3ade249dd0ee862a76a328fee2fd5d4", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -945,10 +945,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         self.var_indices.insert(var, LocalsForNode::One(local));\n                     }\n                     _ => {\n-                        scope = self.declare_bindings(scope, ast_body.span,\n-                                                      LintLevel::Inherited, &pattern,\n-                                                      matches::ArmHasGuard(false),\n-                                                      Some((Some(&place), span)));\n+                        scope = self.declare_bindings(\n+                            scope,\n+                            ast_body.span,\n+                            &pattern,\n+                            matches::ArmHasGuard(false),\n+                            Some((Some(&place), span)),\n+                        );\n                         unpack!(block = self.place_into_pattern(block, pattern, &place, false));\n                     }\n                 }"}, {"sha": "8e19913f4df26d30ab8611cef310842cce27677f", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -31,15 +31,6 @@ pub enum LintLevel {\n     Explicit(hir::HirId)\n }\n \n-impl LintLevel {\n-    pub fn is_explicit(self) -> bool {\n-        match self {\n-            LintLevel::Inherited => false,\n-            LintLevel::Explicit(_) => true\n-        }\n-    }\n-}\n-\n #[derive(Clone, Debug)]\n pub struct Block<'tcx> {\n     pub targeted_by_break: bool,\n@@ -311,6 +302,8 @@ pub struct Arm<'tcx> {\n     pub guard: Option<Guard<'tcx>>,\n     pub body: ExprRef<'tcx>,\n     pub lint_level: LintLevel,\n+    pub scope: region::Scope,\n+    pub span: Span,\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "ee6adfefe3e360b3a0ec00bd878d1fceb2de619e", "filename": "src/test/mir-opt/box_expr.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fbox_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbox_expr.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -22,13 +22,11 @@ impl Drop for S {\n // END RUST SOURCE\n // START rustc.main.ElaborateDrops.before.mir\n //     let mut _0: ();\n+//     let _1: std::boxed::Box<S>;\n //     let mut _2: std::boxed::Box<S>;\n //     let mut _3: ();\n //     let mut _4: std::boxed::Box<S>;\n //     scope 1 {\n-//         let _1: std::boxed::Box<S>;\n-//     }\n-//     scope 2 {\n //     }\n //     bb0: {\n //         StorageLive(_1);"}, {"sha": "0b678be2ab3197ea4f8c1b34b6204c546e16f7fa", "filename": "src/test/mir-opt/issue-41110.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fissue-41110.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-41110.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -29,27 +29,24 @@ impl S {\n // END RUST SOURCE\n // START rustc.main.ElaborateDrops.after.mir\n //    let mut _0: ();\n+//    let _1: ();\n //    let mut _2: S;\n //    let mut _3: S;\n //    let mut _4: S;\n //    let mut _5: bool;\n //    scope 1 {\n-//        let _1: ();\n-//    }\n-//    scope 2 {\n //    }\n //    ...\n //    bb0: {\n // END rustc.main.ElaborateDrops.after.mir\n // START rustc.test.ElaborateDrops.after.mir\n //    let mut _0: ();\n+//    let _1: S;\n //    let mut _3: ();\n //    let mut _4: S;\n //    let mut _5: S;\n //    let mut _6: bool;\n //    ...\n-//    let _1: S;\n-//    ...\n //    let mut _2: S;\n //    ...\n //    bb0: {"}, {"sha": "3910183dee789bc17dac1fd8e348bbee0e2c49e4", "filename": "src/test/mir-opt/issue-49232.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fissue-49232.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-49232.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -18,14 +18,12 @@ fn main() {\n // fn main() -> (){\n //     let mut _0: ();\n //     let mut _1: ();\n+//     let _2: i32;\n //     let mut _3: bool;\n //     let mut _4: !;\n //     let mut _5: ();\n //     let mut _6: &i32;\n //     scope 1 {\n-//         let _2: i32;\n-//     }\n-//     scope 2 {\n //     }\n //     bb0: {\n //         goto -> bb1;"}, {"sha": "da73cc96348f059e4c15e29ce839204b2b824ed4", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=af6a9a2c62ba2e7fe54f53884b94fcd2f9a9265b", "patch": "@@ -18,15 +18,13 @@ impl Drop for Droppy {\n // START rustc.main.EraseRegions.before.mir\n // fn main() -> () {\n //     let mut _0: ();\n+//     let mut _1: Packed;\n //     let mut _2: Aligned;\n //     let mut _3: Droppy;\n //     let mut _4: Aligned;\n //     let mut _5: Droppy;\n //     let mut _6: Aligned;\n //     scope 1 {\n-//         let mut _1: Packed;\n-//     }\n-//     scope 2 {\n //     }\n //\n //     bb0: {"}]}