{"sha": "34314caea39300276375f3cd948e09a37bec6873", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzE0Y2FlYTM5MzAwMjc2Mzc1ZjNjZDk0OGUwOWEzN2JlYzY4NzM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-23T23:15:08Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-24T16:16:55Z"}, "message": "Make find iterate instead of recurse", "tree": {"sha": "c58252a7abd37a39d3ecdaa5a6ab7fd215f0aa95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c58252a7abd37a39d3ecdaa5a6ab7fd215f0aa95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34314caea39300276375f3cd948e09a37bec6873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34314caea39300276375f3cd948e09a37bec6873", "html_url": "https://github.com/rust-lang/rust/commit/34314caea39300276375f3cd948e09a37bec6873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34314caea39300276375f3cd948e09a37bec6873/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27cc0db7a248308fc2634ac68d7608a20b4a1c09", "url": "https://api.github.com/repos/rust-lang/rust/commits/27cc0db7a248308fc2634ac68d7608a20b4a1c09", "html_url": "https://github.com/rust-lang/rust/commit/27cc0db7a248308fc2634ac68d7608a20b4a1c09"}], "stats": {"total": 27, "additions": 14, "deletions": 13}, "files": [{"sha": "7aaf44a8a890ee9e33ceddf0676191b285325018", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/34314caea39300276375f3cd948e09a37bec6873/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34314caea39300276375f3cd948e09a37bec6873/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=34314caea39300276375f3cd948e09a37bec6873", "patch": "@@ -241,21 +241,22 @@ impl MovePathLookup {\n     // unknown place, but will rather return the nearest available\n     // parent.\n     pub fn find(&self, place: &Place<'tcx>) -> LookupResult {\n-        match *place {\n-            Place::Base(PlaceBase::Local(local)) => LookupResult::Exact(self.locals[local]),\n-            Place::Base(PlaceBase::Static(..)) => LookupResult::Parent(None),\n-            Place::Projection(ref proj) => {\n-                match self.find(&proj.base) {\n-                    LookupResult::Exact(base_path) => {\n-                        match self.projections.get(&(base_path, proj.elem.lift())) {\n-                            Some(&subpath) => LookupResult::Exact(subpath),\n-                            None => LookupResult::Parent(Some(base_path))\n-                        }\n-                    }\n-                    inexact => inexact\n+        place.iterate(|place_base, place_projection| {\n+            let mut result = match place_base {\n+                PlaceBase::Local(local) => self.locals[*local],\n+                PlaceBase::Static(..) => return LookupResult::Parent(None),\n+            };\n+\n+            for proj in place_projection {\n+                if let Some(&subpath) = self.projections.get(&(result, proj.elem.lift())) {\n+                    result = subpath;\n+                } else {\n+                    return LookupResult::Parent(Some(result));\n                 }\n             }\n-        }\n+\n+            LookupResult::Exact(result)\n+        })\n     }\n \n     pub fn find_local(&self, local: Local) -> MovePathIndex {"}]}