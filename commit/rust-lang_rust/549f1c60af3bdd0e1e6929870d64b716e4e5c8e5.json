{"sha": "549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "node_id": "C_kwDOAAsO6NoAKDU0OWYxYzYwYWYzYmRkMGUxZTY5Mjk4NzBkNjRiNzE2ZTRlNWM4ZTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-01-30T04:10:59Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-21T00:51:56Z"}, "message": "Use `ThinVec` in `ast::ExprKind::Match`.", "tree": {"sha": "45bcea968b8a6ba36d4b059f032cd3a80244f63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45bcea968b8a6ba36d4b059f032cd3a80244f63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "html_url": "https://github.com/rust-lang/rust/commit/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "912b82500276bae6c1bbef2028b836edbf5ca9eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/912b82500276bae6c1bbef2028b836edbf5ca9eb", "html_url": "https://github.com/rust-lang/rust/commit/912b82500276bae6c1bbef2028b836edbf5ca9eb"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "de6a0b563ebb3d18da139e96353b07da9c9d9384", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -1414,7 +1414,7 @@ pub enum ExprKind {\n     /// `'label: loop { block }`\n     Loop(P<Block>, Option<Label>, Span),\n     /// A `match` block.\n-    Match(P<Expr>, Vec<Arm>),\n+    Match(P<Expr>, ThinVec<Arm>),\n     /// A closure (e.g., `move |a, b, c| a + b + c`).\n     Closure(Box<Closure>),\n     /// A block (`'label: { ... }`)."}, {"sha": "cfd36f030a19310c5c239ae789be61c64f29855b", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -71,7 +71,7 @@ pub fn cs_cmp(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>) -> Bl\n                 let eq_arm = cx.arm(span, cx.pat_path(span, equal_path.clone()), expr1);\n                 let neq_arm =\n                     cx.arm(span, cx.pat_ident(span, test_id), cx.expr_ident(span, test_id));\n-                cx.expr_match(span, expr2, vec![eq_arm, neq_arm])\n+                cx.expr_match(span, expr2, thin_vec![eq_arm, neq_arm])\n             }\n             CsFold::Fieldless => cx.expr_path(equal_path.clone()),\n         },"}, {"sha": "9f46247908d0df81e008d9ef010c207f92b29cb2", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -143,7 +143,7 @@ fn cs_partial_cmp(\n                         cx.arm(span, cx.pat_some(span, cx.pat_path(span, equal_path.clone())), expr1);\n                     let neq_arm =\n                         cx.arm(span, cx.pat_ident(span, test_id), cx.expr_ident(span, test_id));\n-                    cx.expr_match(span, expr2, vec![eq_arm, neq_arm])\n+                    cx.expr_match(span, expr2, thin_vec![eq_arm, neq_arm])\n                 }\n             }\n             CsFold::Fieldless => cx.expr_some(span, cx.expr_path(equal_path.clone())),"}, {"sha": "809f9838d20becd0965c226095302737ce40d2b2", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -234,7 +234,7 @@ fn show_fieldless_enum(\n             };\n             cx.arm(span, pat, cx.expr_str(span, v.ident.name))\n         })\n-        .collect::<Vec<_>>();\n+        .collect::<ThinVec<_>>();\n     let name = cx.expr_match(span, cx.expr_self(span), arms);\n     let fn_path_write_str = cx.std_path(&[sym::fmt, sym::Formatter, sym::write_str]);\n     BlockOrExpr::new_expr(cx.expr_call_global(span, fn_path_write_str, thin_vec![fmt, name]))"}, {"sha": "3921533c84a19562343aed2b4e70e3f07052c56b", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -123,7 +123,7 @@ fn decodable_substructure(\n         StaticEnum(_, fields) => {\n             let variant = Ident::new(sym::i, trait_span);\n \n-            let mut arms = Vec::with_capacity(fields.len() + 1);\n+            let mut arms = ThinVec::with_capacity(fields.len() + 1);\n             let mut variants = ThinVec::with_capacity(fields.len());\n \n             let fn_read_enum_variant_arg_path: Vec<_> ="}, {"sha": "1f819beeb5d7d25643a66e717f18b670c4db7369", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -1247,7 +1247,7 @@ impl<'a> MethodDef<'a> {\n         // (Variant2, Variant2, ...) => Body2\n         // ...\n         // where each tuple has length = selflike_args.len()\n-        let mut match_arms: Vec<ast::Arm> = variants\n+        let mut match_arms: ThinVec<ast::Arm> = variants\n             .iter()\n             .enumerate()\n             .filter(|&(_, v)| !(unify_fieldless_variants && v.data.fields().is_empty()))"}, {"sha": "eaecce91b8a2f89496ee561b14933cf7b0410a92", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -446,7 +446,7 @@ impl<'a> ExtCtxt<'a> {\n         let err_arm = self.arm(sp, err_pat, err_expr);\n \n         // `match head { Ok() => ..., Err() => ... }`\n-        self.expr_match(sp, head, vec![ok_arm, err_arm])\n+        self.expr_match(sp, head, thin_vec![ok_arm, err_arm])\n     }\n \n     pub fn pat(&self, span: Span, kind: PatKind) -> P<ast::Pat> {\n@@ -516,7 +516,7 @@ impl<'a> ExtCtxt<'a> {\n         self.arm(span, self.pat_wild(span), self.expr_unreachable(span))\n     }\n \n-    pub fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: Vec<ast::Arm>) -> P<Expr> {\n+    pub fn expr_match(&self, span: Span, arg: P<ast::Expr>, arms: ThinVec<ast::Arm>) -> P<Expr> {\n         self.expr(span, ast::ExprKind::Match(arg, arms))\n     }\n "}, {"sha": "c92379754bffca99abdcec74f935577976e1a726", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/549f1c60af3bdd0e1e6929870d64b716e4e5c8e5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=549f1c60af3bdd0e1e6929870d64b716e4e5c8e5", "patch": "@@ -2566,7 +2566,7 @@ impl<'a> Parser<'a> {\n         }\n         let attrs = self.parse_inner_attributes()?;\n \n-        let mut arms: Vec<Arm> = Vec::new();\n+        let mut arms = ThinVec::new();\n         while self.token != token::CloseDelim(Delimiter::Brace) {\n             match self.parse_arm() {\n                 Ok(arm) => arms.push(arm),"}]}