{"sha": "2cfcc0c65c4642400305823994f0c6b021c4b53a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZmNjMGM2NWM0NjQyNDAwMzA1ODIzOTk0ZjBjNmIwMjFjNGI1M2E=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-07-30T20:14:15Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-07-31T15:37:42Z"}, "message": "Fix regionck failure when converting Index to IndexMut", "tree": {"sha": "0e0ab27e0eab4baeb6e053002586be0a269c0f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e0ab27e0eab4baeb6e053002586be0a269c0f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cfcc0c65c4642400305823994f0c6b021c4b53a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cfcc0c65c4642400305823994f0c6b021c4b53a", "html_url": "https://github.com/rust-lang/rust/commit/2cfcc0c65c4642400305823994f0c6b021c4b53a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cfcc0c65c4642400305823994f0c6b021c4b53a/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b09c37ddc240e25748e53d7a8f81f252def6dee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b09c37ddc240e25748e53d7a8f81f252def6dee", "html_url": "https://github.com/rust-lang/rust/commit/6b09c37ddc240e25748e53d7a8f81f252def6dee"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "cb681c7b8f83c690b820279d1c14aca0ba5d9e1e", "filename": "src/librustc_typeck/check/place_op.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2cfcc0c65c4642400305823994f0c6b021c4b53a/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cfcc0c65c4642400305823994f0c6b021c4b53a/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fplace_op.rs?ref=2cfcc0c65c4642400305823994f0c6b021c4b53a", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_trait_selection::autoderef::Autoderef;\n+use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -245,19 +246,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             match expr.kind {\n-                hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    // We need to get the final type in case dereferences were needed for the trait\n-                    // to apply (#72002).\n-                    let index_expr_ty = self.typeck_results.borrow().expr_ty_adjusted(index_expr);\n-                    self.convert_place_op_to_mutable(\n-                        PlaceOp::Index,\n-                        expr,\n-                        base_expr,\n-                        &[index_expr_ty],\n-                    );\n+                hir::ExprKind::Index(ref base_expr, ..) => {\n+                    self.convert_place_op_to_mutable(PlaceOp::Index, expr, base_expr);\n                 }\n                 hir::ExprKind::Unary(hir::UnOp::UnDeref, ref base_expr) => {\n-                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr, &[]);\n+                    self.convert_place_op_to_mutable(PlaceOp::Deref, expr, base_expr);\n                 }\n                 _ => {}\n             }\n@@ -269,9 +262,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         op: PlaceOp,\n         expr: &hir::Expr<'_>,\n         base_expr: &hir::Expr<'_>,\n-        arg_tys: &[Ty<'tcx>],\n     ) {\n-        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?}, {:?})\", op, expr, base_expr, arg_tys);\n+        debug!(\"convert_place_op_to_mutable({:?}, {:?}, {:?})\", op, expr, base_expr);\n         if !self.typeck_results.borrow().is_method_call(expr) {\n             debug!(\"convert_place_op_to_mutable - builtin, nothing to do\");\n             return;\n@@ -286,6 +278,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .expect(\"place op takes something that is not a ref\")\n             .ty;\n \n+        let arg_ty = match op {\n+            PlaceOp::Deref => None,\n+            PlaceOp::Index => {\n+                // We would need to recover the `T` used when we resolve `<_ as Index<T>>::index`\n+                // in try_index_step. This is the subst at index 1.\n+                //\n+                // Note: we should *not* use `expr_ty` of index_expr here because autoderef\n+                // during coercions can cause type of index_expr to differ from `T` (#72002).\n+                // We also could not use `expr_ty_adjusted` of index_expr because reborrowing\n+                // during coercions can also cause type of index_expr to differ from `T`,\n+                // which can potentially cause regionck failure (#74933).\n+                Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n+            }\n+        };\n+        let arg_tys = match arg_ty {\n+            None => &[],\n+            Some(ref ty) => slice::from_ref(ty),\n+        };\n+\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}]}