{"sha": "312ac83caf5cd383f10177fbade646ef02a3f6ef", "node_id": "C_kwDOAAsO6NoAKDMxMmFjODNjYWY1Y2QzODNmMTAxNzdmYmFkZTY0NmVmMDJhM2Y2ZWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T18:42:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-20T18:42:48Z"}, "message": "Auto merge of #12599 - flodiebold:no-test-deps, r=flodiebold\n\nfix: Only apply `cfg(test)` for local crates\n\nDon't analyze dependencies with `test`; this should fix various cases where crates use `cfg(not(test))` and so we didn't find things.\n\n\"Local\" here currently means anything that's not from the registry, so anything inside the workspace, but also path dependencies. So this isn't perfect, and users might still need to use `rust-analyzer.cargo.unsetTest` for these in some cases.", "tree": {"sha": "9f7f2daabfaf35c10a4f8924666a5067cec8c51d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f7f2daabfaf35c10a4f8924666a5067cec8c51d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/312ac83caf5cd383f10177fbade646ef02a3f6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/312ac83caf5cd383f10177fbade646ef02a3f6ef", "html_url": "https://github.com/rust-lang/rust/commit/312ac83caf5cd383f10177fbade646ef02a3f6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/312ac83caf5cd383f10177fbade646ef02a3f6ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "439a513efb77b956ed318cef6a4af421054d29e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/439a513efb77b956ed318cef6a4af421054d29e8", "html_url": "https://github.com/rust-lang/rust/commit/439a513efb77b956ed318cef6a4af421054d29e8"}, {"sha": "07d78b67cb5fb0f67a2b06677d0003f5e9ba384f", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d78b67cb5fb0f67a2b06677d0003f5e9ba384f", "html_url": "https://github.com/rust-lang/rust/commit/07d78b67cb5fb0f67a2b06677d0003f5e9ba384f"}], "stats": {"total": 43, "additions": 19, "deletions": 24}, "files": [{"sha": "6f883b9e8465b6126e33e26b1059c749f6e06a2f", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/312ac83caf5cd383f10177fbade646ef02a3f6ef/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312ac83caf5cd383f10177fbade646ef02a3f6ef/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=312ac83caf5cd383f10177fbade646ef02a3f6ef", "patch": "@@ -1041,7 +1041,6 @@ fn cargo_hello_world_project_model() {\n                                 \"debug_assertions\",\n                                 \"feature=default\",\n                                 \"feature=std\",\n-                                \"test\",\n                             ],\n                         ),\n                         potential_cfg_options: CfgOptions(\n@@ -1054,7 +1053,6 @@ fn cargo_hello_world_project_model() {\n                                 \"feature=rustc-dep-of-std\",\n                                 \"feature=std\",\n                                 \"feature=use_std\",\n-                                \"test\",\n                             ],\n                         ),\n                         env: Env {"}, {"sha": "6aefb84db8ad20e2b3e3e6bb40dc71c86987e01c", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/312ac83caf5cd383f10177fbade646ef02a3f6ef/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/312ac83caf5cd383f10177fbade646ef02a3f6ef/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=312ac83caf5cd383f10177fbade646ef02a3f6ef", "patch": "@@ -541,23 +541,25 @@ fn cargo_to_crate_graph(\n \n     let mut pkg_to_lib_crate = FxHashMap::default();\n \n-    // Add test cfg for non-sysroot crates\n-    cfg_options.insert_atom(\"test\".into());\n     cfg_options.insert_atom(\"debug_assertions\".into());\n \n     let mut pkg_crates = FxHashMap::default();\n     // Does any crate signal to rust-analyzer that they need the rustc_private crates?\n     let mut has_private = false;\n     // Next, create crates for each package, target pair\n     for pkg in cargo.packages() {\n-        let mut cfg_options = &cfg_options;\n-        let mut replaced_cfg_options;\n+        let mut cfg_options = cfg_options.clone();\n \n         let overrides = match override_cfg {\n             CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n             CfgOverrides::Selective(cfg_overrides) => cfg_overrides.get(&cargo[pkg].name),\n         };\n \n+        // Add test cfg for local crates\n+        if cargo[pkg].is_local {\n+            cfg_options.insert_atom(\"test\".into());\n+        }\n+\n         if let Some(overrides) = overrides {\n             // FIXME: this is sort of a hack to deal with #![cfg(not(test))] vanishing such as seen\n             // in ed25519_dalek (#7243), and libcore (#9203) (although you only hit that one while\n@@ -566,9 +568,7 @@ fn cargo_to_crate_graph(\n             // A more ideal solution might be to reanalyze crates based on where the cursor is and\n             // figure out the set of cfgs that would have to apply to make it active.\n \n-            replaced_cfg_options = cfg_options.clone();\n-            replaced_cfg_options.apply_diff(overrides.clone());\n-            cfg_options = &replaced_cfg_options;\n+            cfg_options.apply_diff(overrides.clone());\n         };\n \n         has_private |= cargo[pkg].metadata.rustc_private;\n@@ -588,7 +588,7 @@ fn cargo_to_crate_graph(\n                     &mut crate_graph,\n                     &cargo[pkg],\n                     build_scripts.get_output(pkg),\n-                    cfg_options,\n+                    cfg_options.clone(),\n                     &mut |path| load_proc_macro(&cargo[tgt].name, path),\n                     file_id,\n                     &cargo[tgt].name,\n@@ -753,8 +753,7 @@ fn handle_rustc_crates(\n                 queue.push_back(dep.pkg);\n             }\n \n-            let mut cfg_options = cfg_options;\n-            let mut replaced_cfg_options;\n+            let mut cfg_options = cfg_options.clone();\n \n             let overrides = match override_cfg {\n                 CfgOverrides::Wildcard(cfg_diff) => Some(cfg_diff),\n@@ -771,9 +770,7 @@ fn handle_rustc_crates(\n                 // A more ideal solution might be to reanalyze crates based on where the cursor is and\n                 // figure out the set of cfgs that would have to apply to make it active.\n \n-                replaced_cfg_options = cfg_options.clone();\n-                replaced_cfg_options.apply_diff(overrides.clone());\n-                cfg_options = &replaced_cfg_options;\n+                cfg_options.apply_diff(overrides.clone());\n             };\n \n             for &tgt in rustc_workspace[pkg].targets.iter() {\n@@ -785,7 +782,7 @@ fn handle_rustc_crates(\n                         crate_graph,\n                         &rustc_workspace[pkg],\n                         build_scripts.get_output(pkg),\n-                        cfg_options,\n+                        cfg_options.clone(),\n                         &mut |path| load_proc_macro(&rustc_workspace[tgt].name, path),\n                         file_id,\n                         &rustc_workspace[tgt].name,\n@@ -840,15 +837,21 @@ fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n-    cfg_options: &CfgOptions,\n+    cfg_options: CfgOptions,\n     load_proc_macro: &mut dyn FnMut(&AbsPath) -> ProcMacroLoadResult,\n     file_id: FileId,\n     cargo_name: &str,\n     is_proc_macro: bool,\n ) -> CrateId {\n     let edition = pkg.edition;\n+    let mut potential_cfg_options = cfg_options.clone();\n+    potential_cfg_options.extend(\n+        pkg.features\n+            .iter()\n+            .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n+    );\n     let cfg_options = {\n-        let mut opts = cfg_options.clone();\n+        let mut opts = cfg_options;\n         for feature in pkg.active_features.iter() {\n             opts.insert_key_value(\"feature\".into(), feature.into());\n         }\n@@ -873,12 +876,6 @@ fn add_target_crate_root(\n     };\n \n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n-    let mut potential_cfg_options = cfg_options.clone();\n-    potential_cfg_options.extend(\n-        pkg.features\n-            .iter()\n-            .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n-    );\n     crate_graph.add_crate_root(\n         file_id,\n         edition,"}]}