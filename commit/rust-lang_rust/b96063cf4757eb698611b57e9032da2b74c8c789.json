{"sha": "b96063cf4757eb698611b57e9032da2b74c8c789", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5NjA2M2NmNDc1N2ViNjk4NjExYjU3ZTkwMzJkYTJiNzRjOGM3ODk=", "commit": {"author": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-01-19T03:14:38Z"}, "committer": {"name": "dylni", "email": "46035563+dylni@users.noreply.github.com", "date": "2021-01-19T03:14:38Z"}, "message": "Fix soundness issue for `replace_range` and `range`", "tree": {"sha": "7461d147a687279685cd5fa870577887b25955c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7461d147a687279685cd5fa870577887b25955c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b96063cf4757eb698611b57e9032da2b74c8c789", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b96063cf4757eb698611b57e9032da2b74c8c789", "html_url": "https://github.com/rust-lang/rust/commit/b96063cf4757eb698611b57e9032da2b74c8c789", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b96063cf4757eb698611b57e9032da2b74c8c789/comments", "author": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dylni", "id": 46035563, "node_id": "MDQ6VXNlcjQ2MDM1NTYz", "avatar_url": "https://avatars.githubusercontent.com/u/46035563?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dylni", "html_url": "https://github.com/dylni", "followers_url": "https://api.github.com/users/dylni/followers", "following_url": "https://api.github.com/users/dylni/following{/other_user}", "gists_url": "https://api.github.com/users/dylni/gists{/gist_id}", "starred_url": "https://api.github.com/users/dylni/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dylni/subscriptions", "organizations_url": "https://api.github.com/users/dylni/orgs", "repos_url": "https://api.github.com/users/dylni/repos", "events_url": "https://api.github.com/users/dylni/events{/privacy}", "received_events_url": "https://api.github.com/users/dylni/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d98d2f57d9b98325ff075c343d2c7695b66dfa7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d98d2f57d9b98325ff075c343d2c7695b66dfa7d", "html_url": "https://github.com/rust-lang/rust/commit/d98d2f57d9b98325ff075c343d2c7695b66dfa7d"}], "stats": {"total": 76, "additions": 70, "deletions": 6}, "files": [{"sha": "17b4689e4a0ee06c5e3d456cda910812a9b56cda", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=b96063cf4757eb698611b57e9032da2b74c8c789", "patch": "@@ -25,7 +25,12 @@ where\n     K: Borrow<Q>,\n     R: RangeBounds<Q>,\n {\n-    match (range.start_bound(), range.end_bound()) {\n+    // WARNING: Inlining these variables would be unsound (#81138)\n+    // We assume the bounds reported by `range` remain the same, but\n+    // an adversarial implementation could change between calls\n+    let start = range.start_bound();\n+    let end = range.end_bound();\n+    match (start, end) {\n         (Excluded(s), Excluded(e)) if s == e => {\n             panic!(\"range start and end are equal and excluded in BTreeMap\")\n         }\n@@ -41,7 +46,8 @@ where\n     let mut max_found = false;\n \n     loop {\n-        let front = match (min_found, range.start_bound()) {\n+        // Using `range` again would be unsound (#81138)\n+        let front = match (min_found, start) {\n             (false, Included(key)) => match min_node.search_node(key) {\n                 SearchResult::Found(kv) => {\n                     min_found = true;\n@@ -61,7 +67,8 @@ where\n             (_, Unbounded) => min_node.first_edge(),\n         };\n \n-        let back = match (max_found, range.end_bound()) {\n+        // Using `range` again would be unsound (#81138)\n+        let back = match (max_found, end) {\n             (false, Included(key)) => match max_node.search_node(key) {\n                 SearchResult::Found(kv) => {\n                     max_found = true;"}, {"sha": "6f2a497598dd7e80e4d9231d5ed22c111d601bd6", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=b96063cf4757eb698611b57e9032da2b74c8c789", "patch": "@@ -1553,18 +1553,25 @@ impl String {\n         // Replace_range does not have the memory safety issues of a vector Splice.\n         // of the vector version. The data is just plain bytes.\n \n-        match range.start_bound() {\n+        // WARNING: Inlining this variable would be unsound (#81138)\n+        let start = range.start_bound();\n+        match start {\n             Included(&n) => assert!(self.is_char_boundary(n)),\n             Excluded(&n) => assert!(self.is_char_boundary(n + 1)),\n             Unbounded => {}\n         };\n-        match range.end_bound() {\n+        // WARNING: Inlining this variable would be unsound (#81138)\n+        let end = range.end_bound();\n+        match end {\n             Included(&n) => assert!(self.is_char_boundary(n + 1)),\n             Excluded(&n) => assert!(self.is_char_boundary(n)),\n             Unbounded => {}\n         };\n \n-        unsafe { self.as_mut_vec() }.splice(range, replace_with.bytes());\n+        // Using `range` again would be unsound (#81138)\n+        // We assume the bounds reported by `range` remain the same, but\n+        // an adversarial implementation could change between calls\n+        unsafe { self.as_mut_vec() }.splice((start, end), replace_with.bytes());\n     }\n \n     /// Converts this `String` into a [`Box`]`<`[`str`]`>`."}, {"sha": "f3d74e0514d299e9cd6d6cfa8a69ad58b0bb6126", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b96063cf4757eb698611b57e9032da2b74c8c789/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=b96063cf4757eb698611b57e9032da2b74c8c789", "patch": "@@ -1,7 +1,11 @@\n use std::borrow::Cow;\n+use std::cell::Cell;\n use std::collections::TryReserveError::*;\n+use std::ops::Bound;\n use std::ops::Bound::*;\n+use std::ops::RangeBounds;\n use std::panic;\n+use std::str;\n \n pub trait IntoCow<'a, B: ?Sized>\n where\n@@ -561,6 +565,52 @@ fn test_replace_range_unbounded() {\n     assert_eq!(s, \"\");\n }\n \n+#[test]\n+fn test_replace_range_evil_start_bound() {\n+    struct EvilRange(Cell<bool>);\n+\n+    impl RangeBounds<usize> for EvilRange {\n+        fn start_bound(&self) -> Bound<&usize> {\n+            Bound::Included(if self.0.get() {\n+                &1\n+            } else {\n+                self.0.set(true);\n+                &0\n+            })\n+        }\n+        fn end_bound(&self) -> Bound<&usize> {\n+            Bound::Unbounded\n+        }\n+    }\n+\n+    let mut s = String::from(\"\ud83e\udd80\");\n+    s.replace_range(EvilRange(Cell::new(false)), \"\");\n+    assert_eq!(Ok(\"\"), str::from_utf8(s.as_bytes()));\n+}\n+\n+#[test]\n+fn test_replace_range_evil_end_bound() {\n+    struct EvilRange(Cell<bool>);\n+\n+    impl RangeBounds<usize> for EvilRange {\n+        fn start_bound(&self) -> Bound<&usize> {\n+            Bound::Included(&0)\n+        }\n+        fn end_bound(&self) -> Bound<&usize> {\n+            Bound::Excluded(if self.0.get() {\n+                &3\n+            } else {\n+                self.0.set(true);\n+                &4\n+            })\n+        }\n+    }\n+\n+    let mut s = String::from(\"\ud83e\udd80\");\n+    s.replace_range(EvilRange(Cell::new(false)), \"\");\n+    assert_eq!(Ok(\"\"), str::from_utf8(s.as_bytes()));\n+}\n+\n #[test]\n fn test_extend_ref() {\n     let mut a = \"foo\".to_string();"}]}