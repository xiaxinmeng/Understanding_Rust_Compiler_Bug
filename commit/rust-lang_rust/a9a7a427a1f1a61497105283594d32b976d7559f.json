{"sha": "a9a7a427a1f1a61497105283594d32b976d7559f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YTdhNDI3YTFmMWE2MTQ5NzEwNTI4MzU5NGQzMmI5NzZkNzU1OWY=", "commit": {"author": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-12-24T16:08:28Z"}, "committer": {"name": "Luca Bruno", "email": "lucab@debian.org", "date": "2013-12-27T08:49:11Z"}, "message": "std: uniform modules titles for doc\n\nThis commit uniforms the short title of modules provided by libstd,\nin order to make their roles more explicit when glancing at the index.\n\nSigned-off-by: Luca Bruno <lucab@debian.org>", "tree": {"sha": "2edb2b9188537bea65667fdff216a3d6d417c268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edb2b9188537bea65667fdff216a3d6d417c268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9a7a427a1f1a61497105283594d32b976d7559f", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a7a427a1f1a61497105283594d32b976d7559f", "html_url": "https://github.com/rust-lang/rust/commit/a9a7a427a1f1a61497105283594d32b976d7559f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9a7a427a1f1a61497105283594d32b976d7559f/comments", "author": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucab", "id": 98086, "node_id": "MDQ6VXNlcjk4MDg2", "avatar_url": "https://avatars.githubusercontent.com/u/98086?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucab", "html_url": "https://github.com/lucab", "followers_url": "https://api.github.com/users/lucab/followers", "following_url": "https://api.github.com/users/lucab/following{/other_user}", "gists_url": "https://api.github.com/users/lucab/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucab/subscriptions", "organizations_url": "https://api.github.com/users/lucab/orgs", "repos_url": "https://api.github.com/users/lucab/repos", "events_url": "https://api.github.com/users/lucab/events{/privacy}", "received_events_url": "https://api.github.com/users/lucab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00d87e0d8198ffb268251b5af2eb2ce19249c7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/00d87e0d8198ffb268251b5af2eb2ce19249c7f8", "html_url": "https://github.com/rust-lang/rust/commit/00d87e0d8198ffb268251b5af2eb2ce19249c7f8"}], "stats": {"total": 92, "additions": 50, "deletions": 42}, "files": [{"sha": "814cf3287717b6985a315084560c9cb6edc37f0a", "filename": "src/libstd/any.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Traits for dynamic typing of any type (through runtime reflection)\n+//!\n //! This module implements the `Any` trait, which enables dynamic typing\n //! of any type, through runtime reflection.\n //!"}, {"sha": "97f0a6a9d8af8d90c7bb428d5909adad569c3396", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations on ASCII strings and characters.\n+//! Operations on ASCII strings and characters\n \n use to_str::{ToStr,IntoStr};\n use str;"}, {"sha": "fd8b88417e0eb3c489818146f2ee6747656733a5", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Managed vectors\n+//! Operations on managed vectors (`@[T]` type)\n \n use clone::Clone;\n use container::Container;"}, {"sha": "923aacf352bc0469ca83cf060a9008e833f39ef9", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The `bool` module contains useful code to help work with boolean values.\n+//! Operations on boolean values (`bool` type)\n //!\n //! A quick summary:\n //!"}, {"sha": "4e9c72de61887580623f07b508e1235b2f693ffa", "filename": "src/libstd/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Utilities for manipulating the char type\n+//! Unicode characters manipulation (`char` type)\n \n use cast::transmute;\n use option::{None, Option, Some};"}, {"sha": "b383c9edf36d30147cf6620be59f78aba84112c2", "filename": "src/libstd/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fclone.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*! The Clone trait for types that cannot be \"implicitly copied\"\n+/*! The `Clone` trait for types that cannot be 'implicitly copied'\n \n In Rust, some simple types are \"implicitly copyable\" and when you\n assign them or pass them as arguments, the receiver will get a copy,"}, {"sha": "5ff3b6ed9c45f09646b4d7d3c85b2fe4f0d5317b", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Rust Communication Primitives\n+//! Communication primitives for concurrent tasks (`Chan` and `Port` types)\n //!\n //! Rust makes it very difficult to share data among tasks to prevent race\n //! conditions and to improve parallelism, but there is often a need for"}, {"sha": "326b9fa3d33216b0c701ebf7cf3c19953a1693e3", "filename": "src/libstd/container.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcontainer.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Container traits\n+//! Traits for generic containers (including `Map` and `Set`)\n \n use option::Option;\n "}, {"sha": "aaba23c683bca135484e78c3d7c41e02bb6fae4d", "filename": "src/libstd/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdefault.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The Default trait\n+//! The `Default` trait for types which may have meaningful default values\n \n /// A trait that types which have a useful default value should implement.\n pub trait Default {"}, {"sha": "d07006aa6de7548c09f162e53b9da94bbe196e50", "filename": "src/libstd/either.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Feither.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A type that represents one of two alternatives\n+//! Representing values with two possibilities (`Either` type)\n \n #[allow(missing_doc)];\n "}, {"sha": "cd9c0f5d2b77cac5c18574c26c3d04db45e3b042", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-The Formatting Module\n+Utilities for formatting and printing strings\n \n This module contains the runtime support for the `format!` syntax extension.\n This macro is implemented in the compiler to emit calls to this module in order"}, {"sha": "289a5f11c4f618fa470724e48e49310a6c237e77", "filename": "src/libstd/from_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ffrom_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ffrom_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffrom_str.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The trait for types that can be created from strings\n+//! The `FromStr` trait for types that can be created from strings\n \n use option::Option;\n "}, {"sha": "d6d95bf4866041f6b05de468e34ca33ca5d59cc6", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An unordered map and set type implemented as hash tables\n+//! Unordered containers, implemented as hash-tables (`HashSet` and `HashMap` types)\n //!\n //! The tables use a keyed hash with new random keys generated for each container, so the ordering\n //! of a set of keys in a hash table is randomized."}, {"sha": "462a0f1b0c8a4eb50a970310efa94820e1ac97f4", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*!\n-The kind traits\n+Primitive traits representing basic 'kinds' of types\n \n Rust types can be classified in various useful ways according to\n intrinsic properties of the type. These classifications, often called"}, {"sha": "d1b812ae36567a6bc7736ea79b68b9e4726d6efe", "filename": "src/libstd/logging.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Flogging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Flogging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flogging.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-Logging\n+Utilities for program-wide and customizable logging\n \n This module is used by the compiler when emitting output for the logging family\n of macros. The methods of this module shouldn't necessarily be used directly,"}, {"sha": "a91dee7fa501c9e07f4fe3bab260ba8e79970ce4", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -12,6 +12,8 @@\n #[allow(non_uppercase_statics)];\n #[allow(dead_code)];\n \n+//! Bindings for the C math library (for basic mathematic functions)\n+\n // function names are almost identical to C's libmath, a few have been\n // renamed, grep for \"rename:\"\n "}, {"sha": "43b0235c5f45aa7c91f4f5204cd99e1ec5684f52", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `f32`\n+//! Operations and constants for 32-bits floats (`f32` type)\n #[allow(missing_doc)];\n \n use prelude::*;"}, {"sha": "c2d19d412154256b4ccefbd21327c3f049ebf89e", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `f64`\n+//! Operations and constants for 64-bits floats (`f64` type)\n \n #[allow(missing_doc)];\n "}, {"sha": "5f431dfdf04272730bb9cc200167dc94b3c298ef", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `i16`\n+//! Operations and constants for signed 16-bits integers (`i16` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "8bb03344923def2900b8cc9154d9f538b353347c", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `i32`\n+//! Operations and constants for signed 32-bits integers (`i32` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "891043ad5f82d5e6f74b258a9be09f5107d594e9", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `i64`\n+//! Operations and constants for signed 64-bits integers (`i64` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "fd123ec57cc743557f8a1ad075251d014d0b1bdd", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `i8`\n+//! Operations and constants for signed 8-bits integers (`i8` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "123555e4a63d86f2a5306ee26152d70de68ff2bd", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `int`\n+//! Operations and constants for architecture-sized signed integers (`int` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "8dbec0f63c6017017d713891af2d45af2f89afe3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Numeric traits and functions for generic mathematics.\n+//! Numeric traits and functions for generic mathematics\n //!\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n //! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`."}, {"sha": "7e4145fc723db5e42cd84ca8c3d343237d50d1e3", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `u16`\n+//! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "34c2a892d56b76d9ecb0c96ac3c6a6cd3d5908b8", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `u32`\n+//! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "c307b038627f99f1c8673ce7aedbcb4a7e8ffb5b", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `u64`\n+//! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "06bda72c5fe6d8288dfac821b6aef5156084cf7a", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `u8`\n+//! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "a752cd938ba0de30cf25aae485a1538bd81079bd", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations and constants for `uint`\n+//! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n #[allow(non_uppercase_statics)];\n "}, {"sha": "fbefce71e88a6090cbaf4b3564ecab53a0286fc8", "filename": "src/libstd/ops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fops.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -13,8 +13,10 @@\n \n /*!\n  *\n- * Traits for the built-in operators. Implementing these traits allows you to get\n- * an effect similar to overloading operators.\n+ * Traits representing built-in operators, useful for overloading\n+ *\n+ * Implementing these traits allows you to get an effect similar to\n+ * overloading operators.\n  *\n  * The values for the right hand side of an operator are automatically\n  * borrowed, so `a + b` is sugar for `a.add(&b)`."}, {"sha": "4e2134d59e340f036ffa542090f48c03db7bb767", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Operations on the ubiquitous `Option` type.\n+//! Optionally nullable values (`Option` type)\n //!\n //! Type `Option` represents an optional value.\n //!"}, {"sha": "80803db6573665020e65f0ab480587443987a9e1", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,6 +10,8 @@\n \n /*!\n \n+The standard module imported by default into all Rust modules\n+\n Many programming languages have a 'prelude': a particular subset of the\n libraries that come with the language. Every program imports the prelude by\n default."}, {"sha": "72fe475c31246bcf3e45ac88bd6ff15075f5b0b3", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*!\n-Random number generation.\n+Utilities for random number generation\n \n The key functions are `random()` and `Rng::gen()`. These are polymorphic\n and so can be used to generate any type that implements `Rand`. Type inference"}, {"sha": "9158e8cdb899c9db81db6660079bd99b611ae5fd", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*! Task-local reference counted boxes\n+/*! Task-local reference-counted boxes (`Rc` type)\n \n The `Rc` type provides shared ownership of an immutable value. Destruction is deterministic, and\n will occur as soon as the last owner is gone. It is marked as non-sendable because it avoids the"}, {"sha": "35c8a1abe6fc0896d2ba1e3f9b94a8912cf8a291", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! A type representing either success or failure\n+//! Signaling success or failure states (`Result` type)\n \n use clone::Clone;\n use cmp::Eq;"}, {"sha": "9bd804f7babe82edfb4b6182242bcb484c67d76b", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-/*! The Rust Runtime, including the task scheduler and I/O\n+/*! Runtime services, including the task scheduler and I/O dispatcher\n \n The `rt` module provides the private runtime infrastructure necessary\n to support core language features like the exchange and local heap,"}, {"sha": "ef58a648104071c5fd3dc5ec8c2ada0477ce0e80", "filename": "src/libstd/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frun.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Process spawning.\n+//! Utilities for spawning and managing processes\n \n #[allow(missing_doc)];\n "}, {"sha": "f10818b052df1f4b19cef13efcc67d978db84364", "filename": "src/libstd/send_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fsend_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fsend_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsend_str.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! `SendStr` definition and trait implementations\n+//! The `SendStr` trait for optionally static strings\n \n use clone::{Clone, DeepClone};\n use cmp::{Eq, TotalEq, Ord, TotalOrd, Equiv};"}, {"sha": "8e6d8523f779b20035a66bd904a7e2228e95caa4", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-String manipulation\n+Unicode string manipulation (`str` type)\n \n # Basic Usage\n "}, {"sha": "bc45b9e3c4a6af9f4384995153bba0436181c8bb", "filename": "src/libstd/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n /*!\n- * Task management.\n+ * Utilities for managing and scheduling tasks\n  *\n  * An executing Rust program consists of a tree of tasks, each with their own\n  * stack, and sole ownership of their allocated heap data. Tasks communicate"}, {"sha": "9de812ed3856a6f856fde86b5f93308f06430912", "filename": "src/libstd/to_bytes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fto_bytes.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-The `ToBytes` and `IterBytes` traits\n+The `ToBytes` and `IterBytes` traits for converting to raw bytes\n \n */\n "}, {"sha": "4f3f253d5e24dcac7687544f42723cb8d1e814cf", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! An ordered map and set for integer keys implemented as a radix trie\n+//! Ordered containers with integer keys, implemented as radix tries (`TrieSet` and `TrieMap` types)\n \n use prelude::*;\n use uint;"}, {"sha": "d12d61ed46c88a868f27fa000c2e9e7193d3840c", "filename": "src/libstd/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Futil.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Miscellaneous helpers for common patterns.\n+//! Miscellaneous helpers for common patterns\n \n use cast;\n use ptr;"}, {"sha": "9662a61081037bb1f7d4bc2ed9944f0392ecf7c1", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9a7a427a1f1a61497105283594d32b976d7559f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=a9a7a427a1f1a61497105283594d32b976d7559f", "patch": "@@ -10,7 +10,7 @@\n \n /*!\n \n-Vector manipulation\n+Utilities for vector manipulation\n \n The `vec` module contains useful code to help work with vector values.\n Vectors are Rust's list type. Vectors contain zero or more values of"}]}