{"sha": "76a178098d0ff5d1266f9c601958255cdfd86f4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2YTE3ODA5OGQwZmY1ZDEyNjZmOWM2MDE5NTgyNTVjZGZkODZmNGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T13:57:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-06-16T13:57:53Z"}, "message": "Refactor drop codegen", "tree": {"sha": "04b10f084e4ac56f5e189cf1230ffa7214503843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b10f084e4ac56f5e189cf1230ffa7214503843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76a178098d0ff5d1266f9c601958255cdfd86f4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76a178098d0ff5d1266f9c601958255cdfd86f4e", "html_url": "https://github.com/rust-lang/rust/commit/76a178098d0ff5d1266f9c601958255cdfd86f4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76a178098d0ff5d1266f9c601958255cdfd86f4e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8c5e10f266b45ecfbb603c165aca61144008c17", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8c5e10f266b45ecfbb603c165aca61144008c17", "html_url": "https://github.com/rust-lang/rust/commit/f8c5e10f266b45ecfbb603c165aca61144008c17"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "7543d16e25faa95a56924927822d3597ccf58586", "filename": "src/abi.rs", "status": "modified", "additions": 42, "deletions": 13, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/76a178098d0ff5d1266f9c601958255cdfd86f4e/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a178098d0ff5d1266f9c601958255cdfd86f4e/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=76a178098d0ff5d1266f9c601958255cdfd86f4e", "patch": "@@ -679,7 +679,7 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n     }\n }\n \n-pub fn codegen_call_inner<'a, 'tcx: 'a>(\n+fn codegen_call_inner<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     func: Option<&Operand<'tcx>>,\n     fn_ty: Ty<'tcx>,\n@@ -811,22 +811,51 @@ pub fn codegen_call_inner<'a, 'tcx: 'a>(\n pub fn codegen_drop<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n     drop_place: CPlace<'tcx>,\n-    drop_fn_ty: Ty<'tcx>,\n ) {\n-    let (ptr, vtable) = drop_place.to_addr_maybe_unsized(fx);\n-    let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n+    let ty = drop_place.layout().ty;\n+    let drop_fn = Instance::resolve_drop_in_place(fx.tcx, ty);\n \n-    let fn_sig = fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &drop_fn_ty.fn_sig(fx.tcx));\n+    if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n+        // we don't actually need to drop anything\n+    } else {\n+        let drop_fn_ty = drop_fn.ty(fx.tcx);\n+        match ty.sty {\n+            ty::Dynamic(..) => {\n+                let (ptr, vtable) = drop_place.to_addr_maybe_unsized(fx);\n+                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n \n-    match get_pass_mode(fx.tcx, fx.layout_of(fn_sig.output())) {\n-        PassMode::NoPass => {}\n-        _ => unreachable!(),\n-    };\n+                let fn_sig = fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), &drop_fn_ty.fn_sig(fx.tcx));\n \n-    let sig = fx\n-        .bcx\n-        .import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig, true));\n-    fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n+                assert_eq!(fn_sig.output(), fx.tcx.mk_unit());\n+\n+                let sig = fx\n+                    .bcx\n+                    .import_signature(clif_sig_from_fn_sig(fx.tcx, fn_sig, true));\n+                fx.bcx.ins().call_indirect(sig, drop_fn, &[ptr]);\n+            }\n+            _ => {\n+                let arg_place = CPlace::new_stack_slot(\n+                    fx,\n+                    fx.tcx.mk_ref(\n+                        &ty::RegionKind::ReErased,\n+                        TypeAndMut {\n+                            ty,\n+                            mutbl: crate::rustc::hir::Mutability::MutMutable,\n+                        },\n+                    ),\n+                );\n+                drop_place.write_place_ref(fx, arg_place);\n+                let arg_value = arg_place.to_cvalue(fx);\n+                crate::abi::codegen_call_inner(\n+                    fx,\n+                    None,\n+                    drop_fn_ty,\n+                    vec![arg_value],\n+                    None,\n+                );\n+            }\n+        }\n+    }\n }\n \n pub fn codegen_return(fx: &mut FunctionCx<impl Backend>) {"}, {"sha": "2b4cd42c7579fe41e3bb1417f61294c7690eedef", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 36, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/76a178098d0ff5d1266f9c601958255cdfd86f4e/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76a178098d0ff5d1266f9c601958255cdfd86f4e/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=76a178098d0ff5d1266f9c601958255cdfd86f4e", "patch": "@@ -286,42 +286,8 @@ fn codegen_fn_content<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx, impl Backend>)\n                 target,\n                 unwind: _,\n             } => {\n-                let ty = location.ty(fx.mir, fx.tcx).ty;\n-                let ty = fx.monomorphize(&ty);\n-                let drop_fn = Instance::resolve_drop_in_place(fx.tcx, ty);\n-\n-                if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n-                    // we don't actually need to drop anything\n-                } else {\n-                    let drop_place = trans_place(fx, location);\n-                    let drop_fn_ty = drop_fn.ty(fx.tcx);\n-                    match ty.sty {\n-                        ty::Dynamic(..) => {\n-                            crate::abi::codegen_drop(fx, drop_place, drop_fn_ty);\n-                        }\n-                        _ => {\n-                            let arg_place = CPlace::new_stack_slot(\n-                                fx,\n-                                fx.tcx.mk_ref(\n-                                    &ty::RegionKind::ReErased,\n-                                    TypeAndMut {\n-                                        ty,\n-                                        mutbl: crate::rustc::hir::Mutability::MutMutable,\n-                                    },\n-                                ),\n-                            );\n-                            drop_place.write_place_ref(fx, arg_place);\n-                            let arg_value = arg_place.to_cvalue(fx);\n-                            crate::abi::codegen_call_inner(\n-                                fx,\n-                                None,\n-                                drop_fn_ty,\n-                                vec![arg_value],\n-                                None,\n-                            );\n-                        }\n-                    }\n-                }\n+                let drop_place = trans_place(fx, location);\n+                crate::abi::codegen_drop(fx, drop_place);\n \n                 let target_ebb = fx.get_ebb(*target);\n                 fx.bcx.ins().jump(target_ebb, &[]);"}]}