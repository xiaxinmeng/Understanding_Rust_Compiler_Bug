{"sha": "8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmYTAyMzI3MmZmZTNlNjY3OWVmM2FlYzdhODBiNDFhY2NkMWUwNWY=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-03T05:15:21Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-03T05:15:21Z"}, "message": "Fix allow bug in `trivially_copy_pass_by_ref`\n\nCloses #3992", "tree": {"sha": "c5eafc8abead93cf3836ffcdd38dab93fff9c578", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5eafc8abead93cf3836ffcdd38dab93fff9c578"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "html_url": "https://github.com/rust-lang/rust/commit/8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fa023272ffe3e6679ef3aec7a80b41accd1e05f/comments", "author": null, "committer": null, "parents": [{"sha": "be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/be3d6cfa339cad83b5a2a1a5915473890bd13c0b", "html_url": "https://github.com/rust-lang/rust/commit/be3d6cfa339cad83b5a2a1a5915473890bd13c0b"}], "stats": {"total": 53, "additions": 22, "deletions": 31}, "files": [{"sha": "e6246a2af5d565400c38dee6de6a1f7a77633c11", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8fa023272ffe3e6679ef3aec7a80b41accd1e05f/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa023272ffe3e6679ef3aec7a80b41accd1e05f/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "patch": "@@ -72,30 +72,22 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n         Self { limit }\n     }\n \n-    fn check_trait_method(&mut self, cx: &LateContext<'_, 'tcx>, item: &TraitItemRef) {\n-        let method_def_id = cx.tcx.hir().local_def_id_from_hir_id(item.id.hir_id);\n-        let method_sig = cx.tcx.fn_sig(method_def_id);\n-        let method_sig = cx.tcx.erase_late_bound_regions(&method_sig);\n-\n-        let decl = match cx.tcx.hir().fn_decl_by_hir_id(item.id.hir_id) {\n-            Some(b) => b,\n-            None => return,\n-        };\n+    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, hir_id: HirId, decl: &FnDecl, span: Option<Span>) {\n+        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n \n-        self.check_poly_fn(cx, &decl, &method_sig, None);\n-    }\n+        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n+        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n \n-    fn check_poly_fn(&mut self, cx: &LateContext<'_, 'tcx>, decl: &FnDecl, sig: &FnSig<'tcx>, span: Option<Span>) {\n         // Use lifetimes to determine if we're returning a reference to the\n         // argument. In that case we can't switch to pass-by-value as the\n         // argument will not live long enough.\n-        let output_lts = match sig.output().sty {\n+        let output_lts = match fn_sig.output().sty {\n             ty::Ref(output_lt, _, _) => vec![output_lt],\n             ty::Adt(_, substs) => substs.regions().collect(),\n             _ => vec![],\n         };\n \n-        for (input, &ty) in decl.inputs.iter().zip(sig.inputs()) {\n+        for (input, &ty) in decl.inputs.iter().zip(fn_sig.inputs()) {\n             // All spans generated from a proc-macro invocation are the same...\n             match span {\n                 Some(s) if s == input.span => return,\n@@ -128,25 +120,18 @@ impl<'a, 'tcx> TriviallyCopyPassByRef {\n             }\n         }\n     }\n-\n-    fn check_trait_items(&mut self, cx: &LateContext<'_, '_>, trait_items: &[TraitItemRef]) {\n-        for item in trait_items {\n-            if let AssocItemKind::Method { .. } = item.kind {\n-                self.check_trait_method(cx, item);\n-            }\n-        }\n-    }\n }\n \n impl_lint_pass!(TriviallyCopyPassByRef => [TRIVIALLY_COPY_PASS_BY_REF]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n-    fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx Item) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n         if in_macro_or_desugar(item.span) {\n             return;\n         }\n-        if let ItemKind::Trait(_, _, _, _, ref trait_items) = item.node {\n-            self.check_trait_items(cx, trait_items);\n+\n+        if let hir::TraitItemKind::Method(method_sig, _) = &item.node {\n+            self.check_poly_fn(cx, item.hir_id, &*method_sig.decl, None);\n         }\n     }\n \n@@ -187,11 +172,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TriviallyCopyPassByRef {\n             }\n         }\n \n-        let fn_def_id = cx.tcx.hir().local_def_id_from_hir_id(hir_id);\n-\n-        let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-        let fn_sig = cx.tcx.erase_late_bound_regions(&fn_sig);\n-\n-        self.check_poly_fn(cx, decl, &fn_sig, Some(span));\n+        self.check_poly_fn(cx, hir_id, decl, Some(span));\n     }\n }"}, {"sha": "bd23aa99ceb0e8abb81b25414dc300fb691a921c", "filename": "tests/ui/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8fa023272ffe3e6679ef3aec7a80b41accd1e05f/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fa023272ffe3e6679ef3aec7a80b41accd1e05f/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrivially_copy_pass_by_ref.rs?ref=8fa023272ffe3e6679ef3aec7a80b41accd1e05f", "patch": "@@ -85,6 +85,17 @@ impl MyTrait for Foo {\n     }\n }\n \n+#[allow(unused_variables)]\n+mod issue3992 {\n+    pub trait A {\n+        #[allow(clippy::trivially_copy_pass_by_ref)]\n+        fn a(b: &u16) {}\n+    }\n+\n+    #[allow(clippy::trivially_copy_pass_by_ref)]\n+    pub fn c(d: &u16) {}\n+}\n+\n fn main() {\n     let (mut foo, bar) = (Foo(0), Bar([0; 24]));\n     let (mut a, b, c, x, y, z) = (0, 0, Bar([0; 24]), 0, Foo(0), 0);"}]}