{"sha": "3eac643d044ad9e3841128ab122827e161c65dbd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlYWM2NDNkMDQ0YWQ5ZTM4NDExMjhhYjEyMjgyN2UxNjFjNjVkYmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-29T00:17:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-29T00:17:27Z"}, "message": "Rollup merge of #79991 - camelid:rustdoc-for-lifetime, r=GuillaumeGomez,jyn514\n\nrustdoc: Render HRTB correctly for bare functions\n\nThe angle brackets were not rendered, so code like this:\n\n    some_func: for<'a> fn(val: &'a i32) -> i32\n\nwould be rendered as:\n\n    some_func: fn'a(val: &'a i32) -> i32\n\nHowever, rendering with angle brackets is still invalid syntax:\n\n    some_func: fn<'a>(val: &'a i32) -> i32\n\nso now it renders correctly as:\n\n    some_func: for<'a> fn(val: &'a i32) -> i32\n\n-----\n\nHowever, note that this code:\n\n    some_trait: dyn for<'a> Trait<'a>\n\nwill still render as:\n\n    some_trait: dyn Trait<'a>\n\nwhich is not invalid syntax, but is still unclear. Unfortunately I think\nit's hard to fix that case because there isn't enough information in the\n`rustdoc::clean::Type` that this code operates on. Perhaps that case can\nbe fixed in a later PR.\n\nr? ``@jyn514``", "tree": {"sha": "2375a08e25c57c67774b5ed37afa11167d51f00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2375a08e25c57c67774b5ed37afa11167d51f00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3eac643d044ad9e3841128ab122827e161c65dbd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgE1QXCRBK7hj4Ov3rIwAAdHIIAGLh95cjMAt3enztfMSXX+nX\nCAdzUZSSD2qS/qtNyIB/9gQicFv9HoaNpChf2Pc6rI47QFomwLc/3tFXnaFrj40x\nfsii73jVUS6GZbBpt3g++3QeCIlUUsXNlMcYp3LPdtVtg3JJE4D0eHEx3j7b+/F6\nZ0D7MM/B+m4ZlsffxfEwhrEk080wSFoO2mSOVNiv3IvaE5G2pcdz4z16NOQAzpk5\nSg4LtnAiUwD77Cdf4jS7jdBH/ofGfjulSh1bz4xLGNW6Mk55ibHsCej4FITUOtpE\npmcj5VRBCBMePHUB4YeURmYCaMDWtyU9X+lD8c2LbIQH4Wys3f3g0vCKT6+nGuE=\n=Pw6s\n-----END PGP SIGNATURE-----\n", "payload": "tree 2375a08e25c57c67774b5ed37afa11167d51f00e\nparent 4003a7397505ddfe3460e52b9dd7666ac785ed38\nparent cd8dceef863378706bc27e0a3545c9251f02ec8b\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1611879447 +0900\ncommitter GitHub <noreply@github.com> 1611879447 +0900\n\nRollup merge of #79991 - camelid:rustdoc-for-lifetime, r=GuillaumeGomez,jyn514\n\nrustdoc: Render HRTB correctly for bare functions\n\nThe angle brackets were not rendered, so code like this:\n\n    some_func: for<'a> fn(val: &'a i32) -> i32\n\nwould be rendered as:\n\n    some_func: fn'a(val: &'a i32) -> i32\n\nHowever, rendering with angle brackets is still invalid syntax:\n\n    some_func: fn<'a>(val: &'a i32) -> i32\n\nso now it renders correctly as:\n\n    some_func: for<'a> fn(val: &'a i32) -> i32\n\n-----\n\nHowever, note that this code:\n\n    some_trait: dyn for<'a> Trait<'a>\n\nwill still render as:\n\n    some_trait: dyn Trait<'a>\n\nwhich is not invalid syntax, but is still unclear. Unfortunately I think\nit's hard to fix that case because there isn't enough information in the\n`rustdoc::clean::Type` that this code operates on. Perhaps that case can\nbe fixed in a later PR.\n\nr? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3eac643d044ad9e3841128ab122827e161c65dbd", "html_url": "https://github.com/rust-lang/rust/commit/3eac643d044ad9e3841128ab122827e161c65dbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3eac643d044ad9e3841128ab122827e161c65dbd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4003a7397505ddfe3460e52b9dd7666ac785ed38", "url": "https://api.github.com/repos/rust-lang/rust/commits/4003a7397505ddfe3460e52b9dd7666ac785ed38", "html_url": "https://github.com/rust-lang/rust/commit/4003a7397505ddfe3460e52b9dd7666ac785ed38"}, {"sha": "cd8dceef863378706bc27e0a3545c9251f02ec8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8dceef863378706bc27e0a3545c9251f02ec8b", "html_url": "https://github.com/rust-lang/rust/commit/cd8dceef863378706bc27e0a3545c9251f02ec8b"}], "stats": {"total": 50, "additions": 44, "deletions": 6}, "files": [{"sha": "74b61f1555c6f91a8378c9a715a2b8ecc43e316c", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3eac643d044ad9e3841128ab122827e161c65dbd", "patch": "@@ -659,6 +659,8 @@ fn fmt_type(\n     use_absolute: bool,\n     cache: &Cache,\n ) -> fmt::Result {\n+    debug!(\"fmt_type(t = {:?})\", t);\n+\n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n         clean::ResolvedPath { did, ref param_names, ref path, is_generic } => {\n@@ -675,21 +677,22 @@ fn fmt_type(\n             if f.alternate() {\n                 write!(\n                     f,\n-                    \"{}{:#}fn{:#}{:#}\",\n+                    \"{:#}{}{:#}fn{:#}\",\n+                    decl.print_hrtb_with_space(cache),\n                     decl.unsafety.print_with_space(),\n                     print_abi_with_space(decl.abi),\n-                    decl.print_generic_params(cache),\n                     decl.decl.print(cache)\n                 )\n             } else {\n                 write!(\n                     f,\n-                    \"{}{}\",\n+                    \"{}{}{}\",\n+                    decl.print_hrtb_with_space(cache),\n                     decl.unsafety.print_with_space(),\n                     print_abi_with_space(decl.abi)\n                 )?;\n                 primitive_link(f, PrimitiveType::Fn, \"fn\", cache)?;\n-                write!(f, \"{}{}\", decl.print_generic_params(cache), decl.decl.print(cache))\n+                write!(f, \"{}\", decl.decl.print(cache))\n             }\n         }\n         clean::Tuple(ref typs) => {\n@@ -992,8 +995,14 @@ impl clean::FnRetTy {\n }\n \n impl clean::BareFunctionDecl {\n-    fn print_generic_params<'a>(&'a self, cache: &'a Cache) -> impl fmt::Display + 'a {\n-        comma_sep(self.generic_params.iter().map(move |g| g.print(cache)))\n+    fn print_hrtb_with_space<'a>(&'a self, cache: &'a Cache) -> impl fmt::Display + 'a {\n+        display_fn(move |f| {\n+            if !self.generic_params.is_empty() {\n+                write!(f, \"for<{}> \", comma_sep(self.generic_params.iter().map(|g| g.print(cache))))\n+            } else {\n+                Ok(())\n+            }\n+        })\n     }\n }\n "}, {"sha": "f5e123aed9c4799df4e98dbf6533f8a1d3d24367", "filename": "src/test/rustdoc/fn-type.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Ftest%2Frustdoc%2Ffn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Ftest%2Frustdoc%2Ffn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffn-type.rs?ref=3eac643d044ad9e3841128ab122827e161c65dbd", "patch": "@@ -0,0 +1,15 @@\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+#![crate_type = \"lib\"]\n+\n+pub struct Foo<'a, T> {\n+    pub generic: fn(val: &T) -> T,\n+\n+    pub lifetime: fn(val: &'a i32) -> i32,\n+    pub hrtb_lifetime: for<'b, 'c> fn(one: &'b i32, two: &'c &'b i32) -> (&'b i32, &'c i32),\n+}\n+\n+// @has 'foo/struct.Foo.html' '//span[@id=\"structfield.generic\"]' \"generic: fn(val: &T) -> T\"\n+// @has 'foo/struct.Foo.html' '//span[@id=\"structfield.lifetime\"]' \"lifetime: fn(val: &'a i32) -> i32\"\n+// @has 'foo/struct.Foo.html' '//span[@id=\"structfield.hrtb_lifetime\"]' \"hrtb_lifetime: for<'b, 'c> fn(one: &'b i32, two: &'c &'b i32) -> (&'b i32, &'c i32)\""}, {"sha": "299794b63b2ea906e6152264cb4912fe1f1bbae1", "filename": "src/test/rustdoc/for-lifetime.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3eac643d044ad9e3841128ab122827e161c65dbd/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ffor-lifetime.rs?ref=3eac643d044ad9e3841128ab122827e161c65dbd", "patch": "@@ -0,0 +1,14 @@\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+#![crate_type = \"lib\"]\n+\n+pub struct Foo {\n+    pub some_func: for<'a> fn(val: &'a i32) -> i32,\n+    pub some_trait: dyn for<'a> Trait<'a>,\n+}\n+\n+// @has foo/struct.Foo.html '//span[@id=\"structfield.some_func\"]' \"some_func: for<'a> fn(val: &'a i32) -> i32\"\n+// @has foo/struct.Foo.html '//span[@id=\"structfield.some_trait\"]' \"some_trait: dyn Trait<'a>\"\n+\n+pub trait Trait<'a> {}"}]}