{"sha": "0be055072d511f4634855377ab26a3c227e2ab31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZTA1NTA3MmQ1MTFmNDYzNDg1NTM3N2FiMjZhM2MyMjdlMmFiMzE=", "commit": {"author": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2019-01-06T20:59:14Z"}, "committer": {"name": "Simon Vandel Sillesen", "email": "simon.vandel@gmail.com", "date": "2019-01-06T20:59:14Z"}, "message": "fix tests", "tree": {"sha": "5e3b7e33f8e663d1d1c0f1bbe56e33d3376bfcc9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e3b7e33f8e663d1d1c0f1bbe56e33d3376bfcc9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0be055072d511f4634855377ab26a3c227e2ab31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0be055072d511f4634855377ab26a3c227e2ab31", "html_url": "https://github.com/rust-lang/rust/commit/0be055072d511f4634855377ab26a3c227e2ab31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0be055072d511f4634855377ab26a3c227e2ab31/comments", "author": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "simonvandel", "id": 2770647, "node_id": "MDQ6VXNlcjI3NzA2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/2770647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/simonvandel", "html_url": "https://github.com/simonvandel", "followers_url": "https://api.github.com/users/simonvandel/followers", "following_url": "https://api.github.com/users/simonvandel/following{/other_user}", "gists_url": "https://api.github.com/users/simonvandel/gists{/gist_id}", "starred_url": "https://api.github.com/users/simonvandel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/simonvandel/subscriptions", "organizations_url": "https://api.github.com/users/simonvandel/orgs", "repos_url": "https://api.github.com/users/simonvandel/repos", "events_url": "https://api.github.com/users/simonvandel/events{/privacy}", "received_events_url": "https://api.github.com/users/simonvandel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3bc42349534518940f5a9a4db64287d897c03f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3bc42349534518940f5a9a4db64287d897c03f", "html_url": "https://github.com/rust-lang/rust/commit/4f3bc42349534518940f5a9a4db64287d897c03f"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "c9bc55ccc91998c0050495e23ae54a3fcdfa5324", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/0be055072d511f4634855377ab26a3c227e2ab31/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0be055072d511f4634855377ab26a3c227e2ab31/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=0be055072d511f4634855377ab26a3c227e2ab31", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     algo::{find_covering_node, find_leaf_at_offset, LeafAtOffset},\n     ast,\n     text_utils::intersect,\n-    AstNode, SourceFileNode, SyntaxKind,\n+    AstNode, Direction, SourceFileNode, SyntaxKind,\n     SyntaxKind::*,\n     SyntaxNodeRef, TextRange, TextUnit,\n };\n@@ -139,15 +139,41 @@ pub fn on_eq_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit>\n pub fn on_dot_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit> {\n     let before_dot_offset = offset - TextUnit::of_char('.');\n \n-    let _whitespace = find_leaf_at_offset(file.syntax(), before_dot_offset)\n-        .left_biased()\n-        .and_then(ast::Whitespace::cast)?;\n+    let _whitespace = find_leaf_at_offset(file.syntax(), before_dot_offset).left_biased()?;\n+\n+    // find whitespace just left of the dot\n+    ast::Whitespace::cast(_whitespace)?;\n+\n+    // make sure there is a method call\n+    let _method_call = _whitespace\n+        .siblings(Direction::Prev)\n+        // first is whitespace\n+        .skip(1)\n+        .next()?;\n+\n+    ast::MethodCallExprNode::cast(_method_call)?;\n+\n+    // find how much the _method call is indented\n+    let method_chain_indent = _method_call\n+        .ancestors()\n+        .skip(1)\n+        .next()?\n+        .siblings(Direction::Prev)\n+        .skip(1)\n+        .next()?\n+        .leaf_text()\n+        .map(|x| last_line_indent_in_whitespace(x))?;\n \n-    // whitespace found just left of the dot\n+    let current_indent = TextUnit::of_str(last_line_indent_in_whitespace(_whitespace.leaf_text()?));\n     // TODO: indent is always 4 spaces now. A better heuristic could look on the previous line(s)\n-    let indent = \"    \".to_string();\n \n-    let cursor_position = offset + TextUnit::of_str(&indent);;\n+    let target_indent = TextUnit::of_str(method_chain_indent) + TextUnit::from_usize(4);\n+\n+    let diff = target_indent - current_indent;\n+\n+    let indent = \"\".repeat(diff.to_usize());\n+\n+    let cursor_position = offset + diff;\n     let mut edit = TextEditBuilder::default();\n     edit.insert(before_dot_offset, indent);\n     Some(LocalEdit {\n@@ -157,6 +183,11 @@ pub fn on_dot_typed(file: &SourceFileNode, offset: TextUnit) -> Option<LocalEdit\n     })\n }\n \n+/// Finds the last line in the whitespace\n+fn last_line_indent_in_whitespace(ws: &str) -> &str {\n+    ws.split('\\n').last().unwrap_or(\"\")\n+}\n+\n fn remove_newline(\n     edit: &mut TextEditBuilder,\n     node: SyntaxNodeRef,\n@@ -642,9 +673,10 @@ fn foo() {\n         fn do_check(before: &str, after: &str) {\n             let (offset, before) = extract_offset(before);\n             let file = SourceFileNode::parse(&before);\n-            let result = on_dot_typed(&file, offset).unwrap();\n-            let actual = result.edit.apply(&before);\n-            assert_eq_text!(after, &actual);\n+            if let Some(result) = on_eq_typed(&file, offset) {\n+                let actual = result.edit.apply(&before);\n+                assert_eq_text!(after, &actual);\n+            };\n         }\n         // indent if continuing chain call\n         do_check(\n@@ -711,6 +743,36 @@ fn foo() {\n             .first()\n             .\n     }\n+\",\n+        );\n+\n+        // don't indent if there is no method call on previous line\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        .<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        .\n+    }\n+\",\n+        );\n+\n+        // indent to match previous expr\n+        do_check(\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+.<|>\n+    }\n+\",\n+            r\"\n+    pub fn child(&self, db: &impl HirDatabase, name: &Name) -> Cancelable<Option<Module>> {\n+        self.child_impl(db, name)\n+            .\n+    }\n \",\n         );\n     }"}]}