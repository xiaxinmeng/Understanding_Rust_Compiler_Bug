{"sha": "72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyODY5YjY1NzkxNTRkN2FhMzIyZGRkMGY5ZTNkODlmZDhhYmU4YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T15:16:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-04-16T15:16:35Z"}, "message": "auto merge of #13547 : alexcrichton/rust/remove-priv, r=huonw\n\nSee [RFC 6](https://github.com/rust-lang/rfcs/blob/e0c741f1c6e372d0fd31c5978fcf8c7bd7c3e973/active/0006-remove-priv.md)", "tree": {"sha": "8c7b32c4ee341498f46345898c6882643145cb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7b32c4ee341498f46345898c6882643145cb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "html_url": "https://github.com/rust-lang/rust/commit/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12391df5b78a7a904112c0056aa28773abecb65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/12391df5b78a7a904112c0056aa28773abecb65d", "html_url": "https://github.com/rust-lang/rust/commit/12391df5b78a7a904112c0056aa28773abecb65d"}, {"sha": "a0347d5224977c8a271fbae64d084a5c5347d22b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0347d5224977c8a271fbae64d084a5c5347d22b", "html_url": "https://github.com/rust-lang/rust/commit/a0347d5224977c8a271fbae64d084a5c5347d22b"}], "stats": {"total": 394, "additions": 125, "deletions": 269}, "files": [{"sha": "da621947f5ee638347a7d90a063141a591b774e2", "filename": "src/doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -1586,10 +1586,10 @@ pub struct Bar {\n     field: int\n }\n \n-// Declare a public enum with public and private variants\n+// Declare a public enum with two public variants\n pub enum State {\n     PubliclyAccessibleState,\n-    priv PrivatelyAccessibleState\n+    PubliclyAccessibleState2,\n }\n ~~~~\n "}, {"sha": "379d3cdc94e4f73e184f3e2bbf9d0eb82fdbd793", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -229,8 +229,8 @@ pub mod types {\n             */\n             #[repr(u8)]\n             pub enum c_void {\n-                priv variant1,\n-                priv variant2\n+                __variant1,\n+                __variant2,\n             }\n             pub enum FILE {}\n             pub enum fpos_t {}"}, {"sha": "dd249a1fbcac8eb5cd6936dbba1cb3da357f24f2", "filename": "src/librand/distributions/gamma.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrand%2Fdistributions%2Fgamma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrand%2Fdistributions%2Fgamma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fgamma.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -45,10 +45,14 @@ use super::{IndependentSample, Sample, Exp};\n /// for Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3\n /// (September 2000),\n /// 363-372. DOI:[10.1145/358407.358414](http://doi.acm.org/10.1145/358407.358414)\n-pub enum Gamma {\n-    priv Large(GammaLargeShape),\n-    priv One(Exp),\n-    priv Small(GammaSmallShape)\n+pub struct Gamma {\n+    repr: GammaRepr,\n+}\n+\n+enum GammaRepr {\n+    Large(GammaLargeShape),\n+    One(Exp),\n+    Small(GammaSmallShape)\n }\n \n // These two helpers could be made public, but saving the\n@@ -90,11 +94,12 @@ impl Gamma {\n         assert!(shape > 0.0, \"Gamma::new called with shape <= 0\");\n         assert!(scale > 0.0, \"Gamma::new called with scale <= 0\");\n \n-        match shape {\n+        let repr = match shape {\n             1.0        => One(Exp::new(1.0 / scale)),\n             0.0 .. 1.0 => Small(GammaSmallShape::new_raw(shape, scale)),\n             _          => Large(GammaLargeShape::new_raw(shape, scale))\n-        }\n+        };\n+        Gamma { repr: repr }\n     }\n }\n \n@@ -131,7 +136,7 @@ impl Sample<f64> for GammaLargeShape {\n \n impl IndependentSample<f64> for Gamma {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n-        match *self {\n+        match self.repr {\n             Small(ref g) => g.ind_sample(rng),\n             One(ref g) => g.ind_sample(rng),\n             Large(ref g) => g.ind_sample(rng),\n@@ -183,32 +188,37 @@ impl IndependentSample<f64> for GammaLargeShape {\n /// let v = chi.ind_sample(&mut rand::task_rng());\n /// println!(\"{} is from a \u03c7\u00b2(11) distribution\", v)\n /// ```\n-pub enum ChiSquared {\n+pub struct ChiSquared {\n+    repr: ChiSquaredRepr,\n+}\n+\n+enum ChiSquaredRepr {\n     // k == 1, Gamma(alpha, ..) is particularly slow for alpha < 1,\n     // e.g. when alpha = 1/2 as it would be for this case, so special-\n     // casing and using the definition of N(0,1)^2 is faster.\n-    priv DoFExactlyOne,\n-    priv DoFAnythingElse(Gamma)\n+    DoFExactlyOne,\n+    DoFAnythingElse(Gamma),\n }\n \n impl ChiSquared {\n     /// Create a new chi-squared distribution with degrees-of-freedom\n     /// `k`. Fails if `k < 0`.\n     pub fn new(k: f64) -> ChiSquared {\n-        if k == 1.0 {\n+        let repr = if k == 1.0 {\n             DoFExactlyOne\n         } else {\n             assert!(k > 0.0, \"ChiSquared::new called with `k` < 0\");\n             DoFAnythingElse(Gamma::new(0.5 * k, 2.0))\n-        }\n+        };\n+        ChiSquared { repr: repr }\n     }\n }\n impl Sample<f64> for ChiSquared {\n     fn sample<R: Rng>(&mut self, rng: &mut R) -> f64 { self.ind_sample(rng) }\n }\n impl IndependentSample<f64> for ChiSquared {\n     fn ind_sample<R: Rng>(&self, rng: &mut R) -> f64 {\n-        match *self {\n+        match self.repr {\n             DoFExactlyOne => {\n                 // k == 1 => N(0,1)^2\n                 let StandardNormal(norm) = rng.gen::<StandardNormal>();"}, {"sha": "ee7ce817a3f202dbf8f88794483fe80adc640db8", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -124,7 +124,6 @@ enum Family {\n     Trait,                 // I\n     Struct,                // S\n     PublicField,           // g\n-    PrivateField,          // j\n     InheritedField         // N\n }\n \n@@ -149,7 +148,6 @@ fn item_family(item: ebml::Doc) -> Family {\n       'I' => Trait,\n       'S' => Struct,\n       'g' => PublicField,\n-      'j' => PrivateField,\n       'N' => InheritedField,\n        c => fail!(\"unexpected family char: {}\", c)\n     }\n@@ -161,7 +159,6 @@ fn item_visibility(item: ebml::Doc) -> ast::Visibility {\n         Some(visibility_doc) => {\n             match reader::doc_as_u8(visibility_doc) as char {\n                 'y' => ast::Public,\n-                'n' => ast::Private,\n                 'i' => ast::Inherited,\n                 _ => fail!(\"unknown visibility character\")\n             }\n@@ -364,7 +361,7 @@ fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         Trait => DlDef(ast::DefTrait(did)),\n         Enum => DlDef(ast::DefTy(did)),\n         Impl => DlImpl(did),\n-        PublicField | PrivateField | InheritedField => DlField,\n+        PublicField | InheritedField => DlField,\n     }\n }\n \n@@ -962,7 +959,6 @@ pub fn get_item_attrs(cdata: Cmd,\n fn struct_field_family_to_visibility(family: Family) -> ast::Visibility {\n     match family {\n       PublicField => ast::Public,\n-      PrivateField => ast::Private,\n       InheritedField => ast::Inherited,\n       _ => fail!()\n     }\n@@ -975,7 +971,7 @@ pub fn get_struct_fields(intr: Rc<IdentInterner>, cdata: Cmd, id: ast::NodeId)\n     let mut result = Vec::new();\n     reader::tagged_docs(item, tag_item_field, |an_item| {\n         let f = item_family(an_item);\n-        if f == PublicField || f == PrivateField || f == InheritedField {\n+        if f == PublicField || f == InheritedField {\n             // FIXME #6993: name should be of type Name, not Ident\n             let name = item_name(&*intr, an_item);\n             let did = item_def_id(an_item, cdata);"}, {"sha": "085a96ea7be2f3cc31265d193758b66c0cb890c7", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -607,7 +607,6 @@ fn encode_struct_field_family(ebml_w: &mut Encoder,\n                               visibility: Visibility) {\n     encode_family(ebml_w, match visibility {\n         Public => 'g',\n-        Private => 'j',\n         Inherited => 'N'\n     });\n }\n@@ -616,7 +615,6 @@ fn encode_visibility(ebml_w: &mut Encoder, visibility: Visibility) {\n     ebml_w.start_tag(tag_items_data_item_visibility);\n     let ch = match visibility {\n         Public => 'y',\n-        Private => 'n',\n         Inherited => 'i',\n     };\n     ebml_w.wr_str(str::from_char(ch));"}, {"sha": "798fc2ffa33c097d2afed38d11988dc61fdcd54d", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 10, "deletions": 70, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -67,18 +67,10 @@ impl Visitor<()> for ParentVisitor {\n             // they inherit privacy\n             ast::ItemEnum(ref def, _) => {\n                 for variant in def.variants.iter() {\n-                    // If variants are private, then their logical \"parent\" is\n-                    // the enclosing module because everyone in the enclosing\n-                    // module can still use the private variant\n-                    if variant.node.vis == ast::Private {\n-                        self.parents.insert(variant.node.id, self.curparent);\n-\n-                    // Otherwise, if the variant is public, then the parent is\n-                    // considered the enclosing enum because the enum will\n-                    // dictate the privacy visibility of this variant instead.\n-                    } else {\n-                        self.parents.insert(variant.node.id, item.id);\n-                    }\n+                    // The parent is considered the enclosing enum because the\n+                    // enum will dictate the privacy visibility of this variant\n+                    // instead.\n+                    self.parents.insert(variant.node.id, item.id);\n                 }\n             }\n \n@@ -224,9 +216,7 @@ impl<'a> Visitor<()> for EmbargoVisitor<'a> {\n             // public all variants are public unless they're explicitly priv\n             ast::ItemEnum(ref def, _) if public_first => {\n                 for variant in def.variants.iter() {\n-                    if variant.node.vis != ast::Private {\n-                        self.exported_items.insert(variant.node.id);\n-                    }\n+                    self.exported_items.insert(variant.node.id);\n                 }\n             }\n \n@@ -462,10 +452,7 @@ impl<'a> PrivacyVisitor<'a> {\n                 Some(ast_map::NodeForeignItem(_)) => {\n                     self.tcx.map.get_foreign_vis(closest_private_id)\n                 }\n-                Some(ast_map::NodeVariant(ref v)) => {\n-                    // sadly enum variants still inherit visibility, so only\n-                    // break out of this is explicitly private\n-                    if v.node.vis == ast::Private { break }\n+                Some(ast_map::NodeVariant(..)) => {\n                     ast::Public // need to move up a level (to the enum)\n                 }\n                 _ => ast::Public,\n@@ -997,10 +984,6 @@ impl<'a> Visitor<()> for SanePrivacyVisitor<'a> {\n     fn visit_view_item(&mut self, i: &ast::ViewItem, _: ()) {\n         match i.vis {\n             ast::Inherited => {}\n-            ast::Private => {\n-                self.tcx.sess.span_err(i.span, \"unnecessary visibility \\\n-                                                qualifier\");\n-            }\n             ast::Public => {\n                 if self.in_fn {\n                     self.tcx.sess.span_err(i.span, \"unnecessary `pub`, imports \\\n@@ -1036,25 +1019,6 @@ impl<'a> SanePrivacyVisitor<'a> {\n                 }\n             }\n         };\n-        let check_not_priv = |sp: Span, vis: ast::Visibility, note: &str| {\n-            if vis == ast::Private {\n-                tcx.sess.span_err(sp, \"unnecessary `priv` qualifier\");\n-                if note.len() > 0 {\n-                    tcx.sess.span_note(sp, note);\n-                }\n-            }\n-        };\n-        let check_struct = |def: &@ast::StructDef| {\n-            for f in def.fields.iter() {\n-                match f.node.kind {\n-                    ast::NamedField(_, ast::Private) => {\n-                        tcx.sess.span_err(f.span, \"unnecessary `priv` \\\n-                                                   visibility\");\n-                    }\n-                    ast::NamedField(..) | ast::UnnamedField(..) => {}\n-                }\n-            }\n-        };\n         match item.node {\n             // implementations of traits don't need visibility qualifiers because\n             // that's controlled by having the trait in scope.\n@@ -1067,22 +1031,14 @@ impl<'a> SanePrivacyVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemImpl(_, _, _, ref methods) => {\n+            ast::ItemImpl(..) => {\n                 check_inherited(item.span, item.vis,\n                                 \"place qualifiers on individual methods instead\");\n-                for i in methods.iter() {\n-                    check_not_priv(i.span, i.vis, \"functions are private by \\\n-                                                   default\");\n-                }\n             }\n-            ast::ItemForeignMod(ref fm) => {\n+            ast::ItemForeignMod(..) => {\n                 check_inherited(item.span, item.vis,\n                                 \"place qualifiers on individual functions \\\n                                  instead\");\n-                for i in fm.items.iter() {\n-                    check_not_priv(i.span, i.vis, \"functions are private by \\\n-                                                   default\");\n-                }\n             }\n \n             ast::ItemEnum(ref def, _) => {\n@@ -1094,24 +1050,11 @@ impl<'a> SanePrivacyVisitor<'a> {\n                                                            visibility\");\n                             }\n                         }\n-                        ast::Private => {\n-                            if item.vis != ast::Public {\n-                                tcx.sess.span_err(v.span, \"unnecessary `priv` \\\n-                                                           visibility\");\n-                            }\n-                        }\n                         ast::Inherited => {}\n                     }\n-\n-                    match v.node.kind {\n-                        ast::StructVariantKind(ref s) => check_struct(s),\n-                        ast::TupleVariantKind(..) => {}\n-                    }\n                 }\n             }\n \n-            ast::ItemStruct(ref def, _) => check_struct(def),\n-\n             ast::ItemTrait(_, _, ref methods) => {\n                 for m in methods.iter() {\n                     match *m {\n@@ -1124,12 +1067,9 @@ impl<'a> SanePrivacyVisitor<'a> {\n                 }\n             }\n \n-            ast::ItemStatic(..) |\n+            ast::ItemStatic(..) | ast::ItemStruct(..) |\n             ast::ItemFn(..) | ast::ItemMod(..) | ast::ItemTy(..) |\n-            ast::ItemMac(..) => {\n-                check_not_priv(item.span, item.vis, \"items are private by \\\n-                                                     default\");\n-            }\n+            ast::ItemMac(..) => {}\n         }\n     }\n "}, {"sha": "9c00b8adfa3311da96c389aeec09d8905a3aa54f", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -1421,12 +1421,8 @@ impl<'a> Resolver<'a> {\n                                        variant: &Variant,\n                                        item_id: DefId,\n                                        parent: ReducedGraphParent,\n-                                       parent_public: bool) {\n+                                       is_public: bool) {\n         let ident = variant.node.name;\n-        // FIXME: this is unfortunate to have to do this privacy calculation\n-        //      here. This should be living in middle::privacy, but it's\n-        //      necessary to keep around in some form becaues of glob imports...\n-        let is_public = parent_public && variant.node.vis != ast::Private;\n \n         match variant.node.kind {\n             TupleVariantKind(_) => {\n@@ -1668,12 +1664,11 @@ impl<'a> Resolver<'a> {\n             // We assume the parent is visible, or else we wouldn't have seen\n             // it. Also variants are public-by-default if the parent was also\n             // public.\n-            let is_public = vis != ast::Private;\n             if is_struct {\n-                child_name_bindings.define_type(def, DUMMY_SP, is_public);\n+                child_name_bindings.define_type(def, DUMMY_SP, true);\n                 self.structs.insert(variant_id);\n             } else {\n-                child_name_bindings.define_value(def, DUMMY_SP, is_public);\n+                child_name_bindings.define_value(def, DUMMY_SP, true);\n             }\n           }\n           DefFn(..) | DefStaticMethod(..) | DefStatic(..) => {"}, {"sha": "0514642c583908d5e65a8f184fe70b08d0b65ee0", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -206,15 +206,19 @@ impl CrateDebugContext {\n     }\n }\n \n-pub enum FunctionDebugContext {\n-    priv FunctionDebugContext(~FunctionDebugContextData),\n-    priv DebugInfoDisabled,\n-    priv FunctionWithoutDebugInfo,\n+pub struct FunctionDebugContext {\n+    repr: FunctionDebugContextRepr,\n+}\n+\n+enum FunctionDebugContextRepr {\n+    FunctionDebugContext(~FunctionDebugContextData),\n+    DebugInfoDisabled,\n+    FunctionWithoutDebugInfo,\n }\n \n impl FunctionDebugContext {\n     fn get_ref<'a>(&'a self, cx: &CrateContext, span: Span) -> &'a FunctionDebugContextData {\n-        match *self {\n+        match self.repr {\n             FunctionDebugContext(~ref data) => data,\n             DebugInfoDisabled => {\n                 cx.sess().span_bug(span, FunctionDebugContext::debuginfo_disabled_message());\n@@ -544,7 +548,7 @@ pub fn create_argument_metadata(bcx: &Block, arg: &ast::Arg) {\n pub fn set_source_location(fcx: &FunctionContext,\n                            node_id: ast::NodeId,\n                            span: Span) {\n-    match fcx.debug_context {\n+    match fcx.debug_context.repr {\n         DebugInfoDisabled => return,\n         FunctionWithoutDebugInfo => {\n             set_debug_location(fcx.ccx, UnknownLocation);\n@@ -585,7 +589,7 @@ pub fn clear_source_location(fcx: &FunctionContext) {\n /// and must therefore be called before the first real statement/expression of the function is\n /// translated.\n pub fn start_emitting_source_locations(fcx: &FunctionContext) {\n-    match fcx.debug_context {\n+    match fcx.debug_context.repr {\n         FunctionDebugContext(~ref data) => {\n             data.source_locations_enabled.set(true)\n         },\n@@ -603,15 +607,15 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                                      param_substs: Option<@param_substs>,\n                                      llfn: ValueRef) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n-        return DebugInfoDisabled;\n+        return FunctionDebugContext { repr: DebugInfoDisabled };\n     }\n \n     // Clear the debug location so we don't assign them in the function prelude. Do this here\n     // already, in case we do an early exit from this function.\n     set_debug_location(cx, UnknownLocation);\n \n     if fn_ast_id == -1 {\n-        return FunctionWithoutDebugInfo;\n+        return FunctionDebugContext { repr: FunctionWithoutDebugInfo };\n     }\n \n     let empty_generics = ast::Generics { lifetimes: Vec::new(), ty_params: OwnedSlice::empty() };\n@@ -678,15 +682,15 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         ast_map::NodeForeignItem(..) |\n         ast_map::NodeVariant(..) |\n         ast_map::NodeStructCtor(..) => {\n-            return FunctionWithoutDebugInfo;\n+            return FunctionDebugContext { repr: FunctionWithoutDebugInfo };\n         }\n         _ => cx.sess().bug(format!(\"create_function_debug_context: \\\n                                     unexpected sort of node: {:?}\", fnitem))\n     };\n \n     // This can be the case for functions inlined from another crate\n     if span == codemap::DUMMY_SP {\n-        return FunctionWithoutDebugInfo;\n+        return FunctionDebugContext { repr: FunctionWithoutDebugInfo };\n     }\n \n     let loc = span_start(cx, span);\n@@ -761,7 +765,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n                        fn_metadata,\n                        &mut *fn_debug_context.scope_map.borrow_mut());\n \n-    return FunctionDebugContext(fn_debug_context);\n+    return FunctionDebugContext { repr: FunctionDebugContext(fn_debug_context) };\n \n     fn get_function_signature(cx: &CrateContext,\n                               fn_ast_id: ast::NodeId,\n@@ -2335,7 +2339,7 @@ fn DIB(cx: &CrateContext) -> DIBuilderRef {\n }\n \n fn fn_should_be_ignored(fcx: &FunctionContext) -> bool {\n-    match fcx.debug_context {\n+    match fcx.debug_context.repr {\n         FunctionDebugContext(_) => false,\n         _ => true\n     }"}, {"sha": "1de53ecc68f3a2346f1f5801f46fdc8025dc8d3a", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -41,7 +41,7 @@ impl Module {\n         Module {\n             name       : name,\n             id: 0,\n-            vis: ast::Private,\n+            vis: ast::Inherited,\n             where: syntax::codemap::DUMMY_SP,\n             attrs      : Vec::new(),\n             structs    : Vec::new(),"}, {"sha": "cf989f72011395b768617edc799a187c2639d3da", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -507,7 +507,6 @@ impl fmt::Show for VisSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n             Some(ast::Public) => write!(f.buf, \"pub \"),\n-            Some(ast::Private) => write!(f.buf, \"priv \"),\n             Some(ast::Inherited) | None => Ok(())\n         }\n     }"}, {"sha": "33c0f2c46bb5ecbf48562d17f3f3e79e5c9deb46", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -1038,15 +1038,14 @@ pub struct TraitRef {\n #[deriving(Clone, Eq, TotalEq, Encodable, Decodable, Hash)]\n pub enum Visibility {\n     Public,\n-    Private,\n     Inherited,\n }\n \n impl Visibility {\n     pub fn inherit_from(&self, parent_visibility: Visibility) -> Visibility {\n         match self {\n             &Inherited => parent_visibility,\n-            &Public | &Private => *self\n+            &Public => *self\n         }\n     }\n }"}, {"sha": "634e1c77c6af33a070b4155726d05e40dd0fe3d2", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -39,7 +39,7 @@ use ast::{MutImmutable, MutMutable, Mac_, MacInvocTT, Matcher, MatchNonterminal}\n use ast::{MatchSeq, MatchTok, Method, MutTy, BiMul, Mutability};\n use ast::{NamedField, UnNeg, NoReturn, UnNot, P, Pat, PatEnum};\n use ast::{PatIdent, PatLit, PatRange, PatRegion, PatStruct};\n-use ast::{PatTup, PatUniq, PatWild, PatWildMulti, Private};\n+use ast::{PatTup, PatUniq, PatWild, PatWildMulti};\n use ast::{BiRem, Required};\n use ast::{RetStyle, Return, BiShl, BiShr, Stmt, StmtDecl};\n use ast::{StmtExpr, StmtSemi, StmtMac, StructDef, StructField};\n@@ -3953,10 +3953,6 @@ impl<'a> Parser<'a> {\n \n         let attrs = self.parse_outer_attributes();\n \n-        if self.eat_keyword(keywords::Priv) {\n-            return self.parse_single_struct_field(Private, attrs);\n-        }\n-\n         if self.eat_keyword(keywords::Pub) {\n            return self.parse_single_struct_field(Public, attrs);\n         }\n@@ -3967,7 +3963,6 @@ impl<'a> Parser<'a> {\n     // parse visiility: PUB, PRIV, or nothing\n     fn parse_visibility(&mut self) -> Visibility {\n         if self.eat_keyword(keywords::Pub) { Public }\n-        else if self.eat_keyword(keywords::Priv) { Private }\n         else { Inherited }\n     }\n "}, {"sha": "de6dacbe766c298e9d41667ef8d540aa2de03afc", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -461,29 +461,29 @@ declare_special_idents_and_keywords! {\n         (25,                         Mod,        \"mod\");\n         (26,                         Mut,        \"mut\");\n         (27,                         Once,       \"once\");\n-        (28,                         Priv,       \"priv\");\n-        (29,                         Pub,        \"pub\");\n-        (30,                         Ref,        \"ref\");\n-        (31,                         Return,     \"return\");\n+        (28,                         Pub,        \"pub\");\n+        (29,                         Ref,        \"ref\");\n+        (30,                         Return,     \"return\");\n         // Static and Self are also special idents (prefill de-dupes)\n         (super::STATIC_KEYWORD_NAME, Static,     \"static\");\n         (super::SELF_KEYWORD_NAME,   Self,       \"self\");\n-        (32,                         Struct,     \"struct\");\n-        (33,                         Super,      \"super\");\n-        (34,                         True,       \"true\");\n-        (35,                         Trait,      \"trait\");\n-        (36,                         Type,       \"type\");\n-        (37,                         Unsafe,     \"unsafe\");\n-        (38,                         Use,        \"use\");\n-        (39,                         While,      \"while\");\n-        (40,                         Continue,   \"continue\");\n-        (41,                         Proc,       \"proc\");\n-        (42,                         Box,        \"box\");\n+        (31,                         Struct,     \"struct\");\n+        (32,                         Super,      \"super\");\n+        (33,                         True,       \"true\");\n+        (34,                         Trait,      \"trait\");\n+        (35,                         Type,       \"type\");\n+        (36,                         Unsafe,     \"unsafe\");\n+        (37,                         Use,        \"use\");\n+        (38,                         While,      \"while\");\n+        (39,                         Continue,   \"continue\");\n+        (40,                         Proc,       \"proc\");\n+        (41,                         Box,        \"box\");\n \n         'reserved:\n-        (43,                         Alignof,    \"alignof\");\n-        (44,                         Be,         \"be\");\n-        (45,                         Offsetof,   \"offsetof\");\n+        (42,                         Alignof,    \"alignof\");\n+        (43,                         Be,         \"be\");\n+        (44,                         Offsetof,   \"offsetof\");\n+        (45,                         Priv,       \"priv\");\n         (46,                         Pure,       \"pure\");\n         (47,                         Sizeof,     \"sizeof\");\n         (48,                         Typeof,     \"typeof\");"}, {"sha": "928ec09b3aec27ec66788045f578ed63d7a2c563", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -230,7 +230,6 @@ pub fn variant_to_str(var: &ast::Variant) -> ~str {\n \n pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> ~str {\n     match vis {\n-        ast::Private => format!(\"priv {}\", s),\n         ast::Public => format!(\"pub {}\", s),\n         ast::Inherited => s.to_owned()\n     }\n@@ -731,7 +730,6 @@ impl<'a> State<'a> {\n \n     pub fn print_visibility(&mut self, vis: ast::Visibility) -> IoResult<()> {\n         match vis {\n-            ast::Private => self.word_nbsp(\"priv\"),\n             ast::Public => self.word_nbsp(\"pub\"),\n             ast::Inherited => Ok(())\n         }"}, {"sha": "792673e32981714b82e3b14f3ccfab39f2edd1c9", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -12,15 +12,19 @@ use std::mem;\n use std::vec;\n \n /// A vector type optimized for cases where the size is almost always 0 or 1\n-pub enum SmallVector<T> {\n-    priv Zero,\n-    priv One(T),\n-    priv Many(Vec<T> ),\n+pub struct SmallVector<T> {\n+    repr: SmallVectorRepr<T>,\n+}\n+\n+enum SmallVectorRepr<T> {\n+    Zero,\n+    One(T),\n+    Many(Vec<T> ),\n }\n \n impl<T> Container for SmallVector<T> {\n     fn len(&self) -> uint {\n-        match *self {\n+        match self.repr {\n             Zero => 0,\n             One(..) => 1,\n             Many(ref vals) => vals.len()\n@@ -30,7 +34,7 @@ impl<T> Container for SmallVector<T> {\n \n impl<T> FromIterator<T> for SmallVector<T> {\n     fn from_iter<I: Iterator<T>>(iter: I) -> SmallVector<T> {\n-        let mut v = Zero;\n+        let mut v = SmallVector::zero();\n         v.extend(iter);\n         v\n     }\n@@ -46,24 +50,24 @@ impl<T> Extendable<T> for SmallVector<T> {\n \n impl<T> SmallVector<T> {\n     pub fn zero() -> SmallVector<T> {\n-        Zero\n+        SmallVector { repr: Zero }\n     }\n \n     pub fn one(v: T) -> SmallVector<T> {\n-        One(v)\n+        SmallVector { repr: One(v) }\n     }\n \n-    pub fn many(vs: Vec<T> ) -> SmallVector<T> {\n-        Many(vs)\n+    pub fn many(vs: Vec<T>) -> SmallVector<T> {\n+        SmallVector { repr: Many(vs) }\n     }\n \n     pub fn push(&mut self, v: T) {\n-        match *self {\n-            Zero => *self = One(v),\n+        match self.repr {\n+            Zero => self.repr = One(v),\n             One(..) => {\n-                let one = mem::replace(self, Zero);\n+                let one = mem::replace(&mut self.repr, Zero);\n                 match one {\n-                    One(v1) => mem::replace(self, Many(vec!(v1, v))),\n+                    One(v1) => mem::replace(&mut self.repr, Many(vec!(v1, v))),\n                     _ => unreachable!()\n                 };\n             }\n@@ -78,15 +82,15 @@ impl<T> SmallVector<T> {\n     }\n \n     pub fn get<'a>(&'a self, idx: uint) -> &'a T {\n-        match *self {\n+        match self.repr {\n             One(ref v) if idx == 0 => v,\n             Many(ref vs) => vs.get(idx),\n             _ => fail!(\"out of bounds access\")\n         }\n     }\n \n     pub fn expect_one(self, err: &'static str) -> T {\n-        match self {\n+        match self.repr {\n             One(v) => v,\n             Many(v) => {\n                 if v.len() == 1 {\n@@ -100,27 +104,32 @@ impl<T> SmallVector<T> {\n     }\n \n     pub fn move_iter(self) -> MoveItems<T> {\n-        match self {\n+        let repr = match self.repr {\n             Zero => ZeroIterator,\n             One(v) => OneIterator(v),\n             Many(vs) => ManyIterator(vs.move_iter())\n-        }\n+        };\n+        MoveItems { repr: repr }\n     }\n }\n \n-pub enum MoveItems<T> {\n-    priv ZeroIterator,\n-    priv OneIterator(T),\n-    priv ManyIterator(vec::MoveItems<T>),\n+pub struct MoveItems<T> {\n+    repr: MoveItemsRepr<T>,\n+}\n+\n+enum MoveItemsRepr<T> {\n+    ZeroIterator,\n+    OneIterator(T),\n+    ManyIterator(vec::MoveItems<T>),\n }\n \n impl<T> Iterator<T> for MoveItems<T> {\n     fn next(&mut self) -> Option<T> {\n-        match *self {\n+        match self.repr {\n             ZeroIterator => None,\n             OneIterator(..) => {\n                 let mut replacement = ZeroIterator;\n-                mem::swap(self, &mut replacement);\n+                mem::swap(&mut self.repr, &mut replacement);\n                 match replacement {\n                     OneIterator(v) => Some(v),\n                     _ => unreachable!()\n@@ -131,7 +140,7 @@ impl<T> Iterator<T> for MoveItems<T> {\n     }\n \n     fn size_hint(&self) -> (uint, Option<uint>) {\n-        match *self {\n+        match self.repr {\n             ZeroIterator => (0, Some(0)),\n             OneIterator(..) => (1, Some(1)),\n             ManyIterator(ref inner) => inner.size_hint()"}, {"sha": "f9308ff7497984f782169b4d24f49ca7f527a2e4", "filename": "src/test/auxiliary/private_variant_xc.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fprivate_variant_xc.rs?ref=12391df5b78a7a904112c0056aa28773abecb65d", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-pub enum Foo {\n-    Bar,\n-    priv Baz,\n-}"}, {"sha": "8ca85f20ab2f67e405e73429b664228c296fae44", "filename": "src/test/auxiliary/unreachable-variant.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fauxiliary%2Funreachable-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fauxiliary%2Funreachable-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funreachable-variant.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -10,6 +10,6 @@\n \n mod super_sekrit {\n     pub enum sooper_sekrit {\n-        quux, priv baz\n+        quux, baz\n     }\n }", "previous_filename": "src/test/auxiliary/private_variant_1.rs"}, {"sha": "453d7ffdad5c3249945623fb8b4c651b2722fb3c", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n \n   how_hungry : int,\n }"}, {"sha": "90f977168e9276b61c19ffb01984f8d0d341162f", "filename": "src/test/compile-fail/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-cast-to-trait.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -13,7 +13,7 @@ trait noisy {\n }\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n \n   how_hungry : int,\n   name : ~str,"}, {"sha": "0e75e702277a3269655d1add835706c3c917d080", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n struct cat {\n-  priv meows : uint,\n+  meows : uint,\n }\n \n impl cat {"}, {"sha": "c5453f79de24b59038f303b5192a892053969457", "filename": "src/test/compile-fail/issue-3993-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3993-2.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use zoo::{duck, goose}; //~ ERROR: variant `goose` is private\n+use zoo::{duck, goose};\n \n mod zoo {\n     pub enum bird {\n         pub duck, //~ ERROR: unnecessary `pub` visibility\n-        priv goose\n+        goose\n     }\n }\n "}, {"sha": "3c6a1a7b27557ce54a7390877cd65e9e263bd08a", "filename": "src/test/compile-fail/issue-9957.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9957.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -9,15 +9,12 @@\n // except according to those terms.\n \n pub extern crate std; //~ ERROR: `pub` visibility is not allowed\n-priv extern crate std; //~ ERROR: unnecessary visibility qualifier\n extern crate std;\n \n pub use std::bool;\n-priv use std::bool; //~ ERROR: unnecessary visibility qualifier\n use std::bool;\n \n fn main() {\n     pub use std::bool; //~ ERROR: imports in functions are never reachable\n-    priv use std::bool; //~ ERROR: unnecessary visibility qualifier\n     use std::bool;\n }"}, {"sha": "db145be6ebd24b9a1f8b49503aaadb0677b39e1b", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -109,8 +109,6 @@ pub enum PubBaz { //~ ERROR: missing documentation\n         pub a: int, //~ ERROR: missing documentation\n         b: int\n     },\n-\n-    priv PubBazB\n }\n \n /// dox\n@@ -121,7 +119,6 @@ pub enum PubBaz2 {\n         pub a: int,\n         b: int\n     },\n-    priv PubBaz2B\n }\n \n #[allow(missing_doc)]\n@@ -130,7 +127,6 @@ pub enum PubBaz3 {\n         pub a: int,\n         b: int\n     },\n-    priv PubBaz3B\n }\n \n #[doc(hidden)]"}, {"sha": "4a4032d2ab932ddbddb3e99fc7e81d8f86427492", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -60,11 +60,6 @@ pub enum Baz {\n         pub x: Private<int>, //~ ERROR private type in exported type signature\n         y: Private<int>\n     },\n-\n-    priv Baz3(Private<int>),\n-    priv Baz4 {\n-        x: Private<int>,\n-    }\n }\n \n enum Qux {"}, {"sha": "45d13bd7996a8eb922bc0335efa2fa4c4cf872b1", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -38,7 +38,6 @@ mod bar {\n     impl B for int { fn foo() -> int { 3 } }\n \n     pub enum Enum {\n-        priv Priv,\n         Pub\n     }\n \n@@ -64,7 +63,6 @@ mod bar {\n     }\n \n     fn test() {\n-        self::Priv;\n         self::Pub;\n         unsafe {\n             epriv();\n@@ -120,7 +118,6 @@ mod foo {\n                                 //~^ NOTE: trait `B` is private\n         ::lol();\n \n-        ::bar::Priv; //~ ERROR: variant `Priv` is private\n         ::bar::Pub;\n \n         unsafe {"}, {"sha": "88ab73e1f9dcf8a137f998c330da11b230f50f88", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -12,7 +12,7 @@\n \n mod kitties {\n     pub struct cat {\n-        priv meows : uint,\n+        meows : uint,\n \n         how_hungry : int,\n     }"}, {"sha": "fb80c31d4647c3ab835c7d09c4b7ad65c32421ee", "filename": "src/test/compile-fail/private-variant-xc.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-xc.rs?ref=12391df5b78a7a904112c0056aa28773abecb65d", "patch": "@@ -1,18 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// aux-build:private_variant_xc.rs\n-\n-extern crate private_variant_xc;\n-\n-pub fn main() {\n-    let _ = private_variant_xc::Bar;\n-    let _ = private_variant_xc::Baz;    //~ ERROR variant `Baz` is private\n-}"}, {"sha": "d63d04c90ccca85534cd29e993feaf6ee2ae220e", "filename": "src/test/compile-fail/private-variant.rs", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant.rs?ref=12391df5b78a7a904112c0056aa28773abecb65d", "patch": "@@ -1,21 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-mod a {\n-    pub enum Waffle {\n-        Belgian,\n-        Brussels,\n-        priv Liege\n-    }\n-}\n-\n-fn main() {\n-    let x = a::Liege;   //~ ERROR variant `Liege` is private\n-}"}, {"sha": "8fbad2df0020783d1e57e859dde3e02d5949ee06", "filename": "src/test/compile-fail/removed-syntax-priv-group.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-priv-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12391df5b78a7a904112c0056aa28773abecb65d/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-priv-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fremoved-syntax-priv-group.rs?ref=12391df5b78a7a904112c0056aa28773abecb65d", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-struct sss {\n-    bar: int,\n-    priv {\n-    //~^ ERROR expected ident\n-        foo: ()\n-    }\n-}"}, {"sha": "abbb084dbc043ca6ada2e68da961e6ea1508b5cf", "filename": "src/test/compile-fail/unnecessary-private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funnecessary-private.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     }\n \n     struct D {\n-        priv foo: int, //~ ERROR: visibility has no effect\n+        pub foo: int, //~ ERROR: visibility has no effect\n     }\n     pub fn foo() {} //~ ERROR: visibility has no effect\n     pub mod bar {} //~ ERROR: visibility has no effect"}, {"sha": "566b888099ca68a90f11a3fcfecc117c9b22b99b", "filename": "src/test/compile-fail/unreachable-variant.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-variant.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// aux-build:private_variant_1.rs\n+// aux-build:unreachable-variant.rs\n \n-extern crate private_variant_1;\n+extern crate other = \"unreachable-variant\";\n \n fn main() {\n-    let _x = private_variant_1::super_sekrit::baz; //~ ERROR is private\n+    let _x = other::super_sekrit::baz; //~ ERROR is private\n }", "previous_filename": "src/test/compile-fail/private_variant_2.rs"}, {"sha": "bb39107463e11ea1725a76a22fb46928b0a9d263", "filename": "src/test/compile-fail/useless-priv.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72869b6579154d7aa322ddd0f9e3d89fd8abe8c4/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuseless-priv.rs?ref=72869b6579154d7aa322ddd0f9e3d89fd8abe8c4", "patch": "@@ -9,9 +9,7 @@\n // except according to those terms.\n \n struct A { pub i: int }\n-struct B { priv i: int }        //~ ERROR: unnecessary `priv`\n pub enum C { pub Variant }      //~ ERROR: unnecessary `pub`\n-enum D { priv Variant2 }        //~ ERROR: unnecessary `priv`\n \n pub trait E {\n     pub fn foo() {}             //~ ERROR: unnecessary visibility"}]}