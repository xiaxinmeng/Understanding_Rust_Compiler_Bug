{"sha": "ed27b4799a34607627ea9b2e3c73a693820e4bbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMjdiNDc5OWEzNDYwNzYyN2VhOWIyZTNjNzNhNjkzODIwZTRiYmY=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-26T11:49:19Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-05-30T22:49:31Z"}, "message": "codemap: Add utilities for looking up line ranges of spans\n\nThis commit adds extension methods to `Codemap` to allow looking up line\nranges for spans.\n\nRefs #434", "tree": {"sha": "14f7381b36265a46ad59d19efc8a309d704fcd28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f7381b36265a46ad59d19efc8a309d704fcd28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed27b4799a34607627ea9b2e3c73a693820e4bbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed27b4799a34607627ea9b2e3c73a693820e4bbf", "html_url": "https://github.com/rust-lang/rust/commit/ed27b4799a34607627ea9b2e3c73a693820e4bbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed27b4799a34607627ea9b2e3c73a693820e4bbf/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd10af127ee4acbc6cd9e3221f78620d4f1e83be", "html_url": "https://github.com/rust-lang/rust/commit/bd10af127ee4acbc6cd9e3221f78620d4f1e83be"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "43c269e40a9adb2990ff0993457e606769549858", "filename": "src/codemap.rs", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/ed27b4799a34607627ea9b2e3c73a693820e4bbf/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed27b4799a34607627ea9b2e3c73a693820e4bbf/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=ed27b4799a34607627ea9b2e3c73a693820e4bbf", "patch": "@@ -1,13 +1,37 @@\n-use syntax::codemap::{BytePos, CodeMap, Span};\n+use std::rc::Rc;\n+\n+use syntax::codemap::{BytePos, CodeMap, FileMap, Span};\n \n use comment::FindUncommented;\n \n+/// A range of lines in a file, inclusive of both ends.\n+pub struct LineRange {\n+    pub file: Rc<FileMap>,\n+    pub lo: usize,\n+    pub hi: usize,\n+}\n+\n+impl LineRange {\n+    pub fn file_name(&self) -> &str {\n+        self.file.as_ref().name.as_str()\n+    }\n+}\n+\n pub trait SpanUtils {\n     fn span_after(&self, original: Span, needle: &str) -> BytePos;\n     fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n     fn span_before(&self, original: Span, needle: &str) -> BytePos;\n }\n \n+pub trait LineRangeUtils {\n+    /// Returns the `LineRange` that corresponds to `span` in `self`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `span` crosses a file boundary, which shouldn't happen.\n+    fn lookup_line_range(&self, span: Span) -> LineRange;\n+}\n+\n impl SpanUtils for CodeMap {\n     #[inline]\n     fn span_after(&self, original: Span, needle: &str) -> BytePos {\n@@ -37,3 +61,21 @@ impl SpanUtils for CodeMap {\n         original.lo + BytePos(offset as u32)\n     }\n }\n+\n+impl LineRangeUtils for CodeMap {\n+    fn lookup_line_range(&self, span: Span) -> LineRange {\n+        let lo = self.lookup_char_pos(span.lo);\n+        let hi = self.lookup_char_pos(span.hi);\n+\n+        assert!(lo.file.name == hi.file.name,\n+                \"span crossed file boundary: lo: {:?}, hi: {:?}\",\n+                lo,\n+                hi);\n+\n+        LineRange {\n+            file: lo.file.clone(),\n+            lo: lo.line,\n+            hi: hi.line,\n+        }\n+    }\n+}"}]}