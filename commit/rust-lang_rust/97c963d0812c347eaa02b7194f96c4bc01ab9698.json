{"sha": "97c963d0812c347eaa02b7194f96c4bc01ab9698", "node_id": "C_kwDOAAsO6NoAKDk3Yzk2M2QwODEyYzM0N2VhYTAyYjcxOTRmOTZjNGJjMDFhYjk2OTg", "commit": {"author": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2022-08-02T20:22:16Z"}, "committer": {"name": "Trevor Spiteri", "email": "tspiteri@ieee.org", "date": "2022-08-02T20:22:16Z"}, "message": "make slice::{split_at,split_at_unchecked} const functions", "tree": {"sha": "ddbe9cc50fd57603740a10e8d25df51c46874259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddbe9cc50fd57603740a10e8d25df51c46874259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97c963d0812c347eaa02b7194f96c4bc01ab9698", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97c963d0812c347eaa02b7194f96c4bc01ab9698", "html_url": "https://github.com/rust-lang/rust/commit/97c963d0812c347eaa02b7194f96c4bc01ab9698", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97c963d0812c347eaa02b7194f96c4bc01ab9698/comments", "author": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tspiteri", "id": 18604588, "node_id": "MDQ6VXNlcjE4NjA0NTg4", "avatar_url": "https://avatars.githubusercontent.com/u/18604588?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tspiteri", "html_url": "https://github.com/tspiteri", "followers_url": "https://api.github.com/users/tspiteri/followers", "following_url": "https://api.github.com/users/tspiteri/following{/other_user}", "gists_url": "https://api.github.com/users/tspiteri/gists{/gist_id}", "starred_url": "https://api.github.com/users/tspiteri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tspiteri/subscriptions", "organizations_url": "https://api.github.com/users/tspiteri/orgs", "repos_url": "https://api.github.com/users/tspiteri/repos", "events_url": "https://api.github.com/users/tspiteri/events{/privacy}", "received_events_url": "https://api.github.com/users/tspiteri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06f4950cbdb5a0a59063156af6383283b1aae30e", "url": "https://api.github.com/repos/rust-lang/rust/commits/06f4950cbdb5a0a59063156af6383283b1aae30e", "html_url": "https://github.com/rust-lang/rust/commit/06f4950cbdb5a0a59063156af6383283b1aae30e"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "3a03edfb6465b567f3d24a9161b26287620705c3", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97c963d0812c347eaa02b7194f96c4bc01ab9698/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c963d0812c347eaa02b7194f96c4bc01ab9698/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=97c963d0812c347eaa02b7194f96c4bc01ab9698", "patch": "@@ -137,6 +137,7 @@\n #![feature(const_size_of_val)]\n #![feature(const_slice_from_raw_parts_mut)]\n #![feature(const_slice_ptr_len)]\n+#![feature(const_slice_split_at_not_mut)]\n #![feature(const_str_from_utf8_unchecked_mut)]\n #![feature(const_swap)]\n #![feature(const_trait_impl)]"}, {"sha": "2336ad9cae303db29d63a4f97c39220e392ce257", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/97c963d0812c347eaa02b7194f96c4bc01ab9698/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97c963d0812c347eaa02b7194f96c4bc01ab9698/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=97c963d0812c347eaa02b7194f96c4bc01ab9698", "patch": "@@ -1538,13 +1538,14 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_slice_split_at_not_mut\", issue = \"none\")]\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn split_at(&self, mid: usize) -> (&[T], &[T]) {\n+    pub const fn split_at(&self, mid: usize) -> (&[T], &[T]) {\n         assert!(mid <= self.len());\n         // SAFETY: `[ptr; mid]` and `[mid; len]` are inside `self`, which\n-        // fulfills the requirements of `from_raw_parts_mut`.\n+        // fulfills the requirements of `split_at_unchecked`.\n         unsafe { self.split_at_unchecked(mid) }\n     }\n \n@@ -1623,11 +1624,15 @@ impl<T> [T] {\n     /// }\n     /// ```\n     #[unstable(feature = \"slice_split_at_unchecked\", reason = \"new API\", issue = \"76014\")]\n+    #[rustc_const_unstable(feature = \"const_slice_split_at_not_mut\", issue = \"none\")]\n     #[inline]\n     #[must_use]\n-    pub unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {\n+    pub const unsafe fn split_at_unchecked(&self, mid: usize) -> (&[T], &[T]) {\n+        let len = self.len();\n+        let ptr = self.as_ptr();\n+\n         // SAFETY: Caller has to check that `0 <= mid <= self.len()`\n-        unsafe { (self.get_unchecked(..mid), self.get_unchecked(mid..)) }\n+        unsafe { (from_raw_parts(ptr, mid), from_raw_parts(ptr.add(mid), len - mid)) }\n     }\n \n     /// Divides one mutable slice into two at an index, without doing bounds checking."}]}