{"sha": "d8372139a7972cf090d8df29148105fc82a0fc2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MzcyMTM5YTc5NzJjZjA5MGQ4ZGYyOTE0ODEwNWZjODJhMGZjMmM=", "commit": {"author": {"name": "Tom Chittenden", "email": "thchittenden@cmu.edu", "date": "2015-01-19T16:58:01Z"}, "committer": {"name": "Tom Chittenden", "email": "thchittenden@cmu.edu", "date": "2015-01-19T16:58:01Z"}, "message": "Fixes #21033 with accompanying test.", "tree": {"sha": "dc7428e4b6f299de396204ce8dc0a0f52ef1cb96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc7428e4b6f299de396204ce8dc0a0f52ef1cb96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8372139a7972cf090d8df29148105fc82a0fc2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8372139a7972cf090d8df29148105fc82a0fc2c", "html_url": "https://github.com/rust-lang/rust/commit/d8372139a7972cf090d8df29148105fc82a0fc2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8372139a7972cf090d8df29148105fc82a0fc2c/comments", "author": {"login": "thchittenden", "id": 3172021, "node_id": "MDQ6VXNlcjMxNzIwMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/3172021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thchittenden", "html_url": "https://github.com/thchittenden", "followers_url": "https://api.github.com/users/thchittenden/followers", "following_url": "https://api.github.com/users/thchittenden/following{/other_user}", "gists_url": "https://api.github.com/users/thchittenden/gists{/gist_id}", "starred_url": "https://api.github.com/users/thchittenden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thchittenden/subscriptions", "organizations_url": "https://api.github.com/users/thchittenden/orgs", "repos_url": "https://api.github.com/users/thchittenden/repos", "events_url": "https://api.github.com/users/thchittenden/events{/privacy}", "received_events_url": "https://api.github.com/users/thchittenden/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thchittenden", "id": 3172021, "node_id": "MDQ6VXNlcjMxNzIwMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/3172021?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thchittenden", "html_url": "https://github.com/thchittenden", "followers_url": "https://api.github.com/users/thchittenden/followers", "following_url": "https://api.github.com/users/thchittenden/following{/other_user}", "gists_url": "https://api.github.com/users/thchittenden/gists{/gist_id}", "starred_url": "https://api.github.com/users/thchittenden/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thchittenden/subscriptions", "organizations_url": "https://api.github.com/users/thchittenden/orgs", "repos_url": "https://api.github.com/users/thchittenden/repos", "events_url": "https://api.github.com/users/thchittenden/events{/privacy}", "received_events_url": "https://api.github.com/users/thchittenden/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89c4e3792ddc5b45706ea0e919806a248f7a87c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/89c4e3792ddc5b45706ea0e919806a248f7a87c3", "html_url": "https://github.com/rust-lang/rust/commit/89c4e3792ddc5b45706ea0e919806a248f7a87c3"}], "stats": {"total": 113, "additions": 87, "deletions": 26}, "files": [{"sha": "f5f01a9e5dac17cd7914e712b0dd4a878c6a8b85", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 34, "deletions": 25, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d8372139a7972cf090d8df29148105fc82a0fc2c", "patch": "@@ -3256,39 +3256,48 @@ impl<'a> Parser<'a> {\n                 break;\n             }\n \n-            let bind_type = if self.eat_keyword(keywords::Mut) {\n-                BindByValue(MutMutable)\n-            } else if self.eat_keyword(keywords::Ref) {\n-                BindByRef(self.parse_mutability())\n-            } else {\n-                BindByValue(MutImmutable)\n-            };\n-\n-            let fieldname = self.parse_ident();\n-\n-            let (subpat, is_shorthand) = if self.check(&token::Colon) {\n-                match bind_type {\n-                    BindByRef(..) | BindByValue(MutMutable) => {\n-                        let token_str = self.this_token_to_string();\n-                        self.fatal(&format!(\"unexpected `{}`\",\n-                                           token_str)[])\n-                    }\n-                    _ => {}\n-                }\n-\n+            // Check if a colon exists one ahead. This means we're parsing a fieldname.\n+            let (subpat, fieldname, is_shorthand) = if self.look_ahead(1, |t| t == &token::Colon) {\n+                // Parsing a pattern of the form \"fieldname: pat\"\n+                let fieldname = self.parse_ident();\n                 self.bump();\n                 let pat = self.parse_pat();\n                 hi = pat.span.hi;\n-                (pat, false)\n+                (pat, fieldname, false)\n             } else {\n+                // Parsing a pattern of the form \"(box) (ref) (mut) fieldname\"\n+                let is_box = self.eat_keyword(keywords::Box);\n+                let boxed_span_lo = self.span.lo;\n+                let is_ref = self.eat_keyword(keywords::Ref);\n+                let is_mut = self.eat_keyword(keywords::Mut);\n+                let fieldname = self.parse_ident();\n                 hi = self.last_span.hi;\n-                let fieldpath = codemap::Spanned{span:self.last_span, node: fieldname};\n-                (P(ast::Pat {\n+\n+                let bind_type = match (is_ref, is_mut) {\n+                    (true, true) => BindByRef(MutMutable),\n+                    (true, false) => BindByRef(MutImmutable),\n+                    (false, true) => BindByValue(MutMutable),\n+                    (false, false) => BindByValue(MutImmutable),\n+                };\n+                let fieldpath = codemap::Spanned{span:self.last_span, node:fieldname};\n+                let fieldpat = P(ast::Pat{\n                     id: ast::DUMMY_NODE_ID,\n                     node: PatIdent(bind_type, fieldpath, None),\n-                    span: self.last_span\n-                }), true)\n+                    span: mk_sp(boxed_span_lo, hi),\n+                });\n+\n+                let subpat = if is_box {\n+                    P(ast::Pat{\n+                        id: ast::DUMMY_NODE_ID,\n+                        node: PatBox(fieldpat),\n+                        span: mk_sp(lo, hi),\n+                    })\n+                } else {\n+                    fieldpat\n+                };\n+                (subpat, fieldname, true)\n             };\n+\n             fields.push(codemap::Spanned { span: mk_sp(lo, hi),\n                                            node: ast::FieldPat { ident: fieldname,\n                                                                  pat: subpat,"}, {"sha": "c358a21d1253e2cb842d1f49bacccf980be2f30d", "filename": "src/test/compile-fail/bind-struct-early-modifiers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-struct-early-modifiers.rs?ref=d8372139a7972cf090d8df29148105fc82a0fc2c", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     struct Foo { x: isize }\n     match (Foo { x: 10 }) {\n-        Foo { ref x: ref x } => {}, //~ ERROR unexpected `:`\n+        Foo { ref x: ref x } => {}, //~ ERROR expected `,`, found `:`\n         _ => {}\n     }\n }"}, {"sha": "5dcf1d904d0ed7f54f846e7a75bd4823b46e9597", "filename": "src/test/run-pass/issue-21033.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Ftest%2Frun-pass%2Fissue-21033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8372139a7972cf090d8df29148105fc82a0fc2c/src%2Ftest%2Frun-pass%2Fissue-21033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21033.rs?ref=d8372139a7972cf090d8df29148105fc82a0fc2c", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![feature(box_syntax)]\n+\n+enum E {\n+    StructVar { boxed: Box<i32> }\n+}\n+\n+fn main() {\n+\n+    // Test matching each shorthand notation for field patterns.\n+    let mut a = E::StructVar { boxed: box 3 };\n+    match a {\n+        E::StructVar { box boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { box ref boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { box mut boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { box ref mut boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { ref boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { ref mut boxed } => { }\n+    }\n+    match a {\n+        E::StructVar { mut boxed } => { }\n+    }\n+\n+    // Test matching non shorthand notation. Recreate a since last test\n+    // moved `boxed`\n+    let mut a = E::StructVar { boxed: box 3 };\n+    match a {\n+        E::StructVar { boxed: box ref mut num } => { }\n+    }\n+    match a {\n+        E::StructVar { boxed: ref mut num } => { }\n+    }\n+\n+}"}]}