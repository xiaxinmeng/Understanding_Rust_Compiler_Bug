{"sha": "09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZGQ2NWMyZjYwYmE2MzUzNzhkMmU5YWZkYjFjYTQ3NzVkOGU3NmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-29T19:07:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-29T19:07:19Z"}, "message": "Auto merge of #28090 - mystor:derive-unsafe-trait, r=Manishearth", "tree": {"sha": "ce4c83c8237dc93ec4d8ab94e15ce544d3042c3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce4c83c8237dc93ec4d8ab94e15ce544d3042c3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "html_url": "https://github.com/rust-lang/rust/commit/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f002a4c6ed2bb694407842b5447dba34799b931", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f002a4c6ed2bb694407842b5447dba34799b931", "html_url": "https://github.com/rust-lang/rust/commit/3f002a4c6ed2bb694407842b5447dba34799b931"}, {"sha": "38d450fad2d8f60041fe72462015fc5b09acccae", "url": "https://api.github.com/repos/rust-lang/rust/commits/38d450fad2d8f60041fe72462015fc5b09acccae", "html_url": "https://github.com/rust-lang/rust/commit/38d450fad2d8f60041fe72462015fc5b09acccae"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "87a6d0805b5611da59d238e6ea388939031bf1c9", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -40,6 +40,7 @@ pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n         path: path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: Vec::new(),\n         associated_types: Vec::new(),\n     };"}, {"sha": "f1a2983479c497ba062f57c42a9de5e1016294ce", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -31,6 +31,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::clone::Clone),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"clone\","}, {"sha": "bd6b27fb44e4ca8e88e0f1de3c5c234704988311", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -51,6 +51,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"assert_receiver_is_total_eq\","}, {"sha": "ff36e01d6cc8eb38dfb4211c25f61b7d578caf8f", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -32,6 +32,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"cmp\","}, {"sha": "495761c499b9e7d50223e74d8fabc9ee86546631", "filename": "src/libsyntax/ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -85,6 +85,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             md!(\"eq\", cs_eq),\n             md!(\"ne\", cs_ne)"}, {"sha": "084e3ef3f910cd5b5c0ce6c9c3c7d9eb40220286", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -73,6 +73,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec![\n             partial_cmp_def,\n             md!(\"lt\", true, false),"}, {"sha": "0fdcbec844779fd6ad847e3c8b5cc7c047a2950a", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -59,6 +59,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n         path: Path::new_(vec!(krate, \"Decodable\"), None, vec!(), true),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"decode\","}, {"sha": "6a25088782a045ea41ea862d88209907be051f03", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -31,6 +31,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::default::Default),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"default\","}, {"sha": "786739938e58cf31876d95ab75dcfd7dec2d3a2e", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -135,6 +135,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n         path: Path::new_(vec!(krate, \"Encodable\"), None, vec!(), true),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"encode\","}, {"sha": "9fc2745cf929a568b1db266ecebad403932796e2", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -229,6 +229,9 @@ pub struct TraitDef<'a> {\n     /// Any extra lifetimes and/or bounds, e.g. `D: serialize::Decoder`\n     pub generics: LifetimeBounds<'a>,\n \n+    /// Is it an `unsafe` trait?\n+    pub is_unsafe: bool,\n+\n     pub methods: Vec<MethodDef<'a>>,\n \n     pub associated_types: Vec<(ast::Ident, Ty<'a>)>,\n@@ -625,11 +628,18 @@ impl<'a> TraitDef<'a> {\n                                            InternedString::new(\"unused_qualifications\"))]));\n         let mut a = vec![attr, unused_qual];\n         a.extend(self.attributes.iter().cloned());\n+\n+        let unsafety = if self.is_unsafe {\n+            ast::Unsafety::Unsafe\n+        } else {\n+            ast::Unsafety::Normal\n+        };\n+\n         cx.item(\n             self.span,\n             ident,\n             a,\n-            ast::ItemImpl(ast::Unsafety::Normal,\n+            ast::ItemImpl(unsafety,\n                           ast::ImplPolarity::Positive,\n                           trait_generics,\n                           opt_trait_ref,"}, {"sha": "96be774ebdcf7b9be0ad151c3d4830188d5c1827", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -32,6 +32,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n         path: path,\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"hash\","}, {"sha": "5d3cc50557cde8445fe6b3c14c411275b23e5590", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -32,6 +32,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::num::FromPrimitive),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec!(\n             MethodDef {\n                 name: \"from_i64\","}, {"sha": "4d70ca1ebf157316794d4b1737ce2fd3c8978b11", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -34,6 +34,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n         path: path_std!(cx, core::fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n+        is_unsafe: false,\n         methods: vec![\n             MethodDef {\n                 name: \"fmt\","}, {"sha": "44ab4cc89a04ea35e05743d121b4593df863faa7", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -46,6 +46,7 @@ fn expand(cx: &mut ExtCtxt,\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         associated_types: vec![],\n+        is_unsafe: false,\n         methods: vec![\n             MethodDef {\n                 name: \"total_sum\","}, {"sha": "82d0edfb16323d4808a98ccadc84887e48c9178a", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dd65c2f60ba635378d2e9afdb1ca4775d8e76c/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=09dd65c2f60ba635378d2e9afdb1ca4775d8e76c", "patch": "@@ -48,6 +48,7 @@ fn expand(cx: &mut ExtCtxt,\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         associated_types: vec![],\n+        is_unsafe: false,\n         methods: vec![\n             MethodDef {\n                 name: \"total_sum\","}]}