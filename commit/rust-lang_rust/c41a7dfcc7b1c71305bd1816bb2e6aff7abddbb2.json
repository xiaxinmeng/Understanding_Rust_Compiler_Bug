{"sha": "c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MWE3ZGZjYzdiMWM3MTMwNWJkMTgxNmJiMmU2YWZmN2FiZGRiYjI=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-21T20:04:35Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-22T01:38:40Z"}, "message": "Shuffle around check-lexer conditions", "tree": {"sha": "7b5e7dad1eee54ccf0b1e36995428d51c95062ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b5e7dad1eee54ccf0b1e36995428d51c95062ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "html_url": "https://github.com/rust-lang/rust/commit/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3afb42d1cc5eb11f2e024167aca0a6d6173b98", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3afb42d1cc5eb11f2e024167aca0a6d6173b98", "html_url": "https://github.com/rust-lang/rust/commit/dd3afb42d1cc5eb11f2e024167aca0a6d6173b98"}], "stats": {"total": 88, "additions": 59, "deletions": 29}, "files": [{"sha": "5683eb7ba06af964def14409de5347f4872ffe3c", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "patch": "@@ -216,6 +216,7 @@ ifneq ($(strip $(findstring check,$(MAKECMDGOALS)) \\\n                $(findstring tidy,$(MAKECMDGOALS))),)\n   CFG_INFO := $(info cfg: including test rules)\n   include $(CFG_SRC_DIR)mk/tests.mk\n+  include $(CFG_SRC_DIR)mk/grammar.mk\n endif\n \n # Performance and benchmarking\n@@ -252,19 +253,6 @@ ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n   include $(CFG_SRC_DIR)mk/clean.mk\n endif\n \n-# Grammar tests\n-\n-ifneq ($(findstring lexer,$(MAKECMDGOALS)),)\n-  ifdef CFG_JAVAC\n-\tifdef CFG_ANTLR4\n-\t  ifdef CFG_GRUN\n-\t    CFG_INFO := $(info cfg: including grammar tests)\n-\t    include $(CFG_SRC_DIR)mk/grammar.mk\n-\t  endif\n-\tendif\n-  endif\n-endif\n-\n # CTAGS building\n ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n                $(findstring TAGS.vi,$(MAKECMDGOALS))),)"}, {"sha": "c0afa3eb769461853346cc7b031c4fa4b2c7d59b", "filename": "mk/grammar.mk", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "patch": "@@ -38,6 +38,18 @@ $(BG)verify: $(SG)verify.rs rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.regex_macros\n \t$(Q)$(RUSTC) -O --out-dir $(BG) -L $(L) $(SG)verify.rs\n \n check-lexer: $(BG) $(BG)RustLexer.class $(BG)verify\n+ifdef CFG_JAVAC\n+ifdef CFG_ANTLR4\n+ifdef CFG_GRUN\n \t$(info Verifying libsyntax against the reference lexer ...)\n-\t$(Q)find $(S) -iname '*.rs' -exec \"$(SG)check.sh\" {} \"$(BG)\" \\\n-      \"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\" \"$(VERBOSE)\" \\;\n+\t$(Q)$(SG)check.sh $(S) \"$(BG)\" \\\n+\t\t\"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\"\n+else\n+$(info grun not available, skipping lexer test...)\n+endif\n+else\n+$(info antlr4 not available, skipping lexer test...)\n+endif\n+else\n+$(info javac not available, skipping lexer test...)\n+endif"}, {"sha": "6068af8f7f463cd5343a7f46ee9b4e8f054d0730", "filename": "mk/tests.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "patch": "@@ -171,7 +171,7 @@ endif\n # Main test targets\n ######################################################################\n \n-check: cleantmptestlogs cleantestlibs check-notidy tidy\n+check: cleantmptestlogs cleantestlibs check-notidy tidy check-syntax\n \n check-notidy: cleantmptestlogs cleantestlibs all check-stage2\n \t$(Q)$(CFG_PYTHON) $(S)src/etc/check-summary.py tmp/*.log\n@@ -192,6 +192,8 @@ check-docs: cleantestlibs cleantmptestlogs check-stage2-docs\n # NOTE: Remove after reprogramming windows bots\n check-fast: check-lite\n \n+check-syntax: check-lexer\n+\n .PHONY: cleantmptestlogs cleantestlibs\n \n cleantmptestlogs:"}, {"sha": "69ec490a08a3fa258b7a271ec23d39770b72b157", "filename": "src/grammar/check.sh", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "patch": "@@ -2,20 +2,33 @@\n \n # Run the reference lexer against libsyntax and compare the tokens and spans.\n # If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n-#\n+\n+\n # Argument $1 is the file to check, $2 is the classpath to use, $3 is the path\n # to the grun binary, $4 is the path to the verify binary, $5 is the path to\n # RustLexer.tokens\n-\n if [ \"${VERBOSE}\" == \"1\" ]; then\n     set -x\n fi\n \n-grep -q \"// ignore lexer-test\" $1;\n+check() {\n+    grep --silent \"// ignore-lexer-test\" $1;\n \n-if [ $? -eq 1 ]; then\n-    cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n-    # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n-    # seem to have anny effect.\n-    $3 RustLexer tokens -tokens < $1 | $4 $1 $5\n-fi\n+    # if it's *not* found...\n+    if [ $? -eq 1 ]; then\n+        cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n+        # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n+        # seem to have anny effect.\n+        if $3 RustLexer tokens -tokens < $1 | $4 $1 $5; then\n+            echo \"pass: $1\"\n+        else\n+            echo \"fail: $1\"\n+        fi\n+    else\n+        echo \"skip: $1\"\n+    fi\n+}\n+\n+for file in $(find $1 -iname '*.rs' ! -path '*/test/compile-fail/*' ); do\n+    check $file $2 $3 $4 $5\n+done"}, {"sha": "f2ae5a1ea4e518739a9c74ff5fbde65b4424d71e", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=c41a7dfcc7b1c71305bd1816bb2e6aff7abddbb2", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n #![feature(globs, phase, macro_rules)]\n \n extern crate syntax;\n@@ -158,15 +168,18 @@ fn count(lit: &str) -> uint {\n }\n \n fn parse_antlr_token(s: &str, tokens: &HashMap<String, Token>) -> TokenAndSpan {\n-    let re = regex!(r\"\\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\");\n+    let re = regex!(\n+      r\"\\[@(?P<seq>\\d+),(?P<start>\\d+):(?P<end>\\d+)='(?P<content>.+?)',<(?P<toknum>-?\\d+)>,\\d+:\\d+]\"\n+    );\n \n     let m = re.captures(s).expect(format!(\"The regex didn't match {}\", s).as_slice());\n     let start = m.name(\"start\");\n     let end = m.name(\"end\");\n     let toknum = m.name(\"toknum\");\n     let content = m.name(\"content\");\n \n-    let proto_tok = tokens.find_equiv(&toknum).expect(format!(\"didn't find token {} in the map\", toknum).as_slice());\n+    let proto_tok = tokens.find_equiv(&toknum).expect(format!(\"didn't find token {} in the map\",\n+                                                              toknum).as_slice());\n \n     let nm = parse::token::intern(content);\n \n@@ -229,7 +242,8 @@ fn main() {\n     let token_map = parse_token_list(token_file.read_to_string().unwrap().as_slice());\n \n     let mut stdin = std::io::stdin();\n-    let mut antlr_tokens = stdin.lines().map(|l| parse_antlr_token(l.unwrap().as_slice().trim(), &token_map));\n+    let mut antlr_tokens = stdin.lines().map(|l| parse_antlr_token(l.unwrap().as_slice().trim(),\n+                                                                   &token_map));\n \n     let code = File::open(&Path::new(args.get(1).as_slice())).unwrap().read_to_string().unwrap();\n     let options = config::basic_options();\n@@ -246,7 +260,8 @@ fn main() {\n             continue\n         }\n \n-        assert!(rustc_tok.sp == antlr_tok.sp, \"{} and {} have different spans\", rustc_tok, antlr_tok);\n+        assert!(rustc_tok.sp == antlr_tok.sp, \"{} and {} have different spans\", rustc_tok,\n+                antlr_tok);\n \n         macro_rules! matches (\n             ( $($x:pat),+ ) => ("}]}