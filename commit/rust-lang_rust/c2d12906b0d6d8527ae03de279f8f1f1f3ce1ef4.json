{"sha": "c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "node_id": "C_kwDOAAsO6NoAKGMyZDEyOTA2YjBkNmQ4NTI3YWUwM2RlMjc5ZjhmMWYxZjNjZTFlZjQ", "commit": {"author": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-03-28T11:31:18Z"}, "committer": {"name": "iDawer", "email": "ilnur.iskhakov.oss@outlook.com", "date": "2022-04-09T11:52:40Z"}, "message": "Clean up `extract_module`", "tree": {"sha": "21137f6fff908c183053a6301e3ca468c647b67f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21137f6fff908c183053a6301e3ca468c647b67f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "html_url": "https://github.com/rust-lang/rust/commit/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9093941ed01ccae2469285bb1783e03d8ef93cba", "url": "https://api.github.com/repos/rust-lang/rust/commits/9093941ed01ccae2469285bb1783e03d8ef93cba", "html_url": "https://github.com/rust-lang/rust/commit/9093941ed01ccae2469285bb1783e03d8ef93cba"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "d5e3707567ae36d9ee9bc29905a4e24562c8523d", "filename": "crates/ide_assists/src/handlers/extract_module.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=c2d12906b0d6d8527ae03de279f8f1f1f3ce1ef4", "patch": "@@ -104,7 +104,7 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n     let (usages_to_be_processed, record_fields) = module.get_usages_and_record_fields(ctx);\n \n     let import_paths_to_be_removed = module.resolve_imports(curr_parent_module, ctx);\n-    module.body_items = module.change_visibility(record_fields)?;\n+    module.body_items = module.change_visibility(record_fields);\n     if module.body_items.len() == 0 {\n         return None;\n     }\n@@ -114,6 +114,8 @@ pub(crate) fn extract_module(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n         \"Extract Module\",\n         module.text_range,\n         |builder| {\n+            module.body_items = module.change_visibility(record_fields);\n+\n             let mut body_items: Vec<String> = Vec::new();\n             let mut items_to_be_processed: Vec<ast::Item> = module.body_items.clone();\n             let mut new_item_indent = old_item_indent + 1;\n@@ -393,7 +395,7 @@ impl Module {\n         None\n     }\n \n-    fn change_visibility(&self, record_fields: Vec<SyntaxNode>) -> Option<Vec<ast::Item>> {\n+    fn change_visibility(&self, record_fields: Vec<SyntaxNode>) -> Vec<ast::Item> {\n         let (body_items, mut replacements, record_field_parents, impls) =\n             get_replacements_for_visibilty_change(self.body_items.clone(), false);\n \n@@ -428,7 +430,7 @@ impl Module {\n             add_change_vis(vis, syntax.first_child_or_token());\n         });\n \n-        Some(body_items)\n+        body_items\n     }\n \n     fn resolve_imports(\n@@ -890,23 +892,13 @@ fn get_use_tree_paths_from_path(\n     Some(use_tree_str)\n }\n \n-fn add_change_vis(\n-    vis: Option<ast::Visibility>,\n-    node_or_token_opt: Option<syntax::SyntaxElement>,\n-) -> Option<()> {\n-    if let None = vis {\n+fn add_change_vis(vis: Option<ast::Visibility>, node_or_token_opt: Option<syntax::SyntaxElement>) {\n+    if vis.is_none() {\n         if let Some(node_or_token) = node_or_token_opt {\n             let pub_crate_vis = make::visibility_pub_crate().clone_for_update();\n-            if let Some(node) = node_or_token.as_node() {\n-                ted::insert(ted::Position::before(node), pub_crate_vis.syntax());\n-            }\n-            if let Some(token) = node_or_token.as_token() {\n-                ted::insert(ted::Position::before(token), pub_crate_vis.syntax());\n-            }\n+            ted::insert(ted::Position::before(node_or_token), pub_crate_vis.syntax());\n         }\n     }\n-\n-    Some(())\n }\n \n fn compare_hir_and_ast_module("}]}