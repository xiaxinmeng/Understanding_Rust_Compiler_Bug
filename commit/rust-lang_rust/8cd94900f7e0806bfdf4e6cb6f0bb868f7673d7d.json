{"sha": "8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZDk0OTAwZjdlMDgwNmJmZGY0ZTZjYjZmMGJiODY4Zjc2NzNkN2Q=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-22T00:30:56Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2021-03-22T00:30:56Z"}, "message": "implement a temporary workaround for #8058", "tree": {"sha": "65bfd1df2f8d192bfb36ae1244354310df7c3c1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65bfd1df2f8d192bfb36ae1244354310df7c3c1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "html_url": "https://github.com/rust-lang/rust/commit/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "858ad554374a8b1ad67692558a0878391abfdd86", "url": "https://api.github.com/repos/rust-lang/rust/commits/858ad554374a8b1ad67692558a0878391abfdd86", "html_url": "https://github.com/rust-lang/rust/commit/858ad554374a8b1ad67692558a0878391abfdd86"}], "stats": {"total": 44, "additions": 37, "deletions": 7}, "files": [{"sha": "6d572a8361637d2f26d883094828a996de0aab6b", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     render::{\n         const_::render_const,\n         enum_variant::render_variant,\n-        function::render_fn,\n+        function::{render_fn, render_method},\n         macro_::render_macro,\n         pattern::{render_struct_pat, render_variant_pat},\n         render_field, render_resolution, render_tuple_field,\n@@ -123,6 +123,17 @@ impl Completions {\n         }\n     }\n \n+    pub(crate) fn add_method(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        func: hir::Function,\n+        local_name: Option<String>,\n+    ) {\n+        if let Some(item) = render_method(RenderContext::new(ctx), None, local_name, func) {\n+            self.add(item)\n+        }\n+    }\n+\n     pub(crate) fn add_variant_pat(\n         &mut self,\n         ctx: &CompletionContext,"}, {"sha": "7e4efe5898149ee8aa98c8a84783215ee36b3b86", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "patch": "@@ -51,7 +51,7 @@ fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &T\n                 && ctx.scope.module().map_or(true, |m| func.is_visible_from(ctx.db, m))\n                 && seen_methods.insert(func.name(ctx.db))\n             {\n-                acc.add_function(ctx, func, None);\n+                acc.add_method(ctx, func, None);\n             }\n             None::<()>\n         });"}, {"sha": "a0432b8067b38e6ce4de95ecab328f69cca5f146", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "patch": "@@ -148,8 +148,10 @@ impl<'a> Render<'a> {\n             ..CompletionRelevance::default()\n         });\n \n-        if let Some(ref_match) = compute_ref_match(self.ctx.completion, ty) {\n-            item.ref_match(ref_match);\n+        if let Some(_ref_match) = compute_ref_match(self.ctx.completion, ty) {\n+            // FIXME\n+            // For now we don't properly calculate the edits for ref match\n+            // completions on struct fields, so we've disabled them. See #8058.\n         }\n \n         item.build()"}, {"sha": "b1eba20e8260ab8bd1bbfcffa68da07b3cf90e9d", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=8cd94900f7e0806bfdf4e6cb6f0bb868f7673d7d", "patch": "@@ -20,7 +20,17 @@ pub(crate) fn render_fn<'a>(\n     fn_: hir::Function,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_fn\");\n-    Some(FunctionRender::new(ctx, local_name, fn_)?.render(import_to_add))\n+    Some(FunctionRender::new(ctx, local_name, fn_, false)?.render(import_to_add))\n+}\n+\n+pub(crate) fn render_method<'a>(\n+    ctx: RenderContext<'a>,\n+    import_to_add: Option<ImportEdit>,\n+    local_name: Option<String>,\n+    fn_: hir::Function,\n+) -> Option<CompletionItem> {\n+    let _p = profile::span(\"render_method\");\n+    Some(FunctionRender::new(ctx, local_name, fn_, true)?.render(import_to_add))\n }\n \n #[derive(Debug)]\n@@ -29,18 +39,20 @@ struct FunctionRender<'a> {\n     name: String,\n     func: hir::Function,\n     ast_node: Fn,\n+    is_method: bool,\n }\n \n impl<'a> FunctionRender<'a> {\n     fn new(\n         ctx: RenderContext<'a>,\n         local_name: Option<String>,\n         fn_: hir::Function,\n+        is_method: bool,\n     ) -> Option<FunctionRender<'a>> {\n         let name = local_name.unwrap_or_else(|| fn_.name(ctx.db()).to_string());\n         let ast_node = fn_.source(ctx.db())?.value;\n \n-        Some(FunctionRender { ctx, name, func: fn_, ast_node })\n+        Some(FunctionRender { ctx, name, func: fn_, ast_node, is_method })\n     }\n \n     fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n@@ -67,7 +79,12 @@ impl<'a> FunctionRender<'a> {\n         });\n \n         if let Some(ref_match) = compute_ref_match(self.ctx.completion, &ret_type) {\n-            item.ref_match(ref_match);\n+            // FIXME\n+            // For now we don't properly calculate the edits for ref match\n+            // completions on methods, so we've disabled them. See #8058.\n+            if !self.is_method {\n+                item.ref_match(ref_match);\n+            }\n         }\n \n         item.build()"}]}