{"sha": "3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNjNmZGM0YzlhMmIzYzQ4NTViNTRkYTFhYzNhMGY2NzJiNjhhMjY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T20:29:29Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-07-28T20:29:39Z"}, "message": "Thread kinds into the type system. Don't quite activate yet, since it breaks stdlib and snapshot isn't ready to compile modified stdlib.", "tree": {"sha": "4374bb8cdbc79fd1e519c55eeef8c9d6723a04b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4374bb8cdbc79fd1e519c55eeef8c9d6723a04b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "html_url": "https://github.com/rust-lang/rust/commit/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c0fd045cef262b748aa81321468aeb933f85833", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0fd045cef262b748aa81321468aeb933f85833", "html_url": "https://github.com/rust-lang/rust/commit/5c0fd045cef262b748aa81321468aeb933f85833"}], "stats": {"total": 116, "additions": 72, "deletions": 44}, "files": [{"sha": "4c07648c3f5c08e7b6fef9242d9879bcee78031e", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -202,7 +202,18 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         st.pos = st.pos + 1u;\n         ret ty::mk_tag(st.tcx, def, params);\n       }\n-      'p' { ret ty::mk_param(st.tcx, parse_int(st) as uint); }\n+      'p' {\n+        let k = alt next(st) as char {\n+          'u' { kind_unique }\n+          's' { kind_shared }\n+          'p' { kind_pinned }\n+          c {\n+            log_err \"unexpected char in encoded type param: \";\n+            log_err c; fail\n+          }\n+        };\n+        ret ty::mk_param(st.tcx, parse_int(st) as uint, k);\n+      }\n       '@' { ret ty::mk_box(st.tcx, parse_mt(st, sd)); }\n       '*' { ret ty::mk_ptr(st.tcx, parse_mt(st, sd)); }\n       'V' { ret ty::mk_vec(st.tcx, parse_mt(st, sd)); }"}, {"sha": "6227876a7b3071a6c9331e3a5e7755002a71786f", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -173,7 +173,14 @@ fn enc_sty(w: &ioivec::writer, cx: &@ctxt, st: &ty::sty) {\n         w.write_str(cx.ds(def));\n         w.write_char('|');\n       }\n-      ty::ty_param(id) { w.write_char('p'); w.write_str(uint::str(id)); }\n+      ty::ty_param(id,k) {\n+        alt k {\n+          kind_unique. { w.write_str(\"pu\"); }\n+          kind_shared. { w.write_str(\"ps\"); }\n+          kind_pinned. { w.write_str(\"pp\"); }\n+        }\n+        w.write_str(uint::str(id));\n+      }\n       ty::ty_type. { w.write_char('Y'); }\n       ty::ty_task. { w.write_char('a'); }\n       ty::ty_constr(ty, cs) {"}, {"sha": "f73df362276062c98990fcef915363be710c56f8", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -682,7 +682,7 @@ fn ty_can_unsafely_include(cx: &ctx, needle: ty::t, haystack: ty::t,\n           // treated as opaque downstream, and is thus safe unless we\n           // saw mutable fields, in which case the whole thing can be\n           // overwritten.\n-          ty::ty_param(_) {\n+          ty::ty_param(_,_) {\n             ret mut;\n           }\n           _ { ret false; }"}, {"sha": "db012eca5dd6b0856bb669ee4d4f405cefe16433", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -610,7 +610,7 @@ fn def_is_obj_field(d: &def) -> bool {\n }\n \n fn def_is_ty_arg(d: &def) -> bool {\n-    ret alt d { ast::def_ty_arg(_) { true } _ { false } };\n+    ret alt d { ast::def_ty_arg(_,_) { true } _ { false } };\n }\n \n fn lookup_in_scope(e: &env, sc: scopes, sp: &span, name: &ident,\n@@ -710,7 +710,7 @@ fn lookup_in_ty_params(name: &ident, ty_params: &ast::ty_param[]) ->\n    option::t[def] {\n     let i = 0u;\n     for tp: ast::ty_param  in ty_params {\n-        if str::eq(tp.ident, name) { ret some(ast::def_ty_arg(i)); }\n+        if str::eq(tp.ident, name) { ret some(ast::def_ty_arg(i,tp.kind)); }\n         i += 1u;\n     }\n     ret none[def];"}, {"sha": "aa2fdd4f2f51903555878674826e8648383bb4fb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -256,7 +256,7 @@ fn type_of_inner(cx: &@crate_ctxt, sp: &span, t: &ty::t) -> TypeRef {\n       ty::ty_var(_) {\n         cx.tcx.sess.span_fatal(sp, \"trans::type_of called on ty_var\");\n       }\n-      ty::ty_param(_) { llty = T_i8(); }\n+      ty::ty_param(_, _) { llty = T_i8(); }\n       ty::ty_type. { llty = T_ptr(cx.tydesc_type); }\n     }\n     assert (llty as int != 0);\n@@ -281,7 +281,7 @@ fn type_of_tag(cx: &@crate_ctxt, sp: &span, did: &ast::def_id, t: &ty::t) ->\n \n fn type_of_arg(cx: @local_ctxt, sp: &span, arg: &ty::arg) -> TypeRef {\n     alt ty::struct(cx.ccx.tcx, arg.ty) {\n-      ty::ty_param(_) {\n+      ty::ty_param(_, _) {\n         if arg.mode != ty::mo_val { ret T_typaram_ptr(cx.ccx.tn); }\n       }\n       _ {\n@@ -581,7 +581,7 @@ fn dynamic_size_of(cx: &@block_ctxt, t: ty::t) -> result {\n         ret rslt(bcx, off);\n     }\n     alt ty::struct(bcx_tcx(cx), t) {\n-      ty::ty_param(p) {\n+      ty::ty_param(p,_) {\n         let szptr = field_of_tydesc(cx, t, false, abi::tydesc_field_size);\n         ret rslt(szptr.bcx, szptr.bcx.build.Load(szptr.val));\n       }\n@@ -634,7 +634,7 @@ fn dynamic_size_of(cx: &@block_ctxt, t: ty::t) -> result {\n \n fn dynamic_align_of(cx: &@block_ctxt, t: &ty::t) -> result {\n     alt ty::struct(bcx_tcx(cx), t) {\n-      ty::ty_param(p) {\n+      ty::ty_param(p,_) {\n         let aptr = field_of_tydesc(cx, t, false, abi::tydesc_field_align);\n         ret rslt(aptr.bcx, aptr.bcx.build.Load(aptr.val));\n       }\n@@ -878,7 +878,7 @@ fn linearize_ty_params(cx: &@block_ctxt, t: &ty::t) ->\n \n     fn linearizer(r: @rr, t: ty::t) {\n         alt ty::struct(bcx_tcx(r.cx), t) {\n-          ty::ty_param(pid) {\n+          ty::ty_param(pid,_) {\n             let seen: bool = false;\n             for d: uint  in r.defs { if d == pid { seen = true; } }\n             if !seen {\n@@ -7279,7 +7279,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n     let ty_param_substs: ty::t[] = ~[];\n     i = 0u;\n     for tp: ast::ty_param  in ty_params {\n-        ty_param_substs += ~[ty::mk_param(cx.ccx.tcx, i)];\n+        ty_param_substs += ~[ty::mk_param(cx.ccx.tcx, i, tp.kind)];\n         i += 1u;\n     }\n     let arg_tys = arg_tys_of_fn(cx.ccx, variant.node.id);"}, {"sha": "4e75c730cfb59b779ca1b07b6c9c45a860aad6b3", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 30, "deletions": 23, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -272,7 +272,7 @@ tag sty {\n     ty_res(def_id, t, t[]);\n     ty_var(int); // type variable\n \n-    ty_param(uint); // fn/tag type param\n+    ty_param(uint, ast::kind); // fn/tag type param\n \n     ty_type;\n     ty_native(def_id);\n@@ -459,7 +459,7 @@ fn mk_raw_ty(cx: &ctxt, st: &sty, in_cname: &option::t[str]) -> @raw_t {\n       ty_task. {/* no-op */ }\n       ty_type. {/* no-op */ }\n       ty_native(_) {/* no-op */ }\n-      ty_param(_) { has_params = true; }\n+      ty_param(_,_) { has_params = true; }\n       ty_var(_) { has_vars = true; }\n       ty_tag(_, tys) {\n         for tt: t  in tys { derive_flags_t(cx, has_params, has_vars, tt); }\n@@ -605,7 +605,9 @@ fn mk_res(cx: &ctxt, did: &ast::def_id, inner: &t, tps: &t[]) -> t {\n \n fn mk_var(cx: &ctxt, v: int) -> t { ret gen_ty(cx, ty_var(v)); }\n \n-fn mk_param(cx: &ctxt, n: uint) -> t { ret gen_ty(cx, ty_param(n)); }\n+fn mk_param(cx: &ctxt, n: uint, k: ast::kind) -> t {\n+    ret gen_ty(cx, ty_param(n, k));\n+}\n \n fn mk_type(cx: &ctxt) -> t { ret idx_type; }\n \n@@ -672,14 +674,14 @@ fn walk_ty(cx: &ctxt, walker: ty_walk, ty: t) {\n         for tp: t  in tps { walk_ty(cx, walker, tp); }\n       }\n       ty_var(_) {/* no-op */ }\n-      ty_param(_) {/* no-op */ }\n+      ty_param(_,_) {/* no-op */ }\n     }\n     walker(ty);\n }\n \n tag fold_mode {\n     fm_var(fn(int) -> t );\n-    fm_param(fn(uint) -> t );\n+    fm_param(fn(uint,ast::kind) -> t );\n     fm_general(fn(t) -> t );\n }\n \n@@ -800,8 +802,8 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_var(id) {\n         alt fld { fm_var(folder) { ty = folder(id); } _ {/* no-op */ } }\n       }\n-      ty_param(id) {\n-        alt fld { fm_param(folder) { ty = folder(id); } _ {/* no-op */ } }\n+      ty_param(id,k) {\n+        alt fld { fm_param(folder) { ty = folder(id,k); } _ {/* no-op */ } }\n       }\n     }\n \n@@ -1118,9 +1120,11 @@ fn type_kind(cx: &ctxt, ty: &t) -> ast::kind {\n \n       ty_var(_) { fail; }\n \n-      ty_param(_) {\n-        // FIXME: this should contribute the kind-bound of the typaram,\n-        // when those exist.\n+      ty_param(_,k) {\n+        // FIXME: when you turn this on, the stdlib will break; be sure\n+        // to have a snapshot done that understands kinds before doing so.\n+\n+        // result = kind::lower_kind(result, k);\n       }\n \n       ty_constr(t, _) {\n@@ -1187,7 +1191,7 @@ fn type_has_dynamic_size(cx: &ctxt, ty: &t) -> bool {\n         ret type_has_dynamic_size(cx, sub);\n       }\n       ty_var(_) { fail \"ty_var in type_has_dynamic_size()\"; }\n-      ty_param(_) { ret true; }\n+      ty_param(_,_) { ret true; }\n       ty_type. { ret false; }\n       ty_native(_) { ret false; }\n     }\n@@ -1313,7 +1317,7 @@ fn type_owns_heap_mem(cx: &ctxt, ty: &t) -> bool {\n       ty_chan(_) { result = false; }\n       ty_task. { result = false; }\n       ty_var(_) { fail \"ty_var in type_owns_heap_mem\"; }\n-      ty_param(_) { result = false; }\n+      ty_param(_,_) { result = false; }\n     }\n \n     cx.owns_heap_mem_cache.insert(ty, result);\n@@ -1322,7 +1326,7 @@ fn type_owns_heap_mem(cx: &ctxt, ty: &t) -> bool {\n \n fn type_param(cx: &ctxt, ty: &t) -> option::t[uint] {\n     alt struct(cx, ty) {\n-      ty_param(id) { ret some(id); }\n+      ty_param(id,_) { ret some(id); }\n       _ {/* fall through */ }\n     }\n     ret none;\n@@ -1450,7 +1454,7 @@ fn hash_type_structure(st: &sty) -> uint {\n         ret h;\n       }\n       ty_var(v) { ret hash_uint(30u, v as uint); }\n-      ty_param(pid) { ret hash_uint(31u, pid); }\n+      ty_param(pid,_) { ret hash_uint(31u, pid); }\n       ty_type. { ret 32u; }\n       ty_native(did) { ret hash_def(33u, did); }\n       ty_bot. { ret 34u; }\n@@ -1676,8 +1680,9 @@ fn equal_type_structures(a: &sty, b: &sty) -> bool {\n       ty_var(v_a) {\n         alt b { ty_var(v_b) { ret v_a == v_b; } _ { ret false; } }\n       }\n-      ty_param(pid_a) {\n-        alt b { ty_param(pid_b) { ret pid_a == pid_b; } _ { ret false; } }\n+      ty_param(pid_a,k_a) {\n+        alt b { ty_param(pid_b,k_b) { ret pid_a == pid_b && k_a == k_b; }\n+               _ { ret false; } }\n       }\n       ty_type. { alt b { ty_type. { ret true; } _ { ret false; } } }\n       ty_native(a_id) {\n@@ -1777,7 +1782,7 @@ fn node_id_to_monotype(cx: &ctxt, id: ast::node_id) -> t {\n fn count_ty_params(cx: &ctxt, ty: t) -> uint {\n     fn counter(cx: &ctxt, param_indices: @mutable uint[], ty: t) {\n         alt struct(cx, ty) {\n-          ty_param(param_idx) {\n+          ty_param(param_idx,_) {\n             let seen = false;\n             for other_param_idx: uint  in *param_indices {\n                 if param_idx == other_param_idx { seen = true; }\n@@ -2333,7 +2338,7 @@ mod unify {\n               _ { ret ures_err(terr_mismatch); }\n             }\n           }\n-          ty::ty_param(_) { ret struct_cmp(cx, expected, actual); }\n+          ty::ty_param(_,_) { ret struct_cmp(cx, expected, actual); }\n           ty::ty_tag(expected_id, expected_tps) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_tag(actual_id, actual_tps) {\n@@ -2719,7 +2724,7 @@ fn bind_params_in_type(sp: &span, cx: &ctxt, next_ty_var: fn() -> int ,\n     let i = 0u;\n     while i < ty_param_count { *param_var_ids += ~[next_ty_var()]; i += 1u; }\n     fn binder(sp: span, cx: ctxt, param_var_ids: @mutable int[],\n-              next_ty_var: fn() -> int , index: uint) -> t {\n+              next_ty_var: fn() -> int , index: uint, kind: ast::kind) -> t {\n         if index < ivec::len(*param_var_ids) {\n             ret mk_var(cx, param_var_ids.(index));\n         } else {\n@@ -2728,7 +2733,8 @@ fn bind_params_in_type(sp: &span, cx: &ctxt, next_ty_var: fn() -> int ,\n     }\n     let new_typ =\n         fold_ty(cx,\n-                fm_param(bind binder(sp, cx, param_var_ids, next_ty_var, _)),\n+                fm_param(bind binder(sp, cx, param_var_ids, next_ty_var,\n+                                     _, _)),\n                 typ);\n     ret {ids: *param_var_ids, ty: new_typ};\n }\n@@ -2738,11 +2744,12 @@ fn bind_params_in_type(sp: &span, cx: &ctxt, next_ty_var: fn() -> int ,\n // substitions.\n fn substitute_type_params(cx: &ctxt, substs: &ty::t[], typ: t) -> t {\n     if !type_contains_params(cx, typ) { ret typ; }\n-    fn substituter(cx: ctxt, substs: @ty::t[], idx: uint) -> t {\n+    fn substituter(cx: ctxt, substs: @ty::t[], idx: uint,\n+                   kind: ast::kind) -> t {\n         // FIXME: bounds check can fail\n         ret substs.(idx);\n     }\n-    ret fold_ty(cx, fm_param(bind substituter(cx, @substs, _)), typ);\n+    ret fold_ty(cx, fm_param(bind substituter(cx, @substs, _, _)), typ);\n }\n \n fn def_has_ty_params(def: &ast::def) -> bool {\n@@ -2755,7 +2762,7 @@ fn def_has_ty_params(def: &ast::def) -> bool {\n       ast::def_local(_) { ret false; }\n       ast::def_variant(_, _) { ret true; }\n       ast::def_ty(_) { ret false; }\n-      ast::def_ty_arg(_) { ret false; }\n+      ast::def_ty_arg(_,_) { ret false; }\n       ast::def_binding(_) { ret false; }\n       ast::def_use(_) { ret false; }\n       ast::def_native_ty(_) { ret false; }"}, {"sha": "e8f0cca2f259410c2fd23ecaacbbcc281c0b05dc", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -367,7 +367,7 @@ fn ast_ty_to_ty(tcx: &ty::ctxt, getter: &ty_getter, ast_ty: &@ast::ty) ->\n             typ = instantiate(tcx, ast_ty.span, getter, id, path.node.types);\n           }\n           some(ast::def_native_ty(id)) { typ = getter(id).ty; }\n-          some(ast::def_ty_arg(id)) { typ = ty::mk_param(tcx, id); }\n+          some(ast::def_ty_arg(id,k)) { typ = ty::mk_param(tcx, id, k); }\n           some(_) {\n             tcx.sess.span_fatal(ast_ty.span,\n                                 \"found type name used as a variable\");\n@@ -505,10 +505,13 @@ fn proto_to_ty_proto(proto: &ast::proto) -> ast::proto {\n mod collect {\n     type ctxt = {tcx: ty::ctxt};\n \n-    fn mk_ty_params(cx: &@ctxt, n: uint) -> ty::t[] {\n+    fn mk_ty_params(cx: &@ctxt, atps: &ast::ty_param[]) -> ty::t[] {\n         let tps = ~[];\n         let i = 0u;\n-        while i < n { tps += ~[ty::mk_param(cx.tcx, i)]; i += 1u; }\n+        for atp: ast::ty_param in atps {\n+            tps += ~[ty::mk_param(cx.tcx, i, atp.kind)];\n+            i += 1u;\n+        }\n         ret tps;\n     }\n     fn ty_of_fn_decl(cx: &@ctxt, convert: &fn(&@ast::ty) -> ty::t ,\n@@ -667,7 +670,7 @@ mod collect {\n                 {count: ivec::len(tps),\n                  ty:\n                      ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n-                                mk_ty_params(cx, ivec::len(tps)))};\n+                                mk_ty_params(cx, tps))};\n             cx.tcx.tcache.insert(local_def(it.id), t_res);\n             ret t_res;\n           }\n@@ -676,7 +679,7 @@ mod collect {\n \n             let ty_param_count = ivec::len[ast::ty_param](tps);\n \n-            let subtys: ty::t[] = mk_ty_params(cx, ty_param_count);\n+            let subtys: ty::t[] = mk_ty_params(cx, tps);\n             let t = ty::mk_tag(cx.tcx, local_def(it.id), subtys);\n             let tpt = {count: ty_param_count, ty: t};\n             cx.tcx.tcache.insert(local_def(it.id), tpt);\n@@ -714,7 +717,7 @@ mod collect {\n         // Create a set of parameter types shared among all the variants.\n \n         let ty_param_count = ivec::len[ast::ty_param](ty_params);\n-        let ty_param_tys: ty::t[] = mk_ty_params(cx, ty_param_count);\n+        let ty_param_tys: ty::t[] = mk_ty_params(cx, ty_params);\n         for variant: ast::variant  in variants {\n             // Nullary tag constructors get turned into constants; n-ary tag\n             // constructors get turned into functions.\n@@ -820,7 +823,7 @@ mod collect {\n             let t_arg = ty_of_arg(cx, f.decl.inputs.(0));\n             let t_res =\n                 ty::mk_res(cx.tcx, local_def(it.id), t_arg.ty,\n-                           mk_ty_params(cx, ivec::len(tps)));\n+                           mk_ty_params(cx, tps));\n             let t_ctor =\n                 ty::mk_fn(cx.tcx, ast::proto_fn, ~[t_arg], t_res, ast::return,\n                           ~[]);"}, {"sha": "1a435f547b133196b1cef9bcd247bad9e6f20419", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -46,7 +46,7 @@ tag def {\n \n     /* variant */\n     def_ty(def_id);\n-    def_ty_arg(uint);\n+    def_ty_arg(uint, kind);\n     def_binding(def_id);\n     def_use(def_id);\n     def_native_ty(def_id);\n@@ -74,7 +74,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_local(id) { ret id; }\n       def_variant(_, id) { ret id; }\n       def_ty(id) { ret id; }\n-      def_ty_arg(_) { fail; }\n+      def_ty_arg(_,_) { fail; }\n       def_binding(id) { ret id; }\n       def_use(id) { ret id; }\n       def_native_ty(id) { ret id; }"}, {"sha": "fdc71f9357b297522bdf5f19a2865e75205d6b4a", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=3e63fdc4c9a2b3c4855b54da1ac3a0f672b68a26", "patch": "@@ -130,7 +130,7 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n             \"<resource#\" + int::str(id.node) + \":\" + int::str(id.crate) + \">\";\n       }\n       ty_var(v) { s += \"<T\" + int::str(v) + \">\"; }\n-      ty_param(id) {\n+      ty_param(id,_) {\n         s += \"'\" + str::unsafe_from_bytes([('a' as u8) + (id as u8)]);\n       }\n       _ { s += ty_to_short_str(cx, typ); }"}]}