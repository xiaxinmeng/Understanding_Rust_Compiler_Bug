{"sha": "c3fce8e9379069daf50ac393918ab6e60b57f4ca", "node_id": "C_kwDOAAsO6NoAKGMzZmNlOGU5Mzc5MDY5ZGFmNTBhYzM5MzkxOGFiNmU2MGI1N2Y0Y2E", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-25T18:24:13Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-28T14:13:47Z"}, "message": "anonymize all bound vars, not just regions", "tree": {"sha": "bfb9dee9aa6bfe5c700fac98e99bdc87abfc3bad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfb9dee9aa6bfe5c700fac98e99bdc87abfc3bad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3fce8e9379069daf50ac393918ab6e60b57f4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3fce8e9379069daf50ac393918ab6e60b57f4ca", "html_url": "https://github.com/rust-lang/rust/commit/c3fce8e9379069daf50ac393918ab6e60b57f4ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3fce8e9379069daf50ac393918ab6e60b57f4ca/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd59d058ec10b5c4cca977240b1f82ac99482166", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd59d058ec10b5c4cca977240b1f82ac99482166", "html_url": "https://github.com/rust-lang/rust/commit/fd59d058ec10b5c4cca977240b1f82ac99482166"}], "stats": {"total": 108, "additions": 95, "deletions": 13}, "files": [{"sha": "9af7c3d4b9fc3bb05d1248cdab6ee39bcedc0356", "filename": "compiler/rustc_infer/src/infer/canonical/substitute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fsubstitute.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -71,7 +71,7 @@ where\n     if var_values.var_values.is_empty() {\n         value\n     } else {\n-        let delegate = FnMutDelegate {\n+        let mut delegate = FnMutDelegate {\n             regions: |br: ty::BoundRegion| match var_values.var_values[br.var].unpack() {\n                 GenericArgKind::Lifetime(l) => l,\n                 r => bug!(\"{:?} is a region but value is {:?}\", br, r),\n@@ -86,6 +86,6 @@ where\n             },\n         };\n \n-        tcx.replace_escaping_bound_vars_uncached(value, delegate)\n+        tcx.replace_escaping_bound_vars_uncached(value, &mut delegate)\n     }\n }"}, {"sha": "f5a1edf6d813f239a3a65ac1240ccc702fb04cd1", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -11,7 +11,7 @@ pub fn anonymize_predicate<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     pred: ty::Predicate<'tcx>,\n ) -> ty::Predicate<'tcx> {\n-    let new = tcx.anonymize_late_bound_regions(pred.kind());\n+    let new = tcx.anonymize_bound_vars(pred.kind());\n     tcx.reuse_or_mk_predicate(pred, new)\n }\n \n@@ -334,7 +334,7 @@ pub fn transitive_bounds_that_define_assoc_type<'tcx>(\n \n     std::iter::from_fn(move || {\n         while let Some(trait_ref) = stack.pop() {\n-            let anon_trait_ref = tcx.anonymize_late_bound_regions(trait_ref);\n+            let anon_trait_ref = tcx.anonymize_bound_vars(trait_ref);\n             if visited.insert(anon_trait_ref) {\n                 let super_predicates = tcx.super_predicates_that_define_assoc_type((\n                     trait_ref.def_id(),"}, {"sha": "3226950e79e13258de17a136488a871510ab3634", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -49,7 +49,7 @@ impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let u = self.tcx.anonymize_late_bound_regions(t);\n+        let u = self.tcx.anonymize_bound_vars(t);\n         u.super_fold_with(self)\n     }\n "}, {"sha": "a873465922f0803caac01f87663781f61f8aed1b", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -44,7 +44,8 @@\n //! - u.fold_with(folder)\n //! ```\n use crate::mir;\n-use crate::ty::{self, Binder, Ty, TyCtxt, TypeVisitable};\n+use crate::ty::{self, Binder, BoundTy, Ty, TyCtxt, TypeVisitable};\n+use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n \n use std::collections::BTreeMap;\n@@ -533,12 +534,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_escaping_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: T,\n-        mut delegate: impl BoundVarReplacerDelegate<'tcx>,\n+        delegate: &mut impl BoundVarReplacerDelegate<'tcx>,\n     ) -> T {\n         if !value.has_escaping_bound_vars() {\n             value\n         } else {\n-            let mut replacer = BoundVarReplacer::new(self, &mut delegate);\n+            let mut replacer = BoundVarReplacer::new(self, delegate);\n             value.fold_with(&mut replacer)\n         }\n     }\n@@ -549,9 +550,9 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn replace_bound_vars_uncached<T: TypeFoldable<'tcx>>(\n         self,\n         value: Binder<'tcx, T>,\n-        delegate: impl BoundVarReplacerDelegate<'tcx>,\n+        mut delegate: impl BoundVarReplacerDelegate<'tcx>,\n     ) -> T {\n-        self.replace_escaping_bound_vars_uncached(value.skip_binder(), delegate)\n+        self.replace_escaping_bound_vars_uncached(value.skip_binder(), &mut delegate)\n     }\n \n     /// Replaces any late-bound regions bound in `value` with\n@@ -579,7 +580,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let shift_bv = |bv: ty::BoundVar| ty::BoundVar::from_usize(bv.as_usize() + bound_vars);\n         self.replace_escaping_bound_vars_uncached(\n             value,\n-            FnMutDelegate {\n+            &mut FnMutDelegate {\n                 regions: |r: ty::BoundRegion| {\n                     self.mk_region(ty::ReLateBound(\n                         ty::INNERMOST,\n@@ -640,6 +641,50 @@ impl<'tcx> TyCtxt<'tcx> {\n         );\n         Binder::bind_with_vars(inner, bound_vars)\n     }\n+\n+    /// Anonymize all bound variables in `value`, this is mostly used to improve caching.\n+    pub fn anonymize_bound_vars<T>(self, value: Binder<'tcx, T>) -> Binder<'tcx, T>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        struct Anonymize<'tcx> {\n+            tcx: TyCtxt<'tcx>,\n+            map: FxIndexMap<ty::BoundVar, ty::BoundVariableKind>,\n+        }\n+        impl<'tcx> BoundVarReplacerDelegate<'tcx> for Anonymize<'tcx> {\n+            fn replace_region(&mut self, br: ty::BoundRegion) -> ty::Region<'tcx> {\n+                let entry = self.map.entry(br.var);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let kind = entry\n+                    .or_insert_with(|| ty::BoundVariableKind::Region(ty::BrAnon(index as u32)))\n+                    .expect_region();\n+                let br = ty::BoundRegion { var, kind };\n+                self.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n+            }\n+            fn replace_ty(&mut self, bt: ty::BoundTy) -> Ty<'tcx> {\n+                let entry = self.map.entry(bt.var);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let kind = entry\n+                    .or_insert_with(|| ty::BoundVariableKind::Ty(ty::BoundTyKind::Anon))\n+                    .expect_ty();\n+                self.tcx.mk_ty(ty::Bound(ty::INNERMOST, BoundTy { var, kind }))\n+            }\n+            fn replace_const(&mut self, bv: ty::BoundVar, ty: Ty<'tcx>) -> ty::Const<'tcx> {\n+                let entry = self.map.entry(bv);\n+                let index = entry.index();\n+                let var = ty::BoundVar::from_usize(index);\n+                let () = entry.or_insert_with(|| ty::BoundVariableKind::Const).expect_const();\n+                self.tcx.mk_const(ty::ConstS { ty, kind: ty::ConstKind::Bound(ty::INNERMOST, var) })\n+            }\n+        }\n+\n+        let mut delegate = Anonymize { tcx: self, map: Default::default() };\n+        let inner = self.replace_escaping_bound_vars_uncached(value.skip_binder(), &mut delegate);\n+        let bound_vars = self.mk_bound_variable_kinds(delegate.map.into_values());\n+        Binder::bind_with_vars(inner, bound_vars)\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "a152ba843b46c50b485f557c2d7dfab952d6516d", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -976,6 +976,29 @@ pub enum BoundVariableKind {\n     Const,\n }\n \n+impl BoundVariableKind {\n+    pub fn expect_region(self) -> BoundRegionKind {\n+        match self {\n+            BoundVariableKind::Region(lt) => lt,\n+            _ => bug!(\"expected a region, but found another kind\"),\n+        }\n+    }\n+\n+    pub fn expect_ty(self) -> BoundTyKind {\n+        match self {\n+            BoundVariableKind::Ty(ty) => ty,\n+            _ => bug!(\"expected a type, but found another kind\"),\n+        }\n+    }\n+\n+    pub fn expect_const(self) {\n+        match self {\n+            BoundVariableKind::Const => (),\n+            _ => bug!(\"expected a const, but found another kind\"),\n+        }\n+    }\n+}\n+\n /// Binder is a binder for higher-ranked lifetimes or types. It is part of the\n /// compiler's representation for things like `for<'a> Fn(&'a isize)`\n /// (which would be represented by the type `PolyTraitRef =="}, {"sha": "321064ec0fc9130eec9db2fb95b97ecbf5d298d2", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -318,8 +318,8 @@ impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n \n         // Anonymizing the LBRs is necessary to solve (Issue #59497).\n         // After we do so, it should be totally fine to skip the binders.\n-        let anon_a = self.tcx.anonymize_late_bound_regions(a);\n-        let anon_b = self.tcx.anonymize_late_bound_regions(b);\n+        let anon_a = self.tcx.anonymize_bound_vars(a);\n+        let anon_b = self.tcx.anonymize_bound_vars(b);\n         self.relate(anon_a.skip_binder(), anon_b.skip_binder())?;\n \n         Ok(a)"}, {"sha": "1ec9c69989a7f4ac358211e5d7e3abe4b385a321", "filename": "src/test/ui/generic-associated-types/anonymize-bound-vars.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c3fce8e9379069daf50ac393918ab6e60b57f4ca/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3fce8e9379069daf50ac393918ab6e60b57f4ca/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fanonymize-bound-vars.rs?ref=c3fce8e9379069daf50ac393918ab6e60b57f4ca", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+//\n+// regression test for #98702\n+#![feature(generic_associated_types)]\n+\n+trait Foo {\n+    type Assoc<T>;\n+}\n+\n+impl Foo for () {\n+    type Assoc<T> = [T; 2*2];\n+}\n+\n+fn main() {}"}]}