{"sha": "d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1ZWQ2NTVhMDgyNGIyZDUyNWU2ZmFkNGYzYjIzZjc3NDMyZWJmOTg=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T11:41:10Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-02-19T11:41:10Z"}, "message": "Use DefId instead of NodeId while generating debuginfo for statics.", "tree": {"sha": "77d72c02f92e9bdd4a793fecef7f3ab5d6dcc8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77d72c02f92e9bdd4a793fecef7f3ab5d6dcc8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "html_url": "https://github.com/rust-lang/rust/commit/d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 42, "additions": 14, "deletions": 28}, "files": [{"sha": "82e59bf4f5d16149c8fc5d68b85c39b22eb0ebc5", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "patch": "@@ -304,7 +304,7 @@ pub fn trans_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             }\n         }\n \n-        debuginfo::create_global_var_metadata(cx, id, g);\n+        debuginfo::create_global_var_metadata(cx, def_id, g);\n \n         if attr::contains_name(attrs, \"thread_local\") {\n             llvm::set_thread_local_mode(g, cx.tls_model);"}, {"sha": "2c430d03c968ec02d46b05ff75b5513c3dd06200", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "patch": "@@ -14,7 +14,7 @@ use self::EnumDiscriminantInfo::*;\n \n use super::utils::{debug_context, DIB, span_start,\n                    get_namespace_for_item, create_DIArray, is_node_local_to_unit};\n-use super::namespace::mangled_name_of_item;\n+use super::namespace::mangled_name_of_instance;\n use super::type_names::compute_debuginfo_type_name;\n use super::{CrateDebugContext};\n use abi;\n@@ -1634,19 +1634,18 @@ fn create_union_stub<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n ///\n /// Adds the created metadata nodes directly to the crate's IR.\n pub fn create_global_var_metadata(cx: &CodegenCx,\n-                                  node_id: ast::NodeId,\n+                                  def_id: DefId,\n                                   global: ValueRef) {\n     if cx.dbg_cx.is_none() {\n         return;\n     }\n \n     let tcx = cx.tcx;\n-    let node_def_id = tcx.hir.local_def_id(node_id);\n-    let no_mangle = attr::contains_name(&tcx.get_attrs(node_def_id), \"no_mangle\");\n+    let no_mangle = attr::contains_name(&tcx.get_attrs(def_id), \"no_mangle\");\n     // We may want to remove the namespace scope if we're in an extern block, see:\n     // https://github.com/rust-lang/rust/pull/46457#issuecomment-351750952\n-    let var_scope = get_namespace_for_item(cx, node_def_id);\n-    let span = cx.tcx.def_span(node_def_id);\n+    let var_scope = get_namespace_for_item(cx, def_id);\n+    let span = cx.tcx.def_span(def_id);\n \n     let (file_metadata, line_number) = if span != syntax_pos::DUMMY_SP {\n         let loc = span_start(cx, span);\n@@ -1655,15 +1654,15 @@ pub fn create_global_var_metadata(cx: &CodegenCx,\n         (unknown_file_metadata(cx), UNKNOWN_LINE_NUMBER)\n     };\n \n-    let is_local_to_unit = is_node_local_to_unit(cx, node_id);\n-    let variable_type = Instance::mono(cx.tcx, node_def_id).ty(cx.tcx);\n+    let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n+    let variable_type = Instance::mono(cx.tcx, def_id).ty(cx.tcx);\n     let type_metadata = type_metadata(cx, variable_type, span);\n-    let var_name = tcx.item_name(node_def_id).to_string();\n+    let var_name = tcx.item_name(def_id).to_string();\n     let var_name = CString::new(var_name).unwrap();\n     let linkage_name = if no_mangle {\n         None\n     } else {\n-        let linkage_name = mangled_name_of_item(cx, node_id);\n+        let linkage_name = mangled_name_of_instance(cx, Instance::mono(tcx, def_id));\n         Some(CString::new(linkage_name.to_string()).unwrap())\n     };\n "}, {"sha": "16279f31836a984c2e6cd78ae7ff278310ea1b15", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "patch": "@@ -254,14 +254,14 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     let linkage_name = mangled_name_of_instance(cx, instance);\n \n     let scope_line = span_start(cx, span).line;\n-\n-    let local_id = cx.tcx.hir.as_local_node_id(instance.def_id());\n-    let is_local_to_unit = local_id.map_or(false, |id| is_node_local_to_unit(cx, id));\n+    let is_local_to_unit = is_node_local_to_unit(cx, def_id);\n \n     let function_name = CString::new(name).unwrap();\n     let linkage_name = CString::new(linkage_name.to_string()).unwrap();\n \n     let mut flags = DIFlags::FlagPrototyped;\n+\n+    let local_id = cx.tcx.hir.as_local_node_id(def_id);\n     match *cx.sess().entry_fn.borrow() {\n         Some((id, _)) => {\n             if local_id == Some(id) {"}, {"sha": "891bf649c388a02aa7a6549408cf0113f5817439", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "patch": "@@ -14,7 +14,6 @@ use super::metadata::{unknown_file_metadata, UNKNOWN_LINE_NUMBER};\n use super::utils::{DIB, debug_context};\n use monomorphize::Instance;\n use rustc::ty;\n-use syntax::ast;\n \n use llvm;\n use llvm::debuginfo::DIScope;\n@@ -33,16 +32,6 @@ pub fn mangled_name_of_instance<'a, 'tcx>(\n      tcx.symbol_name(instance)\n }\n \n-pub fn mangled_name_of_item<'a, 'tcx>(\n-    cx: &CodegenCx<'a, 'tcx>,\n-    node_id: ast::NodeId,\n-) -> ty::SymbolName {\n-    let tcx = cx.tcx;\n-    let node_def_id = tcx.hir.local_def_id(node_id);\n-    let instance = Instance::mono(tcx, node_def_id);\n-    tcx.symbol_name(instance)\n-}\n-\n pub fn item_namespace(cx: &CodegenCx, def_id: DefId) -> DIScope {\n     if let Some(&scope) = debug_context(cx).namespace_map.borrow().get(&def_id) {\n         return scope;"}, {"sha": "9559cd4d9ea2d52e2088bc147eb27446cb0b65d9", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5ed655a0824b2d525e6fad4f3b23f77432ebf98/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=d5ed655a0824b2d525e6fad4f3b23f77432ebf98", "patch": "@@ -21,9 +21,8 @@ use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};\n use common::{CodegenCx};\n \n use syntax_pos::{self, Span};\n-use syntax::ast;\n \n-pub fn is_node_local_to_unit(cx: &CodegenCx, node_id: ast::NodeId) -> bool\n+pub fn is_node_local_to_unit(cx: &CodegenCx, def_id: DefId) -> bool\n {\n     // The is_local_to_unit flag indicates whether a function is local to the\n     // current compilation unit (i.e. if it is *static* in the C-sense). The\n@@ -33,7 +32,6 @@ pub fn is_node_local_to_unit(cx: &CodegenCx, node_id: ast::NodeId) -> bool\n     // visible). It might better to use the `exported_items` set from\n     // `driver::CrateAnalysis` in the future, but (atm) this set is not\n     // available in the translation pass.\n-    let def_id = cx.tcx.hir.local_def_id(node_id);\n     !cx.tcx.is_exported_symbol(def_id)\n }\n "}]}