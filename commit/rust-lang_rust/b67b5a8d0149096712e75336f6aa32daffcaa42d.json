{"sha": "b67b5a8d0149096712e75336f6aa32daffcaa42d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2N2I1YThkMDE0OTA5NjcxMmU3NTMzNmY2YWEzMmRhZmZjYWE0MmQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-10T20:21:55Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-12-22T06:05:37Z"}, "message": "rustc: Add feature-gated cfg(target_thread_local)\n\nCurrently the standard library has some pretty complicated logic to detect\nwhether #[thread_local] should be used or whether it's supported. This is also\nunfortunately not quite true for OSX where not all versions support\nthe #[thread_local] attribute (only 10.7+ does). Compiling code for OSX 10.6 is\ntypically requested via the MACOSX_DEPLOYMENT_TARGET environment variable (e.g.\nthe linker recognizes this), but the standard library unfortunately does not\nrespect this.\n\nThis commit updates the compiler to add a `target_thread_local` cfg annotation\nif the platform being targeted supports the `#[thread_local]` attribute. This is\nfeature gated for now, and it is only true on non-aarch64 Linux and 10.7+ OSX\n(e.g. what the module already does today). Logic has also been added to parse\nthe deployment target environment variable.", "tree": {"sha": "1e8c3ac5add64bbdad0738bf36566254b94a1fa1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8c3ac5add64bbdad0738bf36566254b94a1fa1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b67b5a8d0149096712e75336f6aa32daffcaa42d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b67b5a8d0149096712e75336f6aa32daffcaa42d", "html_url": "https://github.com/rust-lang/rust/commit/b67b5a8d0149096712e75336f6aa32daffcaa42d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b67b5a8d0149096712e75336f6aa32daffcaa42d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8cc67fb26544ccd6b0292a3e3ddc730131e9256", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8cc67fb26544ccd6b0292a3e3ddc730131e9256", "html_url": "https://github.com/rust-lang/rust/commit/d8cc67fb26544ccd6b0292a3e3ddc730131e9256"}], "stats": {"total": 45, "additions": 43, "deletions": 2}, "files": [{"sha": "b275480a6fc68347113837514bdd6ee58374f7f8", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -660,6 +660,9 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n         \"windows\" | \"unix\" => ret.push(attr::mk_word_item(fam)),\n         _ => (),\n     }\n+    if sess.target.target.options.has_elf_tls {\n+        ret.push(attr::mk_word_item(InternedString::new(\"target_thread_local\")));\n+    }\n     if sess.opts.debug_assertions {\n         ret.push(attr::mk_word_item(InternedString::new(\"debug_assertions\")));\n     }"}, {"sha": "21bfd87e412dd5d899ed8ad226d5b0b852d3fa2c", "filename": "src/librustc_back/target/aarch64_unknown_linux_gnu.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Faarch64_unknown_linux_gnu.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -11,7 +11,8 @@\n use target::Target;\n \n pub fn target() -> Target {\n-    let base = super::linux_base::opts();\n+    let mut base = super::linux_base::opts();\n+    base.has_elf_tls = false;\n     Target {\n         llvm_target: \"aarch64-unknown-linux-gnu\".to_string(),\n         target_endian: \"little\".to_string(),"}, {"sha": "ffcb6f971ae25ce793273f21e7a714414e777f1e", "filename": "src/librustc_back/target/apple_base.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_base.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -8,10 +8,30 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::env;\n+\n use target::TargetOptions;\n-use std::default::Default;\n \n pub fn opts() -> TargetOptions {\n+    // ELF TLS is only available in OSX 10.7+. If you try to compile for 10.6\n+    // either the linker will complain if it is used or the binary will end up\n+    // segfaulting at runtime when run on 10.6. Rust by default supports OSX\n+    // 10.7+, but there is a standard environment variable,\n+    // MACOSX_DEPLOYMENT_TARGET, which is used to signal targeting older\n+    // versions of OSX. For example compiling on 10.10 with\n+    // MACOSX_DEPLOYMENT_TARGET set to 10.6 will cause the linker to generate\n+    // warnings about the usage of ELF TLS.\n+    //\n+    // Here we detect what version is being requested, defaulting to 10.7. ELF\n+    // TLS is flagged as enabled if it looks to be supported.\n+    let deployment_target = env::var(\"MACOSX_DEPLOYMENT_TARGET\").ok();\n+    let version = deployment_target.as_ref().and_then(|s| {\n+        let mut i = s.splitn(2, \".\");\n+        i.next().and_then(|a| i.next().map(|b| (a, b)))\n+    }).and_then(|(a, b)| {\n+        a.parse::<u32>().and_then(|a| b.parse::<u32>().map(|b| (a, b))).ok()\n+    }).unwrap_or((10, 7));\n+\n     TargetOptions {\n         // OSX has -dead_strip, which doesn't rely on ffunction_sections\n         function_sections: false,\n@@ -25,6 +45,7 @@ pub fn opts() -> TargetOptions {\n         archive_format: \"bsd\".to_string(),\n         pre_link_args: Vec::new(),\n         exe_allocation_crate: super::maybe_jemalloc(),\n+        has_elf_tls: version >= (10, 7),\n         .. Default::default()\n     }\n }"}, {"sha": "d182fd9605640677322f9d1d425a6732d6bdb488", "filename": "src/librustc_back/target/apple_ios_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fapple_ios_base.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -88,6 +88,7 @@ pub fn opts(arch: Arch) -> TargetOptions {\n         dynamic_linking: false,\n         executables: true,\n         pre_link_args: pre_link_args(arch),\n+        has_elf_tls: false,\n         .. super::apple_base::opts()\n     }\n }"}, {"sha": "7776aaacd00b1b8f2f2506265a79674658be9917", "filename": "src/librustc_back/target/arm_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Farm_linux_androideabi.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -13,6 +13,7 @@ use target::Target;\n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n     base.features = \"+v7\".to_string();\n+    base.has_elf_tls = false;\n \n     Target {\n         llvm_target: \"arm-linux-androideabi\".to_string(),"}, {"sha": "0efcf73ee86808ecff5243e64d199410ffc996a1", "filename": "src/librustc_back/target/linux_base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Flinux_base.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -30,6 +30,7 @@ pub fn opts() -> TargetOptions {\n         position_independent_executables: true,\n         archive_format: \"gnu\".to_string(),\n         exe_allocation_crate: super::maybe_jemalloc(),\n+        has_elf_tls: true,\n         .. Default::default()\n     }\n }"}, {"sha": "666903b4eed42a881dc1422cce04075b16d85f64", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -195,6 +195,10 @@ pub struct TargetOptions {\n     /// Default crate for allocation symbols to link against\n     pub lib_allocation_crate: String,\n     pub exe_allocation_crate: String,\n+\n+    /// Flag indicating whether ELF TLS (e.g. #[thread_local]) is available for\n+    /// this target.\n+    pub has_elf_tls: bool,\n }\n \n impl Default for TargetOptions {\n@@ -240,6 +244,7 @@ impl Default for TargetOptions {\n             lib_allocation_crate: \"alloc_system\".to_string(),\n             exe_allocation_crate: \"alloc_system\".to_string(),\n             allow_asm: true,\n+            has_elf_tls: false,\n         }\n     }\n }"}, {"sha": "390e8253dcf403eb96fa0416857da0ab48278227", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b67b5a8d0149096712e75336f6aa32daffcaa42d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b67b5a8d0149096712e75336f6aa32daffcaa42d", "patch": "@@ -236,6 +236,9 @@ const KNOWN_FEATURES: &'static [(&'static str, &'static str, Option<u32>, Status\n \n     // allow using type ascription in expressions\n     (\"type_ascription\", \"1.6.0\", Some(23416), Active),\n+\n+    // Allows cfg(target_thread_local)\n+    (\"cfg_target_thread_local\", \"1.7.0\", Some(26581), Active),\n ];\n // (changing above list without updating src/doc/reference.md makes @cmr sad)\n \n@@ -414,6 +417,8 @@ const GATED_CFGS: &'static [(&'static str, &'static str, fn(&Features) -> bool)]\n     // (name in cfg, feature, function to check if the feature is enabled)\n     (\"target_feature\", \"cfg_target_feature\", cfg_fn!(|x| x.cfg_target_feature)),\n     (\"target_vendor\", \"cfg_target_vendor\", cfg_fn!(|x| x.cfg_target_vendor)),\n+    (\"target_thread_local\", \"cfg_target_thread_local\",\n+     cfg_fn!(|x| x.cfg_target_thread_local)),\n ];\n \n #[derive(Debug, Eq, PartialEq)]\n@@ -541,6 +546,7 @@ pub struct Features {\n     pub type_macros: bool,\n     pub cfg_target_feature: bool,\n     pub cfg_target_vendor: bool,\n+    pub cfg_target_thread_local: bool,\n     pub augmented_assignments: bool,\n     pub braced_empty_structs: bool,\n     pub staged_api: bool,\n@@ -575,6 +581,7 @@ impl Features {\n             type_macros: false,\n             cfg_target_feature: false,\n             cfg_target_vendor: false,\n+            cfg_target_thread_local: false,\n             augmented_assignments: false,\n             braced_empty_structs: false,\n             staged_api: false,\n@@ -1157,6 +1164,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &Handler,\n         type_macros: cx.has_feature(\"type_macros\"),\n         cfg_target_feature: cx.has_feature(\"cfg_target_feature\"),\n         cfg_target_vendor: cx.has_feature(\"cfg_target_vendor\"),\n+        cfg_target_thread_local: cx.has_feature(\"cfg_target_thread_local\"),\n         augmented_assignments: cx.has_feature(\"augmented_assignments\"),\n         braced_empty_structs: cx.has_feature(\"braced_empty_structs\"),\n         staged_api: cx.has_feature(\"staged_api\"),"}]}