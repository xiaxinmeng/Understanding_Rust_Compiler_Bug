{"sha": "48ea50bf04a1bd12999bd9e27558ac31988c7228", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWE1MGJmMDRhMWJkMTI5OTliZDllMjc1NThhYzMxOTg4YzcyMjg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-03T12:09:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-03T12:09:10Z"}, "message": "Merge #9124\n\n9124: Apply a few clippy suggestions r=lnicola a=clemenswasser\n\n\n\nCo-authored-by: Clemens Wasser <clemens.wasser@gmail.com>", "tree": {"sha": "64b223398a3b62b8cc4e86239495a5b3e446441a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64b223398a3b62b8cc4e86239495a5b3e446441a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ea50bf04a1bd12999bd9e27558ac31988c7228", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguMZmCRBK7hj4Ov3rIwAA8l8IAB7hYSS9whMh2qoeH0oPnpa2\nErU38mb+ENb22hQfcmSwE7FPHxvhSy+4ImyALAbUNeruku8hmer6OZLMc40cKTx+\nBweKPzKztVcoDVAlSlQOfkSUhXxDAZbpl+oyKTMoo9EYkY7udgH8avrHaEgx7pbb\nr6mL2wAtRLxxgSlThsfZ/Ap2VGe2wovqlp+nnUChW1+1+SBfVLiodu/huuqi3uDL\nlYQonl+WyDGaS7qOfW/zKhOQT9O5eBH6US5H8SNYryuTq+DJySVmTKmolNcmJ6QV\nyGKmZ3Ok30NOnj5WbQhWFSnM+crckz6FCvxA7mXU7moILE3zobcye4yTTW4NsVA=\n=2ru/\n-----END PGP SIGNATURE-----\n", "payload": "tree 64b223398a3b62b8cc4e86239495a5b3e446441a\nparent c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93\nparent a1e650082b068919f9515330e6d0977c09af190f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622722150 +0000\ncommitter GitHub <noreply@github.com> 1622722150 +0000\n\nMerge #9124\n\n9124: Apply a few clippy suggestions r=lnicola a=clemenswasser\n\n\n\nCo-authored-by: Clemens Wasser <clemens.wasser@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ea50bf04a1bd12999bd9e27558ac31988c7228", "html_url": "https://github.com/rust-lang/rust/commit/48ea50bf04a1bd12999bd9e27558ac31988c7228", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ea50bf04a1bd12999bd9e27558ac31988c7228/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93", "html_url": "https://github.com/rust-lang/rust/commit/c7eb19ebf9d42cada8cb532c6b3cb0e11a531b93"}, {"sha": "a1e650082b068919f9515330e6d0977c09af190f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e650082b068919f9515330e6d0977c09af190f", "html_url": "https://github.com/rust-lang/rust/commit/a1e650082b068919f9515330e6d0977c09af190f"}], "stats": {"total": 103, "additions": 43, "deletions": 60}, "files": [{"sha": "18eb97f0d58a9ffdbb8bc153eb32dd96446581d6", "filename": "crates/mbe/src/benchmark.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fbenchmark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fbenchmark.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -187,7 +187,7 @@ fn invocation_fixtures(rules: &FxHashMap<String, MacroRules>) -> Vec<(String, tt\n             let a = 1664525;\n             let c = 1013904223;\n             *seed = usize::wrapping_add(usize::wrapping_mul(*seed, a), c);\n-            return *seed;\n+            *seed\n         }\n         fn make_ident(ident: &str) -> tt::TokenTree {\n             tt::Leaf::Ident(tt::Ident { id: tt::TokenId::unspecified(), text: SmolStr::new(ident) })"}, {"sha": "c982eb58f1fe823d9cd90fc6276946ffbead62e1", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -219,7 +219,7 @@ impl BindingsBuilder {\n         bindings\n     }\n \n-    fn build_inner(&self, bindings: &mut Bindings, link_nodes: &Vec<LinkNode<Rc<BindingKind>>>) {\n+    fn build_inner(&self, bindings: &mut Bindings, link_nodes: &[LinkNode<Rc<BindingKind>>]) {\n         let mut nodes = Vec::new();\n         self.collect_nodes(&link_nodes, &mut nodes);\n \n@@ -301,7 +301,7 @@ impl BindingsBuilder {\n \n     fn collect_nodes<'a>(\n         &'a self,\n-        link_nodes: &'a Vec<LinkNode<Rc<BindingKind>>>,\n+        link_nodes: &'a [LinkNode<Rc<BindingKind>>],\n         nodes: &mut Vec<&'a Rc<BindingKind>>,\n     ) {\n         link_nodes.iter().for_each(|it| match it {\n@@ -494,15 +494,8 @@ fn match_loop_inner<'t>(\n                         }\n                         Some(err) => {\n                             res.add_err(err);\n-                            match match_res.value {\n-                                Some(fragment) => {\n-                                    bindings_builder.push_fragment(\n-                                        &mut item.bindings,\n-                                        &name,\n-                                        fragment,\n-                                    );\n-                                }\n-                                _ => {}\n+                            if let Some(fragment) = match_res.value {\n+                                bindings_builder.push_fragment(&mut item.bindings, &name, fragment);\n                             }\n                             item.is_error = true;\n                             error_items.push(item);\n@@ -578,9 +571,9 @@ fn match_loop(pattern: &MetaTemplate, src: &tt::Subtree) -> Match {\n         );\n         stdx::always!(cur_items.is_empty());\n \n-        if error_items.len() > 0 {\n+        if !error_items.is_empty() {\n             error_recover_item = error_items.pop().map(|it| it.bindings);\n-        } else if eof_items.len() > 0 {\n+        } else if !eof_items.is_empty() {\n             error_recover_item = Some(eof_items[0].bindings.clone());\n         }\n \n@@ -793,7 +786,7 @@ impl<'a> TtIter<'a> {\n             _ => (),\n         }\n \n-        let tt = self.next().ok_or_else(|| ())?.clone();\n+        let tt = self.next().ok_or(())?.clone();\n         let punct = match tt {\n             tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) if punct.spacing == tt::Spacing::Joint => {\n                 punct"}, {"sha": "380a5074431c918f6ca180f89ef0a64bbe5147cc", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -295,8 +295,8 @@ fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n                 // Checks that no repetition which could match an empty token\n                 // https://github.com/rust-lang/rust/blob/a58b1ed44f5e06976de2bdc4d7dc81c36a96934f/src/librustc_expand/mbe/macro_rules.rs#L558\n \n-                if separator.is_none() {\n-                    if subtree.iter().all(|child_op| {\n+                if separator.is_none()\n+                    && subtree.iter().all(|child_op| {\n                         match child_op {\n                             Op::Var { kind, .. } => {\n                                 // vis is optional\n@@ -314,9 +314,9 @@ fn validate(pattern: &MetaTemplate) -> Result<(), ParseError> {\n                             Op::Subtree { .. } => {}\n                         }\n                         false\n-                    }) {\n-                        return Err(ParseError::RepetitionEmptyTokenTree);\n-                    }\n+                    })\n+                {\n+                    return Err(ParseError::RepetitionEmptyTokenTree);\n                 }\n                 validate(subtree)?\n             }"}, {"sha": "04c0d3e7543d026c809328c84429f914311dfed1", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -213,7 +213,7 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n     Ok(res)\n }\n \n-fn eat_fragment_kind<'a>(src: &mut TtIter<'a>, mode: Mode) -> Result<Option<SmolStr>, ParseError> {\n+fn eat_fragment_kind(src: &mut TtIter<'_>, mode: Mode) -> Result<Option<SmolStr>, ParseError> {\n     if let Mode::Pattern = mode {\n         src.expect_char(':').map_err(|()| err!(\"bad fragment specifier 1\"))?;\n         let ident = src.expect_ident().map_err(|()| err!(\"bad fragment specifier 1\"))?;"}, {"sha": "978c75747a207d3f75388be0a51596f55c4f28f4", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -243,8 +243,7 @@ trait TokenConvertor {\n     type Token: SrcToken;\n \n     fn go(&mut self) -> tt::Subtree {\n-        let mut subtree = tt::Subtree::default();\n-        subtree.delimiter = None;\n+        let mut subtree = tt::Subtree { delimiter: None, ..Default::default() };\n         while self.peek().is_some() {\n             self.collect_leaf(&mut subtree.token_trees);\n         }\n@@ -506,7 +505,7 @@ impl TokenConvertor for Convertor {\n \n     fn peek(&self) -> Option<Self::Token> {\n         if let Some((punct, mut offset)) = self.punct_offset.clone() {\n-            offset = offset + TextSize::of('.');\n+            offset += TextSize::of('.');\n             if usize::from(offset) < punct.text().len() {\n                 return Some(SynToken::Punch(punct, offset));\n             }"}, {"sha": "bd54f2442bfa3670a995c48c1564b2f342fd1582", "filename": "crates/mbe/src/tt_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fmbe%2Fsrc%2Ftt_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Ftt_iter.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -138,7 +138,7 @@ impl<'a> TtIter<'a> {\n             }\n         }\n         self.inner = self.inner.as_slice()[res.len()..].iter();\n-        if res.len() == 0 && err.is_none() {\n+        if res.is_empty() && err.is_none() {\n             err = Some(err!(\"no tokens consumed\"));\n         }\n         let res = match res.len() {"}, {"sha": "abdfca1feb59629effb0f7e832ddc5101fe195fe", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -252,12 +252,10 @@ fn closure_expr(p: &mut Parser) -> CompletedMarker {\n         // test lambda_ret_block\n         // fn main() { || -> i32 { 92 }(); }\n         block_expr(p);\n+    } else if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n     } else {\n-        if p.at_ts(EXPR_FIRST) {\n-            expr(p);\n-        } else {\n-            p.error(\"expected expression\");\n-        }\n+        p.error(\"expected expression\");\n     }\n     m.complete(p, CLOSURE_EXPR)\n }"}, {"sha": "304f47b3dc9fbdf43c985d84f783ffaa2d913e21", "filename": "crates/syntax/src/parsing/reparsing.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fparsing%2Freparsing.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -36,8 +36,8 @@ pub(crate) fn incremental_reparse(\n     None\n }\n \n-fn reparse_token<'node>(\n-    root: &'node SyntaxNode,\n+fn reparse_token(\n+    root: &SyntaxNode,\n     edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let prev_token = root.covering_element(edit.delete).as_token()?.clone();\n@@ -84,8 +84,8 @@ fn reparse_token<'node>(\n     }\n }\n \n-fn reparse_block<'node>(\n-    root: &'node SyntaxNode,\n+fn reparse_block(\n+    root: &SyntaxNode,\n     edit: &Indel,\n ) -> Option<(GreenNode, Vec<SyntaxError>, TextRange)> {\n     let (node, reparser) = find_reparsable_node(root, edit.delete)?;"}, {"sha": "9f24261717fc9ce6eb27ac1062617987d6f2e175", "filename": "crates/syntax/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fsyntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Fsyntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -236,7 +236,7 @@ where\n         }\n     });\n     dir_tests(&test_data_dir(), err_paths, \"rast\", |text, path| {\n-        if let Ok(_) = f(text) {\n+        if f(text).is_ok() {\n             panic!(\"'{:?}' successfully parsed when it should have errored\", path);\n         } else {\n             \"ERROR\\n\".to_owned()"}, {"sha": "ac5a9509d89106da32994ef5b5b0078c717efd40", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -238,14 +238,9 @@ fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n     let mut res = Vec::new();\n     let mut offset: TextSize = 0.into();\n     let marker: fn(char) -> bool = if line.contains('^') { |c| c == '^' } else { |c| c == '|' };\n-    loop {\n-        match line.find(marker) {\n-            Some(idx) => {\n-                offset += TextSize::try_from(idx).unwrap();\n-                line = &line[idx..];\n-            }\n-            None => break,\n-        };\n+    while let Some(idx) = line.find(marker) {\n+        offset += TextSize::try_from(idx).unwrap();\n+        line = &line[idx..];\n \n         let mut len = line.chars().take_while(|&it| it == '^').count();\n         let mut continuation = false;"}, {"sha": "b0b9e30db2a7f9a4c60a62e692847cd25f210e31", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -94,18 +94,16 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             support::children(&self.syntax)\n                         }\n                     }\n-                } else {\n-                    if let Some(token_kind) = field.token_kind() {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::token(&self.syntax, #token_kind)\n-                            }\n+                } else if let Some(token_kind) = field.token_kind() {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::token(&self.syntax, #token_kind)\n                         }\n-                    } else {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::child(&self.syntax)\n-                            }\n+                    }\n+                } else {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::child(&self.syntax)\n                         }\n                     }\n                 }"}, {"sha": "2384a746f300db245429841311bbbb9bc1fe877a", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -132,7 +132,7 @@ fn parse_changelog_line(s: &str) -> Option<PrInfo> {\n             return Some(PrInfo { kind, message: Some(message) });\n         }\n     };\n-    let res = PrInfo { kind, message };\n+    let res = PrInfo { message, kind };\n     Some(res)\n }\n \n@@ -152,7 +152,7 @@ fn parse_title_line(s: &str) -> PrInfo {\n                 PrKind::Skip => None,\n                 _ => Some(s[prefix.len()..].to_string()),\n             };\n-            return PrInfo { kind, message };\n+            return PrInfo { message, kind };\n         }\n     }\n     PrInfo { kind: PrKind::Other, message: Some(s.to_string()) }"}, {"sha": "618cf12fb10048a531880fed0406d86c63a170b2", "filename": "xtask/src/tidy.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ea50bf04a1bd12999bd9e27558ac31988c7228/xtask%2Fsrc%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Ftidy.rs?ref=48ea50bf04a1bd12999bd9e27558ac31988c7228", "patch": "@@ -33,7 +33,7 @@ fn check_code_formatting() {\n     let _e = pushenv(\"RUSTUP_TOOLCHAIN\", \"stable\");\n     crate::ensure_rustfmt().unwrap();\n     let res = cmd!(\"cargo fmt -- --check\").run();\n-    if !res.is_ok() {\n+    if res.is_err() {\n         let _ = cmd!(\"cargo fmt\").run();\n     }\n     res.unwrap()\n@@ -244,19 +244,19 @@ Zlib OR Apache-2.0 OR MIT\n         .map(|it| it.trim())\n         .map(|it| it[r#\"\"license\":\"#.len()..].trim_matches('\"'))\n         .collect::<Vec<_>>();\n-    licenses.sort();\n+    licenses.sort_unstable();\n     licenses.dedup();\n     if licenses != expected {\n         let mut diff = String::new();\n \n-        diff += &format!(\"New Licenses:\\n\");\n+        diff.push_str(\"New Licenses:\\n\");\n         for &l in licenses.iter() {\n             if !expected.contains(&l) {\n                 diff += &format!(\"  {}\\n\", l)\n             }\n         }\n \n-        diff += &format!(\"\\nMissing Licenses:\\n\");\n+        diff.push_str(\"\\nMissing Licenses:\\n\");\n         for &l in expected.iter() {\n             if !licenses.contains(&l) {\n                 diff += &format!(\"  {}\\n\", l)"}]}