{"sha": "afab67e69c39027fb99878751309d4050324beef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYWI2N2U2OWMzOTAyN2ZiOTk4Nzg3NTEzMDlkNDA1MDMyNGJlZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T07:47:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T07:57:36Z"}, "message": "Allow negative bytes\n\nGotta be optimistic about those memory usage optimizations", "tree": {"sha": "f21490b1f28db69d5d8132c245cf1df7ee1e48bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21490b1f28db69d5d8132c245cf1df7ee1e48bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afab67e69c39027fb99878751309d4050324beef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afab67e69c39027fb99878751309d4050324beef", "html_url": "https://github.com/rust-lang/rust/commit/afab67e69c39027fb99878751309d4050324beef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afab67e69c39027fb99878751309d4050324beef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dae99b66611759ba48fd164646f077d3e8515dad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dae99b66611759ba48fd164646f077d3e8515dad", "html_url": "https://github.com/rust-lang/rust/commit/dae99b66611759ba48fd164646f077d3e8515dad"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "22b61e4a281d1c55b869d27d94b98795dc90a9c7", "filename": "crates/ra_prof/src/memory_usage.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/afab67e69c39027fb99878751309d4050324beef/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab67e69c39027fb99878751309d4050324beef/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Fmemory_usage.rs?ref=afab67e69c39027fb99878751309d4050324beef", "patch": "@@ -3,16 +3,30 @@ use std::fmt;\n \n use cfg_if::cfg_if;\n \n+#[derive(Copy, Clone)]\n pub struct MemoryUsage {\n     pub allocated: Bytes,\n }\n \n+impl fmt::Display for MemoryUsage {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}\", self.allocated)\n+    }\n+}\n+\n+impl std::ops::Sub for MemoryUsage {\n+    type Output = MemoryUsage;\n+    fn sub(self, rhs: MemoryUsage) -> MemoryUsage {\n+        MemoryUsage { allocated: self.allocated - rhs.allocated }\n+    }\n+}\n+\n impl MemoryUsage {\n     pub fn current() -> MemoryUsage {\n         cfg_if! {\n             if #[cfg(target_os = \"linux\")] {\n                 // Note: This is incredibly slow.\n-                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as usize;\n+                let alloc = unsafe { libc::mallinfo() }.uordblks as u32 as isize;\n                 MemoryUsage { allocated: Bytes(alloc) }\n             } else {\n                 MemoryUsage { allocated: Bytes(0) }\n@@ -21,17 +35,11 @@ impl MemoryUsage {\n     }\n }\n \n-impl fmt::Display for MemoryUsage {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{}\", self.allocated)\n-    }\n-}\n-\n #[derive(Default, PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy)]\n-pub struct Bytes(usize);\n+pub struct Bytes(isize);\n \n impl Bytes {\n-    pub fn megabytes(self) -> usize {\n+    pub fn megabytes(self) -> isize {\n         self.0 / 1024 / 1024\n     }\n }\n@@ -41,10 +49,10 @@ impl fmt::Display for Bytes {\n         let bytes = self.0;\n         let mut value = bytes;\n         let mut suffix = \"b\";\n-        if value > 4096 {\n+        if value.abs() > 4096 {\n             value /= 1024;\n             suffix = \"kb\";\n-            if value > 4096 {\n+            if value.abs() > 4096 {\n                 value /= 1024;\n                 suffix = \"mb\";\n             }\n@@ -55,7 +63,7 @@ impl fmt::Display for Bytes {\n \n impl std::ops::AddAssign<usize> for Bytes {\n     fn add_assign(&mut self, x: usize) {\n-        self.0 += x;\n+        self.0 += x as isize;\n     }\n }\n "}, {"sha": "cf0d82b62c1f007d920fc5ca07e50256b7700810", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/afab67e69c39027fb99878751309d4050324beef/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afab67e69c39027fb99878751309d4050324beef/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=afab67e69c39027fb99878751309d4050324beef", "patch": "@@ -111,11 +111,7 @@ pub fn analysis_stats(\n     eprintln!(\"Total declarations: {}\", num_decls);\n     eprintln!(\"Total functions: {}\", funcs.len());\n     let item_collection_memory = ra_prof::memory_usage();\n-    eprintln!(\n-        \"Item Collection: {:?}, {}\",\n-        analysis_time.elapsed(),\n-        item_collection_memory.allocated\n-    );\n+    eprintln!(\"Item Collection: {:?}, {}\", analysis_time.elapsed(), item_collection_memory);\n \n     if randomize {\n         shuffle(&mut rng, &mut funcs);\n@@ -140,7 +136,7 @@ pub fn analysis_stats(\n         eprintln!(\n             \"Parallel Inference: {:?}, {}\",\n             inference_time.elapsed(),\n-            ra_prof::memory_usage().allocated\n+            ra_prof::memory_usage()\n         );\n     }\n \n@@ -297,11 +293,7 @@ pub fn analysis_stats(\n \n     let inference_time = inference_time.elapsed();\n     let total_memory = ra_prof::memory_usage();\n-    eprintln!(\n-        \"Inference: {:?}, {}\",\n-        inference_time,\n-        total_memory.allocated - item_collection_memory.allocated\n-    );\n+    eprintln!(\"Inference: {:?}, {}\", inference_time, total_memory - item_collection_memory);\n \n     let analysis_time = analysis_time.elapsed();\n     eprintln!(\"Total: {:?}, {}\", analysis_time, total_memory);"}]}