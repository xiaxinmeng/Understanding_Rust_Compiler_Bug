{"sha": "c7592803d9b6da9e3d3a89342104de6bb4c59334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NTkyODAzZDliNmRhOWUzZDNhODkzNDIxMDRkZTZiYjRjNTkzMzQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-20T01:22:41Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-20T01:24:27Z"}, "message": "Compute typestates for FRU exprs correctly, plus a bit of cleanup\n\nThe code in Issue 948 was causing typestate to diverge because\nit was using the prestate for the whole expression -- not the post-\nstate for the fields list -- as the prestate for the record base\nexpression. Fixed.\n\nCloses #948", "tree": {"sha": "80687c4a88a2e017507d53c59b73ade54456e1ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80687c4a88a2e017507d53c59b73ade54456e1ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7592803d9b6da9e3d3a89342104de6bb4c59334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7592803d9b6da9e3d3a89342104de6bb4c59334", "html_url": "https://github.com/rust-lang/rust/commit/c7592803d9b6da9e3d3a89342104de6bb4c59334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7592803d9b6da9e3d3a89342104de6bb4c59334/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b58f2b7bfb4e1a48540c5fd9d444f2a45590da35", "url": "https://api.github.com/repos/rust-lang/rust/commits/b58f2b7bfb4e1a48540c5fd9d444f2a45590da35", "html_url": "https://github.com/rust-lang/rust/commit/b58f2b7bfb4e1a48540c5fd9d444f2a45590da35"}], "stats": {"total": 91, "additions": 41, "deletions": 50}, "files": [{"sha": "168ca87f6db488699aa50a5b689d007310440fad", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 36, "deletions": 50, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c7592803d9b6da9e3d3a89342104de6bb4c59334/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7592803d9b6da9e3d3a89342104de6bb4c59334/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=c7592803d9b6da9e3d3a89342104de6bb4c59334", "patch": "@@ -10,7 +10,7 @@ import syntax::ast::*;\n import syntax::ast_util::*;\n import syntax::codemap::span;\n import middle::ty::{expr_ty, type_is_bot};\n-import util::common::{field_exprs, has_nonlocal_exits};\n+import util::common::*;\n import driver::session::session;\n \n fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n@@ -384,20 +384,19 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n                 set_poststate_ann(fcx.ccx, e.id, block_poststate(fcx.ccx, b));\n       }\n       expr_rec(fields, maybe_base) {\n+        let exs = field_exprs(fields);\n         let changed =\n             find_pre_post_state_exprs(fcx, pres, e.id,\n                                       vec::init_elt(init_assign,\n                                                     vec::len(fields)),\n-                                      field_exprs(fields), return_val);\n-        alt maybe_base {\n-          none {/* do nothing */ }\n-          some(base) {\n-            changed |=\n-                find_pre_post_state_expr(fcx, pres, base) |\n-                    set_poststate_ann(fcx.ccx, e.id,\n-                                      expr_poststate(fcx.ccx, base));\n-          }\n-        }\n+                                      exs, return_val);\n+\n+        let base_pres = alt vec::last(exs) { none { pres }\n+                          some(f) { expr_poststate(fcx.ccx, f) }};\n+        option::may(maybe_base, {|base|\n+            changed |= find_pre_post_state_expr(fcx, base_pres, base) |\n+              set_poststate_ann(fcx.ccx, e.id,\n+                                expr_poststate(fcx.ccx, base))});\n         ret changed;\n       }\n       expr_tup(elts) {\n@@ -591,12 +590,8 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         }\n         ret set_prestate_ann(fcx.ccx, e.id, pres) |\n                 set_poststate_ann(fcx.ccx, e.id, post) |\n-                alt maybe_fail_val {\n-                  none { false }\n-                  some(fail_val) {\n-                    find_pre_post_state_expr(fcx, pres, fail_val)\n-                  }\n-                }\n+                option::maybe(false, maybe_fail_val, {|fail_val|\n+                        find_pre_post_state_expr(fcx, pres, fail_val)});\n       }\n       expr_assert(p) {\n         ret find_pre_post_state_sub(fcx, pres, p, e.id, none);\n@@ -617,18 +612,14 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n     let stmt_ann = stmt_to_ann(fcx.ccx, *s);\n \n-    /*\n-        log(error, (\"[\" + fcx.name + \"]\"));\n-        #error(\"*At beginning: stmt = \");\n-        log_stmt_err(*s);\n-        #error(\"*prestate = \");\n-        log_tritv_err(fcx, stmt_ann.states.prestate);\n-        #error(\"*poststate =\");\n-        log_tritv_err(fcx, stmt_ann.states.poststate);\n-        #error(\"pres = \");\n-        log_tritv_err(fcx, pres);\n-    */\n-\n+    log(debug, \"[\" + fcx.name + \"]\");\n+    #debug(\"*At beginning: stmt = \");\n+    log_stmt(*s);\n+    #debug(\"*prestate = \");\n+    log(debug, tritv::to_str(stmt_ann.states.prestate));\n+    #debug(\"*poststate =\");\n+    log(debug, tritv::to_str(stmt_ann.states.prestate));\n+    \n     alt s.node {\n       stmt_decl(adecl, id) {\n         alt adecl.node {\n@@ -643,16 +634,14 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n             let changed =\n                 set_poststate(stmt_ann, c_and_p.post) | c_and_p.changed;\n \n-            /*\n-                            #error(\"Summary: stmt = \");\n-                            log_stmt_err(*s);\n-                            #error(\"prestate = \");\n-                            log_tritv_err(fcx, stmt_ann.states.prestate);\n-                            #error(\"poststate =\");\n-                            log_tritv_err(fcx, stmt_ann.states.poststate);\n-                            #error(\"changed =\");\n-                            log(error, changed);\n-            */\n+            #debug(\"Summary: stmt = \");\n+            log_stmt(*s);\n+            #debug(\"prestate = \");\n+            log(debug, tritv::to_str(stmt_ann.states.prestate));\n+            #debug(\"poststate =\");\n+            log(debug, tritv::to_str(stmt_ann.states.prestate));\n+            #debug(\"changed =\");\n+            log(debug, changed);\n \n             ret changed;\n           }\n@@ -668,17 +657,14 @@ fn find_pre_post_state_stmt(fcx: fn_ctxt, pres: prestate, s: @stmt) -> bool {\n                 set_prestate(stmt_ann, expr_prestate(fcx.ccx, ex)) |\n                 set_poststate(stmt_ann, expr_poststate(fcx.ccx, ex));\n \n-        /*\n-        #error(\"Finally:\");\n-        log_stmt_err(*s);\n-        log_err(\"prestate = \");\n-        log_err(bitv::to_str(stmt_ann.states.prestate));\n-        log_tritv_err(fcx, stmt_ann.states.prestate);\n-        log_err(\"poststate =\");\n-        log_err(bitv::to_str(stmt_ann.states.poststate));\n-        log_tritv_err(fcx, stmt_ann.states.poststate);\n-        log_err(\"changed =\");\n-        */\n+\n+        #debug(\"Finally:\");\n+        log_stmt(*s);\n+        log(debug, \"prestate = \");\n+        log(debug, tritv::to_str(stmt_ann.states.prestate));\n+        #debug(\"poststate =\");\n+        log(debug, (tritv::to_str(stmt_ann.states.poststate)));\n+        #debug(\"changed =\");\n \n         ret changed;\n       }"}, {"sha": "78fe81f698f3c5f16281bd7d6205d5c9e20bad31", "filename": "src/test/run-fail/issue-948.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7592803d9b6da9e3d3a89342104de6bb4c59334/src%2Ftest%2Frun-fail%2Fissue-948.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7592803d9b6da9e3d3a89342104de6bb4c59334/src%2Ftest%2Frun-fail%2Fissue-948.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-948.rs?ref=c7592803d9b6da9e3d3a89342104de6bb4c59334", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern:beep boop\n+fn main() {\n+    let origin = {x: 0, y: 0};\n+    let f = {x: (fail \"beep boop\") with origin};\n+}"}]}