{"sha": "00319519bba1fa1c2036aef70607428da9519155", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzE5NTE5YmJhMWZhMWMyMDM2YWVmNzA2MDc0MjhkYTk1MTkxNTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T20:43:39Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Store typed Passes", "tree": {"sha": "d8f559a45cf8ebfdabc4bcc142e68aea4fa805d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8f559a45cf8ebfdabc4bcc142e68aea4fa805d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00319519bba1fa1c2036aef70607428da9519155", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00319519bba1fa1c2036aef70607428da9519155", "html_url": "https://github.com/rust-lang/rust/commit/00319519bba1fa1c2036aef70607428da9519155", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00319519bba1fa1c2036aef70607428da9519155/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be2857a6cc551f63cd79d9d59322fbb2ce9103d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be2857a6cc551f63cd79d9d59322fbb2ce9103d", "html_url": "https://github.com/rust-lang/rust/commit/6be2857a6cc551f63cd79d9d59322fbb2ce9103d"}], "stats": {"total": 133, "additions": 65, "deletions": 68}, "files": [{"sha": "b281505956d6ab3a807377b310da379ad76b972b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -133,6 +133,7 @@ pub struct Crate {\n     // Only here so that they can be filtered through the rustdoc passes.\n     pub external_traits: Rc<RefCell<FxHashMap<DefId, Trait>>>,\n     pub masked_crates: FxHashSet<CrateNum>,\n+    pub collapsed: bool,\n }\n \n impl Clean<Crate> for hir::Crate {\n@@ -221,6 +222,7 @@ impl Clean<Crate> for hir::Crate {\n             primitives,\n             external_traits: cx.external_traits.clone(),\n             masked_crates,\n+            collapsed: false,\n         }\n     }\n }"}, {"sha": "2be67d707fe141ef8fd30cad736929db52ad21ed", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -220,22 +220,22 @@ impl Options {\n                 println!(\"{:>20} - {}\", pass.name, pass.description);\n             }\n             println!(\"\\nDefault passes for rustdoc:\");\n-            for &name in passes::DEFAULT_PASSES {\n-                println!(\"{:>20}\", name);\n+            for pass in passes::DEFAULT_PASSES {\n+                println!(\"{:>20}\", pass.name);\n             }\n             println!(\"\\nPasses run with `--document-private-items`:\");\n-            for &name in passes::DEFAULT_PRIVATE_PASSES {\n-                println!(\"{:>20}\", name);\n+            for pass in passes::DEFAULT_PRIVATE_PASSES {\n+                println!(\"{:>20}\", pass.name);\n             }\n \n             if nightly_options::is_nightly_build() {\n                 println!(\"\\nPasses run with `--show-coverage`:\");\n-                for &name in passes::DEFAULT_COVERAGE_PASSES {\n-                    println!(\"{:>20}\", name);\n+                for pass in passes::DEFAULT_COVERAGE_PASSES {\n+                    println!(\"{:>20}\", pass.name);\n                 }\n                 println!(\"\\nPasses run with `--show-coverage --document-private-items`:\");\n-                for &name in passes::PRIVATE_COVERAGE_PASSES {\n-                    println!(\"{:>20}\", name);\n+                for pass in passes::PRIVATE_COVERAGE_PASSES {\n+                    println!(\"{:>20}\", pass.name);\n                 }\n             }\n "}, {"sha": "adbe4b469e8d03f043877b35dae36d2d4bd51cff", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -223,7 +223,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n     )\n }\n \n-pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions, Vec<String>) {\n+pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOptions) {\n     // Parse, resolve, and typecheck the given crate.\n \n     let RustdocOptions {\n@@ -427,8 +427,8 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                         },\n                         _ => continue,\n                     };\n-                    for p in value.as_str().split_whitespace() {\n-                        sink.push(p.to_string());\n+                    for name in value.as_str().split_whitespace() {\n+                        sink.push(name.to_string());\n                     }\n                 }\n \n@@ -439,25 +439,26 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n                 }\n             }\n \n-            let mut passes: Vec<String> =\n-                passes::defaults(default_passes).iter().map(|p| p.to_string()).collect();\n-            passes.extend(manual_passes);\n+            let passes = passes::defaults(default_passes).iter().chain(manual_passes.into_iter()\n+                .flat_map(|name| {\n+                    if let Some(pass) = passes::find_pass(&name) {\n+                        Some(pass)\n+                    } else {\n+                        error!(\"unknown pass {}, skipping\", name);\n+                        None\n+                    }\n+                }));\n \n             info!(\"Executing passes\");\n \n-            for pass_name in &passes {\n-                match passes::find_pass(pass_name).map(|p| p.pass) {\n-                    Some(pass) => {\n-                        debug!(\"running pass {}\", pass_name);\n-                        krate = pass(krate, &ctxt);\n-                    }\n-                    None => error!(\"unknown pass {}, skipping\", *pass_name),\n-                }\n+            for pass in passes {\n+                debug!(\"running pass {}\", pass.name);\n+                krate = (pass.pass)(krate, &ctxt);\n             }\n \n             ctxt.sess().abort_if_errors();\n \n-            (krate, ctxt.renderinfo.into_inner(), render_options, passes)\n+            (krate, ctxt.renderinfo.into_inner(), render_options)\n         })\n     })\n }"}, {"sha": "eb88c72da9eeb2a9e158e22aa17489547de32b34", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -185,8 +185,8 @@ struct SharedContext {\n     pub include_sources: bool,\n     /// The local file sources we've emitted and their respective url-paths.\n     pub local_sources: FxHashMap<PathBuf, String>,\n-    /// All the passes that were run on this crate.\n-    pub passes: FxHashSet<String>,\n+    /// Whether the collapsed pass ran\n+    pub collapsed: bool,\n     /// The base-URL of the issue tracker for when an item has been tagged with\n     /// an issue number.\n     pub issue_tracker_base_url: Option<String>,\n@@ -229,15 +229,10 @@ impl SharedContext {\n }\n \n impl SharedContext {\n-    /// Returns `true` if the `collapse-docs` pass was run on this crate.\n-    pub fn was_collapsed(&self) -> bool {\n-        self.passes.contains(\"collapse-docs\")\n-    }\n-\n     /// Based on whether the `collapse-docs` pass was run, return either the `doc_value` or the\n     /// `collapsed_doc_value` of the given item.\n     pub fn maybe_collapsed_doc_value<'a>(&self, item: &'a clean::Item) -> Option<Cow<'a, str>> {\n-        if self.was_collapsed() {\n+        if self.collapsed {\n             item.collapsed_doc_value().map(|s| s.into())\n         } else {\n             item.doc_value().map(|s| s.into())\n@@ -526,7 +521,6 @@ pub fn initial_ids() -> Vec<String> {\n /// Generates the documentation for `crate` into the directory `dst`\n pub fn run(mut krate: clean::Crate,\n            options: RenderOptions,\n-           passes: FxHashSet<String>,\n            renderinfo: RenderInfo,\n            diag: &errors::Handler,\n            edition: Edition) -> Result<(), Error> {\n@@ -557,8 +551,8 @@ pub fn run(mut krate: clean::Crate,\n     };\n     let mut errors = Arc::new(ErrorStorage::new());\n     let mut scx = SharedContext {\n+        collapsed: krate.collapsed,\n         src_root,\n-        passes,\n         include_sources: true,\n         local_sources: Default::default(),\n         issue_tracker_base_url: None,"}, {"sha": "e63a76614bc999b2c64c47791a7870d2117dbf95", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -80,7 +80,6 @@ struct Output {\n     krate: clean::Crate,\n     renderinfo: html::render::RenderInfo,\n     renderopts: config::RenderOptions,\n-    passes: Vec<String>,\n }\n \n pub fn main() {\n@@ -419,14 +418,13 @@ fn main_options(options: config::Options) -> i32 {\n             return rustc_driver::EXIT_SUCCESS;\n         }\n \n-        let Output { krate, passes, renderinfo, renderopts } = out;\n+        let Output { krate, renderinfo, renderopts } = out;\n         info!(\"going to format\");\n         let (error_format, treat_err_as_bug, ui_testing, edition) = diag_opts;\n         let diag = core::new_handler(error_format, None, treat_err_as_bug, ui_testing);\n         match html::render::run(\n             krate,\n             renderopts,\n-            passes.into_iter().collect(),\n             renderinfo,\n             &diag,\n             edition,\n@@ -459,7 +457,7 @@ where R: 'static + Send,\n     let result = rustc_driver::report_ices_to_stderr_if_any(move || {\n         let crate_name = options.crate_name.clone();\n         let crate_version = options.crate_version.clone();\n-        let (mut krate, renderinfo, renderopts, passes) = core::run_core(options);\n+        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n \n         info!(\"finished with rustc\");\n \n@@ -473,7 +471,6 @@ where R: 'static + Send,\n             krate: krate,\n             renderinfo: renderinfo,\n             renderopts,\n-            passes: passes\n         })).unwrap();\n     });\n "}, {"sha": "31288345ce57b1b6a735311ddfa8385b15a4427b", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -30,7 +30,9 @@ impl DocFragment {\n }\n \n pub fn collapse_docs(krate: clean::Crate, _: &DocContext<'_>) -> clean::Crate {\n-    Collapser.fold_crate(krate)\n+    let mut krate = Collapser.fold_crate(krate);\n+    krate.collapsed = true;\n+    krate\n }\n \n struct Collapser;"}, {"sha": "641a6df2214462ed6a51db76a8284a200b21bcf7", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 30, "deletions": 29, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00319519bba1fa1c2036aef70607428da9519155/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=00319519bba1fa1c2036aef70607428da9519155", "patch": "@@ -57,8 +57,9 @@ pub struct Pass {\n     pub description: &'static str,\n }\n \n+\n /// The full list of passes.\n-pub const PASSES: &'static [Pass] = &[\n+pub const PASSES: &[Pass] = &[\n     CHECK_PRIVATE_ITEMS_DOC_TESTS,\n     STRIP_HIDDEN,\n     UNINDENT_COMMENTS,\n@@ -73,43 +74,43 @@ pub const PASSES: &'static [Pass] = &[\n ];\n \n /// The list of passes run by default.\n-pub const DEFAULT_PASSES: &[&str] = &[\n-    \"collect-trait-impls\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n-    \"check-private-items-doc-tests\",\n-    \"strip-hidden\",\n-    \"strip-private\",\n-    \"collect-intra-doc-links\",\n-    \"check-code-block-syntax\",\n-    \"propagate-doc-cfg\",\n+pub const DEFAULT_PASSES: &[Pass] = &[\n+    COLLECT_TRAIT_IMPLS,\n+    COLLAPSE_DOCS,\n+    UNINDENT_COMMENTS,\n+    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n+    STRIP_HIDDEN,\n+    STRIP_PRIVATE,\n+    COLLECT_INTRA_DOC_LINKS,\n+    CHECK_CODE_BLOCK_SYNTAX,\n+    PROPAGATE_DOC_CFG,\n ];\n \n /// The list of default passes run with `--document-private-items` is passed to rustdoc.\n-pub const DEFAULT_PRIVATE_PASSES: &[&str] = &[\n-    \"collect-trait-impls\",\n-    \"collapse-docs\",\n-    \"unindent-comments\",\n-    \"check-private-items-doc-tests\",\n-    \"strip-priv-imports\",\n-    \"collect-intra-doc-links\",\n-    \"check-code-block-syntax\",\n-    \"propagate-doc-cfg\",\n+pub const DEFAULT_PRIVATE_PASSES: &[Pass] = &[\n+    COLLECT_TRAIT_IMPLS,\n+    COLLAPSE_DOCS,\n+    UNINDENT_COMMENTS,\n+    CHECK_PRIVATE_ITEMS_DOC_TESTS,\n+    STRIP_PRIV_IMPORTS,\n+    COLLECT_INTRA_DOC_LINKS,\n+    CHECK_CODE_BLOCK_SYNTAX,\n+    PROPAGATE_DOC_CFG,\n ];\n \n /// The list of default passes run when `--doc-coverage` is passed to rustdoc.\n-pub const DEFAULT_COVERAGE_PASSES: &'static [&'static str] = &[\n-    \"collect-trait-impls\",\n-    \"strip-hidden\",\n-    \"strip-private\",\n-    \"calculate-doc-coverage\",\n+pub const DEFAULT_COVERAGE_PASSES: &[Pass] = &[\n+    COLLECT_TRAIT_IMPLS,\n+    STRIP_HIDDEN,\n+    STRIP_PRIVATE,\n+    CALCULATE_DOC_COVERAGE,\n ];\n \n /// The list of default passes run when `--doc-coverage --document-private-items` is passed to\n /// rustdoc.\n-pub const PRIVATE_COVERAGE_PASSES: &'static [&'static str] = &[\n-    \"collect-trait-impls\",\n-    \"calculate-doc-coverage\",\n+pub const PRIVATE_COVERAGE_PASSES: &[Pass] = &[\n+    COLLECT_TRAIT_IMPLS,\n+    CALCULATE_DOC_COVERAGE,\n ];\n \n /// A shorthand way to refer to which set of passes to use, based on the presence of\n@@ -124,7 +125,7 @@ pub enum DefaultPassOption {\n }\n \n /// Returns the given default set of passes.\n-pub fn defaults(default_set: DefaultPassOption) -> &'static [&'static str] {\n+pub fn defaults(default_set: DefaultPassOption) -> &'static [Pass] {\n     match default_set {\n         DefaultPassOption::Default => DEFAULT_PASSES,\n         DefaultPassOption::Private => DEFAULT_PRIVATE_PASSES,"}]}