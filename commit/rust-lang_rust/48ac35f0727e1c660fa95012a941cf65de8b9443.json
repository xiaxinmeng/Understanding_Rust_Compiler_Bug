{"sha": "48ac35f0727e1c660fa95012a941cf65de8b9443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YWMzNWYwNzI3ZTFjNjYwZmE5NTAxMmE5NDFjZjY1ZGU4Yjk0NDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-06T10:39:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-06T10:41:45Z"}, "message": "panic_impl is another way to panic", "tree": {"sha": "3851ed58689db26041c55135fce1bdc57dd6045d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3851ed58689db26041c55135fce1bdc57dd6045d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ac35f0727e1c660fa95012a941cf65de8b9443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ac35f0727e1c660fa95012a941cf65de8b9443", "html_url": "https://github.com/rust-lang/rust/commit/48ac35f0727e1c660fa95012a941cf65de8b9443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ac35f0727e1c660fa95012a941cf65de8b9443/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "661ed7b82dc7b9ab597a274f10055f58f9db6f4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/661ed7b82dc7b9ab597a274f10055f58f9db6f4b", "html_url": "https://github.com/rust-lang/rust/commit/661ed7b82dc7b9ab597a274f10055f58f9db6f4b"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "abb239ad7d62792d04a52a0ed066537eb45d9d57", "filename": "src/fn_call.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/48ac35f0727e1c660fa95012a941cf65de8b9443/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ac35f0727e1c660fa95012a941cf65de8b9443/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=48ac35f0727e1c660fa95012a941cf65de8b9443", "patch": "@@ -39,12 +39,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         if this.tcx.is_foreign_item(instance.def_id()) {\n             // An external function that we cannot find MIR for, but we can still run enough\n             // of them to make miri viable.\n-            this.emulate_foreign_item(\n-                instance.def_id(),\n-                args,\n-                dest.unwrap(),\n-                ret.unwrap(),\n-            )?;\n+            this.emulate_foreign_item(instance.def_id(), args, dest, ret)?;\n             // `goto_block` already handled\n             return Ok(None);\n         }\n@@ -59,8 +54,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         &mut self,\n         def_id: DefId,\n         args: &[OpTy<'tcx, Borrow>],\n-        dest: PlaceTy<'tcx, Borrow>,\n-        ret: mir::BasicBlock,\n+        dest: Option<PlaceTy<'tcx, Borrow>>,\n+        ret: Option<mir::BasicBlock>,\n     ) -> EvalResult<'tcx> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n@@ -70,9 +65,23 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n         };\n         // Strip linker suffixes (seen on 32bit macOS)\n         let link_name = link_name.trim_end_matches(\"$UNIX2003\");\n-\n         let tcx = &{this.tcx.tcx};\n \n+        // first: functions that could diverge\n+        match &link_name[..] {\n+            \"__rust_start_panic\" | \"panic_impl\" => {\n+                return err!(MachineError(\"the evaluated program panicked\".to_string()));\n+            }\n+            _ => if dest.is_none() {\n+                return err!(Unimplemented(\n+                    format!(\"can't call diverging foreign function: {}\", link_name),\n+                ));\n+            }\n+        }\n+\n+        // now: functions that assume a ret and dest\n+        let dest = dest.expect(\"we already checked for a dest\");\n+        let ret = ret.expect(\"dest is Some but ret is None\");\n         match &link_name[..] {\n             \"malloc\" => {\n                 let size = this.read_scalar(args[0])?.to_usize(this)?;\n@@ -245,9 +254,6 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 return Ok(());\n             }\n \n-            \"__rust_start_panic\" =>\n-                return err!(MachineError(\"the evaluated program panicked\".to_string())),\n-\n             \"memcmp\" => {\n                 let left = this.read_scalar(args[0])?.not_undef()?;\n                 let right = this.read_scalar(args[1])?.not_undef()?;"}, {"sha": "1163c8708287cb51eb3f0df2ee47e8a9c069cce1", "filename": "tests/compile-fail/panic1.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic1.rs?ref=48ac35f0727e1c660fa95012a941cf65de8b9443", "patch": "@@ -1,5 +1,5 @@\n //error-pattern: the evaluated program panicked\n \n fn main() {\n-    assert_eq!(5, 6);\n+    std::panic!(\"panicking from libstd\");\n }", "previous_filename": "tests/compile-fail/panic.rs"}, {"sha": "e643e69224139592d09eccb11463b15c56af0f38", "filename": "tests/compile-fail/panic2.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic2.rs?ref=48ac35f0727e1c660fa95012a941cf65de8b9443", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    std::panic!(\"{}-panicking from libstd\", 42);\n+}"}, {"sha": "b22f95d9c69d1431188682d82fab95e16f2e3ed6", "filename": "tests/compile-fail/panic3.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic3.rs?ref=48ac35f0727e1c660fa95012a941cf65de8b9443", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    core::panic!(\"panicking from libcore\");\n+}"}, {"sha": "449e716e161cf7af647859be9836d8cd22848eee", "filename": "tests/compile-fail/panic4.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ac35f0727e1c660fa95012a941cf65de8b9443/tests%2Fcompile-fail%2Fpanic4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic4.rs?ref=48ac35f0727e1c660fa95012a941cf65de8b9443", "patch": "@@ -0,0 +1,5 @@\n+//error-pattern: the evaluated program panicked\n+\n+fn main() {\n+    core::panic!(\"{}-panicking from libcore\", 42);\n+}"}]}