{"sha": "15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZWY2YzEyZDliZGJiZDQxZGI3YzNkZjhmYjZjM2VmZDhlODQ0OTM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T21:24:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T21:24:47Z"}, "message": "Modify _io's fd_buf_reader to do something slightly more useful: produce multiple buffers on demand.", "tree": {"sha": "7c05956f3e3ad16445fb7d2d8b1103c3d9dd731b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c05956f3e3ad16445fb7d2d8b1103c3d9dd731b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "html_url": "https://github.com/rust-lang/rust/commit/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d6aacb822c4e5d7e2d3c743ffe54de7acbad86", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d6aacb822c4e5d7e2d3c743ffe54de7acbad86", "html_url": "https://github.com/rust-lang/rust/commit/40d6aacb822c4e5d7e2d3c743ffe54de7acbad86"}], "stats": {"total": 46, "additions": 33, "deletions": 13}, "files": [{"sha": "d41ab1327aa7777b9f4e23f6c611df614c59c87a", "filename": "src/lib/_io.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "patch": "@@ -1,26 +1,46 @@\n-type buf_reader = obj {\n-  fn read(vec[u8] buf) -> uint;\n+type buf_reader = unsafe obj {\n+  fn read() -> vec[u8];\n };\n \n-type buf_writer = obj {\n-  fn write(vec[u8] buf) -> uint;\n-};\n+fn default_bufsz() -> uint {\n+  ret uint(4096);\n+}\n+\n+fn new_buf() -> vec[u8] {\n+  let vec[u8] v = vec();\n+  let uint i = default_bufsz();\n+  while (i > uint(0)) {\n+    i -= uint(1);\n+    v += vec(u8(0));\n+  }\n+  // FIXME (issue #93): should be:\n+  // ret _vec.alloc[u8](default_bufsz());\n+}\n+\n+fn new_buf_reader(str s) -> buf_reader {\n \n-fn mk_buf_reader(str s) -> buf_reader {\n+  unsafe obj fd_buf_reader(int fd, mutable vec[u8] buf) {\n+\n+    fn read() -> vec[u8] {\n+\n+      // Ensure our buf is singly-referenced.\n+      if (_vec.rustrt.refcount[u8](buf) != uint(1)) {\n+        buf = new_buf();\n+      }\n+\n+      auto len = _vec.len[u8](buf);\n+      auto vbuf = _vec.buf[u8](buf);\n+      auto count = os.libc.read(fd, vbuf, len);\n \n-  obj fd_reader(int fd) {\n-    fn read(vec[u8] v) -> uint {\n-      auto len = _vec.len[u8](v);\n-      auto buf = _vec.buf[u8](v);\n-      auto count = os.libc.read(fd, buf, len);\n       if (count < 0) {\n         log \"error filling buffer\";\n         log sys.rustrt.last_os_error();\n         fail;\n       } else {\n-        ret uint(count);\n+        ret buf;\n       }\n     }\n+\n     drop {\n       os.libc.close(fd);\n     }\n@@ -32,5 +52,5 @@ fn mk_buf_reader(str s) -> buf_reader {\n     log sys.rustrt.last_os_error();\n     fail;\n   }\n-  ret fd_reader(fd);\n+  ret fd_buf_reader(fd, new_buf());\n }"}]}