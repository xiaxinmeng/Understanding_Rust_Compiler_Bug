{"sha": "f9cc16652746285a765eea5db14d1a6ead04bab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5Y2MxNjY1Mjc0NjI4NWE3NjVlZWE1ZGIxNGQxYTZlYWQwNGJhYjY=", "commit": {"author": {"name": "meh", "email": "meh@schizofreni.co", "date": "2016-10-29T20:25:33Z"}, "committer": {"name": "meh", "email": "meh@schizofreni.co", "date": "2016-11-06T17:20:38Z"}, "message": "Fix terminfo database search path", "tree": {"sha": "247bedc1bca67cbb9acdf3df0729f5a55aec1166", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247bedc1bca67cbb9acdf3df0729f5a55aec1166"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9cc16652746285a765eea5db14d1a6ead04bab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc16652746285a765eea5db14d1a6ead04bab6", "html_url": "https://github.com/rust-lang/rust/commit/f9cc16652746285a765eea5db14d1a6ead04bab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9cc16652746285a765eea5db14d1a6ead04bab6/comments", "author": {"login": "meh", "id": 40204, "node_id": "MDQ6VXNlcjQwMjA0", "avatar_url": "https://avatars.githubusercontent.com/u/40204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meh", "html_url": "https://github.com/meh", "followers_url": "https://api.github.com/users/meh/followers", "following_url": "https://api.github.com/users/meh/following{/other_user}", "gists_url": "https://api.github.com/users/meh/gists{/gist_id}", "starred_url": "https://api.github.com/users/meh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meh/subscriptions", "organizations_url": "https://api.github.com/users/meh/orgs", "repos_url": "https://api.github.com/users/meh/repos", "events_url": "https://api.github.com/users/meh/events{/privacy}", "received_events_url": "https://api.github.com/users/meh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "meh", "id": 40204, "node_id": "MDQ6VXNlcjQwMjA0", "avatar_url": "https://avatars.githubusercontent.com/u/40204?v=4", "gravatar_id": "", "url": "https://api.github.com/users/meh", "html_url": "https://github.com/meh", "followers_url": "https://api.github.com/users/meh/followers", "following_url": "https://api.github.com/users/meh/following{/other_user}", "gists_url": "https://api.github.com/users/meh/gists{/gist_id}", "starred_url": "https://api.github.com/users/meh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/meh/subscriptions", "organizations_url": "https://api.github.com/users/meh/orgs", "repos_url": "https://api.github.com/users/meh/repos", "events_url": "https://api.github.com/users/meh/events{/privacy}", "received_events_url": "https://api.github.com/users/meh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03", "html_url": "https://github.com/rust-lang/rust/commit/75a87c54d0d6a2fa0d5a576a2fa6e03ff23e5f03"}], "stats": {"total": 56, "additions": 26, "deletions": 30}, "files": [{"sha": "011d06b1c0f21664275e39c54f68d7503509a230", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 26, "deletions": 30, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f9cc16652746285a765eea5db14d1a6ead04bab6/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9cc16652746285a765eea5db14d1a6ead04bab6/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=f9cc16652746285a765eea5db14d1a6ead04bab6", "patch": "@@ -26,38 +26,34 @@ pub fn get_dbpath_for_term(term: &str) -> Option<PathBuf> {\n     };\n \n     // Find search directory\n-    match env::var_os(\"TERMINFO\") {\n-        Some(dir) => dirs_to_search.push(PathBuf::from(dir)),\n-        None => {\n-            if let Some(mut homedir) = env::home_dir() {\n-                // ncurses compatibility;\n-                homedir.push(\".terminfo\");\n-                dirs_to_search.push(homedir)\n-            }\n-            match env::var(\"TERMINFO_DIRS\") {\n-                Ok(dirs) => {\n-                    for i in dirs.split(':') {\n-                        if i == \"\" {\n-                            dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n-                        } else {\n-                            dirs_to_search.push(PathBuf::from(i));\n-                        }\n-                    }\n-                }\n-                // Found nothing in TERMINFO_DIRS, use the default paths:\n-                // According to  /etc/terminfo/README, after looking at\n-                // ~/.terminfo, ncurses will search /etc/terminfo, then\n-                // /lib/terminfo, and eventually /usr/share/terminfo.\n-                // On Haiku the database can be found at /boot/system/data/terminfo\n-                Err(..) => {\n-                    dirs_to_search.push(PathBuf::from(\"/etc/terminfo\"));\n-                    dirs_to_search.push(PathBuf::from(\"/lib/terminfo\"));\n-                    dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n-                    dirs_to_search.push(PathBuf::from(\"/boot/system/data/terminfo\"));\n-                }\n+    if let Some(dir) = env::var_os(\"TERMINFO\") {\n+        dirs_to_search.push(PathBuf::from(dir));\n+    }\n+\n+    if let Ok(dirs) = env::var(\"TERMINFO_DIRS\") {\n+        for i in dirs.split(':') {\n+            if i == \"\" {\n+                dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n+            } else {\n+                dirs_to_search.push(PathBuf::from(i));\n             }\n         }\n-    };\n+    } else {\n+        // Found nothing in TERMINFO_DIRS, use the default paths:\n+        // According to  /etc/terminfo/README, after looking at\n+        // ~/.terminfo, ncurses will search /etc/terminfo, then\n+        // /lib/terminfo, and eventually /usr/share/terminfo.\n+        // On Haiku the database can be found at /boot/system/data/terminfo\n+        if let Some(mut homedir) = env::home_dir() {\n+            homedir.push(\".terminfo\");\n+            dirs_to_search.push(homedir)\n+        }\n+\n+        dirs_to_search.push(PathBuf::from(\"/etc/terminfo\"));\n+        dirs_to_search.push(PathBuf::from(\"/lib/terminfo\"));\n+        dirs_to_search.push(PathBuf::from(\"/usr/share/terminfo\"));\n+        dirs_to_search.push(PathBuf::from(\"/boot/system/data/terminfo\"));\n+    }\n \n     // Look for the terminal in all of the search directories\n     for mut p in dirs_to_search {"}]}