{"sha": "ca8ef2629363ead527452d15ab628633c8fd2d52", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOGVmMjYyOTM2M2VhZDUyNzQ1MmQxNWFiNjI4NjMzYzhmZDJkNTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T02:43:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-25T02:43:48Z"}, "message": "Auto merge of #46081 - GuillaumeGomez:fix-path-search, r=QuietMisdreavus\n\nFix path search\n\nFixes #46015.\n\nr? @QuietMisdreavus", "tree": {"sha": "80949395113a3ef2b52bbaf21c97a78d8a0515d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80949395113a3ef2b52bbaf21c97a78d8a0515d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8ef2629363ead527452d15ab628633c8fd2d52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8ef2629363ead527452d15ab628633c8fd2d52", "html_url": "https://github.com/rust-lang/rust/commit/ca8ef2629363ead527452d15ab628633c8fd2d52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8ef2629363ead527452d15ab628633c8fd2d52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db162922f7e43fffccbf534028b36055ae9af014", "url": "https://api.github.com/repos/rust-lang/rust/commits/db162922f7e43fffccbf534028b36055ae9af014", "html_url": "https://github.com/rust-lang/rust/commit/db162922f7e43fffccbf534028b36055ae9af014"}, {"sha": "c00eaa99690c69457da19dff4920c393d71dbf4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00eaa99690c69457da19dff4920c393d71dbf4e", "html_url": "https://github.com/rust-lang/rust/commit/c00eaa99690c69457da19dff4920c393d71dbf4e"}], "stats": {"total": 223, "additions": 141, "deletions": 82}, "files": [{"sha": "a47e89fb9488501400bd2dfba24359eef54f8acc", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 141, "deletions": 82, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/ca8ef2629363ead527452d15ab628633c8fd2d52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ca8ef2629363ead527452d15ab628633c8fd2d52/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=ca8ef2629363ead527452d15ab628633c8fd2d52", "patch": "@@ -377,11 +377,10 @@\n                 results = {},\n                 split = valLower.split(\"::\");\n \n-            // remove empty keywords\n-            for (var j = 0; j < split.length; ++j) {\n-                split[j].toLowerCase();\n-                if (split[j] === \"\") {\n-                    split.splice(j, 1);\n+            for (var z = 0; z < split.length; ++z) {\n+                if (split[z] === \"\") {\n+                    split.splice(z, 1);\n+                    z -= 1;\n                 }\n             }\n \n@@ -408,9 +407,7 @@\n                     if (obj.generics &&\n                         obj.generics.length >= val.generics.length) {\n                         var elems = obj.generics.slice(0);\n-                        for (var y = 0;\n-                             y < val.generics.length;\n-                             ++y) {\n+                        for (var y = 0; y < val.generics.length; ++y) {\n                             // The point here is to find the type that matches the most.\n                             var lev = { pos: -1, lev: MAX_LEV_DISTANCE + 1};\n                             for (var x = 0; x < elems.length; ++x) {\n@@ -532,6 +529,49 @@\n                 return literalSearch === true ? false : lev_distance;\n             }\n \n+            function checkPath(startsWith, lastElem, ty) {\n+                var ret_lev = MAX_LEV_DISTANCE + 1;\n+                var path = ty.path.split(\"::\");\n+\n+                if (ty.parent && ty.parent.name) {\n+                    path.push(ty.parent.name.toLowerCase());\n+                }\n+\n+                if (startsWith.length > path.length) {\n+                    return MAX_LEV_DISTANCE + 1;\n+                }\n+                for (var i = 0; i < path.length; ++i) {\n+                    if (i + startsWith.length > path.length) {\n+                        break;\n+                    }\n+                    var lev_total = 0;\n+                    var aborted = false;\n+                    for (var x = 0; x < startsWith.length; ++x) {\n+                        var lev = levenshtein(path[i + x], startsWith[x]);\n+                        if (lev > MAX_LEV_DISTANCE) {\n+                            aborted = true;\n+                            break;\n+                        }\n+                        lev_total += lev;\n+                    }\n+                    if (aborted === false) {\n+                        var extra = MAX_LEV_DISTANCE + 1;\n+                        if (i + startsWith.length < path.length) {\n+                            extra = levenshtein(path[i + startsWith.length], lastElem);\n+                        }\n+                        if (extra > MAX_LEV_DISTANCE) {\n+                            extra = levenshtein(ty.name, lastElem);\n+                        }\n+                        if (extra < MAX_LEV_DISTANCE + 1) {\n+                            lev_total += extra;\n+                            ret_lev = Math.min(ret_lev,\n+                                               Math.round(lev_total / (startsWith.length + 1)));\n+                        }\n+                    }\n+                }\n+                return ret_lev;\n+            }\n+\n             function typePassesFilter(filter, type) {\n                 // No filter\n                 if (filter < 0) return true;\n@@ -668,85 +708,106 @@\n                 query.search = val;\n                 // gather matching search results up to a certain maximum\n                 val = val.replace(/\\_/g, \"\");\n-                var valGenerics = extractGenerics(val);\n+\n                 var results_length = 0;\n-                for (var i = 0; i < split.length; ++i) {\n-                    for (var j = 0; j < nSearchWords; ++j) {\n-                        var lev_distance;\n-                        var ty = searchIndex[j];\n-                        if (!ty) {\n+                var valGenerics = extractGenerics(val);\n+\n+                var paths = valLower.split(\"::\");\n+                var j;\n+                for (j = 0; j < paths.length; ++j) {\n+                    if (paths[j] === \"\") {\n+                        paths.splice(j, 1);\n+                        j -= 1;\n+                    }\n+                }\n+                val = paths[paths.length - 1];\n+                var startsWith = paths.slice(0, paths.length > 1 ? paths.length - 1 : 1);\n+\n+                for (j = 0; j < nSearchWords; ++j) {\n+                    var lev_distance;\n+                    var ty = searchIndex[j];\n+                    if (!ty) {\n+                        continue;\n+                    }\n+                    var lev_add = 0;\n+                    if (paths.length > 1) {\n+                        var lev = checkPath(startsWith, paths[paths.length - 1], ty);\n+                        if (lev > MAX_LEV_DISTANCE) {\n                             continue;\n+                        } else if (lev > 0) {\n+                            lev_add = 1;\n                         }\n-                        var returned = false;\n-                        var in_args = false;\n-                        var index = -1;\n-                        // we want lev results to go lower than others\n-                        var lev = MAX_LEV_DISTANCE;\n-                        var fullId = itemTypes[ty.ty] + ty.path + ty.name;\n-\n-                        if (searchWords[j].indexOf(split[i]) > -1 ||\n-                            searchWords[j].indexOf(val) > -1 ||\n-                            searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n-                        {\n-                            // filter type: ... queries\n-                            if (typePassesFilter(typeFilter, ty) &&\n-                                results[fullId] === undefined) {\n-                                index = searchWords[j].replace(/_/g, \"\").indexOf(val);\n-                            }\n+                    }\n+\n+                    var returned = false;\n+                    var in_args = false;\n+                    var index = -1;\n+                    // we want lev results to go lower than others\n+                    var lev = MAX_LEV_DISTANCE + 1;\n+                    var fullId = itemTypes[ty.ty] + ty.path + ty.name;\n+\n+                    if (searchWords[j].indexOf(val) > -1 ||\n+                        searchWords[j].replace(/_/g, \"\").indexOf(val) > -1)\n+                    {\n+                        // filter type: ... queries\n+                        if (typePassesFilter(typeFilter, ty) &&\n+                            results[fullId] === undefined) {\n+                            index = searchWords[j].replace(/_/g, \"\").indexOf(val);\n                         }\n-                        if ((lev_distance = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n-                            if (typePassesFilter(typeFilter, ty) &&\n-                                (results[fullId] === undefined ||\n-                                 results[fullId].lev > lev_distance)) {\n-                                lev = Math.min(lev, lev_distance);\n-                                index = Math.max(0, index);\n-                            }\n+                    }\n+                    if ((lev_distance = levenshtein(searchWords[j], val)) <= MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) &&\n+                            (results[fullId] === undefined ||\n+                             results[fullId].lev > lev_distance)) {\n+                            lev = Math.min(lev, lev_distance);\n+                            index = Math.max(0, index);\n                         }\n-                        if ((lev_distance = findArg(searchIndex[j], valGenerics))\n-                            <= MAX_LEV_DISTANCE) {\n-                            if (typePassesFilter(typeFilter, ty) &&\n-                                (results[fullId] === undefined ||\n-                                 results[fullId].lev > lev_distance)) {\n-                                in_args = true;\n-                                lev = Math.min(lev_distance, lev);\n-                                index = Math.max(0, index);\n-                            }\n+                    }\n+                    if ((lev_distance = findArg(searchIndex[j], valGenerics))\n+                        <= MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) &&\n+                            (results[fullId] === undefined ||\n+                             results[fullId].lev > lev_distance)) {\n+                            in_args = true;\n+                            lev = Math.min(lev_distance, lev);\n+                            index = Math.max(0, index);\n                         }\n-                        if ((lev_distance = checkReturned(searchIndex[j], valGenerics)) <=\n-                            MAX_LEV_DISTANCE) {\n-                            if (typePassesFilter(typeFilter, ty) &&\n-                                (results[fullId] === undefined ||\n-                                 results[fullId].lev > lev_distance)) {\n-                                returned = true;\n-                                lev = Math.min(lev_distance, lev);\n-                                index = Math.max(0, index);\n-                            }\n+                    }\n+                    if ((lev_distance = checkReturned(searchIndex[j], valGenerics)) <=\n+                        MAX_LEV_DISTANCE) {\n+                        if (typePassesFilter(typeFilter, ty) &&\n+                            (results[fullId] === undefined ||\n+                             results[fullId].lev > lev_distance)) {\n+                            returned = true;\n+                            lev = Math.min(lev_distance, lev);\n+                            index = Math.max(0, index);\n                         }\n-                        if (index !== -1) {\n-                            if (results[fullId] === undefined) {\n-                                results[fullId] = {\n-                                    id: j,\n-                                    index: index,\n-                                    lev: lev,\n-                                    in_args: in_args,\n-                                    returned: returned,\n-                                };\n-                                results_length += 1;\n-                            } else {\n-                                if (results[fullId].lev > lev) {\n-                                    results[fullId].lev = lev;\n-                                }\n-                                if (in_args === true) {\n-                                    results[fullId].in_args = true;\n-                                }\n-                                if (returned === true) {\n-                                    results[fullId].returned = true;\n-                                }\n+                    }\n+                    lev += lev_add;\n+                    if (index !== -1) {\n+                        if (results[fullId] === undefined) {\n+                            results[fullId] = {\n+                                id: j,\n+                                index: index,\n+                                lev: lev,\n+                                in_args: in_args,\n+                                returned: returned,\n+                            };\n+                            results_length += 1;\n+                        } else {\n+                            if (results[fullId].lev > lev) {\n+                                results[fullId].lev = lev;\n+                            }\n+                            if (in_args === true) {\n+                                results[fullId].in_args = true;\n+                            }\n+                            if (returned === true) {\n+                                results[fullId].returned = true;\n                             }\n                         }\n-                        if (results_length === max) {\n-                            break;\n-                        }\n+                    }\n+                    if (results_length === max) {\n+                        break;\n                     }\n                 }\n             }\n@@ -837,16 +898,14 @@\n                 var result = results[i];\n \n                 // this validation does not make sense when searching by types\n-                if (result.dontValidate) {\n+                if (result.dontValidate || result.returned === true && result.param === true) {\n                     continue;\n                 }\n                 var name = result.item.name.toLowerCase(),\n                     path = result.item.path.toLowerCase(),\n                     parent = result.item.parent;\n \n-                if (result.returned === false && result.param === false &&\n-                    validateResult(name, path, split, parent) === false)\n-                {\n+                if (validateResult(name, path, split, parent) === false) {\n                     result.id = -1;\n                 }\n             }"}]}