{"sha": "49c0b318df372977db7986b29e993b92b328ef24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YzBiMzE4ZGYzNzI5NzdkYjc5ODZiMjllOTkzYjkyYjMyOGVmMjQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-13T17:56:39Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-13T17:56:39Z"}, "message": "tbh what", "tree": {"sha": "63e4db4c6c3f8bd9a222e345200c6746c23bb65f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e4db4c6c3f8bd9a222e345200c6746c23bb65f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49c0b318df372977db7986b29e993b92b328ef24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49c0b318df372977db7986b29e993b92b328ef24", "html_url": "https://github.com/rust-lang/rust/commit/49c0b318df372977db7986b29e993b92b328ef24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49c0b318df372977db7986b29e993b92b328ef24/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4df6bb343e89c382ae2301505013132af77319", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4df6bb343e89c382ae2301505013132af77319", "html_url": "https://github.com/rust-lang/rust/commit/2c4df6bb343e89c382ae2301505013132af77319"}], "stats": {"total": 64, "additions": 27, "deletions": 37}, "files": [{"sha": "991aabd2fafa0b8cb49a18ef34cd1233d3173903", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 27, "deletions": 37, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/49c0b318df372977db7986b29e993b92b328ef24/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49c0b318df372977db7986b29e993b92b328ef24/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=49c0b318df372977db7986b29e993b92b328ef24", "patch": "@@ -449,47 +449,37 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let mut unexpected_spans = vec![];\n \n-        let mut lifetime_count_correct = Ok(());\n-        if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n-            lifetime_count_correct = check_kind_count(\n-                \"lifetime\",\n-                param_counts.lifetimes,\n-                param_counts.lifetimes,\n-                arg_counts.lifetimes,\n-                0,\n-                &mut unexpected_spans,\n-                explicit_late_bound == ExplicitLateBound::Yes,\n-            );\n-        }\n+        let lifetime_count_correct = check_kind_count(\n+            \"lifetime\",\n+            if infer_lifetimes { 0 } else { param_counts.lifetimes },\n+            param_counts.lifetimes,\n+            arg_counts.lifetimes,\n+            0,\n+            &mut unexpected_spans,\n+            explicit_late_bound == ExplicitLateBound::Yes,\n+        );\n \n         // FIXME(const_generics:defaults)\n-        let mut const_count_correct = Ok(());\n-        if !infer_args || arg_counts.consts > param_counts.consts {\n-            const_count_correct = check_kind_count(\n-                \"const\",\n-                param_counts.consts,\n-                param_counts.consts,\n-                arg_counts.consts,\n-                arg_counts.lifetimes + arg_counts.types,\n-                &mut unexpected_spans,\n-                false,\n-            );\n-        }\n+        let mut const_count_correct = check_kind_count(\n+            \"const\",\n+            if infer_args { 0 } else { param_counts.consts },\n+            param_counts.consts,\n+            arg_counts.consts,\n+            arg_counts.lifetimes + arg_counts.types,\n+            &mut unexpected_spans,\n+            false,\n+        );\n \n         // Note that type errors are currently be emitted *after* const errors.\n-        let mut type_count_correct = Ok(());\n-        if !infer_args || arg_counts.types > param_counts.types - defaults.types - has_self as usize\n-        {\n-            type_count_correct = check_kind_count(\n-                \"type\",\n-                param_counts.types - defaults.types - has_self as usize,\n-                param_counts.types - has_self as usize,\n-                arg_counts.types,\n-                arg_counts.lifetimes,\n-                &mut unexpected_spans,\n-                false,\n-            );\n-        }\n+        let mut type_count_correct = check_kind_count(\n+            \"type\",\n+            if infer_args { 0 } else { param_counts.types - defaults.types - has_self as usize },\n+            param_counts.types - has_self as usize,\n+            arg_counts.types,\n+            arg_counts.lifetimes,\n+            &mut unexpected_spans,\n+            false,\n+        );\n \n         // Emit a help message if it's possible that a type could be surrounded in braces\n         if let Err((c_mismatch, Some(ref mut _const_err))) = const_count_correct {"}]}