{"sha": "14cbdf2607faafd608ea94234456c509e058e291", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Y2JkZjI2MDdmYWFmZDYwOGVhOTQyMzQ0NTZjNTA5ZTA1OGUyOTE=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-04T14:39:52Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2018-07-04T14:39:52Z"}, "message": "do not apply lint to executable crate type", "tree": {"sha": "4870089029d6debf0afaaa2a77e15e5c19b4fb52", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4870089029d6debf0afaaa2a77e15e5c19b4fb52"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14cbdf2607faafd608ea94234456c509e058e291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14cbdf2607faafd608ea94234456c509e058e291", "html_url": "https://github.com/rust-lang/rust/commit/14cbdf2607faafd608ea94234456c509e058e291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14cbdf2607faafd608ea94234456c509e058e291/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "999a00bf5e70ac2be1af21feb02ec8af02a5d2d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/999a00bf5e70ac2be1af21feb02ec8af02a5d2d3", "html_url": "https://github.com/rust-lang/rust/commit/999a00bf5e70ac2be1af21feb02ec8af02a5d2d3"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "5d17c921cc061c6c5967c0dde655eb240ced6a39", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/14cbdf2607faafd608ea94234456c509e058e291/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cbdf2607faafd608ea94234456c509e058e291/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=14cbdf2607faafd608ea94234456c509e058e291", "patch": "@@ -83,6 +83,17 @@ impl MissingInline {\n     }\n }\n \n+fn is_executable<'a, 'tcx>(cx: &LateContext<'a, 'tcx>) -> bool {\n+    use rustc::session::config::CrateType;\n+\n+    cx.tcx.sess.crate_types.get().iter().any(|t: &CrateType| {\n+        match t {\n+            CrateType::CrateTypeExecutable => true,\n+            _ => false,\n+        }\n+    })\n+}\n+\n impl LintPass for MissingInline {\n     fn get_lints(&self) -> LintArray {\n         lint_array![MISSING_INLINE_IN_PUBLIC_ITEMS]\n@@ -91,19 +102,15 @@ impl LintPass for MissingInline {\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, it: &'tcx hir::Item) {\n+        if is_executable(cx) {\n+            return;\n+        }\n+\n         if !cx.access_levels.is_exported(it.id) {\n             return;\n         }\n         match it.node {\n             hir::ItemFn(..) => {\n-                // ignore main()\n-                if it.name == \"main\" {\n-                    let def_id = cx.tcx.hir.local_def_id(it.id);\n-                    let def_key = cx.tcx.hir.def_key(def_id);\n-                    if def_key.parent == Some(hir::def_id::CRATE_DEF_INDEX) {\n-                        return;\n-                    }\n-                }\n                 let desc = \"a function\";\n                 self.check_missing_inline_attrs(cx, &it.attrs, it.span, desc);\n             },\n@@ -148,6 +155,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingInline {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, impl_item: &'tcx hir::ImplItem) {\n         use rustc::ty::{TraitContainer, ImplContainer};\n+        if is_executable(cx) {\n+            return;\n+        }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n         if !cx.access_levels.is_exported(impl_item.id) {"}, {"sha": "38f5903307164967f7ef77b5420fc6dd56e472eb", "filename": "tests/ui/missing_inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14cbdf2607faafd608ea94234456c509e058e291/tests%2Fui%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14cbdf2607faafd608ea94234456c509e058e291/tests%2Fui%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_inline.rs?ref=14cbdf2607faafd608ea94234456c509e058e291", "patch": "@@ -11,7 +11,7 @@\n  *   except according to those terms.\n  */\n #![warn(missing_inline_in_public_items)]\n-\n+#![crate_type = \"dylib\"]\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n #![allow(dead_code, non_snake_case)]\n@@ -34,13 +34,13 @@ pub fn pub_foo() {} // missing #[inline]\n \n #[allow(missing_inline_in_public_items)]\n pub fn pub_foo_no_inline() {}\n-fn main() {}\n \n trait Bar {\n     fn Bar_a(); // ok\n     fn Bar_b() {} // ok\n }\n \n+\n pub trait PubBar {\n     fn PubBar_a(); // ok\n     fn PubBar_b() {} // missing #[inline]"}]}