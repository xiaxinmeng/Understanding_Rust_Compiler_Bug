{"sha": "c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "node_id": "C_kwDOAAsO6NoAKGMxYzI5MjJhYTFhYWQ1NDE3NzhkZmQ1YTlmODE2N2Y5YzRkMTc0ODE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-31T09:22:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-31T09:22:56Z"}, "message": "Rollup merge of #103603 - camsteffen:refactor-lang, r=oli-obk\n\nLang item cleanups\n\nVarious cleanups related to lang items.", "tree": {"sha": "fcf35cc5025b8002b514384290e82ce00fb2c3e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcf35cc5025b8002b514384290e82ce00fb2c3e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjX5PwCRBK7hj4Ov3rIwAAomwIAKWKfZbInJmUHdZTQg0Pqi+T\nRxCkslH+tMIZ7vIA0yh+g09lvwZL0JmtE/YAvL9Xqqcm0L2hiWzgsAJKL+t1S3ni\nAzmxQK+l+PlAuroaZf9icrhud3ceay0RF9XQ1R+iqwMwDLKhDCVf048gseZs/mUv\nKC/GvrHATbM8f2iNJWdnJg9J7GKCnFHuxFd140fy9y7NB+u3J9UfjhMblYDKsRj1\nQ8vABqFWUGlo4N/3scfS23hAgLUhzbls8WWR4Km01WAXKpnq/EJ+55HzNHGx3cTV\nvDNG74Y0mKpefMl8hjCrw4pNBKw4tc91u80fVYHIHxWdHeH3J+vnLeKCjCI5CW0=\n=wljL\n-----END PGP SIGNATURE-----\n", "payload": "tree fcf35cc5025b8002b514384290e82ce00fb2c3e3\nparent 5ee0fb1c688c38a9c2649104ca28e442f0698be3\nparent 88d71504dd7a5d790e9c6ff7a91fcbd82e3aef14\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667208176 +0530\ncommitter GitHub <noreply@github.com> 1667208176 +0530\n\nRollup merge of #103603 - camsteffen:refactor-lang, r=oli-obk\n\nLang item cleanups\n\nVarious cleanups related to lang items.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "html_url": "https://github.com/rust-lang/rust/commit/c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ee0fb1c688c38a9c2649104ca28e442f0698be3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee0fb1c688c38a9c2649104ca28e442f0698be3", "html_url": "https://github.com/rust-lang/rust/commit/5ee0fb1c688c38a9c2649104ca28e442f0698be3"}, {"sha": "88d71504dd7a5d790e9c6ff7a91fcbd82e3aef14", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d71504dd7a5d790e9c6ff7a91fcbd82e3aef14", "html_url": "https://github.com/rust-lang/rust/commit/88d71504dd7a5d790e9c6ff7a91fcbd82e3aef14"}], "stats": {"total": 508, "additions": 225, "deletions": 283}, "files": [{"sha": "a92087305b82f45336bd8883fb45934026c7b6a1", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -22,7 +22,6 @@ use rustc_data_structures::sync::ParallelIterator;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::weak_lang_items::WEAK_ITEMS_SYMBOLS;\n use rustc_index::vec::Idx;\n use rustc_metadata::EncodedMetadata;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -887,14 +886,14 @@ impl CrateInfo {\n         // by the compiler, but that's ok because all this stuff is unstable anyway.\n         let target = &tcx.sess.target;\n         if !are_upstream_rust_objects_already_included(tcx.sess) {\n-            let missing_weak_lang_items: FxHashSet<&Symbol> = info\n+            let missing_weak_lang_items: FxHashSet<Symbol> = info\n                 .used_crates\n                 .iter()\n-                .flat_map(|cnum| {\n-                    tcx.missing_lang_items(*cnum)\n-                        .iter()\n-                        .filter(|l| lang_items::required(tcx, **l))\n-                        .filter_map(|item| WEAK_ITEMS_SYMBOLS.get(item))\n+                .flat_map(|&cnum| tcx.missing_lang_items(cnum))\n+                .filter(|l| l.is_weak())\n+                .filter_map(|&l| {\n+                    let name = l.link_name()?;\n+                    lang_items::required(tcx, l).then_some(name)\n                 })\n                 .collect();\n             let prefix = if target.is_like_windows && target.arch == \"x86\" { \"_\" } else { \"\" };"}, {"sha": "5446ccb1a47307e7608a7f28b78a27c50b12237d", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -3,7 +3,7 @@\n //! context.\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::LangItemGroup;\n+use rustc_hir::lang_items;\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -74,22 +74,24 @@ pub fn call_kind<'tcx>(\n         }\n     });\n \n-    let fn_call = parent\n-        .and_then(|p| tcx.lang_items().group(LangItemGroup::Fn).iter().find(|did| **did == p));\n+    let fn_call = parent.and_then(|p| {\n+        lang_items::FN_TRAITS.iter().filter_map(|&l| tcx.lang_items().get(l)).find(|&id| id == p)\n+    });\n \n-    let operator = (!from_hir_call)\n-        .then(|| parent)\n-        .flatten()\n-        .and_then(|p| tcx.lang_items().group(LangItemGroup::Op).iter().find(|did| **did == p));\n+    let operator = if !from_hir_call && let Some(p) = parent {\n+        lang_items::OPERATORS.iter().filter_map(|&l| tcx.lang_items().get(l)).find(|&id| id == p)\n+    } else {\n+        None\n+    };\n \n     let is_deref = !from_hir_call && tcx.is_diagnostic_item(sym::deref_method, method_did);\n \n     // Check for a 'special' use of 'self' -\n     // an FnOnce call, an operator (e.g. `<<`), or a\n     // deref coercion.\n-    let kind = if let Some(&trait_id) = fn_call {\n+    let kind = if let Some(trait_id) = fn_call {\n         Some(CallKind::FnCall { fn_trait_id: trait_id, self_ty: method_substs.type_at(0) })\n-    } else if let Some(&trait_id) = operator {\n+    } else if let Some(trait_id) = operator {\n         Some(CallKind::Operator { self_arg, trait_id, self_ty: method_substs.type_at(0) })\n     } else if is_deref {\n         let deref_target = tcx.get_diagnostic_item(sym::deref_target).and_then(|deref_target| {"}, {"sha": "48ddb54b79e795eb3c67f96b69bb5dda24e32f01", "filename": "compiler/rustc_error_messages/locales/en-US/monomorphize.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmonomorphize.ftl?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -21,6 +21,3 @@ monomorphize_large_assignments =\n     moving {$size} bytes\n     .label = value moved from here\n     .note = The current maximum size is {$limit}, but it can be customized with the move_size_limit attribute: `#![move_size_limit = \"...\"]`\n-\n-monomorphize_requires_lang_item =\n-    requires `{$lang_item}` lang_item"}, {"sha": "72ed73e81b42bda0dc7fea1e95caf8782f1035ae", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 106, "deletions": 101, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -12,35 +12,56 @@ use crate::errors::LangItemError;\n use crate::{MethodKind, Target};\n \n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable_Generic;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use std::sync::LazyLock;\n-\n-pub enum LangItemGroup {\n-    Op,\n-    Fn,\n+/// All of the language items, defined or not.\n+/// Defined lang items can come from the current crate or its dependencies.\n+#[derive(HashStable_Generic, Debug)]\n+pub struct LanguageItems {\n+    /// Mappings from lang items to their possibly found [`DefId`]s.\n+    /// The index corresponds to the order in [`LangItem`].\n+    items: [Option<DefId>; std::mem::variant_count::<LangItem>()],\n+    /// Lang items that were not found during collection.\n+    pub missing: Vec<LangItem>,\n }\n \n-const NUM_GROUPS: usize = 2;\n+impl LanguageItems {\n+    /// Construct an empty collection of lang items and no missing ones.\n+    pub fn new() -> Self {\n+        Self { items: [None; std::mem::variant_count::<LangItem>()], missing: Vec::new() }\n+    }\n+\n+    pub fn get(&self, item: LangItem) -> Option<DefId> {\n+        self.items[item as usize]\n+    }\n \n-macro_rules! expand_group {\n-    () => {\n-        None\n-    };\n-    ($group:expr) => {\n-        Some($group)\n-    };\n+    pub fn set(&mut self, item: LangItem, def_id: DefId) {\n+        self.items[item as usize] = Some(def_id);\n+    }\n+\n+    /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n+    /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n+    /// returns an error encapsulating the `LangItem`.\n+    pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n+        self.get(it).ok_or_else(|| LangItemError(it))\n+    }\n+\n+    pub fn iter<'a>(&'a self) -> impl Iterator<Item = (LangItem, DefId)> + 'a {\n+        self.items\n+            .iter()\n+            .enumerate()\n+            .filter_map(|(i, id)| id.map(|id| (LangItem::from_u32(i as u32).unwrap(), id)))\n+    }\n }\n \n // The actual lang items defined come at the end of this file in one handy table.\n // So you probably just want to nip down to the end.\n macro_rules! language_item_table {\n     (\n-        $( $(#[$attr:meta])* $variant:ident $($group:expr)?, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n     ) => {\n \n         enum_from_u32! {\n@@ -66,12 +87,17 @@ macro_rules! language_item_table {\n                 }\n             }\n \n-            /// The [group](LangItemGroup) that this lang item belongs to,\n-            /// or `None` if it doesn't belong to a group.\n-            pub fn group(self) -> Option<LangItemGroup> {\n-                use LangItemGroup::*;\n+            /// Opposite of [`LangItem::name`]\n+            pub fn from_name(name: Symbol) -> Option<Self> {\n+                match name {\n+                    $( $module::$name => Some(LangItem::$variant), )*\n+                    _ => None,\n+                }\n+            }\n+\n+            pub fn target(self) -> Target {\n                 match self {\n-                    $( LangItem::$variant => expand_group!($($group)*), )*\n+                    $( LangItem::$variant => $target, )*\n                 }\n             }\n \n@@ -82,66 +108,14 @@ macro_rules! language_item_table {\n             }\n         }\n \n-        /// All of the language items, defined or not.\n-        /// Defined lang items can come from the current crate or its dependencies.\n-        #[derive(HashStable_Generic, Debug)]\n-        pub struct LanguageItems {\n-            /// Mappings from lang items to their possibly found [`DefId`]s.\n-            /// The index corresponds to the order in [`LangItem`].\n-            pub items: Vec<Option<DefId>>,\n-            /// Lang items that were not found during collection.\n-            pub missing: Vec<LangItem>,\n-            /// Mapping from [`LangItemGroup`] discriminants to all\n-            /// [`DefId`]s of lang items in that group.\n-            pub groups: [Vec<DefId>; NUM_GROUPS],\n-        }\n-\n         impl LanguageItems {\n-            /// Construct an empty collection of lang items and no missing ones.\n-            pub fn new() -> Self {\n-                fn init_none(_: LangItem) -> Option<DefId> { None }\n-                const EMPTY: Vec<DefId> = Vec::new();\n-\n-                Self {\n-                    items: vec![$(init_none(LangItem::$variant)),*],\n-                    missing: Vec::new(),\n-                    groups: [EMPTY; NUM_GROUPS],\n-                }\n-            }\n-\n-            /// Returns the mappings to the possibly found `DefId`s for each lang item.\n-            pub fn items(&self) -> &[Option<DefId>] {\n-                &*self.items\n-            }\n-\n-            /// Requires that a given `LangItem` was bound and returns the corresponding `DefId`.\n-            /// If it wasn't bound, e.g. due to a missing `#[lang = \"<it.name()>\"]`,\n-            /// returns an error encapsulating the `LangItem`.\n-            pub fn require(&self, it: LangItem) -> Result<DefId, LangItemError> {\n-                self.items[it as usize].ok_or_else(|| LangItemError(it))\n-            }\n-\n-            /// Returns the [`DefId`]s of all lang items in a group.\n-            pub fn group(&self, group: LangItemGroup) -> &[DefId] {\n-                self.groups[group as usize].as_ref()\n-            }\n-\n             $(\n                 #[doc = concat!(\"Returns the [`DefId`] of the `\", stringify!($name), \"` lang item if it is defined.\")]\n                 pub fn $method(&self) -> Option<DefId> {\n                     self.items[LangItem::$variant as usize]\n                 }\n             )*\n         }\n-\n-        /// A mapping from the name of the lang item to its order and the form it must be of.\n-        pub static ITEM_REFS: LazyLock<FxIndexMap<Symbol, (usize, Target)>> = LazyLock::new(|| {\n-            let mut item_refs = FxIndexMap::default();\n-            $( item_refs.insert($module::$name, (LangItem::$variant as usize, $target)); )*\n-            item_refs\n-        });\n-\n-// End of the macro\n     }\n }\n \n@@ -196,30 +170,30 @@ language_item_table! {\n     TransmuteOpts,           sym::transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n     TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n \n-    Add(Op),                 sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Sub(Op),                 sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Mul(Op),                 sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Div(Op),                 sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Rem(Op),                 sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Neg(Op),                 sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    Not(Op),                 sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    BitXor(Op),              sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitAnd(Op),              sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitOr(Op),               sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    Shl(Op),                 sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Shr(Op),                 sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    AddAssign(Op),           sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    SubAssign(Op),           sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    MulAssign(Op),           sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    DivAssign(Op),           sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    RemAssign(Op),           sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    BitXorAssign(Op),        sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitAndAssign(Op),        sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitOrAssign(Op),         sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n-    ShlAssign(Op),           sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    ShrAssign(Op),           sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    Index(Op),               sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    IndexMut(Op),            sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n+    Add,                     sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Sub,                     sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Mul,                     sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Div,                     sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Rem,                     sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Neg,                     sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    Not,                     sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    BitXor,                  sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitAnd,                  sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitOr,                   sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    Shl,                     sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Shr,                     sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    AddAssign,               sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    SubAssign,               sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    MulAssign,               sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    DivAssign,               sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    RemAssign,               sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    BitXorAssign,            sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitAndAssign,            sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitOrAssign,             sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n+    ShlAssign,               sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    ShrAssign,               sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    Index,                   sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    IndexMut,                sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n \n     UnsafeCell,              sym::unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n     VaList,                  sym::va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n@@ -229,9 +203,9 @@ language_item_table! {\n     DerefTarget,             sym::deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n     Receiver,                sym::receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n \n-    Fn(Fn),                  kw::Fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    FnMut(Fn),               sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    FnOnce(Fn),              sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n+    Fn,                      kw::Fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    FnMut,                   sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    FnOnce,                  sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n \n     FnOnceOutput,            sym::fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n \n@@ -241,8 +215,8 @@ language_item_table! {\n     Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n     Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n \n-    PartialEq(Op),           sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    PartialOrd(Op),          sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays.\n@@ -338,3 +312,34 @@ pub enum GenericRequirement {\n     Minimum(usize),\n     Exact(usize),\n }\n+\n+pub static FN_TRAITS: &'static [LangItem] = &[LangItem::Fn, LangItem::FnMut, LangItem::FnOnce];\n+\n+pub static OPERATORS: &'static [LangItem] = &[\n+    LangItem::Add,\n+    LangItem::Sub,\n+    LangItem::Mul,\n+    LangItem::Div,\n+    LangItem::Rem,\n+    LangItem::Neg,\n+    LangItem::Not,\n+    LangItem::BitXor,\n+    LangItem::BitAnd,\n+    LangItem::BitOr,\n+    LangItem::Shl,\n+    LangItem::Shr,\n+    LangItem::AddAssign,\n+    LangItem::SubAssign,\n+    LangItem::MulAssign,\n+    LangItem::DivAssign,\n+    LangItem::RemAssign,\n+    LangItem::BitXorAssign,\n+    LangItem::BitAndAssign,\n+    LangItem::BitOrAssign,\n+    LangItem::ShlAssign,\n+    LangItem::ShrAssign,\n+    LangItem::Index,\n+    LangItem::IndexMut,\n+    LangItem::PartialEq,\n+    LangItem::PartialOrd,\n+];"}, {"sha": "1c55cd8fee8f922f94a92bc398f291ee68748b0e", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -5,10 +5,10 @@\n #![feature(associated_type_defaults)]\n #![feature(closure_track_caller)]\n #![feature(const_btree_len)]\n-#![feature(once_cell)]\n #![feature(min_specialization)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]\n+#![feature(variant_count)]\n #![recursion_limit = \"256\"]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "d8e5dd4ffdc2ecedf67cf9eaee9626cf74203b12", "filename": "compiler/rustc_hir/src/weak_lang_items.rs", "status": "modified", "additions": 19, "deletions": 41, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fweak_lang_items.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -1,53 +1,31 @@\n //! Validity checking for weak lang items\n \n-use crate::def_id::DefId;\n-use crate::{lang_items, LangItem, LanguageItems};\n+use crate::LangItem;\n \n-use rustc_ast as ast;\n-use rustc_data_structures::fx::FxIndexMap;\n use rustc_span::symbol::{sym, Symbol};\n \n-use std::sync::LazyLock;\n-\n macro_rules! weak_lang_items {\n-    ($($name:ident, $item:ident, $sym:ident;)*) => (\n-\n-pub static WEAK_ITEMS_REFS: LazyLock<FxIndexMap<Symbol, LangItem>> = LazyLock::new(|| {\n-    let mut map = FxIndexMap::default();\n-    $(map.insert(sym::$name, LangItem::$item);)*\n-    map\n-});\n-\n-pub static WEAK_ITEMS_SYMBOLS: LazyLock<FxIndexMap<LangItem, Symbol>> = LazyLock::new(|| {\n-    let mut map = FxIndexMap::default();\n-    $(map.insert(LangItem::$item, sym::$sym);)*\n-    map\n-});\n-\n-pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol>\n-{\n-    lang_items::extract(attrs).and_then(|(name, _)| {\n-        $(if name == sym::$name {\n-            Some(sym::$sym)\n-        } else)* {\n-            None\n+    ($($item:ident, $sym:ident;)*) => {\n+        pub static WEAK_LANG_ITEMS: &[LangItem] = &[$(LangItem::$item,)*];\n+\n+        impl LangItem {\n+            pub fn is_weak(self) -> bool {\n+                matches!(self, $(LangItem::$item)|*)\n+            }\n+\n+            pub fn link_name(self) -> Option<Symbol> {\n+                match self {\n+                    $( LangItem::$item => Some(sym::$sym),)*\n+                    _ => None,\n+                }\n+            }\n         }\n-    })\n-}\n-\n-impl LanguageItems {\n-    pub fn is_weak_lang_item(&self, item_def_id: DefId) -> bool {\n-        let did = Some(item_def_id);\n-\n-        $(self.$name() == did)||*\n     }\n }\n \n-) }\n-\n weak_lang_items! {\n-    panic_impl,         PanicImpl,          rust_begin_unwind;\n-    eh_personality,     EhPersonality,      rust_eh_personality;\n-    eh_catch_typeinfo,  EhCatchTypeinfo,    rust_eh_catch_typeinfo;\n-    oom,                Oom,                rust_oom;\n+    PanicImpl,          rust_begin_unwind;\n+    EhPersonality,      rust_eh_personality;\n+    EhCatchTypeinfo,    rust_eh_catch_typeinfo;\n+    Oom,                rust_oom;\n }"}, {"sha": "39b178f5976b8abfaa9ef6d1926697282a23f5a3", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -23,7 +23,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{walk_generics, Visitor as _};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{GenericArg, GenericArgs, OpaqueTyOrigin};\n use rustc_middle::middle::stability::AllowUnstable;\n use rustc_middle::ty::subst::{self, GenericArgKind, InternalSubsts, SubstsRef};\n@@ -884,9 +883,9 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n         }\n \n-        let sized_def_id = tcx.lang_items().require(LangItem::Sized);\n+        let sized_def_id = tcx.lang_items().sized_trait();\n         match (&sized_def_id, unbound) {\n-            (Ok(sized_def_id), Some(tpb))\n+            (Some(sized_def_id), Some(tpb))\n                 if tpb.path.res == Res::Def(DefKind::Trait, *sized_def_id) =>\n             {\n                 // There was in fact a `?Sized` bound, return without doing anything\n@@ -906,7 +905,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 // There was no `?Sized` bound; add implicitly sized if `Sized` is available.\n             }\n         }\n-        if sized_def_id.is_err() {\n+        if sized_def_id.is_none() {\n             // No lang item for `Sized`, so we can't add it as a bound.\n             return;\n         }"}, {"sha": "65a1d61e87c1c6d073eed419e2263ea0f840129d", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -27,8 +27,8 @@ use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node};\n+use rustc_hir::weak_lang_items::WEAK_LANG_ITEMS;\n+use rustc_hir::{lang_items, GenericParamKind, LangItem, Node};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc_middle::mir::mono::Linkage;\n@@ -2104,12 +2104,15 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n     // strippable by the linker.\n     //\n     // Additionally weak lang items have predetermined symbol names.\n-    if tcx.is_weak_lang_item(did.to_def_id()) {\n+    if WEAK_LANG_ITEMS.iter().any(|&l| tcx.lang_items().get(l) == Some(did.to_def_id())) {\n         codegen_fn_attrs.flags |= CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL;\n     }\n-    if let Some(name) = weak_lang_items::link_name(attrs) {\n-        codegen_fn_attrs.export_name = Some(name);\n-        codegen_fn_attrs.link_name = Some(name);\n+    if let Some((name, _)) = lang_items::extract(attrs)\n+        && let Some(lang_item) = LangItem::from_name(name)\n+        && let Some(link_name) = lang_item.link_name()\n+    {\n+        codegen_fn_attrs.export_name = Some(link_name);\n+        codegen_fn_attrs.link_name = Some(link_name);\n     }\n     check_link_name_xor_ordinal(tcx, &codegen_fn_attrs, link_ordinal_span);\n "}, {"sha": "17a7532044a4439c459cd9d9301abe7ce3bb9477", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -15,7 +15,6 @@ use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc_hir::diagnostic_items::DiagnosticItems;\n-use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::metadata::ModChild;\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo};\n@@ -967,7 +966,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the language items in the given crate.\n-    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n+    fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, LangItem)] {\n         tcx.arena.alloc_from_iter(\n             self.root\n                 .lang_items\n@@ -1319,7 +1318,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [lang_items::LangItem] {\n+    fn get_missing_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [LangItem] {\n         tcx.arena.alloc_from_iter(self.root.lang_items_missing.decode(self))\n     }\n "}, {"sha": "87fa69e1639a16799f61999005ff6fecd9cfe7c3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -17,7 +17,7 @@ use rustc_hir::def_id::{\n };\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n@@ -1905,22 +1905,15 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))\n     }\n \n-    fn encode_lang_items(&mut self) -> LazyArray<(DefIndex, usize)> {\n+    fn encode_lang_items(&mut self) -> LazyArray<(DefIndex, LangItem)> {\n         empty_proc_macro!(self);\n-        let tcx = self.tcx;\n-        let lang_items = tcx.lang_items();\n-        let lang_items = lang_items.items().iter();\n-        self.lazy_array(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {\n-            if let Some(def_id) = opt_def_id {\n-                if def_id.is_local() {\n-                    return Some((def_id.index, i));\n-                }\n-            }\n-            None\n+        let lang_items = self.tcx.lang_items().iter();\n+        self.lazy_array(lang_items.filter_map(|(lang_item, def_id)| {\n+            def_id.as_local().map(|id| (id.local_def_index, lang_item))\n         }))\n     }\n \n-    fn encode_lang_items_missing(&mut self) -> LazyArray<lang_items::LangItem> {\n+    fn encode_lang_items_missing(&mut self) -> LazyArray<LangItem> {\n         empty_proc_macro!(self);\n         let tcx = self.tcx;\n         self.lazy_array(&tcx.lang_items().missing)"}, {"sha": "774cff2075d0978e0d00368ff05109954bcce4a3", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -12,7 +12,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, DefPathHash, StableCrateId};\n use rustc_hir::definitions::DefKey;\n-use rustc_hir::lang_items;\n+use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::{BitSet, FiniteBitSet};\n use rustc_index::vec::IndexVec;\n use rustc_middle::metadata::ModChild;\n@@ -230,8 +230,8 @@ pub(crate) struct CrateRoot {\n     dylib_dependency_formats: LazyArray<Option<LinkagePreference>>,\n     lib_features: LazyArray<(Symbol, Option<Symbol>)>,\n     stability_implications: LazyArray<(Symbol, Symbol)>,\n-    lang_items: LazyArray<(DefIndex, usize)>,\n-    lang_items_missing: LazyArray<lang_items::LangItem>,\n+    lang_items: LazyArray<(DefIndex, LangItem)>,\n+    lang_items_missing: LazyArray<LangItem>,\n     diagnostic_items: LazyArray<(Symbol, DefIndex)>,\n     native_libraries: LazyArray<NativeLib>,\n     foreign_modules: LazyArray<ForeignModule>,"}, {"sha": "dd4332d0db6d2132b0ccda20cf4bc83f5469db4d", "filename": "compiler/rustc_middle/src/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flang_items.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -36,10 +36,6 @@ impl<'tcx> TyCtxt<'tcx> {\n             _ => None,\n         }\n     }\n-\n-    pub fn is_weak_lang_item(self, item_def_id: DefId) -> bool {\n-        self.lang_items().is_weak_lang_item(item_def_id)\n-    }\n }\n \n /// Returns `true` if the specified `lang_item` must be present for this"}, {"sha": "a098e570305c802a6a52d27c581badab1444f724", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -1705,7 +1705,7 @@ rustc_queries! {\n     }\n \n     /// Returns the lang items defined in another crate by loading it from metadata.\n-    query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, usize)] {\n+    query defined_lang_items(_: CrateNum) -> &'tcx [(DefId, LangItem)] {\n         desc { \"calculating the lang items defined in a crate\" }\n         separate_provide_extern\n     }"}, {"sha": "8e24f4813a7e8e0dcc8f73727d42a3ed7c9ee41e", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -2456,7 +2456,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_lang_item(self, ty: Ty<'tcx>, item: LangItem) -> Option<Ty<'tcx>> {\n-        let def_id = self.lang_items().require(item).ok()?;\n+        let def_id = self.lang_items().get(item)?;\n         Some(self.mk_generic_adt(def_id, ty))\n     }\n "}, {"sha": "3cfddd75462c0016969a5a9b5abea3345d672a82", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -201,7 +201,7 @@ use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n-use crate::errors::{LargeAssignmentsLint, RecursionLimit, RequiresLangItem, TypeLengthLimit};\n+use crate::errors::{LargeAssignmentsLint, RecursionLimit, TypeLengthLimit};\n \n #[derive(PartialEq)]\n pub enum MonoItemCollectionMode {\n@@ -1298,14 +1298,7 @@ impl<'v> RootCollector<'_, 'v> {\n             return;\n         };\n \n-        let start_def_id = match self.tcx.lang_items().require(LangItem::Start) {\n-            Ok(s) => s,\n-            Err(lang_item_err) => {\n-                self.tcx\n-                    .sess\n-                    .emit_fatal(RequiresLangItem { lang_item: lang_item_err.0.name().to_string() });\n-            }\n-        };\n+        let start_def_id = self.tcx.require_lang_item(LangItem::Start, None);\n         let main_ret_ty = self.tcx.fn_sig(main_def_id).output();\n \n         // Given that `main()` has no arguments,"}, {"sha": "870d50728bda44d7f48065ff3e02b246c858ea21", "filename": "compiler/rustc_monomorphize/src/errors.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Ferrors.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -32,12 +32,6 @@ pub struct TypeLengthLimit {\n     pub type_length: usize,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(monomorphize_requires_lang_item)]\n-pub struct RequiresLangItem {\n-    pub lang_item: String,\n-}\n-\n pub struct UnusedGenericParams {\n     pub span: Span,\n     pub param_spans: Vec<Span>,"}, {"sha": "188efc528ef82361b6800fca4cb86a6956dd661a", "filename": "compiler/rustc_passes/src/lang_items.rs", "status": "modified", "additions": 14, "deletions": 18, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flang_items.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -16,7 +16,7 @@ use crate::weak_lang_items;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items::{extract, GenericRequirement, ITEM_REFS};\n+use rustc_hir::lang_items::{extract, GenericRequirement};\n use rustc_hir::{HirId, LangItem, LanguageItems, Target};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cstore::ExternCrate;\n@@ -43,17 +43,17 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n     fn check_for_lang(&mut self, actual_target: Target, hir_id: HirId) {\n         let attrs = self.tcx.hir().attrs(hir_id);\n         if let Some((name, span)) = extract(&attrs) {\n-            match ITEM_REFS.get(&name).cloned() {\n+            match LangItem::from_name(name) {\n                 // Known lang item with attribute on correct target.\n-                Some((item_index, expected_target)) if actual_target == expected_target => {\n-                    self.collect_item_extended(item_index, hir_id, span);\n+                Some(lang_item) if actual_target == lang_item.target() => {\n+                    self.collect_item_extended(lang_item, hir_id, span);\n                 }\n                 // Known lang item with attribute on incorrect target.\n-                Some((_, expected_target)) => {\n+                Some(lang_item) => {\n                     self.tcx.sess.emit_err(LangItemOnIncorrectTarget {\n                         span,\n                         name,\n-                        expected_target,\n+                        expected_target: lang_item.target(),\n                         actual_target,\n                     });\n                 }\n@@ -65,12 +65,12 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n         }\n     }\n \n-    fn collect_item(&mut self, item_index: usize, item_def_id: DefId) {\n+    fn collect_item(&mut self, lang_item: LangItem, item_def_id: DefId) {\n         // Check for duplicates.\n-        if let Some(original_def_id) = self.items.items[item_index] {\n+        if let Some(original_def_id) = self.items.get(lang_item) {\n             if original_def_id != item_def_id {\n                 let local_span = self.tcx.hir().span_if_local(item_def_id);\n-                let lang_item_name = LangItem::from_u32(item_index as u32).unwrap().name();\n+                let lang_item_name = lang_item.name();\n                 let crate_name = self.tcx.crate_name(item_def_id.krate);\n                 let mut dependency_of = Empty;\n                 let is_local = item_def_id.is_local();\n@@ -139,17 +139,13 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n         }\n \n         // Matched.\n-        self.items.items[item_index] = Some(item_def_id);\n-        if let Some(group) = LangItem::from_u32(item_index as u32).unwrap().group() {\n-            self.items.groups[group as usize].push(item_def_id);\n-        }\n+        self.items.set(lang_item, item_def_id);\n     }\n \n     // Like collect_item() above, but also checks whether the lang item is declared\n     // with the right number of generic arguments.\n-    fn collect_item_extended(&mut self, item_index: usize, hir_id: HirId, span: Span) {\n+    fn collect_item_extended(&mut self, lang_item: LangItem, hir_id: HirId, span: Span) {\n         let item_def_id = self.tcx.hir().local_def_id(hir_id).to_def_id();\n-        let lang_item = LangItem::from_u32(item_index as u32).unwrap();\n         let name = lang_item.name();\n \n         // Now check whether the lang_item has the expected number of generic\n@@ -197,7 +193,7 @@ impl<'tcx> LanguageItemCollector<'tcx> {\n             }\n         }\n \n-        self.collect_item(item_index, item_def_id);\n+        self.collect_item(lang_item, item_def_id);\n     }\n }\n \n@@ -208,8 +204,8 @@ fn get_lang_items(tcx: TyCtxt<'_>, (): ()) -> LanguageItems {\n \n     // Collect lang items in other crates.\n     for &cnum in tcx.crates(()).iter() {\n-        for &(def_id, item_index) in tcx.defined_lang_items(cnum).iter() {\n-            collector.collect_item(item_index, def_id);\n+        for &(def_id, lang_item) in tcx.defined_lang_items(cnum).iter() {\n+            collector.collect_item(lang_item, def_id);\n         }\n     }\n "}, {"sha": "73ea06a6370d420a9d9eeef5b79ffcdc744ce75b", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -380,11 +380,9 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n         })\n         .collect::<Vec<_>>();\n \n-    for item in tcx.lang_items().items().iter() {\n-        if let Some(def_id) = *item {\n-            if let Some(def_id) = def_id.as_local() {\n-                reachable_context.worklist.push(def_id);\n-            }\n+    for (_, def_id) in tcx.lang_items().iter() {\n+        if let Some(def_id) = def_id.as_local() {\n+            reachable_context.worklist.push(def_id);\n         }\n     }\n     {"}, {"sha": "94d6a405b530e557d24abdbdb23ba844da1d12f8", "filename": "compiler/rustc_passes/src/weak_lang_items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fweak_lang_items.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::lang_items::{self, LangItem};\n-use rustc_hir::weak_lang_items::WEAK_ITEMS_REFS;\n+use rustc_hir::weak_lang_items::WEAK_LANG_ITEMS;\n use rustc_middle::middle::lang_items::required;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n@@ -29,8 +29,8 @@ pub fn check_crate<'tcx>(tcx: TyCtxt<'tcx>, items: &mut lang_items::LanguageItem\n     for id in crate_items.foreign_items() {\n         let attrs = tcx.hir().attrs(id.hir_id());\n         if let Some((lang_item, _)) = lang_items::extract(attrs) {\n-            if let Some(&item) = WEAK_ITEMS_REFS.get(&lang_item) {\n-                if items.require(item).is_err() {\n+            if let Some(item) = LangItem::from_name(lang_item) && item.is_weak() {\n+                if items.get(item).is_none() {\n                     items.missing.push(item);\n                 }\n             } else {\n@@ -65,8 +65,8 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n         }\n     }\n \n-    for (name, &item) in WEAK_ITEMS_REFS.iter() {\n-        if missing.contains(&item) && required(tcx, item) && items.require(item).is_err() {\n+    for &item in WEAK_LANG_ITEMS.iter() {\n+        if missing.contains(&item) && required(tcx, item) && items.get(item).is_none() {\n             if item == LangItem::PanicImpl {\n                 tcx.sess.emit_err(MissingPanicHandler);\n             } else if item == LangItem::Oom {\n@@ -75,7 +75,7 @@ fn verify<'tcx>(tcx: TyCtxt<'tcx>, items: &lang_items::LanguageItems) {\n                     tcx.sess.emit_note(MissingAllocErrorHandler);\n                 }\n             } else {\n-                tcx.sess.emit_err(MissingLangItem { name: *name });\n+                tcx.sess.emit_err(MissingLangItem { name: item.name() });\n             }\n         }\n     }"}, {"sha": "dacce5cd2f6059bd33588e3af6a3bbdb273d557e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -974,7 +974,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 // useful for less general traits.\n                                 if peeled\n                                     && !self.tcx.trait_is_auto(def_id)\n-                                    && !self.tcx.lang_items().items().contains(&Some(def_id))\n+                                    && !self.tcx.lang_items().iter().any(|(_, id)| id == def_id)\n                                 {\n                                     let trait_ref = trait_pred.to_poly_trait_ref();\n                                     let impl_candidates =\n@@ -1898,7 +1898,7 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let def_id = trait_ref.def_id();\n         if impl_candidates.is_empty() {\n             if self.tcx.trait_is_auto(def_id)\n-                || self.tcx.lang_items().items().contains(&Some(def_id))\n+                || self.tcx.lang_items().iter().any(|(_, id)| id == def_id)\n                 || self.tcx.get_diagnostic_name(def_id).is_some()\n             {\n                 // Mentioning implementers of `Copy`, `Debug` and friends is not useful."}, {"sha": "d7606d88803dc2229fa3e1a08f2d390ca5fbc1c9", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -1019,7 +1019,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let mut never_suggest_borrow: Vec<_> =\n             [LangItem::Copy, LangItem::Clone, LangItem::Unpin, LangItem::Sized]\n                 .iter()\n-                .filter_map(|lang_item| self.tcx.lang_items().require(*lang_item).ok())\n+                .filter_map(|lang_item| self.tcx.lang_items().get(*lang_item))\n                 .collect();\n \n         if let Some(def_id) = self.tcx.get_diagnostic_item(sym::Send) {"}, {"sha": "54c316358a14b161ec9fc75a28239c15ebc27cf0", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -6,11 +6,12 @@ use rustc_hir::intravisit::{\n     walk_fn_decl, walk_generic_param, walk_generics, walk_impl_item_ref, walk_item, walk_param_bound,\n     walk_poly_trait_ref, walk_trait_ref, walk_ty, Visitor,\n };\n+use rustc_hir::lang_items;\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, Impl, ImplItem,\n-    ImplItemKind, Item, ItemKind, LangItem, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn,\n-    TraitItem, TraitItemKind, Ty, TyKind, WherePredicate,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, PredicateOrigin, TraitFn, TraitItem,\n+    TraitItemKind, Ty, TyKind, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter as middle_nested_filter;\n@@ -364,8 +365,6 @@ fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<FxHashSet<_>>().len()\n }\n \n-const CLOSURE_TRAIT_BOUNDS: [LangItem; 3] = [LangItem::Fn, LangItem::FnMut, LangItem::FnOnce];\n-\n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n@@ -424,12 +423,8 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n \n     fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>) {\n         let trait_ref = &poly_tref.trait_ref;\n-        if CLOSURE_TRAIT_BOUNDS.iter().any(|&item| {\n-            self.cx\n-                .tcx\n-                .lang_items()\n-                .require(item)\n-                .map_or(false, |id| Some(id) == trait_ref.trait_def_id())\n+        if let Some(id) = trait_ref.trait_def_id() && lang_items::FN_TRAITS.iter().any(|&item| {\n+            self.cx.tcx.lang_items().get(item) == Some(id)\n         }) {\n             let mut sub_visitor = RefVisitor::new(self.cx);\n             sub_visitor.visit_trait_ref(trait_ref);"}, {"sha": "6abbab278feb4e5306de1fb84c19de0c42781440", "filename": "src/tools/clippy/clippy_lints/src/manual_retain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_retain.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -92,7 +92,7 @@ fn check_into_iter(\n         && match_def_path(cx, filter_def_id, &paths::CORE_ITER_FILTER)\n         && let hir::ExprKind::MethodCall(_, struct_expr, [], _) = &into_iter_expr.kind\n         && let Some(into_iter_def_id) = cx.typeck_results().type_dependent_def_id(into_iter_expr.hir_id)\n-        && cx.tcx.lang_items().require(hir::LangItem::IntoIterIntoIter).ok() == Some(into_iter_def_id)\n+        && Some(into_iter_def_id) == cx.tcx.lang_items().into_iter_fn()\n         && match_acceptable_type(cx, left_expr, msrv)\n         && SpanlessEq::new(cx).eq_expr(left_expr, struct_expr) {\n         suggest(cx, parent_expr, left_expr, target_expr);"}, {"sha": "4720a6e6888b88dc8a710b5ca497c3527cfdab34", "filename": "src/tools/clippy/clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -41,7 +41,7 @@ pub(crate) trait BindInsteadOfMap {\n     const GOOD_METHOD_NAME: &'static str;\n \n     fn no_op_msg(cx: &LateContext<'_>) -> Option<String> {\n-        let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n+        let variant_id = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM)?;\n         let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}({})`, which is a no-op\",\n@@ -52,7 +52,7 @@ pub(crate) trait BindInsteadOfMap {\n     }\n \n     fn lint_msg(cx: &LateContext<'_>) -> Option<String> {\n-        let variant_id = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM).ok()?;\n+        let variant_id = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM)?;\n         let item_id = cx.tcx.parent(variant_id);\n         Some(format!(\n             \"using `{}.{}(|x| {}(y))`, which is more succinctly expressed as `{}(|x| y)`\",\n@@ -144,7 +144,7 @@ pub(crate) trait BindInsteadOfMap {\n     fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, arg: &hir::Expr<'_>) -> bool {\n         if_chain! {\n             if let Some(adt) = cx.typeck_results().expr_ty(recv).ty_adt_def();\n-            if let Ok(vid) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM);\n+            if let Some(vid) = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM);\n             if adt.did() == cx.tcx.parent(vid);\n             then {} else { return false; }\n         }\n@@ -181,7 +181,7 @@ pub(crate) trait BindInsteadOfMap {\n \n     fn is_variant(cx: &LateContext<'_>, res: Res) -> bool {\n         if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Fn), id) = res {\n-            if let Ok(variant_id) = cx.tcx.lang_items().require(Self::VARIANT_LANG_ITEM) {\n+            if let Some(variant_id) = cx.tcx.lang_items().get(Self::VARIANT_LANG_ITEM) {\n                 return cx.tcx.parent(id) == variant_id;\n             }\n         }"}, {"sha": "4eb579af7a12a9d78569377f7dcca5e9c7974149", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_iter_cloned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_iter_cloned.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{get_associated_type, get_iterator_item_ty, implements_trait};\n use clippy_utils::{fn_def_id, get_parent_expr};\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::DefId, Expr, ExprKind, LangItem};\n+use rustc_hir::{def_id::DefId, Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_span::{sym, Symbol};\n \n@@ -100,5 +100,5 @@ pub fn check_for_loop_iter(\n \n /// Returns true if the named method is `IntoIterator::into_iter`.\n pub fn is_into_iter(cx: &LateContext<'_>, callee_def_id: DefId) -> bool {\n-    cx.tcx.lang_items().require(LangItem::IntoIterIntoIter) == Ok(callee_def_id)\n+    Some(callee_def_id) == cx.tcx.lang_items().into_iter_fn()\n }"}, {"sha": "642a64ae77b6dd84ad91594dab3198a657a89bc1", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -7,7 +7,7 @@ use clippy_utils::visitors::find_all_ret_expressions;\n use clippy_utils::{fn_def_id, get_parent_expr, is_diag_item_method, is_diag_trait_item, return_ty};\n use clippy_utils::{meets_msrv, msrvs};\n use rustc_errors::Applicability;\n-use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, LangItem, Node};\n+use rustc_hir::{def_id::DefId, BorrowKind, Expr, ExprKind, ItemKind, Node};\n use rustc_hir_typeck::{FnCtxt, Inherited};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n@@ -378,7 +378,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n-                    if cx.tcx.lang_items().require(LangItem::IntoFutureIntoFuture) == Ok(callee_def_id) {\n+                    if Some(callee_def_id) == cx.tcx.lang_items().into_future_fn() {\n                         return false;\n                     }\n "}, {"sha": "9bbf385fb5999938ff3d22c429f8ad6f14346c68", "filename": "src/tools/clippy/clippy_lints/src/operators/assign_op_pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Fassign_op_pattern.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -28,7 +28,7 @@ pub(super) fn check<'tcx>(\n             let rty = cx.typeck_results().expr_ty(rhs);\n             if_chain! {\n                 if let Some((_, lang_item)) = binop_traits(op.node);\n-                if let Ok(trait_id) = cx.tcx.lang_items().require(lang_item);\n+                if let Some(trait_id) = cx.tcx.lang_items().get(lang_item);\n                 let parent_fn = cx.tcx.hir().get_parent_item(e.hir_id).def_id;\n                 if trait_ref_of_method(cx, parent_fn)\n                     .map_or(true, |t| t.path.res.def_id() != trait_id);"}, {"sha": "6271ea0273140e02193599843fb8bb1d8ebc23a0", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -60,8 +60,8 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n         if_chain! {\n             if let hir::ExprKind::Binary(binop, _, _) | hir::ExprKind::AssignOp(binop, ..) = expr.kind;\n             if let Some((binop_trait_lang, op_assign_trait_lang)) = binop_traits(binop.node);\n-            if let Ok(binop_trait_id) = cx.tcx.lang_items().require(binop_trait_lang);\n-            if let Ok(op_assign_trait_id) = cx.tcx.lang_items().require(op_assign_trait_lang);\n+            if let Some(binop_trait_id) = cx.tcx.lang_items().get(binop_trait_lang);\n+            if let Some(op_assign_trait_id) = cx.tcx.lang_items().get(op_assign_trait_lang);\n \n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n                 (&OP_ASSIGN_TRAITS, SUSPICIOUS_OP_ASSIGN_IMPL),\n             ]\n                 .iter()\n-                .find(|&(ts, _)| ts.iter().any(|&t| Ok(trait_id) == cx.tcx.lang_items().require(t)));\n+                .find(|&(ts, _)| ts.iter().any(|&t| Some(trait_id) == cx.tcx.lang_items().get(t)));\n             if count_binops(body.value) == 1;\n             then {\n                 span_lint("}, {"sha": "ab73f0fc44f4edae35d4a18ecb4312c9b049c5b7", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_owned_empty_strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_owned_empty_strings.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind, LangItem, Mutability};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -55,7 +55,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryOwnedEmptyStrings {\n                         );\n                 } else {\n                     if_chain! {\n-                        if cx.tcx.lang_items().require(LangItem::FromFrom).ok() == Some(fun_def_id);\n+                        if Some(fun_def_id) == cx.tcx.lang_items().from_fn();\n                         if let [.., last_arg] = args;\n                         if let ExprKind::Lit(spanned) = &last_arg.kind;\n                         if let LitKind::Str(symbol, _) = spanned.node;"}, {"sha": "b452be0840948e86c718816d360715e1615922c9", "filename": "src/tools/clippy/clippy_lints/src/unused_peekable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_peekable.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -3,7 +3,6 @@ use clippy_utils::ty::{match_type, peel_mid_ty_refs_is_mutable};\n use clippy_utils::{fn_def_id, is_trait_method, path_to_local_id, paths, peel_ref_operators};\n use rustc_ast::Mutability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::lang_items::LangItem;\n use rustc_hir::{Block, Expr, ExprKind, HirId, Local, Node, PatKind, PathSegment, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter::OnlyBodies;\n@@ -132,11 +131,11 @@ impl<'tcx> Visitor<'tcx> for PeekableVisitor<'_, 'tcx> {\n                             // If the Peekable is passed to a function, stop\n                             ExprKind::Call(_, args) => {\n                                 if let Some(func_did) = fn_def_id(self.cx, expr)\n-                                    && let Ok(into_iter_did) = self\n+                                    && let Some(into_iter_did) = self\n                                         .cx\n                                         .tcx\n                                         .lang_items()\n-                                        .require(LangItem::IntoIterIntoIter)\n+                                        .into_iter_fn()\n                                     && func_did == into_iter_did\n                                 {\n                                     // Probably a for loop desugar, stop searching"}, {"sha": "3743d5d97a73585e50d2eabe9a312c3808ddfd3d", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -5,7 +5,7 @@ use clippy_utils::ty::{is_type_diagnostic_item, same_type_and_consts};\n use clippy_utils::{get_parent_expr, is_trait_method, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind, HirId, LangItem, MatchSource};\n+use rustc_hir::{Expr, ExprKind, HirId, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n@@ -153,7 +153,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n                         }\n \n                         if_chain! {\n-                            if cx.tcx.lang_items().require(LangItem::FromFrom).ok() == Some(def_id);\n+                            if Some(def_id) == cx.tcx.lang_items().from_fn();\n                             if same_type_and_consts(a, b);\n \n                             then {"}, {"sha": "2a028c8141fcec5e8333bf356b1f55f453e4467b", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/unnecessary_def_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Funnecessary_def_path.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -152,7 +152,7 @@ impl UnnecessaryDefPath {\n                         has_ctor,\n                     ),\n                     (0, Item::LangItem(item)) => (\n-                        format!(\"{cx_snip}.tcx.lang_items().require(LangItem::{item}).ok() == Some({def_snip})\"),\n+                        format!(\"{cx_snip}.tcx.lang_items().get(LangItem::{item}) == Some({def_snip})\"),\n                         has_ctor,\n                     ),\n                     // match_trait_method\n@@ -184,7 +184,7 @@ impl UnnecessaryDefPath {\n                     (3, Item::LangItem(item)) => (\n                         format!(\n                             \"path_res({cx_snip}, {def_snip}).opt_def_id()\\\n-                                .map_or(false, |id| {cx_snip}.tcx.lang_items().require(LangItem::{item}).ok() == Some(id))\",\n+                                .map_or(false, |id| {cx_snip}.tcx.lang_items().get(LangItem::{item}) == Some(id))\",\n                         ),\n                         false,\n                     ),"}, {"sha": "d32cf1a793672ee64ddff93d816e59b95d857012", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -247,7 +247,7 @@ pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n /// For example, use this to check whether a function call or a pattern is `Some(..)`.\n pub fn is_res_lang_ctor(cx: &LateContext<'_>, res: Res, lang_item: LangItem) -> bool {\n     if let Res::Def(DefKind::Ctor(..), id) = res\n-        && let Ok(lang_id) = cx.tcx.lang_items().require(lang_item)\n+        && let Some(lang_id) = cx.tcx.lang_items().get(lang_item)\n         && let Some(id) = cx.tcx.opt_parent(id)\n     {\n         id == lang_id\n@@ -303,7 +303,7 @@ pub fn is_lang_item_or_ctor(cx: &LateContext<'_>, did: DefId, item: LangItem) ->\n         _ => did,\n     };\n \n-    cx.tcx.lang_items().require(item).map_or(false, |id| id == did)\n+    cx.tcx.lang_items().get(item) == Some(did)\n }\n \n pub fn is_unit_expr(expr: &Expr<'_>) -> bool {"}, {"sha": "3a144c2bb2239e17cf93b14a7ab36b4b125ef53a", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c2922aa1aad541778dfd5a9f8167f9c4d17481/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=c1c2922aa1aad541778dfd5a9f8167f9c4d17481", "patch": "@@ -318,11 +318,7 @@ pub fn is_type_diagnostic_item(cx: &LateContext<'_>, ty: Ty<'_>, diag_item: Symb\n /// Returns `false` if the `LangItem` is not defined.\n pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangItem) -> bool {\n     match ty.kind() {\n-        ty::Adt(adt, _) => cx\n-            .tcx\n-            .lang_items()\n-            .require(lang_item)\n-            .map_or(false, |li| li == adt.did()),\n+        ty::Adt(adt, _) => cx.tcx.lang_items().get(lang_item) == Some(adt.did()),\n         _ => false,\n     }\n }"}]}