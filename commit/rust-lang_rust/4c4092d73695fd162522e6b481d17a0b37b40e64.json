{"sha": "4c4092d73695fd162522e6b481d17a0b37b40e64", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNDA5MmQ3MzY5NWZkMTYyNTIyZTZiNDgxZDE3YTBiMzdiNDBlNjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:52Z"}, "message": "rollup merge of #21126: sleepynate/dlist-examples\n\nJust some documentation test examples for the DList collection.", "tree": {"sha": "01244a6a3a6810c13d0ce8326301349019811a49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01244a6a3a6810c13d0ce8326301349019811a49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4092d73695fd162522e6b481d17a0b37b40e64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4092d73695fd162522e6b481d17a0b37b40e64", "html_url": "https://github.com/rust-lang/rust/commit/4c4092d73695fd162522e6b481d17a0b37b40e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4092d73695fd162522e6b481d17a0b37b40e64/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68c3f8c0c346fa49ca15fedbf63417f7591c9c51", "url": "https://api.github.com/repos/rust-lang/rust/commits/68c3f8c0c346fa49ca15fedbf63417f7591c9c51", "html_url": "https://github.com/rust-lang/rust/commit/68c3f8c0c346fa49ca15fedbf63417f7591c9c51"}, {"sha": "fb556288737ececbc12b177b45a0717ff4dd5b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb556288737ececbc12b177b45a0717ff4dd5b66", "html_url": "https://github.com/rust-lang/rust/commit/fb556288737ececbc12b177b45a0717ff4dd5b66"}], "stats": {"total": 172, "additions": 166, "deletions": 6}, "files": [{"sha": "cce8cf398e12e06bc9827936b26b93cd6298b634", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 166, "deletions": 6, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/4c4092d73695fd162522e6b481d17a0b37b40e64/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4092d73695fd162522e6b481d17a0b37b40e64/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=4c4092d73695fd162522e6b481d17a0b37b40e64", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -230,7 +230,7 @@ impl<T> DList<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::DList;\n     ///\n     /// let mut a = DList::new();\n@@ -304,6 +304,18 @@ impl<T> DList<T> {\n     /// Returns `true` if the `DList` is empty.\n     ///\n     /// This operation should compute in O(1) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    /// assert!(dl.is_empty());\n+    ///\n+    /// dl.push_front(\"foo\");\n+    /// assert!(!dl.is_empty());\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn is_empty(&self) -> bool {\n@@ -313,6 +325,24 @@ impl<T> DList<T> {\n     /// Returns the length of the `DList`.\n     ///\n     /// This operation should compute in O(1) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    ///\n+    /// dl.push_front(2is);\n+    /// assert_eq!(dl.len(), 1);\n+    ///\n+    /// dl.push_front(1);\n+    /// assert_eq!(dl.len(), 2);\n+    ///\n+    /// dl.push_back(3);\n+    /// assert_eq!(dl.len(), 3);\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn len(&self) -> uint {\n@@ -322,6 +352,24 @@ impl<T> DList<T> {\n     /// Removes all elements from the `DList`.\n     ///\n     /// This operation should compute in O(n) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    ///\n+    /// dl.push_front(2is);\n+    /// dl.push_front(1);\n+    /// assert_eq!(dl.len(), 2);\n+    /// assert_eq!(dl.front(), Some(&1is));\n+    ///\n+    /// dl.clear();\n+    /// assert_eq!(dl.len(), 0);\n+    /// assert_eq!(dl.front(), None);\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn clear(&mut self) {\n@@ -330,6 +378,19 @@ impl<T> DList<T> {\n \n     /// Provides a reference to the front element, or `None` if the list is\n     /// empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    /// assert_eq!(dl.front(), None);\n+    ///\n+    /// dl.push_front(1);\n+    /// assert_eq!(dl.front(), Some(&1is));\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn front(&self) -> Option<&T> {\n@@ -338,6 +399,25 @@ impl<T> DList<T> {\n \n     /// Provides a mutable reference to the front element, or `None` if the list\n     /// is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    /// assert_eq!(dl.front(), None);\n+    ///\n+    /// dl.push_front(1);\n+    /// assert_eq!(dl.front(), Some(&1is));\n+    ///\n+    /// match dl.front_mut() {\n+    ///     None => {},\n+    ///     Some(x) => *x = 5is,\n+    /// }\n+    /// assert_eq!(dl.front(), Some(&5is));\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn front_mut(&mut self) -> Option<&mut T> {\n@@ -346,6 +426,19 @@ impl<T> DList<T> {\n \n     /// Provides a reference to the back element, or `None` if the list is\n     /// empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    /// assert_eq!(dl.back(), None);\n+    ///\n+    /// dl.push_back(1);\n+    /// assert_eq!(dl.back(), Some(&1is));\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn back(&self) -> Option<&T> {\n@@ -354,6 +447,25 @@ impl<T> DList<T> {\n \n     /// Provides a mutable reference to the back element, or `None` if the list\n     /// is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    /// assert_eq!(dl.back(), None);\n+    ///\n+    /// dl.push_back(1);\n+    /// assert_eq!(dl.back(), Some(&1is));\n+    ///\n+    /// match dl.back_mut() {\n+    ///     None => {},\n+    ///     Some(x) => *x = 5is,\n+    /// }\n+    /// assert_eq!(dl.back(), Some(&5is));\n+    ///\n+    /// ```\n     #[inline]\n     #[stable]\n     pub fn back_mut(&mut self) -> Option<&mut T> {\n@@ -363,6 +475,21 @@ impl<T> DList<T> {\n     /// Adds an element first in the list.\n     ///\n     /// This operation should compute in O(1) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut dl = DList::new();\n+    ///\n+    /// dl.push_front(2is);\n+    /// assert_eq!(dl.front().unwrap(), &2is);\n+    ///\n+    /// dl.push_front(1);\n+    /// assert_eq!(dl.front().unwrap(), &1);\n+    ///\n+    /// ```\n     #[stable]\n     pub fn push_front(&mut self, elt: T) {\n         self.push_front_node(box Node::new(elt))\n@@ -372,6 +499,23 @@ impl<T> DList<T> {\n     /// empty.\n     ///\n     /// This operation should compute in O(1) time.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut d = DList::new();\n+    /// assert_eq!(d.pop_front(), None);\n+    ///\n+    /// d.push_front(1is);\n+    /// d.push_front(3);\n+    /// assert_eq!(d.pop_front(), Some(3));\n+    /// assert_eq!(d.pop_front(), Some(1));\n+    /// assert_eq!(d.pop_front(), None);\n+    ///\n+    /// ```\n+    ///\n     #[stable]\n     pub fn pop_front(&mut self) -> Option<T> {\n         self.pop_front_node().map(|box Node{value, ..}| value)\n@@ -381,7 +525,7 @@ impl<T> DList<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::DList;\n     ///\n     /// let mut d = DList::new();\n@@ -399,7 +543,7 @@ impl<T> DList<T> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::DList;\n     ///\n     /// let mut d = DList::new();\n@@ -417,6 +561,22 @@ impl<T> DList<T> {\n     /// including the index.\n     ///\n     /// This operation should compute in O(n) time.\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut d = DList::new();\n+    ///\n+    /// d.push_front(1is);\n+    /// d.push_front(2);\n+    /// d.push_front(3);\n+    ///\n+    /// let mut splitted = d.split_off(2);\n+    ///\n+    /// assert_eq!(splitted.pop_front(), Some(1));\n+    /// assert_eq!(splitted.pop_front(), None);\n+    /// ```\n     #[stable]\n     pub fn split_off(&mut self, at: uint) -> DList<T> {\n         let len = self.len();\n@@ -593,7 +753,7 @@ impl<'a, A> IterMut<'a, A> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::DList;\n     ///\n     /// let mut list: DList<int> = vec![1, 3, 4].into_iter().collect();\n@@ -619,7 +779,7 @@ impl<'a, A> IterMut<'a, A> {\n     ///\n     /// # Examples\n     ///\n-    /// ```rust\n+    /// ```\n     /// use std::collections::DList;\n     ///\n     /// let mut list: DList<int> = vec![1, 2, 3].into_iter().collect();"}]}