{"sha": "df7db970dcdb7b7fb1080b9d66baf2e45b689914", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmN2RiOTcwZGNkYjdiN2ZiMTA4MGI5ZDY2YmFmMmU0NWI2ODk5MTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T19:14:31Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T19:14:31Z"}, "message": "Rollup merge of #22009 - japaric:no-mov, r=alexcrichton\n\n If you were still using `MaybeOwnedVector`, update your code to use `CowVec`.\n\n[breaking-change]\n\n---\n\nWe already removed `MaybeOwned` (the string equivalent) long time ago and with a much shorter deprecation period. It's time to let go.", "tree": {"sha": "d833bcad68e8a79983ff59d6ebade846e3df58a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d833bcad68e8a79983ff59d6ebade846e3df58a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df7db970dcdb7b7fb1080b9d66baf2e45b689914", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df7db970dcdb7b7fb1080b9d66baf2e45b689914", "html_url": "https://github.com/rust-lang/rust/commit/df7db970dcdb7b7fb1080b9d66baf2e45b689914", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df7db970dcdb7b7fb1080b9d66baf2e45b689914/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc1e045d83bb1292e6f017d3f632d19487625bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1e045d83bb1292e6f017d3f632d19487625bf6", "html_url": "https://github.com/rust-lang/rust/commit/fc1e045d83bb1292e6f017d3f632d19487625bf6"}, {"sha": "67ee26d94eeda1a1c2c6c60323ea03255f3cea5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee26d94eeda1a1c2c6c60323ea03255f3cea5d", "html_url": "https://github.com/rust-lang/rust/commit/67ee26d94eeda1a1c2c6c60323ea03255f3cea5d"}], "stats": {"total": 171, "additions": 1, "deletions": 170}, "files": [{"sha": "2d94ddaef18355fe146551e0bb40e6598544003c", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7db970dcdb7b7fb1080b9d66baf2e45b689914/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7db970dcdb7b7fb1080b9d66baf2e45b689914/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=df7db970dcdb7b7fb1080b9d66baf2e45b689914", "patch": "@@ -278,7 +278,6 @@\n #![feature(collections)]\n #![feature(core)]\n #![feature(io)]\n-#![feature(path)]\n \n use self::LabelText::*;\n \n@@ -287,8 +286,6 @@ use std::old_io;\n use std::string::CowString;\n use std::vec::CowVec;\n \n-pub mod maybe_owned_vec;\n-\n /// The text for a graphviz label on a node or edge.\n pub enum LabelText<'a> {\n     /// This kind of label preserves the text directly as is."}, {"sha": "1c931856fa17c5a9e9c9d82be30304d8e41fe715", "filename": "src/libgraphviz/maybe_owned_vec.rs", "status": "removed", "additions": 0, "deletions": 165, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e045d83bb1292e6f017d3f632d19487625bf6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e045d83bb1292e6f017d3f632d19487625bf6/src%2Flibgraphviz%2Fmaybe_owned_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Fmaybe_owned_vec.rs?ref=fc1e045d83bb1292e6f017d3f632d19487625bf6", "patch": "@@ -1,165 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![unstable(feature = \"rustc_private\")]\n-#![deprecated(since = \"1.0.0\", reason = \"use std::vec::CowVec\")]\n-\n-pub use self::MaybeOwnedVector::*;\n-\n-use std::cmp::Ordering;\n-use std::default::Default;\n-use std::fmt;\n-use std::iter::FromIterator;\n-use std::old_path::BytesContainer;\n-use std::slice;\n-\n-// Note 1: It is not clear whether the flexibility of providing both\n-// the `Growable` and `FixedLen` variants is sufficiently useful.\n-// Consider restricting to just a two variant enum.\n-\n-// Note 2: Once Dynamically Sized Types (DST) lands, it might be\n-// reasonable to replace this with something like `enum MaybeOwned<'a,\n-// U: ?Sized>{ Owned(Box<U>), Borrowed(&'a U) }`; and then `U` could be\n-// instantiated with `[T]` or `str`, etc.  Of course, that would imply\n-// removing the `Growable` variant, which relates to note 1 above.\n-// Alternatively, we might add `MaybeOwned` for the general case but\n-// keep some form of `MaybeOwnedVector` to avoid unnecessary copying\n-// of the contents of `Vec<T>`, since we anticipate that to be a\n-// frequent way to dynamically construct a vector.\n-\n-/// MaybeOwnedVector<'a,T> abstracts over `Vec<T>`, `&'a [T]`.\n-///\n-/// Some clients will have a pre-allocated vector ready to hand off in\n-/// a slice; others will want to create the set on the fly and hand\n-/// off ownership, via `Growable`.\n-pub enum MaybeOwnedVector<'a,T:'a> {\n-    Growable(Vec<T>),\n-    Borrowed(&'a [T]),\n-}\n-\n-/// Trait for moving into a `MaybeOwnedVector`\n-pub trait IntoMaybeOwnedVector<'a,T> {\n-    /// Moves self into a `MaybeOwnedVector`\n-    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T>;\n-}\n-\n-#[allow(deprecated)]\n-impl<'a,T:'a> IntoMaybeOwnedVector<'a,T> for Vec<T> {\n-    #[allow(deprecated)]\n-    #[inline]\n-    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T> { Growable(self) }\n-}\n-\n-#[allow(deprecated)]\n-impl<'a,T> IntoMaybeOwnedVector<'a,T> for &'a [T] {\n-    #[allow(deprecated)]\n-    #[inline]\n-    fn into_maybe_owned(self) -> MaybeOwnedVector<'a,T> { Borrowed(self) }\n-}\n-\n-impl<'a,T> MaybeOwnedVector<'a,T> {\n-    pub fn iter(&'a self) -> slice::Iter<'a,T> {\n-        match self {\n-            &Growable(ref v) => v.as_slice().iter(),\n-            &Borrowed(ref v) => v.iter(),\n-        }\n-    }\n-\n-    pub fn len(&self) -> uint { self.as_slice().len() }\n-\n-    #[allow(deprecated)]\n-    pub fn is_empty(&self) -> bool { self.len() == 0 }\n-}\n-\n-impl<'a, T: PartialEq> PartialEq for MaybeOwnedVector<'a, T> {\n-    fn eq(&self, other: &MaybeOwnedVector<T>) -> bool {\n-        self.as_slice() == other.as_slice()\n-    }\n-}\n-\n-impl<'a, T: Eq> Eq for MaybeOwnedVector<'a, T> {}\n-\n-impl<'a, T: PartialOrd> PartialOrd for MaybeOwnedVector<'a, T> {\n-    fn partial_cmp(&self, other: &MaybeOwnedVector<T>) -> Option<Ordering> {\n-        self.as_slice().partial_cmp(other.as_slice())\n-    }\n-}\n-\n-impl<'a, T: Ord> Ord for MaybeOwnedVector<'a, T> {\n-    fn cmp(&self, other: &MaybeOwnedVector<T>) -> Ordering {\n-        self.as_slice().cmp(other.as_slice())\n-    }\n-}\n-\n-// The `Vector` trait is provided in the prelude and is implemented on\n-// both `&'a [T]` and `Vec<T>`, so it makes sense to try to support it\n-// seamlessly.  The other vector related traits from the prelude do\n-// not appear to be implemented on both `&'a [T]` and `Vec<T>`.  (It\n-// is possible that this is an oversight in some cases.)\n-//\n-// In any case, with `Vector` in place, the client can just use\n-// `as_slice` if they prefer that over `match`.\n-\n-impl<'b,T> AsSlice<T> for MaybeOwnedVector<'b,T> {\n-    fn as_slice<'a>(&'a self) -> &'a [T] {\n-        match self {\n-            &Growable(ref v) => v.as_slice(),\n-            &Borrowed(ref v) => v.as_slice(),\n-        }\n-    }\n-}\n-\n-impl<'a,T> FromIterator<T> for MaybeOwnedVector<'a,T> {\n-    #[allow(deprecated)]\n-    fn from_iter<I:Iterator<Item=T>>(iterator: I) -> MaybeOwnedVector<'a,T> {\n-        // If we are building from scratch, might as well build the\n-        // most flexible variant.\n-        Growable(iterator.collect())\n-    }\n-}\n-\n-impl<'a,T:fmt::Debug> fmt::Debug for MaybeOwnedVector<'a,T> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.as_slice().fmt(f)\n-    }\n-}\n-\n-impl<'a, T: Clone> Clone for MaybeOwnedVector<'a, T> {\n-    #[allow(deprecated)]\n-    fn clone(&self) -> MaybeOwnedVector<'a, T> {\n-        match *self {\n-            Growable(ref v) => Growable(v.clone()),\n-            Borrowed(v) => Borrowed(v)\n-        }\n-    }\n-}\n-\n-impl<'a, T> Default for MaybeOwnedVector<'a, T> {\n-    #[allow(deprecated)]\n-    fn default() -> MaybeOwnedVector<'a, T> {\n-        Growable(Vec::new())\n-    }\n-}\n-\n-impl<'a> BytesContainer for MaybeOwnedVector<'a, u8> {\n-    fn container_as_bytes(&self) -> &[u8] {\n-        self.as_slice()\n-    }\n-}\n-\n-impl<'a,T:Clone> MaybeOwnedVector<'a,T> {\n-    /// Convert `self` into a growable `Vec`, not making a copy if possible.\n-    pub fn into_vec(self) -> Vec<T> {\n-        match self {\n-            Growable(v) => v,\n-            Borrowed(v) => v.to_vec(),\n-        }\n-    }\n-}"}, {"sha": "d90219b4221ebcc83a68a62abb6245a2b08c02a5", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df7db970dcdb7b7fb1080b9d66baf2e45b689914/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df7db970dcdb7b7fb1080b9d66baf2e45b689914/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=df7db970dcdb7b7fb1080b9d66baf2e45b689914", "patch": "@@ -17,7 +17,6 @@ extern crate graphviz;\n \n extern crate \"flate\" as myflate;\n \n-use graphviz::maybe_owned_vec::MaybeOwnedVector;\n use std::collections::{HashMap,HashSet};\n use std::cell::RefCell;\n use std::old_io::stdio::println;\n@@ -35,7 +34,7 @@ use std::mem::size_of;\n static uni: &'static str = \"Les Mis\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9rables\";\n static yy: usize = 25us;\n \n-static bob: Option<graphviz::maybe_owned_vec::MaybeOwnedVector<'static, isize>> = None;\n+static bob: Option<std::vec::CowVec<'static, isize>> = None;\n \n // buglink test - see issue #1337.\n "}]}