{"sha": "e0300716efc88a0b11f7121f8a15f5f385265b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMzAwNzE2ZWZjODhhMGIxMWY3MTIxZjhhMTVmNWYzODUyNjViNWQ=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-02T10:06:30Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-02T10:06:30Z"}, "message": "Print actual enum variant", "tree": {"sha": "f6ee67bf72cd639d589a11e66ca1bc05f95e5b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6ee67bf72cd639d589a11e66ca1bc05f95e5b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0300716efc88a0b11f7121f8a15f5f385265b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0300716efc88a0b11f7121f8a15f5f385265b5d", "html_url": "https://github.com/rust-lang/rust/commit/e0300716efc88a0b11f7121f8a15f5f385265b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0300716efc88a0b11f7121f8a15f5f385265b5d/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb0d5be441239ac5c401b5fe4f9cbb188b35595e", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb0d5be441239ac5c401b5fe4f9cbb188b35595e", "html_url": "https://github.com/rust-lang/rust/commit/eb0d5be441239ac5c401b5fe4f9cbb188b35595e"}], "stats": {"total": 55, "additions": 39, "deletions": 16}, "files": [{"sha": "e84d813ffbcc01506ae20b46a8f84ba2379ac891", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 36, "deletions": 13, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e0300716efc88a0b11f7121f8a15f5f385265b5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0300716efc88a0b11f7121f8a15f5f385265b5d/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e0300716efc88a0b11f7121f8a15f5f385265b5d", "patch": "@@ -1381,19 +1381,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ty,\n         );\n         match variant.ctor_kind {\n-            CtorKind::Fn => {\n-                err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n-                err.span_label(field.ident.span, \"field does not exist\");\n-                err.span_label(\n-                    ty_span,\n-                    format!(\n-                        \"`{adt}` is a tuple {kind_name}, \\\n-                         use the appropriate syntax: `{adt}(/* fields */)`\",\n-                        adt = ty,\n-                        kind_name = kind_name\n-                    ),\n-                );\n-            }\n+            CtorKind::Fn => match ty.kind() {\n+                ty::Adt(adt, ..) if adt.is_enum() => {\n+                    err.span_label(\n+                        variant.ident.span,\n+                        format!(\n+                            \"`{adt}::{variant}` defined here\",\n+                            adt = ty,\n+                            variant = variant.ident,\n+                        ),\n+                    );\n+                    err.span_label(field.ident.span, \"field does not exist\");\n+                    err.span_label(\n+                        ty_span,\n+                        format!(\n+                            \"`{adt}::{variant}` is a tuple {kind_name}, \\\n+                             use the appropriate syntax: `{adt}::{variant}(/* fields */)`\",\n+                            adt = ty,\n+                            variant = variant.ident,\n+                            kind_name = kind_name\n+                        ),\n+                    );\n+                }\n+                _ => {\n+                    err.span_label(variant.ident.span, format!(\"`{adt}` defined here\", adt = ty));\n+                    err.span_label(field.ident.span, \"field does not exist\");\n+                    err.span_label(\n+                        ty_span,\n+                        format!(\n+                            \"`{adt}` is a tuple {kind_name}, \\\n+                                 use the appropriate syntax: `{adt}(/* fields */)`\",\n+                            adt = ty,\n+                            kind_name = kind_name\n+                        ),\n+                    );\n+                }\n+            },\n             _ => {\n                 // prevent all specified fields from being suggested\n                 let skip_fields = skip_fields.iter().map(|ref x| x.ident.name);"}, {"sha": "63f4df359b831ed2b9fe1cb8a5768c29d6ad8af7", "filename": "src/test/ui/issues/issue-80607.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0300716efc88a0b11f7121f8a15f5f385265b5d/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0300716efc88a0b11f7121f8a15f5f385265b5d/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80607.rs?ref=e0300716efc88a0b11f7121f8a15f5f385265b5d", "patch": "@@ -4,7 +4,7 @@ pub enum Enum {\n }\n \n pub fn foo(x: i32) -> Enum {\n-    Enum::V1 { x } //~ ERROR field does not exist\n+    Enum::V1 { x } //~ ERROR `Enum::V1` has no field named `x`\n }\n \n fn main() {}"}, {"sha": "5375478942b18e1609feb2646cebde8eb805c8c3", "filename": "src/test/ui/issues/issue-80607.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0300716efc88a0b11f7121f8a15f5f385265b5d/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e0300716efc88a0b11f7121f8a15f5f385265b5d/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-80607.stderr?ref=e0300716efc88a0b11f7121f8a15f5f385265b5d", "patch": "@@ -2,12 +2,12 @@ error[E0559]: variant `Enum::V1` has no field named `x`\n   --> $DIR/issue-80607.rs:7:16\n    |\n LL |     V1(i32),\n-   |     -- `Enum` defined here\n+   |     -- `Enum::V1` defined here\n ...\n LL |     Enum::V1 { x }\n    |     --------   ^ field does not exist\n    |     |\n-   |     `Enum` is a tuple variant, use the appropriate syntax: `Enum(/* fields */)`\n+   |     `Enum::V1` is a tuple variant, use the appropriate syntax: `Enum::V1(/* fields */)`\n \n error: aborting due to previous error\n "}]}