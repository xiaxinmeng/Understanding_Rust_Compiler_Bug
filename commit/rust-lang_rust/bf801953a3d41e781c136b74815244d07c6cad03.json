{"sha": "bf801953a3d41e781c136b74815244d07c6cad03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmODAxOTUzYTNkNDFlNzgxYzEzNmI3NDgxNTI0NGQwN2M2Y2FkMDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-01T07:31:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-01T07:31:40Z"}, "message": "rename", "tree": {"sha": "70c84d2f02e5aaace9bdb9ed6c5d5cab8b9a6fed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70c84d2f02e5aaace9bdb9ed6c5d5cab8b9a6fed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf801953a3d41e781c136b74815244d07c6cad03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf801953a3d41e781c136b74815244d07c6cad03", "html_url": "https://github.com/rust-lang/rust/commit/bf801953a3d41e781c136b74815244d07c6cad03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf801953a3d41e781c136b74815244d07c6cad03/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "678a458543bdc2d6a94098fd38658d0827ff3438", "url": "https://api.github.com/repos/rust-lang/rust/commits/678a458543bdc2d6a94098fd38658d0827ff3438", "html_url": "https://github.com/rust-lang/rust/commit/678a458543bdc2d6a94098fd38658d0827ff3438"}], "stats": {"total": 166, "additions": 86, "deletions": 80}, "files": [{"sha": "7423611555ab82c4421187290d480c0d1c12fa91", "filename": "crates/ra_lsp_server/src/cargo_target_spec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fcargo_target_spec.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -1,13 +1,13 @@\n use crate::{\n     project_model::{self, TargetKind},\n-    server_world::ServerWorld,\n+    world::WorldSnapshot,\n     Result\n };\n \n use ra_ide_api::{FileId, RunnableKind};\n \n pub(crate) fn runnable_args(\n-    world: &ServerWorld,\n+    world: &WorldSnapshot,\n     file_id: FileId,\n     kind: &RunnableKind,\n ) -> Result<Vec<String>> {\n@@ -58,7 +58,7 @@ pub struct CargoTargetSpec {\n }\n \n impl CargoTargetSpec {\n-    pub fn for_file(world: &ServerWorld, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n+    pub fn for_file(world: &WorldSnapshot, file_id: FileId) -> Result<Option<CargoTargetSpec>> {\n         let &crate_id = match world.analysis().crate_for(file_id)?.first() {\n             Some(crate_id) => crate_id,\n             None => return Ok(None),"}, {"sha": "88d29b25636d6d2bd7f87874d7a5dd685ce7fbd4", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -12,7 +12,7 @@ use ra_ide_api::{\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n \n-use crate::{req, server_world::ServerWorld, Result};\n+use crate::{req, world::WorldSnapshot, Result};\n \n pub trait Conv {\n     type Output;\n@@ -228,49 +228,49 @@ impl<T: ConvWith> ConvWith for Option<T> {\n }\n \n impl<'a> TryConvWith for &'a Url {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FileId;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FileId> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(self)\n     }\n }\n \n impl TryConvWith for FileId {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = Url;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<Url> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<Url> {\n         world.file_id_to_uri(self)\n     }\n }\n \n impl<'a> TryConvWith for &'a TextDocumentItem {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FileId;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FileId> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n impl<'a> TryConvWith for &'a VersionedTextDocumentIdentifier {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FileId;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FileId> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         self.uri.try_conv_with(world)\n     }\n }\n \n impl<'a> TryConvWith for &'a TextDocumentIdentifier {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FileId;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FileId> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileId> {\n         world.uri_to_file_id(&self.uri)\n     }\n }\n \n impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FilePosition;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FilePosition> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FilePosition> {\n         let file_id = self.text_document.try_conv_with(world)?;\n         let line_index = world.analysis().file_line_index(file_id);\n         let offset = self.position.conv_with(&line_index);\n@@ -279,9 +279,9 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n }\n \n impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = FileRange;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<FileRange> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<FileRange> {\n         let file_id = self.0.try_conv_with(world)?;\n         let line_index = world.analysis().file_line_index(file_id);\n         let range = self.1.conv_with(&line_index);\n@@ -302,9 +302,9 @@ impl<T: TryConvWith> TryConvWith for Vec<T> {\n }\n \n impl TryConvWith for SourceChange {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = req::SourceChange;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<req::SourceChange> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<req::SourceChange> {\n         let cursor_position = match self.cursor_position {\n             None => None,\n             Some(pos) => {\n@@ -342,9 +342,9 @@ impl TryConvWith for SourceChange {\n }\n \n impl TryConvWith for SourceFileEdit {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = TextDocumentEdit;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<TextDocumentEdit> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<TextDocumentEdit> {\n         let text_document = VersionedTextDocumentIdentifier {\n             uri: self.file_id.try_conv_with(world)?,\n             version: None,\n@@ -356,9 +356,9 @@ impl TryConvWith for SourceFileEdit {\n }\n \n impl TryConvWith for FileSystemEdit {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = ResourceOp;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<ResourceOp> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<ResourceOp> {\n         let res = match self {\n             FileSystemEdit::CreateFile { source_root, path } => {\n                 let uri = world.path_to_uri(source_root, &path)?;\n@@ -375,9 +375,9 @@ impl TryConvWith for FileSystemEdit {\n }\n \n impl TryConvWith for &NavigationTarget {\n-    type Ctx = ServerWorld;\n+    type Ctx = WorldSnapshot;\n     type Output = Location;\n-    fn try_conv_with(self, world: &ServerWorld) -> Result<Location> {\n+    fn try_conv_with(self, world: &WorldSnapshot) -> Result<Location> {\n         let line_index = world.analysis().file_line_index(self.file_id());\n         let range = self.range();\n         to_location(self.file_id(), range, &world, &line_index)\n@@ -386,7 +386,7 @@ impl TryConvWith for &NavigationTarget {\n \n pub fn to_location_link(\n     target: &RangeInfo<NavigationTarget>,\n-    world: &ServerWorld,\n+    world: &WorldSnapshot,\n     // line index for original range file\n     line_index: &LineIndex,\n ) -> Result<LocationLink> {\n@@ -410,7 +410,7 @@ pub fn to_location_link(\n pub fn to_location(\n     file_id: FileId,\n     range: TextRange,\n-    world: &ServerWorld,\n+    world: &WorldSnapshot,\n     line_index: &LineIndex,\n ) -> Result<Location> {\n     let url = file_id.try_conv_with(world)?;"}, {"sha": "aabde420b45929e86162b8dc450cf96561aae800", "filename": "crates/ra_lsp_server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Flib.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -7,7 +7,7 @@ mod project_model;\n mod vfs_filter;\n pub mod req;\n pub mod init;\n-mod server_world;\n+mod world;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n pub use crate::{caps::server_capabilities, main_loop::main_loop, main_loop::LspError, init::InitializationOptions};"}, {"sha": "6080a3a4e6cf52a46ffb2b33f3e11e48144fae29", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -24,7 +24,7 @@ use crate::{\n     },\n     project_model::workspace_loader,\n     req,\n-    server_world::{ServerWorld, ServerWorldState},\n+    world::{WorldSnapshot, WorldState},\n     Result,\n     InitializationOptions,\n };\n@@ -73,7 +73,7 @@ pub fn main_loop(\n         loaded_workspaces\n     };\n \n-    let mut state = ServerWorldState::new(ws_roots, workspaces);\n+    let mut state = WorldState::new(ws_roots, workspaces);\n \n     let pool = ThreadPool::new(THREADPOOL_SIZE);\n     let (task_sender, task_receiver) = unbounded::<Task>();\n@@ -161,7 +161,7 @@ fn main_loop_inner(\n     msg_receiver: &Receiver<RawMessage>,\n     task_sender: Sender<Task>,\n     task_receiver: Receiver<Task>,\n-    state: &mut ServerWorldState,\n+    state: &mut WorldState,\n     pending_requests: &mut PendingRequests,\n ) -> Result<()> {\n     let mut subs = Subscriptions::default();\n@@ -278,7 +278,7 @@ fn on_task(\n     task: Task,\n     msg_sender: &Sender<RawMessage>,\n     pending_requests: &mut PendingRequests,\n-    state: &mut ServerWorldState,\n+    state: &mut WorldState,\n ) {\n     match task {\n         Task::Respond(response) => {\n@@ -295,7 +295,7 @@ fn on_task(\n }\n \n fn on_request(\n-    world: &mut ServerWorldState,\n+    world: &mut WorldState,\n     pending_requests: &mut PendingRequests,\n     pool: &ThreadPool,\n     sender: &Sender<Task>,\n@@ -352,7 +352,7 @@ fn on_request(\n \n fn on_notification(\n     msg_sender: &Sender<RawMessage>,\n-    state: &mut ServerWorldState,\n+    state: &mut WorldState,\n     pending_requests: &mut PendingRequests,\n     subs: &mut Subscriptions,\n     not: RawNotification,\n@@ -422,7 +422,7 @@ fn on_notification(\n struct PoolDispatcher<'a> {\n     req: Option<RawRequest>,\n     pool: &'a ThreadPool,\n-    world: &'a mut ServerWorldState,\n+    world: &'a mut WorldState,\n     pending_requests: &'a mut PendingRequests,\n     msg_sender: &'a Sender<RawMessage>,\n     sender: &'a Sender<Task>,\n@@ -433,7 +433,7 @@ impl<'a> PoolDispatcher<'a> {\n     /// Dispatches the request onto the current thread\n     fn on_sync<R>(\n         &mut self,\n-        f: fn(&mut ServerWorldState, R::Params) -> Result<R::Result>,\n+        f: fn(&mut WorldState, R::Params) -> Result<R::Result>,\n     ) -> Result<&mut Self>\n     where\n         R: req::Request + 'static,\n@@ -453,7 +453,7 @@ impl<'a> PoolDispatcher<'a> {\n     }\n \n     /// Dispatches the request onto thread pool\n-    fn on<R>(&mut self, f: fn(ServerWorld, R::Params) -> Result<R::Result>) -> Result<&mut Self>\n+    fn on<R>(&mut self, f: fn(WorldSnapshot, R::Params) -> Result<R::Result>) -> Result<&mut Self>\n     where\n         R: req::Request + 'static,\n         R::Params: DeserializeOwned + Send + 'static,\n@@ -557,7 +557,7 @@ where\n \n fn update_file_notifications_on_threadpool(\n     pool: &ThreadPool,\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     publish_decorations: bool,\n     sender: Sender<Task>,\n     subscriptions: Vec<FileId>,"}, {"sha": "6373240d5f9f091c52c14eadcb30a78966e4678d", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -24,11 +24,11 @@ use crate::{\n     cargo_target_spec::{runnable_args, CargoTargetSpec},\n     conv::{to_location, to_location_link, Conv, ConvWith, MapConvWith, TryConvWith},\n     req::{self, Decoration},\n-    server_world::ServerWorld,\n+    world::WorldSnapshot,\n     LspError, Result,\n };\n \n-pub fn handle_analyzer_status(world: ServerWorld, _: ()) -> Result<String> {\n+pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     let mut buf = world.status();\n     writeln!(buf, \"\\n\\nrequests:\").unwrap();\n     let requests = world.latest_requests.read();\n@@ -39,7 +39,7 @@ pub fn handle_analyzer_status(world: ServerWorld, _: ()) -> Result<String> {\n     Ok(buf)\n }\n \n-pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) -> Result<String> {\n+pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -> Result<String> {\n     let id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(id);\n     let text_range = params.range.map(|p| p.conv_with(&line_index));\n@@ -49,7 +49,7 @@ pub fn handle_syntax_tree(world: ServerWorld, params: req::SyntaxTreeParams) ->\n \n // FIXME: drop this API\n pub fn handle_extend_selection(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::ExtendSelectionParams,\n ) -> Result<req::ExtendSelectionResult> {\n     log::error!(\n@@ -69,7 +69,7 @@ pub fn handle_extend_selection(\n }\n \n pub fn handle_selection_range(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::SelectionRangeParams,\n ) -> Result<Vec<req::SelectionRange>> {\n     let _p = profile(\"handle_selection_range\");\n@@ -110,7 +110,7 @@ pub fn handle_selection_range(\n }\n \n pub fn handle_find_matching_brace(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::FindMatchingBraceParams,\n ) -> Result<Vec<Position>> {\n     let _p = profile(\"handle_find_matching_brace\");\n@@ -129,7 +129,7 @@ pub fn handle_find_matching_brace(\n }\n \n pub fn handle_join_lines(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::JoinLinesParams,\n ) -> Result<req::SourceChange> {\n     let _p = profile(\"handle_join_lines\");\n@@ -138,7 +138,7 @@ pub fn handle_join_lines(\n }\n \n pub fn handle_on_enter(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::SourceChange>> {\n     let _p = profile(\"handle_on_enter\");\n@@ -150,7 +150,7 @@ pub fn handle_on_enter(\n }\n \n pub fn handle_on_type_formatting(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::DocumentOnTypeFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n     let _p = profile(\"handle_on_type_formatting\");\n@@ -181,7 +181,7 @@ pub fn handle_on_type_formatting(\n }\n \n pub fn handle_document_symbol(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::DocumentSymbolParams,\n ) -> Result<Option<req::DocumentSymbolResponse>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -219,7 +219,7 @@ pub fn handle_document_symbol(\n }\n \n pub fn handle_workspace_symbol(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::WorkspaceSymbolParams,\n ) -> Result<Option<Vec<SymbolInformation>>> {\n     let all_symbols = params.query.contains('#');\n@@ -245,7 +245,7 @@ pub fn handle_workspace_symbol(\n \n     return Ok(Some(res));\n \n-    fn exec_query(world: &ServerWorld, query: Query) -> Result<Vec<SymbolInformation>> {\n+    fn exec_query(world: &WorldSnapshot, query: Query) -> Result<Vec<SymbolInformation>> {\n         let mut res = Vec::new();\n         for nav in world.analysis().symbol_search(query)? {\n             let info = SymbolInformation {\n@@ -262,7 +262,7 @@ pub fn handle_workspace_symbol(\n }\n \n pub fn handle_goto_definition(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n@@ -282,7 +282,7 @@ pub fn handle_goto_definition(\n }\n \n pub fn handle_goto_implementation(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoImplementationResponse>> {\n     let position = params.try_conv_with(&world)?;\n@@ -302,7 +302,7 @@ pub fn handle_goto_implementation(\n }\n \n pub fn handle_goto_type_definition(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::GotoTypeDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n@@ -322,7 +322,7 @@ pub fn handle_goto_type_definition(\n }\n \n pub fn handle_parent_module(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Vec<Location>> {\n     let position = params.try_conv_with(&world)?;\n@@ -335,7 +335,7 @@ pub fn handle_parent_module(\n }\n \n pub fn handle_runnables(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::RunnablesParams,\n ) -> Result<Vec<req::Runnable>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -396,15 +396,15 @@ pub fn handle_runnables(\n }\n \n pub fn handle_decorations(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: TextDocumentIdentifier,\n ) -> Result<Vec<Decoration>> {\n     let file_id = params.try_conv_with(&world)?;\n     highlight(&world, file_id)\n }\n \n pub fn handle_completion(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::CompletionParams,\n ) -> Result<Option<req::CompletionResponse>> {\n     let _p = profile(\"handle_completion\");\n@@ -447,7 +447,7 @@ pub fn handle_completion(\n }\n \n pub fn handle_folding_range(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: FoldingRangeParams,\n ) -> Result<Option<Vec<FoldingRange>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -481,7 +481,7 @@ pub fn handle_folding_range(\n }\n \n pub fn handle_signature_help(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<req::SignatureHelp>> {\n     let position = params.try_conv_with(&world)?;\n@@ -500,7 +500,7 @@ pub fn handle_signature_help(\n }\n \n pub fn handle_hover(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Hover>> {\n     let position = params.try_conv_with(&world)?;\n@@ -522,7 +522,7 @@ pub fn handle_hover(\n \n /// Test doc comment\n pub fn handle_prepare_rename(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<PrepareRenameResponse>> {\n     let position = params.try_conv_with(&world)?;\n@@ -543,7 +543,7 @@ pub fn handle_prepare_rename(\n     Ok(Some(PrepareRenameResponse::Range(loc.range)))\n }\n \n-pub fn handle_rename(world: ServerWorld, params: RenameParams) -> Result<Option<WorkspaceEdit>> {\n+pub fn handle_rename(world: WorldSnapshot, params: RenameParams) -> Result<Option<WorkspaceEdit>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(file_id);\n     let offset = params.position.conv_with(&line_index);\n@@ -569,7 +569,7 @@ pub fn handle_rename(world: ServerWorld, params: RenameParams) -> Result<Option<\n }\n \n pub fn handle_references(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::ReferenceParams,\n ) -> Result<Option<Vec<Location>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -597,7 +597,7 @@ pub fn handle_references(\n }\n \n pub fn handle_formatting(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: DocumentFormattingParams,\n ) -> Result<Option<Vec<TextEdit>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -641,7 +641,7 @@ pub fn handle_formatting(\n }\n \n pub fn handle_code_action(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::CodeActionParams,\n ) -> Result<Option<CodeActionResponse>> {\n     let _p = profile(\"handle_code_action\");\n@@ -704,7 +704,7 @@ pub fn handle_code_action(\n }\n \n pub fn handle_code_lens(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::CodeLensParams,\n ) -> Result<Option<Vec<CodeLens>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -781,7 +781,7 @@ enum CodeLensResolveData {\n     Impls(req::TextDocumentPositionParams),\n }\n \n-pub fn handle_code_lens_resolve(world: ServerWorld, code_lens: CodeLens) -> Result<CodeLens> {\n+pub fn handle_code_lens_resolve(world: WorldSnapshot, code_lens: CodeLens) -> Result<CodeLens> {\n     let data = code_lens.data.unwrap();\n     let resolve = serde_json::from_value(data)?;\n     match resolve {\n@@ -826,7 +826,7 @@ pub fn handle_code_lens_resolve(world: ServerWorld, code_lens: CodeLens) -> Resu\n }\n \n pub fn handle_document_highlight(\n-    world: ServerWorld,\n+    world: WorldSnapshot,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Vec<DocumentHighlight>>> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n@@ -845,7 +845,7 @@ pub fn handle_document_highlight(\n }\n \n pub fn publish_diagnostics(\n-    world: &ServerWorld,\n+    world: &WorldSnapshot,\n     file_id: FileId,\n ) -> Result<req::PublishDiagnosticsParams> {\n     let uri = world.file_id_to_uri(file_id)?;\n@@ -867,14 +867,14 @@ pub fn publish_diagnostics(\n }\n \n pub fn publish_decorations(\n-    world: &ServerWorld,\n+    world: &WorldSnapshot,\n     file_id: FileId,\n ) -> Result<req::PublishDecorationsParams> {\n     let uri = world.file_id_to_uri(file_id)?;\n     Ok(req::PublishDecorationsParams { uri, decorations: highlight(&world, file_id)? })\n }\n \n-fn highlight(world: &ServerWorld, file_id: FileId) -> Result<Vec<Decoration>> {\n+fn highlight(world: &WorldSnapshot, file_id: FileId) -> Result<Vec<Decoration>> {\n     let line_index = world.analysis().file_line_index(file_id);\n     let res = world\n         .analysis()"}, {"sha": "e0d2f630610e667e5710776463b5c9de17c8d681", "filename": "crates/ra_lsp_server/src/world.rs", "status": "renamed", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf801953a3d41e781c136b74815244d07c6cad03/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fworld.rs?ref=bf801953a3d41e781c136b74815244d07c6cad03", "patch": "@@ -22,8 +22,13 @@ use crate::{\n     LspError,\n };\n \n+/// `WorldState` is the primary mutable state of the language server\n+///\n+/// The most interesting components are `vfs`, which stores a consistent\n+/// snapshot of the file systems, and `analysis_host`, which stores our\n+/// incremental salsa database.\n #[derive(Debug)]\n-pub struct ServerWorldState {\n+pub struct WorldState {\n     pub roots_to_scan: usize,\n     pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n@@ -32,15 +37,16 @@ pub struct ServerWorldState {\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n }\n \n-pub struct ServerWorld {\n+/// An immutable snapshot of the world's state at a point in time.\n+pub struct WorldSnapshot {\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis: Analysis,\n     pub vfs: Arc<RwLock<Vfs>>,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n }\n \n-impl ServerWorldState {\n-    pub fn new(folder_roots: Vec<PathBuf>, workspaces: Vec<ProjectWorkspace>) -> ServerWorldState {\n+impl WorldState {\n+    pub fn new(folder_roots: Vec<PathBuf>, workspaces: Vec<ProjectWorkspace>) -> WorldState {\n         let mut change = AnalysisChange::new();\n \n         let mut roots = Vec::new();\n@@ -70,7 +76,7 @@ impl ServerWorldState {\n \n         let mut analysis_host = AnalysisHost::default();\n         analysis_host.apply_change(change);\n-        ServerWorldState {\n+        WorldState {\n             roots_to_scan,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n@@ -136,8 +142,8 @@ impl ServerWorldState {\n         self.analysis_host.apply_change(change);\n     }\n \n-    pub fn snapshot(&self) -> ServerWorld {\n-        ServerWorld {\n+    pub fn snapshot(&self) -> WorldSnapshot {\n+        WorldSnapshot {\n             workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(),\n             vfs: Arc::clone(&self.vfs),\n@@ -158,7 +164,7 @@ impl ServerWorldState {\n     }\n }\n \n-impl ServerWorld {\n+impl WorldSnapshot {\n     pub fn analysis(&self) -> &Analysis {\n         &self.analysis\n     }", "previous_filename": "crates/ra_lsp_server/src/server_world.rs"}]}