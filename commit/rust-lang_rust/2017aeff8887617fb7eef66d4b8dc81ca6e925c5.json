{"sha": "2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "node_id": "C_kwDOAAsO6NoAKDIwMTdhZWZmODg4NzYxN2ZiN2VlZjY2ZDRiOGRjODFjYTZlOTI1YzU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-16T05:05:08Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T11:24:34Z"}, "message": "Use `IntoIterator` for `mk_fn_sig`.\n\nThis makes a lot of call sites nicer.", "tree": {"sha": "ddb8be7f08e54a1c2ace316e414f0db3d43d968a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddb8be7f08e54a1c2ace316e414f0db3d43d968a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "html_url": "https://github.com/rust-lang/rust/commit/2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8237db3eed2c91c14ce46b482b3d479a39d328d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8237db3eed2c91c14ce46b482b3d479a39d328d", "html_url": "https://github.com/rust-lang/rust/commit/c8237db3eed2c91c14ce46b482b3d479a39d328d"}], "stats": {"total": 63, "additions": 28, "deletions": 35}, "files": [{"sha": "3dc0ac03312e9a4b365ecf0295a9d5c06a9b7562", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -27,8 +27,6 @@ use rustc_middle::ty::Instance;\n use std::cell::RefCell;\n use std::ffi::CString;\n \n-use std::iter;\n-\n pub mod mapgen;\n \n const UNUSED_FUNCTION_COUNTER_ID: CounterValueReference = CounterValueReference::START;\n@@ -201,7 +199,7 @@ fn declare_unused_fn<'tcx>(cx: &CodegenCx<'_, 'tcx>, def_id: DefId) -> Instance<\n         tcx.symbol_name(instance).name,\n         cx.fn_abi_of_fn_ptr(\n             ty::Binder::dummy(tcx.mk_fn_sig(\n-                iter::once(tcx.mk_unit()),\n+                [tcx.mk_unit()],\n                 tcx.mk_unit(),\n                 false,\n                 hir::Unsafety::Unsafe,"}, {"sha": "39afb4af6f68eba9c99e7186e33cc588089ad062", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -22,7 +22,6 @@ use rustc_target::abi::{self, Align, HasDataLayout, Primitive};\n use rustc_target::spec::{HasTargetSpec, PanicStrategy};\n \n use std::cmp::Ordering;\n-use std::iter;\n \n fn get_simple_intrinsic<'ll>(\n     cx: &CodegenCx<'ll, '_>,\n@@ -798,23 +797,23 @@ fn get_rust_try_fn<'ll, 'tcx>(\n     let i8p = tcx.mk_mut_ptr(tcx.types.i8);\n     // `unsafe fn(*mut i8) -> ()`\n     let try_fn_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-        iter::once(i8p),\n+        [i8p],\n         tcx.mk_unit(),\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust,\n     )));\n     // `unsafe fn(*mut i8, *mut i8) -> ()`\n     let catch_fn_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-        [i8p, i8p].iter().cloned(),\n+        [i8p, i8p],\n         tcx.mk_unit(),\n         false,\n         hir::Unsafety::Unsafe,\n         Abi::Rust,\n     )));\n     // `unsafe fn(unsafe fn(*mut i8) -> (), *mut i8, unsafe fn(*mut i8, *mut i8) -> ()) -> i32`\n     let rust_fn_sig = ty::Binder::dummy(cx.tcx.mk_fn_sig(\n-        [try_fn_ty, i8p, catch_fn_ty].into_iter(),\n+        [try_fn_ty, i8p, catch_fn_ty],\n         tcx.types.i32,\n         false,\n         hir::Unsafety::Unsafe,"}, {"sha": "4cf1592379396346658d64ab9d45b43867b15b6c", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -3109,7 +3109,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         debug!(?output_ty);\n \n-        let fn_ty = tcx.mk_fn_sig(input_tys.into_iter(), output_ty, decl.c_variadic, unsafety, abi);\n+        let fn_ty = tcx.mk_fn_sig(input_tys, output_ty, decl.c_variadic, unsafety, abi);\n         let bare_fn_ty = ty::Binder::bind_with_vars(fn_ty, bound_vars);\n \n         if !self.allow_ty_infer() && !(visitor.0.is_empty() && infer_replacements.is_empty()) {"}, {"sha": "8d9d8fa5654703e1072650f3bea33784230d7bf4", "filename": "compiler/rustc_hir_analysis/src/check/intrinsic.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -15,8 +15,6 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n-use std::iter;\n-\n fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n@@ -385,14 +383,14 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             kw::Try => {\n                 let mut_u8 = tcx.mk_mut_ptr(tcx.types.u8);\n                 let try_fn_ty = ty::Binder::dummy(tcx.mk_fn_sig(\n-                    iter::once(mut_u8),\n+                    [mut_u8],\n                     tcx.mk_unit(),\n                     false,\n                     hir::Unsafety::Normal,\n                     Abi::Rust,\n                 ));\n                 let catch_fn_ty = ty::Binder::dummy(tcx.mk_fn_sig(\n-                    [mut_u8, mut_u8].iter().cloned(),\n+                    [mut_u8, mut_u8],\n                     tcx.mk_unit(),\n                     false,\n                     hir::Unsafety::Normal,\n@@ -447,7 +445,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         };\n         (n_tps, 0, inputs, output, unsafety)\n     };\n-    let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n+    let sig = tcx.mk_fn_sig(inputs, output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);\n     equate_intrinsic_type(tcx, it, n_tps, n_lts, sig)\n }\n@@ -545,13 +543,7 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         }\n     };\n \n-    let sig = tcx.mk_fn_sig(\n-        inputs.into_iter(),\n-        output,\n-        false,\n-        hir::Unsafety::Unsafe,\n-        Abi::PlatformIntrinsic,\n-    );\n+    let sig = tcx.mk_fn_sig(inputs, output, false, hir::Unsafety::Unsafe, Abi::PlatformIntrinsic);\n     let sig = ty::Binder::dummy(sig);\n     equate_intrinsic_type(tcx, it, n_tps, 0, sig)\n }"}, {"sha": "11240cf22e4b1ba0eab36d0fd7e63af4f3c025aa", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -113,7 +113,6 @@ use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode};\n \n-use std::iter;\n use std::ops::Not;\n \n use astconv::AstConv;\n@@ -348,7 +347,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     }\n \n     let se_ty = tcx.mk_fn_ptr(expected_return_type.map_bound(|expected_return_type| {\n-        tcx.mk_fn_sig(iter::empty(), expected_return_type, false, hir::Unsafety::Normal, Abi::Rust)\n+        tcx.mk_fn_sig([], expected_return_type, false, hir::Unsafety::Normal, Abi::Rust)\n     }));\n \n     require_same_types(\n@@ -434,7 +433,7 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: DefId) {\n             }\n \n             let se_ty = tcx.mk_fn_ptr(ty::Binder::dummy(tcx.mk_fn_sig(\n-                [tcx.types.isize, tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))].iter().cloned(),\n+                [tcx.types.isize, tcx.mk_imm_ptr(tcx.mk_imm_ptr(tcx.types.u8))],\n                 tcx.types.isize,\n                 false,\n                 hir::Unsafety::Normal,"}, {"sha": "bf8259ff70fa91a71b934a3a3054af004eb544a8", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -264,7 +264,7 @@ fn check_lang_start_fn<'tcx>(\n         let fn_generic = generics.param_at(0, tcx);\n         let generic_ty = tcx.mk_ty_param(fn_generic.index, fn_generic.name);\n         let expected_fn_sig =\n-            tcx.mk_fn_sig([].into_iter(), generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n+            tcx.mk_fn_sig([], generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n         let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));\n \n         // we emit the same error to suggest changing the arg no matter what's wrong with the arg"}, {"sha": "cf296a7bf6530daa8d0666102c9b4f14811694aa", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // the `closures` table.\n         let sig = bound_sig.map_bound(|sig| {\n             self.tcx.mk_fn_sig(\n-                iter::once(self.tcx.intern_tup(sig.inputs())),\n+                [self.tcx.intern_tup(sig.inputs())],\n                 sig.output(),\n                 sig.c_variadic,\n                 sig.unsafety,\n@@ -326,7 +326,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         debug!(?ret_param_ty);\n \n         let sig = projection.rebind(self.tcx.mk_fn_sig(\n-            input_tys.iter(),\n+            input_tys,\n             ret_param_ty,\n             false,\n             hir::Unsafety::Normal,"}, {"sha": "e1a72c70145faee9cef98d9658eb2825fd08dee4", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -1660,11 +1660,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         unsafety: hir::Unsafety,\n     ) -> PolyFnSig<'tcx> {\n         sig.map_bound(|s| {\n-            let params_iter = match s.inputs()[0].kind() {\n-                ty::Tuple(params) => params.into_iter(),\n+            let params = match s.inputs()[0].kind() {\n+                ty::Tuple(params) => *params,\n                 _ => bug!(),\n             };\n-            self.mk_fn_sig(params_iter, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)\n+            self.mk_fn_sig(params, s.output(), s.c_variadic, unsafety, abi::Abi::Rust)\n         })\n     }\n \n@@ -2215,6 +2215,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         if ts.is_empty() { List::empty() } else { self._intern_bound_variable_kinds(ts) }\n     }\n \n+    // Unlike various other `mk_*` functions, this one uses `I: IntoIterator`\n+    // instead of `I: Iterator`. Unlike those other functions, this one doesn't\n+    // have a `intern_fn_sig` variant that can be used for cases where `I` is\n+    // something like a `Vec`. That's because of the need to combine `inputs`\n+    // and `output`.\n     pub fn mk_fn_sig<I, T>(\n         self,\n         inputs: I,\n@@ -2224,10 +2229,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         abi: abi::Abi,\n     ) -> T::Output\n     where\n-        I: Iterator<Item = T>,\n+        I: IntoIterator<Item = T>,\n         T: CollectAndApply<Ty<'tcx>, ty::FnSig<'tcx>>,\n     {\n-        T::collect_and_apply(inputs.chain(iter::once(output)), |xs| ty::FnSig {\n+        T::collect_and_apply(inputs.into_iter().chain(iter::once(output)), |xs| ty::FnSig {\n             inputs_and_output: self.intern_type_list(xs),\n             c_variadic,\n             unsafety,"}, {"sha": "59a2227cd3646a1bc63d087dd2fda4268d507b78", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -781,7 +781,7 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                 let output = transform_ty(tcx, fn_sig.skip_binder().output(), options);\n                 ty = tcx.mk_fn_ptr(ty::Binder::bind_with_vars(\n                     tcx.mk_fn_sig(\n-                        parameters.into_iter(),\n+                        parameters,\n                         output,\n                         fn_sig.c_variadic(),\n                         fn_sig.unsafety(),"}, {"sha": "91b463800a8144dd6fb2d3dc0a55c614443849e4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -2012,7 +2012,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             let sig = match inputs.kind() {\n                 ty::Tuple(inputs) if infcx.tcx.is_fn_trait(trait_ref.def_id()) => {\n                     infcx.tcx.mk_fn_sig(\n-                        inputs.iter(),\n+                        *inputs,\n                         infcx.next_ty_var(TypeVariableOrigin {\n                             span: DUMMY_SP,\n                             kind: TypeVariableOriginKind::MiscVariable,\n@@ -2023,7 +2023,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     )\n                 }\n                 _ => infcx.tcx.mk_fn_sig(\n-                    std::iter::once(inputs),\n+                    [inputs],\n                     infcx.next_ty_var(TypeVariableOrigin {\n                         span: DUMMY_SP,\n                         kind: TypeVariableOriginKind::MiscVariable,"}, {"sha": "41924dc2a6d936056556d2fe9872c8750467cb05", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2017aeff8887617fb7eef66d4b8dc81ca6e925c5/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=2017aeff8887617fb7eef66d4b8dc81ca6e925c5", "patch": "@@ -141,7 +141,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n \n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n-                    [env_ty, resume_ty].into_iter(),\n+                    [env_ty, resume_ty],\n                     ret_ty,\n                     false,\n                     hir::Unsafety::Normal,"}]}