{"sha": "150840667e4bc1782e6947cc53af94a37281ab38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MDg0MDY2N2U0YmMxNzgyZTY5NDdjYzUzYWY5NGEzNzI4MWFiMzg=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-19T11:25:43Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-08-19T11:25:43Z"}, "message": "Merge pull request #204 from Manishearth/bit-mask\n\nExtend and correct the ineffective_bit_mask check", "tree": {"sha": "1eb3194cd53950c8a1ec5632728c65a11a010c9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb3194cd53950c8a1ec5632728c65a11a010c9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/150840667e4bc1782e6947cc53af94a37281ab38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/150840667e4bc1782e6947cc53af94a37281ab38", "html_url": "https://github.com/rust-lang/rust/commit/150840667e4bc1782e6947cc53af94a37281ab38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/150840667e4bc1782e6947cc53af94a37281ab38/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a", "html_url": "https://github.com/rust-lang/rust/commit/85f7f4c9b495ee8dbb737a2b832ab595ddeaba8a"}, {"sha": "98d24b5b5601d60f113ea14232416ce545f0cf73", "url": "https://api.github.com/repos/rust-lang/rust/commits/98d24b5b5601d60f113ea14232416ce545f0cf73", "html_url": "https://github.com/rust-lang/rust/commit/98d24b5b5601d60f113ea14232416ce545f0cf73"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "7789381da2391729f3946d40820aac429e4b62c0", "filename": "src/bit_mask.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/150840667e4bc1782e6947cc53af94a37281ab38/src%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150840667e4bc1782e6947cc53af94a37281ab38/src%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbit_mask.rs?ref=150840667e4bc1782e6947cc53af94a37281ab38", "patch": "@@ -39,7 +39,13 @@ declare_lint! {\n /// This lint is **deny** by default\n ///\n /// There is also a lint that warns on ineffective masks that is *warn*\n-/// by default\n+/// by default.\n+///\n+/// |Comparison|Bit-Op   |Example    |equals |Formula|\n+/// |`>` / `<=`|`|` / `^`|`x | 2 > 3`|`x > 3`|`\u00b9 && m <= c`|\n+/// |`<` / `>=`|`|` / `^`|`x ^ 1 < 4`|`x < 4`|`\u00b9 && m < c` |\n+///\n+/// `\u00b9 power_of_two(c + 1)`\n #[derive(Copy,Clone)]\n pub struct BitMask;\n \n@@ -127,12 +133,10 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_,\n                     \"incompatible bit mask: `_ | {}` will never be lower than `{}`\",\n                     mask_value, cmp_value));\n             } else {\n-                if mask_value < cmp_value {\n-                    span_lint(cx, INEFFECTIVE_BIT_MASK, *span, &format!(\n-                        \"ineffective bit mask: `x | {}` compared to `{}` is the same as x compared directly\",\n-                        mask_value, cmp_value));\n-                }\n+                check_ineffective_lt(cx, *span, mask_value, cmp_value, \"|\");\n             },\n+            BiBitXor =>\n+                check_ineffective_lt(cx, *span, mask_value, cmp_value, \"^\"),\n             _ => ()\n         },\n         BiLe | BiGt => match bit_op {\n@@ -151,18 +155,32 @@ fn check_bit_mask(cx: &Context, bit_op: BinOp_, cmp_op: BinOp_,\n                     \"incompatible bit mask: `_ | {}` will always be higher than `{}`\",\n                     mask_value, cmp_value));\n             } else {\n-                if mask_value < cmp_value {\n-                    span_lint(cx, INEFFECTIVE_BIT_MASK, *span, &format!(\n-                        \"ineffective bit mask: `x | {}` compared to `{}` is the same as x compared directly\",\n-                        mask_value, cmp_value));\n-                }\n+                check_ineffective_gt(cx, *span, mask_value, cmp_value, \"|\");\n             },\n+            BiBitXor =>\n+                check_ineffective_gt(cx, *span, mask_value, cmp_value, \"^\"),\n             _ => ()\n         },\n         _ => ()\n     }\n }\n \n+fn check_ineffective_lt(cx: &Context, span: Span, m: u64, c: u64, op: &str) {\n+    if c.is_power_of_two() && m < c {\n+        span_lint(cx, INEFFECTIVE_BIT_MASK, span, &format!(\n+            \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n+            op, m, c));\n+    }\n+}\n+\n+fn check_ineffective_gt(cx: &Context, span: Span, m: u64, c: u64, op: &str) {\n+    if (c + 1).is_power_of_two() && m <= c {\n+        span_lint(cx, INEFFECTIVE_BIT_MASK, span, &format!(\n+            \"ineffective bit mask: `x {} {}` compared to `{}`, is the same as x compared directly\",\n+            op, m, c));\n+    }\n+}\n+\n fn fetch_int_literal(cx: &Context, lit : &Expr) -> Option<u64> {\n     match &lit.node {\n         &ExprLit(ref lit_ptr) => {"}, {"sha": "47e9c11138a63ef849a7bc2279f231213619aa0e", "filename": "tests/compile-fail/bit_masks.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/150840667e4bc1782e6947cc53af94a37281ab38/tests%2Fcompile-fail%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/150840667e4bc1782e6947cc53af94a37281ab38/tests%2Fcompile-fail%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbit_masks.rs?ref=150840667e4bc1782e6947cc53af94a37281ab38", "patch": "@@ -46,8 +46,13 @@ fn main() {\n fn ineffective() {\n     let x = 5;\n \n-    x | 1 > 2; //~ERROR ineffective bit mask\n-    x | 1 < 3; //~ERROR ineffective bit mask\n+    x | 1 > 3; //~ERROR ineffective bit mask\n+    x | 1 < 4; //~ERROR ineffective bit mask\n     x | 1 <= 3; //~ERROR ineffective bit mask\n-    x | 1 >= 2; //~ERROR ineffective bit mask\n+    x | 1 >= 8; //~ERROR ineffective bit mask\n+\n+    x | 1 > 2; // not an error (yet), better written as x >= 2\n+    x | 1 >= 7; // not an error (yet), better written as x >= 6\n+    x | 3 > 4; // not an error (yet), better written as x >= 4\n+    x | 4 <= 19;\n }"}]}