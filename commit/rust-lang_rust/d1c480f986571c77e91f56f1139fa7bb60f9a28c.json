{"sha": "d1c480f986571c77e91f56f1139fa7bb60f9a28c", "node_id": "C_kwDOAAsO6NoAKGQxYzQ4MGY5ODY1NzFjNzdlOTFmNTZmMTEzOWZhN2JiNjBmOWEyOGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-14T19:11:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-14T19:11:12Z"}, "message": "Rollup merge of #110154 - DaniPopes:library-typos, r=JohnTitor\n\nFix typos in library\n\nI ran [`typos -w library`](https://github.com/crate-ci/typos) to fix typos in the `library` directory.\n\nRefs #110150", "tree": {"sha": "b4c2e67e4b007a4eeffc419c5b2c2532ce926e83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4c2e67e4b007a4eeffc419c5b2c2532ce926e83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1c480f986571c77e91f56f1139fa7bb60f9a28c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkOaVQCRBK7hj4Ov3rIwAAvW4IAENTsWfwsKnncLOnUCBzXmed\nAG7kbmev28SMB5H/zmZAf9u4OMNHifBxFRYIjmoZ1aZ2K5dIJHtaYvogQ/D9oyfi\nkaF9RM6Boww5ct4SRXGvcdL/Sof7ymd2qeyUXa6VRmMMILdrP3f8xsBeK4qGe6Rk\n3Q6bIki0lnEIwL2cdYX2RuPFrRokSe/Y8cTCmxQVxA8hu/Z4UgCPy+cH2uxDcpFZ\nP1iEdJ8IG9KPjjx6JM9j+3kRZaUrvbgyWzvdU0WdRsL0dRjNbkiZMZ9oayk4kTGf\nZhi2m+STSNNVnDnPu1ELM8tc8lCextQsVW6zgJIYC7TZaw6CrjwbvLEDnSbeRk8=\n=a6vP\n-----END PGP SIGNATURE-----\n", "payload": "tree b4c2e67e4b007a4eeffc419c5b2c2532ce926e83\nparent 5107c4c556fe9fb319f1330f6562882cf41d3097\nparent a0daf22b95ff1cd3f7ac55ea9370987535f3134d\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1681499472 +0200\ncommitter GitHub <noreply@github.com> 1681499472 +0200\n\nRollup merge of #110154 - DaniPopes:library-typos, r=JohnTitor\n\nFix typos in library\n\nI ran [`typos -w library`](https://github.com/crate-ci/typos) to fix typos in the `library` directory.\n\nRefs #110150\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1c480f986571c77e91f56f1139fa7bb60f9a28c", "html_url": "https://github.com/rust-lang/rust/commit/d1c480f986571c77e91f56f1139fa7bb60f9a28c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1c480f986571c77e91f56f1139fa7bb60f9a28c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5107c4c556fe9fb319f1330f6562882cf41d3097", "url": "https://api.github.com/repos/rust-lang/rust/commits/5107c4c556fe9fb319f1330f6562882cf41d3097", "html_url": "https://github.com/rust-lang/rust/commit/5107c4c556fe9fb319f1330f6562882cf41d3097"}, {"sha": "a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0daf22b95ff1cd3f7ac55ea9370987535f3134d", "html_url": "https://github.com/rust-lang/rust/commit/a0daf22b95ff1cd3f7ac55ea9370987535f3134d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "45498a54b25dccb903aa7726f49b72d8a0af55b2", "filename": "library/core/src/intrinsics/mir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics%2Fmir.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -247,7 +247,7 @@\n //!     - The exception is the last arm, which must be `_ => basic_block` and corresponds to the\n //!       otherwise branch.\n //!  - [`Call`] has an associated function as well. The third argument of this function is a normal\n-//!    function call expresion, for example `my_other_function(a, 5)`.\n+//!    function call expression, for example `my_other_function(a, 5)`.\n //!\n \n #![unstable("}, {"sha": "07fd96f929586e65c53cbfd4d33c92c18332e1e2", "filename": "library/core/src/slice/sort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fsort.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -1486,7 +1486,7 @@ where\n }\n \n /// Finds a streak of presorted elements starting at the beginning of the slice. Returns the first\n-/// value that is not part of said streak, and a bool denoting wether the streak was reversed.\n+/// value that is not part of said streak, and a bool denoting whether the streak was reversed.\n /// Streaks can be increasing or decreasing.\n fn find_streak<T, F>(v: &[T], is_less: &mut F) -> (usize, bool)\n where"}, {"sha": "e3a464a1c51a97223dc5f8e641e0dc465248e48e", "filename": "library/core/src/str/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fpattern.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -1891,7 +1891,7 @@ unsafe fn small_slice_eq(x: &[u8], y: &[u8]) -> bool {\n \n     // SAFETY: Via the conditional above, we know that both `px` and `py`\n     // have the same length, so `px < pxend` implies that `py < pyend`.\n-    // Thus, derefencing both `px` and `py` in the loop below is safe.\n+    // Thus, dereferencing both `px` and `py` in the loop below is safe.\n     //\n     // Moreover, we set `pxend` and `pyend` to be 4 bytes before the actual\n     // end of `px` and `py`. Thus, the final dereference outside of the"}, {"sha": "abef170dd5a64700af4e02d8c9970132bbb7ec96", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -1893,7 +1893,7 @@ mod remove_dir_impl {\n         // file descriptor is automatically closed by libc::closedir() now, so give up ownership\n         let new_parent_fd = dir_fd.into_raw_fd();\n         // a valid root is not needed because we do not call any functions involving the full path\n-        // of the DirEntrys.\n+        // of the `DirEntry`s.\n         let dummy_root = PathBuf::new();\n         let inner = InnerReadDir { dirp, root: dummy_root };\n         Ok((ReadDir::new(inner), new_parent_fd))"}, {"sha": "ad8da19b6daa8332d858520766578f230b1a356e", "filename": "library/std/src/sys/windows/c/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc%2Ferrors.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -12,7 +12,7 @@ pub const ERROR_RESOURCE_CALL_TIMED_OUT: DWORD = 5910;\n pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT: DWORD = 8014;\n pub const DNS_ERROR_RECORD_TIMED_OUT: DWORD = 9705;\n \n-// The followiung list was obtained from\n+// The following list was obtained from\n //   `/usr/x86_64-w64-mingw32/include/winerror.h`\n // in the Debian package\n //   mingw-w64_6.0.0-3_all.deb"}, {"sha": "15042fc3beecb2c71ab4e1d2dbb173971d769263", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -79,7 +79,7 @@ impl Parker {\n             park_timeout(dur, self.state.as_ptr().addr());\n             // Swap to ensure that we observe all state changes with acquire\n             // ordering, even if the state has been changed after the timeout\n-            // occured.\n+            // occurred.\n             self.state.swap(EMPTY, Acquire);\n         }\n     }"}, {"sha": "e76d6716b94fe13cf5236ff56f63a1b4158dd285", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1c480f986571c77e91f56f1139fa7bb60f9a28c/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=d1c480f986571c77e91f56f1139fa7bb60f9a28c", "patch": "@@ -219,14 +219,14 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n \n struct FilteredTests {\n     tests: Vec<(TestId, TestDescAndFn)>,\n-    benchs: Vec<(TestId, TestDescAndFn)>,\n+    benches: Vec<(TestId, TestDescAndFn)>,\n     next_id: usize,\n }\n \n impl FilteredTests {\n     fn add_bench(&mut self, desc: TestDesc, testfn: TestFn) {\n         let test = TestDescAndFn { desc, testfn };\n-        self.benchs.push((TestId(self.next_id), test));\n+        self.benches.push((TestId(self.next_id), test));\n         self.next_id += 1;\n     }\n     fn add_test(&mut self, desc: TestDesc, testfn: TestFn) {\n@@ -245,7 +245,7 @@ impl FilteredTests {\n         self.add_test(desc, testfn);\n     }\n     fn total_len(&self) -> usize {\n-        self.tests.len() + self.benchs.len()\n+        self.tests.len() + self.benches.len()\n     }\n }\n \n@@ -290,7 +290,7 @@ where\n \n     let tests_len = tests.len();\n \n-    let mut filtered = FilteredTests { tests: Vec::new(), benchs: Vec::new(), next_id: 0 };\n+    let mut filtered = FilteredTests { tests: Vec::new(), benches: Vec::new(), next_id: 0 };\n \n     for test in filter_tests(opts, tests) {\n         let mut desc = test.desc;\n@@ -457,7 +457,7 @@ where\n \n     if opts.bench_benchmarks {\n         // All benchmarks run at the end, in serial.\n-        for (id, b) in filtered.benchs {\n+        for (id, b) in filtered.benches {\n             let event = TestEvent::TeWait(b.desc.clone());\n             notify_about_test_event(event)?;\n             let join_handle = run_test(opts, false, id, b, run_strategy, tx.clone());"}]}