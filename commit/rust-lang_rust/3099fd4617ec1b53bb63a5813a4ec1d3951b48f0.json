{"sha": "3099fd4617ec1b53bb63a5813a4ec1d3951b48f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTlmZDQ2MTdlYzFiNTNiYjYzYTU4MTNhNGVjMWQzOTUxYjQ4ZjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-06T15:41:31Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-10-06T15:41:31Z"}, "message": "store the mir into a map, restructure to avoid rebuilding so many times", "tree": {"sha": "cb37943e3eb7b6b0739cacc1f202a3cef34dd7f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb37943e3eb7b6b0739cacc1f202a3cef34dd7f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0", "html_url": "https://github.com/rust-lang/rust/commit/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5858f6bd670e4f46f362524c6c5061e2b18574c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5858f6bd670e4f46f362524c6c5061e2b18574c8", "html_url": "https://github.com/rust-lang/rust/commit/5858f6bd670e4f46f362524c6c5061e2b18574c8"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "01c4c84af02ef62985d8ff794a929c978f423290", "filename": "src/librustc_mir/dump.rs", "status": "modified", "additions": 35, "deletions": 10, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0/src%2Flibrustc_mir%2Fdump.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3099fd4617ec1b53bb63a5813a4ec1d3951b48f0/src%2Flibrustc_mir%2Fdump.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdump.rs?ref=3099fd4617ec1b53bb63a5813a4ec1d3951b48f0", "patch": "@@ -30,14 +30,16 @@ use self::rustc::middle::infer;\n use self::rustc::middle::region::CodeExtentData;\n use self::rustc::middle::ty::{self, Ty};\n use self::rustc::util::common::ErrorReported;\n+use self::rustc::util::nodemap::NodeMap;\n use self::rustc_front::hir;\n use self::rustc_front::visit;\n use self::syntax::ast;\n use self::syntax::attr::AttrMetaMethods;\n use self::syntax::codemap::Span;\n \n pub fn dump_crate(tcx: &ty::ctxt) {\n-    let mut dump = OuterDump { tcx: tcx };\n+    let mut map = NodeMap();\n+    let mut dump = OuterDump { tcx: tcx, map: &mut map };\n     visit::walk_crate(&mut dump, tcx.map.krate());\n }\n \n@@ -46,21 +48,19 @@ pub fn dump_crate(tcx: &ty::ctxt) {\n \n struct OuterDump<'a,'tcx:'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n+    map: &'a mut NodeMap<Mir<'tcx>>,\n }\n \n impl<'a, 'tcx> OuterDump<'a, 'tcx> {\n-    fn visit_mir<OP>(&self, attributes: &'tcx [ast::Attribute], mut walk_op: OP)\n-        where OP: FnMut(&mut InnerDump<'a,'tcx>)\n+    fn visit_mir<OP>(&mut self, attributes: &'a [ast::Attribute], mut walk_op: OP)\n+        where OP: for<'m> FnMut(&mut InnerDump<'a,'m,'tcx>)\n     {\n-        let mut built_mir = false;\n-\n-        let mut closure_dump = InnerDump { tcx: self.tcx, attr: None };\n+        let mut closure_dump = InnerDump { tcx: self.tcx, attr: None, map: &mut *self.map };\n         for attr in attributes {\n             if attr.check_name(\"rustc_mir\") {\n                 closure_dump.attr = Some(attr);\n             }\n         }\n-\n         walk_op(&mut closure_dump);\n     }\n }\n@@ -77,25 +77,47 @@ impl<'a, 'tcx> visit::Visitor<'tcx> for OuterDump<'a, 'tcx> {\n             hir::MethodTraitItem(_, Some(_)) => {\n                 self.visit_mir(&trait_item.attrs, |c| visit::walk_trait_item(c, trait_item));\n             }\n-            _ => { }\n+            hir::MethodTraitItem(_, None) |\n+            hir::ConstTraitItem(..) |\n+            hir::TypeTraitItem(..) => {\n+            }\n         }\n         visit::walk_trait_item(self, trait_item);\n     }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        match impl_item.node {\n+            hir::MethodImplItem(..) => {\n+                self.visit_mir(&impl_item.attrs, |c| visit::walk_impl_item(c, impl_item));\n+            }\n+            hir::ConstImplItem(..) | hir::TypeImplItem(..) => { }\n+        }\n+        visit::walk_impl_item(self, impl_item);\n+    }\n }\n \n ///////////////////////////////////////////////////////////////////////////\n // InnerDump -- dumps MIR for a single fn and its contained closures\n \n-struct InnerDump<'a,'tcx:'a> {\n+struct InnerDump<'a,'m,'tcx:'a+'m> {\n     tcx: &'a ty::ctxt<'tcx>,\n+    map: &'m mut NodeMap<Mir<'tcx>>,\n     attr: Option<&'a ast::Attribute>,\n }\n \n-impl<'a, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'tcx> {\n+impl<'a, 'm, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n     fn visit_item(&mut self, _: &'tcx hir::Item) {\n         // ignore nested items; they need their own graphviz annotation\n     }\n \n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {\n+        // ignore nested items; they need their own graphviz annotation\n+    }\n+\n+    fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {\n+        // ignore nested items; they need their own graphviz annotation\n+    }\n+\n     fn visit_fn(&mut self,\n                 fk: visit::FnKind<'tcx>,\n                 decl: &'tcx hir::FnDecl,\n@@ -150,6 +172,9 @@ impl<'a, 'tcx> visit::Visitor<'tcx> for InnerDump<'a,'tcx> {\n                         }\n                     }\n                 }\n+\n+                let previous = self.map.insert(id, mir);\n+                assert!(previous.is_none());\n             }\n             Err(ErrorReported) => { }\n         }"}]}