{"sha": "d363a47fcbbdcef228acef6f8625fc09ce168c55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNjNhNDdmY2JiZGNlZjIyOGFjZWY2Zjg2MjVmYzA5Y2UxNjhjNTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-11-28T09:36:37Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-08T11:20:51Z"}, "message": "Add a scheme to find the place where an id was destroyed", "tree": {"sha": "2da7537a47c2eda2eccbe47eef4dc41d1022249c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2da7537a47c2eda2eccbe47eef4dc41d1022249c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d363a47fcbbdcef228acef6f8625fc09ce168c55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d363a47fcbbdcef228acef6f8625fc09ce168c55", "html_url": "https://github.com/rust-lang/rust/commit/d363a47fcbbdcef228acef6f8625fc09ce168c55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d363a47fcbbdcef228acef6f8625fc09ce168c55/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048af409232fc2d7f8fbe5469080dc8bb702c498", "url": "https://api.github.com/repos/rust-lang/rust/commits/048af409232fc2d7f8fbe5469080dc8bb702c498", "html_url": "https://github.com/rust-lang/rust/commit/048af409232fc2d7f8fbe5469080dc8bb702c498"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "40683f8d74756ff33f9a34f8fa52a40f064d2d85", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -32,6 +32,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,\n+                    tracked_id: None,\n                 };\n                 eval_main(tcx, entry_def_id, config);\n             });"}, {"sha": "8b1739f3443b5220f27e785fc54eeb93ef5d4c5e", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -45,6 +45,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                     excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n+                                    tracked_id: None,\n                                 };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n@@ -64,7 +65,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     ignore_leaks: false,\n                     excluded_env_vars: vec![],\n                     args: vec![],\n-                    seed: None\n+                    seed: None,\n+                    tracked_id: None,\n                 };\n                 miri::eval_main(tcx, entry_def_id, config);\n "}, {"sha": "e3aa75b9e8803eb1e9475b80406e345a8613b554", "filename": "src/bin/miri.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -126,6 +126,7 @@ fn main() {\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n+    let mut tracked_id: Option<miri::PtrId> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -176,6 +177,17 @@ fn main() {\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n                     excluded_env_vars.push(arg.trim_start_matches(\"-Zmiri-env-exclude=\").to_owned());\n                 },\n+                arg if arg.starts_with(\"-Zmiri-track-id=\") => {\n+                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-id=\").parse() {\n+                        Ok(id) => id,\n+                        Err(err) => panic!(\"-Zmiri-track-id requires a valid `u64` as the argument: {}\", err),\n+                    };\n+                    if let Some(id) = miri::PtrId::new(id) {\n+                        tracked_id = Some(id);\n+                    } else {\n+                        panic!(\"-Zmiri-track-id must be a nonzero id\");\n+                    }\n+                },\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -208,6 +220,7 @@ fn main() {\n         excluded_env_vars,\n         seed,\n         args: miri_args,\n+        tracked_id,\n     };\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {"}, {"sha": "fb82679523e38e86034368298eff44ecec6f337d", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -26,6 +26,8 @@ pub struct MiriConfig {\n     pub args: Vec<String>,\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n+    /// The stacked borrow id to report about\n+    pub tracked_id: Option<PtrId>,\n }\n \n /// Details of premature program termination.\n@@ -47,7 +49,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(config.communicate),\n-        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n+        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate, config.tracked_id),\n     );\n     // Complete initialization.\n     EnvVars::init(&mut ecx, config.excluded_env_vars);"}, {"sha": "ee13631727d2cf773fc4e34169a353dcbe3a3853", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -43,7 +43,10 @@ pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n-pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n+pub use crate::stacked_borrows::{\n+    EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item, PtrId,\n+    GlobalState,\n+};\n pub use crate::machine::{\n     PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n     MemoryExtra, AllocExtra, FrameData, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,"}, {"sha": "3d8e724c57c37587032282fa891d84dbbf0fd6fc", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -77,9 +77,9 @@ pub struct MemoryExtra {\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, validate: bool) -> Self {\n+    pub fn new(rng: StdRng, validate: bool, tracked_id: Option<PtrId>) -> Self {\n         MemoryExtra {\n-            stacked_borrows: Default::default(),\n+            stacked_borrows: Rc::new(RefCell::new(GlobalState::new(tracked_id))),\n             intptrcast: Default::default(),\n             rng: RefCell::new(rng),\n             validate,"}, {"sha": "bd42191821b76c7af5b4b786430aa8c461b991fc", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -105,6 +105,8 @@ pub struct GlobalState {\n     next_call_id: CallId,\n     /// Those call IDs corresponding to functions that are still running.\n     active_calls: HashSet<CallId>,\n+    /// The id to trace in this execution run\n+    tracked_id: Option<PtrId>,\n }\n /// Memory extra state gives us interior mutable access to the global state.\n pub type MemoryExtra = Rc<RefCell<GlobalState>>;\n@@ -151,18 +153,17 @@ impl fmt::Display for RefKind {\n }\n \n /// Utilities for initialization and ID generation\n-impl Default for GlobalState {\n-    fn default() -> Self {\n+impl GlobalState {\n+    pub fn new(tracked_id: Option<PtrId>) -> Self {\n         GlobalState {\n             next_ptr_id: NonZeroU64::new(1).unwrap(),\n             base_ptr_ids: HashMap::default(),\n             next_call_id: NonZeroU64::new(1).unwrap(),\n             active_calls: HashSet::default(),\n+            tracked_id,\n         }\n     }\n-}\n \n-impl GlobalState {\n     fn new_ptr(&mut self) -> PtrId {\n         let id = self.next_ptr_id;\n         self.next_ptr_id = NonZeroU64::new(id.get() + 1).unwrap();\n@@ -312,6 +313,11 @@ impl<'tcx> Stack {\n             let first_incompatible_idx = self.find_first_write_incompatible(granting_idx);\n             for item in self.borrows.drain(first_incompatible_idx..).rev() {\n                 trace!(\"access: popping item {:?}\", item);\n+                if let Tag::Tagged(id) = item.tag {\n+                    if Some(id) == global.tracked_id {\n+                        throw_unsup!(Unsupported(format!(\"popped id {}\", id)));\n+                    }\n+                }\n                 Stack::check_protector(&item, Some(tag), global)?;\n             }\n         } else {"}, {"sha": "67d38b119412ebc636e92de3fb2955bec0a276af", "filename": "tests/compile-fail/stacked_borrows/track_id.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d363a47fcbbdcef228acef6f8625fc09ce168c55/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d363a47fcbbdcef228acef6f8625fc09ce168c55/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Ftrack_id.rs?ref=d363a47fcbbdcef228acef6f8625fc09ce168c55", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -Zmiri-track-id=1372\n+// do not run on anything but x86_64 linux, because minute changes can change the borrow stack ids\n+// only-x86_64\n+// only-linux\n+\n+use std::mem;\n+\n+fn main() {\n+    let mut target = 42;\n+    // Make sure we cannot use a raw-tagged `&mut` pointing to a frozen location.\n+    // Even just creating it unfreezes.\n+    let raw = &mut target as *mut _; // let this leak to raw\n+    let reference = unsafe { &*raw }; // freeze\n+    let ptr = reference as *const _ as *mut i32; // raw ptr, with raw tag\n+    let _mut_ref: &mut i32 = unsafe { mem::transmute(ptr) }; // &mut, with raw tag\n+    //~^ ERROR popped id 1372\n+    // Now we retag, making our ref top-of-stack -- and, in particular, unfreezing.\n+    let _val = *reference;\n+}"}]}