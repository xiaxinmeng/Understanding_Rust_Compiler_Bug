{"sha": "35c8f2612ffea42cc09350accdba934e85a19f35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1YzhmMjYxMmZmZWE0MmNjMDkzNTBhY2NkYmE5MzRlODVhMTlmMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T17:18:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-18T17:18:28Z"}, "message": "Auto merge of #88994 - Aaron1011:intercrate-caching, r=jackh726\n\nDisable the evaluation cache when in intercrate mode\n\nIt's possible to use the same `InferCtxt` with both\nan intercrate and non-intercrate `SelectionContext`. However,\nthe local (inferctxt) evaluation cache is not aware of this\ndistinction, so this kind of `InferCtxt` re-use will pollute\nthe cache wth bad results.\n\nThis commit avoids the issue by disabling the evaluation cache\nentirely during intercrate mode.", "tree": {"sha": "35b8163b863a91938354e1450e8417c92e7b210d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b8163b863a91938354e1450e8417c92e7b210d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35c8f2612ffea42cc09350accdba934e85a19f35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35c8f2612ffea42cc09350accdba934e85a19f35", "html_url": "https://github.com/rust-lang/rust/commit/35c8f2612ffea42cc09350accdba934e85a19f35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35c8f2612ffea42cc09350accdba934e85a19f35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6cd2c6c877110748296760aefddc21a0ea1d316", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cd2c6c877110748296760aefddc21a0ea1d316", "html_url": "https://github.com/rust-lang/rust/commit/d6cd2c6c877110748296760aefddc21a0ea1d316"}, {"sha": "6d1f4d2fed2bdc561891d19440c38cf7adfb4858", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1f4d2fed2bdc561891d19440c38cf7adfb4858", "html_url": "https://github.com/rust-lang/rust/commit/6d1f4d2fed2bdc561891d19440c38cf7adfb4858"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "fc752330583954bb68b55eff87874d5dd581bb6a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35c8f2612ffea42cc09350accdba934e85a19f35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35c8f2612ffea42cc09350accdba934e85a19f35/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=35c8f2612ffea42cc09350accdba934e85a19f35", "patch": "@@ -974,6 +974,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         param_env: ty::ParamEnv<'tcx>,\n         trait_ref: ty::ConstnessAnd<ty::PolyTraitRef<'tcx>>,\n     ) -> Option<EvaluationResult> {\n+        // Neither the global nor local cache is aware of intercrate\n+        // mode, so don't do any caching. In particular, we might\n+        // re-use the same `InferCtxt` with both an intercrate\n+        // and non-intercrate `SelectionContext`\n+        if self.intercrate {\n+            return None;\n+        }\n+\n         let tcx = self.tcx();\n         if self.can_use_global_caches(param_env) {\n             if let Some(res) = tcx.evaluation_cache.get(&param_env.and(trait_ref), tcx) {\n@@ -996,6 +1004,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        // Neither the global nor local cache is aware of intercrate\n+        // mode, so don't do any caching. In particular, we might\n+        // re-use the same `InferCtxt` with both an intercrate\n+        // and non-intercrate `SelectionContext`\n+        if self.intercrate {\n+            return;\n+        }\n+\n         if self.can_use_global_caches(param_env) {\n             if !trait_ref.needs_infer() {\n                 debug!(?trait_ref, ?result, \"insert_evaluation_cache global\");"}]}