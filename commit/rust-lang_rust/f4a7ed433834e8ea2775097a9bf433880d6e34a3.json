{"sha": "f4a7ed433834e8ea2775097a9bf433880d6e34a3", "node_id": "C_kwDOAAsO6NoAKGY0YTdlZDQzMzgzNGU4ZWEyNzc1MDk3YTliZjQzMzg4MGQ2ZTM0YTM", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-04-03T17:23:27Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-04-03T20:16:33Z"}, "message": "Fix &mut invalidation in ptr::swap doctest\n\nUnder Stacked Borrows with raw pointer tagging, the previous code was UB\nbecause the code which creates the the second pointer borrows the array\nthrough a tag in the borrow stacks below the Unique tag that our first\npointer is based on, thus invalidating the first pointer.\n\nThis is not definitely a bug and may never be real UB, but I desperately\nwant people to write code that conforms to SB with raw pointer tagging\nso that I can write good diagnostics. The alternative aliasing models\naren't possible to diagnose well due to state space explosion.\nTherefore, it would be super cool if the standard library nudged people\ntowards writing code that is valid with respect to SB with raw pointer\ntagging.", "tree": {"sha": "8e439b642f4d65fd311b972b4c3516634c8232fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e439b642f4d65fd311b972b4c3516634c8232fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4a7ed433834e8ea2775097a9bf433880d6e34a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a7ed433834e8ea2775097a9bf433880d6e34a3", "html_url": "https://github.com/rust-lang/rust/commit/f4a7ed433834e8ea2775097a9bf433880d6e34a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4a7ed433834e8ea2775097a9bf433880d6e34a3/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15a242a432c9c40a60def102209a5d40900b7b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/15a242a432c9c40a60def102209a5d40900b7b9d", "html_url": "https://github.com/rust-lang/rust/commit/15a242a432c9c40a60def102209a5d40900b7b9d"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "91e2bd7953f735e7aae49ab6f23313d39802cbd6", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f4a7ed433834e8ea2775097a9bf433880d6e34a3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4a7ed433834e8ea2775097a9bf433880d6e34a3/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=f4a7ed433834e8ea2775097a9bf433880d6e34a3", "patch": "@@ -637,8 +637,9 @@ pub const fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n ///\n /// let mut array = [0, 1, 2, 3];\n ///\n-/// let x = array[0..].as_mut_ptr() as *mut [u32; 2]; // this is `array[0..2]`\n-/// let y = array[2..].as_mut_ptr() as *mut [u32; 2]; // this is `array[2..4]`\n+/// let (x, y) = array.split_at_mut(2);\n+/// let x = x.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[0..2]`\n+/// let y = y.as_mut_ptr().cast::<[u32; 2]>(); // this is `array[2..4]`\n ///\n /// unsafe {\n ///     ptr::swap(x, y);"}]}