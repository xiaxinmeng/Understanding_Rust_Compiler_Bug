{"sha": "304f00816d9d7fd3fa051538e865986afffa4b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwNGYwMDgxNmQ5ZDdmZDNmYTA1MTUzOGU4NjU5ODZhZmZmYTRiMzk=", "commit": {"author": {"name": "Martin Sirringhaus", "email": "", "date": "2020-07-13T13:30:48Z"}, "committer": {"name": "Martin Sirringhaus", "email": "", "date": "2020-07-13T13:30:48Z"}, "message": "Update cross-compilation README", "tree": {"sha": "e7464c46608f116815ca77d382aef7db4aec1e4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7464c46608f116815ca77d382aef7db4aec1e4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/304f00816d9d7fd3fa051538e865986afffa4b39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/304f00816d9d7fd3fa051538e865986afffa4b39", "html_url": "https://github.com/rust-lang/rust/commit/304f00816d9d7fd3fa051538e865986afffa4b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/304f00816d9d7fd3fa051538e865986afffa4b39/comments", "author": {}, "committer": {}, "parents": [{"sha": "9d09331e00b02f81c714b0c41ce3a38380dd36a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d09331e00b02f81c714b0c41ce3a38380dd36a2", "html_url": "https://github.com/rust-lang/rust/commit/9d09331e00b02f81c714b0c41ce3a38380dd36a2"}], "stats": {"total": 38, "additions": 30, "deletions": 8}, "files": [{"sha": "303a6c4860a03f13f37dc1412453d48e54dc5272", "filename": "src/ci/docker/README.md", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/304f00816d9d7fd3fa051538e865986afffa4b39/src%2Fci%2Fdocker%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/304f00816d9d7fd3fa051538e865986afffa4b39/src%2Fci%2Fdocker%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2FREADME.md?ref=304f00816d9d7fd3fa051538e865986afffa4b39", "patch": "@@ -16,6 +16,11 @@ for example:\n \n Images will output artifacts in an `obj` dir at the root of a repository.\n \n+To match conditions in rusts CI, also set the environment variable `DEPLOY=1`, e.g.:\n+```\n+DEPLOY=1 ./src/ci/docker/run.sh x86_64-gnu\n+```\n+\n **NOTE**: Re-using the same `obj` dir with different docker images with\n the same target triple (e.g. `dist-x86_64-linux` and `dist-various-1`)\n may result in strange linker errors, due shared library versions differing between platforms.\n@@ -85,27 +90,44 @@ how to generate them, and how the existing ones were generated.\n \n ### Generating a `.config` file\n \n+**NOTE:** Existing Dockerfiles can be a good guide for the process and order\n+of script execution.\n+\n If you have a `linux-cross` image lying around you can use that and skip the\n next two steps.\n \n-- First we spin up a container and copy `build_toolchain_root.sh` into it. All\n+- First we spin up a container and copy all scripts into it. All\n   these steps are outside the container:\n \n ```\n-# Note: We use ubuntu:15.10 because that's the \"base\" of linux-cross Docker\n-# image\n-$ docker run -it ubuntu:15.10 bash\n+# Note: We use ubuntu:16.04 because that's the \"base\" of linux-cross Docker\n+# image, or simply run ./src/ci/docker/run.sh once, which will download the correct\n+# one and you can check it out with `docker images`\n+$ docker run -it ubuntu:16.04 bash\n+# in another terminal:\n $ docker ps\n CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n-cfbec05ed730        ubuntu:15.10        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n-$ docker cp build_toolchain_root.sh drunk_murdock:/\n+cfbec05ed730        ubuntu:16.04        \"bash\"              16 seconds ago      Up 15 seconds                           drunk_murdock\n+$ docker cp src/ci/docker/scripts drunk_murdock:/tmp/\n ```\n \n - Then inside the container we build crosstool-ng by simply calling the bash\n   script we copied in the previous step:\n \n ```\n-$ bash build_toolchain_root.sh\n+$ cd /tmp/scripts\n+# Download packages necessary for building\n+$ bash ./cross-apt-packages.sh\n+# Download and build crosstool-ng\n+$ bash ./crosstool-ng.sh\n+```\n+\n+- In case you cant to adjust or start from an existing config, copy that\n+  to the container. `crosstool-ng` will automatically load `./.config` if\n+  present. Otherwise one can use the TUI to load any config-file.\n+\n+```\n+$ docker cp arm-linux-gnueabi.config drunk_murdock:/tmp/.config\n ```\n \n - Now, inside the container run the following command to configure the\n@@ -120,7 +142,7 @@ $ ct-ng menuconfig\n   meaningful name. This is done outside the container.\n \n ```\n-$ docker drunk_murdock:/.config arm-linux-gnueabi.config\n+$ docker cp drunk_murdock:/.config arm-linux-gnueabi.config\n ```\n \n - Now you can shutdown the container or repeat the two last steps to generate a"}]}