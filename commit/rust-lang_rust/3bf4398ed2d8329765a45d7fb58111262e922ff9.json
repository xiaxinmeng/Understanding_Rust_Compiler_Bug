{"sha": "3bf4398ed2d8329765a45d7fb58111262e922ff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZjQzOThlZDJkODMyOTc2NWE0NWQ3ZmI1ODExMTI2MmU5MjJmZjk=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T06:56:46Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-03-16T14:40:10Z"}, "message": "Rollup merge of #59139 - oli-obk:unions_are_a_good_thing, r=RalfJung\n\nUnregress using scalar unions in constants.\n\nfixes https://github.com/rust-lang/rust/issues/59126\n\nr? @RalfJung\n\nI also made a bunch of these invariants panic instead of report an error.", "tree": {"sha": "700344ed2fb205f91e82bc4d7c8e25065feb185d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/700344ed2fb205f91e82bc4d7c8e25065feb185d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bf4398ed2d8329765a45d7fb58111262e922ff9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlyNCssACgkQ/vbIBR0O\nATxmOxAAuad3bvccF9v8iD+0zHIm/sxsjJ6uZozq5MX4yRS107s3pWU834KHUDVI\nP45FsNQD2fxpQt4II32H2hcRuUQLdwOXeZW2xnee5dft+A/RFt4Yw/LgDOilOrm5\n4ZEtyy7O8aV50LzouPhWa2OW8yreBk6nM2xoh7YI/ETd8j3PftJVcAzFxxMjLvYt\nwYIrHiqNhtri7QVJOK70P4kHmSH4r8Ui7ovE1LS5B6PZdoq3H6Af762MG184xhD8\nAZ9wYqGqMkA3qH6K2bEKXmIEMNZRhliW3abhJ3JOlZU++mavZEttqdrY7FkNkHi2\nvNRhus7haxVukGDHCx5/XswJdqoMTdqPHZQx9acykzEA9ZgEFR0N2Osjno0s6Nc9\nchgsTGsAivIDK5pFvQvMilACclgvAsTileyhq+tVRdxrlhqRyIGl1snDFUJ+orQI\nZrPH80SMXW2OBN/eF1pFB6Bw29joudhkyAsOfpP0DCb0o1mdTPKRk2vT88FZmc1G\ngGCgSQGckUlFUvDSSIl+VCpvMIaCj7xi4dkAN2r3fqv2HhxsO7wCh/t74wAGkKcT\nJr+i98qXIcOmXNoFFEF9pMWpf1JTRVqxZMwNHlsSRP9nMkJgZHd0ynPDR+mecdCb\nAyksNdQAhVt4FLHemTSUiFMEQQMrFqjZoaT4dTt0psbvwK0x0MU=\n=1Knd\n-----END PGP SIGNATURE-----", "payload": "tree 700344ed2fb205f91e82bc4d7c8e25065feb185d\nparent 464478fbbb606348023ea75f1d003d5175a932c5\nparent 507448945612f6b6f80a08a943e88d9a3a14b52f\nauthor kennytm <kennytm@gmail.com> 1552719406 +0800\ncommitter kennytm <kennytm@gmail.com> 1552747210 +0800\n\nRollup merge of #59139 - oli-obk:unions_are_a_good_thing, r=RalfJung\n\nUnregress using scalar unions in constants.\n\nfixes https://github.com/rust-lang/rust/issues/59126\n\nr? @RalfJung\n\nI also made a bunch of these invariants panic instead of report an error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4398ed2d8329765a45d7fb58111262e922ff9", "html_url": "https://github.com/rust-lang/rust/commit/3bf4398ed2d8329765a45d7fb58111262e922ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bf4398ed2d8329765a45d7fb58111262e922ff9/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "464478fbbb606348023ea75f1d003d5175a932c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/464478fbbb606348023ea75f1d003d5175a932c5", "html_url": "https://github.com/rust-lang/rust/commit/464478fbbb606348023ea75f1d003d5175a932c5"}, {"sha": "507448945612f6b6f80a08a943e88d9a3a14b52f", "url": "https://api.github.com/repos/rust-lang/rust/commits/507448945612f6b6f80a08a943e88d9a3a14b52f", "html_url": "https://github.com/rust-lang/rust/commit/507448945612f6b6f80a08a943e88d9a3a14b52f"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "71d9398c686b7ac3818385db02bd9965a8b45fa3", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4398ed2d8329765a45d7fb58111262e922ff9/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4398ed2d8329765a45d7fb58111262e922ff9/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=3bf4398ed2d8329765a45d7fb58111262e922ff9", "patch": "@@ -65,12 +65,12 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n fn mplace_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     mplace: MPlaceTy<'tcx>,\n-) -> EvalResult<'tcx, ty::Const<'tcx>> {\n+) -> ty::Const<'tcx> {\n     let MemPlace { ptr, align, meta } = *mplace;\n     // extract alloc-offset pair\n     assert!(meta.is_none());\n-    let ptr = ptr.to_ptr()?;\n-    let alloc = ecx.memory.get(ptr.alloc_id)?;\n+    let ptr = ptr.to_ptr().unwrap();\n+    let alloc = ecx.memory.get(ptr.alloc_id).unwrap();\n     assert!(alloc.align >= align);\n     assert!(alloc.bytes.len() as u64 - ptr.offset.bytes() >= mplace.layout.size.bytes());\n     let mut alloc = alloc.clone();\n@@ -79,16 +79,16 @@ fn mplace_to_const<'tcx>(\n     // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n     let alloc = ecx.tcx.intern_const_alloc(alloc);\n     let val = ConstValue::ByRef(ptr, alloc);\n-    Ok(ty::Const { val, ty: mplace.layout.ty })\n+    ty::Const { val, ty: mplace.layout.ty }\n }\n \n fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-) -> EvalResult<'tcx, ty::Const<'tcx>> {\n-    // We do not normalize just any data.  Only scalar layout and slices.\n+) -> ty::Const<'tcx> {\n+    // We do not normalize just any data.  Only non-union scalars and slices.\n     let normalize = match op.layout.abi {\n-        layout::Abi::Scalar(..) => true,\n+        layout::Abi::Scalar(..) => op.layout.ty.ty_adt_def().map_or(true, |adt| !adt.is_union()),\n         layout::Abi::ScalarPair(..) => op.layout.ty.is_slice(),\n         _ => false,\n     };\n@@ -100,11 +100,11 @@ fn op_to_const<'tcx>(\n     let val = match normalized_op {\n         Ok(mplace) => return mplace_to_const(ecx, mplace),\n         Err(Immediate::Scalar(x)) =>\n-            ConstValue::Scalar(x.not_undef()?),\n+            ConstValue::Scalar(x.not_undef().unwrap()),\n         Err(Immediate::ScalarPair(a, b)) =>\n-            ConstValue::Slice(a.not_undef()?, b.to_usize(ecx)?),\n+            ConstValue::Slice(a.not_undef().unwrap(), b.to_usize(ecx).unwrap()),\n     };\n-    Ok(ty::Const { val, ty: op.layout.ty })\n+    ty::Const { val, ty: op.layout.ty }\n }\n \n fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n@@ -488,7 +488,7 @@ pub fn const_field<'a, 'tcx>(\n     let field = ecx.operand_field(down, field.index() as u64).unwrap();\n     // and finally move back to the const world, always normalizing because\n     // this is not called for statics.\n-    op_to_const(&ecx, field).unwrap()\n+    op_to_const(&ecx, field)\n }\n \n // this function uses `unwrap` copiously, because an already validated constant must have valid\n@@ -534,9 +534,9 @@ fn validate_and_turn_into_const<'a, 'tcx>(\n         // Now that we validated, turn this into a proper constant.\n         let def_id = cid.instance.def.def_id();\n         if tcx.is_static(def_id).is_some() || cid.promoted.is_some() {\n-            mplace_to_const(&ecx, mplace)\n+            Ok(mplace_to_const(&ecx, mplace))\n         } else {\n-            op_to_const(&ecx, mplace.into())\n+            Ok(op_to_const(&ecx, mplace.into()))\n         }\n     })();\n "}, {"sha": "074014908bad45f0b2181cc848b9345156ac2fbd", "filename": "src/test/ui/consts/union_constant.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3bf4398ed2d8329765a45d7fb58111262e922ff9/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bf4398ed2d8329765a45d7fb58111262e922ff9/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funion_constant.rs?ref=3bf4398ed2d8329765a45d7fb58111262e922ff9", "patch": "@@ -0,0 +1,11 @@\n+// compile-pass\n+\n+union Uninit {\n+    _never_use: *const u8,\n+    uninit: (),\n+}\n+\n+const UNINIT: Uninit = Uninit { uninit: () };\n+\n+fn main() {}\n+"}]}