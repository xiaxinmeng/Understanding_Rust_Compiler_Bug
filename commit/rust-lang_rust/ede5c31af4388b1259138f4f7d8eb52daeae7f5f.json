{"sha": "ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "node_id": "C_kwDOAAsO6NoAKGVkZTVjMzFhZjQzODhiMTI1OTEzOGY0ZjdkOGViNTJkYWVhZTdmNWY", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-06T03:09:14Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-11T19:53:14Z"}, "message": "Be more specific about constructor `FnDef`s in type mismatch", "tree": {"sha": "9bd35fd1642b2fc47474d2d7fdef202ed1a557ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9bd35fd1642b2fc47474d2d7fdef202ed1a557ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "html_url": "https://github.com/rust-lang/rust/commit/ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22c152958eade17a71d899b29a2d39bcc77aa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22c152958eade17a71d899b29a2d39bcc77aa48", "html_url": "https://github.com/rust-lang/rust/commit/b22c152958eade17a71d899b29a2d39bcc77aa48"}], "stats": {"total": 70, "additions": 39, "deletions": 31}, "files": [{"sha": "5d394f71f0d764024b33c0f2e4f047a61a8743e9", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -2,10 +2,10 @@ use crate::traits::{ObligationCause, ObligationCauseCode};\n use crate::ty::diagnostics::suggest_constraining_type_param;\n use crate::ty::print::{with_forced_trimmed_paths, FmtPrinter, Printer};\n use crate::ty::{self, BoundRegionKind, Region, Ty, TyCtxt};\n-use hir::def::DefKind;\n use rustc_errors::Applicability::{MachineApplicable, MaybeIncorrect};\n use rustc_errors::{pluralize, Diagnostic, MultiSpan};\n use rustc_hir as hir;\n+use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n@@ -319,7 +319,11 @@ impl<'tcx> Ty<'tcx> {\n                     .into()\n                 }\n             }\n-            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n+                DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n+                _ => \"fn item\".into(),\n+            },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(ref inner, ..) if let Some(principal) = inner.principal() => {\n                 format!(\"trait object `dyn {}`\", tcx.def_path_str(principal.def_id())).into()\n@@ -366,7 +370,11 @@ impl<'tcx> Ty<'tcx> {\n                 _ => \"reference\",\n             }\n             .into(),\n-            ty::FnDef(..) => \"fn item\".into(),\n+            ty::FnDef(def_id, ..) => match tcx.def_kind(def_id) {\n+                DefKind::Ctor(CtorOf::Struct, _) => \"struct constructor\".into(),\n+                DefKind::Ctor(CtorOf::Variant, _) => \"enum constructor\".into(),\n+                _ => \"fn item\".into(),\n+            },\n             ty::FnPtr(_) => \"fn pointer\".into(),\n             ty::Dynamic(..) => \"trait object\".into(),\n             ty::Closure(..) => \"closure\".into(),"}, {"sha": "a01a8ffe76ee41951d6e4657550812e85645a762", "filename": "tests/ui/issues/issue-35241.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35241.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -5,12 +5,12 @@ LL | struct Foo(u32);\n    | ---------- fn(u32) -> Foo {Foo} defined here\n LL |\n LL | fn test() -> Foo { Foo }\n-   |              ---   ^^^ expected struct `Foo`, found fn item\n+   |              ---   ^^^ expected struct `Foo`, found struct constructor\n    |              |\n    |              expected `Foo` because of return type\n    |\n-   = note: expected struct `Foo`\n-             found fn item `fn(u32) -> Foo {Foo}`\n+   = note:          expected struct `Foo`\n+           found struct constructor `fn(u32) -> Foo {Foo}`\n help: use parentheses to construct this tuple struct\n    |\n LL | fn test() -> Foo { Foo(/* u32 */) }"}, {"sha": "d9dbfb9f54173d6f9dd351ae3b1064ea7cbfd9bf", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -267,12 +267,12 @@ LL |             Fn(u8),\n    |             -- fn(u8) -> Z {Z::Fn} defined here\n ...\n LL |         let _: Z = Z::Fn;\n-   |                -   ^^^^^ expected enum `Z`, found fn item\n+   |                -   ^^^^^ expected enum `Z`, found enum constructor\n    |                |\n    |                expected due to this\n    |\n-   = note: expected enum `Z`\n-           found fn item `fn(u8) -> Z {Z::Fn}`\n+   = note:          expected enum `Z`\n+           found enum constructor `fn(u8) -> Z {Z::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |         let _: Z = Z::Fn(/* u8 */);\n@@ -308,12 +308,12 @@ LL |         Fn(u8),\n    |         -- fn(u8) -> E {E::Fn} defined here\n ...\n LL |     let _: E = m::E::Fn;\n-   |            -   ^^^^^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(u8) -> E {E::Fn}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(u8) -> E {E::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = m::E::Fn(/* u8 */);\n@@ -349,12 +349,12 @@ LL |         Fn(u8),\n    |         -- fn(u8) -> E {E::Fn} defined here\n ...\n LL |     let _: E = E::Fn;\n-   |            -   ^^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(u8) -> E {E::Fn}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(u8) -> E {E::Fn}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::Fn(/* u8 */);"}, {"sha": "a92568ada4c9a6579c2f4f8e9863623bd0730650", "filename": "tests/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -23,12 +23,12 @@ LL | struct S(usize, usize);\n    | -------- fn(usize, usize) -> S {S} defined here\n ...\n LL |     let _: S = S;\n-   |            -   ^ expected struct `S`, found fn item\n+   |            -   ^ expected struct `S`, found struct constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `S`\n-             found fn item `fn(usize, usize) -> S {S}`\n+   = note:          expected struct `S`\n+           found struct constructor `fn(usize, usize) -> S {S}`\n help: use parentheses to construct this tuple struct\n    |\n LL |     let _: S = S(/* usize */, /* usize */);\n@@ -59,12 +59,12 @@ LL | struct V();\n    | -------- fn() -> V {V} defined here\n ...\n LL |     let _: V = V;\n-   |            -   ^ expected struct `V`, found fn item\n+   |            -   ^ expected struct `V`, found struct constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `V`\n-             found fn item `fn() -> V {V}`\n+   = note:          expected struct `V`\n+           found struct constructor `fn() -> V {V}`\n help: use parentheses to construct this tuple struct\n    |\n LL |     let _: V = V();\n@@ -113,12 +113,12 @@ LL |     A(usize),\n    |     - fn(usize) -> E {E::A} defined here\n ...\n LL |     let _: E = E::A;\n-   |            -   ^^^^ expected enum `E`, found fn item\n+   |            -   ^^^^ expected enum `E`, found enum constructor\n    |            |\n    |            expected due to this\n    |\n-   = note: expected enum `E`\n-           found fn item `fn(usize) -> E {E::A}`\n+   = note:          expected enum `E`\n+           found enum constructor `fn(usize) -> E {E::A}`\n help: use parentheses to construct this tuple variant\n    |\n LL |     let _: E = E::A(/* usize */);"}, {"sha": "96b3f8dab8da798350fc309543350bd5107bb50b", "filename": "tests/ui/typeck/issue-87181/empty-tuple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.rs?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -10,5 +10,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for struct constructor `fn() -> Foo {Foo}` in the current scope [E0599]\n }"}, {"sha": "f0ca49e6d1e3ec4cd185099a15a4e493ca536973", "filename": "tests/ui/typeck/issue-87181/empty-tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fempty-tuple-method.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo}` in the current scope\n+error[E0599]: no method named `foo` found for struct constructor `fn() -> Foo {Foo}` in the current scope\n   --> $DIR/empty-tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "ed01656ce72a319ee3c7a66efaff150538deb795", "filename": "tests/ui/typeck/issue-87181/enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.rs?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -12,5 +12,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo::Tup };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for enum constructor `fn() -> Foo {Foo::Tup}` in the current scope [E0599]\n }"}, {"sha": "d313a887abd986245ec22abe1830d5f8a6632396", "filename": "tests/ui/typeck/issue-87181/enum-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Fenum-variant.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn() -> Foo {Foo::Tup}` in the current scope\n+error[E0599]: no method named `foo` found for enum constructor `fn() -> Foo {Foo::Tup}` in the current scope\n   --> $DIR/enum-variant.rs:14:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "6310984438c695227f840cce130ae899a34fcc11", "filename": "tests/ui/typeck/issue-87181/tuple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.rs?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -10,5 +10,5 @@ impl Foo {\n fn main() {\n     let thing = Bar { bar: Foo };\n     thing.bar.foo();\n-    //~^ ERROR no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope [E0599]\n+    //~^ ERROR no method named `foo` found for struct constructor `fn(u8, i32) -> Foo {Foo}` in the current scope [E0599]\n }"}, {"sha": "de3dc15a54b12449e2f2226dae020d3bc3926184", "filename": "tests/ui/typeck/issue-87181/tuple-method.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-87181%2Ftuple-method.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `foo` found for fn item `fn(u8, i32) -> Foo {Foo}` in the current scope\n+error[E0599]: no method named `foo` found for struct constructor `fn(u8, i32) -> Foo {Foo}` in the current scope\n   --> $DIR/tuple-method.rs:12:15\n    |\n LL |     thing.bar.foo();"}, {"sha": "547cffffa2ee331e03c3afc475db691f6f6ec5d2", "filename": "tests/ui/typeck/issue-96738.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-96738.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ede5c31af4388b1259138f4f7d8eb52daeae7f5f/tests%2Fui%2Ftypeck%2Fissue-96738.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-96738.stderr?ref=ede5c31af4388b1259138f4f7d8eb52daeae7f5f", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `nonexistent_method` found for fn item `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n+error[E0599]: no method named `nonexistent_method` found for enum constructor `fn(_) -> Option<_> {Option::<_>::Some}` in the current scope\n   --> $DIR/issue-96738.rs:2:10\n    |\n LL |     Some.nonexistent_method();"}]}