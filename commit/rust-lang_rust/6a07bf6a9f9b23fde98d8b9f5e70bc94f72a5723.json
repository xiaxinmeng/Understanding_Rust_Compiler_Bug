{"sha": "6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhMDdiZjZhOWY5YjIzZmRlOThkOGI5ZjVlNzBiYzk0ZjcyYTU3MjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-16T14:13:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-16T14:13:04Z"}, "message": "Merge #9920\n\n9920: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "32075cd22779bbb74ae4ecbef49197dee6fd233e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32075cd22779bbb74ae4ecbef49197dee6fd233e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhGnJwCRBK7hj4Ov3rIwAAgO4IAI0+BVPfJwiFIqEXtU8wNe+K\nTSrTtyg7bmY8cirdov2W6k9E7nRFmF0VkOxcLye18u0pQEkm8X430q2maHAZtgyy\nPgGpdTCroAQagZXVTgnJTX4ZgLTw7w0MlVVm5QFpV2MdHy8VHoG27BR/f/7rjLd5\nT+h1ED5Yhmnq8d9sXLvsdwjRDl2Jp9+1len98+3e0fqjnH95fTxxbXfeR3uvMY9F\nr5nVjJSnv0F8a6H7kPzGJfnsxUimtKRfg+WqWEOFys28XMx4tkmXFmyqIiK+FtVc\nRN7cd+krGfUEZc29kjpkpi1lbCEF9TfiTa/oqddJGW9A8s2WS4g17WHp3MNPI84=\n=cWCx\n-----END PGP SIGNATURE-----\n", "payload": "tree 32075cd22779bbb74ae4ecbef49197dee6fd233e\nparent 785bc57a3dc87527dc97a747298ccf566ff20da4\nparent 0c0142f61ae990a62c51c904952ca49ee8073c1c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629123184 +0000\ncommitter GitHub <noreply@github.com> 1629123184 +0000\n\nMerge #9920\n\n9920: minor: Simplify r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "html_url": "https://github.com/rust-lang/rust/commit/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "785bc57a3dc87527dc97a747298ccf566ff20da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/785bc57a3dc87527dc97a747298ccf566ff20da4", "html_url": "https://github.com/rust-lang/rust/commit/785bc57a3dc87527dc97a747298ccf566ff20da4"}, {"sha": "0c0142f61ae990a62c51c904952ca49ee8073c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0142f61ae990a62c51c904952ca49ee8073c1c", "html_url": "https://github.com/rust-lang/rust/commit/0c0142f61ae990a62c51c904952ca49ee8073c1c"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "ffaaf72e979873b0cc09cdf633197baf2f72ebda", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "patch": "@@ -131,13 +131,8 @@ impl SourceToDefCtx<'_, '_> {\n \n     pub(super) fn module_to_def(&mut self, src: InFile<ast::Module>) -> Option<ModuleId> {\n         let _p = profile::span(\"module_to_def\");\n-        let parent_declaration = src\n-            .as_ref()\n-            .map(|it| it.syntax())\n-            .cloned()\n-            .ancestors_with_macros(self.db.upcast())\n-            .skip(1)\n-            .find_map(|it| {\n+        let parent_declaration =\n+            src.syntax().cloned().ancestors_with_macros(self.db.upcast()).skip(1).find_map(|it| {\n                 let m = ast::Module::cast(it.value.clone())?;\n                 Some(it.with_value(m))\n             });\n@@ -217,7 +212,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::IdentPat>,\n     ) -> Option<(DefWithBodyId, PatId)> {\n-        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n+        let container = self.find_pat_or_label_container(src.syntax())?;\n         let (_body, source_map) = self.db.body_with_source_map(container);\n         let src = src.map(ast::Pat::from);\n         let pat_id = source_map.node_pat(src.as_ref())?;\n@@ -227,7 +222,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::SelfParam>,\n     ) -> Option<(DefWithBodyId, PatId)> {\n-        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n+        let container = self.find_pat_or_label_container(src.syntax())?;\n         let (_body, source_map) = self.db.body_with_source_map(container);\n         let pat_id = source_map.node_self_param(src.as_ref())?;\n         Some((container, pat_id))\n@@ -236,7 +231,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::Label>,\n     ) -> Option<(DefWithBodyId, LabelId)> {\n-        let container = self.find_pat_or_label_container(src.as_ref().map(|it| it.syntax()))?;\n+        let container = self.find_pat_or_label_container(src.syntax())?;\n         let (_body, source_map) = self.db.body_with_source_map(container);\n         let label_id = source_map.node_label(src.as_ref())?;\n         Some((container, label_id))\n@@ -264,8 +259,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     pub(super) fn type_param_to_def(&mut self, src: InFile<ast::TypeParam>) -> Option<TypeParamId> {\n-        let container: ChildContainer =\n-            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+        let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let db = self.db;\n         let dyn_map =\n             &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n@@ -276,8 +270,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::LifetimeParam>,\n     ) -> Option<LifetimeParamId> {\n-        let container: ChildContainer =\n-            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+        let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let db = self.db;\n         let dyn_map =\n             &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));\n@@ -288,8 +281,7 @@ impl SourceToDefCtx<'_, '_> {\n         &mut self,\n         src: InFile<ast::ConstParam>,\n     ) -> Option<ConstParamId> {\n-        let container: ChildContainer =\n-            self.find_generic_param_container(src.as_ref().map(|it| it.syntax()))?.into();\n+        let container: ChildContainer = self.find_generic_param_container(src.syntax())?.into();\n         let db = self.db;\n         let dyn_map =\n             &*self.cache.entry(container).or_insert_with(|| container.child_by_source(db));"}, {"sha": "736f482924405450e69801e3fb3cf6f322081e74", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "patch": "@@ -376,7 +376,7 @@ impl ExpansionInfo {\n                     db::TokenExpander::MacroRules { def_site_token_map, .. }\n                     | db::TokenExpander::MacroDef { def_site_token_map, .. },\n                     Some(tt),\n-                ) => (def_site_token_map, tt.as_ref().map(|tt| tt.syntax().clone())),\n+                ) => (def_site_token_map, tt.syntax().cloned()),\n                 _ => panic!(\"`Origin::Def` used with non-`macro_rules!` macro\"),\n             },\n         };"}, {"sha": "84a2f63637b23cc4f65ee0c31b2bf9a4f46b3b1c", "filename": "crates/ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "patch": "@@ -92,7 +92,7 @@ impl NavigationTarget {\n     pub(crate) fn from_module_to_decl(db: &RootDatabase, module: hir::Module) -> NavigationTarget {\n         let name = module.name(db).map(|it| it.to_string().into()).unwrap_or_default();\n         if let Some(src) = module.declaration_source(db) {\n-            let node = src.as_ref().map(|it| it.syntax());\n+            let node = src.syntax();\n             let full_range = node.original_file_range(db);\n             let focus_range = src\n                 .value\n@@ -298,7 +298,7 @@ impl TryToNav for hir::Impl {\n         let frange = if let Some(item) = &derive_attr {\n             item.syntax().original_file_range(db)\n         } else {\n-            src.as_ref().map(|it| it.syntax()).original_file_range(db)\n+            src.syntax().original_file_range(db)\n         };\n         let focus_range = if derive_attr.is_some() {\n             None"}, {"sha": "09e6156dd5d39eb8490cfc50aa459676c1aa221e", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=6a07bf6a9f9b23fde98d8b9f5e70bc94f72a5723", "patch": "@@ -117,8 +117,6 @@ pub(crate) fn hover(\n     let node = token.parent()?;\n     let definition = match_ast! {\n         match node {\n-            // We don't use NameClass::referenced_or_defined here as we do not want to resolve\n-            // field pattern shorthands to their definition.\n             ast::Name(name) => NameClass::classify(&sema, &name).map(|class| match class {\n                 NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n                 NameClass::PatFieldShorthand { local_def, field_ref: _ } => Definition::Local(local_def),\n@@ -139,6 +137,7 @@ pub(crate) fn hover(\n                 NameClass::defined,\n             ),\n             _ => {\n+                // intra-doc links\n                 if ast::Comment::cast(token.clone()).is_some() {\n                     cov_mark::hit!(no_highlight_on_comment_hover);\n                     let (attributes, def) = doc_attributes(&sema, &node)?;\n@@ -153,9 +152,12 @@ pub(crate) fn hover(\n                         Either::Left(it) => Definition::ModuleDef(it),\n                         Either::Right(it) => Definition::Macro(it),\n                     })\n+                // attributes, require special machinery as they are mere ident tokens\n                 } else if let Some(attr) = token.ancestors().find_map(ast::Attr::cast) {\n+                    // lints\n                     if let res@Some(_) = try_hover_for_lint(&attr, &token) {\n                         return res;\n+                    // derives\n                     } else {\n                         range_override = Some(token.text_range());\n                         try_resolve_derive_input_at(&sema, &attr, &token).map(Definition::Macro)\n@@ -276,7 +278,7 @@ fn hover_type_info(\n             \"```text\\nType: {:>apad$}\\nCoerced to: {:>opad$}\\n```\\n\",\n             uncoerced = original,\n             coerced = adjusted,\n-            // 6 base padding for static text prefix of each line\n+            // 6 base padding for difference of length of the two text prefixes\n             apad = 6 + adjusted.len().max(original.len()),\n             opad = original.len(),\n         )"}]}