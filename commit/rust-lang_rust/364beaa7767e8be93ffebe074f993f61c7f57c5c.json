{"sha": "364beaa7767e8be93ffebe074f993f61c7f57c5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NGJlYWE3NzY3ZThiZTkzZmZlYmUwNzRmOTkzZjYxYzdmNTdjNWM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-02T13:30:00Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-09-03T10:00:41Z"}, "message": "Un-xfail/move/delete some tests.", "tree": {"sha": "45687c3ca46d76261ea7c2c081414240ffca90c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45687c3ca46d76261ea7c2c081414240ffca90c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/364beaa7767e8be93ffebe074f993f61c7f57c5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/364beaa7767e8be93ffebe074f993f61c7f57c5c", "html_url": "https://github.com/rust-lang/rust/commit/364beaa7767e8be93ffebe074f993f61c7f57c5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/364beaa7767e8be93ffebe074f993f61c7f57c5c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "html_url": "https://github.com/rust-lang/rust/commit/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075"}], "stats": {"total": 158, "additions": 36, "deletions": 122}, "files": [{"sha": "49412b3aafdea57db2d703bf1ff0c6c7c90ef2b2", "filename": "src/test/compile-fail/arc-cant-nest-rw-arc-3177.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farc-cant-nest-rw-arc-3177.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,12 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-// error-pattern: instantiating a type parameter with an incompatible type\n extern mod extra;\n-use extra::arc::rw_arc;\n+use extra::arc::RWArc;\n \n fn main() {\n-    let arc1  = ~rw_arc(true);\n-    let _arc2 = ~rw_arc(arc1);\n+    let arc1  = RWArc::new(true);\n+    let _arc2 = RWArc::new(arc1); //~ ERROR instantiating a type parameter with an incompatible type\n }"}, {"sha": "3f96d568a55cde47fb6e8f604a72f64306209080", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-1.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-1.rs?ref=6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-struct X { x: (), }\n-\n-impl Drop for X {\n-    fn drop(&self) {\n-        error!(\"destructor runs\");\n-    }\n-}\n-\n-fn main() {\n-    let x = Some(X { x: () });\n-    match x {\n-        Some(_z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => fail!()\n-    }\n-}"}, {"sha": "c17a444ce6e9ad3098cd1e9c247f2fcb783d43b7", "filename": "src/test/compile-fail/bind-by-move-no-lvalues-2.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a3dd30afe64f2d9f10a68ebc178ce22d8c90075/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-by-move-no-lvalues-2.rs?ref=6a3dd30afe64f2d9f10a68ebc178ce22d8c90075", "patch": "@@ -1,29 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// xfail-test\n-\n-struct X { x: (), }\n-\n-impl Drop for X {\n-    fn drop(&self) {\n-        error!(\"destructor runs\");\n-    }\n-}\n-\n-struct Y { y: Option<X> }\n-\n-fn main() {\n-    let x = Y { y: Some(X { x: () }) };\n-    match x.y {\n-        Some(_z) => { }, //~ ERROR cannot bind by-move when matching an lvalue\n-        None => fail!()\n-    }\n-}"}, {"sha": "4652aa0d3f12518c43d938dcdeceb5bfeda929ff", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test #3024\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -20,7 +19,7 @@ impl Drop for X {\n }\n \n fn unwrap(x: X) -> ~str {\n-    let X { x: y } = x; //~ ERROR cannot bind by-move within struct\n+    let X { x: y } = x; //~ ERROR cannot move out of type\n     y\n }\n "}, {"sha": "d979afbc55ceb09bdfc49dd8828a5fde387edd53", "filename": "src/test/compile-fail/issue-2951.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n-    xx = y; // error message should mention T and U, not 'a and 'b\n+    xx = y; //~ ERROR expected `T` but found `U`\n }\n \n fn main() {"}, {"sha": "fb16dad39608e887f1f64466ece693d09325451d", "filename": "src/test/compile-fail/issue-3080.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3080.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,12 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n struct x(());\n impl x {\n-    pub unsafe fn with() { } // This should fail\n+    pub unsafe fn with(&self) { }\n }\n \n fn main() {\n-    x(()).with();\n+    x(()).with(); //~ ERROR requires unsafe function or block\n }"}, {"sha": "f029921dd1c80c29a855f624c806d3ef9d224a7f", "filename": "src/test/compile-fail/issue-3973.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3973.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -9,6 +9,8 @@\n // except according to those terms.\n \n // xfail-test\n+use std::io;\n+\n struct Point {\n     x: float,\n     y: float,"}, {"sha": "26fb69f2cd0f8e46cebf35ef88d2b52ed1610ed3", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,5 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-fn main() { fmt!(\"%?\", None); } //~ ERROR can't resolve type variable\n+fn main() { fmt!(\"%?\", None); } //~ ERROR unconstrained type"}, {"sha": "6c062b0f3f7ba1a0ba80b84c8878374b56e8aa2c", "filename": "src/test/compile-fail/issue-6977.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6977.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,7 +1,5 @@\n-//xfail-test\n-\n // Trying to create a fixed-length vector with a negative size\n \n fn main() {\n-      let _x = [0,..-1];\n+      let _x = [0,..-1]; //~ ERROR found negative integer\n }"}, {"sha": "ab597b707a99773933a99c11b079810cdc105788", "filename": "src/test/compile-fail/view-items-at-top.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fview-items-at-top.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -15,7 +15,7 @@ extern mod extra;\n fn f() {\n }\n \n-use extra::net;    //~ ERROR view items must be declared at the top\n+use extra::net;    //~ ERROR `use` and `extern mod` declarations must precede items\n \n fn main() {\n }"}, {"sha": "f9f78aa4882b415d785e319998a73a7996b0afe0", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test #5321\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "fe92684e8e1ea74da67c3069ec35bc75dff5232c", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test #5530\n-\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -18,18 +16,18 @@ enum ES<T> {\n \n \n pub fn main() {\n-    let es11 = ES1 {x: 1}, es12 = ES1 {x: 2}, es21 = ES2 {x: 1, y: 1}, es22 = ES2 {x: 1, y: 2};\n+    let (es11, es12, es21, es22) = (ES1 {x: 1}, ES1 {x: 2}, ES2 {x: 1, y: 1}, ES2 {x: 1, y: 2});\n \n     // in order for both Ord and TotalOrd\n     let ess = [es11, es12, es21, es22];\n \n-    for ess.eachi |i, es1| {\n-        for ess.eachi |j, es2| {\n+    for (i, es1) in ess.iter().enumerate() {\n+        for (j, es2) in ess.iter().enumerate() {\n             let ord = i.cmp(&j);\n \n             let eq = i == j;\n-            let lt = i < j, le = i <= j;\n-            let gt = i > j, ge = i >= j;\n+            let (lt, le) = (i < j, i <= j);\n+            let (gt, ge) = (i > j, i >= j);\n \n             // Eq\n             assert_eq!(*es1 == *es2, eq);\n@@ -49,4 +47,4 @@ pub fn main() {\n             assert_eq!(es1.cmp(es2), ord);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "20698a379e12430e81999fd27cfa80af8ab26680", "filename": "src/test/run-pass/estr-shared.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Festr-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Festr-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-shared.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n pub fn main() {\n-    let x : @str = @\"hello\";\n+    let _x : @str = @\"hello\";\n }"}, {"sha": "d64c5bb01af9200b45f5e699461e4309cc5becf0", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -11,8 +11,6 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-// xfail-test #5744\n-\n #[deriving(Eq)]\n struct TwoU16s {\n     one: u16, two: u16\n@@ -22,6 +20,7 @@ extern {\n     pub fn rust_dbg_extern_identity_TwoU16s(v: TwoU16s) -> TwoU16s;\n }\n \n+#[fixed_stack_segment] #[inline(never)]\n pub fn main() {\n     unsafe {\n         let x = TwoU16s {one: 22, two: 23};"}, {"sha": "8e13c25d697b2b4bebc458248639813bdff66846", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -11,8 +11,6 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-// xfail-test #5744\n-\n #[deriving(Eq)]\n struct TwoU8s {\n     one: u8, two: u8\n@@ -22,6 +20,7 @@ extern {\n     pub fn rust_dbg_extern_identity_TwoU8s(v: TwoU8s) -> TwoU8s;\n }\n \n+#[fixed_stack_segment] #[inline(never)]\n pub fn main() {\n     unsafe {\n         let x = TwoU8s {one: 22, two: 23};"}, {"sha": "2767ac6d69fb3b654ef59e94b98e9e8bdb01fb43", "filename": "src/test/run-pass/issue-1516.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-1516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1516.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,5 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-pub fn main() {  let early_error: @fn(str) -> !  = {|msg| fail!() }; }\n+pub fn main() {\n+    let early_error: @fn(&str) -> !  = |_msg| { fail!() };\n+}"}, {"sha": "ea1242ae21613030e3f5a00203bd14d7a341d2d7", "filename": "src/test/run-pass/issue-3874.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3874.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3874.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,11 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test FIXME #3874\n enum PureCounter { PureCounter(uint) }\n \n-fn each(self: PureCounter, blk: &fn(v: &uint)) {\n-    let PureCounter(ref x) = self;\n+fn each(thing: PureCounter, blk: &fn(v: &uint)) {\n+    let PureCounter(ref x) = thing;\n     blk(x);\n }\n "}, {"sha": "efe0cb8d491d9fa4dd8c289a97830c626db7a536", "filename": "src/test/run-pass/issue-3895.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3895.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3895.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n pub fn main() {\n     enum State { BadChar, BadSyntax }\n "}, {"sha": "842605b59297bad439d2620eafcd54e3e6bee700", "filename": "src/test/run-pass/issue-3991.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3991.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,13 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n struct HasNested {\n-    mut nest: ~[~[int]],\n+    nest: ~[~[int]],\n }\n \n impl HasNested {\n-    fn method_push_local(&self) {\n+    fn method_push_local(&mut self) {\n         self.nest[0].push(0);\n     }\n }", "previous_filename": "src/test/compile-fail/issue-3991.rs"}, {"sha": "77df670ffb1bfb68585f89a849745b572a84cecc", "filename": "src/test/run-pass/issue-5280.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-5280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5280.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n type FontTableTag = u32;\n \n trait FontTableTagConversions {"}, {"sha": "dde226ad9d83a80c1f72286a17500a4c4f79b3ce", "filename": "src/test/run-pass/issue-5315.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-5315.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5315.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n struct A(bool);\n \n fn main() {"}, {"sha": "54df0523dbbef3f42d02c89d57df1eef181bad1f", "filename": "src/test/run-pass/issue-6128.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6128.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n use std::hashmap::HashMap;\n \n trait Graph<Node, Edge> {"}, {"sha": "5cda0690029810c1c3826942df09b317191459a7", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test #3874\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "48a02063c6d2e8713a7c95d99703031c657bf063", "filename": "src/test/run-pass/issue-6898.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fissue-6898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6898.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test\n-\n // Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -14,7 +12,7 @@ use std::unstable::intrinsics;\n \n /// Returns the size of a type\n pub fn size_of<T>() -> uint {\n-    TypeInfo::size_of::<T>()\n+    TypeInfo::size_of(None::<T>)\n }\n \n /// Returns the size of the type that `val` points to\n@@ -23,19 +21,19 @@ pub fn size_of_val<T>(val: &T) -> uint {\n }\n \n pub trait TypeInfo {\n-    fn size_of() -> uint;\n+    fn size_of(_lame_type_hint: Option<Self>) -> uint;\n     fn size_of_val(&self) -> uint;\n }\n \n impl<T> TypeInfo for T {\n     /// The size of the type in bytes.\n-    fn size_of() -> uint {\n+    fn size_of(_lame_type_hint: Option<T>) -> uint {\n         unsafe { intrinsics::size_of::<T>() }\n     }\n \n     /// Returns the size of the type of `self` in bytes.\n     fn size_of_val(&self) -> uint {\n-        TypeInfo::size_of::<T>()\n+        TypeInfo::size_of(None::<T>)\n     }\n }\n "}, {"sha": "9022ff92c8f2e44c216c79a5d8efc0e279bc7fe3", "filename": "src/test/run-pass/regions-borrow-evec-fixed.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-fixed.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n fn foo(x: &[int]) -> int {\n     x[0]\n }"}, {"sha": "946c29373d5c58a91303a81ddfd944165e172a56", "filename": "src/test/run-pass/tag-align-dyn-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-u64.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,7 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-test #7340 fails on 32-bit linux\n+use std::ptr;\n \n enum a_tag<A> {\n     a_tag(A)"}, {"sha": "748aa037b07e10f9860996737c296db12e1c49f9", "filename": "src/test/run-pass/tag-align-dyn-variants.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-dyn-variants.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n+// xfail-test #7340 fails on 32-bit linux\n use std::ptr;\n \n enum a_tag<A,B> {"}, {"sha": "df9e85347c5581a9b789839682120854d92f5dee", "filename": "src/test/run-pass/tag-align-u64.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-u64.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n+// xfail-test #7340 fails on 32-bit linux\n use std::ptr;\n \n enum a_tag {"}, {"sha": "dbda29fc227eead2f0d626e1cdb3454047f2ee8e", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -1,6 +1,3 @@\n-// xfail-test FIXME #5882\n-// Weird borrow check bug\n-\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "c22c812760c78e53ca2488275c98868f881de901", "filename": "src/test/run-pass/tuple-struct-trivial.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftuple-struct-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/364beaa7767e8be93ffebe074f993f61c7f57c5c/src%2Ftest%2Frun-pass%2Ftuple-struct-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-trivial.rs?ref=364beaa7767e8be93ffebe074f993f61c7f57c5c", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n-\n struct Foo(int, int, int);\n \n pub fn main() {"}]}