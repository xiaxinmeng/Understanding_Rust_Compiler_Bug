{"sha": "16d5c83d5fe19a89ad6740ca4f53750f997e2def", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDVjODNkNWZlMTlhODlhZDY3NDBjYTRmNTM3NTBmOTk3ZTJkZWY=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-06-11T16:44:42Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-06-12T11:28:09Z"}, "message": "Use more precise span when checking type definitions", "tree": {"sha": "ebde1aaefa2676d1ec73f691d70591d4e405c00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebde1aaefa2676d1ec73f691d70591d4e405c00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d5c83d5fe19a89ad6740ca4f53750f997e2def", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d5c83d5fe19a89ad6740ca4f53750f997e2def", "html_url": "https://github.com/rust-lang/rust/commit/16d5c83d5fe19a89ad6740ca4f53750f997e2def", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d5c83d5fe19a89ad6740ca4f53750f997e2def/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da58cc361577d63afdcb84945a9f011970301e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da58cc361577d63afdcb84945a9f011970301e3", "html_url": "https://github.com/rust-lang/rust/commit/0da58cc361577d63afdcb84945a9f011970301e3"}], "stats": {"total": 47, "additions": 20, "deletions": 27}, "files": [{"sha": "c524c3024ebf4ecc90af9f364b85d91f9553b6a0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=16d5c83d5fe19a89ad6740ca4f53750f997e2def", "patch": "@@ -1626,10 +1626,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let t = ast_ty_to_ty(self, self, ast_t);\n \n         let mut bounds_checker = wf::BoundsChecker::new(self,\n-                                                        ast_t.span,\n                                                         self.body_id,\n                                                         None);\n-        bounds_checker.check_ty(t);\n+        bounds_checker.check_ty(t, ast_t.span);\n \n         t\n     }"}, {"sha": "c1d260815f6bdc7a1ecf4c64b65e2b6aaf0a3489", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=16d5c83d5fe19a89ad6740ca4f53750f997e2def", "patch": "@@ -23,7 +23,7 @@ use util::ppaux::{Repr, UserString};\n use std::collections::HashSet;\n use syntax::ast;\n use syntax::ast_util::local_def;\n-use syntax::codemap::Span;\n+use syntax::codemap::{DUMMY_SP, Span};\n use syntax::parse::token::{self, special_idents};\n use syntax::visit;\n use syntax::visit::Visitor;\n@@ -162,15 +162,14 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n         self.with_fcx(item, |this, fcx| {\n             let variants = lookup_fields(fcx);\n             let mut bounds_checker = BoundsChecker::new(fcx,\n-                                                        item.span,\n                                                         item.id,\n                                                         Some(&mut this.cache));\n             debug!(\"check_type_defn at bounds_checker.scope: {:?}\", bounds_checker.scope);\n \n-             for variant in &variants {\n+            for variant in &variants {\n                 for field in &variant.fields {\n                     // Regions are checked below.\n-                    bounds_checker.check_traits_in_ty(field.ty);\n+                    bounds_checker.check_traits_in_ty(field.ty, field.span);\n                 }\n \n                 // For DST, all intermediate types must be sized.\n@@ -199,7 +198,6 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     {\n         self.with_fcx(item, |this, fcx| {\n             let mut bounds_checker = BoundsChecker::new(fcx,\n-                                                        item.span,\n                                                         item.id,\n                                                         Some(&mut this.cache));\n             debug!(\"check_item_type at bounds_checker.scope: {:?}\", bounds_checker.scope);\n@@ -209,7 +207,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                       &fcx.inh.param_env.free_substs,\n                                                       &type_scheme.ty);\n \n-            bounds_checker.check_traits_in_ty(item_ty);\n+            bounds_checker.check_traits_in_ty(item_ty, item.span);\n         });\n     }\n \n@@ -218,7 +216,6 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n     {\n         self.with_fcx(item, |this, fcx| {\n             let mut bounds_checker = BoundsChecker::new(fcx,\n-                                                        item.span,\n                                                         item.id,\n                                                         Some(&mut this.cache));\n             debug!(\"check_impl at bounds_checker.scope: {:?}\", bounds_checker.scope);\n@@ -231,7 +228,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n                                                       &fcx.inh.param_env.free_substs,\n                                                       &self_ty);\n \n-            bounds_checker.check_traits_in_ty(self_ty);\n+            bounds_checker.check_traits_in_ty(self_ty, item.span);\n \n             // Similarly, obtain an \"inside\" reference to the trait\n             // that the impl implements.\n@@ -252,7 +249,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             // trait reference. Instead, this is done at the impl site.\n             // Arguably this is wrong and we should treat the trait-reference\n             // the same way as we treat the self-type.\n-            bounds_checker.check_trait_ref(&trait_ref);\n+            bounds_checker.check_trait_ref(&trait_ref, item.span);\n \n             let cause =\n                 traits::ObligationCause::new(\n@@ -483,11 +480,10 @@ pub struct BoundsChecker<'cx,'tcx:'cx> {\n \n impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n     pub fn new(fcx: &'cx FnCtxt<'cx,'tcx>,\n-               span: Span,\n                scope: ast::NodeId,\n                cache: Option<&'cx mut HashSet<Ty<'tcx>>>)\n                -> BoundsChecker<'cx,'tcx> {\n-        BoundsChecker { fcx: fcx, span: span, scope: scope,\n+        BoundsChecker { fcx: fcx, span: DUMMY_SP, scope: scope,\n                         cache: cache, binding_count: 0 }\n     }\n \n@@ -500,30 +496,32 @@ impl<'cx,'tcx> BoundsChecker<'cx,'tcx> {\n     ///\n     /// Note that it does not (currently, at least) check that `A : Copy` (that check is delegated\n     /// to the point where impl `A : Trait<B>` is implemented).\n-    pub fn check_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>) {\n+    pub fn check_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, span: Span) {\n         let trait_predicates = ty::lookup_predicates(self.fcx.tcx(), trait_ref.def_id);\n \n-        let bounds = self.fcx.instantiate_bounds(self.span,\n+        let bounds = self.fcx.instantiate_bounds(span,\n                                                  trait_ref.substs,\n                                                  &trait_predicates);\n \n         self.fcx.add_obligations_for_parameters(\n             traits::ObligationCause::new(\n-                self.span,\n+                span,\n                 self.fcx.body_id,\n                 traits::ItemObligation(trait_ref.def_id)),\n             &bounds);\n \n         for &ty in &trait_ref.substs.types {\n-            self.check_traits_in_ty(ty);\n+            self.check_traits_in_ty(ty, span);\n         }\n     }\n \n-    pub fn check_ty(&mut self, ty: Ty<'tcx>) {\n+    pub fn check_ty(&mut self, ty: Ty<'tcx>, span: Span) {\n+        self.span = span;\n         ty.fold_with(self);\n     }\n \n-    fn check_traits_in_ty(&mut self, ty: Ty<'tcx>) {\n+    fn check_traits_in_ty(&mut self, ty: Ty<'tcx>, span: Span) {\n+        self.span = span;\n         // When checking types outside of a type def'n, we ignore\n         // region obligations. See discussion below in fold_ty().\n         self.binding_count += 1;"}, {"sha": "9a1e4ee2471f62669f8bf3dd9e0aeae7c9e729e5", "filename": "src/test/compile-fail/trait-bounds-on-structs-and-enums.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d5c83d5fe19a89ad6740ca4f53750f997e2def/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-on-structs-and-enums.rs?ref=16d5c83d5fe19a89ad6740ca4f53750f997e2def", "patch": "@@ -32,23 +32,19 @@ impl<T> Foo<T> {\n }\n \n struct Baz {\n-//~^ ERROR not implemented\n-    a: Foo<isize>,\n+    a: Foo<isize>, //~ ERROR not implemented\n }\n \n enum Boo {\n-//~^ ERROR not implemented\n-    Quux(Bar<usize>),\n+    Quux(Bar<usize>), //~ ERROR not implemented\n }\n \n struct Badness<U> {\n-//~^ ERROR not implemented\n-    b: Foo<U>,\n+    b: Foo<U>, //~ ERROR not implemented\n }\n \n enum MoreBadness<V> {\n-//~^ ERROR not implemented\n-    EvenMoreBadness(Bar<V>),\n+    EvenMoreBadness(Bar<V>), //~ ERROR not implemented\n }\n \n trait PolyTrait<T>"}]}