{"sha": "7b59b4f14dae8c859718d60794021230e1e3ac29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNTliNGYxNGRhZThjODU5NzE4ZDYwNzk0MDIxMjMwZTFlM2FjMjk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-18T16:13:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:32:48Z"}, "message": "parser: extract `eat_or_separator`.", "tree": {"sha": "a8d2a2f0185e1d5921bbe4672707b1bd46664256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8d2a2f0185e1d5921bbe4672707b1bd46664256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b59b4f14dae8c859718d60794021230e1e3ac29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b59b4f14dae8c859718d60794021230e1e3ac29", "html_url": "https://github.com/rust-lang/rust/commit/7b59b4f14dae8c859718d60794021230e1e3ac29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b59b4f14dae8c859718d60794021230e1e3ac29/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a34ab62df777e885cac71ab171225b2cd1a812", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a34ab62df777e885cac71ab171225b2cd1a812", "html_url": "https://github.com/rust-lang/rust/commit/a4a34ab62df777e885cac71ab171225b2cd1a812"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "3af64cef74f26a0eb5f8c1ed9fa35b35b6a54b30", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7b59b4f14dae8c859718d60794021230e1e3ac29/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b59b4f14dae8c859718d60794021230e1e3ac29/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=7b59b4f14dae8c859718d60794021230e1e3ac29", "patch": "@@ -29,27 +29,10 @@ impl<'a> Parser<'a> {\n         loop {\n             pats.push(self.parse_top_level_pat()?);\n \n-            if self.token == token::OrOr {\n-                self.ban_unexpected_or_or();\n-                self.bump();\n-            } else if self.eat(&token::BinOp(token::Or)) {\n-                // This is a No-op. Continue the loop to parse the next\n-                // pattern.\n-            } else {\n+            if !self.eat_or_separator() {\n                 return Ok(pats);\n             }\n-        };\n-    }\n-\n-    fn ban_unexpected_or_or(&mut self) {\n-        self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n-            .span_suggestion(\n-                self.token.span,\n-                \"use a single `|` to specify multiple patterns\",\n-                \"|\".to_owned(),\n-                Applicability::MachineApplicable\n-            )\n-            .emit();\n+        }\n     }\n \n     /// A wrapper around `parse_pat` with some special error handling for the\n@@ -127,17 +110,7 @@ impl<'a> Parser<'a> {\n \n         let lo = first_pat.span;\n         let mut pats = vec![first_pat];\n-        loop {\n-            if self.token == token::OrOr {\n-                // Found `||`; Recover and pretend we parsed `|`.\n-                self.ban_unexpected_or_or();\n-                self.bump();\n-            } else if self.eat(&token::BinOp(token::Or)) {\n-                // Found `|`. Working towards a proper or-pattern.\n-            } else {\n-                break;\n-            }\n-\n+        while self.eat_or_separator() {\n             let pat = self.parse_pat(expected)?;\n             self.maybe_recover_unexpected_comma(pat.span, top_level)?;\n             pats.push(pat);\n@@ -152,6 +125,31 @@ impl<'a> Parser<'a> {\n         Ok(self.mk_pat(or_pattern_span, PatKind::Or(pats)))\n     }\n \n+    /// Eat the or-pattern `|` separator.\n+    /// If instead a `||` token is encountered, recover and pretend we parsed `|`.\n+    fn eat_or_separator(&mut self) -> bool {\n+        match self.token.kind {\n+            token::OrOr => {\n+                // Found `||`; Recover and pretend we parsed `|`.\n+                self.ban_unexpected_or_or();\n+                self.bump();\n+                true\n+            }\n+            _ => self.eat(&token::BinOp(token::Or)),\n+        }\n+    }\n+\n+    fn ban_unexpected_or_or(&mut self) {\n+        self.struct_span_err(self.token.span, \"unexpected token `||` after pattern\")\n+            .span_suggestion(\n+                self.token.span,\n+                \"use a single `|` to specify multiple patterns\",\n+                \"|\".to_owned(),\n+                Applicability::MachineApplicable\n+            )\n+            .emit();\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat("}]}