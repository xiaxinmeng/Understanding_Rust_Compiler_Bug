{"sha": "4520002b63b5a27e7676822aecfb2d435bf36e5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjAwMDJiNjNiNWEyN2U3Njc2ODIyYWVjZmIyZDQzNWJmMzZlNWE=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-27T05:48:15Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2021-03-27T06:42:49Z"}, "message": "Unleash macro 2.0 in hightlight and more", "tree": {"sha": "d59641111ce77db0117714180ae1d448056cf3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59641111ce77db0117714180ae1d448056cf3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4520002b63b5a27e7676822aecfb2d435bf36e5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4520002b63b5a27e7676822aecfb2d435bf36e5a", "html_url": "https://github.com/rust-lang/rust/commit/4520002b63b5a27e7676822aecfb2d435bf36e5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4520002b63b5a27e7676822aecfb2d435bf36e5a/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a193666361f6ea9725b927a35f5baf77da713c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a193666361f6ea9725b927a35f5baf77da713c0a", "html_url": "https://github.com/rust-lang/rust/commit/a193666361f6ea9725b927a35f5baf77da713c0a"}], "stats": {"total": 80, "additions": 49, "deletions": 31}, "files": [{"sha": "d3caeef4ee754c4e6097a3db9c7b0140dc27c711", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -768,7 +768,7 @@ to_def_impls![\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::LifetimeParam, ast::LifetimeParam, lifetime_param_to_def),\n     (crate::ConstParam, ast::ConstParam, const_param_to_def),\n-    (crate::MacroDef, ast::MacroRules, macro_rules_to_def),\n+    (crate::MacroDef, ast::Macro, macro_to_def),\n     (crate::Local, ast::IdentPat, bind_pat_to_def),\n     (crate::Local, ast::SelfParam, self_param_to_def),\n     (crate::Label, ast::Label, label_to_def),"}, {"sha": "9a5a2255fa8412a46313bd14ba418dd307ebe5ed", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -191,10 +191,7 @@ impl SourceToDefCtx<'_, '_> {\n     }\n \n     // FIXME: use DynMap as well?\n-    pub(super) fn macro_rules_to_def(\n-        &mut self,\n-        src: InFile<ast::MacroRules>,\n-    ) -> Option<MacroDefId> {\n+    pub(super) fn macro_to_def(&mut self, src: InFile<ast::Macro>) -> Option<MacroDefId> {\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = AstId::new(src.file_id, file_ast_id.upcast());\n         let kind = MacroDefKind::Declarative(ast_id);"}, {"sha": "9301cdeffee4712277b15a24e9340e44c4478098", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -161,7 +161,7 @@ pub(crate) fn doc_owner_to_def(\n             ast::Variant(it) => sema.to_def(&it)?.into(),\n             ast::Trait(it) => sema.to_def(&it)?.into(),\n             ast::Impl(it) => return sema.to_def(&it).map(Definition::SelfType),\n-            ast::MacroRules(it) => return sema.to_def(&it).map(Definition::Macro),\n+            ast::Macro(it) => return sema.to_def(&it).map(Definition::Macro),\n             ast::TupleField(it) => return sema.to_def(&it).map(Definition::Field),\n             ast::RecordField(it) => return sema.to_def(&it).map(Definition::Field),\n             _ => return None,"}, {"sha": "2c898eae859f38139f673f0ef1162c482882598d", "filename": "crates/ide/src/file_structure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffile_structure.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -172,7 +172,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 };\n                 Some(node)\n             },\n-            ast::MacroRules(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n+            ast::Macro(it) => decl(it, StructureNodeKind::SymbolKind(SymbolKind::Macro)),\n             _ => None,\n         }\n     }"}, {"sha": "05fa8fc1344d3e3601bba05f7ed195cd3126ff29", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -66,6 +66,7 @@ fn find_ancestors(item: SyntaxElement, direction: Direction, range: TextRange) -\n         SyntaxKind::STATIC,\n         SyntaxKind::CONST,\n         SyntaxKind::MACRO_RULES,\n+        SyntaxKind::MACRO_DEF,\n     ];\n \n     let ancestor = once(root.clone())"}, {"sha": "67a10766b27be81c0cec66f82e63255c8d6050dd", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -5,7 +5,7 @@ mod injector;\n \n mod highlight;\n mod format;\n-mod macro_rules;\n+mod macro_;\n mod inject;\n \n mod html;\n@@ -24,8 +24,8 @@ use syntax::{\n \n use crate::{\n     syntax_highlighting::{\n-        format::highlight_format_string, highlights::Highlights,\n-        macro_rules::MacroRulesHighlighter, tags::Highlight,\n+        format::highlight_format_string, highlights::Highlights, macro_::MacroHighlighter,\n+        tags::Highlight,\n     },\n     FileId, HlMod, HlTag,\n };\n@@ -93,8 +93,8 @@ fn traverse(\n     let mut bindings_shadow_count: FxHashMap<Name, u32> = FxHashMap::default();\n \n     let mut current_macro_call: Option<ast::MacroCall> = None;\n-    let mut current_macro_rules: Option<ast::MacroRules> = None;\n-    let mut macro_rules_highlighter = MacroRulesHighlighter::default();\n+    let mut current_macro: Option<ast::Macro> = None;\n+    let mut macro_highlighter = MacroHighlighter::default();\n     let mut inside_attribute = false;\n \n     // Walk all nodes, keeping track of whether we are inside a macro or not.\n@@ -129,16 +129,16 @@ fn traverse(\n             _ => (),\n         }\n \n-        match event.clone().map(|it| it.into_node().and_then(ast::MacroRules::cast)) {\n+        match event.clone().map(|it| it.into_node().and_then(ast::Macro::cast)) {\n             WalkEvent::Enter(Some(mac)) => {\n-                macro_rules_highlighter.init();\n-                current_macro_rules = Some(mac);\n+                macro_highlighter.init();\n+                current_macro = Some(mac);\n                 continue;\n             }\n             WalkEvent::Leave(Some(mac)) => {\n-                assert_eq!(current_macro_rules, Some(mac));\n-                current_macro_rules = None;\n-                macro_rules_highlighter = MacroRulesHighlighter::default();\n+                assert_eq!(current_macro, Some(mac));\n+                current_macro = None;\n+                macro_highlighter = MacroHighlighter::default();\n             }\n             _ => (),\n         }\n@@ -164,9 +164,9 @@ fn traverse(\n \n         let range = element.text_range();\n \n-        if current_macro_rules.is_some() {\n+        if current_macro.is_some() {\n             if let Some(tok) = element.as_token() {\n-                macro_rules_highlighter.advance(tok);\n+                macro_highlighter.advance(tok);\n             }\n         }\n \n@@ -200,7 +200,7 @@ fn traverse(\n             }\n         }\n \n-        if let Some(_) = macro_rules_highlighter.highlight(element_to_highlight.clone()) {\n+        if let Some(_) = macro_highlighter.highlight(element_to_highlight.clone()) {\n             continue;\n         }\n "}, {"sha": "963c3fb594175df299be5b50cc8ce845581c85ca", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -109,8 +109,7 @@ fn doc_attributes<'node>(\n             ast::Impl(it)        => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::SelfType(def))),\n             ast::RecordField(it) => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Field(def))),\n             ast::TupleField(it)  => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Field(def))),\n-            ast::MacroRules(it)  => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Macro(def))),\n-            // ast::MacroDef(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n+            ast::Macro(it)       => sema.to_def(&it).map(|def| (def.attrs(sema.db), Definition::Macro(def))),\n             // ast::Use(it) => sema.to_def(&it).map(|def| (Box::new(it) as _, def.attrs(sema.db))),\n             _ => return None\n         }"}, {"sha": "8197042942ed207b15182b7c6f874ec5ce62cdb4", "filename": "crates/ide/src/syntax_highlighting/macro_.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -4,18 +4,18 @@ use syntax::{SyntaxElement, SyntaxKind, SyntaxToken, TextRange, T};\n use crate::{HlRange, HlTag};\n \n #[derive(Default)]\n-pub(super) struct MacroRulesHighlighter {\n+pub(super) struct MacroHighlighter {\n     state: Option<MacroMatcherParseState>,\n }\n \n-impl MacroRulesHighlighter {\n+impl MacroHighlighter {\n     pub(super) fn init(&mut self) {\n         self.state = Some(MacroMatcherParseState::default());\n     }\n \n     pub(super) fn advance(&mut self, token: &SyntaxToken) {\n         if let Some(state) = self.state.as_mut() {\n-            update_macro_rules_state(state, token);\n+            update_macro_state(state, token);\n         }\n     }\n \n@@ -74,9 +74,9 @@ impl RuleState {\n     }\n }\n \n-fn update_macro_rules_state(state: &mut MacroMatcherParseState, tok: &SyntaxToken) {\n+fn update_macro_state(state: &mut MacroMatcherParseState, tok: &SyntaxToken) {\n     if !state.in_invoc_body {\n-        if tok.kind() == T!['{'] {\n+        if tok.kind() == T!['{'] || tok.kind() == T!['('] {\n             state.in_invoc_body = true;\n         }\n         return;", "previous_filename": "crates/ide/src/syntax_highlighting/macro_rules.rs"}, {"sha": "1eaa7b75bce8575eb6851388e63ea5dcdec808e9", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -41,7 +41,7 @@\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">Copy</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"comment\">// Needed for function consuming vs normal</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"brace\">{</span>\n@@ -158,6 +158,16 @@\n     <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"colon\">:</span>ty<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>type<span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n \n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">with_args</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"punctuation\">$</span>i\n+<span class=\"brace\">}</span>\n+\n+<span class=\"keyword\">macro</span> <span class=\"macro declaration\">without_args</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>i<span class=\"colon\">:</span>ident<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span>\n+        <span class=\"punctuation\">$</span>i\n+    <span class=\"brace\">}</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"comment\">// comment</span>\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello, {}!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "369ae0972b4d141eb1a0b34998f1c87cfb401645", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -129,6 +129,16 @@ macro_rules! keyword_frag {\n     ($type:ty) => ($type)\n }\n \n+macro with_args($i:ident) {\n+    $i\n+}\n+\n+macro without_args {\n+    ($i:ident) => {\n+        $i\n+    }\n+}\n+\n // comment\n fn main() {\n     println!(\"Hello, {}!\", 92);"}, {"sha": "0d9808d2439aa35f859defd784533f40a9877413", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -227,7 +227,7 @@ impl NameClass {\n                     let def: hir::TypeAlias = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n                 },\n-                ast::MacroRules(it) => {\n+                ast::Macro(it) => {\n                     let def = sema.to_def(&it)?;\n                     Some(NameClass::Definition(Definition::Macro(def)))\n                 },"}, {"sha": "da427d6868897b3aaa6c14adf36cf10e8932f301", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4520002b63b5a27e7676822aecfb2d435bf36e5a/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=4520002b63b5a27e7676822aecfb2d435bf36e5a", "patch": "@@ -438,7 +438,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n             ast::TypeAlias(it) => decl(it),\n             ast::Const(it) => decl(it),\n             ast::Static(it) => decl(it),\n-            ast::MacroRules(it) => decl(it),\n+            ast::Macro(it) => decl(it),\n             ast::Union(it) => decl(it),\n             _ => None,\n         }\n@@ -458,6 +458,7 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n             CONST => FileSymbolKind::Const,\n             STATIC => FileSymbolKind::Static,\n             MACRO_RULES => FileSymbolKind::Macro,\n+            MACRO_DEF => FileSymbolKind::Macro,\n             UNION => FileSymbolKind::Union,\n             kind => unreachable!(\"{:?}\", kind),\n         },"}]}