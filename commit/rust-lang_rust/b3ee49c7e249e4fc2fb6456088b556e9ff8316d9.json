{"sha": "b3ee49c7e249e4fc2fb6456088b556e9ff8316d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZWU0OWM3ZTI0OWU0ZmMyZmI2NDU2MDg4YjU1NmU5ZmY4MzE2ZDk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-15T17:41:02Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-03-15T18:05:27Z"}, "message": "deque: add documentation", "tree": {"sha": "e2a4de302a6d1b9aa0dc7ed1a5a833a4b6b979cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2a4de302a6d1b9aa0dc7ed1a5a833a4b6b979cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9", "html_url": "https://github.com/rust-lang/rust/commit/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c724dae7def417cd9aea8710d479b28155ed0f4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c724dae7def417cd9aea8710d479b28155ed0f4f", "html_url": "https://github.com/rust-lang/rust/commit/c724dae7def417cd9aea8710d479b28155ed0f4f"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "15131093acb062971a47d39b4cd665463a33942b", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3ee49c7e249e4fc2fb6456088b556e9ff8316d9/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=b3ee49c7e249e4fc2fb6456088b556e9ff8316d9", "patch": "@@ -22,40 +22,61 @@ pub struct Deque<T> {\n }\n \n impl<T> Container for Deque<T> {\n+    /// Return the number of elements in the deque\n     pure fn len(&self) -> uint { self.nelts }\n+\n+    /// Return true if the deque contains no elements\n     pure fn is_empty(&self) -> bool { self.len() == 0 }\n }\n \n impl<T> Mutable for Deque<T> {\n+    /// Clear the deque, removing all values.\n     fn clear(&mut self) {\n-        for vec::each_mut(self.elts) |x| { *x = None }\n+        for self.elts.each_mut |x| { *x = None }\n         self.nelts = 0;\n         self.lo = 0;\n         self.hi = 0;\n     }\n }\n \n pub impl<T> Deque<T> {\n+    /// Create an empty Deque\n     static pure fn new() -> Deque<T> {\n         Deque{nelts: 0, lo: 0, hi: 0,\n               elts: vec::from_fn(initial_capacity, |_| None)}\n     }\n \n+    /// Return a reference to the first element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn peek_front(&self) -> &self/T { get(self.elts, self.lo) }\n+\n+    /// Return a reference to the last element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn peek_back(&self) -> &self/T { get(self.elts, self.hi - 1u) }\n \n+    /// Retrieve an element in the deque by index\n+    ///\n+    /// Fails if there is no element with the given index\n     fn get(&self, i: int) -> &self/T {\n         let idx = (self.lo + (i as uint)) % self.elts.len();\n         get(self.elts, idx)\n     }\n \n+    /// Remove and return the first element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn pop_front(&mut self) -> T {\n         let mut result = self.elts[self.lo].swap_unwrap();\n         self.lo = (self.lo + 1u) % self.elts.len();\n         self.nelts -= 1u;\n         result\n     }\n \n+    /// Remove and return the last element in the deque\n+    ///\n+    /// Fails if the deque is empty\n     fn pop_back(&mut self) -> T {\n         if self.hi == 0u {\n             self.hi = self.elts.len() - 1u;\n@@ -66,6 +87,7 @@ pub impl<T> Deque<T> {\n         result\n     }\n \n+    /// Prepend an element to the deque\n     fn add_front(&mut self, t: T) {\n         let oldlo = self.lo;\n         if self.lo == 0u {\n@@ -80,6 +102,7 @@ pub impl<T> Deque<T> {\n         self.nelts += 1u;\n     }\n \n+    /// Append an element to the deque\n     fn add_back(&mut self, t: T) {\n         if self.lo == self.hi && self.nelts != 0u {\n             self.elts = grow(self.nelts, self.lo, self.elts);"}]}