{"sha": "ea3e84f21d4e8c048e091e865c0916fed62f4714", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhM2U4NGYyMWQ0ZThjMDQ4ZTA5MWU4NjVjMDkxNmZlZDYyZjQ3MTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-24T13:27:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-24T13:27:58Z"}, "message": "Merge pull request #4590 from Julian-Wollersberger/update_unescape\n\nUpdate to rustc_lexer version 660", "tree": {"sha": "a087b04cf5329bc24617f9115f45440afa897bfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a087b04cf5329bc24617f9115f45440afa897bfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3e84f21d4e8c048e091e865c0916fed62f4714", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeynZeCRBK7hj4Ov3rIwAAdHIIADu97Uf9Kg2epkRu57y7X311\na+nTWkeQS4wKXZKn7YzJODILcV4JVUqRSVrOFZ+ThGRDQgyZhor1tQ1HZK+E2FOH\nJe6ib73qrvMVisOrRtLxlSR+OaWPkR5WQHl/D6Tsdujj1BniocWhbwhxqBEQVsY2\nKUJevCqpNGpxn08Ke0Q0YJVsOtSAiefnyrEdtvH55wQRIDJIuPIgxQKCD1uFDXPz\n0DhCPkkHE4bKyklxOtlavxD61ZjQGEPP+3C/2uk0ZZYTpC8+RAC5/AFq+As9GeV4\nR98xOM+RWUVL49axol0PLMEIryM/w5SdQuiNWLtH/XsDzhx6dzRJq9rwHJpeUoM=\n=rXhD\n-----END PGP SIGNATURE-----\n", "payload": "tree a087b04cf5329bc24617f9115f45440afa897bfc\nparent f4f5fca10175b8d5fdfa36563c103f81b2b0acd3\nparent ff9d553fe3af092e4ef5467f07cef62af27b868b\nauthor Aleksey Kladov <aleksey.kladov@gmail.com> 1590326878 +0200\ncommitter GitHub <noreply@github.com> 1590326878 +0200\n\nMerge pull request #4590 from Julian-Wollersberger/update_unescape\n\nUpdate to rustc_lexer version 660"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3e84f21d4e8c048e091e865c0916fed62f4714", "html_url": "https://github.com/rust-lang/rust/commit/ea3e84f21d4e8c048e091e865c0916fed62f4714", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3e84f21d4e8c048e091e865c0916fed62f4714/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4f5fca10175b8d5fdfa36563c103f81b2b0acd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f5fca10175b8d5fdfa36563c103f81b2b0acd3", "html_url": "https://github.com/rust-lang/rust/commit/f4f5fca10175b8d5fdfa36563c103f81b2b0acd3"}, {"sha": "ff9d553fe3af092e4ef5467f07cef62af27b868b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff9d553fe3af092e4ef5467f07cef62af27b868b", "html_url": "https://github.com/rust-lang/rust/commit/ff9d553fe3af092e4ef5467f07cef62af27b868b"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "a511e0d2804952c32ff204259e3340b40cf5c159", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea3e84f21d4e8c048e091e865c0916fed62f4714/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ea3e84f21d4e8c048e091e865c0916fed62f4714/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ea3e84f21d4e8c048e091e865c0916fed62f4714", "patch": "@@ -1398,9 +1398,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_lexer\"\n-version = \"656.0.0\"\n+version = \"660.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9cbba98ec46e96a4663197dfa8c0378752de2006e314e5400c0ca74929d6692f\"\n+checksum = \"30760dbcc7667c9e0da561e980e24867ca7f4526ce060a3d7e6d9dcfeaae88d1\"\n dependencies = [\n  \"unicode-xid\",\n ]"}, {"sha": "a9a5cc7bc6ed0f5a2bace87c98ad9c57d847224e", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=ea3e84f21d4e8c048e091e865c0916fed62f4714", "patch": "@@ -13,7 +13,7 @@ doctest = false\n [dependencies]\n itertools = \"0.9.0\"\n rowan = \"0.10.0\"\n-rustc_lexer = { version = \"656.0.0\", package = \"rustc-ap-rustc_lexer\" }\n+rustc_lexer = { version = \"660.0.0\", package = \"rustc-ap-rustc_lexer\" }\n rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n once_cell = \"1.3.1\""}, {"sha": "3cd6d99c38892e0512e0a5e9010ce7b4a0893080", "filename": "crates/ra_syntax/src/ast/tokens.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftokens.rs?ref=ea3e84f21d4e8c048e091e865c0916fed62f4714", "patch": "@@ -6,6 +6,7 @@ use crate::{\n     ast::{AstToken, Comment, RawString, String, Whitespace},\n     TextRange, TextSize,\n };\n+use rustc_lexer::unescape::{unescape_literal, Mode};\n \n impl Comment {\n     pub fn kind(&self) -> CommentKind {\n@@ -147,7 +148,7 @@ impl HasStringValue for String {\n \n         let mut buf = std::string::String::with_capacity(text.len());\n         let mut has_error = false;\n-        rustc_lexer::unescape::unescape_str(text, &mut |_, unescaped_char| match unescaped_char {\n+        unescape_literal(text, Mode::Str, &mut |_, unescaped_char| match unescaped_char {\n             Ok(c) => buf.push(c),\n             Err(_) => has_error = true,\n         });\n@@ -498,7 +499,7 @@ impl HasFormatSpecifier for String {\n         let offset = self.text_range_between_quotes()?.start() - self.syntax().text_range().start();\n \n         let mut res = Vec::with_capacity(text.len());\n-        rustc_lexer::unescape::unescape_str(text, &mut |range, unescaped_char| {\n+        unescape_literal(text, Mode::Str, &mut |range, unescaped_char| {\n             res.push((\n                 TextRange::new(range.start.try_into().unwrap(), range.end.try_into().unwrap())\n                     + offset,"}, {"sha": "fdec48fb0b88c33469114fd9e855a89e5ba49a06", "filename": "crates/ra_syntax/src/validation.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3e84f21d4e8c048e091e865c0916fed62f4714/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fvalidation.rs?ref=ea3e84f21d4e8c048e091e865c0916fed62f4714", "patch": "@@ -2,15 +2,15 @@\n \n mod block;\n \n-use std::convert::TryFrom;\n-\n-use rustc_lexer::unescape;\n-\n use crate::{\n     ast, match_ast, AstNode, SyntaxError,\n     SyntaxKind::{BYTE, BYTE_STRING, CHAR, CONST_DEF, FN_DEF, INT_NUMBER, STRING, TYPE_ALIAS_DEF},\n     SyntaxNode, SyntaxToken, TextSize, T,\n };\n+use rustc_lexer::unescape::{\n+    self, unescape_byte, unescape_byte_literal, unescape_char, unescape_literal, Mode,\n+};\n+use std::convert::TryFrom;\n \n fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n     use unescape::EscapeError as EE;\n@@ -81,10 +81,8 @@ fn rustc_unescape_error_to_string(err: unescape::EscapeError) -> &'static str {\n \n pub(crate) fn validate(root: &SyntaxNode) -> Vec<SyntaxError> {\n     // FIXME:\n-    // * Add validation of character literal containing only a single char\n-    // * Add validation of `crate` keyword not appearing in the middle of the symbol path\n+    // * Add unescape validation of raw string literals and raw byte string literals\n     // * Add validation of doc comments are being attached to nodes\n-    // * Remove validation of unterminated literals (it is already implemented in `tokenize()`)\n \n     let mut errors = Vec::new();\n     for node in root.descendants() {\n@@ -121,18 +119,18 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n \n     match token.kind() {\n         BYTE => {\n-            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape::unescape_byte) {\n+            if let Some(Err(e)) = unquote(text, 2, '\\'').map(unescape_byte) {\n                 push_err(2, e);\n             }\n         }\n         CHAR => {\n-            if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape::unescape_char) {\n+            if let Some(Err(e)) = unquote(text, 1, '\\'').map(unescape_char) {\n                 push_err(1, e);\n             }\n         }\n         BYTE_STRING => {\n             if let Some(without_quotes) = unquote(text, 2, '\"') {\n-                unescape::unescape_byte_str(without_quotes, &mut |range, char| {\n+                unescape_byte_literal(without_quotes, Mode::ByteStr, &mut |range, char| {\n                     if let Err(err) = char {\n                         push_err(2, (range.start, err));\n                     }\n@@ -141,7 +139,7 @@ fn validate_literal(literal: ast::Literal, acc: &mut Vec<SyntaxError>) {\n         }\n         STRING => {\n             if let Some(without_quotes) = unquote(text, 1, '\"') {\n-                unescape::unescape_str(without_quotes, &mut |range, char| {\n+                unescape_literal(without_quotes, Mode::Str, &mut |range, char| {\n                     if let Err(err) = char {\n                         push_err(1, (range.start, err));\n                     }"}]}