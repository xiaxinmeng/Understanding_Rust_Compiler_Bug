{"sha": "731ff93a7654ffe4f093341bf1be230d47ce56b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczMWZmOTNhNzY1NGZmZTRmMDkzMzQxYmYxYmUyMzBkNDdjZTU2YjM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-24T14:43:46Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-11-24T14:43:46Z"}, "message": "Rollup merge of #30004 - michaelwoerister:primitive-ty-to-str, r=alexcrichton\n\nGood candidate for a rollup, this one.", "tree": {"sha": "7d9bad56599233cad2a95c72af71ecebfcff18c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d9bad56599233cad2a95c72af71ecebfcff18c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/731ff93a7654ffe4f093341bf1be230d47ce56b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/731ff93a7654ffe4f093341bf1be230d47ce56b3", "html_url": "https://github.com/rust-lang/rust/commit/731ff93a7654ffe4f093341bf1be230d47ce56b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/731ff93a7654ffe4f093341bf1be230d47ce56b3/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8859880ba0cda2ba814e7ba5c17f2ac454c26b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8859880ba0cda2ba814e7ba5c17f2ac454c26b", "html_url": "https://github.com/rust-lang/rust/commit/ff8859880ba0cda2ba814e7ba5c17f2ac454c26b"}, {"sha": "3be1d8ca7d9d9df60a38106d6c8f5d12597cbafc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3be1d8ca7d9d9df60a38106d6c8f5d12597cbafc", "html_url": "https://github.com/rust-lang/rust/commit/3be1d8ca7d9d9df60a38106d6c8f5d12597cbafc"}], "stats": {"total": 154, "additions": 44, "deletions": 110}, "files": [{"sha": "9db34eef91fd19599142111ad67fb7e9d23e6b92", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 46, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -24,8 +24,7 @@ use middle::ty::{self, TypeAndMut, Ty, HasTypeFlags};\n use middle::ty::fold::TypeFoldable;\n \n use std::fmt;\n-use syntax::abi;\n-use syntax::ast;\n+use syntax::{abi, ast_util};\n use syntax::parse::token;\n use syntax::ast::CRATE_NODE_ID;\n use rustc_front::hir;\n@@ -774,55 +773,14 @@ impl<'tcx> fmt::Display for ty::TraitRef<'tcx> {\n     }\n }\n \n-pub fn int_ty_to_string(t: ast::IntTy, val: Option<i64>) -> String {\n-    let s = match t {\n-        ast::TyIs => \"isize\",\n-        ast::TyI8 => \"i8\",\n-        ast::TyI16 => \"i16\",\n-        ast::TyI32 => \"i32\",\n-        ast::TyI64 => \"i64\"\n-    };\n-\n-    match val {\n-        // cast to a u64 so we can correctly print INT64_MIN. All integral types\n-        // are parsed as u64, so we wouldn't want to print an extra negative\n-        // sign.\n-        Some(n) => format!(\"{}{}\", n as u64, s),\n-        None => s.to_string()\n-    }\n-}\n-\n-pub fn uint_ty_to_string(t: ast::UintTy, val: Option<u64>) -> String {\n-    let s = match t {\n-        ast::TyUs => \"usize\",\n-        ast::TyU8 => \"u8\",\n-        ast::TyU16 => \"u16\",\n-        ast::TyU32 => \"u32\",\n-        ast::TyU64 => \"u64\"\n-    };\n-\n-    match val {\n-        Some(n) => format!(\"{}{}\", n, s),\n-        None => s.to_string()\n-    }\n-}\n-\n-\n-pub fn float_ty_to_string(t: ast::FloatTy) -> String {\n-    match t {\n-        ast::TyF32 => \"f32\".to_string(),\n-        ast::TyF64 => \"f64\".to_string(),\n-    }\n-}\n-\n impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             TyBool => write!(f, \"bool\"),\n             TyChar => write!(f, \"char\"),\n-            TyInt(t) => write!(f, \"{}\", int_ty_to_string(t, None)),\n-            TyUint(t) => write!(f, \"{}\", uint_ty_to_string(t, None)),\n-            TyFloat(t) => write!(f, \"{}\", float_ty_to_string(t)),\n+            TyInt(t) => write!(f, \"{}\", ast_util::int_ty_to_string(t)),\n+            TyUint(t) => write!(f, \"{}\", ast_util::uint_ty_to_string(t)),\n+            TyFloat(t) => write!(f, \"{}\", ast_util::float_ty_to_string(t)),\n             TyBox(typ) => write!(f, \"Box<{}>\",  typ),\n             TyRawPtr(ref tm) => {\n                 write!(f, \"*{} {}\", match tm.mutbl {"}, {"sha": "11b8a6a5faa142e481e44310a55e3c37c542029d", "filename": "src/librustc_trans/trans/debuginfo/metadata.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmetadata.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -46,7 +46,7 @@ use std::rc::Rc;\n use syntax;\n use syntax::util::interner::Interner;\n use syntax::codemap::Span;\n-use syntax::{ast, codemap};\n+use syntax::{ast, ast_util, codemap};\n use syntax::parse::token;\n \n \n@@ -932,26 +932,17 @@ fn basic_type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n \n     let (name, encoding) = match t.sty {\n         ty::TyTuple(ref elements) if elements.is_empty() =>\n-            (\"()\".to_string(), DW_ATE_unsigned),\n-        ty::TyBool => (\"bool\".to_string(), DW_ATE_boolean),\n-        ty::TyChar => (\"char\".to_string(), DW_ATE_unsigned_char),\n-        ty::TyInt(int_ty) => match int_ty {\n-            ast::TyIs => (\"isize\".to_string(), DW_ATE_signed),\n-            ast::TyI8 => (\"i8\".to_string(), DW_ATE_signed),\n-            ast::TyI16 => (\"i16\".to_string(), DW_ATE_signed),\n-            ast::TyI32 => (\"i32\".to_string(), DW_ATE_signed),\n-            ast::TyI64 => (\"i64\".to_string(), DW_ATE_signed)\n+            (\"()\", DW_ATE_unsigned),\n+        ty::TyBool => (\"bool\", DW_ATE_boolean),\n+        ty::TyChar => (\"char\", DW_ATE_unsigned_char),\n+        ty::TyInt(int_ty) => {\n+            (ast_util::int_ty_to_string(int_ty), DW_ATE_signed)\n         },\n-        ty::TyUint(uint_ty) => match uint_ty {\n-            ast::TyUs => (\"usize\".to_string(), DW_ATE_unsigned),\n-            ast::TyU8 => (\"u8\".to_string(), DW_ATE_unsigned),\n-            ast::TyU16 => (\"u16\".to_string(), DW_ATE_unsigned),\n-            ast::TyU32 => (\"u32\".to_string(), DW_ATE_unsigned),\n-            ast::TyU64 => (\"u64\".to_string(), DW_ATE_unsigned)\n+        ty::TyUint(uint_ty) => {\n+            (ast_util::uint_ty_to_string(uint_ty), DW_ATE_unsigned)\n         },\n-        ty::TyFloat(float_ty) => match float_ty {\n-            ast::TyF32 => (\"f32\".to_string(), DW_ATE_float),\n-            ast::TyF64 => (\"f64\".to_string(), DW_ATE_float),\n+        ty::TyFloat(float_ty) => {\n+            (ast_util::float_ty_to_string(float_ty), DW_ATE_float)\n         },\n         _ => cx.sess().bug(\"debuginfo::basic_type_metadata - t is invalid type\")\n     };"}, {"sha": "6769c010435aa6736301227711dbb4d1f1ab3509", "filename": "src/librustc_trans/trans/debuginfo/type_names.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Ftype_names.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -19,7 +19,7 @@ use middle::subst::{self, Substs};\n use middle::ty::{self, Ty};\n \n use rustc_front::hir;\n-use syntax::ast;\n+use syntax::ast_util;\n \n // Compute the name of the type as it should be stored in debuginfo. Does not do\n // any caching, i.e. calling the function twice with the same type will also do\n@@ -41,21 +41,12 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                           qualified: bool,\n                                           output: &mut String) {\n     match t.sty {\n-        ty::TyBool              => output.push_str(\"bool\"),\n-        ty::TyChar              => output.push_str(\"char\"),\n-        ty::TyStr               => output.push_str(\"str\"),\n-        ty::TyInt(ast::TyIs)    => output.push_str(\"isize\"),\n-        ty::TyInt(ast::TyI8)    => output.push_str(\"i8\"),\n-        ty::TyInt(ast::TyI16)   => output.push_str(\"i16\"),\n-        ty::TyInt(ast::TyI32)   => output.push_str(\"i32\"),\n-        ty::TyInt(ast::TyI64)   => output.push_str(\"i64\"),\n-        ty::TyUint(ast::TyUs)   => output.push_str(\"usize\"),\n-        ty::TyUint(ast::TyU8)   => output.push_str(\"u8\"),\n-        ty::TyUint(ast::TyU16)  => output.push_str(\"u16\"),\n-        ty::TyUint(ast::TyU32)  => output.push_str(\"u32\"),\n-        ty::TyUint(ast::TyU64)  => output.push_str(\"u64\"),\n-        ty::TyFloat(ast::TyF32) => output.push_str(\"f32\"),\n-        ty::TyFloat(ast::TyF64) => output.push_str(\"f64\"),\n+        ty::TyBool => output.push_str(\"bool\"),\n+        ty::TyChar => output.push_str(\"char\"),\n+        ty::TyStr => output.push_str(\"str\"),\n+        ty::TyInt(int_ty) => output.push_str(ast_util::int_ty_to_string(int_ty)),\n+        ty::TyUint(uint_ty) => output.push_str(ast_util::uint_ty_to_string(uint_ty)),\n+        ty::TyFloat(float_ty) => output.push_str(ast_util::float_ty_to_string(float_ty)),\n         ty::TyStruct(def, substs) |\n         ty::TyEnum(def, substs) => {\n             push_item_name(cx, def.did, qualified, output);"}, {"sha": "ab62c8d9421ae5aae0b6a7bda649f9b590b1539d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -1258,7 +1258,7 @@ impl fmt::Debug for IntTy {\n \n impl fmt::Display for IntTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", ast_util::int_ty_to_string(*self, None))\n+        write!(f, \"{}\", ast_util::int_ty_to_string(*self))\n     }\n }\n \n@@ -1303,7 +1303,7 @@ impl fmt::Debug for UintTy {\n \n impl fmt::Display for UintTy {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", ast_util::uint_ty_to_string(*self, None))\n+        write!(f, \"{}\", ast_util::uint_ty_to_string(*self))\n     }\n }\n "}, {"sha": "489c61b83da75b3108a7783ecd9fee89e9912e8b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -111,26 +111,23 @@ pub fn is_path(e: P<Expr>) -> bool {\n     match e.node { ExprPath(..) => true, _ => false }\n }\n \n-/// Get a string representation of a signed int type, with its value.\n-/// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n-pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n-    let s = match t {\n+pub fn int_ty_to_string(t: IntTy) -> &'static str {\n+    match t {\n         TyIs => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n         TyI64 => \"i64\"\n-    };\n-\n-    match val {\n-        // cast to a u64 so we can correctly print INT64_MIN. All integral types\n-        // are parsed as u64, so we wouldn't want to print an extra negative\n-        // sign.\n-        Some(n) => format!(\"{}{}\", n as u64, s),\n-        None => s.to_string()\n     }\n }\n \n+pub fn int_val_to_string(t: IntTy, val: i64) -> String {\n+    // cast to a u64 so we can correctly print INT64_MIN. All integral types\n+    // are parsed as u64, so we wouldn't want to print an extra negative\n+    // sign.\n+    format!(\"{}{}\", val as u64, int_ty_to_string(t))\n+}\n+\n pub fn int_ty_max(t: IntTy) -> u64 {\n     match t {\n         TyI8 => 0x80,\n@@ -140,23 +137,20 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n     }\n }\n \n-/// Get a string representation of an unsigned int type, with its value.\n-/// We want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out.\n-pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n-    let s = match t {\n+pub fn uint_ty_to_string(t: UintTy) -> &'static str {\n+    match t {\n         TyUs => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\",\n         TyU64 => \"u64\"\n-    };\n-\n-    match val {\n-        Some(n) => format!(\"{}{}\", n, s),\n-        None => s.to_string()\n     }\n }\n \n+pub fn uint_val_to_string(t: UintTy, val: u64) -> String {\n+    format!(\"{}{}\", val, uint_ty_to_string(t))\n+}\n+\n pub fn uint_ty_max(t: UintTy) -> u64 {\n     match t {\n         TyU8 => 0xff,\n@@ -166,10 +160,10 @@ pub fn uint_ty_max(t: UintTy) -> u64 {\n     }\n }\n \n-pub fn float_ty_to_string(t: FloatTy) -> String {\n+pub fn float_ty_to_string(t: FloatTy) -> &'static str {\n     match t {\n-        TyF32 => \"f32\".to_string(),\n-        TyF64 => \"f64\".to_string(),\n+        TyF32 => \"f32\",\n+        TyF64 => \"f64\",\n     }\n }\n "}, {"sha": "6de86de9c54eb6dfb57e150b92302c1e5b5d0ce6", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/731ff93a7654ffe4f093341bf1be230d47ce56b3/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=731ff93a7654ffe4f093341bf1be230d47ce56b3", "patch": "@@ -651,15 +651,15 @@ pub trait PrintState<'a> {\n                 match t {\n                     ast::SignedIntLit(st, ast::Plus) => {\n                         word(self.writer(),\n-                             &ast_util::int_ty_to_string(st, Some(i as i64)))\n+                             &ast_util::int_val_to_string(st, i as i64))\n                     }\n                     ast::SignedIntLit(st, ast::Minus) => {\n-                        let istr = ast_util::int_ty_to_string(st, Some(-(i as i64)));\n+                        let istr = ast_util::int_val_to_string(st, -(i as i64));\n                         word(self.writer(),\n                              &format!(\"-{}\", istr))\n                     }\n                     ast::UnsignedIntLit(ut) => {\n-                        word(self.writer(), &ast_util::uint_ty_to_string(ut, Some(i)))\n+                        word(self.writer(), &ast_util::uint_val_to_string(ut, i))\n                     }\n                     ast::UnsuffixedIntLit(ast::Plus) => {\n                         word(self.writer(), &format!(\"{}\", i))"}]}