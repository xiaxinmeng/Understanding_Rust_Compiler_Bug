{"sha": "27adb31fcc2e31ca5528112260a5981fa91d687e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWRiMzFmY2MyZTMxY2E1NTI4MTEyMjYwYTU5ODFmYTkxZDY4N2U=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-01T06:17:53Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-10T12:40:25Z"}, "message": "Combine Session.entry_fn and Session.entry_type and make them thread-safe", "tree": {"sha": "9e2863cd264b6419f74605496a6cf064b35c1e35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e2863cd264b6419f74605496a6cf064b35c1e35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27adb31fcc2e31ca5528112260a5981fa91d687e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27adb31fcc2e31ca5528112260a5981fa91d687e", "html_url": "https://github.com/rust-lang/rust/commit/27adb31fcc2e31ca5528112260a5981fa91d687e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27adb31fcc2e31ca5528112260a5981fa91d687e/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aa7198b4b5116ace4d00fb38650c6e3a67c2776", "html_url": "https://github.com/rust-lang/rust/commit/7aa7198b4b5116ace4d00fb38650c6e3a67c2776"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "a0cd231bb704d6600e39afca83c86d1347d7e53e", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -408,7 +408,7 @@ fn create_and_seed_worklist<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     // Seed entry point\n-    if let Some((id, _)) = *tcx.sess.entry_fn.borrow() {\n+    if let Some((id, _, _)) = *tcx.sess.entry_fn.borrow() {\n         worklist.push(id);\n     }\n "}, {"sha": "ebc796466629c23b5e5a05843311608ea8973989", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -63,12 +63,13 @@ pub fn find_entry_point(session: &Session,\n     });\n     if !any_exe {\n         // No need to find a main function\n+        session.entry_fn.set(None);\n         return\n     }\n \n     // If the user wants no main function at all, then stop here.\n     if attr::contains_name(&hir_map.krate().attrs, \"no_main\") {\n-        session.entry_type.set(Some(config::EntryNone));\n+        session.entry_fn.set(None);\n         return\n     }\n \n@@ -153,17 +154,15 @@ fn find_item(item: &Item, ctxt: &mut EntryContext, at_root: bool) {\n }\n \n fn configure_main(this: &mut EntryContext, crate_name: &str) {\n-    if this.start_fn.is_some() {\n-        *this.session.entry_fn.borrow_mut() = this.start_fn;\n-        this.session.entry_type.set(Some(config::EntryStart));\n-    } else if this.attr_main_fn.is_some() {\n-        *this.session.entry_fn.borrow_mut() = this.attr_main_fn;\n-        this.session.entry_type.set(Some(config::EntryMain));\n-    } else if this.main_fn.is_some() {\n-        *this.session.entry_fn.borrow_mut() = this.main_fn;\n-        this.session.entry_type.set(Some(config::EntryMain));\n+    if let Some((node_id, span)) = this.start_fn {\n+        this.session.entry_fn.set(Some((node_id, span, config::EntryStart)));\n+    } else if let Some((node_id, span)) = this.attr_main_fn {\n+        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n+    } else if let Some((node_id, span)) = this.main_fn {\n+        this.session.entry_fn.set(Some((node_id, span, config::EntryMain)));\n     } else {\n         // No main function\n+        this.session.entry_fn.set(None);\n         let mut err = struct_err!(this.session, E0601,\n             \"`main` function not found in crate `{}`\", crate_name);\n         if !this.non_main_fns.is_empty() {"}, {"sha": "afe4442799b23f3460ea3116b241bcdb3bf9a891", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -614,13 +614,11 @@ impl Options {\n \n // The type of entry function, so\n // users can have their own entry\n-// functions that don't start a\n-// scheduler\n+// functions\n #[derive(Copy, Clone, PartialEq)]\n pub enum EntryFnType {\n     EntryMain,\n     EntryStart,\n-    EntryNone,\n }\n \n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]"}, {"sha": "97b73fac1a42f7ce2a7c550506c2ace314d0e2c9", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -70,8 +70,7 @@ pub struct Session {\n     pub opts: config::Options,\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n-    pub entry_fn: RefCell<Option<(NodeId, Span)>>,\n-    pub entry_type: Cell<Option<config::EntryFnType>>,\n+    pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n     pub plugin_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub derive_registrar_fn: Cell<Option<ast::NodeId>>,\n     pub default_sysroot: Option<PathBuf>,\n@@ -1094,8 +1093,7 @@ pub fn build_session_(\n         opts: sopts,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n-        entry_fn: RefCell::new(None),\n-        entry_type: Cell::new(None),\n+        entry_fn: Once::new(),\n         plugin_registrar_fn: Cell::new(None),\n         derive_registrar_fn: Cell::new(None),\n         default_sysroot,"}, {"sha": "83ef28e4f156cad110a93310e480be7f8be5fecf", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -325,7 +325,7 @@ fn collect_roots<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut roots = Vec::new();\n \n     {\n-        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _)| {\n+        let entry_fn = tcx.sess.entry_fn.borrow().map(|(node_id, _, _)| {\n             tcx.hir.local_def_id(node_id)\n         });\n \n@@ -1038,7 +1038,7 @@ impl<'b, 'a, 'v> RootCollector<'b, 'a, 'v> {\n     /// the return type of `main`. This is not needed when\n     /// the user writes their own `start` manually.\n     fn push_extra_entry_roots(&mut self) {\n-        if self.tcx.sess.entry_type.get() != Some(config::EntryMain) {\n+        if self.tcx.sess.entry_fn.get().map(|e| e.2) != Some(config::EntryMain) {\n             return\n         }\n "}, {"sha": "181751f1777095670bca7d6fe04d28cf380c3f27", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -92,7 +92,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n         match *self.as_mono_item() {\n             MonoItem::Fn(ref instance) => {\n                 let entry_def_id =\n-                    tcx.sess.entry_fn.borrow().map(|(id, _)| tcx.hir.local_def_id(id));\n+                    tcx.sess.entry_fn.borrow().map(|(id, _, _)| tcx.hir.local_def_id(id));\n                 // If this function isn't inlined or otherwise has explicit\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some() ||"}, {"sha": "dd51ffcf3136f2f79c342a91fa313bfe2d92dec5", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -517,7 +517,7 @@ pub fn set_link_section(cx: &CodegenCx,\n /// users main function.\n fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n     let (main_def_id, span) = match *cx.sess().entry_fn.borrow() {\n-        Some((id, span)) => {\n+        Some((id, span, _)) => {\n             (cx.tcx.hir.local_def_id(id), span)\n         }\n         None => return,\n@@ -533,11 +533,11 @@ fn maybe_create_entry_wrapper(cx: &CodegenCx) {\n \n     let main_llfn = callee::get_fn(cx, instance);\n \n-    let et = cx.sess().entry_type.get().unwrap();\n+    let et = cx.sess().entry_fn.get().map(|e| e.2);\n     match et {\n-        config::EntryMain => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n-        config::EntryStart => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n-        config::EntryNone => {}    // Do nothing.\n+        Some(config::EntryMain) => create_entry_fn(cx, span, main_llfn, main_def_id, true),\n+        Some(config::EntryStart) => create_entry_fn(cx, span, main_llfn, main_def_id, false),\n+        None => {}    // Do nothing.\n     }\n \n     fn create_entry_fn<'cx>(cx: &'cx CodegenCx,"}, {"sha": "0ba11a1785baf320e6817b77ce228a3a64740927", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -263,7 +263,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     let local_id = cx.tcx.hir.as_local_node_id(def_id);\n     match *cx.sess().entry_fn.borrow() {\n-        Some((id, _)) => {\n+        Some((id, _, _)) => {\n             if local_id == Some(id) {\n                 flags = flags | DIFlags::FlagMainSubprogram;\n             }"}, {"sha": "a33978eeb62f56fa38800269bf22d19448ec4286", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -52,7 +52,7 @@ pub mod symbol_names_test;\n /// that actually test that compilation succeeds without\n /// reporting an error.\n pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n-    if let Some((id, span)) = *tcx.sess.entry_fn.borrow() {\n+    if let Some((id, span, _)) = *tcx.sess.entry_fn.borrow() {\n         let main_def_id = tcx.hir.local_def_id(id);\n \n         if tcx.has_attr(main_def_id, \"rustc_error\") {"}, {"sha": "fc60e984ea1466af8dfb929b90f6990afe83d905", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -1128,10 +1128,10 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n \n     // Check that the main return type implements the termination trait.\n     if let Some(term_id) = fcx.tcx.lang_items().termination() {\n-        if let Some((id, _)) = *fcx.tcx.sess.entry_fn.borrow() {\n+        if let Some((id, _, entry_type)) = *fcx.tcx.sess.entry_fn.borrow() {\n             if id == fn_id {\n-                match fcx.sess().entry_type.get() {\n-                    Some(config::EntryMain) => {\n+                match entry_type {\n+                    config::EntryMain => {\n                         let substs = fcx.tcx.mk_substs(iter::once(Kind::from(ret_ty)));\n                         let trait_ref = ty::TraitRef::new(term_id, substs);\n                         let return_ty_span = decl.output.span();\n@@ -1142,7 +1142,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             traits::Obligation::new(\n                                 cause, param_env, trait_ref.to_predicate()));\n                     },\n-                    _ => {},\n+                    config::EntryStart => {},\n                 }\n             }\n         }"}, {"sha": "7891cc4471ff96e966a0d4c66c3b772205e7eb81", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27adb31fcc2e31ca5528112260a5981fa91d687e/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=27adb31fcc2e31ca5528112260a5981fa91d687e", "patch": "@@ -289,12 +289,10 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn check_for_entry_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    if let Some((id, sp)) = *tcx.sess.entry_fn.borrow() {\n-        match tcx.sess.entry_type.get() {\n-            Some(config::EntryMain) => check_main_fn_ty(tcx, id, sp),\n-            Some(config::EntryStart) => check_start_fn_ty(tcx, id, sp),\n-            Some(config::EntryNone) => {}\n-            None => bug!(\"entry function without a type\")\n+    if let Some((id, sp, entry_type)) = *tcx.sess.entry_fn.borrow() {\n+        match entry_type {\n+            config::EntryMain => check_main_fn_ty(tcx, id, sp),\n+            config::EntryStart => check_start_fn_ty(tcx, id, sp),\n         }\n     }\n }"}]}