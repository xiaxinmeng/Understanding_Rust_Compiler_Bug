{"sha": "75c239402c8fafc89246a26bd066d6ff647e3794", "node_id": "C_kwDOAAsO6NoAKDc1YzIzOTQwMmM4ZmFmYzg5MjQ2YTI2YmQwNjZkNmZmNjQ3ZTM3OTQ", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-09T02:03:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-09T02:03:53Z"}, "message": "Rollup merge of #103521 - chenyukang:yukang/fix-103451-avoid-hang, r=jackh726,wesleywiser\n\nAvoid possible infinite  loop when next_point reaching the end of file\n\nFixes #103451\nIf we return a span with `lo` = `hi`, `span_to_snippet` will always get `Ok(\"\")`, which may introduce infinite loop if we don't care.\n\nThis PR make `find_width_of_character_at_span` return `width` with 1, so that `span_to_snippet` will get an `Err`.", "tree": {"sha": "ef05e8a161095205043a0e4c45dc46d2a9e8d178", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef05e8a161095205043a0e4c45dc46d2a9e8d178"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75c239402c8fafc89246a26bd066d6ff647e3794", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjawqJCRBK7hj4Ov3rIwAAGKAIAGFzklpZPNaWgKHlsl0owWad\nY7IYvHDphRpiH+SEMYa0G7mXbW5Qp3VcDzQceAI5WPlpL5rcDLMAz344BDjXLMMC\nJa5tItdwFfzIyvdUCp0VTcUrcbwu0duP5e1Hh3geMhigMTrtwnZiVW/4x1VPhV/7\nDoucFUhsla26g7ER4il8yf35/HPxltoIRZRHZ6QWHZwQuLXwtX714EhuoawbzDkV\nFx3QoxisgqaoywXrDisRzNLj5VzF2XojOUHFX/DunqRBQ6Ghj7pb0Yl8u0gUDA01\nGX4a2ajVazyG9IP8IsxHv1FmHx6lSb8htOHIkaCcglcbZb/wH3eu50xnZwtWye8=\n=AKDm\n-----END PGP SIGNATURE-----\n", "payload": "tree ef05e8a161095205043a0e4c45dc46d2a9e8d178\nparent 7521a974d34d24203b538a2d6d0b220c7c011fa6\nparent 6d455296fde6ff0d5154d39513259a60eb73f302\nauthor Manish Goregaokar <manishsmail@gmail.com> 1667959433 -0500\ncommitter GitHub <noreply@github.com> 1667959433 -0500\n\nRollup merge of #103521 - chenyukang:yukang/fix-103451-avoid-hang, r=jackh726,wesleywiser\n\nAvoid possible infinite  loop when next_point reaching the end of file\n\nFixes #103451\nIf we return a span with `lo` = `hi`, `span_to_snippet` will always get `Ok(\"\")`, which may introduce infinite loop if we don't care.\n\nThis PR make `find_width_of_character_at_span` return `width` with 1, so that `span_to_snippet` will get an `Err`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75c239402c8fafc89246a26bd066d6ff647e3794", "html_url": "https://github.com/rust-lang/rust/commit/75c239402c8fafc89246a26bd066d6ff647e3794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75c239402c8fafc89246a26bd066d6ff647e3794/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7521a974d34d24203b538a2d6d0b220c7c011fa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7521a974d34d24203b538a2d6d0b220c7c011fa6", "html_url": "https://github.com/rust-lang/rust/commit/7521a974d34d24203b538a2d6d0b220c7c011fa6"}, {"sha": "6d455296fde6ff0d5154d39513259a60eb73f302", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d455296fde6ff0d5154d39513259a60eb73f302", "html_url": "https://github.com/rust-lang/rust/commit/6d455296fde6ff0d5154d39513259a60eb73f302"}], "stats": {"total": 56, "additions": 46, "deletions": 10}, "files": [{"sha": "3baa2e03cbad722a30bcae70e468cc9b7c10392d", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/75c239402c8fafc89246a26bd066d6ff647e3794/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c239402c8fafc89246a26bd066d6ff647e3794/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=75c239402c8fafc89246a26bd066d6ff647e3794", "patch": "@@ -855,7 +855,8 @@ impl SourceMap {\n     /// Returns a new span representing the next character after the end-point of this span.\n     /// Special cases:\n     /// - if span is a dummy one, returns the same span\n-    /// - if next_point reached the end of source, return span with lo = hi\n+    /// - if next_point reached the end of source, return a span exceeding the end of source,\n+    ///   which means sm.span_to_snippet(next_point) will get `Err`\n     /// - respect multi-byte characters\n     pub fn next_point(&self, sp: Span) -> Span {\n         if sp.is_dummy() {\n@@ -864,9 +865,6 @@ impl SourceMap {\n         let start_of_next_point = sp.hi().0;\n \n         let width = self.find_width_of_character_at_span(sp, true);\n-        if width == 0 {\n-            return Span::new(sp.hi(), sp.hi(), sp.ctxt(), None);\n-        }\n         // If the width is 1, then the next span should only contain the next char besides current ending.\n         // However, in the case of a multibyte character, where the width != 1, the next span should\n         // span multiple bytes to include the whole character.\n@@ -938,7 +936,7 @@ impl SourceMap {\n         // Ensure indexes are also not malformed.\n         if start_index > end_index || end_index > source_len - 1 {\n             debug!(\"find_width_of_character_at_span: source indexes are malformed\");\n-            return 0;\n+            return 1;\n         }\n \n         let src = local_begin.sf.external_src.borrow();"}, {"sha": "3cab59e8dbe6cf6166b90d65ad62889e852782a7", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75c239402c8fafc89246a26bd066d6ff647e3794/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c239402c8fafc89246a26bd066d6ff647e3794/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=75c239402c8fafc89246a26bd066d6ff647e3794", "patch": "@@ -511,16 +511,17 @@ fn test_next_point() {\n     assert_eq!(span.lo().0, 4);\n     assert_eq!(span.hi().0, 5);\n \n-    // A non-empty span at the last byte should advance to create an empty\n-    // span pointing at the end of the file.\n+    // Reaching to the end of file, return a span that will get error with `span_to_snippet`\n     let span = Span::with_root_ctxt(BytePos(4), BytePos(5));\n     let span = sm.next_point(span);\n     assert_eq!(span.lo().0, 5);\n-    assert_eq!(span.hi().0, 5);\n+    assert_eq!(span.hi().0, 6);\n+    assert!(sm.span_to_snippet(span).is_err());\n \n-    // Empty span pointing just past the last byte.\n+    // Reaching to the end of file, return a span that will get error with `span_to_snippet`\n     let span = Span::with_root_ctxt(BytePos(5), BytePos(5));\n     let span = sm.next_point(span);\n     assert_eq!(span.lo().0, 5);\n-    assert_eq!(span.hi().0, 5);\n+    assert_eq!(span.hi().0, 6);\n+    assert!(sm.span_to_snippet(span).is_err());\n }"}, {"sha": "1fdb001488155c85085555d8a81db72ea94a20f7", "filename": "src/test/ui/parser/issue-103451.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/75c239402c8fafc89246a26bd066d6ff647e3794/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75c239402c8fafc89246a26bd066d6ff647e3794/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103451.rs?ref=75c239402c8fafc89246a26bd066d6ff647e3794", "patch": "@@ -0,0 +1,5 @@\n+// error-pattern: this file contains an unclosed delimiter\n+// error-pattern: expected value, found struct `R`\n+struct R { }\n+struct S {\n+    x: [u8; R"}, {"sha": "eb3c92fb43d9b4dc028cb3de6c752e4ca962a66b", "filename": "src/test/ui/parser/issue-103451.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/75c239402c8fafc89246a26bd066d6ff647e3794/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/75c239402c8fafc89246a26bd066d6ff647e3794/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-103451.stderr?ref=75c239402c8fafc89246a26bd066d6ff647e3794", "patch": "@@ -0,0 +1,32 @@\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-103451.rs:5:15\n+   |\n+LL | struct S {\n+   |          - unclosed delimiter\n+LL |     x: [u8; R\n+   |        -      ^\n+   |        |\n+   |        unclosed delimiter\n+\n+error: this file contains an unclosed delimiter\n+  --> $DIR/issue-103451.rs:5:15\n+   |\n+LL | struct S {\n+   |          - unclosed delimiter\n+LL |     x: [u8; R\n+   |        -      ^\n+   |        |\n+   |        unclosed delimiter\n+\n+error[E0423]: expected value, found struct `R`\n+  --> $DIR/issue-103451.rs:5:13\n+   |\n+LL | struct R { }\n+   | ------------ `R` defined here\n+LL | struct S {\n+LL |     x: [u8; R\n+   |             ^ help: use struct literal syntax instead: `R {}`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0423`."}]}