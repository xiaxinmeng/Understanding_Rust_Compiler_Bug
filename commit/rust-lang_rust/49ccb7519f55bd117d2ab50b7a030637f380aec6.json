{"sha": "49ccb7519f55bd117d2ab50b7a030637f380aec6", "node_id": "C_kwDOAAsO6NoAKDQ5Y2NiNzUxOWY1NWJkMTE3ZDJhYjUwYjdhMDMwNjM3ZjM4MGFlYzY", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-06-03T13:19:12Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2022-06-08T10:42:31Z"}, "message": "BTreeSet: avoid intermediate sorting when collecting sorted iterators", "tree": {"sha": "1524bcc6d9ed9dc1f1f5ca2c59c0b60f354aa11e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1524bcc6d9ed9dc1f1f5ca2c59c0b60f354aa11e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49ccb7519f55bd117d2ab50b7a030637f380aec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49ccb7519f55bd117d2ab50b7a030637f380aec6", "html_url": "https://github.com/rust-lang/rust/commit/49ccb7519f55bd117d2ab50b7a030637f380aec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49ccb7519f55bd117d2ab50b7a030637f380aec6/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64a7aa7016de32f4d991c30bfa40d3911e18a213", "url": "https://api.github.com/repos/rust-lang/rust/commits/64a7aa7016de32f4d991c30bfa40d3911e18a213", "html_url": "https://github.com/rust-lang/rust/commit/64a7aa7016de32f4d991c30bfa40d3911e18a213"}], "stats": {"total": 28, "additions": 15, "deletions": 13}, "files": [{"sha": "31655c118072def708c70b2172ab3003b78cd3c0", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 15, "deletions": 13, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/49ccb7519f55bd117d2ab50b7a030637f380aec6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49ccb7519f55bd117d2ab50b7a030637f380aec6/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=49ccb7519f55bd117d2ab50b7a030637f380aec6", "patch": "@@ -1093,7 +1093,13 @@ impl<T: Ord> FromIterator<T> for BTreeSet<T> {\n \n         // use stable sort to preserve the insertion order.\n         inputs.sort();\n-        let iter = inputs.into_iter().map(|k| (k, ()));\n+        BTreeSet::from_sorted_iter(inputs.into_iter())\n+    }\n+}\n+\n+impl<T: Ord> BTreeSet<T> {\n+    fn from_sorted_iter<I: Iterator<Item = T>>(iter: I) -> BTreeSet<T> {\n+        let iter = iter.map(|k| (k, ()));\n         let map = BTreeMap::bulk_build_from_sorted_iter(iter);\n         BTreeSet { map }\n     }\n@@ -1258,11 +1264,10 @@ impl<T: Ord + Clone> Sub<&BTreeSet<T>> for &BTreeSet<T> {\n     /// let b = BTreeSet::from([3, 4, 5]);\n     ///\n     /// let result = &a - &b;\n-    /// let result_vec: Vec<_> = result.into_iter().collect();\n-    /// assert_eq!(result_vec, [1, 2]);\n+    /// assert_eq!(result, BTreeSet::from([1, 2]));\n     /// ```\n     fn sub(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n-        self.difference(rhs).cloned().collect()\n+        BTreeSet::from_sorted_iter(self.difference(rhs).cloned())\n     }\n }\n \n@@ -1281,11 +1286,10 @@ impl<T: Ord + Clone> BitXor<&BTreeSet<T>> for &BTreeSet<T> {\n     /// let b = BTreeSet::from([2, 3, 4]);\n     ///\n     /// let result = &a ^ &b;\n-    /// let result_vec: Vec<_> = result.into_iter().collect();\n-    /// assert_eq!(result_vec, [1, 4]);\n+    /// assert_eq!(result, BTreeSet::from([1, 4]));\n     /// ```\n     fn bitxor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n-        self.symmetric_difference(rhs).cloned().collect()\n+        BTreeSet::from_sorted_iter(self.symmetric_difference(rhs).cloned())\n     }\n }\n \n@@ -1304,11 +1308,10 @@ impl<T: Ord + Clone> BitAnd<&BTreeSet<T>> for &BTreeSet<T> {\n     /// let b = BTreeSet::from([2, 3, 4]);\n     ///\n     /// let result = &a & &b;\n-    /// let result_vec: Vec<_> = result.into_iter().collect();\n-    /// assert_eq!(result_vec, [2, 3]);\n+    /// assert_eq!(result, BTreeSet::from([2, 3]));\n     /// ```\n     fn bitand(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n-        self.intersection(rhs).cloned().collect()\n+        BTreeSet::from_sorted_iter(self.intersection(rhs).cloned())\n     }\n }\n \n@@ -1327,11 +1330,10 @@ impl<T: Ord + Clone> BitOr<&BTreeSet<T>> for &BTreeSet<T> {\n     /// let b = BTreeSet::from([3, 4, 5]);\n     ///\n     /// let result = &a | &b;\n-    /// let result_vec: Vec<_> = result.into_iter().collect();\n-    /// assert_eq!(result_vec, [1, 2, 3, 4, 5]);\n+    /// assert_eq!(result, BTreeSet::from([1, 2, 3, 4, 5]));\n     /// ```\n     fn bitor(self, rhs: &BTreeSet<T>) -> BTreeSet<T> {\n-        self.union(rhs).cloned().collect()\n+        BTreeSet::from_sorted_iter(self.union(rhs).cloned())\n     }\n }\n "}]}