{"sha": "1823dea7df9e125022dfda8126b6713f142f0e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MjNkZWE3ZGY5ZTEyNTAyMmRmZGE4MTI2YjY3MTNmMTQyZjBlNzM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-21T22:18:04Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:05Z"}, "message": "Attach `TokenStream` to `ast::Ty`\n\nA `Ty` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher", "tree": {"sha": "911c48e9e3cedf727eea3b7534c7f272f9579a86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/911c48e9e3cedf727eea3b7534c7f272f9579a86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1823dea7df9e125022dfda8126b6713f142f0e73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5EACgkQtAh+UQ6Y\nsWQu7A/9Frg08Sj0NxwhJme+ChXmgDXxMVCqz7gg5SwGlpI0vL8Z3cx62eiQp0U6\n64eaIDwbNoK2hlu8vayC5nZXMPVkg44wGfwpBunFLp9Kz+WzsDs5Fr8zVVh+6YE7\ntvBS6lPCEaZSNRCMibsyNMWmM/COOAvvmn5zmVF37+QU1o078A7D/0UBFnKB1ceN\nVnU2SDefQ4NMqarXAU+TUT5YASKc0EuzjT2QWHNuAnnUZMuOudNTQTJBuJ37Gxli\nm8+3BPwW9MpDmMYmkWiL8QEyWhUKaJsS4RUw59eFdAqLry/gRAM8yf+9yqnmIYgf\nxdAzIXnRN2AQtR3GaaJh3SUH6lU9yGq4iw5mTZEgoQHN7nwPH7ySzrSwwQsO0m09\n3H64TZDV9Y4sDNEmPAtN67TSD4bTGY4BlgPrdl11Oe4BXKGZlG8vcSuKsrHelHTf\nBO39yW/4l9H7TQGj42743hVWFzrMZKRz8PYQimskanPTQKthYvuhn5a+vCeYqxu1\nRuCHbnxlvV9qa+baG387HbnXUs0R1KPAGQjGwEe7E5XtmRK0CL5i+FyHzcbN/aZv\nV7Ulm4aurYSUlaJkUqHneQafFDqCDNaKmA4goLLJjrp4QbAwqREUQsYk9cgD88L+\nh9CTOBPmxf9T1L7oaxHYyByN04hrnY9dZ48/KPJL1av1a45f4BA=\n=nqsa\n-----END PGP SIGNATURE-----", "payload": "tree 911c48e9e3cedf727eea3b7534c7f272f9579a86\nparent de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c\nauthor Aaron Hill <aa1ronham@gmail.com> 1598048284 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773585 -0400\n\nAttach `TokenStream` to `ast::Ty`\n\nA `Ty` does not have outer attributes, so we only capture tokens\nwhen parsing a `macro_rules!` matcher\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1823dea7df9e125022dfda8126b6713f142f0e73", "html_url": "https://github.com/rust-lang/rust/commit/1823dea7df9e125022dfda8126b6713f142f0e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1823dea7df9e125022dfda8126b6713f142f0e73/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "html_url": "https://github.com/rust-lang/rust/commit/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c"}], "stats": {"total": 57, "additions": 42, "deletions": 15}, "files": [{"sha": "e55a5b6b9a2d31db7880eb5dffd00542112f956e", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -587,7 +587,7 @@ impl Pat {\n             _ => return None,\n         };\n \n-        Some(P(Ty { kind, id: self.id, span: self.span }))\n+        Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))\n     }\n \n     /// Walk top-down and call `it` in each place where a pattern occurs\n@@ -1169,7 +1169,7 @@ impl Expr {\n             _ => return None,\n         };\n \n-        Some(P(Ty { kind, id: self.id, span: self.span }))\n+        Some(P(Ty { kind, id: self.id, span: self.span, tokens: None }))\n     }\n \n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1867,6 +1867,7 @@ pub struct Ty {\n     pub id: NodeId,\n     pub kind: TyKind,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n@@ -2145,7 +2146,7 @@ impl Param {\n     /// Builds a `Param` object from `ExplicitSelf`.\n     pub fn from_self(attrs: AttrVec, eself: ExplicitSelf, eself_ident: Ident) -> Param {\n         let span = eself.span.to(eself_ident.span);\n-        let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span });\n+        let infer_ty = P(Ty { id: DUMMY_NODE_ID, kind: TyKind::ImplicitSelf, span, tokens: None });\n         let param = |mutbl, ty| Param {\n             attrs,\n             pat: P(Pat {\n@@ -2168,6 +2169,7 @@ impl Param {\n                     id: DUMMY_NODE_ID,\n                     kind: TyKind::Rptr(lt, MutTy { ty: infer_ty, mutbl }),\n                     span,\n+                    tokens: None,\n                 }),\n             ),\n         }"}, {"sha": "ce2bc75fdab8595cd55e0cd549faf9315e90cbd7", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -451,7 +451,7 @@ pub fn noop_visit_ty_constraint<T: MutVisitor>(\n }\n \n pub fn noop_visit_ty<T: MutVisitor>(ty: &mut P<Ty>, vis: &mut T) {\n-    let Ty { id, kind, span } = ty.deref_mut();\n+    let Ty { id, kind, span, tokens: _ } = ty.deref_mut();\n     vis.visit_id(id);\n     match kind {\n         TyKind::Infer | TyKind::ImplicitSelf | TyKind::Err | TyKind::Never | TyKind::CVarArgs => {}"}, {"sha": "20f3d55157138fa49ee917189951e26d0f49e045", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -1106,6 +1106,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                                 id: node_id,\n                                 kind: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n                                 span: constraint.span,\n+                                tokens: None,\n                             },\n                             itctx,\n                         );"}, {"sha": "c4d1c6eee31c4b0caf2d71ab6605a52f64ff18b1", "filename": "compiler/rustc_builtin_macros/src/concat_idents.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_idents.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -61,6 +61,7 @@ pub fn expand_concat_idents<'cx>(\n                 id: ast::DUMMY_NODE_ID,\n                 kind: ast::TyKind::Path(None, ast::Path::from_ident(self.ident)),\n                 span: self.ident.span,\n+                tokens: None,\n             }))\n         }\n     }"}, {"sha": "5bdc4760dcc3198b2fb2784feac6429fa529e95f", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -607,6 +607,7 @@ impl DummyResult {\n             id: ast::DUMMY_NODE_ID,\n             kind: if is_error { ast::TyKind::Err } else { ast::TyKind::Tup(Vec::new()) },\n             span: sp,\n+            tokens: None,\n         })\n     }\n }"}, {"sha": "c57719d67163c7ea9ad4415a50a1bafa06ac06ce", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -54,7 +54,7 @@ impl<'a> ExtCtxt<'a> {\n     }\n \n     pub fn ty(&self, span: Span, kind: ast::TyKind) -> P<ast::Ty> {\n-        P(ast::Ty { id: ast::DUMMY_NODE_ID, span, kind })\n+        P(ast::Ty { id: ast::DUMMY_NODE_ID, span, kind, tokens: None })\n     }\n \n     pub fn ty_path(&self, path: ast::Path) -> P<ast::Ty> {"}, {"sha": "f642558d5e07a36ff3f4a36e34e1dadbc8eb39bb", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -37,7 +37,8 @@ pub fn placeholder(\n             tokens: None,\n         })\n     };\n-    let ty = || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span });\n+    let ty =\n+        || P(ast::Ty { id, kind: ast::TyKind::MacCall(mac_placeholder()), span, tokens: None });\n     let pat =\n         || P(ast::Pat { id, kind: ast::PatKind::MacCall(mac_placeholder()), span, tokens: None });\n \n@@ -88,9 +89,12 @@ pub fn placeholder(\n             kind: ast::PatKind::MacCall(mac_placeholder()),\n             tokens: None,\n         })),\n-        AstFragmentKind::Ty => {\n-            AstFragment::Ty(P(ast::Ty { id, span, kind: ast::TyKind::MacCall(mac_placeholder()) }))\n-        }\n+        AstFragmentKind::Ty => AstFragment::Ty(P(ast::Ty {\n+            id,\n+            span,\n+            kind: ast::TyKind::MacCall(mac_placeholder()),\n+            tokens: None,\n+        })),\n         AstFragmentKind::Stmts => AstFragment::Stmts(smallvec![{\n             let mac = P(ast::MacCallStmt {\n                 mac: mac_placeholder(),"}, {"sha": "19b9c9983202595b01b455ede0b62fac202cbf42", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -270,6 +270,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         }\n         Nonterminal::NtBlock(ref block) => block.tokens.clone(),\n         Nonterminal::NtPat(ref pat) => pat.tokens.clone(),\n+        Nonterminal::NtTy(ref ty) => ty.tokens.clone(),\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())\n         }"}, {"sha": "364c859147ac5628b6e263063ee1a05c4e8a2a51", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -28,7 +28,7 @@ pub(super) fn dummy_arg(ident: Ident) -> Param {\n         span: ident.span,\n         tokens: None,\n     });\n-    let ty = Ty { kind: TyKind::Err, span: ident.span, id: ast::DUMMY_NODE_ID };\n+    let ty = Ty { kind: TyKind::Err, span: ident.span, id: ast::DUMMY_NODE_ID, tokens: None };\n     Param {\n         attrs: AttrVec::default(),\n         id: ast::DUMMY_NODE_ID,\n@@ -75,7 +75,12 @@ impl RecoverQPath for Ty {\n         Some(P(self.clone()))\n     }\n     fn recovered(qself: Option<QSelf>, path: ast::Path) -> Self {\n-        Self { span: path.span, kind: TyKind::Path(qself, path), id: ast::DUMMY_NODE_ID }\n+        Self {\n+            span: path.span,\n+            kind: TyKind::Path(qself, path),\n+            id: ast::DUMMY_NODE_ID,\n+            tokens: None,\n+        }\n     }\n }\n "}, {"sha": "1c4bb4532ebb425f91f07768ae759c8c3220d169", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -510,7 +510,12 @@ impl<'a> Parser<'a> {\n         {\n             let span = self.prev_token.span.between(self.token.span);\n             self.struct_span_err(span, \"missing trait in a trait impl\").emit();\n-            P(Ty { kind: TyKind::Path(None, err_path(span)), span, id: DUMMY_NODE_ID })\n+            P(Ty {\n+                kind: TyKind::Path(None, err_path(span)),\n+                span,\n+                id: DUMMY_NODE_ID,\n+                tokens: None,\n+            })\n         } else {\n             self.parse_ty()?\n         };\n@@ -1046,7 +1051,7 @@ impl<'a> Parser<'a> {\n \n         // The user intended that the type be inferred,\n         // so treat this as if the user wrote e.g. `const A: _ = expr;`.\n-        P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID })\n+        P(Ty { kind: TyKind::Infer, span: id.span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n \n     /// Parses an enum declaration."}, {"sha": "d70fa5328500738e39faa0744ac20f938b747ae6", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -141,7 +141,14 @@ impl<'a> Parser<'a> {\n                 token::NtExpr(expr)\n             }\n             NonterminalKind::Literal => token::NtLiteral(self.parse_literal_maybe_minus()?),\n-            NonterminalKind::Ty => token::NtTy(self.parse_ty()?),\n+            NonterminalKind::Ty => {\n+                let (mut ty, tokens) = self.collect_tokens(|this| this.parse_ty())?;\n+                // We have an eaten an NtTy, which could already have tokens\n+                if ty.tokens.is_none() {\n+                    ty.tokens = Some(tokens);\n+                }\n+                token::NtTy(ty)\n+            }\n             // this could be handled like a token, since it is one\n             NonterminalKind::Ident => {\n                 if let Some((ident, is_raw)) = get_macro_ident(&self.token) {"}, {"sha": "259764a317df808aea6dddfde6b50d43ad88f431", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1823dea7df9e125022dfda8126b6713f142f0e73/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=1823dea7df9e125022dfda8126b6713f142f0e73", "patch": "@@ -626,6 +626,6 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_ty(&self, span: Span, kind: TyKind) -> P<Ty> {\n-        P(Ty { kind, span, id: ast::DUMMY_NODE_ID })\n+        P(Ty { kind, span, id: ast::DUMMY_NODE_ID, tokens: None })\n     }\n }"}]}