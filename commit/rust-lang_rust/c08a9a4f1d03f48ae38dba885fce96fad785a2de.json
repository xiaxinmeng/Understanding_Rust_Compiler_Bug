{"sha": "c08a9a4f1d03f48ae38dba885fce96fad785a2de", "node_id": "C_kwDOAAsO6NoAKGMwOGE5YTRmMWQwM2Y0OGFlMzhkYmE4ODVmY2U5NmZhZDc4NWEyZGU", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-02-26T20:44:09Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2022-03-03T17:52:40Z"}, "message": "Make `Ord`, `PartialOrd` opt-out in `newtype_index`\n\nAlso remove `step` impl if `ORD_IMPL = off`", "tree": {"sha": "830156801abe64b6e00ad29ca58d67a51907790c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/830156801abe64b6e00ad29ca58d67a51907790c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c08a9a4f1d03f48ae38dba885fce96fad785a2de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c08a9a4f1d03f48ae38dba885fce96fad785a2de", "html_url": "https://github.com/rust-lang/rust/commit/c08a9a4f1d03f48ae38dba885fce96fad785a2de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c08a9a4f1d03f48ae38dba885fce96fad785a2de/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45660949132222ba7ec0905649b2affd68e0e13c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45660949132222ba7ec0905649b2affd68e0e13c", "html_url": "https://github.com/rust-lang/rust/commit/45660949132222ba7ec0905649b2affd68e0e13c"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "f5968a8a7ea73ce15c9b7f1ffb0c1a42c0b98019", "filename": "compiler/rustc_macros/src/newtype.rs", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c08a9a4f1d03f48ae38dba885fce96fad785a2de/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c08a9a4f1d03f48ae38dba885fce96fad785a2de/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fnewtype.rs?ref=c08a9a4f1d03f48ae38dba885fce96fad785a2de", "patch": "@@ -10,6 +10,7 @@ mod kw {\n     syn::custom_keyword!(MAX);\n     syn::custom_keyword!(ENCODABLE);\n     syn::custom_keyword!(custom);\n+    syn::custom_keyword!(ORD_IMPL);\n }\n \n #[derive(Debug)]\n@@ -42,6 +43,7 @@ impl Parse for Newtype {\n         let mut max = None;\n         let mut consts = Vec::new();\n         let mut encodable = true;\n+        let mut ord = true;\n \n         // Parse an optional trailing comma\n         let try_comma = || -> Result<()> {\n@@ -99,13 +101,20 @@ impl Parse for Newtype {\n                     encodable = false;\n                     continue;\n                 }\n+                if body.lookahead1().peek(kw::ORD_IMPL) {\n+                    body.parse::<kw::ORD_IMPL>()?;\n+                    body.parse::<Token![=]>()?;\n+                    body.parse::<kw::custom>()?;\n+                    ord = false;\n+                    continue;\n+                }\n \n                 // We've parsed everything that the user provided, so we're done\n                 if body.is_empty() {\n                     break;\n                 }\n \n-                // Otherwise, we are parsng a user-defined constant\n+                // Otherwise, we are parsing a user-defined constant\n                 let const_attrs = body.call(Attribute::parse_outer)?;\n                 body.parse::<Token![const]>()?;\n                 let const_name: Ident = body.parse()?;\n@@ -137,6 +146,40 @@ impl Parse for Newtype {\n             quote! {}\n         };\n \n+        if ord {\n+            derive_paths.push(parse_quote!(Ord));\n+            derive_paths.push(parse_quote!(PartialOrd));\n+        }\n+\n+        let step = if ord {\n+            quote! {\n+                impl ::std::iter::Step for #name {\n+                    #[inline]\n+                    fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n+                        <usize as ::std::iter::Step>::steps_between(\n+                            &Self::index(*start),\n+                            &Self::index(*end),\n+                        )\n+                    }\n+\n+                    #[inline]\n+                    fn forward_checked(start: Self, u: usize) -> Option<Self> {\n+                        Self::index(start).checked_add(u).map(Self::from_usize)\n+                    }\n+\n+                    #[inline]\n+                    fn backward_checked(start: Self, u: usize) -> Option<Self> {\n+                        Self::index(start).checked_sub(u).map(Self::from_usize)\n+                    }\n+                }\n+\n+                // Safety: The implementation of `Step` upholds all invariants.\n+                unsafe impl ::std::iter::TrustedStep for #name {}\n+            }\n+        } else {\n+            quote! {}\n+        };\n+\n         let debug_impl = match debug_format {\n             DebugFormat::Custom => quote! {},\n             DebugFormat::Format(format) => {\n@@ -152,7 +195,7 @@ impl Parse for Newtype {\n \n         Ok(Self(quote! {\n             #(#attrs)*\n-            #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, #(#derive_paths),*)]\n+            #[derive(Clone, Copy, PartialEq, Eq, Hash, #(#derive_paths),*)]\n             #[rustc_layout_scalar_valid_range_end(#max)]\n             #vis struct #name {\n                 private: u32,\n@@ -247,28 +290,7 @@ impl Parse for Newtype {\n                 }\n             }\n \n-            impl ::std::iter::Step for #name {\n-                #[inline]\n-                fn steps_between(start: &Self, end: &Self) -> Option<usize> {\n-                    <usize as ::std::iter::Step>::steps_between(\n-                        &Self::index(*start),\n-                        &Self::index(*end),\n-                    )\n-                }\n-\n-                #[inline]\n-                fn forward_checked(start: Self, u: usize) -> Option<Self> {\n-                    Self::index(start).checked_add(u).map(Self::from_usize)\n-                }\n-\n-                #[inline]\n-                fn backward_checked(start: Self, u: usize) -> Option<Self> {\n-                    Self::index(start).checked_sub(u).map(Self::from_usize)\n-                }\n-            }\n-\n-            // Safety: The implementation of `Step` upholds all invariants.\n-            unsafe impl ::std::iter::TrustedStep for #name {}\n+            #step\n \n             impl From<#name> for u32 {\n                 #[inline]"}]}