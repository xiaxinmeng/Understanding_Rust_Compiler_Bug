{"sha": "30891b84ff3886e076c2fa0a8886ad631196db9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwODkxYjg0ZmYzODg2ZTA3NmMyZmEwYTg4ODZhZDYzMTE5NmRiOWE=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-01-24T21:12:37Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-01-24T21:12:37Z"}, "message": "libtest: allow multiple filters", "tree": {"sha": "5a02f055d375246bf405d5c5a824ea8ed7f3aff2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a02f055d375246bf405d5c5a824ea8ed7f3aff2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30891b84ff3886e076c2fa0a8886ad631196db9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30891b84ff3886e076c2fa0a8886ad631196db9a", "html_url": "https://github.com/rust-lang/rust/commit/30891b84ff3886e076c2fa0a8886ad631196db9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30891b84ff3886e076c2fa0a8886ad631196db9a/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a9477fada5baf69d693e717d6df902e411a73d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a9477fada5baf69d693e717d6df902e411a73d6", "html_url": "https://github.com/rust-lang/rust/commit/9a9477fada5baf69d693e717d6df902e411a73d6"}], "stats": {"total": 90, "additions": 63, "deletions": 27}, "files": [{"sha": "5ea0afb0ef30eac7f9793f35fd61bc05407c05c8", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -10,7 +10,7 @@ use super::time::TestTimeOptions;\n #[derive(Debug)]\n pub struct TestOpts {\n     pub list: bool,\n-    pub filter: Option<String>,\n+    pub filters: Vec<String>,\n     pub filter_exact: bool,\n     pub force_run_in_process: bool,\n     pub exclude_should_panic: bool,\n@@ -148,12 +148,13 @@ fn optgroups() -> getopts::Options {\n }\n \n fn usage(binary: &str, options: &getopts::Options) {\n-    let message = format!(\"Usage: {} [OPTIONS] [FILTER]\", binary);\n+    let message = format!(\"Usage: {} [OPTIONS] [FILTERS...]\", binary);\n     println!(\n         r#\"{usage}\n \n The FILTER string is tested against the name of all tests, and only those\n-tests whose names contain the filter are run.\n+tests whose names contain the filter are run. Multiple filter strings may\n+be passed, which will run all tests matching any of the filters.\n \n By default, all tests are run in parallel. This can be altered with the\n --test-threads flag or the RUST_TEST_THREADS environment variable when running\n@@ -243,7 +244,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let logfile = get_log_file(&matches)?;\n     let run_ignored = get_run_ignored(&matches, include_ignored)?;\n-    let filter = get_filter(&matches)?;\n+    let filters = matches.free.clone();\n     let nocapture = get_nocapture(&matches)?;\n     let test_threads = get_test_threads(&matches)?;\n     let color = get_color_config(&matches)?;\n@@ -253,7 +254,7 @@ fn parse_opts_impl(matches: getopts::Matches) -> OptRes {\n \n     let test_opts = TestOpts {\n         list,\n-        filter,\n+        filters,\n         filter_exact: exact,\n         force_run_in_process,\n         exclude_should_panic,\n@@ -397,12 +398,6 @@ fn get_run_ignored(matches: &getopts::Matches, include_ignored: bool) -> OptPart\n     Ok(run_ignored)\n }\n \n-fn get_filter(matches: &getopts::Matches) -> OptPartRes<Option<String>> {\n-    let filter = if !matches.free.is_empty() { Some(matches.free[0].clone()) } else { None };\n-\n-    Ok(filter)\n-}\n-\n fn get_allow_unstable(matches: &getopts::Matches) -> OptPartRes<bool> {\n     let mut allow_unstable = false;\n "}, {"sha": "3c4bd3074179f60fbfead6064ee9d2c951a15a93", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -359,8 +359,8 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     };\n \n     // Remove tests that don't match the test filter\n-    if let Some(ref filter) = opts.filter {\n-        filtered.retain(|test| matches_filter(test, filter));\n+    if !opts.filters.is_empty() {\n+        filtered.retain(|test| opts.filters.iter().any(|filter| matches_filter(test, filter)));\n     }\n \n     // Skip tests that match any of the skip filters"}, {"sha": "a2a36a330d4285280e94523b858dc765196af9cb", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -35,7 +35,7 @@ impl TestOpts {\n     fn new() -> TestOpts {\n         TestOpts {\n             list: false,\n-            filter: None,\n+            filters: vec![],\n             filter_exact: false,\n             force_run_in_process: false,\n             exclude_should_panic: false,\n@@ -469,43 +469,60 @@ pub fn exact_filter_match() {\n     }\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n-    let substr = filter_tests(&TestOpts { filter: Some(\"bas\".into()), ..TestOpts::new() }, tests());\n+    let substr =\n+        filter_tests(&TestOpts { filters: vec![\"bas\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 4);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n     let substr =\n-        filter_tests(&TestOpts { filter: Some(\"base::test\".into()), ..TestOpts::new() }, tests());\n+        filter_tests(&TestOpts { filters: vec![\"base::test\".into()], ..TestOpts::new() }, tests());\n     assert_eq!(substr.len(), 3);\n \n+    let substr = filter_tests(\n+        &TestOpts { filters: vec![\"test1\".into(), \"test2\".into()], ..TestOpts::new() },\n+        tests(),\n+    );\n+    assert_eq!(substr.len(), 2);\n+\n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"bas\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"bas\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 0);\n \n     let exact = filter_tests(\n-        &TestOpts { filter: Some(\"base::test\".into()), filter_exact: true, ..TestOpts::new() },\n+        &TestOpts { filters: vec![\"base::test\".into()], filter_exact: true, ..TestOpts::new() },\n         tests(),\n     );\n     assert_eq!(exact.len(), 1);\n+\n+    let exact = filter_tests(\n+        &TestOpts {\n+            filters: vec![\"base\".into(), \"base::test\".into()],\n+            filter_exact: true,\n+            ..TestOpts::new()\n+        },\n+        tests(),\n+    );\n+    assert_eq!(exact.len(), 2);\n }\n \n #[test]"}, {"sha": "04dd83b7fd0f79a4c43ac9272aa92f3b01fc0e5a", "filename": "src/test/ui/test-attrs/test-filter-multiple.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+// compile-flags: --test\n+// run-flags: --test-threads=1 test1 test2\n+// check-run-results\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// ignore-emscripten no threads support\n+\n+#[test]\n+fn test1() {}\n+\n+#[test]\n+fn test2() {}\n+\n+#[test]\n+fn test3() {\n+    panic!(\"this should not run\");\n+}"}, {"sha": "1aa684ed5073a53dcacc2d54a600e6327b216da4", "filename": "src/test/ui/test-attrs/test-filter-multiple.run.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-attrs%2Ftest-filter-multiple.run.stdout?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test test1 ... ok\n+test test2 ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out; finished in $TIME\n+"}, {"sha": "922f275542b84bd5745e35f85e459723c4f9cd13", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -240,8 +240,8 @@ pub struct Config {\n     /// Run ignored tests\n     pub run_ignored: bool,\n \n-    /// Only run tests that match this filter\n-    pub filter: Option<String>,\n+    /// Only run tests that match these filters\n+    pub filters: Vec<String>,\n \n     /// Exactly match the filter, rather than a substring\n     pub filter_exact: bool,"}, {"sha": "3fde24e8a7fbaf0adbb88f552041ef2b81685311", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30891b84ff3886e076c2fa0a8886ad631196db9a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=30891b84ff3886e076c2fa0a8886ad631196db9a", "patch": "@@ -221,7 +221,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         suite: matches.opt_str(\"suite\").unwrap(),\n         debugger: None,\n         run_ignored,\n-        filter: matches.free.first().cloned(),\n+        filters: matches.free.clone(),\n         filter_exact: matches.opt_present(\"exact\"),\n         force_pass_mode: matches.opt_str(\"pass\").map(|mode| {\n             mode.parse::<PassMode>()\n@@ -280,7 +280,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"stage_id: {}\", config.stage_id));\n     logv(c, format!(\"mode: {}\", config.mode));\n     logv(c, format!(\"run_ignored: {}\", config.run_ignored));\n-    logv(c, format!(\"filter: {}\", opt_str(&config.filter)));\n+    logv(c, format!(\"filters: {:?}\", config.filters));\n     logv(c, format!(\"filter_exact: {}\", config.filter_exact));\n     logv(\n         c,\n@@ -465,7 +465,7 @@ fn configure_lldb(config: &Config) -> Option<Config> {\n pub fn test_opts(config: &Config) -> test::TestOpts {\n     test::TestOpts {\n         exclude_should_panic: false,\n-        filter: config.filter.clone(),\n+        filters: config.filters.clone(),\n         filter_exact: config.filter_exact,\n         run_ignored: if config.run_ignored { test::RunIgnored::Yes } else { test::RunIgnored::No },\n         format: if config.quiet { test::OutputFormat::Terse } else { test::OutputFormat::Pretty },"}]}