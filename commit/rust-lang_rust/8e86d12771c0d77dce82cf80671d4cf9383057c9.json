{"sha": "8e86d12771c0d77dce82cf80671d4cf9383057c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlODZkMTI3NzFjMGQ3N2RjZTgyY2Y4MDY3MWQ0Y2Y5MzgzMDU3Yzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:15:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:15:19Z"}, "message": "Cleanup", "tree": {"sha": "05a3c3a472c73f1bb9e4f27635870c71e2c9fe0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05a3c3a472c73f1bb9e4f27635870c71e2c9fe0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e86d12771c0d77dce82cf80671d4cf9383057c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e86d12771c0d77dce82cf80671d4cf9383057c9", "html_url": "https://github.com/rust-lang/rust/commit/8e86d12771c0d77dce82cf80671d4cf9383057c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e86d12771c0d77dce82cf80671d4cf9383057c9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06e37b273ea6f50d4d8cceccd85e613a5840b4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/06e37b273ea6f50d4d8cceccd85e613a5840b4c0", "html_url": "https://github.com/rust-lang/rust/commit/06e37b273ea6f50d4d8cceccd85e613a5840b4c0"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "3dc8dc6917a63dd07eebc05d735ce46ceff8104b", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 11, "deletions": 42, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8e86d12771c0d77dce82cf80671d4cf9383057c9/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e86d12771c0d77dce82cf80671d4cf9383057c9/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=8e86d12771c0d77dce82cf80671d4cf9383057c9", "patch": "@@ -1,47 +1,16 @@\n //! FIXME: write short doc here\n \n-use std::{\n-    path::{Path, PathBuf},\n-    str::FromStr,\n-    sync::Arc,\n-    time::Instant,\n-};\n+use std::{path::Path, sync::Arc, time::Instant};\n \n use ra_db::{\n     salsa::{Database, Durability},\n     FileId, SourceDatabaseExt,\n };\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n-use crate::{load_cargo::load_cargo, Result, Verbosity};\n-\n-pub(crate) struct Position {\n-    path: PathBuf,\n-    line: u32,\n-    column: u32,\n-}\n-\n-impl FromStr for Position {\n-    type Err = Box<dyn std::error::Error + Send + Sync>;\n-    fn from_str(s: &str) -> Result<Self> {\n-        let (path_line, column) = rsplit_at_char(s, ':')?;\n-        let (path, line) = rsplit_at_char(path_line, ':')?;\n-        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n-    }\n-}\n-\n-fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n-    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n-    Ok((&s[..idx], &s[idx + 1..]))\n-}\n-\n-pub(crate) enum Op {\n-    Highlight { path: PathBuf },\n-    Complete(Position),\n-    GotoDef(Position),\n-}\n+use crate::{load_cargo::load_cargo, BenchWhat, Result, Verbosity};\n \n-pub(crate) fn run(verbosity: Verbosity, path: &Path, op: Op) -> Result<()> {\n+pub(crate) fn run(verbosity: Verbosity, path: &Path, what: BenchWhat) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n@@ -51,9 +20,9 @@ pub(crate) fn run(verbosity: Verbosity, path: &Path, op: Op) -> Result<()> {\n     eprintln!(\"{:?}\\n\", start.elapsed());\n \n     let file_id = {\n-        let path = match &op {\n-            Op::Highlight { path } => path,\n-            Op::Complete(pos) | Op::GotoDef(pos) => &pos.path,\n+        let path = match &what {\n+            BenchWhat::Highlight { path } => path,\n+            BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => &pos.path,\n         };\n         let path = std::env::current_dir()?.join(path).canonicalize()?;\n         roots\n@@ -73,8 +42,8 @@ pub(crate) fn run(verbosity: Verbosity, path: &Path, op: Op) -> Result<()> {\n             .ok_or_else(|| format!(\"Can't find {:?}\", path))?\n     };\n \n-    match &op {\n-        Op::Highlight { .. } => {\n+    match &what {\n+        BenchWhat::Highlight { .. } => {\n             let res = do_work(&mut host, file_id, |analysis| {\n                 analysis.diagnostics(file_id).unwrap();\n                 analysis.highlight_as_html(file_id, false).unwrap()\n@@ -83,9 +52,9 @@ pub(crate) fn run(verbosity: Verbosity, path: &Path, op: Op) -> Result<()> {\n                 println!(\"\\n{}\", res);\n             }\n         }\n-        Op::Complete(pos) | Op::GotoDef(pos) => {\n-            let is_completion = match op {\n-                Op::Complete(..) => true,\n+        BenchWhat::Complete(pos) | BenchWhat::GotoDef(pos) => {\n+            let is_completion = match what {\n+                BenchWhat::Complete(..) => true,\n                 _ => false,\n             };\n "}, {"sha": "66258c860d6bdef1aaf8a627476f789c9bea8500", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 57, "deletions": 31, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8e86d12771c0d77dce82cf80671d4cf9383057c9/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e86d12771c0d77dce82cf80671d4cf9383057c9/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=8e86d12771c0d77dce82cf80671d4cf9383057c9", "patch": "@@ -5,7 +5,7 @@ mod analysis_stats;\n mod analysis_bench;\n mod progress_report;\n \n-use std::{error::Error, fmt::Write, io::Read, path::PathBuf};\n+use std::{error::Error, fmt::Write, io::Read, path::PathBuf, str::FromStr};\n \n use pico_args::Arguments;\n use ra_ide::{file_structure, Analysis};\n@@ -51,14 +51,37 @@ fn main() -> Result<()> {\n                 randomize,\n             )?;\n         }\n-        Command::Bench { verbosity, path, op } => {\n-            analysis_bench::run(verbosity, path.as_ref(), op)?;\n+        Command::Bench { verbosity, path, what } => {\n+            analysis_bench::run(verbosity, path.as_ref(), what)?;\n         }\n     }\n \n     Ok(())\n }\n \n+enum Command {\n+    Parse {\n+        no_dump: bool,\n+    },\n+    Symbols,\n+    Highlight {\n+        rainbow: bool,\n+    },\n+    Stats {\n+        verbosity: Verbosity,\n+        randomize: bool,\n+        memory_usage: bool,\n+        only: Option<String>,\n+        with_deps: bool,\n+        path: PathBuf,\n+    },\n+    Bench {\n+        verbosity: Verbosity,\n+        path: PathBuf,\n+        what: BenchWhat,\n+    },\n+}\n+\n #[derive(Clone, Copy)]\n pub enum Verbosity {\n     Spammy,\n@@ -82,27 +105,30 @@ impl Verbosity {\n     }\n }\n \n-enum Command {\n-    Parse {\n-        no_dump: bool,\n-    },\n-    Symbols,\n-    Highlight {\n-        rainbow: bool,\n-    },\n-    Stats {\n-        verbosity: Verbosity,\n-        randomize: bool,\n-        memory_usage: bool,\n-        only: Option<String>,\n-        with_deps: bool,\n-        path: PathBuf,\n-    },\n-    Bench {\n-        verbosity: Verbosity,\n-        path: PathBuf,\n-        op: analysis_bench::Op,\n-    },\n+enum BenchWhat {\n+    Highlight { path: PathBuf },\n+    Complete(Position),\n+    GotoDef(Position),\n+}\n+\n+pub(crate) struct Position {\n+    path: PathBuf,\n+    line: u32,\n+    column: u32,\n+}\n+\n+impl FromStr for Position {\n+    type Err = Box<dyn std::error::Error + Send + Sync>;\n+    fn from_str(s: &str) -> Result<Self> {\n+        let (path_line, column) = rsplit_at_char(s, ':')?;\n+        let (path, line) = rsplit_at_char(path_line, ':')?;\n+        Ok(Position { path: path.into(), line: line.parse()?, column: column.parse()? })\n+    }\n+}\n+\n+fn rsplit_at_char(s: &str, c: char) -> Result<(&str, &str)> {\n+    let idx = s.rfind(':').ok_or_else(|| format!(\"no `{}` in {}\", c, s))?;\n+    Ok((&s[..idx], &s[idx + 1..]))\n }\n \n struct HelpPrinted;\n@@ -248,17 +274,17 @@ ARGS:\n \n                 let path: PathBuf = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n                 let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n-                let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n-                let goto_def_path: Option<String> = matches.opt_value_from_str(\"--goto-def\")?;\n-                let op = match (highlight_path, complete_path, goto_def_path) {\n-                    (Some(path), None, None) => analysis_bench::Op::Highlight { path: path.into() },\n-                    (None, Some(position), None) => analysis_bench::Op::Complete(position.parse()?),\n-                    (None, None, Some(position)) => analysis_bench::Op::GotoDef(position.parse()?),\n+                let complete_path: Option<Position> = matches.opt_value_from_str(\"--complete\")?;\n+                let goto_def_path: Option<Position> = matches.opt_value_from_str(\"--goto-def\")?;\n+                let what = match (highlight_path, complete_path, goto_def_path) {\n+                    (Some(path), None, None) => BenchWhat::Highlight { path: path.into() },\n+                    (None, Some(position), None) => BenchWhat::Complete(position),\n+                    (None, None, Some(position)) => BenchWhat::GotoDef(position),\n                     _ => panic!(\n                         \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n                     ),\n                 };\n-                Command::Bench { verbosity, path, op }\n+                Command::Bench { verbosity, path, what }\n             }\n             _ => {\n                 eprintln!("}]}