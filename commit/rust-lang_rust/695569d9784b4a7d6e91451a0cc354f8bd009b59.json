{"sha": "695569d9784b4a7d6e91451a0cc354f8bd009b59", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NTU2OWQ5Nzg0YjRhN2Q2ZTkxNDUxYTBjYzM1NGY4YmQwMDliNTk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T17:32:22Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2021-05-23T19:46:20Z"}, "message": "Draft detached files retrieval", "tree": {"sha": "3ab3f676d8fe1d04cf874f02ac256538b48df804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab3f676d8fe1d04cf874f02ac256538b48df804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/695569d9784b4a7d6e91451a0cc354f8bd009b59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/695569d9784b4a7d6e91451a0cc354f8bd009b59", "html_url": "https://github.com/rust-lang/rust/commit/695569d9784b4a7d6e91451a0cc354f8bd009b59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/695569d9784b4a7d6e91451a0cc354f8bd009b59/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3383b06614e5f302a3afa2fc2c177303b5b6ca8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3383b06614e5f302a3afa2fc2c177303b5b6ca8", "html_url": "https://github.com/rust-lang/rust/commit/b3383b06614e5f302a3afa2fc2c177303b5b6ca8"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "c2fde00d5216cae18a63000678bf517fee039027", "filename": "crates/project_model/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Fproject_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Fproject_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Flib.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -50,6 +50,7 @@ pub use proc_macro_api::ProcMacroClient;\n pub enum ProjectManifest {\n     ProjectJson(AbsPathBuf),\n     CargoToml(AbsPathBuf),\n+    DetachedFile(AbsPathBuf),\n }\n \n impl ProjectManifest {"}, {"sha": "5fd6487106810108aa1b357189f0446e35cd12d6", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -148,6 +148,9 @@ impl ProjectWorkspace {\n                 let rustc_cfg = rustc_cfg::get(Some(&cargo_toml), config.target.as_deref());\n                 ProjectWorkspace::Cargo { cargo, sysroot, rustc, rustc_cfg }\n             }\n+            ProjectManifest::DetachedFile(_) => {\n+                todo!(\"TODO kb\")\n+            }\n         };\n \n         Ok(res)"}, {"sha": "7ee35d52b3c3f1f25a4ceebf8710b938898c2ce4", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -214,7 +214,7 @@ fn run_server() -> Result<()> {\n \n             let discovered = ProjectManifest::discover_all(&workspace_roots);\n             log::info!(\"discovered projects: {:?}\", discovered);\n-            if discovered.is_empty() {\n+            if discovered.is_empty() && config.detached_files().is_empty() {\n                 log::error!(\"failed to find any projects in {:?}\", workspace_roots);\n             }\n "}, {"sha": "570534c9a008dbc4b1c363e11c4ada32d63149ae", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -236,6 +236,7 @@ impl Default for ConfigData {\n pub struct Config {\n     caps: lsp_types::ClientCapabilities,\n     data: ConfigData,\n+    detached_files: Vec<ProjectManifest>,\n     pub discovered_projects: Option<Vec<ProjectManifest>>,\n     pub root_path: AbsPathBuf,\n }\n@@ -328,13 +329,24 @@ pub struct WorkspaceSymbolConfig {\n \n impl Config {\n     pub fn new(root_path: AbsPathBuf, caps: ClientCapabilities) -> Self {\n-        Config { caps, data: ConfigData::default(), discovered_projects: None, root_path }\n+        Config {\n+            caps,\n+            data: ConfigData::default(),\n+            detached_files: Vec::new(),\n+            discovered_projects: None,\n+            root_path,\n+        }\n     }\n-    pub fn update(&mut self, json: serde_json::Value) {\n+    pub fn update(&mut self, mut json: serde_json::Value) {\n         log::info!(\"updating config from JSON: {:#}\", json);\n         if json.is_null() || json.as_object().map_or(false, |it| it.is_empty()) {\n             return;\n         }\n+        self.detached_files = get_field::<Vec<PathBuf>>(&mut json, \"detachedFiles\", None, \"[]\")\n+            .into_iter()\n+            .map(AbsPathBuf::assert)\n+            .map(ProjectManifest::DetachedFile)\n+            .collect();\n         self.data = ConfigData::from_json(json);\n     }\n \n@@ -387,6 +399,10 @@ impl Config {\n         }\n     }\n \n+    pub fn detached_files(&self) -> &[ProjectManifest] {\n+        &self.detached_files\n+    }\n+\n     pub fn did_save_text_document_dynamic_registration(&self) -> bool {\n         let caps =\n             try_or!(self.caps.text_document.as_ref()?.synchronization.clone()?, Default::default());"}, {"sha": "cb002f7009d67f207395f2fb6ef71a353dc87870", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -103,6 +103,7 @@ impl fmt::Debug for Event {\n impl GlobalState {\n     fn run(mut self, inbox: Receiver<lsp_server::Message>) -> Result<()> {\n         if self.config.linked_projects().is_empty()\n+            && self.config.detached_files().is_empty()\n             && self.config.notifications().cargo_toml_not_found\n         {\n             self.show_message("}, {"sha": "cfa95275d1f38656d8fb62fbd65318a8c6562882", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/695569d9784b4a7d6e91451a0cc354f8bd009b59/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=695569d9784b4a7d6e91451a0cc354f8bd009b59", "patch": "@@ -146,6 +146,7 @@ impl GlobalState {\n         log::info!(\"will fetch workspaces\");\n \n         self.task_pool.handle.spawn_with_sender({\n+            // TODO kb reload workspace here?\n             let linked_projects = self.config.linked_projects();\n             let cargo_config = self.config.cargo();\n "}]}