{"sha": "235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzNWU3YzFiNDMxMmE5YzU4MTRmOGIxNjRjNGI4ZjNkNTYwYjU3Nzc=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-14T17:07:05Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-15T13:47:32Z"}, "message": "Remove LoopIdResult\n\nIt's redundant as Result already implements Encodable\nas well as Decodable.", "tree": {"sha": "3d1f5b765826874b661909683823cddd6c089ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d1f5b765826874b661909683823cddd6c089ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "html_url": "https://github.com/rust-lang/rust/commit/235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "html_url": "https://github.com/rust-lang/rust/commit/3ef481a520a06d7c580f9ff67f5d45ba70c96d50"}], "stats": {"total": 83, "additions": 19, "deletions": 64}, "files": [{"sha": "d8cf147e3ee4b0b8530e9729e01c8be1a196ed9b", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -582,7 +582,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                   scope_cf_kind: ScopeCfKind) -> (region::Scope, CFGIndex) {\n \n         match destination.target_id {\n-            hir::LoopIdResult::Ok(loop_id) => {\n+            Ok(loop_id) => {\n                 for b in &self.breakable_block_scopes {\n                     if b.block_expr_id == self.tcx.hir.node_to_hir_id(loop_id).local_id {\n                         let scope_id = self.tcx.hir.node_to_hir_id(loop_id).local_id;\n@@ -603,7 +603,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 }\n                 span_bug!(expr.span, \"no scope for id {}\", loop_id);\n             }\n-            hir::LoopIdResult::Err(err) => span_bug!(expr.span, \"scope error: {}\",  err),\n+            Err(err) => span_bug!(expr.span, \"scope error: {}\",  err),\n         }\n     }\n }"}, {"sha": "1fb496cca629ed0210d3f9f851a2e9a3cebeb855", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -1039,9 +1039,8 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n                 match destination.target_id {\n-                    LoopIdResult::Ok(node_id) =>\n-                        visitor.visit_def_mention(Def::Label(node_id)),\n-                    LoopIdResult::Err(_) => {},\n+                    Ok(node_id) => visitor.visit_def_mention(Def::Label(node_id)),\n+                    Err(_) => {},\n                 };\n             }\n             walk_list!(visitor, visit_expr, opt_expr);\n@@ -1050,9 +1049,8 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n                 match destination.target_id {\n-                    LoopIdResult::Ok(node_id) =>\n-                        visitor.visit_def_mention(Def::Label(node_id)),\n-                    LoopIdResult::Err(_) => {},\n+                    Ok(node_id) => visitor.visit_def_mention(Def::Label(node_id)),\n+                    Err(_) => {},\n                 };\n             }\n         }"}, {"sha": "d5d3746bc184f5fe9c447ace3f765958d7532453", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -929,9 +929,9 @@ impl<'a> LoweringContext<'a> {\n         match destination {\n             Some((id, label)) => {\n                 let target_id = if let Def::Label(loop_id) = self.expect_full_def(id) {\n-                    hir::LoopIdResult::Ok(self.lower_node_id(loop_id).node_id)\n+                    Ok(self.lower_node_id(loop_id).node_id)\n                 } else {\n-                    hir::LoopIdResult::Err(hir::LoopIdError::UnresolvedLabel)\n+                    Err(hir::LoopIdError::UnresolvedLabel)\n                 };\n                 hir::Destination {\n                     label: self.lower_label(Some(label)),\n@@ -3598,7 +3598,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::ExprBreak(\n                                 hir::Destination {\n                                     label: None,\n-                                    target_id: hir::LoopIdResult::Ok(catch_node),\n+                                    target_id: Ok(catch_node),\n                                 },\n                                 Some(from_err_expr),\n                             ),"}, {"sha": "3f49e0bfd19837b018ce65970fd9e14de1a59bb2", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 34, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -1502,47 +1502,14 @@ impl fmt::Display for LoopIdError {\n     }\n }\n \n-// FIXME(cramertj) this should use `Result` once master compiles w/ a vesion of Rust where\n-// `Result` implements `Encodable`/`Decodable`\n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum LoopIdResult {\n-    Ok(NodeId),\n-    Err(LoopIdError),\n-}\n-impl Into<Result<NodeId, LoopIdError>> for LoopIdResult {\n-    fn into(self) -> Result<NodeId, LoopIdError> {\n-        match self {\n-            LoopIdResult::Ok(ok) => Ok(ok),\n-            LoopIdResult::Err(err) => Err(err),\n-        }\n-    }\n-}\n-impl From<Result<NodeId, LoopIdError>> for LoopIdResult {\n-    fn from(res: Result<NodeId, LoopIdError>) -> Self {\n-        match res {\n-            Ok(ok) => LoopIdResult::Ok(ok),\n-            Err(err) => LoopIdResult::Err(err),\n-        }\n-    }\n-}\n-\n-impl LoopIdResult {\n-    pub fn ok(self) -> Option<NodeId> {\n-        match self {\n-            LoopIdResult::Ok(node_id) => Some(node_id),\n-            LoopIdResult::Err(_) => None,\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub struct Destination {\n     // This is `Some(_)` iff there is an explicit user-specified `label\n     pub label: Option<Label>,\n \n     // These errors are caught and then reported during the diagnostics pass in\n     // librustc_passes/loops.rs\n-    pub target_id: LoopIdResult,\n+    pub target_id: Result<NodeId, LoopIdError>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "6edf1b35bdd734247f59d5c169afdf05d3dedc9e", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -656,11 +656,6 @@ impl_stable_hash_for!(struct hir::Destination {\n \n impl_stable_hash_for_spanned!(ast::Ident);\n \n-impl_stable_hash_for!(enum hir::LoopIdResult {\n-    Ok(node_id),\n-    Err(loop_id_error)\n-});\n-\n impl_stable_hash_for!(enum hir::LoopIdError {\n     OutsideLoopScope,\n     UnlabeledCfInWhileCondition,"}, {"sha": "2b1663bed2f40d57844a89bdf7e18c341c234bec", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -1051,9 +1051,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprBreak(label, ref opt_expr) => {\n               // Find which label this break jumps to\n               let target = match label.target_id {\n-                    hir::LoopIdResult::Ok(node_id) => self.break_ln.get(&node_id),\n-                    hir::LoopIdResult::Err(err) =>\n-                        span_bug!(expr.span, \"loop scope error: {}\", err),\n+                    Ok(node_id) => self.break_ln.get(&node_id),\n+                    Err(err) => span_bug!(expr.span, \"loop scope error: {}\", err),\n               }.map(|x| *x);\n \n               // Now that we know the label we're going to,\n@@ -1068,9 +1067,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprAgain(label) => {\n               // Find which label this expr continues to\n               let sc = match label.target_id {\n-                    hir::LoopIdResult::Ok(node_id) => node_id,\n-                    hir::LoopIdResult::Err(err) =>\n-                        span_bug!(expr.span, \"loop scope error: {}\", err),\n+                    Ok(node_id) => node_id,\n+                    Err(err) => span_bug!(expr.span, \"loop scope error: {}\", err),\n               };\n \n               // Now that we know the label we're going to,"}, {"sha": "3e432d84c699d2846be64074ff6d79edc46b578b", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -536,21 +536,19 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprRet(ref v) => ExprKind::Return { value: v.to_ref() },\n         hir::ExprBreak(dest, ref value) => {\n             match dest.target_id {\n-                hir::LoopIdResult::Ok(target_id) => ExprKind::Break {\n+                Ok(target_id) => ExprKind::Break {\n                     label: region::Scope::Node(cx.tcx.hir.node_to_hir_id(target_id).local_id),\n                     value: value.to_ref(),\n                 },\n-                hir::LoopIdResult::Err(err) =>\n-                    bug!(\"invalid loop id for break: {}\", err)\n+                Err(err) => bug!(\"invalid loop id for break: {}\", err)\n             }\n         }\n         hir::ExprAgain(dest) => {\n             match dest.target_id {\n-                hir::LoopIdResult::Ok(loop_id) => ExprKind::Continue {\n+                Ok(loop_id) => ExprKind::Continue {\n                     label: region::Scope::Node(cx.tcx.hir.node_to_hir_id(loop_id).local_id),\n                 },\n-                hir::LoopIdResult::Err(err) =>\n-                    bug!(\"invalid loop id for continue: {}\", err)\n+                Err(err) => bug!(\"invalid loop id for continue: {}\", err)\n             }\n         }\n         hir::ExprMatch(ref discr, ref arms, _) => {"}, {"sha": "81299f4ba9f66cf004732458ec7ed8cc683e70aa", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/235e7c1b4312a9c5814f8b164c4b8f3d560b5777/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=235e7c1b4312a9c5814f8b164c4b8f3d560b5777", "patch": "@@ -133,8 +133,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.require_loop(\"break\", e.span);\n             }\n             hir::ExprAgain(label) => {\n-                if let hir::LoopIdResult::Err(\n-                        hir::LoopIdError::UnlabeledCfInWhileCondition) = label.target_id {\n+                if let Err(hir::LoopIdError::UnlabeledCfInWhileCondition) = label.target_id {\n                     self.emit_unlabled_cf_in_while_condition(e.span, \"continue\");\n                 }\n                 self.require_loop(\"continue\", e.span)"}]}