{"sha": "4d537141835f825892e2be868620e98585b3d4a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNTM3MTQxODM1ZjgyNTg5MmUyYmU4Njg2MjBlOTg1ODViM2Q0YTk=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-23T09:32:16Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-23T09:32:16Z"}, "message": "Remove redundant syntax::ast::Guard.", "tree": {"sha": "c83214763bbc9f0ac2407f254157cc96dd4dc2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c83214763bbc9f0ac2407f254157cc96dd4dc2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d537141835f825892e2be868620e98585b3d4a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d537141835f825892e2be868620e98585b3d4a9", "html_url": "https://github.com/rust-lang/rust/commit/4d537141835f825892e2be868620e98585b3d4a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d537141835f825892e2be868620e98585b3d4a9/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a96ba969156d257e5d5b692946fa8fe40ed6543a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a96ba969156d257e5d5b692946fa8fe40ed6543a", "html_url": "https://github.com/rust-lang/rust/commit/a96ba969156d257e5d5b692946fa8fe40ed6543a"}], "stats": {"total": 50, "additions": 14, "deletions": 36}, "files": [{"sha": "3947327b46317b73c7dd0bef77a48e3003babe4d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -1382,7 +1382,7 @@ impl<'a> LoweringContext<'a> {\n             attrs: self.lower_attrs(&arm.attrs),\n             pats: arm.pats.iter().map(|x| self.lower_pat(x)).collect(),\n             guard: match arm.guard {\n-                Some(Guard::If(ref x)) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n+                Some(ref x) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n                 _ => None,\n             },\n             body: P(self.lower_expr(&arm.body)),"}, {"sha": "0b27bfdbe675ba5169fc919199c0464579b57318", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -3065,7 +3065,7 @@ impl<'a> Resolver<'a> {\n         // This has to happen *after* we determine which pat_idents are variants.\n         self.check_consistent_bindings(&arm.pats);\n \n-        if let Some(ast::Guard::If(ref expr)) = arm.guard {\n+        if let Some(ref expr) = arm.guard {\n             self.visit_expr(expr)\n         }\n         self.visit_expr(&arm.body);"}, {"sha": "fd746ef0832af115449c96e85a544bd44c52e18c", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -1617,9 +1617,8 @@ impl<'l, 'tcx, 'll, O: DumpOutput + 'll> Visitor<'l> for DumpVisitor<'l, 'tcx, '\n \n     fn visit_arm(&mut self, arm: &'l ast::Arm) {\n         self.process_var_decl_multi(&arm.pats);\n-        match arm.guard {\n-            Some(ast::Guard::If(ref expr)) => self.visit_expr(expr),\n-            _ => {}\n+        if let Some(expr) = &arm.guard {\n+            self.visit_expr(expr);\n         }\n         self.visit_expr(&arm.body);\n     }"}, {"sha": "8a2b36e75bef0eeb674de40ea240cea12e861d9b", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -893,16 +893,11 @@ pub struct Local {\n pub struct Arm {\n     pub attrs: Vec<Attribute>,\n     pub pats: Vec<P<Pat>>,\n-    pub guard: Option<Guard>,\n+    pub guard: Option<P<Expr>>,\n     pub body: P<Expr>,\n     pub span: Span,\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n-pub enum Guard {\n-    If(P<Expr>),\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct Field {\n     pub ident: Ident,"}, {"sha": "076557ab11ae7ee91810bc0dbd1ab8f83ccc9c71", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -131,10 +131,6 @@ pub trait MutVisitor: Sized {\n         noop_visit_arm(a, self);\n     }\n \n-    fn visit_guard(&mut self, g: &mut Guard) {\n-        noop_visit_guard(g, self);\n-    }\n-\n     fn visit_pat(&mut self, p: &mut P<Pat>) {\n         noop_visit_pat(p, self);\n     }\n@@ -389,17 +385,11 @@ pub fn noop_visit_arm<T: MutVisitor>(\n ) {\n     visit_attrs(attrs, vis);\n     visit_vec(pats, |pat| vis.visit_pat(pat));\n-    visit_opt(guard, |guard| vis.visit_guard(guard));\n+    visit_opt(guard, |guard| vis.visit_expr(guard));\n     vis.visit_expr(body);\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_guard<T: MutVisitor>(g: &mut Guard, vis: &mut T) {\n-    match g {\n-        Guard::If(e) => vis.visit_expr(e),\n-    }\n-}\n-\n pub fn noop_visit_ty_constraint<T: MutVisitor>(\n     AssocTyConstraint { id, ident, kind, span }: &mut AssocTyConstraint,\n     vis: &mut T"}, {"sha": "7b91ad4a0b410c1497033b8184df45081a20cafd", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -3,7 +3,7 @@\n use crate::ast::{AngleBracketedArgs, ParenthesizedArgs, AttrStyle, BareFnTy};\n use crate::ast::{GenericBound, TraitBoundModifier};\n use crate::ast::Unsafety;\n-use crate::ast::{Mod, AnonConst, Arg, Arm, Guard, Attribute, BindingMode, TraitItemKind};\n+use crate::ast::{Mod, AnonConst, Arg, Arm, Attribute, BindingMode, TraitItemKind};\n use crate::ast::Block;\n use crate::ast::{BlockCheckMode, CaptureBy, Movability};\n use crate::ast::{Constness, Crate};\n@@ -3413,7 +3413,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(kw::If) {\n-            Some(Guard::If(self.parse_expr()?))\n+            Some(self.parse_expr()?)\n         } else {\n             None\n         };"}, {"sha": "9edd09576e7823c686020aaacceeefa994e72836", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -2663,14 +2663,10 @@ impl<'a> State<'a> {\n         self.print_outer_attributes(&arm.attrs)?;\n         self.print_pats(&arm.pats)?;\n         self.s.space()?;\n-        if let Some(ref g) = arm.guard {\n-            match g {\n-                ast::Guard::If(ref e) => {\n-                    self.word_space(\"if\")?;\n-                    self.print_expr(e)?;\n-                    self.s.space()?;\n-                }\n-            }\n+        if let Some(ref e) = arm.guard {\n+            self.word_space(\"if\")?;\n+            self.print_expr(e)?;\n+            self.s.space()?;\n         }\n         self.word_space(\"=>\")?;\n "}, {"sha": "e2489c16c3157aeb65b9515d226f79b8d171e4db", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d537141835f825892e2be868620e98585b3d4a9/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4d537141835f825892e2be868620e98585b3d4a9", "patch": "@@ -834,10 +834,8 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n \n pub fn walk_arm<'a, V: Visitor<'a>>(visitor: &mut V, arm: &'a Arm) {\n     walk_list!(visitor, visit_pat, &arm.pats);\n-    if let Some(ref g) = &arm.guard {\n-        match g {\n-            Guard::If(ref e) => visitor.visit_expr(e),\n-        }\n+    if let Some(ref e) = &arm.guard {\n+        visitor.visit_expr(e);\n     }\n     visitor.visit_expr(&arm.body);\n     walk_list!(visitor, visit_attribute, &arm.attrs);"}]}