{"sha": "2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMTUyMDRmMGM0YTBiMGQ1Zjk3NDYwYTIzZjEwZmEwOTBmNWFlZjk=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-21T10:56:37Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-05-23T03:51:13Z"}, "message": "Update tests", "tree": {"sha": "5b13e7820cf65c71ec48a0be854307ee7199276c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b13e7820cf65c71ec48a0be854307ee7199276c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "html_url": "https://github.com/rust-lang/rust/commit/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c0ab77ba4e3a196227ee1d61a2ae57e35625c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c0ab77ba4e3a196227ee1d61a2ae57e35625c0", "html_url": "https://github.com/rust-lang/rust/commit/29c0ab77ba4e3a196227ee1d61a2ae57e35625c0"}], "stats": {"total": 293, "additions": 274, "deletions": 19}, "files": [{"sha": "c1b130fd8f3d073726c609a297433b625f959ae9", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -1348,7 +1348,7 @@ impl Rewrite for ast::Arm {\n             ast::ExprKind::Closure(..) => (true, &**body),\n             _ => (false, &**body),\n         };\n-        extend &= context.config.fn_call_style == IndentStyle::Block;\n+        extend &= context.config.fn_call_style() == IndentStyle::Block;\n \n         let comma = arm_comma(&context.config, body);\n         let alt_block_sep = String::from(\"\\n\") +\n@@ -1746,9 +1746,9 @@ fn rewrite_call_args(context: &RewriteContext,\n     if overflow_last {\n         let last_arg = args.last().unwrap();\n         let arg_shape = match last_arg.node {\n-            ast::ExprKind::Closure(..) if context.config.fn_call_style == IndentStyle::Block => {\n+            ast::ExprKind::Closure(..) if context.config.fn_call_style() == IndentStyle::Block => {\n                 let mut arg_shape = shape.block();\n-                arg_shape.indent.block_indent -= context.config.tab_spaces;\n+                arg_shape.indent.block_indent -= context.config.tab_spaces();\n                 arg_shape\n             }\n             _ => shape.block(),"}, {"sha": "6708966fa691ba1df0f17e13506bb71985392947", "filename": "tests/source/configs-fn_call_style-block.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Fsource%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-fn_call_style-block.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -45,3 +45,54 @@ fn query(conn: &Connection) -> Result<()> {\n \n     Ok(())\n }\n+\n+// #1449\n+fn future_rayon_wait_1_thread() {\n+    // run with only 1 worker thread; this would deadlock if we couldn't make progress\n+    let mut result = None;\n+    ThreadPool::new(Configuration::new().num_threads(1))\n+        .unwrap()\n+        .install(\n+            || {\n+                scope(\n+                    |s| {\n+                        use std::sync::mpsc::channel;\n+                        let (tx, rx) = channel();\n+                        let a = s.spawn_future(lazy(move || Ok::<usize, ()>(rx.recv().unwrap())));\n+                        //                          ^^^^ FIXME: why is this needed?\n+                        let b = s.spawn_future(a.map(|v| v + 1));\n+                        let c = s.spawn_future(b.map(|v| v + 1));\n+                        s.spawn(move |_| tx.send(20).unwrap());\n+                        result = Some(c.rayon_wait().unwrap());\n+                    },\n+                );\n+            },\n+        );\n+    assert_eq!(result, Some(22));\n+}\n+\n+// #1494\n+impl Cursor {\n+    fn foo() {\n+        self.cur_type()\n+            .num_template_args()\n+            .or_else(|| {\n+                let n: c_int = unsafe { clang_Cursor_getNumTemplateArguments(self.x) };\n+\n+                if n >= 0 {\n+                    Some(n as u32)\n+                } else {\n+                    debug_assert_eq!(n, -1);\n+                    None\n+                }\n+            })\n+            .or_else(|| {\n+                let canonical = self.canonical();\n+                if canonical != *self {\n+                    canonical.num_template_args()\n+                } else {\n+                    None\n+                }\n+            });\n+    }\n+}"}, {"sha": "bf5d23a7d9e78b069f8fa4bf4d0f39c60240dffb", "filename": "tests/source/expr-block.rs", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Fsource%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Fsource%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-block.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -143,3 +143,88 @@ fn foo() {\n          DefinitiveListTactic::Horizontal\n     }\n }\n+\n+fn combine_block() {\n+    foo(\n+        Bar {\n+            x: value,\n+            y: value2,\n+        },\n+    );\n+\n+    let opt = Some(\n+        Struct(\n+            long_argument_one,\n+            long_argument_two,\n+            long_argggggggg,\n+        ),\n+    );\n+\n+    do_thing(\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    do_thing(\n+        x,\n+        |param| {\n+            action();\n+            foo(param)\n+        },\n+    );\n+\n+    Ok(\n+        some_function(\n+            lllllllllong_argument_one,\n+            lllllllllong_argument_two,\n+            lllllllllllllllllllllllllllllong_argument_three,\n+        ),\n+    );\n+\n+    foo(\n+        thing,\n+        bar(\n+            param2,\n+            pparam1param1param1param1param1param1param1param1param1param1aram1,\n+            param3,\n+        ),\n+    );\n+\n+    foo.map_or(\n+        || {\n+            Ok(\n+                SomeStruct {\n+                    f1: 0,\n+                    f2: 0,\n+                    f3: 0,\n+                },\n+            )\n+        },\n+    );\n+\n+    match opt {\n+        Some(x) => somefunc(anotherfunc(\n+            long_argument_one,\n+            long_argument_two,\n+            long_argument_three,\n+        )),\n+        None => Ok(SomeStruct {\n+            f1: long_argument_one,\n+            f2: long_argument_two,\n+            f3: long_argument_three,\n+        }),\n+    };\n+\n+    match x {\n+        y => func(\n+            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        ),\n+        _ => func(\n+            x,\n+            yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+            zzz,\n+        ),\n+    }\n+}"}, {"sha": "5d1e1de0f68981711bd849cc999b970fb57ec9d8", "filename": "tests/target/closure-block-inside-macro.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fclosure-block-inside-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fclosure-block-inside-macro.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -1,15 +1,13 @@\n // rustfmt-fn_call_style: Block\n \n // #1547\n-fuzz_target!(\n-    |data: &[u8]| {\n-        if let Some(first) = data.first() {\n-            let index = *first as usize;\n-            if index >= ENCODINGS.len() {\n-                return;\n-            }\n-            let encoding = ENCODINGS[index];\n-            dispatch_test(encoding, &data[1..]);\n+fuzz_target!(|data: &[u8]| {\n+    if let Some(first) = data.first() {\n+        let index = *first as usize;\n+        if index >= ENCODINGS.len() {\n+            return;\n         }\n+        let encoding = ENCODINGS[index];\n+        dispatch_test(encoding, &data[1..]);\n     }\n-);\n+});"}, {"sha": "ed3dd76c04dd8225b30bc4b6d0df7d42c30ddcd2", "filename": "tests/target/configs-fn_call_style-block.rs", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-fn_call_style-block.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -13,18 +13,20 @@ fn main() {\n         \"elit\",\n     );\n     // #1501\n-    let hyper = Arc::new(\n-        Client::with_connector(HttpsConnector::new(TlsClient::new())),\n-    );\n+    let hyper = Arc::new(Client::with_connector(HttpsConnector::new(\n+        TlsClient::new(),\n+    )));\n }\n \n // #1521\n impl Foo {\n     fn map_pixel_to_coords(&self, point: &Vector2i, view: &View) -> Vector2f {\n         unsafe {\n-            Vector2f::from_raw(\n-                ffi::sfRenderTexture_mapPixelToCoords(self.render_texture, point.raw(), view.raw()),\n-            )\n+            Vector2f::from_raw(ffi::sfRenderTexture_mapPixelToCoords(\n+                self.render_texture,\n+                point.raw(),\n+                view.raw(),\n+            ))\n         }\n     }\n }\n@@ -58,3 +60,50 @@ fn query(conn: &Connection) -> Result<()> {\n \n     Ok(())\n }\n+\n+// #1449\n+fn future_rayon_wait_1_thread() {\n+    // run with only 1 worker thread; this would deadlock if we couldn't make progress\n+    let mut result = None;\n+    ThreadPool::new(Configuration::new().num_threads(1))\n+        .unwrap()\n+        .install(|| {\n+            scope(|s| {\n+                use std::sync::mpsc::channel;\n+                let (tx, rx) = channel();\n+                let a = s.spawn_future(lazy(move || Ok::<usize, ()>(rx.recv().unwrap())));\n+                //                          ^^^^ FIXME: why is this needed?\n+                let b = s.spawn_future(a.map(|v| v + 1));\n+                let c = s.spawn_future(b.map(|v| v + 1));\n+                s.spawn(move |_| tx.send(20).unwrap());\n+                result = Some(c.rayon_wait().unwrap());\n+            });\n+        });\n+    assert_eq!(result, Some(22));\n+}\n+\n+// #1494\n+impl Cursor {\n+    fn foo() {\n+        self.cur_type()\n+            .num_template_args()\n+            .or_else(|| {\n+                let n: c_int = unsafe { clang_Cursor_getNumTemplateArguments(self.x) };\n+\n+                if n >= 0 {\n+                    Some(n as u32)\n+                } else {\n+                    debug_assert_eq!(n, -1);\n+                    None\n+                }\n+            })\n+            .or_else(|| {\n+                let canonical = self.canonical();\n+                if canonical != *self {\n+                    canonical.num_template_args()\n+                } else {\n+                    None\n+                }\n+            });\n+    }\n+}"}, {"sha": "1f3082f306878942aec673cbf1dde159d0214d94", "filename": "tests/target/expr-block.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c15204f0c4a0b0d5f97460a23f10fa090f5aef9/tests%2Ftarget%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-block.rs?ref=2c15204f0c4a0b0d5f97460a23f10fa090f5aef9", "patch": "@@ -213,3 +213,75 @@ fn foo() {\n         DefinitiveListTactic::Horizontal\n     }\n }\n+\n+fn combine_block() {\n+    foo(Bar {\n+        x: value,\n+        y: value2,\n+    });\n+\n+    let opt = Some(Struct(\n+        long_argument_one,\n+        long_argument_two,\n+        long_argggggggg,\n+    ));\n+\n+    do_thing(|param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    do_thing(x, |param| {\n+        action();\n+        foo(param)\n+    });\n+\n+    Ok(some_function(\n+        lllllllllong_argument_one,\n+        lllllllllong_argument_two,\n+        lllllllllllllllllllllllllllllong_argument_three,\n+    ));\n+\n+    foo(\n+        thing,\n+        bar(\n+            param2,\n+            pparam1param1param1param1param1param1param1param1param1param1aram1,\n+            param3,\n+        ),\n+    );\n+\n+    foo.map_or(|| {\n+        Ok(SomeStruct {\n+            f1: 0,\n+            f2: 0,\n+            f3: 0,\n+        })\n+    });\n+\n+    match opt {\n+        Some(x) => somefunc(anotherfunc(\n+            long_argument_one,\n+            long_argument_two,\n+            long_argument_three,\n+        )),\n+        None => Ok(SomeStruct {\n+            f1: long_argument_one,\n+            f2: long_argument_two,\n+            f3: long_argument_three,\n+        }),\n+    };\n+\n+    match x {\n+        y => func(\n+            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+        ),\n+        _ => {\n+            func(\n+                x,\n+                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+                zzz,\n+            )\n+        }\n+    }\n+}"}]}