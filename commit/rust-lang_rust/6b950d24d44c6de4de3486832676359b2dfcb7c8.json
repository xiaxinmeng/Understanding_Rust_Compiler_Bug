{"sha": "6b950d24d44c6de4de3486832676359b2dfcb7c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiOTUwZDI0ZDQ0YzZkZTRkZTM0ODY4MzI2NzYzNTliMmRmY2I3Yzg=", "commit": {"author": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-05T04:08:46Z"}, "committer": {"name": "Anatol Liu", "email": "axlui@anatols-mbp.lan", "date": "2020-11-09T21:09:20Z"}, "message": "Add static semantic token modifier for associated functions with no &self\n\nrefactor logic into code_model.rs\n\naddress comments", "tree": {"sha": "bee7396b4f0150a535cca971c8d5fd9969e96d77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bee7396b4f0150a535cca971c8d5fd9969e96d77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b950d24d44c6de4de3486832676359b2dfcb7c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b950d24d44c6de4de3486832676359b2dfcb7c8", "html_url": "https://github.com/rust-lang/rust/commit/6b950d24d44c6de4de3486832676359b2dfcb7c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b950d24d44c6de4de3486832676359b2dfcb7c8/comments", "author": null, "committer": null, "parents": [{"sha": "90031a267a2ea510cede2ab5c3164bb8605a69ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/90031a267a2ea510cede2ab5c3164bb8605a69ac", "html_url": "https://github.com/rust-lang/rust/commit/90031a267a2ea510cede2ab5c3164bb8605a69ac"}], "stats": {"total": 19, "additions": 3, "deletions": 16}, "files": [{"sha": "30a5e45809b9a2bbfa5b315e482fb3a0433aa196", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6b950d24d44c6de4de3486832676359b2dfcb7c8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b950d24d44c6de4de3486832676359b2dfcb7c8/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=6b950d24d44c6de4de3486832676359b2dfcb7c8", "patch": "@@ -41,7 +41,7 @@ use rustc_hash::FxHashSet;\n use stdx::impl_from;\n use syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, SmolStr, SyntaxKind,\n+    AstNode, SmolStr,\n };\n use tt::{Ident, Leaf, Literal, TokenTree};\n \n@@ -787,19 +787,6 @@ impl Function {\n     pub fn has_body(self, db: &dyn HirDatabase) -> bool {\n         db.function_data(self.id).has_body\n     }\n-\n-    /// whether this function is associated with some trait/impl\n-    pub fn is_assoc_item(self, db: &dyn HirDatabase) -> bool {\n-        let fn_parent_kind = self\n-            .source(db)\n-            .value\n-            .syntax()\n-            .parent()\n-            .and_then(|s| s.parent())\n-            .and_then(|s| Some(s.kind()));\n-\n-        matches!(fn_parent_kind, Some(SyntaxKind::IMPL) | Some(SyntaxKind::TRAIT))\n-    }\n }\n \n // Note: logically, this belongs to `hir_ty`, but we are not using it there yet."}, {"sha": "4a01097df5d9b340c97edcf41f115b2a67d71e6d", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b950d24d44c6de4de3486832676359b2dfcb7c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b950d24d44c6de4de3486832676359b2dfcb7c8/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=6b950d24d44c6de4de3486832676359b2dfcb7c8", "patch": "@@ -6,7 +6,7 @@ pub(crate) mod tags;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Local, Name, Semantics, VariantDef};\n+use hir::{AsAssocItem, Local, Name, Semantics, VariantDef};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -746,7 +746,7 @@ fn highlight_def(db: &RootDatabase, def: Definition) -> Highlight {\n                 if func.is_unsafe(db) {\n                     h |= HighlightModifier::Unsafe;\n                 }\n-                if func.is_assoc_item(db) && func.self_param(db).is_none() {\n+                if func.as_assoc_item(db).is_some() && func.self_param(db).is_none() {\n                     h |= HighlightModifier::Static;\n                 }\n                 return h;"}]}