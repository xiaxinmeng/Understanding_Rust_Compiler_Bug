{"sha": "9732e0d554770291d69b4328f566b3067509a81e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzJlMGQ1NTQ3NzAyOTFkNjliNDMyOGY1NjZiMzA2NzUwOWE4MWU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T20:43:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-29T20:47:06Z"}, "message": "rustdoc: Move fn docs into the item tag", "tree": {"sha": "170f65d21b73de1f1854ae11ab6fc6ba4bcdcdeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/170f65d21b73de1f1854ae11ab6fc6ba4bcdcdeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9732e0d554770291d69b4328f566b3067509a81e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9732e0d554770291d69b4328f566b3067509a81e", "html_url": "https://github.com/rust-lang/rust/commit/9732e0d554770291d69b4328f566b3067509a81e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9732e0d554770291d69b4328f566b3067509a81e/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa6c3a49a924c077641df6c5308586a0b0390cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa6c3a49a924c077641df6c5308586a0b0390cd", "html_url": "https://github.com/rust-lang/rust/commit/5aa6c3a49a924c077641df6c5308586a0b0390cd"}], "stats": {"total": 201, "additions": 70, "deletions": 131}, "files": [{"sha": "58127ba1a3d9a94a567ce9de0d4ba4b51e98d174", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -180,7 +180,7 @@ fn fold_fn_should_extract_fn_attributes() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns[0]);\n+    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n     assert doc.desc == some(\"test\");\n }\n \n@@ -190,7 +190,7 @@ fn fold_fn_should_extract_arg_attributes() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns[0]);\n+    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n     assert doc.args[0].desc == some(\"b\");\n }\n \n@@ -201,7 +201,7 @@ fn fold_fn_should_extract_return_attributes() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns[0]);\n+    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n     assert doc.return.desc == some(\"what\");\n }\n \n@@ -212,7 +212,7 @@ fn fold_fn_should_preserve_sig() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns[0]);\n+    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n     assert doc.sig == some(\"fn a() -> int\");\n }\n \n@@ -222,7 +222,7 @@ fn fold_fn_should_extract_failure_conditions() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let fold = fold::default_seq_fold(srv);\n-    let doc = fold_fn(fold, doc.topmod.fns[0]);\n+    let doc = fold_fn(fold, doc.topmod.fns()[0]);\n     assert doc.failure == some(\"what\");\n }\n "}, {"sha": "5a98dbb8d9f77a6d867da289b1449f33d3b0980e", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -112,8 +112,8 @@ fn should_promote_fn_desc() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.fns[0].brief == some(\"desc\");\n-    assert doc.topmod.fns[0].desc == none;\n+    assert doc.topmod.fns()[0].brief == some(\"desc\");\n+    assert doc.topmod.fns()[0].desc == none;\n }\n \n #[test]"}, {"sha": "e9877ed954e6a406e5b34aef303b86877c2dd2ba", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -21,8 +21,7 @@ type moddoc = ~{\n     brief: option<str>,\n     desc: option<str>,\n     items: [itemtag],\n-    mods: modlist,\n-    fns: fnlist\n+    mods: modlist\n };\n \n type constdoc = ~{\n@@ -80,10 +79,18 @@ type resdoc = ~{\n \n // Just to break the structural recursive types\n enum modlist = [moddoc];\n-enum fnlist = [fndoc];\n \n impl util for moddoc {\n \n+    fn fns() -> [fndoc] {\n+        vec::filter_map(self.items) {|itemtag|\n+            alt itemtag {\n+              fntag(fndoc) { some(fndoc) }\n+              _ { none }\n+            }\n+        }\n+    }\n+\n     fn consts() -> [constdoc] {\n         vec::filter_map(self.items) {|itemtag|\n             alt itemtag {"}, {"sha": "fd44ee698a7825cd9ba53c84376c3b056a1be03a", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -45,6 +45,11 @@ fn moddoc_from_mod(\n         desc: none,\n         items: vec::filter_map(module.items) {|item|\n             alt item.node {\n+              ast::item_fn(decl, _, _) {\n+                some(doc::fntag(\n+                    fndoc_from_fn(decl, item.ident, item.id)\n+                ))\n+              }\n               ast::item_const(_, _) {\n                 some(doc::consttag(\n                     constdoc_from_const(item.ident, item.id)\n@@ -75,18 +80,6 @@ fn moddoc_from_mod(\n                     none\n                   }\n                 }\n-            }),\n-        fns: doc::fnlist(\n-            vec::filter_map(module.items) {|item|\n-                alt item.node {\n-                  ast::item_fn(decl, _, _) {\n-                    some(fndoc_from_fn(\n-                        decl, item.ident, item.id))\n-                  }\n-                  _ {\n-                    none\n-                  }\n-                }\n             })\n     }\n }\n@@ -116,7 +109,7 @@ fn should_extract_fn_args() {\n     let source = \"fn a(b: int, c: int) { }\";\n     let ast = parse::from_str(source);\n     let doc = extract(ast, \"\");\n-    let fn_ = doc.topmod.fns[0];\n+    let fn_ = doc.topmod.fns()[0];\n     assert fn_.args[0].name == \"b\";\n     assert fn_.args[1].name == \"c\";\n }\n@@ -242,7 +235,7 @@ mod tests {\n         let doc = extract(ast, \"\");\n         // FIXME #1535: These are boxed to prevent a crash\n         assert ~doc.topmod.mods == ~doc::modlist([]);\n-        assert ~doc.topmod.fns == ~doc::fnlist([]);\n+        assert vec::is_empty(doc.topmod.fns());\n     }\n \n     #[test]\n@@ -278,16 +271,16 @@ mod tests {\n              mod b { fn c() { } }\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        assert doc.topmod.fns[0].name == \"a\";\n-        assert doc.topmod.mods[0].fns[0].name == \"c\";\n+        assert doc.topmod.fns()[0].name == \"a\";\n+        assert doc.topmod.mods[0].fns()[0].name == \"c\";\n     }\n \n     #[test]\n     fn extract_should_set_fn_ast_id() {\n         let source = \"fn a() { }\";\n         let ast = parse::from_str(source);\n         let doc = extract(ast, \"\");\n-        assert doc.topmod.fns[0].id != 0;\n+        assert doc.topmod.fns()[0].id != 0;\n     }\n \n     #[test]"}, {"sha": "5ae471e6715388d8a5937be34db6ed1c515a11ac", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -2,15 +2,14 @@\n import std;\n \n export fold;\n-export fold_crate, fold_mod, fold_fn, fold_modlist, fold_fnlist;\n+export fold_crate, fold_mod, fold_fn, fold_modlist;\n export default_seq_fold;\n export default_seq_fold_crate;\n export default_seq_fold_mod;\n export default_seq_fold_fn;\n export default_seq_fold_const;\n export default_seq_fold_enum;\n export default_seq_fold_res;\n-export default_seq_fold_fnlist;\n \n enum fold<T> = t<T>;\n \n@@ -21,7 +20,6 @@ type fold_const<T> = fn~(fold: fold<T>, doc: doc::constdoc) -> doc::constdoc;\n type fold_enum<T> = fn~(fold: fold<T>, doc: doc::enumdoc) -> doc::enumdoc;\n type fold_res<T> = fn~(fold: fold<T>, doc: doc::resdoc) -> doc::resdoc;\n type fold_modlist<T> = fn~(fold: fold<T>, list: doc::modlist) -> doc::modlist;\n-type fold_fnlist<T> = fn~(fold: fold<T>, list: doc::fnlist) -> doc::fnlist;\n \n type t<T> = {\n     ctxt: T,\n@@ -31,8 +29,7 @@ type t<T> = {\n     fold_const: fold_const<T>,\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n-    fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>\n+    fold_modlist: fold_modlist<T>\n };\n \n \n@@ -46,8 +43,7 @@ fn mk_fold<T:copy>(\n     fold_const: fold_const<T>,\n     fold_enum: fold_enum<T>,\n     fold_res: fold_res<T>,\n-    fold_modlist: fold_modlist<T>,\n-    fold_fnlist: fold_fnlist<T>\n+    fold_modlist: fold_modlist<T>\n ) -> fold<T> {\n     fold({\n         ctxt: ctxt,\n@@ -57,8 +53,7 @@ fn mk_fold<T:copy>(\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n-        fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist\n+        fold_modlist: fold_modlist\n     })\n }\n \n@@ -71,8 +66,7 @@ fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n         {|f, d| default_seq_fold_const(f, d)},\n         {|f, d| default_seq_fold_enum(f, d)},\n         {|f, d| default_seq_fold_res(f, d)},\n-        {|f, d| default_seq_fold_modlist(f, d)},\n-        {|f, d| default_seq_fold_fnlist(f, d)}\n+        {|f, d| default_seq_fold_modlist(f, d)}\n     )\n }\n \n@@ -92,6 +86,9 @@ fn default_seq_fold_mod<T>(\n     ~{\n         items: vec::map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::fntag(fndoc) {\n+                doc::fntag(fold.fold_fn(fold, fndoc))\n+              }\n               doc::consttag(constdoc) {\n                 doc::consttag(fold.fold_const(fold, constdoc))\n               }\n@@ -103,8 +100,7 @@ fn default_seq_fold_mod<T>(\n               }\n             }\n         },\n-        mods: fold.fold_modlist(fold, doc.mods),\n-        fns: fold.fold_fnlist(fold, doc.fns)\n+        mods: fold.fold_modlist(fold, doc.mods)\n         with *doc\n     }\n }\n@@ -146,15 +142,6 @@ fn default_seq_fold_modlist<T>(\n     })\n }\n \n-fn default_seq_fold_fnlist<T>(\n-    fold: fold<T>,\n-    list: doc::fnlist\n-) -> doc::fnlist {\n-    doc::fnlist(vec::map(*list) {|doc|\n-        fold.fold_fn(fold, doc)\n-    })\n-}\n-\n #[test]\n fn default_fold_should_produce_same_doc() {\n     let source = \"mod a { fn b() { } mod c { fn d() { } } }\";"}, {"sha": "e6560d8d7af3fa0be4fc1778db7360a4bd12873f", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -81,16 +81,13 @@ fn write_mod_contents(\n     write_brief(ctxt, doc.brief);\n     write_desc(ctxt, doc.desc);\n \n-    for fndoc in *doc.fns {\n-        write_fn(ctxt, fndoc);\n-    }\n-\n     for moddoc in *doc.mods {\n         write_mod(ctxt, moddoc);\n     }\n \n     for itemtag in doc.items {\n         alt itemtag {\n+          doc::fntag(fndoc) { write_fn(ctxt, fndoc) }\n           doc::consttag(constdoc) { write_const(ctxt, constdoc) }\n           doc::enumtag(enumdoc) { write_enum(ctxt, enumdoc) }\n           doc::restag(resdoc) { write_res(ctxt, resdoc) }\n@@ -162,10 +159,10 @@ fn should_correctly_indent_fn_signature() {\n     let doc = test::create_doc(\"fn a() { }\");\n     let doc = ~{\n         topmod: ~{\n-            fns: doc::fnlist([~{\n+            items: [doc::fntag(~{\n                 sig: some(\"line 1\\nline 2\")\n-                with *doc.topmod.fns[0]\n-            }])\n+                with *doc.topmod.fns()[0]\n+            })]\n             with *doc.topmod\n         }\n         with *doc"}, {"sha": "d207d0fba236af72505cd6ac885a1b17263fbec2", "filename": "src/rustdoc/prune_undoc_pass.rs", "status": "modified", "additions": 15, "deletions": 22, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fprune_undoc_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fprune_undoc_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -23,8 +23,7 @@ fn run(\n         fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n-        fold_modlist: fold_modlist,\n-        fold_fnlist: fold_fnlist\n+        fold_modlist: fold_modlist\n         with *fold::default_seq_fold(ctxt)\n     });\n     fold.fold_crate(fold, doc)\n@@ -37,6 +36,14 @@ fn fold_mod(\n     let doc = ~{\n         items: vec::filter_map(doc.items) {|itemtag|\n             alt itemtag {\n+              doc::fntag(fndoc) {\n+                let doc = fold.fold_fn(fold, fndoc);\n+                if fold.ctxt.have_docs {\n+                    some(doc::fntag(doc))\n+                } else {\n+                    none\n+                }\n+              }\n               doc::consttag(constdoc) {\n                 let doc = fold.fold_const(fold, constdoc);\n                 if fold.ctxt.have_docs {\n@@ -70,7 +77,7 @@ fn fold_mod(\n         doc.brief != none\n         || doc.desc != none\n         || vec::is_not_empty(*doc.mods)\n-        || vec::is_not_empty(*doc.fns);\n+        || vec::is_not_empty(doc.items);\n     ret doc;\n }\n \n@@ -115,7 +122,7 @@ fn should_elide_undocumented_arguments() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_empty(doc.topmod.fns[0].args);\n+    assert vec::is_empty(doc.topmod.fns()[0].args);\n }\n \n #[test]\n@@ -125,7 +132,7 @@ fn should_not_elide_fns_with_documented_arguments() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.fns);\n+    assert vec::is_not_empty(doc.topmod.fns());\n }\n \n #[test]\n@@ -136,7 +143,7 @@ fn should_elide_undocumented_return_values() {\n     let doc = tystr_pass::mk_pass()(srv, doc);\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert doc.topmod.fns[0].return.ty == none;\n+    assert doc.topmod.fns()[0].return.ty == none;\n }\n \n #[test]\n@@ -146,7 +153,7 @@ fn should_not_elide_fns_with_documented_failure_conditions() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = run(srv, doc);\n-    assert vec::is_not_empty(*doc.topmod.fns);\n+    assert vec::is_not_empty(doc.topmod.fns());\n }\n \n fn fold_modlist(\n@@ -192,27 +199,13 @@ fn should_not_elide_undocument_mods_with_documented_fns() {\n     assert vec::is_not_empty(*doc.topmod.mods);\n }\n \n-fn fold_fnlist(\n-    fold: fold::fold<ctxt>,\n-    list: doc::fnlist\n-) -> doc::fnlist {\n-    doc::fnlist(vec::filter_map(*list) {|doc|\n-        let doc = fold.fold_fn(fold, doc);\n-        if fold.ctxt.have_docs {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    })\n-}\n-\n #[test]\n fn should_elide_undocumented_fns() {\n     let source = \"fn a() { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::is_empty(*doc.topmod.fns);\n+    assert vec::is_empty(doc.topmod.fns());\n }\n \n fn fold_const("}, {"sha": "0de67e2254a04d3d98282fbcb6ac8ba720f457d9", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -22,8 +22,7 @@ fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_seq_fold_mod(fold, doc);\n     ~{\n         items: exported_items(fold.ctxt, doc),\n-        mods: doc::modlist(exported_mods(fold.ctxt, doc)),\n-        fns: doc::fnlist(exported_fns(fold.ctxt, doc))\n+        mods: doc::modlist(exported_mods(fold.ctxt, doc))\n         with *doc\n     }\n }\n@@ -44,14 +43,6 @@ fn exported_mods(srv: astsrv::srv, doc: doc::moddoc) -> [doc::moddoc] {\n     )\n }\n \n-fn exported_fns(srv: astsrv::srv, doc: doc::moddoc) -> [doc::fndoc] {\n-    exported_things(\n-        srv, doc,\n-        exported_fns_from_crate,\n-        exported_fns_from_mod\n-    )\n-}\n-\n fn exported_things<T>(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -93,27 +84,14 @@ fn exported_mods_from_mod(\n     exported_mods_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n }\n \n-fn exported_fns_from_crate(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::fndoc] {\n-    exported_fns_from(srv, doc, is_exported_from_crate)\n-}\n-\n-fn exported_fns_from_mod(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc\n-) -> [doc::fndoc] {\n-    exported_fns_from(srv, doc, bind is_exported_from_mod(_, doc.id, _))\n-}\n-\n fn exported_items_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n     is_exported: fn(astsrv::srv, str) -> bool\n ) -> [doc::itemtag] {\n     vec::filter_map(doc.items) { |itemtag|\n         let name = alt itemtag {\n+          doc::fntag(~{name, _}) { name }\n           doc::consttag(~{name, _}) { name }\n           doc::enumtag(~{name, _}) { name }\n           doc::restag(~{name, _}) { name }\n@@ -136,20 +114,6 @@ fn exported_items_from(\n     }\n }\n \n-fn exported_fns_from(\n-    srv: astsrv::srv,\n-    doc: doc::moddoc,\n-    is_exported: fn(astsrv::srv, str) -> bool\n-) -> [doc::fndoc] {\n-    vec::filter_map(*doc.fns) { |doc|\n-        if is_exported(srv, doc.name) {\n-            some(doc)\n-        } else {\n-            none\n-        }\n-    }\n-}\n-\n fn exported_mods_from(\n     srv: astsrv::srv,\n     doc: doc::moddoc,\n@@ -211,7 +175,7 @@ fn should_prune_unexported_fns() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.mods[0].fns) == 1u;\n+    assert vec::len(doc.topmod.mods[0].fns()) == 1u;\n }\n \n #[test]\n@@ -220,7 +184,7 @@ fn should_prune_unexported_fns_from_top_mod() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert vec::len(*doc.topmod.fns) == 1u;\n+    assert vec::len(doc.topmod.fns()) == 1u;\n }\n \n #[test]"}, {"sha": "e8b334b5ad42910f68f14d094c27682f8cf31dfd", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -52,8 +52,7 @@ fn test_run_passes() {\n                 brief: none,\n                 desc: none,\n                 items: [],\n-                mods: doc::modlist([]),\n-                fns: doc::fnlist([])\n+                mods: doc::modlist([])\n             }\n         }\n     }\n@@ -69,8 +68,7 @@ fn test_run_passes() {\n                 brief: none,\n                 desc: none,\n                 items: [],\n-                mods: doc::modlist([]),\n-                fns: doc::fnlist([])\n+                mods: doc::modlist([])\n             }\n         }\n     }"}, {"sha": "7e33cf537775e1e040fdf0792f075826eaac3d93", "filename": "src/rustdoc/trim_pass.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ftrim_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ftrim_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftrim_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -48,8 +48,8 @@ fn should_trim_fn() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.fns[0].brief == some(\"brief\");\n-    assert doc.topmod.fns[0].desc == some(\"desc\");\n+    assert doc.topmod.fns()[0].brief == some(\"brief\");\n+    assert doc.topmod.fns()[0].desc == some(\"desc\");\n }\n \n #[test]\n@@ -59,7 +59,7 @@ fn should_trim_args() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.fns[0].args[0].desc == some(\"a\");\n+    assert doc.topmod.fns()[0].args[0].desc == some(\"a\");\n }\n \n #[test]\n@@ -69,7 +69,7 @@ fn should_trim_ret() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.fns[0].return.desc == some(\"a\");\n+    assert doc.topmod.fns()[0].return.desc == some(\"a\");\n }\n \n #[test]\n@@ -79,5 +79,5 @@ fn should_trim_failure_conditions() {\n     let doc = extract::from_srv(srv, \"\");\n     let doc = attr_pass::mk_pass()(srv, doc);\n     let doc = mk_pass()(srv, doc);\n-    assert doc.topmod.fns[0].failure == some(\"a\");\n+    assert doc.topmod.fns()[0].failure == some(\"a\");\n }\n\\ No newline at end of file"}, {"sha": "3df670fa7abbb4f04aeff3863cbcdb40b19e8e88", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9732e0d554770291d69b4328f566b3067509a81e/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=9732e0d554770291d69b4328f566b3067509a81e", "patch": "@@ -59,7 +59,7 @@ fn should_add_fn_sig() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.fns[0].sig == some(\"fn a() -> int\");\n+    assert doc.topmod.fns()[0].sig == some(\"fn a() -> int\");\n }\n \n fn merge_ret_ty(\n@@ -101,7 +101,7 @@ fn should_add_fn_ret_types() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.fns[0].return.ty == some(\"int\");\n+    assert doc.topmod.fns()[0].return.ty == some(\"int\");\n }\n \n #[test]\n@@ -110,7 +110,7 @@ fn should_not_add_nil_ret_type() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    assert doc.topmod.fns[0].return.ty == none;\n+    assert doc.topmod.fns()[0].return.ty == none;\n }\n \n fn merge_arg_tys(\n@@ -152,7 +152,7 @@ fn should_add_arg_types() {\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n     let doc = run(srv, doc);\n-    let fn_ = doc.topmod.fns[0];\n+    let fn_ = doc.topmod.fns()[0];\n     assert fn_.args[0].ty == some(\"int\");\n     assert fn_.args[1].ty == some(\"bool\");\n }"}]}