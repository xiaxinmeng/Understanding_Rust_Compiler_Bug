{"sha": "dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkOGY3Y2QxMjY0MDM5NTUyOTVjOGIwY2RiY2NjNWNhNWNiZWY3NjM=", "commit": {"author": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T14:09:51Z"}, "committer": {"name": "Inokentiy Babushkin", "email": "twk@twki.de", "date": "2017-06-10T14:09:51Z"}, "message": "Moved FileMap construction to it's own constructor.\n\nThe rationale is that BOM stripping is needed for lazy source loading\nfor external crates, and duplication can be avoided by moving the\ncorresponding functionality to libsyntax_pos.", "tree": {"sha": "65917c65b3a0261a0849325253b5474751bb88a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65917c65b3a0261a0849325253b5474751bb88a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXezFNCHL3+3lgSPSfvyOxSJN6OwFAlk7/ikACgkQfvyOxSJN\n6OyWsQ//VFSvxxgJp5kmZWbcOIlxWK24FlUaDHqBVXEiJs2uvUuQnFriqd8FCwwF\nlTr8x0lAX0WeITues6ibVljitONxmMx40xhv3cQFMk33EiLQ+kO172egd+Hkz8p3\nDNHYQhS56OpHkAasDLyTubhzxUDs7axPd3eqzI0+CRjMVa9gLlci80ip2iYx2rUq\nhZsj5lh4RDlI7013tihAB8ksFGRdhp6QCDnhGzSRrd585p0rTC2tQPATz/E2XdgL\n2r/BsJSGlTchcq3/JGcB1f0Tqz+D0wgySyM3tGd6EVqzQWvowhA3Z6qsBvHh2eP1\noaxcmeH2oenO9UxcTU/NgGm6gcz0hULCzvjqBaO9+NckeENLpvFRBclwAHl9Z4qz\nFSQaRY7DKYJfPAdxa74iDGPqYq1sJm2sOaLz2GJYxSRJhUlQQwj8yXY/pSVGKUbO\nsC+zpDFps3pS7P0Z+D3cRxuExS/UVphtmf714nixlux0SQx7PydPqoUZkxZRa+zl\nzZhCPMsagZB8YaO/UXpa0pVW2mGKd+AS4do6zRsVQoQiBvFRpja29qjIntlgGSt4\n9o7iup26QMWWWe1N77NJSU9xqb8wv1ChtxKU9FDjMqFsOZNX2cqrilvsVupaZaGw\n6YT2gIZwUEXrUOlD/mz33ELOmPknYWHxren72OiNEH0zsxFftc4=\n=mc2I\n-----END PGP SIGNATURE-----", "payload": "tree 65917c65b3a0261a0849325253b5474751bb88a5\nparent 3d2cff0c94a8a882eeca464ef638b0c912cc4f97\nauthor Inokentiy Babushkin <twk@twki.de> 1497103791 +0200\ncommitter Inokentiy Babushkin <twk@twki.de> 1497103791 +0200\n\nMoved FileMap construction to it's own constructor.\n\nThe rationale is that BOM stripping is needed for lazy source loading\nfor external crates, and duplication can be avoided by moving the\ncorresponding functionality to libsyntax_pos.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "html_url": "https://github.com/rust-lang/rust/commit/dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/comments", "author": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibabushkin", "id": 10811417, "node_id": "MDQ6VXNlcjEwODExNDE3", "avatar_url": "https://avatars.githubusercontent.com/u/10811417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibabushkin", "html_url": "https://github.com/ibabushkin", "followers_url": "https://api.github.com/users/ibabushkin/followers", "following_url": "https://api.github.com/users/ibabushkin/following{/other_user}", "gists_url": "https://api.github.com/users/ibabushkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibabushkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibabushkin/subscriptions", "organizations_url": "https://api.github.com/users/ibabushkin/orgs", "repos_url": "https://api.github.com/users/ibabushkin/repos", "events_url": "https://api.github.com/users/ibabushkin/events{/privacy}", "received_events_url": "https://api.github.com/users/ibabushkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2cff0c94a8a882eeca464ef638b0c912cc4f97", "html_url": "https://github.com/rust-lang/rust/commit/3d2cff0c94a8a882eeca464ef638b0c912cc4f97"}], "stats": {"total": 69, "additions": 42, "deletions": 27}, "files": [{"sha": "3508e8c070bb3889ffb470a856d3def26ade3e35", "filename": "src/Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "patch": "@@ -1682,6 +1682,7 @@ dependencies = [\n name = \"syntax_pos\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_data_structures 0.0.0\",\n  \"serialize 0.0.0\",\n ]\n "}, {"sha": "442b92be1cb852a6e2dca36f830443e61fd99092", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 3, "deletions": 27, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "patch": "@@ -27,12 +27,9 @@ use std::rc::Rc;\n \n use std::env;\n use std::fs;\n-use std::hash::Hasher;\n use std::io::{self, Read};\n use errors::CodeMapper;\n \n-use rustc_data_structures::stable_hasher::StableHasher;\n-\n /// Return the span itself if it doesn't come from a macro expansion,\n /// otherwise return the call site span up to the `enclosing_sp` by\n /// following the `expn_info` chain.\n@@ -161,34 +158,13 @@ impl CodeMap {\n \n     /// Creates a new filemap without setting its line information. If you don't\n     /// intend to set the line information yourself, you should use new_filemap_and_lines.\n-    pub fn new_filemap(&self, filename: FileName, mut src: String) -> Rc<FileMap> {\n+    pub fn new_filemap(&self, filename: FileName, src: String) -> Rc<FileMap> {\n         let start_pos = self.next_start_pos();\n         let mut files = self.files.borrow_mut();\n \n-        // Remove utf-8 BOM if any.\n-        if src.starts_with(\"\\u{feff}\") {\n-            src.drain(..3);\n-        }\n-\n-        let end_pos = start_pos + src.len();\n-\n         let (filename, was_remapped) = self.path_mapping.map_prefix(filename);\n-\n-        let mut hasher: StableHasher<u128> = StableHasher::new();\n-        hasher.write(src.as_bytes());\n-        let src_hash = hasher.finish();\n-\n-        let filemap = Rc::new(FileMap {\n-            name: filename,\n-            name_was_remapped: was_remapped,\n-            crate_of_origin: 0,\n-            src: Some(Rc::new(src)),\n-            src_hash: src_hash,\n-            start_pos: Pos::from_usize(start_pos),\n-            end_pos: Pos::from_usize(end_pos),\n-            lines: RefCell::new(Vec::new()),\n-            multibyte_chars: RefCell::new(Vec::new()),\n-        });\n+        let filemap =\n+            Rc::new(FileMap::new(filename, was_remapped, src, Pos::from_usize(start_pos)));\n \n         files.push(filemap.clone());\n "}, {"sha": "dd8129bab510fc28d7381b4c20a3fe614efb4c5b", "filename": "src/libsyntax_pos/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax_pos%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax_pos%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2FCargo.toml?ref=dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "patch": "@@ -10,3 +10,4 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n serialize = { path = \"../libserialize\" }\n+rustc_data_structures = { path = \"../librustc_data_structures\" }"}, {"sha": "75ce8b675f3d5b9bf8fb5147e00c8fec1e692ea6", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd8f7cd126403955295c8b0cdbccc5ca5cbef763/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=dd8f7cd126403955295c8b0cdbccc5ca5cbef763", "patch": "@@ -38,6 +38,11 @@ use std::ops::{Add, Sub};\n use std::rc::Rc;\n use std::cmp;\n use std::fmt;\n+use std::hash::Hasher;\n+\n+use rustc_data_structures::stable_hasher::StableHasher;\n+\n+extern crate rustc_data_structures;\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n \n@@ -522,6 +527,31 @@ impl fmt::Debug for FileMap {\n }\n \n impl FileMap {\n+    pub fn new(name: FileName,\n+               name_was_remapped: bool,\n+               mut src: String,\n+               start_pos: BytePos) -> FileMap {\n+        remove_bom(&mut src);\n+\n+        let mut hasher: StableHasher<u128> = StableHasher::new();\n+        hasher.write(src.as_bytes());\n+        let src_hash = hasher.finish();\n+\n+        let end_pos = start_pos.to_usize() + src.len();\n+\n+        FileMap {\n+            name: name,\n+            name_was_remapped: name_was_remapped,\n+            crate_of_origin: 0,\n+            src: Some(Rc::new(src)),\n+            src_hash: src_hash,\n+            start_pos: start_pos,\n+            end_pos: Pos::from_usize(end_pos),\n+            lines: RefCell::new(Vec::new()),\n+            multibyte_chars: RefCell::new(Vec::new()),\n+        }\n+    }\n+\n     /// EFFECT: register a start-of-line offset in the\n     /// table of line-beginnings.\n     /// UNCHECKED INVARIANT: these offsets must be added in the right\n@@ -621,6 +651,13 @@ impl FileMap {\n     }\n }\n \n+/// Remove utf-8 BOM if any.\n+fn remove_bom(src: &mut String) {\n+    if src.starts_with(\"\\u{feff}\") {\n+        src.drain(..3);\n+    }\n+}\n+\n // _____________________________________________________________________________\n // Pos, BytePos, CharPos\n //"}]}