{"sha": "ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "node_id": "C_kwDOAAsO6NoAKGVlNmIyMjhiNmE4Yjg3NGNhOGI2ZTg4Y2Q1OGQ0NjE4Y2YyMGZiMjA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-09T20:41:13Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-03-09T21:18:12Z"}, "message": "rustdoc: handle generics better when matching notable traits\n\nThis commit makes the `clean::Type::is_same` non-commutative, so\nthat a generic `impl` matches a concrete return, but a generic return\ndoes not match a concrete `impl`. It makes slice and vector Write\nfor `u8` not match on every generic return value.", "tree": {"sha": "320ff17ba2e730dbd3e387502ea3cbc72d5b1762", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320ff17ba2e730dbd3e387502ea3cbc72d5b1762"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "html_url": "https://github.com/rust-lang/rust/commit/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6015851f7e54d1e1e267afb315a2b4b23096d0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6015851f7e54d1e1e267afb315a2b4b23096d0d", "html_url": "https://github.com/rust-lang/rust/commit/c6015851f7e54d1e1e267afb315a2b4b23096d0d"}], "stats": {"total": 102, "additions": 96, "deletions": 6}, "files": [{"sha": "5217de7aa8a4fb0ec087775390c9e1ca69c3827b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "patch": "@@ -1471,11 +1471,37 @@ impl Type {\n         result\n     }\n \n-    /// Check if two types are \"potentially the same\".\n+    pub(crate) fn is_borrowed_ref(&self) -> bool {\n+        matches!(self, Type::BorrowedRef { .. })\n+    }\n+\n+    /// Check if two types are \"the same\" for documentation purposes.\n+    ///\n     /// This is different from `Eq`, because it knows that things like\n     /// `Placeholder` are possible matches for everything.\n+    ///\n+    /// This relation is not commutative when generics are involved:\n+    ///\n+    /// ```ignore(private)\n+    /// # // see types/tests.rs:is_same_generic for the real test\n+    /// use rustdoc::format::cache::Cache;\n+    /// use rustdoc::clean::types::{Type, PrimitiveType};\n+    /// let cache = Cache::new(false);\n+    /// let generic = Type::Generic(rustc_span::symbol::sym::Any);\n+    /// let unit = Type::Primitive(PrimitiveType::Unit);\n+    /// assert!(!generic.is_same(&unit, &cache));\n+    /// assert!(unit.is_same(&generic, &cache));\n+    /// ```\n+    ///\n+    /// An owned type is also the same as its borrowed variants (this is commutative),\n+    /// but `&T` is not the same as `&mut T`.\n     pub(crate) fn is_same(&self, other: &Self, cache: &Cache) -> bool {\n-        match (self, other) {\n+        let (self_cleared, other_cleared) = if !self.is_borrowed_ref() || !other.is_borrowed_ref() {\n+            (self.without_borrowed_ref(), other.without_borrowed_ref())\n+        } else {\n+            (self, other)\n+        };\n+        match (self_cleared, other_cleared) {\n             // Recursive cases.\n             (Type::Tuple(a), Type::Tuple(b)) => {\n                 a.len() == b.len() && a.iter().zip(b).all(|(a, b)| a.is_same(b, cache))\n@@ -1489,9 +1515,21 @@ impl Type {\n                 Type::BorrowedRef { mutability, type_, .. },\n                 Type::BorrowedRef { mutability: b_mutability, type_: b_type_, .. },\n             ) => mutability == b_mutability && type_.is_same(b_type_, cache),\n-            // Placeholders and generics are equal to all other types.\n+            // Placeholders are equal to all other types.\n             (Type::Infer, _) | (_, Type::Infer) => true,\n-            (Type::Generic(_), _) | (_, Type::Generic(_)) => true,\n+            // Generics match everything on the right, but not on the left.\n+            (_, Type::Generic(_)) => true,\n+            (Type::Generic(_), _) => false,\n+            // Paths account for both the path itself and its generics.\n+            (Type::Path { path: a }, Type::Path { path: b }) => {\n+                a.def_id() == b.def_id()\n+                    && a.generics()\n+                        .zip(b.generics())\n+                        .map(|(ag, bg)| {\n+                            ag.iter().zip(bg.iter()).all(|(at, bt)| at.is_same(bt, cache))\n+                        })\n+                        .unwrap_or(true)\n+            }\n             // Other cases, such as primitives, just use recursion.\n             (a, b) => a\n                 .def_id(cache)"}, {"sha": "7df87a9804aa26baf870244e65f9e613c12c0ab8", "filename": "src/librustdoc/clean/types/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes%2Ftests.rs?ref=ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "patch": "@@ -69,3 +69,14 @@ fn should_not_trim() {\n     run_test(\"\\t    line1  \\n\\t    line2\", \"line1  \\nline2\");\n     run_test(\"    \\tline1  \\n    \\tline2\", \"line1  \\nline2\");\n }\n+\n+#[test]\n+fn is_same_generic() {\n+    use crate::clean::types::{PrimitiveType, Type};\n+    use crate::formats::cache::Cache;\n+    let cache = Cache::new(false);\n+    let generic = Type::Generic(rustc_span::symbol::sym::Any);\n+    let unit = Type::Primitive(PrimitiveType::Unit);\n+    assert!(!generic.is_same(&unit, &cache));\n+    assert!(unit.is_same(&generic, &cache));\n+}"}, {"sha": "f8c26dc4706b19f67dcea6ab23910049a2d1afab", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "patch": "@@ -1291,7 +1291,7 @@ pub(crate) fn notable_traits_button(ty: &clean::Type, cx: &mut Context<'_>) -> O\n     if let Some(impls) = cx.cache().impls.get(&did) {\n         for i in impls {\n             let impl_ = i.inner_impl();\n-            if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+            if !ty.is_same(&impl_.for_, cx.cache()) {\n                 // Two different types might have the same did,\n                 // without actually being the same.\n                 continue;\n@@ -1327,7 +1327,7 @@ fn notable_traits_decl(ty: &clean::Type, cx: &Context<'_>) -> (String, String) {\n \n     for i in impls {\n         let impl_ = i.inner_impl();\n-        if !impl_.for_.without_borrowed_ref().is_same(ty.without_borrowed_ref(), cx.cache()) {\n+        if !ty.is_same(&impl_.for_, cx.cache()) {\n             // Two different types might have the same did,\n             // without actually being the same.\n             continue;"}, {"sha": "ef206710b4b0829b9a757b1dbd36695fb3d8703f", "filename": "tests/rustdoc/notable-trait/doc-notable_trait-slice.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fdoc-notable_trait-slice.rs?ref=ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "patch": "@@ -18,3 +18,9 @@ pub fn bare_fn_matches() -> &'static [SomeStruct] {\n pub fn bare_fn_no_matches() -> &'static [OtherStruct] {\n     &[]\n }\n+\n+// @has doc_notable_trait_slice/fn.bare_fn_mut_no_matches.html\n+// @count - '//script[@id=\"notable-traits-data\"]' 0\n+pub fn bare_fn_mut_no_matches() -> &'static mut [SomeStruct] {\n+    &mut []\n+}"}, {"sha": "7bfe9d43ea986dc8a9e02b2a962ad5d0c95f8948", "filename": "tests/rustdoc/notable-trait/notable-trait-generics.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fnotable-trait%2Fnotable-trait-generics.rs?ref=ee6b228b6a8b874ca8b6e88cd58d4618cf20fb20", "patch": "@@ -0,0 +1,35 @@\n+#![feature(doc_notable_trait)]\n+\n+// Notable traits SHOULD be shown when the `impl` has a generic type and the\n+// return type has a concrete type.\n+pub mod generic_return {\n+    pub struct Wrapper<T>(T);\n+\n+    #[doc(notable_trait)]\n+    pub trait NotableTrait {}\n+\n+    impl NotableTrait for Wrapper<u8> {}\n+\n+    // @has notable_trait_generics/generic_return/fn.returning.html\n+    // @!has - '//a[@class=\"tooltip\"]/@data-notable-ty' 'Wrapper<T>'\n+    pub fn returning<T>() -> Wrapper<T> {\n+        loop {}\n+    }\n+}\n+\n+// Notable traits SHOULD NOT be shown when the `impl` has a concrete type and\n+// the return type has a generic type.\n+pub mod generic_impl {\n+    pub struct Wrapper<T>(T);\n+\n+    #[doc(notable_trait)]\n+    pub trait NotableTrait {}\n+\n+    impl<T> NotableTrait for Wrapper<T> {}\n+\n+    // @has notable_trait_generics/generic_impl/fn.returning.html\n+    // @has - '//a[@class=\"tooltip\"]/@data-notable-ty' 'Wrapper<u8>'\n+    pub fn returning() -> Wrapper<u8> {\n+        loop {}\n+    }\n+}"}]}