{"sha": "87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3MzIwYTlmMjc2OGU1ZTAxMWE2YzhlZGFjZWIzZDNiN2RkYzI3NDc=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T09:20:55Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-01-25T09:20:55Z"}, "message": "Replacing str::unsafe_from_bytes with str::from_bytes (part 4)", "tree": {"sha": "dc44d7b173b9419b4a48cbb451635358b88ffab5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc44d7b173b9419b4a48cbb451635358b88ffab5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "html_url": "https://github.com/rust-lang/rust/commit/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa4befd6df4a26be0776d6aab0a7925232d76a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa4befd6df4a26be0776d6aab0a7925232d76a7", "html_url": "https://github.com/rust-lang/rust/commit/eaa4befd6df4a26be0776d6aab0a7925232d76a7"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "de622ad82516d52b5ac68bf41468a1ff7a522a72", "filename": "src/comp/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdriver.rs?ref=87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "patch": "@@ -96,7 +96,7 @@ fn get_input_str(sess: session, infile: str) -> str {\n           }\n         }\n     } else { io::stdin() };\n-    str::unsafe_from_bytes(stream.read_whole_stream())\n+    str::from_bytes(stream.read_whole_stream())\n }\n \n fn time<T>(do_it: bool, what: str, thunk: fn@() -> T) -> T {"}, {"sha": "7711c819b064d970e353046d07220b063cc45fa4", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "patch": "@@ -83,7 +83,7 @@ fn item_family(item: ebml::doc) -> u8 {\n \n fn item_symbol(item: ebml::doc) -> str {\n     let sym = ebml::get_doc(item, tag_items_data_item_symbol);\n-    ret str::unsafe_from_bytes(ebml::doc_data(sym));\n+    ret str::from_bytes(ebml::doc_data(sym));\n }\n \n fn variant_tag_id(d: ebml::doc) -> ast::def_id {\n@@ -161,7 +161,7 @@ fn tag_variant_ids(item: ebml::doc, cdata: cmd) -> [ast::def_id] {\n // definition the path refers to.\n fn resolve_path(path: [ast::ident], data: @[u8]) -> [ast::def_id] {\n     fn eq_item(data: [u8], s: str) -> bool {\n-        ret str::eq(str::unsafe_from_bytes(data), s);\n+        ret str::eq(str::from_bytes(data), s);\n     }\n     let s = str::connect(path, \"::\");\n     let md = ebml::new_doc(data);\n@@ -177,7 +177,7 @@ fn resolve_path(path: [ast::ident], data: @[u8]) -> [ast::def_id] {\n \n fn item_name(item: ebml::doc) -> ast::ident {\n     let name = ebml::get_doc(item, tag_paths_data_name);\n-    str::unsafe_from_bytes(ebml::doc_data(name))\n+    str::from_bytes(ebml::doc_data(name))\n }\n \n fn lookup_item_name(data: @[u8], id: ast::node_id) -> ast::ident {\n@@ -326,7 +326,7 @@ fn read_path(d: ebml::doc) -> {path: str, pos: uint} {\n     let desc = ebml::doc_data(d);\n     let pos = ebml::be_uint_from_bytes(@desc, 0u, 4u);\n     let pathbytes = vec::slice::<u8>(desc, 4u, vec::len::<u8>(desc));\n-    let path = str::unsafe_from_bytes(pathbytes);\n+    let path = str::from_bytes(pathbytes);\n     ret {path: path, pos: pos};\n }\n \n@@ -359,21 +359,21 @@ fn get_meta_items(md: ebml::doc) -> [@ast::meta_item] {\n     let items: [@ast::meta_item] = [];\n     ebml::tagged_docs(md, tag_meta_item_word) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n+        let n = str::from_bytes(ebml::doc_data(nd));\n         items += [attr::mk_word_item(n)];\n     };\n     ebml::tagged_docs(md, tag_meta_item_name_value) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n         let vd = ebml::get_doc(meta_item_doc, tag_meta_item_value);\n-        let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n-        let v = str::unsafe_from_bytes(ebml::doc_data(vd));\n+        let n = str::from_bytes(ebml::doc_data(nd));\n+        let v = str::from_bytes(ebml::doc_data(vd));\n         // FIXME (#611): Should be able to decode meta_name_value variants,\n         // but currently they can't be encoded\n         items += [attr::mk_name_value_item_str(n, v)];\n     };\n     ebml::tagged_docs(md, tag_meta_item_list) {|meta_item_doc|\n         let nd = ebml::get_doc(meta_item_doc, tag_meta_item_name);\n-        let n = str::unsafe_from_bytes(ebml::doc_data(nd));\n+        let n = str::from_bytes(ebml::doc_data(nd));\n         let subitems = get_meta_items(meta_item_doc);\n         items += [attr::mk_list_item(n, subitems)];\n     };\n@@ -428,7 +428,7 @@ fn get_crate_deps(data: @[u8]) -> [crate_dep] {\n     let depsdoc = ebml::get_doc(cratedoc, tag_crate_deps);\n     let crate_num = 1;\n     ebml::tagged_docs(depsdoc, tag_crate_dep) {|depdoc|\n-        let depname = str::unsafe_from_bytes(ebml::doc_data(depdoc));\n+        let depname = str::from_bytes(ebml::doc_data(depdoc));\n         deps += [{cnum: crate_num, ident: depname}];\n         crate_num += 1;\n     };\n@@ -448,7 +448,7 @@ fn list_crate_deps(data: @[u8], out: io::writer) {\n fn get_crate_hash(data: @[u8]) -> str {\n     let cratedoc = ebml::new_doc(data);\n     let hashdoc = ebml::get_doc(cratedoc, tag_crate_hash);\n-    ret str::unsafe_from_bytes(ebml::doc_data(hashdoc));\n+    ret str::from_bytes(ebml::doc_data(hashdoc));\n }\n \n fn list_crate_items(bytes: @[u8], md: ebml::doc, out: io::writer) {"}, {"sha": "f6a25ea61a7d543863cf08f110a30f2bc6f039bf", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87320a9f2768e5e011a6c8edaceb3d3b7ddc2747/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=87320a9f2768e5e011a6c8edaceb3d3b7ddc2747", "patch": "@@ -671,7 +671,7 @@ fn gather_comments_and_literals(cm: codemap::codemap,\n                                 path: str,\n                                 srdr: io::reader) ->\n    {cmnts: [cmnt], lits: [lit]} {\n-    let src = str::unsafe_from_bytes(srdr.read_whole_stream());\n+    let src = str::from_bytes(srdr.read_whole_stream());\n     let itr = @interner::mk::<str>(str::hash, str::eq);\n     let rdr = new_reader(cm, diagnostic, src,\n                          codemap::new_filemap(path, 0u, 0u), itr);"}]}