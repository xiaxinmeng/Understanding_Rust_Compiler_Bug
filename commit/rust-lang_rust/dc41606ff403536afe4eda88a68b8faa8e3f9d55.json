{"sha": "dc41606ff403536afe4eda88a68b8faa8e3f9d55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDE2MDZmZjQwMzUzNmFmZTRlZGE4OGE2OGI4ZmFhOGUzZjlkNTU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-25T14:14:39Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-30T13:30:58Z"}, "message": "Support user type annotations in `ref` bindings.\n\nThis commit adds support for user type annotations in variables declared\nusing `ref` bindings. When a variable declared using a `ref` binding,\nthen the `LocalDecl` has the type `&T` where the `&` was introduced by\nthe `ref` binding but the canonicalized type annotation has only a\n`T` since the reference is implicit with the `ref` binding.\n\nTherefore, to support type annotations, the canonicalized type\nannotation either needs wrapped in a reference, or the `LocalDecl` type\nmust have a wrapped reference removed for comparison. It is easier to\nremove the outer reference from the `LocalDecl` for the purpose of\ncomparison, so that is the approach this commit takes.", "tree": {"sha": "8d3cf44d31e1ad92e0b000512c384f14cbe4c90c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d3cf44d31e1ad92e0b000512c384f14cbe4c90c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc41606ff403536afe4eda88a68b8faa8e3f9d55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwoyJIACgkQAXYLT59T\n8VRPhhAAjgesdtOW2gYlZuhZnMVaPmARJBFroB11DeQl1/5FfJS1xBUiLrqMhhfR\ngKCb3YnzUp9Od8kJsHIXn63gjZV+wAMrvOjAbMsbyfJreJeQ4cYNKpeu6qRf6e/+\nYHOQiwHKnL+XQUZNEaEWKS5WUuRgJ6umIN1Zv1UaDg0tZuT7mq7uOBHjlscOaLAQ\n6nZ1ClDuSKrUrdk4/e6T5wCNPHTrWvLIJMqFeTi5oTXcV9gfxCmX+BpGF6cMftew\nSnhCzqOx13R3A0V2Qn7kyj7fCCv6BrsITyBmN1KLc88Xm+acqiKlqqe0q0spMN9V\n5qoVXBVqTOaNjwJavumcF1fnXwzYAtot+m7GJbBFBauIer0OSHkZgWWfnXChzyKY\nxrDz8zmEFlBhh9NG/Myn/GiYl7RyMzVs/qvSHm/TlDOYtUmciy6f3Efsvh5XmShL\nr2//QlaNA3bu+y3fmqNJVl0KKL/GZxGUA/tUGMdEgNNJdaKJLWFDAgXXwwlV8W90\neLBoQB0T5XGS2dXPWfsPLpLZvVyCx15I8iUCJhqChAemg+sda9+OTbmIqQFn31cM\ntZBgplsCpJ8wI3O+RBBM5TqtoD5lqcbdG6L16f9/j7p88Wt/sIbfRJmcamNXhobd\n+josU1Qu8YGXPYvstB+YA65ng2NpIcdETy8aDlDkizbdHNoRCQg=\n=iCEo\n-----END PGP SIGNATURE-----", "payload": "tree 8d3cf44d31e1ad92e0b000512c384f14cbe4c90c\nparent 162dcdc16f9b004b35160c9dd69faab29fc459e4\nauthor David Wood <david@davidtw.co> 1543155279 +0100\ncommitter David Wood <david@davidtw.co> 1546176658 +0100\n\nSupport user type annotations in `ref` bindings.\n\nThis commit adds support for user type annotations in variables declared\nusing `ref` bindings. When a variable declared using a `ref` binding,\nthen the `LocalDecl` has the type `&T` where the `&` was introduced by\nthe `ref` binding but the canonicalized type annotation has only a\n`T` since the reference is implicit with the `ref` binding.\n\nTherefore, to support type annotations, the canonicalized type\nannotation either needs wrapped in a reference, or the `LocalDecl` type\nmust have a wrapped reference removed for comparison. It is easier to\nremove the outer reference from the `LocalDecl` for the purpose of\ncomparison, so that is the approach this commit takes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc41606ff403536afe4eda88a68b8faa8e3f9d55", "html_url": "https://github.com/rust-lang/rust/commit/dc41606ff403536afe4eda88a68b8faa8e3f9d55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc41606ff403536afe4eda88a68b8faa8e3f9d55/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "162dcdc16f9b004b35160c9dd69faab29fc459e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/162dcdc16f9b004b35160c9dd69faab29fc459e4", "html_url": "https://github.com/rust-lang/rust/commit/162dcdc16f9b004b35160c9dd69faab29fc459e4"}], "stats": {"total": 60, "additions": 40, "deletions": 20}, "files": [{"sha": "2c49dbd969d5991d5a59661b889e28e8425aeaec", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -307,8 +307,20 @@ impl<'a, 'b, 'gcx, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         self.sanitize_type(local_decl, local_decl.ty);\n \n         for (user_ty, span) in local_decl.user_ty.projections_and_spans() {\n+            let ty = if !local_decl.is_nonref_binding() {\n+                // If we have a binding of the form `let ref x: T = ..` then remove the outermost\n+                // reference so we can check the type annotation for the remaining type.\n+                if let ty::Ref(_, rty, _) = local_decl.ty.sty {\n+                    rty\n+                } else {\n+                    bug!(\"{:?} with ref binding has wrong type {}\", local, local_decl.ty);\n+                }\n+            } else {\n+                local_decl.ty\n+            };\n+\n             if let Err(terr) = self.cx.relate_type_and_user_type(\n-                local_decl.ty,\n+                ty,\n                 ty::Variance::Invariant,\n                 user_ty,\n                 Locations::All(*span),"}, {"sha": "41718cfc87012f3366f4ffa07945e402978af37f", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -141,6 +141,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             None, remainder_span, lint_level, slice::from_ref(&pattern),\n                             ArmHasGuard(false), None);\n \n+                        debug!(\"ast_block_stmts: pattern={:?}\", pattern);\n                         this.visit_bindings(\n                             &pattern,\n                             &PatternTypeProjections::none(),"}, {"sha": "085c58ef5ff66af50c50d07d3efe93ee657e3ef1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -409,6 +409,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         );\n         let mut scope = self.source_scope;\n         let num_patterns = patterns.len();\n+        debug!(\"declare_bindings: patterns={:?}\", patterns);\n         self.visit_bindings(\n             &patterns[0],\n             &PatternTypeProjections::none(),\n@@ -499,6 +500,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             &PatternTypeProjections<'tcx>,\n         ),\n     ) {\n+        debug!(\"visit_bindings: pattern={:?} pattern_user_ty={:?}\", pattern, pattern_user_ty);\n         match *pattern.kind {\n             PatternKind::Binding {\n                 mutability,\n@@ -509,19 +511,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 ref subpattern,\n                 ..\n             } => {\n-                let pattern_ref_binding; // sidestep temp lifetime limitations.\n-                let binding_user_ty = match mode {\n-                    BindingMode::ByValue => { pattern_user_ty }\n-                    BindingMode::ByRef(..) => {\n-                        // If this is a `ref` binding (e.g., `let ref\n-                        // x: T = ..`), then the type of `x` is not\n-                        // `T` but rather `&T`.\n-                        pattern_ref_binding = pattern_user_ty.ref_binding();\n-                        &pattern_ref_binding\n-                    }\n-                };\n-\n-                f(self, mutability, name, mode, var, pattern.span, ty, binding_user_ty);\n+                f(self, mutability, name, mode, var, pattern.span, ty, pattern_user_ty);\n                 if let Some(subpattern) = subpattern.as_ref() {\n                     self.visit_bindings(subpattern, pattern_user_ty, f);\n                 }\n@@ -565,6 +555,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             PatternKind::Leaf { ref subpatterns } => {\n                 for subpattern in subpatterns {\n                     let subpattern_user_ty = pattern_user_ty.leaf(subpattern.field);\n+                    debug!(\"visit_bindings: subpattern_user_ty={:?}\", subpattern_user_ty);\n                     self.visit_bindings(&subpattern.pattern, &subpattern_user_ty, f);\n                 }\n             }"}, {"sha": "6d562c69b2dc500fe98b9a0542edc0af63a49324", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -79,11 +79,6 @@ impl<'tcx> PatternTypeProjections<'tcx> {\n         PatternTypeProjections { contents: vec![] }\n     }\n \n-    pub(crate) fn ref_binding(&self) -> Self {\n-        // FIXME(#55401): ignore for now\n-        PatternTypeProjections { contents: vec![] }\n-    }\n-\n     fn map_projs(&self,\n                  mut f: impl FnMut(&PatternTypeProjection<'tcx>) -> PatternTypeProjection<'tcx>)\n                  -> Self\n@@ -803,7 +798,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         };\n \n         if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n-            debug!(\"lower_variant_or_leaf: user_ty={:?} span={:?}\", user_ty, span);\n+            debug!(\"lower_variant_or_leaf: kind={:?} user_ty={:?} span={:?}\", kind, user_ty, span);\n             kind = PatternKind::AscribeUserType {\n                 subpattern: Pattern {\n                     span,"}, {"sha": "36de41ef8a170bf33060ca4e69b771b746c9854f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -2388,6 +2388,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn to_ty_saving_user_provided_ty(&self, ast_ty: &hir::Ty) -> Ty<'tcx> {\n         let ty = self.to_ty(ast_ty);\n+        debug!(\"to_ty_saving_user_provided_ty: ty={:?}\", ty);\n \n         // If the type given by the user has free regions, save it for\n         // later, since NLL would like to enforce those. Also pass in\n@@ -2398,6 +2399,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // already sufficiently enforced with erased regions. =)\n         if ty.has_free_regions() || ty.has_projections() {\n             let c_ty = self.infcx.canonicalize_response(&UserTypeAnnotation::Ty(ty));\n+            debug!(\"to_ty_saving_user_provided_ty: c_ty={:?}\", c_ty);\n             self.tables.borrow_mut().user_provided_types_mut().insert(ast_ty.hir_id, c_ty);\n         }\n "}, {"sha": "2fa234491087d679d10cfe68653575753d3ea00d", "filename": "src/test/ui/nll/issue-55401.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.rs?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -0,0 +1,8 @@\n+#![feature(nll)]\n+\n+fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+    let (ref y, _z): (&'a u32, u32) = (&22, 44);\n+    *y //~ ERROR\n+}\n+\n+fn main() {}"}, {"sha": "9e50db7b6045da374bd9591227b755edec3593cc", "filename": "src/test/ui/nll/issue-55401.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc41606ff403536afe4eda88a68b8faa8e3f9d55/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-55401.stderr?ref=dc41606ff403536afe4eda88a68b8faa8e3f9d55", "patch": "@@ -0,0 +1,11 @@\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-55401.rs:5:5\n+   |\n+LL | fn static_to_a_to_static_through_ref_in_tuple<'a>(x: &'a u32) -> &'static u32 {\n+   |                                               -- lifetime `'a` defined here\n+LL |     let (ref y, _z): (&'a u32, u32) = (&22, 44);\n+LL |     *y //~ ERROR\n+   |     ^^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}]}