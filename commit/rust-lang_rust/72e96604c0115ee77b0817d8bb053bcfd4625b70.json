{"sha": "72e96604c0115ee77b0817d8bb053bcfd4625b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTk2NjA0YzAxMTVlZTc3YjA4MTdkOGJiMDUzYmNmZDQ2MjViNzA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-03T19:48:25Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-10T20:57:05Z"}, "message": "Remove io::LocalOutput and use Arc<Mutex<dyn>> for local streams.", "tree": {"sha": "fc757f7d59d96f6ddab5dc313bf841e83b06727d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc757f7d59d96f6ddab5dc313bf841e83b06727d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e96604c0115ee77b0817d8bb053bcfd4625b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e96604c0115ee77b0817d8bb053bcfd4625b70", "html_url": "https://github.com/rust-lang/rust/commit/72e96604c0115ee77b0817d8bb053bcfd4625b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e96604c0115ee77b0817d8bb053bcfd4625b70/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf9cf7c923eb01146971429044f216a3ca905e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9cf7c923eb01146971429044f216a3ca905e06", "html_url": "https://github.com/rust-lang/rust/commit/cf9cf7c923eb01146971429044f216a3ca905e06"}], "stats": {"total": 169, "additions": 51, "deletions": 118}, "files": [{"sha": "d90fff3bae59ad7adb64c33278a80ca9b23dca27", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -25,7 +25,7 @@ use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n use std::env;\n use std::env::consts::{DLL_PREFIX, DLL_SUFFIX};\n-use std::io::{self, Write};\n+use std::io;\n use std::lazy::SyncOnceCell;\n use std::mem;\n use std::ops::DerefMut;\n@@ -106,21 +106,6 @@ fn get_stack_size() -> Option<usize> {\n     env::var_os(\"RUST_MIN_STACK\").is_none().then_some(STACK_SIZE)\n }\n \n-struct Sink(Arc<Mutex<Vec<u8>>>);\n-impl Write for Sink {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Write::write(&mut *self.0.lock().unwrap(), data)\n-    }\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}\n-impl io::LocalOutput for Sink {\n-    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n-        Box::new(Self(self.0.clone()))\n-    }\n-}\n-\n /// Like a `thread::Builder::spawn` followed by a `join()`, but avoids the need\n /// for `'static` bounds.\n #[cfg(not(parallel_compiler))]\n@@ -164,7 +149,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n     let main_handler = move || {\n         rustc_span::with_session_globals(edition, || {\n             if let Some(stderr) = stderr {\n-                io::set_panic(Some(box Sink(stderr.clone())));\n+                io::set_panic(Some(stderr.clone()));\n             }\n             f()\n         })\n@@ -204,7 +189,7 @@ pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Se\n             let main_handler = move |thread: rayon::ThreadBuilder| {\n                 rustc_span::SESSION_GLOBALS.set(session_globals, || {\n                     if let Some(stderr) = stderr {\n-                        io::set_panic(Some(box Sink(stderr.clone())));\n+                        io::set_panic(Some(stderr.clone()));\n                     }\n                     thread.run()\n                 })"}, {"sha": "6b3c86cb0df87ae176a17ecc30841279ed8aa241", "filename": "library/std/src/io/impls.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fimpls.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -209,20 +209,6 @@ impl<B: BufRead + ?Sized> BufRead for Box<B> {\n     }\n }\n \n-// Used by panicking::default_hook\n-#[cfg(test)]\n-/// This impl is only used by printing logic, so any error returned is always\n-/// of kind `Other`, and should be ignored.\n-impl Write for dyn ::realstd::io::LocalOutput {\n-    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n-        (*self).write(buf).map_err(|_| ErrorKind::Other.into())\n-    }\n-\n-    fn flush(&mut self) -> io::Result<()> {\n-        (*self).flush().map_err(|_| ErrorKind::Other.into())\n-    }\n-}\n-\n // =============================================================================\n // In-memory buffer implementations\n "}, {"sha": "e6b9314fd886d669388927a1d97c70344a953fa3", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -277,7 +277,7 @@ pub use self::stdio::{StderrLock, StdinLock, StdoutLock};\n pub use self::stdio::{_eprint, _print};\n #[unstable(feature = \"libstd_io_internals\", issue = \"42788\")]\n #[doc(no_inline, hidden)]\n-pub use self::stdio::{set_panic, set_print, LocalOutput};\n+pub use self::stdio::{set_panic, set_print};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::util::{copy, empty, repeat, sink, Empty, Repeat, Sink};\n "}, {"sha": "e3e8a7635919cd750457883bcd9413e159bdf9a7", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 20, "deletions": 37, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -10,22 +10,24 @@ use crate::fmt;\n use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter};\n use crate::lazy::SyncOnceCell;\n use crate::sync::atomic::{AtomicBool, Ordering};\n-use crate::sync::{Mutex, MutexGuard};\n+use crate::sync::{Arc, Mutex, MutexGuard};\n use crate::sys::stdio;\n use crate::sys_common;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n use crate::thread::LocalKey;\n \n+type LocalStream = Arc<Mutex<dyn Write + Send>>;\n+\n thread_local! {\n     /// Used by the test crate to capture the output of the print! and println! macros.\n-    static LOCAL_STDOUT: RefCell<Option<Box<dyn LocalOutput>>> = {\n+    static LOCAL_STDOUT: RefCell<Option<LocalStream>> = {\n         RefCell::new(None)\n     }\n }\n \n thread_local! {\n     /// Used by the test crate to capture the output of the eprint! and eprintln! macros, and panics.\n-    static LOCAL_STDERR: RefCell<Option<Box<dyn LocalOutput>>> = {\n+    static LOCAL_STDERR: RefCell<Option<LocalStream>> = {\n         RefCell::new(None)\n     }\n }\n@@ -888,18 +890,6 @@ impl fmt::Debug for StderrLock<'_> {\n     }\n }\n \n-/// A writer than can be cloned to new threads.\n-#[unstable(\n-    feature = \"set_stdio\",\n-    reason = \"this trait may disappear completely or be replaced \\\n-                     with a more general mechanism\",\n-    issue = \"none\"\n-)]\n-#[doc(hidden)]\n-pub trait LocalOutput: Write + Send {\n-    fn clone_box(&self) -> Box<dyn LocalOutput>;\n-}\n-\n /// Resets the thread-local stderr handle to the specified writer\n ///\n /// This will replace the current thread's stderr handle, returning the old\n@@ -915,18 +905,17 @@ pub trait LocalOutput: Write + Send {\n     issue = \"none\"\n )]\n #[doc(hidden)]\n-pub fn set_panic(sink: Option<Box<dyn LocalOutput>>) -> Option<Box<dyn LocalOutput>> {\n+pub fn set_panic(sink: Option<LocalStream>) -> Option<LocalStream> {\n     use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDERR is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n-    let s = LOCAL_STDERR.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(\n-        |mut s| {\n-            let _ = s.flush();\n+    let s =\n+        LOCAL_STDERR.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(|s| {\n+            let _ = s.lock().unwrap_or_else(|e| e.into_inner()).flush();\n             Some(s)\n-        },\n-    );\n+        });\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n     s\n }\n@@ -946,35 +935,29 @@ pub fn set_panic(sink: Option<Box<dyn LocalOutput>>) -> Option<Box<dyn LocalOutp\n     issue = \"none\"\n )]\n #[doc(hidden)]\n-pub fn set_print(sink: Option<Box<dyn LocalOutput>>) -> Option<Box<dyn LocalOutput>> {\n+pub fn set_print(sink: Option<LocalStream>) -> Option<LocalStream> {\n     use crate::mem;\n     if sink.is_none() && !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         // LOCAL_STDOUT is definitely None since LOCAL_STREAMS is false.\n         return None;\n     }\n-    let s = LOCAL_STDOUT.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(\n-        |mut s| {\n-            let _ = s.flush();\n+    let s =\n+        LOCAL_STDOUT.with(move |slot| mem::replace(&mut *slot.borrow_mut(), sink)).and_then(|s| {\n+            let _ = s.lock().unwrap_or_else(|e| e.into_inner()).flush();\n             Some(s)\n-        },\n-    );\n+        });\n     LOCAL_STREAMS.store(true, Ordering::Relaxed);\n     s\n }\n \n-pub(crate) fn clone_io() -> (Option<Box<dyn LocalOutput>>, Option<Box<dyn LocalOutput>>) {\n+pub(crate) fn clone_io() -> (Option<LocalStream>, Option<LocalStream>) {\n     // Don't waste time when LOCAL_{STDOUT,STDERR} are definitely None.\n     if !LOCAL_STREAMS.load(Ordering::Relaxed) {\n         return (None, None);\n     }\n \n     LOCAL_STDOUT.with(|stdout| {\n-        LOCAL_STDERR.with(|stderr| {\n-            (\n-                stdout.borrow().as_ref().map(|o| o.clone_box()),\n-                stderr.borrow().as_ref().map(|o| o.clone_box()),\n-            )\n-        })\n+        LOCAL_STDERR.with(|stderr| (stdout.borrow().clone(), stderr.borrow().clone()))\n     })\n }\n \n@@ -990,7 +973,7 @@ pub(crate) fn clone_io() -> (Option<Box<dyn LocalOutput>>, Option<Box<dyn LocalO\n /// However, if the actual I/O causes an error, this function does panic.\n fn print_to<T>(\n     args: fmt::Arguments<'_>,\n-    local_s: &'static LocalKey<RefCell<Option<Box<dyn LocalOutput>>>>,\n+    local_s: &'static LocalKey<RefCell<Option<LocalStream>>>,\n     global_s: fn() -> T,\n     label: &str,\n ) where\n@@ -1005,8 +988,8 @@ fn print_to<T>(\n                     // our printing recursively panics/prints, so the recursive\n                     // panic/print goes to the global sink instead of our local sink.\n                     let prev = s.borrow_mut().take();\n-                    if let Some(mut w) = prev {\n-                        let result = w.write_fmt(args);\n+                    if let Some(w) = prev {\n+                        let result = w.lock().unwrap_or_else(|e| e.into_inner()).write_fmt(args);\n                         *s.borrow_mut() = Some(w);\n                         return result;\n                     }"}, {"sha": "9e9584baeb3bc9c3a3a19a05aa0bbe1f94d37985", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -218,10 +218,29 @@ fn default_hook(info: &PanicInfo<'_>) {\n         }\n     };\n \n-    if let Some(mut local) = set_panic(None) {\n-        // NB. In `cfg(test)` this uses the forwarding impl\n-        // for `dyn ::realstd::io::LocalOutput`.\n-        write(&mut local);\n+    if let Some(local) = set_panic(None) {\n+        let mut stream = local.lock().unwrap_or_else(|e| e.into_inner());\n+\n+        #[cfg(test)]\n+        {\n+            use crate::io;\n+            struct Wrapper<'a>(&'a mut (dyn ::realstd::io::Write + Send));\n+            impl io::Write for Wrapper<'_> {\n+                fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+                    self.0.write(buf).map_err(|_| io::ErrorKind::Other.into())\n+                }\n+                fn flush(&mut self) -> io::Result<()> {\n+                    self.0.flush().map_err(|_| io::ErrorKind::Other.into())\n+                }\n+            }\n+            write(&mut Wrapper(&mut *stream));\n+        }\n+\n+        #[cfg(not(test))]\n+        write(&mut *stream);\n+\n+        drop(stream);\n+\n         set_panic(Some(local));\n     } else if let Some(mut out) = panic_output() {\n         write(&mut out);"}, {"sha": "396dd8d3436ba28e8c5421a2ea1277fe0c905bcf", "filename": "library/test/src/bench.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fbench.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -2,8 +2,7 @@\n pub use std::hint::black_box;\n \n use super::{\n-    event::CompletedTest, helpers::sink::Sink, options::BenchMode, test_result::TestResult,\n-    types::TestDesc, Sender,\n+    event::CompletedTest, options::BenchMode, test_result::TestResult, types::TestDesc, Sender,\n };\n \n use crate::stats;\n@@ -186,10 +185,7 @@ where\n \n     let data = Arc::new(Mutex::new(Vec::new()));\n     let oldio = if !nocapture {\n-        Some((\n-            io::set_print(Some(Sink::new_boxed(&data))),\n-            io::set_panic(Some(Sink::new_boxed(&data))),\n-        ))\n+        Some((io::set_print(Some(data.clone())), io::set_panic(Some(data.clone()))))\n     } else {\n         None\n     };"}, {"sha": "b7f00c4c86cdf27f61416b98c5461276989ee80e", "filename": "library/test/src/helpers/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -5,4 +5,3 @@ pub mod concurrency;\n pub mod exit_code;\n pub mod isatty;\n pub mod metrics;\n-pub mod sink;"}, {"sha": "dfbf0a3b72f54cd9d4f744ba937a27b98ce39616", "filename": "library/test/src/helpers/sink.rs", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cf9cf7c923eb01146971429044f216a3ca905e06/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9cf7c923eb01146971429044f216a3ca905e06/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fsink.rs?ref=cf9cf7c923eb01146971429044f216a3ca905e06", "patch": "@@ -1,31 +0,0 @@\n-//! Module providing a helper structure to capture output in subprocesses.\n-\n-use std::{\n-    io,\n-    io::prelude::Write,\n-    sync::{Arc, Mutex},\n-};\n-\n-#[derive(Clone)]\n-pub struct Sink(Arc<Mutex<Vec<u8>>>);\n-\n-impl Sink {\n-    pub fn new_boxed(data: &Arc<Mutex<Vec<u8>>>) -> Box<Self> {\n-        Box::new(Self(data.clone()))\n-    }\n-}\n-\n-impl io::LocalOutput for Sink {\n-    fn clone_box(&self) -> Box<dyn io::LocalOutput> {\n-        Box::new(self.clone())\n-    }\n-}\n-\n-impl Write for Sink {\n-    fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-        Write::write(&mut *self.0.lock().unwrap(), data)\n-    }\n-    fn flush(&mut self) -> io::Result<()> {\n-        Ok(())\n-    }\n-}"}, {"sha": "7d0ce6dfbd1743408d21dd4b2655f4e9c92d4c2e", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e96604c0115ee77b0817d8bb053bcfd4625b70/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=72e96604c0115ee77b0817d8bb053bcfd4625b70", "patch": "@@ -89,7 +89,6 @@ mod tests;\n use event::{CompletedTest, TestEvent};\n use helpers::concurrency::get_concurrency;\n use helpers::exit_code::get_exit_code;\n-use helpers::sink::Sink;\n use options::{Concurrent, RunStrategy};\n use test_result::*;\n use time::TestExecTime;\n@@ -532,10 +531,7 @@ fn run_test_in_process(\n     let data = Arc::new(Mutex::new(Vec::new()));\n \n     let oldio = if !nocapture {\n-        Some((\n-            io::set_print(Some(Sink::new_boxed(&data))),\n-            io::set_panic(Some(Sink::new_boxed(&data))),\n-        ))\n+        Some((io::set_print(Some(data.clone())), io::set_panic(Some(data.clone()))))\n     } else {\n         None\n     };\n@@ -556,7 +552,7 @@ fn run_test_in_process(\n         Ok(()) => calc_result(&desc, Ok(()), &time_opts, &exec_time),\n         Err(e) => calc_result(&desc, Err(e.as_ref()), &time_opts, &exec_time),\n     };\n-    let stdout = data.lock().unwrap().to_vec();\n+    let stdout = data.lock().unwrap_or_else(|e| e.into_inner()).to_vec();\n     let message = CompletedTest::new(desc, test_result, exec_time, stdout);\n     monitor_ch.send(message).unwrap();\n }"}]}