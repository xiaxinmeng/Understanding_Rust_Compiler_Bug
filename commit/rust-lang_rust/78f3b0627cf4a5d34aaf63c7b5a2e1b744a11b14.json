{"sha": "78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZjNiMDYyN2NmNGE1ZDM0YWFmNjNjN2I1YTJlMWI3NDRhMTFiMTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T14:10:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-22T14:18:04Z"}, "message": "Move FunctionData to hir_def", "tree": {"sha": "0c0e07fefce4b4175e8162bcd586aaca17512bb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c0e07fefce4b4175e8162bcd586aaca17512bb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "html_url": "https://github.com/rust-lang/rust/commit/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a132cc715ed05cab83fd058156eb152f0be96982", "url": "https://api.github.com/repos/rust-lang/rust/commits/a132cc715ed05cab83fd058156eb152f0be96982", "html_url": "https://github.com/rust-lang/rust/commit/a132cc715ed05cab83fd058156eb152f0be96982"}], "stats": {"total": 230, "additions": 114, "deletions": 116}, "files": [{"sha": "f426f8c9fa8edeace57a5a3b51403649484e8d7a", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 77, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -13,7 +13,7 @@ use hir_def::{\n     nameres::per_ns::PerNs,\n     resolver::{HasResolver, TypeNs},\n     traits::TraitData,\n-    type_ref::{Mutability, TypeRef},\n+    type_ref::TypeRef,\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n     ModuleId, UnionId,\n };\n@@ -561,77 +561,6 @@ pub struct Function {\n     pub(crate) id: FunctionId,\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n-pub struct FnData {\n-    pub(crate) name: Name,\n-    pub(crate) params: Vec<TypeRef>,\n-    pub(crate) ret_type: TypeRef,\n-    /// True if the first param is `self`. This is relevant to decide whether this\n-    /// can be called as a method.\n-    pub(crate) has_self_param: bool,\n-}\n-\n-impl FnData {\n-    pub(crate) fn fn_data_query(\n-        db: &(impl DefDatabase + AstDatabase),\n-        func: Function,\n-    ) -> Arc<FnData> {\n-        let src = func.source(db);\n-        let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n-        let mut params = Vec::new();\n-        let mut has_self_param = false;\n-        if let Some(param_list) = src.value.param_list() {\n-            if let Some(self_param) = param_list.self_param() {\n-                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n-                    TypeRef::from_ast(type_ref)\n-                } else {\n-                    let self_type = TypeRef::Path(name::SELF_TYPE.into());\n-                    match self_param.kind() {\n-                        ast::SelfParamKind::Owned => self_type,\n-                        ast::SelfParamKind::Ref => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n-                        }\n-                        ast::SelfParamKind::MutRef => {\n-                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n-                        }\n-                    }\n-                };\n-                params.push(self_type);\n-                has_self_param = true;\n-            }\n-            for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n-                params.push(type_ref);\n-            }\n-        }\n-        let ret_type = if let Some(type_ref) = src.value.ret_type().and_then(|rt| rt.type_ref()) {\n-            TypeRef::from_ast(type_ref)\n-        } else {\n-            TypeRef::unit()\n-        };\n-\n-        let sig = FnData { name, params, ret_type, has_self_param };\n-        Arc::new(sig)\n-    }\n-    pub fn name(&self) -> &Name {\n-        &self.name\n-    }\n-\n-    pub fn params(&self) -> &[TypeRef] {\n-        &self.params\n-    }\n-\n-    pub fn ret_type(&self) -> &TypeRef {\n-        &self.ret_type\n-    }\n-\n-    /// True if the first arg is `self`. This is relevant to decide whether this\n-    /// can be called as a method.\n-    pub fn has_self_param(&self) -> bool {\n-        self.has_self_param\n-    }\n-}\n-\n impl Function {\n     pub fn module(self, db: &impl DefDatabase) -> Module {\n         self.id.lookup(db).module(db).into()\n@@ -642,7 +571,15 @@ impl Function {\n     }\n \n     pub fn name(self, db: &impl HirDatabase) -> Name {\n-        self.data(db).name.clone()\n+        db.function_data(self.id).name.clone()\n+    }\n+\n+    pub fn has_self_param(self, db: &impl HirDatabase) -> bool {\n+        db.function_data(self.id).has_self_param\n+    }\n+\n+    pub fn params(self, db: &impl HirDatabase) -> Vec<TypeRef> {\n+        db.function_data(self.id).params.clone()\n     }\n \n     pub(crate) fn body_source_map(self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n@@ -657,10 +594,6 @@ impl Function {\n         db.type_for_def(self.into(), Namespace::Values)\n     }\n \n-    pub fn data(self, db: &impl HirDatabase) -> Arc<FnData> {\n-        db.fn_data(self)\n-    }\n-\n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(self.into())\n     }"}, {"sha": "8b9af0565232d353bdcbc54b0427c0bbe07629e6", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -16,15 +16,15 @@ use crate::{\n         CallableDef, FnSig, GenericPredicate, InferenceResult, Namespace, Substs, Ty, TypableDef,\n         TypeCtor,\n     },\n-    Const, ConstData, Crate, DefWithBody, FnData, Function, GenericDef, ImplBlock, Module, Static,\n-    StructField, Trait,\n+    Const, ConstData, Crate, DefWithBody, GenericDef, ImplBlock, Module, Static, StructField,\n+    Trait,\n };\n \n pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, CrateDefMapQuery, DefDatabase2, DefDatabase2Storage,\n-    EnumDataQuery, ExprScopesQuery, GenericParamsQuery, ImplDataQuery, InternDatabase,\n-    InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery, StructDataQuery,\n-    TraitDataQuery, TypeAliasDataQuery,\n+    EnumDataQuery, ExprScopesQuery, FunctionDataQuery, GenericParamsQuery, ImplDataQuery,\n+    InternDatabase, InternDatabaseStorage, RawItemsQuery, RawItemsWithSourceMapQuery,\n+    StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -35,9 +35,6 @@ pub use hir_expand::db::{\n #[salsa::query_group(DefDatabaseStorage)]\n #[salsa::requires(AstDatabase)]\n pub trait DefDatabase: HirDebugDatabase + DefDatabase2 {\n-    #[salsa::invoke(FnData::fn_data_query)]\n-    fn fn_data(&self, func: Function) -> Arc<FnData>;\n-\n     #[salsa::invoke(ConstData::const_data_query)]\n     fn const_data(&self, konst: Const) -> Arc<ConstData>;\n "}, {"sha": "d29cc92580656f18c98ae8eea80c34dfd9209968", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -55,9 +55,9 @@ pub use crate::{\n         docs::{DocDef, Docs, Documentation},\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-        EnumVariant, FieldSource, FnData, Function, GenericDef, GenericParam, HasBody, ImplBlock,\n-        Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n-        Trait, TypeAlias, Union, VariantDef,\n+        EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasBody, ImplBlock, Local,\n+        MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField, Trait,\n+        TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,"}, {"sha": "41a51283d67363f90de2734e6b34a7a2a3d28d5f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -22,6 +22,7 @@ use ena::unify::{InPlaceUnificationTable, NoError, UnifyKey, UnifyValue};\n use rustc_hash::FxHashMap;\n \n use hir_def::{\n+    function::FunctionData,\n     path::known,\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n@@ -43,8 +44,8 @@ use crate::{\n     db::HirDatabase,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     ty::infer::diagnostics::InferenceDiagnostic,\n-    Adt, AssocItem, ConstData, DefWithBody, FloatTy, FnData, Function, HasBody, IntTy, Path,\n-    StructField, Trait, VariantDef,\n+    Adt, AssocItem, ConstData, DefWithBody, FloatTy, Function, HasBody, IntTy, Path, StructField,\n+    Trait, VariantDef,\n };\n \n macro_rules! ty_app {\n@@ -70,7 +71,7 @@ pub fn infer_query(db: &impl HirDatabase, def: DefWithBody) -> Arc<InferenceResu\n \n     match def {\n         DefWithBody::Const(ref c) => ctx.collect_const(&c.data(db)),\n-        DefWithBody::Function(ref f) => ctx.collect_fn(&f.data(db)),\n+        DefWithBody::Function(ref f) => ctx.collect_fn(&db.function_data(f.id)),\n         DefWithBody::Static(ref s) => ctx.collect_const(&s.data(db)),\n     }\n \n@@ -562,14 +563,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.return_ty = self.make_ty(data.type_ref());\n     }\n \n-    fn collect_fn(&mut self, data: &FnData) {\n+    fn collect_fn(&mut self, data: &FunctionData) {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n-        for (type_ref, pat) in data.params().iter().zip(body.params()) {\n+        for (type_ref, pat) in data.params.iter().zip(body.params()) {\n             let ty = self.make_ty(type_ref);\n \n             self.infer_pat(*pat, &ty, BindingMode::default());\n         }\n-        self.return_ty = self.make_ty(data.ret_type());\n+        self.return_ty = self.make_ty(&data.ret_type);\n     }\n \n     fn infer_body(&mut self) {"}, {"sha": "42daa9cb93989955df7e684511a4bbd308f6f4b9", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -622,10 +622,10 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) ->\n }\n \n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n-    let data = def.data(db);\n+    let data = db.function_data(def.id);\n     let resolver = def.id.resolver(db);\n-    let params = data.params().iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n-    let ret = Ty::from_hir(db, &resolver, data.ret_type());\n+    let params = data.params.iter().map(|tr| Ty::from_hir(db, &resolver, tr)).collect::<Vec<_>>();\n+    let ret = Ty::from_hir(db, &resolver, &data.ret_type);\n     FnSig::from_params_and_return(params, ret)\n }\n "}, {"sha": "f84aae26eee755f488ea0eae7f52c102a09cee22", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -291,9 +291,9 @@ fn is_valid_candidate(\n ) -> bool {\n     match item {\n         AssocItem::Function(m) => {\n-            let data = m.data(db);\n-            name.map_or(true, |name| data.name() == name)\n-                && (data.has_self_param() || mode == LookupMode::Path)\n+            let data = db.function_data(m.id);\n+            name.map_or(true, |name| data.name == *name)\n+                && (data.has_self_param || mode == LookupMode::Path)\n         }\n         AssocItem::Const(c) => {\n             name.map_or(true, |name| Some(name) == c.name(db).as_ref())"}, {"sha": "02e649cc7421a97bd3d3c63feea8b5862e314d78", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -8,6 +8,7 @@ use ra_syntax::ast;\n use crate::{\n     adt::{EnumData, StructData},\n     body::{scope::ExprScopes, Body, BodySourceMap},\n+    function::FunctionData,\n     generics::GenericParams,\n     impls::ImplData,\n     nameres::{\n@@ -16,7 +17,8 @@ use crate::{\n     },\n     traits::TraitData,\n     type_alias::TypeAliasData,\n-    DefWithBodyId, EnumId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId, TypeAliasId,\n+    DefWithBodyId, EnumId, FunctionId, GenericDefId, ImplId, ItemLoc, StructOrUnionId, TraitId,\n+    TypeAliasId,\n };\n \n #[salsa::query_group(InternDatabaseStorage)]\n@@ -68,6 +70,9 @@ pub trait DefDatabase2: InternDatabase + AstDatabase {\n     #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;\n \n+    #[salsa::invoke(FunctionData::fn_data_query)]\n+    fn function_data(&self, func: FunctionId) -> Arc<FunctionData>;\n+\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n "}, {"sha": "33265275e2f27ee81e0d0f165ec83272d650e1b3", "filename": "crates/ra_hir_def/src/function.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffunction.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -0,0 +1,61 @@\n+use std::sync::Arc;\n+\n+use hir_expand::name::{self, AsName, Name};\n+use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n+\n+use crate::{\n+    db::DefDatabase2,\n+    type_ref::{Mutability, TypeRef},\n+    FunctionId, HasSource, Lookup,\n+};\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct FunctionData {\n+    pub name: Name,\n+    pub params: Vec<TypeRef>,\n+    pub ret_type: TypeRef,\n+    /// True if the first param is `self`. This is relevant to decide whether this\n+    /// can be called as a method.\n+    pub has_self_param: bool,\n+}\n+\n+impl FunctionData {\n+    pub(crate) fn fn_data_query(db: &impl DefDatabase2, func: FunctionId) -> Arc<FunctionData> {\n+        let src = func.lookup(db).source(db);\n+        let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n+        let mut params = Vec::new();\n+        let mut has_self_param = false;\n+        if let Some(param_list) = src.value.param_list() {\n+            if let Some(self_param) = param_list.self_param() {\n+                let self_type = if let Some(type_ref) = self_param.ascribed_type() {\n+                    TypeRef::from_ast(type_ref)\n+                } else {\n+                    let self_type = TypeRef::Path(name::SELF_TYPE.into());\n+                    match self_param.kind() {\n+                        ast::SelfParamKind::Owned => self_type,\n+                        ast::SelfParamKind::Ref => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Shared)\n+                        }\n+                        ast::SelfParamKind::MutRef => {\n+                            TypeRef::Reference(Box::new(self_type), Mutability::Mut)\n+                        }\n+                    }\n+                };\n+                params.push(self_type);\n+                has_self_param = true;\n+            }\n+            for param in param_list.params() {\n+                let type_ref = TypeRef::from_ast_opt(param.ascribed_type());\n+                params.push(type_ref);\n+            }\n+        }\n+        let ret_type = if let Some(type_ref) = src.value.ret_type().and_then(|rt| rt.type_ref()) {\n+            TypeRef::from_ast(type_ref)\n+        } else {\n+            TypeRef::unit()\n+        };\n+\n+        let sig = FunctionData { name, params, ret_type, has_self_param };\n+        Arc::new(sig)\n+    }\n+}"}, {"sha": "14ccad043dfd2fb372fe751ba0000956fab30dd1", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -21,6 +21,7 @@ pub mod generics;\n pub mod traits;\n pub mod resolver;\n pub mod type_alias;\n+pub mod function;\n \n #[cfg(test)]\n mod test_db;"}, {"sha": "7c367230e7192c753e574b8dfa6995ad96c75fc2", "filename": "crates/ra_ide_api/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcall_info.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -30,15 +30,15 @@ pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<Cal\n             let (callable_def, _subst) = analyzer.type_of(db, &expr.expr()?)?.as_callable()?;\n             match callable_def {\n                 hir::CallableDef::Function(it) => {\n-                    (CallInfo::with_fn(db, it), it.data(db).has_self_param())\n+                    (CallInfo::with_fn(db, it), it.has_self_param(db))\n                 }\n                 hir::CallableDef::Struct(it) => (CallInfo::with_struct(db, it)?, false),\n                 hir::CallableDef::EnumVariant(it) => (CallInfo::with_enum_variant(db, it)?, false),\n             }\n         }\n         FnCallNode::MethodCallExpr(expr) => {\n             let function = analyzer.resolve_method_call(&expr)?;\n-            (CallInfo::with_fn(db, function), function.data(db).has_self_param())\n+            (CallInfo::with_fn(db, function), function.has_self_param(db))\n         }\n         FnCallNode::MacroCallExpr(expr) => {\n             let macro_def = analyzer.resolve_macro_call(db, &expr)?;"}, {"sha": "8a05b287f7107e15a18710f6b728629c45220ece", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -313,7 +313,7 @@ impl RootDatabase {\n             hir::db::RawItemsQuery\n             hir::db::CrateDefMapQuery\n             hir::db::GenericParamsQuery\n-            hir::db::FnDataQuery\n+            hir::db::FunctionDataQuery\n             hir::db::TypeAliasDataQuery\n             hir::db::ConstDataQuery\n             hir::db::StaticDataQuery"}, {"sha": "5a3f9b5f64a329a2cfb654fe69dd7391a75f1945", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -59,8 +59,7 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty)\n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: Ty) {\n     let mut seen_methods = FxHashSet::default();\n     ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n-        let data = func.data(ctx.db);\n-        if data.has_self_param() && seen_methods.insert(data.name().clone()) {\n+        if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n             acc.add_function(ctx, func);\n         }\n         None::<()>"}, {"sha": "802c7701a34870d42efe67de72769a79e0de09cc", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -53,8 +53,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             ctx.analyzer.iterate_path_candidates(ctx.db, ty.clone(), None, |_ty, item| {\n                 match item {\n                     hir::AssocItem::Function(func) => {\n-                        let data = func.data(ctx.db);\n-                        if !data.has_self_param() {\n+                        if !func.has_self_param(ctx.db) {\n                             acc.add_function(ctx, func);\n                         }\n                     }\n@@ -80,8 +79,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n             for item in t.items(ctx.db) {\n                 match item {\n                     hir::AssocItem::Function(func) => {\n-                        let data = func.data(ctx.db);\n-                        if !data.has_self_param() {\n+                        if !func.has_self_param(ctx.db) {\n                             acc.add_function(ctx, func);\n                         }\n                     }"}, {"sha": "50fdb0043e634b71568c715e50a3e5a0f642252f", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=78f3b0627cf4a5d34aaf63c7b5a2e1b744a11b14", "patch": "@@ -199,14 +199,17 @@ impl Completions {\n         name: Option<String>,\n         func: hir::Function,\n     ) {\n-        let data = func.data(ctx.db);\n-        let name = name.unwrap_or_else(|| data.name().to_string());\n+        let func_name = func.name(ctx.db);\n+        let has_self_param = func.has_self_param(ctx.db);\n+        let params = func.params(ctx.db);\n+\n+        let name = name.unwrap_or_else(|| func_name.to_string());\n         let ast_node = func.source(ctx.db).value;\n         let detail = function_label(&ast_node);\n \n         let mut builder =\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.clone())\n-                .kind(if data.has_self_param() {\n+                .kind(if has_self_param {\n                     CompletionItemKind::Method\n                 } else {\n                     CompletionItemKind::Function\n@@ -222,10 +225,10 @@ impl Completions {\n         {\n             tested_by!(inserts_parens_for_function_calls);\n             let (snippet, label) =\n-                if data.params().is_empty() || data.has_self_param() && data.params().len() == 1 {\n-                    (format!(\"{}()$0\", data.name()), format!(\"{}()\", name))\n+                if params.is_empty() || has_self_param && params.len() == 1 {\n+                    (format!(\"{}()$0\", func_name), format!(\"{}()\", name))\n                 } else {\n-                    (format!(\"{}($0)\", data.name()), format!(\"{}(\u2026)\", name))\n+                    (format!(\"{}($0)\", func_name), format!(\"{}(\u2026)\", name))\n                 };\n             builder = builder.lookup_by(name).label(label).insert_snippet(snippet);\n         }"}]}