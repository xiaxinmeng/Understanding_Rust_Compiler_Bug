{"sha": "03a51019a40c1c5e2ab1635f993fc71517d1edc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTUxMDE5YTQwYzFjNWUyYWIxNjM1Zjk5M2ZjNzE1MTdkMWVkYzI=", "commit": {"author": {"name": "Michael Hewson", "email": "mah957@gmail.com", "date": "2017-05-10T00:30:47Z"}, "committer": {"name": "Matt Peterson", "email": "ricochet1k@gmail.com", "date": "2017-12-28T16:32:05Z"}, "message": "Resurrecting #33135\n\nStarted rebasing @sgrif's PR #33135 off of current master. (Well, actually merging it into a new branch based off current master.)\n\nThe following files still need to be fixed or at least reviewed:\n\n- `src/libsyntax/ext/tt/macro_parser.rs`: calls `Parser::parse_lifetime`, which doesn't exist anymore\n- `src/libsyntax/parse/parser.rs`: @sgrif added an error message to `Parser::parse_lifetime`. Code has since been refactored, so I just took it out for now.\n- `src/libsyntax/ext/tt/transcribe.rs`: This code has been refactored bigtime. Not sure whether @sgrif's changes here are still necessary. Took it out for this commit.", "tree": {"sha": "52fac58e67c2c60241f61b61519881a1ebe817f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52fac58e67c2c60241f61b61519881a1ebe817f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a51019a40c1c5e2ab1635f993fc71517d1edc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a51019a40c1c5e2ab1635f993fc71517d1edc2", "html_url": "https://github.com/rust-lang/rust/commit/03a51019a40c1c5e2ab1635f993fc71517d1edc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a51019a40c1c5e2ab1635f993fc71517d1edc2/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricochet1k", "id": 76901, "node_id": "MDQ6VXNlcjc2OTAx", "avatar_url": "https://avatars.githubusercontent.com/u/76901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricochet1k", "html_url": "https://github.com/ricochet1k", "followers_url": "https://api.github.com/users/ricochet1k/followers", "following_url": "https://api.github.com/users/ricochet1k/following{/other_user}", "gists_url": "https://api.github.com/users/ricochet1k/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricochet1k/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricochet1k/subscriptions", "organizations_url": "https://api.github.com/users/ricochet1k/orgs", "repos_url": "https://api.github.com/users/ricochet1k/repos", "events_url": "https://api.github.com/users/ricochet1k/events{/privacy}", "received_events_url": "https://api.github.com/users/ricochet1k/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4352c11dd0975679e25130fa2ba2d563c43edd79", "url": "https://api.github.com/repos/rust-lang/rust/commits/4352c11dd0975679e25130fa2ba2d563c43edd79", "html_url": "https://github.com/rust-lang/rust/commit/4352c11dd0975679e25130fa2ba2d563c43edd79"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "a0d72b786bf8f28da6766afc4970a7cfbea9182b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -190,6 +190,13 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::Lifetime {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            let lifetime_ident = ast::Ident::with_empty_ctxt(self.name);\n+            vec![TokenTree::Token(DUMMY_SP, token::Lifetime(lifetime_ident))]\n+        }\n+    }\n+\n     macro_rules! impl_to_tokens_slice {\n         ($t: ty, $sep: expr) => {\n             impl ToTokens for [$t] {"}, {"sha": "91074ec473445e61ce200b52542c76a42c93b4bd", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -603,6 +603,7 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),\n+        \"lifetime\" => token::NtLifetime(panictry!(p.parse_lifetime())),\n         // this is not supposed to happen, since it has been checked\n         // when compiling the macro.\n         _ => p.span_bug(sp, \"invalid fragment specifier\")"}, {"sha": "8f2e571c213403522a3563498861dbdd6b6b7443", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -768,10 +768,11 @@ fn token_can_be_followed_by_any(tok: &quoted::TokenTree) -> bool {\n /// ANYTHING without fear of future compatibility hazards).\n fn frag_can_be_followed_by_any(frag: &str) -> bool {\n     match frag {\n-        \"item\"  | // always terminated by `}` or `;`\n-        \"block\" | // exactly one token tree\n-        \"ident\" | // exactly one token tree\n-        \"meta\"  | // exactly one token tree\n+        \"item\"     | // always terminated by `}` or `;`\n+        \"block\"    | // exactly one token tree\n+        \"ident\"    | // exactly one token tree\n+        \"meta\"     | // exactly one token tree\n+        \"lifetime\" | // exactly one token tree\n         \"tt\" =>   // exactly one token tree\n             true,\n \n@@ -832,8 +833,8 @@ fn is_in_follow(tok: &quoted::TokenTree, frag: &str) -> Result<bool, (String, &'\n                 TokenTree::MetaVarDecl(_, _, frag) if frag.name == \"block\" => Ok(true),\n                 _ => Ok(false),\n             },\n-            \"ident\" => {\n-                // being a single token, idents are harmless\n+            \"ident\" | \"lifetime\" => {\n+                // being a single token, idents and lifetimes are harmless\n                 Ok(true)\n             },\n             \"meta\" | \"tt\" => {\n@@ -885,7 +886,7 @@ fn is_legal_fragment_specifier(sess: &ParseSess,\n                                frag_name: &str,\n                                frag_span: Span) -> bool {\n     match frag_name {\n-        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" |\n+        \"item\" | \"block\" | \"stmt\" | \"expr\" | \"pat\" | \"lifetime\" |\n         \"path\" | \"ty\" | \"ident\" | \"meta\" | \"tt\" | \"\" => true,\n         \"vis\" => {\n             if     !features.borrow().macro_vis_matcher"}, {"sha": "6682a3439f1b959819cb6167db6ac72e682fcd55", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -642,6 +642,7 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n             token::NtWhereClause(fld.fold_where_clause(where_clause)),\n         token::NtArg(arg) => token::NtArg(fld.fold_arg(arg)),\n         token::NtVis(vis) => token::NtVis(fld.fold_vis(vis)),\n+        token::NtLifetime(lifetime) => token::NtLifetime(fld.fold_lifetime(lifetime)),\n     }\n }\n "}, {"sha": "a5766f5601a99a9faa51ebb89f138870ecfa4f3a", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -524,6 +524,7 @@ pub enum Nonterminal {\n     NtGenerics(ast::Generics),\n     NtWhereClause(ast::WhereClause),\n     NtArg(ast::Arg),\n+    NtLifetime(ast::Lifetime),\n }\n \n impl fmt::Debug for Nonterminal {\n@@ -546,6 +547,7 @@ impl fmt::Debug for Nonterminal {\n             NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n             NtArg(..) => f.pad(\"NtArg(..)\"),\n             NtVis(..) => f.pad(\"NtVis(..)\"),\n+            NtLifetime(..) => f.pad(\"NtLifetime(..)\"),\n         }\n     }\n }"}, {"sha": "dd343a2384b1f475f1ee52c15a698febeb576d01", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -279,6 +279,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             token::NtWhereClause(ref e) => where_clause_to_string(e),\n             token::NtArg(ref e)         => arg_to_string(e),\n             token::NtVis(ref e)         => vis_to_string(e),\n+            token::NtLifetime(ref e)    => lifetime_to_string(e),\n         }\n     }\n }"}, {"sha": "b9e1fde6b1f3e10efb0ea203e6ad4ee7d52ca39d", "filename": "src/test/run-pass/macro-lifetime-used-with-bound.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-bound.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($l:lifetime, $l2:lifetime) => {\n+        fn f<$l: $l2, $l2>(arg: &$l str, arg2: &$l2 str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('a, 'b);\n+    let x: &'static str = f(\"hi\", \"there\");\n+    assert_eq!(\"hi\", x);\n+}"}, {"sha": "5c1f8683e00f600a6c165f660265a8f4931c57fe", "filename": "src/test/run-pass/macro-lifetime-used-with-static.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime-used-with-static.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($l:lifetime) => {\n+        fn f(arg: &$l str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('static);\n+    let x: &'static str = f(\"hi\");\n+    assert_eq!(\"hi\", x);\n+}"}, {"sha": "ff5798ff78d62837e9c475c21296a7577786775c", "filename": "src/test/run-pass/macro-lifetime.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a51019a40c1c5e2ab1635f993fc71517d1edc2/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-lifetime.rs?ref=03a51019a40c1c5e2ab1635f993fc71517d1edc2", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! foo {\n+    ($l:lifetime) => {\n+        fn f<$l>(arg: &$l str) -> &$l str {\n+            arg\n+        }\n+    }\n+}\n+\n+pub fn main() {\n+    foo!('a);\n+    let x: &'static str = f(\"hi\");\n+    assert_eq!(\"hi\", x);\n+}"}]}