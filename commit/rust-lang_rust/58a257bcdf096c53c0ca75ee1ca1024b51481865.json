{"sha": "58a257bcdf096c53c0ca75ee1ca1024b51481865", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YTI1N2JjZGYwOTZjNTNjMGNhNzVlZTFjYTEwMjRiNTE0ODE4NjU=", "commit": {"author": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2014-12-23T01:58:38Z"}, "committer": {"name": "Liigo Zhuang", "email": "com.liigo@gmail.com", "date": "2015-01-21T13:31:09Z"}, "message": "rustdoc: add tooltips to sidebar", "tree": {"sha": "7efcf06cf965ea187c559fcfbcec1975629110cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7efcf06cf965ea187c559fcfbcec1975629110cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58a257bcdf096c53c0ca75ee1ca1024b51481865", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58a257bcdf096c53c0ca75ee1ca1024b51481865", "html_url": "https://github.com/rust-lang/rust/commit/58a257bcdf096c53c0ca75ee1ca1024b51481865", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58a257bcdf096c53c0ca75ee1ca1024b51481865/comments", "author": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "liigo", "id": 346530, "node_id": "MDQ6VXNlcjM0NjUzMA==", "avatar_url": "https://avatars.githubusercontent.com/u/346530?v=4", "gravatar_id": "", "url": "https://api.github.com/users/liigo", "html_url": "https://github.com/liigo", "followers_url": "https://api.github.com/users/liigo/followers", "following_url": "https://api.github.com/users/liigo/following{/other_user}", "gists_url": "https://api.github.com/users/liigo/gists{/gist_id}", "starred_url": "https://api.github.com/users/liigo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/liigo/subscriptions", "organizations_url": "https://api.github.com/users/liigo/orgs", "repos_url": "https://api.github.com/users/liigo/repos", "events_url": "https://api.github.com/users/liigo/events{/privacy}", "received_events_url": "https://api.github.com/users/liigo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6869645e86c91544b8737b89809bdf10bef536d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6869645e86c91544b8737b89809bdf10bef536d9", "html_url": "https://github.com/rust-lang/rust/commit/6869645e86c91544b8737b89809bdf10bef536d9"}], "stats": {"total": 34, "additions": 23, "deletions": 11}, "files": [{"sha": "d1b5618e51efef6bdf2d04752a0cd09e276156d8", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/58a257bcdf096c53c0ca75ee1ca1024b51481865/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58a257bcdf096c53c0ca75ee1ca1024b51481865/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=58a257bcdf096c53c0ca75ee1ca1024b51481865", "patch": "@@ -66,6 +66,10 @@ use html::markdown::Markdown;\n use html::markdown;\n use stability_summary;\n \n+/// A pair of name and its optional document.\n+#[deriving(Clone, Eq, Ord, PartialEq, PartialOrd)]\n+pub struct NameDoc(String, Option<String>);\n+\n /// Major driving force in all rustdoc rendering. This contains information\n /// about where in the tree-like hierarchy rendering is occurring and controls\n /// how the current page is being rendered.\n@@ -95,7 +99,7 @@ pub struct Context {\n     /// functions), and the value is the list of containers belonging to this\n     /// header. This map will change depending on the surrounding context of the\n     /// page.\n-    pub sidebar: HashMap<String, Vec<String>>,\n+    pub sidebar: HashMap<String, Vec<NameDoc>>,\n     /// This flag indicates whether [src] links should be generated or not. If\n     /// the source files are present in the html rendering, then this will be\n     /// `true`.\n@@ -1245,7 +1249,7 @@ impl Context {\n         }\n     }\n \n-    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<String>> {\n+    fn build_sidebar(&self, m: &clean::Module) -> HashMap<String, Vec<NameDoc>> {\n         let mut map = HashMap::new();\n         for item in m.items.iter() {\n             if self.ignore_private_item(item) { continue }\n@@ -1262,7 +1266,7 @@ impl Context {\n             let short = short.to_string();\n             let v = map.entry(short).get().unwrap_or_else(\n                 |vacant_entry| vacant_entry.insert(Vec::with_capacity(1)));\n-            v.push(myname);\n+            v.push(NameDoc(myname, Some(shorter_line(item.doc_value()))));\n         }\n \n         for (_, items) in map.iter_mut() {\n@@ -1476,6 +1480,11 @@ fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n     }\n }\n \n+#[inline]\n+fn shorter_line(s: Option<&str>) -> String {\n+    shorter(s).replace(\"\\n\", \" \")\n+}\n+\n fn document(w: &mut fmt::Formatter, item: &clean::Item) -> fmt::Result {\n     match item.doc_value() {\n         Some(s) => {\n@@ -2213,21 +2222,22 @@ impl<'a> fmt::String for Sidebar<'a> {\n                 None => return Ok(())\n             };\n             try!(write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty));\n-            for item in items.iter() {\n+            for &NameDoc(ref name, ref doc) in items.iter() {\n                 let curty = shortty(cur).to_static_str();\n-                let class = if cur.name.as_ref().unwrap() == item &&\n+                let class = if cur.name.as_ref().unwrap() == name &&\n                                short == curty { \"current\" } else { \"\" };\n-                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}'>\\\n-                                {name}</a>\",\n+                try!(write!(w, \"<a class='{ty} {class}' href='{href}{path}' \\\n+                                title='{title}'>{name}</a>\",\n                        ty = short,\n                        class = class,\n                        href = if curty == \"mod\" {\"../\"} else {\"\"},\n                        path = if short == \"mod\" {\n-                           format!(\"{}/index.html\", item.as_slice())\n+                           format!(\"{}/index.html\", name.as_slice())\n                        } else {\n-                           format!(\"{}.{}.html\", short, item.as_slice())\n+                           format!(\"{}.{}.html\", short, name.as_slice())\n                        },\n-                       name = item.as_slice()));\n+                       title = doc.as_ref().unwrap().as_slice(),\n+                       name = name.as_slice()));\n             }\n             try!(write!(w, \"</div>\"));\n             Ok(())"}, {"sha": "be5025936a2c604015f7358bb66ea926d08da6bb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58a257bcdf096c53c0ca75ee1ca1024b51481865/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/58a257bcdf096c53c0ca75ee1ca1024b51481865/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=58a257bcdf096c53c0ca75ee1ca1024b51481865", "patch": "@@ -689,8 +689,10 @@\n                 if (crates[i] == window.currentCrate) {\n                     klass += ' current';\n                 }\n+                var desc = rawSearchIndex[crates[i]].items[0][3];\n                 div.append($('<a>', {'href': '../' + crates[i] + '/index.html',\n-                                    'class': klass}).text(crates[i]));\n+                                     'title': desc.replace(/\\n/g, ' '),\n+                                     'class': klass}).text(crates[i]));\n             }\n             sidebar.append(div);\n         }"}]}