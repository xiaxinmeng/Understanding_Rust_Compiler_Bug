{"sha": "5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNDA5OGVkMGZiMGI4YWVhMzczYTdhZjhhY2U1N2RhOThiMDlmZWM=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-08-20T17:45:18Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-15T14:01:07Z"}, "message": "Consolidate byte-identical modules.", "tree": {"sha": "a962890985a6dcbb0e60849b995bef994419c19b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a962890985a6dcbb0e60849b995bef994419c19b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "html_url": "https://github.com/rust-lang/rust/commit/5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90b1f5ae59291dd69d72fad41a22277df19dc953", "url": "https://api.github.com/repos/rust-lang/rust/commits/90b1f5ae59291dd69d72fad41a22277df19dc953", "html_url": "https://github.com/rust-lang/rust/commit/90b1f5ae59291dd69d72fad41a22277df19dc953"}], "stats": {"total": 629, "additions": 8, "deletions": 621}, "files": [{"sha": "ecb5b51cccdcd965d85e9ee8e22ecb878d876719", "filename": "library/std/src/sys/sgx/fs.rs", "status": "removed", "additions": 0, "deletions": 308, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Ffs.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,308 +0,0 @@\n-use crate::ffi::OsString;\n-use crate::fmt;\n-use crate::hash::{Hash, Hasher};\n-use crate::io::{self, IoSlice, IoSliceMut, SeekFrom};\n-use crate::path::{Path, PathBuf};\n-use crate::sys::time::SystemTime;\n-use crate::sys::{unsupported, Void};\n-\n-pub struct File(Void);\n-\n-pub struct FileAttr(Void);\n-\n-pub struct ReadDir(Void);\n-\n-pub struct DirEntry(Void);\n-\n-#[derive(Clone, Debug)]\n-pub struct OpenOptions {}\n-\n-pub struct FilePermissions(Void);\n-\n-pub struct FileType(Void);\n-\n-#[derive(Debug)]\n-pub struct DirBuilder {}\n-\n-impl FileAttr {\n-    pub fn size(&self) -> u64 {\n-        match self.0 {}\n-    }\n-\n-    pub fn perm(&self) -> FilePermissions {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_type(&self) -> FileType {\n-        match self.0 {}\n-    }\n-\n-    pub fn modified(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-\n-    pub fn accessed(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-\n-    pub fn created(&self) -> io::Result<SystemTime> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FileAttr {\n-    fn clone(&self) -> FileAttr {\n-        match self.0 {}\n-    }\n-}\n-\n-impl FilePermissions {\n-    pub fn readonly(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_readonly(&mut self, _readonly: bool) {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FilePermissions {\n-    fn clone(&self) -> FilePermissions {\n-        match self.0 {}\n-    }\n-}\n-\n-impl PartialEq for FilePermissions {\n-    fn eq(&self, _other: &FilePermissions) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for FilePermissions {}\n-\n-impl fmt::Debug for FilePermissions {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl FileType {\n-    pub fn is_dir(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_file(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_symlink(&self) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for FileType {\n-    fn clone(&self) -> FileType {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for FileType {}\n-\n-impl PartialEq for FileType {\n-    fn eq(&self, _other: &FileType) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for FileType {}\n-\n-impl Hash for FileType {\n-    fn hash<H: Hasher>(&self, _h: &mut H) {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for FileType {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Debug for ReadDir {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Iterator for ReadDir {\n-    type Item = io::Result<DirEntry>;\n-\n-    fn next(&mut self) -> Option<io::Result<DirEntry>> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl DirEntry {\n-    pub fn path(&self) -> PathBuf {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_name(&self) -> OsString {\n-        match self.0 {}\n-    }\n-\n-    pub fn metadata(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn file_type(&self) -> io::Result<FileType> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl OpenOptions {\n-    pub fn new() -> OpenOptions {\n-        OpenOptions {}\n-    }\n-\n-    pub fn read(&mut self, _read: bool) {}\n-    pub fn write(&mut self, _write: bool) {}\n-    pub fn append(&mut self, _append: bool) {}\n-    pub fn truncate(&mut self, _truncate: bool) {}\n-    pub fn create(&mut self, _create: bool) {}\n-    pub fn create_new(&mut self, _create_new: bool) {}\n-}\n-\n-impl File {\n-    pub fn open(_path: &Path, _opts: &OpenOptions) -> io::Result<File> {\n-        unsupported()\n-    }\n-\n-    pub fn file_attr(&self) -> io::Result<FileAttr> {\n-        match self.0 {}\n-    }\n-\n-    pub fn fsync(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn datasync(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn truncate(&self, _size: u64) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn flush(&self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn seek(&self, _pos: SeekFrom) -> io::Result<u64> {\n-        match self.0 {}\n-    }\n-\n-    pub fn duplicate(&self) -> io::Result<File> {\n-        match self.0 {}\n-    }\n-\n-    pub fn set_permissions(&self, _perm: FilePermissions) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n-}\n-\n-impl DirBuilder {\n-    pub fn new() -> DirBuilder {\n-        DirBuilder {}\n-    }\n-\n-    pub fn mkdir(&self, _p: &Path) -> io::Result<()> {\n-        unsupported()\n-    }\n-}\n-\n-impl fmt::Debug for File {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-pub fn readdir(_p: &Path) -> io::Result<ReadDir> {\n-    unsupported()\n-}\n-\n-pub fn unlink(_p: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn rename(_old: &Path, _new: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn set_perm(_p: &Path, perm: FilePermissions) -> io::Result<()> {\n-    match perm.0 {}\n-}\n-\n-pub fn rmdir(_p: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn remove_dir_all(_path: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn readlink(_p: &Path) -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn symlink(_src: &Path, _dst: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn link(_src: &Path, _dst: &Path) -> io::Result<()> {\n-    unsupported()\n-}\n-\n-pub fn stat(_p: &Path) -> io::Result<FileAttr> {\n-    unsupported()\n-}\n-\n-pub fn lstat(_p: &Path) -> io::Result<FileAttr> {\n-    unsupported()\n-}\n-\n-pub fn canonicalize(_p: &Path) -> io::Result<PathBuf> {\n-    unsupported()\n-}\n-\n-pub fn copy(_from: &Path, _to: &Path) -> io::Result<u64> {\n-    unsupported()\n-}"}, {"sha": "d5f475b4310fde64b7f0f50154c14d345ce3788f", "filename": "library/std/src/sys/sgx/io.rs", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fio.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,47 +0,0 @@\n-use crate::mem;\n-\n-#[derive(Copy, Clone)]\n-pub struct IoSlice<'a>(&'a [u8]);\n-\n-impl<'a> IoSlice<'a> {\n-    #[inline]\n-    pub fn new(buf: &'a [u8]) -> IoSlice<'a> {\n-        IoSlice(buf)\n-    }\n-\n-    #[inline]\n-    pub fn advance(&mut self, n: usize) {\n-        self.0 = &self.0[n..]\n-    }\n-\n-    #[inline]\n-    pub fn as_slice(&self) -> &[u8] {\n-        self.0\n-    }\n-}\n-\n-pub struct IoSliceMut<'a>(&'a mut [u8]);\n-\n-impl<'a> IoSliceMut<'a> {\n-    #[inline]\n-    pub fn new(buf: &'a mut [u8]) -> IoSliceMut<'a> {\n-        IoSliceMut(buf)\n-    }\n-\n-    #[inline]\n-    pub fn advance(&mut self, n: usize) {\n-        let slice = mem::replace(&mut self.0, &mut []);\n-        let (_, remaining) = slice.split_at_mut(n);\n-        self.0 = remaining;\n-    }\n-\n-    #[inline]\n-    pub fn as_slice(&self) -> &[u8] {\n-        self.0\n-    }\n-\n-    #[inline]\n-    pub fn as_mut_slice(&mut self) -> &mut [u8] {\n-        self.0\n-    }\n-}"}, {"sha": "1abd91e75e8c40d9e3a472efce09e3e075b01367", "filename": "library/std/src/sys/sgx/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fmod.rs?ref=5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "patch": "@@ -17,14 +17,18 @@ pub mod condvar;\n pub mod env;\n pub mod ext;\n pub mod fd;\n+#[path = \"../unsupported/fs.rs\"]\n pub mod fs;\n+#[path = \"../unsupported/io.rs\"]\n pub mod io;\n pub mod memchr;\n pub mod mutex;\n pub mod net;\n pub mod os;\n pub mod path;\n+#[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;\n+#[path = \"../unsupported/process.rs\"]\n pub mod process;\n pub mod rwlock;\n pub mod stack_overflow;"}, {"sha": "10d0925823eb94660278ce2390c892c093d7e3c6", "filename": "library/std/src/sys/sgx/pipe.rs", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fpipe.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,38 +0,0 @@\n-use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n-\n-pub struct AnonPipe(Void);\n-\n-impl AnonPipe {\n-    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n-}\n-\n-pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()> {\n-    match p1.0 {}\n-}"}, {"sha": "4702e5c549228ea27e5c59777cb707b34ea5d248", "filename": "library/std/src/sys/sgx/process.rs", "status": "removed", "additions": 0, "deletions": 149, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fprocess.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,149 +0,0 @@\n-use crate::ffi::OsStr;\n-use crate::fmt;\n-use crate::io;\n-use crate::sys::fs::File;\n-use crate::sys::pipe::AnonPipe;\n-use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::CommandEnv;\n-\n-pub use crate::ffi::OsString as EnvKey;\n-\n-////////////////////////////////////////////////////////////////////////////////\n-// Command\n-////////////////////////////////////////////////////////////////////////////////\n-\n-pub struct Command {\n-    env: CommandEnv,\n-}\n-\n-// passed back to std::process with the pipes connected to the child, if any\n-// were requested\n-pub struct StdioPipes {\n-    pub stdin: Option<AnonPipe>,\n-    pub stdout: Option<AnonPipe>,\n-    pub stderr: Option<AnonPipe>,\n-}\n-\n-pub enum Stdio {\n-    Inherit,\n-    Null,\n-    MakePipe,\n-}\n-\n-impl Command {\n-    pub fn new(_program: &OsStr) -> Command {\n-        Command { env: Default::default() }\n-    }\n-\n-    pub fn arg(&mut self, _arg: &OsStr) {}\n-\n-    pub fn env_mut(&mut self) -> &mut CommandEnv {\n-        &mut self.env\n-    }\n-\n-    pub fn cwd(&mut self, _dir: &OsStr) {}\n-\n-    pub fn stdin(&mut self, _stdin: Stdio) {}\n-\n-    pub fn stdout(&mut self, _stdout: Stdio) {}\n-\n-    pub fn stderr(&mut self, _stderr: Stdio) {}\n-\n-    pub fn spawn(\n-        &mut self,\n-        _default: Stdio,\n-        _needs_stdin: bool,\n-    ) -> io::Result<(Process, StdioPipes)> {\n-        unsupported()\n-    }\n-}\n-\n-impl From<AnonPipe> for Stdio {\n-    fn from(pipe: AnonPipe) -> Stdio {\n-        pipe.diverge()\n-    }\n-}\n-\n-impl From<File> for Stdio {\n-    fn from(file: File) -> Stdio {\n-        file.diverge()\n-    }\n-}\n-\n-impl fmt::Debug for Command {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        Ok(())\n-    }\n-}\n-\n-pub struct ExitStatus(Void);\n-\n-impl ExitStatus {\n-    pub fn success(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn code(&self) -> Option<i32> {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Clone for ExitStatus {\n-    fn clone(&self) -> ExitStatus {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Copy for ExitStatus {}\n-\n-impl PartialEq for ExitStatus {\n-    fn eq(&self, _other: &ExitStatus) -> bool {\n-        match self.0 {}\n-    }\n-}\n-\n-impl Eq for ExitStatus {}\n-\n-impl fmt::Debug for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-impl fmt::Display for ExitStatus {\n-    fn fmt(&self, _f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self.0 {}\n-    }\n-}\n-\n-#[derive(PartialEq, Eq, Clone, Copy, Debug)]\n-pub struct ExitCode(bool);\n-\n-impl ExitCode {\n-    pub const SUCCESS: ExitCode = ExitCode(false);\n-    pub const FAILURE: ExitCode = ExitCode(true);\n-\n-    pub fn as_i32(&self) -> i32 {\n-        self.0 as i32\n-    }\n-}\n-\n-pub struct Process(Void);\n-\n-impl Process {\n-    pub fn id(&self) -> u32 {\n-        match self.0 {}\n-    }\n-\n-    pub fn kill(&mut self) -> io::Result<()> {\n-        match self.0 {}\n-    }\n-\n-    pub fn wait(&mut self) -> io::Result<ExitStatus> {\n-        match self.0 {}\n-    }\n-\n-    pub fn try_wait(&mut self) -> io::Result<Option<ExitStatus>> {\n-        match self.0 {}\n-    }\n-}"}, {"sha": "8ba870c5dbc14cecba6f52158fae1d49a799ea8e", "filename": "library/std/src/sys/unsupported/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fmod.rs?ref=5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "patch": "@@ -8,6 +8,7 @@ pub mod io;\n pub mod mutex;\n pub mod net;\n pub mod os;\n+#[path = \"../unix/path.rs\"]\n pub mod path;\n pub mod pipe;\n pub mod process;"}, {"sha": "840a7ae04262508abc1bd81fd78a7f8fd4231363", "filename": "library/std/src/sys/unsupported/path.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fpath.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,19 +0,0 @@\n-use crate::ffi::OsStr;\n-use crate::path::Prefix;\n-\n-#[inline]\n-pub fn is_sep_byte(b: u8) -> bool {\n-    b == b'/'\n-}\n-\n-#[inline]\n-pub fn is_verbatim_sep(b: u8) -> bool {\n-    b == b'/'\n-}\n-\n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n-    None\n-}\n-\n-pub const MAIN_SEP_STR: &str = \"/\";\n-pub const MAIN_SEP: char = '/';"}, {"sha": "e1aa596503b4d26aa1ad98962403a654871d2a06", "filename": "library/std/src/sys/wasi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fmod.rs?ref=5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "patch": "@@ -33,7 +33,9 @@ pub mod net;\n pub mod os;\n pub use crate::sys_common::os_str_bytes as os_str;\n pub mod ext;\n+#[path = \"../unix/path.rs\"]\n pub mod path;\n+#[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;\n pub mod process;\n #[path = \"../unsupported/rwlock.rs\"]"}, {"sha": "840a7ae04262508abc1bd81fd78a7f8fd4231363", "filename": "library/std/src/sys/wasi/path.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpath.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,19 +0,0 @@\n-use crate::ffi::OsStr;\n-use crate::path::Prefix;\n-\n-#[inline]\n-pub fn is_sep_byte(b: u8) -> bool {\n-    b == b'/'\n-}\n-\n-#[inline]\n-pub fn is_verbatim_sep(b: u8) -> bool {\n-    b == b'/'\n-}\n-\n-pub fn parse_prefix(_: &OsStr) -> Option<Prefix<'_>> {\n-    None\n-}\n-\n-pub const MAIN_SEP_STR: &str = \"/\";\n-pub const MAIN_SEP: char = '/';"}, {"sha": "180fc114d86db2753290503ae629f66e58976792", "filename": "library/std/src/sys/wasi/pipe.rs", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90b1f5ae59291dd69d72fad41a22277df19dc953/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fpipe.rs?ref=90b1f5ae59291dd69d72fad41a22277df19dc953", "patch": "@@ -1,40 +0,0 @@\n-#![deny(unsafe_op_in_unsafe_fn)]\n-\n-use crate::io::{self, IoSlice, IoSliceMut};\n-use crate::sys::Void;\n-\n-pub struct AnonPipe(Void);\n-\n-impl AnonPipe {\n-    pub fn read(&self, _buf: &mut [u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn read_vectored(&self, _bufs: &mut [IoSliceMut<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_read_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn write(&self, _buf: &[u8]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn write_vectored(&self, _bufs: &[IoSlice<'_>]) -> io::Result<usize> {\n-        match self.0 {}\n-    }\n-\n-    pub fn is_write_vectored(&self) -> bool {\n-        match self.0 {}\n-    }\n-\n-    pub fn diverge(&self) -> ! {\n-        match self.0 {}\n-    }\n-}\n-\n-pub fn read2(p1: AnonPipe, _v1: &mut Vec<u8>, _p2: AnonPipe, _v2: &mut Vec<u8>) -> io::Result<()> {\n-    match p1.0 {}\n-}"}, {"sha": "2934ea59ab5ff687081f502df9e48417f7edea9d", "filename": "library/std/src/sys/wasm/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a4098ed0fb0b8aea373a7af8ace57da98b09fec/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fmod.rs?ref=5a4098ed0fb0b8aea373a7af8ace57da98b09fec", "patch": "@@ -27,7 +27,7 @@ pub mod io;\n pub mod net;\n #[path = \"../unsupported/os.rs\"]\n pub mod os;\n-#[path = \"../unsupported/path.rs\"]\n+#[path = \"../unix/path.rs\"]\n pub mod path;\n #[path = \"../unsupported/pipe.rs\"]\n pub mod pipe;"}]}