{"sha": "edb7b96c84312ebc05f1e27515543c9f9365ba58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYjdiOTZjODQzMTJlYmMwNWYxZTI3NTE1NTQzYzlmOTM2NWJhNTg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-08T07:29:12Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-21T18:20:41Z"}, "message": "extract parse_impl_ty", "tree": {"sha": "156c36f9c5f1009bd3649b26f37525225be8cfae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/156c36f9c5f1009bd3649b26f37525225be8cfae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edb7b96c84312ebc05f1e27515543c9f9365ba58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edb7b96c84312ebc05f1e27515543c9f9365ba58", "html_url": "https://github.com/rust-lang/rust/commit/edb7b96c84312ebc05f1e27515543c9f9365ba58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edb7b96c84312ebc05f1e27515543c9f9365ba58/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e08886d251205826a3f6ab6d331c123a9a53268d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e08886d251205826a3f6ab6d331c123a9a53268d", "html_url": "https://github.com/rust-lang/rust/commit/e08886d251205826a3f6ab6d331c123a9a53268d"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "c3fc16e0725baa0a8dc1b195bb240a1286eca75d", "filename": "src/librustc_parse/parser/ty.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/edb7b96c84312ebc05f1e27515543c9f9365ba58/src%2Flibrustc_parse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edb7b96c84312ebc05f1e27515543c9f9365ba58/src%2Flibrustc_parse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fty.rs?ref=edb7b96c84312ebc05f1e27515543c9f9365ba58", "patch": "@@ -98,7 +98,6 @@ impl<'a> Parser<'a> {\n             // Function pointer type or bound list (trait object type) starting with a poly-trait.\n             //   `for<'lt> [unsafe] [extern \"ABI\"] fn (&'lt S) -> T`\n             //   `for<'lt> Trait1<'lt> + Trait2 + 'a`\n-            let lo = self.token.span;\n             let lifetime_defs = self.parse_late_bound_lifetime_defs()?;\n             if self.token_is_bare_fn_keyword() {\n                 self.parse_ty_bare_fn(lifetime_defs)?\n@@ -108,10 +107,7 @@ impl<'a> Parser<'a> {\n                 self.parse_remaining_bounds(lifetime_defs, path, lo, parse_plus)?\n             }\n         } else if self.eat_keyword(kw::Impl) {\n-            // Always parse bounds greedily for better error recovery.\n-            let bounds = self.parse_generic_bounds(None)?;\n-            impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n-            TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds)\n+            self.parse_impl_ty(&mut impl_dyn_multi)?\n         } else if self.check_keyword(kw::Dyn) &&\n                   (self.token.span.rust_2018() ||\n                    self.look_ahead(1, |t| t.can_begin_bound() &&\n@@ -312,6 +308,14 @@ impl<'a> Parser<'a> {\n         })))\n     }\n \n+    /// Parses an `impl B0 + ... + Bn` type.\n+    fn parse_impl_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n+        // Always parse bounds greedily for better error recovery.\n+        let bounds = self.parse_generic_bounds(None)?;\n+        *impl_dyn_multi = bounds.len() > 1 || self.prev_token_kind == PrevTokenKind::Plus;\n+        Ok(TyKind::ImplTrait(ast::DUMMY_NODE_ID, bounds))\n+    }\n+\n     pub(super) fn parse_generic_bounds(&mut self,\n                                   colon_span: Option<Span>) -> PResult<'a, GenericBounds> {\n         self.parse_generic_bounds_common(true, colon_span)"}]}