{"sha": "595490e8dd13e84a9c7f44f22489a723772fbf70", "node_id": "C_kwDOAAsO6NoAKDU5NTQ5MGU4ZGQxM2U4NGE5YzdmNDRmMjI0ODlhNzIzNzcyZmJmNzA", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:43:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-02T13:43:05Z"}, "message": "slight simplifications for borrow tracking", "tree": {"sha": "9092f9ca97cf17f221bebf3a053b55c02d3e727c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9092f9ca97cf17f221bebf3a053b55c02d3e727c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/595490e8dd13e84a9c7f44f22489a723772fbf70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/595490e8dd13e84a9c7f44f22489a723772fbf70", "html_url": "https://github.com/rust-lang/rust/commit/595490e8dd13e84a9c7f44f22489a723772fbf70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/595490e8dd13e84a9c7f44f22489a723772fbf70/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90118a197ba91c248376e1ff72bdf7dc370776f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/90118a197ba91c248376e1ff72bdf7dc370776f6", "html_url": "https://github.com/rust-lang/rust/commit/90118a197ba91c248376e1ff72bdf7dc370776f6"}], "stats": {"total": 94, "additions": 36, "deletions": 58}, "files": [{"sha": "78332879e5ea17b55e7aa22cda20f7b57649d49d", "filename": "src/tools/miri/src/borrow_tracker/mod.rs", "status": "modified", "additions": 28, "deletions": 22, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fmod.rs?ref=595490e8dd13e84a9c7f44f22489a723772fbf70", "patch": "@@ -55,9 +55,9 @@ impl fmt::Debug for BorTag {\n     }\n }\n \n-/// Per-frame data for borrow tracking\n+/// Per-call-stack-frame data for borrow tracking\n #[derive(Debug)]\n-pub struct FrameExtra {\n+pub struct FrameState {\n     /// The ID of the call this frame corresponds to.\n     pub call_id: CallId,\n \n@@ -72,7 +72,7 @@ pub struct FrameExtra {\n     pub protected_tags: SmallVec<[BorTag; 2]>,\n }\n \n-impl VisitTags for FrameExtra {\n+impl VisitTags for FrameState {\n     fn visit_tags(&self, _visit: &mut dyn FnMut(BorTag)) {\n         // `protected_tags` are fine to GC.\n     }\n@@ -190,14 +190,14 @@ impl GlobalStateInner {\n         id\n     }\n \n-    pub fn new_frame(&mut self, machine: &MiriMachine<'_, '_>) -> FrameExtra {\n+    pub fn new_frame(&mut self, machine: &MiriMachine<'_, '_>) -> FrameState {\n         let call_id = self.next_call_id;\n         trace!(\"new_frame: Assigning call ID {}\", call_id);\n         if self.tracked_call_ids.contains(&call_id) {\n             machine.emit_diagnostic(NonHaltingDiagnostic::CreatedCallId(call_id));\n         }\n         self.next_call_id = NonZeroU64::new(call_id.get() + 1).unwrap();\n-        FrameExtra { call_id, protected_tags: SmallVec::new() }\n+        FrameState { call_id, protected_tags: SmallVec::new() }\n     }\n \n     pub fn end_call(&mut self, frame: &machine::FrameData<'_>) {\n@@ -253,10 +253,10 @@ impl GlobalStateInner {\n         alloc_size: Size,\n         kind: MemoryKind<machine::MiriMemoryKind>,\n         machine: &MiriMachine<'_, '_>,\n-    ) -> AllocExtra {\n+    ) -> AllocState {\n         match self.borrow_tracker_method {\n             BorrowTrackerMethod::StackedBorrows =>\n-                AllocExtra::StackedBorrows(Box::new(RefCell::new(Stacks::new_allocation(\n+                AllocState::StackedBorrows(Box::new(RefCell::new(Stacks::new_allocation(\n                     id, alloc_size, self, kind, machine,\n                 )))),\n         }\n@@ -292,24 +292,30 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n /// Extra per-allocation data for borrow tracking\n #[derive(Debug, Clone)]\n-pub enum AllocExtra {\n+pub enum AllocState {\n     /// Data corresponding to Stacked Borrows\n-    StackedBorrows(Box<RefCell<stacked_borrows::AllocExtra>>),\n+    StackedBorrows(Box<RefCell<stacked_borrows::AllocState>>),\n }\n \n-impl AllocExtra {\n-    pub fn assert_sb(&self) -> &RefCell<stacked_borrows::AllocExtra> {\n-        match self {\n-            AllocExtra::StackedBorrows(ref sb) => sb,\n+impl machine::AllocExtra {\n+    #[track_caller]\n+    pub fn borrow_tracker_sb(&self) -> &RefCell<stacked_borrows::AllocState> {\n+        match self.borrow_tracker {\n+            Some(AllocState::StackedBorrows(ref sb)) => sb,\n+            _ => panic!(\"expected Stacked Borrows borrow tracking, got something else\"),\n         }\n     }\n \n-    pub fn assert_sb_mut(&mut self) -> &mut RefCell<stacked_borrows::AllocExtra> {\n-        match self {\n-            AllocExtra::StackedBorrows(ref mut sb) => sb,\n+    #[track_caller]\n+    pub fn borrow_tracker_sb_mut(&mut self) -> &mut RefCell<stacked_borrows::AllocState> {\n+        match self.borrow_tracker {\n+            Some(AllocState::StackedBorrows(ref mut sb)) => sb,\n+            _ => panic!(\"expected Stacked Borrows borrow tracking, got something else\"),\n         }\n     }\n+}\n \n+impl AllocState {\n     pub fn before_memory_read<'tcx>(\n         &self,\n         alloc_id: AllocId,\n@@ -318,7 +324,7 @@ impl AllocExtra {\n         machine: &MiriMachine<'_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         match self {\n-            AllocExtra::StackedBorrows(sb) =>\n+            AllocState::StackedBorrows(sb) =>\n                 sb.borrow_mut().before_memory_read(alloc_id, prov_extra, range, machine),\n         }\n     }\n@@ -331,7 +337,7 @@ impl AllocExtra {\n         machine: &mut MiriMachine<'_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         match self {\n-            AllocExtra::StackedBorrows(sb) =>\n+            AllocState::StackedBorrows(sb) =>\n                 sb.get_mut().before_memory_write(alloc_id, prov_extra, range, machine),\n         }\n     }\n@@ -344,22 +350,22 @@ impl AllocExtra {\n         machine: &mut MiriMachine<'_, 'tcx>,\n     ) -> InterpResult<'tcx> {\n         match self {\n-            AllocExtra::StackedBorrows(sb) =>\n+            AllocState::StackedBorrows(sb) =>\n                 sb.get_mut().before_memory_deallocation(alloc_id, prov_extra, range, machine),\n         }\n     }\n \n     pub fn remove_unreachable_tags(&self, tags: &FxHashSet<BorTag>) {\n         match self {\n-            AllocExtra::StackedBorrows(sb) => sb.borrow_mut().remove_unreachable_tags(tags),\n+            AllocState::StackedBorrows(sb) => sb.borrow_mut().remove_unreachable_tags(tags),\n         }\n     }\n }\n \n-impl VisitTags for AllocExtra {\n+impl VisitTags for AllocState {\n     fn visit_tags(&self, visit: &mut dyn FnMut(BorTag)) {\n         match self {\n-            AllocExtra::StackedBorrows(sb) => sb.visit_tags(visit),\n+            AllocState::StackedBorrows(sb) => sb.visit_tags(visit),\n         }\n     }\n }"}, {"sha": "50c2ad75ca71e6113334dd5b965b86ef6fb06683", "filename": "src/tools/miri/src/borrow_tracker/stacked_borrows/mod.rs", "status": "modified", "additions": 6, "deletions": 34, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fborrow_tracker%2Fstacked_borrows%2Fmod.rs?ref=595490e8dd13e84a9c7f44f22489a723772fbf70", "patch": "@@ -25,7 +25,7 @@ mod stack;\n pub use stack::Stack;\n pub mod diagnostics;\n \n-pub type AllocExtra = Stacks;\n+pub type AllocState = Stacks;\n \n /// Extra per-allocation state.\n #[derive(Clone, Debug)]\n@@ -500,10 +500,6 @@ impl Stacks {\n         })?;\n         Ok(())\n     }\n-\n-    fn expose_tag(&mut self, tag: BorTag) {\n-        self.exposed_tags.insert(tag);\n-    }\n }\n \n /// Retagging/reborrowing.  There is some policy in here, such as which permissions\n@@ -567,10 +563,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                     // uncovers a non-supported `extern static`.\n                     let extra = this.get_alloc_extra(alloc_id)?;\n                     let mut stacked_borrows = extra\n-                        .borrow_tracker\n-                        .as_ref()\n-                        .expect(\"We should have borrow tracking data\")\n-                        .assert_sb()\n+                        .borrow_tracker_sb()\n                         .borrow_mut();\n                     // Note that we create a *second* `DiagnosticCxBuilder` below for the actual retag.\n                     // FIXME: can this be done cleaner?\n@@ -681,12 +674,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                 // We have to use shared references to alloc/memory_extra here since\n                 // `visit_freeze_sensitive` needs to access the global state.\n                 let alloc_extra = this.get_alloc_extra(alloc_id)?;\n-                let mut stacked_borrows = alloc_extra\n-                    .borrow_tracker\n-                    .as_ref()\n-                    .expect(\"We should have borrow tracking data\")\n-                    .assert_sb()\n-                    .borrow_mut();\n+                let mut stacked_borrows = alloc_extra.borrow_tracker_sb().borrow_mut();\n                 this.visit_freeze_sensitive(place, size, |mut range, frozen| {\n                     // Adjust range.\n                     range.start += base_offset;\n@@ -736,12 +724,7 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n         // Note that this asserts that the allocation is mutable -- but since we are creating a\n         // mutable pointer, that seems reasonable.\n         let (alloc_extra, machine) = this.get_alloc_extra_mut(alloc_id)?;\n-        let stacked_borrows = alloc_extra\n-            .borrow_tracker\n-            .as_mut()\n-            .expect(\"We should have borrow tracking data\")\n-            .assert_sb_mut()\n-            .get_mut();\n+        let stacked_borrows = alloc_extra.borrow_tracker_sb_mut().get_mut();\n         let item = Item::new(new_tag, perm, protect.is_some());\n         let range = alloc_range(base_offset, size);\n         let global = machine.borrow_tracker.as_ref().unwrap().borrow();\n@@ -993,13 +976,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // uncovers a non-supported `extern static`.\n                 let alloc_extra = this.get_alloc_extra(alloc_id)?;\n                 trace!(\"Stacked Borrows tag {tag:?} exposed in {alloc_id:?}\");\n-                alloc_extra\n-                    .borrow_tracker\n-                    .as_ref()\n-                    .expect(\"We should have borrow tracking data\")\n-                    .assert_sb()\n-                    .borrow_mut()\n-                    .expose_tag(tag);\n+                alloc_extra.borrow_tracker_sb().borrow_mut().exposed_tags.insert(tag);\n             }\n             AllocKind::Function | AllocKind::VTable | AllocKind::Dead => {\n                 // No stacked borrows on these allocations.\n@@ -1011,12 +988,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     fn print_stacks(&mut self, alloc_id: AllocId) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         let alloc_extra = this.get_alloc_extra(alloc_id)?;\n-        let stacks = alloc_extra\n-            .borrow_tracker\n-            .as_ref()\n-            .expect(\"We should have borrow tracking data\")\n-            .assert_sb()\n-            .borrow();\n+        let stacks = alloc_extra.borrow_tracker_sb().borrow();\n         for (range, stack) in stacks.stacks.iter_all() {\n             print!(\"{range:?}: [\");\n             if let Some(bottom) = stack.unknown_bottom() {"}, {"sha": "79106d538b7c46196ac569f172cff5067dc45e19", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/595490e8dd13e84a9c7f44f22489a723772fbf70/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=595490e8dd13e84a9c7f44f22489a723772fbf70", "patch": "@@ -39,7 +39,7 @@ pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n /// Extra data stored with each stack frame\n pub struct FrameData<'tcx> {\n     /// Extra data for Stacked Borrows.\n-    pub borrow_tracker: Option<borrow_tracker::FrameExtra>,\n+    pub borrow_tracker: Option<borrow_tracker::FrameState>,\n \n     /// If this is Some(), then this is a special \"catch unwind\" frame (the frame of `try_fn`\n     /// called by `try`). When this frame is popped during unwinding a panic,\n@@ -255,7 +255,7 @@ impl ProvenanceExtra {\n #[derive(Debug, Clone)]\n pub struct AllocExtra {\n     /// Global state of the borrow tracker, if enabled.\n-    pub borrow_tracker: Option<borrow_tracker::AllocExtra>,\n+    pub borrow_tracker: Option<borrow_tracker::AllocState>,\n     /// Data race detection via the use of a vector-clock,\n     ///  this is only added if it is enabled.\n     pub data_race: Option<data_race::AllocExtra>,"}]}