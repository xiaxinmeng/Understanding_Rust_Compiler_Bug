{"sha": "b1ee87f402f929689fc028010c450184f661db3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxZWU4N2Y0MDJmOTI5Njg5ZmMwMjgwMTBjNDUwMTg0ZjY2MWRiM2I=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-27T05:49:10Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-27T05:49:10Z"}, "message": "std: simplify vec.with_c_str\n\nThis also fixes a bug in `vec.with_c_str_unchecked` where we\nwere not calling `.to_c_str_unchecked()` for long strings.", "tree": {"sha": "7f4542f6c5176d823330512ec1f863a5b4c46058", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f4542f6c5176d823330512ec1f863a5b4c46058"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1ee87f402f929689fc028010c450184f661db3b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee87f402f929689fc028010c450184f661db3b", "html_url": "https://github.com/rust-lang/rust/commit/b1ee87f402f929689fc028010c450184f661db3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1ee87f402f929689fc028010c450184f661db3b/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d878033fd77f13a41bb9142ba2a4e9b976d0089", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d878033fd77f13a41bb9142ba2a4e9b976d0089", "html_url": "https://github.com/rust-lang/rust/commit/2d878033fd77f13a41bb9142ba2a4e9b976d0089"}], "stats": {"total": 48, "additions": 20, "deletions": 28}, "files": [{"sha": "acfa02a4defd5f2782068673b135c83d927e15ce", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 20, "deletions": 28, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1ee87f402f929689fc028010c450184f661db3b/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1ee87f402f929689fc028010c450184f661db3b/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=b1ee87f402f929689fc028010c450184f661db3b", "patch": "@@ -71,6 +71,7 @@ use ptr;\n use str::StrSlice;\n use str;\n use vec::{CopyableVector, ImmutableVector, MutableVector};\n+use vec;\n use unstable::intrinsics;\n \n /// Resolution options for the `null_byte` condition\n@@ -283,41 +284,32 @@ impl<'self> ToCStr for &'self [u8] {\n     }\n \n     fn with_c_str<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n-        if self.len() < BUF_LEN {\n-            do self.as_imm_buf |self_buf, self_len| {\n-                unsafe {\n-                    let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n-\n-                    do buf.as_mut_buf |buf, _| {\n-                        ptr::copy_memory(buf, self_buf, self_len);\n-                        *ptr::mut_offset(buf, self_len as int) = 0;\n-\n-                        check_for_null(*self, buf as *mut libc::c_char);\n-\n-                        f(buf as *libc::c_char)\n-                    }\n-                }\n-            }\n-        } else {\n-            self.to_c_str().with_ref(f)\n-        }\n+        unsafe { with_c_str(*self, true, f) }\n     }\n \n     unsafe fn with_c_str_unchecked<T>(&self, f: &fn(*libc::c_char) -> T) -> T {\n-        if self.len() < BUF_LEN {\n-            do self.as_imm_buf |self_buf, self_len| {\n-                let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n+        with_c_str(*self, false, f)\n+    }\n+}\n \n-                do buf.as_mut_buf |buf, _| {\n-                    ptr::copy_memory(buf, self_buf, self_len);\n-                    *ptr::mut_offset(buf, self_len as int) = 0;\n+// Unsafe function that handles possibly copying the &[u8] into a stack array.\n+unsafe fn with_c_str<T>(v: &[u8], checked: bool, f: &fn(*libc::c_char) -> T) -> T {\n+    if v.len() < BUF_LEN {\n+        let mut buf: [u8, .. BUF_LEN] = intrinsics::uninit();\n+        vec::bytes::copy_memory(buf, v, v.len());\n+        buf[v.len()] = 0;\n \n-                    f(buf as *libc::c_char)\n-                }\n+        do buf.as_mut_buf |buf, _| {\n+            if checked {\n+                check_for_null(v, buf as *mut libc::c_char);\n             }\n-        } else {\n-            self.to_c_str().with_ref(f)\n+\n+            f(buf as *libc::c_char)\n         }\n+    } else if checked {\n+        v.to_c_str().with_ref(f)\n+    } else {\n+        v.to_c_str_unchecked().with_ref(f)\n     }\n }\n "}]}