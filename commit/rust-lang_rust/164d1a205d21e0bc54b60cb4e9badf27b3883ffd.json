{"sha": "164d1a205d21e0bc54b60cb4e9badf27b3883ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2NGQxYTIwNWQyMWUwYmM1NGI2MGNiNGU5YmFkZjI3YjM4ODNmZmQ=", "commit": {"author": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-11-12T18:01:10Z"}, "committer": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-11-13T16:56:30Z"}, "message": "Match VecDeque::extend to Vec::extend", "tree": {"sha": "3869a98a9f264bee44e0e6929b4d4fd72c75d80e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3869a98a9f264bee44e0e6929b4d4fd72c75d80e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/164d1a205d21e0bc54b60cb4e9badf27b3883ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/164d1a205d21e0bc54b60cb4e9badf27b3883ffd", "html_url": "https://github.com/rust-lang/rust/commit/164d1a205d21e0bc54b60cb4e9badf27b3883ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/164d1a205d21e0bc54b60cb4e9badf27b3883ffd/comments", "author": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7", "html_url": "https://github.com/rust-lang/rust/commit/5dda3ee9314cfee9c4e30a7b17dcd5ebdec081a7"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "ebd3f0100771b64d5f7b03dbfdf91a7755897dac", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/164d1a205d21e0bc54b60cb4e9badf27b3883ffd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/164d1a205d21e0bc54b60cb4e9badf27b3883ffd/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=164d1a205d21e0bc54b60cb4e9badf27b3883ffd", "patch": "@@ -2809,7 +2809,22 @@ impl<'a, T> IntoIterator for &'a mut VecDeque<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for VecDeque<A> {\n     fn extend<T: IntoIterator<Item = A>>(&mut self, iter: T) {\n-        iter.into_iter().for_each(move |elt| self.push_back(elt));\n+        // This function should be the moral equivalent of:\n+        //\n+        //      for item in iter.into_iter() {\n+        //          self.push_back(item);\n+        //      }\n+        let mut iter = iter.into_iter();\n+        while let Some(element) = iter.next() {\n+            if self.len() == self.capacity() {\n+                let (lower, _) = iter.size_hint();\n+                self.reserve(lower.saturating_add(1));\n+            }\n+\n+            let head = self.head;\n+            self.head = self.wrap_add(self.head, 1);\n+            unsafe { self.buffer_write(head, element); }\n+        }\n     }\n }\n "}]}