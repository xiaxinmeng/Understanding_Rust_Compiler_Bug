{"sha": "93426613a78a9e4477071d69dcccd6d4217e5c1d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzNDI2NjEzYTc4YTllNDQ3NzA3MWQ2OWRjY2NkNmQ0MjE3ZTVjMWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T01:44:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-24T01:44:19Z"}, "message": "Auto merge of #45942 - Menschenkindlein:master, r=estebank\n\nAdd hints for the case of confusing enum with its variants\n\nA solution for https://github.com/rust-lang/rust/issues/43871. When one uses an enum in a place that accepts variants (e.g., `Option(result)` instead of `Some(result)`), suggest one of this enum's variants.\n\ncc @estebank", "tree": {"sha": "ca9754760441ce3edc258ece0c260238395e67da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9754760441ce3edc258ece0c260238395e67da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93426613a78a9e4477071d69dcccd6d4217e5c1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93426613a78a9e4477071d69dcccd6d4217e5c1d", "html_url": "https://github.com/rust-lang/rust/commit/93426613a78a9e4477071d69dcccd6d4217e5c1d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93426613a78a9e4477071d69dcccd6d4217e5c1d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd7932a66b56da9a1c7d8cc30dc931922b356c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd7932a66b56da9a1c7d8cc30dc931922b356c0", "html_url": "https://github.com/rust-lang/rust/commit/bbd7932a66b56da9a1c7d8cc30dc931922b356c0"}, {"sha": "a3686c685a10de7b56cacf998a9e7eabc622787b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3686c685a10de7b56cacf998a9e7eabc622787b", "html_url": "https://github.com/rust-lang/rust/commit/a3686c685a10de7b56cacf998a9e7eabc622787b"}], "stats": {"total": 141, "additions": 141, "deletions": 0}, "files": [{"sha": "3243152527ffc42a74efe4bb2cd9758ff0fbd9b8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=93426613a78a9e4477071d69dcccd6d4217e5c1d", "patch": "@@ -2614,6 +2614,22 @@ impl<'a> Resolver<'a> {\n                         }\n                         _ => {}\n                     },\n+                    (Def::Enum(..), PathSource::TupleStruct)\n+                        | (Def::Enum(..), PathSource::Expr(..))  => {\n+                        if let Some(variants) = this.collect_enum_variants(def) {\n+                            err.note(&format!(\"did you mean to use one \\\n+                                               of the following variants?\\n{}\",\n+                                variants.iter()\n+                                    .map(|suggestion| path_names_to_string(suggestion))\n+                                    .map(|suggestion| format!(\"- `{}`\", suggestion))\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\")));\n+\n+                        } else {\n+                            err.note(\"did you mean to use one of the enum's variants?\");\n+                        }\n+                        return (err, candidates);\n+                    },\n                     _ if ns == ValueNS && is_struct_like(def) => {\n                         if let Def::Struct(def_id) = def {\n                             if let Some((ctor_def, ctor_vis))\n@@ -3540,6 +3556,72 @@ impl<'a> Resolver<'a> {\n         candidates\n     }\n \n+    fn find_module(&mut self,\n+                   module_def: Def)\n+                   -> Option<(Module<'a>, ImportSuggestion)>\n+    {\n+        let mut result = None;\n+        let mut worklist = Vec::new();\n+        let mut seen_modules = FxHashSet();\n+        worklist.push((self.graph_root, Vec::new()));\n+\n+        while let Some((in_module, path_segments)) = worklist.pop() {\n+            // abort if the module is already found\n+            if let Some(_) = result { break; }\n+\n+            self.populate_module_if_necessary(in_module);\n+\n+            in_module.for_each_child_stable(|ident, _, name_binding| {\n+                // abort if the module is already found\n+                if let Some(_) = result {\n+                    return ();\n+                }\n+                if let Some(module) = name_binding.module() {\n+                    // form the path\n+                    let mut path_segments = path_segments.clone();\n+                    path_segments.push(ast::PathSegment::from_ident(ident, name_binding.span));\n+                    if module.def() == Some(module_def) {\n+                        let path = Path {\n+                            span: name_binding.span,\n+                            segments: path_segments,\n+                        };\n+                        result = Some((module, ImportSuggestion { path: path }));\n+                    } else {\n+                        // add the module to the lookup\n+                        if seen_modules.insert(module.def_id().unwrap()) {\n+                            worklist.push((module, path_segments));\n+                        }\n+                    }\n+                }\n+            });\n+        }\n+\n+        result\n+    }\n+\n+    fn collect_enum_variants(&mut self, enum_def: Def) -> Option<Vec<Path>> {\n+        if let Def::Enum(..) = enum_def {} else {\n+            panic!(\"Non-enum def passed to collect_enum_variants: {:?}\", enum_def)\n+        }\n+\n+        self.find_module(enum_def).map(|(enum_module, enum_import_suggestion)| {\n+            self.populate_module_if_necessary(enum_module);\n+\n+            let mut variants = Vec::new();\n+            enum_module.for_each_child_stable(|ident, _, name_binding| {\n+                if let Def::Variant(..) = name_binding.def() {\n+                    let mut segms = enum_import_suggestion.path.segments.clone();\n+                    segms.push(ast::PathSegment::from_ident(ident, name_binding.span));\n+                    variants.push(Path {\n+                        span: name_binding.span,\n+                        segments: segms,\n+                    });\n+                }\n+            });\n+            variants\n+        })\n+    }\n+\n     fn record_def(&mut self, node_id: NodeId, resolution: PathResolution) {\n         debug!(\"(recording def) recording {:?} for {}\", resolution, node_id);\n         if let Some(prev_res) = self.def_map.insert(node_id, resolution) {"}, {"sha": "923b0984d063bb480fd376f50c827579e28f3fdd", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.rs?ref=93426613a78a9e4477071d69dcccd6d4217e5c1d", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Example { Ex(String), NotEx }\n+\n+fn result_test() {\n+    let x = Option(1);\n+\n+    if let Option(_) = x {\n+        println!(\"It is OK.\");\n+    }\n+\n+    let y = Example::Ex(String::from(\"test\"));\n+\n+    if let Example(_) = y {\n+        println!(\"It is OK.\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "8371413c5a2525c0d4f94e872da6cd826efb5d92", "filename": "src/test/ui/did_you_mean/issue-43871-enum-instead-of-variant.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93426613a78a9e4477071d69dcccd6d4217e5c1d/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-43871-enum-instead-of-variant.stderr?ref=93426613a78a9e4477071d69dcccd6d4217e5c1d", "patch": "@@ -0,0 +1,32 @@\n+error[E0423]: expected function, found enum `Option`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:14:13\n+   |\n+14 |     let x = Option(1);\n+   |             ^^^^^^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `std::prelude::v1::Option::None`\n+           - `std::prelude::v1::Option::Some`\n+\n+error[E0532]: expected tuple struct/variant, found enum `Option`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:16:12\n+   |\n+16 |     if let Option(_) = x {\n+   |            ^^^^^^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `std::prelude::v1::Option::None`\n+           - `std::prelude::v1::Option::Some`\n+\n+error[E0532]: expected tuple struct/variant, found enum `Example`\n+  --> $DIR/issue-43871-enum-instead-of-variant.rs:22:12\n+   |\n+22 |     if let Example(_) = y {\n+   |            ^^^^^^^\n+   |\n+   = note: did you mean to use one of the following variants?\n+           - `Example::Ex`\n+           - `Example::NotEx`\n+\n+error: aborting due to 3 previous errors\n+"}]}