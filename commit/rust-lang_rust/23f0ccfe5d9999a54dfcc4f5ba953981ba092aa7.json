{"sha": "23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzZjBjY2ZlNWQ5OTk5YTU0ZGZjYzRmNWJhOTUzOTgxYmEwOTJhYTc=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-07-30T20:10:48Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2020-08-31T13:13:31Z"}, "message": "Stabilise link-self-contained option", "tree": {"sha": "115211c629084c8c99ab6d4cff5c82f2b5c9dd86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/115211c629084c8c99ab6d4cff5c82f2b5c9dd86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "html_url": "https://github.com/rust-lang/rust/commit/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfe289886af727150c1b9ec502cbfd7bbf425e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfe289886af727150c1b9ec502cbfd7bbf425e8", "html_url": "https://github.com/rust-lang/rust/commit/8bfe289886af727150c1b9ec502cbfd7bbf425e8"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "8e272282f40f96b819182003a69cc9c5db4bb88c", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "patch": "@@ -1084,7 +1084,7 @@ fn get_crt_libs_path(sess: &Session) -> Option<PathBuf> {\n \n fn get_object_file_path(sess: &Session, name: &str, self_contained: bool) -> PathBuf {\n     // prefer system {,dll}crt2.o libs, see get_crt_libs_path comment for more details\n-    if sess.opts.debugging_opts.link_self_contained.is_none()\n+    if sess.opts.cg.link_self_contained.is_none()\n         && sess.target.target.llvm_target.contains(\"windows-gnu\")\n     {\n         if let Some(compiler_libs_path) = get_crt_libs_path(sess) {\n@@ -1289,7 +1289,7 @@ fn link_output_kind(sess: &Session, crate_type: CrateType) -> LinkOutputKind {\n /// Whether we link to our own CRT objects instead of relying on gcc to pull them.\n /// We only provide such support for a very limited number of targets.\n fn crt_objects_fallback(sess: &Session, crate_type: CrateType) -> bool {\n-    if let Some(self_contained) = sess.opts.debugging_opts.link_self_contained {\n+    if let Some(self_contained) = sess.opts.cg.link_self_contained {\n         return self_contained;\n     }\n \n@@ -1499,7 +1499,7 @@ fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'\n /// Add sysroot and other globally set directories to the directory search list.\n fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // Prefer system mingw-w64 libs, see get_crt_libs_path comment for more details.\n-    if sess.opts.debugging_opts.link_self_contained.is_none()\n+    if sess.opts.cg.link_self_contained.is_none()\n         && cfg!(windows)\n         && sess.target.target.llvm_target.contains(\"windows-gnu\")\n     {"}, {"sha": "ada8dc90494bc1194c77d5707149022d2028c890", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "patch": "@@ -402,6 +402,7 @@ fn test_codegen_options_tracking_hash() {\n     // `link_arg` is omitted because it just forwards to `link_args`.\n     untracked!(link_args, vec![String::from(\"abc\"), String::from(\"def\")]);\n     untracked!(link_dead_code, Some(true));\n+    untracked!(link_self_contained, Some(true));\n     untracked!(linker, Some(PathBuf::from(\"linker\")));\n     untracked!(linker_flavor, Some(LinkerFlavor::Gcc));\n     untracked!(no_stack_check, true);"}, {"sha": "25d988e87fddecfdf489ddb65da30786d3fc4641", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "patch": "@@ -719,6 +719,9 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"extra arguments to append to the linker invocation (space separated)\"),\n     link_dead_code: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n         \"keep dead code at link time (useful for code coverage) (default: no)\"),\n+    link_self_contained: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n+        \"control whether to link Rust provided C objects/libraries or rely\n+        on C toolchain installed in the system\"),\n     linker: Option<PathBuf> = (None, parse_opt_pathbuf, [UNTRACKED],\n         \"system linker to link outputs with\"),\n     linker_flavor: Option<LinkerFlavor> = (None, parse_linker_flavor, [UNTRACKED],\n@@ -894,9 +897,6 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"keep hygiene data after analysis (default: no)\"),\n     link_native_libraries: bool = (true, parse_bool, [UNTRACKED],\n         \"link native libraries in the linker invocation (default: yes)\"),\n-    link_self_contained: Option<bool> = (None, parse_opt_bool, [TRACKED],\n-        \"control whether to link Rust provided C objects/libraries or rely\n-         on C toolchain installed in the system\"),\n     link_only: bool = (false, parse_bool, [TRACKED],\n         \"link the `.rlink` file generated by `-Z no-link` (default: no)\"),\n     llvm_time_trace: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "bed10ca16d326aec62183dbacfd96bbf7a32630c", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=23f0ccfe5d9999a54dfcc4f5ba953981ba092aa7", "patch": "@@ -44,13 +44,13 @@ incremental builds the default is 256 which allows caching to be more granular.\n \n ## control-flow-guard\n \n-This flag controls whether LLVM enables the Windows [Control Flow \n-Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) \n-platform security feature. This flag is currently ignored for non-Windows targets. \n+This flag controls whether LLVM enables the Windows [Control Flow\n+Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard)\n+platform security feature. This flag is currently ignored for non-Windows targets.\n It takes one of the following values:\n \n * `y`, `yes`, `on`, `checks`, or no value: enable Control Flow Guard.\n-* `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this \n+* `nochecks`: emit Control Flow Guard metadata without runtime enforcement checks (this\n should only be used for testing purposes as it does not provide security enforcement).\n * `n`, `no`, `off`: do not enable Control Flow Guard (the default).\n \n@@ -200,6 +200,18 @@ the following values:\n An example of when this flag might be useful is when trying to construct code coverage\n metrics.\n \n+## link-self-contained\n+\n+On targets that support it this flag controls whether the linker will use libraries and objects\n+shipped with Rust instead or those in the system.\n+It takes one of the following values:\n+\n+* no value: rustc will use heuristic to disable self-contained mode if system has necessary tools.\n+* `y`, `yes`, `on`: use only libraries/objects shipped with Rust.\n+* `n`, `no`, or `off`: rely on the user or the linker to provide non-Rust libraries/objects.\n+\n+This allows overriding cases when detection fails or user wants to use shipped libraries.\n+\n ## linker\n \n This flag controls which linker `rustc` invokes to link your code. It takes a"}]}