{"sha": "078f149aa46c198200f54de556a7ba978a619564", "node_id": "C_kwDOAAsO6NoAKDA3OGYxNDlhYTQ2YzE5ODIwMGY1NGRlNTU2YTdiYTk3OGE2MTk1NjQ", "commit": {"author": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2023-02-10T11:04:24Z"}, "committer": {"name": "Caio", "email": "c410.f3r@gmail.com", "date": "2023-02-10T18:07:34Z"}, "message": "[significant_drop_tightening] Add MVP", "tree": {"sha": "6cc068efd09af9ebe2a9bf6a1f418a4308429604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc068efd09af9ebe2a9bf6a1f418a4308429604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/078f149aa46c198200f54de556a7ba978a619564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/078f149aa46c198200f54de556a7ba978a619564", "html_url": "https://github.com/rust-lang/rust/commit/078f149aa46c198200f54de556a7ba978a619564", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/078f149aa46c198200f54de556a7ba978a619564/comments", "author": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "c410-f3r", "id": 17877264, "node_id": "MDQ6VXNlcjE3ODc3MjY0", "avatar_url": "https://avatars.githubusercontent.com/u/17877264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/c410-f3r", "html_url": "https://github.com/c410-f3r", "followers_url": "https://api.github.com/users/c410-f3r/followers", "following_url": "https://api.github.com/users/c410-f3r/following{/other_user}", "gists_url": "https://api.github.com/users/c410-f3r/gists{/gist_id}", "starred_url": "https://api.github.com/users/c410-f3r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/c410-f3r/subscriptions", "organizations_url": "https://api.github.com/users/c410-f3r/orgs", "repos_url": "https://api.github.com/users/c410-f3r/repos", "events_url": "https://api.github.com/users/c410-f3r/events{/privacy}", "received_events_url": "https://api.github.com/users/c410-f3r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7558148c22e53cd4608773b56cdfa50dcdeac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7558148c22e53cd4608773b56cdfa50dcdeac3", "html_url": "https://github.com/rust-lang/rust/commit/0f7558148c22e53cd4608773b56cdfa50dcdeac3"}], "stats": {"total": 566, "additions": 566, "deletions": 0}, "files": [{"sha": "2367524ca72486b0f0be5c7cd39b86c499654273", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -4734,6 +4734,7 @@ Released 2018-09-13\n [`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`significant_drop_in_scrutinee`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee\n+[`significant_drop_tightening`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_tightening\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n [`single_char_lifetime_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names"}, {"sha": "bc8ea8a6f2f5bb93d349e76b994e4aae65f151eb", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -536,6 +536,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::shadow::SHADOW_REUSE_INFO,\n     crate::shadow::SHADOW_SAME_INFO,\n     crate::shadow::SHADOW_UNRELATED_INFO,\n+    crate::significant_drop_tightening::SIGNIFICANT_DROP_TIGHTENING_INFO,\n     crate::single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES_INFO,\n     crate::single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS_INFO,\n     crate::size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT_INFO,"}, {"sha": "223e6698b723cc3c26f95cbd084a885eb52b7c63", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -2,6 +2,7 @@\n #![feature(binary_heap_into_iter_sorted)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n+#![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(lint_reasons)]\n@@ -263,6 +264,7 @@ mod semicolon_block;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n+mod significant_drop_tightening;\n mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n@@ -558,6 +560,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(eta_reduction::EtaReduction));\n     store.register_late_pass(|_| Box::new(mut_mut::MutMut));\n     store.register_late_pass(|_| Box::new(mut_reference::UnnecessaryMutPassed));\n+    store.register_late_pass(|_| Box::<significant_drop_tightening::SignificantDropTightening<'_>>::default());\n     store.register_late_pass(|_| Box::new(len_zero::LenZero));\n     store.register_late_pass(|_| Box::new(attrs::Attributes));\n     store.register_late_pass(|_| Box::new(blocks_in_if_conditions::BlocksInIfConditions));"}, {"sha": "a509592a1a4ecac9e6ca0b731e45cf3caa546f3c", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "added", "additions": 381, "deletions": 0, "changes": 381, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -0,0 +1,381 @@\n+use crate::FxHashSet;\n+use clippy_utils::{\n+    diagnostics::span_lint_and_then,\n+    get_attr,\n+    source::{indent_of, snippet},\n+};\n+use rustc_errors::{Applicability, Diagnostic};\n+use rustc_hir::{\n+    self as hir,\n+    intravisit::{walk_expr, Visitor},\n+};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::ty::{subst::GenericArgKind, Ty, TypeAndMut};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{symbol::Ident, Span, DUMMY_SP};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    ///\n+    /// Searches for elements marked with `#[clippy::significant_drop]` that could be early\n+    /// dropped but are in fact dropped at the end of their scopes. In other words, enforces the\n+    /// \"tightening\" of their possible lifetimes.\n+    ///\n+    /// ### Why is this bad?\n+    ///\n+    /// Elements marked with `#[clippy::has_significant_drop]` are generally synchronizing\n+    /// primitives that manage shared resources, as such, it is desired to release them as soon as\n+    /// possible to avoid unnecessary resource contention.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore\n+    /// fn main() {\n+    ///   let lock = some_sync_resource.lock();\n+    ///   let owned_rslt = lock.do_stuff_with_resource();\n+    ///   // Only `owned_rslt` is needed but `lock` is still held.\n+    ///   do_heavy_computation_that_takes_time(owned_rslt);\n+    /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    ///\n+    /// ```rust,ignore\n+    /// fn main() {\n+    ///     let owned_rslt = some_sync_resource.lock().do_stuff_with_resource();\n+    ///     do_heavy_computation_that_takes_time(owned_rslt);\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.67.0\"]\n+    pub SIGNIFICANT_DROP_TIGHTENING,\n+    nursery,\n+    \"Searches for elements marked with `#[clippy::has_significant_drop]` that could be early dropped but are in fact dropped at the end of their scopes\"\n+}\n+\n+impl_lint_pass!(SignificantDropTightening<'_> => [SIGNIFICANT_DROP_TIGHTENING]);\n+\n+#[derive(Default)]\n+pub struct SignificantDropTightening<'tcx> {\n+    /// Auxiliary structure used to avoid having to verify the same type multiple times.\n+    seen_types: FxHashSet<Ty<'tcx>>,\n+}\n+\n+impl<'tcx> SignificantDropTightening<'tcx> {\n+    /// Verifies if the expression is of type `drop(some_lock_path)` to assert that the temporary\n+    /// is already being dropped before the end of its scope.\n+    fn has_drop(expr: &'tcx hir::Expr<'_>, init_bind_ident: Ident) -> bool {\n+        if let hir::ExprKind::Call(fun, args) = expr.kind\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, fun_path)) = &fun.kind\n+            && let [fun_ident, ..] = fun_path.segments\n+            && fun_ident.ident.name == rustc_span::sym::drop\n+            && let [first_arg, ..] = args\n+            && let hir::ExprKind::Path(hir::QPath::Resolved(_, arg_path)) = &first_arg.kind\n+            && let [first_arg_ps, .. ] = arg_path.segments\n+        {\n+            first_arg_ps.ident == init_bind_ident\n+        }\n+        else {\n+            false\n+        }\n+    }\n+\n+    /// Tries to find types marked with `#[has_significant_drop]` of an expression `expr` that is\n+    /// originated from `stmt` and then performs common logic on `sdap`.\n+    fn modify_sdap_if_sig_drop_exists(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        expr: &'tcx hir::Expr<'_>,\n+        idx: usize,\n+        sdap: &mut SigDropAuxParams,\n+        stmt: &'tcx hir::Stmt<'_>,\n+        cb: impl Fn(&mut SigDropAuxParams),\n+    ) {\n+        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n+        sig_drop_finder.visit_expr(expr);\n+        if sig_drop_finder.has_sig_drop {\n+            cb(sdap);\n+            if sdap.number_of_stmts > 0 {\n+                sdap.last_use_stmt_idx = idx;\n+                sdap.last_use_stmt_span = stmt.span;\n+                if let hir::ExprKind::MethodCall(_, _, _, span) = expr.kind {\n+                    sdap.last_use_method_span = span;\n+                }\n+            }\n+            sdap.number_of_stmts = sdap.number_of_stmts.wrapping_add(1);\n+        }\n+    }\n+\n+    /// Shows a generic overall message as well as specialized messages depending on the usage.\n+    fn set_suggestions(cx: &LateContext<'tcx>, block_span: Span, diag: &mut Diagnostic, sdap: &SigDropAuxParams) {\n+        match sdap.number_of_stmts {\n+            0 | 1 => {},\n+            2 => {\n+                let indent = \" \".repeat(indent_of(cx, sdap.last_use_stmt_span).unwrap_or(0));\n+                let init_method = snippet(cx, sdap.init_method_span, \"..\");\n+                let usage_method = snippet(cx, sdap.last_use_method_span, \"..\");\n+                let stmt = if let Some(last_use_bind_span) = sdap.last_use_bind_span {\n+                    format!(\n+                        \"\\n{indent}let {} = {init_method}.{usage_method};\",\n+                        snippet(cx, last_use_bind_span, \"..\"),\n+                    )\n+                } else {\n+                    format!(\"\\n{indent}{init_method}.{usage_method};\")\n+                };\n+                diag.span_suggestion_verbose(\n+                    sdap.init_stmt_span,\n+                    \"merge the temporary construction with its single usage\",\n+                    stmt,\n+                    Applicability::MaybeIncorrect,\n+                );\n+                diag.span_suggestion(\n+                    sdap.last_use_stmt_span,\n+                    \"remove separated single usage\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+            _ => {\n+                diag.span_suggestion(\n+                    sdap.last_use_stmt_span.shrink_to_hi(),\n+                    \"drop the temporary after the end of its last usage\",\n+                    format!(\n+                        \"\\n{}drop({});\",\n+                        \" \".repeat(indent_of(cx, sdap.last_use_stmt_span).unwrap_or(0)),\n+                        sdap.init_bind_ident\n+                    ),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            },\n+        }\n+        diag.note(\"this might lead to unnecessary resource contention\");\n+        diag.span_label(\n+            block_span,\n+            format!(\n+                \"temporary `{}` is currently being dropped at the end of its contained scope\",\n+                sdap.init_bind_ident\n+            ),\n+        );\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for SignificantDropTightening<'tcx> {\n+    fn check_block(&mut self, cx: &LateContext<'tcx>, block: &'tcx hir::Block<'_>) {\n+        let mut sdap = SigDropAuxParams::default();\n+        for (idx, stmt) in block.stmts.iter().enumerate() {\n+            match stmt.kind {\n+                hir::StmtKind::Expr(expr) => self.modify_sdap_if_sig_drop_exists(\n+                    cx,\n+                    expr,\n+                    idx,\n+                    &mut sdap,\n+                    stmt,\n+                    |_| {}\n+                ),\n+                hir::StmtKind::Local(local) if let Some(expr) = local.init => self.modify_sdap_if_sig_drop_exists(\n+                    cx,\n+                    expr,\n+                    idx,\n+                    &mut sdap,\n+                    stmt,\n+                    |local_sdap| {\n+                        if local_sdap.number_of_stmts == 0 {\n+                            if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind {\n+                                local_sdap.init_bind_ident = ident;\n+                            }\n+                            if let hir::ExprKind::MethodCall(_, local_expr, _, span) = expr.kind {\n+                                local_sdap.init_method_span = local_expr.span.to(span);\n+                            }\n+                            local_sdap.init_stmt_span = stmt.span;\n+                        }\n+                        else if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind {\n+                            local_sdap.last_use_bind_span = Some(ident.span);\n+                        }\n+                    }\n+                ),\n+                hir::StmtKind::Semi(expr) => {\n+                    if Self::has_drop(expr, sdap.init_bind_ident) {\n+                        return;\n+                    }\n+                    self.modify_sdap_if_sig_drop_exists(cx, expr, idx, &mut sdap, stmt, |_| {});\n+                },\n+                _ => continue\n+            };\n+        }\n+        if sdap.number_of_stmts > 1 && {\n+            let last_stmts_idx = block.stmts.len().wrapping_sub(1);\n+            sdap.last_use_stmt_idx != last_stmts_idx\n+        } {\n+            span_lint_and_then(\n+                cx,\n+                SIGNIFICANT_DROP_TIGHTENING,\n+                sdap.init_bind_ident.span,\n+                \"temporary with significant `Drop` can be early dropped\",\n+                |diag| {\n+                    Self::set_suggestions(cx, block.span, diag, &sdap);\n+                },\n+            );\n+        }\n+    }\n+}\n+\n+/// Auxiliary parameters used on each block check.\n+struct SigDropAuxParams {\n+    /// The binding or variable that references the initial construction of the type marked with\n+    /// `#[has_significant_drop]`.\n+    init_bind_ident: Ident,\n+    /// Similar to `init_bind_ident` but encompasses the right-hand method call.\n+    init_method_span: Span,\n+    /// Similar to `init_bind_ident` but encompasses the whole contained statement.\n+    init_stmt_span: Span,\n+\n+    /// The last visited binding or variable span within a block that had any referenced inner type\n+    /// marked with `#[has_significant_drop]`.\n+    last_use_bind_span: Option<Span>,\n+    /// Index of the last visited statement within a block that had any referenced inner type\n+    /// marked with `#[has_significant_drop]`.\n+    last_use_stmt_idx: usize,\n+    /// Similar to `last_use_bind_span` but encompasses the whole contained statement.\n+    last_use_stmt_span: Span,\n+    /// Similar to `last_use_bind_span` but encompasses the right-hand method call.\n+    last_use_method_span: Span,\n+\n+    /// Total number of statements within a block that have any referenced inner type marked with\n+    /// `#[has_significant_drop]`.\n+    number_of_stmts: usize,\n+}\n+\n+impl Default for SigDropAuxParams {\n+    fn default() -> Self {\n+        Self {\n+            init_bind_ident: Ident::empty(),\n+            init_method_span: DUMMY_SP,\n+            init_stmt_span: DUMMY_SP,\n+            last_use_bind_span: None,\n+            last_use_method_span: DUMMY_SP,\n+            last_use_stmt_idx: 0,\n+            last_use_stmt_span: DUMMY_SP,\n+            number_of_stmts: 0,\n+        }\n+    }\n+}\n+\n+/// Checks the existence of the `#[has_significant_drop]` attribute\n+struct SigDropChecker<'cx, 'sdt, 'tcx> {\n+    cx: &'cx LateContext<'tcx>,\n+    seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+}\n+\n+impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n+    pub(crate) fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+        seen_types.clear();\n+        Self { cx, seen_types }\n+    }\n+\n+    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+        if let Some(adt) = ty.ty_adt_def() {\n+            let iter = get_attr(\n+                self.cx.sess(),\n+                self.cx.tcx.get_attrs_unchecked(adt.did()),\n+                \"has_significant_drop\",\n+            );\n+            if iter.count() > 0 {\n+                return true;\n+            }\n+        }\n+        match ty.kind() {\n+            rustc_middle::ty::Adt(a, b) => {\n+                for f in a.all_fields() {\n+                    let ty = f.ty(self.cx.tcx, b);\n+                    if !self.has_seen_ty(ty) && self.has_sig_drop_attr(ty) {\n+                        return true;\n+                    }\n+                }\n+                for generic_arg in b.iter() {\n+                    if let GenericArgKind::Type(ty) = generic_arg.unpack() {\n+                        if self.has_sig_drop_attr(ty) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+                false\n+            },\n+            rustc_middle::ty::Array(ty, _)\n+            | rustc_middle::ty::RawPtr(TypeAndMut { ty, .. })\n+            | rustc_middle::ty::Ref(_, ty, _)\n+            | rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(*ty),\n+            _ => false,\n+        }\n+    }\n+\n+    fn has_seen_ty(&mut self, ty: Ty<'tcx>) -> bool {\n+        !self.seen_types.insert(ty)\n+    }\n+}\n+\n+/// Performs recursive calls to find any inner type marked with `#[has_significant_drop]`.\n+struct SigDropFinder<'cx, 'sdt, 'tcx> {\n+    cx: &'cx LateContext<'tcx>,\n+    has_sig_drop: bool,\n+    sig_drop_checker: SigDropChecker<'cx, 'sdt, 'tcx>,\n+}\n+\n+impl<'cx, 'sdt, 'tcx> SigDropFinder<'cx, 'sdt, 'tcx> {\n+    fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+        Self {\n+            cx,\n+            has_sig_drop: false,\n+            sig_drop_checker: SigDropChecker::new(cx, seen_types),\n+        }\n+    }\n+}\n+\n+impl<'cx, 'sdt, 'tcx> Visitor<'tcx> for SigDropFinder<'cx, 'sdt, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr<'_>) {\n+        if self\n+            .sig_drop_checker\n+            .has_sig_drop_attr(self.cx.typeck_results().expr_ty(ex))\n+        {\n+            self.has_sig_drop = true;\n+            return;\n+        }\n+\n+        match ex.kind {\n+            hir::ExprKind::MethodCall(_, expr, ..) => {\n+                self.visit_expr(expr);\n+            },\n+            hir::ExprKind::Array(..)\n+            | hir::ExprKind::Assign(..)\n+            | hir::ExprKind::AssignOp(..)\n+            | hir::ExprKind::Binary(..)\n+            | hir::ExprKind::Box(..)\n+            | hir::ExprKind::Call(..)\n+            | hir::ExprKind::Field(..)\n+            | hir::ExprKind::If(..)\n+            | hir::ExprKind::Index(..)\n+            | hir::ExprKind::Match(..)\n+            | hir::ExprKind::Repeat(..)\n+            | hir::ExprKind::Ret(..)\n+            | hir::ExprKind::Tup(..)\n+            | hir::ExprKind::Unary(..)\n+            | hir::ExprKind::Yield(..) => {\n+                walk_expr(self, ex);\n+            },\n+            hir::ExprKind::AddrOf(_, _, _)\n+            | hir::ExprKind::Block(_, _)\n+            | hir::ExprKind::Break(_, _)\n+            | hir::ExprKind::Cast(_, _)\n+            | hir::ExprKind::Closure { .. }\n+            | hir::ExprKind::ConstBlock(_)\n+            | hir::ExprKind::Continue(_)\n+            | hir::ExprKind::DropTemps(_)\n+            | hir::ExprKind::Err\n+            | hir::ExprKind::InlineAsm(_)\n+            | hir::ExprKind::Let(_)\n+            | hir::ExprKind::Lit(_)\n+            | hir::ExprKind::Loop(_, _, _, _)\n+            | hir::ExprKind::Path(_)\n+            | hir::ExprKind::Struct(_, _, _)\n+            | hir::ExprKind::Type(_, _) => {},\n+        }\n+    }\n+}"}, {"sha": "7d56a87053fdb3ae49794c16ba2b8f702ec8b643", "filename": "tests/ui/significant_drop_tightening.fixed", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.fixed?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -0,0 +1,56 @@\n+// run-rustfix\n+\n+#![warn(clippy::significant_drop_tightening)]\n+\n+use std::sync::Mutex;\n+\n+pub fn unnecessary_contention_with_multiple_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+        let _ = lock.is_positive();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        let rslt1 = lock.is_positive();\n+        drop(lock);\n+        do_heavy_computation_that_takes_time((rslt0, rslt1));\n+    }\n+}\n+\n+pub fn unnecessary_contention_with_single_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        \n+        let rslt0 = mutex.lock().unwrap().abs();\n+        \n+        do_heavy_computation_that_takes_time(rslt0);\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        \n+        mutex.lock().unwrap().clear();\n+        \n+        do_heavy_computation_that_takes_time(());\n+    }\n+}\n+\n+// Marker used for illustration purposes.\n+pub fn do_heavy_computation_that_takes_time<T>(_: T) {}\n+\n+fn main() {}"}, {"sha": "6f3ce328e5d941e766f90af7c98a53a710fe369b", "filename": "tests/ui/significant_drop_tightening.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.rs?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -0,0 +1,53 @@\n+// run-rustfix\n+\n+#![warn(clippy::significant_drop_tightening)]\n+\n+use std::sync::Mutex;\n+\n+pub fn unnecessary_contention_with_multiple_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+        let _ = lock.is_positive();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        let rslt1 = lock.is_positive();\n+        do_heavy_computation_that_takes_time((rslt0, rslt1));\n+    }\n+}\n+\n+pub fn unnecessary_contention_with_single_owned_results() {\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let _ = lock.abs();\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+    }\n+\n+    {\n+        let mutex = Mutex::new(1i32);\n+        let lock = mutex.lock().unwrap();\n+        let rslt0 = lock.abs();\n+        do_heavy_computation_that_takes_time(rslt0);\n+    }\n+    {\n+        let mutex = Mutex::new(vec![1i32]);\n+        let mut lock = mutex.lock().unwrap();\n+        lock.clear();\n+        do_heavy_computation_that_takes_time(());\n+    }\n+}\n+\n+// Marker used for illustration purposes.\n+pub fn do_heavy_computation_that_takes_time<T>(_: T) {}\n+\n+fn main() {}"}, {"sha": "52754aac782691009fc9318fb7f7becd9caac14c", "filename": "tests/ui/significant_drop_tightening.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/078f149aa46c198200f54de556a7ba978a619564/tests%2Fui%2Fsignificant_drop_tightening.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsignificant_drop_tightening.stderr?ref=078f149aa46c198200f54de556a7ba978a619564", "patch": "@@ -0,0 +1,71 @@\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:17:13\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(1i32);\n+LL | |         let lock = mutex.lock().unwrap();\n+   | |             ^^^^\n+LL | |         let rslt0 = lock.abs();\n+LL | |         let rslt1 = lock.is_positive();\n+LL | |         do_heavy_computation_that_takes_time((rslt0, rslt1));\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+   = note: `-D clippy::significant-drop-tightening` implied by `-D warnings`\n+help: drop the temporary after the end of its last usage\n+   |\n+LL ~         let rslt1 = lock.is_positive();\n+LL +         drop(lock);\n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:38:13\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(1i32);\n+LL | |         let lock = mutex.lock().unwrap();\n+   | |             ^^^^\n+LL | |         let rslt0 = lock.abs();\n+LL | |         do_heavy_computation_that_takes_time(rslt0);\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+help: merge the temporary construction with its single usage\n+   |\n+LL ~         \n+LL +         let rslt0 = mutex.lock().unwrap().abs();\n+   |\n+help: remove separated single usage\n+   |\n+LL -         let rslt0 = lock.abs();\n+LL +         \n+   |\n+\n+error: temporary with significant `Drop` can be early dropped\n+  --> $DIR/significant_drop_tightening.rs:44:17\n+   |\n+LL | /     {\n+LL | |         let mutex = Mutex::new(vec![1i32]);\n+LL | |         let mut lock = mutex.lock().unwrap();\n+   | |                 ^^^^\n+LL | |         lock.clear();\n+LL | |         do_heavy_computation_that_takes_time(());\n+LL | |     }\n+   | |_____- temporary `lock` is currently being dropped at the end of its contained scope\n+   |\n+   = note: this might lead to unnecessary resource contention\n+help: merge the temporary construction with its single usage\n+   |\n+LL ~         \n+LL +         mutex.lock().unwrap().clear();\n+   |\n+help: remove separated single usage\n+   |\n+LL -         lock.clear();\n+LL +         \n+   |\n+\n+error: aborting due to 3 previous errors\n+"}]}