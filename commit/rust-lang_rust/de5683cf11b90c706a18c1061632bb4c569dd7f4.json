{"sha": "de5683cf11b90c706a18c1061632bb4c569dd7f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNTY4M2NmMTFiOTBjNzA2YTE4YzEwNjE2MzJiYjRjNTY5ZGQ3ZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-12-22T02:30:45Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-12-22T02:30:45Z"}, "message": "fix tests", "tree": {"sha": "5bdb8a9238f5ff457f80d4a4f7ee60886fdb8558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bdb8a9238f5ff457f80d4a4f7ee60886fdb8558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5683cf11b90c706a18c1061632bb4c569dd7f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5683cf11b90c706a18c1061632bb4c569dd7f4", "html_url": "https://github.com/rust-lang/rust/commit/de5683cf11b90c706a18c1061632bb4c569dd7f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5683cf11b90c706a18c1061632bb4c569dd7f4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c813b98e96b5b7c916914e61a6b196d3e73cf338", "url": "https://api.github.com/repos/rust-lang/rust/commits/c813b98e96b5b7c916914e61a6b196d3e73cf338", "html_url": "https://github.com/rust-lang/rust/commit/c813b98e96b5b7c916914e61a6b196d3e73cf338"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "a1156a7b4bbe4d9778d9c119ce6611dbef56fa42", "filename": "src/types.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/de5683cf11b90c706a18c1061632bb4c569dd7f4/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5683cf11b90c706a18c1061632bb4c569dd7f4/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=de5683cf11b90c706a18c1061632bb4c569dd7f4", "patch": "@@ -422,7 +422,11 @@ impl Rewrite for ast::WherePredicate {\n \n                 let colon = type_bound_colon(context);\n \n-                if bound_generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n+                if bound_generic_params\n+                    .iter()\n+                    .filter(|p| p.is_lifetime_param())\n+                    .count() > 0\n+                {\n                     let lifetime_str: String = bound_generic_params\n                         .iter()\n                         .filter_map(|p| match p {\n@@ -594,7 +598,11 @@ impl Rewrite for ast::TyParam {\n \n impl Rewrite for ast::PolyTraitRef {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        if self.bound_generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n+        if self.bound_generic_params\n+            .iter()\n+            .filter(|p| p.is_lifetime_param())\n+            .count() > 0\n+        {\n             let lifetime_str: String = self.bound_generic_params\n                 .iter()\n                 .filter_map(|p| match p {\n@@ -754,7 +762,12 @@ fn rewrite_bare_fn(\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n \n-    if bare_fn.generic_params.iter().filter(|p| p.is_lifetime_param()).count() > 0 {\n+    if bare_fn\n+        .generic_params\n+        .iter()\n+        .filter(|p| p.is_lifetime_param())\n+        .count() > 0\n+    {\n         result.push_str(\"for<\");\n         // 6 = \"for<> \".len(), 4 = \"for<\".\n         // This doesn't work out so nicely for mutliline situation with lots of"}]}