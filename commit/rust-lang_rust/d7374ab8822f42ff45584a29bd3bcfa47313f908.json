{"sha": "d7374ab8822f42ff45584a29bd3bcfa47313f908", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3Mzc0YWI4ODIyZjQyZmY0NTU4NGEyOWJkM2JjZmE0NzMxM2Y5MDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-14T16:19:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-14T16:19:14Z"}, "message": "Merge #9896\n\n9896: internal: Only complete type annotations for patterns in function params r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "00eebc061b8bac244f4d9c1e4b98e713c3dbfa06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00eebc061b8bac244f4d9c1e4b98e713c3dbfa06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7374ab8822f42ff45584a29bd3bcfa47313f908", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhF+0CCRBK7hj4Ov3rIwAATWQIAGs08IvPuMavL2A2q0Cuhgwh\nTD+9gDCg2NmVTqReR+P1srxnaOrq/K8zfmicIKp3oru2fRnLZvd24fmzSITSfhSf\nrAJRR/r/asK3hIAbVO07VmadzaKV+bbUeAKH4knsqgNu4URbqtI3whjM92wSKKCw\nKYOLUAJvvaY+COu8xkmoN9RgasToxIpx+UA/cdfNosqXuvahgDSGHkqEU2/FIdiw\n0yMPK3vHO26Zm3RHMws/g2Vnu2FT0JJHie3NcxaKo61pEkTK4c7UpmjiPuEIHA0z\nvBv5SQLKSG4IQICQHIW7WUM40JpvIlTMhC4hFn5afoojMgL9+C+f3D6Vi9q4Vg0=\n=LC2g\n-----END PGP SIGNATURE-----\n", "payload": "tree 00eebc061b8bac244f4d9c1e4b98e713c3dbfa06\nparent 5a60e9106b8dcfae4caa4d8fdb62de078d3c12a9\nparent bf918046fab665ba4d35db151224f514d41abbb0\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628957954 +0000\ncommitter GitHub <noreply@github.com> 1628957954 +0000\n\nMerge #9896\n\n9896: internal: Only complete type annotations for patterns in function params r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7374ab8822f42ff45584a29bd3bcfa47313f908", "html_url": "https://github.com/rust-lang/rust/commit/d7374ab8822f42ff45584a29bd3bcfa47313f908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7374ab8822f42ff45584a29bd3bcfa47313f908/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a60e9106b8dcfae4caa4d8fdb62de078d3c12a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a60e9106b8dcfae4caa4d8fdb62de078d3c12a9", "html_url": "https://github.com/rust-lang/rust/commit/5a60e9106b8dcfae4caa4d8fdb62de078d3c12a9"}, {"sha": "bf918046fab665ba4d35db151224f514d41abbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf918046fab665ba4d35db151224f514d41abbb0", "html_url": "https://github.com/rust-lang/rust/commit/bf918046fab665ba4d35db151224f514d41abbb0"}], "stats": {"total": 86, "additions": 67, "deletions": 19}, "files": [{"sha": "1488436df3521941fc6cc1ca60fa2057dac4479d", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=d7374ab8822f42ff45584a29bd3bcfa47313f908", "patch": "@@ -6,14 +6,17 @@ use syntax::{\n     match_ast, AstNode,\n };\n \n-use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n+use crate::{\n+    context::ParamKind, CompletionContext, CompletionItem, CompletionItemKind, CompletionKind,\n+    Completions,\n+};\n \n /// Complete repeated parameters, both name and type. For example, if all\n /// functions in a file have a `spam: &mut Spam` parameter, a completion with\n /// `spam: &mut Spam` insert text/label and `spam` lookup string will be\n /// suggested.\n pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n-    if !ctx.is_param {\n+    if ctx.is_param != Some(ParamKind::Function) {\n         return None;\n     }\n "}, {"sha": "f4637c401be8f9ca05331d2ab964691ac6663a7d", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=d7374ab8822f42ff45584a29bd3bcfa47313f908", "patch": "@@ -60,6 +60,12 @@ pub(crate) enum CallKind {\n     Mac,\n     Expr,\n }\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub(crate) enum ParamKind {\n+    Function,\n+    Closure,\n+}\n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n@@ -91,7 +97,7 @@ pub(crate) struct CompletionContext<'a> {\n \n     // potentially set if we are completing a name\n     pub(super) is_pat_or_const: Option<PatternRefutability>,\n-    pub(super) is_param: bool,\n+    pub(super) is_param: Option<ParamKind>,\n \n     pub(super) completion_location: Option<ImmediateLocation>,\n     pub(super) prev_sibling: Option<ImmediatePrevSibling>,\n@@ -158,7 +164,7 @@ impl<'a> CompletionContext<'a> {\n             lifetime_allowed: false,\n             is_label_ref: false,\n             is_pat_or_const: None,\n-            is_param: false,\n+            is_param: None,\n             completion_location: None,\n             prev_sibling: None,\n             attribute_under_caret: None,\n@@ -670,7 +676,17 @@ impl<'a> CompletionContext<'a> {\n             self.fill_impl_def();\n         }\n \n-        self.is_param |= is_node::<ast::Param>(name.syntax());\n+        if let Some(param) = name\n+            .syntax()\n+            .ancestors()\n+            .find_map(ast::Param::cast)\n+            .filter(|it| it.syntax().text_range() == name.syntax().text_range())\n+        {\n+            let is_closure_param =\n+                param.syntax().ancestors().nth(2).and_then(ast::ClosureExpr::cast).is_some();\n+            self.is_param =\n+                Some(if is_closure_param { ParamKind::Closure } else { ParamKind::Function });\n+        }\n     }\n \n     fn classify_name_ref(&mut self, original_file: &SyntaxNode, name_ref: ast::NameRef) {\n@@ -774,13 +790,6 @@ fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Op\n     syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n \n-fn is_node<N: AstNode>(node: &SyntaxNode) -> bool {\n-    match node.ancestors().find_map(N::cast) {\n-        None => false,\n-        Some(n) => n.syntax().text_range() == node.text_range(),\n-    }\n-}\n-\n fn path_or_use_tree_qualifier(path: &ast::Path) -> Option<(ast::Path, bool)> {\n     if let Some(qual) = path.qualifier() {\n         return Some((qual, false));"}, {"sha": "67961a602f961ad9dd64f4caed095c85ad2b4ea5", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=d7374ab8822f42ff45584a29bd3bcfa47313f908", "patch": "@@ -4,7 +4,10 @@ use hir::{db::HirDatabase, HasAttrs, HasVisibility, Name, StructKind};\n use ide_db::helpers::SnippetCap;\n use itertools::Itertools;\n \n-use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n+use crate::{\n+    context::ParamKind, item::CompletionKind, render::RenderContext, CompletionItem,\n+    CompletionItemKind,\n+};\n \n pub(crate) fn render_struct_pat(\n     ctx: RenderContext<'_>,\n@@ -83,7 +86,7 @@ fn render_pat(\n         _ => return None,\n     };\n \n-    if ctx.completion.is_param {\n+    if ctx.completion.is_param == Some(ParamKind::Function) {\n         pat.push(':');\n         pat.push(' ');\n         pat.push_str(name);"}, {"sha": "68871a46716b3ab0d9af3ffccecf4c4f7afe0bd8", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=d7374ab8822f42ff45584a29bd3bcfa47313f908", "patch": "@@ -58,11 +58,6 @@ fn render_literal(\n         _ => return None,\n     };\n \n-    if ctx.completion.is_param {\n-        literal.push(':');\n-        literal.push(' ');\n-        literal.push_str(name);\n-    }\n     if ctx.snippet_cap().is_some() {\n         literal.push_str(\"$0\");\n     }"}, {"sha": "3e10575b19e00fc10a990ea84877148db2110563", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7374ab8822f42ff45584a29bd3bcfa47313f908/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=d7374ab8822f42ff45584a29bd3bcfa47313f908", "patch": "@@ -309,3 +309,41 @@ fn outer(Foo { bar$0 }: Foo) {}\n         expect![[r#\"\"#]],\n     )\n }\n+\n+#[test]\n+fn completes_in_fn_param() {\n+    check_empty(\n+        r#\"\n+struct Foo { bar: Bar }\n+struct Bar(u32);\n+fn foo($0) {}\n+\"#,\n+        expect![[r#\"\n+            kw mut\n+            bn Foo Foo { bar$1 }: Foo$0\n+            st Foo\n+            bn Bar Bar($1): Bar$0\n+            st Bar\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn completes_in_closure_param() {\n+    check_empty(\n+        r#\"\n+struct Foo { bar: Bar }\n+struct Bar(u32);\n+fn foo() {\n+    |$0| {};\n+}\n+\"#,\n+        expect![[r#\"\n+            kw mut\n+            bn Foo Foo { bar$1 }$0\n+            st Foo\n+            bn Bar Bar($1)$0\n+            st Bar\n+        \"#]],\n+    )\n+}"}]}