{"sha": "d3512b1d8e04ab8ab78ea5111a177605d13dfff1", "node_id": "C_kwDOAAsO6NoAKGQzNTEyYjFkOGUwNGFiOGFiNzhlYTUxMTFhMTc3NjA1ZDEzZGZmZjE", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T13:15:51Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-08-12T18:29:46Z"}, "message": "Don't attempt to do incr comp for the allocator shim\n\nThe allocator shim doesn't get reused and the allocator shim is just\nunder 2kb, so reusing it is likely more expensive than regenerating it.", "tree": {"sha": "b6ff5936cf03697671aebf2ea60222673f761f5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ff5936cf03697671aebf2ea60222673f761f5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3512b1d8e04ab8ab78ea5111a177605d13dfff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3512b1d8e04ab8ab78ea5111a177605d13dfff1", "html_url": "https://github.com/rust-lang/rust/commit/d3512b1d8e04ab8ab78ea5111a177605d13dfff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3512b1d8e04ab8ab78ea5111a177605d13dfff1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7d8a811d646cc9f30eb550d2aed7ff3530bb40", "html_url": "https://github.com/rust-lang/rust/commit/db7d8a811d646cc9f30eb550d2aed7ff3530bb40"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "ee89d0701aa3725d67559dcce48eee8011df3950", "filename": "src/driver/aot.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d3512b1d8e04ab8ab78ea5111a177605d13dfff1/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3512b1d8e04ab8ab78ea5111a177605d13dfff1/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=d3512b1d8e04ab8ab78ea5111a177605d13dfff1", "patch": "@@ -38,12 +38,11 @@ pub(crate) struct OngoingCodegen {\n     metadata_module: Option<CompiledModule>,\n     metadata: EncodedMetadata,\n     crate_info: CrateInfo,\n-    work_products: FxHashMap<WorkProductId, WorkProduct>,\n }\n \n impl OngoingCodegen {\n     pub(crate) fn join(self) -> (CodegenResults, FxHashMap<WorkProductId, WorkProduct>) {\n-        let mut work_products = self.work_products;\n+        let mut work_products = FxHashMap::default();\n         let mut modules = vec![];\n \n         for module_codegen_result in self.modules {\n@@ -331,8 +330,6 @@ pub(crate) fn run_aot(\n \n     tcx.sess.abort_if_errors();\n \n-    let mut work_products = FxHashMap::default();\n-\n     let isa = crate::build_isa(tcx.sess, &backend_config);\n     let mut allocator_module = make_module(tcx.sess, isa, \"allocator_shim\".to_string());\n     assert_eq!(pointer_ty(tcx), allocator_module.target_config().pointer_type());\n@@ -341,21 +338,27 @@ pub(crate) fn run_aot(\n         crate::allocator::codegen(tcx, &mut allocator_module, &mut allocator_unwind_context);\n \n     let allocator_module = if created_alloc_shim {\n-        let ModuleCodegenResult { module_regular, module_global_asm, work_product } = emit_module(\n-            tcx,\n-            &backend_config,\n-            \"allocator_shim\".to_string(),\n-            ModuleKind::Allocator,\n-            allocator_module,\n-            None,\n-            allocator_unwind_context,\n-            None,\n-        );\n-        assert!(module_global_asm.is_none());\n-        if let Some((id, product)) = work_product {\n-            work_products.insert(id, product);\n+        let name = \"allocator_shim\".to_owned();\n+\n+        let mut product = allocator_module.finish();\n+        allocator_unwind_context.emit(&mut product);\n+\n+        let tmp_file = tcx.output_filenames(()).temp_path(OutputType::Object, Some(&name));\n+        let obj = product.object.write().unwrap();\n+\n+        tcx.sess.prof.artifact_size(\"object_file\", &*name, obj.len().try_into().unwrap());\n+\n+        if let Err(err) = std::fs::write(&tmp_file, obj) {\n+            tcx.sess.fatal(&format!(\"error writing object file: {}\", err));\n         }\n-        Some(module_regular)\n+\n+        Some(CompiledModule {\n+            name,\n+            kind: ModuleKind::Allocator,\n+            object: Some(tmp_file),\n+            dwarf_object: None,\n+            bytecode: None,\n+        })\n     } else {\n         None\n     };\n@@ -408,7 +411,6 @@ pub(crate) fn run_aot(\n         metadata_module,\n         metadata,\n         crate_info: CrateInfo::new(tcx, target_cpu),\n-        work_products,\n     })\n }\n "}]}