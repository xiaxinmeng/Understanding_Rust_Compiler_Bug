{"sha": "8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "node_id": "C_kwDOAAsO6NoAKDhlZDAzODRjYTQ2NTFlOTE0NzkzZGQ4YTA1YzljZGVjOWIyMDg5YjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T09:31:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T09:31:05Z"}, "message": "Rollup merge of #105161 - cassaundra:numeric-literal-error, r=nnethercote\n\nRefine when invalid prefix case error arises\n\nFix cases where the \"invalid base prefix for number literal\" error arises with suffixes that look erroneously capitalized but which are actually invalid.", "tree": {"sha": "a39819d1ef2d19b27eaf725cf47c80c7e2e5f664", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a39819d1ef2d19b27eaf725cf47c80c7e2e5f664"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmZfZCRBK7hj4Ov3rIwAA9z0IAG5MPYfXbUBWgDxXOndIPX3I\nPJfUqkzNBXogHAA/98XElEspmzu/Y+qlZRy7MA0T/nmET0mtEy5tLZIbXJgPUb6k\nkGaEtLu6pMkE6SjiYOBCExcGHA2BGMCieh+hBpOrxmx1STDPYMustIf15IZSrOx9\n+//6a2DKWkmy0gV4Re1sg2o0HgB4vB7mQH+J+VkG7NE38W/cl/b0G8XKOpn/xH+L\nc9sTN1V4oRuh0rh3gwDeADzoRXhLMHakAYxOdtVejpiXSwZ0XLDEJv7ZqP8TTHie\nWLfIKtvyo+9pTze/afJDHtB7mORrKgEOrRxGMxDYdtjge0iKwzb5540kUiaNbD4=\n=TdAE\n-----END PGP SIGNATURE-----\n", "payload": "tree a39819d1ef2d19b27eaf725cf47c80c7e2e5f664\nparent a270aeee7f9148b2a1ede17d928bd9632ea362ba\nparent 52a9280fb249f2dfbc879ae32b1823203822fbec\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671010265 +0100\ncommitter GitHub <noreply@github.com> 1671010265 +0100\n\nRollup merge of #105161 - cassaundra:numeric-literal-error, r=nnethercote\n\nRefine when invalid prefix case error arises\n\nFix cases where the \"invalid base prefix for number literal\" error arises with suffixes that look erroneously capitalized but which are actually invalid.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "html_url": "https://github.com/rust-lang/rust/commit/8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a270aeee7f9148b2a1ede17d928bd9632ea362ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/a270aeee7f9148b2a1ede17d928bd9632ea362ba", "html_url": "https://github.com/rust-lang/rust/commit/a270aeee7f9148b2a1ede17d928bd9632ea362ba"}, {"sha": "52a9280fb249f2dfbc879ae32b1823203822fbec", "url": "https://api.github.com/repos/rust-lang/rust/commits/52a9280fb249f2dfbc879ae32b1823203822fbec", "html_url": "https://github.com/rust-lang/rust/commit/52a9280fb249f2dfbc879ae32b1823203822fbec"}], "stats": {"total": 117, "additions": 107, "deletions": 10}, "files": [{"sha": "4266430c4c68067788d1f2af53e96f2ed4d88fd1", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "patch": "@@ -291,20 +291,33 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n         s.len() > 1 && s.starts_with(first_chars) && s[1..].chars().all(|c| c.is_ascii_digit())\n     }\n \n-    // Try to lowercase the prefix if it's a valid base prefix.\n-    fn fix_base_capitalisation(s: &str) -> Option<String> {\n-        if let Some(stripped) = s.strip_prefix('B') {\n-            Some(format!(\"0b{stripped}\"))\n-        } else if let Some(stripped) = s.strip_prefix('O') {\n-            Some(format!(\"0o{stripped}\"))\n-        } else if let Some(stripped) = s.strip_prefix('X') {\n-            Some(format!(\"0x{stripped}\"))\n+    // Try to lowercase the prefix if the prefix and suffix are valid.\n+    fn fix_base_capitalisation(prefix: &str, suffix: &str) -> Option<String> {\n+        let mut chars = suffix.chars();\n+\n+        let base_char = chars.next().unwrap();\n+        let base = match base_char {\n+            'B' => 2,\n+            'O' => 8,\n+            'X' => 16,\n+            _ => return None,\n+        };\n+\n+        // check that the suffix contains only base-appropriate characters\n+        let valid = prefix == \"0\"\n+            && chars\n+                .filter(|c| *c != '_')\n+                .take_while(|c| *c != 'i' && *c != 'u')\n+                .all(|c| c.to_digit(base).is_some());\n+\n+        if valid {\n+            Some(format!(\"0{}{}\", base_char.to_ascii_lowercase(), &suffix[1..]))\n         } else {\n             None\n         }\n     }\n \n-    let token::Lit { kind, suffix, .. } = lit;\n+    let token::Lit { kind, symbol, suffix, .. } = lit;\n     match err {\n         // `LexerError` is an error, but it was already reported\n         // by lexer, so here we don't report it the second time.\n@@ -320,7 +333,7 @@ pub fn report_lit_error(sess: &ParseSess, err: LitError, lit: token::Lit, span:\n             if looks_like_width_suffix(&['i', 'u'], suf) {\n                 // If it looks like a width, try to be helpful.\n                 sess.emit_err(InvalidIntLiteralWidth { span, width: suf[1..].into() });\n-            } else if let Some(fixed) = fix_base_capitalisation(suf) {\n+            } else if let Some(fixed) = fix_base_capitalisation(symbol.as_str(), suf) {\n                 sess.emit_err(InvalidNumLiteralBasePrefix { span, fixed });\n             } else {\n                 sess.emit_err(InvalidNumLiteralSuffix { span, suffix: suf.to_string() });"}, {"sha": "f00cde4a74c02980fb69454ce12a175f68880fe8", "filename": "src/test/ui/numeric/uppercase-base-prefix-invalid-no-fix.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.rs?ref=8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "patch": "@@ -0,0 +1,34 @@\n+// Checks that integers with seeming uppercase base prefixes do not get bogus capitalization\n+// suggestions.\n+\n+fn main() {\n+    _ = 123X1a3;\n+    //~^ ERROR invalid suffix `X1a3` for number literal\n+    //~| NOTE invalid suffix `X1a3`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+    _ = 456O123;\n+    //~^ ERROR invalid suffix `O123` for number literal\n+    //~| NOTE invalid suffix `O123`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+    _ = 789B101;\n+    //~^ ERROR invalid suffix `B101` for number literal\n+    //~| NOTE invalid suffix `B101`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+    _ = 0XYZ;\n+    //~^ ERROR invalid suffix `XYZ` for number literal\n+    //~| NOTE invalid suffix `XYZ`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+    _ = 0OPQ;\n+    //~^ ERROR invalid suffix `OPQ` for number literal\n+    //~| NOTE invalid suffix `OPQ`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+    _ = 0BCD;\n+    //~^ ERROR invalid suffix `BCD` for number literal\n+    //~| NOTE invalid suffix `BCD`\n+    //~| HELP the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+}"}, {"sha": "380c16ca789f4ed395fac22de5f91f3eeb5b4973", "filename": "src/test/ui/numeric/uppercase-base-prefix-invalid-no-fix.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ed0384ca4651e914793dd8a05c9cdec9b2089b4/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnumeric%2Fuppercase-base-prefix-invalid-no-fix.stderr?ref=8ed0384ca4651e914793dd8a05c9cdec9b2089b4", "patch": "@@ -0,0 +1,50 @@\n+error: invalid suffix `X1a3` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:5:9\n+   |\n+LL |     _ = 123X1a3;\n+   |         ^^^^^^^ invalid suffix `X1a3`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: invalid suffix `O123` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:10:9\n+   |\n+LL |     _ = 456O123;\n+   |         ^^^^^^^ invalid suffix `O123`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: invalid suffix `B101` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:15:9\n+   |\n+LL |     _ = 789B101;\n+   |         ^^^^^^^ invalid suffix `B101`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: invalid suffix `XYZ` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:20:9\n+   |\n+LL |     _ = 0XYZ;\n+   |         ^^^^ invalid suffix `XYZ`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: invalid suffix `OPQ` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:25:9\n+   |\n+LL |     _ = 0OPQ;\n+   |         ^^^^ invalid suffix `OPQ`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: invalid suffix `BCD` for number literal\n+  --> $DIR/uppercase-base-prefix-invalid-no-fix.rs:30:9\n+   |\n+LL |     _ = 0BCD;\n+   |         ^^^^ invalid suffix `BCD`\n+   |\n+   = help: the suffix must be one of the numeric types (`u32`, `isize`, `f32`, etc.)\n+\n+error: aborting due to 6 previous errors\n+"}]}