{"sha": "7b79d24ad5b251c0806a07aa7769e824f3c37fec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNzlkMjRhZDViMjUxYzA4MDZhMDdhYTc3NjllODI0ZjNjMzdmZWM=", "commit": {"author": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-02T16:47:40Z"}, "committer": {"name": "vsrs", "email": "vit@conrlab.com", "date": "2020-07-03T11:23:51Z"}, "message": "Add runnable env support.", "tree": {"sha": "1bf651ecddfdaecaccba02c3e9100f73c72e65a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf651ecddfdaecaccba02c3e9100f73c72e65a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b79d24ad5b251c0806a07aa7769e824f3c37fec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b79d24ad5b251c0806a07aa7769e824f3c37fec", "html_url": "https://github.com/rust-lang/rust/commit/7b79d24ad5b251c0806a07aa7769e824f3c37fec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b79d24ad5b251c0806a07aa7769e824f3c37fec/comments", "author": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vsrs", "id": 62505555, "node_id": "MDQ6VXNlcjYyNTA1NTU1", "avatar_url": "https://avatars.githubusercontent.com/u/62505555?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vsrs", "html_url": "https://github.com/vsrs", "followers_url": "https://api.github.com/users/vsrs/followers", "following_url": "https://api.github.com/users/vsrs/following{/other_user}", "gists_url": "https://api.github.com/users/vsrs/gists{/gist_id}", "starred_url": "https://api.github.com/users/vsrs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vsrs/subscriptions", "organizations_url": "https://api.github.com/users/vsrs/orgs", "repos_url": "https://api.github.com/users/vsrs/repos", "events_url": "https://api.github.com/users/vsrs/events{/privacy}", "received_events_url": "https://api.github.com/users/vsrs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57576ac420989070e695bac195d516a410191ad9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57576ac420989070e695bac195d516a410191ad9", "html_url": "https://github.com/rust-lang/rust/commit/57576ac420989070e695bac195d516a410191ad9"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "7c8b2fbece019211330d94b5c4653dd665f8c553", "filename": "editors/code/package.json", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=7b79d24ad5b251c0806a07aa7769e824f3c37fec", "patch": "@@ -344,6 +344,35 @@\n                     \"default\": null,\n                     \"description\": \"Custom cargo runner extension ID.\"\n                 },\n+                \"rust-analyzer.runnableEnv\": {\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"null\"\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"object\",\n+                                \"properties\": {\n+                                    \"mask\": {\n+                                        \"type\": \"string\",\n+                                        \"description\": \"Runnable name mask\"\n+                                    },\n+                                    \"env\": {\n+                                        \"type\": \"object\",\n+                                        \"description\": \"Variables in form of { \\\"key\\\": \\\"value\\\"}\"\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        {\n+                            \"type\": \"object\",\n+                            \"description\": \"Variables in form of { \\\"key\\\": \\\"value\\\"}\"\n+                        }\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Environment variables passed to the runnable launched using `Test ` or `Debug` lens or `rust-analyzer.run` command.\"\n+                },\n                 \"rust-analyzer.inlayHints.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "a317aabcb1c193b9491b1564557d2258ebcd6344", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=7b79d24ad5b251c0806a07aa7769e824f3c37fec", "patch": "@@ -5,6 +5,8 @@ export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n \n+export type RunnableEnvCfg = Record<string, string> | [{ mask?: string, env: Record<string, string>; }]\n+\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -114,6 +116,10 @@ export class Config {\n         return this.get<string | undefined>(\"cargoRunner\");\n     }\n \n+    get runnableEnv() {\n+        return this.get<RunnableEnvCfg | undefined>(\"runnableEnv\");\n+    }\n+\n     get debug() {\n         // \"/rustc/<id>\" used by suggestions only.\n         const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");"}, {"sha": "525d26923ae439925153a1695d1c045595fed97d", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=7b79d24ad5b251c0806a07aa7769e824f3c37fec", "patch": "@@ -5,9 +5,10 @@ import * as ra from './lsp_ext';\n \n import { Cargo } from './toolchain';\n import { Ctx } from \"./ctx\";\n+import { prepareEnv } from \"./run\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n \n export async function makeDebugConfig(ctx: Ctx, runnable: ra.Runnable): Promise<void> {\n     const scope = ctx.activeRustEditor?.document.uri;\n@@ -92,7 +93,8 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     const executable = await getDebugExecutable(runnable);\n-    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), debugOptions.sourceFileMap);\n+    const env = prepareEnv(runnable, ctx.config);\n+    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, debugOptions.sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {\n@@ -121,7 +123,7 @@ async function getDebugExecutable(runnable: ra.Runnable): Promise<string> {\n     return executable;\n }\n \n-function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getLldbDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: \"lldb\",\n         request: \"launch\",\n@@ -130,18 +132,20 @@ function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFil\n         args: runnable.args.executableArgs,\n         cwd: runnable.args.workspaceRoot,\n         sourceMap: sourceFileMap,\n-        sourceLanguages: [\"rust\"]\n+        sourceLanguages: [\"rust\"],\n+        env\n     };\n }\n \n-function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n         request: \"launch\",\n         name: runnable.label,\n         program: executable,\n         args: runnable.args.executableArgs,\n         cwd: runnable.args.workspaceRoot,\n-        sourceFileMap: sourceFileMap,\n+        sourceFileMap,\n+        env,\n     };\n }"}, {"sha": "d7c7c489c98c1ca5afdd6b3d6ce81c4bb63f7ccb", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7b79d24ad5b251c0806a07aa7769e824f3c37fec/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=7b79d24ad5b251c0806a07aa7769e824f3c37fec", "patch": "@@ -96,6 +96,28 @@ export class RunnableQuickPick implements vscode.QuickPickItem {\n     }\n }\n \n+export function prepareEnv(runnable: ra.Runnable, config: Config): Record<string, string> {\n+    const env: Record<string, string> = { \"RUST_BACKTRACE\": \"short\" };\n+\n+    if (runnable.args.expectTest) {\n+        env[\"UPDATE_EXPECT\"] = \"1\";\n+    }\n+\n+    if (config.runnableEnv) {\n+        if (Array.isArray(config.runnableEnv)) {\n+            for (const it of config.runnableEnv) {\n+                if (!it.mask || new RegExp(it.mask).test(runnable.label)) {\n+                    Object.assign(env, it.env);\n+                }\n+            }\n+        } else {\n+            Object.assign(env, config.runnableEnv as Record<string, string>);\n+        }\n+    }\n+\n+    return env;\n+}\n+\n export async function createTask(runnable: ra.Runnable, config: Config): Promise<vscode.Task> {\n     if (runnable.kind !== \"cargo\") {\n         // rust-analyzer supports only one kind, \"cargo\"\n@@ -108,16 +130,13 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n     if (runnable.args.executableArgs.length > 0) {\n         args.push('--', ...runnable.args.executableArgs);\n     }\n-    const env: { [key: string]: string } = { \"RUST_BACKTRACE\": \"short\" };\n-    if (runnable.args.expectTest) {\n-        env[\"UPDATE_EXPECT\"] = \"1\";\n-    }\n+\n     const definition: tasks.CargoTaskDefinition = {\n         type: tasks.TASK_TYPE,\n         command: args[0], // run, test, etc...\n         args: args.slice(1),\n         cwd: runnable.args.workspaceRoot,\n-        env: Object.assign({}, process.env as { [key: string]: string }, env),\n+        env: prepareEnv(runnable, config),\n     };\n \n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()"}]}