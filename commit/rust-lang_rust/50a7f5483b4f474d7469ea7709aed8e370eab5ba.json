{"sha": "50a7f5483b4f474d7469ea7709aed8e370eab5ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYTdmNTQ4M2I0ZjQ3NGQ3NDY5ZWE3NzA5YWVkOGUzNzBlYWI1YmE=", "commit": {"author": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-04T21:30:43Z"}, "committer": {"name": "John Clements", "email": "clements@racket-lang.org", "date": "2013-04-28T16:49:20Z"}, "message": "refactor parse_fn_decl", "tree": {"sha": "0f40d7387045adc326f3da5bb4684ace18a0aa65", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f40d7387045adc326f3da5bb4684ace18a0aa65"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50a7f5483b4f474d7469ea7709aed8e370eab5ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50a7f5483b4f474d7469ea7709aed8e370eab5ba", "html_url": "https://github.com/rust-lang/rust/commit/50a7f5483b4f474d7469ea7709aed8e370eab5ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50a7f5483b4f474d7469ea7709aed8e370eab5ba/comments", "author": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jbclements", "id": 226617, "node_id": "MDQ6VXNlcjIyNjYxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/226617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jbclements", "html_url": "https://github.com/jbclements", "followers_url": "https://api.github.com/users/jbclements/followers", "following_url": "https://api.github.com/users/jbclements/following{/other_user}", "gists_url": "https://api.github.com/users/jbclements/gists{/gist_id}", "starred_url": "https://api.github.com/users/jbclements/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jbclements/subscriptions", "organizations_url": "https://api.github.com/users/jbclements/orgs", "repos_url": "https://api.github.com/users/jbclements/repos", "events_url": "https://api.github.com/users/jbclements/events{/privacy}", "received_events_url": "https://api.github.com/users/jbclements/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b7f1a4f2437eb20dc71eeda13976249f02ad408", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b7f1a4f2437eb20dc71eeda13976249f02ad408", "html_url": "https://github.com/rust-lang/rust/commit/2b7f1a4f2437eb20dc71eeda13976249f02ad408"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "a62b92600571e2b5ea8af08d299a87bd80f09b9c", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50a7f5483b4f474d7469ea7709aed8e370eab5ba/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a7f5483b4f474d7469ea7709aed8e370eab5ba/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=50a7f5483b4f474d7469ea7709aed8e370eab5ba", "patch": "@@ -259,7 +259,7 @@ pub impl Parser {\n     fn try_parse_obsolete_struct_ctor(&self) -> bool {\n         if self.eat_obsolete_ident(\"new\") {\n             self.obsolete(*self.last_span, ObsoleteStructCtor);\n-            self.parse_fn_decl(|p| p.parse_arg());\n+            self.parse_fn_decl();\n             self.parse_block();\n             true\n         } else {"}, {"sha": "0afef442efc578faec17e1270385563f54b2e581", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50a7f5483b4f474d7469ea7709aed8e370eab5ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a7f5483b4f474d7469ea7709aed8e370eab5ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=50a7f5483b4f474d7469ea7709aed8e370eab5ba", "patch": "@@ -2844,15 +2844,16 @@ pub impl Parser {\n         (lifetimes, opt_vec::take_vec(result))\n     }\n \n-    fn parse_fn_decl(&self, parse_arg_fn: &fn(&Parser) -> arg_or_capture_item)\n+    // parse the argument list and result type of a function declaration\n+    fn parse_fn_decl(&self)\n         -> fn_decl\n     {\n         let args_or_capture_items: ~[arg_or_capture_item] =\n             self.parse_unspanned_seq(\n                 &token::LPAREN,\n                 &token::RPAREN,\n                 seq_sep_trailing_disallowed(token::COMMA),\n-                parse_arg_fn\n+                |p| p.parse_arg()\n             );\n \n         let inputs = either::lefts(args_or_capture_items);\n@@ -3081,7 +3082,7 @@ pub impl Parser {\n     // parse an item-position function declaration.\n     fn parse_item_fn(&self, purity: purity, abis: AbiSet) -> item_info {\n         let (ident, generics) = self.parse_fn_header();\n-        let decl = self.parse_fn_decl(|p| p.parse_arg());\n+        let decl = self.parse_fn_decl();\n         let (inner_attrs, body) = self.parse_inner_attrs_and_block(true);\n         (ident,\n          item_fn(decl, purity, abis, generics, body),\n@@ -3593,7 +3594,7 @@ pub impl Parser {\n         let vis = self.parse_visibility();\n         let purity = self.parse_fn_purity();\n         let (ident, generics) = self.parse_fn_header();\n-        let decl = self.parse_fn_decl(|p| p.parse_arg());\n+        let decl = self.parse_fn_decl();\n         let hi = self.span.hi;\n         self.expect(&token::SEMI);\n         @ast::foreign_item { ident: ident,"}]}