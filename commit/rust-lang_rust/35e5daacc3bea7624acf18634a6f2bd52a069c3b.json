{"sha": "35e5daacc3bea7624acf18634a6f2bd52a069c3b", "node_id": "C_kwDOAAsO6NoAKDM1ZTVkYWFjYzNiZWE3NjI0YWNmMTg2MzRhNmYyYmQ1MmEwNjljM2I", "commit": {"author": {"name": "Milo", "email": "50248166+Milo123459@users.noreply.github.com", "date": "2021-10-16T11:32:55Z"}, "committer": {"name": "Milo", "email": "50248166+Milo123459@users.noreply.github.com", "date": "2021-10-16T11:32:55Z"}, "message": "more clippy fixes", "tree": {"sha": "6c985546c65a2e1b451f022a4f20f9499116bca3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c985546c65a2e1b451f022a4f20f9499116bca3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35e5daacc3bea7624acf18634a6f2bd52a069c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35e5daacc3bea7624acf18634a6f2bd52a069c3b", "html_url": "https://github.com/rust-lang/rust/commit/35e5daacc3bea7624acf18634a6f2bd52a069c3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35e5daacc3bea7624acf18634a6f2bd52a069c3b/comments", "author": {"login": "Milo123459", "id": 50248166, "node_id": "MDQ6VXNlcjUwMjQ4MTY2", "avatar_url": "https://avatars.githubusercontent.com/u/50248166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milo123459", "html_url": "https://github.com/Milo123459", "followers_url": "https://api.github.com/users/Milo123459/followers", "following_url": "https://api.github.com/users/Milo123459/following{/other_user}", "gists_url": "https://api.github.com/users/Milo123459/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milo123459/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milo123459/subscriptions", "organizations_url": "https://api.github.com/users/Milo123459/orgs", "repos_url": "https://api.github.com/users/Milo123459/repos", "events_url": "https://api.github.com/users/Milo123459/events{/privacy}", "received_events_url": "https://api.github.com/users/Milo123459/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Milo123459", "id": 50248166, "node_id": "MDQ6VXNlcjUwMjQ4MTY2", "avatar_url": "https://avatars.githubusercontent.com/u/50248166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Milo123459", "html_url": "https://github.com/Milo123459", "followers_url": "https://api.github.com/users/Milo123459/followers", "following_url": "https://api.github.com/users/Milo123459/following{/other_user}", "gists_url": "https://api.github.com/users/Milo123459/gists{/gist_id}", "starred_url": "https://api.github.com/users/Milo123459/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Milo123459/subscriptions", "organizations_url": "https://api.github.com/users/Milo123459/orgs", "repos_url": "https://api.github.com/users/Milo123459/repos", "events_url": "https://api.github.com/users/Milo123459/events{/privacy}", "received_events_url": "https://api.github.com/users/Milo123459/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c468ab2fc2ad6df390e4d3faf5a2076265bb447", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c468ab2fc2ad6df390e4d3faf5a2076265bb447", "html_url": "https://github.com/rust-lang/rust/commit/3c468ab2fc2ad6df390e4d3faf5a2076265bb447"}], "stats": {"total": 98, "additions": 46, "deletions": 52}, "files": [{"sha": "1f0b9aaaa1fe1de075ac914156a3f3997857ea9f", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -49,13 +49,13 @@ pub(crate) fn goto_definition(\n             let parent = token.parent()?;\n             if let Some(tt) = ast::TokenTree::cast(parent) {\n                 if let x @ Some(_) =\n-                    try_lookup_include_path(&sema, tt, token.clone(), position.file_id)\n+                    try_lookup_include_path(sema, tt, token.clone(), position.file_id)\n                 {\n                     return x;\n                 }\n             }\n             Some(\n-                Definition::from_token(&sema, &token)\n+                Definition::from_token(sema, &token)\n                     .into_iter()\n                     .flat_map(|def| {\n                         try_find_trait_item_definition(sema.db, &def)\n@@ -145,7 +145,7 @@ mod tests {\n     fn check(ra_fixture: &str) {\n         let (analysis, position, expected) = fixture::annotations(ra_fixture);\n         let navs = analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n-        if navs.len() == 0 {\n+        if navs.is_empty() {\n             panic!(\"unresolved reference\")\n         }\n "}, {"sha": "e452f8c93860eb7d23286fd7917f1b6a4dc4d21e", "filename": "crates/ide/src/highlight_related.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fhighlight_related.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhighlight_related.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -353,7 +353,7 @@ mod tests {\n     fn check_with_config(ra_fixture: &str, config: HighlightRelatedConfig) {\n         let (analysis, pos, annotations) = fixture::annotations(ra_fixture);\n \n-        let hls = analysis.highlight_related(config, pos).unwrap().unwrap_or(Vec::default());\n+        let hls = analysis.highlight_related(config, pos).unwrap().unwrap_or_default();\n \n         let mut expected = annotations\n             .into_iter()"}, {"sha": "d4244628787f319b3519f4904e3bd00bb1ed5367", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn hover(\n     let file = sema.parse(file_id).syntax().clone();\n \n     if !range.is_empty() {\n-        return hover_ranged(&file, range, &sema, config);\n+        return hover_ranged(&file, range, sema, config);\n     }\n     let offset = range.start();\n \n@@ -121,7 +121,7 @@ pub(crate) fn hover(\n     // FIXME: Definition should include known lints and the like instead of having this special case here\n     if let Some(res) = descended.iter().find_map(|token| {\n         let attr = token.ancestors().find_map(ast::Attr::cast)?;\n-        render::try_for_lint(&attr, &token)\n+        render::try_for_lint(&attr, token)\n     }) {\n         return Some(RangeInfo::new(original_token.text_range(), res));\n     }\n@@ -164,7 +164,7 @@ pub(crate) fn hover_for_definition(\n ) -> Option<HoverResult> {\n     let famous_defs = match &definition {\n         Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)) => {\n-            Some(FamousDefs(&sema, sema.scope(&node).krate()))\n+            Some(FamousDefs(sema, sema.scope(node).krate()))\n         }\n         _ => None,\n     };\n@@ -179,7 +179,7 @@ pub(crate) fn hover_for_definition(\n             res.actions.push(action);\n         }\n \n-        if let Some(action) = runnable_action(&sema, definition, file_id) {\n+        if let Some(action) = runnable_action(sema, definition, file_id) {\n             res.actions.push(action);\n         }\n \n@@ -246,7 +246,7 @@ fn hover_type_fallback(\n         }\n     };\n \n-    let res = render::type_info(&sema, config, &expr_or_pat)?;\n+    let res = render::type_info(sema, config, &expr_or_pat)?;\n     let range = sema.original_range(&node).range;\n     Some(RangeInfo::new(range, res))\n }"}, {"sha": "db91e68ff31469b1e81d1f5cb68414939674166b", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -201,7 +201,7 @@ fn get_bind_pat_hints(\n     let desc_pat = descended.as_ref().unwrap_or(pat);\n     let ty = sema.type_of_pat(&desc_pat.clone().into())?.original;\n \n-    if should_not_display_type_hint(sema, &pat, &ty) {\n+    if should_not_display_type_hint(sema, pat, &ty) {\n         return None;\n     }\n \n@@ -269,7 +269,7 @@ fn is_named_constructor(\n         callable_kind\n     {\n         if let Some(ctor) = path.segment() {\n-            return (&ctor.to_string() == ty_name).then(|| ());\n+            return (ctor.to_string() == ty_name).then(|| ());\n         }\n     }\n \n@@ -285,7 +285,7 @@ fn is_named_constructor(\n         ast::PathSegmentKind::Type { type_ref: Some(ty), trait_ref: None } => ty.to_string(),\n         _ => return None,\n     };\n-    (&ctor_name == ty_name).then(|| ())\n+    (ctor_name == ty_name).then(|| ())\n }\n \n /// Checks if the type is an Iterator from std::iter and replaces its hint with an `impl Iterator<Item = Ty>`.\n@@ -584,7 +584,7 @@ mod tests {\n \n     #[track_caller]\n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n-        let (analysis, file_id) = fixture::file(&ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n         let actual =\n@@ -594,7 +594,7 @@ mod tests {\n \n     #[track_caller]\n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n-        let (analysis, file_id) = fixture::file(&ra_fixture);\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n         let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }"}, {"sha": "c2412254ef67d16c1c6a0c15544f3544561db4eb", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -311,7 +311,7 @@ impl Analysis {\n     pub fn join_lines(&self, config: &JoinLinesConfig, frange: FileRange) -> Cancellable<TextEdit> {\n         self.with_db(|db| {\n             let parse = db.parse(frange.file_id);\n-            join_lines::join_lines(&config, &parse.tree(), frange.range)\n+            join_lines::join_lines(config, &parse.tree(), frange.range)\n         })\n     }\n "}, {"sha": "02e9fb8b5e28898c234ecc97791363188d691c2a", "filename": "crates/ide/src/move_item.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -120,13 +120,10 @@ fn swap_sibling_in_list<A: AstNode + Clone, I: Iterator<Item = A>>(\n     range: TextRange,\n     direction: Direction,\n ) -> Option<TextEdit> {\n-    let list_lookup = list\n-        .tuple_windows()\n-        .filter(|(l, r)| match direction {\n-            Direction::Up => r.syntax().text_range().contains_range(range),\n-            Direction::Down => l.syntax().text_range().contains_range(range),\n-        })\n-        .next();\n+    let list_lookup = list.tuple_windows().find(|(l, r)| match direction {\n+        Direction::Up => r.syntax().text_range().contains_range(range),\n+        Direction::Down => l.syntax().text_range().contains_range(range),\n+    });\n \n     if let Some((l, r)) = list_lookup {\n         Some(replace_nodes(range, l.syntax(), r.syntax()))"}, {"sha": "d6f381497bdfc44f3d501c3416b4ecbe4b25f3a8", "filename": "crates/ide/src/rename.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frename.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -107,14 +107,14 @@ fn find_definition(\n         {\n             bail!(\"Renaming aliases is currently unsupported\")\n         }\n-        ast::NameLike::Name(name) => NameClass::classify(sema, &name).map(|class| match class {\n+        ast::NameLike::Name(name) => NameClass::classify(sema, name).map(|class| match class {\n             NameClass::Definition(it) | NameClass::ConstReference(it) => it,\n             NameClass::PatFieldShorthand { local_def, field_ref: _ } => {\n                 Definition::Local(local_def)\n             }\n         }),\n         ast::NameLike::NameRef(name_ref) => {\n-            if let Some(def) = NameRefClass::classify(sema, &name_ref).map(|class| match class {\n+            if let Some(def) = NameRefClass::classify(sema, name_ref).map(|class| match class {\n                 NameRefClass::Definition(def) => def,\n                 NameRefClass::FieldShorthand { local_ref, field_ref: _ } => {\n                     Definition::Local(local_ref)\n@@ -129,13 +129,13 @@ fn find_definition(\n                 None\n             }\n         }\n-        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, &lifetime)\n+        ast::NameLike::Lifetime(lifetime) => NameRefClass::classify_lifetime(sema, lifetime)\n             .and_then(|class| match class {\n                 NameRefClass::Definition(def) => Some(def),\n                 _ => None,\n             })\n             .or_else(|| {\n-                NameClass::classify_lifetime(sema, &lifetime).and_then(|it| match it {\n+                NameClass::classify_lifetime(sema, lifetime).and_then(|it| match it {\n                     NameClass::Definition(it) => Some(it),\n                     _ => None,\n                 })\n@@ -305,7 +305,6 @@ mod tests {\n                         .skip(\"error:\".len())\n                         .collect::<String>();\n                     assert_eq!(error_message.trim(), err.to_string());\n-                    return;\n                 } else {\n                     panic!(\"Rename to '{}' failed unexpectedly: {}\", new_name, err)\n                 }"}, {"sha": "5e98ac17567baf13a0206793d3418cffd53b57f3", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -120,9 +120,11 @@ impl StaticIndex<'_> {\n         });\n         let hover_config =\n             HoverConfig { links_in_hover: true, documentation: Some(HoverDocFormat::Markdown) };\n-        let tokens = tokens.filter(|token| match token.kind() {\n-            IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] => true,\n-            _ => false,\n+        let tokens = tokens.filter(|token| {\n+            matches!(\n+                token.kind(),\n+                IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate]\n+            )\n         });\n         let mut result = StaticIndexedFile { file_id, inlay_hints, folds, tokens: vec![] };\n         for token in tokens {\n@@ -158,7 +160,7 @@ impl StaticIndex<'_> {\n         self.files.push(result);\n     }\n \n-    pub fn compute<'a>(analysis: &'a Analysis) -> StaticIndex<'a> {\n+    pub fn compute(analysis: &Analysis) -> StaticIndex {\n         let db = &*analysis.db;\n         let work = all_modules(db).into_iter().filter(|module| {\n             let file_id = module.definition_source(db).file_id.original_file(db);\n@@ -189,7 +191,7 @@ impl StaticIndex<'_> {\n \n fn get_definition(sema: &Semantics<RootDatabase>, token: SyntaxToken) -> Option<Definition> {\n     for token in sema.descend_into_macros(token) {\n-        let def = Definition::from_token(&sema, &token);\n+        let def = Definition::from_token(sema, &token);\n         if let [x] = def.as_slice() {\n             return Some(*x);\n         } else {"}, {"sha": "72ddbc5d1698cbfd98892f4a589a01ebf6a594af", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -342,7 +342,7 @@ fn traverse(\n             element_to_highlight.clone(),\n         ) {\n             if inside_attribute {\n-                highlight = highlight | HlMod::Attribute;\n+                highlight |= HlMod::Attribute\n             }\n \n             hl.add(HlRange { range, highlight, binding_hash });"}, {"sha": "1285c2f846684af93fb71c21c97a0a81805287a2", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -538,7 +538,7 @@ fn highlight_def(\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n     };\n \n-    let famous_defs = FamousDefs(&sema, krate);\n+    let famous_defs = FamousDefs(sema, krate);\n     let def_crate = def.module(db).map(hir::Module::krate).or_else(|| match def {\n         Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(module.krate()),\n         _ => None,\n@@ -591,7 +591,7 @@ fn highlight_method_call(\n         h |= HlMod::Trait;\n     }\n \n-    let famous_defs = FamousDefs(&sema, krate);\n+    let famous_defs = FamousDefs(sema, krate);\n     let def_crate = func.module(sema.db).krate();\n     let is_from_other_crate = Some(def_crate) != krate;\n     let is_from_builtin_crate = famous_defs.builtin_crates().any(|it| def_crate == it);"}, {"sha": "340290eafedbe088c6d5902c0cd96c7a7a33bcbe", "filename": "crates/ide/src/syntax_highlighting/highlights.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlights.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -26,7 +26,7 @@ impl Highlights {\n         self.root.add(hl_range);\n     }\n \n-    pub(super) fn to_vec(self) -> Vec<HlRange> {\n+    pub(super) fn to_vec(&self) -> Vec<HlRange> {\n         let mut res = Vec::new();\n         self.root.flatten(&mut res);\n         res"}, {"sha": "2628918b8d15eaf363a4d0cea8fb5a31eac79c8e", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -227,9 +227,7 @@ fn on_arrow_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     if file_text.char_at(after_arrow) != Some('{') {\n         return None;\n     }\n-    if find_node_at_offset::<ast::RetType>(file.syntax(), offset).is_none() {\n-        return None;\n-    }\n+    find_node_at_offset::<ast::RetType>(file.syntax(), offset)?;\n \n     Some(TextEdit::insert(after_arrow, \" \".to_string()))\n }"}, {"sha": "083ab69587f236e7207de1e2c22aab0ace67e327", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -27,7 +27,7 @@ pub(crate) struct Logger {\n \n impl Logger {\n     pub(crate) fn new(file: Option<File>, filter: Option<&str>) -> Logger {\n-        let filter = filter.map_or(EnvFilter::default(), |dirs| EnvFilter::new(dirs));\n+        let filter = filter.map_or(EnvFilter::default(), EnvFilter::new);\n \n         Logger { filter, file }\n     }"}, {"sha": "87c01603eaea9191c8ba133ef6f2b0434297af8b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -673,7 +673,7 @@ impl Config {\n         FilesConfig {\n             watcher: match self.data.files_watcher.as_str() {\n                 \"notify\" => FilesWatcher::Notify,\n-                \"client\" | _ => FilesWatcher::Client,\n+                _ => FilesWatcher::Client,\n             },\n             exclude: self.data.files_excludeDirs.iter().map(|it| self.root_path.join(it)).collect(),\n         }"}, {"sha": "7d46cee2142f770807b214aaf445db7b4a8c0f23", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -367,9 +367,8 @@ pub(crate) fn handle_document_symbol(\n         let mut tags = Vec::new();\n \n         #[allow(deprecated)]\n-        match symbol.deprecated {\n-            Some(true) => tags.push(SymbolTag::Deprecated),\n-            _ => {}\n+        if let Some(true) = symbol.deprecated {\n+            tags.push(SymbolTag::Deprecated)\n         }\n \n         #[allow(deprecated)]\n@@ -1094,7 +1093,7 @@ pub(crate) fn handle_code_action_resolve(\n     let _p = profile::span(\"handle_code_action_resolve\");\n     let params = match code_action.data.take() {\n         Some(it) => it,\n-        None => return Err(invalid_params_error(format!(\"code action without data\")).into()),\n+        None => return Err(invalid_params_error(\"code action without data\".to_string()).into()),\n     };\n \n     let file_id = from_proto::file_id(&snap, &params.code_action_params.text_document.uri)?;\n@@ -1153,7 +1152,7 @@ pub(crate) fn handle_code_action_resolve(\n fn parse_action_id(action_id: &str) -> Result<(usize, SingleResolve), String> {\n     let id_parts = action_id.split(':').collect_vec();\n     match id_parts.as_slice() {\n-        &[assist_id_string, assist_kind_string, index_string] => {\n+        [assist_id_string, assist_kind_string, index_string] => {\n             let assist_kind: AssistKind = assist_kind_string.parse()?;\n             let index: usize = match index_string.parse() {\n                 Ok(index) => index,"}, {"sha": "9e7c265a80a76c13e99ab0e5752ec08ff3b9a219", "filename": "crates/rust-analyzer/src/lsp_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_utils.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -77,7 +77,7 @@ impl GlobalState {\n             return;\n         }\n         let percentage = fraction.map(|f| {\n-            assert!(0.0 <= f && f <= 1.0);\n+            assert!((0.0..=1.0).contains(&f));\n             (f * 100.0) as u32\n         });\n         let token = lsp_types::ProgressToken::String(format!(\"rustAnalyzer/{}\", title));"}, {"sha": "6dd1c76c2e6e7115add0030899516fb613dfc725", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -166,7 +166,7 @@ impl GlobalState {\n             self.handle_event(event)?\n         }\n \n-        Err(\"client exited without proper shutdown sequence\")?\n+        return Err(\"client exited without proper shutdown sequence\".into());\n     }\n \n     fn next_event(&self, inbox: &Receiver<lsp_server::Message>) -> Option<Event> {\n@@ -769,7 +769,6 @@ impl GlobalState {\n                             if !is_cancelled(&*err) {\n                                 tracing::error!(\"failed to compute diagnostics: {:?}\", err);\n                             }\n-                            ()\n                         })\n                         .ok()\n                         .map(|diags| (file_id, diags))"}, {"sha": "6a6df9c1ddb877f0ac23145756458745ad47629e", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -211,7 +211,7 @@ impl GlobalState {\n \n         if same_workspaces {\n             let (workspaces, build_scripts) = self.fetch_build_data_queue.last_op_result();\n-            if Arc::ptr_eq(&workspaces, &self.workspaces) {\n+            if Arc::ptr_eq(workspaces, &self.workspaces) {\n                 let workspaces = workspaces\n                     .iter()\n                     .cloned()\n@@ -417,7 +417,7 @@ impl GlobalState {\n                     id,\n                     Box::new(move |msg| sender.send(msg).unwrap()),\n                     config.clone(),\n-                    root.to_path_buf().into(),\n+                    root.to_path_buf(),\n                 )\n             })\n             .collect();"}, {"sha": "36dd9f7b4667447e4514c54be65ace8d9f637c82", "filename": "crates/rust-analyzer/tests/slow-tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35e5daacc3bea7624acf18634a6f2bd52a069c3b/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Ftidy.rs?ref=35e5daacc3bea7624acf18634a6f2bd52a069c3b", "patch": "@@ -91,7 +91,7 @@ fn files_are_tidy() {\n     tidy_marks.finish();\n }\n \n-fn check_cargo_toml(path: &Path, text: String) -> () {\n+fn check_cargo_toml(path: &Path, text: String) {\n     let mut section = None;\n     for (line_no, text) in text.lines().enumerate() {\n         let text = text.trim();"}]}