{"sha": "ef5c439fb006875d3d54b3b100f5411efc2c40f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNWM0MzlmYjAwNjg3NWQzZDU0YjNiMTAwZjU0MTFlZmMyYzQwZjM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-02T00:43:42Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-07-02T00:43:55Z"}, "message": "Correct merge errors, broken tests", "tree": {"sha": "745f41437683247aecc42e1cb9f6916b9622541a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/745f41437683247aecc42e1cb9f6916b9622541a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5c439fb006875d3d54b3b100f5411efc2c40f3", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5c439fb006875d3d54b3b100f5411efc2c40f3", "html_url": "https://github.com/rust-lang/rust/commit/ef5c439fb006875d3d54b3b100f5411efc2c40f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5c439fb006875d3d54b3b100f5411efc2c40f3/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a0469e3d70868db7ab27841e57080cff8e546b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0469e3d70868db7ab27841e57080cff8e546b3", "html_url": "https://github.com/rust-lang/rust/commit/4a0469e3d70868db7ab27841e57080cff8e546b3"}], "stats": {"total": 56, "additions": 47, "deletions": 9}, "files": [{"sha": "00ebca5abc1476b5777c4c9e6604bd790cd7d5fc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -686,7 +686,7 @@ impl FnCtxt {\n                     result::Err(RegionError {\n                         msg: {\n                             fmt!(\"named region `%s` not in scope here\",\n-                                 bound_region_to_str(self.tcx(), br))\n+                                 bound_region_ptr_to_str(self.tcx(), br))\n                         },\n                         replacement: {\n                             self.infcx().next_region_var("}, {"sha": "e533f019b4692724983b2eee1bbdf196a03c823d", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 39, "deletions": 3, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -59,7 +59,7 @@ time of error detection.\n \n */\n \n-use core::prelude::*;\n+use std::prelude::*;\n use middle::ty;\n use middle::ty::Region;\n use middle::typeck::infer;\n@@ -80,10 +80,46 @@ use syntax::opt_vec::OptVec;\n use util::ppaux::UserString;\n use util::ppaux::note_and_explain_region;\n \n-impl InferCtxt {\n+pub trait ErrorReporting {\n+    pub fn report_region_errors(@mut self,\n+                                errors: &OptVec<RegionResolutionError>);\n+\n+    pub fn report_and_explain_type_error(@mut self,\n+                                         trace: TypeTrace,\n+                                         terr: &ty::type_err);\n+\n+    fn values_str(@mut self, values: &ValuePairs) -> Option<~str>;\n+\n+    fn expected_found_str<T:UserString+Resolvable>(\n+        @mut self,\n+        exp_found: &ty::expected_found<T>)\n+        -> Option<~str>;\n+\n+    fn report_concrete_failure(@mut self,\n+                               origin: SubregionOrigin,\n+                               sub: Region,\n+                               sup: Region);\n+\n+    fn report_sub_sup_conflict(@mut self,\n+                               var_origin: RegionVariableOrigin,\n+                               sub_origin: SubregionOrigin,\n+                               sub_region: Region,\n+                               sup_origin: SubregionOrigin,\n+                               sup_region: Region);\n+\n+    fn report_sup_sup_conflict(@mut self,\n+                               var_origin: RegionVariableOrigin,\n+                               origin1: SubregionOrigin,\n+                               region1: Region,\n+                               origin2: SubregionOrigin,\n+                               region2: Region);\n+}\n+\n+\n+impl ErrorReporting for InferCtxt {\n     pub fn report_region_errors(@mut self,\n                                 errors: &OptVec<RegionResolutionError>) {\n-        for errors.each |error| {\n+        for errors.iter().advance |error| {\n             match *error {\n                 ConcreteFailure(origin, sub, sup) => {\n                     self.report_concrete_failure(origin, sub, sup);"}, {"sha": "3360edc6a46787e6041892ca2c3ea82c814a53ad", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -31,6 +31,7 @@ use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::lub::Lub;\n use middle::typeck::infer::to_str::InferStr;\n use middle::typeck::infer::unify::{ValsAndBindings, Root};\n+use middle::typeck::infer::error_reporting::ErrorReporting;\n use middle::typeck::isr_alist;\n use util::common::indent;\n use util::ppaux::{bound_region_to_str, ty_to_str, trait_ref_to_str, Repr,"}, {"sha": "96cb5d3c747c36f54530e26b69a3ed5be5991329", "filename": "src/librustc/middle/typeck/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fmod.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -36,7 +36,8 @@ mod doc;\n enum Constraint {\n     ConstrainVarSubVar(RegionVid, RegionVid),\n     ConstrainRegSubVar(Region, RegionVid),\n-    ConstrainVarSubReg(RegionVid, Region)\n+    ConstrainVarSubReg(RegionVid, Region),\n+    ConstrainRegSubReg(Region, Region),\n }\n \n #[deriving(Eq, IterBytes)]\n@@ -454,7 +455,7 @@ impl RegionVarBindings {\n         {\n             let mut result_set = result_set;\n             if r == r1 { // Clearly, this is potentially inefficient.\n-                if !result_set.iter().any_(|x| x == r2) {\n+                if !result_set.iter().any_(|x| *x == r2) {\n                     result_set.push(r2);\n                 }\n             }"}, {"sha": "628940711453411da3b360e6dd510a1b2f12abaf", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -610,7 +610,7 @@ impl Repr for @ast::pat {\n \n impl Repr for ty::bound_region {\n     fn repr(&self, tcx: ctxt) -> ~str {\n-        bound_region_to_str(tcx, *self)\n+        bound_region_ptr_to_str(tcx, *self)\n     }\n }\n "}, {"sha": "ab2ac6cc0e5b9e4420042c933e578dd50b5c878a", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5c439fb006875d3d54b3b100f5411efc2c40f3/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=ef5c439fb006875d3d54b3b100f5411efc2c40f3", "patch": "@@ -16,12 +16,12 @@ struct an_enum<'self>(&'self int);\n struct a_class<'self> { x:&'self int }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-    return e; //~ ERROR mismatched types: expected `an_enum<'b> ` but found `an_enum<'a> `\n+    return e; //~ ERROR mismatched types: expected `an_enum<'b>` but found `an_enum<'a>`\n     //~^ ERROR cannot infer an appropriate lifetime\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-    return e; //~ ERROR mismatched types: expected `a_class<'b> ` but found `a_class<'a> `\n+    return e; //~ ERROR mismatched types: expected `a_class<'b>` but found `a_class<'a>`\n     //~^ ERROR cannot infer an appropriate lifetime\n }\n "}]}