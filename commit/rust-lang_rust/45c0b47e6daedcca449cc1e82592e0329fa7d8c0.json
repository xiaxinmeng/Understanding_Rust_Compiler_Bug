{"sha": "45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzBiNDdlNmRhZWRjY2E0NDljYzFlODI1OTJlMDMyOWZhN2Q4YzA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-05-15T09:42:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-15T09:42:43Z"}, "message": "Merge pull request #2703 from nrc/attrs\n\nUse scoped attributes for skip attribute", "tree": {"sha": "e24691a21518614c6da8dfd7d955b4ffd94730e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24691a21518614c6da8dfd7d955b4ffd94730e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa+quTCRBK7hj4Ov3rIwAAdHIIAJmn9eNQgYLx+Y191XUzcLno\np/rbctYZjaOWYoSzuAOa9ze+fGjYQs8RQP7cT35a0a3ACR8aP4s1vYkJom9hjMoD\nP6PcA05O4q0a8xCKoNvmSEwm6OOl1jddxwNDCurgXIqg2DyDMwHIAIIh8CKyC9K1\nLQIJdXHMGTtNtlcoBc0KyVCJ8bOvn0mlHpw1B0vMK+nRxvWUzjM38twJmfVbk6Ff\niNOXSHS58evw16r9RqUH6//RfMoAUSNzW24Z+8DOJVhBJ0DTbtuv3T8S9tZEEput\n39zPEitmO+y+BYy1MTL3wxhv5LE6JVJm10AxU0UO7zF6GUR/3grUgGg9UJ9D3u4=\n=1jB2\n-----END PGP SIGNATURE-----\n", "payload": "tree e24691a21518614c6da8dfd7d955b4ffd94730e0\nparent 634ca02fd88093b2223dd24f4b3269109ef2a917\nparent c977c2ce007877f5cd3ce75f35df4d46a545e886\nauthor Nick Cameron <nrc@ncameron.org> 1526377363 +1200\ncommitter GitHub <noreply@github.com> 1526377363 +1200\n\nMerge pull request #2703 from nrc/attrs\n\nUse scoped attributes for skip attribute"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "html_url": "https://github.com/rust-lang/rust/commit/45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634ca02fd88093b2223dd24f4b3269109ef2a917", "url": "https://api.github.com/repos/rust-lang/rust/commits/634ca02fd88093b2223dd24f4b3269109ef2a917", "html_url": "https://github.com/rust-lang/rust/commit/634ca02fd88093b2223dd24f4b3269109ef2a917"}, {"sha": "c977c2ce007877f5cd3ce75f35df4d46a545e886", "url": "https://api.github.com/repos/rust-lang/rust/commits/c977c2ce007877f5cd3ce75f35df4d46a545e886", "html_url": "https://github.com/rust-lang/rust/commit/c977c2ce007877f5cd3ce75f35df4d46a545e886"}], "stats": {"total": 297, "additions": 196, "deletions": 101}, "files": [{"sha": "8eef98030de469b99fb0d380494c497c6a94822f", "filename": ".travis.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -28,9 +28,7 @@ matrix:\n     - env: INTEGRATION=futures-rs\n     - env: INTEGRATION=rand\n     - env: INTEGRATION=failure\n-    - env: INTEGRATION=glob\n     - env: INTEGRATION=error-chain\n-    - env: INTEGRATION=tempdir\n     - env: INTEGRATION=bitflags\n     - env: INTEGRATION=log\n   allow_failures:\n@@ -47,6 +45,8 @@ matrix:\n     - env: INTEGRATION=futures-rs\n     - env: INTEGRATION=log\n     - env: INTEGRATION=rand\n+    - env: INTEGRATION=glob\n+    - env: INTEGRATION=tempdir\n \n before_script:\n - |"}, {"sha": "9c0d9481b507e1e779ba46e9caa9347c8ea99fe7", "filename": "Configurations.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -1951,7 +1951,7 @@ lines are found, they are trimmed down to match this integer.\n Original Code:\n \n ```rust\n-#![rustfmt_skip]\n+#![rustfmt::skip]\n \n fn foo() {\n     println!(\"a\");\n@@ -2010,7 +2010,7 @@ them, additional blank lines are inserted.\n Original Code (rustfmt will not change it with the default value of `0`):\n \n ```rust\n-#![rustfmt_skip]\n+#![rustfmt::skip]\n \n fn foo() {\n     println!(\"a\");"}, {"sha": "b5a4bc7bbc55e31368c853dcf43765511b00966b", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -174,7 +174,7 @@ See [Configurations.md](Configurations.md) for details.\n * For things you do not want rustfmt to mangle, use one of\n \n     ```rust\n-    #[rustfmt_skip]  // requires nightly and #![feature(custom_attribute)] in crate root\n+    #[rustfmt::skip]  // requires nightly Rust and #![feature(tool_attributes)] in crate root\n     #[cfg_attr(rustfmt, rustfmt_skip)]  // works in stable\n     ```\n * When you run rustfmt, place a file named `rustfmt.toml` or `.rustfmt.toml` in"}, {"sha": "9b935b0a287f923382a41f47daf314a62100c7f7", "filename": "rustfmt.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -0,0 +1,2 @@\n+error_on_line_overflow = true\n+error_on_unformatted = true"}, {"sha": "e754144a72795eebcd4a1f59e5a7b777adaa7b0c", "filename": "src/attr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -20,6 +20,7 @@ use expr::rewrite_literal;\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use types::{rewrite_path, PathContext};\n use utils::{count_newlines, mk_sp};\n \n /// Returns attributes on the given statement.\n@@ -200,17 +201,19 @@ fn allow_mixed_tactic_for_nested_metaitem_list(list: &[ast::NestedMetaItem]) ->\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n-            ast::MetaItemKind::Word => String::from(&*self.name().as_str()),\n+            ast::MetaItemKind::Word => {\n+                rewrite_path(context, PathContext::Type, None, &self.ident, shape)?\n+            }\n             ast::MetaItemKind::List(ref list) => {\n-                let name = self.name().as_str();\n+                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n                 let item_shape = match context.config.indent_style() {\n                     IndentStyle::Block => shape\n                         .block_indent(context.config.tab_spaces())\n                         .with_max_width(context.config),\n                     // 1 = `(`, 2 = `]` and `)`\n                     IndentStyle::Visual => shape\n                         .visual_indent(0)\n-                        .shrink_left(name.len() + 1)\n+                        .shrink_left(path.len() + 1)\n                         .and_then(|s| s.sub_width(2))?,\n                 };\n                 let items = itemize_list(\n@@ -248,21 +251,21 @@ impl Rewrite for ast::MetaItem {\n                 };\n                 let item_str = write_list(&item_vec, &fmt)?;\n                 // 3 = \"()\" and \"]\"\n-                let one_line_budget = shape.offset_left(name.len())?.sub_width(3)?.width;\n+                let one_line_budget = shape.offset_left(path.len())?.sub_width(3)?.width;\n                 if context.config.indent_style() == IndentStyle::Visual\n                     || (!item_str.contains('\\n') && item_str.len() <= one_line_budget)\n                 {\n-                    format!(\"{}({})\", name, item_str)\n+                    format!(\"{}({})\", path, item_str)\n                 } else {\n                     let indent = shape.indent.to_string_with_newline(context.config);\n                     let nested_indent = item_shape.indent.to_string_with_newline(context.config);\n-                    format!(\"{}({}{}{})\", name, nested_indent, item_str, indent)\n+                    format!(\"{}({}{}{})\", path, nested_indent, item_str, indent)\n                 }\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let name = self.name().as_str();\n+                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n                 // 3 = ` = `\n-                let lit_shape = shape.shrink_left(name.len() + 3)?;\n+                let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max\n                 // width. Since a literal is basically unformattable unless it\n                 // is a string literal (and only if `format_strings` is set),\n@@ -271,7 +274,7 @@ impl Rewrite for ast::MetaItem {\n                 // See #2479 for example.\n                 let value = rewrite_literal(context, literal, lit_shape)\n                     .unwrap_or_else(|| context.snippet(literal.span).to_owned());\n-                format!(\"{} = {}\", name, value)\n+                format!(\"{} = {}\", path, value)\n             }\n         })\n     }"}, {"sha": "f850c0bba4413bd4501bffd7ded9bbebc3bb56ce", "filename": "src/comment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -1253,7 +1253,7 @@ mod test {\n     }\n \n     #[test]\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[rustfmt::skip]\n     fn format_comments() {\n         let mut config: ::config::Config = Default::default();\n         config.set().wrap_comments(true);"}, {"sha": "46cb952a0cb9c4d02c0e78cf1f255ebd7103718c", "filename": "src/lib.rs", "status": "modified", "additions": 59, "deletions": 27, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -8,12 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(custom_attribute)]\n+#![feature(tool_attributes)]\n #![feature(decl_macro)]\n-// FIXME(cramertj) remove after match_default_bindings merges\n-#![allow(stable_features)]\n #![allow(unused_attributes)]\n-#![feature(match_default_bindings)]\n #![feature(type_ascription)]\n #![feature(unicode_internals)]\n \n@@ -40,6 +37,7 @@ extern crate term;\n extern crate toml;\n extern crate unicode_segmentation;\n \n+use std::cell::RefCell;\n use std::collections::HashMap;\n use std::fmt;\n use std::io::{self, stdout, Write};\n@@ -50,7 +48,7 @@ use std::time::Duration;\n \n use syntax::ast;\n pub use syntax::codemap::FileName;\n-use syntax::codemap::{CodeMap, FilePathMapping};\n+use syntax::codemap::{CodeMap, FilePathMapping, Span};\n use syntax::errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::errors::{DiagnosticBuilder, Handler};\n use syntax::parse::{self, ParseSess};\n@@ -128,9 +126,14 @@ pub enum ErrorKind {\n     // License check has failed\n     #[fail(display = \"license check failed\")]\n     LicenseCheck,\n+    // Used deprecated skip attribute\n+    #[fail(display = \"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n+    DeprecatedAttr,\n+    // Used a rustfmt:: attribute other than skip\n+    #[fail(display = \"invalid attribute\")]\n+    BadAttr,\n }\n \n-// Formatting errors that are identified *after* rustfmt has run.\n struct FormattingError {\n     line: usize,\n     kind: ErrorKind,\n@@ -140,11 +143,28 @@ struct FormattingError {\n }\n \n impl FormattingError {\n+    fn from_span(span: &Span, codemap: &CodeMap, kind: ErrorKind) -> FormattingError {\n+        FormattingError {\n+            line: codemap.lookup_char_pos(span.lo()).line,\n+            kind,\n+            is_comment: false,\n+            is_string: false,\n+            line_buffer: codemap\n+                .span_to_lines(*span)\n+                .ok()\n+                .and_then(|fl| {\n+                    fl.file\n+                        .get_line(fl.lines[0].line_index)\n+                        .map(|l| l.into_owned())\n+                })\n+                .unwrap_or_else(|| String::new()),\n+        }\n+    }\n     fn msg_prefix(&self) -> &str {\n         match self.kind {\n             ErrorKind::LineOverflow(..) | ErrorKind::TrailingWhitespace => \"internal error:\",\n-            ErrorKind::LicenseCheck => \"error:\",\n-            ErrorKind::BadIssue(_) => \"warning:\",\n+            ErrorKind::LicenseCheck | ErrorKind::BadAttr => \"error:\",\n+            ErrorKind::BadIssue(_) | ErrorKind::DeprecatedAttr => \"warning:\",\n         }\n     }\n \n@@ -161,7 +181,7 @@ impl FormattingError {\n     fn format_len(&self) -> (usize, usize) {\n         match self.kind {\n             ErrorKind::LineOverflow(found, max) => (max, found - max),\n-            ErrorKind::TrailingWhitespace => {\n+            ErrorKind::TrailingWhitespace | ErrorKind::DeprecatedAttr | ErrorKind::BadAttr => {\n                 let trailing_ws_start = self\n                     .line_buffer\n                     .rfind(|c: char| !c.is_whitespace())\n@@ -177,20 +197,30 @@ impl FormattingError {\n     }\n }\n \n+#[derive(Clone)]\n pub struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n-    file_error_map: HashMap<FileName, Vec<FormattingError>>,\n+    file_error_map: Rc<RefCell<HashMap<FileName, Vec<FormattingError>>>>,\n }\n \n impl FormatReport {\n     fn new() -> FormatReport {\n         FormatReport {\n-            file_error_map: HashMap::new(),\n+            file_error_map: Rc::new(RefCell::new(HashMap::new())),\n         }\n     }\n \n+    fn append(&self, f: FileName, mut v: Vec<FormattingError>) {\n+        self.file_error_map\n+            .borrow_mut()\n+            .entry(f)\n+            .and_modify(|fe| fe.append(&mut v))\n+            .or_insert(v);\n+    }\n+\n     fn warning_count(&self) -> usize {\n         self.file_error_map\n+            .borrow()\n             .iter()\n             .map(|(_, errors)| errors.len())\n             .sum()\n@@ -204,7 +234,7 @@ impl FormatReport {\n         &self,\n         mut t: Box<term::Terminal<Output = io::Stderr>>,\n     ) -> Result<(), term::Error> {\n-        for (file, errors) in &self.file_error_map {\n+        for (file, errors) in &*self.file_error_map.borrow() {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n                 let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n@@ -250,7 +280,7 @@ impl FormatReport {\n             }\n         }\n \n-        if !self.file_error_map.is_empty() {\n+        if !self.file_error_map.borrow().is_empty() {\n             t.attr(term::Attr::Bold)?;\n             write!(t, \"warning: \")?;\n             t.reset()?;\n@@ -274,7 +304,7 @@ fn target_str(space_len: usize, target_len: usize) -> String {\n impl fmt::Display for FormatReport {\n     // Prints all the formatting errors.\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n-        for (file, errors) in &self.file_error_map {\n+        for (file, errors) in &*self.file_error_map.borrow() {\n             for error in errors {\n                 let prefix_space_len = error.line.to_string().len();\n                 let prefix_spaces = \" \".repeat(1 + prefix_space_len);\n@@ -313,7 +343,7 @@ impl fmt::Display for FormatReport {\n                 )?;\n             }\n         }\n-        if !self.file_error_map.is_empty() {\n+        if !self.file_error_map.borrow().is_empty() {\n             writeln!(\n                 fmt,\n                 \"warning: rustfmt may have failed to format. See previous {} errors.\",\n@@ -339,10 +369,11 @@ fn format_ast<F>(\n     parse_session: &mut ParseSess,\n     main_file: &FileName,\n     config: &Config,\n+    report: FormatReport,\n     mut after_file: F,\n ) -> Result<(FileMap, bool), io::Error>\n where\n-    F: FnMut(&FileName, &mut String, &[(usize, usize)]) -> Result<bool, io::Error>,\n+    F: FnMut(&FileName, &mut String, &[(usize, usize)], &FormatReport) -> Result<bool, io::Error>,\n {\n     let mut result = FileMap::new();\n     // diff mode: check if any files are differing\n@@ -360,7 +391,8 @@ where\n             .file;\n         let big_snippet = filemap.src.as_ref().unwrap();\n         let snippet_provider = SnippetProvider::new(filemap.start_pos, big_snippet);\n-        let mut visitor = FmtVisitor::from_codemap(parse_session, config, &snippet_provider);\n+        let mut visitor =\n+            FmtVisitor::from_codemap(parse_session, config, &snippet_provider, report.clone());\n         // Format inner attributes if available.\n         if !krate.attrs.is_empty() && path == *main_file {\n             visitor.skip_empty_lines(filemap.end_pos);\n@@ -380,8 +412,7 @@ where\n             ::utils::count_newlines(&visitor.buffer)\n         );\n \n-        let filename = path.clone();\n-        has_diff |= match after_file(&filename, &mut visitor.buffer, &visitor.skipped_range) {\n+        has_diff |= match after_file(&path, &mut visitor.buffer, &visitor.skipped_range, &report) {\n             Ok(result) => result,\n             Err(e) => {\n                 // Create a new error with path_str to help users see which files failed\n@@ -390,13 +421,13 @@ where\n             }\n         };\n \n-        result.push((filename, visitor.buffer));\n+        result.push((path.clone(), visitor.buffer));\n     }\n \n     Ok((result, has_diff))\n }\n \n-/// Returns true if the line with the given line number was skipped by `#[rustfmt_skip]`.\n+/// Returns true if the line with the given line number was skipped by `#[rustfmt::skip]`.\n fn is_skipped_line(line_number: usize, skipped_range: &[(usize, usize)]) -> bool {\n     skipped_range\n         .iter()\n@@ -429,7 +460,7 @@ fn format_lines(\n     name: &FileName,\n     skipped_range: &[(usize, usize)],\n     config: &Config,\n-    report: &mut FormatReport,\n+    report: &FormatReport,\n ) {\n     let mut trims = vec![];\n     let mut last_wspace: Option<usize> = None;\n@@ -543,7 +574,7 @@ fn format_lines(\n         }\n     }\n \n-    report.file_error_map.insert(name.clone(), errors);\n+    report.append(name.clone(), errors);\n }\n \n fn parse_input<'sess>(\n@@ -760,19 +791,20 @@ fn format_input_inner<T: Write>(\n     ));\n     parse_session.span_diagnostic = Handler::with_emitter(true, false, silent_emitter);\n \n-    let mut report = FormatReport::new();\n+    let report = FormatReport::new();\n \n     let format_result = format_ast(\n         &krate,\n         &mut parse_session,\n         &main_file,\n         config,\n-        |file_name, file, skipped_range| {\n+        report.clone(),\n+        |file_name, file, skipped_range, report| {\n             // For some reason, the codemap does not include terminating\n             // newlines so we must add one on for each file. This is sad.\n             filemap::append_newline(file);\n \n-            format_lines(file, file_name, skipped_range, config, &mut report);\n+            format_lines(file, file_name, skipped_range, config, report);\n \n             if let Some(ref mut out) = out {\n                 return filemap::write_file(file, file_name, out, config);\n@@ -975,7 +1007,7 @@ mod unit_tests {\n \n     #[test]\n     fn test_format_code_block_fail() {\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         let code_block = \"this_line_is_100_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(x, y, z);\";\n         assert!(format_code_block(code_block, &Config::default()).is_none());\n     }"}, {"sha": "7c7bb060fd3b8f97ae6ca4c090a73649d3da88c4", "filename": "src/rewrite.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Frewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Frewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frewrite.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -16,6 +16,7 @@ use syntax::parse::ParseSess;\n use config::{Config, IndentStyle};\n use shape::Shape;\n use visitor::SnippetProvider;\n+use FormatReport;\n \n use std::cell::RefCell;\n \n@@ -38,6 +39,7 @@ pub struct RewriteContext<'a> {\n     // When rewriting chain, veto going multi line except the last element\n     pub force_one_line_chain: RefCell<bool>,\n     pub snippet_provider: &'a SnippetProvider<'a>,\n+    pub report: FormatReport,\n }\n \n impl<'a> RewriteContext<'a> {"}, {"sha": "b538519ec0b04fa30e2c10790d49c8bf4bc92b4b", "filename": "src/test/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -704,14 +704,14 @@ impl ConfigCodeBlock {\n         // We never expect to not have a code block.\n         assert!(self.code_block.is_some() && self.code_block_start.is_some());\n \n-        // See if code block begins with #![rustfmt_skip].\n+        // See if code block begins with #![rustfmt::skip].\n         let fmt_skip = self\n             .code_block\n             .as_ref()\n             .unwrap()\n             .split('\\n')\n             .nth(0)\n-            .unwrap_or(\"\") == \"#![rustfmt_skip]\";\n+            .unwrap_or(\"\") == \"#![rustfmt::skip]\";\n \n         if self.config_name.is_none() && !fmt_skip {\n             write_message(&format!(\n@@ -790,7 +790,7 @@ impl ConfigCodeBlock {\n     // - Rust code blocks are identifed by lines beginning with \"```rust\".\n     // - One explicit configuration setting is supported per code block.\n     // - Rust code blocks with no configuration setting are illegal and cause an\n-    //   assertion failure, unless the snippet begins with #![rustfmt_skip].\n+    //   assertion failure, unless the snippet begins with #![rustfmt::skip].\n     // - Configuration names in Configurations.md must be in the form of\n     //   \"## `NAME`\".\n     // - Configuration values in Configurations.md must be in the form of"}, {"sha": "991ebf16bf22bdb9744835b01566da056e66d8a0", "filename": "src/utils.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -22,8 +22,8 @@ use config::Color;\n use rewrite::RewriteContext;\n use shape::Shape;\n \n-// When we get scoped annotations, we should have rustfmt::skip.\n-const SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n+pub const DEPR_SKIP_ANNOTATION: &str = \"rustfmt_skip\";\n+pub const SKIP_ANNOTATION: &str = \"rustfmt::skip\";\n \n // Computes the length of a string's last line, minus offset.\n pub fn extra_offset(text: &str, shape: Shape) -> usize {\n@@ -212,7 +212,10 @@ pub fn last_line_extendable(s: &str) -> bool {\n #[inline]\n fn is_skip(meta_item: &MetaItem) -> bool {\n     match meta_item.node {\n-        MetaItemKind::Word => meta_item.name() == SKIP_ANNOTATION,\n+        MetaItemKind::Word => {\n+            let path_str = meta_item.ident.to_string();\n+            path_str == SKIP_ANNOTATION || path_str == DEPR_SKIP_ANNOTATION\n+        }\n         MetaItemKind::List(ref l) => {\n             meta_item.name() == \"cfg_attr\" && l.len() == 2 && is_skip_nested(&l[1])\n         }"}, {"sha": "ec1890035a72f28e7c05769fc676d9952b806123", "filename": "src/visitor.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -26,7 +26,11 @@ use macros::{rewrite_macro, rewrite_macro_def, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n use spanned::Spanned;\n-use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n+use utils::{\n+    self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec,\n+    DEPR_SKIP_ANNOTATION,\n+};\n+use {ErrorKind, FormatReport, FormattingError};\n \n use std::cell::RefCell;\n \n@@ -66,6 +70,7 @@ pub struct FmtVisitor<'a> {\n     pub snippet_provider: &'a SnippetProvider<'a>,\n     pub line_number: usize,\n     pub skipped_range: Vec<(usize, usize)>,\n+    pub report: FormatReport,\n }\n \n impl<'b, 'a: 'b> FmtVisitor<'a> {\n@@ -552,13 +557,19 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n     }\n \n     pub fn from_context(ctx: &'a RewriteContext) -> FmtVisitor<'a> {\n-        FmtVisitor::from_codemap(ctx.parse_session, ctx.config, ctx.snippet_provider)\n+        FmtVisitor::from_codemap(\n+            ctx.parse_session,\n+            ctx.config,\n+            ctx.snippet_provider,\n+            ctx.report.clone(),\n+        )\n     }\n \n     pub fn from_codemap(\n         parse_session: &'a ParseSess,\n         config: &'a Config,\n         snippet_provider: &'a SnippetProvider,\n+        report: FormatReport,\n     ) -> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session,\n@@ -571,6 +582,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             snippet_provider,\n             line_number: 0,\n             skipped_range: vec![],\n+            report,\n         }\n     }\n \n@@ -584,6 +596,33 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n \n     // Returns true if we should skip the following item.\n     pub fn visit_attrs(&mut self, attrs: &[ast::Attribute], style: ast::AttrStyle) -> bool {\n+        for attr in attrs {\n+            if attr.name() == DEPR_SKIP_ANNOTATION {\n+                let file_name = self.codemap.span_to_filename(attr.span);\n+                self.report.append(\n+                    file_name,\n+                    vec![FormattingError::from_span(\n+                        &attr.span,\n+                        &self.codemap,\n+                        ErrorKind::DeprecatedAttr,\n+                    )],\n+                );\n+            } else if attr.path.segments[0].ident.to_string() == \"rustfmt\" {\n+                if attr.path.segments.len() == 1\n+                    || attr.path.segments[1].ident.to_string() != \"skip\"\n+                {\n+                    let file_name = self.codemap.span_to_filename(attr.span);\n+                    self.report.append(\n+                        file_name,\n+                        vec![FormattingError::from_span(\n+                            &attr.span,\n+                            &self.codemap,\n+                            ErrorKind::BadAttr,\n+                        )],\n+                    );\n+                }\n+            }\n+        }\n         if contains_skip(attrs) {\n             return true;\n         }\n@@ -711,6 +750,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n             is_if_else_block: RefCell::new(false),\n             force_one_line_chain: RefCell::new(false),\n             snippet_provider: self.snippet_provider,\n+            report: self.report.clone(),\n         }\n     }\n }"}, {"sha": "f52930d50b61e2dcf59e298aebfe40eab76918fb", "filename": "tests/config/skip_children.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fconfig%2Fskip_children.toml", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fconfig%2Fskip_children.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fskip_children.toml?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -1 +1 @@\n-skip_children = true\n\\ No newline at end of file\n+skip_children = true"}, {"sha": "409e5f5a4a9c38ead6de4790f31c051d4e84ee83", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -161,3 +161,10 @@ struct A { #[doc = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n // #2647\n #[cfg(feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")]\n pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}\n+"}, {"sha": "f53a8a4a1fe02eb6bef9c50021bd6ba2d6807f28", "filename": "tests/source/comment4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcomment4.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -48,5 +48,5 @@ fn debug_function() {\n \n #[link_section=\".vectors\"]\n #[no_mangle] // Test this attribute is preserved.\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n+#[cfg_attr(rustfmt, rustfmt::skip)]\n pub static ISSUE_1284: [i32; 16] = [];"}, {"sha": "229817e1405b4874c8bbe28bef4720875fd2d9b4", "filename": "tests/source/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -36,7 +36,7 @@ fn main() {\n                                                                        /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -166,7 +166,7 @@ struct Palette { /// A map of indices in the palette to a count of pixels in app\n // when the field had attributes\n struct FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    #[rustfmt::skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n     //Another pre comment\n     #[attr1]\n     #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC"}, {"sha": "4c2eb1de179c813f969e01bd2e1420dafd0b3cbf", "filename": "tests/source/configs/use_field_init_shorthand/false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -13,7 +13,7 @@ fn main() {\n         y: y,\n         #[attr]\n         z: z,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         skipped: skipped,\n     };\n }"}, {"sha": "dcde28d74e0f1d6186d6644ec022498b245dc682", "filename": "tests/source/configs/use_field_init_shorthand/true.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -13,7 +13,7 @@ fn main() {\n         y: y,\n         #[attr]\n         z: z,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         skipped: skipped,\n     };\n }"}, {"sha": "654fc3a836d9832cf9831395d8c54215f2cebc2b", "filename": "tests/source/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fenum.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -49,7 +49,7 @@ pub enum EnumWithAttributes {\n     //This is a pre comment AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     TupleVar(usize, usize, usize), // AAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     // Pre Comment\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     SkippedItem(String,String,), // Post-comment\n     #[another_attr]\n     #[attr2]"}, {"sha": "5c5eb3691614169664c0cd8cf9256b1f2bbdace2", "filename": "tests/source/issue-1124.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fissue-1124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fissue-1124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1124.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -13,4 +13,4 @@ use y;\n \n \n use x;\n-use a;\n\\ No newline at end of file\n+use a;"}, {"sha": "d1664ca9f377fb25764f85bdd0e13b66dc744d4d", "filename": "tests/source/match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -48,7 +48,7 @@ fn foo() {\n         #[an_attribute]\n         // Comment after an attribute.\n         None => 0,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         Blurb     =>     {                  }\n     };\n }\n@@ -103,7 +103,7 @@ fn matches() {\n \n fn match_skip() {\n     let _ = match Some(1) {\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         Some( n ) => n,\n         None      => 1,\n     };"}, {"sha": "c26df03edda3d7f1fe20eb9afe8baa759a88d5a1", "filename": "tests/source/multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmultiple.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -36,7 +36,7 @@ fn baz<'a: 'b /* comment on 'a */, T: Somsssssssssssssssssssssssssssssssssssssss\n     #[attr2]#[attr3]extern crate foo;\n }\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n fn qux(a: dadsfa,   // Comment 1\n        b: sdfasdfa, // Comment 2\n        c: dsfdsafa) // Comment 3\n@@ -78,7 +78,7 @@ pub trait GraphWalk<'a, N, E> {\n /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f :   SomeType, // Comment beside a field\n     // Comment on a field\n@@ -126,7 +126,7 @@ fn deconstruct(foo: Bar) -> (SocketAddr, Method, Headers,\n                      AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) {\n }\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n mod a{\n fn foo(x:    T) {\n     let x:    T = dfasdf;"}, {"sha": "56471f1d7e42f39d78b4f09aafc514d074c69201", "filename": "tests/source/structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstructs.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -4,7 +4,7 @@\n                                                                        /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -139,7 +139,7 @@ struct Palette { /// A map of indices in the palette to a count of pixels in app\n // when the field had attributes\n struct FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    #[rustfmt::skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n     //Another pre comment\n     #[attr1]\n     #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC"}, {"sha": "9f0c73694bfeb2d07fae07337c5cdf364209f19a", "filename": "tests/source/trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -89,7 +89,7 @@ trait AAAAAAAAAAAAAAAAAAA = BBBBBBBBBBBBBBBBBBB + CCCCCCCCCCCCCCCCCCCCCCCCCCCCC\n trait AAAAAAAAAAAAAAAAAA = BBBBBBBBBBBBBBBBBBB + CCCCCCCCCCCCCCCCCCCCCCCCCCCCC + DDDDDDDDDDDDDDDDDDD;\n trait AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<A, B, C, D, E> = FooBar;\n trait AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA<A, B, C, D, E> = FooBar;\n-#[rustfmt_skip]\n+#[rustfmt::skip]\n trait FooBar = Foo\n     + Bar;\n "}, {"sha": "730ba980abb8f2aba24aad9dfc1083a5195d11bf", "filename": "tests/source/unions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Fsource%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Funions.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -4,7 +4,7 @@\n                                                                        /// A Doc comment\n #[AnAttribute]\n pub union Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -100,7 +100,7 @@ union Palette { /// A map of indices in the palette to a count of pixels in appr\n // when the field had attributes\n union FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n+    #[rustfmt::skip] pub host:String, // Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB\n     //Another pre comment\n     #[attr1]\n     #[attr2] pub id: usize // CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCC CCCCCCCCCCCCCCCCCC CCCCCCCCCCCCCC CCCCCCCCCCCC"}, {"sha": "b0b8ea89f82a2e6bb6a6d558ac84e826a2180d4f", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -171,3 +171,9 @@ struct A {\n     feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n )]\n pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}"}, {"sha": "e2ef7de978f93d6bea0624450be23caffdd4acc5", "filename": "tests/target/comment4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fcomment4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fcomment4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment4.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -47,5 +47,5 @@ fn debug_function() {\n \n #[link_section=\".vectors\"]\n #[no_mangle] // Test this attribute is preserved.\n-#[cfg_attr(rustfmt, rustfmt_skip)]\n+#[cfg_attr(rustfmt, rustfmt::skip)]\n pub static ISSUE_1284: [i32; 16] = [];"}, {"sha": "f952775f5f2d32549f6407ddf1bd659deaecbb33", "filename": "tests/target/configs/struct_field_align_threshold/20.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fstruct_field_align_threshold%2F20.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -36,7 +36,7 @@ fn main() {\n /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -171,8 +171,8 @@ struct Palette {\n // when the field had attributes\n struct FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n-                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    #[rustfmt::skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                       * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n     // Another pre comment\n     #[attr1]\n     #[attr2]"}, {"sha": "7433044688670d452a2a330adbf0073815e6b88b", "filename": "tests/target/configs/use_field_init_shorthand/false.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ffalse.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         y: y,\n         #[attr]\n         z: z,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         skipped: skipped,\n     };\n }"}, {"sha": "8b80e81534b7492b51d9f0d2624a59bac7e16664", "filename": "tests/target/configs/use_field_init_shorthand/true.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fuse_field_init_shorthand%2Ftrue.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -9,7 +9,7 @@ fn main() {\n         y,\n         #[attr]\n         z,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         skipped: skipped,\n     };\n }"}, {"sha": "b19b6997826669d060d0abc8c624915d02b6e492", "filename": "tests/target/enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -65,7 +65,7 @@ pub enum EnumWithAttributes {\n     TupleVar(usize, usize, usize), /* AAAA AAAAAAAAAAAAAAAAAAAAA AAAAAAAAAAAAAAAAAAAAAAAA\n                                     * AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA */\n     // Pre Comment\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     SkippedItem(String,String,), // Post-comment\n     #[another_attr]\n     #[attr2]"}, {"sha": "66a6e9082de2ffea1ea3f41775792cc40afe60ca", "filename": "tests/target/fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Ffn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Ffn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -92,7 +92,7 @@ fn inner() {\n     x\n }\n \n-#[cfg_attr(rustfmt, rustfmt_skip)]\n+#[cfg_attr(rustfmt, rustfmt::skip)]\n fn foo(a: i32) -> i32 {\n     // comment\n     if a > 0 { 1 } else { 2 }"}, {"sha": "7ed49c61f1def84cf4a2e63f5bdca7851e5b1428", "filename": "tests/target/match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -51,7 +51,7 @@ fn foo() {\n         #[an_attribute]\n         // Comment after an attribute.\n         None => 0,\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         Blurb     =>     {                  }\n     };\n }\n@@ -109,7 +109,7 @@ fn matches() {\n \n fn match_skip() {\n     let _ = match Some(1) {\n-        #[rustfmt_skip]\n+        #[rustfmt::skip]\n         Some( n ) => n,\n         None => 1,\n     };"}, {"sha": "832567fdf7e08eafe691e3a32282e8700326207d", "filename": "tests/target/multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fmultiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fmultiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmultiple.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -58,7 +58,7 @@ fn baz<\n     extern crate foo;\n }\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n fn qux(a: dadsfa,   // Comment 1\n        b: sdfasdfa, // Comment 2\n        c: dsfdsafa) // Comment 3\n@@ -103,7 +103,7 @@ pub trait GraphWalk<'a, N, E> {\n /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -172,7 +172,7 @@ fn deconstruct(\n ) {\n }\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n mod a{\n fn foo(x:    T) {\n     let x:    T = dfasdf;"}, {"sha": "6c9737a3377e9026a213052f27f824c7891b81de", "filename": "tests/target/skip.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -1,24 +1,24 @@\n // Test the skip attribute works\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n fn foo() { badly; formatted; stuff\n ; }\n \n-#[rustfmt_skip]\n+#[rustfmt::skip]\n trait Foo\n {\n fn foo(\n );\n }\n \n impl LateLintPass for UsedUnderscoreBinding {\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     fn check_expr() { // comment\n     }\n }\n \n fn issue1346() {\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     Box::new(self.inner.call(req).then(move |result| {\n         match result {\n             Ok(resp) => Box::new(future::done(Ok(resp))),\n@@ -32,37 +32,37 @@ fn issue1346() {\n \n fn skip_on_statements() {\n     // Outside block\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     {\n         foo; bar;\n             // junk\n     }\n \n     {\n         // Inside block\n-        #![rustfmt_skip]\n+        #![rustfmt::skip]\n         foo; bar;\n             // junk\n     }\n \n     // Semi\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     foo(\n         1, 2, 3, 4,\n         1, 2,\n         1, 2, 3,\n     );\n \n     // Local\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     let x = foo(  a,   b  ,  c);\n \n     // Item\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     use foobar;\n \n     // Mac\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     vec![\n         1, 2, 3, 4,\n         1, 2, 3, 4,\n@@ -74,12 +74,12 @@ fn skip_on_statements() {\n     ];\n \n     // Expr\n-    #[cfg_attr(rustfmt, rustfmt_skip)]\n+    #[cfg_attr(rustfmt, rustfmt::skip)]\n     foo(  a,   b  ,  c)\n }\n \n // Check that the skip attribute applies to other attributes.\n-#[rustfmt_skip]\n+#[rustfmt::skip]\n #[cfg\n (  a , b\n )]"}, {"sha": "d770ab349f4efdf50b24f36aa83453a159dfbf03", "filename": "tests/target/skip_mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fskip_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fskip_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fskip_mod.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -1,3 +1,3 @@\n-#![rustfmt_skip]\n+#![rustfmt::skip]\n use a ::  b\n ;"}, {"sha": "368650bb6a883e82b3b1ec7a0674d5af166c7405", "filename": "tests/target/structs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fstructs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Fstructs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstructs.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -4,7 +4,7 @@\n /// A Doc comment\n #[AnAttribute]\n pub struct Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -144,8 +144,8 @@ struct Palette {\n // when the field had attributes\n struct FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n-                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    #[rustfmt::skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                       * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n     // Another pre comment\n     #[attr1]\n     #[attr2]"}, {"sha": "a6bc2d8968916cb28e92f4dcf5c48476a2f11be8", "filename": "tests/target/trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -127,7 +127,7 @@ trait AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n     D,\n     E,\n > = FooBar;\n-#[rustfmt_skip]\n+#[rustfmt::skip]\n trait FooBar = Foo\n     + Bar;\n "}, {"sha": "386ceb3836cad8e0881a0342ea525510c8d00be0", "filename": "tests/target/unions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Funions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c0b47e6daedcca449cc1e82592e0329fa7d8c0/tests%2Ftarget%2Funions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Funions.rs?ref=45c0b47e6daedcca449cc1e82592e0329fa7d8c0", "patch": "@@ -4,7 +4,7 @@\n /// A Doc comment\n #[AnAttribute]\n pub union Foo {\n-    #[rustfmt_skip]\n+    #[rustfmt::skip]\n     f :   SomeType, // Comment beside a field\n     f: SomeType, // Comment beside a field\n     // Comment on a field\n@@ -100,8 +100,8 @@ union Palette {\n // when the field had attributes\n union FieldsWithAttributes {\n     // Pre Comment\n-    #[rustfmt_skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n-                                      * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n+    #[rustfmt::skip] pub host:String, /* Post comment BBBBBBBBBBBBBB BBBBBBBBBBBBBBBB\n+                                       * BBBBBBBBBBBBBBBB BBBBBBBBBBBBBBBBB BBBBBBBBBBB */\n     // Another pre comment\n     #[attr1]\n     #[attr2]"}]}