{"sha": "d908e97da34ecc419024ddcf5004033920ebb9a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDhlOTdkYTM0ZWNjNDE5MDI0ZGRjZjUwMDQwMzM5MjBlYmI5YTk=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-01-22T07:09:53Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-01-23T17:01:36Z"}, "message": "Redo exported macro serialization\n\nThe old method of serializing the AST gives totally bogus spans if the\nexpansion of an imported macro causes compilation errors. The best\nsolution seems to be to serialize the actual textual macro definition\nand load it the same way the std-macros are. I'm not totally confident\nthat getting the source from the CodeMap will always do the right thing,\nbut it seems to work in simple cases.", "tree": {"sha": "fc65d429f6aff281da985f0531367fbc2d20eebe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc65d429f6aff281da985f0531367fbc2d20eebe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d908e97da34ecc419024ddcf5004033920ebb9a9", "comment_count": 11, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d908e97da34ecc419024ddcf5004033920ebb9a9", "html_url": "https://github.com/rust-lang/rust/commit/d908e97da34ecc419024ddcf5004033920ebb9a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d908e97da34ecc419024ddcf5004033920ebb9a9/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8477c9da5ed784f5981611b6c12623cd2b44806", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8477c9da5ed784f5981611b6c12623cd2b44806", "html_url": "https://github.com/rust-lang/rust/commit/f8477c9da5ed784f5981611b6c12623cd2b44806"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "fa2e94b6f8f206f5d88df28831ea7f3cf6747ef1", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -420,7 +420,7 @@ impl CrateLoader for Loader {\n         }\n     }\n \n-    fn get_exported_macros(&mut self, cnum: ast::CrateNum) -> ~[@ast::Item] {\n+    fn get_exported_macros(&mut self, cnum: ast::CrateNum) -> ~[~str] {\n         csearch::get_exported_macros(self.env.sess.cstore, cnum)\n     }\n "}, {"sha": "3985527232c65dad30566c51eb1b75302bd8a387", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -310,7 +310,7 @@ pub fn get_macro_registrar_fn(cstore: @cstore::CStore,\n \n pub fn get_exported_macros(cstore: @cstore::CStore,\n                            crate_num: ast::CrateNum)\n-                           -> ~[@ast::Item] {\n+                           -> ~[~str] {\n     let cdata = cstore.get_crate_data(crate_num);\n     decoder::get_exported_macros(cdata)\n }"}, {"sha": "a7e5082bcbbf6b875e502f90abec7ea78eaa58f2", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -23,7 +23,6 @@ use metadata::tydecode::{parse_ty_data, parse_def_id,\n use middle::ty::{ImplContainer, TraitContainer};\n use middle::ty;\n use middle::typeck;\n-use middle::astencode;\n use middle::astencode::vtable_decoder_helpers;\n \n use std::at_vec;\n@@ -1282,12 +1281,12 @@ pub fn get_macro_registrar_fn(cdata: Cmd) -> Option<ast::DefId> {\n         .map(|doc| item_def_id(doc, cdata))\n }\n \n-pub fn get_exported_macros(cdata: Cmd) -> ~[@ast::Item] {\n+pub fn get_exported_macros(cdata: Cmd) -> ~[~str] {\n     let macros = reader::get_doc(reader::Doc(cdata.data()),\n                                  tag_exported_macros);\n     let mut result = ~[];\n     reader::tagged_docs(macros, tag_macro_def, |macro_doc| {\n-        result.push(astencode::decode_exported_macro(macro_doc));\n+        result.push(macro_doc.as_str());\n         true\n     });\n     result"}, {"sha": "114b74b02de068bf4c68928f5ccaa673b8cc5beb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -37,6 +37,7 @@ use syntax::ast_map;\n use syntax::ast_util::*;\n use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n+use syntax::codemap;\n use syntax::diagnostic::SpanHandler;\n use syntax::parse::token::special_idents;\n use syntax::ast_util;\n@@ -71,6 +72,7 @@ pub struct EncodeParams<'a> {\n     cstore: @cstore::CStore,\n     encode_inlined_item: encode_inlined_item<'a>,\n     reachable: @RefCell<HashSet<ast::NodeId>>,\n+    codemap: @codemap::CodeMap,\n }\n \n struct Stats {\n@@ -101,6 +103,7 @@ pub struct EncodeContext<'a> {\n     encode_inlined_item: encode_inlined_item<'a>,\n     type_abbrevs: abbrev_map,\n     reachable: @RefCell<HashSet<ast::NodeId>>,\n+    codemap: @codemap::CodeMap,\n }\n \n pub fn reachable(ecx: &EncodeContext, id: NodeId) -> bool {\n@@ -1714,8 +1717,10 @@ impl<'a, 'b> Visitor<()> for MacroDefVisitor<'a, 'b> {\n     fn visit_item(&mut self, item: &Item, _: ()) {\n         match item.node {\n             ItemMac(..) => {\n+                let def = self.ecx.codemap.span_to_snippet(item.span)\n+                    .expect(\"Unable to find source for macro\");\n                 self.ebml_w.start_tag(tag_macro_def);\n-                astencode::encode_exported_macro(self.ebml_w, item);\n+                self.ebml_w.wr_str(def);\n                 self.ebml_w.end_tag();\n             }\n             _ => {}\n@@ -1881,6 +1886,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, crate: &Crate)\n         link_meta,\n         reachable,\n         non_inlineable_statics,\n+        codemap,\n         ..\n     } = parms;\n     let type_abbrevs = @RefCell::new(HashMap::new());\n@@ -1897,6 +1903,7 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, crate: &Crate)\n         encode_inlined_item: encode_inlined_item,\n         type_abbrevs: type_abbrevs,\n         reachable: reachable,\n+        codemap: codemap,\n      };\n \n     let mut ebml_w = writer::Encoder(wr);"}, {"sha": "5b246daa6c5b54ef30a17c06017a1cac9b28f127", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -2678,6 +2678,7 @@ pub fn crate_ctxt_to_encode_parms<'r>(cx: &'r CrateContext, ie: encoder::encode_\n             cstore: cx.sess.cstore,\n             encode_inlined_item: ie,\n             reachable: cx.reachable,\n+            codemap: cx.sess.codemap,\n         }\n }\n "}, {"sha": "628c0b937af8d7a6a8d3431e0390227684bb95ca", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -626,7 +626,7 @@ impl<'a> base::CrateLoader for CrateLoader<'a> {\n         self.loader.load_crate(crate)\n     }\n \n-    fn get_exported_macros(&mut self, cnum: ast::CrateNum) -> ~[@ast::Item] {\n+    fn get_exported_macros(&mut self, cnum: ast::CrateNum) -> ~[~str] {\n         self.loader.get_exported_macros(cnum)\n     }\n "}, {"sha": "fbaa086c7d30d977632538a3309aae8429d45e2d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -299,7 +299,7 @@ pub struct MacroCrate {\n \n pub trait CrateLoader {\n     fn load_crate(&mut self, crate: &ast::ViewItem) -> MacroCrate;\n-    fn get_exported_macros(&mut self, crate_num: ast::CrateNum) -> ~[@ast::Item];\n+    fn get_exported_macros(&mut self, crate_num: ast::CrateNum) -> ~[~str];\n     fn get_registrar_symbol(&mut self, crate_num: ast::CrateNum) -> Option<~str>;\n }\n "}, {"sha": "0534aa39848b84a7a37b427106fa8418db155b77", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -406,9 +406,20 @@ pub fn expand_view_item(vi: &ast::ViewItem,\n fn load_extern_macros(crate: &ast::ViewItem, fld: &mut MacroExpander) {\n     let MacroCrate { lib, cnum } = fld.cx.loader.load_crate(crate);\n \n+    let crate_name = match crate.node {\n+        ast::ViewItemExternMod(ref name, _, _) => token::ident_to_str(name),\n+        _ => unreachable!(),\n+    };\n+    let name = format!(\"<{} macros>\", crate_name).to_managed();\n+\n     let exported_macros = fld.cx.loader.get_exported_macros(cnum);\n-    for &it in exported_macros.iter() {\n-        expand_item_mac(it, fld);\n+    for source in exported_macros.iter() {\n+        let item = parse::parse_item_from_source_str(name,\n+                                                     source.to_managed(),\n+                                                     fld.cx.cfg(),\n+                                                     fld.cx.parse_sess())\n+                .expect(\"expected a serialized item\");\n+        expand_item_mac(item, fld);\n     }\n \n     let path = match lib {\n@@ -944,7 +955,6 @@ pub fn inject_std_macros(parse_sess: @parse::ParseSess,\n     let sm = match parse_item_from_source_str(@\"<std-macros>\",\n                                               std_macros(),\n                                               cfg.clone(),\n-                                              ~[],\n                                               parse_sess) {\n         Some(item) => item,\n         None => fail!(\"expected core macros to parse correctly\")\n@@ -1212,7 +1222,7 @@ mod test {\n             fail!(\"lolwut\")\n         }\n \n-        fn get_exported_macros(&mut self, _: ast::CrateNum) -> ~[@ast::Item] {\n+        fn get_exported_macros(&mut self, _: ast::CrateNum) -> ~[~str] {\n             fail!(\"lolwut\")\n         }\n \n@@ -1289,7 +1299,7 @@ mod test {\n         let item_ast = parse::parse_item_from_source_str(\n             @\"<test>\",\n             src,\n-            cfg,~[],sess);\n+            cfg,sess);\n         match item_ast {\n             Some(_) => (), // success\n             None => fail!(\"expected this to parse\")"}, {"sha": "6faed270875c4a0b4664e016408e0227a33637a0", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -250,7 +250,6 @@ pub mod rt {\n                 @\"<quote expansion>\",\n                 s,\n                 self.cfg(),\n-                ~[],\n                 self.parse_sess());\n             match res {\n                 Some(ast) => ast,"}, {"sha": "e026a11cafe370009fec48c9452afd9e2603f8bf", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d908e97da34ecc419024ddcf5004033920ebb9a9/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=d908e97da34ecc419024ddcf5004033920ebb9a9", "patch": "@@ -130,10 +130,10 @@ pub fn parse_item_from_source_str(\n     name: @str,\n     source: @str,\n     cfg: ast::CrateConfig,\n-    attrs: ~[ast::Attribute],\n     sess: @ParseSess\n ) -> Option<@ast::Item> {\n     let mut p = new_parser_from_source_str(sess, cfg, name, source);\n+    let attrs = p.parse_outer_attributes();\n     maybe_aborted(p.parse_item(attrs),p)\n }\n "}]}