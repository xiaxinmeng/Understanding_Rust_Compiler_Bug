{"sha": "d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Nzk1ODE0ZDQwMmVjNDdjOThjMDIzZGQzZjI5OGM2YTNmNWJmYTE=", "commit": {"author": {"name": "miguel raz", "email": "miguelraz@gmail.com", "date": "2021-05-18T14:26:01Z"}, "committer": {"name": "miguel raz", "email": "miguelraz@gmail.com", "date": "2021-05-18T15:11:37Z"}, "message": "add simd_fsqrt intrinsic", "tree": {"sha": "1e9aadf3fe29ffe893249c121cfb13de2cf38935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e9aadf3fe29ffe893249c121cfb13de2cf38935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "html_url": "https://github.com/rust-lang/rust/commit/d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/comments", "author": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "miguelraz", "id": 13056181, "node_id": "MDQ6VXNlcjEzMDU2MTgx", "avatar_url": "https://avatars.githubusercontent.com/u/13056181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miguelraz", "html_url": "https://github.com/miguelraz", "followers_url": "https://api.github.com/users/miguelraz/followers", "following_url": "https://api.github.com/users/miguelraz/following{/other_user}", "gists_url": "https://api.github.com/users/miguelraz/gists{/gist_id}", "starred_url": "https://api.github.com/users/miguelraz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miguelraz/subscriptions", "organizations_url": "https://api.github.com/users/miguelraz/orgs", "repos_url": "https://api.github.com/users/miguelraz/repos", "events_url": "https://api.github.com/users/miguelraz/events{/privacy}", "received_events_url": "https://api.github.com/users/miguelraz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce92300a49367a10489d0f9280adfa52ff60f6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce92300a49367a10489d0f9280adfa52ff60f6cf", "html_url": "https://github.com/rust-lang/rust/commit/ce92300a49367a10489d0f9280adfa52ff60f6cf"}], "stats": {"total": 18, "additions": 18, "deletions": 0}, "files": [{"sha": "7adf4c24e104ee79518f85167fe55495517bda72", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "patch": "@@ -45,6 +45,9 @@ extern \"platform-intrinsic\" {\n \n     /// fabs\n     pub(crate) fn simd_fabs<T>(x: T) -> T;\n+    \n+    /// fsqrt\n+    pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n \n     pub(crate) fn simd_eq<T, U>(x: T, y: T) -> U;\n     pub(crate) fn simd_ne<T, U>(x: T, y: T) -> U;"}, {"sha": "c4565a9dd900bb3afb9fd3cf0e924b573a7b8d45", "filename": "crates/core_simd/src/vector/float.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Ffloat.rs?ref=d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "patch": "@@ -35,6 +35,14 @@ macro_rules! impl_float_vector {\n             pub fn abs(self) -> Self {\n                 unsafe { crate::intrinsics::simd_fabs(self) }\n             }\n+\n+            /// Produces a vector where every lane has the square root value\n+            /// of the equivalently-indexed lane in `self`\n+            #[inline]\n+            #[cfg(feature = \"std\")]\n+            pub fn sqrt(self) -> Self {\n+                unsafe { crate::intrinsics::simd_fsqrt(self) }\n+            }\n         }\n \n         impl<const LANES: usize> $name<LANES>"}, {"sha": "83c6fec69e883c357ed5e094b785d2ec056b705b", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6795814d402ec47c98c023dd3f298c6a3f5bfa1/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=d6795814d402ec47c98c023dd3f298c6a3f5bfa1", "patch": "@@ -426,6 +426,13 @@ macro_rules! impl_float_tests {\n                     )\n                 }\n \n+                fn sqrt<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::sqrt,\n+                        &Scalar::sqrt,\n+                        &|_| true,\n+                    )\n+                }\n                 fn horizontal_sum<const LANES: usize>() {\n                     test_helpers::test_1(&|x| {\n                         test_helpers::prop_assert_biteq! ("}]}