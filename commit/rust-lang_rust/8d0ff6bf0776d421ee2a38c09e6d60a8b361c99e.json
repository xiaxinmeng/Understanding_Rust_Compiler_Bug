{"sha": "8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "node_id": "C_kwDOAAsO6NoAKDhkMGZmNmJmMDc3NmQ0MjFlZTJhMzhjMDllNmQ2MGE4YjM2MWM5OWU", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2023-01-26T23:26:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T23:26:52Z"}, "message": "Merge pull request #249 from rust-lang/fix/signed-integer-overflow\n\nFix/signed integer overflow", "tree": {"sha": "6b4060bb3fbd1366c6302459cfc552b9a5d86af5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4060bb3fbd1366c6302459cfc552b9a5d86af5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0ww8CRBK7hj4Ov3rIwAA1LcIAJrjMnll/PSwXufs/KoM1Pzb\ntPIOcMT8Esdkeu9n8VYIHFbU7JWakJxJQWrA4YWnBVa17vc2zTx+aLI2fsa/UnGE\nUHMX8z5/q8Y3FkDKblHvesCThYSkOVKOi7xQfnUwzp+E+On+2EvhsMT5RfWcMyXn\n3AWxNZMv2l5PfI36UdnwTjKOU17N0H0SWLrjEVFKO1n08whwD31MP6Gq0Mu09bST\nQJy+n8bnpgKK6qLxPG4SqDNeOXEYeQF/1ayzEWRc6Enm88SeFduRBWodyMXntfUy\np10tquTMlhMz7HwwZk/DLqFKpnPCTZIoTqaTZ6LHeBaG+2uulHoLWi52ghSsT80=\n=tbi/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b4060bb3fbd1366c6302459cfc552b9a5d86af5\nparent e6024f3bf3d6f60ef51bf9bb76a730f3898bf5b6\nparent 2dc7dbc01219ac2d8a7543af7fa5ff7026786569\nauthor antoyo <antoyo@users.noreply.github.com> 1674775612 -0500\ncommitter GitHub <noreply@github.com> 1674775612 -0500\n\nMerge pull request #249 from rust-lang/fix/signed-integer-overflow\n\nFix/signed integer overflow"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "html_url": "https://github.com/rust-lang/rust/commit/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6024f3bf3d6f60ef51bf9bb76a730f3898bf5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6024f3bf3d6f60ef51bf9bb76a730f3898bf5b6", "html_url": "https://github.com/rust-lang/rust/commit/e6024f3bf3d6f60ef51bf9bb76a730f3898bf5b6"}, {"sha": "2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dc7dbc01219ac2d8a7543af7fa5ff7026786569", "html_url": "https://github.com/rust-lang/rust/commit/2dc7dbc01219ac2d8a7543af7fa5ff7026786569"}], "stats": {"total": 129, "additions": 123, "deletions": 6}, "files": [{"sha": "c4e99469bc20b4fcf27dc2da43507a728d445555", "filename": ".github/workflows/release.yml", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/.github%2Fworkflows%2Frelease.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/.github%2Fworkflows%2Frelease.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Frelease.yml?ref=8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "patch": "@@ -20,6 +20,10 @@ jobs:\n       matrix:\n         libgccjit_version:\n           - { gcc: \"libgccjit.so\", artifacts_branch: \"master\" }\n+        commands: [\n+          \"--test-successful-rustc --nb-parts 2 --current-part 0\",\n+          \"--test-successful-rustc --nb-parts 2 --current-part 1\",\n+        ]\n \n     steps:\n     - uses: actions/checkout@v3\n@@ -104,9 +108,4 @@ jobs:\n \n     - name: Run tests\n       run: |\n-        ./test.sh --release --clean --release-sysroot --build-sysroot --mini-tests --std-tests # --test-libcore # FIXME(antoyo): libcore tests fail.\n-\n-    - name: Run stdarch tests\n-      run: |\n-        cd build_sysroot/sysroot_src/library/stdarch/\n-        CHANNEL=release TARGET=x86_64-unknown-linux-gnu ../../../../cargo.sh test\n+        ./test.sh --release --clean --release-sysroot --build-sysroot ${{ matrix.commands }}"}, {"sha": "42fb35e738ffdbe3bfe14baa80287847a4b6531e", "filename": ".github/workflows/stdarch.yml", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/.github%2Fworkflows%2Fstdarch.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/.github%2Fworkflows%2Fstdarch.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fstdarch.yml?ref=8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "patch": "@@ -0,0 +1,116 @@\n+name: stdarch tests with sysroot compiled in release mode\n+\n+on:\n+  - push\n+  - pull_request\n+\n+permissions:\n+  contents: read\n+\n+env:\n+  # Enable backtraces for easier debugging\n+  RUST_BACKTRACE: 1\n+\n+jobs:\n+  build:\n+    runs-on: ubuntu-latest\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        libgccjit_version:\n+          - { gcc: \"libgccjit.so\", artifacts_branch: \"master\" }\n+        commands: [\n+          \"--test-successful-rustc --nb-parts 2 --current-part 0\",\n+          \"--test-successful-rustc --nb-parts 2 --current-part 1\",\n+        ]\n+\n+    steps:\n+    - uses: actions/checkout@v3\n+\n+    - uses: actions/checkout@v3\n+      with:\n+        repository: llvm/llvm-project\n+        path: llvm\n+\n+    - name: Install packages\n+      run: sudo apt-get install ninja-build ripgrep\n+\n+    - name: Download artifact\n+      uses: dawidd6/action-download-artifact@v2\n+      with:\n+          workflow: main.yml\n+          name: ${{ matrix.libgccjit_version.gcc }}\n+          path: gcc-build\n+          repo: antoyo/gcc\n+          branch: ${{ matrix.libgccjit_version.artifacts_branch }}\n+          event: push\n+          search_artifacts: true # Because, instead, the action only check the last job ran and that won't work since we want multiple artifacts.\n+\n+    - name: Setup path to libgccjit\n+      run: |\n+          echo $(readlink -f gcc-build) > gcc_path\n+          # NOTE: the filename is still libgccjit.so even when the artifact name is different.\n+          ln gcc-build/libgccjit.so gcc-build/libgccjit.so.0\n+\n+    - name: Set env\n+      run: |\n+        echo \"LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"LD_LIBRARY_PATH=$(cat gcc_path)\" >> $GITHUB_ENV\n+        echo \"workspace=\"$GITHUB_WORKSPACE >> $GITHUB_ENV\n+\n+    - name: Set RUST_COMPILER_RT_ROOT\n+      run: echo \"RUST_COMPILER_RT_ROOT=\"${{ env.workspace }}/llvm/compiler-rt >> $GITHUB_ENV\n+\n+    - name: Cache cargo installed crates\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/bin\n+        key: cargo-installed-crates2-ubuntu-latest\n+\n+    - name: Cache cargo registry\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/registry\n+        key: ${{ runner.os }}-cargo-registry2-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo index\n+      uses: actions/cache@v3\n+      with:\n+        path: ~/.cargo/git\n+        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}\n+\n+    - name: Cache cargo target dir\n+      uses: actions/cache@v3\n+      with:\n+        path: target\n+        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}\n+\n+    - name: Build\n+      run: |\n+        ./prepare_build.sh\n+        ./build.sh --release --release-sysroot\n+        cargo test\n+        ./clean_all.sh\n+\n+    - name: Prepare dependencies\n+      run: |\n+        git config --global user.email \"user@example.com\"\n+        git config --global user.name \"User\"\n+        ./prepare.sh\n+\n+    # Compile is a separate step, as the actions-rs/cargo action supports error annotations\n+    - name: Compile\n+      uses: actions-rs/cargo@v1.0.3\n+      with:\n+        command: build\n+        args: --release\n+\n+    - name: Run tests\n+      run: |\n+        ./test.sh --release --clean --release-sysroot --build-sysroot --mini-tests --std-tests --test-libcore\n+\n+    - name: Run stdarch tests\n+      run: |\n+        cd build_sysroot/sysroot_src/library/stdarch/\n+        CHANNEL=release TARGET=x86_64-unknown-linux-gnu ../../../../cargo.sh test"}, {"sha": "6102016b43451f7854812f00398933b50e943da2", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=8d0ff6bf0776d421ee2a38c09e6d60a8b361c99e", "patch": "@@ -124,6 +124,8 @@ pub fn compile_codegen_unit<'tcx>(tcx: TyCtxt<'tcx>, cgu_name: Symbol, supports_\n         context.add_command_line_option(\"-fno-semantic-interposition\");\n         // NOTE: Rust relies on LLVM not doing TBAA (https://github.com/rust-lang/unsafe-code-guidelines/issues/292).\n         context.add_command_line_option(\"-fno-strict-aliasing\");\n+        // NOTE: Rust relies on LLVM doing wrapping on overflow.\n+        context.add_command_line_option(\"-fwrapv\");\n \n         if tcx.sess.opts.unstable_opts.function_sections.unwrap_or(tcx.sess.target.function_sections) {\n             context.add_command_line_option(\"-ffunction-sections\");"}]}