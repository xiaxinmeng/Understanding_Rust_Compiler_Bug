{"sha": "3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMjRhYmQyMmZkMjVjODM2ZDhiNGQ3NWZmNDZjODMzZjljMzkzNGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-12T11:52:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-12T11:52:55Z"}, "message": "Auto merge of #86841 - GuillaumeGomez:reexported-macro-2-render, r=Stupremee\n\nFix rendering of reexported macros 2.0 and fix visibility of reexported items\n\nSo, this PR grew a bit out of focus, it does the following things:\n\n* Fixes #86276.\n* Fixes visibility display for reexported items: it now takes the visibility of the \"use\" statement rather than the visibility of the reexported item itself).\n* Fixes the display of reexported items if \"--document-private-items\" option is used. Before, they were simply skipped.\n* Fixes inconsistency on typedef items: they didn't display their visibility contrary to other items.\n\nI added tests to check everything listed above.\n\ncc `@camelid` `@ollie27` (in case one of you want to review?)\n\nr? `@jyn514`", "tree": {"sha": "90d044284d3cb40c99fc752e22f2bde1cfb810ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d044284d3cb40c99fc752e22f2bde1cfb810ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "html_url": "https://github.com/rust-lang/rust/commit/3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97c29bda238cf55ddd7eec772deb823364b1846", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97c29bda238cf55ddd7eec772deb823364b1846", "html_url": "https://github.com/rust-lang/rust/commit/e97c29bda238cf55ddd7eec772deb823364b1846"}, {"sha": "74d71c204f5d7243507d1fd430700516796b1cf8", "url": "https://api.github.com/repos/rust-lang/rust/commits/74d71c204f5d7243507d1fd430700516796b1cf8", "html_url": "https://github.com/rust-lang/rust/commit/74d71c204f5d7243507d1fd430700516796b1cf8"}], "stats": {"total": 288, "additions": 232, "deletions": 56}, "files": [{"sha": "b3b89e6e673a29f1a438e3ce3d6d9ebaeab5e17b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 32, "deletions": 25, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -41,6 +41,7 @@ type Attrs<'hir> = rustc_middle::ty::Attributes<'hir>;\n crate fn try_inline(\n     cx: &mut DocContext<'_>,\n     parent_module: DefId,\n+    import_def_id: Option<DefId>,\n     res: Res,\n     name: Symbol,\n     attrs: Option<Attrs<'_>>,\n@@ -108,7 +109,7 @@ crate fn try_inline(\n             clean::ConstantItem(build_const(cx, did))\n         }\n         Res::Def(DefKind::Macro(kind), did) => {\n-            let mac = build_macro(cx, did, name);\n+            let mac = build_macro(cx, did, name, import_def_id);\n \n             let type_kind = match kind {\n                 MacroKind::Bang => ItemType::Macro,\n@@ -123,14 +124,13 @@ crate fn try_inline(\n \n     let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n     cx.inlined.insert(did.into());\n-    ret.push(clean::Item::from_def_id_and_attrs_and_parts(\n-        did,\n-        Some(name),\n-        kind,\n-        box attrs,\n-        cx,\n-        cfg,\n-    ));\n+    let mut item =\n+        clean::Item::from_def_id_and_attrs_and_parts(did, Some(name), kind, box attrs, cx, cfg);\n+    if let Some(import_def_id) = import_def_id {\n+        // The visibility needs to reflect the one from the reexport and not from the \"source\" DefId.\n+        item.visibility = cx.tcx.visibility(import_def_id).clean(cx);\n+    }\n+    ret.push(item);\n     Some(ret)\n }\n \n@@ -509,7 +509,9 @@ fn build_module(\n                     )),\n                     cfg: None,\n                 });\n-            } else if let Some(i) = try_inline(cx, did, item.res, item.ident.name, None, visited) {\n+            } else if let Some(i) =\n+                try_inline(cx, did, None, item.res, item.ident.name, None, visited)\n+            {\n                 items.extend(i)\n             }\n         }\n@@ -543,21 +545,26 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n     }\n }\n \n-fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind {\n-    let imported_from = cx.tcx.crate_name(did.krate);\n-    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n-        LoadedMacro::MacroDef(def, _) => {\n-            if let ast::ItemKind::MacroDef(ref def) = def.kind {\n-                let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n-                let matchers = tts.chunks(4).map(|arm| &arm[0]);\n-\n-                let source = format!(\n-                    \"macro_rules! {} {{\\n{}}}\",\n-                    name,\n-                    utils::render_macro_arms(matchers, \";\")\n-                );\n-\n-                clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+fn build_macro(\n+    cx: &mut DocContext<'_>,\n+    def_id: DefId,\n+    name: Symbol,\n+    import_def_id: Option<DefId>,\n+) -> clean::ItemKind {\n+    let imported_from = cx.tcx.crate_name(def_id.krate);\n+    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(def_id, cx.sess())) {\n+        LoadedMacro::MacroDef(item_def, _) => {\n+            if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n+                clean::MacroItem(clean::Macro {\n+                    source: utils::display_macro_source(\n+                        cx,\n+                        name,\n+                        def,\n+                        def_id,\n+                        cx.tcx.visibility(import_def_id.unwrap_or(def_id)),\n+                    ),\n+                    imported_from: Some(imported_from),\n+                })\n             } else {\n                 unreachable!()\n             }"}, {"sha": "0ff708d01f5e740c77639a35452414c7971303bf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 29, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -1997,6 +1997,7 @@ fn clean_extern_crate(\n         if let Some(items) = inline::try_inline(\n             cx,\n             cx.tcx.parent_module(krate.hir_id()).to_def_id(),\n+            Some(krate.def_id.to_def_id()),\n             res,\n             name,\n             Some(attrs),\n@@ -2052,7 +2053,8 @@ fn clean_use_statement(\n     // forcefully don't inline if this is not public or if the\n     // #[doc(no_inline)] attribute is present.\n     // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-    let mut denied = !import.vis.node.is_pub()\n+    let mut denied = !(import.vis.node.is_pub()\n+        || (cx.render_options.document_private && import.vis.node.is_pub_restricted()))\n         || pub_underscore\n         || attrs.iter().any(|a| {\n             a.has_name(sym::doc)\n@@ -2088,17 +2090,19 @@ fn clean_use_statement(\n         }\n         if !denied {\n             let mut visited = FxHashSet::default();\n+            let import_def_id = import.def_id.to_def_id();\n \n             if let Some(mut items) = inline::try_inline(\n                 cx,\n                 cx.tcx.parent_module(import.hir_id()).to_def_id(),\n+                Some(import_def_id),\n                 path.res,\n                 name,\n                 Some(attrs),\n                 &mut visited,\n             ) {\n                 items.push(Item::from_def_id_and_parts(\n-                    import.def_id.to_def_id(),\n+                    import_def_id,\n                     None,\n                     ImportItem(Import::new_simple(name, resolve_use_source(cx, path), false)),\n                     cx,\n@@ -2157,37 +2161,15 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n         let name = renamed.unwrap_or(item.ident.name);\n-        let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the macro's matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| &arm[0]);\n-\n-        let source = if item.ast.macro_rules {\n-            format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n-        } else {\n-            let vis = item.vis.clean(cx);\n-            let def_id = item.def_id.to_def_id();\n-\n-            if matchers.len() <= 1 {\n-                format!(\n-                    \"{}macro {}{} {{\\n    ...\\n}}\",\n-                    vis.to_src_with_space(cx.tcx, def_id),\n-                    name,\n-                    matchers.map(render_macro_matcher).collect::<String>(),\n-                )\n-            } else {\n-                format!(\n-                    \"{}macro {} {{\\n{}}}\",\n-                    vis.to_src_with_space(cx.tcx, def_id),\n-                    name,\n-                    render_macro_arms(matchers, \",\"),\n-                )\n-            }\n-        };\n+        let def_id = item.def_id.to_def_id();\n \n         Item::from_hir_id_and_parts(\n             item.hir_id(),\n             Some(name),\n-            MacroItem(Macro { source, imported_from: None }),\n+            MacroItem(Macro {\n+                source: display_macro_source(cx, name, &item.ast, def_id, &item.vis),\n+                imported_from: None,\n+            }),\n             cx,\n         )\n     }"}, {"sha": "7ae602c8033f8f65530936397aca0a6553b3d557", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -3,10 +3,12 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n     Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n+use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -577,3 +579,37 @@ pub(super) fn render_macro_arms<'a>(\n pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n     rustc_ast_pretty::pprust::tt_to_string(matcher)\n }\n+\n+pub(super) fn display_macro_source(\n+    cx: &mut DocContext<'_>,\n+    name: Symbol,\n+    def: &ast::MacroDef,\n+    def_id: DefId,\n+    vis: impl Clean<Visibility>,\n+) -> String {\n+    let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n+    // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n+    let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+\n+    if def.macro_rules {\n+        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n+    } else {\n+        let vis = vis.clean(cx);\n+\n+        if matchers.len() <= 1 {\n+            format!(\n+                \"{}macro {}{} {{\\n    ...\\n}}\",\n+                vis.to_src_with_space(cx.tcx, def_id),\n+                name,\n+                matchers.map(render_macro_matcher).collect::<String>(),\n+            )\n+        } else {\n+            format!(\n+                \"{}macro {} {{\\n{}}}\",\n+                vis.to_src_with_space(cx.tcx, def_id),\n+                name,\n+                render_macro_arms(matchers, \",\"),\n+            )\n+        }\n+    }\n+}"}, {"sha": "f7073a8751fa18723622c06d15c6e26a29adae86", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -133,7 +133,7 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n         clean::StructItem(ref s) => item_struct(buf, cx, item, s),\n         clean::UnionItem(ref s) => item_union(buf, cx, item, s),\n         clean::EnumItem(ref e) => item_enum(buf, cx, item, e),\n-        clean::TypedefItem(ref t, _) => item_typedef(buf, cx, item, t),\n+        clean::TypedefItem(ref t, is_associated) => item_typedef(buf, cx, item, t, is_associated),\n         clean::MacroItem(ref m) => item_macro(buf, cx, item, m),\n         clean::ProcMacroItem(ref m) => item_proc_macro(buf, cx, item, m),\n         clean::PrimitiveItem(_) => item_primitive(buf, cx, item),\n@@ -837,9 +837,18 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n-fn item_typedef(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Typedef) {\n+fn item_typedef(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    it: &clean::Item,\n+    t: &clean::Typedef,\n+    is_associated: bool,\n+) {\n     w.write_str(\"<pre class=\\\"rust typedef\\\">\");\n     render_attributes_in_pre(w, it, \"\");\n+    if !is_associated {\n+        write!(w, \"{}\", it.visibility.print_with_space(it.def_id, cx));\n+    }\n     write!(\n         w,\n         \"type {}{}{where_clause} = {type_};</pre>\","}, {"sha": "e04b786a864a1b63ed8ceda82dfbbcd9ecf6ef2f", "filename": "src/test/rustdoc/auxiliary/reexports.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Freexports.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -0,0 +1,42 @@\n+#![feature(decl_macro)]\n+\n+pub macro addr_of($place:expr) {\n+    &raw const $place\n+}\n+\n+pub macro addr_of_self($place:expr) {\n+    &raw const $place\n+}\n+\n+pub macro addr_of_crate($place:expr) {\n+    &raw const $place\n+}\n+\n+pub struct Foo;\n+pub struct FooSelf;\n+pub struct FooCrate;\n+\n+pub enum Bar { Foo, }\n+pub enum BarSelf { Foo, }\n+pub enum BarCrate { Foo, }\n+\n+pub fn foo() {}\n+pub fn foo_self() {}\n+pub fn foo_crate() {}\n+\n+pub type Type = i32;\n+pub type TypeSelf = i32;\n+pub type TypeCrate = i32;\n+\n+pub union Union {\n+    a: i8,\n+    b: i8,\n+}\n+pub union UnionSelf {\n+    a: i8,\n+    b: i8,\n+}\n+pub union UnionCrate {\n+    a: i8,\n+    b: i8,\n+}"}, {"sha": "ff7424033aa49c46135a8875c98ec9d8df75badf", "filename": "src/test/rustdoc/reexports-priv.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Freexports-priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports-priv.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -0,0 +1,53 @@\n+// aux-build: reexports.rs\n+// compile-flags: --document-private-items\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate reexports;\n+\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+pub use reexports::addr_of;\n+// @has 'foo/macro.addr_of_crate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_crate($place : expr) {'\n+pub(crate) use reexports::addr_of_crate;\n+// @has 'foo/macro.addr_of_self.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) macro addr_of_self($place : expr) {'\n+pub(self) use reexports::addr_of_self;\n+\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+pub use reexports::Foo;\n+// @has 'foo/struct.FooCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooCrate;'\n+pub(crate) use reexports::FooCrate;\n+// @has 'foo/struct.FooSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) struct FooSelf;'\n+pub(self) use reexports::FooSelf;\n+\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+pub use reexports::Bar;\n+// @has 'foo/enum.BarCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarCrate {'\n+pub(crate) use reexports::BarCrate;\n+// @has 'foo/enum.BarSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) enum BarSelf {'\n+pub(self) use reexports::BarSelf;\n+\n+// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+pub use reexports::foo;\n+// @has 'foo/fn.foo_crate.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_crate()'\n+pub(crate) use reexports::foo_crate;\n+// @has 'foo/fn.foo_self.html' '//*[@class=\"rust fn\"]' 'pub(crate) fn foo_self()'\n+pub(self) use reexports::foo_self;\n+\n+// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+pub use reexports::Type;\n+// @has 'foo/type.TypeCrate.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeCrate ='\n+pub(crate) use reexports::TypeCrate;\n+// @has 'foo/type.TypeSelf.html' '//*[@class=\"rust typedef\"]' 'pub(crate) type TypeSelf ='\n+pub(self) use reexports::TypeSelf;\n+\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+pub use reexports::Union;\n+// @has 'foo/union.UnionCrate.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionCrate {'\n+pub(crate) use reexports::UnionCrate;\n+// @has 'foo/union.UnionSelf.html' '//*[@class=\"docblock type-decl\"]' 'pub(crate) union UnionSelf {'\n+pub(self) use reexports::UnionSelf;\n+\n+pub mod foo {\n+    // @!has 'foo/foo/union.Union.html'\n+    use crate::reexports::Union;\n+}"}, {"sha": "ab4c5bc74390784b2b32d9071a20e0d3293506fa", "filename": "src/test/rustdoc/reexports.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a24abd22fd25c836d8b4d75ff46c833f9c3934c/src%2Ftest%2Frustdoc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Freexports.rs?ref=3a24abd22fd25c836d8b4d75ff46c833f9c3934c", "patch": "@@ -0,0 +1,47 @@\n+// aux-build: reexports.rs\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate reexports;\n+\n+// @has 'foo/macro.addr_of.html' '//*[@class=\"docblock type-decl\"]' 'pub macro addr_of($place : expr) {'\n+pub use reexports::addr_of;\n+// @!has 'foo/macro.addr_of_crate.html'\n+pub(crate) use reexports::addr_of_crate;\n+// @!has 'foo/macro.addr_of_self.html'\n+pub(self) use reexports::addr_of_self;\n+\n+// @has 'foo/struct.Foo.html' '//*[@class=\"docblock type-decl\"]' 'pub struct Foo;'\n+pub use reexports::Foo;\n+// @!has 'foo/struct.FooCrate.html'\n+pub(crate) use reexports::FooCrate;\n+// @!has 'foo/struct.FooSelf.html'\n+pub(self) use reexports::FooSelf;\n+\n+// @has 'foo/enum.Bar.html' '//*[@class=\"docblock type-decl\"]' 'pub enum Bar {'\n+pub use reexports::Bar;\n+// @!has 'foo/enum.BarCrate.html'\n+pub(crate) use reexports::BarCrate;\n+// @!has 'foo/enum.BarSelf.html'\n+pub(self) use reexports::BarSelf;\n+\n+// @has 'foo/fn.foo.html' '//*[@class=\"rust fn\"]' 'pub fn foo()'\n+pub use reexports::foo;\n+// @!has 'foo/fn.foo_crate.html'\n+pub(crate) use reexports::foo_crate;\n+// @!has 'foo/fn.foo_self.html'\n+pub(self) use reexports::foo_self;\n+\n+// @has 'foo/type.Type.html' '//*[@class=\"rust typedef\"]' 'pub type Type ='\n+pub use reexports::Type;\n+// @!has 'foo/type.TypeCrate.html'\n+pub(crate) use reexports::TypeCrate;\n+// @!has 'foo/type.TypeSelf.html'\n+pub(self) use reexports::TypeSelf;\n+\n+// @has 'foo/union.Union.html' '//*[@class=\"docblock type-decl\"]' 'pub union Union {'\n+pub use reexports::Union;\n+// @!has 'foo/union.UnionCrate.html'\n+pub(crate) use reexports::UnionCrate;\n+// @!has 'foo/union.UnionSelf.html'\n+pub(self) use reexports::UnionSelf;"}]}