{"sha": "e2843b792a605f8166515b9f8b9e47794101980d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODQzYjc5MmE2MDVmODE2NjUxNWI5ZjhiOWU0Nzc5NDEwMTk4MGQ=", "commit": {"author": {"name": "TankhouseAle", "email": "51239665+TankhouseAle@users.noreply.github.com", "date": "2019-06-03T18:40:08Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-03T18:40:08Z"}, "message": "Re-add type_name.rs changes", "tree": {"sha": "aac55391a4f988c38f7ab8220a4f31c282b72717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aac55391a4f988c38f7ab8220a4f31c282b72717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2843b792a605f8166515b9f8b9e47794101980d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc9WmICRBK7hj4Ov3rIwAAdHIIADF94KqZwyLGlhL55d2LGfO3\np08L/l1+ClzBR2EueN9ag19tJEjQGvzoy9ktE67g6xEb28Oj2rFcgYLrHH5AsV9H\nFX6lsc2LADsXjqO4hkRltSwJSX0sqIhCn2VjgEPjdZPD4vKG7HnzyAsQvOd8qZnB\nsCm+XYhcknZhbyDDiiEMaGxQ1QjQXTisqFvvpiETEFeEoG+5+M4nezrCkpYKA+RR\niszHhfGtczPMUTATTU5uwlNX7AlnKscP8E7ERz89gsF6pQuJ7hD/f9PoDaC3gUiA\nxG8Swj03tL6B9zViPyeDOvXsrGs6tHaTK627lR322q7EKiLh4w0rnVL6lYFW9CQ=\n=fhZm\n-----END PGP SIGNATURE-----\n", "payload": "tree aac55391a4f988c38f7ab8220a4f31c282b72717\nparent 99f66f4045d405e306b6459b6807372a88279875\nauthor TankhouseAle <51239665+TankhouseAle@users.noreply.github.com> 1559587208 -0400\ncommitter GitHub <noreply@github.com> 1559587208 -0400\n\nRe-add type_name.rs changes"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2843b792a605f8166515b9f8b9e47794101980d", "html_url": "https://github.com/rust-lang/rust/commit/e2843b792a605f8166515b9f8b9e47794101980d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2843b792a605f8166515b9f8b9e47794101980d/comments", "author": {"login": "TankhouseAle", "id": 51239665, "node_id": "MDQ6VXNlcjUxMjM5NjY1", "avatar_url": "https://avatars.githubusercontent.com/u/51239665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TankhouseAle", "html_url": "https://github.com/TankhouseAle", "followers_url": "https://api.github.com/users/TankhouseAle/followers", "following_url": "https://api.github.com/users/TankhouseAle/following{/other_user}", "gists_url": "https://api.github.com/users/TankhouseAle/gists{/gist_id}", "starred_url": "https://api.github.com/users/TankhouseAle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TankhouseAle/subscriptions", "organizations_url": "https://api.github.com/users/TankhouseAle/orgs", "repos_url": "https://api.github.com/users/TankhouseAle/repos", "events_url": "https://api.github.com/users/TankhouseAle/events{/privacy}", "received_events_url": "https://api.github.com/users/TankhouseAle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99f66f4045d405e306b6459b6807372a88279875", "url": "https://api.github.com/repos/rust-lang/rust/commits/99f66f4045d405e306b6459b6807372a88279875", "html_url": "https://github.com/rust-lang/rust/commit/99f66f4045d405e306b6459b6807372a88279875"}], "stats": {"total": 17, "additions": 12, "deletions": 5}, "files": [{"sha": "1270b35ebb9555a97a36a4c328740a25f892d863", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e2843b792a605f8166515b9f8b9e47794101980d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2843b792a605f8166515b9f8b9e47794101980d/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=e2843b792a605f8166515b9f8b9e47794101980d", "patch": "@@ -213,16 +213,23 @@ impl Write for AbsolutePathPrinter<'_, '_> {\n /// Produces an absolute path representation of the given type. See also the documentation on\n /// `std::any::type_name`\n pub fn type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, ty: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n-    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n-    let len = path.len();\n-    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n-    let alloc = tcx.intern_const_alloc(alloc);\n+    let alloc = alloc_type_name(tcx, ty);\n     tcx.mk_const(ty::Const {\n         val: ConstValue::Slice {\n             data: alloc,\n             start: 0,\n-            end: len,\n+            end: alloc.bytes.len(),\n         },\n         ty: tcx.mk_static_str(),\n     })\n }\n+\n+/// Directly returns an `Allocation` containing an absolute path representation of the given type.\n+pub(super) fn alloc_type_name<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    ty: Ty<'tcx>\n+) -> &'tcx Allocation {\n+    let path = AbsolutePathPrinter { tcx, path: String::new() }.print_type(ty).unwrap().path;\n+    let alloc = Allocation::from_byte_aligned_bytes(path.into_bytes());\n+    tcx.intern_const_alloc(alloc)\n+}"}]}