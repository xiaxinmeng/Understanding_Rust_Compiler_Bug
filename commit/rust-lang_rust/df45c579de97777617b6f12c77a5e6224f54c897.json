{"sha": "df45c579de97777617b6f12c77a5e6224f54c897", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDVjNTc5ZGU5Nzc3NzYxN2I2ZjEyYzc3YTVlNjIyNGY1NGM4OTc=", "commit": {"author": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2020-08-27T15:49:18Z"}, "committer": {"name": "katelyn a. martin", "email": "me+rustlang@katelyn.world", "date": "2021-03-09T19:38:29Z"}, "message": "rustc_target: add \"unwind\" payloads to `Abi`\n\n ### Overview\n\n    This commit begins the implementation work for RFC 2945. For more\n    information, see the rendered RFC [1] and tracking issue [2].\n\n    A boolean `unwind` payload is added to the `C`, `System`, `Stdcall`,\n    and `Thiscall` variants, marking whether unwinding across FFI\n    boundaries is acceptable. The cases where each of these variants'\n    `unwind` member is true correspond with the `C-unwind`,\n    `system-unwind`, `stdcall-unwind`, and `thiscall-unwind` ABI strings\n    introduced in RFC 2945 [3].\n\n ### Feature Gate and Unstable Book\n\n    This commit adds a `c_unwind` feature gate for the new ABI strings.\n    Tests for this feature gate are included in `src/test/ui/c-unwind/`,\n    which ensure that this feature gate works correctly for each of the\n    new ABIs.\n\n    A new language features entry in the unstable book is added as well.\n\n ### Further Work To Be Done\n\n    This commit does not proceed to implement the new unwinding ABIs,\n    and is intentionally scoped specifically to *defining* the ABIs and\n    their feature flag.\n\n ### One Note on Test Churn\n\n    This will lead to some test churn, in re-blessing hash tests, as the\n    deleted comment in `src/librustc_target/spec/abi.rs` mentioned,\n    because we can no longer guarantee the ordering of the `Abi`\n    variants.\n\n    While this is a downside, this decision was made bearing in mind\n    that RFC 2945 states the following, in the \"Other `unwind` Strings\"\n    section [3]:\n\n    >  More unwind variants of existing ABI strings may be introduced,\n    >  with the same semantics, without an additional RFC.\n\n    Adding a new variant for each of these cases, rather than specifying\n    a payload for a given ABI, would quickly become untenable, and make\n    working with the `Abi` enum prone to mistakes.\n\n    This approach encodes the unwinding information *into* a given ABI,\n    to account for the future possibility of other `-unwind` ABI\n    strings.\n\n ### Ignore Directives\n\n    `ignore-*` directives are used in two of our `*-unwind` ABI test\n    cases.\n\n    Specifically, the `stdcall-unwind` and `thiscall-unwind` test cases\n    ignore architectures that do not support `stdcall` and\n    `thiscall`, respectively.\n\n    These directives are cribbed from\n    `src/test/ui/c-variadic/variadic-ffi-1.rs` for `stdcall`, and\n    `src/test/ui/extern/extern-thiscall.rs` for `thiscall`.\n\n    This would otherwise fail on some targets, see:\n    https://github.com/rust-lang-ci/rust/commit/fcf697f90206e9c87b39d494f94ab35d976bfc60\n\n ### Footnotes\n\n[1]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md\n[2]: https://github.com/rust-lang/rust/issues/74990\n[3]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md#other-unwind-abi-strings", "tree": {"sha": "7b332db2273f749da04b6be7a94229036748c6a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b332db2273f749da04b6be7a94229036748c6a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df45c579de97777617b6f12c77a5e6224f54c897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df45c579de97777617b6f12c77a5e6224f54c897", "html_url": "https://github.com/rust-lang/rust/commit/df45c579de97777617b6f12c77a5e6224f54c897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df45c579de97777617b6f12c77a5e6224f54c897/comments", "author": null, "committer": null, "parents": [{"sha": "3a5d45f68cadc8fff4fbb557780f92b403b19c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d45f68cadc8fff4fbb557780f92b403b19c19", "html_url": "https://github.com/rust-lang/rust/commit/3a5d45f68cadc8fff4fbb557780f92b403b19c19"}], "stats": {"total": 329, "additions": 277, "deletions": 52}, "files": [{"sha": "2267f09ec1f11e3e21ef8564657b5c7f99da704c", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -322,10 +322,10 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             },\n             ItemKind::ForeignMod(ref fm) => {\n                 if fm.abi.is_none() {\n-                    self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n+                    self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n                 }\n                 hir::ItemKind::ForeignMod {\n-                    abi: fm.abi.map_or(abi::Abi::C, |abi| self.lower_abi(abi)),\n+                    abi: fm.abi.map_or(abi::Abi::C { unwind: false }, |abi| self.lower_abi(abi)),\n                     items: self\n                         .arena\n                         .alloc_from_iter(fm.items.iter().map(|x| self.lower_foreign_item_ref(x))),\n@@ -1322,8 +1322,8 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         match ext {\n             Extern::None => abi::Abi::Rust,\n             Extern::Implicit => {\n-                self.maybe_lint_missing_abi(span, id, abi::Abi::C);\n-                abi::Abi::C\n+                self.maybe_lint_missing_abi(span, id, abi::Abi::C { unwind: false });\n+                abi::Abi::C { unwind: false }\n             }\n             Extern::Explicit(abi) => self.lower_abi(abi),\n         }"}, {"sha": "8a17ac90a023d1f962fbc2bbd9857ff563358c77", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -164,6 +164,38 @@ impl<'a> PostExpansionVisitor<'a> {\n                     \"C-cmse-nonsecure-call ABI is experimental and subject to change\"\n                 );\n             }\n+            \"C-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"C-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"stdcall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"stdcall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"system-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"system-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n+            \"thiscall-unwind\" => {\n+                gate_feature_post!(\n+                    &self,\n+                    c_unwind,\n+                    span,\n+                    \"thiscall-unwind ABI is experimental and subject to change\"\n+                );\n+            }\n             abi => self\n                 .sess\n                 .parse_sess"}, {"sha": "b158d73f3a1a89cbcc566dbfd2f2d75f7569792b", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -476,8 +476,11 @@ pub(crate) fn codegen_terminator_call<'tcx>(\n \n     // FIXME find a cleaner way to support varargs\n     if fn_sig.c_variadic {\n-        if fn_sig.abi != Abi::C {\n-            fx.tcx.sess.span_fatal(span, &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi));\n+        if !matches!(fn_sig.abi, Abi::C { .. }) {\n+            fx.tcx.sess.span_fatal(\n+                span,\n+                &format!(\"Variadic call for non-C abi {:?}\", fn_sig.abi),\n+            );\n         }\n         let sig_ref = fx.bcx.func.dfg.call_signature(call_inst).unwrap();\n         let abi_params = call_args"}, {"sha": "95ae6a1ac9a26dfc726e898dfa8c00f6406640ee", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -644,6 +644,9 @@ declare_features! (\n     /// Allows associated types in inherent impls.\n     (active, inherent_associated_types, \"1.52.0\", Some(8995), None),\n \n+    /// Allows `extern \"C-unwind\" fn` to enable unwinding across ABI boundaries.\n+    (active, c_unwind, \"1.52.0\", Some(74990), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "2f5380861c4956f45b688928a32937ab4bc4e94f", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -2654,14 +2654,14 @@ where\n             RustIntrinsic | PlatformIntrinsic | Rust | RustCall => Conv::Rust,\n \n             // It's the ABI's job to select this, not ours.\n-            System => bug!(\"system abi should be selected elsewhere\"),\n+            System { .. } => bug!(\"system abi should be selected elsewhere\"),\n             EfiApi => bug!(\"eficall abi should be selected elsewhere\"),\n \n-            Stdcall => Conv::X86Stdcall,\n+            Stdcall { .. } => Conv::X86Stdcall,\n             Fastcall => Conv::X86Fastcall,\n             Vectorcall => Conv::X86VectorCall,\n-            Thiscall => Conv::X86ThisCall,\n-            C => Conv::C,\n+            Thiscall { .. } => Conv::X86ThisCall,\n+            C { .. } => Conv::C,\n             Unadjusted => Conv::C,\n             Win64 => Conv::X86_64Win64,\n             SysV64 => Conv::X86_64SysV,"}, {"sha": "4aa1360d535391830c24fa6e0aeb820a6ad63048", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -248,9 +248,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             };\n             if normalize_abi(caller_abi) != normalize_abi(callee_abi) {\n                 throw_ub_format!(\n-                    \"calling a function with ABI {:?} using caller ABI {:?}\",\n-                    callee_abi,\n-                    caller_abi\n+                    \"calling a function with ABI {} using caller ABI {}\",\n+                    callee_abi.name(),\n+                    caller_abi.name()\n                 )\n             }\n         }"}, {"sha": "90c5fd422cd518839d1aa79224975536df8986cd", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -330,6 +330,7 @@ symbols! {\n         bridge,\n         bswap,\n         c_str,\n+        c_unwind,\n         c_variadic,\n         call,\n         call_mut,"}, {"sha": "12c0a147990fa35191582f2a33f7527b63143daa", "filename": "compiler/rustc_symbol_mangling/src/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Fv0.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -440,7 +440,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n                     }\n                     match sig.abi {\n                         Abi::Rust => {}\n-                        Abi::C => cx.push(\"KC\"),\n+                        Abi::C { unwind: false } => cx.push(\"KC\"),\n                         abi => {\n                             cx.push(\"K\");\n                             let name = abi.name();"}, {"sha": "f7f9c30d3b7a640be2441fbae187e9fd6c0a54cb", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 51, "deletions": 14, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -8,24 +8,21 @@ mod tests;\n #[derive(PartialEq, Eq, PartialOrd, Ord, Hash, Clone, Copy, Debug)]\n #[derive(HashStable_Generic, Encodable, Decodable)]\n pub enum Abi {\n-    // N.B., this ordering MUST match the AbiDatas array below.\n-    // (This is ensured by the test indices_are_correct().)\n-\n     // Multiplatform / generic ABIs\n     //\n     // These ABIs come first because every time we add a new ABI, we\n     // have to re-bless all the hashing tests. These are used in many\n     // places, so giving them stable values reduces test churn. The\n     // specific values are meaningless.\n-    Rust = 0,\n-    C = 1,\n+    Rust,\n+    C { unwind: bool },\n \n     // Single platform ABIs\n     Cdecl,\n-    Stdcall,\n+    Stdcall { unwind: bool },\n     Fastcall,\n     Vectorcall,\n-    Thiscall,\n+    Thiscall { unwind: bool },\n     Aapcs,\n     Win64,\n     SysV64,\n@@ -39,7 +36,7 @@ pub enum Abi {\n     CCmseNonSecureCall,\n \n     // Multiplatform / generic ABIs\n-    System,\n+    System { unwind: bool },\n     RustIntrinsic,\n     RustCall,\n     PlatformIntrinsic,\n@@ -61,13 +58,16 @@ pub struct AbiData {\n const AbiDatas: &[AbiData] = &[\n     // Cross-platform ABIs\n     AbiData { abi: Abi::Rust, name: \"Rust\", generic: true },\n-    AbiData { abi: Abi::C, name: \"C\", generic: true },\n+    AbiData { abi: Abi::C { unwind: false }, name: \"C\", generic: true },\n+    AbiData { abi: Abi::C { unwind: true }, name: \"C-unwind\", generic: true },\n     // Platform-specific ABIs\n     AbiData { abi: Abi::Cdecl, name: \"cdecl\", generic: false },\n-    AbiData { abi: Abi::Stdcall, name: \"stdcall\", generic: false },\n+    AbiData { abi: Abi::Stdcall { unwind: false }, name: \"stdcall\", generic: false },\n+    AbiData { abi: Abi::Stdcall { unwind: true }, name: \"stdcall-unwind\", generic: false },\n     AbiData { abi: Abi::Fastcall, name: \"fastcall\", generic: false },\n     AbiData { abi: Abi::Vectorcall, name: \"vectorcall\", generic: false },\n-    AbiData { abi: Abi::Thiscall, name: \"thiscall\", generic: false },\n+    AbiData { abi: Abi::Thiscall { unwind: false }, name: \"thiscall\", generic: false },\n+    AbiData { abi: Abi::Thiscall { unwind: true }, name: \"thiscall-unwind\", generic: false },\n     AbiData { abi: Abi::Aapcs, name: \"aapcs\", generic: false },\n     AbiData { abi: Abi::Win64, name: \"win64\", generic: false },\n     AbiData { abi: Abi::SysV64, name: \"sysv64\", generic: false },\n@@ -84,7 +84,8 @@ const AbiDatas: &[AbiData] = &[\n     },\n     AbiData { abi: Abi::CCmseNonSecureCall, name: \"C-cmse-nonsecure-call\", generic: false },\n     // Cross-platform ABIs\n-    AbiData { abi: Abi::System, name: \"system\", generic: true },\n+    AbiData { abi: Abi::System { unwind: false }, name: \"system\", generic: true },\n+    AbiData { abi: Abi::System { unwind: true }, name: \"system-unwind\", generic: true },\n     AbiData { abi: Abi::RustIntrinsic, name: \"rust-intrinsic\", generic: true },\n     AbiData { abi: Abi::RustCall, name: \"rust-call\", generic: true },\n     AbiData { abi: Abi::PlatformIntrinsic, name: \"platform-intrinsic\", generic: true },\n@@ -103,7 +104,41 @@ pub fn all_names() -> Vec<&'static str> {\n impl Abi {\n     #[inline]\n     pub fn index(self) -> usize {\n-        self as usize\n+        // N.B., this ordering MUST match the AbiDatas array above.\n+        // (This is ensured by the test indices_are_correct().)\n+        use Abi::*;\n+        match self {\n+            // Cross-platform ABIs\n+            Rust => 0,\n+            C { unwind: false } => 1,\n+            C { unwind: true } => 2,\n+            // Platform-specific ABIs\n+            Cdecl => 3,\n+            Stdcall { unwind: false } => 4,\n+            Stdcall { unwind: true } => 5,\n+            Fastcall => 6,\n+            Vectorcall => 7,\n+            Thiscall { unwind: false } => 8,\n+            Thiscall { unwind: true } => 9,\n+            Aapcs => 10,\n+            Win64 => 11,\n+            SysV64 => 12,\n+            PtxKernel => 13,\n+            Msp430Interrupt => 14,\n+            X86Interrupt => 15,\n+            AmdGpuKernel => 16,\n+            EfiApi => 17,\n+            AvrInterrupt => 18,\n+            AvrNonBlockingInterrupt => 19,\n+            CCmseNonSecureCall => 20,\n+            // Cross-platform ABIs\n+            System { unwind: false } => 21,\n+            System { unwind: true } => 22,\n+            RustIntrinsic => 23,\n+            RustCall => 24,\n+            PlatformIntrinsic => 25,\n+            Unadjusted => 26,\n+        }\n     }\n \n     #[inline]\n@@ -122,6 +157,8 @@ impl Abi {\n \n impl fmt::Display for Abi {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"\\\"{}\\\"\", self.name())\n+        match self {\n+            abi => write!(f, \"\\\"{}\\\"\", abi.name()),\n+        }\n     }\n }"}, {"sha": "01f573313c97fb85401ae0982077ac0fa5dc8743", "filename": "compiler/rustc_target/src/spec/arm_base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farm_base.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -2,5 +2,14 @@ use crate::spec::abi::Abi;\n \n // All the calling conventions trigger an assertion(Unsupported calling convention) in llvm on arm\n pub fn unsupported_abis() -> Vec<Abi> {\n-    vec![Abi::Stdcall, Abi::Fastcall, Abi::Vectorcall, Abi::Thiscall, Abi::Win64, Abi::SysV64]\n+    vec![\n+        Abi::Stdcall { unwind: false },\n+        Abi::Stdcall { unwind: true },\n+        Abi::Fastcall,\n+        Abi::Vectorcall,\n+        Abi::Thiscall { unwind: false },\n+        Abi::Thiscall { unwind: true },\n+        Abi::Win64,\n+        Abi::SysV64,\n+    ]\n }"}, {"sha": "110c8dd80ea77e57f2632cd5a18f3cb08d96a57b", "filename": "compiler/rustc_target/src/spec/mipsel_unknown_none.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_unknown_none.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -23,10 +23,12 @@ pub fn target() -> Target {\n             panic_strategy: PanicStrategy::Abort,\n             relocation_model: RelocModel::Static,\n             unsupported_abis: vec![\n-                Abi::Stdcall,\n+                Abi::Stdcall { unwind: false },\n+                Abi::Stdcall { unwind: true },\n                 Abi::Fastcall,\n                 Abi::Vectorcall,\n-                Abi::Thiscall,\n+                Abi::Thiscall { unwind: false },\n+                Abi::Thiscall { unwind: true },\n                 Abi::Win64,\n                 Abi::SysV64,\n             ],"}, {"sha": "85e7c74472f1626f7ceac56e8bc795d8469f944c", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -1283,24 +1283,31 @@ impl Target {\n     /// Given a function ABI, turn it into the correct ABI for this target.\n     pub fn adjust_abi(&self, abi: Abi) -> Abi {\n         match abi {\n-            Abi::System => {\n+            Abi::System { unwind } => {\n                 if self.is_like_windows && self.arch == \"x86\" {\n-                    Abi::Stdcall\n+                    Abi::Stdcall { unwind }\n                 } else {\n-                    Abi::C\n+                    Abi::C { unwind }\n                 }\n             }\n             // These ABI kinds are ignored on non-x86 Windows targets.\n             // See https://docs.microsoft.com/en-us/cpp/cpp/argument-passing-and-naming-conventions\n             // and the individual pages for __stdcall et al.\n-            Abi::Stdcall | Abi::Fastcall | Abi::Vectorcall | Abi::Thiscall => {\n-                if self.is_like_windows && self.arch != \"x86\" { Abi::C } else { abi }\n+            Abi::Stdcall { unwind } | Abi::Thiscall { unwind } => {\n+                if self.is_like_windows && self.arch != \"x86\" { Abi::C { unwind } } else { abi }\n+            }\n+            Abi::Fastcall | Abi::Vectorcall => {\n+                if self.is_like_windows && self.arch != \"x86\" {\n+                    Abi::C { unwind: false }\n+                } else {\n+                    abi\n+                }\n             }\n             Abi::EfiApi => {\n                 if self.arch == \"x86_64\" {\n                     Abi::Win64\n                 } else {\n-                    Abi::C\n+                    Abi::C { unwind: false }\n                 }\n             }\n             abi => abi,"}, {"sha": "15d8e4843f976167d271a301c892ad1c7f023359", "filename": "compiler/rustc_target/src/spec/nvptx64_nvidia_cuda.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fnvptx64_nvidia_cuda.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -49,10 +49,12 @@ pub fn target() -> Target {\n             // create the tests for this.\n             unsupported_abis: vec![\n                 Abi::Cdecl,\n-                Abi::Stdcall,\n+                Abi::Stdcall { unwind: false },\n+                Abi::Stdcall { unwind: true },\n                 Abi::Fastcall,\n                 Abi::Vectorcall,\n-                Abi::Thiscall,\n+                Abi::Thiscall { unwind: false },\n+                Abi::Thiscall { unwind: true },\n                 Abi::Aapcs,\n                 Abi::Win64,\n                 Abi::SysV64,"}, {"sha": "5bcbb2e621bd005ad33c768f857296b04b79cf70", "filename": "compiler/rustc_target/src/spec/riscv_base.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Friscv_base.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -5,10 +5,12 @@ use crate::spec::abi::Abi;\n pub fn unsupported_abis() -> Vec<Abi> {\n     vec![\n         Abi::Cdecl,\n-        Abi::Stdcall,\n+        Abi::Stdcall { unwind: false },\n+        Abi::Stdcall { unwind: true },\n         Abi::Fastcall,\n         Abi::Vectorcall,\n-        Abi::Thiscall,\n+        Abi::Thiscall { unwind: false },\n+        Abi::Thiscall { unwind: true },\n         Abi::Aapcs,\n         Abi::Win64,\n         Abi::SysV64,"}, {"sha": "a175da3270638ddba6a16d75de2f7e17703798e7", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -2666,7 +2666,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n         } else if tcx.sess.check_name(attr, sym::used) {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if tcx.sess.check_name(attr, sym::cmse_nonsecure_entry) {\n-            if tcx.fn_sig(id).abi() != abi::Abi::C {\n+            if !matches!(tcx.fn_sig(id).abi(), abi::Abi::C { .. }) {\n                 struct_span_err!(\n                     tcx.sess,\n                     attr.span,"}, {"sha": "fb864c5b4a7d7c14f97dfa7f2fe319fea952d92c", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -118,14 +118,19 @@ use astconv::AstConv;\n use bounds::Bounds;\n \n fn require_c_abi_if_c_variadic(tcx: TyCtxt<'_>, decl: &hir::FnDecl<'_>, abi: Abi, span: Span) {\n-    if decl.c_variadic && !(abi == Abi::C || abi == Abi::Cdecl) {\n-        let mut err = struct_span_err!(\n-            tcx.sess,\n-            span,\n-            E0045,\n-            \"C-variadic function must have C or cdecl calling convention\"\n-        );\n-        err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+    match (decl.c_variadic, abi) {\n+        // The function has the correct calling convention, or isn't a \"C-variadic\" function.\n+        (false, _) | (true, Abi::C { .. }) | (true, Abi::Cdecl) => {}\n+        // The function is a \"C-variadic\" function with an incorrect calling convention.\n+        (true, _) => {\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                span,\n+                E0045,\n+                \"C-variadic function must have C or cdecl calling convention\"\n+            );\n+            err.span_label(span, \"C-variadics require C or cdecl calling convention\").emit();\n+        }\n     }\n }\n "}, {"sha": "c1705d59acc2120e7fccf5411025f61c735b6ece", "filename": "src/doc/unstable-book/src/language-features/c-unwind.md", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fc-unwind.md?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,14 @@\n+# `c_unwind`\n+\n+The tracking issue for this feature is: [#74990]\n+\n+[#74990]: https://github.com/rust-lang/rust/issues/74990\n+\n+------------------------\n+\n+Introduces a new ABI string, \"C-unwind\", to enable unwinding from other\n+languages (such as C++) into Rust frames and from Rust into other languages.\n+\n+See [RFC 2945] for more information.\n+\n+[RFC 2945]: https://github.com/rust-lang/rfcs/blob/master/text/2945-c-unwind-abi.md"}, {"sha": "b7ba4fa46d92b72012b3e192ef86714e1294cb4d", "filename": "src/test/ui/codemap_tests/unicode.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Funicode.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `\u8def\u6feb\u72fc\u00e1\u0301\u0301`\n LL | extern \"\u8def\u6feb\u72fc\u00e1\u0301\u0301\" fn foo() {}\n    |        ^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "85e2b77d867b9f87bf2f95c60e5ac194d1bc7a46", "filename": "src/test/ui/parser/issue-8537.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-8537.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -4,7 +4,7 @@ error[E0703]: invalid ABI: found `invalid-ab_isize`\n LL |   \"invalid-ab_isize\"\n    |   ^^^^^^^^^^^^^^^^^^ invalid ABI\n    |\n-   = help: valid ABIs: Rust, C, cdecl, stdcall, fastcall, vectorcall, thiscall, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n+   = help: valid ABIs: Rust, C, C-unwind, cdecl, stdcall, stdcall-unwind, fastcall, vectorcall, thiscall, thiscall-unwind, aapcs, win64, sysv64, ptx-kernel, msp430-interrupt, x86-interrupt, amdgpu-kernel, efiapi, avr-interrupt, avr-non-blocking-interrupt, C-cmse-nonsecure-call, system, system-unwind, rust-intrinsic, rust-call, platform-intrinsic, unadjusted\n \n error: aborting due to previous error\n "}, {"sha": "d3f74c4a4b7b07b7dbf91f847b2e666fed55e1d8", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -74,3 +74,7 @@ fn main() {\n         }\n     };\n }\n+\n+// FIXME(katie): The 32-bit symbol hash probably needs updating as well, but I'm slightly unsure\n+// about how to do that. This comment is here so that we don't break the test due to error messages\n+// including incorrect line numbers."}, {"sha": "6ff5dbda2d5604ff9e47b887dd44f023267414c5", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind-enabled.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind-enabled.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,12 @@\n+// Test that the \"C-unwind\" ABI is feature-gated, and *can* be used when the\n+// `c_unwind` feature gate is enabled.\n+\n+// check-pass\n+\n+#![feature(c_unwind)]\n+\n+extern \"C-unwind\" fn f() {}\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "f02a368d4e0973cfe8debef5f784d8fd96ee900b", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,9 @@\n+// Test that the \"C-unwind\" ABI is feature-gated, and cannot be used when the\n+// `c_unwind` feature gate is not used.\n+\n+extern \"C-unwind\" fn f() {}\n+//~^ ERROR C-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "f4c785a235f67a7c902875a426c659e45b83af3e", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: C-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-c-unwind.rs:4:8\n+   |\n+LL | extern \"C-unwind\" fn f() {}\n+   |        ^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "7d4dc8c9343f1c5af01b1dba7e98c68ed5597d84", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,13 @@\n+// ignore-arm stdcall isn't supported\n+// ignore-aarch64 stdcall isn't supported\n+// ignore-riscv64 stdcall isn't supported\n+\n+// Test that the \"stdcall-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"stdcall-unwind\" fn f() {}\n+//~^ ERROR stdcall-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "e3d569f464f8791abcf46fd2d2e33edbb461d93c", "filename": "src/test/ui/unwind-abis/feature-gate-stdcall-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-stdcall-unwind.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: stdcall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-stdcall-unwind.rs:8:8\n+   |\n+LL | extern \"stdcall-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "26c2de4e81767754051d0d3de620776ac966c5f6", "filename": "src/test/ui/unwind-abis/feature-gate-system-unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,9 @@\n+// Test that the \"system-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"system-unwind\" fn f() {}\n+//~^ ERROR system-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "87877336475b43bb6de53203b12b1b7bf81f8e40", "filename": "src/test/ui/unwind-abis/feature-gate-system-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-system-unwind.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: system-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-system-unwind.rs:4:8\n+   |\n+LL | extern \"system-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "2f4cefccc19672314f1e6e207daadd1fb5572824", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.rs?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,13 @@\n+// ignore-arm thiscall isn't supported\n+// ignore-aarch64 thiscall isn't supported\n+// ignore-riscv64 thiscall isn't supported\n+\n+// Test that the \"thiscall-unwind\" ABI is feature-gated, and cannot be used when\n+// the `c_unwind` feature gate is not used.\n+\n+extern \"thiscall-unwind\" fn f() {}\n+//~^ ERROR thiscall-unwind ABI is experimental and subject to change [E0658]\n+\n+fn main() {\n+    f();\n+}"}, {"sha": "b103bb8d565850ff422bbb958762082459587b11", "filename": "src/test/ui/unwind-abis/feature-gate-thiscall-unwind.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df45c579de97777617b6f12c77a5e6224f54c897/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-thiscall-unwind.stderr?ref=df45c579de97777617b6f12c77a5e6224f54c897", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: thiscall-unwind ABI is experimental and subject to change\n+  --> $DIR/feature-gate-thiscall-unwind.rs:8:8\n+   |\n+LL | extern \"thiscall-unwind\" fn f() {}\n+   |        ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}