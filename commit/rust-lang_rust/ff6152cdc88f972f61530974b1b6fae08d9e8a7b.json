{"sha": "ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjE1MmNkYzg4Zjk3MmY2MTUzMDk3NGIxYjZmYWUwOGQ5ZThhN2I=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T12:12:05Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T12:12:05Z"}, "message": "miri: move param_env from Machine to EvalContext.", "tree": {"sha": "bb49a347d4951ac4458ef41dde796ba6a8e4eefe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb49a347d4951ac4458ef41dde796ba6a8e4eefe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "html_url": "https://github.com/rust-lang/rust/commit/ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf5ec797255f95b7912c612942f6ece27b809d32", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5ec797255f95b7912c612942f6ece27b809d32", "html_url": "https://github.com/rust-lang/rust/commit/bf5ec797255f95b7912c612942f6ece27b809d32"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "c70825474b7ff981b8847bb7c3a58302cabf2dab", "filename": "src/librustc/mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs?ref=ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "patch": "@@ -20,7 +20,7 @@ pub fn eval_body<'a, 'tcx>(\n ) -> (EvalResult<'tcx, (PtrAndAlign, Ty<'tcx>)>, EvalContext<'a, 'tcx, CompileTimeFunctionEvaluator>) {\n     debug!(\"eval_body: {:?}, {:?}\", instance, param_env);\n     let limits = super::ResourceLimits::default();\n-    let mut ecx = EvalContext::<CompileTimeFunctionEvaluator>::new(tcx, limits, param_env, ());\n+    let mut ecx = EvalContext::<CompileTimeFunctionEvaluator>::new(tcx, param_env, limits, (), ());\n     let cid = GlobalId {\n         instance,\n         promoted: None,\n@@ -165,14 +165,9 @@ impl Error for ConstEvalError {\n }\n \n impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n-    type Data = ty::ParamEnv<'tcx>;\n+    type Data = ();\n     type MemoryData = ();\n     type MemoryKinds = !;\n-    fn param_env<'a>(\n-        ecx: &EvalContext<'a, 'tcx, Self>,\n-    ) -> ty::ParamEnv<'tcx> {\n-        ecx.machine_data\n-    }\n     fn eval_fn_call<'a>(\n         ecx: &mut EvalContext<'a, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,"}, {"sha": "74fa34b5c6d52e8fbf7b8cbd0c6e69ac85d266b2", "filename": "src/librustc/mir/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs?ref=ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "patch": "@@ -25,6 +25,9 @@ pub struct EvalContext<'a, 'tcx: 'a, M: Machine<'tcx>> {\n     /// The results of the type checker, from rustc.\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n+    /// Bounds in scope for polymorphic evaluations.\n+    pub param_env: ty::ParamEnv<'tcx>,\n+\n     /// The virtual memory system.\n     pub memory: Memory<'a, 'tcx, M>,\n \n@@ -194,7 +197,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> LayoutOf<Ty<'tcx>> for &'a EvalContext<'a, 'tcx\n     type TyLayout = EvalResult<'tcx, TyLayout<'tcx>>;\n \n     fn layout_of(self, ty: Ty<'tcx>) -> Self::TyLayout {\n-        (self.tcx, M::param_env(self)).layout_of(ty)\n+        (self.tcx, self.param_env).layout_of(ty)\n             .map_err(|layout| EvalErrorKind::Layout(layout).into())\n     }\n }\n@@ -212,13 +215,15 @@ impl<'c, 'b, 'a, 'tcx, M: Machine<'tcx>> LayoutOf<Ty<'tcx>>\n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     pub fn new(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n         limits: ResourceLimits,\n         machine_data: M::Data,\n         memory_data: M::MemoryData,\n     ) -> Self {\n         EvalContext {\n             machine_data,\n             tcx,\n+            param_env,\n             memory: Memory::new(tcx, limits.memory_size, memory_data),\n             suspended: HashMap::new(),\n             stack: Vec::new(),\n@@ -302,14 +307,14 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         let substs = self.tcx.trans_apply_param_substs(self.substs(), &substs);\n         ty::Instance::resolve(\n             self.tcx,\n-            M::param_env(self),\n+            self.param_env,\n             def_id,\n             substs,\n         ).ok_or(EvalErrorKind::TypeckError.into()) // turn error prop into a panic to expose associated type in const issue\n     }\n \n     pub(super) fn type_is_sized(&self, ty: Ty<'tcx>) -> bool {\n-        ty.is_sized(self.tcx, M::param_env(self), DUMMY_SP)\n+        ty.is_sized(self.tcx, self.param_env, DUMMY_SP)\n     }\n \n     pub fn load_mir("}, {"sha": "5416f231e2717fb0bf3c3fd7f9e2007802bfdb4b", "filename": "src/librustc/mir/interpret/machine.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs?ref=ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "patch": "@@ -21,11 +21,6 @@ pub trait Machine<'tcx>: Sized {\n     /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n     type MemoryKinds: ::std::fmt::Debug + PartialEq + Copy + Clone;\n \n-    /// Produces the param env for this computation.\n-    fn param_env<'a>(\n-        ecx: &EvalContext<'a, 'tcx, Self>,\n-    ) -> ty::ParamEnv<'tcx>;\n-\n     /// Entry point to all function calls.\n     ///\n     /// Returns Ok(true) when the function was handled completely"}, {"sha": "b67e38342e908dde342a1559849138cbb77749fa", "filename": "src/librustc/mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fstep.rs?ref=ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "patch": "@@ -188,11 +188,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 aligned: !layout.is_packed(),\n             },\n         );\n-        let internally_mutable = !layout.ty.is_freeze(\n-            self.tcx,\n-            M::param_env(self),\n-            span,\n-        );\n+        let internally_mutable = !layout.ty.is_freeze(self.tcx, self.param_env, span);\n         let mutability = if mutability == Mutability::Mutable || internally_mutable {\n             Mutability::Mutable\n         } else {\n@@ -245,10 +241,10 @@ impl<'a, 'b, 'tcx, M: Machine<'tcx>> Visitor<'tcx> for ConstantExtractor<'a, 'b,\n                     debug!(\"global_item: {:?}, {:#?}\", def_id, substs);\n                     let substs = this.ecx.tcx.trans_apply_param_substs(this.instance.substs, &substs);\n                     debug!(\"global_item_new_substs: {:#?}\", substs);\n-                    debug!(\"global_item_param_env: {:#?}\", M::param_env(this.ecx));\n+                    debug!(\"global_item_param_env: {:#?}\", this.ecx.param_env);\n                     let instance = Instance::resolve(\n                         this.ecx.tcx,\n-                        M::param_env(this.ecx),\n+                        this.ecx.param_env,\n                         def_id,\n                         substs,\n                     ).ok_or(EvalErrorKind::TypeckError)?; // turn error prop into a panic to expose associated type in const issue"}, {"sha": "a9f20828244b15d6608d25f827e398eb72d31b0a", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff6152cdc88f972f61530974b1b6fae08d9e8a7b/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=ff6152cdc88f972f61530974b1b6fae08d9e8a7b", "patch": "@@ -24,7 +24,7 @@ use rustc::util::common::ErrorReported;\n use rustc::util::nodemap::NodeMap;\n \n use rustc::mir::interpret::{PrimVal, Value, PtrAndAlign, HasMemory, EvalError};\n-use rustc::mir::interpret::{CompileTimeFunctionEvaluator, EvalContext, Machine};\n+use rustc::mir::interpret::{CompileTimeFunctionEvaluator, EvalContext};\n use rustc::mir::Field;\n use rustc::mir::interpret::{Place, PlaceExtra};\n use rustc_data_structures::indexed_vec::Idx;\n@@ -937,7 +937,7 @@ fn check_ctfe_against_miri<'a, 'tcx>(\n                 ConstVal::Function(did, substs) => {\n                     let ctfe = ty::Instance::resolve(\n                         ecx.tcx,\n-                        CompileTimeFunctionEvaluator::param_env(&ecx),\n+                        ecx.param_env,\n                         did,\n                         substs,\n                     ).unwrap();"}]}