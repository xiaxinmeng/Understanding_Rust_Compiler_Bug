{"sha": "519e85b8a930b252e28a834574f9b4999d656798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxOWU4NWI4YTkzMGIyNTJlMjhhODM0NTc0ZjliNDk5OWQ2NTY3OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-11T21:42:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-11T21:42:17Z"}, "message": "auto merge of #17892 : nodakai/rust/rustdoc-dont-nest-a, r=alexcrichton\n\nSome examples:\r\n\r\n- `std::slice::slice`: [before](http://validator.w3.org/check?uri=http%3A%2F%2Fdoc.rust-lang.org%2Fstd%2Fslice%2Fprimitive.slice.html&charset=%28detect+automatically%29&doctype=Inline&group=0) and [after](http://validator.w3.org/check?uri=http%3A%2F%2Fnodakai.github.io%2Frust-f40b60b-doc%2Fstd%2Fslice%2Fprimitive.slice.html&charset=%28detect+automatically%29&doctype=Inline&group=0)\r\n- `core::char::char`: [before](http://validator.w3.org/check?uri=http%3A%2F%2Fdoc.rust-lang.org%2Fcore%2Fchar%2Fprimitive.char.html&charset=%28detect+automatically%29&doctype=Inline&group=0) and [after](http://validator.w3.org/check?uri=http%3A%2F%2Fnodakai.github.io%2Frust-f40b60b-doc%2Fcore%2Fchar%2Fprimitive.char.html&charset=%28detect+automatically%29&doctype=Inline&group=0)\r\n- `hexfloat::expand_syntax_ext`: [before](http://validator.w3.org/check?uri=http%3A%2F%2Fdoc.rust-lang.org%2Fhexfloat%2Ffn.expand_syntax_ext.html&charset=%28detect+automatically%29&doctype=Inline&group=0) and [after](http://validator.w3.org/check?uri=http%3A%2F%2Fnodakai.github.io%2Frust-f40b60b-doc%2Fhexfloat%2Ffn.expand_syntax_ext.html&charset=%28detect+automatically%29&doctype=Inline&group=0)\r\n\r\nTODO: do the same for tuples.", "tree": {"sha": "969d89462a42fa4fc393a29fe93278b827d61ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/969d89462a42fa4fc393a29fe93278b827d61ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/519e85b8a930b252e28a834574f9b4999d656798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/519e85b8a930b252e28a834574f9b4999d656798", "html_url": "https://github.com/rust-lang/rust/commit/519e85b8a930b252e28a834574f9b4999d656798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/519e85b8a930b252e28a834574f9b4999d656798/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd1fa91d2bf97a6331e1d0265eec0f3324191f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1fa91d2bf97a6331e1d0265eec0f3324191f89", "html_url": "https://github.com/rust-lang/rust/commit/cd1fa91d2bf97a6331e1d0265eec0f3324191f89"}, {"sha": "f40b60b0e46512e204225ce42c702ce23c943232", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40b60b0e46512e204225ce42c702ce23c943232", "html_url": "https://github.com/rust-lang/rust/commit/f40b60b0e46512e204225ce42c702ce23c943232"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "02ba4aabc9919f79d60415bbdf60524c464e1ec4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/519e85b8a930b252e28a834574f9b4999d656798/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/519e85b8a930b252e28a834574f9b4999d656798/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=519e85b8a930b252e28a834574f9b4999d656798", "patch": "@@ -478,7 +478,25 @@ impl fmt::Show for clean::Type {\n                     Some(ref l) => format!(\"{} \", *l),\n                     _ => \"\".to_string(),\n                 };\n-                write!(f, \"&amp;{}{}{}\", lt, MutableSpace(mutability), **ty)\n+                let m = MutableSpace(mutability);\n+                match **ty {\n+                    clean::Vector(ref bt) => { // BorrowedRef{ ... Vector(T) } is &[T]\n+                        match **bt {\n+                            clean::Generic(_) =>\n+                                primitive_link(f, clean::Slice,\n+                                    format!(\"&amp;{}{}[{}]\", lt, m, **bt).as_slice()),\n+                            _ => {\n+                                try!(primitive_link(f, clean::Slice,\n+                                    format!(\"&amp;{}{}[\", lt, m).as_slice()));\n+                                try!(write!(f, \"{}\", **bt));\n+                                primitive_link(f, clean::Slice, \"]\")\n+                            }\n+                        }\n+                    }\n+                    _ => {\n+                        write!(f, \"&amp;{}{}{}\", lt, m, **ty)\n+                    }\n+                }\n             }\n             clean::Unique(..) => {\n                 fail!(\"should have been cleaned\")"}]}