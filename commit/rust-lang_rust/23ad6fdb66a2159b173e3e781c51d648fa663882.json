{"sha": "23ad6fdb66a2159b173e3e781c51d648fa663882", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYWQ2ZmRiNjZhMjE1OWIxNzNlM2U3ODFjNTFkNjQ4ZmE2NjM4ODI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-03T11:59:43Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-04T02:38:54Z"}, "message": "Improve `tt`-heavy expansion performance.", "tree": {"sha": "5509e45b44f6dd0dd2101b3f5bce4645dcbbea3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5509e45b44f6dd0dd2101b3f5bce4645dcbbea3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23ad6fdb66a2159b173e3e781c51d648fa663882", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23ad6fdb66a2159b173e3e781c51d648fa663882", "html_url": "https://github.com/rust-lang/rust/commit/23ad6fdb66a2159b173e3e781c51d648fa663882", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23ad6fdb66a2159b173e3e781c51d648fa663882/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ae083383d1a88f1d76e51297a88c2a423aaa3d1", "html_url": "https://github.com/rust-lang/rust/commit/7ae083383d1a88f1d76e51297a88c2a423aaa3d1"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "1f47a91fcc13e8372dcd621a7a7bac50cc65ca35", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=23ad6fdb66a2159b173e3e781c51d648fa663882", "patch": "@@ -615,7 +615,9 @@ impl<'a> ExtCtxt<'a> {\n \n     pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree])\n         -> parser::Parser<'a> {\n-        parse::tts_to_parser(self.parse_sess, tts.to_vec())\n+        let mut parser = parse::tts_to_parser(self.parse_sess, tts.to_vec());\n+        parser.allow_interpolated_tts = false; // FIXME(jseyfried) `quote!` can't handle these yet\n+        parser\n     }\n     pub fn codemap(&self) -> &'a CodeMap { self.parse_sess.codemap() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }"}, {"sha": "1066646aa8e8a82a2c7830b6631502634e5d2401", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=23ad6fdb66a2159b173e3e781c51d648fa663882", "patch": "@@ -496,10 +496,19 @@ pub fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n     match name {\n         \"tt\" => {\n             p.quote_depth += 1; //but in theory, non-quoted tts might be useful\n-            let res: ::parse::PResult<'a, _> = p.parse_token_tree();\n-            let res = token::NtTT(panictry!(res));\n+            let mut tt = panictry!(p.parse_token_tree());\n             p.quote_depth -= 1;\n-            return res;\n+            loop {\n+                let nt = match tt {\n+                    TokenTree::Token(_, token::Interpolated(ref nt)) => nt.clone(),\n+                    _ => break,\n+                };\n+                match *nt {\n+                    token::NtTT(ref sub_tt) => tt = sub_tt.clone(),\n+                    _ => break,\n+                }\n+            }\n+            return token::NtTT(tt);\n         }\n         _ => {}\n     }"}, {"sha": "b670a7384739bd30373abff886253c8888520f7b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23ad6fdb66a2159b173e3e781c51d648fa663882/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=23ad6fdb66a2159b173e3e781c51d648fa663882", "patch": "@@ -212,6 +212,7 @@ pub struct Parser<'a> {\n     pub expected_tokens: Vec<TokenType>,\n     pub tts: Vec<(TokenTree, usize)>,\n     pub desugar_doc_comments: bool,\n+    pub allow_interpolated_tts: bool,\n }\n \n #[derive(PartialEq, Eq, Clone)]\n@@ -301,6 +302,7 @@ impl<'a> Parser<'a> {\n             expected_tokens: Vec::new(),\n             tts: Vec::new(),\n             desugar_doc_comments: desugar_doc_comments,\n+            allow_interpolated_tts: true,\n         };\n \n         let tok = parser.next_tok();\n@@ -2718,7 +2720,12 @@ impl<'a> Parser<'a> {\n                 if self.tts.last().map(|&(_, i)| i == 1).unwrap_or(false) {\n                     let tt = self.tts.pop().unwrap().0;\n                     self.bump();\n-                    return Ok(tt);\n+                    return Ok(if self.allow_interpolated_tts {\n+                        // avoid needlessly reparsing token trees in recursive macro expansions\n+                        TokenTree::Token(tt.span(), token::Interpolated(Rc::new(token::NtTT(tt))))\n+                    } else {\n+                        tt\n+                    });\n                 }\n \n                 let parsing_token_tree = ::std::mem::replace(&mut self.parsing_token_tree, true);"}]}