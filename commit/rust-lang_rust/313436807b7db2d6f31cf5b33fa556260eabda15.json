{"sha": "313436807b7db2d6f31cf5b33fa556260eabda15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMzQzNjgwN2I3ZGIyZDZmMzFjZjViMzNmYTU1NjI2MGVhYmRhMTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-02T08:34:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-02T08:34:14Z"}, "message": "Rollup merge of #66827 - RalfJung:miri-missing-ret-place, r=oli-obk\n\nhandle diverging functions forwarding their return place\n\nFixes https://github.com/rust-lang/miri/issues/1075: the shim around diverging closures turned into function pointers actually \"obtains\" a return place inside a diverging function, but just uses it as the return place for a diverging callee. Handle this by using NULL places.\n\nThis is kind of a hack as it breaks our invariant that all places are dereferencable, but we'd eventually let raw pointers break that anyway I assume so that seems fine.\n\nr? @oli-obk", "tree": {"sha": "bd881687881e13781ba751e271cfbb696d150310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd881687881e13781ba751e271cfbb696d150310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/313436807b7db2d6f31cf5b33fa556260eabda15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd5MyGCRBK7hj4Ov3rIwAAdHIIAK5yK1Zlh8n7OLiSMgxkspnE\noOAM4w1Tm/5FjoI1AVwHAWwJyd9gVyy7AfwZhQ/OJ4FhSe9m6tfOpTL/2LHOQ2EV\n3Z+xImz4gIF9WriOiGWCYJ+NE5TSRsttcHcbKrYKMOV061VIoF+0By7njraLT0IU\n9EyloEBZbaA26dHBI8rdgugpPN/qFNjw9GjPOtckjHJV2S6AIjxFHDbk1fGzE9d0\n3TjjojOf+71YDeZ02t9I9j4yolXC0UI3zKEs3a6O6AYMm7TsU/tD1355MPC5KhBZ\nQRhIoXynVq5DAIVz59+AqMdko7xNyMskILpMSU4bvx3viNDBwQfX00CfleMfqEU=\n=SWZ6\n-----END PGP SIGNATURE-----\n", "payload": "tree bd881687881e13781ba751e271cfbb696d150310\nparent b7f8b77eec41b47f5cb49bce53dc34c7e87269c7\nparent 2869abacfa12ce3946234e5554d160fc932d933d\nauthor Ralf Jung <post@ralfj.de> 1575275654 +0100\ncommitter GitHub <noreply@github.com> 1575275654 +0100\n\nRollup merge of #66827 - RalfJung:miri-missing-ret-place, r=oli-obk\n\nhandle diverging functions forwarding their return place\n\nFixes https://github.com/rust-lang/miri/issues/1075: the shim around diverging closures turned into function pointers actually \"obtains\" a return place inside a diverging function, but just uses it as the return place for a diverging callee. Handle this by using NULL places.\n\nThis is kind of a hack as it breaks our invariant that all places are dereferencable, but we'd eventually let raw pointers break that anyway I assume so that seems fine.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/313436807b7db2d6f31cf5b33fa556260eabda15", "html_url": "https://github.com/rust-lang/rust/commit/313436807b7db2d6f31cf5b33fa556260eabda15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/313436807b7db2d6f31cf5b33fa556260eabda15/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7", "html_url": "https://github.com/rust-lang/rust/commit/b7f8b77eec41b47f5cb49bce53dc34c7e87269c7"}, {"sha": "2869abacfa12ce3946234e5554d160fc932d933d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2869abacfa12ce3946234e5554d160fc932d933d", "html_url": "https://github.com/rust-lang/rust/commit/2869abacfa12ce3946234e5554d160fc932d933d"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "70d9836b6ff0fd1bbf6373baeafc3bf1f0b7b209", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/313436807b7db2d6f31cf5b33fa556260eabda15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/313436807b7db2d6f31cf5b33fa556260eabda15/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=313436807b7db2d6f31cf5b33fa556260eabda15", "patch": "@@ -651,20 +651,28 @@ where\n         use rustc::mir::PlaceBase;\n \n         let mut place_ty = match &place.base {\n-            PlaceBase::Local(mir::RETURN_PLACE) => match self.frame().return_place {\n-                Some(return_place) => {\n-                    // We use our layout to verify our assumption; caller will validate\n-                    // their layout on return.\n-                    PlaceTy {\n-                        place: *return_place,\n-                        layout: self.layout_of(\n-                            self.subst_from_frame_and_normalize_erasing_regions(\n-                                self.frame().body.return_ty()\n-                            )\n-                        )?,\n-                    }\n+            PlaceBase::Local(mir::RETURN_PLACE) => {\n+                // `return_place` has the *caller* layout, but we want to use our\n+                // `layout to verify our assumption. The caller will validate\n+                // their layout on return.\n+                PlaceTy {\n+                    place: match self.frame().return_place {\n+                        Some(p) => *p,\n+                        // Even if we don't have a return place, we sometimes need to\n+                        // create this place, but any attempt to read from / write to it\n+                        // (even a ZST read/write) needs to error, so let us make this\n+                        // a NULL place.\n+                        //\n+                        // FIXME: Ideally we'd make sure that the place projections also\n+                        // bail out.\n+                        None => Place::null(&*self),\n+                    },\n+                    layout: self.layout_of(\n+                        self.subst_from_frame_and_normalize_erasing_regions(\n+                            self.frame().body.return_ty()\n+                        )\n+                    )?,\n                 }\n-                None => throw_unsup!(InvalidNullPointerUsage),\n             },\n             PlaceBase::Local(local) => PlaceTy {\n                 // This works even for dead/uninitialized locals; we check further when writing\n@@ -791,8 +799,8 @@ where\n         // to handle padding properly, which is only correct if we never look at this data with the\n         // wrong type.\n \n-        let ptr = match self.check_mplace_access(dest, None)\n-            .expect(\"places should be checked on creation\")\n+        // Invalid places are a thing: the return place of a diverging function\n+        let ptr = match self.check_mplace_access(dest, None)?\n         {\n             Some(ptr) => ptr,\n             None => return Ok(()), // zero-sized access"}]}