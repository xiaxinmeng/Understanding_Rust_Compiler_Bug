{"sha": "7435547b253932408193c2e80616a7eddd4ee872", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzU1NDdiMjUzOTMyNDA4MTkzYzJlODA2MTZhN2VkZGQ0ZWU4NzI=", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-21T19:28:11Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2020-04-21T19:50:16Z"}, "message": "proc_macro::is_available()", "tree": {"sha": "c45b68f9b9f9675639cdf6aa255829e4465e91df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c45b68f9b9f9675639cdf6aa255829e4465e91df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7435547b253932408193c2e80616a7eddd4ee872", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAl6fTngACgkQ+boUO5X/\nbYLRjQ//eYcBJHQlyNHJ32W82YvtMsRPpcrwvdVQN71wS8CRvh2avNDUPZIkz64W\nH1LM5vQR5dZAgmEpKXCJBoFt7JnXbh33c9RSnFEsrxauFcsT4bM1UMDSBQR2klbV\n9Wp312yY0aw/cHBmNSK5ZJc136AC7hFQ+h3LNwf3oywVVz0i17776p5e9BNoc8OK\n3aDl0pRKT9N5zAgyIdXGRbJyKG36pVHma7m/IpLV5Tfb2mTczmVz8yflwXH7OnOk\n5iq1P+9xBcTxFusIXo/bNZ8u0ivtZMc+b89WW35qXtxD+qSVSHhivrFQxyrgybwy\nknjGsYKIUCQOiiokyGfiJwm2I8VPMEeYyOAsaRQeP2pMlGweu8eIZMEq03MGQT0j\n+xtCQkPRhxcqkkZZn9CAcrNBf6WuRbP8+YCegfATv9fYm1VbMpLWBrAWMUONv/c9\nCUNfvt64yj+6+YzEvvfe+kWyLXcNm4+0z/Ti6K1PUxXTGpUn55uzVNxvVS7giTG2\n32Krq/C0pTqWXR4zmNl98Z6gTVNz0L4mwT9P3HpMRGpVC6+eR0gfMJG6NaIODQcL\n31fV7dtEXFqE/FgfO9PNIWnxKtN1jYcreuCzYNc6b24LEKsCawv8D9G2JDd3ojIH\n4ec4/UqGlPKsZU+yfy2mwOBV6PBHI0Sz7JnTaJq0yBy3oPw0NKM=\n=TUyD\n-----END PGP SIGNATURE-----", "payload": "tree c45b68f9b9f9675639cdf6aa255829e4465e91df\nparent 45d050cde277b22a755847338f2acc2c7b834141\nauthor David Tolnay <dtolnay@gmail.com> 1587497291 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1587498616 -0700\n\nproc_macro::is_available()\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7435547b253932408193c2e80616a7eddd4ee872", "html_url": "https://github.com/rust-lang/rust/commit/7435547b253932408193c2e80616a7eddd4ee872", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7435547b253932408193c2e80616a7eddd4ee872/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45d050cde277b22a755847338f2acc2c7b834141", "url": "https://api.github.com/repos/rust-lang/rust/commits/45d050cde277b22a755847338f2acc2c7b834141", "html_url": "https://github.com/rust-lang/rust/commit/45d050cde277b22a755847338f2acc2c7b834141"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "d2222d12623f9b8cd81778e2177cb7e4cc205c6d", "filename": "src/libproc_macro/bridge/client.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7435547b253932408193c2e80616a7eddd4ee872/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7435547b253932408193c2e80616a7eddd4ee872/src%2Flibproc_macro%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Fclient.rs?ref=7435547b253932408193c2e80616a7eddd4ee872", "patch": "@@ -290,6 +290,13 @@ impl BridgeState<'_> {\n }\n \n impl Bridge<'_> {\n+    pub(crate) fn is_available() -> bool {\n+        BridgeState::with(|state| match state {\n+            BridgeState::Connected(_) | BridgeState::InUse => true,\n+            BridgeState::NotConnected => false,\n+        })\n+    }\n+\n     fn enter<R>(self, f: impl FnOnce() -> R) -> R {\n         // Hide the default panic output within `proc_macro` expansions.\n         // NB. the server can't do this because it may use a different libstd."}, {"sha": "fa8087efcea07bffa71b51f2dfa385be1d25a7fd", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7435547b253932408193c2e80616a7eddd4ee872/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7435547b253932408193c2e80616a7eddd4ee872/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=7435547b253932408193c2e80616a7eddd4ee872", "patch": "@@ -45,6 +45,24 @@ use std::path::PathBuf;\n use std::str::FromStr;\n use std::{error, fmt, iter, mem};\n \n+/// Determines whether proc_macro has been made accessible to the currently\n+/// running program.\n+///\n+/// The proc_macro crate is only intended for use inside the implementation of\n+/// procedural macros. All the functions in this crate panic if invoked from\n+/// outside of a procedural macro, such as from a build script or unit test or\n+/// ordinary Rust binary.\n+///\n+/// With consideration for Rust libraries that are designed to support both\n+/// macro and non-macro use cases, `proc_macro::is_available()` provides a\n+/// non-panicking way to detect whether the infrastructure required to use the\n+/// API of proc_macro is presently available. Returns true if invoked from\n+/// inside of a procedural macro, false if invoked from any other binary.\n+#[unstable(feature = \"proc_macro_is_available\", issue = \"none\")] // FIXME\n+pub fn is_available() -> bool {\n+    bridge::Bridge::is_available()\n+}\n+\n /// The main type provided by this crate, representing an abstract stream of\n /// tokens, or, more specifically, a sequence of token trees.\n /// The type provide interfaces for iterating over those token trees and, conversely,"}, {"sha": "0caf186db1d5fac483284bcb1435303ca0560378", "filename": "src/test/ui/proc-macro/auxiliary/is-available.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7435547b253932408193c2e80616a7eddd4ee872/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7435547b253932408193c2e80616a7eddd4ee872/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fis-available.rs?ref=7435547b253932408193c2e80616a7eddd4ee872", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+#![feature(proc_macro_is_available)]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::{Literal, TokenStream, TokenTree};\n+\n+#[proc_macro]\n+pub fn from_inside_proc_macro(_input: TokenStream) -> TokenStream {\n+    proc_macro::is_available().to_string().parse().unwrap()\n+}"}, {"sha": "943d9fe797a6ec80ee30cd587dcb16a8850c6c8a", "filename": "src/test/ui/proc-macro/is-available.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7435547b253932408193c2e80616a7eddd4ee872/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7435547b253932408193c2e80616a7eddd4ee872/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fis-available.rs?ref=7435547b253932408193c2e80616a7eddd4ee872", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+\n+#![feature(proc_macro_hygiene, proc_macro_is_available)]\n+\n+extern crate proc_macro;\n+\n+// aux-build:is-available.rs\n+extern crate is_available;\n+\n+fn main() {\n+    let a = proc_macro::is_available();\n+    let b = is_available::from_inside_proc_macro!();\n+    let c = proc_macro::is_available();\n+    assert!(!a);\n+    assert!(b);\n+    assert!(!c);\n+}"}]}