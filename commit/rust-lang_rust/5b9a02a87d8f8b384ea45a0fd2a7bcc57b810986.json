{"sha": "5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "node_id": "C_kwDOAAsO6NoAKDViOWEwMmE4N2Q4ZjhiMzg0ZWE0NWEwZmQyYTdiY2M1N2I4MTA5ODY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-30T06:58:44Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-10-15T21:03:56Z"}, "message": "More slice::partition_point examples", "tree": {"sha": "d2c0ef6f88e631e1e383194187a0ee595a5f9c85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2c0ef6f88e631e1e383194187a0ee595a5f9c85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "html_url": "https://github.com/rust-lang/rust/commit/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe217c28ffc6955f0927d8e8715d43d727debe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe217c28ffc6955f0927d8e8715d43d727debe5a", "html_url": "https://github.com/rust-lang/rust/commit/fe217c28ffc6955f0927d8e8715d43d727debe5a"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "b0905518ca9fac9828e23a01f0497d351454d3f0", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=5b9a02a87d8f8b384ea45a0fd2a7bcc57b810986", "patch": "@@ -2359,6 +2359,28 @@ impl<T> [T] {\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n     ///\n+    /// If you want to find that whole *range* of matching items, rather than\n+    /// an arbitrary matching one, that can be done using [`partition_point`]:\n+    /// ```\n+    /// let s = [0, 1, 1, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55];\n+    ///\n+    /// let low = s.partition_point(|x| x < &1);\n+    /// assert_eq!(low, 1);\n+    /// let high = s.partition_point(|x| x <= &1);\n+    /// assert_eq!(high, 5);\n+    /// let r = s.binary_search(&1);\n+    /// assert!((low..high).contains(&r.unwrap()));\n+    ///\n+    /// assert!(s[..low].iter().all(|&x| x < 1));\n+    /// assert!(s[low..high].iter().all(|&x| x == 1));\n+    /// assert!(s[high..].iter().all(|&x| x > 1));\n+    ///\n+    /// // For something not found, the \"range\" of equal items is empty\n+    /// assert_eq!(s.partition_point(|x| x < &11), 9);\n+    /// assert_eq!(s.partition_point(|x| x <= &11), 9);\n+    /// assert_eq!(s.binary_search(&11), Err(9));\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order, consider using [`partition_point`]:\n     ///\n@@ -3778,6 +3800,16 @@ impl<T> [T] {\n     /// assert!(v[i..].iter().all(|&x| !(x < 5)));\n     /// ```\n     ///\n+    /// If all elements of the slice match the predicate, including if the slice\n+    /// is empty, then the length of the slice will be returned:\n+    ///\n+    /// ```\n+    /// let a = [2, 4, 8];\n+    /// assert_eq!(a.partition_point(|x| x < &100), a.len());\n+    /// let a: [i32; 0] = [];\n+    /// assert_eq!(a.partition_point(|x| x < &100), 0);\n+    /// ```\n+    ///\n     /// If you want to insert an item to a sorted vector, while maintaining\n     /// sort order:\n     ///"}]}