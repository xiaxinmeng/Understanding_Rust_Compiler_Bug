{"sha": "d4a28268cc1c8314f0de2519c78ff97696486a36", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YTI4MjY4Y2MxYzgzMTRmMGRlMjUxOWM3OGZmOTc2OTY0ODZhMzY=", "commit": {"author": {"name": "Alex Burka", "email": "alex@alexburka.com", "date": "2017-10-02T12:27:45Z"}, "committer": {"name": "Alex Burka", "email": "aburka@seas.upenn.edu", "date": "2017-12-14T17:56:26Z"}, "message": "add trait aliases to AST", "tree": {"sha": "30a4094b487f9f0772a103adb182602fd9aef7dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30a4094b487f9f0772a103adb182602fd9aef7dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4a28268cc1c8314f0de2519c78ff97696486a36", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a28268cc1c8314f0de2519c78ff97696486a36", "html_url": "https://github.com/rust-lang/rust/commit/d4a28268cc1c8314f0de2519c78ff97696486a36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4a28268cc1c8314f0de2519c78ff97696486a36/comments", "author": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "committer": {"login": "durka", "id": 47007, "node_id": "MDQ6VXNlcjQ3MDA3", "avatar_url": "https://avatars.githubusercontent.com/u/47007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/durka", "html_url": "https://github.com/durka", "followers_url": "https://api.github.com/users/durka/followers", "following_url": "https://api.github.com/users/durka/following{/other_user}", "gists_url": "https://api.github.com/users/durka/gists{/gist_id}", "starred_url": "https://api.github.com/users/durka/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/durka/subscriptions", "organizations_url": "https://api.github.com/users/durka/orgs", "repos_url": "https://api.github.com/users/durka/repos", "events_url": "https://api.github.com/users/durka/events{/privacy}", "received_events_url": "https://api.github.com/users/durka/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8624ea51172c8a86d5c7c47d740be65a3a9efbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8624ea51172c8a86d5c7c47d740be65a3a9efbc6", "html_url": "https://github.com/rust-lang/rust/commit/8624ea51172c8a86d5c7c47d740be65a3a9efbc6"}], "stats": {"total": 148, "additions": 134, "deletions": 14}, "files": [{"sha": "96c9323e7dc733a60127f190a95489b7d4a35518", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -283,6 +283,20 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     }\n                 }\n             }\n+            ItemKind::TraitAlias(Generics { ref ty_params, .. }, ..) => {\n+                for &TyParam { ref bounds, ref default, span, .. } in ty_params {\n+                    if !bounds.is_empty() {\n+                        self.err_handler().span_err(span,\n+                                                    \"type parameters on the left side of a \\\n+                                                     trait alias cannot be bounded\");\n+                    }\n+                    if !default.is_none() {\n+                        self.err_handler().span_err(span,\n+                                                    \"type parameters on the left side of a \\\n+                                                     trait alias cannot have defaults\");\n+                    }\n+                }\n+            }\n             ItemKind::Mod(_) => {\n                 // Ensure that `path` attributes on modules are recorded as used (c.f. #35584).\n                 attr::first_attr_value_str_by_name(&item.attrs, \"path\");"}, {"sha": "0d289dbd46b5b596efffd533c0562cfce228a796", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -1929,6 +1929,10 @@ pub enum ItemKind {\n     ///\n     /// E.g. `trait Foo { .. }`, `trait Foo<T> { .. }` or `auto trait Foo {}`\n     Trait(IsAuto, Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n+    /// Trait alias\n+    ///\n+    /// E.g. `trait Foo = Bar + Quux;`\n+    TraitAlias(Generics, TyParamBounds),\n     /// Auto trait implementation.\n     ///\n     /// E.g. `impl Trait for .. {}` or `impl<T> Trait<T> for .. {}`\n@@ -1968,6 +1972,7 @@ impl ItemKind {\n             ItemKind::Struct(..) => \"struct\",\n             ItemKind::Union(..) => \"union\",\n             ItemKind::Trait(..) => \"trait\",\n+            ItemKind::TraitAlias(..) => \"trait alias\",\n             ItemKind::Mac(..) |\n             ItemKind::MacroDef(..) |\n             ItemKind::Impl(..) |"}, {"sha": "6f973e2bcfaef918da6388e0f6bfc592887e57b3", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -921,6 +921,9 @@ pub fn noop_fold_item_kind<T: Folder>(i: ItemKind, folder: &mut T) -> ItemKind {\n             folder.fold_bounds(bounds),\n             items.move_flat_map(|item| folder.fold_trait_item(item)),\n         ),\n+        ItemKind::TraitAlias(generics, bounds) => ItemKind::TraitAlias(\n+            folder.fold_generics(generics),\n+            folder.fold_bounds(bounds)),\n         ItemKind::Mac(m) => ItemKind::Mac(folder.fold_mac(m)),\n         ItemKind::MacroDef(def) => ItemKind::MacroDef(folder.fold_macro_def(def)),\n     }"}, {"sha": "ec77d85f030eb9c02177e823c3335762b3ef6b2e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -5182,7 +5182,7 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parse trait Foo { ... }\n+    /// Parse `trait Foo { ... }` or `trait Foo = Bar;`\n     fn parse_item_trait(&mut self, is_auto: IsAuto, unsafety: Unsafety) -> PResult<'a, ItemInfo> {\n         let ident = self.parse_ident()?;\n         let mut tps = self.parse_generics()?;\n@@ -5194,23 +5194,34 @@ impl<'a> Parser<'a> {\n             Vec::new()\n         };\n \n-        tps.where_clause = self.parse_where_clause()?;\n-\n-        self.expect(&token::OpenDelim(token::Brace))?;\n-        let mut trait_items = vec![];\n-        while !self.eat(&token::CloseDelim(token::Brace)) {\n-            let mut at_end = false;\n-            match self.parse_trait_item(&mut at_end) {\n-                Ok(item) => trait_items.push(item),\n-                Err(mut e) => {\n-                    e.emit();\n-                    if !at_end {\n-                        self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+        if self.eat(&token::Eq) {\n+            // it's a trait alias\n+            let bounds = self.parse_ty_param_bounds()?;\n+            tps.where_clause = self.parse_where_clause()?;\n+            self.expect(&token::Semi)?;\n+            if unsafety != Unsafety::Normal {\n+                self.span_err(self.prev_span, \"trait aliases cannot be unsafe\");\n+            }\n+            Ok((ident, ItemKind::TraitAlias(tps, bounds), None))\n+        } else {\n+            // it's a normal trait\n+            tps.where_clause = self.parse_where_clause()?;\n+            self.expect(&token::OpenDelim(token::Brace))?;\n+            let mut trait_items = vec![];\n+            while !self.eat(&token::CloseDelim(token::Brace)) {\n+                let mut at_end = false;\n+                match self.parse_trait_item(&mut at_end) {\n+                    Ok(item) => trait_items.push(item),\n+                    Err(mut e) => {\n+                        e.emit();\n+                        if !at_end {\n+                            self.recover_stmt_(SemiColonMode::Break, BlockMode::Break);\n+                        }\n                     }\n                 }\n             }\n+            Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n         }\n-        Ok((ident, ItemKind::Trait(is_auto, unsafety, tps, bounds, trait_items), None))\n     }\n \n     /// Parses items implementations variants"}, {"sha": "e9386e5187ff0a20c942a35306dc5cf4991601fb", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -1381,6 +1381,27 @@ impl<'a> State<'a> {\n                 }\n                 self.bclose(item.span)?;\n             }\n+            ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n+                self.head(\"\")?;\n+                self.print_visibility(&item.vis)?;\n+                self.word_nbsp(\"trait\")?;\n+                self.print_ident(item.ident)?;\n+                self.print_generics(generics)?;\n+                let mut real_bounds = Vec::with_capacity(bounds.len());\n+                // FIXME(durka) this seems to be some quite outdated syntax\n+                for b in bounds.iter() {\n+                    if let TraitTyParamBound(ref ptr, ast::TraitBoundModifier::Maybe) = *b {\n+                        self.s.space()?;\n+                        self.word_space(\"for ?\")?;\n+                        self.print_trait_ref(&ptr.trait_ref)?;\n+                    } else {\n+                        real_bounds.push(b.clone());\n+                    }\n+                }\n+                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.print_where_clause(&generics.where_clause)?;\n+                self.s.word(\";\")?;\n+            }\n             ast::ItemKind::Mac(codemap::Spanned { ref node, .. }) => {\n                 self.print_path(&node.path, false, 0, false)?;\n                 self.s.word(\"! \")?;"}, {"sha": "9266cc280974df503c0353d1730e6cd65a124ca4", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -291,6 +291,10 @@ pub fn walk_item<'a, V: Visitor<'a>>(visitor: &mut V, item: &'a Item) {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);\n         }\n+        ItemKind::TraitAlias(ref generics, ref bounds) => {\n+            visitor.visit_generics(generics);\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n         ItemKind::Mac(ref mac) => visitor.visit_mac(mac),\n         ItemKind::MacroDef(ref ts) => visitor.visit_mac_def(ts, item.id),\n     }"}, {"sha": "de87fe39395c8f5c31300177ea696e57b699e393", "filename": "src/test/compile-fail/trait-alias.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-alias.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Alias1<T> = Default where T: Clone; // ok\n+trait Alias2<T: Clone = ()> = Default;\n+    //~^ERROR type parameters on the left side of a trait alias cannot be bounded\n+    //~^^ERROR type parameters on the left side of a trait alias cannot have defaults\n+\n+impl Alias1 { //~ERROR expected type, found trait alias\n+    fn foo() {}\n+}\n+\n+fn main() {}\n+"}, {"sha": "529765320a292a4ffd61a2c49d423daec0a7f65d", "filename": "src/test/run-pass/trait-alias.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Ftest%2Frun-pass%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a28268cc1c8314f0de2519c78ff97696486a36/src%2Ftest%2Frun-pass%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-alias.rs?ref=d4a28268cc1c8314f0de2519c78ff97696486a36", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait SimpleAlias = Default;\n+trait GenericAlias<T> = Iterator<Item=T>;\n+trait Partial<T> = IntoIterator<Item=T>;\n+\n+trait Things<T> {}\n+trait Romeo {}\n+struct The<T>(T);\n+struct Fore<T>(T);\n+impl<T, U> Things<T> for The<U> {}\n+impl<T> Romeo for Fore<T> {}\n+\n+trait WithWhere<Art, Thou> = Romeo + Romeo where Fore<(Art, Thou)>: Romeo;\n+trait BareWhere<Wild, Are> = where The<Wild>: Things<Are>;\n+\n+trait CD = Clone + Default;\n+\n+fn foo<T: CD>() -> (T, T) {\n+    let one = T::default();\n+    let two = one.clone();\n+    (one, two)\n+}\n+\n+fn main() {\n+    let both = foo();\n+    assert_eq!(both.0, 0);\n+    assert_eq!(both.1, 0);\n+    let both: (i32, i32) = foo();\n+    assert_eq!(both.0, 0);\n+    assert_eq!(both.1, 0);\n+}\n+"}]}