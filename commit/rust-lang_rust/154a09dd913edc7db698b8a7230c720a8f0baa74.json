{"sha": "154a09dd913edc7db698b8a7230c720a8f0baa74", "node_id": "C_kwDOAAsO6NoAKDE1NGEwOWRkOTEzZWRjN2RiNjk4YjhhNzIzMGM3MjBhOGYwYmFhNzQ", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-08-09T13:56:13Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-08-12T20:28:15Z"}, "message": "Adjust cfgs", "tree": {"sha": "2ce869cebc15cc5325f538ab69bbeb9ec8358228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ce869cebc15cc5325f538ab69bbeb9ec8358228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/154a09dd913edc7db698b8a7230c720a8f0baa74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/154a09dd913edc7db698b8a7230c720a8f0baa74", "html_url": "https://github.com/rust-lang/rust/commit/154a09dd913edc7db698b8a7230c720a8f0baa74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/154a09dd913edc7db698b8a7230c720a8f0baa74/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b42606758ad75c09ff6b37122a2aec6ef4a9f7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b42606758ad75c09ff6b37122a2aec6ef4a9f7e", "html_url": "https://github.com/rust-lang/rust/commit/7b42606758ad75c09ff6b37122a2aec6ef4a9f7e"}], "stats": {"total": 478, "additions": 80, "deletions": 398}, "files": [{"sha": "528fc4816e928897a12d67861ac0f3581d1ef932", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -14,7 +14,6 @@\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n #![feature(label_break_value)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "056f9ca08f8f286e7d3c5de8216e28abd2d2d861", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -31,7 +31,6 @@\n //! in the HIR, especially for multiple identifiers.\n \n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "2bc3b6f361643df5fe3e733ca2cc968b7935d06d", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -8,7 +8,6 @@\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n #![feature(iter_is_partitioned)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "c95c1c40a34c20fc211cfbbf31b5241cb7cddbca", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -4,7 +4,6 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n \n #[macro_use]"}, {"sha": "4ad9a970bc1be32eacdc72faafbe5647fec084cc", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -2,7 +2,6 @@\n \n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "48e81eb13c0c6a6bf675b62428eff8f05864d573", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -8,7 +8,6 @@\n #![feature(decl_macro)]\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]"}, {"sha": "c80ad6920006db275fd699bc1756ebd23685fdc7", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -6,7 +6,6 @@\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(hash_raw_entry)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(once_cell)]"}, {"sha": "7272ae5aa0976b4a036eb244699fbaa2160a4313", "filename": "compiler/rustc_const_eval/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -9,7 +9,6 @@ Rust MIR: a lowered representation of Rust.\n #![feature(control_flow_enum)]\n #![feature(decl_macro)]\n #![feature(exact_size_is_empty)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "9e73a399809276c526153013509cae4a178bc4d7", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(once_cell)]\n #![feature(rustc_attrs)]\n #![feature(type_alias_impl_trait)]"}, {"sha": "d2eb4f212eb88f67bf29f5a84a49ff5214a68298", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -5,7 +5,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(adt_const_params)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "91a183427843e941c59db125f62d054116d0c6d1", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -2,7 +2,6 @@\n #![feature(associated_type_bounds)]\n #![feature(associated_type_defaults)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(macro_metavar_expr)]\n #![feature(proc_macro_diagnostic)]"}, {"sha": "1c515f5ee572230d0c1e9f34722b52d61dd5e25b", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -18,7 +18,6 @@\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n #![feature(label_break_value)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "dc4799e4afce14a373336a7c44ca9212c6cf15fd", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -330,7 +330,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n }\n \n // JUSTIFICATION: before session exists, only config\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     tracing::trace!(\"run_compiler\");\n     util::run_in_thread_pool_with_globals("}, {"sha": "9207a0488623c94e9ef3aa5fd89280f20942666d", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1,4 +1,4 @@\n-#![cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#![allow(rustc::bad_opt_access)]\n use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "e74978485a21c818e780d1d3a923593a73de7b8c", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -559,7 +559,7 @@ pub fn collect_crate_types(session: &Session, attrs: &[ast::Attribute]) -> Vec<C\n     // command line, then reuse the empty `base` Vec to hold the types that\n     // will be found in crate attributes.\n     // JUSTIFICATION: before wrapper fn is available\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     let mut base = session.opts.crate_types.clone();\n     if base.is_empty() {\n         base.extend(attr_types);"}, {"sha": "f087c624917e8dcea75b1771450cac27feb60f96", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -33,7 +33,6 @@\n #![feature(if_let_guard)]\n #![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![recursion_limit = \"256\"]"}, {"sha": "75069a5f0dc015f56c9d8026bdf020f69ae0ae70", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -4,7 +4,6 @@\n #![feature(generators)]\n #![feature(generic_associated_types)]\n #![feature(iter_from_generator)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(proc_macro_internals)]"}, {"sha": "6a6505d025663d65a32cb444e2249caf4bef93c5", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -39,7 +39,6 @@\n #![feature(extern_types)]\n #![feature(new_uninit)]\n #![feature(once_cell)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "e51ca65dc16b1bb820c082c172d64dd78bef5416", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -5,7 +5,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(once_cell)]"}, {"sha": "56fb601d2b53528d11ddf466cf1762d0c1047470", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1,6 +1,5 @@\n #![allow(rustc::potential_query_instability)]\n #![feature(box_patterns)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "5924eba9f8b423b9e59484feca8f343886550ca1", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_windows)]\n #![feature(box_patterns)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(never_type)]\n #![feature(rustc_attrs)]"}, {"sha": "4af041dac0d8390789abae5de00af8024e6a3113", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -7,7 +7,6 @@\n #![allow(rustc::potential_query_instability)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(iter_intersperse)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "27fa402edcec8dfe3e36f4033e4dd4c3d1e8f8e1", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -5,8 +5,8 @@\n #![feature(try_blocks)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n-#![cfg_attr(not(bootstrap), deny(rustc::untranslatable_diagnostic))]\n-#![cfg_attr(not(bootstrap), deny(rustc::diagnostic_outside_of_impl))]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n mod errors;\n "}, {"sha": "9c213da8c2a2cd4146ff30439b6ea30e5165e72f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -10,7 +10,6 @@\n #![feature(box_patterns)]\n #![feature(drain_filter)]\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(iter_intersperse)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "68519c8fa828ea6e2c866e5fcec4751ab2735570", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -949,7 +949,7 @@ fn default_configuration(sess: &Session) -> CrateConfig {\n         ret.insert((sym::debug_assertions, None));\n     }\n     // JUSTIFICATION: before wrapper fn is available\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((sym::proc_macro, None));\n     }\n@@ -2198,7 +2198,7 @@ fn parse_remap_path_prefix(\n }\n \n // JUSTIFICATION: before wrapper fn is available\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let color = parse_color(matches);\n "}, {"sha": "0617bd5fae786696dce2598ebe181fbaf0d5fd5e", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1,5 +1,4 @@\n #![feature(if_let_guard)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "63ae91f8e6cee8a9c8c7812a6ea16b45d4918508", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -127,11 +127,11 @@ top_level_options!(\n     /// `CodegenOptions`, think about how it influences incremental compilation. If in\n     /// doubt, specify `[TRACKED]`, which is always \"correct\" but might lead to\n     /// unnecessary re-compilation.\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_ty)]\n+    #[rustc_lint_opt_ty]\n     pub struct Options {\n         /// The crate config requested for the session, which may be combined\n         /// with additional crate configurations during the compile process.\n-        #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::crate_types` instead of this field\"))]\n+        #[rustc_lint_opt_deny_field_access(\"use `Session::crate_types` instead of this field\")]\n         crate_types: Vec<CrateType> [TRACKED],\n         optimize: OptLevel [TRACKED],\n         /// Include the `debug_assertions` flag in dependency tracking, since it\n@@ -178,9 +178,9 @@ top_level_options!(\n         /// what rustc was invoked with, but massaged a bit to agree with\n         /// commands like `--emit llvm-ir` which they're often incompatible with\n         /// if we otherwise use the defaults of rustc.\n-        #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::codegen_units` instead of this field\"))]\n+        #[rustc_lint_opt_deny_field_access(\"use `Session::codegen_units` instead of this field\")]\n         cli_forced_codegen_units: Option<usize> [UNTRACKED],\n-        #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\"))]\n+        #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n         cli_forced_thinlto_off: bool [UNTRACKED],\n \n         /// Remap source path prefixes in all output (messages, object files, debug, etc.).\n@@ -231,7 +231,7 @@ macro_rules! options {\n      ),* ,) =>\n (\n     #[derive(Clone)]\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_ty)]\n+    #[rustc_lint_opt_ty]\n     pub struct $struct_name { $( $( #[$attr] )* pub $opt: $t),* }\n \n     impl Default for $struct_name {\n@@ -282,15 +282,15 @@ macro_rules! options {\n \n impl Options {\n     // JUSTIFICATION: defn of the suggested wrapper fn\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     pub fn time_passes(&self) -> bool {\n         self.unstable_opts.time_passes || self.unstable_opts.time\n     }\n }\n \n impl CodegenOptions {\n     // JUSTIFICATION: defn of the suggested wrapper fn\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     pub fn instrument_coverage(&self) -> InstrumentCoverage {\n         self.instrument_coverage.unwrap_or(InstrumentCoverage::Off)\n     }\n@@ -1091,7 +1091,7 @@ options! {\n \n     ar: String = (String::new(), parse_string, [UNTRACKED],\n         \"this option is deprecated and does nothing\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::code_model` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::code_model` instead of this field\")]\n     code_model: Option<CodeModel> = (None, parse_code_model, [TRACKED],\n         \"choose the code model to use (`rustc --print code-models` for details)\"),\n     codegen_units: Option<usize> = (None, parse_opt_number, [UNTRACKED],\n@@ -1111,14 +1111,14 @@ options! {\n         \"extra data to put in each output filename\"),\n     force_frame_pointers: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of the frame pointers\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::must_emit_unwind_tables` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::must_emit_unwind_tables` instead of this field\")]\n     force_unwind_tables: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"force use of unwind tables\"),\n     incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"enable incremental compilation\"),\n     inline_threshold: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"set the threshold for inlining a function\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::instrument_coverage` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_coverage` instead of this field\")]\n     instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`); \\\n@@ -1131,7 +1131,7 @@ options! {\n         \"a single extra argument to append to the linker invocation (can be used several times)\"),\n     link_args: Vec<String> = (Vec::new(), parse_list, [UNTRACKED],\n         \"extra arguments to append to the linker invocation (space separated)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::link_dead_code` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::link_dead_code` instead of this field\")]\n     link_dead_code: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"keep dead code at link time (useful for code coverage) (default: no)\"),\n     link_self_contained: Option<bool> = (None, parse_opt_bool, [UNTRACKED],\n@@ -1146,7 +1146,7 @@ options! {\n         \"generate build artifacts that are compatible with linker-based LTO\"),\n     llvm_args: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n         \"a list of arguments to pass to LLVM (space separated)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n     lto: LtoCli = (LtoCli::Unspecified, parse_lto, [TRACKED],\n         \"perform LLVM link-time optimizations\"),\n     metadata: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n@@ -1163,10 +1163,10 @@ options! {\n         \"disable LLVM's SLP vectorization pass\"),\n     opt_level: String = (\"0\".to_string(), parse_string, [TRACKED],\n         \"optimization level (0-3, s, or z; default: 0)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::overflow_checks` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::overflow_checks` instead of this field\")]\n     overflow_checks: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use overflow checks for integer arithmetic\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::panic_strategy` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::panic_strategy` instead of this field\")]\n     panic: Option<PanicStrategy> = (None, parse_opt_panic_strategy, [TRACKED],\n         \"panic strategy to compile crate with\"),\n     passes: Vec<String> = (Vec::new(), parse_list, [TRACKED],\n@@ -1178,7 +1178,7 @@ options! {\n         \"compile the program with profiling instrumentation\"),\n     profile_use: Option<PathBuf> = (None, parse_opt_pathbuf, [TRACKED],\n         \"use the given `.profdata` file for profile-guided optimization\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::relocation_model` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::relocation_model` instead of this field\")]\n     relocation_model: Option<RelocModel> = (None, parse_relocation_model, [TRACKED],\n         \"control generation of position-independent code (PIC) \\\n         (`rustc --print relocation-models` for details)\"),\n@@ -1190,7 +1190,7 @@ options! {\n         \"save all temporary output files during compilation (default: no)\"),\n     soft_float: bool = (false, parse_bool, [TRACKED],\n         \"use soft float ABI (*eabihf targets only) (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::split_debuginfo` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::split_debuginfo` instead of this field\")]\n     split_debuginfo: Option<SplitDebuginfo> = (None, parse_split_debuginfo, [TRACKED],\n         \"how to handle split-debuginfo, a platform-specific option\"),\n     strip: Strip = (Strip::None, parse_strip, [UNTRACKED],\n@@ -1226,13 +1226,13 @@ options! {\n         \"encode MIR of all functions into the crate metadata (default: no)\"),\n     assume_incomplete_release: bool = (false, parse_bool, [TRACKED],\n         \"make cfg(version) treat the current version as incomplete (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::asm_comments` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::asm_comments` instead of this field\")]\n     asm_comments: bool = (false, parse_bool, [TRACKED],\n         \"generate comments into the assembly (may change behavior) (default: no)\"),\n     assert_incr_state: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"assert that the incremental cache is in given state: \\\n          either `loaded` or `not-loaded`.\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::binary_dep_depinfo` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::binary_dep_depinfo` instead of this field\")]\n     binary_dep_depinfo: bool = (false, parse_bool, [TRACKED],\n         \"include artifacts (sysroot, crate dependencies) used during compilation in dep-info \\\n         (default: no)\"),\n@@ -1312,7 +1312,7 @@ options! {\n         \"export symbols from executables, as if they were dynamic libraries\"),\n     extra_const_ub_checks: bool = (false, parse_bool, [TRACKED],\n         \"turns on more checks to detect const UB, which can be slow (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::fewer_names` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::fewer_names` instead of this field\")]\n     fewer_names: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"reduce memory use by retaining fewer names within compilation artifacts (LLVM-IR) \\\n         (default: no)\"),\n@@ -1355,7 +1355,7 @@ options! {\n         \"control whether `#[inline]` functions are in all CGUs\"),\n     input_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather statistics about the input (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::instrument_coverage` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_coverage` instead of this field\")]\n     instrument_coverage: Option<InstrumentCoverage> = (None, parse_instrument_coverage, [TRACKED],\n         \"instrument the generated code to support LLVM source-based code coverage \\\n         reports (note, the compiler build config must include `profiler = true`); \\\n@@ -1364,7 +1364,7 @@ options! {\n         `=except-unused-generics`\n         `=except-unused-functions`\n         `=off` (default)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::instrument_mcount` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::instrument_mcount` instead of this field\")]\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n@@ -1388,7 +1388,7 @@ options! {\n     merge_functions: Option<MergeFunctions> = (None, parse_merge_functions, [TRACKED],\n         \"control the operation of the MergeFunctions LLVM pass, taking \\\n         the same values as the target option of the same name\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::meta_stats` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::meta_stats` instead of this field\")]\n     meta_stats: bool = (false, parse_bool, [UNTRACKED],\n         \"gather metadata statistics (default: no)\"),\n     mir_emit_retag: bool = (false, parse_bool, [TRACKED],\n@@ -1400,7 +1400,7 @@ options! {\n         disabled by other flags as usual.\"),\n     mir_pretty_relative_line_numbers: bool = (false, parse_bool, [UNTRACKED],\n         \"use line numbers relative to the function in mir pretty printing\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::mir_opt_level` instead of this field\")]\n     mir_opt_level: Option<usize> = (None, parse_opt_number, [TRACKED],\n         \"MIR optimization level (0-4; default: 1 in non optimized builds and 2 in optimized builds)\"),\n     move_size_limit: Option<usize> = (None, parse_opt_number, [TRACKED],\n@@ -1467,7 +1467,7 @@ options! {\n         See #77382 and #74551.\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"make rustc print the total optimization fuel used by a crate\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::print_llvm_passes` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::print_llvm_passes` instead of this field\")]\n     print_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"print the LLVM optimization passes being run (default: no)\"),\n     print_mono_items: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1545,7 +1545,7 @@ options! {\n         \"exclude spans when debug-printing compiler state (default: no)\"),\n     src_hash_algorithm: Option<SourceFileHashAlgorithm> = (None, parse_src_file_hash, [TRACKED],\n         \"hash algorithm of source files in debug info (`md5`, `sha1`, or `sha256`)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::stack_protector` instead of this field\")]\n     stack_protector: StackProtector = (StackProtector::None, parse_stack_protector, [TRACKED],\n         \"control stack smash protection strategy (`rustc --print stack-protector-strategies` for details)\"),\n     strict_init_checks: bool = (false, parse_bool, [TRACKED],\n@@ -1566,7 +1566,7 @@ options! {\n     symbol_mangling_version: Option<SymbolManglingVersion> = (None,\n         parse_symbol_mangling_version, [TRACKED],\n         \"which mangling version to use for symbol names ('legacy' (default) or 'v0')\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::teach` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::teach` instead of this field\")]\n     teach: bool = (false, parse_bool, [TRACKED],\n         \"show extended diagnostic help (default: no)\"),\n     temps_dir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n@@ -1582,7 +1582,7 @@ options! {\n         \"emit directionality isolation markers in translated diagnostics\"),\n     tune_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select processor to schedule for (`rustc --print target-cpus` for details)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::lto` instead of this field\")]\n     thinlto: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"enable ThinLTO when possible\"),\n     thir_unsafeck: bool = (false, parse_bool, [TRACKED],\n@@ -1591,19 +1591,19 @@ options! {\n     /// a sequential compiler for now. This'll likely be adjusted\n     /// in the future. Note that -Zthreads=0 is the way to get\n     /// the num_cpus behavior.\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::threads` instead of this field\")]\n     threads: usize = (1, parse_threads, [UNTRACKED],\n         \"use a thread pool with N threads\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n     time: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of rustc processes (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::time_llvm_passes` instead of this field\")]\n     time_llvm_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each LLVM pass (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::time_passes` instead of this field\")]\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]\n     tls_model: Option<TlsModel> = (None, parse_tls_model, [TRACKED],\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),\n     trace_macros: bool = (false, parse_bool, [UNTRACKED],\n@@ -1638,17 +1638,17 @@ options! {\n         \"enable unsound and buggy MIR optimizations (default: no)\"),\n     /// This name is kind of confusing: Most unstable options enable something themselves, while\n     /// this just allows \"normal\" options to be feature-gated.\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::unstable_options` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::unstable_options` instead of this field\")]\n     unstable_options: bool = (false, parse_bool, [UNTRACKED],\n         \"adds unstable command line options to rustc interface (default: no)\"),\n     use_ctors_section: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"use legacy .ctors section for initializers rather than .init_array\"),\n     validate_mir: bool = (false, parse_bool, [UNTRACKED],\n         \"validate MIR after each transformation\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::verbose` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::verbose` instead of this field\")]\n     verbose: bool = (false, parse_bool, [UNTRACKED],\n         \"in general, enable more debug printouts (default: no)\"),\n-    #[cfg_attr(not(bootstrap), rustc_lint_opt_deny_field_access(\"use `Session::verify_llvm_ir` instead of this field\"))]\n+    #[rustc_lint_opt_deny_field_access(\"use `Session::verify_llvm_ir` instead of this field\")]\n     verify_llvm_ir: bool = (false, parse_bool, [TRACKED],\n         \"verify LLVM IR (default: no)\"),\n     virtual_function_elimination: bool = (false, parse_bool, [TRACKED],"}, {"sha": "80de451276c2c71e47d601b53feef202923808f4", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -638,7 +638,7 @@ impl Session {\n         let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n \n         // JUSTIFICATION: necessary use of crate_types directly (see FIXME below)\n-        #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+        #[allow(rustc::bad_opt_access)]\n         if found_positive || found_negative {\n             found_positive\n         } else if crate_type == Some(CrateType::ProcMacro)\n@@ -894,7 +894,7 @@ impl Session {\n }\n \n // JUSTIFICATION: defn of the suggested wrapper fns\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n impl Session {\n     pub fn verbose(&self) -> bool {\n         self.opts.unstable_opts.verbose\n@@ -1174,7 +1174,7 @@ impl Session {\n }\n \n // JUSTIFICATION: part of session construction\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n fn default_emitter(\n     sopts: &config::Options,\n     registry: rustc_errors::registry::Registry,\n@@ -1260,7 +1260,7 @@ pub enum DiagnosticOutput {\n }\n \n // JUSTIFICATION: literally session construction\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n@@ -1437,7 +1437,7 @@ pub fn build_session(\n /// If it is useful to have a Session available already for validating a commandline argument, you\n /// can do so here.\n // JUSTIFICATION: needs to access args to validate them\n-#[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+#[allow(rustc::bad_opt_access)]\n fn validate_commandline_args_with_session_available(sess: &Session) {\n     // Since we don't know if code in an rlib will be linked to statically or\n     // dynamically downstream, rustc generates `__imp_` symbols that help linkers"}, {"sha": "9c252fcfe1c638c3246fd6bf3ce687e6f188d561", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -17,7 +17,6 @@\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n #![feature(label_break_value)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(never_type)]"}, {"sha": "8c6fb6a77181d9b76044040d20d000674407f2dc", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -65,7 +65,6 @@ This API is completely unstable and subject to change.\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n #![feature(label_break_value)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "80b067812ba7d71a0f0f36ae38a06664a516630a", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -30,13 +30,13 @@ extern \"Rust\" {\n     #[rustc_allocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc(size: usize, align: usize) -> *mut u8;\n-    #[cfg_attr(not(bootstrap), rustc_deallocator)]\n+    #[rustc_deallocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_dealloc(ptr: *mut u8, size: usize, align: usize);\n-    #[cfg_attr(not(bootstrap), rustc_reallocator)]\n+    #[rustc_reallocator]\n     #[rustc_allocator_nounwind]\n     fn __rust_realloc(ptr: *mut u8, old_size: usize, align: usize, new_size: usize) -> *mut u8;\n-    #[cfg_attr(not(bootstrap), rustc_allocator_zeroed)]\n+    #[rustc_allocator_zeroed]\n     #[rustc_allocator_nounwind]\n     fn __rust_alloc_zeroed(size: usize, align: usize) -> *mut u8;\n }"}, {"sha": "9d3e9abf557792c9c490f969e7da5d798af8dce6", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -2566,7 +2566,7 @@ macro_rules! tuple {\n \n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+        #[doc(fake_variadic)]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "aa13435e6808d0de31fa8c0d8bc387c245296266", "filename": "library/core/src/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fmod.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -900,7 +900,7 @@ mod impls {\n \n     macro_rules! maybe_tuple_doc {\n         ($a:ident @ #[$meta:meta] $item:item) => {\n-            #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+            #[doc(fake_variadic)]\n             #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n             #[$meta]\n             $item"}, {"sha": "15467e0191dbf432bb8f6439c145ec412b7c196b", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 217, "changes": 222, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -63,222 +63,14 @@ use crate::mem;\n use crate::sync::atomic::{self, AtomicBool, AtomicI32, AtomicIsize, AtomicU32, Ordering};\n \n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[deprecated(note = \"no longer an intrinsic - use `ptr::drop_in_place` directly\", since = \"1.52.0\")]\n #[inline]\n pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n     // SAFETY: see `ptr::drop_in_place`\n     unsafe { crate::ptr::drop_in_place(to_drop) }\n }\n \n-// These have been renamed.\n-#[cfg(bootstrap)]\n-extern \"rust-intrinsic\" {\n-    pub fn atomic_cxchg<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchg_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_cxchgweak_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n-    pub fn atomic_load<T: Copy>(src: *const T) -> T;\n-    pub fn atomic_load_acq<T: Copy>(src: *const T) -> T;\n-    pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n-    pub fn atomic_load_unordered<T: Copy>(src: *const T) -> T;\n-    pub fn atomic_store<T: Copy>(dst: *mut T, val: T);\n-    pub fn atomic_store_rel<T: Copy>(dst: *mut T, val: T);\n-    pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n-    pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n-    pub fn atomic_xchg<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xchg_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xchg_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xadd<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xadd_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xadd_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xadd_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xadd_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xsub<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xsub_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xsub_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xsub_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xsub_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_and<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_and_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_and_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_nand<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_nand_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_nand_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_or<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_or_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_or_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xor<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xor_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xor_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_max<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_max_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_max_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_min<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_min_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_min_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umin<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umin_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umin_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umin_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umin_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umax<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umax_acq<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umax_rel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umax_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_umax_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n-    pub fn atomic_fence();\n-    pub fn atomic_fence_acq();\n-    pub fn atomic_fence_rel();\n-    pub fn atomic_fence_acqrel();\n-    pub fn atomic_singlethreadfence();\n-    pub fn atomic_singlethreadfence_acq();\n-    pub fn atomic_singlethreadfence_rel();\n-    pub fn atomic_singlethreadfence_acqrel();\n-}\n-\n-// These have been renamed.\n-#[cfg(bootstrap)]\n-mod atomics {\n-    pub use super::atomic_cxchg as atomic_cxchg_seqcst_seqcst;\n-    pub use super::atomic_cxchg_acq as atomic_cxchg_acquire_acquire;\n-    pub use super::atomic_cxchg_acq_failrelaxed as atomic_cxchg_acquire_relaxed;\n-    pub use super::atomic_cxchg_acqrel as atomic_cxchg_acqrel_acquire;\n-    pub use super::atomic_cxchg_acqrel_failrelaxed as atomic_cxchg_acqrel_relaxed;\n-    pub use super::atomic_cxchg_failacq as atomic_cxchg_seqcst_acquire;\n-    pub use super::atomic_cxchg_failrelaxed as atomic_cxchg_seqcst_relaxed;\n-    pub use super::atomic_cxchg_rel as atomic_cxchg_release_relaxed;\n-    pub use super::atomic_cxchg_relaxed as atomic_cxchg_relaxed_relaxed;\n-\n-    pub use super::atomic_cxchgweak as atomic_cxchgweak_seqcst_seqcst;\n-    pub use super::atomic_cxchgweak_acq as atomic_cxchgweak_acquire_acquire;\n-    pub use super::atomic_cxchgweak_acq_failrelaxed as atomic_cxchgweak_acquire_relaxed;\n-    pub use super::atomic_cxchgweak_acqrel as atomic_cxchgweak_acqrel_acquire;\n-    pub use super::atomic_cxchgweak_acqrel_failrelaxed as atomic_cxchgweak_acqrel_relaxed;\n-    pub use super::atomic_cxchgweak_failacq as atomic_cxchgweak_seqcst_acquire;\n-    pub use super::atomic_cxchgweak_failrelaxed as atomic_cxchgweak_seqcst_relaxed;\n-    pub use super::atomic_cxchgweak_rel as atomic_cxchgweak_release_relaxed;\n-    pub use super::atomic_cxchgweak_relaxed as atomic_cxchgweak_relaxed_relaxed;\n-\n-    pub use super::atomic_load as atomic_load_seqcst;\n-    pub use super::atomic_load_acq as atomic_load_acquire;\n-    pub use super::atomic_load_relaxed;\n-    pub use super::atomic_load_unordered;\n-\n-    pub use super::atomic_store as atomic_store_seqcst;\n-    pub use super::atomic_store_rel as atomic_store_release;\n-    pub use super::atomic_store_relaxed;\n-    pub use super::atomic_store_unordered;\n-\n-    pub use super::atomic_xchg as atomic_xchg_seqcst;\n-    pub use super::atomic_xchg_acq as atomic_xchg_acquire;\n-    pub use super::atomic_xchg_acqrel;\n-    pub use super::atomic_xchg_rel as atomic_xchg_release;\n-    pub use super::atomic_xchg_relaxed;\n-\n-    pub use super::atomic_xadd as atomic_xadd_seqcst;\n-    pub use super::atomic_xadd_acq as atomic_xadd_acquire;\n-    pub use super::atomic_xadd_acqrel;\n-    pub use super::atomic_xadd_rel as atomic_xadd_release;\n-    pub use super::atomic_xadd_relaxed;\n-\n-    pub use super::atomic_xsub as atomic_xsub_seqcst;\n-    pub use super::atomic_xsub_acq as atomic_xsub_acquire;\n-    pub use super::atomic_xsub_acqrel;\n-    pub use super::atomic_xsub_rel as atomic_xsub_release;\n-    pub use super::atomic_xsub_relaxed;\n-\n-    pub use super::atomic_and as atomic_and_seqcst;\n-    pub use super::atomic_and_acq as atomic_and_acquire;\n-    pub use super::atomic_and_acqrel;\n-    pub use super::atomic_and_rel as atomic_and_release;\n-    pub use super::atomic_and_relaxed;\n-\n-    pub use super::atomic_nand as atomic_nand_seqcst;\n-    pub use super::atomic_nand_acq as atomic_nand_acquire;\n-    pub use super::atomic_nand_acqrel;\n-    pub use super::atomic_nand_rel as atomic_nand_release;\n-    pub use super::atomic_nand_relaxed;\n-\n-    pub use super::atomic_or as atomic_or_seqcst;\n-    pub use super::atomic_or_acq as atomic_or_acquire;\n-    pub use super::atomic_or_acqrel;\n-    pub use super::atomic_or_rel as atomic_or_release;\n-    pub use super::atomic_or_relaxed;\n-\n-    pub use super::atomic_xor as atomic_xor_seqcst;\n-    pub use super::atomic_xor_acq as atomic_xor_acquire;\n-    pub use super::atomic_xor_acqrel;\n-    pub use super::atomic_xor_rel as atomic_xor_release;\n-    pub use super::atomic_xor_relaxed;\n-\n-    pub use super::atomic_max as atomic_max_seqcst;\n-    pub use super::atomic_max_acq as atomic_max_acquire;\n-    pub use super::atomic_max_acqrel;\n-    pub use super::atomic_max_rel as atomic_max_release;\n-    pub use super::atomic_max_relaxed;\n-\n-    pub use super::atomic_min as atomic_min_seqcst;\n-    pub use super::atomic_min_acq as atomic_min_acquire;\n-    pub use super::atomic_min_acqrel;\n-    pub use super::atomic_min_rel as atomic_min_release;\n-    pub use super::atomic_min_relaxed;\n-\n-    pub use super::atomic_umin as atomic_umin_seqcst;\n-    pub use super::atomic_umin_acq as atomic_umin_acquire;\n-    pub use super::atomic_umin_acqrel;\n-    pub use super::atomic_umin_rel as atomic_umin_release;\n-    pub use super::atomic_umin_relaxed;\n-\n-    pub use super::atomic_umax as atomic_umax_seqcst;\n-    pub use super::atomic_umax_acq as atomic_umax_acquire;\n-    pub use super::atomic_umax_acqrel;\n-    pub use super::atomic_umax_rel as atomic_umax_release;\n-    pub use super::atomic_umax_relaxed;\n-\n-    pub use super::atomic_fence as atomic_fence_seqcst;\n-    pub use super::atomic_fence_acq as atomic_fence_acquire;\n-    pub use super::atomic_fence_acqrel;\n-    pub use super::atomic_fence_rel as atomic_fence_release;\n-\n-    pub use super::atomic_singlethreadfence as atomic_singlethreadfence_seqcst;\n-    pub use super::atomic_singlethreadfence_acq as atomic_singlethreadfence_acquire;\n-    pub use super::atomic_singlethreadfence_acqrel;\n-    pub use super::atomic_singlethreadfence_rel as atomic_singlethreadfence_release;\n-}\n-\n-#[cfg(bootstrap)]\n-pub use atomics::*;\n-\n-#[cfg(not(bootstrap))]\n extern \"rust-intrinsic\" {\n     // N.B., these intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n@@ -951,7 +743,6 @@ extern \"rust-intrinsic\" {\n //\n // These are the aliases for the old names.\n // To be removed when stdarch and panic_unwind have been updated.\n-#[cfg(not(bootstrap))]\n mod atomics {\n     pub use super::atomic_cxchg_acqrel_acquire as atomic_cxchg_acqrel;\n     pub use super::atomic_cxchg_acqrel_relaxed as atomic_cxchg_acqrel_failrelaxed;\n@@ -965,7 +756,6 @@ mod atomics {\n     pub use super::atomic_store_seqcst as atomic_store;\n }\n \n-#[cfg(not(bootstrap))]\n pub use atomics::*;\n \n extern \"rust-intrinsic\" {\n@@ -1463,7 +1253,7 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+    #[rustc_allowed_through_unstable_modules]\n     #[rustc_const_stable(feature = \"const_transmute\", since = \"1.56.0\")]\n     #[rustc_diagnostic_item = \"transmute\"]\n     pub fn transmute<T, U>(e: T) -> U;\n@@ -2300,12 +2090,10 @@ extern \"rust-intrinsic\" {\n \n     /// `ptr` must point to a vtable.\n     /// The intrinsic will return the size stored in that vtable.\n-    #[cfg(not(bootstrap))]\n     pub fn vtable_size(ptr: *const ()) -> usize;\n \n     /// `ptr` must point to a vtable.\n     /// The intrinsic will return the alignment stored in that vtable.\n-    #[cfg(not(bootstrap))]\n     pub fn vtable_align(ptr: *const ()) -> usize;\n }\n \n@@ -2452,7 +2240,7 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n #[doc(alias = \"memcpy\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n@@ -2539,7 +2327,7 @@ pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: us\n /// ```\n #[doc(alias = \"memmove\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[rustc_const_stable(feature = \"const_intrinsic_copy\", since = \"1.63.0\")]\n #[inline]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n@@ -2607,7 +2395,7 @@ pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n /// ```\n #[doc(alias = \"memset\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n #[inline]\n #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces"}, {"sha": "b4fabedad7829e76e475b9abfd841318baa947f8", "filename": "library/core/src/mem/transmutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Ftransmutability.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -4,7 +4,7 @@\n /// any value of type `Self` are safely transmutable into a value of type `Dst`, in a given `Context`,\n /// notwithstanding whatever safety checks you have asked the compiler to [`Assume`] are satisfied.\n #[unstable(feature = \"transmutability\", issue = \"99571\")]\n-#[cfg_attr(not(bootstrap), lang = \"transmute_trait\")]\n+#[lang = \"transmute_trait\"]\n #[rustc_on_unimplemented(\n     message = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\",\n     label = \"`{Src}` cannot be safely transmuted into `{Self}` in the defining scope of `{Context}`.\""}, {"sha": "1c14b9341cac8e435a0cd8746f41e712d3ac8893", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty\n@@ -1484,13 +1484,12 @@ mod prim_fn {}\n // Required to make auto trait impls render.\n // See src/librustdoc/passes/collect_trait_impls.rs:collect_trait_impls\n #[doc(hidden)]\n-#[cfg(not(bootstrap))]\n impl<Ret, T> fn(T) -> Ret {}\n \n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on function pointers with any number of arguments.\n impl<Ret, T> Clone for fn(T) -> Ret {\n     fn clone(&self) -> Self {\n@@ -1501,7 +1500,7 @@ impl<Ret, T> Clone for fn(T) -> Ret {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on function pointers with any number of arguments.\n impl<Ret, T> Copy for fn(T) -> Ret {\n     // empty"}, {"sha": "8865c834c88d6f517ad8512743fce4bfbf2bcce6", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -180,7 +180,6 @@ pub struct DynMetadata<Dyn: ?Sized> {\n     phantom: crate::marker::PhantomData<Dyn>,\n }\n \n-#[cfg(not(bootstrap))]\n extern \"C\" {\n     /// Opaque type for accessing vtables.\n     ///\n@@ -189,27 +188,13 @@ extern \"C\" {\n     type VTable;\n }\n \n-/// The common prefix of all vtables. It is followed by function pointers for trait methods.\n-///\n-/// Private implementation detail of `DynMetadata::size_of` etc.\n-#[repr(C)]\n-#[cfg(bootstrap)]\n-struct VTable {\n-    drop_in_place: fn(*mut ()),\n-    size_of: usize,\n-    align_of: usize,\n-}\n-\n impl<Dyn: ?Sized> DynMetadata<Dyn> {\n     /// Returns the size of the type associated with this vtable.\n     #[inline]\n     pub fn size_of(self) -> usize {\n         // Note that \"size stored in vtable\" is *not* the same as \"result of size_of_val_raw\".\n         // Consider a reference like `&(i32, dyn Send)`: the vtable will only store the size of the\n         // `Send` part!\n-        #[cfg(bootstrap)]\n-        return self.vtable_ptr.size_of;\n-        #[cfg(not(bootstrap))]\n         // SAFETY: DynMetadata always contains a valid vtable pointer\n         return unsafe {\n             crate::intrinsics::vtable_size(self.vtable_ptr as *const VTable as *const ())\n@@ -219,9 +204,6 @@ impl<Dyn: ?Sized> DynMetadata<Dyn> {\n     /// Returns the alignment of the type associated with this vtable.\n     #[inline]\n     pub fn align_of(self) -> usize {\n-        #[cfg(bootstrap)]\n-        return self.vtable_ptr.align_of;\n-        #[cfg(not(bootstrap))]\n         // SAFETY: DynMetadata always contains a valid vtable pointer\n         return unsafe {\n             crate::intrinsics::vtable_align(self.vtable_ptr as *const VTable as *const ())"}, {"sha": "57adcd6bb3405b9c06ba2ae2e9a533520f4225a1", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1834,7 +1834,7 @@ macro_rules! maybe_fnptr_doc {\n         $item\n     };\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+        #[doc(fake_variadic)]\n         #[doc = \"This trait is implemented for function pointers with up to twelve arguments.\"]\n         #[$meta]\n         $item"}, {"sha": "e79d47c9f98cdf0c234c3dafed3359104043ede5", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -4101,7 +4101,6 @@ impl<T, const N: usize> [[T; N]] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(test))]\n impl [f32] {\n     /// Sorts the slice of floats.\n@@ -4131,7 +4130,6 @@ impl [f32] {\n     }\n }\n \n-#[cfg(not(bootstrap))]\n #[cfg(not(test))]\n impl [f64] {\n     /// Sorts the slice of floats."}, {"sha": "40ca9abd6bdc9a5ed9b059e47d709f1d63f5ea2c", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 5, "deletions": 61, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1584,16 +1584,8 @@ impl<T> AtomicPtr<T> {\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub fn fetch_byte_add(&self, val: usize, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_add(self.p.get(), core::ptr::invalid_mut(val), order).cast()\n-        }\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_add(self.p.get().cast::<usize>(), val, order) as *mut T\n-        }\n+        unsafe { atomic_add(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n \n     /// Offsets the pointer's address by subtracting `val` *bytes*, returning the\n@@ -1628,16 +1620,8 @@ impl<T> AtomicPtr<T> {\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub fn fetch_byte_sub(&self, val: usize, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_sub(self.p.get(), core::ptr::invalid_mut(val), order).cast()\n-        }\n-        #[cfg(bootstrap)]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_sub(self.p.get().cast::<usize>(), val, order) as *mut T\n-        }\n+        unsafe { atomic_sub(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n \n     /// Performs a bitwise \"or\" operation on the address of the current pointer,\n@@ -1687,16 +1671,8 @@ impl<T> AtomicPtr<T> {\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub fn fetch_or(&self, val: usize, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_or(self.p.get(), core::ptr::invalid_mut(val), order).cast()\n-        }\n-        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_or(self.p.get().cast::<usize>(), val, order) as *mut T\n-        }\n+        unsafe { atomic_or(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n \n     /// Performs a bitwise \"and\" operation on the address of the current\n@@ -1745,16 +1721,8 @@ impl<T> AtomicPtr<T> {\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub fn fetch_and(&self, val: usize, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_and(self.p.get(), core::ptr::invalid_mut(val), order).cast()\n-        }\n-        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_and(self.p.get().cast::<usize>(), val, order) as *mut T\n-        }\n+        unsafe { atomic_and(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n \n     /// Performs a bitwise \"xor\" operation on the address of the current\n@@ -1801,16 +1769,8 @@ impl<T> AtomicPtr<T> {\n     #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     #[cfg_attr(miri, track_caller)] // even without panics, this helps for Miri backtraces\n     pub fn fetch_xor(&self, val: usize, order: Ordering) -> *mut T {\n-        #[cfg(not(bootstrap))]\n-        // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_xor(self.p.get(), core::ptr::invalid_mut(val), order).cast()\n-        }\n-        #[cfg(bootstrap)]\n         // SAFETY: data races are prevented by atomic intrinsics.\n-        unsafe {\n-            atomic_xor(self.p.get().cast::<usize>(), val, order) as *mut T\n-        }\n+        unsafe { atomic_xor(self.p.get(), core::ptr::invalid_mut(val), order).cast() }\n     }\n }\n \n@@ -3073,30 +3033,22 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-            #[cfg(bootstrap)]\n-            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }\n@@ -3116,30 +3068,22 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),\n-            #[cfg(not(bootstrap))]\n             (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-            #[cfg(bootstrap)]\n-            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }"}, {"sha": "aa8a2425bf41624c86a5c597f76b62601d0be1d5", "filename": "library/core/src/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fcore%2Fsrc%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftuple.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -107,7 +107,7 @@ macro_rules! tuple_impls {\n // Otherwise, it hides the docs entirely.\n macro_rules! maybe_tuple_doc {\n     ($a:ident @ #[$meta:meta] $item:item) => {\n-        #[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+        #[doc(fake_variadic)]\n         #[doc = \"This trait is implemented for tuples up to twelve items long.\"]\n         #[$meta]\n         $item"}, {"sha": "4ed00219fcaf6217a608844be89f1515100a09ea", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -211,7 +211,7 @@\n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n // Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n-#![cfg_attr(not(bootstrap), deny(ffi_unwind_calls))]\n+#![deny(ffi_unwind_calls)]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n #![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count, rt))]\n@@ -243,7 +243,6 @@\n #![feature(intra_doc_pointers)]\n #![feature(label_break_value)]\n #![feature(lang_items)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(linkage)]\n #![feature(link_cfg)]\n@@ -586,7 +585,7 @@ mod backtrace_rs;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated, deprecated_in_future)]\n pub use core::{\n-    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, todo, r#try,\n+    assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne, matches, r#try, todo,\n     unimplemented, unreachable, write, writeln,\n };\n "}, {"sha": "1b3d110426febb3c1fe6869aaf96265efcb35b8f", "filename": "library/std/src/os/fd/raw.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fraw.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -14,7 +14,7 @@ use crate::os::wasi::io::OwnedFd;\n use crate::sys_common::{AsInner, IntoInner};\n \n /// Raw file descriptors.\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub type RawFd = raw::c_int;\n \n@@ -23,7 +23,7 @@ pub type RawFd = raw::c_int;\n /// This is only available on unix and WASI platforms and must be imported in\n /// order to call the method. Windows platforms have a corresponding\n /// `AsRawHandle` and `AsRawSocket` set of traits.\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsRawFd {\n     /// Extracts the raw file descriptor.\n@@ -59,7 +59,7 @@ pub trait AsRawFd {\n \n /// A trait to express the ability to construct an object from a raw file\n /// descriptor.\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[stable(feature = \"from_raw_os\", since = \"1.1.0\")]\n pub trait FromRawFd {\n     /// Constructs a new instance of `Self` from the given raw file\n@@ -103,7 +103,7 @@ pub trait FromRawFd {\n \n /// A trait to express the ability to consume an object and acquire ownership of\n /// its raw file descriptor.\n-#[cfg_attr(not(bootstrap), rustc_allowed_through_unstable_modules)]\n+#[rustc_allowed_through_unstable_modules]\n #[stable(feature = \"into_raw_os\", since = \"1.4.0\")]\n pub trait IntoRawFd {\n     /// Consumes this object, returning the raw underlying file descriptor."}, {"sha": "1c14b9341cac8e435a0cd8746f41e712d3ac8893", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -996,7 +996,7 @@ impl<T> (T,) {}\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Clone> Clone for (T,) {\n     fn clone(&self) -> Self {\n@@ -1007,7 +1007,7 @@ impl<T: Clone> Clone for (T,) {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on arbitrary-length tuples.\n impl<T: Copy> Copy for (T,) {\n     // empty\n@@ -1484,13 +1484,12 @@ mod prim_fn {}\n // Required to make auto trait impls render.\n // See src/librustdoc/passes/collect_trait_impls.rs:collect_trait_impls\n #[doc(hidden)]\n-#[cfg(not(bootstrap))]\n impl<Ret, T> fn(T) -> Ret {}\n \n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on function pointers with any number of arguments.\n impl<Ret, T> Clone for fn(T) -> Ret {\n     fn clone(&self) -> Self {\n@@ -1501,7 +1500,7 @@ impl<Ret, T> Clone for fn(T) -> Ret {\n // Fake impl that's only really used for docs.\n #[cfg(doc)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(not(bootstrap), doc(fake_variadic))]\n+#[doc(fake_variadic)]\n /// This trait is implemented on function pointers with any number of arguments.\n impl<Ret, T> Copy for fn(T) -> Ret {\n     // empty"}, {"sha": "8aede1e77a27497d8112101ededd6f4a0c95ce69", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -8,7 +8,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(test)]\n #![feature(never_type)]"}, {"sha": "8a6bd1cbdf564b5bff3095f012adff97ce736884", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -1,4 +1,3 @@\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "e6a405f8170d8f0a8e06df0fb807942f9eaf22d4", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -4,7 +4,6 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(iter_intersperse)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(let_else)]\n #![feature(lint_reasons)]\n #![feature(never_type)]"}, {"sha": "dc772e5efeef39cc8f9f333e3cdab59198cfc556", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -2,7 +2,6 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n-#![cfg_attr(bootstrap, feature(let_chains))]\n #![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]"}, {"sha": "235eae5af1ec386e3f0c620bba77a21bc0e0afff", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/154a09dd913edc7db698b8a7230c720a8f0baa74/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=154a09dd913edc7db698b8a7230c720a8f0baa74", "patch": "@@ -95,7 +95,7 @@ struct ClippyCallbacks {\n \n impl rustc_driver::Callbacks for ClippyCallbacks {\n     // JUSTIFICATION: necessary in clippy driver to set `mir_opt_level`\n-    #[cfg_attr(not(bootstrap), allow(rustc::bad_opt_access))]\n+    #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();"}]}