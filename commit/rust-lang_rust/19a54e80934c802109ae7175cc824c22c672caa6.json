{"sha": "19a54e80934c802109ae7175cc824c22c672caa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5YTU0ZTgwOTM0YzgwMjEwOWFlNzE3NWNjODI0YzIyYzY3MmNhYTY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-24T12:54:45Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-24T13:02:37Z"}, "message": "Type check pointer comparisons", "tree": {"sha": "11318a9d4faab744555a47457ce31eafe578ffcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11318a9d4faab744555a47457ce31eafe578ffcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19a54e80934c802109ae7175cc824c22c672caa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19a54e80934c802109ae7175cc824c22c672caa6", "html_url": "https://github.com/rust-lang/rust/commit/19a54e80934c802109ae7175cc824c22c672caa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19a54e80934c802109ae7175cc824c22c672caa6/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d01aa8a4815207d83664353895ac168b7564e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d01aa8a4815207d83664353895ac168b7564e4b", "html_url": "https://github.com/rust-lang/rust/commit/7d01aa8a4815207d83664353895ac168b7564e4b"}], "stats": {"total": 135, "additions": 134, "deletions": 1}, "files": [{"sha": "ef0f11ecfb9b49bf29831a4d3cb91c0bfd72bf87", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/19a54e80934c802109ae7175cc824c22c672caa6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a54e80934c802109ae7175cc824c22c672caa6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=19a54e80934c802109ae7175cc824c22c672caa6", "patch": "@@ -27,6 +27,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::QueryRegionConstraint;\n use rustc::infer::outlives::env::RegionBoundPairs;\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n+use rustc::infer::type_variable::TypeVariableOrigin;\n use rustc::mir::interpret::EvalErrorKind::BoundsCheck;\n use rustc::mir::tcx::PlaceTy;\n use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext, NonMutatingUseContext};\n@@ -2103,7 +2104,44 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 self.add_reborrow_constraint(location, region, borrowed_place);\n             }\n \n-            // FIXME: These other cases have to be implemented in future PRs\n+            Rvalue::BinaryOp(BinOp::Eq, left, right)\n+            | Rvalue::BinaryOp(BinOp::Ne, left, right)\n+            | Rvalue::BinaryOp(BinOp::Lt, left, right)\n+            | Rvalue::BinaryOp(BinOp::Le, left, right)\n+            | Rvalue::BinaryOp(BinOp::Gt, left, right)\n+            | Rvalue::BinaryOp(BinOp::Ge, left, right) => {\n+                let ty_left = left.ty(mir, tcx);\n+                if let ty::RawPtr(_) | ty::FnPtr(_) = ty_left.sty {\n+                    let ty_right = right.ty(mir, tcx);\n+                    let common_ty = self.infcx.next_ty_var(\n+                        TypeVariableOrigin::MiscVariable(mir.source_info(location).span),\n+                    );\n+                    self.sub_types(\n+                        common_ty,\n+                        ty_left,\n+                        location.to_locations(),\n+                        ConstraintCategory::Boring\n+                    ).unwrap_or_else(|err| {\n+                        bug!(\"Could not equate type variable with {:?}: {:?}\", ty_left, err)\n+                    });\n+                    if let Err(terr) = self.sub_types(\n+                        common_ty,\n+                        ty_right,\n+                        location.to_locations(),\n+                        ConstraintCategory::Boring\n+                    ) {\n+                        span_mirbug!(\n+                            self,\n+                            rvalue,\n+                            \"unexpected comparison types {:?} and {:?} yields {:?}\",\n+                            ty_left,\n+                            ty_right,\n+                            terr\n+                        )\n+                    }\n+                }\n+            }\n+\n             Rvalue::Use(..)\n             | Rvalue::Len(..)\n             | Rvalue::BinaryOp(..)"}, {"sha": "3c900356fab3b0bba2ab44f20d367bb0a83e28d9", "filename": "src/test/ui/nll/type-check-pointer-comparisons.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/19a54e80934c802109ae7175cc824c22c672caa6/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19a54e80934c802109ae7175cc824c22c672caa6/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.rs?ref=19a54e80934c802109ae7175cc824c22c672caa6", "patch": "@@ -0,0 +1,33 @@\n+#![feature(nll)]\n+\n+// Check that we assert that pointers have a common subtype for comparisons\n+\n+fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n+    x == y;\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR lifetime may not live long enough\n+}\n+\n+fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n+    x == y;\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR lifetime may not live long enough\n+}\n+\n+fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n+    f == g;\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR lifetime may not live long enough\n+}\n+\n+fn compare_hr_fn_ptr<'a>(f: fn(&'a i32), g: fn(&i32)) {\n+    // Ideally this should compile with the operands swapped as well, but HIR\n+    // type checking prevents it (and stops compilation) for now.\n+    f == g; // OK\n+}\n+\n+fn compare_const_fn_ptr<'a>(f: *const fn(&'a i32), g: *const fn(&i32)) {\n+    f == g; // OK\n+}\n+\n+fn main() {}"}, {"sha": "c0a994cfb6381d9464649782286d3f5d28153266", "filename": "src/test/ui/nll/type-check-pointer-comparisons.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/19a54e80934c802109ae7175cc824c22c672caa6/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/19a54e80934c802109ae7175cc824c22c672caa6/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Ftype-check-pointer-comparisons.stderr?ref=19a54e80934c802109ae7175cc824c22c672caa6", "patch": "@@ -0,0 +1,62 @@\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:6:5\n+   |\n+LL | fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     x == y;\n+   |     ^ requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:6:10\n+   |\n+LL | fn compare_const<'a, 'b>(x: *const &mut &'a i32, y: *const &mut &'b i32) {\n+   |                  --  -- lifetime `'b` defined here\n+   |                  |\n+   |                  lifetime `'a` defined here\n+LL |     x == y;\n+   |          ^ requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:12:5\n+   |\n+LL | fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n+   |                --  -- lifetime `'b` defined here\n+   |                |\n+   |                lifetime `'a` defined here\n+LL |     x == y;\n+   |     ^ requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:12:10\n+   |\n+LL | fn compare_mut<'a, 'b>(x: *mut &'a i32, y: *mut &'b i32) {\n+   |                --  -- lifetime `'b` defined here\n+   |                |\n+   |                lifetime `'a` defined here\n+LL |     x == y;\n+   |          ^ requires that `'b` must outlive `'a`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:18:5\n+   |\n+LL | fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n+   |                   --  -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+LL |     f == g;\n+   |     ^ requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/type-check-pointer-comparisons.rs:18:10\n+   |\n+LL | fn compare_fn_ptr<'a, 'b, 'c>(f: fn(&'c mut &'a i32), g: fn(&'c mut &'b i32)) {\n+   |                   --  -- lifetime `'b` defined here\n+   |                   |\n+   |                   lifetime `'a` defined here\n+LL |     f == g;\n+   |          ^ requires that `'b` must outlive `'a`\n+\n+error: aborting due to 6 previous errors\n+"}]}