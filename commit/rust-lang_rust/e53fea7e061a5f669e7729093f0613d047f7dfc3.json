{"sha": "e53fea7e061a5f669e7729093f0613d047f7dfc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1M2ZlYTdlMDYxYTVmNjY5ZTc3MjkwOTNmMDYxM2QwNDdmN2RmYzM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T19:20:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T23:13:04Z"}, "message": "Use intra-doc links on HashMap", "tree": {"sha": "2ae78ba19b2305a28b53d7918d01331f2eaad705", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ae78ba19b2305a28b53d7918d01331f2eaad705"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e53fea7e061a5f669e7729093f0613d047f7dfc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e53fea7e061a5f669e7729093f0613d047f7dfc3", "html_url": "https://github.com/rust-lang/rust/commit/e53fea7e061a5f669e7729093f0613d047f7dfc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e53fea7e061a5f669e7729093f0613d047f7dfc3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26ba0e12e838bb674064c5e04d20ed91b7420e2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/26ba0e12e838bb674064c5e04d20ed91b7420e2e", "html_url": "https://github.com/rust-lang/rust/commit/26ba0e12e838bb674064c5e04d20ed91b7420e2e"}], "stats": {"total": 88, "additions": 19, "deletions": 69}, "files": [{"sha": "7b48deee1abdf73f013f49637742fc7e13424d46", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 19, "deletions": 68, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e53fea7e061a5f669e7729093f0613d047f7dfc3/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53fea7e061a5f669e7729093f0613d047f7dfc3/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=e53fea7e061a5f669e7729093f0613d047f7dfc3", "patch": "@@ -148,14 +148,11 @@ use crate::sys;\n /// The easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\n /// We must also derive [`PartialEq`].\n ///\n-/// [`Eq`]: ../../std/cmp/trait.Eq.html\n-/// [`Hash`]: ../../std/hash/trait.Hash.html\n-/// [`PartialEq`]: ../../std/cmp/trait.PartialEq.html\n-/// [`RefCell`]: ../../std/cell/struct.RefCell.html\n-/// [`Cell`]: ../../std/cell/struct.Cell.html\n-/// [`default`]: #method.default\n-/// [`with_hasher`]: #method.with_hasher\n-/// [`with_capacity_and_hasher`]: #method.with_capacity_and_hasher\n+/// [`RefCell`]: crate::cell::RefCell\n+/// [`Cell`]: crate::cell::Cell\n+/// [`default`]: Default::default\n+/// [`with_hasher`]: Self::with_hasher\n+/// [`with_capacity_and_hasher`]: Self::with_capacity_and_hasher\n /// [`fnv`]: https://crates.io/crates/fnv\n ///\n /// ```\n@@ -264,8 +261,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// let mut map = HashMap::with_hasher(s);\n     /// map.insert(1, 2);\n     /// ```\n-    ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_hasher(hash_builder: S) -> HashMap<K, V, S> {\n@@ -296,8 +291,6 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// let mut map = HashMap::with_capacity_and_hasher(10, s);\n     /// map.insert(1, 2);\n     /// ```\n-    ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n     pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n@@ -524,8 +517,6 @@ impl<K, V, S> HashMap<K, V, S> {\n \n     /// Returns a reference to the map's [`BuildHasher`].\n     ///\n-    /// [`BuildHasher`]: ../../std/hash/trait.BuildHasher.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -556,8 +547,6 @@ where\n     ///\n     /// Panics if the new allocation size overflows [`usize`].\n     ///\n-    /// [`usize`]: ../../std/primitive.usize.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -676,9 +665,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -705,9 +691,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -734,9 +717,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -763,9 +743,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -797,8 +774,7 @@ where\n     /// types that can be `==` without being identical. See the [module-level\n     /// documentation] for more.\n     ///\n-    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n-    /// [module-level documentation]: index.html#insert-and-complex-keys\n+    /// [module-level documentation]: crate::collections#insert-and-complex-keys\n     ///\n     /// # Examples\n     ///\n@@ -826,9 +802,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -856,9 +829,6 @@ where\n     /// [`Hash`] and [`Eq`] on the borrowed form *must* match those for\n     /// the key type.\n     ///\n-    /// [`Eq`]: ../../std/cmp/trait.Eq.html\n-    /// [`Hash`]: ../../std/hash/trait.Hash.html\n-    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1040,8 +1010,7 @@ where\n /// This `struct` is created by the [`iter`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`iter`]: struct.HashMap.html#method.iter\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`iter`]: HashMap::iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     base: base::Iter<'a, K, V>,\n@@ -1068,8 +1037,7 @@ impl<K: Debug, V: Debug> fmt::Debug for Iter<'_, K, V> {\n /// This `struct` is created by the [`iter_mut`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`iter_mut`]: struct.HashMap.html#method.iter_mut\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`iter_mut`]: HashMap::iter_mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     base: base::IterMut<'a, K, V>,\n@@ -1088,8 +1056,7 @@ impl<'a, K, V> IterMut<'a, K, V> {\n /// This `struct` is created by the [`into_iter`] method on [`HashMap`]\n /// (provided by the `IntoIterator` trait). See its documentation for more.\n ///\n-/// [`into_iter`]: struct.HashMap.html#method.into_iter\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`into_iter`]: IntoIterator::into_iter\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     base: base::IntoIter<K, V>,\n@@ -1108,8 +1075,7 @@ impl<K, V> IntoIter<K, V> {\n /// This `struct` is created by the [`keys`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`keys`]: struct.HashMap.html#method.keys\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`keys`]: HashMap::keys\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1136,8 +1102,7 @@ impl<K: Debug, V> fmt::Debug for Keys<'_, K, V> {\n /// This `struct` is created by the [`values`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`values`]: struct.HashMap.html#method.values\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`values`]: HashMap::values\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -1164,8 +1129,7 @@ impl<K, V: Debug> fmt::Debug for Values<'_, K, V> {\n /// This `struct` is created by the [`drain`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`drain`]: struct.HashMap.html#method.drain\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`drain`]: HashMap::drain\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, K: 'a, V: 'a> {\n     base: base::Drain<'a, K, V>,\n@@ -1184,8 +1148,7 @@ impl<'a, K, V> Drain<'a, K, V> {\n /// This `struct` is created by the [`values_mut`] method on [`HashMap`]. See its\n /// documentation for more.\n ///\n-/// [`values_mut`]: struct.HashMap.html#method.values_mut\n-/// [`HashMap`]: struct.HashMap.html\n+/// [`values_mut`]: HashMap::values_mut\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n@@ -1195,7 +1158,7 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n ///\n /// See the [`HashMap::raw_entry_mut`] docs for usage examples.\n ///\n-/// [`HashMap::raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n+/// [`HashMap::raw_entry_mut`]: HashMap::raw_entry_mut\n \n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n@@ -1209,9 +1172,8 @@ pub struct RawEntryBuilderMut<'a, K: 'a, V: 'a, S: 'a> {\n /// This `enum` is constructed through the [`raw_entry_mut`] method on [`HashMap`],\n /// then calling one of the methods of that [`RawEntryBuilderMut`].\n ///\n-/// [`HashMap`]: struct.HashMap.html\n /// [`Entry`]: enum.Entry.html\n-/// [`raw_entry_mut`]: struct.HashMap.html#method.raw_entry_mut\n+/// [`raw_entry_mut`]: HashMap::raw_entry_mut\n /// [`RawEntryBuilderMut`]: struct.RawEntryBuilderMut.html\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n@@ -1223,17 +1185,13 @@ pub enum RawEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n \n /// A view into an occupied entry in a `HashMap`.\n /// It is part of the [`RawEntryMut`] enum.\n-///\n-/// [`RawEntryMut`]: enum.RawEntryMut.html\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawOccupiedEntryMut<'a, K: 'a, V: 'a> {\n     base: base::RawOccupiedEntryMut<'a, K, V>,\n }\n \n /// A view into a vacant entry in a `HashMap`.\n /// It is part of the [`RawEntryMut`] enum.\n-///\n-/// [`RawEntryMut`]: enum.RawEntryMut.html\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n     base: base::RawVacantEntryMut<'a, K, V, S>,\n@@ -1243,7 +1201,7 @@ pub struct RawVacantEntryMut<'a, K: 'a, V: 'a, S: 'a> {\n ///\n /// See the [`HashMap::raw_entry`] docs for usage examples.\n ///\n-/// [`HashMap::raw_entry`]: struct.HashMap.html#method.raw_entry\n+/// [`HashMap::raw_entry`]: HashMap::raw_entry\n #[unstable(feature = \"hash_raw_entry\", issue = \"56167\")]\n pub struct RawEntryBuilder<'a, K: 'a, V: 'a, S: 'a> {\n     map: &'a HashMap<K, V, S>,\n@@ -1597,8 +1555,7 @@ impl<K, V, S> Debug for RawEntryBuilder<'_, K, V, S> {\n ///\n /// This `enum` is constructed from the [`entry`] method on [`HashMap`].\n ///\n-/// [`HashMap`]: struct.HashMap.html\n-/// [`entry`]: struct.HashMap.html#method.entry\n+/// [`entry`]: HashMap::entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n     /// An occupied entry.\n@@ -2156,7 +2113,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// If you need a reference to the `OccupiedEntry` which may outlive the\n     /// destruction of the `Entry` value, see [`into_mut`].\n     ///\n-    /// [`into_mut`]: #method.into_mut\n+    /// [`into_mut`]: Self::into_mut\n     ///\n     /// # Examples\n     ///\n@@ -2189,7 +2146,7 @@ impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     ///\n     /// If you need multiple references to the `OccupiedEntry`, see [`get_mut`].\n     ///\n-    /// [`get_mut`]: #method.get_mut\n+    /// [`get_mut`]: Self::get_mut\n     ///\n     /// # Examples\n     ///\n@@ -2475,9 +2432,6 @@ where\n /// [`Hasher`], but the hashers created by two different `RandomState`\n /// instances are unlikely to produce the same result for the same values.\n ///\n-/// [`HashMap`]: struct.HashMap.html\n-/// [`Hasher`]: ../../hash/trait.Hasher.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -2547,9 +2501,6 @@ impl BuildHasher for RandomState {\n ///\n /// The internal algorithm is not specified, and so it and its hashes should\n /// not be relied upon over releases.\n-///\n-/// [`RandomState`]: struct.RandomState.html\n-/// [`Hasher`]: ../../hash/trait.Hasher.html\n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n #[allow(deprecated)]\n #[derive(Clone, Debug)]"}, {"sha": "a689f3e85ba2467c93b0698ccb58a69116f667eb", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e53fea7e061a5f669e7729093f0613d047f7dfc3/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e53fea7e061a5f669e7729093f0613d047f7dfc3/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=e53fea7e061a5f669e7729093f0613d047f7dfc3", "patch": "@@ -130,7 +130,6 @@ fn check(cache: &mut Cache, root: &Path, file: &Path, errors: &mut bool) -> Opti\n         || file.ends_with(\"alloc/collections/btree_set/struct.BTreeSet.html\")\n         || file.ends_with(\"std/collections/btree_map/struct.BTreeMap.html\")\n         || file.ends_with(\"std/collections/btree_set/struct.BTreeSet.html\")\n-        || file.ends_with(\"std/collections/hash_map/struct.HashMap.html\")\n         || file.ends_with(\"std/collections/hash_set/struct.HashSet.html\")\n     {\n         return None;"}]}