{"sha": "f10f51833c8ea715ef512eb283f1d44f76701378", "node_id": "C_kwDOAAsO6NoAKGYxMGY1MTgzM2M4ZWE3MTVlZjUxMmViMjgzZjFkNDRmNzY3MDEzNzg", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-27T12:54:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-12-28T14:00:55Z"}, "message": "move stmt to entry points", "tree": {"sha": "d231196179669cf374d4dc708f74e3a57c5d8867", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d231196179669cf374d4dc708f74e3a57c5d8867"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f10f51833c8ea715ef512eb283f1d44f76701378", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f10f51833c8ea715ef512eb283f1d44f76701378", "html_url": "https://github.com/rust-lang/rust/commit/f10f51833c8ea715ef512eb283f1d44f76701378", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f10f51833c8ea715ef512eb283f1d44f76701378/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "519ee21bcb754bf972b5f127f17035c5efe196d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/519ee21bcb754bf972b5f127f17035c5efe196d0", "html_url": "https://github.com/rust-lang/rust/commit/519ee21bcb754bf972b5f127f17035c5efe196d0"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "b5d1e098c4fcc93a4e520ca721d81dc3a8ba0b47", "filename": "crates/mbe/src/expander/matcher.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fexpander%2Fmatcher.rs?ref=f10f51833c8ea715ef512eb283f1d44f76701378", "patch": "@@ -694,7 +694,11 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n         \"expr\" => ParserEntryPoint::Expr,\n         \"ty\" => ParserEntryPoint::Type,\n         \"pat\" | \"pat_param\" => ParserEntryPoint::Pattern, // FIXME: edition2021\n-        \"stmt\" => ParserEntryPoint::Statement,\n+        \"stmt\" => {\n+            return input\n+                .expect_fragment2(parser::PrefixEntryPoint::Stmt)\n+                .map(|tt| tt.map(Fragment::Tokens));\n+        }\n         \"block\" => {\n             return input\n                 .expect_fragment2(parser::PrefixEntryPoint::Block)"}, {"sha": "f15272ce87008d6d498de980a7c8adb45ff929a1", "filename": "crates/parser/src/grammar.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fparser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fparser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar.rs?ref=f10f51833c8ea715ef512eb283f1d44f76701378", "patch": "@@ -57,6 +57,10 @@ pub(crate) mod entry {\n         pub(crate) fn block(p: &mut Parser) {\n             expressions::block_expr(p);\n         }\n+\n+        pub(crate) fn stmt(p: &mut Parser) {\n+            expressions::stmt(p, expressions::StmtWithSemi::No, true);\n+        }\n     }\n }\n \n@@ -70,8 +74,6 @@ pub(crate) mod entry_points {\n         m.complete(p, SOURCE_FILE);\n     }\n \n-    pub(crate) use expressions::block_expr;\n-\n     pub(crate) use paths::type_path as path;\n \n     pub(crate) use patterns::pattern_single as pattern;\n@@ -82,10 +84,6 @@ pub(crate) mod entry_points {\n         let _ = expressions::expr(p);\n     }\n \n-    pub(crate) fn stmt(p: &mut Parser) {\n-        expressions::stmt(p, expressions::StmtWithSemi::No, true);\n-    }\n-\n     pub(crate) fn stmt_optional_semi(p: &mut Parser) {\n         expressions::stmt(p, expressions::StmtWithSemi::Optional, false);\n     }"}, {"sha": "97b717346b18504a83801b9206fa31da2ed5e6a3", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f10f51833c8ea715ef512eb283f1d44f76701378/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=f10f51833c8ea715ef512eb283f1d44f76701378", "patch": "@@ -53,13 +53,15 @@ pub use crate::{\n pub enum PrefixEntryPoint {\n     Vis,\n     Block,\n+    Stmt,\n }\n \n impl PrefixEntryPoint {\n     pub fn parse(&self, input: &Input) -> Output {\n         let entry_point: fn(&'_ mut parser::Parser) = match self {\n             PrefixEntryPoint::Vis => grammar::entry::prefix::vis,\n             PrefixEntryPoint::Block => grammar::entry::prefix::block,\n+            PrefixEntryPoint::Stmt => grammar::entry::prefix::stmt,\n         };\n         let mut p = parser::Parser::new(input);\n         entry_point(&mut p);\n@@ -77,13 +79,10 @@ pub enum ParserEntryPoint {\n     SourceFile,\n     Path,\n     Expr,\n-    Statement,\n     StatementOptionalSemi,\n     Type,\n     Pattern,\n     Item,\n-    Block,\n-    // Visibility,\n     MetaItem,\n     Items,\n     Statements,\n@@ -111,10 +110,7 @@ pub fn parse(inp: &Input, entry_point: ParserEntryPoint) -> Output {\n         ParserEntryPoint::Type => grammar::entry_points::type_,\n         ParserEntryPoint::Pattern => grammar::entry_points::pattern,\n         ParserEntryPoint::Item => grammar::entry_points::item,\n-        ParserEntryPoint::Block => grammar::entry_points::block_expr,\n-        // ParserEntryPoint::Visibility => grammar::entry_points::visibility,\n         ParserEntryPoint::MetaItem => grammar::entry_points::meta_item,\n-        ParserEntryPoint::Statement => grammar::entry_points::stmt,\n         ParserEntryPoint::StatementOptionalSemi => grammar::entry_points::stmt_optional_semi,\n         ParserEntryPoint::Items => grammar::entry_points::macro_items,\n         ParserEntryPoint::Statements => grammar::entry_points::macro_stmts,"}]}