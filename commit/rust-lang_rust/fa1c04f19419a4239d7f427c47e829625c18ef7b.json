{"sha": "fa1c04f19419a4239d7f427c47e829625c18ef7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhMWMwNGYxOTQxOWE0MjM5ZDdmNDI3YzQ3ZTgyOTYyNWMxOGVmN2I=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-14T07:19:07Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2015-11-14T07:19:07Z"}, "message": "Factor out lvalue evaluation and use a single value stack.", "tree": {"sha": "b7d5864f698939ff0b54efb7e557936d3c8128ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7d5864f698939ff0b54efb7e557936d3c8128ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa1c04f19419a4239d7f427c47e829625c18ef7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa1c04f19419a4239d7f427c47e829625c18ef7b", "html_url": "https://github.com/rust-lang/rust/commit/fa1c04f19419a4239d7f427c47e829625c18ef7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa1c04f19419a4239d7f427c47e829625c18ef7b/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f0eac2c7848a95e84f965e1225e2110da7ae0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0eac2c7848a95e84f965e1225e2110da7ae0fa", "html_url": "https://github.com/rust-lang/rust/commit/3f0eac2c7848a95e84f965e1225e2110da7ae0fa"}], "stats": {"total": 76, "additions": 43, "deletions": 33}, "files": [{"sha": "987a74b9b63480b7148d0d22e25e8e7b225f63fd", "filename": "src/interpreter.rs", "status": "modified", "additions": 43, "deletions": 33, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fa1c04f19419a4239d7f427c47e829625c18ef7b/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa1c04f19419a4239d7f427c47e829625c18ef7b/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=fa1c04f19419a4239d7f427c47e829625c18ef7b", "patch": "@@ -4,55 +4,67 @@ use rustc_mir::repr::{self as mir, Mir};\n use syntax::ast::Attribute;\n use syntax::attr::AttrMetaMethods;\n \n+use std::iter;\n+\n #[derive(Clone, Debug)]\n enum Value {\n     Uninit,\n     Bool(bool),\n     Int(i64), // FIXME: Should be bit-width aware.\n }\n \n-struct Interpreter<'tcx> {\n-    mir: &'tcx Mir<'tcx>,\n-    var_vals: Vec<Value>,\n-    temp_vals: Vec<Value>,\n-    result: Value,\n+struct Interpreter {\n+    stack: Vec<Value>,\n+    num_vars: usize,\n+    num_temps: usize,\n }\n \n-impl<'tcx> Interpreter<'tcx> {\n-    fn new(mir: &'tcx Mir<'tcx>) -> Self {\n+impl Interpreter {\n+    fn new() -> Self {\n         Interpreter {\n-            mir: mir,\n-            var_vals: vec![Value::Uninit; mir.var_decls.len()],\n-            temp_vals: vec![Value::Uninit; mir.temp_decls.len()],\n-            result: Value::Uninit,\n+            stack: Vec::new(),\n+            num_vars: 0,\n+            num_temps: 0,\n         }\n     }\n \n-    fn run(&mut self) -> Value {\n-        let start_block = self.mir.basic_block_data(mir::START_BLOCK);\n+    fn run(&mut self, mir: &Mir) -> Value {\n+        let start_block = mir.basic_block_data(mir::START_BLOCK);\n+\n+        self.num_vars = mir.var_decls.len();\n+        self.num_temps = mir.temp_decls.len();\n+\n+        self.stack.extend(\n+            iter::repeat(Value::Uninit).take(1 + self.num_vars + self.num_temps));\n \n         for stmt in &start_block.statements {\n-            use rustc_mir::repr::Lvalue::*;\n             use rustc_mir::repr::StatementKind::*;\n \n             match stmt.kind {\n-                Assign(ref lv, ref rv) => {\n-                    let val = self.eval_rvalue(rv);\n-\n-                    let spot = match *lv {\n-                        Var(i) => &mut self.var_vals[i as usize],\n-                        Temp(i) => &mut self.temp_vals[i as usize],\n-                        ReturnPointer => &mut self.result,\n-                        _ => unimplemented!(),\n-                    };\n-\n-                    *spot = val;\n+                Assign(ref lvalue, ref rvalue) => {\n+                    let index = self.eval_lvalue(lvalue);\n+                    let value = self.eval_rvalue(rvalue);\n+                    self.stack[index] = value;\n                 }\n-                Drop(_kind, ref _lv) => { /* TODO */ },\n+\n+                Drop(_kind, ref _lv) => {\n+                    // TODO\n+                },\n             }\n         }\n \n-        self.result.clone()\n+        self.stack[self.eval_lvalue(&mir::Lvalue::ReturnPointer)].clone()\n+    }\n+\n+    fn eval_lvalue(&self, lvalue: &mir::Lvalue) -> usize {\n+        use rustc_mir::repr::Lvalue::*;\n+\n+        match *lvalue {\n+            Var(i) => 1 + i as usize,\n+            Temp(i) => 1 + self.num_vars + i as usize,\n+            ReturnPointer => 0,\n+            _ => unimplemented!(),\n+        }\n     }\n \n     fn eval_rvalue(&mut self, rvalue: &mir::Rvalue) -> Value {\n@@ -102,19 +114,17 @@ impl<'tcx> Interpreter<'tcx> {\n     }\n \n     fn eval_operand(&self, op: &mir::Operand) -> Value {\n-        use rustc_mir::repr::Lvalue::*;\n         use rustc_mir::repr::Operand::*;\n \n         match *op {\n-            Consume(Var(i)) => self.var_vals[i as usize].clone(),\n-            Consume(Temp(i)) => self.temp_vals[i as usize].clone(),\n+            Consume(ref lvalue) => self.stack[self.eval_lvalue(lvalue)].clone(),\n+\n             Constant(ref constant) => {\n                 match constant.literal {\n                     mir::Literal::Value { value: ref const_val } => self.eval_constant(const_val),\n                     mir::Literal::Item { .. } => unimplemented!(),\n                 }\n             }\n-            _ => unimplemented!(),\n         }\n     }\n \n@@ -142,8 +152,8 @@ pub fn interpret_start_points<'tcx>(tcx: &ty::ctxt<'tcx>, mir_map: &MirMap<'tcx>\n                 let item = tcx.map.expect_item(id);\n \n                 println!(\"Interpreting: {}\", item.name);\n-                let mut interpreter = Interpreter::new(mir);\n-                let val = interpreter.run();\n+                let mut interpreter = Interpreter::new();\n+                let val = interpreter.run(mir);\n                 let val_str = format!(\"{:?}\", val);\n \n                 if !check_expected(&val_str, attr) {"}]}