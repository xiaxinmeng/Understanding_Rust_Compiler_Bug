{"sha": "6a6c64401681471bb3223a2f4190ecd82a590cfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmM2NDQwMTY4MTQ3MWJiMzIyM2EyZjQxOTBlY2Q4MmE1OTBjZmE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-06T11:30:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-06T11:30:54Z"}, "message": "Rollup merge of #84328 - Folyd:stablize_map_into_keys_values, r=m-ou-se\n\nStablize {HashMap,BTreeMap}::into_{keys,values}\n\nI would propose to stabilize `{HashMap,BTreeMap}::into_{keys,values}`( aka. `map_into_keys_values`).\n\nCloses #75294.", "tree": {"sha": "494b225f5c0596d8d6abd0cb54886d3001384bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/494b225f5c0596d8d6abd0cb54886d3001384bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6c64401681471bb3223a2f4190ecd82a590cfa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgk9NuCRBK7hj4Ov3rIwAA9JgIAKjHWNHPsAucnNcdTneeLUM+\nPBYPMa9XLdrNGpBMYJCjJdoZs3vs9vhfHQFe9b+Bpm5JhLhLSfDZs5K6EbeOyVOR\nLeRku/nCqB+vmRG4AvZiOx0/hKm+7qUPDn6c/5w1E8wM/cglKb0OOyX8AvCUu6uE\nbZTtTeoZKB4ZMfv4pHfcWz0MW9YOzhfkltxFqscedTHValSTk6sRe+QlSg07l1eo\nUmhJ3IcuIEsxfgqtueexTDoEHIgIDKXGLZHr1EDczJsXz2+fQww/myR0Ee6rNvkN\n2YByHVUrwKB9ZRO0IdRE1mlHOd2HKTN2AEvD9iEHjFkh8W02tX99tgptmUQ/4b4=\n=CBuo\n-----END PGP SIGNATURE-----\n", "payload": "tree 494b225f5c0596d8d6abd0cb54886d3001384bef\nparent 5dcdeb81e16c9debbf142f8e31d635b0c1149255\nparent b6f3dbb65d0be4ecf94bb87f859db1f66b79f74d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1620300654 +0200\ncommitter GitHub <noreply@github.com> 1620300654 +0200\n\nRollup merge of #84328 - Folyd:stablize_map_into_keys_values, r=m-ou-se\n\nStablize {HashMap,BTreeMap}::into_{keys,values}\n\nI would propose to stabilize `{HashMap,BTreeMap}::into_{keys,values}`( aka. `map_into_keys_values`).\n\nCloses #75294.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6c64401681471bb3223a2f4190ecd82a590cfa", "html_url": "https://github.com/rust-lang/rust/commit/6a6c64401681471bb3223a2f4190ecd82a590cfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6c64401681471bb3223a2f4190ecd82a590cfa/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dcdeb81e16c9debbf142f8e31d635b0c1149255", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dcdeb81e16c9debbf142f8e31d635b0c1149255", "html_url": "https://github.com/rust-lang/rust/commit/5dcdeb81e16c9debbf142f8e31d635b0c1149255"}, {"sha": "b6f3dbb65d0be4ecf94bb87f859db1f66b79f74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f3dbb65d0be4ecf94bb87f859db1f66b79f74d", "html_url": "https://github.com/rust-lang/rust/commit/b6f3dbb65d0be4ecf94bb87f859db1f66b79f74d"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "0a46387c34e9c09fae28bd7628f8825605b93cbf", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a6c64401681471bb3223a2f4190ecd82a590cfa/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6c64401681471bb3223a2f4190ecd82a590cfa/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=6a6c64401681471bb3223a2f4190ecd82a590cfa", "patch": "@@ -398,12 +398,12 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n /// See its documentation for more.\n ///\n /// [`into_keys`]: BTreeMap::into_keys\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(key, _)| key)).finish()\n@@ -416,12 +416,12 @@ impl<K: fmt::Debug, V> fmt::Debug for IntoKeys<K, V> {\n /// See its documentation for more.\n ///\n /// [`into_values`]: BTreeMap::into_values\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V: fmt::Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, val)| val)).finish()\n@@ -1242,7 +1242,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1253,7 +1252,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(keys, [1, 2]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -1265,7 +1264,6 @@ impl<K, V> BTreeMap<K, V> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::BTreeMap;\n     ///\n     /// let mut a = BTreeMap::new();\n@@ -1276,7 +1274,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(values, [\"hello\", \"goodbye\"]);\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1776,7 +1774,7 @@ impl<'a, K, V> Range<'a, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -1801,24 +1799,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> DoubleEndedIterator for IntoKeys<K, V> {\n     fn next_back(&mut self) -> Option<K> {\n         self.inner.next_back().map(|(k, _)| k)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -1835,21 +1833,21 @@ impl<K, V> Iterator for IntoValues<K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> DoubleEndedIterator for IntoValues<K, V> {\n     fn next_back(&mut self) -> Option<V> {\n         self.inner.next_back().map(|(_, v)| v)\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n #[stable(feature = \"btree_range\", since = \"1.17.0\")]"}, {"sha": "a1f52a9c2e88019534c64fe6355dfb791d1ad9c0", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6a6c64401681471bb3223a2f4190ecd82a590cfa/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6c64401681471bb3223a2f4190ecd82a590cfa/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=6a6c64401681471bb3223a2f4190ecd82a590cfa", "patch": "@@ -962,7 +962,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -973,7 +972,7 @@ where\n     /// let vec: Vec<&str> = map.into_keys().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_keys(self) -> IntoKeys<K, V> {\n         IntoKeys { inner: self.into_iter() }\n     }\n@@ -985,7 +984,6 @@ where\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(map_into_keys_values)]\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map = HashMap::new();\n@@ -996,7 +994,7 @@ where\n     /// let vec: Vec<i32> = map.into_values().collect();\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+    #[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n     pub fn into_values(self) -> IntoValues<K, V> {\n         IntoValues { inner: self.into_iter() }\n     }\n@@ -1405,15 +1403,13 @@ pub struct ValuesMut<'a, K: 'a, V: 'a> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_keys();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoKeys<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -1428,15 +1424,13 @@ pub struct IntoKeys<K, V> {\n /// # Example\n ///\n /// ```\n-/// #![feature(map_into_keys_values)]\n-///\n /// use std::collections::HashMap;\n ///\n /// let mut map = HashMap::new();\n /// map.insert(\"a\", 1);\n /// let iter_keys = map.into_values();\n /// ```\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n pub struct IntoValues<K, V> {\n     inner: IntoIter<K, V>,\n }\n@@ -2137,7 +2131,7 @@ impl<K, V: fmt::Debug> fmt::Debug for ValuesMut<'_, K, V> {\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoKeys<K, V> {\n     type Item = K;\n \n@@ -2150,24 +2144,24 @@ impl<K, V> Iterator for IntoKeys<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoKeys<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoKeys<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K: Debug, V> fmt::Debug for IntoKeys<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(k, _)| k)).finish()\n     }\n }\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> Iterator for IntoValues<K, V> {\n     type Item = V;\n \n@@ -2180,17 +2174,17 @@ impl<K, V> Iterator for IntoValues<K, V> {\n         self.inner.size_hint()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> ExactSizeIterator for IntoValues<K, V> {\n     #[inline]\n     fn len(&self) -> usize {\n         self.inner.len()\n     }\n }\n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V> FusedIterator for IntoValues<K, V> {}\n \n-#[unstable(feature = \"map_into_keys_values\", issue = \"75294\")]\n+#[stable(feature = \"map_into_keys_values\", since = \"1.54.0\")]\n impl<K, V: Debug> fmt::Debug for IntoValues<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         f.debug_list().entries(self.inner.iter().map(|(_, v)| v)).finish()"}]}