{"sha": "f152be7a425e7d66f717ffe8b210bcacf82539cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNTJiZTdhNDI1ZTdkNjZmNzE3ZmZlOGIyMTBiY2FjZjgyNTM5Y2M=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-16T00:01:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:48Z"}, "message": "libsyntax: Remove the unnecessary `src` field from the lexer", "tree": {"sha": "278c9a4b31a3550563653bd28db534a05beac977", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/278c9a4b31a3550563653bd28db534a05beac977"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f152be7a425e7d66f717ffe8b210bcacf82539cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f152be7a425e7d66f717ffe8b210bcacf82539cc", "html_url": "https://github.com/rust-lang/rust/commit/f152be7a425e7d66f717ffe8b210bcacf82539cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f152be7a425e7d66f717ffe8b210bcacf82539cc/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0327d8a073a9e094c9cd046c739983f9850ebeeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0327d8a073a9e094c9cd046c739983f9850ebeeb", "html_url": "https://github.com/rust-lang/rust/commit/0327d8a073a9e094c9cd046c739983f9850ebeeb"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "469d3d64f2496dc5fc804d8734a281c320c81300", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f152be7a425e7d66f717ffe8b210bcacf82539cc/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f152be7a425e7d66f717ffe8b210bcacf82539cc/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=f152be7a425e7d66f717ffe8b210bcacf82539cc", "patch": "@@ -42,7 +42,6 @@ pub struct TokenAndSpan {\n \n pub struct StringReader {\n     span_diagnostic: @SpanHandler,\n-    src: @str,\n     // The absolute offset within the codemap of the next character to read\n     pos: Cell<BytePos>,\n     // The absolute offset within the codemap of the last character read(curr)\n@@ -73,7 +72,6 @@ pub fn new_low_level_string_reader(span_diagnostic: @SpanHandler,\n     let initial_char = '\\n';\n     let r = @StringReader {\n         span_diagnostic: span_diagnostic,\n-        src: filemap.src,\n         pos: Cell::new(filemap.start_pos),\n         last_pos: Cell::new(filemap.start_pos),\n         col: Cell::new(CharPos(0)),\n@@ -93,7 +91,6 @@ pub fn new_low_level_string_reader(span_diagnostic: @SpanHandler,\n fn dup_string_reader(r: @StringReader) -> @StringReader {\n     @StringReader {\n         span_diagnostic: r.span_diagnostic,\n-        src: r.src,\n         pos: Cell::new(r.pos.get()),\n         last_pos: Cell::new(r.last_pos.get()),\n         col: Cell::new(r.col.get()),\n@@ -188,7 +185,7 @@ fn fatal_span_verbose(rdr: @StringReader,\n                    -> ! {\n     let mut m = m;\n     m.push_str(\": \");\n-    let s = rdr.src.slice(\n+    let s = rdr.filemap.src.slice(\n                   byte_offset(rdr, from_pos).to_uint(),\n                   byte_offset(rdr, to_pos).to_uint());\n     m.push_str(s);\n@@ -239,7 +236,7 @@ fn with_str_from_to<T>(\n                     end: BytePos,\n                     f: |s: &str| -> T)\n                     -> T {\n-    f(rdr.src.slice(\n+    f(rdr.filemap.src.slice(\n             byte_offset(rdr, start).to_uint(),\n             byte_offset(rdr, end).to_uint()))\n }\n@@ -249,12 +246,12 @@ fn with_str_from_to<T>(\n pub fn bump(rdr: &StringReader) {\n     rdr.last_pos.set(rdr.pos.get());\n     let current_byte_offset = byte_offset(rdr, rdr.pos.get()).to_uint();\n-    if current_byte_offset < (rdr.src).len() {\n+    if current_byte_offset < (rdr.filemap.src).len() {\n         assert!(rdr.curr.get() != unsafe {\n             transmute(-1u32)\n         }); // FIXME: #8971: unsound\n         let last_char = rdr.curr.get();\n-        let next = rdr.src.char_range_at(current_byte_offset);\n+        let next = rdr.filemap.src.char_range_at(current_byte_offset);\n         let byte_offset_diff = next.next - current_byte_offset;\n         rdr.pos.set(rdr.pos.get() + Pos::from_uint(byte_offset_diff));\n         rdr.curr.set(next.ch);\n@@ -277,8 +274,8 @@ pub fn is_eof(rdr: @StringReader) -> bool {\n }\n pub fn nextch(rdr: @StringReader) -> char {\n     let offset = byte_offset(rdr, rdr.pos.get()).to_uint();\n-    if offset < (rdr.src).len() {\n-        return rdr.src.char_at(offset);\n+    if offset < (rdr.filemap.src).len() {\n+        return rdr.filemap.src.char_at(offset);\n     } else { return unsafe { transmute(-1u32) }; } // FIXME: #8971: unsound\n }\n "}]}