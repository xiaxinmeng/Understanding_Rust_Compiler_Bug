{"sha": "adf53d4b068e216f0705ba2baae4cc21dd0988a3", "node_id": "C_kwDOAAsO6NoAKGFkZjUzZDRiMDY4ZTIxNmYwNzA1YmEyYmFhZTRjYzIxZGQwOTg4YTM", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-12-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-12-16T00:00:00Z"}, "message": "Remove dead code after destination propagation", "tree": {"sha": "6182cbd07f2505a16627434b4bed9426bb3de2ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6182cbd07f2505a16627434b4bed9426bb3de2ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf53d4b068e216f0705ba2baae4cc21dd0988a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf53d4b068e216f0705ba2baae4cc21dd0988a3", "html_url": "https://github.com/rust-lang/rust/commit/adf53d4b068e216f0705ba2baae4cc21dd0988a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf53d4b068e216f0705ba2baae4cc21dd0988a3/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec56537c4325ce5b798fc3628cbdd48ba4949ae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec56537c4325ce5b798fc3628cbdd48ba4949ae5", "html_url": "https://github.com/rust-lang/rust/commit/ec56537c4325ce5b798fc3628cbdd48ba4949ae5"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "74d8337653f034f968ea516556563ebd1dc068c1", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/adf53d4b068e216f0705ba2baae4cc21dd0988a3/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf53d4b068e216f0705ba2baae4cc21dd0988a3/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=adf53d4b068e216f0705ba2baae4cc21dd0988a3", "patch": "@@ -129,6 +129,7 @@\n \n use std::collections::hash_map::{Entry, OccupiedEntry};\n \n+use crate::simplify::remove_dead_blocks;\n use crate::MirPass;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::BitSet;\n@@ -235,6 +236,12 @@ impl<'tcx> MirPass<'tcx> for DestinationPropagation {\n             apply_merges(body, tcx, &merges, &merged_locals);\n         }\n \n+        if round_count != 0 {\n+            // Merging can introduce overlap between moved arguments and/or call destination in an\n+            // unreachable code, which validator considers to be ill-formed.\n+            remove_dead_blocks(tcx, body);\n+        }\n+\n         trace!(round_count);\n     }\n }"}, {"sha": "9ea756c271298de5a6651f01389609837ee30d6f", "filename": "src/test/mir-opt/dest-prop/unreachable.f.DestinationPropagation.diff", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/adf53d4b068e216f0705ba2baae4cc21dd0988a3/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/adf53d4b068e216f0705ba2baae4cc21dd0988a3/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.f.DestinationPropagation.diff?ref=adf53d4b068e216f0705ba2baae4cc21dd0988a3", "patch": "@@ -0,0 +1,86 @@\n+- // MIR for `f` before DestinationPropagation\n++ // MIR for `f` after DestinationPropagation\n+  \n+  fn f(_1: T) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/unreachable.rs:+0:19: +0:20\n+      let mut _0: ();                      // return place in scope 0 at $DIR/unreachable.rs:+0:25: +0:25\n+      let _2: T;                           // in scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n+      let mut _3: bool;                    // in scope 0 at $DIR/unreachable.rs:+2:8: +2:13\n+      let _4: ();                          // in scope 0 at $DIR/unreachable.rs:+3:9: +3:16\n+      let mut _5: T;                       // in scope 0 at $DIR/unreachable.rs:+3:11: +3:12\n+      let mut _6: T;                       // in scope 0 at $DIR/unreachable.rs:+3:14: +3:15\n+      let _7: ();                          // in scope 0 at $DIR/unreachable.rs:+5:9: +5:16\n+      let mut _8: T;                       // in scope 0 at $DIR/unreachable.rs:+5:11: +5:12\n+      let mut _9: T;                       // in scope 0 at $DIR/unreachable.rs:+5:14: +5:15\n+      scope 1 {\n+-         debug b => _2;                   // in scope 1 at $DIR/unreachable.rs:+1:9: +1:10\n++         debug b => _1;                   // in scope 1 at $DIR/unreachable.rs:+1:9: +1:10\n+      }\n+  \n+      bb0: {\n+-         StorageLive(_2);                 // scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n+-         _2 = _1;                         // scope 0 at $DIR/unreachable.rs:+1:13: +1:14\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+1:9: +1:10\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+1:13: +1:14\n+          StorageLive(_3);                 // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+          _3 = const false;                // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+-         goto -> bb3;                     // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n++         goto -> bb1;                     // scope 1 at $DIR/unreachable.rs:+2:8: +2:13\n+      }\n+  \n+      bb1: {\n+-         StorageLive(_4);                 // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n+-         StorageLive(_5);                 // scope 1 at $DIR/unreachable.rs:+3:11: +3:12\n+-         _5 = _1;                         // scope 1 at $DIR/unreachable.rs:+3:11: +3:12\n+-         StorageLive(_6);                 // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n+-         _6 = _2;                         // scope 1 at $DIR/unreachable.rs:+3:14: +3:15\n+-         _4 = g::<T>(move _5, move _6) -> bb2; // scope 1 at $DIR/unreachable.rs:+3:9: +3:16\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unreachable.rs:11:9: 11:10\n+-                                          // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+-     }\n+- \n+-     bb2: {\n+-         StorageDead(_6);                 // scope 1 at $DIR/unreachable.rs:+3:15: +3:16\n+-         StorageDead(_5);                 // scope 1 at $DIR/unreachable.rs:+3:15: +3:16\n+-         StorageDead(_4);                 // scope 1 at $DIR/unreachable.rs:+3:16: +3:17\n+-         _0 = const ();                   // scope 1 at $DIR/unreachable.rs:+2:14: +4:6\n+-         goto -> bb5;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n+-     }\n+- \n+-     bb3: {\n+          StorageLive(_7);                 // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n+-         StorageLive(_8);                 // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n+-         _8 = _2;                         // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:11: +5:12\n+          StorageLive(_9);                 // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n+-         _9 = _2;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n+-         _7 = g::<T>(move _8, move _9) -> bb4; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n++         _9 = _1;                         // scope 1 at $DIR/unreachable.rs:+5:14: +5:15\n++         _7 = g::<T>(move _1, move _9) -> bb2; // scope 1 at $DIR/unreachable.rs:+5:9: +5:16\n+                                           // mir::Constant\n+                                           // + span: $DIR/unreachable.rs:13:9: 13:10\n+                                           // + literal: Const { ty: fn(T, T) {g::<T>}, val: Value(<ZST>) }\n+      }\n+  \n+-     bb4: {\n++     bb2: {\n+          StorageDead(_9);                 // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n+-         StorageDead(_8);                 // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n++         nop;                             // scope 1 at $DIR/unreachable.rs:+5:15: +5:16\n+          StorageDead(_7);                 // scope 1 at $DIR/unreachable.rs:+5:16: +5:17\n+          _0 = const ();                   // scope 1 at $DIR/unreachable.rs:+4:12: +6:6\n+-         goto -> bb5;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n++         goto -> bb3;                     // scope 1 at $DIR/unreachable.rs:+2:5: +6:6\n+      }\n+  \n+-     bb5: {\n++     bb3: {\n+          StorageDead(_3);                 // scope 1 at $DIR/unreachable.rs:+6:5: +6:6\n+-         StorageDead(_2);                 // scope 0 at $DIR/unreachable.rs:+7:1: +7:2\n++         nop;                             // scope 0 at $DIR/unreachable.rs:+7:1: +7:2\n+          return;                          // scope 0 at $DIR/unreachable.rs:+7:2: +7:2\n+      }\n+  }\n+  "}, {"sha": "32b5def984a8053614e071fe22a8199bb6eb9458", "filename": "src/test/mir-opt/dest-prop/unreachable.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/adf53d4b068e216f0705ba2baae4cc21dd0988a3/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf53d4b068e216f0705ba2baae4cc21dd0988a3/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funreachable.rs?ref=adf53d4b068e216f0705ba2baae4cc21dd0988a3", "patch": "@@ -0,0 +1,18 @@\n+// Check that unreachable code is removed after the destination propagation.\n+// Regression test for issue #105428.\n+//\n+// compile-flags: --crate-type=lib -Zmir-opt-level=0\n+// compile-flags: -Zmir-enable-passes=+ConstProp,+SimplifyConstCondition-after-const-prop,+DestinationPropagation\n+\n+// EMIT_MIR unreachable.f.DestinationPropagation.diff\n+pub fn f<T: Copy>(a: T) {\n+    let b = a;\n+    if false {\n+        g(a, b);\n+    } else {\n+        g(b, b);\n+    }\n+}\n+\n+#[inline(never)]\n+pub fn g<T: Copy>(_: T, _: T) {}"}]}