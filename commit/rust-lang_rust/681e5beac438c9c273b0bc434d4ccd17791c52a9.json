{"sha": "681e5beac438c9c273b0bc434d4ccd17791c52a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MWU1YmVhYzQzOGM5YzI3M2IwYmM0MzRkNGNjZDE3NzkxYzUyYTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T21:53:28Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-24T21:53:28Z"}, "message": "rustdoc: Remove a pointer that's no longer needed", "tree": {"sha": "8bfcabf601c76decaba7f0375f735c5404583216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8bfcabf601c76decaba7f0375f735c5404583216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/681e5beac438c9c273b0bc434d4ccd17791c52a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/681e5beac438c9c273b0bc434d4ccd17791c52a9", "html_url": "https://github.com/rust-lang/rust/commit/681e5beac438c9c273b0bc434d4ccd17791c52a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/681e5beac438c9c273b0bc434d4ccd17791c52a9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdea1c414ce356a61bc70525ed96746fa25c4330", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdea1c414ce356a61bc70525ed96746fa25c4330", "html_url": "https://github.com/rust-lang/rust/commit/fdea1c414ce356a61bc70525ed96746fa25c4330"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "04749998648cd3e3e91fc66b95c498687bf9acc5", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -31,8 +31,7 @@ type itemdoc = {\n \n type moddoc = {\n     item: itemdoc,\n-    // This box exists to break the structural recursion\n-    items: ~[itemtag]\n+    items: [itemtag]\n };\n \n type nmoddoc = {\n@@ -112,7 +111,7 @@ type tydoc = {\n impl util for moddoc {\n \n     fn mods() -> [moddoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               modtag(moddoc) { some(moddoc) }\n               _ { none }\n@@ -121,7 +120,7 @@ impl util for moddoc {\n     }\n \n     fn nmods() -> [nmoddoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               nmodtag(nmoddoc) { some(nmoddoc) }\n               _ { none }\n@@ -130,7 +129,7 @@ impl util for moddoc {\n     }\n \n     fn fns() -> [fndoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               fntag(fndoc) { some(fndoc) }\n               _ { none }\n@@ -139,7 +138,7 @@ impl util for moddoc {\n     }\n \n     fn consts() -> [constdoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               consttag(constdoc) { some(constdoc) }\n               _ { none }\n@@ -148,7 +147,7 @@ impl util for moddoc {\n     }\n \n     fn enums() -> [enumdoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               enumtag(enumdoc) { some(enumdoc) }\n               _ { none }\n@@ -157,7 +156,7 @@ impl util for moddoc {\n     }\n \n     fn resources() -> [resdoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               restag(resdoc) { some(resdoc) }\n               _ { none }\n@@ -166,7 +165,7 @@ impl util for moddoc {\n     }\n \n     fn ifaces() -> [ifacedoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               ifacetag(ifacedoc) { some(ifacedoc) }\n               _ { none }\n@@ -175,7 +174,7 @@ impl util for moddoc {\n     }\n \n     fn impls() -> [impldoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               impltag(impldoc) { some(impldoc) }\n               _ { none }\n@@ -184,7 +183,7 @@ impl util for moddoc {\n     }\n \n     fn types() -> [tydoc] {\n-        vec::filter_map(*self.items) {|itemtag|\n+        vec::filter_map(self.items) {|itemtag|\n             alt itemtag {\n               tytag(tydoc) { some(tydoc) }\n               _ { none }"}, {"sha": "8a729e47a7d933d49567929f844b8fe709c2b2d5", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -49,7 +49,7 @@ fn moddoc_from_mod(\n ) -> doc::moddoc {\n     {\n         item: itemdoc,\n-        items: ~vec::filter_map(module.items) {|item|\n+        items: vec::filter_map(module.items) {|item|\n             let itemdoc = mk_itemdoc(item.id, item.ident);\n             alt item.node {\n               ast::item_mod(m) {"}, {"sha": "6cacb7d0d489408441b857ebc4946e6572ba5193", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -141,7 +141,7 @@ fn default_seq_fold_mod<T>(\n ) -> doc::moddoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n-        items: ~vec::map(*doc.items) {|itemtag|\n+        items: vec::map(doc.items) {|itemtag|\n             fold_itemtag(fold, itemtag)\n         }\n         with doc\n@@ -167,7 +167,7 @@ fn default_par_fold_mod<T:send>(\n ) -> doc::moddoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n-        items: ~util::parmap(*doc.items) {|itemtag|\n+        items: util::parmap(doc.items) {|itemtag|\n             fold_itemtag(fold, itemtag)\n         }\n         with doc"}, {"sha": "425374cbb08b1d0e47063c0ec7304593332f03d6", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -130,7 +130,7 @@ fn write_mod_contents(\n     write_brief(ctxt, doc.brief());\n     write_desc(ctxt, doc.desc());\n \n-    for itemtag in *doc.items {\n+    for itemtag in doc.items {\n         alt itemtag {\n           doc::modtag(moddoc) { write_mod(ctxt, moddoc) }\n           doc::nmodtag(_) { fail }\n@@ -229,7 +229,7 @@ fn should_correctly_indent_fn_signature() {\n     let doc = test::create_doc(\"fn a() { }\");\n     let doc = {\n         topmod: {\n-            items: ~[doc::fntag({\n+            items: [doc::fntag({\n                 sig: some(\"line 1\\nline 2\")\n                 with doc.topmod.fns()[0]\n             })]"}, {"sha": "d1f94dbb1087a9f9dccca4576cc44b2cf3085a3d", "filename": "src/rustdoc/prune_undoc_items_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fprune_undoc_items_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_undoc_items_pass.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -36,7 +36,7 @@ fn fold_mod(\n     doc: doc::moddoc\n ) -> doc::moddoc {\n     let doc = {\n-        items: ~vec::filter_map(*doc.items) {|itemtag|\n+        items: vec::filter_map(doc.items) {|itemtag|\n             alt itemtag {\n               doc::modtag(moddoc) {\n                 let doc = fold.fold_mod(fold, moddoc);\n@@ -110,7 +110,7 @@ fn fold_mod(\n     fold.ctxt.have_docs =\n         doc.brief() != none\n         || doc.desc() != none\n-        || vec::is_not_empty(*doc.items);\n+        || vec::is_not_empty(doc.items);\n     ret doc;\n }\n "}, {"sha": "f69d5eee6c277f0e0f45b19117b67e0ad7e68c10", "filename": "src/rustdoc/prune_unexported_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fprune_unexported_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fprune_unexported_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fprune_unexported_pass.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -21,7 +21,7 @@ fn run(srv: astsrv::srv, doc: doc::cratedoc) -> doc::cratedoc {\n fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     {\n-        items: ~exported_items(fold.ctxt, doc)\n+        items: exported_items(fold.ctxt, doc)\n         with doc\n     }\n }\n@@ -66,7 +66,7 @@ fn exported_items_from(\n     doc: doc::moddoc,\n     is_exported: fn(astsrv::srv, str) -> bool\n ) -> [doc::itemtag] {\n-    vec::filter_map(*doc.items) { |itemtag|\n+    vec::filter_map(doc.items) { |itemtag|\n         let itemtag = alt itemtag {\n           doc::enumtag(enumdoc) {\n             // Also need to check variant exportedness"}, {"sha": "40be29fccb1c4badb3fae9395992d1052124b7f6", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -115,7 +115,7 @@ fn build_reexport_def_map(\n     fn fold_mod(fold: fold::fold<ctxt>, doc: doc::moddoc) -> doc::moddoc {\n         let doc = fold::default_seq_fold_mod(fold, doc);\n \n-        for item in *doc.items {\n+        for item in doc.items {\n             let def_id = ast_util::local_def(item.id());\n             if fold.ctxt.def_set.contains_key(def_id) {\n                 fold.ctxt.def_map.insert(def_id, item);\n@@ -201,7 +201,7 @@ fn merge_reexports(\n         #debug(\"merging into %?: %?\", path, new_items);\n \n         {\n-            items: ~(*doc.items + new_items)\n+            items: (doc.items + new_items)\n             with doc\n         }\n     }"}, {"sha": "731951f2d5e81723563e838bfc48ba755de1e957", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -52,7 +52,7 @@ fn test_run_passes() {\n                     name: doc.topmod.name() + \"two\"\n                     with doc.topmod.item\n                 },\n-                items: ~[]\n+                items: []\n             }\n         }\n     }\n@@ -66,7 +66,7 @@ fn test_run_passes() {\n                     name: doc.topmod.name() + \"three\"\n                     with doc.topmod.item\n                 },\n-                items: ~[]\n+                items: []\n             }\n         }\n     }"}, {"sha": "0dcefe4bcbeddc85f2351141006715a6f5c4060f", "filename": "src/rustdoc/sort_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fsort_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/681e5beac438c9c273b0bc434d4ccd17791c52a9/src%2Frustdoc%2Fsort_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsort_pass.rs?ref=681e5beac438c9c273b0bc434d4ccd17791c52a9", "patch": "@@ -30,7 +30,7 @@ fn fold_mod(\n ) -> doc::moddoc {\n     let doc = fold::default_any_fold_mod(fold, doc);\n     {\n-        items: ~sort::merge_sort(fold.ctxt, *doc.items)\n+        items: sort::merge_sort(fold.ctxt, doc.items)\n         with doc\n     }\n }"}]}