{"sha": "736fac8ab965a20615724c0b9d007e16803d4648", "node_id": "C_kwDOAAsO6NoAKDczNmZhYzhhYjk2NWEyMDYxNTcyNGMwYjlkMDA3ZTE2ODAzZDQ2NDg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-03T11:09:35Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-03T11:09:35Z"}, "message": "Sync from rust 432b1a427710223b31f65585c352796832af8aa7", "tree": {"sha": "bcdc653dabcc58e4eda514ba4a25ce0821927e95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdc653dabcc58e4eda514ba4a25ce0821927e95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/736fac8ab965a20615724c0b9d007e16803d4648", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/736fac8ab965a20615724c0b9d007e16803d4648", "html_url": "https://github.com/rust-lang/rust/commit/736fac8ab965a20615724c0b9d007e16803d4648", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/736fac8ab965a20615724c0b9d007e16803d4648/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "777d4732dc2389752ebaa4fc7256245c4873bc25", "url": "https://api.github.com/repos/rust-lang/rust/commits/777d4732dc2389752ebaa4fc7256245c4873bc25", "html_url": "https://github.com/rust-lang/rust/commit/777d4732dc2389752ebaa4fc7256245c4873bc25"}, {"sha": "b166ad0b1ebd65db9241da72e08308f87ce6e50f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b166ad0b1ebd65db9241da72e08308f87ce6e50f", "html_url": "https://github.com/rust-lang/rust/commit/b166ad0b1ebd65db9241da72e08308f87ce6e50f"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "12bb00d346db42c42c88adfad2d5939df371c1f6", "filename": "src/allocator.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=736fac8ab965a20615724c0b9d007e16803d4648", "patch": "@@ -5,6 +5,7 @@ use crate::prelude::*;\n \n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_session::config::OomStrategy;\n+use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -23,7 +24,7 @@ pub(crate) fn codegen(\n             module,\n             unwind_context,\n             kind,\n-            tcx.lang_items().oom().is_some(),\n+            tcx.alloc_error_handler_kind(()).unwrap(),\n             tcx.sess.opts.unstable_opts.oom,\n         );\n         true\n@@ -36,7 +37,7 @@ fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    has_alloc_error_handler: bool,\n+    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -108,12 +109,12 @@ fn codegen_inner(\n         returns: vec![],\n     };\n \n-    let callee_name = if has_alloc_error_handler { \"__rg_oom\" } else { \"__rdl_oom\" };\n+    let callee_name = alloc_error_handler_kind.fn_name(sym::oom);\n \n     let func_id =\n         module.declare_function(\"__rust_alloc_error_handler\", Linkage::Export, &sig).unwrap();\n \n-    let callee_func_id = module.declare_function(callee_name, Linkage::Import, &sig).unwrap();\n+    let callee_func_id = module.declare_function(&callee_name, Linkage::Import, &sig).unwrap();\n \n     let mut ctx = Context::new();\n     ctx.func.signature = sig;"}, {"sha": "f2e3bf16e61842bae2d73b66ac42c0cec2a01e6e", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/736fac8ab965a20615724c0b9d007e16803d4648/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736fac8ab965a20615724c0b9d007e16803d4648/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=736fac8ab965a20615724c0b9d007e16803d4648", "patch": "@@ -38,6 +38,7 @@ impl ArchiveBuilderBuilder for ArArchiveBuilderBuilder {\n         _lib_name: &str,\n         _dll_imports: &[rustc_session::cstore::DllImport],\n         _tmpdir: &Path,\n+        _is_direct_dependency: bool,\n     ) -> PathBuf {\n         bug!(\"creating dll imports is not supported\");\n     }"}, {"sha": "1db44502742e921b4bcbbdff9d76bce7e1e5e849", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=736fac8ab965a20615724c0b9d007e16803d4648", "patch": "@@ -770,11 +770,7 @@ fn codegen_stmt<'tcx>(\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n                 Rvalue::NullaryOp(null_op, ty) => {\n-                    assert!(\n-                        lval.layout()\n-                            .ty\n-                            .is_sized(fx.tcx.at(stmt.source_info.span), ParamEnv::reveal_all())\n-                    );\n+                    assert!(lval.layout().ty.is_sized(fx.tcx, ParamEnv::reveal_all()));\n                     let layout = fx.layout_of(fx.monomorphize(ty));\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),"}, {"sha": "148b66d959e8a74126c5fdde83eb48f3a3de1290", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/736fac8ab965a20615724c0b9d007e16803d4648/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=736fac8ab965a20615724c0b9d007e16803d4648", "patch": "@@ -5,7 +5,6 @@ use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n     read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n-use rustc_span::DUMMY_SP;\n \n use cranelift_module::*;\n \n@@ -291,7 +290,7 @@ fn data_id_for_static(\n     let is_mutable = if tcx.is_mutable_static(def_id) {\n         true\n     } else {\n-        !ty.is_freeze(tcx.at(DUMMY_SP), ParamEnv::reveal_all())\n+        !ty.is_freeze(tcx, ParamEnv::reveal_all())\n     };\n     let align = tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().align.pref.bytes();\n "}]}