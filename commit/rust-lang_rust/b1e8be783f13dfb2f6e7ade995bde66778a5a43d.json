{"sha": "b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "node_id": "C_kwDOAAsO6NoAKGIxZThiZTc4M2YxM2RmYjJmNmU3YWRlOTk1YmRlNjY3NzhhNWE0M2Q", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2023-03-27T16:56:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-27T16:56:19Z"}, "message": "Rollup merge of #109354 - Swatinem:rm-closureid, r=compiler-errors\n\nRemove the `NodeId` of `ast::ExprKind::Async`\n\nThis is a followup to https://github.com/rust-lang/rust/pull/104833#pullrequestreview-1314537416.\n\nIn my original attempt, I was using `LoweringContext::expr`, which was not correct as it creates a fresh `DefId`.\nIt now uses the correct `DefId` for the wrapping `Expr`, and also makes forwarding `#[track_caller]` attributes more explicit.", "tree": {"sha": "013470d0a60dd58afa0676c946a2f9fc59913ef8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013470d0a60dd58afa0676c946a2f9fc59913ef8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkIcqzCRBK7hj4Ov3rIwAApeoIABVHjbC/JdT1fHtcjk6qqY/O\nTB6m6KR/FItsaBuhvG7Zeqbzbp7lfVjpg75w40A/UskJnMEJiSn3NaYcC0zkn55h\naRI6ZqBlNDuQUviv8p8LBZYiEyDKxQ71p/2rpBkC4WTSRrJv4Mg0SwDz9xSz83fU\nbKNSXyYU3fvxhpd8C2/lfwJgz4uFa8BU5Kj1fN8bzhfBkkI7inp5pjpuxrM9e9+H\nRZ8F68kxilpto1CVHXtO30AZTZhhKJMJwniQwknhBZqbFS4G5MKjZdPAJ5OZ4zKZ\nRGU+diQNyCCFMUpctXLizrDZigWeDPenyyREKmnCJmFj+SDLUoh3YLqGyJ3qP8Q=\n=zKDh\n-----END PGP SIGNATURE-----\n", "payload": "tree 013470d0a60dd58afa0676c946a2f9fc59913ef8\nparent 52c8084f912e3728b8b06ae7e077521dba89d326\nparent c8ead2e693a22fe94c6b3edeb3f49c7e6aec3912\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1679936179 +0200\ncommitter GitHub <noreply@github.com> 1679936179 +0200\n\nRollup merge of #109354 - Swatinem:rm-closureid, r=compiler-errors\n\nRemove the `NodeId` of `ast::ExprKind::Async`\n\nThis is a followup to https://github.com/rust-lang/rust/pull/104833#pullrequestreview-1314537416.\n\nIn my original attempt, I was using `LoweringContext::expr`, which was not correct as it creates a fresh `DefId`.\nIt now uses the correct `DefId` for the wrapping `Expr`, and also makes forwarding `#[track_caller]` attributes more explicit.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "html_url": "https://github.com/rust-lang/rust/commit/b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c8084f912e3728b8b06ae7e077521dba89d326", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c8084f912e3728b8b06ae7e077521dba89d326", "html_url": "https://github.com/rust-lang/rust/commit/52c8084f912e3728b8b06ae7e077521dba89d326"}, {"sha": "c8ead2e693a22fe94c6b3edeb3f49c7e6aec3912", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ead2e693a22fe94c6b3edeb3f49c7e6aec3912", "html_url": "https://github.com/rust-lang/rust/commit/c8ead2e693a22fe94c6b3edeb3f49c7e6aec3912"}], "stats": {"total": 120, "additions": 56, "deletions": 64}, "files": [{"sha": "ab8b7f632e8efeb977e1a635f1d1c1e1894130a8", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -1426,13 +1426,9 @@ pub enum ExprKind {\n     Block(P<Block>, Option<Label>),\n     /// An async block (`async move { ... }`).\n     ///\n-    /// The `NodeId` is the `NodeId` for the closure that results from\n-    /// desugaring an async block, just like the NodeId field in the\n-    /// `Async::Yes` variant. This is necessary in order to create a def for the\n-    /// closure which can be used as a parent of any child defs. Defs\n-    /// created during lowering cannot be made the parent of any other\n-    /// preexisting defs.\n-    Async(CaptureBy, NodeId, P<Block>),\n+    /// The async block used to have a `NodeId`, which was removed in favor of\n+    /// using the parent `NodeId` of the parent `Expr`.\n+    Async(CaptureBy, P<Block>),\n     /// An await expression (`my_future.await`).\n     Await(P<Expr>),\n "}, {"sha": "46e46ab575ef7b19d9cc6b571cfc751905eb4ae4", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -1407,8 +1407,7 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_block(blk);\n             visit_opt(label, |label| vis.visit_label(label));\n         }\n-        ExprKind::Async(_capture_by, node_id, body) => {\n-            vis.visit_id(node_id);\n+        ExprKind::Async(_capture_by, body) => {\n             vis.visit_block(body);\n         }\n         ExprKind::Await(expr) => vis.visit_expr(expr),"}, {"sha": "608f87ab6ebf465ef83640b1cd54e124e33604c0", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -860,7 +860,7 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Async(_, _, body) => {\n+        ExprKind::Async(_, body) => {\n             visitor.visit_block(body);\n         }\n         ExprKind::Await(expr) => visitor.visit_expr(expr),"}, {"sha": "3247802345b0a56fa86d5da6bcbd1a1440207c11", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -63,20 +63,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ExprKind::ForLoop(pat, head, body, opt_label) => {\n                     return self.lower_expr_for(e, pat, head, body, *opt_label);\n                 }\n-                // Similarly, async blocks do not use `e.id` but rather `closure_node_id`.\n-                ExprKind::Async(capture_clause, closure_node_id, block) => {\n-                    let hir_id = self.lower_node_id(*closure_node_id);\n-                    self.lower_attrs(hir_id, &e.attrs);\n-                    return self.make_async_expr(\n-                        *capture_clause,\n-                        hir_id,\n-                        *closure_node_id,\n-                        None,\n-                        e.span,\n-                        hir::AsyncGeneratorKind::Block,\n-                        |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n-                    );\n-                }\n                 _ => (),\n             }\n \n@@ -187,6 +173,14 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     self.arena.alloc_from_iter(arms.iter().map(|x| self.lower_arm(x))),\n                     hir::MatchSource::Normal,\n                 ),\n+                ExprKind::Async(capture_clause, block) => self.make_async_expr(\n+                    *capture_clause,\n+                    e.id,\n+                    None,\n+                    e.span,\n+                    hir::AsyncGeneratorKind::Block,\n+                    |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n+                ),\n                 ExprKind::Await(expr) => {\n                     let dot_await_span = if expr.span.hi() < e.span.hi() {\n                         let span_with_whitespace = self\n@@ -320,7 +314,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 ),\n                 ExprKind::Try(sub_expr) => self.lower_expr_try(e.span, sub_expr),\n \n-                ExprKind::Paren(_) | ExprKind::ForLoop(..) | ExprKind::Async(..) => {\n+                ExprKind::Paren(_) | ExprKind::ForLoop(..) => {\n                     unreachable!(\"already handled\")\n                 }\n \n@@ -591,13 +585,12 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     pub(super) fn make_async_expr(\n         &mut self,\n         capture_clause: CaptureBy,\n-        outer_hir_id: hir::HirId,\n         closure_node_id: NodeId,\n         ret_ty: Option<hir::FnRetTy<'hir>>,\n         span: Span,\n         async_gen_kind: hir::AsyncGeneratorKind,\n         body: impl FnOnce(&mut Self) -> hir::Expr<'hir>,\n-    ) -> hir::Expr<'hir> {\n+    ) -> hir::ExprKind<'hir> {\n         let output = ret_ty.unwrap_or_else(|| hir::FnRetTy::DefaultReturn(self.lower_span(span)));\n \n         // Resume argument type: `ResumeTy`\n@@ -644,32 +637,36 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         });\n \n         // `static |_task_context| -> <ret_ty> { body }`:\n-        let generator_kind = {\n-            let c = self.arena.alloc(hir::Closure {\n-                def_id: self.local_def_id(closure_node_id),\n-                binder: hir::ClosureBinder::Default,\n-                capture_clause,\n-                bound_generic_params: &[],\n-                fn_decl,\n-                body,\n-                fn_decl_span: self.lower_span(span),\n-                fn_arg_span: None,\n-                movability: Some(hir::Movability::Static),\n-                constness: hir::Constness::NotConst,\n-            });\n-\n-            hir::ExprKind::Closure(c)\n-        };\n+        hir::ExprKind::Closure(self.arena.alloc(hir::Closure {\n+            def_id: self.local_def_id(closure_node_id),\n+            binder: hir::ClosureBinder::Default,\n+            capture_clause,\n+            bound_generic_params: &[],\n+            fn_decl,\n+            body,\n+            fn_decl_span: self.lower_span(span),\n+            fn_arg_span: None,\n+            movability: Some(hir::Movability::Static),\n+            constness: hir::Constness::NotConst,\n+        }))\n+    }\n \n-        let hir_id = self.lower_node_id(closure_node_id);\n+    /// Forwards a possible `#[track_caller]` annotation from `outer_hir_id` to\n+    /// `inner_hir_id` in case the `closure_track_caller` feature is enabled.\n+    pub(super) fn maybe_forward_track_caller(\n+        &mut self,\n+        span: Span,\n+        outer_hir_id: hir::HirId,\n+        inner_hir_id: hir::HirId,\n+    ) {\n         if self.tcx.features().closure_track_caller\n             && let Some(attrs) = self.attrs.get(&outer_hir_id.local_id)\n             && attrs.into_iter().any(|attr| attr.has_name(sym::track_caller))\n         {\n             let unstable_span =\n                 self.mark_span_with_reason(DesugaringKind::Async, span, self.allow_gen_future.clone());\n             self.lower_attrs(\n-                hir_id,\n+                inner_hir_id,\n                 &[Attribute {\n                     kind: AttrKind::Normal(ptr::P(NormalAttr {\n                         item: AttrItem {\n@@ -685,8 +682,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 }],\n             );\n         }\n-\n-        hir::Expr { hir_id, kind: generator_kind, span: self.lower_span(span) }\n     }\n \n     /// Desugar `<expr>.await` into:\n@@ -1001,15 +996,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     None\n                 };\n \n-                this.make_async_expr(\n+                let async_body = this.make_async_expr(\n                     capture_clause,\n-                    closure_hir_id,\n                     inner_closure_id,\n                     async_ret_ty,\n                     body.span,\n                     hir::AsyncGeneratorKind::Closure,\n                     |this| this.with_new_scopes(|this| this.lower_expr_mut(body)),\n-                )\n+                );\n+                let hir_id = this.lower_node_id(inner_closure_id);\n+                this.maybe_forward_track_caller(body.span, closure_hir_id, hir_id);\n+                hir::Expr { hir_id, kind: async_body, span: this.lower_span(body.span) }\n             });\n             body_id\n         });"}, {"sha": "cc879982abce84fb28ac47b9ee6c4cbb6c26ed9b", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -1146,7 +1146,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n-                fn_id,\n                 closure_id,\n                 None,\n                 body.span,\n@@ -1180,7 +1179,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 },\n             );\n \n-            (this.arena.alloc_from_iter(parameters), async_expr)\n+            let hir_id = this.lower_node_id(closure_id);\n+            this.maybe_forward_track_caller(body.span, fn_id, hir_id);\n+            let expr = hir::Expr { hir_id, kind: async_expr, span: this.lower_span(body.span) };\n+\n+            (this.arena.alloc_from_iter(parameters), expr)\n         })\n     }\n "}, {"sha": "776bf54244ed1d4d36dddd494e98ff4efe35b4ae", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -439,7 +439,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block_with_attrs(blk, attrs);\n             }\n-            ast::ExprKind::Async(capture_clause, _, blk) => {\n+            ast::ExprKind::Async(capture_clause, blk) => {\n                 self.word_nbsp(\"async\");\n                 self.print_capture_clause(*capture_clause);\n                 // cbox/ibox in analogy to the `ExprKind::Block` arm above"}, {"sha": "c9e3cd486f8553d5b965556047047dbc6d5c83fb", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -287,7 +287,7 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             // sync with the `rfc-2011-nicer-assert-messages/all-expr-kinds.rs` test.\n             ExprKind::Assign(_, _, _)\n             | ExprKind::AssignOp(_, _, _)\n-            | ExprKind::Async(_, _, _)\n+            | ExprKind::Async(_, _)\n             | ExprKind::Await(_)\n             | ExprKind::Block(_, _)\n             | ExprKind::Break(_, _)"}, {"sha": "65607d71805c38204b9eb363feb940662094bfe0", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -224,8 +224,7 @@ impl<'a, T: EarlyLintPass> ast_visit::Visitor<'a> for EarlyContextAndPass<'a, T>\n             ast::ExprKind::Closure(box ast::Closure {\n                 asyncness: ast::Async::Yes { closure_id, .. },\n                 ..\n-            })\n-            | ast::ExprKind::Async(_, closure_id, ..) => self.check_id(closure_id),\n+            }) => self.check_id(closure_id),\n             _ => {}\n         }\n     }"}, {"sha": "c4605e63cf39f0f99f63a06b4956e7baa3be316e", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -2911,7 +2911,7 @@ impl<'a> Parser<'a> {\n         self.expect_keyword(kw::Async)?;\n         let capture_clause = self.parse_capture_clause()?;\n         let (attrs, body) = self.parse_inner_attrs_and_block()?;\n-        let kind = ExprKind::Async(capture_clause, DUMMY_NODE_ID, body);\n+        let kind = ExprKind::Async(capture_clause, body);\n         Ok(self.mk_expr_with_attrs(lo.to(self.prev_token.span), kind, attrs))\n     }\n "}, {"sha": "356d7f365fe718fc315b1cc0fd0619cbe5c1368f", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -260,9 +260,7 @@ impl<'a, 'b, 'tcx> visit::Visitor<'a> for DefCollector<'a, 'b, 'tcx> {\n                     Async::No => closure_def,\n                 }\n             }\n-            ExprKind::Async(_, async_id, _) => {\n-                self.create_def(async_id, DefPathData::ClosureExpr, expr.span)\n-            }\n+            ExprKind::Async(_, _) => self.create_def(expr.id, DefPathData::ClosureExpr, expr.span),\n             _ => self.parent_def,\n         };\n "}, {"sha": "5ac203665d0c02aac644c3cc38e230df8bb246a8", "filename": "src/tools/clippy/clippy_lints/src/redundant_async_block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_async_block.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -42,7 +42,7 @@ impl EarlyLintPass for RedundantAsyncBlock {\n         if expr.span.from_expansion() {\n             return;\n         }\n-        if let ExprKind::Async(_, _, block) = &expr.kind && block.stmts.len() == 1 &&\n+        if let ExprKind::Async(_, block) = &expr.kind && block.stmts.len() == 1 &&\n             let Some(Stmt { kind: StmtKind::Expr(last), .. }) = block.stmts.last() &&\n             let ExprKind::Await(future) = &last.kind &&\n             !future.span.from_expansion() &&"}, {"sha": "fab8e9c2ec1c1b6544a7bd2b65639dbd2d2924c4", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -578,7 +578,7 @@ fn ident_difference_expr_with_base_location(\n         | (Assign(_, _, _), Assign(_, _, _))\n         | (TryBlock(_), TryBlock(_))\n         | (Await(_), Await(_))\n-        | (Async(_, _, _), Async(_, _, _))\n+        | (Async(_, _), Async(_, _))\n         | (Block(_, _), Block(_, _))\n         | (Closure(_), Closure(_))\n         | (Match(_, _), Match(_, _))"}, {"sha": "d2dedc20439571958b344682f3cf908a19484195", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -209,7 +209,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n                 && eq_fn_decl(lf, rf)\n                 && eq_expr(le, re)\n         },\n-        (Async(lc, _, lb), Async(rc, _, rb)) => lc == rc && eq_block(lb, rb),\n+        (Async(lc, lb), Async(rc, rb)) => lc == rc && eq_block(lb, rb),\n         (Range(lf, lt, ll), Range(rf, rt, rl)) => ll == rl && eq_expr_opt(lf, rf) && eq_expr_opt(lt, rt),\n         (AddrOf(lbk, lm, le), AddrOf(rbk, rm, re)) => lbk == rbk && lm == rm && eq_expr(le, re),\n         (Path(lq, lp), Path(rq, rp)) => both(lq, rq, eq_qself) && eq_path(lp, rp),"}, {"sha": "ac96bedf2fe86ea23ad566997dbe9619657ad87e", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1e8be783f13dfb2f6e7ade995bde66778a5a43d/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=b1e8be783f13dfb2f6e7ade995bde66778a5a43d", "patch": "@@ -366,7 +366,7 @@ pub(crate) fn format_expr(\n                 ))\n             }\n         }\n-        ast::ExprKind::Async(capture_by, _node_id, ref block) => {\n+        ast::ExprKind::Async(capture_by, ref block) => {\n             let mover = if capture_by == ast::CaptureBy::Value {\n                 \"move \"\n             } else {"}]}