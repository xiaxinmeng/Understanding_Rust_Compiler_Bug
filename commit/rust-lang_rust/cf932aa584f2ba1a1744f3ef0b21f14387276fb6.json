{"sha": "cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOTMyYWE1ODRmMmJhMWExNzQ0ZjNlZjBiMjFmMTQzODcyNzZmYjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-21T06:06:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-21T06:06:37Z"}, "message": "Auto merge of #86847 - tlyu:stdin-forwarders, r=joshtriplett\n\nadd `Stdin::lines`, `Stdin::split` forwarder methods\n\nAdd forwarder methods `Stdin::lines` and `Stdin::split`, which consume\nand lock a `Stdin` handle, and forward on to the corresponding `BufRead`\nmethods. This should make it easier for beginners to use those iterator\nconstructors without explicitly dealing with locks or lifetimes.\n\nReplaces #86412.\n~~Based on #86846 to get the tracking issue number for the `stdio_locked` feature.~~ Rebased after merge, so it's only one commit now.\n\nr? `@joshtriplett`\n`@rustbot` label +A-io +C-enhancement +D-newcomer-roadblock +T-libs-api", "tree": {"sha": "eb3e42af172d699cdf8377f1dddea024539a1bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb3e42af172d699cdf8377f1dddea024539a1bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "html_url": "https://github.com/rust-lang/rust/commit/cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf932aa584f2ba1a1744f3ef0b21f14387276fb6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac575b64ed8ea2099a074e3e5bd9862a7513b1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac575b64ed8ea2099a074e3e5bd9862a7513b1e4", "html_url": "https://github.com/rust-lang/rust/commit/ac575b64ed8ea2099a074e3e5bd9862a7513b1e4"}, {"sha": "339ce4fee86ede86d6cdde514faf6f62aed16027", "url": "https://api.github.com/repos/rust-lang/rust/commits/339ce4fee86ede86d6cdde514faf6f62aed16027", "html_url": "https://github.com/rust-lang/rust/commit/339ce4fee86ede86d6cdde514faf6f62aed16027"}], "stats": {"total": 45, "additions": 44, "deletions": 1}, "files": [{"sha": "65ad7d88e22d5dbe5066c232e5043c5d65828cae", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cf932aa584f2ba1a1744f3ef0b21f14387276fb6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf932aa584f2ba1a1744f3ef0b21f14387276fb6/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=cf932aa584f2ba1a1744f3ef0b21f14387276fb6", "patch": "@@ -7,7 +7,7 @@ use crate::io::prelude::*;\n \n use crate::cell::{Cell, RefCell};\n use crate::fmt;\n-use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter};\n+use crate::io::{self, BufReader, Initializer, IoSlice, IoSliceMut, LineWriter, Lines, Split};\n use crate::lazy::SyncOnceCell;\n use crate::pin::Pin;\n use crate::sync::atomic::{AtomicBool, Ordering};\n@@ -446,6 +446,49 @@ impl Stdin {\n     pub fn into_locked(self) -> StdinLock<'static> {\n         self.lock_any()\n     }\n+\n+    /// Consumes this handle and returns an iterator over input lines.\n+    ///\n+    /// For detailed semantics of this method, see the documentation on\n+    /// [`BufRead::lines`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(stdin_forwarders)]\n+    /// use std::io;\n+    ///\n+    /// let lines = io::stdin().lines();\n+    /// for line in lines {\n+    ///     println!(\"got a line: {}\", line.unwrap());\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n+    pub fn lines(self) -> Lines<StdinLock<'static>> {\n+        self.into_locked().lines()\n+    }\n+\n+    /// Consumes this handle and returns an iterator over input bytes,\n+    /// split at the specified byte value.\n+    ///\n+    /// For detailed semantics of this method, see the documentation on\n+    /// [`BufRead::split`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(stdin_forwarders)]\n+    /// use std::io;\n+    ///\n+    /// let splits = io::stdin().split(b'-');\n+    /// for split in splits {\n+    ///     println!(\"got a chunk: {}\", String::from_utf8_lossy(&split.unwrap()));\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"stdin_forwarders\", issue = \"87096\")]\n+    pub fn split(self, byte: u8) -> Split<StdinLock<'static>> {\n+        self.into_locked().split(byte)\n+    }\n }\n \n #[stable(feature = \"std_debug\", since = \"1.16.0\")]"}]}