{"sha": "5c5cca58f7c8e59703892d9500327aafdd44e45e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWNjYTU4ZjdjOGU1OTcwMzg5MmQ5NTAwMzI3YWFmZGQ0NGU0NWU=", "commit": {"author": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-06T23:23:44Z"}, "committer": {"name": "Jack Wilson", "email": "jack.wilson.v@gmail.com", "date": "2015-09-06T23:23:44Z"}, "message": "Small syntax and formatting changes", "tree": {"sha": "8e297e9e88fa2792a138fdbb040d2fa8e1043d62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e297e9e88fa2792a138fdbb040d2fa8e1043d62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5cca58f7c8e59703892d9500327aafdd44e45e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5cca58f7c8e59703892d9500327aafdd44e45e", "html_url": "https://github.com/rust-lang/rust/commit/5c5cca58f7c8e59703892d9500327aafdd44e45e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5cca58f7c8e59703892d9500327aafdd44e45e/comments", "author": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "id4ho", "id": 1232370, "node_id": "MDQ6VXNlcjEyMzIzNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1232370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/id4ho", "html_url": "https://github.com/id4ho", "followers_url": "https://api.github.com/users/id4ho/followers", "following_url": "https://api.github.com/users/id4ho/following{/other_user}", "gists_url": "https://api.github.com/users/id4ho/gists{/gist_id}", "starred_url": "https://api.github.com/users/id4ho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/id4ho/subscriptions", "organizations_url": "https://api.github.com/users/id4ho/orgs", "repos_url": "https://api.github.com/users/id4ho/repos", "events_url": "https://api.github.com/users/id4ho/events{/privacy}", "received_events_url": "https://api.github.com/users/id4ho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01b9cc58ba0c91ec265d8c1ad9225b2ca777464e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01b9cc58ba0c91ec265d8c1ad9225b2ca777464e", "html_url": "https://github.com/rust-lang/rust/commit/01b9cc58ba0c91ec265d8c1ad9225b2ca777464e"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3a4328562f87278649e025ea1c7d2ce3d73bacbe", "filename": "src/doc/trpl/guessing-game.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c5cca58f7c8e59703892d9500327aafdd44e45e/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/5c5cca58f7c8e59703892d9500327aafdd44e45e/src%2Fdoc%2Ftrpl%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fguessing-game.md?ref=5c5cca58f7c8e59703892d9500327aafdd44e45e", "patch": "@@ -599,7 +599,7 @@ With this definition, anything of type `Foo` can be either a\n `Foo::Bar` or a `Foo::Baz`. We use the `::` to indicate the\n namespace for a particular `enum` variant.\n \n-The [`Ordering`][ordering] enum has three possible variants: `Less`, `Equal`,\n+The [`Ordering`][ordering] `enum` has three possible variants: `Less`, `Equal`,\n and `Greater`. The `match` statement takes a value of a type, and lets you\n create an \u2018arm\u2019 for each possible value. Since we have three types of\n `Ordering`, we have three arms:\n@@ -918,9 +918,9 @@ let guess: u32 = match guess.trim().parse() {\n \n This is how you generally move from \u2018crash on error\u2019 to \u2018actually handle the\n error\u2019, by switching from `ok().expect()` to a `match` statement. The `Result`\n-returned by `parse()` is an enum just like `Ordering`, but in this case, each\n+returned by `parse()` is an `enum` just like `Ordering`, but in this case, each\n variant has some data associated with it: `Ok` is a success, and `Err` is a\n-failure. Each contains more information: the successful parsed integer, or an\n+failure. Each contains more information: the successfully parsed integer, or an\n error type. In this case, we `match` on `Ok(num)`, which sets the inner value\n of the `Ok` to the name `num`, and then we just return it on the right-hand\n side. In the `Err` case, we don\u2019t care what kind of error it is, so we just"}]}