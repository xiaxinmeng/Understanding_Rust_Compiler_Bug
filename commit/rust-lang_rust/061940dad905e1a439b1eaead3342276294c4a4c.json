{"sha": "061940dad905e1a439b1eaead3342276294c4a4c", "node_id": "C_kwDOAAsO6NoAKDA2MTk0MGRhZDkwNWUxYTQzOWIxZWFlYWQzMzQyMjc2Mjk0YzRhNGM", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-03T01:37:07Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:56:47Z"}, "message": "running prettier", "tree": {"sha": "9d24884214a20018be4327a9ab9aacf19b94fb0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d24884214a20018be4327a9ab9aacf19b94fb0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/061940dad905e1a439b1eaead3342276294c4a4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/061940dad905e1a439b1eaead3342276294c4a4c", "html_url": "https://github.com/rust-lang/rust/commit/061940dad905e1a439b1eaead3342276294c4a4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/061940dad905e1a439b1eaead3342276294c4a4c/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "440889edec0bc4e2ca3b12f2d56f3eaff278c01b", "url": "https://api.github.com/repos/rust-lang/rust/commits/440889edec0bc4e2ca3b12f2d56f3eaff278c01b", "html_url": "https://github.com/rust-lang/rust/commit/440889edec0bc4e2ca3b12f2d56f3eaff278c01b"}], "stats": {"total": 177, "additions": 86, "deletions": 91}, "files": [{"sha": "69347522b8642200b660e9734f007f8747975936", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=061940dad905e1a439b1eaead3342276294c4a4c", "patch": "@@ -3,8 +3,8 @@ import * as lc from \"vscode-languageclient/node\";\n import * as ra from \"./lsp_ext\";\n import * as path from \"path\";\n \n-import {Config, prepareVSCodeConfig} from \"./config\";\n-import {createClient} from \"./client\";\n+import { Config, prepareVSCodeConfig } from \"./config\";\n+import { createClient } from \"./client\";\n import {\n     executeDiscoverProject,\n     isRustDocument,\n@@ -13,7 +13,7 @@ import {\n     log,\n     RustEditor,\n } from \"./util\";\n-import {ServerStatusParams} from \"./lsp_ext\";\n+import { ServerStatusParams } from \"./lsp_ext\";\n import {\n     Dependency,\n     DependencyFile,\n@@ -27,10 +27,10 @@ import {\n     RustDependenciesProvider,\n     DependencyId,\n } from \"./dependencies_provider\";\n-import {execRevealDependency} from \"./commands\";\n-import {PersistentState} from \"./persistent_state\";\n-import {bootstrap} from \"./bootstrap\";\n-import {ExecOptions} from \"child_process\";\n+import { execRevealDependency } from \"./commands\";\n+import { PersistentState } from \"./persistent_state\";\n+import { bootstrap } from \"./bootstrap\";\n+import { ExecOptions } from \"child_process\";\n \n // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n // only those are in use. We use \"Empty\" to represent these scenarios\n@@ -39,12 +39,12 @@ import {ExecOptions} from \"child_process\";\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n-    kind: \"Workspace Folder\";\n-}\n+          kind: \"Workspace Folder\";\n+      }\n     | {\n-    kind: \"Detached Files\";\n-    files: vscode.TextDocument[];\n-};\n+          kind: \"Detached Files\";\n+          files: vscode.TextDocument[];\n+      };\n \n export function fetchWorkspace(): Workspace {\n     const folders = (vscode.workspace.workspaceFolders || []).filter(\n@@ -56,12 +56,12 @@ export function fetchWorkspace(): Workspace {\n \n     return folders.length === 0\n         ? rustDocuments.length === 0\n-            ? {kind: \"Empty\"}\n+            ? { kind: \"Empty\" }\n             : {\n-                kind: \"Detached Files\",\n-                files: rustDocuments,\n-            }\n-        : {kind: \"Workspace Folder\"};\n+                  kind: \"Detached Files\",\n+                  files: rustDocuments,\n+              }\n+        : { kind: \"Workspace Folder\" };\n }\n \n export async function discoverWorkspace(\n@@ -116,7 +116,7 @@ export class Ctx {\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n-        workspace: Workspace,\n+        workspace: Workspace\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -128,8 +128,7 @@ export class Ctx {\n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n \n-        this.updateCommands(\"disable\"\n-        );\n+        this.updateCommands(\"disable\");\n         this.setServerStatus({\n             health: \"stopped\",\n         });\n@@ -198,7 +197,7 @@ export class Ctx {\n             const newEnv = Object.assign({}, process.env, this.config.serverExtraEnv);\n             const run: lc.Executable = {\n                 command: this._serverPath,\n-                options: {env: newEnv},\n+                options: { env: newEnv },\n             };\n             const serverOptions = {\n                 run,\n@@ -276,7 +275,7 @@ export class Ctx {\n     private prepareTreeDependenciesView(client: lc.LanguageClient) {\n         const ctxInit: CtxInit = {\n             ...this,\n-            client: client\n+            client: client,\n         };\n         const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n         this._dependencies = new RustDependenciesProvider(rootPath, ctxInit);"}, {"sha": "3713250b8fca64873a0866f15abf0661c4d586b5", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=061940dad905e1a439b1eaead3342276294c4a4c", "patch": "@@ -13,8 +13,8 @@ import * as ra from \"./lsp_ext\";\n export class RustDependenciesProvider\n     implements vscode.TreeDataProvider<Dependency | DependencyFile>\n {\n-\n-    dependenciesMap: { [id: string]: Dependency | DependencyFile };ctx: CtxInit;\n+    dependenciesMap: { [id: string]: Dependency | DependencyFile };\n+    ctx: CtxInit;\n \n     constructor(private readonly workspaceRoot: string,ctx: CtxInit) {\n         this.dependenciesMap = {};\n@@ -82,7 +82,10 @@ export class RustDependenciesProvider\n     private async getRootDependencies(): Promise<Dependency[]> {\n         const crates = await this.ctx.client.sendRequest(ra.fetchDependencyGraph, {});\n \n-        const dependenciesResult: FetchDependencyGraphResult = await this.ctx.client.sendRequest(ra.fetchDependencyGraph, {});\n+        const dependenciesResult: FetchDependencyGraphResult = await this.ctx.client.sendRequest(\n+            ra.fetchDependencyGraph,\n+            {}\n+        );\n         const crates = dependenciesResult.crates;\n         const deps = crates.map((crate) => {\n         const dep = this.toDep(crate.name, crate.version, crate.path);\n@@ -93,15 +96,10 @@ export class RustDependenciesProvider\n         return deps;\n     }\n \n-    private toDep(moduleName: string, version: string, path: string): Dependency  {\n-            //const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n-            return new Dependency(\n-                moduleName,\n-                version,\n-                path,\n-                vscode.TreeItemCollapsibleState.Collapsed\n-            );\n-        }\n+    private toDep(moduleName: string, version: string, path: string): Dependency {\n+        // const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n+        return new Dependency(moduleName, version, path, vscode.TreeItemCollapsibleState.Collapsed);\n+    }\n }\n \n export class Dependency extends vscode.TreeItem {"}, {"sha": "be9bc9d363ce6635d40c5be5a8cf1ac6b0a8ffd6", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 50, "deletions": 52, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=061940dad905e1a439b1eaead3342276294c4a4c", "patch": "@@ -2,10 +2,10 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n-import {CommandFactory, Ctx, fetchWorkspace} from \"./ctx\";\n+import { CommandFactory, Ctx, fetchWorkspace } from \"./ctx\";\n import * as diagnostics from \"./diagnostics\";\n-import {activateTaskProvider} from \"./tasks\";\n-import {setContextValue} from \"./util\";\n+import { activateTaskProvider } from \"./tasks\";\n+import { setContextValue } from \"./util\";\n \n const RUST_PROJECT_CONTEXT_NAME = \"inRustProject\";\n \n@@ -24,12 +24,11 @@ export async function activate(\n         vscode.window\n             .showWarningMessage(\n                 `You have both the rust-analyzer (rust-lang.rust-analyzer) and Rust (rust-lang.rust) ` +\n-                \"plugins enabled. These are known to conflict and cause various functions of \" +\n-                \"both plugins to not work correctly. You should disable one of them.\",\n+                    \"plugins enabled. These are known to conflict and cause various functions of \" +\n+                    \"both plugins to not work correctly. You should disable one of them.\",\n                 \"Got it\"\n             )\n-            .then(() => {\n-            }, console.error);\n+            .then(() => {}, console.error);\n     }\n \n     const ctx = new Ctx(context, createCommands(), fetchWorkspace());\n@@ -119,7 +118,7 @@ function createCommands(): Record<string, CommandFactory> {\n     return {\n         onEnter: {\n             enabled: commands.onEnter,\n-            disabled: (_) => () => vscode.commands.executeCommand(\"default:type\", {text: \"\\n\"}),\n+            disabled: (_) => () => vscode.commands.executeCommand(\"default:type\", { text: \"\\n\" }),\n         },\n         restartServer: {\n             enabled: (ctx) => async () => {\n@@ -145,53 +144,52 @@ function createCommands(): Record<string, CommandFactory> {\n                     health: \"stopped\",\n                 });\n             },\n-            disabled: (_) => async () => {\n-            },\n+            disabled: (_) => async () => {},\n         },\n \n-        analyzerStatus: {enabled: commands.analyzerStatus},\n-        memoryUsage: {enabled: commands.memoryUsage},\n-        shuffleCrateGraph: {enabled: commands.shuffleCrateGraph},\n-        reloadWorkspace: {enabled: commands.reloadWorkspace},\n-        rebuildProcMacros: {enabled: commands.rebuildProcMacros},\n-        addProject: {enabled: commands.addProject},\n-        matchingBrace: {enabled: commands.matchingBrace},\n-        joinLines: {enabled: commands.joinLines},\n-        parentModule: {enabled: commands.parentModule},\n-        syntaxTree: {enabled: commands.syntaxTree},\n-        viewHir: {enabled: commands.viewHir},\n-        viewMir: {enabled: commands.viewMir},\n+        analyzerStatus: { enabled: commands.analyzerStatus },\n+        memoryUsage: { enabled: commands.memoryUsage },\n+        shuffleCrateGraph: { enabled: commands.shuffleCrateGraph },\n+        reloadWorkspace: { enabled: commands.reloadWorkspace },\n+        rebuildProcMacros: { enabled: commands.rebuildProcMacros },\n+        addProject: { enabled: commands.addProject },\n+        matchingBrace: { enabled: commands.matchingBrace },\n+        joinLines: { enabled: commands.joinLines },\n+        parentModule: { enabled: commands.parentModule },\n+        syntaxTree: { enabled: commands.syntaxTree },\n+        viewHir: { enabled: commands.viewHir },\n+        viewMir: { enabled: commands.viewMir },\n         interpretFunction: { enabled: commands.interpretFunction },\n-        viewFileText: {enabled: commands.viewFileText},\n-        viewItemTree: {enabled: commands.viewItemTree},\n-        viewCrateGraph: {enabled: commands.viewCrateGraph},\n-        viewFullCrateGraph: {enabled: commands.viewFullCrateGraph},\n-        expandMacro: {enabled: commands.expandMacro},\n-        run: {enabled: commands.run},\n-        copyRunCommandLine: {enabled: commands.copyRunCommandLine},\n-        debug: {enabled: commands.debug},\n-        newDebugConfig: {enabled: commands.newDebugConfig},\n-        openDocs: {enabled: commands.openDocs},\n-        openCargoToml: {enabled: commands.openCargoToml},\n-        peekTests: {enabled: commands.peekTests},\n-        moveItemUp: {enabled: commands.moveItemUp},\n-        moveItemDown: {enabled: commands.moveItemDown},\n-        cancelFlycheck: {enabled: commands.cancelFlycheck},\n-        clearFlycheck: {enabled: commands.clearFlycheck},\n-        runFlycheck: {enabled: commands.runFlycheck},\n-        ssr: {enabled: commands.ssr},\n-        serverVersion: {enabled: commands.serverVersion},\n+        viewFileText: { enabled: commands.viewFileText },\n+        viewItemTree: { enabled: commands.viewItemTree },\n+        viewCrateGraph: { enabled: commands.viewCrateGraph },\n+        viewFullCrateGraph: { enabled: commands.viewFullCrateGraph },\n+        expandMacro: { enabled: commands.expandMacro },\n+        run: { enabled: commands.run },\n+        copyRunCommandLine: { enabled: commands.copyRunCommandLine },\n+        debug: { enabled: commands.debug },\n+        newDebugConfig: { enabled: commands.newDebugConfig },\n+        openDocs: { enabled: commands.openDocs },\n+        openCargoToml: { enabled: commands.openCargoToml },\n+        peekTests: { enabled: commands.peekTests },\n+        moveItemUp: { enabled: commands.moveItemUp },\n+        moveItemDown: { enabled: commands.moveItemDown },\n+        cancelFlycheck: { enabled: commands.cancelFlycheck },\n+        clearFlycheck: { enabled: commands.clearFlycheck },\n+        runFlycheck: { enabled: commands.runFlycheck },\n+        ssr: { enabled: commands.ssr },\n+        serverVersion: { enabled: commands.serverVersion },\n         // Internal commands which are invoked by the server.\n-        applyActionGroup: {enabled: commands.applyActionGroup},\n-        applySnippetWorkspaceEdit: {enabled: commands.applySnippetWorkspaceEditCommand},\n-        debugSingle: {enabled: commands.debugSingle},\n-        gotoLocation: {enabled: commands.gotoLocation},\n-        linkToCommand: {enabled: commands.linkToCommand},\n-        resolveCodeAction: {enabled: commands.resolveCodeAction},\n-        runSingle: {enabled: commands.runSingle},\n-        showReferences: {enabled: commands.showReferences},\n-        triggerParameterHints: {enabled: commands.triggerParameterHints},\n-        openLogs: {enabled: commands.openLogs},\n-        revealDependency: {enabled: commands.revealDependency}\n+        applyActionGroup: { enabled: commands.applyActionGroup },\n+        applySnippetWorkspaceEdit: { enabled: commands.applySnippetWorkspaceEditCommand },\n+        debugSingle: { enabled: commands.debugSingle },\n+        gotoLocation: { enabled: commands.gotoLocation },\n+        linkToCommand: { enabled: commands.linkToCommand },\n+        resolveCodeAction: { enabled: commands.resolveCodeAction },\n+        runSingle: { enabled: commands.runSingle },\n+        showReferences: { enabled: commands.showReferences },\n+        triggerParameterHints: { enabled: commands.triggerParameterHints },\n+        openLogs: { enabled: commands.openLogs },\n+        revealDependency: { enabled: commands.revealDependency },\n     };\n }"}, {"sha": "9c5c88c49e54fbefc347c1f0eac4c9583eac1d91", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/061940dad905e1a439b1eaead3342276294c4a4c/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=061940dad905e1a439b1eaead3342276294c4a4c", "patch": "@@ -3,7 +3,7 @@ import * as os from \"os\";\n import * as path from \"path\";\n import * as readline from \"readline\";\n import * as vscode from \"vscode\";\n-import {execute, log, memoizeAsync} from \"./util\";\n+import { execute, log, memoizeAsync } from \"./util\";\n \n interface CompilationArtifact {\n     fileName: string;\n@@ -42,7 +42,7 @@ export class Cargo {\n             }\n         }\n \n-        const result: ArtifactSpec = {cargoArgs: cargoArgs};\n+        const result: ArtifactSpec = { cargoArgs: cargoArgs };\n         if (cargoArgs[0] === \"test\" || cargoArgs[0] === \"bench\") {\n             // for instance, `crates\\rust-analyzer\\tests\\heavy_tests\\main.rs` tests\n             // produce 2 artifacts: {\"kind\": \"bin\"} and {\"kind\": \"test\"}\n@@ -147,7 +147,7 @@ export class Cargo {\n \n             cargo.stderr.on(\"data\", (chunk) => onStderrString(chunk.toString()));\n \n-            const rl = readline.createInterface({input: cargo.stdout});\n+            const rl = readline.createInterface({ input: cargo.stdout });\n             rl.on(\"line\", (line) => {\n                 const message = JSON.parse(line);\n                 onStdoutJson(message);\n@@ -189,14 +189,14 @@ export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    return await execute(`${rustcPath} --print sysroot`, {cwd: dir});\n+    return await execute(`${rustcPath} --print sysroot`, { cwd: dir });\n }\n \n export async function getRustcId(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n \n     // do not memoize the result because the toolchain may change between runs\n-    const data = await execute(`${rustcPath} -V -v`, {cwd: dir});\n+    const data = await execute(`${rustcPath} -V -v`, { cwd: dir });\n     const rx = /commit-hash:\\s(.*)$/m;\n \n     return rx.exec(data)![1];"}]}