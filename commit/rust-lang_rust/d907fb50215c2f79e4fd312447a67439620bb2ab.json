{"sha": "d907fb50215c2f79e4fd312447a67439620bb2ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDdmYjUwMjE1YzJmNzllNGZkMzEyNDQ3YTY3NDM5NjIwYmIyYWI=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-09T19:06:33Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Rename ThreadSet to ThreadManager.", "tree": {"sha": "98f44032eb1d16cd712d7067584a43b6137cb980", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f44032eb1d16cd712d7067584a43b6137cb980"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d907fb50215c2f79e4fd312447a67439620bb2ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d907fb50215c2f79e4fd312447a67439620bb2ab", "html_url": "https://github.com/rust-lang/rust/commit/d907fb50215c2f79e4fd312447a67439620bb2ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d907fb50215c2f79e4fd312447a67439620bb2ab/comments", "author": null, "committer": null, "parents": [{"sha": "1c8a59c69189b42b97db49292d0ca198a7d5977a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8a59c69189b42b97db49292d0ca198a7d5977a", "html_url": "https://github.com/rust-lang/rust/commit/1c8a59c69189b42b97db49292d0ca198a7d5977a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b56755083f4d043e4f1361f87d4f252472335492", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d907fb50215c2f79e4fd312447a67439620bb2ab/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d907fb50215c2f79e4fd312447a67439620bb2ab/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=d907fb50215c2f79e4fd312447a67439620bb2ab", "patch": "@@ -27,7 +27,7 @@ use rustc_target::abi::{LayoutOf, Size};\n \n use crate::*;\n \n-pub use crate::threads::{ThreadId, ThreadSet, ThreadState, ThreadLocalStorage};\n+pub use crate::threads::{ThreadId, ThreadManager, ThreadState, ThreadLocalStorage};\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n@@ -257,7 +257,7 @@ pub struct Evaluator<'mir, 'tcx> {\n     pub(crate) time_anchor: Instant,\n \n     /// The set of threads.\n-    pub(crate) threads: ThreadSet<'mir, 'tcx>,\n+    pub(crate) threads: ThreadManager<'mir, 'tcx>,\n \n     /// Precomputed `TyLayout`s for primitive data types that are commonly used inside Miri.\n     pub(crate) layouts: PrimitiveLayouts<'tcx>,"}, {"sha": "2352f26ebeef9484685d5de59e964266ba8d2d16", "filename": "src/threads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d907fb50215c2f79e4fd312447a67439620bb2ab/src%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d907fb50215c2f79e4fd312447a67439620bb2ab/src%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthreads.rs?ref=d907fb50215c2f79e4fd312447a67439620bb2ab", "patch": "@@ -120,7 +120,7 @@ impl<'mir, 'tcx> Default for Thread<'mir, 'tcx> {\n \n /// A set of threads.\n #[derive(Debug)]\n-pub struct ThreadSet<'mir, 'tcx> {\n+pub struct ThreadManager<'mir, 'tcx> {\n     /// Identifier of the currently active thread.\n     active_thread: ThreadId,\n     /// Threads used in the program.\n@@ -131,15 +131,15 @@ pub struct ThreadSet<'mir, 'tcx> {\n     blockset_counter: u32,\n }\n \n-impl<'mir, 'tcx> Default for ThreadSet<'mir, 'tcx> {\n+impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n     fn default() -> Self {\n         let mut threads = IndexVec::new();\n         threads.push(Default::default());\n         Self { active_thread: ThreadId::new(0), threads: threads, blockset_counter: 0 }\n     }\n }\n \n-impl<'mir, 'tcx: 'mir> ThreadSet<'mir, 'tcx> {\n+impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     /// Borrow the stack of the active thread.\n     fn active_thread_stack(&self) -> &[Frame<'mir, 'tcx, Tag, FrameData<'tcx>>] {\n         &self.threads[self.active_thread].stack"}]}