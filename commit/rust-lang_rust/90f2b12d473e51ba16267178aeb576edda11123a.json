{"sha": "90f2b12d473e51ba16267178aeb576edda11123a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwZjJiMTJkNDczZTUxYmExNjI2NzE3OGFlYjU3NmVkZGExMTEyM2E=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-28T07:45:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T09:03:55Z"}, "message": "Fix simd comparison", "tree": {"sha": "4cc5e4b27f1c6679e29556df08978fd90b4d3bed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cc5e4b27f1c6679e29556df08978fd90b4d3bed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90f2b12d473e51ba16267178aeb576edda11123a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90f2b12d473e51ba16267178aeb576edda11123a", "html_url": "https://github.com/rust-lang/rust/commit/90f2b12d473e51ba16267178aeb576edda11123a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90f2b12d473e51ba16267178aeb576edda11123a/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef", "html_url": "https://github.com/rust-lang/rust/commit/9e3f2391b8f9da831c8aa25ce8cdc4eb4dc300ef"}], "stats": {"total": 48, "additions": 33, "deletions": 15}, "files": [{"sha": "7fe1d082e34bfc399d480cafeadc51428d8aeaf3", "filename": "example/std_example.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/90f2b12d473e51ba16267178aeb576edda11123a/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f2b12d473e51ba16267178aeb576edda11123a/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=90f2b12d473e51ba16267178aeb576edda11123a", "patch": "@@ -57,8 +57,12 @@ unsafe fn test_simd() {\n     let x = _mm_setzero_si128();\n     let y = _mm_set1_epi16(7);\n     let or = _mm_or_si128(x, y);\n+    let cmp_eq = _mm_cmpeq_epi8(y, y);\n+    let cmp_lt = _mm_cmplt_epi8(y, y);\n \n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(or), [7, 7, 7, 7, 7, 7, 7, 7]);\n+    assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_eq), [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]);\n+    assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_lt), [0, 0, 0, 0, 0, 0, 0, 0]);\n }\n \n #[derive(PartialEq)]"}, {"sha": "a2451ff464b6e61010d0b84dc44f55c0b13fa3e8", "filename": "src/intrinsics.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/90f2b12d473e51ba16267178aeb576edda11123a/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90f2b12d473e51ba16267178aeb576edda11123a/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=90f2b12d473e51ba16267178aeb576edda11123a", "patch": "@@ -155,26 +155,40 @@ fn simd_for_each_lane<'tcx, B: Backend>(\n     }\n }\n \n-macro_rules! simd_binop {\n-    ($fx:expr, $intrinsic:expr, icmp($cc:ident, $x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, _lane_layout, ret_lane_layout, x_lane, y_lane| {\n+fn bool_to_zero_or_max_uint<'tcx>(\n+    fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n+    layout: TyLayout<'tcx>,\n+    val: Value,\n+) -> CValue<'tcx> {\n+    let ty = fx.clif_type(layout.ty).unwrap();\n+\n+    let zero = fx.bcx.ins().iconst(ty, 0);\n+    let max = fx.bcx.ins().iconst(ty, (u64::max_value() >> (64 - ty.bits())) as i64);\n+    let res = crate::common::codegen_select(&mut fx.bcx, val, max, zero);\n+    CValue::by_val(res, layout)\n+}\n+\n+macro_rules! simd_cmp {\n+    ($fx:expr, $intrinsic:expr, $cc:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, _lane_layout, res_lane_layout, x_lane, y_lane| {\n             let res_lane = fx.bcx.ins().icmp(IntCC::$cc, x_lane, y_lane);\n-            let res_lane = fx.bcx.ins().bint(types::I8, res_lane);\n-            CValue::by_val(res_lane, ret_lane_layout)\n+            bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n         });\n     };\n-    ($fx:expr, $intrinsic:expr, icmp($cc_u:ident|$cc_s:ident, $x:ident, $y:ident) -> $ret:ident) => {\n-        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, lane_layout, ret_lane_layout, x_lane, y_lane| {\n+    ($fx:expr, $intrinsic:expr, $cc_u:ident|$cc_s:ident($x:ident, $y:ident) -> $ret:ident) => {\n+        simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, lane_layout, res_lane_layout, x_lane, y_lane| {\n             let res_lane = match lane_layout.ty.sty {\n                 ty::Uint(_) => fx.bcx.ins().icmp(IntCC::$cc_u, x_lane, y_lane),\n                 ty::Int(_) => fx.bcx.ins().icmp(IntCC::$cc_s, x_lane, y_lane),\n                 _ => unreachable!(\"{:?}\", lane_layout.ty),\n             };\n-            let res_lane = fx.bcx.ins().bint(types::I8, res_lane);\n-            CValue::by_val(res_lane, ret_lane_layout)\n+            bool_to_zero_or_max_uint(fx, res_lane_layout, res_lane)\n         });\n     };\n \n+}\n+\n+macro_rules! simd_binop {\n     ($fx:expr, $intrinsic:expr, $op:ident($x:ident, $y:ident) -> $ret:ident) => {\n         simd_for_each_lane($fx, $intrinsic, $x, $y, $ret, |fx, _lane_layout, ret_lane_layout, x_lane, y_lane| {\n             let res_lane = fx.bcx.ins().$op(x_lane, y_lane);\n@@ -773,22 +787,22 @@ pub fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n         };\n \n         simd_eq, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(Equal, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, Equal(x, y) -> ret);\n         };\n         simd_ne, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(NotEqual, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, NotEqual(x, y) -> ret);\n         };\n         simd_lt, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(UnsignedLessThan|SignedLessThan, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, UnsignedLessThan|SignedLessThan(x, y) -> ret);\n         };\n         simd_le, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(UnsignedLessThanOrEqual|SignedLessThanOrEqual, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, UnsignedLessThanOrEqual|SignedLessThanOrEqual(x, y) -> ret);\n         };\n         simd_gt, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(UnsignedGreaterThan|SignedGreaterThan, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, UnsignedGreaterThan|SignedGreaterThan(x, y) -> ret);\n         };\n         simd_ge, (c x, c y) {\n-            simd_binop!(fx, intrinsic, icmp(UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual, x, y) -> ret);\n+            simd_cmp!(fx, intrinsic, UnsignedGreaterThanOrEqual|SignedGreaterThanOrEqual(x, y) -> ret);\n         };\n \n         simd_add, (c x, c y) {"}]}