{"sha": "dabf0c6371d3b193664f58746fa27c1835a010f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYmYwYzYzNzFkM2IxOTM2NjRmNTg3NDZmYTI3YzE4MzVhMDEwZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-14T14:41:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-14T14:41:15Z"}, "message": "Auto merge of #24312 - rprichard:destabilize-format-args, r=alexcrichton\n\nFixes #22953.", "tree": {"sha": "302b3576b140f33bdbd26370271978c1e49789d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302b3576b140f33bdbd26370271978c1e49789d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dabf0c6371d3b193664f58746fa27c1835a010f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dabf0c6371d3b193664f58746fa27c1835a010f3", "html_url": "https://github.com/rust-lang/rust/commit/dabf0c6371d3b193664f58746fa27c1835a010f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dabf0c6371d3b193664f58746fa27c1835a010f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47551b57456c108c69f698b114606a275fb01643", "url": "https://api.github.com/repos/rust-lang/rust/commits/47551b57456c108c69f698b114606a275fb01643", "html_url": "https://github.com/rust-lang/rust/commit/47551b57456c108c69f698b114606a275fb01643"}, {"sha": "861556390ea9035396ec37f8eb90570a2a804ec2", "url": "https://api.github.com/repos/rust-lang/rust/commits/861556390ea9035396ec37f8eb90570a2a804ec2", "html_url": "https://github.com/rust-lang/rust/commit/861556390ea9035396ec37f8eb90570a2a804ec2"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "1c70f9941f7a08bd66b1c8a75f9e2f5d5f0c7eff", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -38,7 +38,8 @@ mod num;\n mod float;\n mod builders;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -134,7 +135,8 @@ enum Void {}\n /// compile time it is ensured that the function and the value have the correct\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -154,7 +156,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new<'b, T>(x: &'b T,\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n@@ -166,7 +169,8 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn from_usize(x: &usize) -> ArgumentV1 {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -189,7 +193,8 @@ impl<'a> Arguments<'a> {\n     /// When using the format_args!() macro, this function is used to generate the\n     /// Arguments structure.\n     #[doc(hidden)] #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n@@ -206,7 +211,8 @@ impl<'a> Arguments<'a> {\n     /// created with `argumentusize`. However, failing to do so doesn't cause\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)] #[inline]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+    #[cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n     pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {"}, {"sha": "0d851c1e897a9a67fe2bdfd85e8a50bdc6e08e1e", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -14,68 +14,69 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#![stable(feature = \"rust1\", since = \"1.0.0\")]\n+#![cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n+#![cfg_attr(not(stage0), unstable(feature = \"core\", reason = \"internal to format_args!\"))]\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct Argument {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub position: Position,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub format: FormatSpec,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub struct FormatSpec {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub fill: char,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub align: Alignment,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub flags: u32,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub precision: Count,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     pub width: Count,\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n #[derive(Copy, Clone, PartialEq)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Left,\n     /// Indication that contents should be right-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Right,\n     /// Indication that contents should be center-aligned.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Center,\n     /// No alignment was requested.\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Unknown,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Count {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Is(usize),\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Param(usize),\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     NextParam,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Implied,\n }\n \n #[derive(Copy, Clone)]\n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n pub enum Position {\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     Next,\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(stage0, stable(feature = \"rust1\", since = \"1.0.0\"))]\n     At(usize)\n }"}, {"sha": "374f6fa50406f39efd40a5faad10bbc26349fd1f", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -38,6 +38,10 @@ enum Position {\n \n struct Context<'a, 'b:'a> {\n     ecx: &'a mut ExtCtxt<'b>,\n+    /// The macro's call site. References to unstable formatting internals must\n+    /// use this span to pass the stability checker.\n+    macsp: Span,\n+    /// The span of the format string literal.\n     fmtsp: Span,\n \n     /// Parsed argument expressions and the types that we've found so far for\n@@ -308,7 +312,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     }\n \n     fn trans_count(&self, c: parse::Count) -> P<ast::Expr> {\n-        let sp = self.fmtsp;\n+        let sp = self.macsp;\n         let count = |c, arg| {\n             let mut path = Context::rtpath(self.ecx, \"Count\");\n             path.push(self.ecx.ident_of(c));\n@@ -346,7 +350,7 @@ impl<'a, 'b> Context<'a, 'b> {\n     /// Translate a `parse::Piece` to a static `rt::Argument` or append\n     /// to the `literal` string.\n     fn trans_piece(&mut self, piece: &parse::Piece) -> Option<P<ast::Expr>> {\n-        let sp = self.fmtsp;\n+        let sp = self.macsp;\n         match *piece {\n             parse::String(s) => {\n                 self.literal.push_str(s);\n@@ -442,22 +446,22 @@ impl<'a, 'b> Context<'a, 'b> {\n                     piece_ty: P<ast::Ty>,\n                     pieces: Vec<P<ast::Expr>>)\n                     -> P<ast::Expr> {\n-        let fmtsp = piece_ty.span;\n-        let ty = ecx.ty_rptr(fmtsp,\n-            ecx.ty(fmtsp, ast::TyVec(piece_ty)),\n-            Some(ecx.lifetime(fmtsp, special_idents::static_lifetime.name)),\n+        let sp = piece_ty.span;\n+        let ty = ecx.ty_rptr(sp,\n+            ecx.ty(sp, ast::TyVec(piece_ty)),\n+            Some(ecx.lifetime(sp, special_idents::static_lifetime.name)),\n             ast::MutImmutable);\n-        let slice = ecx.expr_vec_slice(fmtsp, pieces);\n+        let slice = ecx.expr_vec_slice(sp, pieces);\n         let st = ast::ItemStatic(ty, ast::MutImmutable, slice);\n \n         let name = ecx.ident_of(name);\n-        let item = ecx.item(fmtsp, name, vec![], st);\n-        let decl = respan(fmtsp, ast::DeclItem(item));\n+        let item = ecx.item(sp, name, vec![], st);\n+        let decl = respan(sp, ast::DeclItem(item));\n \n         // Wrap the declaration in a block so that it forms a single expression.\n-        ecx.expr_block(ecx.block(fmtsp,\n-            vec![P(respan(fmtsp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n-            Some(ecx.expr_ident(fmtsp, name))))\n+        ecx.expr_block(ecx.block(sp,\n+            vec![P(respan(sp, ast::StmtDecl(P(decl), ast::DUMMY_NODE_ID)))],\n+            Some(ecx.expr_ident(sp, name))))\n     }\n \n     /// Actually builds the expression which the iformat! block will be expanded\n@@ -497,7 +501,7 @@ impl<'a, 'b> Context<'a, 'b> {\n \n             let name = self.ecx.ident_of(&format!(\"__arg{}\", i));\n             pats.push(self.ecx.pat_ident(e.span, name));\n-            locals.push(Context::format_arg(self.ecx, e.span, arg_ty,\n+            locals.push(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty,\n                                             self.ecx.expr_ident(e.span, name)));\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -515,7 +519,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                                                   *name));\n             pats.push(self.ecx.pat_ident(e.span, lname));\n             names[*self.name_positions.get(name).unwrap()] =\n-                Some(Context::format_arg(self.ecx, e.span, arg_ty,\n+                Some(Context::format_arg(self.ecx, self.macsp, e.span, arg_ty,\n                                          self.ecx.expr_ident(e.span, lname)));\n             heads.push(self.ecx.expr_addr_of(e.span, e));\n         }\n@@ -566,7 +570,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             // Build up the static array which will store our precompiled\n             // nonstandard placeholders, if there are any.\n             let piece_ty = self.ecx.ty_path(self.ecx.path_global(\n-                    self.fmtsp,\n+                    self.macsp,\n                     Context::rtpath(self.ecx, \"Argument\")));\n             let fmt = Context::static_array(self.ecx,\n                                             \"__STATIC_FMTARGS\",\n@@ -576,14 +580,14 @@ impl<'a, 'b> Context<'a, 'b> {\n             (\"new_v1_formatted\", vec![pieces, args_slice, fmt])\n         };\n \n-        self.ecx.expr_call_global(self.fmtsp, vec!(\n+        self.ecx.expr_call_global(self.macsp, vec!(\n                 self.ecx.ident_of_std(\"core\"),\n                 self.ecx.ident_of(\"fmt\"),\n                 self.ecx.ident_of(\"Arguments\"),\n                 self.ecx.ident_of(fn_name)), fn_args)\n     }\n \n-    fn format_arg(ecx: &ExtCtxt, sp: Span,\n+    fn format_arg(ecx: &ExtCtxt, macsp: Span, sp: Span,\n                   ty: &ArgumentType, arg: P<ast::Expr>)\n                   -> P<ast::Expr> {\n         let trait_ = match *ty {\n@@ -607,7 +611,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n             }\n             Unsigned => {\n-                return ecx.expr_call_global(sp, vec![\n+                return ecx.expr_call_global(macsp, vec![\n                         ecx.ident_of_std(\"core\"),\n                         ecx.ident_of(\"fmt\"),\n                         ecx.ident_of(\"ArgumentV1\"),\n@@ -620,7 +624,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(trait_),\n                 ecx.ident_of(\"fmt\")]);\n-        ecx.expr_call_global(sp, vec![\n+        ecx.expr_call_global(macsp, vec![\n                 ecx.ident_of_std(\"core\"),\n                 ecx.ident_of(\"fmt\"),\n                 ecx.ident_of(\"ArgumentV1\"),\n@@ -650,6 +654,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n                                     names: HashMap<String, P<ast::Expr>>)\n                                     -> P<ast::Expr> {\n     let arg_types: Vec<_> = (0..args.len()).map(|_| None).collect();\n+    let macsp = ecx.call_site();\n     // Expand the format literal so that efmt.span will have a backtrace. This\n     // is essential for locating a bug when the format literal is generated in\n     // a macro. (e.g. println!(\"{}\"), which uses concat!($fmt, \"\\n\")).\n@@ -668,6 +673,7 @@ pub fn expand_preparsed_format_args(ecx: &mut ExtCtxt, sp: Span,\n         pieces: Vec::new(),\n         str_pieces: Vec::new(),\n         all_pieces_simple: true,\n+        macsp: macsp,\n         fmtsp: efmt.span,\n     };\n     let fmt = match expr_to_string(cx.ecx,"}, {"sha": "d6b35f5385a4221012e413a1d35b8dfdca600ce9", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![feature(libc, std_misc)]\n "}, {"sha": "6c58194f857a6769dee846ad8d90cdca4ba8904d", "filename": "src/test/run-pass/capturing-logging.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapturing-logging.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -10,7 +10,6 @@\n \n // exec-env:RUST_LOG=info\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax, old_io, rustc_private, std_misc)]"}, {"sha": "352733601f2722bdf7a8d055ee0ab13d19bbed4c", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc)]"}, {"sha": "4d54bb4ef7250170aa5027128919eecbcfd84a21", "filename": "src/test/run-pass/exponential-notation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fexponential-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexponential-notation.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(std_misc)]\n "}, {"sha": "298f2a4719db9f4ebbb84331e3fc660b441ed5d7", "filename": "src/test/run-pass/float-nan.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ffloat-nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat-nan.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(std_misc)]\n "}, {"sha": "a9001a3cdcf6ec64eb1236ce8b284a4894d1900f", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-// pretty-expanded FIXME #23616\n \n #![feature(std_misc, libc)]\n "}, {"sha": "483ae02d2dcbda8ac04946e39a27aced35282394", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(rustc_private, old_io)]\n "}, {"sha": "a30162274139b8cc44f63c0fbbacd38e5333d5e8", "filename": "src/test/run-pass/issue-20676.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fissue-20676.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20676.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -12,7 +12,6 @@\n // UFCS-style calls to a method in `Trait` where `Self` was bound to a\n // trait object of type `Trait`. See also `ufcs-trait-object.rs`.\n \n-// pretty-expanded FIXME #23616\n \n use std::fmt;\n "}, {"sha": "f1ac96ab63e5c2dd6314d14a27716fcee301d3d3", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -12,7 +12,6 @@\n // for completeness since .rs files linked from .rc files support this\n // notation to specify their module's attributes\n \n-// pretty-expanded FIXME #23616\n \n #![feature(custom_attribute, libc)]\n #![allow(unused_attribute)]"}, {"sha": "3517e4a29b8ac68029b576f4868552cee2760b45", "filename": "src/test/run-pass/rust-log-filter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Frust-log-filter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frust-log-filter.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -10,7 +10,6 @@\n \n // exec-env:RUST_LOG=rust_log_filter/foo\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc, rustc_private)]"}, {"sha": "a5282b1097e5b9d0b881716e3066547a8470f66a", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(std_misc)]\n #![allow(dead_assignment)]"}, {"sha": "3f18c0c7464951d3ddbf291075addbe0c1641e6b", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc)]"}, {"sha": "fd70c0409fb9811a7b322162a05932a46a86f6f5", "filename": "src/test/run-pass/variadic-ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf0c6371d3b193664f58746fa27c1835a010f3/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvariadic-ffi.rs?ref=dabf0c6371d3b193664f58746fa27c1835a010f3", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// pretty-expanded FIXME #23616\n \n #![feature(libc, std_misc)]\n "}]}