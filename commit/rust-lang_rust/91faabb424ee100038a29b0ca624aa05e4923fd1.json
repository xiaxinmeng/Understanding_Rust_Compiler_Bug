{"sha": "91faabb424ee100038a29b0ca624aa05e4923fd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmFhYmI0MjRlZTEwMDAzOGEyOWIwY2E2MjRhYTA1ZTQ5MjNmZDE=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-11T16:16:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-11T16:16:00Z"}, "message": "Rollup merge of #86174 - lqd:const-ub-align, r=RalfJung\n\nDetect incorrect vtable alignment during const eval\n\nThis PR fixes #86132 by detecting invalid alignment values for trait objects in the interpreter, and emitting an error about this conversion failure, to avoid the ICE.\n\nI've noticed that the error emitted at https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler/rustc_mir/src/interpret/traits.rs#L163-L166 doesn't seem to be present in the const-ub tests, so I've tried adding a test that triggers both of these cases: one for the invalid size, and another for the invalid alignment that #86132 tracks (I have found different magic values triggering different `Align::from_bytes` errors than the \"power of 2\" one, if need be).\n\nHowever, when doing that, I *cannot* for the life of me figure out the correct incantation to make these 2 errors trigger with the \"it is undefined behavior to use this value\" message rather than the \"any use of this value will cause an error\" lint.\n\nI've tried Oli's suggestions of different values, tuples and arrays, using the transparent wrapper trick from the other tests and I was only able to trigger the regular const-ub errors about the size of the vtable, or that the drop pointer was invalid. Maybe these \"type validation failed\" errors happen before this part of the interpreter is reached and there just needs some magic incorrect values to bypass them, I don't know.\n\nSince this fixes an ICE, and if the constants are indeed used, these 2 tests will turn into a hard error, I thought I'd open the PR anyways. And if ```@RalfJung``` you know of a way I could manage that (if you think that these tests are worth checking that the `throw_ub_format!` does indeed create const-ub errors as we expect) I'd be grateful.\n\nFor that reason, r? ```@RalfJung``` and cc ```@oli-obk.```", "tree": {"sha": "dc898476d0fd269f1d1f17e67b8f3ae88960b557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc898476d0fd269f1d1f17e67b8f3ae88960b557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91faabb424ee100038a29b0ca624aa05e4923fd1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgw4xACRBK7hj4Ov3rIwAAPmcIAKyZFvpMIkvmvtrBDiQ8q2r8\nlSs4dsZ6dmkG272dQnH1a7IHMNzMiDyTpnfCgJrivFbhcKgTh1l6NDmWhUSjSDas\nDyf2Exx9FZ9gf5DMDCGEDMgRHeE/iLlih3isViqbid+6rmWkghMi71FgMDr9E2Uu\nJ13UbDb2iKWUmUJoD/XzUXyD4L3vbSHrsEm64Pkp+UOFpwY9reDr+7/9sHWxmDEF\nCZSVFubLiuSL9/0T3Cnj00T8UX+rnaZxwmfSQimlLL3Vnl7mP0jJK1WJU+z57Eth\nb2USW29WZes5RLL1Gqiq3S1FqEsidopPo4DEpMau20Or8WSxfsYXgiiYI4I8Jk0=\n=5BEL\n-----END PGP SIGNATURE-----\n", "payload": "tree dc898476d0fd269f1d1f17e67b8f3ae88960b557\nparent 79c0559ce154fc18b0d0a4601671484160690dd3\nparent d44990367d57e40a6ec157174a463818665ac6de\nauthor Yuki Okushi <jtitor@2k36.org> 1623428160 +0900\ncommitter GitHub <noreply@github.com> 1623428160 +0900\n\nRollup merge of #86174 - lqd:const-ub-align, r=RalfJung\n\nDetect incorrect vtable alignment during const eval\n\nThis PR fixes #86132 by detecting invalid alignment values for trait objects in the interpreter, and emitting an error about this conversion failure, to avoid the ICE.\n\nI've noticed that the error emitted at https://github.com/rust-lang/rust/blob/a50d72158e08e02cfc051b863017bdbd2c45b637/compiler/rustc_mir/src/interpret/traits.rs#L163-L166 doesn't seem to be present in the const-ub tests, so I've tried adding a test that triggers both of these cases: one for the invalid size, and another for the invalid alignment that #86132 tracks (I have found different magic values triggering different `Align::from_bytes` errors than the \"power of 2\" one, if need be).\n\nHowever, when doing that, I *cannot* for the life of me figure out the correct incantation to make these 2 errors trigger with the \"it is undefined behavior to use this value\" message rather than the \"any use of this value will cause an error\" lint.\n\nI've tried Oli's suggestions of different values, tuples and arrays, using the transparent wrapper trick from the other tests and I was only able to trigger the regular const-ub errors about the size of the vtable, or that the drop pointer was invalid. Maybe these \"type validation failed\" errors happen before this part of the interpreter is reached and there just needs some magic incorrect values to bypass them, I don't know.\n\nSince this fixes an ICE, and if the constants are indeed used, these 2 tests will turn into a hard error, I thought I'd open the PR anyways. And if ```@RalfJung``` you know of a way I could manage that (if you think that these tests are worth checking that the `throw_ub_format!` does indeed create const-ub errors as we expect) I'd be grateful.\n\nFor that reason, r? ```@RalfJung``` and cc ```@oli-obk.```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91faabb424ee100038a29b0ca624aa05e4923fd1", "html_url": "https://github.com/rust-lang/rust/commit/91faabb424ee100038a29b0ca624aa05e4923fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91faabb424ee100038a29b0ca624aa05e4923fd1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79c0559ce154fc18b0d0a4601671484160690dd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/79c0559ce154fc18b0d0a4601671484160690dd3", "html_url": "https://github.com/rust-lang/rust/commit/79c0559ce154fc18b0d0a4601671484160690dd3"}, {"sha": "d44990367d57e40a6ec157174a463818665ac6de", "url": "https://api.github.com/repos/rust-lang/rust/commits/d44990367d57e40a6ec157174a463818665ac6de", "html_url": "https://github.com/rust-lang/rust/commit/d44990367d57e40a6ec157174a463818665ac6de"}], "stats": {"total": 52, "additions": 51, "deletions": 1}, "files": [{"sha": "d0c04b5b414ebf3feb235ad9fb90899b4e78d35b", "filename": "compiler/rustc_mir/src/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91faabb424ee100038a29b0ca624aa05e4923fd1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91faabb424ee100038a29b0ca624aa05e4923fd1/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Ftraits.rs?ref=91faabb424ee100038a29b0ca624aa05e4923fd1", "patch": "@@ -158,13 +158,15 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let size = u64::try_from(self.force_bits(size, pointer_size)?).unwrap();\n         let align = vtable.read_ptr_sized(pointer_size * 2)?.check_init()?;\n         let align = u64::try_from(self.force_bits(align, pointer_size)?).unwrap();\n+        let align = Align::from_bytes(align)\n+            .map_err(|e| err_ub_format!(\"invalid vtable: alignment {}\", e))?;\n \n         if size >= self.tcx.data_layout.obj_size_bound() {\n             throw_ub_format!(\n                 \"invalid vtable: \\\n                 size is bigger than largest supported object\"\n             );\n         }\n-        Ok((Size::from_bytes(size), Align::from_bytes(align).unwrap()))\n+        Ok((Size::from_bytes(size), align))\n     }\n }"}, {"sha": "0c0e3682de4d647530e991fb9a15c19e56a52f6f", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91faabb424ee100038a29b0ca624aa05e4923fd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91faabb424ee100038a29b0ca624aa05e4923fd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.rs?ref=91faabb424ee100038a29b0ca624aa05e4923fd1", "patch": "@@ -0,0 +1,21 @@\n+// This test contains code with incorrect vtables in a const context:\n+// - from issue 86132: a trait object with invalid alignment caused an ICE in const eval, and now\n+//   triggers an error\n+// - a similar test that triggers a previously-untested const UB error: emitted close to the above\n+//   error, it checks the correctness of the size\n+\n+trait Trait {}\n+\n+const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+    unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously accepted by the compiler\n+//~| invalid vtable: alignment `1000` is not a power of 2\n+\n+const INVALID_VTABLE_SIZE: &dyn Trait =\n+    unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+//~^ ERROR any use of this value will cause an error\n+//~| WARNING this was previously accepted by the compiler\n+//~| invalid vtable: size is bigger than largest supported object\n+\n+fn main() {}"}, {"sha": "c937d039d381e63e1c1bb0b81a927f6cfae445f9", "filename": "src/test/ui/consts/const-eval/ub-incorrect-vtable.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/91faabb424ee100038a29b0ca624aa05e4923fd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91faabb424ee100038a29b0ca624aa05e4923fd1/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-incorrect-vtable.stderr?ref=91faabb424ee100038a29b0ca624aa05e4923fd1", "patch": "@@ -0,0 +1,27 @@\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:10:14\n+   |\n+LL | / const INVALID_VTABLE_ALIGNMENT: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[0usize, 1usize, 1000usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: alignment `1000` is not a power of 2\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: any use of this value will cause an error\n+  --> $DIR/ub-incorrect-vtable.rs:16:14\n+   |\n+LL | / const INVALID_VTABLE_SIZE: &dyn Trait =\n+LL | |     unsafe { std::mem::transmute((&92u8, &[1usize, usize::MAX, 1usize])) };\n+   | |______________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^__-\n+   |                |\n+   |                invalid vtable: size is bigger than largest supported object\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n+\n+error: aborting due to 2 previous errors\n+"}]}