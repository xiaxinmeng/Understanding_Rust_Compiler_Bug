{"sha": "58031c7cb2352fb17f2c720a84f541c532ffdf09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDMxYzdjYjIzNTJmYjE3ZjJjNzIwYTg0ZjU0MWM1MzJmZmRmMDk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-02T21:13:32Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-15T10:58:32Z"}, "message": "ConstKind::Unevaluated", "tree": {"sha": "7a90f44845fd76317160077e0d72d5efa871cb0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a90f44845fd76317160077e0d72d5efa871cb0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58031c7cb2352fb17f2c720a84f541c532ffdf09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58031c7cb2352fb17f2c720a84f541c532ffdf09", "html_url": "https://github.com/rust-lang/rust/commit/58031c7cb2352fb17f2c720a84f541c532ffdf09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58031c7cb2352fb17f2c720a84f541c532ffdf09/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8", "html_url": "https://github.com/rust-lang/rust/commit/08865d94e5a3c2116eeb6ba3c5fd3c0b4e5a17d8"}], "stats": {"total": 90, "additions": 53, "deletions": 37}, "files": [{"sha": "007be7a62ae313bd860f509318ab1bb7a5dedf72", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -25,10 +25,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         match self.monomorphize(&constant.literal).val {\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => self\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => self\n                 .cx\n                 .tcx()\n-                .const_eval_resolve(ty::ParamEnv::reveal_all(), def_id, substs, promoted, None)\n+                .const_eval_resolve(ty::ParamEnv::reveal_all(), def.did, substs, promoted, None)\n                 .map_err(|err| {\n                     if promoted.is_none() {\n                         self.cx"}, {"sha": "539dfa6e892bcde1ecca3960550ab9f070175ea2", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -1586,12 +1586,24 @@ impl<T> WithOptParam<T> {\n }\n \n impl WithOptParam<LocalDefId> {\n+    pub fn to_global(self) -> WithOptParam<DefId> {\n+        WithOptParam { did: self.did.to_def_id(), param_did: self.param_did }\n+    }\n+\n     pub fn ty_def_id(self) -> DefId {\n         if let Some(did) = self.param_did { did } else { self.did.to_def_id() }\n     }\n }\n \n impl WithOptParam<DefId> {\n+    pub fn as_local(self) -> Option<WithOptParam<LocalDefId>> {\n+        self.did.as_local().map(|did| WithOptParam { did, param_did: self.param_did })\n+    }\n+\n+    pub fn is_local(self) -> bool {\n+        self.did.is_local()\n+    }\n+\n     pub fn ty_def_id(self) -> DefId {\n         self.param_did.unwrap_or(self.did)\n     }"}, {"sha": "1cba593879aa50f00aab8861fb84b5e7629a39fa", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -883,18 +883,18 @@ pub trait PrettyPrinter<'tcx>:\n         }\n \n         match ct.val {\n-            ty::ConstKind::Unevaluated(did, substs, promoted) => {\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                 if let Some(promoted) = promoted {\n-                    p!(print_value_path(did, substs));\n+                    p!(print_value_path(def.did, substs));\n                     p!(write(\"::{:?}\", promoted));\n                 } else {\n-                    match self.tcx().def_kind(did) {\n+                    match self.tcx().def_kind(def.did) {\n                         DefKind::Static | DefKind::Const | DefKind::AssocConst => {\n-                            p!(print_value_path(did, substs))\n+                            p!(print_value_path(def.did, substs))\n                         }\n                         _ => {\n-                            if did.is_local() {\n-                                let span = self.tcx().def_span(did);\n+                            if def.is_local() {\n+                                let span = self.tcx().def_span(def.did);\n                                 if let Ok(snip) = self.tcx().sess.source_map().span_to_snippet(span)\n                                 {\n                                     p!(write(\"{}\", snip))"}, {"sha": "1e7171ea06c5c31dd30b86181168026b6e5add3d", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -2278,7 +2278,7 @@ impl<'tcx> Const<'tcx> {\n                 ty::ConstKind::Param(ty::ParamConst::new(index, name))\n             }\n             _ => ty::ConstKind::Unevaluated(\n-                def.did.to_def_id(),\n+                def.to_global(),\n                 InternalSubsts::identity_for_item(tcx, def.did.to_def_id()),\n                 None,\n             ),\n@@ -2347,7 +2347,7 @@ impl<'tcx> Const<'tcx> {\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        if let ConstKind::Unevaluated(did, substs, promoted) = self.val {\n+        if let ConstKind::Unevaluated(def, substs, promoted) = self.val {\n             use crate::mir::interpret::ErrorHandled;\n \n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n@@ -2363,7 +2363,7 @@ impl<'tcx> Const<'tcx> {\n             // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n             // we can call `infcx.const_eval_resolve` which handles inference variables.\n             let param_env_and_substs = if param_env_and_substs.needs_infer() {\n-                tcx.param_env(did).and(InternalSubsts::identity_for_item(tcx, did))\n+                tcx.param_env(def.did).and(InternalSubsts::identity_for_item(tcx, def.did))\n             } else {\n                 param_env_and_substs\n             };\n@@ -2373,7 +2373,7 @@ impl<'tcx> Const<'tcx> {\n             let (param_env, substs) = param_env_and_substs.into_parts();\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            match tcx.const_eval_resolve(param_env, did, substs, promoted, None) {\n+            match tcx.const_eval_resolve(param_env, def.did, substs, promoted, None) {\n                 // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n                 // and we use the original type, so nothing from `substs`\n                 // (which may be identity substs, see above),\n@@ -2433,7 +2433,7 @@ pub enum ConstKind<'tcx> {\n \n     /// Used in the HIR by using `Unevaluated` everywhere and later normalizing to one of the other\n     /// variants when the code is monomorphic enough for that.\n-    Unevaluated(DefId, SubstsRef<'tcx>, Option<Promoted>),\n+    Unevaluated(ty::WithOptParam<DefId>, SubstsRef<'tcx>, Option<Promoted>),\n \n     /// Used to hold computed value.\n     Value(ConstValue<'tcx>),"}, {"sha": "7b84737fa77a46689f4a6bfea3e66ed723a3dcb3", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -321,7 +321,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n             }\n         } else {\n             let tcx = self.tcx();\n-            if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = constant.literal.val {\n+            if let ty::ConstKind::Unevaluated(def, substs, promoted) = constant.literal.val {\n                 if let Some(promoted) = promoted {\n                     let check_err = |verifier: &mut TypeVerifier<'a, 'b, 'tcx>,\n                                      promoted: &Body<'tcx>,\n@@ -357,7 +357,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n                         ConstraintCategory::Boring,\n                         self.cx.param_env.and(type_op::ascribe_user_type::AscribeUserType::new(\n                             constant.literal.ty,\n-                            def_id,\n+                            def.did,\n                             UserSubsts { substs, user_self_ty: None },\n                         )),\n                     ) {"}, {"sha": "face72d70cea0b6d36fd2f7265f2a36024cd9998", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -549,8 +549,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n             ty::ConstKind::Error(_) => throw_inval!(TypeckError(ErrorReported)),\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                let instance = self.resolve(def_id, substs)?;\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                let instance = self.resolve(def.did, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation.\n                 // The reason we use `const_eval_raw` everywhere else is to prevent cycles during\n                 // validation, because validation automatically reads through any references, thus"}, {"sha": "7a649649a42fe99c3db34536cc41ca042f92402b", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -622,12 +622,12 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n         match substituted_constant.val {\n             ty::ConstKind::Value(val) => collect_const_value(self.tcx, val, self.output),\n-            ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n-                match self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n+            ty::ConstKind::Unevaluated(def, substs, promoted) => {\n+                match self.tcx.const_eval_resolve(param_env, def.did, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n                     Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n-                        self.tcx.def_span(def_id),\n+                        self.tcx.def_span(def.did),\n                         \"collection encountered polymorphic constant\",\n                     ),\n                 }"}, {"sha": "705eb5d73233ec76fb3f457d7a73b00bb3590f1b", "filename": "src/librustc_mir/transform/check_consts/qualifs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fqualifs.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -244,11 +244,11 @@ where\n     };\n \n     // Check the qualifs of the value of `const` items.\n-    if let ty::ConstKind::Unevaluated(def_id, _, promoted) = constant.literal.val {\n+    if let ty::ConstKind::Unevaluated(def, _, promoted) = constant.literal.val {\n         assert!(promoted.is_none());\n         // Don't peek inside trait associated constants.\n-        if cx.tcx.trait_of_item(def_id).is_none() {\n-            let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def_id);\n+        if cx.tcx.trait_of_item(def.did).is_none() {\n+            let qualifs = cx.tcx.at(constant.span).mir_const_qualif(def.did);\n             if !Q::in_qualifs(&qualifs) {\n                 return false;\n             }"}, {"sha": "a96ba715835f30ced2f2d3534f96969e75d28ae7", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -955,7 +955,7 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n                     literal: tcx.mk_const(ty::Const {\n                         ty,\n                         val: ty::ConstKind::Unevaluated(\n-                            def_id,\n+                            ty::WithOptParam::dummy(def_id),\n                             InternalSubsts::for_item(tcx, def_id, |param, _| {\n                                 if let ty::GenericParamDefKind::Lifetime = param.kind {\n                                     tcx.lifetimes.re_erased.into()"}, {"sha": "025ef1ece4603624812ad5fa95b23237f61e28dd", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -600,7 +600,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n                             let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n-                                val: ty::ConstKind::Unevaluated(did, substs, None),\n+                                val: ty::ConstKind::Unevaluated(\n+                                    ty::WithOptParam::dummy(did),\n+                                    substs,\n+                                    None,\n+                                ),\n                                 ty: var_ty,\n                             }));\n                             let bin = ExprKind::Binary { op: BinOp::Add, lhs, rhs: offset };\n@@ -796,7 +800,7 @@ fn convert_path_expr<'a, 'tcx>(\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n                 literal: cx.tcx.mk_const(ty::Const {\n-                    val: ty::ConstKind::Unevaluated(def_id, substs, None),\n+                    val: ty::ConstKind::Unevaluated(ty::WithOptParam::dummy(def_id), substs, None),\n                     ty: cx.tables().node_type(expr.hir_id),\n                 }),\n                 user_ty,"}, {"sha": "702dcc2f9e1f458ac4103a09190c02380148a582", "filename": "src/librustc_trait_selection/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ffulfill.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -524,10 +524,10 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 let stalled_on = &mut pending_obligation.stalled_on;\n \n                 let mut evaluate = |c: &'tcx Const<'tcx>| {\n-                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                    if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n                         match self.selcx.infcx().const_eval_resolve(\n                             obligation.param_env,\n-                            def_id,\n+                            def.did,\n                             substs,\n                             promoted,\n                             Some(obligation.cause.span),"}, {"sha": "77c50973b914b52fa8e8eba404708192cc77b6b4", "filename": "src/librustc_trait_selection/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect%2Fmod.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -507,11 +507,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 debug!(\"evaluate_predicate_recursively: equating consts c1={:?} c2={:?}\", c1, c2);\n \n                 let evaluate = |c: &'tcx ty::Const<'tcx>| {\n-                    if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+                    if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n                         self.infcx\n                             .const_eval_resolve(\n                                 obligation.param_env,\n-                                def_id,\n+                                def.did,\n                                 substs,\n                                 promoted,\n                                 Some(obligation.cause.span),"}, {"sha": "30ba49ed2d8fea2671ae69e722deeec584a80958", "filename": "src/librustc_trait_selection/traits/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fwf.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -359,13 +359,13 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n \n                 GenericArgKind::Const(constant) => {\n                     match constant.val {\n-                        ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n+                        ty::ConstKind::Unevaluated(def, substs, promoted) => {\n                             assert!(promoted.is_none());\n \n-                            let obligations = self.nominal_obligations(def_id, substs);\n+                            let obligations = self.nominal_obligations(def.did, substs);\n                             self.out.extend(obligations);\n \n-                            let predicate = ty::PredicateKind::ConstEvaluatable(def_id, substs)\n+                            let predicate = ty::PredicateKind::ConstEvaluatable(def.did, substs)\n                                 .to_predicate(self.tcx());\n                             let cause = self.cause(traits::MiscObligation);\n                             self.out.push(traits::Obligation::new("}, {"sha": "52c306688268f51be4980e8e6e4ad0416672a573", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58031c7cb2352fb17f2c720a84f541c532ffdf09/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=58031c7cb2352fb17f2c720a84f541c532ffdf09", "patch": "@@ -466,12 +466,12 @@ pub fn name_from_pat(p: &hir::Pat<'_>) -> String {\n \n pub fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n-        ty::ConstKind::Unevaluated(def_id, _, promoted) => {\n-            let mut s = if let Some(def_id) = def_id.as_local() {\n-                let hir_id = cx.tcx.hir().as_local_hir_id(def_id);\n+        ty::ConstKind::Unevaluated(def, _, promoted) => {\n+            let mut s = if let Some(def) = def.as_local() {\n+                let hir_id = cx.tcx.hir().as_local_hir_id(def.did);\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(hir_id))\n             } else {\n-                inline::print_inlined_const(cx, def_id)\n+                inline::print_inlined_const(cx, def.did)\n             };\n             if let Some(promoted) = promoted {\n                 s.push_str(&format!(\"::{:?}\", promoted))"}]}