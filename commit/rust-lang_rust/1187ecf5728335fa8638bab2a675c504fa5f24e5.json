{"sha": "1187ecf5728335fa8638bab2a675c504fa5f24e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExODdlY2Y1NzI4MzM1ZmE4NjM4YmFiMmE2NzVjNTA0ZmE1ZjI0ZTU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-12T08:38:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-12T08:38:41Z"}, "message": "Rollup merge of #37662 - wesleywiser:intrinsics_docs, r=aturon\n\nAdd documentation to some of the unstable intrinsics\n\nPart of #34338", "tree": {"sha": "73a554010986bfdeab909fcdc9e973125fad134a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73a554010986bfdeab909fcdc9e973125fad134a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1187ecf5728335fa8638bab2a675c504fa5f24e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1187ecf5728335fa8638bab2a675c504fa5f24e5", "html_url": "https://github.com/rust-lang/rust/commit/1187ecf5728335fa8638bab2a675c504fa5f24e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1187ecf5728335fa8638bab2a675c504fa5f24e5/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dd4d19d49fb0697d13473ee354e6813a26b404e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dd4d19d49fb0697d13473ee354e6813a26b404e", "html_url": "https://github.com/rust-lang/rust/commit/7dd4d19d49fb0697d13473ee354e6813a26b404e"}, {"sha": "a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32", "html_url": "https://github.com/rust-lang/rust/commit/a62a67cc6a8bb3e69b81eebf1265fb1c19103c32"}], "stats": {"total": 418, "additions": 418, "deletions": 0}, "files": [{"sha": "3726eee9a93c6d5b6e33a73d6ae7a0444edd80ec", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 418, "deletions": 0, "changes": 418, "blob_url": "https://github.com/rust-lang/rust/blob/1187ecf5728335fa8638bab2a675c504fa5f24e5/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1187ecf5728335fa8638bab2a675c504fa5f24e5/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=1187ecf5728335fa8638bab2a675c504fa5f24e5", "patch": "@@ -51,76 +51,472 @@ extern \"rust-intrinsic\" {\n     // NB: These intrinsics take raw pointers because they mutate aliased\n     // memory, which is not valid for either `&` or `&mut`.\n \n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange).\n     pub fn atomic_cxchg_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_rel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acqrel<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as both the `success` and `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_relaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_failacq<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acq_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n+    /// Stores a value if the current value is the same as the `old` value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `success` and\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `failure` parameters. For example,\n+    /// [`AtomicBool::compare_exchange_weak`]\n+    /// (../../std/sync/atomic/struct.AtomicBool.html#method.compare_exchange_weak).\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load<T>(src: *const T) -> T;\n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_acq<T>(src: *const T) -> T;\n+    /// Loads the current value of the pointer.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `load` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::load`](../../std/sync/atomic/struct.AtomicBool.html#method.load).\n     pub fn atomic_load_relaxed<T>(src: *const T) -> T;\n     pub fn atomic_load_unordered<T>(src: *const T) -> T;\n \n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store<T>(dst: *mut T, val: T);\n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_rel<T>(dst: *mut T, val: T);\n+    /// Stores the value at the specified memory location.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `store` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::store`](../../std/sync/atomic/struct.AtomicBool.html#method.store).\n     pub fn atomic_store_relaxed<T>(dst: *mut T, val: T);\n     pub fn atomic_store_unordered<T>(dst: *mut T, val: T);\n \n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Stores the value at the specified memory location, returning the old value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `swap` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::swap`](../../std/sync/atomic/struct.AtomicBool.html#method.swap).\n     pub fn atomic_xchg_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Add to the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_add` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_add`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_add).\n     pub fn atomic_xadd_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Subtract from the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicIsize::fetch_sub`](../../std/sync/atomic/struct.AtomicIsize.html#method.fetch_sub).\n     pub fn atomic_xsub_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise and with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_and` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_and`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_and).\n     pub fn atomic_and_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise nand with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_nand`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_nand).\n     pub fn atomic_nand_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise or with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_or` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_or`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_or).\n     pub fn atomic_or_relaxed<T>(dst: *mut T, src: T) -> T;\n \n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::SeqCst`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Acquire`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acq<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Release`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_rel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::AcqRel`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_acqrel<T>(dst: *mut T, src: T) -> T;\n+    /// Bitwise xor with the current value, returning the previous value.\n+    /// The stabilized version of this intrinsic is available on the\n+    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n+    /// [`Ordering::Relaxed`](../../std/sync/atomic/enum.Ordering.html)\n+    /// as the `order`. For example,\n+    /// [`AtomicBool::fetch_xor`](../../std/sync/atomic/struct.AtomicBool.html#method.fetch_xor).\n     pub fn atomic_xor_relaxed<T>(dst: *mut T, src: T) -> T;\n \n     pub fn atomic_max<T>(dst: *mut T, src: T) -> T;\n@@ -631,8 +1027,12 @@ extern \"rust-intrinsic\" {\n     pub fn volatile_set_memory<T>(dst: *mut T, val: u8, count: usize);\n \n     /// Perform a volatile load from the `src` pointer.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::ptr::read_volatile`](../../std/ptr/fn.read_volatile.html).\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Perform a volatile store to the `dst` pointer.\n+    /// The stabilized version of this intrinsic is\n+    /// [`std::ptr::write_volatile`](../../std/ptr/fn.write_volatile.html).\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Returns the square root of an `f32`\n@@ -766,12 +1166,21 @@ extern \"rust-intrinsic\" {\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Performs checked integer addition.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_add` method. For example,\n+    /// [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n     pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_sub` method. For example,\n+    /// [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n     pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `overflowing_mul` method. For example,\n+    /// [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n     pub fn mul_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs an unchecked division, resulting in undefined behavior\n@@ -782,10 +1191,19 @@ extern \"rust-intrinsic\" {\n     pub fn unchecked_rem<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_add` method. For example,\n+    /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n     pub fn overflowing_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_sub` method. For example,\n+    /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n     pub fn overflowing_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2^N, where N is the width of T in bits.\n+    /// The stabilized versions of this intrinsic are available on the integer\n+    /// primitives via the `wrapping_mul` method. For example,\n+    /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n     pub fn overflowing_mul<T>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',"}]}