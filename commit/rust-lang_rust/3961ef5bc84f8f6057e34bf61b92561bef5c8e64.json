{"sha": "3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "node_id": "C_kwDOAAsO6NoAKDM5NjFlZjViYzg0ZjhmNjA1N2UzNGJmNjFiOTI1NjFiZWY1YzhlNjQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-23T18:55:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-23T18:55:46Z"}, "message": "Rollup merge of #109487 - GuillaumeGomez:move-useless-reexport-check, r=petrochenkov\n\nMove useless_anynous_reexport lint into unused_imports\n\nAs mentioned in https://github.com/rust-lang/rust/pull/109003, this check should have been merged with `unused_imports` in the start.\n\nr? `@petrochenkov`", "tree": {"sha": "d0023d3f23f36ec4e7a2d48dd2b1e94af11a4a38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0023d3f23f36ec4e7a2d48dd2b1e94af11a4a38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkHKCyCRBK7hj4Ov3rIwAAlkkIAIAZJZ3DxgZQyb9YiF6sR/M4\nrnSk6XSXPSJFHLepSWJV9jGLZz2znvM/Zh1TPpwD1+fNcQSMJ9onxBGg7oHlTpPz\nSn1yhvOKVEUiiacUdQUoli28QYjMwqv49G/lvzywSfDVEzDVWYzxEDnGCYiU/Ft+\n0JX4hRN5/DpH0Ts0pgcehwe1y8HBvIuGy58wfpIZy5dCeZUge5/3uDCIToPkPQTX\nBdjPXJWBA2jLWNR/xus8S5uD9quVYjhv8SPeEprdo21GPVU8GubSoLJgKWiwpbRT\n2yK2v/dqN1KW11iN6BuikjsDm30MKc043rXq5c0Q2Ni148VxoWpxqSbPlbLT6J0=\n=TV5o\n-----END PGP SIGNATURE-----\n", "payload": "tree d0023d3f23f36ec4e7a2d48dd2b1e94af11a4a38\nparent dddede4a2472127268295065c8496fa554237e93\nparent e03b13ccb7726005a49c5a9c6a3b47c8ba6804e6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679597746 +0100\ncommitter GitHub <noreply@github.com> 1679597746 +0100\n\nRollup merge of #109487 - GuillaumeGomez:move-useless-reexport-check, r=petrochenkov\n\nMove useless_anynous_reexport lint into unused_imports\n\nAs mentioned in https://github.com/rust-lang/rust/pull/109003, this check should have been merged with `unused_imports` in the start.\n\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "html_url": "https://github.com/rust-lang/rust/commit/3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dddede4a2472127268295065c8496fa554237e93", "url": "https://api.github.com/repos/rust-lang/rust/commits/dddede4a2472127268295065c8496fa554237e93", "html_url": "https://github.com/rust-lang/rust/commit/dddede4a2472127268295065c8496fa554237e93"}, {"sha": "e03b13ccb7726005a49c5a9c6a3b47c8ba6804e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e03b13ccb7726005a49c5a9c6a3b47c8ba6804e6", "html_url": "https://github.com/rust-lang/rust/commit/e03b13ccb7726005a49c5a9c6a3b47c8ba6804e6"}], "stats": {"total": 211, "additions": 70, "deletions": 141}, "files": [{"sha": "68e62c9789aed9fda1e5a0118d1642cd4f8c6f95", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -508,6 +508,3 @@ lint_opaque_hidden_inferred_bound = opaque type `{$ty}` does not satisfy its ass\n     .specifically = this associated type bound is unsatisfied for `{$proj_ty}`\n \n lint_opaque_hidden_inferred_bound_sugg = add this bound\n-\n-lint_useless_anonymous_reexport = useless anonymous re-export\n-    .note = only anonymous re-exports of traits are useful, this is {$article} `{$desc}`"}, {"sha": "b3578540516d000b98495ca9044220d37720318d", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -74,7 +74,6 @@ mod opaque_hidden_inferred_bound;\n mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n-mod reexports;\n mod traits;\n mod types;\n mod unused;\n@@ -112,7 +111,6 @@ use noop_method_call::*;\n use opaque_hidden_inferred_bound::*;\n use pass_by_value::*;\n use redundant_semicolon::*;\n-use reexports::*;\n use traits::*;\n use types::*;\n use unused::*;\n@@ -244,7 +242,6 @@ late_lint_methods!(\n             OpaqueHiddenInferredBound: OpaqueHiddenInferredBound,\n             MultipleSupertraitUpcastable: MultipleSupertraitUpcastable,\n             MapUnitFn: MapUnitFn,\n-            UselessAnonymousReexport: UselessAnonymousReexport,\n         ]\n     ]\n );"}, {"sha": "308c02929ca42b2e469d5c01caf5a3ff55b3c086", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1528,11 +1528,3 @@ pub struct UnusedAllocationDiag;\n #[derive(LintDiagnostic)]\n #[diag(lint_unused_allocation_mut)]\n pub struct UnusedAllocationMutDiag;\n-\n-#[derive(LintDiagnostic)]\n-#[diag(lint_useless_anonymous_reexport)]\n-#[note]\n-pub struct UselessAnonymousReexportDiag {\n-    pub article: &'static str,\n-    pub desc: &'static str,\n-}"}, {"sha": "8737a57ea0264cddb1476d51411acbed456d027f", "filename": "compiler/rustc_lint/src/reexports.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/dddede4a2472127268295065c8496fa554237e93/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dddede4a2472127268295065c8496fa554237e93/compiler%2Frustc_lint%2Fsrc%2Freexports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Freexports.rs?ref=dddede4a2472127268295065c8496fa554237e93", "patch": "@@ -1,82 +0,0 @@\n-use crate::lints::UselessAnonymousReexportDiag;\n-use crate::{LateContext, LateLintPass, LintContext};\n-use rustc_hir::def::DefKind;\n-use rustc_hir::def_id::DefId;\n-use rustc_hir::{Item, ItemKind, UseKind};\n-use rustc_middle::ty::Visibility;\n-use rustc_span::symbol::kw;\n-use rustc_span::Span;\n-\n-declare_lint! {\n-    /// The `useless_anonymous_reexport` lint checks if anonymous re-exports\n-    /// are re-exports of traits.\n-    ///\n-    /// ### Example\n-    ///\n-    /// ```rust,compile_fail\n-    /// #![deny(useless_anonymous_reexport)]\n-    ///\n-    /// mod sub {\n-    ///     pub struct Bar;\n-    /// }\n-    ///\n-    /// pub use self::sub::Bar as _;\n-    /// # fn main() {}\n-    /// ```\n-    ///\n-    /// {{produces}}\n-    ///\n-    /// ### Explanation\n-    ///\n-    /// Anonymous re-exports are only useful if it's a re-export of a trait\n-    /// in case you want to give access to it. If you re-export any other kind,\n-    /// you won't be able to use it since its name won't be accessible.\n-    pub USELESS_ANONYMOUS_REEXPORT,\n-    Warn,\n-    \"useless anonymous re-export\"\n-}\n-\n-declare_lint_pass!(UselessAnonymousReexport => [USELESS_ANONYMOUS_REEXPORT]);\n-\n-fn emit_err(cx: &LateContext<'_>, span: Span, def_id: DefId) {\n-    let article = cx.tcx.def_descr_article(def_id);\n-    let desc = cx.tcx.def_descr(def_id);\n-    cx.emit_spanned_lint(\n-        USELESS_ANONYMOUS_REEXPORT,\n-        span,\n-        UselessAnonymousReexportDiag { article, desc },\n-    );\n-}\n-\n-impl<'tcx> LateLintPass<'tcx> for UselessAnonymousReexport {\n-    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        if let ItemKind::Use(path, kind) = item.kind &&\n-            !matches!(kind, UseKind::Glob) &&\n-            item.ident.name == kw::Underscore &&\n-            // We only want re-exports. If it's just a `use X;`, then we ignore it.\n-            match cx.tcx.local_visibility(item.owner_id.def_id) {\n-                Visibility::Public => true,\n-                Visibility::Restricted(level) => {\n-                    level != cx.tcx.parent_module_from_def_id(item.owner_id.def_id)\n-                }\n-            }\n-        {\n-            for def_id in path.res.iter().filter_map(|r| r.opt_def_id()) {\n-                match cx.tcx.def_kind(def_id) {\n-                    DefKind::Trait | DefKind::TraitAlias => {}\n-                    DefKind::TyAlias => {\n-                        let ty = cx.tcx.type_of(def_id);\n-                        if !ty.0.is_trait() {\n-                            emit_err(cx, item.span, def_id);\n-                            break;\n-                        }\n-                    }\n-                    _ => {\n-                        emit_err(cx, item.span, def_id);\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"}, {"sha": "dbf6cec788b5a15aebe0e8dd0c25a8180348845c", "filename": "compiler/rustc_resolve/src/check_unused.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fcheck_unused.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -32,9 +32,10 @@ use rustc_ast::visit::{self, Visitor};\n use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{pluralize, MultiSpan};\n+use rustc_hir::def::{DefKind, Res};\n use rustc_session::lint::builtin::{MACRO_USE_EXTERN_CRATE, UNUSED_EXTERN_CRATES, UNUSED_IMPORTS};\n use rustc_session::lint::BuiltinLintDiagnostics;\n-use rustc_span::symbol::Ident;\n+use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n struct UnusedImport<'a> {\n@@ -58,6 +59,7 @@ struct UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n     base_use_tree: Option<&'a ast::UseTree>,\n     base_id: ast::NodeId,\n     item_span: Span,\n+    base_use_is_pub: bool,\n }\n \n struct ExternCrateToLint {\n@@ -110,6 +112,35 @@ impl<'a, 'b, 'tcx> UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             unused: Default::default(),\n         })\n     }\n+\n+    fn check_import_as_underscore(&mut self, item: &ast::UseTree, id: ast::NodeId) {\n+        match item.kind {\n+            ast::UseTreeKind::Simple(Some(ident)) => {\n+                if ident.name == kw::Underscore\n+                    && !self\n+                        .r\n+                        .import_res_map\n+                        .get(&id)\n+                        .map(|per_ns| {\n+                            per_ns.iter().filter_map(|res| res.as_ref()).any(|res| {\n+                                matches!(res, Res::Def(DefKind::Trait | DefKind::TraitAlias, _))\n+                            })\n+                        })\n+                        .unwrap_or(false)\n+                {\n+                    self.unused_import(self.base_id).add(id);\n+                }\n+            }\n+            ast::UseTreeKind::Nested(ref items) => self.check_imports_as_underscore(items),\n+            _ => {}\n+        }\n+    }\n+\n+    fn check_imports_as_underscore(&mut self, items: &[(ast::UseTree, ast::NodeId)]) {\n+        for (item, id) in items {\n+            self.check_import_as_underscore(item, *id);\n+        }\n+    }\n }\n \n impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n@@ -119,7 +150,8 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             // whether they're used or not. Also ignore imports with a dummy span\n             // because this means that they were generated in some fashion by the\n             // compiler and we don't need to consider them.\n-            ast::ItemKind::Use(..) if item.vis.kind.is_pub() || item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) if item.span.is_dummy() => return,\n+            ast::ItemKind::Use(..) => self.base_use_is_pub = item.vis.kind.is_pub(),\n             ast::ItemKind::ExternCrate(orig_name) => {\n                 self.extern_crate_items.push(ExternCrateToLint {\n                     id: item.id,\n@@ -146,6 +178,11 @@ impl<'a, 'b, 'tcx> Visitor<'a> for UnusedImportCheckVisitor<'a, 'b, 'tcx> {\n             self.base_use_tree = Some(use_tree);\n         }\n \n+        if self.base_use_is_pub {\n+            self.check_import_as_underscore(use_tree, id);\n+            return;\n+        }\n+\n         if let ast::UseTreeKind::Nested(ref items) = use_tree.kind {\n             if items.is_empty() {\n                 self.unused_import(self.base_id).add(id);\n@@ -300,6 +337,7 @@ impl Resolver<'_, '_> {\n             base_use_tree: None,\n             base_id: ast::DUMMY_NODE_ID,\n             item_span: DUMMY_SP,\n+            base_use_is_pub: false,\n         };\n         visit::walk_crate(&mut visitor, krate);\n "}, {"sha": "0e60c73b67a44e274dfc886d4d33e1b26f9262bb", "filename": "tests/ui/imports/issue-99695-b.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695-b.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.fixed?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "031443a1f5df892f2bd5300112d66866cdae0d59", "filename": "tests/ui/imports/issue-99695-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695-b.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n \n     mod p {"}, {"sha": "6bf228b23aad221d8fbf1a798186f38fb3ebd061", "filename": "tests/ui/imports/issue-99695.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.fixed?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "f7199f1497ab0877b12d9d9e8bb6520dc09fa75d", "filename": "tests/ui/imports/issue-99695.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Fimports%2Fissue-99695.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-99695.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, nonstandard_style, useless_anonymous_reexport)]\n+#![allow(unused, nonstandard_style)]\n mod m {\n     #[macro_export]\n     macro_rules! nu {"}, {"sha": "11ac5d07140ba41aff8f1f08cf893641a0d9e33f", "filename": "tests/ui/lint/anonymous-reexport.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Flint%2Fanonymous-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.rs?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,4 +1,4 @@\n-#![deny(useless_anonymous_reexport)]\n+#![deny(unused_imports)]\n #![crate_type = \"rlib\"]\n \n mod my_mod {\n@@ -9,13 +9,11 @@ mod my_mod {\n }\n \n pub use self::my_mod::Foo as _;\n-pub use self::my_mod::TyFoo as _;\n-pub use self::my_mod::Bar as _; //~ ERROR\n-pub use self::my_mod::TyBar as _; //~ ERROR\n-pub use self::my_mod::{Bar as _}; //~ ERROR\n-pub use self::my_mod::{Bar as _, Foo as _}; //~ ERROR\n-pub use self::my_mod::{Bar as _, TyBar as _};\n-//~^ ERROR\n-//~| ERROR\n+pub use self::my_mod::TyFoo as _; //~ ERROR unused import\n+pub use self::my_mod::Bar as _; //~ ERROR unused import\n+pub use self::my_mod::TyBar as _; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _}; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _, Foo as _}; //~ ERROR unused import\n+pub use self::my_mod::{Bar as _, TyBar as _}; //~ ERROR unused imports\n #[allow(unused_imports)]\n use self::my_mod::TyBar as _;"}, {"sha": "e3854a5459ec0b3210d85abd1d362f23649954f3", "filename": "tests/ui/lint/anonymous-reexport.stderr", "status": "modified", "additions": 19, "deletions": 30, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3961ef5bc84f8f6057e34bf61b92561bef5c8e64/tests%2Fui%2Flint%2Fanonymous-reexport.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fanonymous-reexport.stderr?ref=3961ef5bc84f8f6057e34bf61b92561bef5c8e64", "patch": "@@ -1,55 +1,44 @@\n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:13:1\n+error: unused import: `self::my_mod::TyFoo as _`\n+  --> $DIR/anonymous-reexport.rs:12:9\n    |\n-LL | pub use self::my_mod::Bar as _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub use self::my_mod::TyFoo as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n note: the lint level is defined here\n   --> $DIR/anonymous-reexport.rs:1:9\n    |\n-LL | #![deny(useless_anonymous_reexport)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![deny(unused_imports)]\n+   |         ^^^^^^^^^^^^^^\n \n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:14:1\n+error: unused import: `self::my_mod::Bar as _`\n+  --> $DIR/anonymous-reexport.rs:13:9\n    |\n-LL | pub use self::my_mod::TyBar as _;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | pub use self::my_mod::Bar as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: unused import: `self::my_mod::TyBar as _`\n+  --> $DIR/anonymous-reexport.rs:14:9\n    |\n-   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+LL | pub use self::my_mod::TyBar as _;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: useless anonymous re-export\n+error: unused import: `Bar as _`\n   --> $DIR/anonymous-reexport.rs:15:24\n    |\n LL | pub use self::my_mod::{Bar as _};\n    |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n \n-error: useless anonymous re-export\n+error: unused import: `Bar as _`\n   --> $DIR/anonymous-reexport.rs:16:24\n    |\n LL | pub use self::my_mod::{Bar as _, Foo as _};\n    |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n \n-error: useless anonymous re-export\n+error: unused imports: `Bar as _`, `TyBar as _`\n   --> $DIR/anonymous-reexport.rs:17:24\n    |\n LL | pub use self::my_mod::{Bar as _, TyBar as _};\n-   |                        ^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `struct`\n-\n-error: useless anonymous re-export\n-  --> $DIR/anonymous-reexport.rs:17:34\n-   |\n-LL | pub use self::my_mod::{Bar as _, TyBar as _};\n-   |                                  ^^^^^^^^^^\n-   |\n-   = note: only anonymous re-exports of traits are useful, this is a `type alias`\n+   |                        ^^^^^^^^  ^^^^^^^^^^\n \n error: aborting due to 6 previous errors\n "}]}