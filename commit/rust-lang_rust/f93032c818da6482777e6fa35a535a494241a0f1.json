{"sha": "f93032c818da6482777e6fa35a535a494241a0f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MzAzMmM4MThkYTY0ODI3NzdlNmZhMzVhNTM1YTQ5NDI0MWEwZjE=", "commit": {"author": {"name": "Mateusz Miku\u0142a", "email": "matti@marinelayer.io", "date": "2019-07-18T12:16:04Z"}, "committer": {"name": "Mateusz Miku\u0142a", "email": "mati865@gmail.com", "date": "2019-07-18T13:14:56Z"}, "message": "Fix clippy::clone_on_copy warnings", "tree": {"sha": "14411ae51c1cab536393b68cdaf41b4ae62cea7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14411ae51c1cab536393b68cdaf41b4ae62cea7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f93032c818da6482777e6fa35a535a494241a0f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f93032c818da6482777e6fa35a535a494241a0f1", "html_url": "https://github.com/rust-lang/rust/commit/f93032c818da6482777e6fa35a535a494241a0f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f93032c818da6482777e6fa35a535a494241a0f1/comments", "author": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mati865", "id": 1174646, "node_id": "MDQ6VXNlcjExNzQ2NDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1174646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mati865", "html_url": "https://github.com/mati865", "followers_url": "https://api.github.com/users/mati865/followers", "following_url": "https://api.github.com/users/mati865/following{/other_user}", "gists_url": "https://api.github.com/users/mati865/gists{/gist_id}", "starred_url": "https://api.github.com/users/mati865/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mati865/subscriptions", "organizations_url": "https://api.github.com/users/mati865/orgs", "repos_url": "https://api.github.com/users/mati865/repos", "events_url": "https://api.github.com/users/mati865/events{/privacy}", "received_events_url": "https://api.github.com/users/mati865/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d5b8bf0c26e3ee4c270ce5527df66b1af56513", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d5b8bf0c26e3ee4c270ce5527df66b1af56513", "html_url": "https://github.com/rust-lang/rust/commit/21d5b8bf0c26e3ee4c270ce5527df66b1af56513"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "bbb96725ea00a6a9e37cf61b6588b65b37c16539", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=f93032c818da6482777e6fa35a535a494241a0f1", "patch": "@@ -237,15 +237,15 @@ impl<T> LinkedList<T> {\n \n         // Not creating new mutable (unique!) references overlapping `element`.\n         match node.prev {\n-            Some(prev) => (*prev.as_ptr()).next = node.next.clone(),\n+            Some(prev) => (*prev.as_ptr()).next = node.next,\n             // this node is the head node\n-            None => self.head = node.next.clone(),\n+            None => self.head = node.next,\n         };\n \n         match node.next {\n-            Some(next) => (*next.as_ptr()).prev = node.prev.clone(),\n+            Some(next) => (*next.as_ptr()).prev = node.prev,\n             // this node is the tail node\n-            None => self.tail = node.prev.clone(),\n+            None => self.tail = node.prev,\n         };\n \n         self.len -= 1;"}, {"sha": "0d0ff7c16f130e5eb8470368e7a2d083a8827369", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=f93032c818da6482777e6fa35a535a494241a0f1", "patch": "@@ -815,7 +815,7 @@ impl<T> Rc<[T]> {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);\n \n-                    Global.dealloc(self.mem, self.layout.clone());\n+                    Global.dealloc(self.mem, self.layout);\n                 }\n             }\n         }"}, {"sha": "93aff73372498c91dab420280c08a9446ca174fa", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93032c818da6482777e6fa35a535a494241a0f1/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=f93032c818da6482777e6fa35a535a494241a0f1", "patch": "@@ -703,7 +703,7 @@ impl<T> Arc<[T]> {\n                     let slice = from_raw_parts_mut(self.elems, self.n_elems);\n                     ptr::drop_in_place(slice);\n \n-                    Global.dealloc(self.mem.cast(), self.layout.clone());\n+                    Global.dealloc(self.mem.cast(), self.layout);\n                 }\n             }\n         }"}, {"sha": "5d0333d5226d20b43a2a8de996742d5b9fb657e1", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f93032c818da6482777e6fa35a535a494241a0f1/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93032c818da6482777e6fa35a535a494241a0f1/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=f93032c818da6482777e6fa35a535a494241a0f1", "patch": "@@ -827,11 +827,11 @@ pub unsafe trait Alloc {\n         let old_size = layout.size();\n \n         if new_size >= old_size {\n-            if let Ok(()) = self.grow_in_place(ptr, layout.clone(), new_size) {\n+            if let Ok(()) = self.grow_in_place(ptr, layout, new_size) {\n                 return Ok(ptr);\n             }\n         } else if new_size < old_size {\n-            if let Ok(()) = self.shrink_in_place(ptr, layout.clone(), new_size) {\n+            if let Ok(()) = self.shrink_in_place(ptr, layout, new_size) {\n                 return Ok(ptr);\n             }\n         }"}, {"sha": "f47dc92d2de93d5e9a06d151cc82812782185a5f", "filename": "src/libstd/sys/unix/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f93032c818da6482777e6fa35a535a494241a0f1/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f93032c818da6482777e6fa35a535a494241a0f1/src%2Flibstd%2Fsys%2Funix%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Falloc.rs?ref=f93032c818da6482777e6fa35a535a494241a0f1", "patch": "@@ -29,7 +29,7 @@ unsafe impl GlobalAlloc for System {\n         if layout.align() <= MIN_ALIGN && layout.align() <= layout.size() {\n             libc::calloc(layout.size(), 1) as *mut u8\n         } else {\n-            let ptr = self.alloc(layout.clone());\n+            let ptr = self.alloc(layout);\n             if !ptr.is_null() {\n                 ptr::write_bytes(ptr, 0, layout.size());\n             }"}]}