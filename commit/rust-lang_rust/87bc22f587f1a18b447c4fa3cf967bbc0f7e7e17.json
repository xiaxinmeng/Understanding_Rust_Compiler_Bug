{"sha": "87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YmMyMmY1ODdmMWExOGI0NDdjNGZhM2NmOTY3YmJjMGY3ZTdlMTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T13:51:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-08-02T13:51:09Z"}, "message": "auto merge of #16177 : nham/rust/collections_15294_eq_ord, r=alexcrichton\n\nThis implements:\r\n\r\n - Eq and Ord for DList, RingBuf, TreeMap and TreeSet\r\n - FromIterator and Extendable for BitvSet\r\n\r\ncc #15294", "tree": {"sha": "22978be8a2db66a5ee728afec142807f4be7178b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22978be8a2db66a5ee728afec142807f4be7178b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "html_url": "https://github.com/rust-lang/rust/commit/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bad333fec6577e9581b1925ec1d8f25ec65b9f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bad333fec6577e9581b1925ec1d8f25ec65b9f0", "html_url": "https://github.com/rust-lang/rust/commit/5bad333fec6577e9581b1925ec1d8f25ec65b9f0"}, {"sha": "a0438143dec68fea83e3e4d28c120f7d14a9572d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0438143dec68fea83e3e4d28c120f7d14a9572d", "html_url": "https://github.com/rust-lang/rust/commit/a0438143dec68fea83e3e4d28c120f7d14a9572d"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "02714c728ec7b5379cf699b65ed7e7b0d71fa6ff", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "patch": "@@ -978,6 +978,21 @@ impl Default for BitvSet {\n     fn default() -> BitvSet { BitvSet::new() }\n }\n \n+impl FromIterator<bool> for BitvSet {\n+    fn from_iter<I:Iterator<bool>>(iterator: I) -> BitvSet {\n+        let mut ret = BitvSet::new();\n+        ret.extend(iterator);\n+        ret\n+    }\n+}\n+\n+impl Extendable<bool> for BitvSet {\n+    #[inline]\n+    fn extend<I: Iterator<bool>>(&mut self, iterator: I) {\n+        self.get_mut_ref().extend(iterator);\n+    }\n+}\n+\n impl BitvSet {\n     /// Create a new bit vector set with initially no contents.\n     ///\n@@ -1958,6 +1973,17 @@ mod tests {\n         assert_eq!(bitv.to_string().as_slice(), \"1011\");\n     }\n \n+    #[test]\n+    fn test_bitv_set_from_bools() {\n+        let bools = vec![true, false, true, true];\n+        let a: BitvSet = bools.iter().map(|n| *n).collect();\n+        let mut b = BitvSet::new();\n+        b.insert(0);\n+        b.insert(2);\n+        b.insert(3);\n+        assert_eq!(a, b);\n+    }\n+\n     #[test]\n     fn test_to_bools() {\n         let bools = vec!(false, false, true, false, false, true, true, false);\n@@ -1977,7 +2003,7 @@ mod tests {\n     #[test]\n     fn test_bitv_set_iterator() {\n         let bools = [true, false, true, true];\n-        let bitv = BitvSet::from_bitv(bools.iter().map(|n| *n).collect());\n+        let bitv: BitvSet = bools.iter().map(|n| *n).collect();\n \n         let idxs: Vec<uint> = bitv.iter().collect();\n         assert_eq!(idxs, vec!(0, 2, 3));"}, {"sha": "3d322729aab43c415250dd5f459436d35b6be8b0", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "patch": "@@ -683,12 +683,21 @@ impl<A: PartialEq> PartialEq for DList<A> {\n     }\n }\n \n+impl<A: Eq> Eq for DList<A> {}\n+\n impl<A: PartialOrd> PartialOrd for DList<A> {\n     fn partial_cmp(&self, other: &DList<A>) -> Option<Ordering> {\n         iter::order::partial_cmp(self.iter(), other.iter())\n     }\n }\n \n+impl<A: Ord> Ord for DList<A> {\n+    #[inline]\n+    fn cmp(&self, other: &DList<A>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<A: Clone> Clone for DList<A> {\n     fn clone(&self) -> DList<A> {\n         self.iter().map(|x| x.clone()).collect()"}, {"sha": "0cde7a90e9c89a546ae38bbe12d0902be2e5bb44", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "patch": "@@ -452,12 +452,21 @@ impl<A: PartialEq> PartialEq for RingBuf<A> {\n     }\n }\n \n+impl<A: Eq> Eq for RingBuf<A> {}\n+\n impl<A: PartialOrd> PartialOrd for RingBuf<A> {\n     fn partial_cmp(&self, other: &RingBuf<A>) -> Option<Ordering> {\n         iter::order::partial_cmp(self.iter(), other.iter())\n     }\n }\n \n+impl<A: Ord> Ord for RingBuf<A> {\n+    #[inline]\n+    fn cmp(&self, other: &RingBuf<A>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<S: Writer, A: Hash<S>> Hash<S> for RingBuf<A> {\n     fn hash(&self, state: &mut S) {\n         self.len().hash(state);"}, {"sha": "6299ecfc5fd56212500f32b1b5770b4d3ce3b870", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=87bc22f587f1a18b447c4fa3cf967bbc0f7e7e17", "patch": "@@ -173,13 +173,22 @@ impl<K: PartialEq + Ord, V: PartialEq> PartialEq for TreeMap<K, V> {\n     }\n }\n \n+impl<K: Eq + Ord, V: Eq> Eq for TreeMap<K, V> {}\n+\n impl<K: Ord, V: PartialOrd> PartialOrd for TreeMap<K, V> {\n     #[inline]\n     fn partial_cmp(&self, other: &TreeMap<K, V>) -> Option<Ordering> {\n         iter::order::partial_cmp(self.iter(), other.iter())\n     }\n }\n \n+impl<K: Ord, V: Ord> Ord for TreeMap<K, V> {\n+    #[inline]\n+    fn cmp(&self, other: &TreeMap<K, V>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<K: Ord + Show, V: Show> Show for TreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));\n@@ -1010,13 +1019,22 @@ impl<T: PartialEq + Ord> PartialEq for TreeSet<T> {\n     fn eq(&self, other: &TreeSet<T>) -> bool { self.map == other.map }\n }\n \n+impl<T: Eq + Ord> Eq for TreeSet<T> {}\n+\n impl<T: Ord> PartialOrd for TreeSet<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &TreeSet<T>) -> Option<Ordering> {\n         self.map.partial_cmp(&other.map)\n     }\n }\n \n+impl<T: Ord> Ord for TreeSet<T> {\n+    #[inline]\n+    fn cmp(&self, other: &TreeSet<T>) -> Ordering {\n+        iter::order::cmp(self.iter(), other.iter())\n+    }\n+}\n+\n impl<T: Ord + Show> Show for TreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         try!(write!(f, \"{{\"));"}]}