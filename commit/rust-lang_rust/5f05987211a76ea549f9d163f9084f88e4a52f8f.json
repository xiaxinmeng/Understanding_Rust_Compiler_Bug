{"sha": "5f05987211a76ea549f9d163f9084f88e4a52f8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMDU5ODcyMTFhNzZlYTU0OWY5ZDE2M2Y5MDg0Zjg4ZTRhNTJmOGY=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-06T07:16:58Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2018-05-06T07:16:58Z"}, "message": "Use rustfmt.toml when running self_tests", "tree": {"sha": "ee7a3d2c3ce37dee4690e1905efa5adf6bc667c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee7a3d2c3ce37dee4690e1905efa5adf6bc667c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f05987211a76ea549f9d163f9084f88e4a52f8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f05987211a76ea549f9d163f9084f88e4a52f8f", "html_url": "https://github.com/rust-lang/rust/commit/5f05987211a76ea549f9d163f9084f88e4a52f8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f05987211a76ea549f9d163f9084f88e4a52f8f/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d560049ae9b2890d709b0605e59f06859b7bf4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d560049ae9b2890d709b0605e59f06859b7bf4ae", "html_url": "https://github.com/rust-lang/rust/commit/d560049ae9b2890d709b0605e59f06859b7bf4ae"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "f12d1864728df93e2a083993dc3cb190586b60f8", "filename": "src/config/config_type.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f05987211a76ea549f9d163f9084f88e4a52f8f/src%2Fconfig%2Fconfig_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f05987211a76ea549f9d163f9084f88e4a52f8f/src%2Fconfig%2Fconfig_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fconfig_type.rs?ref=5f05987211a76ea549f9d163f9084f88e4a52f8f", "patch": "@@ -322,8 +322,9 @@ macro_rules! create_config {\n             ///\n             /// Returns the `Config` to use, and the path of the project file if there was\n             /// one.\n-            pub(super) fn from_resolved_toml_path(dir: &Path) -> Result<(Config, Option<PathBuf>), Error> {\n-\n+            pub(super) fn from_resolved_toml_path(\n+                dir: &Path,\n+            ) -> Result<(Config, Option<PathBuf>), Error> {\n                 /// Try to find a project file in the given directory and its parents.\n                 /// Returns the path of a the nearest project file if one exists,\n                 /// or `None` if no project file was found."}, {"sha": "d1e7cbd5a64784701c2bb53ad4b02cc7b45f12e2", "filename": "src/test/mod.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5f05987211a76ea549f9d163f9084f88e4a52f8f/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f05987211a76ea549f9d163f9084f88e4a52f8f/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=5f05987211a76ea549f9d163f9084f88e4a52f8f", "patch": "@@ -111,7 +111,7 @@ fn write_message(msg: &str) {\n fn system_tests() {\n     // Get all files in the tests/source directory.\n     let files = get_test_files(Path::new(\"tests/source\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -123,7 +123,7 @@ fn system_tests() {\n #[test]\n fn coverage_tests() {\n     let files = get_test_files(Path::new(\"tests/coverage/source\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     println!(\"Ran {} tests in coverage mode.\", count);\n     assert_eq!(fails, 0, \"{} tests failed\", fails);\n@@ -192,7 +192,7 @@ fn assert_output(source: &Path, expected_filename: &Path) {\n fn idempotence_tests() {\n     // Get all files in the tests/target directory.\n     let files = get_test_files(Path::new(\"tests/target\"), true);\n-    let (_reports, count, fails) = check_files(files);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -213,7 +213,7 @@ fn self_tests() {\n     }\n     files.push(PathBuf::from(\"src/lib.rs\"));\n \n-    let (reports, count, fails) = check_files(files);\n+    let (reports, count, fails) = check_files(files, Some(PathBuf::from(\"rustfmt.toml\")));\n     let mut warnings = 0;\n \n     // Display results.\n@@ -298,15 +298,15 @@ fn format_lines_errors_are_reported_with_tabs() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files(files: Vec<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n+fn check_files(files: Vec<PathBuf>, opt_config: Option<PathBuf>) -> (Vec<FormatReport>, u32, u32) {\n     let mut count = 0;\n     let mut fails = 0;\n     let mut reports = vec![];\n \n     for file_name in files {\n         debug!(\"Testing '{}'...\", file_name.display());\n \n-        match idempotent_check(&file_name) {\n+        match idempotent_check(&file_name, &opt_config) {\n             Ok(ref report) if report.has_warnings() => {\n                 print!(\"{}\", report);\n                 fails += 1;\n@@ -385,9 +385,16 @@ pub enum IdempotentCheckError {\n     Parse,\n }\n \n-pub fn idempotent_check(filename: &PathBuf) -> Result<FormatReport, IdempotentCheckError> {\n+pub fn idempotent_check(\n+    filename: &PathBuf,\n+    opt_config: &Option<PathBuf>,\n+) -> Result<FormatReport, IdempotentCheckError> {\n     let sig_comments = read_significant_comments(filename);\n-    let config = read_config(filename);\n+    let config = if let Some(ref config_file_path) = opt_config {\n+        Config::from_toml_path(config_file_path).expect(\"rustfmt.toml not found\")\n+    } else {\n+        read_config(filename)\n+    };\n     let (error_summary, file_map, format_report) = format_file(filename, &config);\n     if error_summary.has_parsing_errors() {\n         return Err(IdempotentCheckError::Parse);"}]}