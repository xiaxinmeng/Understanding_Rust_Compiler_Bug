{"sha": "3484706c38272828efc50b2553578afc62230dbb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0ODQ3MDZjMzgyNzI4MjhlZmM1MGIyNTUzNTc4YWZjNjIyMzBkYmI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-31T14:17:50Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-02T18:40:18Z"}, "message": "remove unused mut qualifiers", "tree": {"sha": "21352439579e8da48a79323078e72425360c925b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21352439579e8da48a79323078e72425360c925b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3484706c38272828efc50b2553578afc62230dbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3484706c38272828efc50b2553578afc62230dbb", "html_url": "https://github.com/rust-lang/rust/commit/3484706c38272828efc50b2553578afc62230dbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3484706c38272828efc50b2553578afc62230dbb/comments", "author": null, "committer": null, "parents": [{"sha": "fd702702ee90ddb47d207f8886818c7f91600713", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd702702ee90ddb47d207f8886818c7f91600713", "html_url": "https://github.com/rust-lang/rust/commit/fd702702ee90ddb47d207f8886818c7f91600713"}], "stats": {"total": 93, "additions": 40, "deletions": 53}, "files": [{"sha": "b51ec13335e0eb721ef52d8a73f5d90e0ab5cb0b", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -673,7 +673,7 @@ impl<'a, T> IntoIterator for &'a BinaryHeap<T> where T: Ord {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BinaryHeap<T> {\n-    fn extend<Iter: Iterator<Item=T>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=T>>(&mut self, iter: Iter) {\n         let (lower, _) = iter.size_hint();\n \n         self.reserve(lower);"}, {"sha": "3e603f6ebaf86862703e047e0d2ccca269cdfb40", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -934,7 +934,7 @@ impl FromIterator<bool> for Bitv {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<bool> for Bitv {\n     #[inline]\n-    fn extend<I: Iterator<Item=bool>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=bool>>(&mut self, iterator: I) {\n         let (min, _) = iterator.size_hint();\n         self.reserve(min);\n         for element in iterator {\n@@ -1141,7 +1141,7 @@ impl FromIterator<uint> for BitvSet {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Extend<uint> for BitvSet {\n     #[inline]\n-    fn extend<I: Iterator<Item=uint>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=uint>>(&mut self, iterator: I) {\n         for i in iterator {\n             self.insert(i);\n         }\n@@ -1353,7 +1353,7 @@ impl BitvSet {\n         }\n \n         // virtually pad other with 0's for equal lengths\n-        let mut other_words = {\n+        let other_words = {\n             let (_, result) = match_words(self_bitv, other_bitv);\n             result\n         };"}, {"sha": "f1d39b3f2f447777cdabbb8164397e08468d1039", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -846,7 +846,7 @@ impl<K: Ord, V> FromIterator<(K, V)> for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Ord, V> Extend<(K, V)> for BTreeMap<K, V> {\n     #[inline]\n-    fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n+    fn extend<T: Iterator<Item=(K, V)>>(&mut self, iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "d58ae03ef7a28b41bd855d83d5ad9a6c9f3f87b8", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -499,7 +499,7 @@ impl<'a, T> IntoIterator for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Extend<T> for BTreeSet<T> {\n     #[inline]\n-    fn extend<Iter: Iterator<Item=T>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=T>>(&mut self, iter: Iter) {\n         for elem in iter {\n             self.insert(elem);\n         }"}, {"sha": "d85e9ee32265e134fcfc9f2858b2eca5baecf26c", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -856,7 +856,7 @@ impl<'a, T> IntoIterator for &'a mut DList<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for DList<A> {\n-    fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {\n+    fn extend<T: Iterator<Item=A>>(&mut self, iterator: T) {\n         for elt in iterator { self.push_back(elt); }\n     }\n }"}, {"sha": "8cbf50d29f23b02ebe9347b89c83dd619499e653", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -266,7 +266,7 @@ impl<'a, E> IntoIterator for &'a EnumSet<E> where E: CLike {\n }\n \n impl<E:CLike> Extend<E> for EnumSet<E> {\n-    fn extend<I: Iterator<Item=E>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=E>>(&mut self, iterator: I) {\n         for element in iterator {\n             self.insert(element);\n         }"}, {"sha": "102dfb3df9d0319b4e221ca4863bb07c49cfc618", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -22,8 +22,6 @@\n        html_root_url = \"http://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"http://play.rust-lang.org/\")]\n \n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n-\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(core)]"}, {"sha": "18021dea9f29ed5f118208d9b948a5a1431b4cac", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -1635,7 +1635,7 @@ impl<'a, T> IntoIterator for &'a mut RingBuf<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A> Extend<A> for RingBuf<A> {\n-    fn extend<T: Iterator<Item=A>>(&mut self, mut iterator: T) {\n+    fn extend<T: Iterator<Item=A>>(&mut self, iterator: T) {\n         for elt in iterator {\n             self.push_back(elt);\n         }"}, {"sha": "554eee765f3eb5efc4a792ed6162b7c06cea5403", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -729,7 +729,7 @@ impl<'a> FromIterator<&'a str> for String {\n #[unstable(feature = \"collections\",\n            reason = \"waiting on Extend stabilization\")]\n impl Extend<char> for String {\n-    fn extend<I:Iterator<Item=char>>(&mut self, mut iterator: I) {\n+    fn extend<I:Iterator<Item=char>>(&mut self, iterator: I) {\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);\n         for ch in iterator {\n@@ -741,7 +741,7 @@ impl Extend<char> for String {\n #[unstable(feature = \"collections\",\n            reason = \"waiting on Extend stabilization\")]\n impl<'a> Extend<&'a str> for String {\n-    fn extend<I: Iterator<Item=&'a str>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=&'a str>>(&mut self, iterator: I) {\n         // A guess that at least one byte per iterator element will be needed.\n         let (lower_bound, _) = iterator.size_hint();\n         self.reserve(lower_bound);"}, {"sha": "e9ddfd4872f7e3671c77dd1bc1aabbb879ae4412", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -1375,7 +1375,7 @@ impl<T> ops::DerefMut for Vec<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T> FromIterator<T> for Vec<T> {\n     #[inline]\n-    fn from_iter<I:Iterator<Item=T>>(mut iterator: I) -> Vec<T> {\n+    fn from_iter<I:Iterator<Item=T>>(iterator: I) -> Vec<T> {\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n         for element in iterator {\n@@ -1412,7 +1412,7 @@ impl<'a, T> IntoIterator for &'a mut Vec<T> {\n #[unstable(feature = \"collections\", reason = \"waiting on Extend stability\")]\n impl<T> Extend<T> for Vec<T> {\n     #[inline]\n-    fn extend<I: Iterator<Item=T>>(&mut self, mut iterator: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, iterator: I) {\n         let (lower, _) = iterator.size_hint();\n         self.reserve(lower);\n         for element in iterator {"}, {"sha": "044a350bffb194be275604b4db942ae637a69cf7", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -562,7 +562,7 @@ impl<'a, T> IntoIterator for &'a mut VecMap<T> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<V> Extend<(uint, V)> for VecMap<V> {\n-    fn extend<Iter: Iterator<Item=(uint, V)>>(&mut self, mut iter: Iter) {\n+    fn extend<Iter: Iterator<Item=(uint, V)>>(&mut self, iter: Iter) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "b954e69eaa863a49bca958777694d0493a08646c", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -174,7 +174,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn last(mut self) -> Option<Self::Item> {\n+    fn last(self) -> Option<Self::Item> {\n         let mut last = None;\n         for x in self { last = Some(x); }\n         last\n@@ -588,7 +588,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[unstable(feature = \"core\",\n                reason = \"recently added as part of collections reform\")]\n-    fn partition<B, F>(mut self, mut f: F) -> (B, B) where\n+    fn partition<B, F>(self, mut f: F) -> (B, B) where\n         B: Default + Extend<Self::Item>,\n         F: FnMut(&Self::Item) -> bool\n     {\n@@ -617,7 +617,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn fold<B, F>(mut self, init: B, mut f: F) -> B where\n+    fn fold<B, F>(self, init: B, mut f: F) -> B where\n         F: FnMut(B, Self::Item) -> B,\n     {\n         let mut accum = init;\n@@ -638,7 +638,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    fn all<F>(mut self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n+    fn all<F>(self, mut f: F) -> bool where F: FnMut(Self::Item) -> bool {\n         for x in self { if !f(x) { return false; } }\n         true\n     }\n@@ -946,7 +946,7 @@ pub trait IteratorExt: Iterator + Sized {\n     /// assert_eq!([2, 4], right);\n     /// ```\n     #[unstable(feature = \"core\", reason = \"recent addition\")]\n-    fn unzip<A, B, FromA, FromB>(mut self) -> (FromA, FromB) where\n+    fn unzip<A, B, FromA, FromB>(self) -> (FromA, FromB) where\n         FromA: Default + Extend<A>,\n         FromB: Default + Extend<B>,\n         Self: Iterator<Item=(A, B)>,"}, {"sha": "5e9793f270dedea1d37d6b2b565dab1b8b645dae", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -59,7 +59,6 @@\n #![no_std]\n #![allow(raw_pointer_derive)]\n #![deny(missing_docs)]\n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n \n #![feature(int_uint)]\n #![feature(intrinsics, lang_items)]"}, {"sha": "d610962f8620cb491b41cd52882dd99e34857d66", "filename": "src/libcore/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -956,7 +956,7 @@ pub fn fold<T,\n             E,\n             F: FnMut(V, T) -> V,\n             Iter: Iterator<Item=Result<T, E>>>(\n-            mut iterator: Iter,\n+            iterator: Iter,\n             mut init: V,\n             mut f: F)\n             -> Result<V, E> {"}, {"sha": "32f7c43e8289cca4a5f04e6128a7b327655e4979", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -23,8 +23,6 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n-\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]"}, {"sha": "2fb5a6b64a6520b244f041346fc643b860fa5636", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -610,7 +610,7 @@ impl<'a> Context<'a> {\n         let mut rlibs = HashMap::new();\n         let mut dylibs = HashMap::new();\n         {\n-            let mut locs = locs.iter().map(|l| Path::new(&l[])).filter(|loc| {\n+            let locs = locs.iter().map(|l| Path::new(&l[])).filter(|loc| {\n                 if !loc.exists() {\n                     sess.err(&format!(\"extern location for {} does not exist: {}\",\n                                      self.crate_name, loc.display())[]);"}, {"sha": "eb6bc4c38353a43e05d8107cc83c4892ef524df0", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -317,7 +317,7 @@ impl<T> VecPerParamSpace<T> {\n     ///\n     /// Unlike the `extend` method in `Vec`, this should not be assumed\n     /// to be a cheap operation (even when amortized over many calls).\n-    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, mut values: I) {\n+    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, values: I) {\n         // This could be made more efficient, obviously.\n         for item in values {\n             self.push(space, item);"}, {"sha": "000572cdd40a34f10c3edad3f8e7cca3d07fd022", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -295,7 +295,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     fn evaluate_predicates_recursively<'a,'o,I>(&mut self,\n                                                 stack: Option<&TraitObligationStack<'o, 'tcx>>,\n-                                                mut predicates: I)\n+                                                predicates: I)\n                                                 -> EvaluationResult<'tcx>\n         where I : Iterator<Item=&'a PredicateObligation<'tcx>>, 'tcx:'a\n     {"}, {"sha": "c94ec112ac2f59643a50f12fc631716e95d0420c", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -265,7 +265,7 @@ pub fn sanitize(s: &str) -> String {\n     return result;\n }\n \n-pub fn mangle<PI: Iterator<Item=PathElem>>(mut path: PI,\n+pub fn mangle<PI: Iterator<Item=PathElem>>(path: PI,\n                                       hash: Option<&str>) -> String {\n     // Follow C++ namespace-mangling style, see\n     // http://en.wikipedia.org/wiki/Name_mangling for more info.\n@@ -1055,10 +1055,10 @@ fn add_local_native_libraries(cmd: &mut Command, sess: &Session) {\n     let libs = sess.cstore.get_used_libraries();\n     let libs = libs.borrow();\n \n-    let mut staticlibs = libs.iter().filter_map(|&(ref l, kind)| {\n+    let staticlibs = libs.iter().filter_map(|&(ref l, kind)| {\n         if kind == cstore::NativeStatic {Some(l)} else {None}\n     });\n-    let mut others = libs.iter().filter(|&&(_, kind)| {\n+    let others = libs.iter().filter(|&&(_, kind)| {\n         kind != cstore::NativeStatic\n     });\n "}, {"sha": "49959d831353fc3bd855ca0eb4e0d7ca639851db", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -23,8 +23,6 @@\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n-\n #![feature(alloc)]\n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "932386b06b447652bddcc7cda3e9beb29fba58cc", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -3848,7 +3848,7 @@ fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                       def_id: ast::DefId,\n                       qualified: bool,\n                       output: &mut String) {\n-        ty::with_path(cx.tcx(), def_id, |mut path| {\n+        ty::with_path(cx.tcx(), def_id, |path| {\n             if qualified {\n                 if def_id.krate == ast::LOCAL_CRATE {\n                     output.push_str(crate_root_namespace(cx));"}, {"sha": "04a3f423dce11015ed08cf935ee13edf6c4784f1", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -353,7 +353,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n                     assert!(ty_substs_a.len() == ty_substs_b.len());\n \n                     let mut result = None;\n-                    let mut tps = ty_substs_a.iter().zip(ty_substs_b.iter()).enumerate();\n+                    let tps = ty_substs_a.iter().zip(ty_substs_b.iter()).enumerate();\n                     for (i, (tp_a, tp_b)) in tps {\n                         if self.fcx.infcx().try(|_| self.subtype(*tp_a, *tp_b)).is_ok() {\n                             continue;"}, {"sha": "15954f698363b1be74a595747ae8824481b3196e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -805,7 +805,7 @@ fn check_trait_on_unimplemented<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         a.check_name(\"rustc_on_unimplemented\")\n     }) {\n         if let Some(ref istring) = attr.value_str() {\n-            let mut parser = Parser::new(istring.get());\n+            let parser = Parser::new(istring.get());\n             let types = generics.ty_params.as_slice();\n             for token in parser {\n                 match token {"}, {"sha": "94414d842c9dfd0daee79c3cfd8dfcb2a46d681d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -854,7 +854,7 @@ fn constrain_callee(rcx: &mut Rcx,\n fn constrain_call<'a, I: Iterator<Item=&'a ast::Expr>>(rcx: &mut Rcx,\n                                                        call_expr: &ast::Expr,\n                                                        receiver: Option<&ast::Expr>,\n-                                                       mut arg_exprs: I,\n+                                                       arg_exprs: I,\n                                                        implicitly_ref_args: bool) {\n     //! Invoked on every call site (i.e., normal calls, method calls,\n     //! and overloaded operators). Constrains the regions which appear"}, {"sha": "7dfa5298fb4c78b092d2e438b8b4694193f8ba27", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -439,7 +439,7 @@ fn convert_associated_type<'a, 'tcx>(ccx: &CollectCtxt<'a, 'tcx>,\n \n fn convert_methods<'a,'tcx,'i,I>(ccx: &CollectCtxt<'a, 'tcx>,\n                                  container: ImplOrTraitItemContainer,\n-                                 mut ms: I,\n+                                 ms: I,\n                                  untransformed_rcvr_ty: Ty<'tcx>,\n                                  rcvr_ty_generics: &ty::Generics<'tcx>,\n                                  rcvr_visibility: ast::Visibility)\n@@ -1655,7 +1655,7 @@ fn enforce_impl_ty_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n     loop {\n         let num_inputs = input_parameters.len();\n \n-        let mut projection_predicates =\n+        let projection_predicates =\n             impl_scheme.generics.predicates\n             .iter()\n             .filter_map(|predicate| {"}, {"sha": "a07179b31bbd897725af62686a63778b9f63e2eb", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -73,7 +73,6 @@ This API is completely unstable and subject to change.\n       html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n #![allow(non_camel_case_types)]\n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n \n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "ee091d1786b73faf2743f6bdf56593a2b6052bf2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -1416,7 +1416,7 @@ impl<K, V, S, H> IntoIterator for HashMap<K, V, S>\n {\n     type Iter = IntoIter<K, V>;\n \n-    fn into_iter(mut self) -> IntoIter<K, V> {\n+    fn into_iter(self) -> IntoIter<K, V> {\n         self.into_iter()\n     }\n }\n@@ -1575,7 +1575,7 @@ impl<K, V, S, H> Extend<(K, V)> for HashMap<K, V, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<T: Iterator<Item=(K, V)>>(&mut self, mut iter: T) {\n+    fn extend<T: Iterator<Item=(K, V)>>(&mut self, iter: T) {\n         for (k, v) in iter {\n             self.insert(k, v);\n         }"}, {"sha": "ae9fb9bca77913d143bc3fd8958e533fe6239775", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -636,7 +636,7 @@ impl<T, S, H> Extend<T> for HashSet<T, S>\n           S: HashState<Hasher=H>,\n           H: hash::Hasher<Output=u64>\n {\n-    fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, iter: I) {\n         for k in iter {\n             self.insert(k);\n         }"}, {"sha": "7a6e0682281072bec69b53cee2650667a62596ad", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -127,7 +127,6 @@\n #![no_std]\n \n #![deny(missing_docs)]\n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n \n #[cfg(test)]\n #[macro_use]"}, {"sha": "abf215988bb4b859982967ee3dda5ceeb3294d65", "filename": "src/libstd/old_io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fold_io%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fold_io%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ffs.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -597,7 +597,7 @@ pub fn mkdir_recursive(path: &Path, mode: FilePermission) -> IoResult<()> {\n         return Ok(())\n     }\n \n-    let mut comps = path.components();\n+    let comps = path.components();\n     let mut curpath = path.root_path().unwrap_or(Path::new(\".\"));\n \n     for c in comps {"}, {"sha": "b30af10986b9952235c200e4de4a81db959d64e8", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -366,7 +366,7 @@ impl FromIterator<CodePoint> for Wtf8Buf {\n /// This replaces surrogate code point pairs with supplementary code points,\n /// like concatenating ill-formed UTF-16 strings effectively would.\n impl Extend<CodePoint> for Wtf8Buf {\n-    fn extend<T: Iterator<Item=CodePoint>>(&mut self, mut iterator: T) {\n+    fn extend<T: Iterator<Item=CodePoint>>(&mut self, iterator: T) {\n         let (low, _high) = iterator.size_hint();\n         // Lower bound of one byte per code point (ASCII only)\n         self.bytes.reserve(low);"}, {"sha": "301a18892d8e3684d6b6688878550771be4a3f0c", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -373,7 +373,7 @@ impl fmt::Display for StabilityLevel {\n fn find_stability_generic<'a,\n                               AM: AttrMetaMethods,\n                               I: Iterator<Item=&'a AM>>\n-                             (diagnostic: &SpanHandler, mut attrs: I, item_sp: Span)\n+                             (diagnostic: &SpanHandler, attrs: I, item_sp: Span)\n                              -> (Option<Stability>, Vec<&'a AM>) {\n \n     let mut stab: Option<Stability> = None;"}, {"sha": "74d89d1d6ff869d6957fe6a067616400c35bcf89", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -23,8 +23,6 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n-\n #![feature(box_syntax)]\n #![feature(collections)]\n #![feature(core)]"}, {"sha": "a6c92c037439658217f50e341b0a7f8ed9c9b893", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -38,7 +38,7 @@ impl<T> FromIterator<T> for SmallVector<T> {\n }\n \n impl<T> Extend<T> for SmallVector<T> {\n-    fn extend<I: Iterator<Item=T>>(&mut self, mut iter: I) {\n+    fn extend<I: Iterator<Item=T>>(&mut self, iter: I) {\n         for val in iter {\n             self.push(val);\n         }"}, {"sha": "c5c84396e180238043eca01d25027b25a98337e2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -32,8 +32,6 @@\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\")]\n \n-#![cfg_attr(not(stage0), allow(unused_mut))] // NOTE: remove after stage0 snap\n-\n #![feature(asm, slicing_syntax)]\n #![feature(box_syntax)]\n #![feature(collections)]"}, {"sha": "ebd86dbf61cbff9e8d19e5f5e3b2167afaa6048e", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3484706c38272828efc50b2553578afc62230dbb/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3484706c38272828efc50b2553578afc62230dbb/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=3484706c38272828efc50b2553578afc62230dbb", "patch": "@@ -332,7 +332,7 @@ pub fn winsorize<T: Float + FromPrimitive>(samples: &mut [T], pct: T) {\n \n /// Returns a HashMap with the number of occurrences of every element in the\n /// sequence that the iterator exposes.\n-pub fn freq_count<T, U>(mut iter: T) -> hash_map::HashMap<U, uint>\n+pub fn freq_count<T, U>(iter: T) -> hash_map::HashMap<U, uint>\n   where T: Iterator<Item=U>, U: Eq + Clone + Hash<Hasher>\n {\n     let mut map: hash_map::HashMap<U,uint> = hash_map::HashMap::new();"}]}