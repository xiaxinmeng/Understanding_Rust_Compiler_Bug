{"sha": "8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMmY5Y2FlMjEzZDM4YjMxZTkzNzJiOWQ4YTdmZWUxMjYzZjEzNjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T02:20:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-23T02:20:31Z"}, "message": "core::rt: Fix a use after free in uv 'write'", "tree": {"sha": "4bccce3e1845aa4c046303d7302d828d9bc2d432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bccce3e1845aa4c046303d7302d828d9bc2d432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "html_url": "https://github.com/rust-lang/rust/commit/8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a292d5175091f61e92d0f393275e32ad2b05d584", "url": "https://api.github.com/repos/rust-lang/rust/commits/a292d5175091f61e92d0f393275e32ad2b05d584", "html_url": "https://github.com/rust-lang/rust/commit/a292d5175091f61e92d0f393275e32ad2b05d584"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "4c4b2e03d3daabbbc6b430b82793bc41a55d396e", "filename": "src/libcore/rt/uv/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fmod.rs?ref=8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "patch": "@@ -301,7 +301,8 @@ struct WatcherData {\n     write_cb: Option<ConnectionCallback>,\n     connect_cb: Option<ConnectionCallback>,\n     close_cb: Option<NullCallback>,\n-    alloc_cb: Option<AllocCallback>\n+    alloc_cb: Option<AllocCallback>,\n+    buf: Option<Buf>\n }\n \n pub fn install_watcher_data<H, W: Watcher + NativeHandle<*H>>(watcher: &mut W) {\n@@ -311,7 +312,8 @@ pub fn install_watcher_data<H, W: Watcher + NativeHandle<*H>>(watcher: &mut W) {\n             write_cb: None,\n             connect_cb: None,\n             close_cb: None,\n-            alloc_cb: None\n+            alloc_cb: None,\n+            buf: None\n         };\n         let data = transmute::<~WatcherData, *c_void>(data);\n         uvll::set_data_for_uv_handle(watcher.native_handle(), data);"}, {"sha": "04b9008b0677018ce4d67d6271e176f9cbb6cc87", "filename": "src/libcore/rt/uv/net.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuv%2Fnet.rs?ref=8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "patch": "@@ -107,21 +107,25 @@ pub impl StreamWatcher {\n \n         let req = WriteRequest::new();\n         let buf = vec_to_uv_buf(msg);\n-        // XXX: Allocation\n-        let bufs = ~[buf];\n+        assert!(data.buf.is_none());\n+        data.buf = Some(buf);\n+        let bufs = [buf];\n         unsafe {\n             assert!(0 == uvll::write(req.native_handle(),\n                                           self.native_handle(),\n-                                          &bufs, write_cb));\n+                                          bufs, write_cb));\n         }\n-        // XXX: Freeing immediately after write. Is this ok?\n-        let _v = vec_from_uv_buf(buf);\n \n         extern fn write_cb(req: *uvll::uv_write_t, status: c_int) {\n             let write_request: WriteRequest = NativeHandle::from_native_handle(req);\n             let mut stream_watcher = write_request.stream();\n             write_request.delete();\n-            let cb = get_watcher_data(&mut stream_watcher).write_cb.swap_unwrap();\n+            let cb = {\n+                let data = get_watcher_data(&mut stream_watcher);\n+                let _vec = vec_from_uv_buf(data.buf.swap_unwrap());\n+                let cb = data.write_cb.swap_unwrap();\n+                cb\n+            };\n             let status = status_to_maybe_uv_error(stream_watcher.native_handle(), status);\n             cb(stream_watcher, status);\n         }"}, {"sha": "e7b2880b74b50a05c99f4a608c8b9524c66c2f4e", "filename": "src/libcore/rt/uvio.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvio.rs?ref=8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "patch": "@@ -445,7 +445,7 @@ fn test_read_read_read() {\n                 let io = local_sched::unsafe_borrow_io();\n                 let mut listener = io.bind(addr).unwrap();\n                 let mut stream = listener.listen().unwrap();\n-                let mut buf = [0, .. 2048];\n+                let mut buf = [1, .. 2048];\n                 let mut total_bytes_written = 0;\n                 while total_bytes_written < MAX {\n                     stream.write(buf);\n@@ -465,6 +465,9 @@ fn test_read_read_read() {\n                 let nread = stream.read(buf).unwrap();\n                 rtdebug!(\"read %u bytes\", nread as uint);\n                 total_bytes_read += nread;\n+                for uint::range(0, nread) |i| {\n+                    assert!(buf[i] == 1);\n+                }\n             }\n             rtdebug!(\"read %u bytes total\", total_bytes_read as uint);\n             stream.close();"}, {"sha": "0f75ebb6090a19b44792419791fab154b5329cd6", "filename": "src/libcore/rt/uvll.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a2f9cae213d38b31e9372b9d8a7fee1263f1363/src%2Flibcore%2Frt%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fuvll.rs?ref=8a2f9cae213d38b31e9372b9d8a7fee1263f1363", "patch": "@@ -219,9 +219,9 @@ pub unsafe fn accept(server: *c_void, client: *c_void) -> c_int {\n     return rust_uv_accept(server as *c_void, client as *c_void);\n }\n \n-pub unsafe fn write<T>(req: *uv_write_t, stream: *T, buf_in: *~[uv_buf_t], cb: *u8) -> c_int {\n-    let buf_ptr = vec::raw::to_ptr(*buf_in);\n-    let buf_cnt = vec::len(*buf_in) as i32;\n+pub unsafe fn write<T>(req: *uv_write_t, stream: *T, buf_in: &[uv_buf_t], cb: *u8) -> c_int {\n+    let buf_ptr = vec::raw::to_ptr(buf_in);\n+    let buf_cnt = vec::len(buf_in) as i32;\n     return rust_uv_write(req as *c_void, stream as *c_void, buf_ptr, buf_cnt, cb);\n }\n pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: *u8, on_read: *u8) -> c_int {"}]}