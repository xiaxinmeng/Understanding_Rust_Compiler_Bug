{"sha": "85bcaad41278644f61155c749cd08a6ace12a8a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YmNhYWQ0MTI3ODY0NGY2MTE1NWM3NDljZDA4YTZhY2UxMmE4YTY=", "commit": {"author": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-26T18:37:34Z"}, "committer": {"name": "Karim Snj", "email": "karim.snj@gmail.com", "date": "2018-03-26T21:16:54Z"}, "message": "while_immutable_condition: fix handling of self", "tree": {"sha": "75ad5dfc73fd500ac5d9550afdc31f99efc1637c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ad5dfc73fd500ac5d9550afdc31f99efc1637c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85bcaad41278644f61155c749cd08a6ace12a8a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85bcaad41278644f61155c749cd08a6ace12a8a6", "html_url": "https://github.com/rust-lang/rust/commit/85bcaad41278644f61155c749cd08a6ace12a8a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85bcaad41278644f61155c749cd08a6ace12a8a6/comments", "author": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kimsnj", "id": 302132, "node_id": "MDQ6VXNlcjMwMjEzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/302132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kimsnj", "html_url": "https://github.com/kimsnj", "followers_url": "https://api.github.com/users/kimsnj/followers", "following_url": "https://api.github.com/users/kimsnj/following{/other_user}", "gists_url": "https://api.github.com/users/kimsnj/gists{/gist_id}", "starred_url": "https://api.github.com/users/kimsnj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kimsnj/subscriptions", "organizations_url": "https://api.github.com/users/kimsnj/orgs", "repos_url": "https://api.github.com/users/kimsnj/repos", "events_url": "https://api.github.com/users/kimsnj/events{/privacy}", "received_events_url": "https://api.github.com/users/kimsnj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09725c8c0d7e0c08a62dc90218518e8d4bb93f9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/09725c8c0d7e0c08a62dc90218518e8d4bb93f9f", "html_url": "https://github.com/rust-lang/rust/commit/09725c8c0d7e0c08a62dc90218518e8d4bb93f9f"}], "stats": {"total": 130, "additions": 89, "deletions": 41}, "files": [{"sha": "b3f20bfc654bec1e34a071aa84d5a21b6dd7c04e", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/85bcaad41278644f61155c749cd08a6ace12a8a6/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bcaad41278644f61155c749cd08a6ace12a8a6/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=85bcaad41278644f61155c749cd08a6ace12a8a6", "patch": "@@ -2140,7 +2140,7 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n         return;\n     }\n \n-    let mut mut_var_visitor = MutableVarsVisitor {\n+    let mut mut_var_visitor = VarCollectorVisitor {\n         cx,\n         ids: HashMap::new(),\n         skip: false,\n@@ -2150,25 +2150,14 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n         return;\n     }\n \n-    if mut_var_visitor.ids.is_empty() {\n-        span_lint(\n-            cx,\n-            WHILE_IMMUTABLE_CONDITION,\n-            cond.span,\n-            \"all variables in condition are immutable. This either leads to an infinite or to a never running loop.\",\n-        );\n-        return;\n-    }\n-\n-\n     let mut delegate = MutVarsDelegate {\n-        mut_spans: mut_var_visitor.ids,\n+        used_mutably: mut_var_visitor.ids,\n     };\n     let def_id = def_id::DefId::local(block.hir_id.owner);\n     let region_scope_tree = &cx.tcx.region_scope_tree(def_id);\n     ExprUseVisitor::new(&mut delegate, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).walk_expr(expr);\n \n-    if !delegate.mut_spans.iter().any(|(_, v)| v.is_some()) {\n+    if !delegate.used_mutably.iter().any(|(_, v)| *v) {\n         span_lint(\n             cx,\n             WHILE_IMMUTABLE_CONDITION,\n@@ -2178,21 +2167,34 @@ fn check_infinite_loop<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, cond: &'tcx Expr, b\n     }\n }\n \n-/// Collects the set of mutable variable in an expression\n+/// Collects the set of variables in an expression\n /// Stops analysis if a function call is found\n-struct MutableVarsVisitor<'a, 'tcx: 'a> {\n+/// Note: In some cases such as `self`, there are no mutable annotation,\n+/// All variables definition IDs are collected\n+struct VarCollectorVisitor<'a, 'tcx: 'a> {\n     cx: &'a LateContext<'a, 'tcx>,\n-    ids: HashMap<NodeId, Option<Span>>,\n+    ids: HashMap<NodeId, bool>,\n     skip: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> VarCollectorVisitor<'a, 'tcx> {\n+    fn insert_def_id(&mut self, ex: &'tcx Expr) {\n+        if_chain! {\n+            if let ExprPath(ref qpath) = ex.node;\n+            if let QPath::Resolved(None, _) = *qpath;\n+            let def = self.cx.tables.qpath_def(qpath, ex.hir_id);\n+            if let Def::Local(node_id) = def;\n+            then {\n+                self.ids.insert(node_id, false);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, ex: &'tcx Expr) {\n         match ex.node {\n-            ExprPath(_) => if let Some(node_id) = check_for_mutability(self.cx, ex) {\n-                self.ids.insert(node_id, None);\n-            },\n-\n+            ExprPath(_) => self.insert_def_id(ex),\n             // If there is any fuction/method call\u2026 we just stop analysis\n             ExprCall(..) | ExprMethodCall(..) => self.skip = true,\n \n@@ -2208,15 +2210,18 @@ impl<'a, 'tcx> Visitor<'tcx> for MutableVarsVisitor<'a, 'tcx> {\n }\n \n struct MutVarsDelegate {\n-    mut_spans: HashMap<NodeId, Option<Span>>,\n+    used_mutably: HashMap<NodeId, bool>,\n }\n \n impl<'tcx> MutVarsDelegate {\n     fn update(&mut self, cat: &'tcx Categorization, sp: Span) {\n-        if let Categorization::Local(id) = *cat {\n-            if let Some(span) = self.mut_spans.get_mut(&id) {    \n-                *span = Some(sp)\n-            }\n+        match *cat {\n+            Categorization::Local(id) =>\n+                if let Some(used) = self.used_mutably.get_mut(&id) {\n+                    *used = true;\n+                },\n+            Categorization::Deref(ref cmt, _) => self.update(&cmt.cat, sp),\n+            _ => {}\n         }\n     }\n }\n@@ -2236,7 +2241,7 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n     }\n \n     fn mutate(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: MutateMode) {\n-            self.update(&cmt.cat, sp)\n+        self.update(&cmt.cat, sp)\n     }\n \n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}"}, {"sha": "30f86129803a59f55c0f6455121704ced5328cc4", "filename": "tests/ui/infinite_loop.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/85bcaad41278644f61155c749cd08a6ace12a8a6/tests%2Fui%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85bcaad41278644f61155c749cd08a6ace12a8a6/tests%2Fui%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.rs?ref=85bcaad41278644f61155c749cd08a6ace12a8a6", "patch": "@@ -124,9 +124,36 @@ fn internally_mutable() {\n     }\n }\n \n+struct Counter {\n+    count: usize,\n+}\n+\n+impl Counter {\n+    fn inc(&mut self) {\n+        self.count += 1;\n+    }\n+\n+    fn inc_n(&mut self, n: usize) {\n+        while self.count < n {\n+            self.inc();\n+        }\n+        println!(\"OK - self borrowed mutably\");\n+    }\n+\n+    fn print_n(&self, n: usize) {\n+        while self.count < n {\n+            println!(\"KO - {} is not mutated\", self.count);\n+        }\n+    }\n+}\n+\n fn main() {\n     immutable_condition();\n     unused_var();\n     used_immutable();\n     internally_mutable();\n+\n+    let mut c = Counter { count: 0 };\n+    c.inc_n(5);\n+    c.print_n(2);\n }"}, {"sha": "ecb6ac589605e0dce189a34d0f271a04fe892d90", "filename": "tests/ui/infinite_loop.stderr", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/85bcaad41278644f61155c749cd08a6ace12a8a6/tests%2Fui%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/85bcaad41278644f61155c749cd08a6ace12a8a6/tests%2Fui%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finfinite_loop.stderr?ref=85bcaad41278644f61155c749cd08a6ace12a8a6", "patch": "@@ -1,22 +1,30 @@\n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:10:11\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n+  --> $DIR/infinite_loop.rs:10:5\n    |\n-10 |     while y < 10 {\n-   |           ^^^^^^\n+10 | /     while y < 10 {\n+11 | |         println!(\"KO - y is immutable\");\n+12 | |     }\n+   | |_____^\n    |\n    = note: `-D while-immutable-condition` implied by `-D warnings`\n \n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:15:11\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n+  --> $DIR/infinite_loop.rs:15:5\n    |\n-15 |     while y < 10 && x < 3 {\n-   |           ^^^^^^^^^^^^^^^\n+15 | /     while y < 10 && x < 3 {\n+16 | |         let mut k = 1;\n+17 | |         k += 2;\n+18 | |         println!(\"KO - x and y immutable\");\n+19 | |     }\n+   | |_____^\n \n-error: all variables in condition are immutable. This either leads to an infinite or to a never running loop.\n-  --> $DIR/infinite_loop.rs:22:11\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n+  --> $DIR/infinite_loop.rs:22:5\n    |\n-22 |     while !cond {\n-   |           ^^^^^\n+22 | /     while !cond {\n+23 | |         println!(\"KO - cond immutable\");\n+24 | |     }\n+   | |_____^\n \n error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n   --> $DIR/infinite_loop.rs:52:5\n@@ -63,5 +71,13 @@ error: Variable in the condition are not mutated in the loop body. This either l\n 84 | |     }\n    | |_____^\n \n-error: aborting due to 8 previous errors\n+error: Variable in the condition are not mutated in the loop body. This either leads to an infinite or to a never running loop.\n+   --> $DIR/infinite_loop.rs:144:9\n+    |\n+144 | /         while self.count < n {\n+145 | |             println!(\"KO - {} is not mutated\", self.count);\n+146 | |         }\n+    | |_________^\n+\n+error: aborting due to 9 previous errors\n "}]}