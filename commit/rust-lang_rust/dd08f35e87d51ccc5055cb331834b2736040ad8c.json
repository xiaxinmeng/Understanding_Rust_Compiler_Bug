{"sha": "dd08f35e87d51ccc5055cb331834b2736040ad8c", "node_id": "C_kwDOAAsO6NoAKGRkMDhmMzVlODdkNTFjY2M1MDU1Y2IzMzE4MzRiMjczNjA0MGFkOGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T05:15:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T05:15:29Z"}, "message": "Rollup merge of #107286 - compiler-errors:new-solver-deny-infers, r=lcnr\n\nICE in new solver if we see an inference variable\n\nBy construction, we do not expect to see any `ty::Infer(ty::TyVar(_))` inference types in the solver (we treat this as ambiguous, since we need to be able to structurally resolve the self type at least one layer to assemble candidates for it). Additionally, since we're doing no freshening, we also don't expect to see any fresh vars of any kind in the solver.\n\nLet's make that an ICE so we can catch any mistakes.\n\nWhen #107282 lands, we should also ICE there too if we see a non-int/float infer.\n\nr? `@lcnr`", "tree": {"sha": "d9ccf54402dd1abcb80d3663dccb176e2ee6da34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9ccf54402dd1abcb80d3663dccb176e2ee6da34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd08f35e87d51ccc5055cb331834b2736040ad8c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0gxxCRBK7hj4Ov3rIwAANBEIAAnCLSqqfb6eIYXi7lL8di4P\nrE3SNBUViatBDIPHzxZUcYoDAHbuiRrA1i8O+1S5N8jYMxEKgqAvblWzvrNRdDnh\nijDCKXY989cRNR9pO/OU28+O+bFs1Rq2FNqV/QIW/Ms4drHe8e7zP4HHDumRVo08\nFIIqYNaJByYs9QJz7g0gFK3/ufMrmS/M6MoambLWvdo4ANJ5lQuXihCIRmM0uzFM\ntr+Wad+jGg2rZS5aoVtifxoDTKOJNGl1i7BXI6ncX4+5i7tsqukgPz/tgshHDCay\nSycgmdbMgauAg+UpwOSzV/6DqxPdezXOYb2FYXSPtnb8C7mP6KabZUBDSodVzVA=\n=7GUh\n-----END PGP SIGNATURE-----\n", "payload": "tree d9ccf54402dd1abcb80d3663dccb176e2ee6da34\nparent 5be2f51428dd2daeafc582d5c06328e21f2fd5a9\nparent 0f24e11ef5cd0a8363ae1791cee3f96de3d0845c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674710129 +0100\ncommitter GitHub <noreply@github.com> 1674710129 +0100\n\nRollup merge of #107286 - compiler-errors:new-solver-deny-infers, r=lcnr\n\nICE in new solver if we see an inference variable\n\nBy construction, we do not expect to see any `ty::Infer(ty::TyVar(_))` inference types in the solver (we treat this as ambiguous, since we need to be able to structurally resolve the self type at least one layer to assemble candidates for it). Additionally, since we're doing no freshening, we also don't expect to see any fresh vars of any kind in the solver.\n\nLet's make that an ICE so we can catch any mistakes.\n\nWhen #107282 lands, we should also ICE there too if we see a non-int/float infer.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd08f35e87d51ccc5055cb331834b2736040ad8c", "html_url": "https://github.com/rust-lang/rust/commit/dd08f35e87d51ccc5055cb331834b2736040ad8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd08f35e87d51ccc5055cb331834b2736040ad8c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5be2f51428dd2daeafc582d5c06328e21f2fd5a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5be2f51428dd2daeafc582d5c06328e21f2fd5a9", "html_url": "https://github.com/rust-lang/rust/commit/5be2f51428dd2daeafc582d5c06328e21f2fd5a9"}, {"sha": "0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c", "html_url": "https://github.com/rust-lang/rust/commit/0f24e11ef5cd0a8363ae1791cee3f96de3d0845c"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "d23b550621e17421ce179a63a98a4445ec4f3402", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=dd08f35e87d51ccc5055cb331834b2736040ad8c", "patch": "@@ -335,9 +335,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Tuple(_)\n             | ty::Param(_)\n             | ty::Placeholder(..)\n-            | ty::Infer(_)\n+            | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Error(_) => return,\n-            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n             ty::Alias(_, alias_ty) => alias_ty,\n         };\n \n@@ -385,9 +386,10 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n             | ty::Tuple(_)\n             | ty::Param(_)\n             | ty::Placeholder(..)\n-            | ty::Infer(_)\n+            | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Error(_) => return,\n-            ty::Bound(..) => bug!(\"unexpected bound type: {goal:?}\"),\n+            ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_))\n+            | ty::Bound(..) => bug!(\"unexpected self type for `{goal:?}`\"),\n             ty::Dynamic(bounds, ..) => bounds,\n         };\n "}, {"sha": "b583705ac43693a6619c1776ce1df2efe37bea02", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=dd08f35e87d51ccc5055cb331834b2736040ad8c", "patch": "@@ -427,7 +427,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                         .subst(tcx, &[ty::GenericArg::from(goal.predicate.self_ty())])\n                 }\n \n-                ty::Infer(ty::TyVar(..)) | ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n+                ty::Alias(_, _) | ty::Param(_) | ty::Placeholder(..) => {\n                     // FIXME(ptr_metadata): It would also be possible to return a `Ok(Ambig)` with no constraints.\n                     let sized_predicate = ty::Binder::dummy(tcx.at(DUMMY_SP).mk_trait_ref(\n                         LangItem::Sized,\n@@ -470,7 +470,9 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                     }\n                 },\n \n-                ty::Infer(ty::FreshTy(..) | ty::FreshIntTy(..) | ty::FreshFloatTy(..))\n+                ty::Infer(\n+                    ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_),\n+                )\n                 | ty::Bound(..) => bug!(\n                     \"unexpected self ty `{:?}` when normalizing `<T as Pointee>::Metadata`\",\n                     goal.predicate.self_ty()"}, {"sha": "c2a19372f18c4f97e352ec7d426820fc2901752c", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd08f35e87d51ccc5055cb331834b2736040ad8c/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=dd08f35e87d51ccc5055cb331834b2736040ad8c", "patch": "@@ -24,15 +24,16 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         | ty::Never\n         | ty::Char => Ok(vec![]),\n \n-        ty::Placeholder(..)\n-        | ty::Dynamic(..)\n+        ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)\n         | ty::Alias(ty::Projection, ..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::RawPtr(ty::TypeAndMut { ty: element_ty, .. }) | ty::Ref(_, element_ty, _) => {\n             Ok(vec![element_ty])\n@@ -99,11 +100,12 @@ pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n         | ty::Foreign(..)\n         | ty::Alias(..)\n         | ty::Param(_)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Placeholder(..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::Tuple(tys) => Ok(tys.to_vec()),\n \n@@ -148,11 +150,12 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n         | ty::Adt(_, _)\n         | ty::Alias(_, _)\n         | ty::Param(_)\n-        | ty::Infer(ty::TyVar(_)) => Err(NoSolution),\n+        | ty::Placeholder(..) => Err(NoSolution),\n \n-        ty::Placeholder(..)\n-        | ty::Bound(..)\n-        | ty::Infer(ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => bug!(),\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{ty}`\")\n+        }\n \n         ty::Tuple(tys) => Ok(tys.to_vec()),\n \n@@ -216,9 +219,13 @@ pub(crate) fn extract_tupled_inputs_and_output_from_callable<'tcx>(\n         | ty::Tuple(_)\n         | ty::Alias(_, _)\n         | ty::Param(_)\n-        | ty::Placeholder(_)\n-        | ty::Bound(_, _)\n-        | ty::Infer(_)\n+        | ty::Placeholder(..)\n+        | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n         | ty::Error(_) => Err(NoSolution),\n+\n+        ty::Bound(..)\n+        | ty::Infer(ty::TyVar(_) | ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_)) => {\n+            bug!(\"unexpected type `{self_ty}`\")\n+        }\n     }\n }"}]}