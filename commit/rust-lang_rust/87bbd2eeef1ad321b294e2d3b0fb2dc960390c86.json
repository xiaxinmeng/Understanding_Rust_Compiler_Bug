{"sha": "87bbd2eeef1ad321b294e2d3b0fb2dc960390c86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YmJkMmVlZWYxYWQzMjFiMjk0ZTJkM2IwZmIyZGM5NjAzOTBjODY=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-06T20:52:15Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-06T21:00:51Z"}, "message": "fix style issues in doc comment", "tree": {"sha": "df6763a6b9bfe89838d45d7126bb178952fe919d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df6763a6b9bfe89838d45d7126bb178952fe919d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86", "html_url": "https://github.com/rust-lang/rust/commit/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b7d71067b2f881fa0cea257b6767a5fe13fbf73", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b7d71067b2f881fa0cea257b6767a5fe13fbf73", "html_url": "https://github.com/rust-lang/rust/commit/9b7d71067b2f881fa0cea257b6767a5fe13fbf73"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "d398ca621576b138cc642f450f062e23006a46f8", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87bbd2eeef1ad321b294e2d3b0fb2dc960390c86/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=87bbd2eeef1ad321b294e2d3b0fb2dc960390c86", "patch": "@@ -603,8 +603,10 @@ unsafe impl<T: ?Sized> Freeze for *mut T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a T {}\n unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n \n-/// A trait that indicates that it is safe to move an object of a type implementing it.\n-/// Since that is true for most types, it is automatically implemented in most cases.\n+/// Types that are safe to move.\n+///\n+/// Since moving objects is almost always safe, it is automatically implemented in most cases.\n+///\n /// This trait is mainly used to build self referencial structs,\n /// since moving an object with pointers to itself will invalidate them,\n /// causing undefined behavior.\n@@ -643,7 +645,7 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// [`Deref`]: ../ops/trait.Deref.html\n /// [`swap`]: ../mem/fn.swap.html\n ///\n-/// # example\n+/// # Examples\n ///\n /// ```rust\n /// #![feature(pin)]\n@@ -652,21 +654,21 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// use std::marker::Pinned;\n /// use std::ptr::NonNull;\n ///\n-/// // this is a self referencial struct since the slice field points to the data field.\n-/// // we cannot inform the compiler about that with a normal reference,\n+/// // This is a self referencial struct since the slice field points to the data field.\n+/// // We cannot inform the compiler about that with a normal reference,\n /// // since this pattern cannot be described with the usual borrowing rules.\n-/// // instead we use a raw pointer, though one which is known to not be null,\n-/// // since we know its pointing at the string.\n+/// // Instead we use a raw pointer, though one which is known to not be null,\n+/// // since we know it's pointing at the string.\n /// struct Unmovable {\n ///     data: String,\n ///     slice: NonNull<String>,\n ///     _pin: Pinned,\n /// }\n ///\n /// impl Unmovable {\n-///     // to ensure the data doesn't move when the function returns,\n+///     // To ensure the data doesn't move when the function returns,\n ///     // we place it in the heap where it will stay for the lifetime of the object,\n-///     // and the only way to access it would be through a pointer to it\n+///     // and the only way to access it would be through a pointer to it.\n ///     fn new(data: String) -> PinBox<Self> {\n ///         let res = Unmovable {\n ///             data,\n@@ -685,13 +687,13 @@ unsafe impl<'a, T: ?Sized> Freeze for &'a mut T {}\n /// }\n ///\n /// let unmoved = Unmovable::new(\"hello\".to_string());\n-/// // the pointer should point to the correct location,\n+/// // The pointer should point to the correct location,\n /// // so long as the struct hasn't moved.\n-/// // meanwhile, we are free to move the pointer around\n+/// // Meanwhile, we are free to move the pointer around.\n /// let mut still_unmoved = unmoved;\n /// assert_eq!(still_unmoved.slice, NonNull::from(&still_unmoved.data));\n ///\n-/// // now the only way to access to data (safely) is immutably,\n+/// // Now the only way to access to data (safely) is immutably,\n /// // so this will fail to compile:\n /// // still_unmoved.data.push_str(\" world\");\n ///"}]}