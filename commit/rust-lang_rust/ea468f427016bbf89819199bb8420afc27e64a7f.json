{"sha": "ea468f427016bbf89819199bb8420afc27e64a7f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNDY4ZjQyNzAxNmJiZjg5ODE5MTk5YmI4NDIwYWZjMjdlNjRhN2Y=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-26T16:51:00Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-10-11T16:09:48Z"}, "message": "Allow skipping extra paren insertion during AST pretty-printing\n\nFixes #74616\nMakes progress towards #43081\nUnblocks PR #76130\n\nWhen pretty-printing an AST node, we may insert additional parenthesis\nto ensure that precedence is properly preserved in code we output.\nHowever, the proc macro implementation relies on comparing a\npretty-printed AST node to the captured `TokenStream`. Inserting extra\nparenthesis changes the structure of the reparsed `TokenStream`, making\nthe comparison fail.\n\nThis PR refactors the AST pretty-printing code to allow skipping the\ninsertion of additional parenthesis. Several freestanding methods are\nmoved to trait methods on `PrintState`, which keep track of an internal\n`insert_extra_parens` flag. This flag is normally `true`, but we expose\na public method which allows pretty-printing a nonterminal with\n`insert_extra_parens = false`.\n\nTo avoid changing the public interface of `rustc_ast_pretty`, the\nfreestanding `_to_string` methods are changed to delegate to a\nnewly-crated `State`. The main pretty-printing code is moved to a new\n`state` module to ensure that it does not accidentally call any of these\npublic helper functions (instead, the internal functions with the same\nname should be used).", "tree": {"sha": "78d49c5c8f728631e73d1191cac3ef0f95038397", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d49c5c8f728631e73d1191cac3ef0f95038397"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea468f427016bbf89819199bb8420afc27e64a7f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl+DLkwACgkQtAh+UQ6Y\nsWQ1RxAAkr5rbYJkKAos9ESElxXJ6YYO2dctQvU1PFlPm5n47e5901Jf/BvWpu5l\niCsGD5OYrCMqV4HYIXH+IJJ2uRj5BpVEGWapuCyNog+13POgcsnOaZ0MT6wlXvug\no8+bsfsUWMnXak5+Dawl+nIdWEbf96OO1RKml3wXhEtFPcwLKhMyu92LCWz5vRyb\ne1PmIfToe3Y2adt2XXb/ZDU6MegeOFRqOvO+El3ZXTIiC7kvHhJY/D+x0Ad4CFxg\nojzpqfnv31oRRHQ1oOv8ZUdfAKok72tFbk1KOX6rfow8S2WAjDWsEm9Eq+C024Vg\n9ud0ECj1D/8I23Az6RK/XgHCyBlvEC8+zRHcA+tt/A2xYu9JyIS+09JvgPGEUNzK\nGMAojwZ0bH+4aXE0Ggq4AgqJxqCB4BvBW3PQCbRP7iavK/HHIDP0GFpP0RNh1oE+\nbFQ78PCQqZ3M47hTGp+yanDkinhwB81tKP3yufMM2eIKBsHEt0M3MuzkytbyKP86\nXuInBwngKHNYxJQOqsdHUgI3HDZUXzDw3gHaFBIeZ+c/DvdN5US07CBVr1RYCJnx\nWNlCqR86K0Hb+7fJ7oq/DMUCzsLHL4vU8rtK+/3H/7ILkPwihU+CKuBNjZ0OJ/UT\n0huYXQCLuSjtwwKrf5QR6eLgqai9A7/NIBfpWe5rEF3fFl7UcVs=\n=VO3n\n-----END PGP SIGNATURE-----", "payload": "tree 78d49c5c8f728631e73d1191cac3ef0f95038397\nparent a20ae8901c1160b4044dda803cb061630e2f8331\nauthor Aaron Hill <aa1ronham@gmail.com> 1601139060 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1602432588 -0400\n\nAllow skipping extra paren insertion during AST pretty-printing\n\nFixes #74616\nMakes progress towards #43081\nUnblocks PR #76130\n\nWhen pretty-printing an AST node, we may insert additional parenthesis\nto ensure that precedence is properly preserved in code we output.\nHowever, the proc macro implementation relies on comparing a\npretty-printed AST node to the captured `TokenStream`. Inserting extra\nparenthesis changes the structure of the reparsed `TokenStream`, making\nthe comparison fail.\n\nThis PR refactors the AST pretty-printing code to allow skipping the\ninsertion of additional parenthesis. Several freestanding methods are\nmoved to trait methods on `PrintState`, which keep track of an internal\n`insert_extra_parens` flag. This flag is normally `true`, but we expose\na public method which allows pretty-printing a nonterminal with\n`insert_extra_parens = false`.\n\nTo avoid changing the public interface of `rustc_ast_pretty`, the\nfreestanding `_to_string` methods are changed to delegate to a\nnewly-crated `State`. The main pretty-printing code is moved to a new\n`state` module to ensure that it does not accidentally call any of these\npublic helper functions (instead, the internal functions with the same\nname should be used).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea468f427016bbf89819199bb8420afc27e64a7f", "html_url": "https://github.com/rust-lang/rust/commit/ea468f427016bbf89819199bb8420afc27e64a7f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea468f427016bbf89819199bb8420afc27e64a7f/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a20ae8901c1160b4044dda803cb061630e2f8331", "url": "https://api.github.com/repos/rust-lang/rust/commits/a20ae8901c1160b4044dda803cb061630e2f8331", "html_url": "https://github.com/rust-lang/rust/commit/a20ae8901c1160b4044dda803cb061630e2f8331"}], "stats": {"total": 231, "additions": 219, "deletions": 12}, "files": [{"sha": "b34ea41ab558a1767962d73861d88b14418c58de", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -8,6 +8,11 @@ use rustc_ast as ast;\n use rustc_ast::token::{Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{TokenStream, TokenTree};\n \n+pub fn nonterminal_to_string_no_extra_parens(nt: &Nonterminal) -> String {\n+    let state = State::without_insert_extra_parens();\n+    state.nonterminal_to_string(nt)\n+}\n+\n pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n     State::new().nonterminal_to_string(nt)\n }"}, {"sha": "9aa066370bb5b1bc38371dd69dad1304569c5eea", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -20,9 +20,6 @@ use rustc_span::{BytePos, FileName, Span};\n \n use std::borrow::Cow;\n \n-#[cfg(test)]\n-mod tests;\n-\n pub enum MacHeader<'a> {\n     Path(&'a ast::Path),\n     Keyword(&'static str),\n@@ -91,6 +88,13 @@ pub struct State<'a> {\n     comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn + 'a),\n     is_expanded: bool,\n+    // If `true`, additional parenthesis (separate from `ExprKind::Paren`)\n+    // are inserted to ensure that proper precedence is preserved\n+    // in the pretty-printed output.\n+    //\n+    // This is usually `true`, except when performing the pretty-print/reparse\n+    // check in `nt_to_tokenstream`\n+    insert_extra_parens: bool,\n }\n \n crate const INDENT_UNIT: usize = 4;\n@@ -112,6 +116,7 @@ pub fn print_crate<'a>(\n         comments: Some(Comments::new(sm, filename, input)),\n         ann,\n         is_expanded,\n+        insert_extra_parens: true,\n     };\n \n     if is_expanded && has_injected_crate {\n@@ -225,7 +230,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n }\n \n fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n-    format!(\"{}{}\", State::new().to_string(|s| s.print_visibility(vis)), s) \n+    format!(\"{}{}\", State::new().to_string(|s| s.print_visibility(vis)), s)\n }\n \n impl std::ops::Deref for State<'_> {\n@@ -242,6 +247,7 @@ impl std::ops::DerefMut for State<'_> {\n }\n \n pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::DerefMut {\n+    fn insert_extra_parens(&self) -> bool;\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n     fn print_ident(&mut self, ident: Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n@@ -827,12 +833,16 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n \n     fn to_string(&self, f: impl FnOnce(&mut State<'_>)) -> String {\n         let mut printer = State::new();\n+        printer.insert_extra_parens = self.insert_extra_parens();\n         f(&mut printer);\n         printer.s.eof()\n     }\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n+    fn insert_extra_parens(&self) -> bool {\n+        self.insert_extra_parens\n+    }\n     fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }\n@@ -874,9 +884,14 @@ impl<'a> State<'a> {\n             comments: None,\n             ann: &NoAnn,\n             is_expanded: false,\n+            insert_extra_parens: true,\n         }\n     }\n \n+    pub(super) fn without_insert_extra_parens() -> State<'a> {\n+        State { insert_extra_parens: false, ..State::new() }\n+    }\n+\n     // Synthesizes a comment that was not textually present in the original source\n     // file.\n     pub fn synth_comment(&mut self, text: String) {\n@@ -1679,7 +1694,8 @@ impl<'a> State<'a> {\n     }\n \n     /// Prints `expr` or `(expr)` when `needs_par` holds.\n-    fn print_expr_cond_paren(&mut self, expr: &ast::Expr, needs_par: bool) {\n+    fn print_expr_cond_paren(&mut self, expr: &ast::Expr, mut needs_par: bool) {\n+        needs_par &= self.insert_extra_parens;\n         if needs_par {\n             self.popen();\n         }"}, {"sha": "72011f04d9a77309a40d10b8b916656dc9f80272", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -141,6 +141,9 @@ impl std::ops::DerefMut for State<'_> {\n }\n \n impl<'a> PrintState<'a> for State<'a> {\n+    fn insert_extra_parens(&self) -> bool {\n+        true\n+    }\n     fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }"}, {"sha": "51038b7d3aabc7de8c8257fca04f9b18668f3b6f", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -297,7 +297,11 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     };\n \n     // FIXME(#43081): Avoid this pretty-print + reparse hack\n-    let source = pprust::nonterminal_to_string(nt);\n+    // Pretty-print the AST struct without inserting any parenthesis\n+    // beyond those explicitly written by the user (e.g. `ExpnKind::Paren`).\n+    // The resulting stream may have incorrect precedence, but it's only\n+    // ever used for a comparison against the capture tokenstream.\n+    let source = pprust::nonterminal_to_string_no_extra_parens(nt);\n     let filename = FileName::macro_expansion_source_code(&source);\n     let reparsed_tokens = parse_stream_from_source_str(filename, source, sess, Some(span));\n \n@@ -325,9 +329,28 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n     // modifications, including adding/removing typically non-semantic\n     // tokens such as extra braces and commas, don't happen.\n     if let Some(tokens) = tokens {\n+        // If the streams match, then the AST hasn't been modified. Return the captured\n+        // `TokenStream`.\n         if tokenstream_probably_equal_for_proc_macro(&tokens, &reparsed_tokens, sess) {\n             return tokens;\n         }\n+\n+        // The check failed. This time, we pretty-print the AST struct with parenthesis\n+        // inserted to preserve precedence. This may cause `None`-delimiters in the captured\n+        // token stream to match up with inserted parenthesis in the reparsed stream.\n+        let source_with_parens = pprust::nonterminal_to_string(nt);\n+        let filename_with_parens = FileName::macro_expansion_source_code(&source_with_parens);\n+        let tokens_with_parens = parse_stream_from_source_str(\n+            filename_with_parens,\n+            source_with_parens,\n+            sess,\n+            Some(span),\n+        );\n+\n+        if tokenstream_probably_equal_for_proc_macro(&tokens, &tokens_with_parens, sess) {\n+            return tokens;\n+        }\n+\n         info!(\n             \"cached tokens found, but they're not \\\"probably equal\\\", \\\n                 going with stringified version\"\n@@ -489,12 +512,12 @@ pub fn tokentree_probably_equal_for_proc_macro(\n         (TokenTree::Token(token), TokenTree::Token(reparsed_token)) => {\n             token_probably_equal_for_proc_macro(token, reparsed_token)\n         }\n-        (\n-            TokenTree::Delimited(_, delim, tokens),\n-            TokenTree::Delimited(_, reparsed_delim, reparsed_tokens),\n-        ) => {\n-            delim == reparsed_delim\n-                && tokenstream_probably_equal_for_proc_macro(tokens, reparsed_tokens, sess)\n+        (TokenTree::Delimited(_, delim, tts), TokenTree::Delimited(_, delim2, tts2)) => {\n+            // `NoDelim` delimiters can appear in the captured tokenstream, but not\n+            // in the reparsed tokenstream. Allow them to match with anything, so\n+            // that we check if the two streams are structurally equivalent.\n+            (delim == delim2 || *delim == DelimToken::NoDelim || *delim2 == DelimToken::NoDelim)\n+                && tokenstream_probably_equal_for_proc_macro(&tts, &tts2, sess)\n         }\n         _ => false,\n     }"}, {"sha": "faa93787d1385416cbc392d9302525b0b936db53", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.rs?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -0,0 +1,26 @@\n+// Regression test for issue #75734\n+// Ensures that we don't lose tokens when pretty-printing would\n+// normally insert extra parentheses.\n+\n+// check-pass\n+// aux-build:test-macros.rs\n+// compile-flags: -Z span-debug\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+macro_rules! mul_2 {\n+    ($val:expr) => {\n+        print_bang!($val * 2);\n+    };\n+}\n+\n+\n+#[print_attr]\n+fn main() {\n+    &|_: u8| {};\n+    mul_2!(1 + 1);\n+}"}, {"sha": "b33b85f1705f571defc259bafbc636bf87436fab", "filename": "src/test/ui/proc-macro/issue-75734-pp-paren.stdout", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/ea468f427016bbf89819199bb8420afc27e64a7f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/ea468f427016bbf89819199bb8420afc27e64a7f/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-75734-pp-paren.stdout?ref=ea468f427016bbf89819199bb8420afc27e64a7f", "patch": "@@ -0,0 +1,134 @@\n+PRINT-ATTR INPUT (DISPLAY): fn main() { & | _ : u8 | { } ; mul_2 ! (1 + 1) ; }\n+PRINT-ATTR INPUT (DEBUG): TokenStream [\n+    Ident {\n+        ident: \"fn\",\n+        span: $DIR/issue-75734-pp-paren.rs:23:1: 23:3 (#0),\n+    },\n+    Ident {\n+        ident: \"main\",\n+        span: $DIR/issue-75734-pp-paren.rs:23:4: 23:8 (#0),\n+    },\n+    Group {\n+        delimiter: Parenthesis,\n+        stream: TokenStream [],\n+        span: $DIR/issue-75734-pp-paren.rs:23:8: 23:10 (#0),\n+    },\n+    Group {\n+        delimiter: Brace,\n+        stream: TokenStream [\n+            Punct {\n+                ch: '&',\n+                spacing: Joint,\n+                span: $DIR/issue-75734-pp-paren.rs:24:5: 24:6 (#0),\n+            },\n+            Punct {\n+                ch: '|',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:24:6: 24:7 (#0),\n+            },\n+            Ident {\n+                ident: \"_\",\n+                span: $DIR/issue-75734-pp-paren.rs:24:7: 24:8 (#0),\n+            },\n+            Punct {\n+                ch: ':',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:24:8: 24:9 (#0),\n+            },\n+            Ident {\n+                ident: \"u8\",\n+                span: $DIR/issue-75734-pp-paren.rs:24:10: 24:12 (#0),\n+            },\n+            Punct {\n+                ch: '|',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:24:12: 24:13 (#0),\n+            },\n+            Group {\n+                delimiter: Brace,\n+                stream: TokenStream [],\n+                span: $DIR/issue-75734-pp-paren.rs:24:14: 24:16 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:24:16: 24:17 (#0),\n+            },\n+            Ident {\n+                ident: \"mul_2\",\n+                span: $DIR/issue-75734-pp-paren.rs:25:5: 25:10 (#0),\n+            },\n+            Punct {\n+                ch: '!',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:25:10: 25:11 (#0),\n+            },\n+            Group {\n+                delimiter: Parenthesis,\n+                stream: TokenStream [\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"1\",\n+                        suffix: None,\n+                        span: $DIR/issue-75734-pp-paren.rs:25:12: 25:13 (#0),\n+                    },\n+                    Punct {\n+                        ch: '+',\n+                        spacing: Alone,\n+                        span: $DIR/issue-75734-pp-paren.rs:25:14: 25:15 (#0),\n+                    },\n+                    Literal {\n+                        kind: Integer,\n+                        symbol: \"1\",\n+                        suffix: None,\n+                        span: $DIR/issue-75734-pp-paren.rs:25:16: 25:17 (#0),\n+                    },\n+                ],\n+                span: $DIR/issue-75734-pp-paren.rs:25:11: 25:18 (#0),\n+            },\n+            Punct {\n+                ch: ';',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:25:18: 25:19 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75734-pp-paren.rs:23:11: 26:2 (#0),\n+    },\n+]\n+PRINT-BANG INPUT (DISPLAY): 1 + 1 * 2\n+PRINT-BANG INPUT (DEBUG): TokenStream [\n+    Group {\n+        delimiter: None,\n+        stream: TokenStream [\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/issue-75734-pp-paren.rs:25:12: 25:13 (#0),\n+            },\n+            Punct {\n+                ch: '+',\n+                spacing: Alone,\n+                span: $DIR/issue-75734-pp-paren.rs:25:14: 25:15 (#0),\n+            },\n+            Literal {\n+                kind: Integer,\n+                symbol: \"1\",\n+                suffix: None,\n+                span: $DIR/issue-75734-pp-paren.rs:25:16: 25:17 (#0),\n+            },\n+        ],\n+        span: $DIR/issue-75734-pp-paren.rs:17:21: 17:25 (#7),\n+    },\n+    Punct {\n+        ch: '*',\n+        spacing: Alone,\n+        span: $DIR/issue-75734-pp-paren.rs:17:26: 17:27 (#7),\n+    },\n+    Literal {\n+        kind: Integer,\n+        symbol: \"2\",\n+        suffix: None,\n+        span: $DIR/issue-75734-pp-paren.rs:17:28: 17:29 (#7),\n+    },\n+]"}]}