{"sha": "48bc291a80085978987d13f75b70b82b69ec9b4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4YmMyOTFhODAwODU5Nzg5ODdkMTNmNzViNzBiODJiNjllYzliNGQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-12T16:10:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-09-15T19:28:12Z"}, "message": "silence various warnings in stdlib, no idea why they suddenly started", "tree": {"sha": "accd43390835cf71cd0b6e9e666b538be39d6580", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/accd43390835cf71cd0b6e9e666b538be39d6580"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48bc291a80085978987d13f75b70b82b69ec9b4d", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48bc291a80085978987d13f75b70b82b69ec9b4d", "html_url": "https://github.com/rust-lang/rust/commit/48bc291a80085978987d13f75b70b82b69ec9b4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48bc291a80085978987d13f75b70b82b69ec9b4d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b95624fd094300e26b5b367b0ae95c27e3b2f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b95624fd094300e26b5b367b0ae95c27e3b2f2", "html_url": "https://github.com/rust-lang/rust/commit/a2b95624fd094300e26b5b367b0ae95c27e3b2f2"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "0dc62e7363447d6a9202d4286a83ab27bf95eb37", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=48bc291a80085978987d13f75b70b82b69ec9b4d", "patch": "@@ -255,7 +255,6 @@ mod imp {\n #[cfg(not(jemalloc), unix)]\n mod imp {\n     use core::cmp;\n-    use core::mem;\n     use core::ptr;\n     use libc;\n     use libc_heap;"}, {"sha": "9177fa4a6b446958c7e418b44752ee6ef688b86c", "filename": "src/libsync/comm/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Flibsync%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Flibsync%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm%2Fmod.rs?ref=48bc291a80085978987d13f75b70b82b69ec9b4d", "patch": "@@ -379,7 +379,7 @@ pub struct Receiver<T> {\n     inner: UnsafeCell<Flavor<T>>,\n     receives: Cell<uint>,\n     // can't share in an arc\n-    marker: marker::NoSync,\n+    _marker: marker::NoSync,\n }\n \n /// An iterator over messages on a receiver, this iterator will block\n@@ -397,7 +397,7 @@ pub struct Sender<T> {\n     inner: UnsafeCell<Flavor<T>>,\n     sends: Cell<uint>,\n     // can't share in an arc\n-    marker: marker::NoSync,\n+    _marker: marker::NoSync,\n }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n@@ -406,7 +406,7 @@ pub struct Sender<T> {\n pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n     // can't share in an arc\n-    marker: marker::NoSync,\n+    _marker: marker::NoSync,\n }\n \n /// This enumeration is the list of the possible reasons that try_recv could not\n@@ -543,7 +543,7 @@ impl<T: Send> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n             sends: Cell::new(0),\n-            marker: marker::NoSync,\n+            _marker: marker::NoSync,\n         }\n     }\n \n@@ -719,7 +719,7 @@ impl<T: Send> Drop for Sender<T> {\n \n impl<T: Send> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n-        SyncSender { inner: inner, marker: marker::NoSync }\n+        SyncSender { inner: inner, _marker: marker::NoSync }\n     }\n \n     /// Sends a value on this synchronous channel.\n@@ -807,7 +807,7 @@ impl<T: Send> Drop for SyncSender<T> {\n \n impl<T: Send> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n-        Receiver { inner: UnsafeCell::new(inner), receives: Cell::new(0), marker: marker::NoSync }\n+        Receiver { inner: UnsafeCell::new(inner), receives: Cell::new(0), _marker: marker::NoSync }\n     }\n \n     /// Blocks waiting for a value on this receiver"}, {"sha": "521a7d0bd73d7ae9a4aa94f46b90966804807a10", "filename": "src/libsync/deque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Flibsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48bc291a80085978987d13f75b70b82b69ec9b4d/src%2Flibsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fdeque.rs?ref=48bc291a80085978987d13f75b70b82b69ec9b4d", "patch": "@@ -87,15 +87,15 @@ struct Deque<T> {\n /// There may only be one worker per deque.\n pub struct Worker<T> {\n     deque: Arc<Deque<T>>,\n-    noshare: marker::NoSync,\n+    _noshare: marker::NoSync,\n }\n \n /// The stealing half of the work-stealing deque. Stealers have access to the\n /// opposite end of the deque from the worker, and they only have access to the\n /// `steal` method.\n pub struct Stealer<T> {\n     deque: Arc<Deque<T>>,\n-    noshare: marker::NoSync,\n+    _noshare: marker::NoSync,\n }\n \n /// When stealing some data, this is an enumeration of the possible outcomes.\n@@ -153,8 +153,8 @@ impl<T: Send> BufferPool<T> {\n     pub fn deque(&self) -> (Worker<T>, Stealer<T>) {\n         let a = Arc::new(Deque::new(self.clone()));\n         let b = a.clone();\n-        (Worker { deque: a, noshare: marker::NoSync },\n-         Stealer { deque: b, noshare: marker::NoSync })\n+        (Worker { deque: a, _noshare: marker::NoSync },\n+         Stealer { deque: b, _noshare: marker::NoSync })\n     }\n \n     fn alloc(&mut self, bits: uint) -> Box<Buffer<T>> {\n@@ -217,7 +217,7 @@ impl<T: Send> Stealer<T> {\n \n impl<T: Send> Clone for Stealer<T> {\n     fn clone(&self) -> Stealer<T> {\n-        Stealer { deque: self.deque.clone(), noshare: marker::NoSync }\n+        Stealer { deque: self.deque.clone(), _noshare: marker::NoSync }\n     }\n }\n "}]}