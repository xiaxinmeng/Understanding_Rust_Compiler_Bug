{"sha": "4c8b6a20a99d3104100492e8c688d41e51aee3da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjOGI2YTIwYTk5ZDMxMDQxMDA0OTJlOGM2ODhkNDFlNTFhZWUzZGE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-07-22T16:01:47Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-13T09:26:33Z"}, "message": "Filter non-const impls when we expect a const one", "tree": {"sha": "18ac0db7f629291dd80f6cdf32f56830e579ffb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ac0db7f629291dd80f6cdf32f56830e579ffb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c8b6a20a99d3104100492e8c688d41e51aee3da", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEWOskACgkQAn35M4hi\nrd1fIA//cNgxEWGH5kkW/ISKqVND9vZgczoPt8bX8SvnnvbeJ2YK91K7ioIbMEPM\nE6LjO8XOmgNK/uTUgxJ/8IxAoU1dC7Z1I62CJ8TyAWt6xZKN+JqTrWg8jwewnsnk\nKu6ktndsuNkA2rJp0lQFzn2yYLMd9PA9zjg6fbkHqBesNAOgnkC2ht9rrV33e0dU\nuTnsYAsIvGEmZmHn7P7F3jxbcIkJaSo6dDfE6kgRath8AT5IhUw8fJfGx1wJ7qnL\ntVyTzDrQkOpVo6I3SwpO63YA1xGeM0MN484YYjMW7w39qomORy+CGZhtVoVclF9y\nQ6yOT5aLOz8LXcWv+zSHrZMHR9IlzQZlNnbq31rc3Gx86UcU5wJmqnRkiBJUeLPV\neaeAMnBVplplP9sN27Mjh69X3ez6Hrp4he0THFU5SzFculpfeneKoFP/rT9rlnLp\nUDwYKy+M8rnO0Rt+9LTxF3LXcM9RUrSofzW0DwQcoitNMZ+huGzBC8vkDF11z0nV\net22VYbVdYQ2m2pfY9jzfb23qLGFLwSk3UU+5GyW9c71yonab8OuI5NMuYBk3JTn\nBg+CyS+lQY53cTXyKu9kXlEMn8LNTkF+5ty8yKtW7cYihGMoRW/9mhCtN4DwQot1\nt/JG1dHSUU2b5UdYBgcqhS69G6VxaGCixZfWkQTKpaAtuSRsFaU=\n=UtHJ\n-----END PGP SIGNATURE-----", "payload": "tree 18ac0db7f629291dd80f6cdf32f56830e579ffb5\nparent 32390a0df639dde480f11fb55f37ed39e2a62c5c\nauthor Deadbeef <ent3rm4n@gmail.com> 1626969707 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1628846793 +0000\n\nFilter non-const impls when we expect a const one\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8b6a20a99d3104100492e8c688d41e51aee3da", "html_url": "https://github.com/rust-lang/rust/commit/4c8b6a20a99d3104100492e8c688d41e51aee3da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c8b6a20a99d3104100492e8c688d41e51aee3da/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32390a0df639dde480f11fb55f37ed39e2a62c5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32390a0df639dde480f11fb55f37ed39e2a62c5c", "html_url": "https://github.com/rust-lang/rust/commit/32390a0df639dde480f11fb55f37ed39e2a62c5c"}], "stats": {"total": 29, "additions": 23, "deletions": 6}, "files": [{"sha": "4312cc9468242312777dadb93e15be2030301f26", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c8b6a20a99d3104100492e8c688d41e51aee3da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8b6a20a99d3104100492e8c688d41e51aee3da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=4c8b6a20a99d3104100492e8c688d41e51aee3da", "patch": "@@ -144,7 +144,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // Instead, we select the right impl now but report \"`Bar` does\n         // not implement `Clone`\".\n         if candidates.len() == 1 {\n-            return self.filter_negative_and_reservation_impls(candidates.pop().unwrap());\n+            return self.filter_impls(candidates.pop().unwrap(), stack.obligation);\n         }\n \n         // Winnow, but record the exact outcome of evaluation, which\n@@ -217,7 +217,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         // Just one candidate left.\n-        self.filter_negative_and_reservation_impls(candidates.pop().unwrap().candidate)\n+        self.filter_impls(candidates.pop().unwrap().candidate, stack.obligation)\n     }\n \n     pub(super) fn assemble_candidates<'o>("}, {"sha": "f334452a79126486936e2f5181896cfd1eb03141", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4c8b6a20a99d3104100492e8c688d41e51aee3da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c8b6a20a99d3104100492e8c688d41e51aee3da/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=4c8b6a20a99d3104100492e8c688d41e51aee3da", "patch": "@@ -1015,13 +1015,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         (result, dep_node)\n     }\n \n-    // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n-    fn filter_negative_and_reservation_impls(\n+    fn filter_impls(\n         &mut self,\n         candidate: SelectionCandidate<'tcx>,\n+        obligation: &TraitObligation<'tcx>,\n     ) -> SelectionResult<'tcx, SelectionCandidate<'tcx>> {\n+        let tcx = self.tcx();\n+        // Respect const trait obligations\n+        if let hir::Constness::Const = obligation.predicate.skip_binder().constness {\n+            match candidate {\n+                // const impl\n+                ImplCandidate(def_id) if tcx.impl_constness(def_id) == hir::Constness::Const => {}\n+                // const param\n+                ParamCandidate(ty::ConstnessAnd { constness: hir::Constness::Const, .. }) => {}\n+                // auto trait impl\n+                AutoImplCandidate(..) => {}\n+                // FIXME check if this is right, but this would allow Sized impls\n+                BuiltinCandidate { .. } => {}\n+                _ => { // reject all other types of candidates\n+                    return Err(Unimplemented)\n+                }\n+            }\n+        }\n+        // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n-            let tcx = self.tcx();\n             match tcx.impl_polarity(def_id) {\n                 ty::ImplPolarity::Negative if !self.allow_negative_impls => {\n                     return Err(Unimplemented);\n@@ -1035,7 +1052,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let value = attr.and_then(|a| a.value_str());\n                         if let Some(value) = value {\n                             debug!(\n-                                \"filter_negative_and_reservation_impls: \\\n+                                \"filter_impls: \\\n                                  reservation impl ambiguity on {:?}\",\n                                 def_id\n                             );"}]}