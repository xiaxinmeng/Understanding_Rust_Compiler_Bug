{"sha": "b8441ca8a62b1ee04cf9f101c9fa91a320705479", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NDQxY2E4YTYyYjFlZTA0Y2Y5ZjEwMWM5ZmE5MWEzMjA3MDU0Nzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-23T01:36:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-04-23T01:36:50Z"}, "message": "auto merge of #6007 : pcwalton/rust/use-mod, r=brson\n\nr? @brson", "tree": {"sha": "3ec2487e497c87b3ac7f46d83de5e166694debe5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec2487e497c87b3ac7f46d83de5e166694debe5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8441ca8a62b1ee04cf9f101c9fa91a320705479", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8441ca8a62b1ee04cf9f101c9fa91a320705479", "html_url": "https://github.com/rust-lang/rust/commit/b8441ca8a62b1ee04cf9f101c9fa91a320705479", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8441ca8a62b1ee04cf9f101c9fa91a320705479/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "773f7e75603a0bb99682a761d5b77577bb876c3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/773f7e75603a0bb99682a761d5b77577bb876c3c", "html_url": "https://github.com/rust-lang/rust/commit/773f7e75603a0bb99682a761d5b77577bb876c3c"}, {"sha": "25129ee81c74f41b44bc770bd4fbdf483715a860", "url": "https://api.github.com/repos/rust-lang/rust/commits/25129ee81c74f41b44bc770bd4fbdf483715a860", "html_url": "https://github.com/rust-lang/rust/commit/25129ee81c74f41b44bc770bd4fbdf483715a860"}], "stats": {"total": 68, "additions": 15, "deletions": 53}, "files": [{"sha": "fdef3f6764d3b4dab9587f4ce077863970458bae", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -274,7 +274,6 @@ fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n         ast::view_item_use(\n             ~[@nospan(ast::view_path_simple(id_std,\n                                             path_node(~[id_std]),\n-                                            ast::type_value_ns,\n                                             cx.sess.next_node_id()))])\n     } else {\n         ast::view_item_extern_mod(id_std, ~[@mi],"}, {"sha": "83db3a408eaf88290221bbf06c1087fb4d52026d", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -1413,7 +1413,7 @@ pub impl Resolver {\n \n                     let mut module_path = ~[];\n                     match view_path.node {\n-                        view_path_simple(_, full_path, _, _) => {\n+                        view_path_simple(_, full_path, _) => {\n                             let path_len = full_path.idents.len();\n                             assert!(path_len != 0);\n \n@@ -1435,7 +1435,7 @@ pub impl Resolver {\n                     // Build up the import directives.\n                     let module_ = self.get_module_from_parent(parent);\n                     match view_path.node {\n-                        view_path_simple(binding, full_path, _, _) => {\n+                        view_path_simple(binding, full_path, _) => {\n                             let source_ident = *full_path.idents.last();\n                             let subclass = @SingleImport(binding,\n                                                          source_ident);"}, {"sha": "4137b3b8aa1fbf4939c3f6147e55f0f56aa14460", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -1100,11 +1100,6 @@ pub struct path_list_ident_ {\n \n pub type path_list_ident = spanned<path_list_ident_>;\n \n-#[auto_encode]\n-#[auto_decode]\n-#[deriving(Eq)]\n-pub enum namespace { module_ns, type_value_ns }\n-\n pub type view_path = spanned<view_path_>;\n \n #[auto_encode]\n@@ -1117,7 +1112,7 @@ pub enum view_path_ {\n     // or just\n     //\n     // foo::bar::baz  (with 'baz =' implicitly on the left)\n-    view_path_simple(ident, @Path, namespace, node_id),\n+    view_path_simple(ident, @Path, node_id),\n \n     // foo::bar::*\n     view_path_glob(@Path, node_id),"}, {"sha": "4ae140a265e534b1a15b278f317b468b8498909b", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -413,7 +413,7 @@ pub fn id_visitor(vfn: @fn(node_id)) -> visit::vt<()> {\n               view_item_use(ref vps) => {\n                   for vps.each |vp| {\n                       match vp.node {\n-                          view_path_simple(_, _, _, id) => vfn(id),\n+                          view_path_simple(_, _, id) => vfn(id),\n                           view_path_glob(_, id) => vfn(id),\n                           view_path_list(_, _, id) => vfn(id)\n                       }\n@@ -551,7 +551,8 @@ pub fn walk_pat(pat: @pat, it: &fn(@pat)) {\n \n pub fn view_path_id(p: @view_path) -> node_id {\n     match p.node {\n-      view_path_simple(_, _, _, id) | view_path_glob(_, id) |\n+      view_path_simple(_, _, id) |\n+      view_path_glob(_, id) |\n       view_path_list(_, _, id) => id\n     }\n }"}, {"sha": "9434172c1f4c6396643a41fa811c0449b89e68f8", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -374,7 +374,6 @@ impl ext_ctxt_ast_builder for @ext_ctxt {\n                         ],\n                         codemap::dummy_sp()\n                     ),\n-                    ast::type_value_ns,\n                     self.next_id()\n                 ),\n                 span: codemap::dummy_sp()"}, {"sha": "d5cb1f5ebac9ed56ccf463dc2ffae2b7d16de7fb", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -40,7 +40,7 @@ use ast::{item_mac, item_mod, item_struct, item_trait, item_ty, lit, lit_};\n use ast::{lit_bool, lit_float, lit_float_unsuffixed, lit_int};\n use ast::{lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const};\n use ast::{m_imm, m_mutbl, mac_, mac_invoc_tt, matcher, match_nonterminal};\n-use ast::{match_seq, match_tok, method, mode, module_ns, mt, mul, mutability};\n+use ast::{match_seq, match_tok, method, mode, mt, mul, mutability};\n use ast::{named_field, neg, node_id, noreturn, not, pat, pat_box, pat_enum};\n use ast::{pat_ident, pat_lit, pat_range, pat_region, pat_struct};\n use ast::{pat_tup, pat_uniq, pat_wild, private};\n@@ -54,7 +54,7 @@ use ast::{tt_nonterminal, tuple_variant_kind, Ty, ty_, ty_bot, ty_box};\n use ast::{ty_field, ty_fixed_length_vec, ty_closure, ty_bare_fn};\n use ast::{ty_infer, ty_method};\n use ast::{ty_nil, TyParam, TyParamBound, ty_path, ty_ptr, ty_rptr};\n-use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, type_value_ns, uniq};\n+use ast::{ty_tup, ty_u32, ty_uniq, ty_vec, uniq};\n use ast::{unnamed_field, unsafe_blk, unsafe_fn, view_item};\n use ast::{view_item_, view_item_extern_mod, view_item_use};\n use ast::{view_path, view_path_glob, view_path_list, view_path_simple};\n@@ -4224,13 +4224,6 @@ pub impl Parser {\n     fn parse_view_path(&self) -> @view_path {\n         let lo = self.span.lo;\n \n-        let namespace;\n-        if self.eat_keyword(&~\"mod\") {\n-            namespace = module_ns;\n-        } else {\n-            namespace = type_value_ns;\n-        }\n-\n         let first_ident = self.parse_ident();\n         let mut path = ~[first_ident];\n         debug!(\"parsed view_path: %s\", *self.id_to_str(first_ident));\n@@ -4250,8 +4243,9 @@ pub impl Parser {\n                                     rp: None,\n                                     types: ~[] };\n             return @spanned(lo, self.span.hi,\n-                         view_path_simple(first_ident, path, namespace,\n-                                          self.get_id()));\n+                            view_path_simple(first_ident,\n+                                             path,\n+                                             self.get_id()));\n           }\n \n           token::MOD_SEP => {\n@@ -4306,8 +4300,9 @@ pub impl Parser {\n                                 idents: path,\n                                 rp: None,\n                                 types: ~[] };\n-        return @spanned(lo, self.span.hi,\n-                     view_path_simple(last, path, namespace, self.get_id()));\n+        return @spanned(lo,\n+                        self.span.hi,\n+                        view_path_simple(last, path, self.get_id()));\n     }\n \n     // matches view_paths = view_path | view_path , view_paths"}, {"sha": "ab4a8c735887ec1f9c030288842a97cade3bc559", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8441ca8a62b1ee04cf9f101c9fa91a320705479/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=b8441ca8a62b1ee04cf9f101c9fa91a320705479", "patch": "@@ -1816,10 +1816,7 @@ pub fn print_meta_item(s: @ps, item: @ast::meta_item) {\n \n pub fn print_view_path(s: @ps, vp: @ast::view_path) {\n     match vp.node {\n-      ast::view_path_simple(ident, path, namespace, _) => {\n-        if namespace == ast::module_ns {\n-            word_space(s, ~\"mod\");\n-        }\n+      ast::view_path_simple(ident, path, _) => {\n         if path.idents[vec::len(path.idents)-1u] != ident {\n             print_ident(s, ident);\n             space(s.s);"}, {"sha": "1b1402e0a0e7cb886fe091486f4a6627463fc5da", "filename": "src/test/run-pass/use-mod.rs", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/773f7e75603a0bb99682a761d5b77577bb876c3c/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/773f7e75603a0bb99682a761d5b77577bb876c3c/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=773f7e75603a0bb99682a761d5b77577bb876c3c", "patch": "@@ -1,24 +0,0 @@\n-// xfail-fast\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use mod a::b;\n-\n-mod a {\n-    pub mod b {\n-        pub fn f() {}\n-    }\n-}\n-\n-pub fn main() {\n-    b::f();\n-}\n-"}]}