{"sha": "d90830221e76ca41ac336a32f308f58e45ca4ae8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MDgzMDIyMWU3NmNhNDFhYzMzNmEzMmYzMDhmNThlNDVjYTRhZTg=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2014-03-05T04:41:21Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2014-03-06T05:23:33Z"}, "message": "Fix ICE on statics with fancy nullable enums.\n\nCloses #8506.\n\nThe `trans::adt` code for statics uses fields with `C_undef` values to\ninsert alignment padding (because LLVM's own alignment padding isn't\nalways sufficient for aggregate constants), and assumes that all fields\nin the actual Rust value are represented by non-undef LLVM values, to\ndistinguish them from that padding.\n\nBut for nullable pointer enums, if non-null variant has fields other\nthan the pointer used as the discriminant, they would be set to undef in\nthe null case, to reflect that they're never accessed.\n\nTo avoid the obvious conflict between these two items, the latter undefs\nwere wrapped in unary LLVM structs to distinguish them from the former\nundefs.  Except this doesn't actually work -- LLVM, not unreasonably,\ntreats the \"wrapped undef\" as a regular undef.\n\nSo this commit just sets all fields to null in the null pointer case of\na nullable pointer enum static, because the other fields don't really\nneed to be undef in the first place.", "tree": {"sha": "f0f73df2afb666306e3c90913db65fc2071334f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0f73df2afb666306e3c90913db65fc2071334f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d90830221e76ca41ac336a32f308f58e45ca4ae8", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d90830221e76ca41ac336a32f308f58e45ca4ae8", "html_url": "https://github.com/rust-lang/rust/commit/d90830221e76ca41ac336a32f308f58e45ca4ae8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d90830221e76ca41ac336a32f308f58e45ca4ae8/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67c5d793add67878e6e472258748ac13e0f90366", "url": "https://api.github.com/repos/rust-lang/rust/commits/67c5d793add67878e6e472258748ac13e0f90366", "html_url": "https://github.com/rust-lang/rust/commit/67c5d793add67878e6e472258748ac13e0f90366"}], "stats": {"total": 41, "additions": 28, "deletions": 13}, "files": [{"sha": "ae0025ffa30841a66e477be380e19667cf6c6a57", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d90830221e76ca41ac336a32f308f58e45ca4ae8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90830221e76ca41ac336a32f308f58e45ca4ae8/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=d90830221e76ca41ac336a32f308f58e45ca4ae8", "patch": "@@ -749,14 +749,15 @@ pub fn trans_const(ccx: &CrateContext, r: &Repr, discr: Disr,\n             let contents = build_const_struct(ccx, st, vals);\n             C_struct(contents, st.packed)\n         }\n-        NullablePointer{ nonnull: ref nonnull, nndiscr, ptrfield, .. } => {\n+        NullablePointer{ nonnull: ref nonnull, nndiscr, .. } => {\n             if discr == nndiscr {\n                 C_struct(build_const_struct(ccx, nonnull, vals), false)\n             } else {\n-                let vals = nonnull.fields.iter().enumerate().map(|(i, &ty)| {\n-                    let llty = type_of::sizing_type_of(ccx, ty);\n-                    if i == ptrfield { C_null(llty) } else { C_undef(llty) }\n-                }).collect::<~[ValueRef]>();\n+                let vals = nonnull.fields.map(|&ty| {\n+                    // Always use null even if it's not the `ptrfield`th\n+                    // field; see #8506.\n+                    C_null(type_of::sizing_type_of(ccx, ty))\n+                });\n                 C_struct(build_const_struct(ccx, nonnull, vals), false)\n             }\n         }\n@@ -791,14 +792,8 @@ fn build_const_struct(ccx: &CrateContext, st: &Struct, vals: &[ValueRef])\n             cfields.push(padding(target_offset - offset));\n             offset = target_offset;\n         }\n-        let val = if is_undef(vals[i]) {\n-            let wrapped = C_struct([vals[i]], false);\n-            assert!(!is_undef(wrapped));\n-            wrapped\n-        } else {\n-            vals[i]\n-        };\n-        cfields.push(val);\n+        assert!(!is_undef(vals[i]));\n+        cfields.push(vals[i]);\n         offset += machine::llsize_of_alloc(ccx, llty) as u64\n     }\n "}, {"sha": "b5e9141deeff7dddc40667fe0e978584ef95510a", "filename": "src/test/run-pass/issue-8506.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d90830221e76ca41ac336a32f308f58e45ca4ae8/src%2Ftest%2Frun-pass%2Fissue-8506.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d90830221e76ca41ac336a32f308f58e45ca4ae8/src%2Ftest%2Frun-pass%2Fissue-8506.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8506.rs?ref=d90830221e76ca41ac336a32f308f58e45ca4ae8", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[allow(dead_code)];\n+\n+enum Either {\n+    One,\n+    Other(~str,~str)\n+}\n+\n+static one : Either = One;\n+\n+pub fn main () { }"}]}