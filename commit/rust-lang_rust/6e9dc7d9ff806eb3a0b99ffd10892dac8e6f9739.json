{"sha": "6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlOWRjN2Q5ZmY4MDZlYjNhMGI5OWZmZDEwODkyZGFjOGU2Zjk3Mzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-24T07:39:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-28T07:58:20Z"}, "message": "Add str::[r]split_once\n\nThis is useful for quick&dirty parsing of key: value config pairs", "tree": {"sha": "1ea0e26a8e30fff8e15a3f2d8782ba2e75745ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ea0e26a8e30fff8e15a3f2d8782ba2e75745ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "html_url": "https://github.com/rust-lang/rust/commit/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1454bbd4fdac9b7272b93fe82860613dccc0afad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1454bbd4fdac9b7272b93fe82860613dccc0afad", "html_url": "https://github.com/rust-lang/rust/commit/1454bbd4fdac9b7272b93fe82860613dccc0afad"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "fa20a46671591f4aef2c91dc1735ffc533d5a058", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "patch": "@@ -6,6 +6,7 @@\n #![feature(map_first_last)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n+#![feature(str_split_once)]\n #![feature(trusted_len)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]"}, {"sha": "b20cf076aca3cac5dacea42cfc143ea5525b93fd", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "patch": "@@ -1318,6 +1318,30 @@ fn test_rsplitn() {\n     assert_eq!(split, [\"mb\\n\", \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\nLittle l\"]);\n }\n \n+#[test]\n+fn test_split_once() {\n+    assert_eq!(\"\".split_once(\"->\"), None);\n+    assert_eq!(\"-\".split_once(\"->\"), None);\n+    assert_eq!(\"->\".split_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".split_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".split_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".split_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".split_once(\"->\"), Some((\"a\", \"b->c\")));\n+    assert_eq!(\"---\".split_once(\"--\"), Some((\"\", \"-\")));\n+}\n+\n+#[test]\n+fn test_rsplit_once() {\n+    assert_eq!(\"\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"-\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"->\".rsplit_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".rsplit_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".rsplit_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".rsplit_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".rsplit_once(\"->\"), Some((\"a->b\", \"c\")));\n+    assert_eq!(\"---\".rsplit_once(\"--\"), Some((\"-\", \"\")));\n+}\n+\n #[test]\n fn test_split_whitespace() {\n     let data = \"\\n \\tM\u00e4ry   h\u00e4d\\t\u00e4  little l\u00e4mb\\nLittle l\u00e4mb\\n\";"}, {"sha": "9d7e38d0e183100b6cd79dbd775dfd39f4dc5852", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=6e9dc7d9ff806eb3a0b99ffd10892dac8e6f9739", "patch": "@@ -3610,6 +3610,47 @@ impl str {\n         RSplitN(self.splitn(n, pat).0)\n     }\n \n+    /// Splits the string on the first occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".split_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {\n+        let (start, end) = delimiter.into_searcher(self).next_match()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n+    /// Splits the string on the last occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".rsplit_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn rsplit_once<'a, P>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n+    {\n+        let (start, end) = delimiter.into_searcher(self).next_match_back()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///"}]}