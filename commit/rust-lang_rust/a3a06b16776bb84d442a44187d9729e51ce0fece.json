{"sha": "a3a06b16776bb84d442a44187d9729e51ce0fece", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzYTA2YjE2Nzc2YmI4NGQ0NDJhNDQxODdkOTcyOWU1MWNlMGZlY2U=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-14T10:23:56Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-08-14T10:25:16Z"}, "message": "remove the \"defaulted unit\" type bit during writeback\n\nThe defaulted unit bit is only relevant for the surrounding inference\ncontext, and can cause trouble, including spurious lints and ICEs,\noutside of it.\n\nFixes #43853.", "tree": {"sha": "7bfc6daf2f143ed1e8bef3c9e5c40b25fccb0dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bfc6daf2f143ed1e8bef3c9e5c40b25fccb0dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3a06b16776bb84d442a44187d9729e51ce0fece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a06b16776bb84d442a44187d9729e51ce0fece", "html_url": "https://github.com/rust-lang/rust/commit/a3a06b16776bb84d442a44187d9729e51ce0fece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3a06b16776bb84d442a44187d9729e51ce0fece/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbce60d6f131e5b3789f01417dedb05e4489898", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbce60d6f131e5b3789f01417dedb05e4489898", "html_url": "https://github.com/rust-lang/rust/commit/adbce60d6f131e5b3789f01417dedb05e4489898"}], "stats": {"total": 43, "additions": 39, "deletions": 4}, "files": [{"sha": "6a1f8f1d069270ae341a25fab29440b8cc12fbe4", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=a3a06b16776bb84d442a44187d9729e51ce0fece", "patch": "@@ -111,8 +111,10 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n     }\n \n     fn fold_ty(&mut self, t: Ty<'tcx>) -> Ty<'tcx> {\n-        if !t.needs_infer() {\n+        if !t.needs_infer() && !ty::keep_local(&t) {\n             t // micro-optimize -- if there is nothing in this type that this fold affects...\n+                // ^ we need to have the `keep_local` check to un-default\n+                // defaulted tuples.\n         } else {\n             let t = self.infcx.shallow_resolve(t);\n             match t.sty {\n@@ -131,6 +133,12 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for FullTypeResolver<'a, 'gcx, 'tcx>\n                 ty::TyInfer(_) => {\n                     bug!(\"Unexpected type in full type resolver: {:?}\", t);\n                 }\n+                ty::TyTuple(tys, true) => {\n+                    // Un-default defaulted tuples - we are going to a\n+                    // different infcx, and the default will just cause\n+                    // pollution.\n+                    self.tcx().intern_tup(tys, false)\n+                }\n                 _ => {\n                     t.super_fold_with(self)\n                 }"}, {"sha": "003af204f1ed73f67a53bf4c7030a12906216a4d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a3a06b16776bb84d442a44187d9729e51ce0fece", "patch": "@@ -1195,7 +1195,7 @@ macro_rules! direct_interners {\n     }\n }\n \n-fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n+pub fn keep_local<'tcx, T: ty::TypeFoldable<'tcx>>(x: &T) -> bool {\n     x.has_type_flags(ty::TypeFlags::KEEP_IN_LOCAL_TCX)\n }\n "}, {"sha": "31ed61a919e7c8dabe485802ef042fd7be9d0a1a", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=a3a06b16776bb84d442a44187d9729e51ce0fece", "patch": "@@ -151,7 +151,10 @@ impl FlagComputation {\n                 self.add_ty(m.ty);\n             }\n \n-            &ty::TyTuple(ref ts, _) => {\n+            &ty::TyTuple(ref ts, is_default) => {\n+                if is_default {\n+                    self.add_flags(TypeFlags::KEEP_IN_LOCAL_TCX);\n+                }\n                 self.add_tys(&ts[..]);\n             }\n "}, {"sha": "b91eb3ec68ffa3ccd9fcf7128498a6a06a2e7b84", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a3a06b16776bb84d442a44187d9729e51ce0fece", "patch": "@@ -76,7 +76,7 @@ pub use self::sty::TypeVariants::*;\n pub use self::binding::BindingMode;\n pub use self::binding::BindingMode::*;\n \n-pub use self::context::{TyCtxt, GlobalArenas, tls};\n+pub use self::context::{TyCtxt, GlobalArenas, tls, keep_local};\n pub use self::context::{Lift, TypeckTables};\n \n pub use self::instance::{Instance, InstanceDef};"}, {"sha": "f55d584ea24fbc36fa6bd3225b8f69cec6ba8d2d", "filename": "src/test/run-pass/issue-43853.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Ftest%2Frun-pass%2Fissue-43853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3a06b16776bb84d442a44187d9729e51ce0fece/src%2Ftest%2Frun-pass%2Fissue-43853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-43853.rs?ref=a3a06b16776bb84d442a44187d9729e51ce0fece", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::panic;\n+\n+fn test() {\n+    wait(|| panic!());\n+}\n+\n+fn wait<T, F: FnOnce() -> T>(f: F) -> F::Output {\n+    From::from(f())\n+}\n+\n+fn main() {\n+    let result = panic::catch_unwind(move || test());\n+    assert!(result.is_err());\n+}"}]}