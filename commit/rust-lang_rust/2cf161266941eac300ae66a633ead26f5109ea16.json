{"sha": "2cf161266941eac300ae66a633ead26f5109ea16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZjE2MTI2Njk0MWVhYzMwMGFlNjZhNjMzZWFkMjZmNTEwOWVhMTY=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-02-05T15:32:34Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-02-05T16:19:31Z"}, "message": "Add `find_or_create_impl_block` to assist utils", "tree": {"sha": "f7909b18efed14e2a6bd5f410b50310a2167b72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7909b18efed14e2a6bd5f410b50310a2167b72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cf161266941eac300ae66a633ead26f5109ea16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf161266941eac300ae66a633ead26f5109ea16", "html_url": "https://github.com/rust-lang/rust/commit/2cf161266941eac300ae66a633ead26f5109ea16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cf161266941eac300ae66a633ead26f5109ea16/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7bee70a10d01f0fdebfc12c70aca4f765826b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7bee70a10d01f0fdebfc12c70aca4f765826b3", "html_url": "https://github.com/rust-lang/rust/commit/ae7bee70a10d01f0fdebfc12c70aca4f765826b3"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "2345a61c1c0d82af213179127f45f8b61f00b9a8", "filename": "crates/assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=2cf161266941eac300ae66a633ead26f5109ea16", "patch": "@@ -1,9 +1,12 @@\n use stdx::{format_to, to_lower_snake_case};\n+use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n-use syntax::{ast::VisibilityOwner, T};\n use test_utils::mark;\n \n-use crate::{utils::find_struct_impl, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_enum_match_method\n //\n@@ -61,7 +64,6 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             }\n \n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-\n             format_to!(\n                 buf,\n                 \"    {}fn is_{}(&self) -> bool {{\n@@ -73,17 +75,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| {\n-                    buf.push('\\n');\n-                    let start = impl_def\n-                        .syntax()\n-                        .descendants_with_tokens()\n-                        .find(|t| t.kind() == T!['{'])?\n-                        .text_range()\n-                        .end();\n-\n-                    Some(start)\n-                })\n+                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&parent_enum, &buf);\n                     parent_enum.syntax().text_range().end()"}, {"sha": "307f2e228c92252564344bf171ad55ec6c1192bf", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=2cf161266941eac300ae66a633ead26f5109ea16", "patch": "@@ -2,10 +2,13 @@ use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n-    SmolStr, T,\n+    SmolStr,\n };\n \n-use crate::{utils::find_struct_impl, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_new\n //\n@@ -58,17 +61,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n         let start_offset = impl_def\n-            .and_then(|impl_def| {\n-                buf.push('\\n');\n-                let start = impl_def\n-                    .syntax()\n-                    .descendants_with_tokens()\n-                    .find(|t| t.kind() == T!['{'])?\n-                    .text_range()\n-                    .end();\n-\n-                Some(start)\n-            })\n+            .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&strukt, &buf);\n                 strukt.syntax().text_range().end()\n@@ -93,7 +86,7 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n     if let Some(type_params) = &type_params {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }\n-    buf.push_str(\" \");\n+    buf.push(' ');\n     buf.push_str(strukt.name().unwrap().text());\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params"}, {"sha": "8045aac40cd44ccf57491c888b9e73dbfbe93b18", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cf161266941eac300ae66a633ead26f5109ea16/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=2cf161266941eac300ae66a633ead26f5109ea16", "patch": "@@ -274,10 +274,11 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n // Uses a syntax-driven approach to find any impl blocks for the struct that\n // exist within the module/file\n //\n-// Returns `None` if we've found an existing `new` fn\n+// Returns `None` if we've found an existing fn\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n+// FIXME: this partially overlaps with `find_impl_block`\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext,\n     strukt: &ast::AdtDef,\n@@ -338,3 +339,18 @@ fn has_fn(imp: &ast::Impl, rhs_name: &str) -> bool {\n \n     false\n }\n+\n+/// Find the start of the `impl` block for the given `ast::Impl`.\n+//\n+// FIXME: add a way to find the end of the `impl` block.\n+// FIXME: this partially overlaps with `find_struct_impl`\n+pub(crate) fn find_impl_block(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {\n+    buf.push('\\n');\n+    let start = impl_def\n+        .syntax()\n+        .descendants_with_tokens()\n+        .find(|t| t.kind() == T!['{'])?\n+        .text_range()\n+        .end();\n+    Some(start)\n+}"}]}