{"sha": "efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmYjliNzQ3MTg1ZjhjYjE1YTBmNWI3ZGViOGRiNjMzZjBhNDIwYzM=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T21:09:38Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-13T21:29:08Z"}, "message": "librustc: Fix explicit self for objects in more cases. r=nmatsakis", "tree": {"sha": "ecd6bfe03fe29f9150b560e60594d247c5e9ab27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd6bfe03fe29f9150b560e60594d247c5e9ab27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "html_url": "https://github.com/rust-lang/rust/commit/efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2e4c37ce01a98c768a986b0b87a6e93ef72699", "html_url": "https://github.com/rust-lang/rust/commit/4c2e4c37ce01a98c768a986b0b87a6e93ef72699"}], "stats": {"total": 261, "additions": 212, "deletions": 49}, "files": [{"sha": "1dd3ae0ef0e1b3185f0537c004af1bc45196b06e", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -550,8 +550,16 @@ fn trans_trait_callee(bcx: block,\n \n     let _icx = bcx.insn_ctxt(\"impl::trans_trait_callee\");\n     let mut bcx = bcx;\n-    let self_datum = unpack_datum!(bcx, expr::trans_to_datum(bcx, self_expr));\n+    let self_datum = unpack_datum!(bcx,\n+        expr::trans_to_datum(bcx, self_expr));\n     let llpair = self_datum.to_ref_llval(bcx);\n+\n+    let llpair = match explicit_self {\n+        ast::sty_region(_) => Load(bcx, llpair),\n+        ast::sty_static | ast::sty_by_ref | ast::sty_value |\n+        ast::sty_box(_) | ast::sty_uniq(_) => llpair\n+    };\n+\n     let callee_ty = node_id_type(bcx, callee_id);\n     trans_trait_callee_from_llval(bcx,\n                                   callee_ty,"}, {"sha": "aa3f5ad39c4157fe499e4b6661390bdfc3d1b6c6", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 41, "deletions": 46, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -153,12 +153,12 @@ struct Candidate {\n }\n \n /**\n- * Whether the self type should be transformed according to the form of\n- * explicit self provided by the method.\n+ * How the self type should be transformed according to the form of explicit\n+ * self provided by the method.\n  */\n enum TransformTypeFlag {\n-    DontTransformType,\n-    TransformType\n+    TransformTypeNormally,\n+    TransformTypeForObject,\n }\n \n impl LookupContext {\n@@ -327,7 +327,8 @@ impl LookupContext {\n         }\n     }\n \n-    fn push_inherent_candidates_from_param(&self, rcvr_ty: ty::t,\n+    fn push_inherent_candidates_from_param(&self,\n+                                           rcvr_ty: ty::t,\n                                            param_ty: param_ty) {\n         debug!(\"push_inherent_candidates_from_param(param_ty=%?)\",\n                param_ty);\n@@ -426,7 +427,7 @@ impl LookupContext {\n                         method.self_ty,\n                         rcvr_ty,\n                         move init_substs,\n-                        TransformType);\n+                        TransformTypeNormally);\n \n                 let cand = Candidate {\n                     rcvr_ty: rcvr_ty,\n@@ -488,7 +489,7 @@ impl LookupContext {\n             self.create_rcvr_ty_and_substs_for_method(method.self_ty,\n                                                       self_ty,\n                                                       move rcvr_substs,\n-                                                      DontTransformType);\n+                                                      TransformTypeForObject);\n \n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n@@ -519,7 +520,7 @@ impl LookupContext {\n                 method.self_ty,\n                 self_ty,\n                 move rcvr_substs,\n-                TransformType);\n+                TransformTypeNormally);\n \n         self.inherent_candidates.push(Candidate {\n             rcvr_ty: rcvr_ty,\n@@ -574,7 +575,7 @@ impl LookupContext {\n                 method.self_type,\n                 impl_ty,\n                 move impl_substs,\n-                TransformType);\n+                TransformTypeNormally);\n \n         candidates.push(Candidate {\n             rcvr_ty: impl_ty,\n@@ -610,7 +611,7 @@ impl LookupContext {\n                     provided_method_info.method_info.self_type,\n                     self_ty,\n                     dummy_substs,\n-                    TransformType);\n+                    TransformTypeNormally);\n \n             candidates.push(Candidate {\n                 rcvr_ty: impl_ty,\n@@ -658,18 +659,11 @@ impl LookupContext {\n             }\n         };\n \n-        let rcvr_ty;\n-        match transform_type {\n-            TransformType => {\n-                rcvr_ty = transform_self_type_for_method(self.tcx(),\n-                                                         rcvr_substs.self_r,\n-                                                         self_ty,\n-                                                         self_decl);\n-            }\n-            DontTransformType => {\n-                rcvr_ty = self_ty;\n-            }\n-        }\n+        let rcvr_ty = transform_self_type_for_method(self.tcx(),\n+                                                     rcvr_substs.self_r,\n+                                                     self_ty,\n+                                                     self_decl,\n+                                                     transform_type);\n \n         (rcvr_ty, rcvr_substs)\n     }\n@@ -686,6 +680,10 @@ impl LookupContext {\n         match self.search_for_method(self_ty) {\n             None => None,\n             Some(move mme) => {\n+                debug!(\"(searching for autoderef'd method) writing \\\n+                       adjustment (%u) to %d\",\n+                       autoderefs,\n+                       self.self_expr.id);\n                 self.fcx.write_autoderef_adjustment(\n                     self.self_expr.id, autoderefs);\n                 Some(mme)\n@@ -814,25 +812,12 @@ impl LookupContext {\n             match self.search_for_method(autoref_ty) {\n                 None => {}\n                 Some(move mme) => {\n-                    match mme.origin {\n-                        method_trait(*) => {\n-                            // Do not write adjustments; they make no sense\n-                            // here since the adjustments are to be performed\n-                            // on the self element of the object pair/triple,\n-                            // not the object itself.\n-                            //\n-                            // FIXME (#4088): This is wrong in the presence\n-                            // of autoderef.\n-                        }\n-                        _ => {\n-                            self.fcx.write_adjustment(\n-                                self.self_expr.id,\n-                                @{autoderefs: autoderefs,\n-                                  autoref: Some({kind: kind,\n-                                                 region: region,\n-                                                 mutbl: *mutbl})});\n-                        }\n-                    }\n+                    self.fcx.write_adjustment(\n+                        self.self_expr.id,\n+                        @{autoderefs: autoderefs,\n+                          autoref: Some({kind: kind,\n+                                         region: region,\n+                                         mutbl: *mutbl})});\n                     return Some(mme);\n                 }\n             }\n@@ -1162,9 +1147,9 @@ impl LookupContext {\n fn transform_self_type_for_method(tcx: ty::ctxt,\n                                   self_region: Option<ty::Region>,\n                                   impl_ty: ty::t,\n-                                  self_type: ast::self_ty_)\n-    -> ty::t\n-{\n+                                  self_type: ast::self_ty_,\n+                                  flag: TransformTypeFlag)\n+                               -> ty::t {\n     match self_type {\n       sty_static => {\n         tcx.sess.bug(~\"calling transform_self_type_for_method on \\\n@@ -1179,10 +1164,20 @@ fn transform_self_type_for_method(tcx: ty::ctxt,\n                 { ty: impl_ty, mutbl: mutability })\n       }\n       sty_box(mutability) => {\n-        mk_box(tcx, { ty: impl_ty, mutbl: mutability })\n+        match flag {\n+            TransformTypeNormally => {\n+                mk_box(tcx, { ty: impl_ty, mutbl: mutability })\n+            }\n+            TransformTypeForObject => impl_ty\n+        }\n       }\n       sty_uniq(mutability) => {\n-        mk_uniq(tcx, { ty: impl_ty, mutbl: mutability })\n+        match flag {\n+            TransformTypeNormally => {\n+                mk_uniq(tcx, { ty: impl_ty, mutbl: mutability })\n+            }\n+            TransformTypeForObject => impl_ty\n+        }\n       }\n     }\n }"}, {"sha": "68fad6f81d64fd1b0882c11c18d457de60430cc6", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -79,6 +79,7 @@ type parameter).\n use middle::ty::{TyVid, vid, FnTyBase, FnMeta, FnSig, VariantInfo_};\n use middle::typeck::astconv::{ast_conv, ast_path_to_ty};\n use middle::typeck::astconv::{ast_region_to_region, ast_ty_to_ty};\n+use middle::typeck::check::method::TransformTypeNormally;\n use middle::typeck::check::regionmanip::replace_bound_regions_in_fn_ty;\n use middle::typeck::check::vtable::{LocationInfo, VtableContext};\n use middle::typeck::infer::{resolve_type, force_tvar};\n@@ -318,8 +319,11 @@ fn check_fn(ccx: @crate_ctxt,\n         } else  {\n             let self_region = fcx.in_scope_regions.find(ty::br_self);\n             let ty = method::transform_self_type_for_method(\n-                fcx.tcx(), self_region,\n-                self_info.self_ty, self_info.explicit_self.node);\n+                fcx.tcx(),\n+                self_region,\n+                self_info.self_ty,\n+                self_info.explicit_self.node,\n+                TransformTypeNormally);\n             Some({self_ty: ty,.. *self_info})\n         }\n     };"}, {"sha": "52a880eb103b6ff9c162b45bb3d41b277003935e", "filename": "src/test/run-pass/explicit-self-objects-ext-1.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -0,0 +1,39 @@\n+pub trait Reader {\n+    // FIXME (#2004): Seekable really should be orthogonal.\n+\n+    /// Read up to len bytes (or EOF) and put them into bytes (which\n+    /// must be at least len bytes long). Return number of bytes read.\n+    // FIXME (#2982): This should probably return an error.\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint;\n+}\n+\n+pub trait ReaderUtil {\n+\n+    /// Read len bytes into a new vec.\n+    fn read_bytes(&self, len: uint);\n+}\n+\n+impl<T: Reader> T : ReaderUtil {\n+\n+    fn read_bytes(&self, len: uint) {\n+        let count = self.read(&[mut 0], len);\n+    }\n+\n+}\n+\n+struct S {\n+    x: int,\n+    y: int\n+}\n+\n+impl S: Reader {\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let x = S { x: 1, y: 2 };\n+    let x = x as @Reader;\n+    x.read_bytes(0);\n+}"}, {"sha": "52a880eb103b6ff9c162b45bb3d41b277003935e", "filename": "src/test/run-pass/explicit-self-objects-ext-2.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -0,0 +1,39 @@\n+pub trait Reader {\n+    // FIXME (#2004): Seekable really should be orthogonal.\n+\n+    /// Read up to len bytes (or EOF) and put them into bytes (which\n+    /// must be at least len bytes long). Return number of bytes read.\n+    // FIXME (#2982): This should probably return an error.\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint;\n+}\n+\n+pub trait ReaderUtil {\n+\n+    /// Read len bytes into a new vec.\n+    fn read_bytes(&self, len: uint);\n+}\n+\n+impl<T: Reader> T : ReaderUtil {\n+\n+    fn read_bytes(&self, len: uint) {\n+        let count = self.read(&[mut 0], len);\n+    }\n+\n+}\n+\n+struct S {\n+    x: int,\n+    y: int\n+}\n+\n+impl S: Reader {\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let x = S { x: 1, y: 2 };\n+    let x = x as @Reader;\n+    x.read_bytes(0);\n+}"}, {"sha": "521d5a757018875751360f8c82d57d9db76dbca5", "filename": "src/test/run-pass/explicit-self-objects-ext-3.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -0,0 +1,39 @@\n+pub trait Reader {\n+    // FIXME (#2004): Seekable really should be orthogonal.\n+\n+    /// Read up to len bytes (or EOF) and put them into bytes (which\n+    /// must be at least len bytes long). Return number of bytes read.\n+    // FIXME (#2982): This should probably return an error.\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint;\n+}\n+\n+pub trait ReaderUtil {\n+\n+    /// Read len bytes into a new vec.\n+    fn read_bytes(len: uint);\n+}\n+\n+impl<T: Reader> T : ReaderUtil {\n+\n+    fn read_bytes(len: uint) {\n+        let count = self.read(&[mut 0], len);\n+    }\n+\n+}\n+\n+struct S {\n+    x: int,\n+    y: int\n+}\n+\n+impl S: Reader {\n+    fn read(&self, bytes: &[mut u8], len: uint) -> uint {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let x = S { x: 1, y: 2 };\n+    let x = x as @Reader;\n+    x.read_bytes(0);\n+}"}, {"sha": "759097a771b15d62c3e346b5693b4aa4913a043a", "filename": "src/test/run-pass/explicit-self-objects-ext-4.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efb9b747185f8cb15a0f5b7deb8db633f0a420c3/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs?ref=efb9b747185f8cb15a0f5b7deb8db633f0a420c3", "patch": "@@ -0,0 +1,39 @@\n+pub trait Reader {\n+    // FIXME (#2004): Seekable really should be orthogonal.\n+\n+    /// Read up to len bytes (or EOF) and put them into bytes (which\n+    /// must be at least len bytes long). Return number of bytes read.\n+    // FIXME (#2982): This should probably return an error.\n+    fn read(bytes: &[mut u8], len: uint) -> uint;\n+}\n+\n+pub trait ReaderUtil {\n+\n+    /// Read len bytes into a new vec.\n+    fn read_bytes(len: uint);\n+}\n+\n+impl<T: Reader> T : ReaderUtil {\n+\n+    fn read_bytes(len: uint) {\n+        let count = self.read(&[mut 0], len);\n+    }\n+\n+}\n+\n+struct S {\n+    x: int,\n+    y: int\n+}\n+\n+impl S: Reader {\n+    fn read(bytes: &[mut u8], len: uint) -> uint {\n+        0\n+    }\n+}\n+\n+fn main() {\n+    let x = S { x: 1, y: 2 };\n+    let x = x as @Reader;\n+    x.read_bytes(0);\n+}"}]}