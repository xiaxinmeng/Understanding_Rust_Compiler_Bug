{"sha": "db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNGU3N2NlOTFlN2NkMmI4N2QyMTdkNDc5NjU4ZTI3ZjliMGEyZGI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-28T13:38:53Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-28T13:38:53Z"}, "message": "Rollup merge of #55199 - oli-obk:instance_printing, r=davidtwco\n\nImpl items have generics", "tree": {"sha": "dd9ae344bc16acd44b32d567880a443d35761903", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd9ae344bc16acd44b32d567880a443d35761903"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvVu+4ACgkQ/vbIBR0O\nATzUEA/+LMHtyn3YogiZMb50Dj7qCJtcogi1w+7RzkDFMnbXKXjHSm84LVHG05QP\nSo8CQEttdodbbtYig15lop1hCo3bdRC254lDWO70UmB5AVkgvT32cG0Kr1BeZjd9\nH/4lQPyJSP4Y3XJHg7oFJV7G7XTlT2bypRe+U1hBHpw2l0LOCSUlXeADeqqrtkzz\nHhYcZX9KWXa0Tzf2yp6jTt5NbnPq5D9uI7Vk7HWdKbCSGsmijZE+au08D/XJTpYf\ntGSN87zZHx39aYQpjB0xdR+Rc/Opt2OH3sL1KWXjh2MIl8cc9icMP0TSZbko/g17\njwQsuA3X2UfFWlTxUGFG6kQeE7+o5Q5zAzKYr/XPgIVSxBCRVwssu5xLCJAFJ0Z7\nyJjDDskU4KfPYbYV/gdslzeuc+HpyOkYwpUDhOJfmM8gpBz8QSselTxhjiDEKINw\nDjT5qNd1YvV3zDI5+8p3DYo49zTurpmnrd9VYx+/B6qCCZtoDa8zy+vFOdh/Inaw\ntfep+ANLsPnxi2U4Tnc0HM/B8P8XvkRclp0D6PBOmJrLLBSYYrrNiLwOgXbTJkMP\nUaHWrNE0cEwH8o9wI2oTMNZBWgovjIMY2sO+sIeNw/C5D17ieZIh0/LS5izfOTbj\nJp29cJgZfIlf1x6ijZ5Ec0kKjVL1U4k2xikwQ+4JWP3woXhfcLs=\n=mdsI\n-----END PGP SIGNATURE-----", "payload": "tree dd9ae344bc16acd44b32d567880a443d35761903\nparent abf7243066775f0709275aee23d3dda80f72c3fe\nparent 5a48f20bd9eacbca5f0e87022605791cd651935c\nauthor kennytm <kennytm@gmail.com> 1540733933 +0800\ncommitter kennytm <kennytm@gmail.com> 1540733933 +0800\n\nRollup merge of #55199 - oli-obk:instance_printing, r=davidtwco\n\nImpl items have generics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "html_url": "https://github.com/rust-lang/rust/commit/db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abf7243066775f0709275aee23d3dda80f72c3fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/abf7243066775f0709275aee23d3dda80f72c3fe", "html_url": "https://github.com/rust-lang/rust/commit/abf7243066775f0709275aee23d3dda80f72c3fe"}, {"sha": "5a48f20bd9eacbca5f0e87022605791cd651935c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a48f20bd9eacbca5f0e87022605791cd651935c", "html_url": "https://github.com/rust-lang/rust/commit/5a48f20bd9eacbca5f0e87022605791cd651935c"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "abdd7fd8d40bf0d220ad2022d1fa47d6f12eb243", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -251,25 +251,17 @@ impl PrintContext {\n     fn parameterized<F: fmt::Write>(&mut self,\n                                     f: &mut F,\n                                     substs: &subst::Substs<'_>,\n-                                    mut did: DefId,\n+                                    did: DefId,\n                                     projections: &[ty::ProjectionPredicate<'_>])\n                                     -> fmt::Result {\n         let key = ty::tls::with(|tcx| tcx.def_key(did));\n-        let mut item_name = if let Some(name) = key.disambiguated_data.data.get_opt_name() {\n-            Some(name)\n-        } else {\n-            did.index = key.parent.unwrap_or_else(\n-                || bug!(\"finding type for {:?}, encountered def-id {:?} with no parent\",\n-                        did, did));\n-            self.parameterized(f, substs, did, projections)?;\n-            return write!(f, \"::{}\", key.disambiguated_data.data.as_interned_str());\n-        };\n \n         let verbose = self.is_verbose;\n         let mut num_supplied_defaults = 0;\n         let mut has_self = false;\n         let mut own_counts: GenericParamCount = Default::default();\n         let mut is_value_path = false;\n+        let mut item_name = Some(key.disambiguated_data.data.as_interned_str());\n         let fn_trait_kind = ty::tls::with(|tcx| {\n             // Unfortunately, some kinds of items (e.g., closures) don't have\n             // generics. So walk back up the find the closest parent that DOES\n@@ -282,6 +274,7 @@ impl PrintContext {\n                     DefPathData::AssocTypeInImpl(_) |\n                     DefPathData::AssocExistentialInImpl(_) |\n                     DefPathData::Trait(_) |\n+                    DefPathData::Impl |\n                     DefPathData::TypeNs(_) => {\n                         break;\n                     }\n@@ -292,7 +285,6 @@ impl PrintContext {\n                     }\n                     DefPathData::CrateRoot |\n                     DefPathData::Misc |\n-                    DefPathData::Impl |\n                     DefPathData::Module(_) |\n                     DefPathData::MacroDef(_) |\n                     DefPathData::ClosureExpr |"}, {"sha": "d92001704285a84a34240e63dc5846faad6aaa0d", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -612,6 +612,13 @@ pub fn const_eval_raw_provider<'a, 'tcx>(\n             other => return other,\n         }\n     }\n+    // the first trace is for replicating an ice\n+    // There's no tracking issue, but the next two lines concatenated link to the discussion on\n+    // zulip. It's not really possible to test this, because it doesn't show up in diagnostics\n+    // or MIR.\n+    // https://rust-lang.zulipchat.com/#narrow/stream/146212-t-compiler.2Fconst-eval/\n+    // subject/anon_const_instance_printing/near/135980032\n+    trace!(\"const eval: {}\", key.value.instance);\n     trace!(\"const eval: {:?}\", key);\n \n     let cid = key.value;"}, {"sha": "3d15f20bd05f33bd4098e9918242108897926c1e", "filename": "src/test/mir-opt/end_region_4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_4.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -44,7 +44,7 @@ fn foo(i: i32) {\n //     let mut _5: i32;\n //     bb0: {\n //         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n+//         _1 = D(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_2);\n //         _2 = const 0i32;"}, {"sha": "06d1fbabe16167863d1428bc1c65c37b3f7df22c", "filename": "src/test/mir-opt/end_region_5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_5.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -37,7 +37,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _4: &'18s D;\n //     bb0: {\n //         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n+//         _1 = D(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);"}, {"sha": "d0db23e6de0ee177095cc7f390cdf645502d37d9", "filename": "src/test/mir-opt/end_region_6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_6.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -37,7 +37,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _4: &'24s D;\n //     bb0: {\n //         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n+//         _1 = D(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         StorageLive(_4);"}, {"sha": "c7df440ebe2f31ef212edc28f24cb4fa67a6f442", "filename": "src/test/mir-opt/end_region_7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_7.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -36,7 +36,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //     let mut _3: [closure@NodeId(33) d:D];\n //     bb0: {\n //         StorageLive(_1);\n-//         _1 = D::{{constructor}}(const 0i32,);\n+//         _1 = D(const 0i32,);\n //         FakeRead(ForLet, _1);\n //         StorageLive(_3);\n //         _3 = [closure@NodeId(33)] { d: move _1 };"}, {"sha": "9f2a9c3b72e8b6d685acd37f7b03ddfc12a001ff", "filename": "src/test/mir-opt/end_region_8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_8.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -39,7 +39,7 @@ fn foo<F>(f: F) where F: FnOnce() -> i32 {\n //    let mut _4: [closure@NodeId(33) r:&'24s D];\n //    bb0: {\n //        StorageLive(_1);\n-//        _1 = D::{{constructor}}(const 0i32,);\n+//        _1 = D(const 0i32,);\n //        FakeRead(ForLet, _1);\n //        StorageLive(_2);\n //        _2 = &'26_1rs _1;"}, {"sha": "eb381dfc5521fb53a7175fe081e4882cdb1c110d", "filename": "src/test/mir-opt/end_region_destruction_extents_1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fend_region_destruction_extents_1.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -79,16 +79,16 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         StorageLive(_3);\n //         StorageLive(_4);\n //         StorageLive(_5);\n-//         _5 = S1::{{constructor}}(const \"ex1\",);\n+//         _5 = S1(const \"ex1\",);\n //         _4 = &'15ds _5;\n //         _3 = &'15ds (*_4);\n //         StorageLive(_6);\n //         StorageLive(_7);\n //         StorageLive(_8);\n-//         _8 = S1::{{constructor}}(const \"dang1\",);\n+//         _8 = S1(const \"dang1\",);\n //         _7 = &'13s _8;\n //         _6 = &'13s (*_7);\n-//         _2 = D1<'15ds, '13s>::{{constructor}}(move _3, move _6);\n+//         _2 = D1<'15ds, '13s>(move _3, move _6);\n //         EndRegion('13s);\n //         StorageDead(_6);\n //         StorageDead(_3);\n@@ -132,7 +132,7 @@ unsafe impl<'a, #[may_dangle] 'b> Drop for D1<'a, 'b> {\n //         StorageLive(_7);\n //         _7 = &'13s (promoted[0]: S1);\n //         _6 = &'13s (*_7);\n-//         _2 = D1<'15ds, '13s>::{{constructor}}(move _3, move _6);\n+//         _2 = D1<'15ds, '13s>(move _3, move _6);\n //         EndRegion('13s);\n //         StorageDead(_6);\n //         StorageDead(_3);"}, {"sha": "1fe29a29e23181521886faa6d8e782b1d9fd1041", "filename": "src/test/mir-opt/packed-struct-drop-aligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fpacked-struct-drop-aligned.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -42,7 +42,7 @@ impl Drop for Droppy {\n //     bb0: {\n //         StorageLive(_1);\n //         ...\n-//         _1 = Packed::{{constructor}}(move _2,);\n+//         _1 = Packed(move _2,);\n //         ...\n //         StorageLive(_6);\n //         _6 = move (_1.0: Aligned);"}, {"sha": "104970ea448aa4d0cfef1a88016b341875d926da", "filename": "src/test/ui/issues/issue-21554.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fissues%2Fissue-21554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fissues%2Fissue-21554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21554.stderr?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -1,4 +1,4 @@\n-error[E0606]: casting `fn(i32) -> Inches {Inches::{{constructor}}}` as `f32` is invalid\n+error[E0606]: casting `fn(i32) -> Inches {Inches}` as `f32` is invalid\n   --> $DIR/issue-21554.rs:14:5\n    |\n LL |     Inches as f32;"}, {"sha": "4404f88de311b483655fd414b5afada045a410be", "filename": "src/test/ui/issues/issue-35241.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35241.stderr?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -9,7 +9,7 @@ LL | fn test() -> Foo { Foo } //~ ERROR mismatched types\n    |              expected `Foo` because of return type\n    |\n    = note: expected type `Foo`\n-              found type `fn(u32) -> Foo {Foo::{{constructor}}}`\n+              found type `fn(u32) -> Foo {Foo}`\n \n error: aborting due to previous error\n "}, {"sha": "0a297e58574f7a742ac6a7952ad725fa4cb58e0a", "filename": "src/test/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -144,11 +144,11 @@ note: required by `check`\n LL | fn check<T: Impossible>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `fn() -> c::TS {c::TS::{{constructor}}}: Impossible` is not satisfied\n+error[E0277]: the trait bound `fn() -> c::TS {c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:66:5\n    |\n LL |     check(m3::TS); //~ ERROR c::TS\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS::{{constructor}}}`\n+   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> c::TS {c::TS}`\n    |\n note: required by `check`\n   --> $DIR/namespace-mix.rs:31:1\n@@ -192,11 +192,11 @@ note: required by `check`\n LL | fn check<T: Impossible>(_: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::TS::{{constructor}}}: Impossible` is not satisfied\n+error[E0277]: the trait bound `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}: Impossible` is not satisfied\n   --> $DIR/namespace-mix.rs:72:5\n    |\n LL |     check(xm3::TS); //~ ERROR c::TS\n-   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS::{{constructor}}}`\n+   |     ^^^^^ the trait `Impossible` is not implemented for `fn() -> namespace_mix::c::TS {namespace_mix::c::TS}`\n    |\n note: required by `check`\n   --> $DIR/namespace-mix.rs:31:1"}, {"sha": "5151f624b8d98b033532cd95df0ce17e744650a1", "filename": "src/test/ui/privacy/private-inferred-type-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -14,8 +14,8 @@\n // error-pattern:static `PRIV_STATIC` is private\n // error-pattern:type `ext::PrivEnum` is private\n // error-pattern:type `fn() {<u8 as ext::PrivTrait>::method}` is private\n-// error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is pr\n-// error-pattern:type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct::{{constructor}}}` is priv\n+// error-pattern:type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n+// error-pattern:type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n // error-pattern:type `for<'r> fn(&'r ext::Pub<u8>) {<ext::Pub<u8>>::priv_method}` is private\n \n #![feature(decl_macro)]"}, {"sha": "590ff76b375f23090768106c79e14c7750dc136a", "filename": "src/test/ui/privacy/private-inferred-type-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type-3.stderr?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -30,15 +30,15 @@ LL |     ext::m!();\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct::{{constructor}}}` is private\n+error: type `fn(u8) -> ext::PrivTupleStruct {ext::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:26:5\n    |\n LL |     ext::m!();\n    |     ^^^^^^^^^^\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct::{{constructor}}}` is private\n+error: type `fn(u8) -> ext::PubTupleStruct {ext::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type-3.rs:26:5\n    |\n LL |     ext::m!();"}, {"sha": "58e17b24394a1cae4fcc7ff58e38d6af25ccbfc7", "filename": "src/test/ui/privacy/private-inferred-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.rs?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -53,9 +53,9 @@ mod m {\n         <u8 as PrivTrait>::method; //~ ERROR type `fn() {<u8 as m::PrivTrait>::method}` is private\n         <u8 as PubTrait>::method; // OK\n         PrivTupleStruct;\n-        //~^ ERROR type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct::{{constructor}}}` is priv\n+        //~^ ERROR type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct}` is private\n         PubTupleStruct;\n-        //~^ ERROR type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct::{{constructor}}}` is privat\n+        //~^ ERROR type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct}` is private\n         Pub(0u8).priv_method();\n         //~^ ERROR type `for<'r> fn(&'r m::Pub<u8>) {<m::Pub<u8>>::priv_method}` is private\n     }"}, {"sha": "1ab281cfc251537a599060fa41d470bf8b937edb", "filename": "src/test/ui/privacy/private-inferred-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db4e77ce91e7cd2b87d217d479658e27f9b0a2db/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fprivate-inferred-type.stderr?ref=db4e77ce91e7cd2b87d217d479658e27f9b0a2db", "patch": "@@ -115,7 +115,7 @@ LL |         <u8 as PrivTrait>::method; //~ ERROR type `fn() {<u8 as m::PrivTrai\n LL |     m::m!();\n    |     -------- in this macro invocation\n \n-error: type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct::{{constructor}}}` is private\n+error: type `fn(u8) -> m::PrivTupleStruct {m::PrivTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:55:9\n    |\n LL |         PrivTupleStruct;\n@@ -124,7 +124,7 @@ LL |         PrivTupleStruct;\n LL |     m::m!();\n    |     -------- in this macro invocation\n \n-error: type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct::{{constructor}}}` is private\n+error: type `fn(u8) -> m::PubTupleStruct {m::PubTupleStruct}` is private\n   --> $DIR/private-inferred-type.rs:57:9\n    |\n LL |         PubTupleStruct;"}]}