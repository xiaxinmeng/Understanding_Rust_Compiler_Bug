{"sha": "06707c073dcb29732933dc484877aa57c6dd1f94", "node_id": "C_kwDOAAsO6NoAKDA2NzA3YzA3M2RjYjI5NzMyOTMzZGM0ODQ4NzdhYTU3YzZkZDFmOTQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-19T14:35:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-19T14:35:21Z"}, "message": "Rollup merge of #104469 - estebank:long-types, r=oli-obk\n\nMake \"long type\" printing type aware and trim types in E0275\n\nInstead of simple string cutting, use a custom printer to hide parts of long printed types.\n\nOn E0275, check for type length before printing.", "tree": {"sha": "fc4f0ee933cd1781e8d2aeebc210e42d7a343251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc4f0ee933cd1781e8d2aeebc210e42d7a343251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06707c073dcb29732933dc484877aa57c6dd1f94", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjeOmpCRBK7hj4Ov3rIwAAUGAIAGFFdqNHXAY9uP28XMK68MPL\nTQgd6Fz53is2O94c5FmCWT5szCDJcHwHUdSYMoPE1dIHesN8X8CnV3xWIBQWaahL\nQ/Tul1Y5nd4vVxrn5y4swVIkxTfiZsTSHi5qug+2up/82VDjJggHtDpC9d6iNCNR\n2KMR0TqMQZoEerLDXqTiCaBQ1pVH46PfElxT4fbS0RHqIA4DStZSDBwUM6ei9LWC\n0jW5GeC7sh/vP3Y05qfHcxLLQAEjDyKF0ezQV45af9QiEJyIqnGg+i+tdQVRxE4A\nwAv4yVe/UyqB9kldo+6DluCSsvMx4QTVpR1iBXCVyVeSmw7i7aobCBVuFfsduMY=\n=GLIU\n-----END PGP SIGNATURE-----\n", "payload": "tree fc4f0ee933cd1781e8d2aeebc210e42d7a343251\nparent d6298d3dc835baa475c06749bfcff56b59cdad9c\nparent bcb2655a9a3af867c3e48a332870acc36d92df88\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668868521 +0100\ncommitter GitHub <noreply@github.com> 1668868521 +0100\n\nRollup merge of #104469 - estebank:long-types, r=oli-obk\n\nMake \"long type\" printing type aware and trim types in E0275\n\nInstead of simple string cutting, use a custom printer to hide parts of long printed types.\n\nOn E0275, check for type length before printing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06707c073dcb29732933dc484877aa57c6dd1f94", "html_url": "https://github.com/rust-lang/rust/commit/06707c073dcb29732933dc484877aa57c6dd1f94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06707c073dcb29732933dc484877aa57c6dd1f94/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6298d3dc835baa475c06749bfcff56b59cdad9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6298d3dc835baa475c06749bfcff56b59cdad9c", "html_url": "https://github.com/rust-lang/rust/commit/d6298d3dc835baa475c06749bfcff56b59cdad9c"}, {"sha": "bcb2655a9a3af867c3e48a332870acc36d92df88", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb2655a9a3af867c3e48a332870acc36d92df88", "html_url": "https://github.com/rust-lang/rust/commit/bcb2655a9a3af867c3e48a332870acc36d92df88"}], "stats": {"total": 305, "additions": 208, "deletions": 97}, "files": [{"sha": "d6044ceb0cafc4088a4913c2e5515754c911f8de", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -12,7 +12,12 @@ use rustc_span::{BytePos, Span};\n use rustc_target::spec::abi;\n \n use std::borrow::Cow;\n+use std::collections::hash_map::DefaultHasher;\n use std::fmt;\n+use std::hash::{Hash, Hasher};\n+use std::path::PathBuf;\n+\n+use super::print::PrettyPrinter;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable, Lift)]\n pub struct ExpectedFound<T> {\n@@ -985,6 +990,38 @@ fn foo(&self) -> Self::T { String::new() }\n         false\n     }\n \n+    pub fn short_ty_string(self, ty: Ty<'tcx>) -> (String, Option<PathBuf>) {\n+        let length_limit = 50;\n+        let type_limit = 4;\n+        let regular = FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n+            .pretty_print_type(ty)\n+            .expect(\"could not write to `String`\")\n+            .into_buffer();\n+        if regular.len() <= length_limit {\n+            return (regular, None);\n+        }\n+        let short = FmtPrinter::new_with_limit(\n+            self,\n+            hir::def::Namespace::TypeNS,\n+            rustc_session::Limit(type_limit),\n+        )\n+        .pretty_print_type(ty)\n+        .expect(\"could not write to `String`\")\n+        .into_buffer();\n+        if regular == short {\n+            return (regular, None);\n+        }\n+        // Multiple types might be shortened in a single error, ensure we create a file for each.\n+        let mut s = DefaultHasher::new();\n+        ty.hash(&mut s);\n+        let hash = s.finish();\n+        let path = self.output_filenames(()).temp_path_ext(&format!(\"long-type-{hash}.txt\"), None);\n+        match std::fs::write(&path, &regular) {\n+            Ok(_) => (short, Some(path)),\n+            Err(_) => (regular, None),\n+        }\n+    }\n+\n     fn format_generic_args(self, args: &[ty::GenericArg<'tcx>]) -> String {\n         FmtPrinter::new(self, hir::def::Namespace::TypeNS)\n             .path_generic_args(Ok, args)"}, {"sha": "a792d2694b3b9f08e70a4c3d3eb7ba72b4c0f8b1", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 37, "deletions": 20, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -276,28 +276,45 @@ impl<'tcx> InstanceDef<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Display for Instance<'tcx> {\n+fn fmt_instance(\n+    f: &mut fmt::Formatter<'_>,\n+    instance: &Instance<'_>,\n+    type_length: rustc_session::Limit,\n+) -> fmt::Result {\n+    ty::tls::with(|tcx| {\n+        let substs = tcx.lift(instance.substs).expect(\"could not lift for printing\");\n+\n+        let s = FmtPrinter::new_with_limit(tcx, Namespace::ValueNS, type_length)\n+            .print_def_path(instance.def_id(), substs)?\n+            .into_buffer();\n+        f.write_str(&s)\n+    })?;\n+\n+    match instance.def {\n+        InstanceDef::Item(_) => Ok(()),\n+        InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n+        InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n+        InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n+        InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n+        InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n+        InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n+        InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n+        InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n+        InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n+    }\n+}\n+\n+pub struct ShortInstance<'a, 'tcx>(pub &'a Instance<'tcx>, pub usize);\n+\n+impl<'a, 'tcx> fmt::Display for ShortInstance<'a, 'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        ty::tls::with(|tcx| {\n-            let substs = tcx.lift(self.substs).expect(\"could not lift for printing\");\n-            let s = FmtPrinter::new(tcx, Namespace::ValueNS)\n-                .print_def_path(self.def_id(), substs)?\n-                .into_buffer();\n-            f.write_str(&s)\n-        })?;\n+        fmt_instance(f, self.0, rustc_session::Limit(self.1))\n+    }\n+}\n \n-        match self.def {\n-            InstanceDef::Item(_) => Ok(()),\n-            InstanceDef::VTableShim(_) => write!(f, \" - shim(vtable)\"),\n-            InstanceDef::ReifyShim(_) => write!(f, \" - shim(reify)\"),\n-            InstanceDef::Intrinsic(_) => write!(f, \" - intrinsic\"),\n-            InstanceDef::Virtual(_, num) => write!(f, \" - virtual#{}\", num),\n-            InstanceDef::FnPtrShim(_, ty) => write!(f, \" - shim({})\", ty),\n-            InstanceDef::ClosureOnceShim { .. } => write!(f, \" - shim\"),\n-            InstanceDef::DropGlue(_, None) => write!(f, \" - shim(None)\"),\n-            InstanceDef::DropGlue(_, Some(ty)) => write!(f, \" - shim(Some({}))\", ty),\n-            InstanceDef::CloneShim(_, ty) => write!(f, \" - shim({})\", ty),\n-        }\n+impl<'tcx> fmt::Display for Instance<'tcx> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        ty::tls::with(|tcx| fmt_instance(f, self, tcx.type_length_limit()))\n     }\n }\n "}, {"sha": "a770c6a2e99bee226bab8368096db8c66e174b4f", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -84,7 +84,7 @@ pub use self::context::{\n     GeneratorInteriorTypeCause, GlobalCtxt, Lift, OnDiskCache, TyCtxt, TypeckResults, UserType,\n     UserTypeAnnotationIndex,\n };\n-pub use self::instance::{Instance, InstanceDef};\n+pub use self::instance::{Instance, InstanceDef, ShortInstance};\n pub use self::list::List;\n pub use self::parameterized::ParameterizedOverTcx;\n pub use self::rvalue_scopes::RvalueScopes;"}, {"sha": "023c9d26c42e303700d09d182e80a25c7fb5b5ad", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -13,6 +13,7 @@ use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n+use rustc_session::Limit;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_target::abi::Size;\n use rustc_target::spec::abi::Abi;\n@@ -1583,6 +1584,8 @@ pub struct FmtPrinterData<'a, 'tcx> {\n     region_index: usize,\n     binder_depth: usize,\n     printed_type_count: usize,\n+    type_length_limit: Limit,\n+    truncated: bool,\n \n     pub region_highlight_mode: RegionHighlightMode<'tcx>,\n \n@@ -1605,6 +1608,10 @@ impl DerefMut for FmtPrinter<'_, '_> {\n \n impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, ns: Namespace) -> Self {\n+        Self::new_with_limit(tcx, ns, tcx.type_length_limit())\n+    }\n+\n+    pub fn new_with_limit(tcx: TyCtxt<'tcx>, ns: Namespace, type_length_limit: Limit) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n             // Estimated reasonable capacity to allocate upfront based on a few\n@@ -1617,6 +1624,8 @@ impl<'a, 'tcx> FmtPrinter<'a, 'tcx> {\n             region_index: 0,\n             binder_depth: 0,\n             printed_type_count: 0,\n+            type_length_limit,\n+            truncated: false,\n             region_highlight_mode: RegionHighlightMode::new(tcx),\n             ty_infer_name_resolver: None,\n             const_infer_name_resolver: None,\n@@ -1751,11 +1760,11 @@ impl<'tcx> Printer<'tcx> for FmtPrinter<'_, 'tcx> {\n     }\n \n     fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        let type_length_limit = self.tcx.type_length_limit();\n-        if type_length_limit.value_within_limit(self.printed_type_count) {\n+        if self.type_length_limit.value_within_limit(self.printed_type_count) {\n             self.printed_type_count += 1;\n             self.pretty_print_type(ty)\n         } else {\n+            self.truncated = true;\n             write!(self, \"...\")?;\n             Ok(self)\n         }"}, {"sha": "d74893bf0f0e3354bc5b04daacb86d7cb252461c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -197,7 +197,6 @@ use rustc_session::lint::builtin::LARGE_ASSIGNMENTS;\n use rustc_session::Limit;\n use rustc_span::source_map::{dummy_spanned, respan, Span, Spanned, DUMMY_SP};\n use rustc_target::abi::Size;\n-use std::iter;\n use std::ops::Range;\n use std::path::PathBuf;\n \n@@ -541,29 +540,23 @@ fn collect_items_rec<'tcx>(\n }\n \n /// Format instance name that is already known to be too long for rustc.\n-/// Show only the first and last 32 characters to avoid blasting\n+/// Show only the first 2 types if it is longer than 32 characters to avoid blasting\n /// the user's terminal with thousands of lines of type-name.\n ///\n /// If the type name is longer than before+after, it will be written to a file.\n fn shrunk_instance_name<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: &Instance<'tcx>,\n-    before: usize,\n-    after: usize,\n ) -> (String, Option<PathBuf>) {\n     let s = instance.to_string();\n \n     // Only use the shrunk version if it's really shorter.\n     // This also avoids the case where before and after slices overlap.\n-    if s.chars().nth(before + after + 1).is_some() {\n-        // An iterator of all byte positions including the end of the string.\n-        let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-        let shrunk = format!(\n-            \"{before}...{after}\",\n-            before = &s[..positions().nth(before).unwrap_or(s.len())],\n-            after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-        );\n+    if s.chars().nth(33).is_some() {\n+        let shrunk = format!(\"{}\", ty::ShortInstance(instance, 4));\n+        if shrunk == s {\n+            return (s, None);\n+        }\n \n         let path = tcx.output_filenames(()).temp_path_ext(\"long-type.txt\", None);\n         let written_to_path = std::fs::write(&path, s).ok().map(|_| path);\n@@ -599,7 +592,7 @@ fn check_recursion_limit<'tcx>(\n     if !recursion_limit.value_within_limit(adjusted_recursion_depth) {\n         let def_span = tcx.def_span(def_id);\n         let def_path_str = tcx.def_path_str(def_id);\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {\n             path = written_to_path.unwrap();\n@@ -641,7 +634,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.type_length_limit().value_within_limit(type_length) {\n-        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance, 32, 32);\n+        let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let span = tcx.def_span(instance.def_id());\n         let mut path = PathBuf::new();\n         let was_written = if written_to_path.is_some() {"}, {"sha": "6e90b9446505e18b7d019e0399786c454394184b", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -22,6 +22,7 @@ use rustc_errors::{\n     MultiSpan, Style,\n };\n use rustc_hir as hir;\n+use rustc_hir::def::Namespace;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::GenericParam;\n@@ -34,6 +35,7 @@ use rustc_middle::traits::select::OverflowError;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::error::ExpectedFound;\n use rustc_middle::ty::fold::{TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::{\n     self, SubtypePredicate, ToPolyTraitRef, ToPredicate, TraitRef, Ty, TyCtxt, TypeFoldable,\n     TypeVisitable,\n@@ -109,7 +111,10 @@ pub trait TypeErrCtxtExt<'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>;\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug;\n \n     fn suggest_new_overflow_limit(&self, err: &mut Diagnostic);\n \n@@ -468,15 +473,31 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         suggest_increasing_limit: bool,\n     ) -> !\n     where\n-        T: fmt::Display + TypeFoldable<'tcx>,\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n     {\n         let predicate = self.resolve_vars_if_possible(obligation.predicate.clone());\n+        let mut pred_str = predicate.to_string();\n+        if pred_str.len() > 50 {\n+            // We don't need to save the type to a file, we will be talking about this type already\n+            // in a separate note when we explain the obligation, so it will be available that way.\n+            pred_str = predicate\n+                .print(FmtPrinter::new_with_limit(\n+                    self.tcx,\n+                    Namespace::TypeNS,\n+                    rustc_session::Limit(6),\n+                ))\n+                .unwrap()\n+                .into_buffer();\n+        }\n         let mut err = struct_span_err!(\n             self.tcx.sess,\n             obligation.cause.span,\n             E0275,\n             \"overflow evaluating the requirement `{}`\",\n-            predicate\n+            pred_str,\n         );\n \n         if suggest_increasing_limit {"}, {"sha": "757977ac5d508774849861a8050d0b084f3da192", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -2733,9 +2733,10 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     self.resolve_vars_if_possible(data.derived.parent_trait_pred);\n                 parent_trait_pred.remap_constness_diag(param_env);\n                 let parent_def_id = parent_trait_pred.def_id();\n+                let (self_ty, file) =\n+                    self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                 let msg = format!(\n-                    \"required for `{}` to implement `{}`\",\n-                    parent_trait_pred.skip_binder().self_ty(),\n+                    \"required for `{self_ty}` to implement `{}`\",\n                     parent_trait_pred.print_modifiers_and_trait_path()\n                 );\n                 let mut is_auto_trait = false;\n@@ -2764,6 +2765,12 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     _ => err.note(&msg),\n                 };\n \n+                if let Some(file) = file {\n+                    err.note(&format!(\n+                        \"the full type name has been written to '{}'\",\n+                        file.display(),\n+                    ));\n+                }\n                 let mut parent_predicate = parent_trait_pred;\n                 let mut data = &data.derived;\n                 let mut count = 0;\n@@ -2804,11 +2811,18 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         count,\n                         pluralize!(count)\n                     ));\n+                    let (self_ty, file) =\n+                        self.tcx.short_ty_string(parent_trait_pred.skip_binder().self_ty());\n                     err.note(&format!(\n-                        \"required for `{}` to implement `{}`\",\n-                        parent_trait_pred.skip_binder().self_ty(),\n+                        \"required for `{self_ty}` to implement `{}`\",\n                         parent_trait_pred.print_modifiers_and_trait_path()\n                     ));\n+                    if let Some(file) = file {\n+                        err.note(&format!(\n+                            \"the full type name has been written to '{}'\",\n+                            file.display(),\n+                        ));\n+                    }\n                 }\n                 // #74711: avoid a stack overflow\n                 ensure_sufficient_stack(|| {"}, {"sha": "a9314b1b85e668944ab4700a1e84b640baa01610", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -42,6 +42,7 @@ use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n+use rustc_middle::ty::print::{FmtPrinter, Print};\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n use rustc_middle::ty::{self, EarlyBinder, PolyProjectionPredicate, ToPolyTraitRef, ToPredicate};\n@@ -1081,11 +1082,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         it.for_each(|o| o.recursion_depth = cmp::max(min_depth, o.recursion_depth) + 1);\n     }\n \n-    fn check_recursion_depth<T: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_depth<T>(\n         &self,\n         depth: usize,\n         error_obligation: &Obligation<'tcx, T>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        T: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <T as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         if !self.infcx.tcx.recursion_limit().value_within_limit(depth) {\n             match self.query_mode {\n                 TraitQueryMode::Standard => {\n@@ -1107,11 +1114,17 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// The weird return type of this function allows it to be used with the `try` (`?`)\n     /// operator within certain functions.\n     #[inline(always)]\n-    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V: Display + TypeFoldable<'tcx>>(\n+    fn check_recursion_limit<T: Display + TypeFoldable<'tcx>, V>(\n         &self,\n         obligation: &Obligation<'tcx, T>,\n         error_obligation: &Obligation<'tcx, V>,\n-    ) -> Result<(), OverflowError> {\n+    ) -> Result<(), OverflowError>\n+    where\n+        V: fmt::Display\n+            + TypeFoldable<'tcx>\n+            + Print<'tcx, FmtPrinter<'tcx, 'tcx>, Output = FmtPrinter<'tcx, 'tcx>>,\n+        <V as Print<'tcx, FmtPrinter<'tcx, 'tcx>>>::Error: std::fmt::Debug,\n+    {\n         self.check_recursion_depth(obligation.recursion_depth, error_obligation)\n     }\n "}, {"sha": "95d7f85f10546240f81ae998a841f818953bfea9", "filename": "src/test/ui/error-codes/E0275.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {}\n \n struct Bar<T>(T);"}, {"sha": "49a4d984af9eb6143418ea31f0bf55e6f02fc9e7", "filename": "src/test/ui/error-codes/E0275.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0275.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,15 +1,16 @@\n-error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/E0275.rs:5:33\n+error[E0275]: overflow evaluating the requirement `Bar<Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>>: Foo`\n+  --> $DIR/E0275.rs:6:33\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |                                 ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`E0275`)\n-note: required for `Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<Bar<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/E0275.rs:5:9\n+note: required for `Bar<Bar<Bar<Bar<Bar<Bar<...>>>>>>` to implement `Foo`\n+  --> $DIR/E0275.rs:6:9\n    |\n LL | impl<T> Foo for T where Bar<T>: Foo {}\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/error-codes/E0275/E0275.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `Bar<T>` to implement `Foo`\n "}, {"sha": "951e0f5870d7d084ba3c802c2570f4be32340587", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/infinite-instantiation.rs:22:9\n    |\n LL |         function(counter - 1, t.to_option());"}, {"sha": "4de22f0c9177d4f90ff06e7dd667c043ac29aeca", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,3 +1,4 @@\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n trait Foo {\n     fn answer(self);\n }"}, {"sha": "91509ceace8cb3406806a91d1c75c54b504b47af", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,64 +1,69 @@\n error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-20413.rs:5:15\n+  --> $DIR/issue-20413.rs:6:15\n    |\n LL | struct NoData<T>;\n    |               ^ unused parameter\n    |\n    = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n    = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n \n-error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:36\n+error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>>: Foo`\n+  --> $DIR/issue-20413.rs:9:36\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |                                    ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Foo`\n-  --> $DIR/issue-20413.rs:8:9\n+note: required for `NoData<NoData<NoData<NoData<NoData<NoData<...>>>>>>` to implement `Foo`\n+  --> $DIR/issue-20413.rs:9:9\n    |\n LL | impl<T> Foo for T where NoData<T>: Foo {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 127 redundant requirements hidden\n    = note: required for `NoData<T>` to implement `Foo`\n \n-error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n-  --> $DIR/issue-20413.rs:27:42\n+error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>>: Baz`\n+  --> $DIR/issue-20413.rs:28:42\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `EvenLessData<T>` to implement `Baz`\n \n-error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n-  --> $DIR/issue-20413.rs:34:42\n+error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>>: Bar`\n+  --> $DIR/issue-20413.rs:35:42\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Baz`\n-  --> $DIR/issue-20413.rs:34:9\n+note: required for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<...>>>>>>` to implement `Baz`\n+  --> $DIR/issue-20413.rs:35:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n-note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>` to implement `Bar`\n-  --> $DIR/issue-20413.rs:27:9\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n+note: required for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<...>>>>>>` to implement `Bar`\n+  --> $DIR/issue-20413.rs:28:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-20413/issue-20413.long-type-hash.txt'\n    = note: 126 redundant requirements hidden\n    = note: required for `AlmostNoData<T>` to implement `Bar`\n "}, {"sha": "1caa4221f25015fc6d292f88e9c6b4ae76037719", "filename": "src/test/ui/issues/issue-22638.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22638.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -9,7 +9,6 @@ note: `A::matches` defined here\n    |\n LL |     pub fn matches<F: Fn()>(&self, f: &F) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/issues/issue-22638/issue-22638.long-type.txt'\n \n error: aborting due to previous error\n "}, {"sha": "5b8299fe839d7bcdb100808ed8c4e7a5049d5458", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+error: reached the recursion limit while instantiating `<(&(&(..., ...), ...), ...) as Foo>::recurse`\n   --> $DIR/issue-37311.rs:17:9\n    |\n LL |         (self, self).recurse();"}, {"sha": "4746f918bf8dd53b761d70b0bfcad528f2bddf55", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut ...>`\n   --> $DIR/issue-67552.rs:29:9\n    |\n LL |         rec(identity(&mut it))"}, {"sha": "22332b357231b3b88d51e21b8c405854c721b8de", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -9,7 +9,7 @@ LL |     generic::<Option<T>>();\n    = help: a `loop` may express intention better if this is on purpose\n    = note: `#[warn(unconditional_recursion)]` on by default\n \n-error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<Option<Option<...>>>>>>`\n   --> $DIR/issue-8727.rs:8:5\n    |\n LL |     generic::<Option<T>>();"}, {"sha": "38353d161c1339e626f95750c3d58ef166c3ff51", "filename": "src/test/ui/recursion/issue-83150.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,6 +1,7 @@\n // build-fail\n // compile-flags: -Copt-level=0\n-//~^^ ERROR overflow evaluating the requirement\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n+//~^^^ ERROR overflow evaluating the requirement\n \n fn main() {\n     let mut iter = 0u8..1;"}, {"sha": "a67bfd018a2b5cfd9f96255a5c34eddfda1b56c3", "filename": "src/test/ui/recursion/issue-83150.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-83150.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-83150.rs:10:1\n+  --> $DIR/issue-83150.rs:11:1\n    |\n LL | fn func<T: Iterator<Item = u8>>(iter: &mut T) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot return without recursing\n@@ -12,9 +12,10 @@ LL |     func(&mut iter.map(|x| x + 1))\n error[E0275]: overflow evaluating the requirement `<std::ops::Range<u8> as Iterator>::Item`\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_83150`)\n-   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:12:24: 12:27]>` to implement `Iterator`\n    = note: 64 redundant requirements hidden\n-   = note: required for `&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut Map<&mut std::ops::Range<u8>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>, [closure@$DIR/issue-83150.rs:11:24: 11:27]>` to implement `Iterator`\n+   = note: required for `&mut Map<&mut Map<&mut Map<..., ...>, ...>, ...>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/recursion/issue-83150/issue-83150.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "cf08095372b0792aab0eb8bb6ad92d36a3ccd8ed", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>`\n   --> $DIR/recursion.rs:18:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}, {"sha": "6474b2b38e1c089a164cb1c8d86e129126d6b19f", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -2,6 +2,7 @@\n // compile-flags: -Zinline-mir=no\n // error-pattern: overflow evaluating the requirement `(): Sized`\n // error-pattern: function cannot return without recursing\n+// normalize-stderr-test: \"long-type-\\d+\" -> \"long-type-hash\"\n \n // Regression test for #91949.\n // This hanged *forever* on 1.56, fixed by #90423."}, {"sha": "a74d2524996a10d4d9f85c9ed166f1733264c3fe", "filename": "src/test/ui/traits/issue-91949-hangs-on-recursion.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-91949-hangs-on-recursion.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,5 +1,5 @@\n warning: function cannot return without recursing\n-  --> $DIR/issue-91949-hangs-on-recursion.rs:22:1\n+  --> $DIR/issue-91949-hangs-on-recursion.rs:23:1\n    |\n LL | / fn recurse<T>(elements: T) -> Vec<char>\n LL | | where\n@@ -17,7 +17,8 @@ error[E0275]: overflow evaluating the requirement `(): Sized`\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"512\"]` attribute to your crate (`issue_91949_hangs_on_recursion`)\n    = note: required for `std::iter::Empty<()>` to implement `Iterator`\n    = note: 171 redundant requirements hidden\n-   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<IteratorOfWrapped<(), std::iter::Empty<()>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>, [closure@$DIR/issue-91949-hangs-on-recursion.rs:26:45: 26:48]>>` to implement `Iterator`\n+   = note: required for `IteratorOfWrapped<(), Map<IteratorOfWrapped<(), Map<..., ...>>, ...>>` to implement `Iterator`\n+   = note: the full type name has been written to '$TEST_BUILD_DIR/traits/issue-91949-hangs-on-recursion/issue-91949-hangs-on-recursion.long-type-hash.txt'\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b3c12747414ed15a53432bf5b4055aa3a614dad7", "filename": "src/test/ui/type_length_limit.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftype_length_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftype_length_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.rs?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -7,22 +7,27 @@\n // The exact type depends on optimizations, so disable them.\n \n #![allow(dead_code)]\n-#![type_length_limit=\"4\"]\n+#![type_length_limit=\"8\"]\n \n macro_rules! link {\n     ($id:ident, $t:ty) => {\n         pub type $id = ($t, $t, $t);\n     }\n }\n \n+link! { A1, B1 }\n+link! { B1, C1 }\n+link! { C1, D1 }\n+link! { D1, E1 }\n+link! { E1, A }\n link! { A, B }\n link! { B, C }\n link! { C, D }\n link! { D, E }\n link! { E, F }\n-link! { F, G }\n+link! { F, G<Option<i32>, Option<i32>> }\n \n-pub struct G;\n+pub struct G<T, K>(std::marker::PhantomData::<(T, K)>);\n \n fn main() {\n     drop::<Option<A>>(None);"}, {"sha": "ff487466902236425d4be9180f9fb20f71ac6bd2", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06707c073dcb29732933dc484877aa57c6dd1f94/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=06707c073dcb29732933dc484877aa57c6dd1f94", "patch": "@@ -1,20 +1,11 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((..., ..., ...), ..., ...), ..., ...), ..., ...)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}\n    | ^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n+   = help: consider adding a `#![type_length_limit=\"10\"]` attribute to your crate\n    = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n \n-error: reached the type-length limit while instantiating `<[closure@std::rt::lang_start<()...e<()>>::call_once - shim(vtable)`\n-  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n-   |\n-LL |     extern \"rust-call\" fn call_once(self, args: Args) -> Self::Output;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding a `#![type_length_limit=\"8\"]` attribute to your crate\n-   = note: the full type name has been written to '$TEST_BUILD_DIR/type_length_limit/type_length_limit.long-type.txt'\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}