{"sha": "c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZDFmMzIyY2FhODJiMzhlNmI3ZDNlMmVhZmI5Yzc3YzE5NzhlMDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-24T20:16:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-24T20:16:41Z"}, "message": "Add missing urls for array docs", "tree": {"sha": "e945f7720cb708226abec3f9e907e6c1c28441ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e945f7720cb708226abec3f9e907e6c1c28441ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01", "html_url": "https://github.com/rust-lang/rust/commit/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc", "html_url": "https://github.com/rust-lang/rust/commit/fe597dc9a9f325de9b2b11d69e190e1c22c4e7dc"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "11197db98a39680b098af9d929f637f5954a9d7c", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=c8d1f322caa82b38e6b7d3e2eafb9c77c1978e01", "patch": "@@ -272,7 +272,7 @@ mod prim_pointer { }\n /// Arrays of sizes from 0 to 32 (inclusive) implement the following traits if\n /// the element type allows it:\n ///\n-/// - [`Clone`][clone] (only if `T: Copy`)\n+/// - [`Clone`][clone] (only if `T: [Copy][copy]`)\n /// - [`Debug`][debug]\n /// - [`IntoIterator`][intoiterator] (implemented for `&[T; N]` and `&mut [T; N]`)\n /// - [`PartialEq`][partialeq], [`PartialOrd`][partialord], [`Eq`][eq], [`Ord`][ord]\n@@ -287,8 +287,8 @@ mod prim_pointer { }\n /// entirely different types. As a stopgap, trait implementations are\n /// statically generated up to size 32.\n ///\n-/// Arrays of *any* size are [`Copy`][copy] if the element type is `Copy`. This\n-/// works because the `Copy` trait is specially known to the compiler.\n+/// Arrays of *any* size are [`Copy`][copy] if the element type is [`Copy`][copy]. This\n+/// works because the [`Copy`][copy] trait is specially known to the compiler.\n ///\n /// Arrays coerce to [slices (`[T]`)][slice], so a slice method may be called on\n /// an array. Indeed, this provides most of the API for working with arrays.\n@@ -297,23 +297,6 @@ mod prim_pointer { }\n /// There is no way to move elements out of an array. See [`mem::replace`][replace]\n /// for an alternative.\n ///\n-/// [slice]: primitive.slice.html\n-/// [copy]: marker/trait.Copy.html\n-/// [clone]: clone/trait.Clone.html\n-/// [debug]: fmt/trait.Debug.html\n-/// [intoiterator]: iter/trait.IntoIterator.html\n-/// [partialeq]: cmp/trait.PartialEq.html\n-/// [partialord]: cmp/trait.PartialOrd.html\n-/// [eq]: cmp/trait.Eq.html\n-/// [ord]: cmp/trait.Ord.html\n-/// [hash]: hash/trait.Hash.html\n-/// [asref]: convert/trait.AsRef.html\n-/// [asmut]: convert/trait.AsMut.html\n-/// [borrow]: borrow/trait.Borrow.html\n-/// [borrowmut]: borrow/trait.BorrowMut.html\n-/// [default]: default/trait.Default.html\n-/// [replace]: mem/fn.replace.html\n-///\n /// # Examples\n ///\n /// ```\n@@ -347,13 +330,31 @@ mod prim_pointer { }\n /// ```\n ///\n /// If the array has 32 or fewer elements (see above), you can also use the\n-/// array reference's `IntoIterator` implementation:\n+/// array reference's [`IntoIterator`] implementation:\n ///\n /// ```\n /// # let array: [i32; 3] = [0; 3];\n /// for x in &array { }\n /// ```\n ///\n+/// [slice]: primitive.slice.html\n+/// [copy]: marker/trait.Copy.html\n+/// [clone]: clone/trait.Clone.html\n+/// [debug]: fmt/trait.Debug.html\n+/// [intoiterator]: iter/trait.IntoIterator.html\n+/// [partialeq]: cmp/trait.PartialEq.html\n+/// [partialord]: cmp/trait.PartialOrd.html\n+/// [eq]: cmp/trait.Eq.html\n+/// [ord]: cmp/trait.Ord.html\n+/// [hash]: hash/trait.Hash.html\n+/// [asref]: convert/trait.AsRef.html\n+/// [asmut]: convert/trait.AsMut.html\n+/// [borrow]: borrow/trait.Borrow.html\n+/// [borrowmut]: borrow/trait.BorrowMut.html\n+/// [default]: default/trait.Default.html\n+/// [replace]: mem/fn.replace.html\n+/// [`IntoIterator`]: iter/trait.IntoIterator.html\n+///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n mod prim_array { }\n "}]}