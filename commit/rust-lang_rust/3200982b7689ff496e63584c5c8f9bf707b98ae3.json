{"sha": "3200982b7689ff496e63584c5c8f9bf707b98ae3", "node_id": "C_kwDOAAsO6NoAKDMyMDA5ODJiNzY4OWZmNDk2ZTYzNTg0YzVjOGY5YmY3MDdiOThhZTM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T12:59:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-21T12:59:11Z"}, "message": "Auto merge of #108138 - compiler-errors:malformed-fn-trait, r=TaKO8Ki\n\nMove `Fn*` traits malformedness protections to typeck\n\nI found it strange that we were doing a custom well-formedness check just for the `Fn*` traits' `call_*` fn items. My understanding from the git history is that this is just to avoid ICEs later on in typeck.\n\nWell, that well-formedness check isn't even implemented correctly for `FnOnce::call_once`, or `FnMut::call_mut` for that matter. Instead, this PR just makes the typeck checks more robust, and leaves it up to the call-site to report errors when lang items are implemented in funny ways.\n\nThis coincidentally fixes another ICE where a the `Add` lang item is implemented with a `add` item that's a const instead of a method.", "tree": {"sha": "071a133080769abf4401135167cecb6a8dc8a23f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071a133080769abf4401135167cecb6a8dc8a23f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3200982b7689ff496e63584c5c8f9bf707b98ae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3200982b7689ff496e63584c5c8f9bf707b98ae3", "html_url": "https://github.com/rust-lang/rust/commit/3200982b7689ff496e63584c5c8f9bf707b98ae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3200982b7689ff496e63584c5c8f9bf707b98ae3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bda32a4023b1d3f96e56e1b2fc7510324f430316", "url": "https://api.github.com/repos/rust-lang/rust/commits/bda32a4023b1d3f96e56e1b2fc7510324f430316", "html_url": "https://github.com/rust-lang/rust/commit/bda32a4023b1d3f96e56e1b2fc7510324f430316"}, {"sha": "2a700d47f592a52ebc32ae41b67cd5da756a17d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a700d47f592a52ebc32ae41b67cd5da756a17d9", "html_url": "https://github.com/rust-lang/rust/commit/2a700d47f592a52ebc32ae41b67cd5da756a17d9"}], "stats": {"total": 295, "additions": 221, "deletions": 74}, "files": [{"sha": "83b33321a525efb7a2d24ca5c7db86ea121a39c5", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 51, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -16,7 +16,7 @@ use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, ir::TypeVisitor, AdtKind, DefIdTree, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n+    self, ir::TypeVisitor, AdtKind, GenericParamDefKind, Ty, TyCtxt, TypeFoldable,\n     TypeSuperVisitable,\n };\n use rustc_middle::ty::{GenericArgKind, InternalSubsts};\n@@ -277,56 +277,6 @@ fn check_trait_item(tcx: TyCtxt<'_>, trait_item: &hir::TraitItem<'_>) {\n     };\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n     check_associated_item(tcx, def_id, span, method_sig);\n-\n-    let encl_trait_def_id = tcx.local_parent(def_id);\n-    let encl_trait = tcx.hir().expect_item(encl_trait_def_id);\n-    let encl_trait_def_id = encl_trait.owner_id.to_def_id();\n-    let fn_lang_item_name = if Some(encl_trait_def_id) == tcx.lang_items().fn_trait() {\n-        Some(\"fn\")\n-    } else if Some(encl_trait_def_id) == tcx.lang_items().fn_mut_trait() {\n-        Some(\"fn_mut\")\n-    } else {\n-        None\n-    };\n-\n-    if let (Some(fn_lang_item_name), \"call\") =\n-        (fn_lang_item_name, trait_item.ident.name.to_ident_string().as_str())\n-    {\n-        // We are looking at the `call` function of the `fn` or `fn_mut` lang item.\n-        // Do some rudimentary sanity checking to avoid an ICE later (issue #83471).\n-        if let Some(hir::FnSig { decl, span, .. }) = method_sig {\n-            if let [self_ty, _] = decl.inputs {\n-                if !matches!(self_ty.kind, hir::TyKind::Ref(_, _)) {\n-                    tcx.sess\n-                        .struct_span_err(\n-                            self_ty.span,\n-                            &format!(\n-                                \"first argument of `call` in `{fn_lang_item_name}` lang item must be a reference\",\n-                            ),\n-                        )\n-                        .emit();\n-                }\n-            } else {\n-                tcx.sess\n-                    .struct_span_err(\n-                        *span,\n-                        &format!(\n-                            \"`call` function in `{fn_lang_item_name}` lang item takes exactly two arguments\",\n-                        ),\n-                    )\n-                    .emit();\n-            }\n-        } else {\n-            tcx.sess\n-                .struct_span_err(\n-                    trait_item.span,\n-                    &format!(\n-                        \"`call` trait item in `{fn_lang_item_name}` lang item must be a function\",\n-                    ),\n-                )\n-                .emit();\n-        }\n-    }\n }\n \n /// Require that the user writes where clauses on GATs for the implicit"}, {"sha": "06b2b2451f0faff131c9af393b6387c59fa89647", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -247,6 +247,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 adjusted_ty,\n                 opt_input_type.as_ref().map(slice::from_ref),\n             ) {\n+                // Check for `self` receiver on the method, otherwise we can't use this as a `Fn*` trait.\n+                if !self.tcx.associated_item(ok.value.def_id).fn_has_self_parameter {\n+                    self.tcx.sess.delay_span_bug(\n+                        call_expr.span,\n+                        \"input to overloaded call fn is not a self receiver\",\n+                    );\n+                    return None;\n+                }\n+\n                 let method = self.register_infer_ok_obligations(ok);\n                 let mut autoref = None;\n                 if borrow {\n@@ -257,7 +266,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         // caused an error elsewhere.\n                         self.tcx\n                             .sess\n-                            .delay_span_bug(call_expr.span, \"input to call/call_mut is not a ref?\");\n+                            .delay_span_bug(call_expr.span, \"input to call/call_mut is not a ref\");\n                         return None;\n                     };\n \n@@ -271,6 +280,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         target: method.sig.inputs()[0],\n                     });\n                 }\n+\n                 return Some((autoref, method));\n             }\n         }\n@@ -823,7 +833,7 @@ impl<'a, 'tcx> DeferredCallResolution<'tcx> {\n                 );\n                 err.help(\n                     \"make sure the `fn`/`fn_mut`/`fn_once` lang items are defined \\\n-                     and have associated `call`/`call_mut`/`call_once` functions\",\n+                     and have correctly defined `call`/`call_mut`/`call_once` methods\",\n                 );\n                 err.emit();\n             }"}, {"sha": "c9ae82e8efbdf49fed4cce371f4e2f702a95b257", "filename": "compiler/rustc_hir_typeck/src/method/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fmod.rs?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -380,6 +380,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             return None;\n         };\n+\n+        if method_item.kind != ty::AssocKind::Fn {\n+            self.tcx.sess.delay_span_bug(tcx.def_span(method_item.def_id), \"not a method\");\n+            return None;\n+        }\n+\n         let def_id = method_item.def_id;\n         let generics = tcx.generics_of(def_id);\n "}, {"sha": "0c44edbe51a0c869bfe6b0a09b2ff98599d58041", "filename": "tests/ui/lang-items/bad-add-impl.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fbad-add-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fbad-add-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fbad-add-impl.rs?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+#![feature(no_core)]\n+#![feature(lang_items)]\n+#![no_core]\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[lang = \"add\"]\n+trait Add<T> {\n+    const add: u32 = 1u32;\n+}\n+\n+impl Add<u32> for u32 {}\n+\n+fn main() {\n+    1u32 + 1u32;\n+    //~^ ERROR cannot add `u32` to `u32`\n+}"}, {"sha": "3143729f99bb09c4337e6711c3e8009eb147b08d", "filename": "tests/ui/lang-items/bad-add-impl.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fbad-add-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fbad-add-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fbad-add-impl.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,11 @@\n+error[E0369]: cannot add `u32` to `u32`\n+  --> $DIR/bad-add-impl.rs:16:10\n+   |\n+LL |     1u32 + 1u32;\n+   |     ---- ^ ---- u32\n+   |     |\n+   |     u32\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "ff603111e94c5cfb468ab4e26fc770667e912dfb", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.bad_item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_item.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:39:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:43:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "ff603111e94c5cfb468ab4e26fc770667e912dfb", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.bad_sig.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.bad_sig.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:39:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:43:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_bad_item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_item.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_bad_sig.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_bad_sig.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_mut_bad_item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_item.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_mut_bad_sig.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_mut_bad_sig.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_once_bad_item.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_item.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "02e33c597fe8776aac5dda70068b1574400dc73b", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.fn_once_bad_sig.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.fn_once_bad_sig.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -0,0 +1,18 @@\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:42:5\n+   |\n+LL |     a();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: failed to find an overloaded call trait for closure call\n+  --> $DIR/fn-fn_mut-call-ill-formed.rs:47:5\n+   |\n+LL |     b();\n+   |     ^^^\n+   |\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "757c6538d05b032ccfff14a74ff2387b47425a6e", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.rs", "status": "modified", "additions": 28, "deletions": 6, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.rs?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -1,27 +1,49 @@\n-// Make sure that an error is reported if the `call` function of the\n-// `fn`/`fn_mut` lang item is grossly ill-formed.\n+// revisions: fn_once_bad_item fn_once_bad_sig fn_mut_bad_item fn_mut_bad_sig fn_bad_item fn_bad_sig\n \n #![feature(lang_items)]\n #![feature(no_core)]\n #![no_core]\n \n+#[lang = \"sized\"]\n+trait Sized {}\n+\n+#[cfg(any(fn_bad_item, fn_bad_sig))]\n #[lang = \"fn\"]\n trait MyFn<T> {\n+    #[cfg(fn_bad_sig)]\n+    fn call(i: i32) -> i32 { 0 }\n+\n+    #[cfg(fn_bad_item)]\n     const call: i32 = 42;\n-    //~^ ERROR: `call` trait item in `fn` lang item must be a function\n }\n \n+#[cfg(any(fn_mut_bad_item, fn_mut_bad_sig))]\n #[lang = \"fn_mut\"]\n trait MyFnMut<T> {\n-    fn call(i: i32, j: i32) -> i32 { i + j }\n-    //~^ ERROR: first argument of `call` in `fn_mut` lang item must be a reference\n+    #[cfg(fn_mut_bad_sig)]\n+    fn call_mut(i: i32) -> i32 { 0 }\n+\n+    #[cfg(fn_mut_bad_item)]\n+    const call_mut: i32 = 42;\n+}\n+\n+#[cfg(any(fn_once_bad_item, fn_once_bad_sig))]\n+#[lang = \"fn_once\"]\n+trait MyFnOnce<T> {\n+    #[cfg(fn_once_bad_sig)]\n+    fn call_once(i: i32) -> i32 { 0 }\n+\n+    #[cfg(fn_once_bad_item)]\n+    const call_once: i32 = 42;\n }\n \n fn main() {\n     let a = || 42;\n     a();\n+    //~^ ERROR failed to find an overloaded call trait for closure call\n \n     let mut i = 0;\n-    let mut b = || { i += 1; };\n+    let mut b = || { };\n     b();\n+    //~^ ERROR failed to find an overloaded call trait for closure call\n }"}, {"sha": "82bdae270c8bb316d6c218d385247a76c0f4af96", "filename": "tests/ui/lang-items/fn-fn_mut-call-ill-formed.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bda32a4023b1d3f96e56e1b2fc7510324f430316/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Ffn-fn_mut-call-ill-formed.stderr?ref=bda32a4023b1d3f96e56e1b2fc7510324f430316", "patch": "@@ -1,14 +0,0 @@\n-error: `call` trait item in `fn` lang item must be a function\n-  --> $DIR/fn-fn_mut-call-ill-formed.rs:10:5\n-   |\n-LL |     const call: i32 = 42;\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n-\n-error: first argument of `call` in `fn_mut` lang item must be a reference\n-  --> $DIR/fn-fn_mut-call-ill-formed.rs:16:16\n-   |\n-LL |     fn call(i: i32, j: i32) -> i32 { i + j }\n-   |                ^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c6e811a94fe2065187aae3684f5bcc3ba328207f", "filename": "tests/ui/lang-items/issue-86238.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fissue-86238.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3200982b7689ff496e63584c5c8f9bf707b98ae3/tests%2Fui%2Flang-items%2Fissue-86238.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flang-items%2Fissue-86238.stderr?ref=3200982b7689ff496e63584c5c8f9bf707b98ae3", "patch": "@@ -4,7 +4,7 @@ error: failed to find an overloaded call trait for closure call\n LL |     one()\n    |     ^^^^^\n    |\n-   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have associated `call`/`call_mut`/`call_once` functions\n+   = help: make sure the `fn`/`fn_mut`/`fn_once` lang items are defined and have correctly defined `call`/`call_mut`/`call_once` methods\n \n error: aborting due to previous error\n "}]}