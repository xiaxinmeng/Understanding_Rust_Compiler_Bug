{"sha": "840c4e2873476a7d6101f71e4f63b3024245ccd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0MGM0ZTI4NzM0NzZhN2Q2MTAxZjcxZTRmNjNiMzAyNDI0NWNjZDE=", "commit": {"author": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-05T00:52:48Z"}, "committer": {"name": "C", "email": "DeveloperC@protonmail.com", "date": "2020-12-29T14:03:30Z"}, "message": "refactor: moved IsZero into is_zero.rs", "tree": {"sha": "76d1b92e9b20c892a35de590273796a7f12b83ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d1b92e9b20c892a35de590273796a7f12b83ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/840c4e2873476a7d6101f71e4f63b3024245ccd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/840c4e2873476a7d6101f71e4f63b3024245ccd1", "html_url": "https://github.com/rust-lang/rust/commit/840c4e2873476a7d6101f71e4f63b3024245ccd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/840c4e2873476a7d6101f71e4f63b3024245ccd1/comments", "author": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DeveloperC286", "id": 65925405, "node_id": "MDQ6VXNlcjY1OTI1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/65925405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DeveloperC286", "html_url": "https://github.com/DeveloperC286", "followers_url": "https://api.github.com/users/DeveloperC286/followers", "following_url": "https://api.github.com/users/DeveloperC286/following{/other_user}", "gists_url": "https://api.github.com/users/DeveloperC286/gists{/gist_id}", "starred_url": "https://api.github.com/users/DeveloperC286/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DeveloperC286/subscriptions", "organizations_url": "https://api.github.com/users/DeveloperC286/orgs", "repos_url": "https://api.github.com/users/DeveloperC286/repos", "events_url": "https://api.github.com/users/DeveloperC286/events{/privacy}", "received_events_url": "https://api.github.com/users/DeveloperC286/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a1248976a00429994d5965bb31d6dcc1b7dcd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1248976a00429994d5965bb31d6dcc1b7dcd68", "html_url": "https://github.com/rust-lang/rust/commit/2a1248976a00429994d5965bb31d6dcc1b7dcd68"}], "stats": {"total": 145, "additions": 75, "deletions": 70}, "files": [{"sha": "961f6ca171b11284fccceb7c607c6e0449996470", "filename": "library/alloc/src/vec/is_zero.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/840c4e2873476a7d6101f71e4f63b3024245ccd1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840c4e2873476a7d6101f71e4f63b3024245ccd1/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fis_zero.rs?ref=840c4e2873476a7d6101f71e4f63b3024245ccd1", "patch": "@@ -0,0 +1,71 @@\n+use crate::boxed::Box;\n+\n+#[rustc_specialization_trait]\n+pub(super) unsafe trait IsZero {\n+    /// Whether this value is zero\n+    fn is_zero(&self) -> bool;\n+}\n+\n+macro_rules! impl_is_zero {\n+    ($t:ty, $is_zero:expr) => {\n+        unsafe impl IsZero for $t {\n+            #[inline]\n+            fn is_zero(&self) -> bool {\n+                $is_zero(*self)\n+            }\n+        }\n+    };\n+}\n+\n+impl_is_zero!(i16, |x| x == 0);\n+impl_is_zero!(i32, |x| x == 0);\n+impl_is_zero!(i64, |x| x == 0);\n+impl_is_zero!(i128, |x| x == 0);\n+impl_is_zero!(isize, |x| x == 0);\n+\n+impl_is_zero!(u16, |x| x == 0);\n+impl_is_zero!(u32, |x| x == 0);\n+impl_is_zero!(u64, |x| x == 0);\n+impl_is_zero!(u128, |x| x == 0);\n+impl_is_zero!(usize, |x| x == 0);\n+\n+impl_is_zero!(bool, |x| x == false);\n+impl_is_zero!(char, |x| x == '\\0');\n+\n+impl_is_zero!(f32, |x: f32| x.to_bits() == 0);\n+impl_is_zero!(f64, |x: f64| x.to_bits() == 0);\n+\n+unsafe impl<T> IsZero for *const T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n+\n+unsafe impl<T> IsZero for *mut T {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        (*self).is_null()\n+    }\n+}\n+\n+// `Option<&T>` and `Option<Box<T>>` are guaranteed to represent `None` as null.\n+// For fat pointers, the bytes that would be the pointer metadata in the `Some`\n+// variant are padding in the `None` variant, so ignoring them and\n+// zero-initializing instead is ok.\n+// `Option<&mut T>` never implements `Clone`, so there's no need for an impl of\n+// `SpecFromElem`.\n+\n+unsafe impl<T: ?Sized> IsZero for Option<&T> {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        self.is_none()\n+    }\n+}\n+\n+unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n+    #[inline]\n+    fn is_zero(&self) -> bool {\n+        self.is_none()\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "69fcfaa6a7ecf740645ffd628606f6cd86d73795", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 4, "deletions": 70, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/840c4e2873476a7d6101f71e4f63b3024245ccd1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/840c4e2873476a7d6101f71e4f63b3024245ccd1/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=840c4e2873476a7d6101f71e4f63b3024245ccd1", "patch": "@@ -97,6 +97,10 @@ pub (crate) use self::into_iter::AsIntoIter;\n \n mod into_iter;\n \n+use self::is_zero::IsZero;\n+\n+mod is_zero;\n+\n /// A contiguous growable array type, written `Vec<T>` but pronounced 'vector'.\n ///\n /// # Examples\n@@ -2042,76 +2046,6 @@ impl<T: Clone + IsZero> SpecFromElem for T {\n     }\n }\n \n-#[rustc_specialization_trait]\n-unsafe trait IsZero {\n-    /// Whether this value is zero\n-    fn is_zero(&self) -> bool;\n-}\n-\n-macro_rules! impl_is_zero {\n-    ($t:ty, $is_zero:expr) => {\n-        unsafe impl IsZero for $t {\n-            #[inline]\n-            fn is_zero(&self) -> bool {\n-                $is_zero(*self)\n-            }\n-        }\n-    };\n-}\n-\n-impl_is_zero!(i16, |x| x == 0);\n-impl_is_zero!(i32, |x| x == 0);\n-impl_is_zero!(i64, |x| x == 0);\n-impl_is_zero!(i128, |x| x == 0);\n-impl_is_zero!(isize, |x| x == 0);\n-\n-impl_is_zero!(u16, |x| x == 0);\n-impl_is_zero!(u32, |x| x == 0);\n-impl_is_zero!(u64, |x| x == 0);\n-impl_is_zero!(u128, |x| x == 0);\n-impl_is_zero!(usize, |x| x == 0);\n-\n-impl_is_zero!(bool, |x| x == false);\n-impl_is_zero!(char, |x| x == '\\0');\n-\n-impl_is_zero!(f32, |x: f32| x.to_bits() == 0);\n-impl_is_zero!(f64, |x: f64| x.to_bits() == 0);\n-\n-unsafe impl<T> IsZero for *const T {\n-    #[inline]\n-    fn is_zero(&self) -> bool {\n-        (*self).is_null()\n-    }\n-}\n-\n-unsafe impl<T> IsZero for *mut T {\n-    #[inline]\n-    fn is_zero(&self) -> bool {\n-        (*self).is_null()\n-    }\n-}\n-\n-// `Option<&T>` and `Option<Box<T>>` are guaranteed to represent `None` as null.\n-// For fat pointers, the bytes that would be the pointer metadata in the `Some`\n-// variant are padding in the `None` variant, so ignoring them and\n-// zero-initializing instead is ok.\n-// `Option<&mut T>` never implements `Clone`, so there's no need for an impl of\n-// `SpecFromElem`.\n-\n-unsafe impl<T: ?Sized> IsZero for Option<&T> {\n-    #[inline]\n-    fn is_zero(&self) -> bool {\n-        self.is_none()\n-    }\n-}\n-\n-unsafe impl<T: ?Sized> IsZero for Option<Box<T>> {\n-    #[inline]\n-    fn is_zero(&self) -> bool {\n-        self.is_none()\n-    }\n-}\n-\n ////////////////////////////////////////////////////////////////////////////////\n // Common trait implementations for Vec\n ////////////////////////////////////////////////////////////////////////////////"}]}