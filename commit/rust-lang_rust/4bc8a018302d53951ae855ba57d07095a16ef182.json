{"sha": "4bc8a018302d53951ae855ba57d07095a16ef182", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYzhhMDE4MzAyZDUzOTUxYWU4NTViYTU3ZDA3MDk1YTE2ZWYxODI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T21:03:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T21:03:01Z"}, "message": "Merge #8360\n\n8360: Fix shifting of binders in FnPointer r=flodiebold a=flodiebold\n\n - don't shift in/out for Chalk mapping (we want to have the same binders now)\r\n - do shift in when creating the signature for a closure (though it shouldn't matter much)\r\n - do shift in when lowering a `fn()` type\r\n - correctly deal with the implied binder in TypeWalk\r\n\r\nTested with the binders validator on various repos, so I'm pretty sure this doesn't mess things up :grimacing: \n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "db440a2bdd6148bc292bd20397f389671f8cb48c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db440a2bdd6148bc292bd20397f389671f8cb48c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bc8a018302d53951ae855ba57d07095a16ef182", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJga3sFCRBK7hj4Ov3rIwAAdHIIAFNeBuRsWtH77L9AhT4r1Tja\nPkHx6M6BM6p0sACPaMynuiiESu8VDh0J7TqZbFOUMAWnMzbhBcx/4CgN/qRK4Cp7\nXcCBpoX6qeIUyM53YhneOwgRw+TtctHgnNnALlQn4iswTCB04PKvz6Y6fRCWrPR6\nF2xrhr5o+m24reBAmHHxsaCsY5z2dEeUyHNyAXMRlST2EYkM6YWUpfis3e7XGyfo\nzkWjytJwcX255hUOch0Ww/i7+OHGGYjlYb22+ET93rllaC/7abmLwlx7fDdvShF0\nu6X1K0YqMi8D+hFC1ZhNKizOoYfUizpE0yDfWeM/iDsRNELP9LL1gWipJV5/JDE=\n=V9lo\n-----END PGP SIGNATURE-----\n", "payload": "tree db440a2bdd6148bc292bd20397f389671f8cb48c\nparent 7ce0e9c9ca552e063855d60df7dca65ba9953fc3\nparent 1ae967bf8e01262f1ace1c06f6670f09fcf92fd2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617656581 +0000\ncommitter GitHub <noreply@github.com> 1617656581 +0000\n\nMerge #8360\n\n8360: Fix shifting of binders in FnPointer r=flodiebold a=flodiebold\n\n - don't shift in/out for Chalk mapping (we want to have the same binders now)\r\n - do shift in when creating the signature for a closure (though it shouldn't matter much)\r\n - do shift in when lowering a `fn()` type\r\n - correctly deal with the implied binder in TypeWalk\r\n\r\nTested with the binders validator on various repos, so I'm pretty sure this doesn't mess things up :grimacing: \n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8a018302d53951ae855ba57d07095a16ef182", "html_url": "https://github.com/rust-lang/rust/commit/4bc8a018302d53951ae855ba57d07095a16ef182", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bc8a018302d53951ae855ba57d07095a16ef182/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ce0e9c9ca552e063855d60df7dca65ba9953fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ce0e9c9ca552e063855d60df7dca65ba9953fc3", "html_url": "https://github.com/rust-lang/rust/commit/7ce0e9c9ca552e063855d60df7dca65ba9953fc3"}, {"sha": "1ae967bf8e01262f1ace1c06f6670f09fcf92fd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ae967bf8e01262f1ace1c06f6670f09fcf92fd2", "html_url": "https://github.com/rust-lang/rust/commit/1ae967bf8e01262f1ace1c06f6670f09fcf92fd2"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "ff564106b7dca46325ac5ba75903991d60b54c3e", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=4bc8a018302d53951ae855ba57d07095a16ef182", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     traits::{chalk::from_chalk, FnTrait},\n     utils::{generics, variant_data, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n-    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind,\n+    ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyKind, TypeWalk,\n };\n \n use super::{\n@@ -262,7 +262,9 @@ impl<'a> InferenceContext<'a> {\n                 let sig_ty = TyKind::Function(FnPointer {\n                     num_binders: 0,\n                     sig: FnSig { abi: (), safety: chalk_ir::Safety::Safe, variadic: false },\n-                    substitution: FnSubst(Substitution::from_iter(&Interner, sig_tys.clone())),\n+                    substitution: FnSubst(\n+                        Substitution::from_iter(&Interner, sig_tys.clone()).shifted_in(&Interner),\n+                    ),\n                 })\n                 .intern(&Interner);\n                 let closure_id = self.db.intern_closure((self.owner, tgt_expr)).into();"}, {"sha": "3cbb6ad54b8583e57a0ce2096d86f191d5391921", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=4bc8a018302d53951ae855ba57d07095a16ef182", "patch": "@@ -178,8 +178,9 @@ impl<'a> TyLoweringContext<'a> {\n             }\n             TypeRef::Placeholder => TyKind::Error.intern(&Interner),\n             TypeRef::Fn(params, is_varargs) => {\n-                let substs =\n-                    Substitution::from_iter(&Interner, params.iter().map(|tr| self.lower_ty(tr)));\n+                let substs = self.with_shifted_in(DebruijnIndex::ONE, |ctx| {\n+                    Substitution::from_iter(&Interner, params.iter().map(|tr| ctx.lower_ty(tr)))\n+                });\n                 TyKind::Function(FnPointer {\n                     num_binders: 0, // FIXME lower `for<'a> fn()` correctly\n                     sig: FnSig { abi: (), safety: Safety::Safe, variadic: *is_varargs },"}, {"sha": "3047fbacb305d37653a5aa1b287bfc1930b8282d", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=4bc8a018302d53951ae855ba57d07095a16ef182", "patch": "@@ -3,7 +3,7 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::{cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData};\n+use chalk_ir::{cast::Cast, interner::HasInterner, LifetimeData};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n@@ -25,7 +25,7 @@ impl ToChalk for Ty {\n             TyKind::Ref(m, ty) => ref_to_chalk(db, m, ty),\n             TyKind::Array(ty) => array_to_chalk(db, ty),\n             TyKind::Function(FnPointer { sig, substitution: substs, .. }) => {\n-                let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db).shifted_in(&Interner));\n+                let substitution = chalk_ir::FnSubst(substs.0.to_chalk(db));\n                 chalk_ir::TyKind::Function(chalk_ir::FnPointer {\n                     num_binders: 0,\n                     sig,\n@@ -132,10 +132,7 @@ impl ToChalk for Ty {\n                 ..\n             }) => {\n                 assert_eq!(num_binders, 0);\n-                let substs = crate::FnSubst(from_chalk(\n-                    db,\n-                    substitution.0.shifted_out(&Interner).expect(\"fn ptr should have no binders\"),\n-                ));\n+                let substs = crate::FnSubst(from_chalk(db, substitution.0));\n                 TyKind::Function(FnPointer { num_binders, sig, substitution: substs })\n             }\n             chalk_ir::TyKind::BoundVar(idx) => TyKind::BoundVar(idx),"}, {"sha": "e1e77ba37a80736c40aca63a7676faf7de41a51e", "filename": "crates/hir_ty/src/walk.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bc8a018302d53951ae855ba57d07095a16ef182/crates%2Fhir_ty%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fwalk.rs?ref=4bc8a018302d53951ae855ba57d07095a16ef182", "patch": "@@ -92,6 +92,13 @@ pub trait TypeWalk {\n         self\n     }\n \n+    fn shifted_in(self, _interner: &Interner) -> Self\n+    where\n+        Self: Sized,\n+    {\n+        self.shifted_in_from(DebruijnIndex::ONE)\n+    }\n+\n     /// Shifts up debruijn indices of `TyKind::Bound` vars by `n`.\n     fn shifted_in_from(self, n: DebruijnIndex) -> Self\n     where\n@@ -149,6 +156,9 @@ impl TypeWalk for Ty {\n             TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk(f);\n             }\n+            TyKind::Function(fn_pointer) => {\n+                fn_pointer.substitution.0.walk(f);\n+            }\n             _ => {\n                 if let Some(substs) = self.substs() {\n                     for t in substs.iter(&Interner) {\n@@ -180,6 +190,9 @@ impl TypeWalk for Ty {\n             TyKind::Slice(ty) | TyKind::Array(ty) | TyKind::Ref(_, ty) | TyKind::Raw(_, ty) => {\n                 ty.walk_mut_binders(f, binders);\n             }\n+            TyKind::Function(fn_pointer) => {\n+                fn_pointer.substitution.0.walk_mut_binders(f, binders.shifted_in());\n+            }\n             _ => {\n                 if let Some(substs) = self.substs_mut() {\n                     substs.walk_mut_binders(f, binders);"}]}