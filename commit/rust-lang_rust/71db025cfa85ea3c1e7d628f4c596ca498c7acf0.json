{"sha": "71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "node_id": "C_kwDOAAsO6NoAKDcxZGIwMjVjZmE4NWVhM2MxZTdkNjI4ZjRjNTk2Y2E0OThjN2FjZjA", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-07T19:11:06Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-11T17:46:02Z"}, "message": "Account for method call chains split across multiple bindings", "tree": {"sha": "17572e8ecd0cd5aa7394ecd315d950f20f92d103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17572e8ecd0cd5aa7394ecd315d950f20f92d103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "html_url": "https://github.com/rust-lang/rust/commit/71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bc975d27f86aaa1d3d94921c9c042477b4e88b", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bc975d27f86aaa1d3d94921c9c042477b4e88b", "html_url": "https://github.com/rust-lang/rust/commit/64bc975d27f86aaa1d3d94921c9c042477b4e88b"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "87ab863fa7bcd0284b956028fa8c7737a352c8d4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "patch": "@@ -2977,6 +2977,18 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             prev_ty = self.resolve_vars_if_possible(\n                                 typeck_results.expr_ty_adjusted_opt(expr).unwrap_or(tcx.ty_error()),\n                             );\n+\n+                            if let hir::ExprKind::Path(hir::QPath::Resolved(None, path)) = expr.kind\n+                                && let hir::Path { res: hir::def::Res::Local(hir_id), .. } = path\n+                                && let Some(hir::Node::Pat(binding)) = self.tcx.hir().find(*hir_id)\n+                                && let parent_hir_id = self.tcx.hir().get_parent_node(binding.hir_id)\n+                                && let Some(hir::Node::Local(local)) = self.tcx.hir().find(parent_hir_id)\n+                                && let Some(binding_expr) = local.init\n+                            {\n+                                // We've reached the root of the method call chain and it is a\n+                                // binding. Get the binding creation and try to continue the chain.\n+                                expr = binding_expr;\n+                            }\n                         }\n \n                         // We want the type before deref coercions, otherwise we talk about `&[_]`"}, {"sha": "89f5c45d7a978714999c34f2400e3e16a7642269", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "patch": "@@ -25,11 +25,13 @@ LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_rece\n note: the method call chain might not have had the expected associated types\n   --> $DIR/issue-34334.rs:5:36\n    |\n+LL |     let sr: Vec<(u32, _, _) = vec![];\n+   |                               ------ this expression has type `Vec<(_, _, _)>`\n+...\n LL |     let sr2: Vec<(u32, _, _)> = sr.iter().map(|(faction, th_sender, th_receiver)| {}).collect();\n-   |                                 -- ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated type `std::iter::Iterator::Item` changed to `()` here\n-   |                                 |  |\n-   |                                 |  associated type `std::iter::Iterator::Item` is `&(_, _, _)` here\n-   |                                 this expression has type `Vec<(_, _, _)>`\n+   |                                    ^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ associated type `std::iter::Iterator::Item` changed to `()` here\n+   |                                    |\n+   |                                    associated type `std::iter::Iterator::Item` is `&(_, _, _)` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "7fe786dcfb5033de329b2d682e64410d5fc66991", "filename": "src/test/ui/issues/issue-66923-show-error-for-correct-call.stderr", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66923-show-error-for-correct-call.stderr?ref=71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "patch": "@@ -11,10 +11,10 @@ LL |     let x2: Vec<f64> = x1.into_iter().collect();\n note: the method call chain might not have had the expected associated types\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:8:27\n    |\n+LL |     let x1: &[f64] = &v;\n+   |                      -- this expression has type `&Vec<f64>`\n LL |     let x2: Vec<f64> = x1.into_iter().collect();\n-   |                        -- ^^^^^^^^^^^ associated type `std::iter::Iterator::Item` is `&f64` here\n-   |                        |\n-   |                        this expression has type `&[f64]`\n+   |                           ^^^^^^^^^^^ associated type `std::iter::Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |\n@@ -34,10 +34,11 @@ LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n note: the method call chain might not have had the expected associated types\n   --> $DIR/issue-66923-show-error-for-correct-call.rs:12:17\n    |\n+LL |     let x1: &[f64] = &v;\n+   |                      -- this expression has type `&Vec<f64>`\n+...\n LL |     let x3 = x1.into_iter().collect::<Vec<f64>>();\n-   |              -- ^^^^^^^^^^^ associated type `std::iter::Iterator::Item` is `&f64` here\n-   |              |\n-   |              this expression has type `&[f64]`\n+   |                 ^^^^^^^^^^^ associated type `std::iter::Iterator::Item` is `&f64` here\n note: required by a bound in `collect`\n   --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n    |"}, {"sha": "e17b471b69293575129b6e60c9abd5317f297835", "filename": "src/test/ui/iterators/invalid-iterator-chain.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.rs?ref=71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "patch": "@@ -19,4 +19,13 @@ fn main() {\n     );\n     println!(\"{}\", vec![0, 1].iter().map(|x| { x; }).sum::<i32>()); //~ ERROR E0277\n     println!(\"{}\", vec![(), ()].iter().sum::<i32>()); //~ ERROR E0277\n+    let a = vec![0];\n+    let b = a.into_iter();\n+    let c = b.map(|x| x + 1);\n+    let d = c.filter(|x| *x > 10 );\n+    let e = d.map(|x| {\n+        x + 1;\n+    });\n+    let f = e.filter(|_| false);\n+    let g: Vec<i32> = f.collect(); //~ ERROR E0277\n }"}, {"sha": "8bf7eb93a720b334ca3f6194c66c6304263b5b01", "filename": "src/test/ui/iterators/invalid-iterator-chain.stderr", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/71db025cfa85ea3c1e7d628f4c596ca498c7acf0/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finvalid-iterator-chain.stderr?ref=71db025cfa85ea3c1e7d628f4c596ca498c7acf0", "patch": "@@ -118,6 +118,40 @@ note: required by a bound in `std::iter::Iterator::sum`\n LL |         S: Sum<Self::Item>,\n    |            ^^^^^^^^^^^^^^^ required by this bound in `std::iter::Iterator::sum`\n \n-error: aborting due to 4 previous errors\n+error[E0277]: a value of type `Vec<i32>` cannot be built from an iterator over elements of type `()`\n+  --> $DIR/invalid-iterator-chain.rs:30:23\n+   |\n+LL |     let g: Vec<i32> = f.collect();\n+   |                       ^ ------- required by a bound introduced by this call\n+   |                       |\n+   |                       value of type `Vec<i32>` cannot be built from `std::iter::Iterator<Item=()>`\n+   |\n+   = help: the trait `FromIterator<()>` is not implemented for `Vec<i32>`\n+   = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n+note: the method call chain might not have had the expected associated types\n+  --> $DIR/invalid-iterator-chain.rs:23:15\n+   |\n+LL |       let a = vec![0];\n+   |               ------- this expression has type `Vec<{integer}>`\n+LL |       let b = a.into_iter();\n+   |                 ^^^^^^^^^^^ associated type `std::iter::Iterator::Item` is `{integer}` here\n+LL |       let c = b.map(|x| x + 1);\n+   |                 --------------\n+LL |       let d = c.filter(|x| *x > 10 );\n+   |                 --------------------\n+LL |       let e = d.map(|x| {\n+   |  _______________^\n+LL | |         x + 1;\n+LL | |     });\n+   | |______^ associated type `std::iter::Iterator::Item` changed to `()` here\n+LL |       let f = e.filter(|_| false);\n+   |                 -----------------\n+note: required by a bound in `collect`\n+  --> $SRC_DIR/core/src/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |     fn collect<B: FromIterator<Self::Item>>(self) -> B\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `collect`\n+\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}]}