{"sha": "8f14592aa268a2712f7e229a792c92efcf5b1a85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMTQ1OTJhYTI2OGEyNzEyZjdlMjI5YTc5MmM5MmVmY2Y1YjFhODU=", "commit": {"author": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-05-07T17:09:15Z"}, "committer": {"name": "Paul Trojahn", "email": "paul.trojahn@gmail.com", "date": "2021-05-09T15:56:50Z"}, "message": "Improve \"panic message is not a string literal\" warning\n\nThis warning always referenced panic! even in case of an\nassert. Related to #84656", "tree": {"sha": "b658da6828324c2b7964f1de7fd5311553dfe4d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b658da6828324c2b7964f1de7fd5311553dfe4d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f14592aa268a2712f7e229a792c92efcf5b1a85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f14592aa268a2712f7e229a792c92efcf5b1a85", "html_url": "https://github.com/rust-lang/rust/commit/8f14592aa268a2712f7e229a792c92efcf5b1a85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f14592aa268a2712f7e229a792c92efcf5b1a85/comments", "author": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptrojahn", "id": 45311997, "node_id": "MDQ6VXNlcjQ1MzExOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/45311997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptrojahn", "html_url": "https://github.com/ptrojahn", "followers_url": "https://api.github.com/users/ptrojahn/followers", "following_url": "https://api.github.com/users/ptrojahn/following{/other_user}", "gists_url": "https://api.github.com/users/ptrojahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptrojahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptrojahn/subscriptions", "organizations_url": "https://api.github.com/users/ptrojahn/orgs", "repos_url": "https://api.github.com/users/ptrojahn/repos", "events_url": "https://api.github.com/users/ptrojahn/events{/privacy}", "received_events_url": "https://api.github.com/users/ptrojahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1773f14a24c49356b384e45ebb45643bc9bef2c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1773f14a24c49356b384e45ebb45643bc9bef2c4", "html_url": "https://github.com/rust-lang/rust/commit/1773f14a24c49356b384e45ebb45643bc9bef2c4"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "070bc3522a453c28cc59199bb086b585ab6e4d83", "filename": "compiler/rustc_lint/src/non_fmt_panic.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f14592aa268a2712f7e229a792c92efcf5b1a85/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f14592aa268a2712f7e229a792c92efcf5b1a85/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnon_fmt_panic.rs?ref=8f14592aa268a2712f7e229a792c92efcf5b1a85", "patch": "@@ -4,7 +4,7 @@ use rustc_errors::{pluralize, Applicability};\n use rustc_hir as hir;\n use rustc_middle::ty;\n use rustc_parse_format::{ParseMode, Parser, Piece};\n-use rustc_span::{sym, symbol::kw, InnerSpan, Span, Symbol};\n+use rustc_span::{hygiene, sym, symbol::kw, symbol::SymbolStr, InnerSpan, Span, Symbol};\n \n declare_lint! {\n     /// The `non_fmt_panic` lint detects `panic!(..)` invocations where the first\n@@ -67,7 +67,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n \n     // The argument is *not* a string literal.\n \n-    let (span, panic) = panic_call(cx, f);\n+    let (span, panic, symbol_str) = panic_call(cx, f);\n \n     // Find the span of the argument to `panic!()`, before expansion in the\n     // case of `panic!(some_macro!())`.\n@@ -95,7 +95,7 @@ fn check_panic<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>, arg: &'tc\n         }\n         if arg_macro.map_or(false, |id| cx.tcx.is_diagnostic_item(sym::format_macro, id)) {\n             // A case of `panic!(format!(..))`.\n-            l.note(\"the panic!() macro supports formatting, so there's no need for the format!() macro here\");\n+            l.note(format!(\"the {}!() macro supports formatting, so there's no need for the format!() macro here\", symbol_str).as_str());\n             if let Some((open, close, _)) = find_delimiters(cx, arg_span) {\n                 l.multipart_suggestion(\n                     \"remove the `format!(..)` macro call\",\n@@ -160,7 +160,7 @@ fn check_panic_str<'tcx>(\n         Parser::new(fmt.as_ref(), style, snippet.clone(), false, ParseMode::Format);\n     let n_arguments = (&mut fmt_parser).filter(|a| matches!(a, Piece::NextArgument(_))).count();\n \n-    let (span, _) = panic_call(cx, f);\n+    let (span, _, _) = panic_call(cx, f);\n \n     if n_arguments > 0 && fmt_parser.errors.is_empty() {\n         let arg_spans: Vec<_> = match &fmt_parser.arg_places[..] {\n@@ -230,7 +230,7 @@ fn find_delimiters<'tcx>(cx: &LateContext<'tcx>, span: Span) -> Option<(Span, Sp\n     ))\n }\n \n-fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol) {\n+fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span, Symbol, SymbolStr) {\n     let mut expn = f.span.ctxt().outer_expn_data();\n \n     let mut panic_macro = kw::Empty;\n@@ -248,5 +248,10 @@ fn panic_call<'tcx>(cx: &LateContext<'tcx>, f: &'tcx hir::Expr<'tcx>) -> (Span,\n         }\n     }\n \n-    (expn.call_site, panic_macro)\n+    let macro_symbol = if let hygiene::ExpnKind::Macro(_, symbol) = expn.kind {\n+        symbol\n+    } else {\n+        Symbol::intern(\"panic\")\n+    };\n+    (expn.call_site, panic_macro, macro_symbol.as_str())\n }"}, {"sha": "77390aae2d688a0d87630bde952525821f62ad95", "filename": "src/test/ui/non-fmt-panic.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f14592aa268a2712f7e229a792c92efcf5b1a85/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f14592aa268a2712f7e229a792c92efcf5b1a85/src%2Ftest%2Fui%2Fnon-fmt-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.rs?ref=8f14592aa268a2712f7e229a792c92efcf5b1a85", "patch": "@@ -36,6 +36,8 @@ fn main() {\n     panic!(a!()); //~ WARN panic message is not a string literal\n \n     panic!(format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n+    assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n+    debug_assert!(false, format!(\"{}\", 1)); //~ WARN panic message is not a string literal\n \n     panic![123]; //~ WARN panic message is not a string literal\n     panic!{123}; //~ WARN panic message is not a string literal"}, {"sha": "3278eb5f0238e41db4b3b71a8731755c9b7dddaf", "filename": "src/test/ui/non-fmt-panic.stderr", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8f14592aa268a2712f7e229a792c92efcf5b1a85/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8f14592aa268a2712f7e229a792c92efcf5b1a85/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-fmt-panic.stderr?ref=8f14592aa268a2712f7e229a792c92efcf5b1a85", "patch": "@@ -213,7 +213,33 @@ LL |     panic!(\"{}\", 1);\n    |           --     --\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:40:12\n+  --> $DIR/non-fmt-panic.rs:39:20\n+   |\n+LL |     assert!(false, format!(\"{}\", 1));\n+   |                    ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+   = note: the assert!() macro supports formatting, so there's no need for the format!() macro here\n+help: remove the `format!(..)` macro call\n+   |\n+LL |     assert!(false, \"{}\", 1);\n+   |                   --     --\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:40:26\n+   |\n+LL |     debug_assert!(false, format!(\"{}\", 1));\n+   |                          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: this is no longer accepted in Rust 2021\n+   = note: the debug_assert!() macro supports formatting, so there's no need for the format!() macro here\n+help: remove the `format!(..)` macro call\n+   |\n+LL |     debug_assert!(false, \"{}\", 1);\n+   |                         --     --\n+\n+warning: panic message is not a string literal\n+  --> $DIR/non-fmt-panic.rs:42:12\n    |\n LL |     panic![123];\n    |            ^^^\n@@ -229,7 +255,7 @@ LL |     std::panic::panic_any(123);\n    |     ^^^^^^^^^^^^^^^^^^^^^^   ^\n \n warning: panic message is not a string literal\n-  --> $DIR/non-fmt-panic.rs:41:12\n+  --> $DIR/non-fmt-panic.rs:43:12\n    |\n LL |     panic!{123};\n    |            ^^^\n@@ -244,5 +270,5 @@ help: or use std::panic::panic_any instead\n LL |     std::panic::panic_any(123);\n    |     ^^^^^^^^^^^^^^^^^^^^^^   ^\n \n-warning: 18 warnings emitted\n+warning: 20 warnings emitted\n "}]}