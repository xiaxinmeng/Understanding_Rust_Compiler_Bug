{"sha": "3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMGY1ZGM5ZWM0N2Y3Mjk1YTUzNGIyYWNhNzc5NTU5MWNlNGEzYTA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-27T17:01:38Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-07-27T17:01:38Z"}, "message": "Fix a bug when the same function is called with different signatures", "tree": {"sha": "a12430dd7bf8dee0769fdd92f19ce29f4295b9b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12430dd7bf8dee0769fdd92f19ce29f4295b9b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "html_url": "https://github.com/rust-lang/rust/commit/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab00acfb55eafa3df8edecbd5f54c7d678784ee7", "html_url": "https://github.com/rust-lang/rust/commit/ab00acfb55eafa3df8edecbd5f54c7d678784ee7"}], "stats": {"total": 19, "additions": 15, "deletions": 4}, "files": [{"sha": "35e124c5d2d609b14b7bbdcdd45dd833b9b7bafb", "filename": "example.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example.rs?ref=3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "patch": "@@ -110,10 +110,16 @@ fn use_const() -> u8 {\n     Abc\n }\n \n-fn call_closure() {\n+fn call_closure_3arg() {\n     (|_, _, _| {\n \n-    })(0u8, 42u8, 0u8)\n+    })(0u8, 42u16, 0u8)\n+}\n+\n+fn call_closure_2arg() {\n+    (|_, _| {\n+\n+    })(0u8, 42u16)\n }\n \n fn eq_char(a: char, b: char) -> bool {"}, {"sha": "251d9603aa6afec1d8baaded42f5f6de025d3423", "filename": "src/abi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "patch": "@@ -12,11 +12,12 @@ pub fn cton_sig_from_fn_ty<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>, fn_ty: Ty<\n         Abi::Rust => (CallConv::SystemV, sig.inputs().to_vec(), sig.output()),\n         Abi::RustCall => {\n             println!(\"rust-call sig: {:?} inputs: {:?} output: {:?}\", sig, sig.inputs(), sig.output());\n+            assert_eq!(sig.inputs().len(), 2);\n             let extra_args = match sig.inputs().last().unwrap().sty {\n                 ty::TyTuple(ref tupled_arguments) => tupled_arguments,\n                 _ => bug!(\"argument to function with \\\"rust-call\\\" ABI is not a tuple\"),\n             };\n-            let mut inputs: Vec<Ty> = sig.inputs()[0..sig.inputs().len() - 1].to_vec();\n+            let mut inputs: Vec<Ty> = vec![sig.inputs()[0]];\n             inputs.extend(extra_args.into_iter());\n             (\n                 CallConv::SystemV,\n@@ -96,7 +97,10 @@ impl<'a, 'tcx: 'a> FunctionCx<'a, 'tcx> {\n         let func_id = *self.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n             let fn_ty = inst.ty(tcx);\n             let sig = cton_sig_from_fn_ty(tcx, fn_ty);\n-            module.declare_function(&tcx.absolute_item_path_str(inst.def_id()), Linkage::Local, &sig).unwrap()\n+            let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n+            let mut name = String::new();\n+            def_path_based_names.push_instance_as_string(inst, &mut name);\n+            module.declare_function(&name, Linkage::Local, &sig).unwrap()\n         });\n         module.declare_func_in_func(func_id, &mut self.bcx.func)\n     }"}, {"sha": "e58a8af828530503b892bb3e85bff79ba7fcd066", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=3a0f5dc9ec47f7295a534b2aca7795591ce4a3a0", "patch": "@@ -23,6 +23,7 @@ pub fn trans_mono_item<'a, 'tcx: 'a>(cx: &mut CodegenCx<'a, 'tcx, CurrentBackend\n                 let func_id = {\n                     let module = &mut cx.module;\n                     *cx.def_id_fn_id_map.entry(inst).or_insert_with(|| {\n+                        // WARNING: keep in sync with FunctionCx::get_function_ref\n                         let def_path_based_names = ::rustc_mir::monomorphize::item::DefPathBasedNames::new(tcx, false, false);\n                         let mut name = String::new();\n                         def_path_based_names.push_instance_as_string(inst, &mut name);"}]}