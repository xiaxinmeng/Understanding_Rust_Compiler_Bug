{"sha": "e32eceefe1ca3efeef123309eaa154d27d31788b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMmVjZWVmZTFjYTNlZmVlZjEyMzMwOWVhYTE1NGQyN2QzMTc4OGI=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-05T16:35:02Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-07-14T00:21:54Z"}, "message": "Remove unnecessary CrateNum from Cache.externs\n\nIt can be found from ExternalCrate.", "tree": {"sha": "7d46890edbd4dcc2f992d78ca11abd934319142a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d46890edbd4dcc2f992d78ca11abd934319142a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32eceefe1ca3efeef123309eaa154d27d31788b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32eceefe1ca3efeef123309eaa154d27d31788b", "html_url": "https://github.com/rust-lang/rust/commit/e32eceefe1ca3efeef123309eaa154d27d31788b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32eceefe1ca3efeef123309eaa154d27d31788b/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca", "html_url": "https://github.com/rust-lang/rust/commit/3e1c75c6e25a4db968066bd2ef2dabc7c504d7ca"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "1d3a8c7a8b334b3b4ef6c090bece38a879fe1e7d", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=e32eceefe1ca3efeef123309eaa154d27d31788b", "patch": "@@ -118,7 +118,7 @@ crate struct Crate {\n     crate name: Symbol,\n     crate src: FileName,\n     crate module: Item,\n-    crate externs: Vec<(CrateNum, ExternalCrate)>,\n+    crate externs: Vec<ExternalCrate>,\n     crate primitives: ThinVec<(DefId, PrimitiveType)>,\n     // These are later on moved into `CACHEKEY`, leaving the map empty.\n     // Only here so that they can be filtered through the rustdoc passes.\n@@ -133,14 +133,14 @@ crate struct TraitWithExtraInfo {\n     crate is_notable: bool,\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)]\n crate struct ExternalCrate {\n     crate crate_num: CrateNum,\n }\n \n impl ExternalCrate {\n     #[inline]\n-    fn def_id(&self) -> DefId {\n+    crate fn def_id(&self) -> DefId {\n         DefId { krate: self.crate_num, index: CRATE_DEF_INDEX }\n     }\n "}, {"sha": "8896f70a317dd3497cd92d46c32611ccf29e0172", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=e32eceefe1ca3efeef123309eaa154d27d31788b", "patch": "@@ -1,9 +1,9 @@\n use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n-    inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n-    Visibility,\n+    inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n+    ItemKind, Lifetime, Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type,\n+    TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -35,11 +35,11 @@ crate fn krate(cx: &mut DocContext<'_>) -> Crate {\n \n     let mut externs = Vec::new();\n     for &cnum in cx.tcx.crates(()).iter() {\n-        externs.push((cnum, cnum.clean(cx)));\n+        externs.push(ExternalCrate { crate_num: cnum });\n         // Analyze doc-reachability for extern items\n         LibEmbargoVisitor::new(cx).visit_lib(cnum);\n     }\n-    externs.sort_by(|&(a, _), &(b, _)| a.cmp(&b));\n+    externs.sort_unstable();\n \n     // Clean the crate, translating the entire librustc_ast AST to one that is\n     // understood by rustdoc."}, {"sha": "5ea2cdc2ad9093a239b8615303e409af1b828a72", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32eceefe1ca3efeef123309eaa154d27d31788b/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=e32eceefe1ca3efeef123309eaa154d27d31788b", "patch": "@@ -151,19 +151,18 @@ impl Cache {\n \n         // Cache where all our extern crates are located\n         // FIXME: this part is specific to HTML so it'd be nice to remove it from the common code\n-        for &(n, ref e) in &krate.externs {\n+        for &e in &krate.externs {\n             let name = e.name(tcx);\n             let extern_url = extern_html_root_urls.get(&*name.as_str()).map(|u| &**u);\n-            let did = DefId { krate: n, index: CRATE_DEF_INDEX };\n-            self.extern_locations.insert(n, e.location(extern_url, &dst, tcx));\n-            self.external_paths.insert(did, (vec![name.to_string()], ItemType::Module));\n+            self.extern_locations.insert(e.crate_num, e.location(extern_url, &dst, tcx));\n+            self.external_paths.insert(e.def_id(), (vec![name.to_string()], ItemType::Module));\n         }\n \n         // Cache where all known primitives have their documentation located.\n         //\n         // Favor linking to as local extern as possible, so iterate all crates in\n         // reverse topological order.\n-        for &(_, ref e) in krate.externs.iter().rev() {\n+        for &e in krate.externs.iter().rev() {\n             for &(def_id, prim) in &e.primitives(tcx) {\n                 self.primitive_locations.insert(prim, def_id);\n             }"}]}