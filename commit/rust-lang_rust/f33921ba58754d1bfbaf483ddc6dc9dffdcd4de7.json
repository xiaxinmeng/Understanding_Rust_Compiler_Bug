{"sha": "f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMzkyMWJhNTg3NTRkMWJmYmFmNDgzZGRjNmRjOWRmZmRjZDRkZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-28T01:04:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-28T01:04:05Z"}, "message": "Auto merge of #53272 - mark-i-m:anon_param_error_now, r=nikomatsakis\n\nWarn on anon params in 2015 edition\n\ncc #41686 https://github.com/rust-lang/rfcs/pull/2522\ncc  @Centril @nikomatsakis\n\nTODO:\n- [x] Make sure the tests pass.\n- [x] Make sure there is rustfix-able suggestion. Current plan is to just suggest `_ : Foo`\n- [x] Add a rustfix ui test.\n\nEDIT: It seems I already did the last two in #48309", "tree": {"sha": "f03d051087d5259a9034002f30fa5e5803d56b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f03d051087d5259a9034002f30fa5e5803d56b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "html_url": "https://github.com/rust-lang/rust/commit/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c2b371ebc5b538a24e6589245ce524ba3e4ce18", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c2b371ebc5b538a24e6589245ce524ba3e4ce18", "html_url": "https://github.com/rust-lang/rust/commit/8c2b371ebc5b538a24e6589245ce524ba3e4ce18"}, {"sha": "548f28e194cd27937fb569afec3eb5bd87d6a90b", "url": "https://api.github.com/repos/rust-lang/rust/commits/548f28e194cd27937fb569afec3eb5bd87d6a90b", "html_url": "https://github.com/rust-lang/rust/commit/548f28e194cd27937fb569afec3eb5bd87d6a90b"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "cc0548c0dffcd4acc3eadea3caff5b8112665356", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -266,7 +266,7 @@ macro_rules! late_lint_methods {\n \n macro_rules! expand_lint_pass_methods {\n     ($context:ty, [$($(#[$attr:meta])* fn $name:ident($($param:ident: $arg:ty),*);)*]) => (\n-        $(#[inline(always)] fn $name(&mut self, $context, $(_: $arg),*) {})*\n+        $(#[inline(always)] fn $name(&mut self, _: $context, $(_: $arg),*) {})*\n     )\n }\n "}, {"sha": "6c32107c96e308bfdb8ed8485096ed1850b501c3", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -46,7 +46,6 @@ use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n-use syntax::edition::Edition;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n@@ -629,8 +628,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n declare_lint! {\n     pub ANONYMOUS_PARAMETERS,\n     Allow,\n-    \"detects anonymous parameters\",\n-    Edition::Edition2018 => Warn\n+    \"detects anonymous parameters\"\n }\n \n /// Checks for use of anonymous parameters (RFC 1685)"}, {"sha": "05b11e3ba3a4c82a2de48a483a2795b091a36f7a", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -277,7 +277,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(ANONYMOUS_PARAMETERS),\n             reference: \"issue #41686 <https://github.com/rust-lang/rust/issues/41686>\",\n-            edition: None,\n+            edition: Some(Edition::Edition2018),\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),"}, {"sha": "70de4a6f2b6173b2fce64eb5f5a7bd50b53c4db0", "filename": "src/libstd/sys/windows/backtrace/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace%2Fmod.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -152,7 +152,14 @@ type StackWalk64Fn = unsafe extern \"system\" fn(\n trait StackWalker {\n     type Item: StackFrame;\n \n-    fn walk(&self, c::DWORD, c::HANDLE, c::HANDLE, &mut Self::Item, &mut c::CONTEXT) -> c::BOOL;\n+    fn walk(\n+        &self,\n+        _: c::DWORD,\n+        _: c::HANDLE,\n+        _: c::HANDLE,\n+        _: &mut Self::Item,\n+        _: &mut c::CONTEXT\n+    ) -> c::BOOL;\n }\n \n impl StackWalker for StackWalkExFn {"}, {"sha": "691c3159a52616e67394496647246d2bd44199ee", "filename": "src/test/ui/anon-params-deprecated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanon-params-deprecated.stderr?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -9,7 +9,7 @@ note: lint level defined here\n    |\n LL | #![warn(anonymous_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -18,7 +18,7 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                              ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n warning: anonymous parameters are deprecated and will be removed in the next edition.\n@@ -27,6 +27,6 @@ warning: anonymous parameters are deprecated and will be removed in the next edi\n LL |     fn bar_with_default_impl(String, String) {}\n    |                                      ^^^^^^ help: Try naming the parameter or explicitly ignoring it: `_: String`\n    |\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n "}, {"sha": "c5ba5beeca7a57de53875488fcec1ad0f0e9fc7d", "filename": "src/test/ui/chalkify/lower_trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -12,9 +12,9 @@\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<S, T, U> {\n-    fn s(S) -> S;\n-    fn t(T) -> T;\n-    fn u(U) -> U;\n+    fn s(_: S) -> S;\n+    fn t(_: T) -> T;\n+    fn u(_: U) -> U;\n }\n \n fn main() {"}, {"sha": "7fc48cfd56ddcc3b0ffda6253f3fd8ce9c0674ad", "filename": "src/test/ui/chalkify/lower_trait_higher_rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_higher_rank.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -13,7 +13,7 @@\n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<F> where for<'a> F: Fn(&'a (u8, u16)) -> &'a u8\n {\n-    fn s(F) -> F;\n+    fn s(_: F) -> F;\n }\n \n fn main() {"}, {"sha": "57e95e39cd9960ee4547344836f0160b0848b706", "filename": "src/test/ui/chalkify/lower_trait_where_clause.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -15,9 +15,9 @@ use std::borrow::Borrow;\n \n #[rustc_dump_program_clauses] //~ ERROR program clause dump\n trait Foo<'a, 'b, S, T, U> where S: Debug, T: Borrow<U>, U: ?Sized, 'a: 'b, U: 'b {\n-    fn s(S) -> S;\n-    fn t(T) -> T;\n-    fn u(U) -> U;\n+    fn s(_: S) -> S;\n+    fn t(_: T) -> T;\n+    fn u(_: U) -> U;\n }\n \n fn main() {"}, {"sha": "c239131ee1685af1139868f186f5cdee44f69e3b", "filename": "src/test/ui/future-incompatible-lint-group.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffuture-incompatible-lint-group.stderr?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -10,7 +10,7 @@ note: lint level defined here\n LL | #![deny(future_incompatible)]\n    |         ^^^^^^^^^^^^^^^^^^^\n    = note: #[deny(anonymous_parameters)] implied by #[deny(future_incompatible)]\n-   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue #41686 <https://github.com/rust-lang/rust/issues/41686>\n \n error: aborting due to previous error"}, {"sha": "69f6d202f14ade457d4ac0cde23a72cc8ad61815", "filename": "src/test/ui/impl-trait/where-allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fwhere-allowed.rs?ref=f33921ba58754d1bfbaf483ddc6dc9dffdcd4de7", "patch": "@@ -125,7 +125,7 @@ trait InTraitDefnReturn {\n // Allowed and disallowed in trait impls\n trait DummyTrait {\n     type Out;\n-    fn in_trait_impl_parameter(impl Debug);\n+    fn in_trait_impl_parameter(_: impl Debug);\n     fn in_trait_impl_return() -> Self::Out;\n }\n impl DummyTrait for () {"}]}