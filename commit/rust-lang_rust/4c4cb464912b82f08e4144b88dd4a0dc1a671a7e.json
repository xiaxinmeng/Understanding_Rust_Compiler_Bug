{"sha": "4c4cb464912b82f08e4144b88dd4a0dc1a671a7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNGNiNDY0OTEyYjgyZjA4ZTQxNDRiODhkZDRhMGRjMWE2NzFhN2U=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T00:02:15Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-05-21T16:07:48Z"}, "message": "Use `collect()` instead of manually inserting elements into maps", "tree": {"sha": "19d4e92fad791ac4fb8f09be78ab50e9564f8a63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d4e92fad791ac4fb8f09be78ab50e9564f8a63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e", "html_url": "https://github.com/rust-lang/rust/commit/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39", "html_url": "https://github.com/rust-lang/rust/commit/8ff6ffd88897c29a494b1dcabd5bd98b9cde0a39"}], "stats": {"total": 88, "additions": 42, "deletions": 46}, "files": [{"sha": "bd4cb89939e1d870d23348ed8d5e1511d842ffa4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 42, "deletions": 46, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c4cb464912b82f08e4144b88dd4a0dc1a671a7e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4c4cb464912b82f08e4144b88dd4a0dc1a671a7e", "patch": "@@ -1274,37 +1274,35 @@ impl<'a> Resolver<'a> {\n \n     pub fn into_outputs(self) -> ResolverOutputs {\n         let definitions = self.definitions;\n-        let extern_crate_map = {\n-            let mut map = FxHashMap::default();\n-            for (k, v) in self.extern_crate_map.into_iter() {\n-                map.insert(definitions.local_def_id(k).to_def_id(), v);\n-            }\n-            map\n-        };\n-        let export_map = {\n-            let mut map = FxHashMap::default();\n-            for (k, v) in self.export_map.into_iter() {\n-                map.insert(\n+        let extern_crate_map = self\n+            .extern_crate_map\n+            .into_iter()\n+            .map(|(k, v)| (definitions.local_def_id(k).to_def_id(), v))\n+            .collect();\n+        let export_map = self\n+            .export_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n                     k,\n                     v.into_iter()\n                         .map(|e| e.map_id(|id| definitions.node_id_to_hir_id(id)))\n                         .collect(),\n-                );\n-            }\n-            map\n-        };\n-        let trait_map = {\n-            let mut map = FxHashMap::default();\n-            for (k, v) in self.trait_map.into_iter() {\n-                map.insert(\n+                )\n+            })\n+            .collect();\n+        let trait_map = self\n+            .trait_map\n+            .into_iter()\n+            .map(|(k, v)| {\n+                (\n                     definitions.node_id_to_hir_id(k),\n                     v.into_iter()\n                         .map(|tc| tc.map_import_ids(|id| definitions.node_id_to_hir_id(id)))\n                         .collect(),\n-                );\n-            }\n-            map\n-        };\n+                )\n+            })\n+            .collect();\n         let maybe_unused_trait_imports = self\n             .maybe_unused_trait_imports\n             .into_iter()\n@@ -1341,40 +1339,38 @@ impl<'a> Resolver<'a> {\n         ResolverOutputs {\n             definitions: self.definitions.clone(),\n             cstore: Box::new(self.cstore().clone()),\n-            extern_crate_map: {\n-                let mut map = FxHashMap::default();\n-                for (k, v) in self.extern_crate_map.iter() {\n-                    map.insert(self.definitions.local_def_id(k.clone()).to_def_id(), v.clone());\n-                }\n-                map\n-            },\n-            export_map: {\n-                let mut map = FxHashMap::default();\n-                for (k, v) in self.export_map.iter() {\n-                    map.insert(\n+            extern_crate_map: self\n+                .extern_crate_map\n+                .iter()\n+                .map(|(k, v)| (self.definitions.local_def_id(k.clone()).to_def_id(), v.clone()))\n+                .collect(),\n+            export_map: self\n+                .export_map\n+                .iter()\n+                .map(|(k, v)| {\n+                    (\n                         k.clone(),\n                         v.iter()\n                             .map(|e| e.clone().map_id(|id| self.definitions.node_id_to_hir_id(id)))\n                             .collect(),\n-                    );\n-                }\n-                map\n-            },\n-            trait_map: {\n-                let mut map = FxHashMap::default();\n-                for (k, v) in self.trait_map.iter() {\n-                    map.insert(\n+                    )\n+                })\n+                .collect(),\n+            trait_map: self\n+                .trait_map\n+                .iter()\n+                .map(|(k, v)| {\n+                    (\n                         self.definitions.node_id_to_hir_id(k.clone()),\n                         v.iter()\n                             .map(|tc| {\n                                 tc.clone()\n                                     .map_import_ids(|id| self.definitions.node_id_to_hir_id(id))\n                             })\n                             .collect(),\n-                    );\n-                }\n-                map\n-            },\n+                    )\n+                })\n+                .collect(),\n             glob_map: self\n                 .glob_map\n                 .iter()"}]}