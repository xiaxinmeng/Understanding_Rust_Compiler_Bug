{"sha": "88ae2d1155c48d1c2b0dc4d049f0411778a94035", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YWUyZDExNTVjNDhkMWMyYjBkYzRkMDQ5ZjA0MTE3NzhhOTQwMzU=", "commit": {"author": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-11T19:47:10Z"}, "committer": {"name": "xFrednet", "email": "xFrednet@gmail.com", "date": "2021-05-12T15:31:00Z"}, "message": "Metadata formatting the configuration section", "tree": {"sha": "2060b3cdfeca0db5c9ff78c4a52eccc11863fab7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2060b3cdfeca0db5c9ff78c4a52eccc11863fab7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88ae2d1155c48d1c2b0dc4d049f0411778a94035", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88ae2d1155c48d1c2b0dc4d049f0411778a94035", "html_url": "https://github.com/rust-lang/rust/commit/88ae2d1155c48d1c2b0dc4d049f0411778a94035", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88ae2d1155c48d1c2b0dc4d049f0411778a94035/comments", "author": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xFrednet", "id": 17087237, "node_id": "MDQ6VXNlcjE3MDg3MjM3", "avatar_url": "https://avatars.githubusercontent.com/u/17087237?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xFrednet", "html_url": "https://github.com/xFrednet", "followers_url": "https://api.github.com/users/xFrednet/followers", "following_url": "https://api.github.com/users/xFrednet/following{/other_user}", "gists_url": "https://api.github.com/users/xFrednet/gists{/gist_id}", "starred_url": "https://api.github.com/users/xFrednet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xFrednet/subscriptions", "organizations_url": "https://api.github.com/users/xFrednet/orgs", "repos_url": "https://api.github.com/users/xFrednet/repos", "events_url": "https://api.github.com/users/xFrednet/events{/privacy}", "received_events_url": "https://api.github.com/users/xFrednet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "210ec728e5d7f428b22b78ee721ed6507cc6f925", "url": "https://api.github.com/repos/rust-lang/rust/commits/210ec728e5d7f428b22b78ee721ed6507cc6f925", "html_url": "https://github.com/rust-lang/rust/commit/210ec728e5d7f428b22b78ee721ed6507cc6f925"}], "stats": {"total": 58, "additions": 54, "deletions": 4}, "files": [{"sha": "bb1c8ae95859a8a6ee513448b7e3cb4d79c61068", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/88ae2d1155c48d1c2b0dc4d049f0411778a94035/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88ae2d1155c48d1c2b0dc4d049f0411778a94035/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=88ae2d1155c48d1c2b0dc4d049f0411778a94035", "patch": "@@ -19,6 +19,7 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Loc, Span, Symbol};\n use serde::{ser::SerializeStruct, Serialize, Serializer};\n use std::collections::BinaryHeap;\n+use std::fmt;\n use std::fs::{self, OpenOptions};\n use std::io::prelude::*;\n use std::path::Path;\n@@ -41,6 +42,30 @@ const EXCLUDED_LINT_GROUPS: [&str; 1] = [\"clippy::internal\"];\n /// Collected deprecated lint will be assigned to this group in the JSON output\n const DEPRECATED_LINT_GROUP_STR: &str = \"DEPRECATED\";\n \n+/// This template will be used to format the configuration section in the lint documentation.\n+/// The `configurations` parameter will be replaced with one or multiple formatted\n+/// `ClippyConfiguration` instances. See `CONFIGURATION_VALUE_TEMPLATE` for further customizations\n+macro_rules! CONFIGURATION_SECTION_TEMPLATE {\n+    () => {\n+        r#\"\n+**Configuration**\n+This lint has the following configuration variables:\n+\n+{configurations}\n+\"#\n+    };\n+}\n+/// This template will be used to format an individual `ClippyConfiguration` instance in the\n+/// lint documentation.\n+///\n+/// The format function will provide strings for the following parameters: `name`, `ty`, `doc` and\n+/// `default`\n+macro_rules! CONFIGURATION_VALUE_TEMPLATE {\n+    () => {\n+        \"* {name}: {ty}: {doc} (defaults to `{default}`)\\n\"\n+    };\n+}\n+\n const LINT_EMISSION_FUNCTIONS: [&[&str]; 7] = [\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint\"],\n     &[\"clippy_utils\", \"diagnostics\", \"span_lint_and_help\"],\n@@ -120,6 +145,14 @@ impl MetadataCollector {\n             config: collect_configs(),\n         }\n     }\n+\n+    fn get_lint_configs(&self, lint_name: &str) -> Option<String> {\n+        self.config\n+            .iter()\n+            .filter_map(|x| x.lints.iter().any(|x| x == lint_name).then(|| format!(\"{}\", x)))\n+            .reduce(|acc, x| acc + &x)\n+            .map(|configurations| format!(CONFIGURATION_SECTION_TEMPLATE!(), configurations = configurations))\n+    }\n }\n \n impl Drop for MetadataCollector {\n@@ -225,6 +258,9 @@ impl Serialize for ApplicabilityInfo {\n     }\n }\n \n+// ==================================================================\n+// Configuration\n+// ==================================================================\n #[derive(Debug)]\n pub(crate) struct ClippyConfigurationBasicInfo {\n     pub name: &'static str,\n@@ -242,9 +278,6 @@ struct ClippyConfiguration {\n     default: String,\n }\n \n-// ==================================================================\n-// Configuration\n-// ==================================================================\n fn collect_configs() -> Vec<ClippyConfiguration> {\n     let cons = crate::utils::conf::metadata::get_configuration_metadata();\n     cons.iter()\n@@ -297,6 +330,19 @@ fn to_kebab(config_name: &str) -> String {\n     config_name.replace('_', \"-\")\n }\n \n+impl fmt::Display for ClippyConfiguration {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            CONFIGURATION_VALUE_TEMPLATE!(),\n+            name = self.name,\n+            ty = self.config_type,\n+            doc = self.doc,\n+            default = self.default\n+        )\n+    }\n+}\n+\n // ==================================================================\n // Lint pass\n // ==================================================================\n@@ -321,8 +367,12 @@ impl<'hir> LateLintPass<'hir> for MetadataCollector {\n                 if !BLACK_LISTED_LINTS.contains(&lint_name.as_str());\n                 // metadata extraction\n                 if let Some(group) = get_lint_group_or_lint(cx, &lint_name, item);\n-                if let Some(docs) = extract_attr_docs_or_lint(cx, item);\n+                if let Some(mut docs) = extract_attr_docs_or_lint(cx, item);\n                 then {\n+                    if let Some(configuration_section) = self.get_lint_configs(&lint_name) {\n+                        docs.push_str(&configuration_section);\n+                    }\n+\n                     self.lints.push(LintMetadata::new(\n                         lint_name,\n                         SerializableSpan::from_item(cx, item),"}]}