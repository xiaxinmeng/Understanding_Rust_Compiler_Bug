{"sha": "f2532012dd51914f8cf27ba79cf0e4999761c9b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNTMyMDEyZGQ1MTkxNGY4Y2YyN2JhNzljZjBlNDk5OTc2MWM5YjQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-11-22T19:35:24Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-30T13:25:25Z"}, "message": "Always check well-formedness.\n\nThis commit uses the map introduced by the previous commit to ensure\nthat types are always checked for well-formedness by the NLL type check.\nPreviously, without the map introduced by the previous commit, types\nwould not be checked for well-formedness if the `AscribeUserType`\nstatement that would trigger that check was removed as unreachable code.", "tree": {"sha": "edd7dbb77e21f8ced4d1f7b99392e1a787e159cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edd7dbb77e21f8ced4d1f7b99392e1a787e159cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2532012dd51914f8cf27ba79cf0e4999761c9b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwox0UACgkQAXYLT59T\n8VTFBQ/9HxmgFJHCjjHaB1M05m+ryLFKv0WacA8oWyj4VM+llBpQZteObTnierNs\nU1Cts6IhN9JCjPUYqz71OozwrNG6ikoGqUaips4BGiR3R/fQMkIEAiTpUb3FK+Dk\nL1lBPwA9JNDkFE/4YhOJ/HCZRGKhiavIjb9xQQn+aUC4ZH1pbs7JEY14TNuVHHdR\n8/LFPgOn1vVFdW/0kuY2JVNIU7Wd82TdtQN1Tfzz3y4KpwbRVB/Utw3eWMdQ1YQD\nMZTr8VjuYh6Zyb3lbvvPst9O/XFVvbFx3z5ZJKho8yESAYjnNdwZLs2N2w8TCSAH\n/K3ylVCCZRtduFmuk1VVvowF388nvlfSfVBU2Vjz6mIvmp0hgLPOd/8oKN5axgZp\nNy17DAE2Xayt3ym+CCmz6LKyAkcKaJoORHyr9dw0rmzPWDHa6L097K3wBmEc4sc9\nz8iDfzPkrV2vx5ZABpTAXeyd+d+Hzo8NkkShR3rmgvFQHb8mO3yZiI6eZpM2H/bf\nhix0rKLTeh/Z+MhdpWVgsFF6j39FLKpNi61vDcHZJNOjwP1XyywaNqHy5QfquLlM\nV4Klg9Xt8l543lfPiDPGbcMMBt3ygvrTjGoBEETuCkcLnYevsylZndwDdrs4xit8\nncmYZ51Zd9ApgG66ACnaCsGqFFh1FDfixNwOysCj2XeJ4QPaXM4=\n=BNdQ\n-----END PGP SIGNATURE-----", "payload": "tree edd7dbb77e21f8ced4d1f7b99392e1a787e159cd\nparent 24a7a010d1015731418852d893d889f4bcbdeb51\nauthor David Wood <david@davidtw.co> 1542915324 +0100\ncommitter David Wood <david@davidtw.co> 1546176325 +0100\n\nAlways check well-formedness.\n\nThis commit uses the map introduced by the previous commit to ensure\nthat types are always checked for well-formedness by the NLL type check.\nPreviously, without the map introduced by the previous commit, types\nwould not be checked for well-formedness if the `AscribeUserType`\nstatement that would trigger that check was removed as unreachable code.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2532012dd51914f8cf27ba79cf0e4999761c9b4", "html_url": "https://github.com/rust-lang/rust/commit/f2532012dd51914f8cf27ba79cf0e4999761c9b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2532012dd51914f8cf27ba79cf0e4999761c9b4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a7a010d1015731418852d893d889f4bcbdeb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a7a010d1015731418852d893d889f4bcbdeb51", "html_url": "https://github.com/rust-lang/rust/commit/24a7a010d1015731418852d893d889f4bcbdeb51"}], "stats": {"total": 251, "additions": 209, "deletions": 42}, "files": [{"sha": "1f19e6fc689c1aa2f25ef26d8b71af416ac2ac45", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -62,7 +62,8 @@ use syntax_pos::symbol::InternedString;\n use traits;\n use traits::query::{\n     CanonicalProjectionGoal, CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n-    CanonicalTypeOpEqGoal, CanonicalTypeOpSubtypeGoal, CanonicalPredicateGoal,\n+    CanonicalTypeOpAscribeUserTypeWellFormedGoal, CanonicalTypeOpEqGoal,\n+    CanonicalTypeOpSubtypeGoal, CanonicalPredicateGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpNormalizeGoal,\n };\n use ty::{TyCtxt, FnSig, Instance, InstanceDef,\n@@ -650,6 +651,7 @@ define_dep_nodes!( <'tcx>\n     [] EvaluateObligation(CanonicalPredicateGoal<'tcx>),\n     [] EvaluateGoal(traits::ChalkCanonicalGoal<'tcx>),\n     [] TypeOpAscribeUserType(CanonicalTypeOpAscribeUserTypeGoal<'tcx>),\n+    [] TypeOpAscribeUserTypeWellFormed(CanonicalTypeOpAscribeUserTypeWellFormedGoal<'tcx>),\n     [] TypeOpEq(CanonicalTypeOpEqGoal<'tcx>),\n     [] TypeOpSubtype(CanonicalTypeOpSubtypeGoal<'tcx>),\n     [] TypeOpProvePredicate(CanonicalTypeOpProvePredicateGoal<'tcx>),"}, {"sha": "3203dc4e8cf82bde25122509df020f63576bb2b1", "filename": "src/librustc/traits/query/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fmod.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -28,6 +28,10 @@ pub type CanonicalPredicateGoal<'tcx> =\n pub type CanonicalTypeOpAscribeUserTypeGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::ascribe_user_type::AscribeUserType<'tcx>>>;\n \n+pub type CanonicalTypeOpAscribeUserTypeWellFormedGoal<'tcx> =\n+    Canonical<'tcx, ty::ParamEnvAnd<'tcx,\n+        type_op::ascribe_user_type::AscribeUserTypeWellFormed<'tcx>>>;\n+\n pub type CanonicalTypeOpEqGoal<'tcx> =\n     Canonical<'tcx, ty::ParamEnvAnd<'tcx, type_op::eq::Eq<'tcx>>>;\n "}, {"sha": "993d09d2ed02d8b2bb938959c0f904305658ebda", "filename": "src/librustc/traits/query/type_op/ascribe_user_type.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Ftype_op%2Fascribe_user_type.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -2,7 +2,7 @@ use infer::canonical::{Canonical, Canonicalized, CanonicalizedQueryResponse, Que\n use traits::query::Fallible;\n use hir::def_id::DefId;\n use mir::ProjectionKind;\n-use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n+use ty::{self, ParamEnvAnd, Ty, TyCtxt, UserTypeAnnotation};\n use ty::subst::UserSubsts;\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n@@ -22,7 +22,7 @@ impl<'tcx> AscribeUserType<'tcx> {\n         user_substs: UserSubsts<'tcx>,\n         projs: &'tcx ty::List<ProjectionKind<'tcx>>,\n     ) -> Self {\n-        AscribeUserType { mir_ty, variance, def_id, user_substs, projs }\n+        Self { mir_ty, variance, def_id, user_substs, projs }\n     }\n }\n \n@@ -68,3 +68,59 @@ impl_stable_hash_for! {\n         mir_ty, variance, def_id, user_substs, projs\n     }\n }\n+\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n+pub struct AscribeUserTypeWellFormed<'tcx> {\n+    pub user_type_annotation: UserTypeAnnotation<'tcx>,\n+}\n+\n+impl<'tcx> AscribeUserTypeWellFormed<'tcx> {\n+    pub fn new(\n+        user_type_annotation: UserTypeAnnotation<'tcx>,\n+    ) -> Self {\n+        Self { user_type_annotation, }\n+    }\n+}\n+\n+impl<'gcx: 'tcx, 'tcx> super::QueryTypeOp<'gcx, 'tcx> for AscribeUserTypeWellFormed<'tcx> {\n+    type QueryResponse = ();\n+\n+    fn try_fast_path(\n+        _tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        _key: &ParamEnvAnd<'tcx, Self>,\n+    ) -> Option<Self::QueryResponse> {\n+        None\n+    }\n+\n+    fn perform_query(\n+        tcx: TyCtxt<'_, 'gcx, 'tcx>,\n+        canonicalized: Canonicalized<'gcx, ParamEnvAnd<'tcx, Self>>,\n+    ) -> Fallible<CanonicalizedQueryResponse<'gcx, ()>> {\n+        tcx.type_op_ascribe_user_type_well_formed(canonicalized)\n+    }\n+\n+    fn shrink_to_tcx_lifetime(\n+        v: &'a CanonicalizedQueryResponse<'gcx, ()>,\n+    ) -> &'a Canonical<'tcx, QueryResponse<'tcx, ()>> {\n+        v\n+    }\n+}\n+\n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for AscribeUserTypeWellFormed<'tcx> {\n+        user_type_annotation\n+    }\n+}\n+\n+BraceStructLiftImpl! {\n+    impl<'a, 'tcx> Lift<'tcx> for AscribeUserTypeWellFormed<'a> {\n+        type Lifted = AscribeUserTypeWellFormed<'tcx>;\n+        user_type_annotation\n+    }\n+}\n+\n+impl_stable_hash_for! {\n+    struct AscribeUserTypeWellFormed<'tcx> {\n+        user_type_annotation\n+    }\n+}"}, {"sha": "bed4dfd97ca4949dc851177965703fd60d7bd38e", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -5,7 +5,8 @@ use mir::interpret::GlobalId;\n use traits;\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal, CanonicalTyGoal,\n-    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n+    CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpAscribeUserTypeWellFormedGoal,\n+    CanonicalTypeOpEqGoal, CanonicalTypeOpNormalizeGoal,\n     CanonicalTypeOpProvePredicateGoal, CanonicalTypeOpSubtypeGoal,\n };\n use ty::{self, ParamEnvAnd, Ty, TyCtxt};\n@@ -124,6 +125,15 @@ impl<'tcx> QueryDescription<'tcx> for queries::type_op_ascribe_user_type<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::type_op_ascribe_user_type_well_formed<'tcx> {\n+    fn describe(\n+        _tcx: TyCtxt<'_, '_, '_>,\n+        goal: CanonicalTypeOpAscribeUserTypeWellFormedGoal<'tcx>,\n+    ) -> Cow<'static, str> {\n+        format!(\"evaluating `type_op_ascribe_user_type_well_formed` `{:?}`\", goal).into()\n+    }\n+}\n+\n impl<'tcx> QueryDescription<'tcx> for queries::type_op_eq<'tcx> {\n     fn describe(_tcx: TyCtxt<'_, '_, '_>, goal: CanonicalTypeOpEqGoal<'tcx>) -> Cow<'static, str> {\n         format!(\"evaluating `type_op_eq` `{:?}`\", goal).into()"}, {"sha": "c2f208308b2d1f27e2780eb3203779371e460791", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -26,7 +26,8 @@ use session::config::OutputFilenames;\n use traits::{self, Vtable};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n-    CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal, CanonicalTypeOpEqGoal,\n+    CanonicalTyGoal, CanonicalTypeOpAscribeUserTypeGoal,\n+    CanonicalTypeOpAscribeUserTypeWellFormedGoal, CanonicalTypeOpEqGoal,\n     CanonicalTypeOpSubtypeGoal, CanonicalTypeOpProvePredicateGoal,\n     CanonicalTypeOpNormalizeGoal, NoSolution,\n };\n@@ -609,6 +610,14 @@ define_queries! { <'tcx>\n             NoSolution,\n         >,\n \n+        /// Do not call this query directly: part of the `Eq` type-op\n+        [] fn type_op_ascribe_user_type_well_formed: TypeOpAscribeUserTypeWellFormed(\n+            CanonicalTypeOpAscribeUserTypeWellFormedGoal<'tcx>\n+        ) -> Result<\n+            Lrc<Canonical<'tcx, canonical::QueryResponse<'tcx, ()>>>,\n+            NoSolution,\n+        >,\n+\n         /// Do not call this query directly: part of the `Eq` type-op\n         [] fn type_op_eq: TypeOpEq(\n             CanonicalTypeOpEqGoal<'tcx>"}, {"sha": "cdb3cd3ffcb6b345d80616630188ec031f8e5bb3", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -1208,6 +1208,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::EvaluateObligation |\n         DepKind::EvaluateGoal |\n         DepKind::TypeOpAscribeUserType |\n+        DepKind::TypeOpAscribeUserTypeWellFormed |\n         DepKind::TypeOpEq |\n         DepKind::TypeOpSubtype |\n         DepKind::TypeOpProvePredicate |"}, {"sha": "51ade33f74cf0102fe6affa0212a959c6492497f", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -916,6 +916,28 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         );\n     }\n \n+    /// Check that user type annotations are well formed.\n+    fn check_user_type_annotations_are_well_formed(&mut self) {\n+        for index in self.mir.user_type_annotations.indices() {\n+            let (span, _) = &self.mir.user_type_annotations[index];\n+            let type_annotation = self.instantiated_type_annotations[&index];\n+            if let Err(terr) = self.fully_perform_op(\n+                Locations::All(*span),\n+                ConstraintCategory::Assignment,\n+                self.param_env.and(type_op::ascribe_user_type::AscribeUserTypeWellFormed::new(\n+                    type_annotation,\n+                )),\n+            ) {\n+                span_mirbug!(\n+                    self,\n+                    type_annotation,\n+                    \"bad user type annotation: {:?}\",\n+                    terr,\n+                );\n+            }\n+        }\n+    }\n+\n     /// Given some operation `op` that manipulates types, proves\n     /// predicates, or otherwise uses the inference context, executes\n     /// `op` and then executes all the further obligations that `op`\n@@ -2389,6 +2411,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             self.check_terminator(mir, block_data.terminator(), location);\n             self.check_iscleanup(mir, block_data);\n         }\n+\n+        self.check_user_type_annotations_are_well_formed();\n     }\n \n     fn normalize<T>(&mut self, value: T, location: impl NormalizeLocation) -> T"}, {"sha": "6691a036ac28c9068393c884ccde70f180786a82", "filename": "src/librustc_traits/type_op.rs", "status": "modified", "additions": 77, "deletions": 29, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc_traits%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Flibrustc_traits%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Ftype_op.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -4,7 +4,7 @@ use rustc::infer::InferCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::mir::ProjectionKind;\n use rustc::mir::tcx::PlaceTy;\n-use rustc::traits::query::type_op::ascribe_user_type::AscribeUserType;\n+use rustc::traits::query::type_op::ascribe_user_type::{AscribeUserType, AscribeUserTypeWellFormed};\n use rustc::traits::query::type_op::eq::Eq;\n use rustc::traits::query::type_op::normalize::Normalize;\n use rustc::traits::query::type_op::prove_predicate::ProvePredicate;\n@@ -17,6 +17,7 @@ use rustc::ty::query::Providers;\n use rustc::ty::subst::{Kind, Subst, UserSubsts, UserSelfTy};\n use rustc::ty::{\n     FnSig, Lift, ParamEnv, ParamEnvAnd, PolyFnSig, Predicate, Ty, TyCtxt, TypeFoldable, Variance,\n+    UserTypeAnnotation,\n };\n use rustc_data_structures::sync::Lrc;\n use std::fmt;\n@@ -26,6 +27,7 @@ use syntax_pos::DUMMY_SP;\n crate fn provide(p: &mut Providers) {\n     *p = Providers {\n         type_op_ascribe_user_type,\n+        type_op_ascribe_user_type_well_formed,\n         type_op_eq,\n         type_op_prove_predicate,\n         type_op_subtype,\n@@ -48,7 +50,7 @@ fn type_op_ascribe_user_type<'tcx>(\n             ) = key.into_parts();\n \n             debug!(\n-                \"type_op_user_type_relation: mir_ty={:?} variance={:?} def_id={:?} \\\n+                \"type_op_ascribe_user_type: mir_ty={:?} variance={:?} def_id={:?} \\\n                  user_substs={:?} projs={:?}\",\n                 mir_ty, variance, def_id, user_substs, projs\n             );\n@@ -60,6 +62,28 @@ fn type_op_ascribe_user_type<'tcx>(\n         })\n }\n \n+fn type_op_ascribe_user_type_well_formed<'tcx>(\n+    tcx: TyCtxt<'_, 'tcx, 'tcx>,\n+    canonicalized: Canonical<'tcx, ParamEnvAnd<'tcx, AscribeUserTypeWellFormed<'tcx>>>,\n+) -> Result<Lrc<Canonical<'tcx, QueryResponse<'tcx, ()>>>, NoSolution> {\n+    tcx.infer_ctxt()\n+        .enter_canonical_trait_query(&canonicalized, |infcx, fulfill_cx, key| {\n+            let (\n+                param_env, AscribeUserTypeWellFormed { user_type_annotation }\n+            ) = key.into_parts();\n+\n+            debug!(\n+                \"type_op_ascribe_user_type_well_formed: user_type_annotation={:?}\",\n+                user_type_annotation,\n+            );\n+\n+            let mut cx = AscribeUserTypeCx { infcx, param_env, fulfill_cx };\n+            cx.well_formed(user_type_annotation)?;\n+\n+            Ok(())\n+        })\n+}\n+\n struct AscribeUserTypeCx<'me, 'gcx: 'tcx, 'tcx: 'me> {\n     infcx: &'me InferCtxt<'me, 'gcx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n@@ -109,6 +133,56 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         value.subst(self.tcx(), substs)\n     }\n \n+    fn well_formed(\n+        &mut self,\n+        type_annotation: UserTypeAnnotation<'tcx>\n+    ) -> Result<(), NoSolution> {\n+        match type_annotation {\n+            UserTypeAnnotation::Ty(ty) => {\n+                self.prove_predicate(Predicate::WellFormed(ty));\n+                Ok(())\n+            },\n+            UserTypeAnnotation::TypeOf(did, user_substs) => {\n+                let UserSubsts {\n+                    user_self_ty,\n+                    substs,\n+                } = user_substs;\n+\n+                let ty = self.tcx().type_of(did);\n+                let ty = self.subst(ty, substs);\n+                debug!(\"relate_type_and_user_type: ty of def-id is {:?}\", ty);\n+                let ty = self.normalize(ty);\n+\n+                if let Some(UserSelfTy {\n+                    impl_def_id,\n+                    self_ty,\n+                }) = user_self_ty {\n+                    let impl_self_ty = self.tcx().type_of(impl_def_id);\n+                    let impl_self_ty = self.subst(impl_self_ty, &substs);\n+                    let impl_self_ty = self.normalize(impl_self_ty);\n+\n+                    self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n+\n+                    self.prove_predicate(Predicate::WellFormed(impl_self_ty));\n+                }\n+\n+                // In addition to proving the predicates, we have to\n+                // prove that `ty` is well-formed -- this is because\n+                // the WF of `ty` is predicated on the substs being\n+                // well-formed, and we haven't proven *that*. We don't\n+                // want to prove the WF of types from  `substs` directly because they\n+                // haven't been normalized.\n+                //\n+                // FIXME(nmatsakis): Well, perhaps we should normalize\n+                // them?  This would only be relevant if some input\n+                // type were ill-formed but did not appear in `ty`,\n+                // which...could happen with normalization...\n+                self.prove_predicate(Predicate::WellFormed(ty));\n+                Ok(())\n+            },\n+        }\n+    }\n+\n     fn relate_mir_and_user_ty(\n         &mut self,\n         mir_ty: Ty<'tcx>,\n@@ -118,7 +192,7 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n         projs: &[ProjectionKind<'tcx>],\n     ) -> Result<(), NoSolution> {\n         let UserSubsts {\n-            user_self_ty,\n+            user_self_ty: _,\n             substs,\n         } = user_substs;\n         let tcx = self.tcx();\n@@ -158,19 +232,6 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n             self.relate(mir_ty, variance, ty)?;\n         }\n \n-        if let Some(UserSelfTy {\n-            impl_def_id,\n-            self_ty,\n-        }) = user_self_ty {\n-            let impl_self_ty = self.tcx().type_of(impl_def_id);\n-            let impl_self_ty = self.subst(impl_self_ty, &substs);\n-            let impl_self_ty = self.normalize(impl_self_ty);\n-\n-            self.relate(self_ty, Variance::Invariant, impl_self_ty)?;\n-\n-            self.prove_predicate(Predicate::WellFormed(impl_self_ty));\n-        }\n-\n         // Prove the predicates coming along with `def_id`.\n         //\n         // Also, normalize the `instantiated_predicates`\n@@ -184,19 +245,6 @@ impl AscribeUserTypeCx<'me, 'gcx, 'tcx> {\n             self.prove_predicate(instantiated_predicate);\n         }\n \n-        // In addition to proving the predicates, we have to\n-        // prove that `ty` is well-formed -- this is because\n-        // the WF of `ty` is predicated on the substs being\n-        // well-formed, and we haven't proven *that*. We don't\n-        // want to prove the WF of types from  `substs` directly because they\n-        // haven't been normalized.\n-        //\n-        // FIXME(nmatsakis): Well, perhaps we should normalize\n-        // them?  This would only be relevant if some input\n-        // type were ill-formed but did not appear in `ty`,\n-        // which...could happen with normalization...\n-        self.prove_predicate(Predicate::WellFormed(ty));\n-\n         Ok(())\n     }\n }"}, {"sha": "abda7ec5e07a60389343a44b15efb97627e2398a", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -12,6 +12,21 @@ LL |     let z: &'a & usize = &(&y);\n LL | }\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to previous error\n+error[E0597]: `y` does not live long enough\n+  --> $DIR/regions-free-region-ordering-caller1.rs:9:27\n+   |\n+LL | fn call1<'a>(x: &'a usize) {\n+   |          -- lifetime `'a` defined here\n+...\n+LL |     let z: &'a & usize = &(&y);\n+   |            -----------    ^^^^ borrowed value does not live long enough\n+   |            |\n+   |            assignment requires that `y` is borrowed for `'a`\n+...\n+LL | }\n+   | - `y` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0716`.\n+Some errors occurred: E0597, E0716.\n+For more information about an error, try `rustc --explain E0597`."}, {"sha": "91a0d8590ff341e92ff00efaeda65f9dc511f717", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.rs?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -31,9 +31,7 @@ fn with_assoc<'a,'b>() {\n     // outlive 'a. In this case, that means TheType<'b>::TheAssocType,\n     // which is &'b (), must outlive 'a.\n \n-    // FIXME (#54943) NLL doesn't enforce WF condition in unreachable code if\n-    // `_x` is changed to `_`\n-    let _x: &'a WithAssoc<TheType<'b>> = loop { };\n+    let _: &'a WithAssoc<TheType<'b>> = loop { };\n     //~^ ERROR reference has a longer lifetime\n }\n "}, {"sha": "0d73d3d64322e0e69e0631d7cb7930819a4dac24", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f2532012dd51914f8cf27ba79cf0e4999761c9b4/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.stderr?ref=f2532012dd51914f8cf27ba79cf0e4999761c9b4", "patch": "@@ -1,8 +1,8 @@\n error[E0491]: in type `&'a WithAssoc<TheType<'b>>`, reference has a longer lifetime than the data it references\n-  --> $DIR/regions-outlives-projection-container-wc.rs:36:13\n+  --> $DIR/regions-outlives-projection-container-wc.rs:34:12\n    |\n-LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     let _: &'a WithAssoc<TheType<'b>> = loop { };\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: the pointer is valid for the lifetime 'a as defined on the function body at 28:15\n   --> $DIR/regions-outlives-projection-container-wc.rs:28:15"}]}