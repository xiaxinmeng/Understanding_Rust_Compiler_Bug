{"sha": "23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "node_id": "C_kwDOAAsO6NoAKDIzZDI1YTMwOTRlYzg5ZmNhNjEwY2QyZTBkMzQzNGUzNmE0ZjExYWI", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T12:59:42Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-20T13:00:17Z"}, "message": "Enable extra warnings required by rust-lang/rust", "tree": {"sha": "af5aaece63ce6283a51de28dfbc868050dc1c4db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af5aaece63ce6283a51de28dfbc868050dc1c4db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "html_url": "https://github.com/rust-lang/rust/commit/23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ded8e734f0280e407f8e22f8c6895cb1dda69be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ded8e734f0280e407f8e22f8c6895cb1dda69be", "html_url": "https://github.com/rust-lang/rust/commit/0ded8e734f0280e407f8e22f8c6895cb1dda69be"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "f55b82e8ab6e453469c598da4870207bd78f3bed", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,4 +1,7 @@\n //! base_db defines basic database traits. The concrete DB is defined by ide.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod input;\n mod change;\n pub mod fixture;"}, {"sha": "d78ef4fb11e7ff2b3f18931032fcc19984dba7ba", "filename": "crates/cfg/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fcfg%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fcfg%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,7 @@\n //! cfg defines conditional compiling options, `cfg` attribute parser and evaluator\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod cfg_expr;\n mod dnf;\n #[cfg(test)]"}, {"sha": "4e8bc881ae7383f8caf04e0627ff244979becd92", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -2,6 +2,8 @@\n //! another compatible command (f.x. clippy) in a background thread and provide\n //! LSP diagnostics based on the output of the command.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::{\n     fmt, io,\n     process::{ChildStderr, ChildStdout, Command, Stdio},"}, {"sha": "0dd0a5861ef3cfe7b46f6a916284fbc5577069ba", "filename": "crates/hir-def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -7,6 +7,8 @@\n //! Note that `hir_def` is a work in progress, so not all of the above is\n //! actually true.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };"}, {"sha": "252293090bb0cdc3006c3f4ec58c7225ce97bf46", "filename": "crates/hir-expand/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -4,6 +4,8 @@\n //! tree originates not from the text of some `FileId`, but from some macro\n //! expansion.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n pub mod db;\n pub mod ast_id_map;\n pub mod name;"}, {"sha": "125b3d7de867572da31c0de9d8eb9ecda4127468", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,6 +1,8 @@\n //! The type system. We currently use this to infer types for completion, hover\n //! information and various assists.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };"}, {"sha": "327493ccac94efa8743a1da9107d6b307c0594a5", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -17,6 +17,7 @@\n //! from the ide with completions, hovers, etc. It is a (soft, internal) boundary:\n //! <https://www.tedinski.com/2018/02/06/system-boundaries.html>.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n #![recursion_limit = \"512\"]\n \n mod semantics;"}, {"sha": "1a844d9613819c2294d33a1f2f9032f559860641", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -57,6 +57,9 @@\n //!\n //! See also this post:\n //! <https://rust-analyzer.github.io/blog/2020/09/28/how-to-make-a-light-bulb.html>\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };"}, {"sha": "ae1a440d06da7cc9a40ab97d1af122c00a815d64", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,7 @@\n //! `completions` crate provides utilities for generating completions of user input.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod completions;\n mod config;\n mod context;"}, {"sha": "e2630d686b794050b0e6cdd570b0a8acf5201a63", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -2,6 +2,8 @@\n //!\n //! It is mainly a `HirDatabase` for semantic analysis, plus a `SymbolsDatabase`, for fuzzy search.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod apply_change;\n \n pub mod active_parameter;"}, {"sha": "daf9b168867e959ba24e0857dc6643d3e8d2ca33", "filename": "crates/ide-diagnostics/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-diagnostics%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -23,6 +23,8 @@\n //! There are also a couple of ad-hoc diagnostics implemented directly here, we\n //! don't yet have a great pattern for how to do them properly.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod handlers {\n     pub(crate) mod break_outside_of_loop;\n     pub(crate) mod inactive_code;"}, {"sha": "a5e24daa9fa01019de7deb33a62584007d2ce3f4", "filename": "crates/ide-ssr/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide-ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -3,6 +3,8 @@\n //! Allows searching the AST for code that matches one or more patterns and then replacing that code\n //! based on a template.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n // Feature: Structural Search and Replace\n //\n // Search and replace with named wildcards that will match any expression, type, path, pattern or item."}, {"sha": "dd108fa799970879d333b0d2d4de7b25d99f4d1e", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -9,6 +9,7 @@\n \n // For proving that RootDatabase is RefUnwindSafe.\n #![recursion_limit = \"128\"]\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n \n #[allow(unused)]\n macro_rules! eprintln {"}, {"sha": "3c1da80edb98b08d421eb186d73bd4a0a99b163c", "filename": "crates/limit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Flimit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Flimit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flimit%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,7 @@\n //! limit defines a struct to enforce limits.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::sync::atomic::AtomicUsize;\n \n /// Represents a struct used to enforce a numerical limit."}, {"sha": "4f09049fdf7b657f6c95f285e82fe7f0339c9bfe", "filename": "crates/mbe/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fmbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fmbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -6,6 +6,8 @@\n //! The tes for this functionality live in another crate:\n //! `hir_def::macro_expansion_tests::mbe`.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod parser;\n mod expander;\n mod syntax_bridge;"}, {"sha": "203f59407a296f6293b5a0026c600ac90801fd37", "filename": "crates/parser/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fparser%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fparser%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -16,6 +16,8 @@\n //! Tests for this crate live in the `syntax` crate.\n //!\n //! [`Parser`]: crate::parser::Parser\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n #![allow(rustdoc::private_intra_doc_links)]\n \n mod lexed_str;"}, {"sha": "025093f4a94ab6ea81d4297bb64d6bdb0e26a15f", "filename": "crates/paths/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fpaths%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fpaths%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fpaths%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,8 @@\n //! Thin wrappers around `std::path`, distinguishing between absolute and\n //! relative paths.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::{\n     borrow::Borrow,\n     ffi::OsStr,"}, {"sha": "dbf2fb37e75be1f981917cc79e27d9962663bc5d", "filename": "crates/proc-macro-api/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-api%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -5,6 +5,8 @@\n //! is used to provide basic infrastructure for communication between two\n //! processes: Client (RA itself), Server (the external program)\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n pub mod msg;\n mod process;\n mod version;"}, {"sha": "ca7765082f7cfeb22a0088387b4487a38fa78466", "filename": "crates/proc-macro-srv/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -9,6 +9,8 @@\n //!   RA than `proc-macro2` token stream.\n //! * By **copying** the whole rustc `lib_proc_macro` code, we are able to build this with `stable`\n //!   rustc rather than `unstable`. (Although in general ABI compatibility is still an issue)\u2026\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n #![allow(unreachable_pub)]\n \n mod dylib;"}, {"sha": "f74d04729ba0658f2006bcc22e4157e9c78dbdf8", "filename": "crates/proc-macro-test/imp/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-test%2Fimp%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-test%2Fimp%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fimp%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,7 @@\n //! Exports a few trivial procedural macros for testing.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use proc_macro::{Group, Ident, Punct, TokenStream, TokenTree};\n \n #[proc_macro]"}, {"sha": "6d57bc81e0e33420719920af13efd3e7a1225ba4", "filename": "crates/proc-macro-test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproc-macro-test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,4 +1,6 @@\n //! Exports a few trivial procedural macros for testing.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n pub static PROC_MACRO_TEST_LOCATION: &str =\n     include_str!(concat!(env!(\"OUT_DIR\"), \"/proc_macro_test_location.txt\"));"}, {"sha": "00f7952e8072506bb753a7fe7030bc86139a9099", "filename": "crates/profile/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fprofile%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fprofile%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fprofile%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,7 @@\n //! A collection of tools for profiling rust-analyzer.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod stop_watch;\n mod memory_usage;\n #[cfg(feature = \"cpu_profiler\")]"}, {"sha": "e3f83084ac8ac90a74558040c9578019e947a267", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -15,6 +15,8 @@\n //!   procedural macros).\n //! * Lowering of concrete model to a [`base_db::CrateGraph`]\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod manifest_path;\n mod cargo_workspace;\n mod cfg_flag;"}, {"sha": "e9de23cb395d1fbec1b2ceab4aa942618fedcd5f", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,6 +1,9 @@\n //! Driver for rust-analyzer.\n //!\n //! Based on cli flags, either spawns an LSP server, or runs a batch analysis\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod logger;\n mod rustc_wrapper;\n "}, {"sha": "4b1e0cd5aeb48d9f42a10829b08fb76458a2ab40", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -9,6 +9,8 @@\n //! The `cli` submodule implements some batch-processing analysis, primarily as\n //! a debugging aid.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n pub mod cli;\n \n #[allow(unused)]"}, {"sha": "eef76343dc0da001ff1ff1607b280354b8875632", "filename": "crates/rust-analyzer/tests/slow-tests/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fslow-tests%2Fmain.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -8,6 +8,8 @@\n //! specific JSON shapes here -- there's little value in such tests, as we can't\n //! be sure without a real client anyway.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod sourcegen;\n mod tidy;\n mod testdir;"}, {"sha": "ce0224ec744d9a40e5420306350824cde9d23451", "filename": "crates/sourcegen/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fsourcegen%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fsourcegen%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsourcegen%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -6,6 +6,8 @@\n //!\n //! This crate contains utilities to make this kind of source-gen easy.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::{\n     fmt, fs, mem,\n     path::{Path, PathBuf},"}, {"sha": "b4d45206c44ea6fabb1b4cd8a73983d0e7e0e45c", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,4 +1,7 @@\n //! Missing batteries for standard libraries.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::process::Command;\n use std::{cmp::Ordering, ops, time::Instant};\n use std::{io as sio, iter};"}, {"sha": "7fa354c0c4652e7594dba526c7ee12f605f69d42", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -19,6 +19,8 @@\n //! [RFC]: <https://github.com/rust-lang/rfcs/pull/2256>\n //! [Swift]: <https://github.com/apple/swift/blob/13d593df6f359d0cb2fc81cfaac273297c539455/lib/Syntax/README.md>\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n #[allow(unused)]\n macro_rules! eprintln {\n     ($($tt:tt)*) => { stdx::eprintln!($($tt)*) };"}, {"sha": "160cf60f9f123e89ad458b4bfbb8aa7f86bfab6c", "filename": "crates/test-utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftest-utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftest-utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest-utils%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -6,6 +6,8 @@\n //! * Extracting markup (mainly, `$0` markers) out of fixture strings.\n //! * marks (see the eponymous module).\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n pub mod bench_fixture;\n mod fixture;\n mod assert_linear;"}, {"sha": "9bb4271b65f7f5f0e40762e528c443e59a274638", "filename": "crates/text-edit/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftext-edit%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftext-edit%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftext-edit%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -4,6 +4,8 @@\n //! so `TextEdit` is the ultimate representation of the work done by\n //! rust-analyzer.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use itertools::Itertools;\n use std::cmp::max;\n pub use text_size::{TextRange, TextSize};"}, {"sha": "b05da769161e65a020f832f377efe26731b74bb3", "filename": "crates/toolchain/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftoolchain%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftoolchain%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftoolchain%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,4 +1,7 @@\n //! Discovery of `cargo` & `rustc` executables.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::{env, iter, path::PathBuf};\n \n pub fn cargo() -> PathBuf {"}, {"sha": "845ebfa4dae82698e851a27b3244d50f5fa8251b", "filename": "crates/tt/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Ftt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftt%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,6 +1,9 @@\n //! `tt` crate defines a `TokenTree` data structure: this is the interface (both\n //! input and output) of macros. It closely mirrors `proc_macro` crate's\n //! `TokenTree`.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::fmt;\n \n use stdx::impl_from;"}, {"sha": "4d33a9afb9635254a3fcd36e661ca3d55e15bbfe", "filename": "crates/vfs-notify/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fvfs-notify%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs-notify%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -6,6 +6,9 @@\n //!\n //! Hopefully, one day a reliable file watching/walking crate appears on\n //! crates.io, and we can reduce this to trivial glue code.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n use std::fs;\n \n use crossbeam_channel::{never, select, unbounded, Receiver, Sender};"}, {"sha": "10fae41d081c70fdf5dc20586e48133f48ed13a9", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -37,6 +37,9 @@\n //! [`FileSet`]: file_set::FileSet\n //! [`Handle`]: loader::Handle\n //! [`Entries`]: loader::Entry\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod anchored_path;\n pub mod file_set;\n pub mod loader;"}, {"sha": "ce6eebd31eb4d75ff35ee9db933fb171e8e46859", "filename": "lib/la-arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/lib%2Fla-arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/lib%2Fla-arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fla-arena%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -1,5 +1,6 @@\n //! Yet another index-based arena.\n \n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n #![warn(missing_docs)]\n \n use std::{"}, {"sha": "d567077d4a4ba3659d7020563bb535308fbc2074", "filename": "lib/lsp-server/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/lib%2Flsp-server%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/lib%2Flsp-server%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Flsp-server%2Fsrc%2Flib.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -3,6 +3,9 @@\n //! control the message dispatch loop yourself.\n //!\n //! Run with `RUST_LOG=lsp_server=debug` to see all the messages.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod msg;\n mod stdio;\n mod error;"}, {"sha": "335ac324a574f559428da512011b6ee7155c25f8", "filename": "xtask/src/main.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/xtask%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23d25a3094ec89fca610cd2e0d3434e36a4f11ab/xtask%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fmain.rs?ref=23d25a3094ec89fca610cd2e0d3434e36a4f11ab", "patch": "@@ -7,6 +7,9 @@\n //!\n //! This binary is integrated into the `cargo` command line by using an alias in\n //! `.cargo/config`.\n+\n+#![warn(rust_2018_idioms, unused_lifetimes, semicolon_in_expressions_from_macros)]\n+\n mod flags;\n \n mod install;"}]}