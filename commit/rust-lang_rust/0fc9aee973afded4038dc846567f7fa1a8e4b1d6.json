{"sha": "0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmYzlhZWU5NzNhZmRlZDQwMzhkYzg0NjU2N2Y3ZmExYThlNGIxZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T10:11:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-02T10:11:02Z"}, "message": "Auto merge of #1729 - RalfJung:rustup, r=RalfJung\n\nrustup; fix tests for new MIR optimization\n\nSomehow https://github.com/rust-lang/rust/pull/78360 manages to mask UB. This would make sense if there were loops or things like that, but there are not, so really this is just very confusing...", "tree": {"sha": "1c8b30b1896277e36e89c4e5e1b7065b09bce1b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8b30b1896277e36e89c4e5e1b7065b09bce1b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "html_url": "https://github.com/rust-lang/rust/commit/0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46a08b72ef98a28a1e5bf205b13c8c54f891497b", "url": "https://api.github.com/repos/rust-lang/rust/commits/46a08b72ef98a28a1e5bf205b13c8c54f891497b", "html_url": "https://github.com/rust-lang/rust/commit/46a08b72ef98a28a1e5bf205b13c8c54f891497b"}, {"sha": "97e45e0699e2fc8397b1e2cfb55743365d749b6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e45e0699e2fc8397b1e2cfb55743365d749b6e", "html_url": "https://github.com/rust-lang/rust/commit/97e45e0699e2fc8397b1e2cfb55743365d749b6e"}], "stats": {"total": 131, "additions": 14, "deletions": 117}, "files": [{"sha": "3484040119caed0cee87876ff37c53a62f60f2c6", "filename": "ci.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -24,8 +24,9 @@ function run_tests {\n \n   ./miri test --locked\n   if [ -z \"${MIRI_TEST_TARGET+exists}\" ]; then\n-    # Only for host architecture: tests with MIR optimizations\n-    MIRIFLAGS=\"-Z mir-opt-level=3\" ./miri test --locked\n+    # Only for host architecture: tests with optimizations (`-O` is what cargo passes, but crank MIR\n+    # optimizations up all the way).\n+    MIRIFLAGS=\"-O -Zmir-opt-level=3\" ./miri test --locked\n   fi\n \n   # On Windows, there is always \"python\", not \"python3\" or \"python2\"."}, {"sha": "65644e75d97703cb168fefddff3589753d2d58f9", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -1 +1 @@\n-d2731d8e9338d8fe844e19d3fbb39617753e65f4\n+09db05762b283bed62d4f92729cfee4646519833"}, {"sha": "6b573121e5992d49bbc1ecf4113a325e3c535d60", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -27,9 +27,6 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -38,6 +35,8 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(200));\n \n+                // Now `stack_var` gets deallocated.\n+\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n         });\n "}, {"sha": "44950a34db2f855ba29e39f0b8dc1cb31c3a7165", "filename": "tests/compile-fail/data_race/dealloc_read_race_stack_drop.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_read_race_stack_drop.rs?ref=46a08b72ef98a28a1e5bf205b13c8c54f891497b", "patch": "@@ -1,52 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::thread::{spawn, sleep};\n-use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n-use std::time::Duration;\n-\n-#[derive(Copy, Clone)]\n-struct EvilSend<T>(pub T);\n-\n-unsafe impl<T> Send for EvilSend<T> {}\n-unsafe impl<T> Sync for EvilSend<T> {}\n-\n-pub fn main() {\n-    // Shared atomic pointer\n-    let pointer = AtomicPtr::new(null_mut::<usize>());\n-    let ptr = EvilSend(&pointer as *const AtomicPtr<usize>);\n-\n-    // Note: this is scheduler-dependent\n-    // the operations need to occur in\n-    // order, otherwise the allocation is\n-    // not visible to the other-thread to\n-    // detect the race:\n-    //  1. stack-allocate\n-    //  2. read\n-    //  3. stack-deallocate\n-    unsafe {\n-        let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n-            let pointer = &*ptr.0;\n-\n-            let mut stack_var = 0usize;\n-\n-            pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-\n-            sleep(Duration::from_millis(200));\n-\n-            drop(stack_var);\n-        });  //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Read on Thread(id = 2)\n-\n-        let j2 = spawn(move || {\n-            let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Acquire)\n-        });\n-\n-        j1.join().unwrap();\n-        j2.join().unwrap();\n-    }\n-}"}, {"sha": "34a16b00b83d3e5172c3052e3d5b920ee01e7610", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -27,9 +27,6 @@ pub fn main() {\n     //  3. stack-deallocate\n     unsafe {\n         let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n             let pointer = &*ptr.0;\n             {\n                 let mut stack_var = 0usize;\n@@ -38,6 +35,8 @@ pub fn main() {\n \n                 sleep(Duration::from_millis(200));\n \n+                // Now `stack_var` gets deallocated.\n+\n             } //~ ERROR Data race detected between Deallocate on Thread(id = 1) and Write on Thread(id = 2)\n         });\n "}, {"sha": "1d239e9eb74d02f69d06bb1af8fdaa965c8bda9f", "filename": "tests/compile-fail/data_race/dealloc_write_race_stack_drop.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a08b72ef98a28a1e5bf205b13c8c54f891497b/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdata_race%2Fdealloc_write_race_stack_drop.rs?ref=46a08b72ef98a28a1e5bf205b13c8c54f891497b", "patch": "@@ -1,53 +0,0 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n-\n-use std::thread::{spawn, sleep};\n-use std::ptr::null_mut;\n-use std::sync::atomic::{Ordering, AtomicPtr};\n-use std::time::Duration;\n-\n-#[derive(Copy, Clone)]\n-struct EvilSend<T>(pub T);\n-\n-unsafe impl<T> Send for EvilSend<T> {}\n-unsafe impl<T> Sync for EvilSend<T> {}\n-\n-pub fn main() {\n-    // Shared atomic pointer\n-    let pointer = AtomicPtr::new(null_mut::<usize>());\n-    let ptr = EvilSend(&pointer as *const AtomicPtr<usize>);\n-\n-    // Note: this is scheduler-dependent\n-    // the operations need to occur in\n-    // order, otherwise the allocation is\n-    // not visible to the other-thread to\n-    // detect the race:\n-    //  1. stack-allocate\n-    //  2. read\n-    //  3. stack-deallocate\n-    unsafe {\n-        let j1 = spawn(move || {\n-            // Concurrent allocate the memory.\n-            // Uses relaxed semantics to not generate\n-            // a release sequence.\n-            let pointer = &*ptr.0;\n-\n-            let mut stack_var = 0usize;\n-\n-            pointer.store(&mut stack_var as *mut _, Ordering::Release);\n-            \n-            sleep(Duration::from_millis(200));\n-\n-            // Note: Implicit read for drop(_) races with write, would detect race with deallocate after.\n-            drop(stack_var); //~ ERROR Data race detected between Read on Thread(id = 1) and Write on Thread(id = 2)\n-        });\n-\n-        let j2 = spawn(move || {\n-            let pointer = &*ptr.0;\n-            *pointer.load(Ordering::Acquire) = 3;\n-        });\n-\n-        j1.join().unwrap();\n-        j2.join().unwrap();\n-    }\n-}"}, {"sha": "da45d062d03b836f62ab348e5424b1a627e55977", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_rdlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_wrlock(rw.get());\n     }\n }", "previous_filename": "tests/compile-fail/sync/libc_pthread_rwlock_read_write_deadlock.rs"}, {"sha": "ee2e57a9ab375e6d6ee9f8ac28b92b98ee86b5ee", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_rdlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_rdlock(rw.get());\n     }\n }"}, {"sha": "f0404f202e561b2a96da12cd82e0f87a0757205b", "filename": "tests/compile-fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fc9aee973afded4038dc846567f7fa1a8e4b1d6/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=0fc9aee973afded4038dc846567f7fa1a8e4b1d6", "patch": "@@ -1,4 +1,5 @@\n // ignore-windows: No libc on Windows\n+// error-pattern: deadlock\n \n #![feature(rustc_private)]\n \n@@ -8,6 +9,6 @@ fn main() {\n     let rw = std::cell::UnsafeCell::new(libc::PTHREAD_RWLOCK_INITIALIZER);\n     unsafe {\n         assert_eq!(libc::pthread_rwlock_wrlock(rw.get()), 0);\n-        libc::pthread_rwlock_wrlock(rw.get()); //~ ERROR: deadlock\n+        libc::pthread_rwlock_wrlock(rw.get());\n     }\n }"}]}