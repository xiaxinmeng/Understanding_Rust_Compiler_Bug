{"sha": "c4165f3a965e258531928180195637455299c6f3", "node_id": "C_kwDOAAsO6NoAKGM0MTY1ZjNhOTY1ZTI1ODUzMTkyODE4MDE5NTYzNzQ1NTI5OWM2ZjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T02:22:24Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-19T02:22:24Z"}, "message": "drive-by: Add is_async fn to hir::IsAsync", "tree": {"sha": "c4c58fbfc3e080e930c2b36e5b606c742e39c9f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4c58fbfc3e080e930c2b36e5b606c742e39c9f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4165f3a965e258531928180195637455299c6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4165f3a965e258531928180195637455299c6f3", "html_url": "https://github.com/rust-lang/rust/commit/c4165f3a965e258531928180195637455299c6f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4165f3a965e258531928180195637455299c6f3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd3bfb35511cbcff59ce1454d3db627b576d7e92", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd3bfb35511cbcff59ce1454d3db627b576d7e92", "html_url": "https://github.com/rust-lang/rust/commit/fd3bfb35511cbcff59ce1454d3db627b576d7e92"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "b90e0962ce6ad05285f2980ab8ff0d4df4b64271", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -62,7 +62,7 @@ impl<'mir, 'tcx> ConstCx<'mir, 'tcx> {\n     }\n \n     fn is_async(&self) -> bool {\n-        self.tcx.asyncness(self.def_id()) == hir::IsAsync::Async\n+        self.tcx.asyncness(self.def_id()).is_async()\n     }\n }\n "}, {"sha": "e0a3864506548f186e95c15387f8b7f7526ba1f0", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -2720,6 +2720,12 @@ pub enum IsAsync {\n     NotAsync,\n }\n \n+impl IsAsync {\n+    pub fn is_async(self) -> bool {\n+        self == IsAsync::Async\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Encodable, Decodable, HashStable_Generic)]\n pub enum Defaultness {\n     Default { has_value: bool },"}, {"sha": "81672213dc702e042e7dc2846a6bc44b80ce5607", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -688,9 +688,7 @@ fn report_trait_method_mismatch<'tcx>(\n                 // Suggestion to change output type. We do not suggest in `async` functions\n                 // to avoid complex logic or incorrect output.\n                 match tcx.hir().expect_impl_item(impl_m.def_id.expect_local()).kind {\n-                    ImplItemKind::Fn(ref sig, _)\n-                        if sig.header.asyncness == hir::IsAsync::NotAsync =>\n-                    {\n+                    ImplItemKind::Fn(ref sig, _) if !sig.header.asyncness.is_async() => {\n                         let msg = \"change the output type to match the trait\";\n                         let ap = Applicability::MachineApplicable;\n                         match sig.decl.output {"}, {"sha": "5c6a342b3d074221eaaa9296b06e4a89c9e8e1ae", "filename": "src/tools/clippy/clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     AsyncGeneratorKind, Block, Body, Closure, Expr, ExprKind, FnDecl, FnRetTy, GeneratorKind, GenericArg, GenericBound,\n-    HirId, IsAsync, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n+    HirId, ItemKind, LifetimeName, Term, TraitRef, Ty, TyKind, TypeBindingKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -49,7 +49,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualAsyncFn {\n     ) {\n         if_chain! {\n             if let Some(header) = kind.header();\n-            if header.asyncness == IsAsync::NotAsync;\n+            if !header.asyncness.is_async();\n             // Check that this function returns `impl Future`\n             if let FnRetTy::Return(ret_ty) = decl.output;\n             if let Some((trait_ref, output_lifetimes)) = future_trait_ref(cx, ret_ty);"}, {"sha": "3538bef6e06185a13eb5a17ea1e5a9fb99816a8d", "filename": "src/tools/clippy/clippy_lints/src/unused_async.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_async.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n-use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, IsAsync, YieldSource};\n+use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId, YieldSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedAsync {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !span.from_expansion() && fn_kind.asyncness() == IsAsync::Async {\n+        if !span.from_expansion() && fn_kind.asyncness().is_async() {\n             let mut visitor = AsyncFnVisitor { cx, found_await: false };\n             walk_fn(&mut visitor, fn_kind, fn_decl, body.id(), hir_id);\n             if !visitor.found_await {"}, {"sha": "bb91317d67f5add0846404f949af346aad2fe29c", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4165f3a965e258531928180195637455299c6f3/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=c4165f3a965e258531928180195637455299c6f3", "patch": "@@ -87,10 +87,10 @@ use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n-    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness, Destination, Expr,\n-    ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n-    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, UnOp,\n+    def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Closure, Constness,\n+    Destination, Expr, ExprKind, FnDecl, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind,\n+    LangItem, Local, MatchSource, Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy,\n+    QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind, UnOp,\n };\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -1861,7 +1861,7 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n \n /// Checks if the given function kind is an async function.\n pub fn is_async_fn(kind: FnKind<'_>) -> bool {\n-    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness == IsAsync::Async)\n+    matches!(kind, FnKind::ItemFn(_, _, header) if header.asyncness.is_async())\n }\n \n /// Peels away all the compiler generated code surrounding the body of an async function,"}]}