{"sha": "b20b69a79b4e8bfc3574c767ec798d356d33045d", "node_id": "C_kwDOAAsO6NoAKGIyMGI2OWE3OWI0ZThiZmMzNTc0Yzc2N2VjNzk4ZDM1NmQzMzA0NWQ", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2022-07-17T07:48:56Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2022-07-17T07:48:56Z"}, "message": "Move SocketAddrCRepr to sys_common", "tree": {"sha": "9ad137a9a8488687d219ae992315bb615c6c72a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ad137a9a8488687d219ae992315bb615c6c72a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b20b69a79b4e8bfc3574c767ec798d356d33045d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b20b69a79b4e8bfc3574c767ec798d356d33045d", "html_url": "https://github.com/rust-lang/rust/commit/b20b69a79b4e8bfc3574c767ec798d356d33045d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b20b69a79b4e8bfc3574c767ec798d356d33045d/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7aabd85faa9e78e40161839b14946c5aa6750086", "url": "https://api.github.com/repos/rust-lang/rust/commits/7aabd85faa9e78e40161839b14946c5aa6750086", "html_url": "https://github.com/rust-lang/rust/commit/7aabd85faa9e78e40161839b14946c5aa6750086"}], "stats": {"total": 66, "additions": 35, "deletions": 31}, "files": [{"sha": "53fee952a7a7a76c720c1a481aa6f9d682f435ae", "filename": "library/std/src/net/addr.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b20b69a79b4e8bfc3574c767ec798d356d33045d/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20b69a79b4e8bfc3574c767ec798d356d33045d/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Faddr.rs?ref=b20b69a79b4e8bfc3574c767ec798d356d33045d", "patch": "@@ -596,37 +596,6 @@ impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n     }\n }\n \n-/// A type with the same memory layout as `c::sockaddr`. Used in converting Rust level\n-/// SocketAddr* types into their system representation. The benefit of this specific\n-/// type over using `c::sockaddr_storage` is that this type is exactly as large as it\n-/// needs to be and not a lot larger. And it can be initialized more cleanly from Rust.\n-#[repr(C)]\n-pub(crate) union SocketAddrCRepr {\n-    v4: c::sockaddr_in,\n-    v6: c::sockaddr_in6,\n-}\n-\n-impl SocketAddrCRepr {\n-    pub fn as_ptr(&self) -> *const c::sockaddr {\n-        self as *const _ as *const c::sockaddr\n-    }\n-}\n-\n-impl<'a> IntoInner<(SocketAddrCRepr, c::socklen_t)> for &'a SocketAddr {\n-    fn into_inner(self) -> (SocketAddrCRepr, c::socklen_t) {\n-        match *self {\n-            SocketAddr::V4(ref a) => {\n-                let sockaddr = SocketAddrCRepr { v4: a.into_inner() };\n-                (sockaddr, mem::size_of::<c::sockaddr_in>() as c::socklen_t)\n-            }\n-            SocketAddr::V6(ref a) => {\n-                let sockaddr = SocketAddrCRepr { v6: a.into_inner() };\n-                (sockaddr, mem::size_of::<c::sockaddr_in6>() as c::socklen_t)\n-            }\n-        }\n-    }\n-}\n-\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Display for SocketAddr {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "47c6a82f6469b4227a0ba1ddfd6a68425234c654", "filename": "library/std/src/sys_common/net.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b20b69a79b4e8bfc3574c767ec798d356d33045d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b20b69a79b4e8bfc3574c767ec798d356d33045d/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fnet.rs?ref=b20b69a79b4e8bfc3574c767ec798d356d33045d", "patch": "@@ -700,3 +700,38 @@ impl fmt::Debug for UdpSocket {\n         res.field(name, &self.inner.as_raw()).finish()\n     }\n }\n+\n+////////////////////////////////////////////////////////////////////////////////\n+// Converting SocketAddr to libc representation\n+////////////////////////////////////////////////////////////////////////////////\n+\n+/// A type with the same memory layout as `c::sockaddr`. Used in converting Rust level\n+/// SocketAddr* types into their system representation. The benefit of this specific\n+/// type over using `c::sockaddr_storage` is that this type is exactly as large as it\n+/// needs to be and not a lot larger. And it can be initialized more cleanly from Rust.\n+#[repr(C)]\n+pub(crate) union SocketAddrCRepr {\n+    v4: c::sockaddr_in,\n+    v6: c::sockaddr_in6,\n+}\n+\n+impl SocketAddrCRepr {\n+    pub fn as_ptr(&self) -> *const c::sockaddr {\n+        self as *const _ as *const c::sockaddr\n+    }\n+}\n+\n+impl<'a> IntoInner<(SocketAddrCRepr, c::socklen_t)> for &'a SocketAddr {\n+    fn into_inner(self) -> (SocketAddrCRepr, c::socklen_t) {\n+        match *self {\n+            SocketAddr::V4(ref a) => {\n+                let sockaddr = SocketAddrCRepr { v4: a.into_inner() };\n+                (sockaddr, mem::size_of::<c::sockaddr_in>() as c::socklen_t)\n+            }\n+            SocketAddr::V6(ref a) => {\n+                let sockaddr = SocketAddrCRepr { v6: a.into_inner() };\n+                (sockaddr, mem::size_of::<c::sockaddr_in6>() as c::socklen_t)\n+            }\n+        }\n+    }\n+}"}]}