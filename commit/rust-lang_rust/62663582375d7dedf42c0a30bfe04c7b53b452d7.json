{"sha": "62663582375d7dedf42c0a30bfe04c7b53b452d7", "node_id": "C_kwDOAAsO6NoAKDYyNjYzNTgyMzc1ZDdkZWRmNDJjMGEzMGJmZTA0YzdiNTNiNDUyZDc", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-04-28T21:06:10Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-05-24T22:00:06Z"}, "message": "Safe Transmute: Check mutability before creating dst -> src obligation\n\n- Only create dst -> src obligation if Dst is mutable\n- Add some long comments to explain parts of the transmutability code that were\n  unclear to me when reading\n- Update/add tests", "tree": {"sha": "13ef5c8eff65f92a698a0d29e87823cbfda92d45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ef5c8eff65f92a698a0d29e87823cbfda92d45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62663582375d7dedf42c0a30bfe04c7b53b452d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62663582375d7dedf42c0a30bfe04c7b53b452d7", "html_url": "https://github.com/rust-lang/rust/commit/62663582375d7dedf42c0a30bfe04c7b53b452d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62663582375d7dedf42c0a30bfe04c7b53b452d7/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db3275c962eae006a7502f89f2eaf07af2d0f1dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/db3275c962eae006a7502f89f2eaf07af2d0f1dd", "html_url": "https://github.com/rust-lang/rust/commit/db3275c962eae006a7502f89f2eaf07af2d0f1dd"}], "stats": {"total": 191, "additions": 128, "deletions": 63}, "files": [{"sha": "82ce2c2fa8d5247c21e0231848ee5b8b621b040d", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -2784,9 +2784,10 @@ impl<'tcx> InferCtxtPrivExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     rustc_transmute::Reason::DstIsTooBig => {\n                         format!(\"The size of `{src}` is smaller than the size of `{dst}`\")\n                     }\n+                    // FIXME(bryangarza): Say exactly what the minimum alignments of src and dst are\n                     rustc_transmute::Reason::DstHasStricterAlignment => {\n                         format!(\n-                            \"The alignment of `{src}` should be stricter than that of `{dst}`, but it is not\"\n+                            \"The minimum alignment of `{src}` should be greater than that of `{dst}`, but it is not\"\n                         )\n                     }\n                     rustc_transmute::Reason::DstIsMoreUnique => {"}, {"sha": "6b8d8a947eae1dd774c2bcbf0f8394576c22e61e", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -6,6 +6,7 @@\n //!\n //! [rustc dev guide]:\n //! https://rustc-dev-guide.rust-lang.org/traits/resolution.html#confirmation\n+use rustc_ast::Mutability;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_hir::lang_items::LangItem;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n@@ -295,6 +296,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 Ok(None) => Ok(vec![]),\n                 Err(_) => Err(Unimplemented),\n                 // FIXME(bryangarza): Add separate `IfAny` case, instead of treating as `IfAll`\n+                // Not possible until the trait solver supports disjunctions of obligations\n                 Ok(Some(rustc_transmute::Condition::IfAll(answers)))\n                 | Ok(Some(rustc_transmute::Condition::IfAny(answers))) => {\n                     let mut nested = vec![];\n@@ -311,7 +313,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let scope = predicate.trait_ref.substs.type_at(2);\n                     let assume_const = predicate.trait_ref.substs.const_at(3);\n                     let make_obl = |from_ty, to_ty| {\n-                        let trait_ref1 = tcx.mk_trait_ref(\n+                        let trait_ref1 = ty::TraitRef::new(\n+                            tcx,\n                             trait_def_id,\n                             [\n                                 ty::GenericArg::from(to_ty),\n@@ -329,8 +332,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         )\n                     };\n \n-                    // FIXME(bryangarza): Check src.mutability or dst.mutability to know whether dst -> src obligation is needed\n-                    Ok(vec![make_obl(src.ty, dst.ty), make_obl(dst.ty, src.ty)])\n+                    // If Dst is mutable, check bidirectionally.\n+                    // For example, transmuting bool -> u8 is OK as long as you can't update that u8\n+                    // to be > 1, because you could later transmute the u8 back to a bool and get UB.\n+                    let mut obligations = vec![make_obl(src.ty, dst.ty)];\n+                    if dst.mutability == Mutability::Mut {\n+                        obligations.push(make_obl(dst.ty, src.ty));\n+                    }\n+                    Ok(obligations)\n                 }\n             }\n         }\n@@ -353,6 +362,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let dst = predicate.trait_ref.substs.type_at(0);\n         let src = predicate.trait_ref.substs.type_at(1);\n+        debug!(?src, ?dst);\n         let mut transmute_env = rustc_transmute::TransmuteTypeEnv::new(self.infcx);\n         let maybe_transmutable = transmute_env.is_transmutable(\n             obligation.cause.clone(),\n@@ -361,7 +371,6 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             assume,\n         );\n \n-        debug!(?src, ?dst);\n         let fully_flattened =\n             flatten_answer_tree(self.tcx(), obligation, predicate, maybe_transmutable)?;\n         debug!(?fully_flattened);"}, {"sha": "76d97e0e6e7a62f4c4462e1299e4a30a64d06b50", "filename": "compiler/rustc_transmute/src/layout/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Fmod.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -31,18 +31,21 @@ impl fmt::Debug for Byte {\n \n pub(crate) trait Def: Debug + Hash + Eq + PartialEq + Copy + Clone {}\n pub trait Ref: Debug + Hash + Eq + PartialEq + Copy + Clone {\n+    fn min_align(&self) -> usize;\n+\n+    fn is_mutable(&self) -> bool;\n+}\n+\n+impl Def for ! {}\n+impl Ref for ! {\n     fn min_align(&self) -> usize {\n-        1\n+        unreachable!()\n     }\n-\n     fn is_mutable(&self) -> bool {\n-        false\n+        unreachable!()\n     }\n }\n \n-impl Def for ! {}\n-impl Ref for ! {}\n-\n #[cfg(feature = \"rustc\")]\n pub mod rustc {\n     use rustc_middle::mir::Mutability;"}, {"sha": "baf63e6d3a22525e44f8a298ef668511fbed5f13", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,4 +1,4 @@\n-#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type, let_chains)]\n+#![feature(alloc_layout_extra, decl_macro, iterator_try_reduce, never_type)]\n #![allow(dead_code, unused_variables)]\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]"}, {"sha": "0f4a096cdae19034324af80865f1f8a286953aeb", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -203,8 +203,29 @@ where\n         if let Some(answer) = cache.get(&(src_state, dst_state)) {\n             answer.clone()\n         } else {\n+            debug!(?src_state, ?dst_state);\n+            debug!(src = ?self.src);\n+            debug!(dst = ?self.dst);\n+            debug!(\n+                src_transitions_len = self.src.transitions.len(),\n+                dst_transitions_len = self.dst.transitions.len()\n+            );\n             let answer = if dst_state == self.dst.accepting {\n                 // truncation: `size_of(Src) >= size_of(Dst)`\n+                //\n+                // Why is truncation OK to do? Because even though the Src is bigger, all we care about\n+                // is whether we have enough data for the Dst to be valid in accordance with what its\n+                // type dictates.\n+                // For example, in a u8 to `()` transmutation, we have enough data available from the u8\n+                // to transmute it to a `()` (though in this case does `()` really need any data to\n+                // begin with? It doesn't). Same thing with u8 to fieldless struct.\n+                // Now then, why is something like u8 to bool not allowed? That is not because the bool\n+                // is smaller in size, but rather because those 2 bits that we are re-interpreting from\n+                // the u8 could introduce invalid states for the bool type.\n+                //\n+                // So, if it's possible to transmute to a smaller Dst by truncating, and we can guarantee\n+                // that none of the actually-used data can introduce an invalid state for Dst's type, we\n+                // are able to safely transmute, even with truncation.\n                 Ok(None)\n             } else if src_state == self.src.accepting {\n                 // extension: `size_of(Src) >= size_of(Dst)`\n@@ -259,6 +280,7 @@ where\n                 // ...if `refs_answer` was computed lazily. The below early\n                 // returns can be deleted without impacting the correctness of\n                 // the algoritm; only its performance.\n+                debug!(?bytes_answer);\n                 match bytes_answer {\n                     Err(_) if !self.assume.validity => return bytes_answer,\n                     Ok(None) if self.assume.validity => return bytes_answer,"}, {"sha": "8ace98a3ed73713277dbbeb3a3ca6ce5fd83a70d", "filename": "tests/ui/transmutability/alignment/align-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Falignment%2Falign-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Falignment%2Falign-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Falignment%2Falign-fail.stderr?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,8 +1,8 @@\n error[E0277]: `&[u8; 0]` cannot be safely transmuted into `&[u16; 0]` in the defining scope of `assert::Context`\n   --> $DIR/align-fail.rs:22:55\n    |\n-LL | ...tatic [u8; 0], &'static [u16; 0]>();\n-   |                   ^^^^^^^^^^^^^^^^^ The alignment of `&[u8; 0]` should be stricter than that of `&[u16; 0]`, but it is not\n+LL | ...c [u8; 0], &'static [u16; 0]>();\n+   |               ^^^^^^^^^^^^^^^^^ The minimum alignment of `&[u8; 0]` should be greater than that of `&[u16; 0]`, but it is not\n    |\n note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/align-fail.rs:10:14"}, {"sha": "49dbe90e4b8b3b960c2e992e5b177da97e31c870", "filename": "tests/ui/transmutability/primitives/bool-mut.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -0,0 +1,17 @@\n+// check-fail\n+//[next] compile-flags: -Ztrait-solver=next\n+\n+#![feature(transmutability)]\n+mod assert {\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n+    pub struct Context;\n+\n+    pub fn is_transmutable<Src, Dst>()\n+    where\n+        Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+    {}\n+}\n+\n+fn main() {\n+    assert::is_transmutable::<&'static mut bool, &'static mut u8>() //~ ERROR cannot be safely transmuted\n+}"}, {"sha": "b36991e1c01c65cd470e4cbcd7a62910be2eff80", "filename": "tests/ui/transmutability/primitives/bool-mut.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool-mut.stderr?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n+  --> $DIR/bool-mut.rs:16:50\n+   |\n+LL |     assert::is_transmutable::<&'static mut bool, &'static mut u8>()\n+   |                                                  ^^^^^^^^^^^^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n+   |\n+note: required by a bound in `is_transmutable`\n+  --> $DIR/bool-mut.rs:11:14\n+   |\n+LL |     pub fn is_transmutable<Src, Dst>()\n+   |            --------------- required by a bound in this function\n+LL |     where\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4b3eb6c517d91fb7ce96d5f7b9e4c6b6e43e67ff", "filename": "tests/ui/transmutability/primitives/bool.current.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.current.stderr?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n-  --> $DIR/bool.rs:24:35\n+  --> $DIR/bool.rs:21:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n    |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n note: required by a bound in `is_transmutable`\n-  --> $DIR/bool.rs:14:14\n+  --> $DIR/bool.rs:11:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function"}, {"sha": "4b3eb6c517d91fb7ce96d5f7b9e4c6b6e43e67ff", "filename": "tests/ui/transmutability/primitives/bool.next.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.next.stderr?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: `u8` cannot be safely transmuted into `bool` in the defining scope of `assert::Context`\n-  --> $DIR/bool.rs:24:35\n+  --> $DIR/bool.rs:21:35\n    |\n LL |     assert::is_transmutable::<u8, bool>();\n    |                                   ^^^^ At least one value of `u8` isn't a bit-valid value of `bool`\n    |\n note: required by a bound in `is_transmutable`\n-  --> $DIR/bool.rs:14:14\n+  --> $DIR/bool.rs:11:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n    |            --------------- required by a bound in this function"}, {"sha": "654e7b47edecc40a53bbb62fbcf2af175ce54a0c", "filename": "tests/ui/transmutability/primitives/bool.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,10 +1,7 @@\n // revisions: current next\n //[next] compile-flags: -Ztrait-solver=next\n \n-#![crate_type = \"lib\"]\n #![feature(transmutability)]\n-#![allow(dead_code)]\n-#![allow(incomplete_features)]\n mod assert {\n     use std::mem::{Assume, BikeshedIntrinsicFrom};\n     pub struct Context;\n@@ -20,7 +17,7 @@ mod assert {\n     {}\n }\n \n-fn contrast_with_u8() {\n+fn main() {\n     assert::is_transmutable::<u8, bool>(); //~ ERROR cannot be safely transmuted\n     assert::is_maybe_transmutable::<u8, bool>();\n     assert::is_transmutable::<bool, u8>();"}, {"sha": "a6e2889d3f23d580b0e40cdb63a7d54510192f93", "filename": "tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible-mut.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -0,0 +1,25 @@\n+// check-fail\n+#![feature(transmutability)]\n+\n+mod assert {\n+    use std::mem::{Assume, BikeshedIntrinsicFrom};\n+    pub struct Context;\n+\n+    pub fn is_maybe_transmutable<Src, Dst>()\n+    where\n+        Dst: BikeshedIntrinsicFrom<Src, Context, {\n+            Assume {\n+                alignment: true,\n+                lifetimes: false,\n+                safety: true,\n+                validity: false,\n+            }\n+        }>\n+    {}\n+}\n+\n+fn main() {\n+    #[repr(C)] struct A(bool, &'static A);\n+    #[repr(C)] struct B(u8, &'static B);\n+    assert::is_maybe_transmutable::<&'static A, &'static mut B>(); //~ ERROR cannot be safely transmuted\n+}"}, {"sha": "4b4d6ad0298ee41a5a59480d2d2c721bb29d9844", "filename": "tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible-mut.stderr", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible-mut.stderr?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,11 +1,11 @@\n-error[E0277]: `B` cannot be safely transmuted into `A` in the defining scope of `assert::Context`\n-  --> $DIR/recursive-wrapper-types-bit-compatible.rs:26:49\n+error[E0277]: `&A` cannot be safely transmuted into `&mut B` in the defining scope of `assert::Context`\n+  --> $DIR/recursive-wrapper-types-bit-compatible-mut.rs:24:49\n    |\n-LL |     assert::is_maybe_transmutable::<&'static A, &'static B>();\n-   |                                                 ^^^^^^^^^^ At least one value of `B` isn't a bit-valid value of `A`\n+LL |     assert::is_maybe_transmutable::<&'static A, &'static mut B>();\n+   |                                                 ^^^^^^^^^^^^^^ `&A` is a shared reference, but `&mut B` is a unique reference\n    |\n note: required by a bound in `is_maybe_transmutable`\n-  --> $DIR/recursive-wrapper-types-bit-compatible.rs:10:14\n+  --> $DIR/recursive-wrapper-types-bit-compatible-mut.rs:10:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n    |              --------------------- required by a bound in this function", "previous_filename": "tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible.stderr"}, {"sha": "709d8cdc762e993d4300bbcfbeb83b66ee12ea02", "filename": "tests/ui/transmutability/references/recursive-wrapper-types-bit-compatible.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-compatible.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,4 +1,4 @@\n-// check-fail\n+// check-pass\n #![feature(transmutability)]\n \n mod assert {\n@@ -21,7 +21,5 @@ mod assert {\n fn main() {\n     #[repr(C)] struct A(bool, &'static A);\n     #[repr(C)] struct B(u8, &'static B);\n-    // FIXME(bryangarza): Make 2 variants of this test, depending on mutability.\n-    // Right now, we are being strict by default and checking A->B and B->A both.\n-    assert::is_maybe_transmutable::<&'static A, &'static B>(); //~ ERROR `B` cannot be safely transmuted into `A`\n+    assert::is_maybe_transmutable::<&'static A, &'static B>();\n }"}, {"sha": "e8582d2fd021279a11f446a2b337adc3b85180d8", "filename": "tests/ui/transmutability/references/recursive-wrapper-types-bit-incompatible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-incompatible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-incompatible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Frecursive-wrapper-types-bit-incompatible.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -21,5 +21,5 @@ mod assert {\n fn main() {\n     #[repr(C)] struct A(bool, &'static A);\n     #[repr(C)] struct B(u8, &'static B);\n-    assert::is_maybe_transmutable::<&'static B, &'static A>(); //~ ERROR `B` cannot be safely transmuted into `A`\n+    assert::is_maybe_transmutable::<&'static B, &'static A>(); //~ ERROR cannot be safely transmuted\n }"}, {"sha": "8b37492bd6b1cc3d0123c413c6910c40993a9b3f", "filename": "tests/ui/transmutability/references/u8-to-unit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -1,4 +1,4 @@\n-// check-fail\n+// check-pass\n #![feature(transmutability)]\n \n mod assert {\n@@ -9,16 +9,16 @@ mod assert {\n     where\n         Dst: BikeshedIntrinsicFrom<Src, Context, {\n             Assume {\n-                alignment: true,\n+                alignment: false,\n                 lifetimes: true,\n                 safety: true,\n-                validity: true,\n+                validity: false,\n             }\n         }>\n     {}\n }\n \n fn main() {\n     #[repr(C)] struct Unit;\n-    assert::is_maybe_transmutable::<&'static u8, &'static Unit>(); //~ ERROR `Unit` cannot be safely transmuted into `u8`\n+    assert::is_maybe_transmutable::<&'static u8, &'static Unit>();\n }"}, {"sha": "81b0b57f0cf4bd158841133d0a89edab52488dad", "filename": "tests/ui/transmutability/references/u8-to-unit.stderr", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/db3275c962eae006a7502f89f2eaf07af2d0f1dd/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/db3275c962eae006a7502f89f2eaf07af2d0f1dd/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Fu8-to-unit.stderr?ref=db3275c962eae006a7502f89f2eaf07af2d0f1dd", "patch": "@@ -1,25 +0,0 @@\n-error[E0277]: `Unit` cannot be safely transmuted into `u8` in the defining scope of `assert::Context`\n-  --> $DIR/u8-to-unit.rs:23:50\n-   |\n-LL |     assert::is_maybe_transmutable::<&'static u8, &'static Unit>();\n-   |                                                  ^^^^^^^^^^^^^ The size of `Unit` is smaller than the size of `u8`\n-   |\n-note: required by a bound in `is_maybe_transmutable`\n-  --> $DIR/u8-to-unit.rs:10:14\n-   |\n-LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this function\n-LL |       where\n-LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n-   |  ______________^\n-LL | |             Assume {\n-LL | |                 alignment: true,\n-LL | |                 lifetimes: true,\n-...  |\n-LL | |             }\n-LL | |         }>\n-   | |__________^ required by this bound in `is_maybe_transmutable`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "eff516e9a9691c1dbc5ebb1a1019b3f7913b053b", "filename": "tests/ui/transmutability/references/unit-to-u8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Funit-to-u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62663582375d7dedf42c0a30bfe04c7b53b452d7/tests%2Fui%2Ftransmutability%2Freferences%2Funit-to-u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences%2Funit-to-u8.rs?ref=62663582375d7dedf42c0a30bfe04c7b53b452d7", "patch": "@@ -12,13 +12,13 @@ mod assert {\n                 alignment: true,\n                 lifetimes: true,\n                 safety: true,\n-                validity: true,\n+                validity: false,\n             }\n         }>\n     {}\n }\n \n fn main() {\n     #[repr(C)] struct Unit;\n-    assert::is_maybe_transmutable::<&'static Unit, &'static u8>(); //~ ERROR `Unit` cannot be safely transmuted into `u8`\n+    assert::is_maybe_transmutable::<&'static Unit, &'static u8>(); //~ ERROR cannot be safely transmuted\n }"}]}