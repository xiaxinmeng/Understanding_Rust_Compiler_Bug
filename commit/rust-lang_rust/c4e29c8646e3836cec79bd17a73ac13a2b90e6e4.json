{"sha": "c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZTI5Yzg2NDZlMzgzNmNlYzc5YmQxN2E3M2FjMTNhMmI5MGU2ZTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-23T18:57:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-24T08:11:48Z"}, "message": "convert dir separators on path load/store", "tree": {"sha": "4096fb2a0432889f3c269050e3158000cbecd310", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4096fb2a0432889f3c269050e3158000cbecd310"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "html_url": "https://github.com/rust-lang/rust/commit/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ac91384ff124d5b6258a648df5176909ff1b780", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ac91384ff124d5b6258a648df5176909ff1b780", "html_url": "https://github.com/rust-lang/rust/commit/4ac91384ff124d5b6258a648df5176909ff1b780"}], "stats": {"total": 78, "additions": 69, "deletions": 9}, "files": [{"sha": "abfe3253ce7b3b1b412e2860dd36627553a4173d", "filename": "src/helpers.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4e29c8646e3836cec79bd17a73ac13a2b90e6e4/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=c4e29c8646e3836cec79bd17a73ac13a2b90e6e4", "patch": "@@ -1,9 +1,14 @@\n use std::ffi::{OsStr, OsString};\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::{iter, mem};\n use std::convert::TryFrom;\n use std::borrow::Cow;\n \n+#[cfg(unix)]\n+use std::os::unix::ffi::{OsStrExt, OsStringExt};\n+#[cfg(windows)]\n+use std::os::windows::ffi::{OsStrExt, OsStringExt};\n+\n use rustc::mir;\n use rustc::ty::{\n     self,\n@@ -479,7 +484,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     {\n         #[cfg(unix)]\n         fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-            Ok(std::os::unix::ffi::OsStrExt::from_bytes(bytes))\n+            Ok(OsStr::from_bytes(bytes))\n         }\n         #[cfg(not(unix))]\n         fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n@@ -499,8 +504,34 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'tcx: 'a,\n         'mir: 'a,\n     {\n-        let os_str = self.read_os_str_from_c_str(scalar)?;\n-        Ok(Cow::Borrowed(Path::new(os_str)))\n+        let this = self.eval_context_ref();\n+        let os_str = this.read_os_str_from_c_str(scalar)?;\n+\n+        #[cfg(windows)]\n+        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            Cow::Borrowed(Path::new(os_str))\n+        } else {\n+            // Unix target, Windows host. Need to convert target '/' to host '\\'.\n+            let converted = os_str\n+                .encode_wide()\n+                .map(|wchar| if wchar == '/' as u16 { '\\\\' as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(PathBuf::from(OsString::from_wide(&converted)))\n+        });\n+        #[cfg(unix)]\n+        return Ok(if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows target, Unix host. Need to convert target '\\' to host '/'.\n+            let converted = os_str\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(PathBuf::from(OsString::from_vec(converted)))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            Cow::Borrowed(Path::new(os_str))\n+        });\n     }\n \n     /// Helper function to read an OsString from a 0x0000-terminated sequence of u16,\n@@ -512,7 +543,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     {\n         #[cfg(windows)]\n         pub fn u16vec_to_osstring<'tcx, 'a>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n-            Ok(std::os::windows::ffi::OsStringExt::from_wide(&u16_vec[..]))\n+            Ok(OsString::from_wide(&u16_vec[..]))\n         }\n         #[cfg(not(windows))]\n         pub fn u16vec_to_osstring<'tcx, 'a>(u16_vec: Vec<u16>) -> InterpResult<'tcx, OsString> {\n@@ -538,7 +569,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(unix)]\n         fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-            Ok(std::os::unix::ffi::OsStrExt::as_bytes(os_str))\n+            Ok(os_str.as_bytes())\n         }\n         #[cfg(not(unix))]\n         fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n@@ -571,8 +602,37 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, (bool, u64)> {\n-        let os_str = path.as_os_str();\n-        self.write_os_str_to_c_str(os_str, scalar, size)\n+        let this = self.eval_context_mut();\n+\n+        #[cfg(windows)]\n+        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows-on-Windows, all fine.\n+            Cow::Borrowed(path.as_os_str())\n+        } else {\n+            // Unix target, Windows host. Need to convert host '\\\\' to target '/'.\n+            let converted = path\n+                .as_os_str()\n+                .encode_wide()\n+                .map(|wchar| if wchar == '\\\\' as u16 { '/' as u16 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_wide(&converted))\n+        };\n+        #[cfg(unix)]\n+        let os_str = if this.tcx.sess.target.target.target_os == \"windows\" {\n+            // Windows target, Unix host. Need to convert host '/' to target '\\'.\n+            let converted = path\n+                .as_os_str()\n+                .as_bytes()\n+                .iter()\n+                .map(|&wchar| if wchar == '/' as u8 { '\\\\' as u8 } else { wchar })\n+                .collect::<Vec<_>>();\n+            Cow::Owned(OsString::from_vec(converted))\n+        } else {\n+            // Unix-on-Unix, all is fine.\n+            Cow::Borrowed(path.as_os_str())\n+        };\n+\n+        this.write_os_str_to_c_str(&os_str, scalar, size)\n     }\n \n     /// Helper function to write an OsStr as a 0x0000-terminated u16-sequence, which is what\n@@ -588,7 +648,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, (bool, u64)> {\n         #[cfg(windows)]\n         fn os_str_to_u16vec<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, Vec<u16>> {\n-            Ok(std::os::windows::ffi::OsStrExt::encode_wide(os_str).collect())\n+            Ok(os_str.encode_wide().collect())\n         }\n         #[cfg(not(windows))]\n         fn os_str_to_u16vec<'tcx>(os_str: &OsStr) -> InterpResult<'tcx, Vec<u16>> {"}]}