{"sha": "bc1dde468c1613743c919cb9f33923cc9916c5b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjMWRkZTQ2OGMxNjEzNzQzYzkxOWNiOWYzMzkyM2NjOTkxNmM1YjQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-21T23:30:06Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-23T20:54:28Z"}, "message": "Compiler and trait changes to make indexing by value.", "tree": {"sha": "9e5629236a2cf429ef6c2f304fe1e517cd612610", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e5629236a2cf429ef6c2f304fe1e517cd612610"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc1dde468c1613743c919cb9f33923cc9916c5b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc1dde468c1613743c919cb9f33923cc9916c5b4", "html_url": "https://github.com/rust-lang/rust/commit/bc1dde468c1613743c919cb9f33923cc9916c5b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc1dde468c1613743c919cb9f33923cc9916c5b4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809a554fca2d0ebc2ba50077016fe282a4064752", "url": "https://api.github.com/repos/rust-lang/rust/commits/809a554fca2d0ebc2ba50077016fe282a4064752", "html_url": "https://github.com/rust-lang/rust/commit/809a554fca2d0ebc2ba50077016fe282a4064752"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "e494527b6a67c921af62f1992a9595c7dab35124", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=bc1dde468c1613743c919cb9f33923cc9916c5b4", "patch": "@@ -169,6 +169,8 @@ pub struct BitVec {\n impl Index<usize> for BitVec {\n     type Output = bool;\n \n+\n+    #[cfg(stage0)]\n     #[inline]\n     fn index(&self, i: &usize) -> &bool {\n         if self.get(*i).expect(\"index out of bounds\") {\n@@ -177,6 +179,16 @@ impl Index<usize> for BitVec {\n             &FALSE\n         }\n     }\n+\n+    #[cfg(not(stage0))]\n+    #[inline]\n+    fn index(&self, i: usize) -> &bool {\n+        if self.get(i).expect(\"index out of bounds\") {\n+            &TRUE\n+        } else {\n+            &FALSE\n+        }\n+    }\n }\n \n /// Computes how many blocks are needed to store that many bits"}, {"sha": "e1e352b5b640cd1b562039fd5cfc5806f2a26c61", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=bc1dde468c1613743c919cb9f33923cc9916c5b4", "patch": "@@ -917,8 +917,14 @@ pub trait Index<Idx: ?Sized> {\n     type Output: ?Sized;\n \n     /// The method for the indexing (`Foo[Bar]`) operation\n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index<'a>(&'a self, index: &Idx) -> &'a Self::Output;\n+\n+    /// The method for the indexing (`Foo[Bar]`) operation\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn index<'a>(&'a self, index: Idx) -> &'a Self::Output;\n }\n \n /// The `IndexMut` trait is used to specify the functionality of indexing\n@@ -960,8 +966,14 @@ pub trait Index<Idx: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n     /// The method for the indexing (`Foo[Bar]`) operation\n+    #[cfg(stage0)]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn index_mut<'a>(&'a mut self, index: &Idx) -> &'a mut Self::Output;\n+\n+    /// The method for the indexing (`Foo[Bar]`) operation\n+    #[cfg(not(stage0))]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    fn index_mut<'a>(&'a mut self, index: Idx) -> &'a mut Self::Output;\n }\n \n /// An unbounded range."}, {"sha": "975bf01fdef6f52f790a1aea0039a7e18b91734c", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=bc1dde468c1613743c919cb9f33923cc9916c5b4", "patch": "@@ -442,7 +442,7 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n                 if !self.walk_overloaded_operator(expr,\n                                                   &**lhs,\n                                                   vec![&**rhs],\n-                                                  PassArgs::ByRef) {\n+                                                  PassArgs::ByValue) {\n                     self.select_from_expr(&**lhs);\n                     self.consume_expr(&**rhs);\n                 }"}, {"sha": "4aff28122bbb3670293da3334bb01a23464f4814", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc1dde468c1613743c919cb9f33923cc9916c5b4/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=bc1dde468c1613743c919cb9f33923cc9916c5b4", "patch": "@@ -843,7 +843,7 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                                base_datum,\n                                                vec![(ix_datum, idx.id)],\n                                                Some(SaveIn(scratch.val)),\n-                                               true));\n+                                               false));\n             let datum = scratch.to_expr_datum();\n             if type_is_sized(bcx.tcx(), elt_ty) {\n                 Datum::new(datum.to_llscalarish(bcx), elt_ty, LvalueExpr)"}]}