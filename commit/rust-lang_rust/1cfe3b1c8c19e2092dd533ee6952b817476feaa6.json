{"sha": "1cfe3b1c8c19e2092dd533ee6952b817476feaa6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZmUzYjFjOGMxOWUyMDkyZGQ1MzNlZTY5NTJiODE3NDc2ZmVhYTY=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-09T02:07:07Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2017-01-09T02:07:07Z"}, "message": "save-analysis: fix over-zealous filter on generated code", "tree": {"sha": "9487d0cdd1bb867d6ae4a1a06d06908f7ec94b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9487d0cdd1bb867d6ae4a1a06d06908f7ec94b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cfe3b1c8c19e2092dd533ee6952b817476feaa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cfe3b1c8c19e2092dd533ee6952b817476feaa6", "html_url": "https://github.com/rust-lang/rust/commit/1cfe3b1c8c19e2092dd533ee6952b817476feaa6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cfe3b1c8c19e2092dd533ee6952b817476feaa6/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "302602bcb3c608979bb9122960fbe037d92666e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/302602bcb3c608979bb9122960fbe037d92666e9", "html_url": "https://github.com/rust-lang/rust/commit/302602bcb3c608979bb9122960fbe037d92666e9"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "06e1a492b4da2e9c93f73cb68260e08c557e4188", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1cfe3b1c8c19e2092dd533ee6952b817476feaa6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cfe3b1c8c19e2092dd533ee6952b817476feaa6/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=1cfe3b1c8c19e2092dd533ee6952b817476feaa6", "patch": "@@ -1343,18 +1343,19 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor<'l> for DumpVisitor<'l, 'tcx, 'll,\n         self.process_macro_use(t.span, t.id);\n         match t.node {\n             ast::TyKind::Path(_, ref path) => {\n-                if self.span.filter_generated(None, t.span) {\n+                if generated_code(t.span) {\n                     return;\n                 }\n \n                 if let Some(id) = self.lookup_def_id(t.id) {\n-                    let sub_span = self.span.sub_span_for_type_name(t.span);\n-                    self.dumper.type_ref(TypeRefData {\n-                        span: sub_span.expect(\"No span found for type ref\"),\n-                        ref_id: Some(id),\n-                        scope: self.cur_scope,\n-                        qualname: String::new()\n-                    }.lower(self.tcx));\n+                    if let Some(sub_span) = self.span.sub_span_for_type_name(t.span) {\n+                        self.dumper.type_ref(TypeRefData {\n+                            span: sub_span,\n+                            ref_id: Some(id),\n+                            scope: self.cur_scope,\n+                            qualname: String::new()\n+                        }.lower(self.tcx));\n+                    }\n                 }\n \n                 self.write_sub_paths_truncated(path);"}]}