{"sha": "743faa21e74cc5b627935e2c4c3365807a5c722f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2ZhYTIxZTc0Y2M1YjYyNzkzNWUyYzRjMzM2NTgwN2E1YzcyMmY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:11:37Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-09T12:11:37Z"}, "message": "Reorganize hir_ty modules\n\nChalk isn't really a 'traits' thing anymore, so it doesn't make sense to\nhave all the Chalk-related stuff in submodules of `traits`.", "tree": {"sha": "28504dbaaa7238c5d7d64d2371dc3b672cb21e16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28504dbaaa7238c5d7d64d2371dc3b672cb21e16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743faa21e74cc5b627935e2c4c3365807a5c722f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743faa21e74cc5b627935e2c4c3365807a5c722f", "html_url": "https://github.com/rust-lang/rust/commit/743faa21e74cc5b627935e2c4c3365807a5c722f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743faa21e74cc5b627935e2c4c3365807a5c722f/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "url": "https://api.github.com/repos/rust-lang/rust/commits/99ed68a109c9f7e0dc6a82ccb5bf854d60943957", "html_url": "https://github.com/rust-lang/rust/commit/99ed68a109c9f7e0dc6a82ccb5bf854d60943957"}], "stats": {"total": 173, "additions": 73, "deletions": 100}, "files": [{"sha": "566e4f406c03969aef1d703a152f5c893e888846", "filename": "crates/hir_ty/src/chalk_db.rs", "status": "renamed", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_db.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -13,25 +13,23 @@ use hir_def::{\n };\n use hir_expand::name::name;\n \n-use super::ChalkContext;\n-use crate::{\n-    db::HirDatabase,\n-    display::HirDisplay,\n-    from_assoc_type_id, make_only_type_binders,\n-    method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS},\n-    to_assoc_type_id, to_chalk_trait_id,\n-    utils::generics,\n-    AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, ProjectionTy, Substitution,\n-    TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause,\n-};\n-use mapping::{convert_where_clauses, generic_predicate_to_inline_bound, TypeAliasAsValue};\n-\n-pub use self::interner::Interner;\n-pub(crate) use self::interner::*;\n-\n-pub(super) mod tls;\n-mod interner;\n-mod mapping;\n+use crate::{AliasEq, AliasTy, BoundVar, CallableDefId, DebruijnIndex, FnDefId, Interner, ProjectionTy, Substitution, TraitRef, TraitRefExt, Ty, TyBuilder, TyExt, TyKind, WhereClause, traits::ChalkContext, db::HirDatabase, display::HirDisplay, from_assoc_type_id, make_only_type_binders, mapping::{convert_where_clauses, generic_predicate_to_inline_bound, TypeAliasAsValue}, method_resolution::{TyFingerprint, ALL_FLOAT_FPS, ALL_INT_FPS}, to_assoc_type_id, to_chalk_trait_id, utils::generics};\n+\n+pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n+pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n+pub(crate) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n+pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n+pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n+\n+pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n+pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n+pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n+pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n+pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n+pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n+pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n+pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n+pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n pub(crate) trait ToChalk {\n     type Chalk;", "previous_filename": "crates/hir_ty/src/traits/chalk.rs"}, {"sha": "ea0580df1615393e163947f29287c7c6fa78bd0f", "filename": "crates/hir_ty/src/db.rs", "status": "modified", "additions": 21, "deletions": 26, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdb.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -9,12 +9,7 @@ use hir_def::{\n };\n use la_arena::ArenaMap;\n \n-use crate::{\n-    method_resolution::{InherentImpls, TraitImpls},\n-    traits::chalk,\n-    Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, PolyFnSig,\n-    QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId,\n-};\n+use crate::{Binders, CallableDefId, FnDefId, ImplTraitId, InferenceResult, Interner, PolyFnSig, QuantifiedWhereClause, ReturnTypeImplTraits, TraitRef, Ty, TyDefId, ValueTyDefId, chalk_db, method_resolution::{InherentImpls, TraitImpls}};\n use hir_expand::name::Name;\n \n #[salsa::query_group(HirDatabaseStorage)]\n@@ -94,33 +89,33 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n     #[salsa::interned]\n     fn intern_closure(&self, id: (DefWithBodyId, ExprId)) -> InternedClosureId;\n \n-    #[salsa::invoke(chalk::associated_ty_data_query)]\n-    fn associated_ty_data(&self, id: chalk::AssocTypeId) -> Arc<chalk::AssociatedTyDatum>;\n+    #[salsa::invoke(chalk_db::associated_ty_data_query)]\n+    fn associated_ty_data(&self, id: chalk_db::AssocTypeId) -> Arc<chalk_db::AssociatedTyDatum>;\n \n-    #[salsa::invoke(chalk::trait_datum_query)]\n-    fn trait_datum(&self, krate: CrateId, trait_id: chalk::TraitId) -> Arc<chalk::TraitDatum>;\n+    #[salsa::invoke(chalk_db::trait_datum_query)]\n+    fn trait_datum(&self, krate: CrateId, trait_id: chalk_db::TraitId) -> Arc<chalk_db::TraitDatum>;\n \n-    #[salsa::invoke(chalk::struct_datum_query)]\n-    fn struct_datum(&self, krate: CrateId, struct_id: chalk::AdtId) -> Arc<chalk::StructDatum>;\n+    #[salsa::invoke(chalk_db::struct_datum_query)]\n+    fn struct_datum(&self, krate: CrateId, struct_id: chalk_db::AdtId) -> Arc<chalk_db::StructDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::impl_datum_query)]\n-    fn impl_datum(&self, krate: CrateId, impl_id: chalk::ImplId) -> Arc<chalk::ImplDatum>;\n+    #[salsa::invoke(chalk_db::impl_datum_query)]\n+    fn impl_datum(&self, krate: CrateId, impl_id: chalk_db::ImplId) -> Arc<chalk_db::ImplDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::fn_def_datum_query)]\n-    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk::FnDefDatum>;\n+    #[salsa::invoke(chalk_db::fn_def_datum_query)]\n+    fn fn_def_datum(&self, krate: CrateId, fn_def_id: FnDefId) -> Arc<chalk_db::FnDefDatum>;\n \n-    #[salsa::invoke(crate::traits::chalk::fn_def_variance_query)]\n-    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk::Variances;\n+    #[salsa::invoke(chalk_db::fn_def_variance_query)]\n+    fn fn_def_variance(&self, krate: CrateId, fn_def_id: FnDefId) -> chalk_db::Variances;\n \n-    #[salsa::invoke(crate::traits::chalk::adt_variance_query)]\n-    fn adt_variance(&self, krate: CrateId, adt_id: chalk::AdtId) -> chalk::Variances;\n+    #[salsa::invoke(chalk_db::adt_variance_query)]\n+    fn adt_variance(&self, krate: CrateId, adt_id: chalk_db::AdtId) -> chalk_db::Variances;\n \n-    #[salsa::invoke(crate::traits::chalk::associated_ty_value_query)]\n+    #[salsa::invoke(chalk_db::associated_ty_value_query)]\n     fn associated_ty_value(\n         &self,\n         krate: CrateId,\n-        id: chalk::AssociatedTyValueId,\n-    ) -> Arc<chalk::AssociatedTyValue>;\n+        id: chalk_db::AssociatedTyValueId,\n+    ) -> Arc<chalk_db::AssociatedTyValue>;\n \n     #[salsa::invoke(crate::traits::trait_solve_query)]\n     fn trait_solve(\n@@ -129,12 +124,12 @@ pub trait HirDatabase: DefDatabase + Upcast<dyn DefDatabase> {\n         goal: crate::Canonical<crate::InEnvironment<crate::DomainGoal>>,\n     ) -> Option<crate::Solution>;\n \n-    #[salsa::invoke(crate::traits::chalk::program_clauses_for_chalk_env_query)]\n+    #[salsa::invoke(chalk_db::program_clauses_for_chalk_env_query)]\n     fn program_clauses_for_chalk_env(\n         &self,\n         krate: CrateId,\n-        env: chalk_ir::Environment<chalk::Interner>,\n-    ) -> chalk_ir::ProgramClauses<chalk::Interner>;\n+        env: chalk_ir::Environment<Interner>,\n+    ) -> chalk_ir::ProgramClauses<Interner>;\n }\n \n fn infer_wait(db: &dyn HirDatabase, def: DefWithBodyId) -> Arc<InferenceResult> {"}, {"sha": "a0746cd8fa29a714442615512be2b73d2c05f9b3", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -21,7 +21,7 @@ use hir_expand::name::Name;\n use crate::{\n     const_from_placeholder_idx, db::HirDatabase, from_assoc_type_id, from_foreign_def_id,\n     from_placeholder_idx, lt_from_placeholder_idx, primitive, subst_prefix, to_assoc_type_id,\n-    traits::chalk::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n+    chalk_db::from_chalk, utils::generics, AdtId, AliasEq, AliasTy, CallableDefId,\n     CallableSig, Const, ConstValue, DomainGoal, GenericArg, ImplTraitId, Interner, Lifetime,\n     LifetimeData, LifetimeOutlives, Mutability, OpaqueTy, ProjectionTy, ProjectionTyExt,\n     QuantifiedWhereClause, Scalar, TraitRef, TraitRefExt, Ty, TyExt, TyKind, WhereClause,"}, {"sha": "d42383012605f9e8fc9f85b95945351e3b2e31da", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -20,7 +20,8 @@ use crate::{\n     method_resolution, op,\n     primitive::{self, UintTy},\n     static_lifetime, to_chalk_trait_id,\n-    traits::{chalk::from_chalk, FnTrait},\n+    traits::FnTrait,\n+    chalk_db::from_chalk,\n     utils::{generics, Generics},\n     AdtId, Binders, CallableDefId, FnPointer, FnSig, FnSubst, InEnvironment, Interner,\n     ProjectionTyExt, Rawness, Scalar, Substitution, TraitRef, Ty, TyBuilder, TyExt, TyKind,"}, {"sha": "0187767cec420d9428f6831e99634c2f461f4bbf", "filename": "crates/hir_ty/src/interner.rs", "status": "renamed", "additions": 4, "deletions": 20, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finterner.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -1,8 +1,7 @@\n //! Implementation of the Chalk `Interner` trait, which allows customizing the\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n-use super::tls;\n-use crate::GenericArg;\n+use crate::{GenericArg, tls, chalk_db};\n use base_db::salsa::InternId;\n use chalk_ir::{Goal, GoalData};\n use hir_def::{\n@@ -15,21 +14,6 @@ use std::{fmt, sync::Arc};\n #[derive(Debug, Copy, Clone, Hash, PartialOrd, Ord, PartialEq, Eq)]\n pub struct Interner;\n \n-pub(crate) type AssocTypeId = chalk_ir::AssocTypeId<Interner>;\n-pub(crate) type AssociatedTyDatum = chalk_solve::rust_ir::AssociatedTyDatum<Interner>;\n-pub(crate) type TraitId = chalk_ir::TraitId<Interner>;\n-pub(crate) type TraitDatum = chalk_solve::rust_ir::TraitDatum<Interner>;\n-pub(crate) type AdtId = chalk_ir::AdtId<Interner>;\n-pub(crate) type StructDatum = chalk_solve::rust_ir::AdtDatum<Interner>;\n-pub(crate) type ImplId = chalk_ir::ImplId<Interner>;\n-pub(crate) type ImplDatum = chalk_solve::rust_ir::ImplDatum<Interner>;\n-pub(crate) type AssociatedTyValueId = chalk_solve::rust_ir::AssociatedTyValueId<Interner>;\n-pub(crate) type AssociatedTyValue = chalk_solve::rust_ir::AssociatedTyValue<Interner>;\n-pub(crate) type FnDefDatum = chalk_solve::rust_ir::FnDefDatum<Interner>;\n-pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n-pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n-pub(crate) type Variances = chalk_ir::Variances<Interner>;\n-\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct InternedWrapper<T>(T);\n \n@@ -76,15 +60,15 @@ impl chalk_ir::interner::Interner for Interner {\n     type Identifier = TypeAliasId;\n     type FnAbi = ();\n \n-    fn debug_adt_id(type_kind_id: AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_adt_id(type_kind_id: chalk_db::AdtId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_struct_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_trait_id(type_kind_id: TraitId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_trait_id(type_kind_id: chalk_db::TraitId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_trait_id(type_kind_id, fmt)))\n     }\n \n-    fn debug_assoc_type_id(id: AssocTypeId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n+    fn debug_assoc_type_id(id: chalk_db::AssocTypeId, fmt: &mut fmt::Formatter<'_>) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_assoc_type_id(id, fmt)))\n     }\n ", "previous_filename": "crates/hir_ty/src/traits/chalk/interner.rs"}, {"sha": "0743d3d30d73bad39c954efe11af198145519075", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -18,6 +18,10 @@ mod chalk_cast;\n mod chalk_ext;\n mod builder;\n mod walk;\n+mod tls;\n+mod interner;\n+mod mapping;\n+mod chalk_db;\n \n pub mod display;\n pub mod db;\n@@ -51,8 +55,9 @@ pub use lower::{\n     associated_type_shorthand_candidates, callable_item_sig, CallableDefId, ImplTraitLoweringMode,\n     TyDefId, TyLoweringContext, ValueTyDefId,\n };\n-pub use traits::{chalk::Interner, TraitEnvironment};\n+pub use traits::TraitEnvironment;\n pub use walk::TypeWalk;\n+pub use interner::Interner;\n \n pub use chalk_ir::{\n     cast::Cast, AdtId, BoundVar, DebruijnIndex, Mutability, Safety, Scalar, TyVariableKind,"}, {"sha": "0cdded3e1b65a92629ae9d023c676975af116cce", "filename": "crates/hir_ty/src/lower.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flower.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -28,7 +28,8 @@ use stdx::impl_from;\n use crate::{\n     db::HirDatabase,\n     dummy_usize_const, static_lifetime, to_assoc_type_id, to_chalk_trait_id, to_placeholder_idx,\n-    traits::chalk::{Interner, ToChalk},\n+    chalk_db::ToChalk,\n+    Interner,\n     utils::{\n         all_super_trait_refs, associated_type_by_name_including_super_traits, generics, Generics,\n     },"}, {"sha": "4d3c41b2c429b0f104fbfeefa8e54959a78691ae", "filename": "crates/hir_ty/src/mapping.rs", "status": "renamed", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fmapping.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -3,40 +3,34 @@\n //! Chalk (in both directions); plus some helper functions for more specialized\n //! conversions.\n \n-use chalk_ir::cast::Cast;\n+use chalk_ir::{DebruijnIndex, cast::Cast, fold::Shift};\n use chalk_solve::rust_ir;\n \n use base_db::salsa::InternKey;\n use hir_def::{GenericDefId, TypeAliasId};\n \n-use crate::{\n-    db::HirDatabase, AliasTy, CallableDefId, ProjectionTyExt, QuantifiedWhereClause, Substitution,\n-    Ty, WhereClause,\n-};\n-\n-use super::interner::*;\n-use super::*;\n+use crate::{AliasEq, AliasTy, CallableDefId, FnDefId, Interner, ProjectionTyExt, QuantifiedWhereClause, Substitution, Ty, WhereClause, chalk_db::{self, ToChalk}, db::HirDatabase};\n \n impl ToChalk for hir_def::TraitId {\n-    type Chalk = TraitId;\n+    type Chalk = chalk_db::TraitId;\n \n-    fn to_chalk(self, _db: &dyn HirDatabase) -> TraitId {\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::TraitId {\n         chalk_ir::TraitId(self.as_intern_id())\n     }\n \n-    fn from_chalk(_db: &dyn HirDatabase, trait_id: TraitId) -> hir_def::TraitId {\n+    fn from_chalk(_db: &dyn HirDatabase, trait_id: chalk_db::TraitId) -> hir_def::TraitId {\n         InternKey::from_intern_id(trait_id.0)\n     }\n }\n \n impl ToChalk for hir_def::ImplId {\n-    type Chalk = ImplId;\n+    type Chalk = chalk_db::ImplId;\n \n-    fn to_chalk(self, _db: &dyn HirDatabase) -> ImplId {\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::ImplId {\n         chalk_ir::ImplId(self.as_intern_id())\n     }\n \n-    fn from_chalk(_db: &dyn HirDatabase, impl_id: ImplId) -> hir_def::ImplId {\n+    fn from_chalk(_db: &dyn HirDatabase, impl_id: chalk_db::ImplId) -> hir_def::ImplId {\n         InternKey::from_intern_id(impl_id.0)\n     }\n }\n@@ -56,15 +50,15 @@ impl ToChalk for CallableDefId {\n pub(crate) struct TypeAliasAsValue(pub(crate) TypeAliasId);\n \n impl ToChalk for TypeAliasAsValue {\n-    type Chalk = AssociatedTyValueId;\n+    type Chalk = chalk_db::AssociatedTyValueId;\n \n-    fn to_chalk(self, _db: &dyn HirDatabase) -> AssociatedTyValueId {\n+    fn to_chalk(self, _db: &dyn HirDatabase) -> chalk_db::AssociatedTyValueId {\n         rust_ir::AssociatedTyValueId(self.0.as_intern_id())\n     }\n \n     fn from_chalk(\n         _db: &dyn HirDatabase,\n-        assoc_ty_value_id: AssociatedTyValueId,\n+        assoc_ty_value_id: chalk_db::AssociatedTyValueId,\n     ) -> TypeAliasAsValue {\n         TypeAliasAsValue(TypeAliasId::from_intern_id(assoc_ty_value_id.0))\n     }", "previous_filename": "crates/hir_ty/src/traits/chalk/mapping.rs"}, {"sha": "c319bcf7044dd46f4377fad5ebdda5d56c69c12e", "filename": "crates/hir_ty/src/tls.rs", "status": "renamed", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftls.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -4,8 +4,7 @@ use std::fmt;\n use chalk_ir::{AliasTy, GenericArg, Goal, Goals, Lifetime, ProgramClauseImplication};\n use itertools::Itertools;\n \n-use super::{from_chalk, Interner};\n-use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId};\n+use crate::{db::HirDatabase, from_assoc_type_id, CallableDefId, chalk_db::{from_chalk, self}, Interner};\n use hir_def::{AdtId, AssocContainerId, Lookup, TypeAliasId};\n \n pub(crate) use unsafe_tls::{set_current_program, with_current_program};\n@@ -15,7 +14,7 @@ pub(crate) struct DebugContext<'a>(&'a dyn HirDatabase);\n impl DebugContext<'_> {\n     pub(crate) fn debug_struct_id(\n         &self,\n-        id: super::AdtId,\n+        id: chalk_db::AdtId,\n         f: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let name = match id.0 {\n@@ -28,7 +27,7 @@ impl DebugContext<'_> {\n \n     pub(crate) fn debug_trait_id(\n         &self,\n-        id: super::TraitId,\n+        id: chalk_db::TraitId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let trait_: hir_def::TraitId = from_chalk(self.0, id);\n@@ -38,7 +37,7 @@ impl DebugContext<'_> {\n \n     pub(crate) fn debug_assoc_type_id(\n         &self,\n-        id: super::AssocTypeId,\n+        id: chalk_db::AssocTypeId,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Result<(), fmt::Error> {\n         let type_alias: TypeAliasId = from_assoc_type_id(id);", "previous_filename": "crates/hir_ty/src/traits/chalk/tls.rs"}, {"sha": "5f8666d902785dbd1f7540fec7b8ab8b099445d7", "filename": "crates/hir_ty/src/traits.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743faa21e74cc5b627935e2c4c3365807a5c722f/crates%2Fhir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits.rs?ref=743faa21e74cc5b627935e2c4c3365807a5c722f", "patch": "@@ -9,20 +9,16 @@ use stdx::panic_context;\n \n use crate::{\n     db::HirDatabase, AliasEq, AliasTy, Canonical, DomainGoal, Guidance, HirDisplay, InEnvironment,\n-    Solution, TraitRefExt, Ty, TyKind, WhereClause,\n+    Solution, TraitRefExt, Ty, TyKind, WhereClause, Interner,\n };\n \n-use self::chalk::Interner;\n-\n-pub(crate) mod chalk;\n-\n /// This controls how much 'time' we give the Chalk solver before giving up.\n const CHALK_SOLVER_FUEL: i32 = 100;\n \n #[derive(Debug, Copy, Clone)]\n-struct ChalkContext<'a> {\n-    db: &'a dyn HirDatabase,\n-    krate: CrateId,\n+pub(crate) struct ChalkContext<'a> {\n+    pub(crate) db: &'a dyn HirDatabase,\n+    pub(crate) krate: CrateId,\n }\n \n fn create_chalk_solver() -> chalk_recursive::RecursiveSolver<Interner> {\n@@ -148,7 +144,7 @@ fn solve(\n     // don't set the TLS for Chalk unless Chalk debugging is active, to make\n     // extra sure we only use it for debugging\n     let solution =\n-        if is_chalk_debug() { chalk::tls::set_current_program(db, solve) } else { solve() };\n+        if is_chalk_debug() { crate::tls::set_current_program(db, solve) } else { solve() };\n \n     solution\n }"}]}