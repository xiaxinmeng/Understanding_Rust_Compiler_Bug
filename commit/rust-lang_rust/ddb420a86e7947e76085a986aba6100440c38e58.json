{"sha": "ddb420a86e7947e76085a986aba6100440c38e58", "node_id": "C_kwDOAAsO6NoAKGRkYjQyMGE4NmU3OTQ3ZTc2MDg1YTk4NmFiYTYxMDA0NDBjMzhlNTg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-01-02T14:19:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-02T14:19:07Z"}, "message": "Merge #11164\n\n11164: internal: more macro tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a7722827e8869a1466db6664823cb1a0c2c6b978", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7722827e8869a1466db6664823cb1a0c2c6b978"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddb420a86e7947e76085a986aba6100440c38e58", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh0bRbCRBK7hj4Ov3rIwAADqsIAANmKZCBaKdKXAlBytRrcuOb\nCqgzrR1HvOJij1Sculsmte7c3JGBJ3I7sjRF3OmsNN/GuKk3hmpETudOqs11u9Tn\nN59SC9V3Jiz/TvLfQhO3h7a2Lkvb8sODbqNrje3q858V2t8IrogtucKg+nbcRUVh\nkwjG+40cIybckPilV2VpBRCauN5RZ0ZuqC+cXQZry3vNHyJRH1/SSVmr2Ke9XNTd\nQ5sfB18bBqKYVqG3X498rE7Wv4smlij1pIgNFXuUia+Y9bKOyClJmpJcAO1idyPn\nhFELDhvNbpn2lY5NnLcajhfWCql44DwlEdin33KiU+V+P5PiaRe1uElpqo3Vcbk=\n=2VR2\n-----END PGP SIGNATURE-----\n", "payload": "tree a7722827e8869a1466db6664823cb1a0c2c6b978\nparent 25dd65dae2f3ffbe2c44e0197971b8cd908f5626\nparent 7989d567e2c642e3a9444c9092d83789c1fb82a4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1641133147 +0000\ncommitter GitHub <noreply@github.com> 1641133147 +0000\n\nMerge #11164\n\n11164: internal: more macro tests r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddb420a86e7947e76085a986aba6100440c38e58", "html_url": "https://github.com/rust-lang/rust/commit/ddb420a86e7947e76085a986aba6100440c38e58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddb420a86e7947e76085a986aba6100440c38e58/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "url": "https://api.github.com/repos/rust-lang/rust/commits/25dd65dae2f3ffbe2c44e0197971b8cd908f5626", "html_url": "https://github.com/rust-lang/rust/commit/25dd65dae2f3ffbe2c44e0197971b8cd908f5626"}, {"sha": "7989d567e2c642e3a9444c9092d83789c1fb82a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7989d567e2c642e3a9444c9092d83789c1fb82a4", "html_url": "https://github.com/rust-lang/rust/commit/7989d567e2c642e3a9444c9092d83789c1fb82a4"}], "stats": {"total": 135, "additions": 113, "deletions": 22}, "files": [{"sha": "2cd70a84c537fb2f8433b0ebf5b1b73cfc847e5f", "filename": "crates/hir_def/src/macro_expansion_tests/mbe.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe.rs?ref=ddb420a86e7947e76085a986aba6100440c38e58", "patch": "@@ -85,26 +85,6 @@ impl From<Subtree> for TokenTree {\n     );\n }\n \n-#[test]\n-fn expansion_does_not_parse_as_expression() {\n-    check(\n-        r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = stmts!(); }\n-\"#,\n-        expect![[r#\"\n-macro_rules! stmts {\n-    () => { let _ = 0; }\n-}\n-\n-fn f() { let _ = /* error: could not convert tokens */; }\n-\"#]],\n-    )\n-}\n-\n #[test]\n fn wrong_nesting_level() {\n     check("}, {"sha": "97c27c453b00de6482931cf106df7eafd4955b57", "filename": "crates/hir_def/src/macro_expansion_tests/mbe/tt_conversion.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fmacro_expansion_tests%2Fmbe%2Ftt_conversion.rs?ref=ddb420a86e7947e76085a986aba6100440c38e58", "patch": "@@ -2,7 +2,9 @@\n //! Rather, token trees are an explicit bridge between the parser and\n //! (procedural or declarative) macros.\n //!\n-//! This module tests tt <-> syntax tree conversion specifically\n+//! This module tests tt <-> syntax tree conversion specifically. In particular,\n+//! it, among other things, check that we convert `tt` to the right kind of\n+//! syntax node depending on the macro call-site.\n use expect_test::expect;\n \n use crate::macro_expansion_tests::check;\n@@ -100,3 +102,49 @@ macro_rules! m2 { ($x:ident) => {} }\n \"#]],\n     )\n }\n+\n+#[test]\n+fn expansion_does_not_parse_as_expression() {\n+    cov_mark::check!(expansion_does_not_parse_as_expression);\n+    check(\n+        r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = stmts!(); }\n+\"#,\n+        expect![[r#\"\n+macro_rules! stmts {\n+    () => { let _ = 0; }\n+}\n+\n+fn f() { let _ = /* error: could not convert tokens */; }\n+\"#]],\n+    )\n+}\n+\n+#[test]\n+fn broken_pat() {\n+    check(\n+        r#\"\n+macro_rules! m1 { () => (Some(x) left overs) }\n+macro_rules! m2 { () => ($) }\n+\n+fn main() {\n+    let m1!() = ();\n+    let m2!/*+errors*/() = ();\n+}\n+\"#,\n+        expect![[r#\"\n+macro_rules! m1 { () => (Some(x) left overs) }\n+macro_rules! m2 { () => ($) }\n+\n+fn main() {\n+    let Some(x) = ();\n+    let /* parse error: expected pattern */\n+$ = ();\n+}\n+\"#]],\n+    )\n+}"}, {"sha": "1141365e82c852e83e0af0ddbfc7c26df5d260f7", "filename": "crates/mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fsyntax_bridge.rs?ref=ddb420a86e7947e76085a986aba6100440c38e58", "patch": "@@ -67,6 +67,7 @@ pub fn token_tree_to_syntax_node(\n         }\n     }\n     if tree_sink.roots.len() != 1 {\n+        cov_mark::hit!(expansion_does_not_parse_as_expression);\n         return Err(ExpandError::ConversionError);\n     }\n     //FIXME: would be cool to report errors"}, {"sha": "c0437bc3b8ae1d95ed2da089defc70fd39d6967c", "filename": "crates/parser/src/tests.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fparser%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fparser%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests.rs?ref=ddb420a86e7947e76085a986aba6100440c38e58", "patch": "@@ -114,7 +114,13 @@ fn parse(entry: TopEntryPoint, text: &str) -> (String, bool) {\n             errors.push(format!(\"error {}: {}\\n\", pos, msg))\n         }\n     });\n-    assert_eq!(len, text.len());\n+    assert_eq!(\n+        len,\n+        text.len(),\n+        \"didn't parse all text.\\nParsed:\\n{}\\n\\nAll:\\n{}\\n\",\n+        &text[..len],\n+        text\n+    );\n \n     for (token, msg) in lexed.errors() {\n         let pos = lexed.text_start(token);"}, {"sha": "fa25ffd0a26ed8af540830a5c19e30187f1b10e1", "filename": "crates/parser/src/tests/top_entries.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddb420a86e7947e76085a986aba6100440c38e58/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Ftests%2Ftop_entries.rs?ref=ddb420a86e7947e76085a986aba6100440c38e58", "patch": "@@ -92,6 +92,62 @@ fn macro_stmt() {\n     );\n }\n \n+#[test]\n+fn macro_items() {\n+    check(\n+        TopEntryPoint::MacroItems,\n+        \"#!/usr/bin/rust\",\n+        expect![[r##\"\n+            MACRO_ITEMS\n+              ERROR\n+                SHEBANG \"#!/usr/bin/rust\"\n+            error 0: expected an item\n+        \"##]],\n+    );\n+    check(\n+        TopEntryPoint::MacroItems,\n+        \"struct S; foo!{}\",\n+        expect![[r#\"\n+            MACRO_ITEMS\n+              STRUCT\n+                STRUCT_KW \"struct\"\n+                WHITESPACE \" \"\n+                NAME\n+                  IDENT \"S\"\n+                SEMICOLON \";\"\n+              WHITESPACE \" \"\n+              MACRO_CALL\n+                PATH\n+                  PATH_SEGMENT\n+                    NAME_REF\n+                      IDENT \"foo\"\n+                BANG \"!\"\n+                TOKEN_TREE\n+                  L_CURLY \"{\"\n+                  R_CURLY \"}\"\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn macro_pattern() {\n+    check(\n+        TopEntryPoint::Pattern,\n+        \"Some(_)\",\n+        expect![[r#\"\n+            TUPLE_STRUCT_PAT\n+              PATH\n+                PATH_SEGMENT\n+                  NAME_REF\n+                    IDENT \"Some\"\n+              L_PAREN \"(\"\n+              WILDCARD_PAT\n+                UNDERSCORE \"_\"\n+              R_PAREN \")\"\n+        \"#]],\n+    );\n+}\n+\n #[track_caller]\n fn check(entry: TopEntryPoint, input: &str, expect: expect_test::Expect) {\n     let (parsed, _errors) = super::parse(entry, input);"}]}