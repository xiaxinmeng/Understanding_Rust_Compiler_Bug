{"sha": "7f3501275d8f54d6a393db5bafc0a189a01dc200", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzUwMTI3NWQ4ZjU0ZDZhMzkzZGI1YmFmYzBhMTg5YTAxZGMyMDA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-26T05:59:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-11-26T17:10:10Z"}, "message": "Correctly handle libuv errors in addrinfo calls\n\nIt turns out that libuv was returning ENOSPC to us in our usage of the\nuv_ipX_name functions. It also turns out that there may be an off-by-one in\nlibuv. For now just add one to the buffer size and handle the return value\ncorrectly.\n\nCloses #10663", "tree": {"sha": "f8565cc994f280cb21fd4fed36ff31d0f9e87faf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8565cc994f280cb21fd4fed36ff31d0f9e87faf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3501275d8f54d6a393db5bafc0a189a01dc200", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3501275d8f54d6a393db5bafc0a189a01dc200", "html_url": "https://github.com/rust-lang/rust/commit/7f3501275d8f54d6a393db5bafc0a189a01dc200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3501275d8f54d6a393db5bafc0a189a01dc200/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "679a2c042fb2541f55f1192ca97672907b258337", "url": "https://api.github.com/repos/rust-lang/rust/commits/679a2c042fb2541f55f1192ca97672907b258337", "html_url": "https://github.com/rust-lang/rust/commit/679a2c042fb2541f55f1192ca97672907b258337"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "5a8a1a1ee20f057d0e49b0a142251c175b3a2ac1", "filename": "src/librustuv/addrinfo.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7f3501275d8f54d6a393db5bafc0a189a01dc200/src%2Flibrustuv%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3501275d8f54d6a393db5bafc0a189a01dc200/src%2Flibrustuv%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Faddrinfo.rs?ref=7f3501275d8f54d6a393db5bafc0a189a01dc200", "patch": "@@ -184,14 +184,14 @@ pub fn accum_addrinfo(addr: &Addrinfo) -> ~[ai::Info] {\n     }\n }\n \n-#[cfg(test)]\n+// cannot give tcp/ip permission without help of apk\n+#[cfg(test, not(target_os=\"android\"))]\n mod test {\n     use std::io::net::ip::{SocketAddr, Ipv4Addr};\n     use super::*;\n     use super::super::local_loop;\n \n     #[test]\n-    #[ignore(cfg(target_os=\"android\"))] // cannot give tcp/ip permission without help of apk\n     fn getaddrinfo_test() {\n         match GetAddrInfoRequest::run(local_loop(), Some(\"localhost\"), None, None) {\n             Ok(infos) => {\n@@ -208,4 +208,12 @@ mod test {\n             Err(e) => fail!(\"{:?}\", e),\n         }\n     }\n+\n+    #[test]\n+    fn issue_10663() {\n+        // Something should happen here, but this certainly shouldn't cause\n+        // everything to die. The actual outcome we don't care too much about.\n+        GetAddrInfoRequest::run(local_loop(), Some(\"irc.n0v4.com\"), None,\n+                                None);\n+    }\n }"}, {"sha": "3ea466b16e609f1c9aafc001d129346de7ce4054", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7f3501275d8f54d6a393db5bafc0a189a01dc200/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3501275d8f54d6a393db5bafc0a189a01dc200/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=7f3501275d8f54d6a393db5bafc0a189a01dc200", "patch": "@@ -59,12 +59,17 @@ pub fn sockaddr_to_socket_addr(addr: *sockaddr) -> SocketAddr {\n             fail!(\"unknown address?\");\n         };\n         let ip_name = {\n+            // apparently there's an off-by-one in libuv?\n+            let ip_size = ip_size + 1;\n             let buf = vec::from_elem(ip_size + 1 /*null terminated*/, 0u8);\n             let buf_ptr = vec::raw::to_ptr(buf);\n-            if uvll::rust_is_ipv4_sockaddr(addr) == 1 {\n-                uvll::uv_ip4_name(addr, buf_ptr as *c_char, ip_size as size_t);\n+            let ret = if uvll::rust_is_ipv4_sockaddr(addr) == 1 {\n+                uvll::uv_ip4_name(addr, buf_ptr as *c_char, ip_size as size_t)\n             } else {\n-                uvll::uv_ip6_name(addr, buf_ptr as *c_char, ip_size as size_t);\n+                uvll::uv_ip6_name(addr, buf_ptr as *c_char, ip_size as size_t)\n+            };\n+            if ret != 0 {\n+                fail!(\"error parsing sockaddr: {}\", UvError(ret).desc());\n             }\n             buf\n         };"}]}