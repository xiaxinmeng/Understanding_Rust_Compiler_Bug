{"sha": "350b50df0035b5bb0520d5a84adfc117c5ce9752", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MGI1MGRmMDAzNWI1YmIwNTIwZDVhODRhZGZjMTE3YzVjZTk3NTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2016-02-11T16:31:31Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-02-19T23:54:58Z"}, "message": "deref the argument of overloaded MIR autoderef\n\nFixes #31466", "tree": {"sha": "5d642e9269194451964e90714f0fc5bde408cb07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d642e9269194451964e90714f0fc5bde408cb07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/350b50df0035b5bb0520d5a84adfc117c5ce9752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/350b50df0035b5bb0520d5a84adfc117c5ce9752", "html_url": "https://github.com/rust-lang/rust/commit/350b50df0035b5bb0520d5a84adfc117c5ce9752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/350b50df0035b5bb0520d5a84adfc117c5ce9752/comments", "author": null, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/76608c8e0a09687e485b8a1eb0b47156ac54a7f3", "html_url": "https://github.com/rust-lang/rust/commit/76608c8e0a09687e485b8a1eb0b47156ac54a7f3"}], "stats": {"total": 77, "additions": 73, "deletions": 4}, "files": [{"sha": "4a91f2b66a1ebd10eba43e078c3213da04982366", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/350b50df0035b5bb0520d5a84adfc117c5ce9752/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350b50df0035b5bb0520d5a84adfc117c5ce9752/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=350b50df0035b5bb0520d5a84adfc117c5ce9752", "patch": "@@ -416,7 +416,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n             kind: kind,\n         };\n \n-        debug!(\"unadjusted-expr={:?} applying adjustments={:?}\",\n+        debug!(\"make_mirror: unadjusted-expr={:?} applying adjustments={:?}\",\n                expr, cx.tcx.tables.borrow().adjustments.get(&self.id));\n \n         // Now apply adjustments, if any.\n@@ -459,10 +459,38 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Expr {\n                             self.span,\n                             i,\n                             |mc| cx.tcx.tables.borrow().method_map.get(&mc).map(|m| m.ty));\n-                    let kind = if cx.tcx.is_overloaded_autoderef(self.id, i) {\n-                        overloaded_lvalue(cx, self, ty::MethodCall::autoderef(self.id, i),\n-                                          PassArgs::ByValue, expr.to_ref(), vec![])\n+                    debug!(\"make_mirror: autoderef #{}, adjusted_ty={:?}\", i, adjusted_ty);\n+                    let method_key = ty::MethodCall::autoderef(self.id, i);\n+                    let meth_ty =\n+                        cx.tcx.tables.borrow().method_map.get(&method_key).map(|m| m.ty);\n+                    let kind = if let Some(meth_ty) = meth_ty {\n+                        debug!(\"make_mirror: overloaded autoderef (meth_ty={:?})\", meth_ty);\n+\n+                        let ref_ty = cx.tcx.no_late_bound_regions(&meth_ty.fn_ret());\n+                        let (region, mutbl) = match ref_ty {\n+                            Some(ty::FnConverging(&ty::TyS {\n+                                sty: ty::TyRef(region, mt), ..\n+                            })) => (region, mt.mutbl),\n+                            _ => cx.tcx.sess.span_bug(\n+                                expr.span, \"autoderef returned bad type\")\n+                        };\n+\n+                        expr = Expr {\n+                            temp_lifetime: temp_lifetime,\n+                            ty: cx.tcx.mk_ref(\n+                                region, ty::TypeAndMut { ty: expr.ty, mutbl: mutbl }),\n+                            span: expr.span,\n+                            kind: ExprKind::Borrow {\n+                                region: *region,\n+                                borrow_kind: to_borrow_kind(mutbl),\n+                                arg: expr.to_ref()\n+                            }\n+                        };\n+\n+                        overloaded_lvalue(cx, self, method_key,\n+                                          PassArgs::ByRef, expr.to_ref(), vec![])\n                     } else {\n+                        debug!(\"make_mirror: built-in autoderef\");\n                         ExprKind::Deref { arg: expr.to_ref() }\n                     };\n                     expr = Expr {"}, {"sha": "81712e4569f06b288985fdb0a6590929e21eb8e7", "filename": "src/test/run-pass/mir_autoderef.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/350b50df0035b5bb0520d5a84adfc117c5ce9752/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/350b50df0035b5bb0520d5a84adfc117c5ce9752/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_autoderef.rs?ref=350b50df0035b5bb0520d5a84adfc117c5ce9752", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::ops::{Deref, DerefMut};\n+\n+pub struct MyRef(u32);\n+\n+impl Deref for MyRef {\n+    type Target = u32;\n+    fn deref(&self) -> &u32 { &self.0 }\n+}\n+\n+impl DerefMut for MyRef {\n+    fn deref_mut(&mut self) -> &mut u32 { &mut self.0 }\n+}\n+\n+\n+#[rustc_mir]\n+fn deref(x: &MyRef) -> &u32 {\n+    x\n+}\n+\n+#[rustc_mir]\n+fn deref_mut(x: &mut MyRef) -> &mut u32 {\n+    x\n+}\n+\n+fn main() {\n+    let mut r = MyRef(2);\n+    assert_eq!(deref(&r) as *const _, &r.0 as *const _);\n+    assert_eq!(deref_mut(&mut r) as *mut _, &mut r.0 as *mut _);\n+}"}]}