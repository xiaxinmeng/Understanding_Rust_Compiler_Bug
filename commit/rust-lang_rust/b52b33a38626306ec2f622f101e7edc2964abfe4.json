{"sha": "b52b33a38626306ec2f622f101e7edc2964abfe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MmIzM2EzODYyNjMwNmVjMmY2MjJmMTAxZTdlZGMyOTY0YWJmZTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T16:55:41Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-24T20:47:58Z"}, "message": "Rollup merge of #48143 - nikomatsakis:termination_trait_in_tests, r=eddyb\n\nTermination trait in tests\n\nSupport the `Termination` trait in unit tests (cc https://github.com/rust-lang/rust/issues/43301)\n\nAlso, a drive-by fix for #47075.\n\nThis is joint work with @bkchr.", "tree": {"sha": "4b27672436eb209ea15241c131367efa67881eb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b27672436eb209ea15241c131367efa67881eb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b52b33a38626306ec2f622f101e7edc2964abfe4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b52b33a38626306ec2f622f101e7edc2964abfe4", "html_url": "https://github.com/rust-lang/rust/commit/b52b33a38626306ec2f622f101e7edc2964abfe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b52b33a38626306ec2f622f101e7edc2964abfe4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "url": "https://api.github.com/repos/rust-lang/rust/commits/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "html_url": "https://github.com/rust-lang/rust/commit/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066"}, {"sha": "10f7c110928ee7d3db7fef15fd7dce776b17e161", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f7c110928ee7d3db7fef15fd7dce776b17e161", "html_url": "https://github.com/rust-lang/rust/commit/10f7c110928ee7d3db7fef15fd7dce776b17e161"}], "stats": {"total": 447, "additions": 300, "deletions": 147}, "files": [{"sha": "40dd557b7da6873944fb7f26cbe4064eac95efc9", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -818,7 +818,8 @@ pub fn phase_2_configure_and_expand_inner<'a, F>(sess: &'a Session,\n                                          &mut resolver,\n                                          sess.opts.test,\n                                          krate,\n-                                         sess.diagnostic())\n+                                         sess.diagnostic(),\n+                                         &sess.features.borrow())\n     });\n \n     // If we're actually rustdoc then there's no need to actually compile"}, {"sha": "d7d856fe3ad068e096ce60ab329f9bcca3c4e327", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -500,11 +500,6 @@ mod memchr;\n // The runtime entry point and a few unstable public functions used by the\n // compiler\n pub mod rt;\n-// The trait to support returning arbitrary types in the main function\n-mod termination;\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-pub use self::termination::Termination;\n \n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`"}, {"sha": "e25599b8bd8712e6c13fafbf9ec27fe93509d329", "filename": "src/libstd/process.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -1392,6 +1392,73 @@ pub fn id() -> u32 {\n     ::sys::os::getpid()\n }\n \n+#[cfg(target_arch = \"wasm32\")]\n+mod exit {\n+    pub const SUCCESS: i32 = 0;\n+    pub const FAILURE: i32 = 1;\n+}\n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod exit {\n+    use libc;\n+    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n+    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n+}\n+\n+/// A trait for implementing arbitrary return types in the `main` function.\n+///\n+/// The c-main function only supports to return integers as return type.\n+/// So, every type implementing the `Termination` trait has to be converted\n+/// to an integer.\n+///\n+/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n+/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n+#[cfg_attr(not(test), lang = \"termination\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[rustc_on_unimplemented =\n+  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n+pub trait Termination {\n+    /// Is called to get the representation of the value as status code.\n+    /// This status code is returned to the operating system.\n+    fn report(self) -> i32;\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for () {\n+    fn report(self) -> i32 { exit::SUCCESS }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n+    fn report(self) -> i32 {\n+        match self {\n+            Ok(val) => val.report(),\n+            Err(err) => {\n+                eprintln!(\"Error: {:?}\", err);\n+                exit::FAILURE\n+            }\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for ! {\n+    fn report(self) -> i32 { unreachable!(); }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for bool {\n+    fn report(self) -> i32 {\n+        if self { exit::SUCCESS } else { exit::FAILURE }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for i32 {\n+    fn report(self) -> i32 {\n+        self\n+    }\n+}\n+\n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n     use io::prelude::*;"}, {"sha": "e1392762a59dc7c76e5b73142b11b05a9702bae7", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -68,7 +68,7 @@ fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n \n #[cfg(not(test))]\n #[lang = \"start\"]\n-fn lang_start<T: ::termination::Termination + 'static>\n+fn lang_start<T: ::process::Termination + 'static>\n     (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n {\n     lang_start_internal(&move || main().report(), argc, argv)"}, {"sha": "dc7fa53aab63253110945b97a52c82b5b87c2553", "filename": "src/libstd/termination.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=a79e5e210e5e20077b2a5cf6c0c8d2bdc11e6066", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use fmt::Debug;\n-#[cfg(target_arch = \"wasm32\")]\n-mod exit {\n-    pub const SUCCESS: i32 = 0;\n-    pub const FAILURE: i32 = 1;\n-}\n-#[cfg(not(target_arch = \"wasm32\"))]\n-mod exit {\n-    use libc;\n-    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n-    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n-}\n-\n-/// A trait for implementing arbitrary return types in the `main` function.\n-///\n-/// The c-main function only supports to return integers as return type.\n-/// So, every type implementing the `Termination` trait has to be converted\n-/// to an integer.\n-///\n-/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n-/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n-#[cfg_attr(not(test), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-#[rustc_on_unimplemented =\n-  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n-pub trait Termination {\n-    /// Is called to get the representation of the value as status code.\n-    /// This status code is returned to the operating system.\n-    fn report(self) -> i32;\n-}\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-impl Termination for () {\n-    fn report(self) -> i32 { exit::SUCCESS }\n-}\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-impl<T: Termination, E: Debug> Termination for Result<T, E> {\n-    fn report(self) -> i32 {\n-        match self {\n-            Ok(val) => val.report(),\n-            Err(err) => {\n-                eprintln!(\"Error: {:?}\", err);\n-                exit::FAILURE\n-            }\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-impl Termination for ! {\n-    fn report(self) -> i32 { unreachable!(); }\n-}\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-impl Termination for bool {\n-    fn report(self) -> i32 {\n-        if self { exit::SUCCESS } else { exit::FAILURE }\n-    }\n-}\n-\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-impl Termination for i32 {\n-    fn report(self) -> i32 {\n-        self\n-    }\n-}"}, {"sha": "b88e064e7e56dd059c8d54290a9cd005c3a9d6f7", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -319,14 +319,8 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 types: Vec<P<ast::Ty>>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n-        use syntax::parse::token;\n-\n         let last_identifier = idents.pop().unwrap();\n         let mut segments: Vec<ast::PathSegment> = Vec::new();\n-        if global &&\n-           !idents.first().map_or(false, |&ident| token::Ident(ident).is_path_segment_keyword()) {\n-            segments.push(ast::PathSegment::crate_root(span));\n-        }\n \n         segments.extend(idents.into_iter().map(|i| ast::PathSegment::from_ident(i, span)));\n         let parameters = if !lifetimes.is_empty() || !types.is_empty() || !bindings.is_empty() {\n@@ -335,7 +329,9 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n             None\n         };\n         segments.push(ast::PathSegment { identifier: last_identifier, span, parameters });\n-        ast::Path { span, segments }\n+        let path = ast::Path { span, segments };\n+\n+        if global { path.default_to_global() } else { path }\n     }\n \n     /// Constructs a qualified path."}, {"sha": "e732ac3a635ba1475de4d3a41c4ad5da2ccd7fbb", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 146, "deletions": 45, "changes": 191, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -32,6 +32,7 @@ use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n use ext::hygiene::{Mark, SyntaxContext};\n use fold::Folder;\n+use feature_gate::Features;\n use util::move_map::MoveMap;\n use fold;\n use parse::{token, ParseSess};\n@@ -63,6 +64,7 @@ struct TestCtxt<'a> {\n     reexport_test_harness_main: Option<Symbol>,\n     is_libtest: bool,\n     ctxt: SyntaxContext,\n+    features: &'a Features,\n \n     // top-level re-export submodule, filled out after folding is finished\n     toplevel_reexport: Option<Ident>,\n@@ -74,7 +76,8 @@ pub fn modify_for_testing(sess: &ParseSess,\n                           resolver: &mut Resolver,\n                           should_test: bool,\n                           krate: ast::Crate,\n-                          span_diagnostic: &errors::Handler) -> ast::Crate {\n+                          span_diagnostic: &errors::Handler,\n+                          features: &Features) -> ast::Crate {\n     // Check for #[reexport_test_harness_main = \"some_name\"] which\n     // creates a `use some_name = __test::main;`. This needs to be\n     // unconditional, so that the attribute is still marked as used in\n@@ -84,7 +87,8 @@ pub fn modify_for_testing(sess: &ParseSess,\n                                            \"reexport_test_harness_main\");\n \n     if should_test {\n-        generate_test_harness(sess, resolver, reexport_test_harness_main, krate, span_diagnostic)\n+        generate_test_harness(sess, resolver, reexport_test_harness_main,\n+                              krate, span_diagnostic, features)\n     } else {\n         krate\n     }\n@@ -265,23 +269,28 @@ fn generate_test_harness(sess: &ParseSess,\n                          resolver: &mut Resolver,\n                          reexport_test_harness_main: Option<Symbol>,\n                          krate: ast::Crate,\n-                         sd: &errors::Handler) -> ast::Crate {\n+                         sd: &errors::Handler,\n+                         features: &Features) -> ast::Crate {\n     // Remove the entry points\n     let mut cleaner = EntryPointCleaner { depth: 0 };\n     let krate = cleaner.fold_crate(krate);\n \n     let mark = Mark::fresh(Mark::root());\n \n+    let mut econfig = ExpansionConfig::default(\"test\".to_string());\n+    econfig.features = Some(features);\n+\n     let cx = TestCtxt {\n         span_diagnostic: sd,\n-        ext_cx: ExtCtxt::new(sess, ExpansionConfig::default(\"test\".to_string()), resolver),\n+        ext_cx: ExtCtxt::new(sess, econfig, resolver),\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_test_harness_main,\n         // NB: doesn't consider the value of `--crate-name` passed on the command line.\n         is_libtest: attr::find_crate_name(&krate.attrs).map(|s| s == \"test\").unwrap_or(false),\n         toplevel_reexport: None,\n         ctxt: SyntaxContext::empty().apply_mark(mark),\n+        features,\n     };\n \n     mark.set_expn_info(ExpnInfo {\n@@ -318,71 +327,105 @@ enum HasTestSignature {\n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(&i.attrs, \"test\");\n \n-    fn has_test_signature(i: &ast::Item) -> HasTestSignature {\n+    fn has_test_signature(cx: &TestCtxt, i: &ast::Item) -> HasTestSignature {\n         match i.node {\n-          ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n-            let no_output = match decl.output {\n-                ast::FunctionRetTy::Default(..) => true,\n-                ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n-                _ => false\n-            };\n-            if decl.inputs.is_empty()\n-                   && no_output\n-                   && !generics.is_parameterized() {\n-                Yes\n-            } else {\n-                No\n+            ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n+                // If the termination trait is active, the compiler will check that the output\n+                // type implements the `Termination` trait as `libtest` enforces that.\n+                let output_matches = if cx.features.termination_trait {\n+                    true\n+                } else {\n+                    let no_output = match decl.output {\n+                        ast::FunctionRetTy::Default(..) => true,\n+                        ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n+                        _ => false\n+                    };\n+\n+                    no_output && !generics.is_parameterized()\n+                };\n+\n+                if decl.inputs.is_empty() && output_matches {\n+                    Yes\n+                } else {\n+                    No\n+                }\n             }\n-          }\n-          _ => NotEvenAFunction,\n+            _ => NotEvenAFunction,\n         }\n     }\n \n-    if has_test_attr {\n+    let has_test_signature = if has_test_attr {\n         let diag = cx.span_diagnostic;\n-        match has_test_signature(i) {\n-            Yes => {},\n-            No => diag.span_err(i.span, \"functions used as tests must have signature fn() -> ()\"),\n-            NotEvenAFunction => diag.span_err(i.span,\n-                                              \"only functions may be used as tests\"),\n+        match has_test_signature(cx, i) {\n+            Yes => true,\n+            No => {\n+                if cx.features.termination_trait {\n+                    diag.span_err(i.span, \"functions used as tests can not have any arguments\");\n+                } else {\n+                    diag.span_err(i.span, \"functions used as tests must have signature fn() -> ()\");\n+                }\n+                false\n+            },\n+            NotEvenAFunction => {\n+                diag.span_err(i.span, \"only functions may be used as tests\");\n+                false\n+            },\n         }\n-    }\n+    } else {\n+        false\n+    };\n \n-    has_test_attr && has_test_signature(i) == Yes\n+    has_test_attr && has_test_signature\n }\n \n fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_bench_attr = attr::contains_name(&i.attrs, \"bench\");\n \n-    fn has_test_signature(i: &ast::Item) -> bool {\n+    fn has_bench_signature(cx: &TestCtxt, i: &ast::Item) -> bool {\n         match i.node {\n             ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n                 let input_cnt = decl.inputs.len();\n-                let no_output = match decl.output {\n-                    ast::FunctionRetTy::Default(..) => true,\n-                    ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n-                    _ => false\n+\n+                // If the termination trait is active, the compiler will check that the output\n+                // type implements the `Termination` trait as `libtest` enforces that.\n+                let output_matches = if cx.features.termination_trait {\n+                    true\n+                } else {\n+                    let no_output = match decl.output {\n+                        ast::FunctionRetTy::Default(..) => true,\n+                        ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n+                        _ => false\n+                    };\n+                    let tparm_cnt = generics.params.iter()\n+                        .filter(|param| param.is_type_param())\n+                        .count();\n+\n+                    no_output && tparm_cnt == 0\n                 };\n-                let tparm_cnt = generics.params.iter()\n-                    .filter(|param| param.is_type_param())\n-                    .count();\n \n                 // NB: inadequate check, but we're running\n                 // well before resolve, can't get too deep.\n-                input_cnt == 1\n-                    && no_output && tparm_cnt == 0\n+                input_cnt == 1 && output_matches\n             }\n           _ => false\n         }\n     }\n \n-    if has_bench_attr && !has_test_signature(i) {\n+    let has_bench_signature = has_bench_signature(cx, i);\n+\n+    if has_bench_attr && !has_bench_signature {\n         let diag = cx.span_diagnostic;\n-        diag.span_err(i.span, \"functions used as benches must have signature \\\n-                      `fn(&mut Bencher) -> ()`\");\n+\n+        if cx.features.termination_trait {\n+            diag.span_err(i.span, \"functions used as benches must have signature \\\n+                                   `fn(&mut Bencher) -> impl Termination`\");\n+        } else {\n+            diag.span_err(i.span, \"functions used as benches must have signature \\\n+                                   `fn(&mut Bencher) -> ()`\");\n+        }\n     }\n \n-    has_bench_attr && has_test_signature(i)\n+    has_bench_attr && has_bench_signature\n }\n \n fn is_ignored(i: &ast::Item) -> bool {\n@@ -690,19 +733,77 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n              field(\"should_panic\", fail_expr),\n              field(\"allow_fail\", allow_fail_expr)]);\n \n-\n-    let mut visible_path = match cx.toplevel_reexport {\n-        Some(id) => vec![id],\n+    let mut visible_path = vec![];\n+    if cx.features.extern_absolute_paths {\n+        visible_path.push(keywords::Crate.ident());\n+    }\n+    match cx.toplevel_reexport {\n+        Some(id) => visible_path.push(id),\n         None => {\n             let diag = cx.span_diagnostic;\n             diag.bug(\"expected to find top-level re-export name, but found None\");\n         }\n     };\n     visible_path.extend(path);\n \n-    let fn_expr = ecx.expr_path(ecx.path_global(span, visible_path));\n+    // Rather than directly give the test function to the test\n+    // harness, we create a wrapper like one of the following:\n+    //\n+    //     || test::assert_test_result(real_function()) // for test\n+    //     |b| test::assert_test_result(real_function(b)) // for bench\n+    //\n+    // this will coerce into a fn pointer that is specialized to the\n+    // actual return type of `real_function` (Typically `()`, but not always).\n+    let fn_expr = {\n+        // construct `real_function()` (this will be inserted into the overall expr)\n+        let real_function_expr = ecx.expr_path(ecx.path_global(span, visible_path));\n+        // construct path `test::assert_test_result`\n+        let assert_test_result = test_path(\"assert_test_result\");\n+        if test.bench {\n+            // construct `|b| {..}`\n+            let b_ident = Ident::with_empty_ctxt(Symbol::gensym(\"b\"));\n+            let b_expr = ecx.expr_ident(span, b_ident);\n+            ecx.lambda(\n+                span,\n+                vec![b_ident],\n+                // construct `assert_test_result(..)`\n+                ecx.expr_call(\n+                    span,\n+                    ecx.expr_path(assert_test_result),\n+                    vec![\n+                        // construct `real_function(b)`\n+                        ecx.expr_call(\n+                            span,\n+                            real_function_expr,\n+                            vec![b_expr],\n+                        )\n+                    ],\n+                ),\n+            )\n+        } else {\n+            // construct `|| {..}`\n+            ecx.lambda(\n+                span,\n+                vec![],\n+                // construct `assert_test_result(..)`\n+                ecx.expr_call(\n+                    span,\n+                    ecx.expr_path(assert_test_result),\n+                    vec![\n+                        // construct `real_function()`\n+                        ecx.expr_call(\n+                            span,\n+                            real_function_expr,\n+                            vec![],\n+                        )\n+                    ],\n+                ),\n+            )\n+        }\n+    };\n \n     let variant_name = if test.bench { \"StaticBenchFn\" } else { \"StaticTestFn\" };\n+\n     // self::test::$variant_name($fn_expr)\n     let testfn_expr = ecx.expr_call(span, ecx.expr_path(test_path(variant_name)), vec![fn_expr]);\n "}, {"sha": "82077bc4cd4822319346c0632df8a1bc941ecad3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -40,6 +40,7 @@\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n #![feature(staged_api)]\n+#![feature(termination_trait_lib)]\n \n extern crate getopts;\n extern crate term;\n@@ -67,6 +68,7 @@ use std::io::prelude::*;\n use std::io;\n use std::iter::repeat;\n use std::path::PathBuf;\n+use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n use std::thread;\n@@ -81,8 +83,8 @@ const QUIET_MODE_MAX_COLUMN: usize = 100; // insert a '\\n' after 100 tests in qu\n pub mod test {\n     pub use {Bencher, TestName, TestResult, TestDesc, TestDescAndFn, TestOpts, TrFailed,\n              TrFailedMsg, TrIgnored, TrOk, Metric, MetricMap, StaticTestFn, StaticTestName,\n-             DynTestName, DynTestFn, run_test, test_main, test_main_static, filter_tests,\n-             parse_opts, StaticBenchFn, ShouldPanic, Options};\n+             DynTestName, DynTestFn, assert_test_result, run_test, test_main, test_main_static,\n+             filter_tests, parse_opts, StaticBenchFn, ShouldPanic, Options};\n }\n \n pub mod stats;\n@@ -322,6 +324,13 @@ pub fn test_main_static(tests: &[TestDescAndFn]) {\n     test_main(&args, owned_tests, Options::new())\n }\n \n+/// Invoked when unit tests terminate. Should panic if the unit\n+/// test is considered a failure. By default, invokes `report()`\n+/// and checks for a `0` result.\n+pub fn assert_test_result<T: Termination>(result: T) {\n+    assert_eq!(result.report(), 0);\n+}\n+\n #[derive(Copy, Clone, Debug)]\n pub enum ColorConfig {\n     AutoColor,"}, {"sha": "8d3df68577bab14f1d2518d02fd495acf220e63c", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -15,6 +15,3 @@\n #[bench]\n fn bar(x: isize) { }\n //~^ ERROR mismatched types\n-//~| expected type `for<'r> fn(&'r mut __test::test::Bencher)`\n-//~| found type `fn(isize) {bar}`\n-//~| expected mutable reference, found isize"}, {"sha": "93e2561adf753fed810ab5ffddeb9295130ecac0", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -10,6 +10,6 @@\n #![feature(termination_trait)]\n \n fn main() -> char {\n-//~^ ERROR: the trait bound `char: std::Termination` is not satisfied\n+//~^ ERROR: the trait bound `char: std::process::Termination` is not satisfied\n     ' '\n }"}, {"sha": "e87e0ceebf1b1a1263bcca8da59dba65d40919a7", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-not-satisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -12,6 +12,6 @@\n \n struct ReturnType {}\n \n-fn main() -> ReturnType { //~ ERROR `ReturnType: std::Termination` is not satisfied\n+fn main() -> ReturnType { //~ ERROR `ReturnType: std::process::Termination` is not satisfied\n     ReturnType {}\n }"}, {"sha": "c1dd44a91765e917f64f44dcea4cce6283717879", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-never.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-never.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,8 +10,8 @@\n \n #![feature(termination_trait)]\n \n-use std::io::Error;\n+// error-pattern:oh, dear\n \n-fn main() -> Result<(), Box<Error>> {\n-    Ok(())\n+fn main() -> ! {\n+    panic!(\"oh, dear\");\n }", "previous_filename": "src/test/run-pass/termination-trait-for-result-box-error_ok.rs"}, {"sha": "494500d522abe23fba10be78e3e3d7587e0893f7", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(termination_trait)]\n+#![feature(test)]\n+\n+extern crate test;\n+use std::num::ParseIntError;\n+use test::Bencher;\n+\n+#[test]\n+fn is_a_num() -> Result<(), ParseIntError> {\n+    let _: u32 = \"22\".parse()?;\n+    Ok(())\n+}\n+\n+#[test]\n+#[should_panic]\n+fn not_a_num() -> Result<(), ParseIntError> {\n+    let _: u32 = \"abc\".parse()?;\n+    Ok(())\n+}\n+\n+#[bench]\n+fn test_a_positive_bench(_: &mut Bencher) -> Result<(), ParseIntError> {\n+    Ok(())\n+}\n+\n+#[bench]\n+#[should_panic]\n+fn test_a_neg_bench(_: &mut Bencher) -> Result<(), ParseIntError> {\n+    let _: u32 = \"abc\".parse()?;\n+    Ok(())\n+}"}, {"sha": "796f652d6b57ba05aebf395e102307cbb8536842", "filename": "src/test/run-pass/rfc-2126-extern-absolute-paths/test.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52b33a38626306ec2f622f101e7edc2964abfe4/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-extern-absolute-paths%2Ftest.rs?ref=b52b33a38626306ec2f622f101e7edc2964abfe4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that `#[test]` works with extern-absolute-paths enabled.\n+//\n+// Regression test for #47075.\n+\n+// compile-flags: --test\n+\n+#![feature(extern_absolute_paths)]\n+\n+#[test]\n+fn test() {\n+}"}]}