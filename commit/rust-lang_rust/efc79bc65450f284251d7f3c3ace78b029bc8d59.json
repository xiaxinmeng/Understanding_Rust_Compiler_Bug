{"sha": "efc79bc65450f284251d7f3c3ace78b029bc8d59", "node_id": "C_kwDOAAsO6NoAKGVmYzc5YmM2NTQ1MGYyODQyNTFkN2YzYzNhY2U3OGIwMjliYzhkNTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-03T19:45:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-03T19:45:02Z"}, "message": "Rollup merge of #108678 - llogiq:use-option-as-slice, r=Nilstrieb\n\nUse `Option::as_slice` where applicable\n\nAfter #105871 introduced `Option::as_slice`, this PR uses it within the compiler. I found it interesting that all cases where `as_slice` could be used were done with different code before; so it seems the new API also has the benefit of being \"the obvious solution\" where before there was a mix of options, none clearly better than the rest.", "tree": {"sha": "226ee6e20085d9729173075c0571a7661caf9ec1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/226ee6e20085d9729173075c0571a7661caf9ec1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efc79bc65450f284251d7f3c3ace78b029bc8d59", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkAk4+CRBK7hj4Ov3rIwAAIrYIAIUUyXUHNC6K0YvvLfwkqv8h\ndBh+t6+vMHCrAR9uO+rcHfN4MJvWfl0DrL6DUpZrajyx020R0vpavNiY9jep9IID\ntIAjdKQ3XaVz+be+Fk1aL+cTDXTGf0bj3QNFCMdEFKJ0C1ba33w3/BG6AS5gCk+f\nreCUIwI05KhmINF3ymKpu6cxp6pKVqIXKnHuqWSf/B/D2qqSM2c9Rka/NxwWpctV\nOciiADt4mN+EVWxyvSLx+bgKXfimD6FSGxpXgMOXZ6lXfS61lfmutFQAvJhvoXyY\njHc5SR+zGm0M/0LkJOmzXZmgTLMcG3ag9FyPEa9J/N2LLiszDueRWhO0oc07ZFo=\n=P7uH\n-----END PGP SIGNATURE-----\n", "payload": "tree 226ee6e20085d9729173075c0571a7661caf9ec1\nparent dadfbb6a4b269e324b3c63cd0420d9e1b13370e0\nparent 03334503b31bd9ab52d4c24b92ad2227a153bcb5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677872702 +0100\ncommitter GitHub <noreply@github.com> 1677872702 +0100\n\nRollup merge of #108678 - llogiq:use-option-as-slice, r=Nilstrieb\n\nUse `Option::as_slice` where applicable\n\nAfter #105871 introduced `Option::as_slice`, this PR uses it within the compiler. I found it interesting that all cases where `as_slice` could be used were done with different code before; so it seems the new API also has the benefit of being \"the obvious solution\" where before there was a mix of options, none clearly better than the rest.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efc79bc65450f284251d7f3c3ace78b029bc8d59", "html_url": "https://github.com/rust-lang/rust/commit/efc79bc65450f284251d7f3c3ace78b029bc8d59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efc79bc65450f284251d7f3c3ace78b029bc8d59/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0", "html_url": "https://github.com/rust-lang/rust/commit/dadfbb6a4b269e324b3c63cd0420d9e1b13370e0"}, {"sha": "03334503b31bd9ab52d4c24b92ad2227a153bcb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/03334503b31bd9ab52d4c24b92ad2227a153bcb5", "html_url": "https://github.com/rust-lang/rust/commit/03334503b31bd9ab52d4c24b92ad2227a153bcb5"}], "stats": {"total": 25, "additions": 8, "deletions": 17}, "files": [{"sha": "a46bdeb417da3e3564886d4b4edf0211c8f8b562", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=efc79bc65450f284251d7f3c3ace78b029bc8d59", "patch": "@@ -36,7 +36,6 @@ use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext}\n \n use std::iter;\n use std::mem;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_casts(&mut self) {\n@@ -1507,11 +1506,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let coerce = if blk.targeted_by_break {\n             CoerceMany::new(coerce_to_ty)\n         } else {\n-            let tail_expr: &[&hir::Expr<'_>] = match tail_expr {\n-                Some(e) => slice::from_ref(e),\n-                None => &[],\n-            };\n-            CoerceMany::with_coercion_sites(coerce_to_ty, tail_expr)\n+            CoerceMany::with_coercion_sites(coerce_to_ty, blk.expr.as_slice())\n         };\n \n         let prev_diverges = self.diverges.get();"}, {"sha": "e397dfd45706bcc20291b770054c661434f04017", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=efc79bc65450f284251d7f3c3ace78b029bc8d59", "patch": "@@ -5,6 +5,7 @@\n #![feature(min_specialization)]\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n+#![feature(option_as_slice)]\n #![allow(rustc::potential_query_instability)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "80279ed969a9458424a6f179b3ab6e357876c5f2", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=efc79bc65450f284251d7f3c3ace78b029bc8d59", "patch": "@@ -749,14 +749,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let opname = Ident::with_dummy_span(opname);\n-        let input_types =\n-            opt_rhs.as_ref().map(|(_, ty)| std::slice::from_ref(ty)).unwrap_or_default();\n+        let (opt_rhs_expr, opt_rhs_ty) = opt_rhs.unzip();\n+        let input_types = opt_rhs_ty.as_slice();\n         let cause = self.cause(\n             span,\n             traits::BinOp {\n-                rhs_span: opt_rhs.map(|(expr, _)| expr.span),\n-                is_lit: opt_rhs\n-                    .map_or(false, |(expr, _)| matches!(expr.kind, hir::ExprKind::Lit(_))),\n+                rhs_span: opt_rhs_expr.map(|expr| expr.span),\n+                is_lit: opt_rhs_expr\n+                    .map_or(false, |expr| matches!(expr.kind, hir::ExprKind::Lit(_))),\n                 output_ty: expected.only_has_type(self),\n             },\n         );"}, {"sha": "2cca45de5e9714e8c802b6865dcb566ad157b5f9", "filename": "compiler/rustc_hir_typeck/src/place_op.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efc79bc65450f284251d7f3c3ace78b029bc8d59/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fplace_op.rs?ref=efc79bc65450f284251d7f3c3ace78b029bc8d59", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::adjustment::{AllowTwoPhase, AutoBorrow, AutoBorrowMutabili\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n-use std::slice;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Type-check `*oprnd_expr` with `oprnd_expr` type-checked already.\n@@ -393,11 +392,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(self.typeck_results.borrow().node_substs(expr.hir_id).type_at(1))\n             }\n         };\n-        let arg_tys = match arg_ty {\n-            None => &[],\n-            Some(ref ty) => slice::from_ref(ty),\n-        };\n-\n+        let arg_tys = arg_ty.as_slice();\n         let method = self.try_mutable_overloaded_place_op(expr.span, base_ty, arg_tys, op);\n         let method = match method {\n             Some(ok) => self.register_infer_ok_obligations(ok),"}]}