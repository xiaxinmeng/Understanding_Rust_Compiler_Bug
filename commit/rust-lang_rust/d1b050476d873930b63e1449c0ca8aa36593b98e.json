{"sha": "d1b050476d873930b63e1449c0ca8aa36593b98e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjA1MDQ3NmQ4NzM5MzBiNjNlMTQ0OWMwY2E4YWEzNjU5M2I5OGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-16T10:34:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-16T10:34:11Z"}, "message": "Rollup merge of #76669 - lzutao:core_asm, r=Amanieu\n\nPrefer asm! over llvm_asm! in core\n\nReplace llvm_asm! with asm! in core.\n\nx86 asm compare (in somecases I replaced generic type with String).\n* https://rust.godbolt.org/z/59eEMv\n* https://rust.godbolt.org/z/v78s6q\n* https://rust.godbolt.org/z/7qYY41", "tree": {"sha": "eed7e677932a243550a689f0e4a67e691389ee66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eed7e677932a243550a689f0e4a67e691389ee66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b050476d873930b63e1449c0ca8aa36593b98e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYeokCRBK7hj4Ov3rIwAAdHIIAJ+R0rVRcCI6qfKp8cEkqQuc\nmtBrJsIs++pumIwUOolMLQX0EmRhfqvj+36WSYLMYZ/x7/fFNe4sizhzZKkcUP7E\nOlmqCBKCEnFJ3rTGjrFDvDwUv0oGOYg9wW5QfFV8Nh+O6sicde1ZVrLtg7NwMejo\nUglRea7dHUdFITdOz2rNlwigx/nxgh4hF2u2rH+qpRhKDwNzSxwT95yw87lS4HFw\nGazBtvgJAtU0x5YLET9RTlvaEToAHnxWLhjF7OeG3iAuSvT7kSp831pcNGFxw5ER\n2EM/Z/rwxBBnW+NTJYiPuvrqKoBWTDt7Btv78WCTfBLgnI6DOvDXDK8wM7IUAdk=\n=zwMq\n-----END PGP SIGNATURE-----\n", "payload": "tree eed7e677932a243550a689f0e4a67e691389ee66\nparent 5fae56971d8487088c0099c82c0a5ce1638b5f62\nparent 4dc4e9f671a36026cf59894622fdf4f6b979bf76\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600252451 +0200\ncommitter GitHub <noreply@github.com> 1600252451 +0200\n\nRollup merge of #76669 - lzutao:core_asm, r=Amanieu\n\nPrefer asm! over llvm_asm! in core\n\nReplace llvm_asm! with asm! in core.\n\nx86 asm compare (in somecases I replaced generic type with String).\n* https://rust.godbolt.org/z/59eEMv\n* https://rust.godbolt.org/z/v78s6q\n* https://rust.godbolt.org/z/7qYY41\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b050476d873930b63e1449c0ca8aa36593b98e", "html_url": "https://github.com/rust-lang/rust/commit/d1b050476d873930b63e1449c0ca8aa36593b98e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b050476d873930b63e1449c0ca8aa36593b98e/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fae56971d8487088c0099c82c0a5ce1638b5f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fae56971d8487088c0099c82c0a5ce1638b5f62", "html_url": "https://github.com/rust-lang/rust/commit/5fae56971d8487088c0099c82c0a5ce1638b5f62"}, {"sha": "4dc4e9f671a36026cf59894622fdf4f6b979bf76", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dc4e9f671a36026cf59894622fdf4f6b979bf76", "html_url": "https://github.com/rust-lang/rust/commit/4dc4e9f671a36026cf59894622fdf4f6b979bf76"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "1192b9e164a1450efb5ec71bf4bf59798f5649dd", "filename": "library/core/src/hint.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1b050476d873930b63e1449c0ca8aa36593b98e/library%2Fcore%2Fsrc%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b050476d873930b63e1449c0ca8aa36593b98e/library%2Fcore%2Fsrc%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhint.rs?ref=d1b050476d873930b63e1449c0ca8aa36593b98e", "patch": "@@ -111,7 +111,7 @@ pub fn spin_loop() {\n #[inline]\n #[unstable(feature = \"test\", issue = \"50297\")]\n #[allow(unreachable_code)] // this makes #[cfg] a bit easier below.\n-pub fn black_box<T>(dummy: T) -> T {\n+pub fn black_box<T>(mut dummy: T) -> T {\n     // We need to \"use\" the argument in some way LLVM can't introspect, and on\n     // targets that support it we can typically leverage inline assembly to do\n     // this. LLVM's interpretation of inline assembly is that it's, well, a black\n@@ -121,7 +121,8 @@ pub fn black_box<T>(dummy: T) -> T {\n     #[cfg(not(miri))] // This is just a hint, so it is fine to skip in Miri.\n     // SAFETY: the inline assembly is a no-op.\n     unsafe {\n-        llvm_asm!(\"\" : : \"r\"(&dummy));\n+        // FIXME: Cannot use `asm!` because it doesn't support MIPS and other architectures.\n+        llvm_asm!(\"\" : : \"r\"(&mut dummy) : \"memory\" : \"volatile\");\n     }\n \n     dummy"}, {"sha": "a5fbdc6ee2d4802528349acde70af9ff94e994f3", "filename": "library/core/src/num/dec2flt/algorithm.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d1b050476d873930b63e1449c0ca8aa36593b98e/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b050476d873930b63e1449c0ca8aa36593b98e/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Falgorithm.rs?ref=d1b050476d873930b63e1449c0ca8aa36593b98e", "patch": "@@ -60,12 +60,19 @@ mod fpu_precision {\n     fn set_cw(cw: u16) {\n         // SAFETY: the `fldcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { llvm_asm!(\"fldcw $0\" :: \"m\" (cw) :: \"volatile\") }\n+        unsafe {\n+            asm!(\n+                \"fldcw ({})\",\n+                in(reg) &cw,\n+                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n+                options(att_syntax, nostack),\n+            )\n+        }\n     }\n \n     /// Sets the precision field of the FPU to `T` and returns a `FPUControlWord`.\n     pub fn set_precision<T>() -> FPUControlWord {\n-        let cw = 0u16;\n+        let mut cw = 0_u16;\n \n         // Compute the value for the Precision Control field that is appropriate for `T`.\n         let cw_precision = match size_of::<T>() {\n@@ -78,7 +85,14 @@ mod fpu_precision {\n         // `FPUControlWord` structure is dropped\n         // SAFETY: the `fnstcw` instruction has been audited to be able to work correctly with\n         // any `u16`\n-        unsafe { llvm_asm!(\"fnstcw $0\" : \"=*m\" (&cw) ::: \"volatile\") }\n+        unsafe {\n+            asm!(\n+                \"fnstcw ({})\",\n+                in(reg) &mut cw,\n+                // FIXME: We are using ATT syntax to support LLVM 8 and LLVM 9.\n+                options(att_syntax, nostack),\n+            )\n+        }\n \n         // Set the control word to the desired precision. This is achieved by masking away the old\n         // precision (bits 8 and 9, 0x300) and replacing it with the precision flag computed above."}]}