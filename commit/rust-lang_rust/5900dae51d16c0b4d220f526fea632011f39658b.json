{"sha": "5900dae51d16c0b4d220f526fea632011f39658b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MDBkYWU1MWQxNmMwYjRkMjIwZjUyNmZlYTYzMjAxMWYzOTY1OGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T21:52:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-13T21:52:17Z"}, "message": "Auto merge of #56142 - jnqnfe:osstr_lossy_example, r=alexcrichton\n\n[std] Osstr lossy example", "tree": {"sha": "c03ea9b5addd9ad218d873c98114d213034571c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c03ea9b5addd9ad218d873c98114d213034571c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5900dae51d16c0b4d220f526fea632011f39658b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5900dae51d16c0b4d220f526fea632011f39658b", "html_url": "https://github.com/rust-lang/rust/commit/5900dae51d16c0b4d220f526fea632011f39658b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5900dae51d16c0b4d220f526fea632011f39658b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c", "html_url": "https://github.com/rust-lang/rust/commit/f4a421ee3cf1259f0750ac7fabd19da1d8551e4c"}, {"sha": "0008e0d502fab4aee5909d23ac277701727903e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0008e0d502fab4aee5909d23ac277701727903e8", "html_url": "https://github.com/rust-lang/rust/commit/0008e0d502fab4aee5909d23ac277701727903e8"}], "stats": {"total": 41, "additions": 33, "deletions": 8}, "files": [{"sha": "766142fb57f8cc2c0b474c97d5ef7f564b2b54f5", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/5900dae51d16c0b4d220f526fea632011f39658b/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5900dae51d16c0b4d220f526fea632011f39658b/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=5900dae51d16c0b4d220f526fea632011f39658b", "patch": "@@ -536,17 +536,42 @@ impl OsStr {\n     ///\n     /// # Examples\n     ///\n-    /// Calling `to_string_lossy` on an `OsStr` with valid unicode:\n+    /// Calling `to_string_lossy` on an `OsStr` with invalid unicode:\n     ///\n     /// ```\n-    /// use std::ffi::OsStr;\n-    ///\n-    /// let os_str = OsStr::new(\"foo\");\n-    /// assert_eq!(os_str.to_string_lossy(), \"foo\");\n+    /// // Note, due to differences in how Unix and Windows represent strings,\n+    /// // we are forced to complicate this example, setting up example `OsStr`s\n+    /// // with different source data and via different platform extensions.\n+    /// // Understand that in reality you could end up with such example invalid\n+    /// // sequences simply through collecting user command line arguments, for\n+    /// // example.\n+    ///\n+    /// #[cfg(any(unix, target_os = \"redox\"))] {\n+    ///     use std::ffi::OsStr;\n+    ///     use std::os::unix::ffi::OsStrExt;\n+    ///\n+    ///     // Here, the values 0x66 and 0x6f correspond to 'f' and 'o'\n+    ///     // respectively. The value 0x80 is a lone continuation byte, invalid\n+    ///     // in a UTF-8 sequence.\n+    ///     let source = [0x66, 0x6f, 0x80, 0x6f];\n+    ///     let os_str = OsStr::from_bytes(&source[..]);\n+    ///\n+    ///     assert_eq!(os_str.to_string_lossy(), \"fo\ufffdo\");\n+    /// }\n+    /// #[cfg(windows)] {\n+    ///     use std::ffi::OsString;\n+    ///     use std::os::windows::prelude::*;\n+    ///\n+    ///     // Here the values 0x0066 and 0x006f correspond to 'f' and 'o'\n+    ///     // respectively. The value 0xD800 is a lone surrogate half, invalid\n+    ///     // in a UTF-16 sequence.\n+    ///     let source = [0x0066, 0x006f, 0xD800, 0x006f];\n+    ///     let os_string = OsString::from_wide(&source[..]);\n+    ///     let os_str = os_string.as_os_str();\n+    ///\n+    ///     assert_eq!(os_str.to_string_lossy(), \"fo\ufffdo\");\n+    /// }\n     /// ```\n-    ///\n-    /// Had `os_str` contained invalid unicode, the `to_string_lossy` call might\n-    /// have returned `\"fo\ufffd\"`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_string_lossy(&self) -> Cow<str> {\n         self.inner.to_string_lossy()"}]}