{"sha": "61a7703e5575795e837d16d3a0ec46551cc6b69b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxYTc3MDNlNTU3NTc5NWU4MzdkMTZkM2EwZWM0NjU1MWNjNmI2OWI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-14T20:51:32Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-09-14T20:51:32Z"}, "message": "Customize `<FlatMap as Iterator>::fold`\n\n`FlatMap` can use internal iteration for its `fold`, which shows a\nperformance advantage in the new benchmarks:\n\n    test iter::bench_flat_map_chain_ref_sum ... bench:   4,354,111 ns/iter (+/- 108,871)\n    test iter::bench_flat_map_chain_sum     ... bench:     468,167 ns/iter (+/- 2,274)\n    test iter::bench_flat_map_ref_sum       ... bench:     449,616 ns/iter (+/- 6,257)\n    test iter::bench_flat_map_sum           ... bench:     348,010 ns/iter (+/- 1,227)\n\n... where the \"ref\" benches are using `by_ref()` that isn't optimized.\nSo this change shows a decent advantage on its own, but much more when\ncombined with a `chain` iterator that also optimizes `fold`.", "tree": {"sha": "7a49c5b226aac30516e9babc15c81a6b01fe3e1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a49c5b226aac30516e9babc15c81a6b01fe3e1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61a7703e5575795e837d16d3a0ec46551cc6b69b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61a7703e5575795e837d16d3a0ec46551cc6b69b", "html_url": "https://github.com/rust-lang/rust/commit/61a7703e5575795e837d16d3a0ec46551cc6b69b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61a7703e5575795e837d16d3a0ec46551cc6b69b/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfc84cfa72b405c194228b53c4de3f6474204ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfc84cfa72b405c194228b53c4de3f6474204ec", "html_url": "https://github.com/rust-lang/rust/commit/5dfc84cfa72b405c194228b53c4de3f6474204ec"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "827c6354c60baccab3033212df5ec052c0a14df7", "filename": "src/libcore/benches/iter.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/61a7703e5575795e837d16d3a0ec46551cc6b69b/src%2Flibcore%2Fbenches%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7703e5575795e837d16d3a0ec46551cc6b69b/src%2Flibcore%2Fbenches%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbenches%2Fiter.rs?ref=61a7703e5575795e837d16d3a0ec46551cc6b69b", "patch": "@@ -146,3 +146,41 @@ fn bench_for_each_chain_ref_fold(b: &mut Bencher) {\n         acc\n     });\n }\n+\n+#[bench]\n+fn bench_flat_map_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000).flat_map(|x| x..x+1000)\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .sum()\n+    });\n+}\n+\n+#[bench]\n+fn bench_flat_map_chain_ref_sum(b: &mut Bencher) {\n+    b.iter(|| -> i64 {\n+        (0i64..1000000).flat_map(|x| once(x).chain(once(x)))\n+            .map(black_box)\n+            .by_ref()\n+            .sum()\n+    });\n+}"}, {"sha": "a596ffd6ae8fc9caf840b117cc7857ff0bf4e4c3", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61a7703e5575795e837d16d3a0ec46551cc6b69b/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61a7703e5575795e837d16d3a0ec46551cc6b69b/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=61a7703e5575795e837d16d3a0ec46551cc6b69b", "patch": "@@ -1902,6 +1902,16 @@ impl<I: Iterator, U: IntoIterator, F> Iterator for FlatMap<I, U, F>\n             _ => (lo, None)\n         }\n     }\n+\n+    #[inline]\n+    fn fold<Acc, Fold>(self, init: Acc, mut fold: Fold) -> Acc\n+        where Fold: FnMut(Acc, Self::Item) -> Acc,\n+    {\n+        self.frontiter.into_iter()\n+            .chain(self.iter.map(self.f).map(U::into_iter))\n+            .chain(self.backiter)\n+            .fold(init, |acc, iter| iter.fold(acc, &mut fold))\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}