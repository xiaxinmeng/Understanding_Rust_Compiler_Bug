{"sha": "74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "node_id": "C_kwDOAAsO6NoAKDc0YjZkMjk2ZGJjZGVjZTJiN2JmOGNmMTAzNzBjMTdjMGVkNTY0ZTc", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-04-01T13:04:47Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-05-10T06:09:37Z"}, "message": "don't encode only locally used attrs", "tree": {"sha": "137e56933ba5a4c082f2d1e754d0af71291500b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/137e56933ba5a4c082f2d1e754d0af71291500b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "html_url": "https://github.com/rust-lang/rust/commit/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87fd70c107b23fe08336a12a20a0f5e85561d499", "url": "https://api.github.com/repos/rust-lang/rust/commits/87fd70c107b23fe08336a12a20a0f5e85561d499", "html_url": "https://github.com/rust-lang/rust/commit/87fd70c107b23fe08336a12a20a0f5e85561d499"}], "stats": {"total": 70, "additions": 54, "deletions": 16}, "files": [{"sha": "f512594977c8df78d03bb7fd01b00bc61814b8ce", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 37, "deletions": 11, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "patch": "@@ -147,6 +147,16 @@ pub enum AttributeDuplicates {\n     FutureWarnPreceding,\n }\n \n+/// A conveniece macro to deal with `$($expr)?`.\n+macro_rules! or_default {\n+    ($default:expr,) => {\n+        $default\n+    };\n+    ($default:expr, $next:expr) => {\n+        $next\n+    };\n+}\n+\n /// A convenience macro for constructing attribute templates.\n /// E.g., `template!(Word, List: \"description\")` means that the attribute\n /// supports forms `#[attr]` and `#[attr(description)]`.\n@@ -168,9 +178,10 @@ macro_rules! template {\n }\n \n macro_rules! ungated {\n-    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)? $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n+            only_local: or_default!(false, $($only_local)?),\n             type_: $typ,\n             template: $tpl,\n             gate: Ungated,\n@@ -180,18 +191,20 @@ macro_rules! ungated {\n }\n \n macro_rules! gated {\n-    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $gate:ident, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $gate:ident, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n+            only_local: or_default!(false, $($only_local)?),\n             type_: $typ,\n             template: $tpl,\n             duplicates: $duplicates,\n             gate: Gated(Stability::Unstable, sym::$gate, $msg, cfg_fn!($gate)),\n         }\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n+            only_local: or_default!(false, $($only_local)?),\n             type_: $typ,\n             template: $tpl,\n             duplicates: $duplicates,\n@@ -201,12 +214,13 @@ macro_rules! gated {\n }\n \n macro_rules! rustc_attr {\n-    (TEST, $attr:ident, $typ:expr, $tpl:expr, $duplicate:expr $(,)?) => {\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr, $duplicate:expr $(, @only_local: $only_local:expr)? $(,)?) => {\n         rustc_attr!(\n             $attr,\n             $typ,\n             $tpl,\n             $duplicate,\n+            $(@only_local: $only_local,)?\n             concat!(\n                 \"the `#[\",\n                 stringify!($attr),\n@@ -215,9 +229,10 @@ macro_rules! rustc_attr {\n             ),\n         )\n     };\n-    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr, $msg:expr $(,)?) => {\n+    ($attr:ident, $typ:expr, $tpl:expr, $duplicates:expr $(, @only_local: $only_local:expr)?, $msg:expr $(,)?) => {\n         BuiltinAttribute {\n             name: sym::$attr,\n+            only_local: or_default!(false, $($only_local)?),\n             type_: $typ,\n             template: $tpl,\n             duplicates: $duplicates,\n@@ -237,6 +252,10 @@ const INTERNAL_UNSTABLE: &str = \"this is an internal attribute that will never b\n \n pub struct BuiltinAttribute {\n     pub name: Symbol,\n+    /// Whether this attribute is only used in the local crate.\n+    ///\n+    /// If so, it is not encoded in the crate metadata.\n+    pub only_local: bool,\n     pub type_: AttributeType,\n     pub template: AttributeTemplate,\n     pub duplicates: AttributeDuplicates,\n@@ -295,7 +314,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ungated!(must_use, Normal, template!(Word, NameValueStr: \"reason\"), FutureWarnFollowing),\n     gated!(\n         must_not_suspend, Normal, template!(Word, NameValueStr: \"reason\"), WarnFollowing,\n-        must_not_suspend, experimental!(must_not_suspend)\n+        experimental!(must_not_suspend)\n     ),\n     ungated!(\n         deprecated, Normal,\n@@ -394,6 +413,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Plugins:\n     BuiltinAttribute {\n         name: sym::plugin,\n+        only_local: false,\n         type_: CrateLevel,\n         template: template!(List: \"name\"),\n         duplicates: DuplicatesOk,\n@@ -475,7 +495,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     // DuplicatesOk since it has its own validation\n     ungated!(\n-        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk\n+        stable, Normal, template!(List: r#\"feature = \"name\", since = \"version\"\"#), DuplicatesOk,\n     ),\n     ungated!(\n         unstable, Normal,\n@@ -633,7 +653,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Misc:\n     // ==========================================================================\n     gated!(\n-        lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, lang_items,\n+        lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, @only_local: true, lang_items,\n         \"language items are subject to change\",\n     ),\n     rustc_attr!(\n@@ -642,11 +662,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n     ),\n     rustc_attr!(\n-        rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing,\n+        rustc_coherence_is_core, AttributeType::CrateLevel, template!(Word), ErrorFollowing, @only_local: true,\n         \"#![rustc_coherence_is_core] allows inherent methods on builtin types, only intended to be used in `core`.\"\n     ),\n     rustc_attr!(\n-        rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing,\n+        rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n     ),\n     rustc_attr!(\n@@ -656,6 +676,8 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n+        // FIXME: This can be `true` once we always use `tcx.is_diagnostic_item`.\n+        only_local: false,\n         type_: Normal,\n         template: template!(NameValueStr: \"name\"),\n         duplicates: ErrorFollowing,\n@@ -676,7 +698,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         \"unboxed_closures are still evolving\",\n     ),\n     rustc_attr!(\n-        rustc_inherit_overflow_checks, Normal, template!(Word), WarnFollowing,\n+        rustc_inherit_overflow_checks, Normal, template!(Word), WarnFollowing, @only_local: true,\n         \"the `#[rustc_inherit_overflow_checks]` attribute is just used to control \\\n         overflow checking behavior of several libcore functions that are inlined \\\n         across crates and will never be stable\",\n@@ -778,6 +800,10 @@ pub fn is_builtin_attr_name(name: Symbol) -> bool {\n     BUILTIN_ATTRIBUTE_MAP.get(&name).is_some()\n }\n \n+pub fn is_builtin_only_local(name: Symbol) -> bool {\n+    BUILTIN_ATTRIBUTE_MAP.get(&name).map_or(false, |attr| attr.only_local)\n+}\n+\n pub static BUILTIN_ATTRIBUTE_MAP: SyncLazy<FxHashMap<Symbol, &BuiltinAttribute>> =\n     SyncLazy::new(|| {\n         let mut map = FxHashMap::default();"}, {"sha": "26e0538b0eb4e8e4618265aa30b81d10e38e2a40", "filename": "compiler/rustc_feature/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_feature%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Flib.rs?ref=74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "patch": "@@ -149,7 +149,8 @@ pub use accepted::ACCEPTED_FEATURES;\n pub use active::{Features, ACTIVE_FEATURES, INCOMPATIBLE_FEATURES};\n pub use builtin_attrs::AttributeDuplicates;\n pub use builtin_attrs::{\n-    deprecated_attributes, find_gated_cfg, is_builtin_attr_name, AttributeGate, AttributeTemplate,\n-    AttributeType, BuiltinAttribute, GatedCfg, BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n+    deprecated_attributes, find_gated_cfg, is_builtin_attr_name, is_builtin_only_local,\n+    AttributeGate, AttributeTemplate, AttributeType, BuiltinAttribute, GatedCfg,\n+    BUILTIN_ATTRIBUTES, BUILTIN_ATTRIBUTE_MAP,\n };\n pub use removed::{REMOVED_FEATURES, STABLE_REMOVED_FEATURES};"}, {"sha": "2f006dfabec8efeb701c9b3de9a0984b78717320", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "patch": "@@ -986,9 +986,13 @@ fn should_encode_generics(def_kind: DefKind) -> bool {\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n     fn encode_attrs(&mut self, def_id: DefId) {\n-        let attrs = self.tcx.get_attrs(def_id);\n-        record!(self.tables.attributes[def_id] <- attrs);\n-        if attrs.iter().any(|attr| attr.may_have_doc_links()) {\n+        let mut attrs = self\n+            .tcx\n+            .get_attrs(def_id)\n+            .iter()\n+            .filter(|attr| !rustc_feature::is_builtin_only_local(attr.name_or_empty()));\n+        record!(self.tables.attributes[def_id] <- attrs.clone());\n+        if attrs.any(|attr| attr.may_have_doc_links()) {\n             self.tables.may_have_doc_links.set(def_id.index, ());\n         }\n     }"}, {"sha": "ec268fc2343d8b63610d47cd47d163adb19e572e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "patch": "@@ -1072,6 +1072,9 @@ rustc_queries! {\n         desc { |tcx| \"checking whether `{}` is `doc(hidden)`\", tcx.def_path_str(def_id) }\n     }\n \n+    /// Returns the attributes on the item at `def_id`.\n+    ///\n+    /// Do not use this directly, use `tcx.get_attrs` instead.\n     query item_attrs(def_id: DefId) -> &'tcx [ast::Attribute] {\n         desc { |tcx| \"collecting attributes of `{}`\", tcx.def_path_str(def_id) }\n         separate_provide_extern"}, {"sha": "722257f9c5ebefc0f3a24d61f4adaf050f01b976", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74b6d296dbcdece2b7bf8cf10370c17c0ed564e7/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=74b6d296dbcdece2b7bf8cf10370c17c0ed564e7", "patch": "@@ -2187,6 +2187,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     /// Gets the attributes of a definition.\n+    ///\n+    /// Note that attributes which are be relevant while\n+    /// the current local crate are not stored in the crate metadata\n+    /// and therefore cannot be accessed outside of that crate.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {\n         if let Some(did) = did.as_local() {\n             self.hir().attrs(self.hir().local_def_id_to_hir_id(did))"}]}