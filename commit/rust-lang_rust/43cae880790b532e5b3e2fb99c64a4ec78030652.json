{"sha": "43cae880790b532e5b3e2fb99c64a4ec78030652", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2FlODgwNzkwYjUzMmU1YjNlMmZiOTljNjRhNGVjNzgwMzA2NTI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-07T18:00:37Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-06-08T01:24:47Z"}, "message": "Lexer: Fix offset handling in get_str_from()\n\nAs the comment said, the subtraction is bogus for multibyte characters.\nFortunately, we can just use last_pos instead of pos to get the correct\nposition without any subtraction hackery.", "tree": {"sha": "75071fc72f9db7179be51239702a2c810a76cee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75071fc72f9db7179be51239702a2c810a76cee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cae880790b532e5b3e2fb99c64a4ec78030652", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cae880790b532e5b3e2fb99c64a4ec78030652", "html_url": "https://github.com/rust-lang/rust/commit/43cae880790b532e5b3e2fb99c64a4ec78030652", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cae880790b532e5b3e2fb99c64a4ec78030652/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8cf2f8056d29423430b723acd70e525d1249a32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cf2f8056d29423430b723acd70e525d1249a32", "html_url": "https://github.com/rust-lang/rust/commit/b8cf2f8056d29423430b723acd70e525d1249a32"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "54fba29a19ad4b6e479b121fbdd1aca6e6d19003", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/43cae880790b532e5b3e2fb99c64a4ec78030652/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cae880790b532e5b3e2fb99c64a4ec78030652/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=43cae880790b532e5b3e2fb99c64a4ec78030652", "patch": "@@ -347,7 +347,7 @@ pub fn gather_comments_and_literals(span_diagnostic:\n         }\n \n \n-        let bstart = rdr.pos;\n+        let bstart = rdr.last_pos;\n         rdr.next_token();\n         //discard, and look ahead; we're working with internal state\n         let TokenAndSpan {tok: tok, sp: sp} = rdr.peek();"}, {"sha": "172e7f15458769df47b95beb61ee211758199c30", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/43cae880790b532e5b3e2fb99c64a4ec78030652/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cae880790b532e5b3e2fb99c64a4ec78030652/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=43cae880790b532e5b3e2fb99c64a4ec78030652", "patch": "@@ -161,22 +161,20 @@ fn string_advance_token(r: @mut StringReader) {\n     }\n }\n \n-fn byte_offset(rdr: &StringReader) -> BytePos {\n-    (rdr.pos - rdr.filemap.start_pos)\n+fn byte_offset(rdr: &StringReader, pos: BytePos) -> BytePos {\n+    (pos - rdr.filemap.start_pos)\n }\n \n pub fn get_str_from(rdr: @mut StringReader, start: BytePos) -> ~str {\n-    // I'm pretty skeptical about this subtraction. What if there's a\n-    // multi-byte character before the mark?\n-    return str::slice(*rdr.src, start.to_uint() - 1u,\n-                      byte_offset(rdr).to_uint() - 1u).to_owned();\n+    return str::slice(*rdr.src, start.to_uint(),\n+                      byte_offset(rdr, rdr.last_pos).to_uint()).to_owned();\n }\n \n // EFFECT: advance the StringReader by one character. If a newline is\n // discovered, add it to the FileMap's list of line start offsets.\n pub fn bump(rdr: &mut StringReader) {\n     rdr.last_pos = rdr.pos;\n-    let current_byte_offset = byte_offset(rdr).to_uint();;\n+    let current_byte_offset = byte_offset(rdr, rdr.pos).to_uint();\n     if current_byte_offset < (*rdr.src).len() {\n         assert!(rdr.curr != -1 as char);\n         let last_char = rdr.curr;\n@@ -202,7 +200,7 @@ pub fn is_eof(rdr: @mut StringReader) -> bool {\n     rdr.curr == -1 as char\n }\n pub fn nextch(rdr: @mut StringReader) -> char {\n-    let offset = byte_offset(rdr).to_uint();\n+    let offset = byte_offset(rdr, rdr.pos).to_uint();\n     if offset < (*rdr.src).len() {\n         return str::char_at(*rdr.src, offset);\n     } else { return -1 as char; }\n@@ -692,7 +690,7 @@ fn next_token_inner(rdr: @mut StringReader) -> token::Token {\n         return token::LIT_INT(c2 as i64, ast::ty_char);\n       }\n       '\"' => {\n-        let n = byte_offset(rdr);\n+        let n = byte_offset(rdr, rdr.last_pos);\n         bump(rdr);\n         while rdr.curr != '\"' {\n             if is_eof(rdr) {"}]}