{"sha": "e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4ZDAxZWE0Yzc2ZjZmM2NiNGY3MWRiZmYyNjEzNTVmODI1ZDEyYmI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-01-25T20:01:11Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-02-25T15:07:59Z"}, "message": "rustc: store type parameter defaults outside of ty::Generics.", "tree": {"sha": "bd71bb08ce70f9e7e9eebcddd20d084b12dbf96c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd71bb08ce70f9e7e9eebcddd20d084b12dbf96c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "html_url": "https://github.com/rust-lang/rust/commit/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1572bf104dbf65d58bd6b889fa46229c9b92d6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1572bf104dbf65d58bd6b889fa46229c9b92d6f9", "html_url": "https://github.com/rust-lang/rust/commit/1572bf104dbf65d58bd6b889fa46229c9b92d6f9"}], "stats": {"total": 779, "additions": 394, "deletions": 385}, "files": [{"sha": "82e644d710dc2c54d61e33bbf881ca522dab583c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -525,7 +525,7 @@ impl<'a> LoweringContext<'a> {\n                         return n;\n                     }\n                     assert!(!def_id.is_local());\n-                    let (n, _) = self.sess.cstore.item_generics_own_param_counts(def_id);\n+                    let n = self.sess.cstore.item_generics(def_id).regions.len();\n                     self.type_def_lifetime_params.insert(def_id, n);\n                     n\n                 });"}, {"sha": "64256247bb50cacf1b17b413d8bd8571e42edbe3", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -1197,16 +1197,19 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// as the substitutions for the default, `(T, U)`.\n     pub fn type_var_for_def(&self,\n                             span: Span,\n-                            def: &ty::TypeParameterDef<'tcx>,\n+                            def: &ty::TypeParameterDef,\n                             substs: &[Kind<'tcx>])\n                             -> Ty<'tcx> {\n-        let default = def.default.map(|default| {\n-            type_variable::Default {\n+        let default = if def.has_default {\n+            let default = self.tcx.item_type(def.def_id);\n+            Some(type_variable::Default {\n                 ty: default.subst_spanned(self.tcx, substs, Some(span)),\n                 origin_span: span,\n-                def_id: def.default_def_id\n-            }\n-        });\n+                def_id: def.def_id\n+            })\n+        } else {\n+            None\n+        };\n \n \n         let ty_var_id = self.type_variables"}, {"sha": "671da0d11972b6338f07323ab7534c9c4c10ccf4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -28,7 +28,6 @@ use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DisambiguatedDefPathData};\n use hir::svh::Svh;\n use middle::lang_items;\n-use middle::resolve_lifetime::ObjectLifetimeDefault;\n use ty::{self, Ty, TyCtxt};\n use mir::Mir;\n use session::Session;\n@@ -182,11 +181,7 @@ pub trait CrateStore<'tcx> {\n                            -> ty::GenericPredicates<'tcx>;\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                  -> ty::GenericPredicates<'tcx>;\n-    fn item_generics<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                         -> ty::Generics<'tcx>;\n-    fn item_generics_own_param_counts(&self, def: DefId) -> (usize, usize);\n-    fn item_generics_object_lifetime_defaults(&self, def: DefId)\n-                                              -> Vec<ObjectLifetimeDefault>;\n+    fn item_generics(&self, def: DefId) -> ty::Generics;\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>;\n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef;\n     fn adt_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId) -> &'tcx ty::AdtDef;\n@@ -335,13 +330,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                            -> ty::GenericPredicates<'tcx> { bug!(\"item_predicates\") }\n     fn item_super_predicates<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                                  -> ty::GenericPredicates<'tcx> { bug!(\"item_super_predicates\") }\n-    fn item_generics<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                         -> ty::Generics<'tcx> { bug!(\"item_generics\") }\n-    fn item_generics_own_param_counts(&self, def: DefId) -> (usize, usize)\n-        { bug!(\"item_generics_own_param_counts\") }\n-    fn item_generics_object_lifetime_defaults(&self, def: DefId)\n-                                              -> Vec<ObjectLifetimeDefault>\n-        { bug!(\"item_generics_object_lifetime_defaults\") }\n+    fn item_generics(&self, def: DefId) -> ty::Generics { bug!(\"item_generics\") }\n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!(\"item_attrs\") }\n     fn trait_def<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)-> ty::TraitDef\n         { bug!(\"trait_def\") }"}, {"sha": "95cbd738651d5031be2dd33c6366f94b8d6cd1d1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -995,7 +995,9 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             } else {\n                 let cstore = &self.sess.cstore;\n                 self.xcrate_object_lifetime_defaults.entry(def_id).or_insert_with(|| {\n-                    cstore.item_generics_object_lifetime_defaults(def_id)\n+                    cstore.item_generics(def_id).types.into_iter().map(|def| {\n+                        def.object_lifetime_default\n+                    }).collect()\n                 })\n             };\n             unsubst.iter().map(|set| {"}, {"sha": "2f062e2e5b19454e4b6241b39700627ec7ba0219", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -64,7 +64,7 @@ pub struct GlobalArenas<'tcx> {\n     layout: TypedArena<Layout>,\n \n     // references\n-    generics: TypedArena<ty::Generics<'tcx>>,\n+    generics: TypedArena<ty::Generics>,\n     trait_def: TypedArena<ty::TraitDef>,\n     adt_def: TypedArena<ty::AdtDef>,\n     mir: TypedArena<RefCell<Mir<'tcx>>>,\n@@ -467,9 +467,6 @@ pub struct GlobalCtxt<'tcx> {\n     // Cache for the type-contents routine. FIXME -- track deps?\n     pub tc_cache: RefCell<FxHashMap<Ty<'tcx>, ty::contents::TypeContents>>,\n \n-    // FIXME no dep tracking, but we should be able to remove this\n-    pub ty_param_defs: RefCell<NodeMap<ty::TypeParameterDef<'tcx>>>,\n-\n     // FIXME dep tracking -- should be harmless enough\n     pub normalized_cache: RefCell<FxHashMap<Ty<'tcx>, Ty<'tcx>>>,\n \n@@ -646,15 +643,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn type_parameter_def(self,\n-                              node_id: NodeId)\n-                              -> ty::TypeParameterDef<'tcx>\n-    {\n-        self.ty_param_defs.borrow().get(&node_id).unwrap().clone()\n-    }\n-\n-    pub fn alloc_generics(self, generics: ty::Generics<'gcx>)\n-                          -> &'gcx ty::Generics<'gcx> {\n+    pub fn alloc_generics(self, generics: ty::Generics) -> &'gcx ty::Generics {\n         self.global_arenas.generics.alloc(generics)\n     }\n \n@@ -785,7 +774,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             tc_cache: RefCell::new(FxHashMap()),\n             associated_items: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n             associated_item_def_ids: RefCell::new(DepTrackingMap::new(dep_graph.clone())),\n-            ty_param_defs: RefCell::new(NodeMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n             lang_items: lang_items,"}, {"sha": "44a3aabc0560abe2f6efccc747c3cff9c6a3fd35", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use infer::type_variable;\n-use ty::{self, BoundRegion, Region, Ty, TyCtxt};\n+use ty::{self, BoundRegion, DefIdTree, Region, Ty, TyCtxt};\n \n use std::fmt;\n use syntax::abi;\n@@ -287,8 +287,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         db.span_note(span, \"a default was defined here...\");\n                     }\n                     None => {\n+                        let item_def_id = self.parent(expected.def_id).unwrap();\n                         db.note(&format!(\"a default is defined on `{}`\",\n-                                         self.item_path_str(expected.def_id)));\n+                                         self.item_path_str(item_def_id)));\n                     }\n                 }\n \n@@ -301,8 +302,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         db.span_note(span, \"a second default was defined here...\");\n                     }\n                     None => {\n+                        let item_def_id = self.parent(found.def_id).unwrap();\n                         db.note(&format!(\"a second default is defined on `{}`\",\n-                                         self.item_path_str(found.def_id)));\n+                                         self.item_path_str(item_def_id)));\n                     }\n                 }\n "}, {"sha": "d2c237d5db61dfaf56a50169bd7f0a58771d13c0", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -35,7 +35,7 @@ macro_rules! dep_map_ty {\n \n dep_map_ty! { AssociatedItems: AssociatedItems(DefId) -> ty::AssociatedItem }\n dep_map_ty! { Types: ItemSignature(DefId) -> Ty<'tcx> }\n-dep_map_ty! { Generics: ItemSignature(DefId) -> &'tcx ty::Generics<'tcx> }\n+dep_map_ty! { Generics: ItemSignature(DefId) -> &'tcx ty::Generics }\n dep_map_ty! { Predicates: ItemSignature(DefId) -> ty::GenericPredicates<'tcx> }\n dep_map_ty! { SuperPredicates: ItemSignature(DefId) -> ty::GenericPredicates<'tcx> }\n dep_map_ty! { AssociatedItemDefIds: AssociatedItemDefIds(DefId) -> Rc<Vec<DefId>> }"}, {"sha": "1275530b1bdf91016060ba23a591de0d37354d25", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -19,9 +19,10 @@ use dep_graph::{self, DepNode};\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use middle;\n use hir::def::{Def, CtorKind, ExportMap};\n-use hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::region::{CodeExtent, ROOT_CODE_EXTENT};\n+use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n use traits;\n use ty;\n@@ -33,6 +34,7 @@ use util::nodemap::{NodeSet, NodeMap, FxHashMap};\n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell, Ref};\n+use std::collections::BTreeMap;\n use std::hash::{Hash, Hasher};\n use std::ops::Deref;\n use std::rc::Rc;\n@@ -585,13 +587,13 @@ pub enum IntVarValue {\n     UintType(ast::UintTy),\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable)]\n-pub struct TypeParameterDef<'tcx> {\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable)]\n+pub struct TypeParameterDef {\n     pub name: Name,\n     pub def_id: DefId,\n     pub index: u32,\n-    pub default_def_id: DefId, // for use in error reporing about defaults\n-    pub default: Option<Ty<'tcx>>,\n+    pub has_default: bool,\n+    pub object_lifetime_default: ObjectLifetimeDefault,\n \n     /// `pure_wrt_drop`, set by the (unsafe) `#[may_dangle]` attribute\n     /// on generic parameter `T`, asserts data behind the parameter\n@@ -628,16 +630,21 @@ impl RegionParameterDef {\n /// Information about the formal type/lifetime parameters associated\n /// with an item or method. Analogous to hir::Generics.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct Generics<'tcx> {\n+pub struct Generics {\n     pub parent: Option<DefId>,\n     pub parent_regions: u32,\n     pub parent_types: u32,\n     pub regions: Vec<RegionParameterDef>,\n-    pub types: Vec<TypeParameterDef<'tcx>>,\n+    pub types: Vec<TypeParameterDef>,\n+\n+    /// Reverse map to each `TypeParameterDef`'s `index` field, from\n+    /// `def_id.index` (`def_id.krate` is the same as the item's).\n+    pub type_param_to_index: BTreeMap<DefIndex, u32>,\n+\n     pub has_self: bool,\n }\n \n-impl<'tcx> Generics<'tcx> {\n+impl Generics {\n     pub fn parent_count(&self) -> usize {\n         self.parent_regions as usize + self.parent_types as usize\n     }\n@@ -651,10 +658,12 @@ impl<'tcx> Generics<'tcx> {\n     }\n \n     pub fn region_param(&self, param: &EarlyBoundRegion) -> &RegionParameterDef {\n+        assert_eq!(self.parent_count(), 0);\n         &self.regions[param.index as usize - self.has_self as usize]\n     }\n \n-    pub fn type_param(&self, param: &ParamTy) -> &TypeParameterDef<'tcx> {\n+    pub fn type_param(&self, param: &ParamTy) -> &TypeParameterDef {\n+        assert_eq!(self.parent_count(), 0);\n         &self.types[param.idx as usize - self.has_self as usize - self.regions.len()]\n     }\n }\n@@ -2319,10 +2328,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     /// Given the did of an item, returns its generics.\n-    pub fn item_generics(self, did: DefId) -> &'gcx Generics<'gcx> {\n+    pub fn item_generics(self, did: DefId) -> &'gcx Generics {\n         lookup_locally_or_in_crate_store(\n             \"generics\", did, &self.generics,\n-            || self.alloc_generics(self.sess.cstore.item_generics(self.global_tcx(), did)))\n+            || self.alloc_generics(self.sess.cstore.item_generics(did)))\n     }\n \n     /// Given the did of an item, returns its full set of predicates."}, {"sha": "a1bf58a12eb0912eca7b3e2cb45e9c0d5dee5372", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -353,7 +353,7 @@ macro_rules! CopyImpls {\n     }\n }\n \n-CopyImpls! { (), hir::Unsafety, abi::Abi, ty::RegionParameterDef }\n+CopyImpls! { (), hir::Unsafety, abi::Abi }\n \n impl<'tcx, T:TypeFoldable<'tcx>, U:TypeFoldable<'tcx>> TypeFoldable<'tcx> for (T, U) {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> (T, U) {\n@@ -716,40 +716,6 @@ impl<'tcx> TypeFoldable<'tcx> for ty::adjustment::AutoBorrow<'tcx> {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ty::TypeParameterDef<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::TypeParameterDef {\n-            name: self.name,\n-            def_id: self.def_id,\n-            index: self.index,\n-            default: self.default.fold_with(folder),\n-            default_def_id: self.default_def_id,\n-            pure_wrt_drop: self.pure_wrt_drop,\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.default.visit_with(visitor)\n-    }\n-}\n-\n-impl<'tcx> TypeFoldable<'tcx> for ty::Generics<'tcx> {\n-    fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        ty::Generics {\n-            parent: self.parent,\n-            parent_regions: self.parent_regions,\n-            parent_types: self.parent_types,\n-            regions: self.regions.fold_with(folder),\n-            types: self.types.fold_with(folder),\n-            has_self: self.has_self,\n-        }\n-    }\n-\n-    fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        self.regions.visit_with(visitor) || self.types.visit_with(visitor)\n-    }\n-}\n-\n impl<'tcx> TypeFoldable<'tcx> for ty::GenericPredicates<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n         ty::GenericPredicates {"}, {"sha": "0a2cc1c30f40fc61452b3aa8bd3fedd3386269c9", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -184,7 +184,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                             mut mk_type: FT)\n                             -> &'tcx Substs<'tcx>\n     where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> &'tcx ty::Region,\n-          FT: FnMut(&ty::TypeParameterDef<'tcx>, &[Kind<'tcx>]) -> Ty<'tcx> {\n+          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         let defs = tcx.item_generics(def_id);\n         let mut substs = Vec::with_capacity(defs.count());\n         Substs::fill_item(&mut substs, tcx, defs, &mut mk_region, &mut mk_type);\n@@ -198,7 +198,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n                              mut mk_type: FT)\n                              -> &'tcx Substs<'tcx>\n     where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> &'tcx ty::Region,\n-          FT: FnMut(&ty::TypeParameterDef<'tcx>, &[Kind<'tcx>]) -> Ty<'tcx>\n+          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx>\n     {\n         let defs = tcx.item_generics(def_id);\n         let mut result = Vec::with_capacity(defs.count());\n@@ -209,11 +209,11 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n \n     fn fill_item<FR, FT>(substs: &mut Vec<Kind<'tcx>>,\n                          tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                         defs: &ty::Generics<'tcx>,\n+                         defs: &ty::Generics,\n                          mk_region: &mut FR,\n                          mk_type: &mut FT)\n     where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> &'tcx ty::Region,\n-          FT: FnMut(&ty::TypeParameterDef<'tcx>, &[Kind<'tcx>]) -> Ty<'tcx> {\n+          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n \n         if let Some(def_id) = defs.parent {\n             let parent_defs = tcx.item_generics(def_id);\n@@ -223,11 +223,11 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n     }\n \n     fn fill_single<FR, FT>(substs: &mut Vec<Kind<'tcx>>,\n-                           defs: &ty::Generics<'tcx>,\n+                           defs: &ty::Generics,\n                            mk_region: &mut FR,\n                            mk_type: &mut FT)\n     where FR: FnMut(&ty::RegionParameterDef, &[Kind<'tcx>]) -> &'tcx ty::Region,\n-          FT: FnMut(&ty::TypeParameterDef<'tcx>, &[Kind<'tcx>]) -> Ty<'tcx> {\n+          FT: FnMut(&ty::TypeParameterDef, &[Kind<'tcx>]) -> Ty<'tcx> {\n         // Handle Self first, before all regions.\n         let mut types = defs.types.iter();\n         if defs.parent.is_none() && defs.has_self {\n@@ -301,7 +301,7 @@ impl<'a, 'gcx, 'tcx> Substs<'tcx> {\n         tcx.mk_substs(target_substs.iter().chain(&self[defs.own_count()..]).cloned())\n     }\n \n-    pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics<'tcx>)\n+    pub fn truncate_to(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, generics: &ty::Generics)\n                        -> &'tcx Substs<'tcx> {\n         tcx.mk_substs(self.iter().take(generics.count()).cloned())\n     }"}, {"sha": "2a5cd7b37cae4ffc0e76e3687c7325251fa4b31a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -137,11 +137,14 @@ pub fn parameterized(f: &mut fmt::Formatter,\n         }\n \n         if !verbose {\n-            if generics.types.last().map_or(false, |def| def.default.is_some()) {\n+            if generics.types.last().map_or(false, |def| def.has_default) {\n                 if let Some(substs) = tcx.lift(&substs) {\n                     let tps = substs.types().rev().skip(child_types);\n                     for (def, actual) in generics.types.iter().rev().zip(tps) {\n-                        if def.default.subst(tcx, substs) != Some(actual) {\n+                        if !def.has_default {\n+                            break;\n+                        }\n+                        if tcx.item_type(def.def_id).subst(tcx, substs) != actual {\n                             break;\n                         }\n                         num_supplied_defaults += 1;\n@@ -326,7 +329,7 @@ impl<'tcx> fmt::Display for &'tcx ty::Slice<ty::ExistentialPredicate<'tcx>> {\n     }\n }\n \n-impl<'tcx> fmt::Debug for ty::TypeParameterDef<'tcx> {\n+impl fmt::Debug for ty::TypeParameterDef {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"TypeParameterDef({}, {:?}, {})\",\n                self.name,"}, {"sha": "bd184c5c5e69f98bae4965a087d07ca81f9eebeb", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 16, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -17,7 +17,6 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind, ExternC\n use rustc::middle::cstore::{NativeLibrary, LinkMeta, LinkagePreference, LoadedMacro};\n use rustc::hir::def::{self, Def};\n use rustc::middle::lang_items;\n-use rustc::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -104,22 +103,9 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         self.get_crate_data(def.krate).get_super_predicates(def.index, tcx)\n     }\n \n-    fn item_generics<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                         -> ty::Generics<'tcx>\n-    {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).get_generics(def.index, tcx)\n-    }\n-\n-    fn item_generics_own_param_counts(&self, def: DefId) -> (usize, usize) {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).generics_own_param_counts(def.index)\n-    }\n-\n-    fn item_generics_object_lifetime_defaults(&self, def: DefId)\n-                                              -> Vec<ObjectLifetimeDefault> {\n+    fn item_generics(&self, def: DefId) -> ty::Generics {\n         self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).generics_object_lifetime_defaults(def.index)\n+        self.get_crate_data(def.krate).get_generics(def.index)\n     }\n \n     fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute>"}, {"sha": "22fa9411cc1172586beb0d15cb1d60f420bff63e", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -20,7 +20,6 @@ use rustc::middle::cstore::LinkagePreference;\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc::middle::lang_items;\n-use rustc::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::ty::subst::Substs;\n@@ -601,30 +600,8 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n-    pub fn get_generics(&self,\n-                        item_id: DefIndex,\n-                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                        -> ty::Generics<'tcx> {\n-        let g = self.entry(item_id).generics.unwrap().decode(self);\n-        ty::Generics {\n-            parent: g.parent,\n-            parent_regions: g.parent_regions,\n-            parent_types: g.parent_types,\n-            regions: g.regions.decode((self, tcx)).collect(),\n-            types: g.types.decode((self, tcx)).collect(),\n-            has_self: g.has_self,\n-        }\n-    }\n-\n-    pub fn generics_own_param_counts(&self, item_id: DefIndex) -> (usize, usize) {\n-        let g = self.entry(item_id).generics.unwrap().decode(self);\n-        (g.regions.len, g.types.len)\n-    }\n-\n-    pub fn generics_object_lifetime_defaults(&self, item_id: DefIndex)\n-                                             -> Vec<ObjectLifetimeDefault> {\n+    pub fn get_generics(&self, item_id: DefIndex) -> ty::Generics {\n         self.entry(item_id).generics.unwrap().decode(self)\n-                           .object_lifetime_defaults.decode(self).collect()\n     }\n \n     pub fn get_type(&self, id: DefIndex, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Ty<'tcx> {"}, {"sha": "a643ed59af136d4e68520fe910c8359836b8325d", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -423,26 +423,9 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn encode_generics(&mut self, def_id: DefId) -> Lazy<Generics<'tcx>> {\n+    fn encode_generics(&mut self, def_id: DefId) -> Lazy<ty::Generics> {\n         let tcx = self.tcx;\n-        let g = tcx.item_generics(def_id);\n-        let regions = self.lazy_seq_ref(&g.regions);\n-        let types = self.lazy_seq_ref(&g.types);\n-        let mut object_lifetime_defaults = LazySeq::empty();\n-        if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-            if let Some(o) = tcx.named_region_map.object_lifetime_defaults.get(&id) {\n-                object_lifetime_defaults = self.lazy_seq_ref(o);\n-            }\n-        }\n-        self.lazy(&Generics {\n-            parent: g.parent,\n-            parent_regions: g.parent_regions,\n-            parent_types: g.parent_types,\n-            regions: regions,\n-            types: types,\n-            has_self: g.has_self,\n-            object_lifetime_defaults: object_lifetime_defaults,\n-        })\n+        self.lazy(tcx.item_generics(def_id))\n     }\n \n     fn encode_predicates(&mut self, def_id: DefId) -> Lazy<ty::GenericPredicates<'tcx>> {\n@@ -1008,6 +991,10 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n                           EncodeContext::encode_info_for_foreign_item,\n                           (def_id, ni));\n     }\n+    fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n+        intravisit::walk_generics(self, generics);\n+        self.index.encode_info_for_generics(generics);\n+    }\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         intravisit::walk_ty(self, ty);\n         self.index.encode_info_for_ty(ty);\n@@ -1019,6 +1006,14 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n+    fn encode_info_for_generics(&mut self, generics: &hir::Generics) {\n+        for ty_param in &generics.ty_params {\n+            let def_id = self.tcx.hir.local_def_id(ty_param.id);\n+            let has_default = Untracked(ty_param.default.is_some());\n+            self.record(def_id, EncodeContext::encode_info_for_ty_param, (def_id, has_default));\n+        }\n+    }\n+\n     fn encode_info_for_ty(&mut self, ty: &hir::Ty) {\n         if let hir::TyImplTrait(_) = ty.node {\n             let def_id = self.tcx.hir.local_def_id(ty.id);\n@@ -1038,6 +1033,34 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n+    fn encode_info_for_ty_param(&mut self,\n+                                (def_id, Untracked(has_default)): (DefId, Untracked<bool>))\n+                                -> Entry<'tcx> {\n+        let tcx = self.tcx;\n+        Entry {\n+            kind: EntryKind::Type,\n+            visibility: self.lazy(&ty::Visibility::Public),\n+            span: self.lazy(&tcx.def_span(def_id)),\n+            attributes: LazySeq::empty(),\n+            children: LazySeq::empty(),\n+            stability: None,\n+            deprecation: None,\n+\n+            ty: if has_default {\n+                Some(self.encode_item_type(def_id))\n+            } else {\n+                None\n+            },\n+            inherent_impls: LazySeq::empty(),\n+            variances: LazySeq::empty(),\n+            generics: None,\n+            predicates: None,\n+\n+            ast: None,\n+            mir: None,\n+        }\n+    }\n+\n     fn encode_info_for_anon_ty(&mut self, def_id: DefId) -> Entry<'tcx> {\n         let tcx = self.tcx;\n         Entry {"}, {"sha": "ee30063fcbd06f9e3bb14e68ebb8b67941202f47", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -16,7 +16,6 @@ use rustc::hir::def::{self, CtorKind};\n use rustc::hir::def_id::{DefIndex, DefId};\n use rustc::middle::cstore::{DepKind, LinkagePreference, NativeLibrary};\n use rustc::middle::lang_items;\n-use rustc::middle::resolve_lifetime::ObjectLifetimeDefault;\n use rustc::mir;\n use rustc::ty::{self, Ty, ReprOptions};\n use rustc_back::PanicStrategy;\n@@ -212,7 +211,7 @@ pub struct Entry<'tcx> {\n     pub ty: Option<Lazy<Ty<'tcx>>>,\n     pub inherent_impls: LazySeq<DefIndex>,\n     pub variances: LazySeq<ty::Variance>,\n-    pub generics: Option<Lazy<Generics<'tcx>>>,\n+    pub generics: Option<Lazy<ty::Generics>>,\n     pub predicates: Option<Lazy<ty::GenericPredicates<'tcx>>>,\n \n     pub ast: Option<Lazy<astencode::Ast<'tcx>>>,\n@@ -246,20 +245,6 @@ pub enum EntryKind<'tcx> {\n     AssociatedConst(AssociatedContainer),\n }\n \n-/// A copy of `ty::Generics` which allows lazy decoding of\n-/// `regions` and `types` (e.g. knowing the number of type\n-/// and lifetime parameters before `TyCtxt` is created).\n-#[derive(RustcEncodable, RustcDecodable)]\n-pub struct Generics<'tcx> {\n-    pub parent: Option<DefId>,\n-    pub parent_regions: u32,\n-    pub parent_types: u32,\n-    pub regions: LazySeq<ty::RegionParameterDef>,\n-    pub types: LazySeq<ty::TypeParameterDef<'tcx>>,\n-    pub has_self: bool,\n-    pub object_lifetime_defaults: LazySeq<ObjectLifetimeDefault>,\n-}\n-\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct ModData {\n     pub reexports: LazySeq<def::Export>,"}, {"sha": "72347f1616eb69e045f145d87b8d1eac4b8af40f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -334,7 +334,11 @@ impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n \n impl<'b, 'a, 'tcx> ReachEverythingInTheInterfaceVisitor<'b, 'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        self.ev.tcx.item_generics(self.item_def_id).visit_with(self);\n+        for def in &self.ev.tcx.item_generics(self.item_def_id).types {\n+            if def.has_default {\n+                self.ev.tcx.item_type(def.def_id).visit_with(self);\n+            }\n+        }\n         self\n     }\n \n@@ -892,7 +896,11 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     fn generics(&mut self) -> &mut Self {\n-        self.tcx.item_generics(self.item_def_id).visit_with(self);\n+        for def in &self.tcx.item_generics(self.item_def_id).types {\n+            if def.has_default {\n+                self.tcx.item_type(def.def_id).visit_with(self);\n+            }\n+        }\n         self\n     }\n "}, {"sha": "8f6b1b8971e5b9ffb1967dbb72629227735966fe", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -15,6 +15,33 @@\n // use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n register_long_diagnostics! {\n \n+E0128: r##\"\n+Type parameter defaults can only use parameters that occur before them.\n+Erroneous code example:\n+\n+```compile_fail,E0128\n+struct Foo<T=U, U=()> {\n+    field1: T,\n+    filed2: U,\n+}\n+// error: type parameters with a default cannot use forward declared\n+// identifiers\n+```\n+\n+Since type parameters are evaluated in-order, you may be able to fix this issue\n+by doing:\n+\n+```\n+struct Foo<U=(), T=U> {\n+    field1: T,\n+    filed2: U,\n+}\n+```\n+\n+Please also verify that this wasn't because of a name-clash and rename the type\n+parameter if so.\n+\"##,\n+\n E0154: r##\"\n ## Note: this error code is no longer emitted by the compiler.\n "}, {"sha": "0565db28ec5c98412e9a3709247edd24664b315b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 62, "deletions": 16, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -136,6 +136,8 @@ enum ResolutionError<'a> {\n     AttemptToUseNonConstantValueInConstant,\n     /// error E0530: X bindings cannot shadow Ys\n     BindingShadowsSomethingUnacceptable(&'a str, Name, &'a NameBinding<'a>),\n+    /// error E0128: type parameters with a default cannot use forward declared identifiers\n+    ForwardDeclaredTyParam,\n }\n \n fn resolve_error<'sess, 'a>(resolver: &'sess Resolver,\n@@ -322,6 +324,14 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             err.span_label(binding.span, msg);\n             err\n         }\n+        ResolutionError::ForwardDeclaredTyParam => {\n+            let mut err = struct_span_err!(resolver.session, span, E0128,\n+                                           \"type parameters with a default cannot use \\\n+                                            forward declared identifiers\");\n+            err.span_label(span, &format!(\"defaulted type parameters \\\n+                                           cannot be forward declared\"));\n+            err\n+        }\n     }\n }\n \n@@ -674,6 +684,32 @@ impl<'a, 'tcx> Visitor<'tcx> for Resolver<'a> {\n         self.label_ribs.pop();\n         self.ribs[ValueNS].pop();\n     }\n+    fn visit_generics(&mut self, generics: &'tcx Generics) {\n+        // For type parameter defaults, we have to ban access\n+        // to following type parameters, as the Substs can only\n+        // provide previous type parameters as they're built.\n+        let mut default_ban_rib = Rib::new(ForwardTyParamBanRibKind);\n+        default_ban_rib.bindings.extend(generics.ty_params.iter()\n+            .skip_while(|p| p.default.is_none())\n+            .map(|p| (Ident::with_empty_ctxt(p.ident.name), Def::Err)));\n+\n+        for param in &generics.ty_params {\n+            for bound in &param.bounds {\n+                self.visit_ty_param_bound(bound);\n+            }\n+\n+            if let Some(ref ty) = param.default {\n+                self.ribs[TypeNS].push(default_ban_rib);\n+                self.visit_ty(ty);\n+                default_ban_rib = self.ribs[TypeNS].pop().unwrap();\n+            }\n+\n+            // Allow all following defaults to refer to this type parameter.\n+            default_ban_rib.bindings.remove(&Ident::with_empty_ctxt(param.ident.name));\n+        }\n+        for lt in &generics.lifetimes { self.visit_lifetime_def(lt); }\n+        for p in &generics.where_clause.predicates { self.visit_where_predicate(p); }\n+    }\n }\n \n pub type ErrorMessage = Option<(Span, String)>;\n@@ -718,6 +754,11 @@ enum RibKind<'a> {\n \n     // We passed through a `macro_rules!` statement with the given expansion\n     MacroDefinition(Mark),\n+\n+    // All bindings in this rib are type parameters that can't be used\n+    // from the default of a type parameter because they're not declared\n+    // before said type parameter. Also see the `visit_generics` override.\n+    ForwardTyParamBanRibKind,\n }\n \n /// One local scope.\n@@ -736,13 +777,6 @@ impl<'a> Rib<'a> {\n     }\n }\n \n-/// A definition along with the index of the rib it was found on\n-#[derive(Copy, Clone, Debug)]\n-struct LocalDef {\n-    ribs: Option<(Namespace, usize)>,\n-    def: Def,\n-}\n-\n enum LexicalScopeBinding<'a> {\n     Item(&'a NameBinding<'a>),\n     Def(Def),\n@@ -1428,7 +1462,7 @@ impl<'a> Resolver<'a> {\n             if let Some(def) = self.ribs[ns][i].bindings.get(&ident).cloned() {\n                 // The ident resolves to a type parameter or local variable.\n                 return Some(LexicalScopeBinding::Def(\n-                    self.adjust_local_def(LocalDef { ribs: Some((ns, i)), def: def }, record_used)\n+                    self.adjust_local_def(ns, i, def, record_used)\n                 ));\n             }\n \n@@ -2527,20 +2561,32 @@ impl<'a> Resolver<'a> {\n     }\n \n     // Resolve a local definition, potentially adjusting for closures.\n-    fn adjust_local_def(&mut self, local_def: LocalDef, record_used: Option<Span>) -> Def {\n-        let ribs = match local_def.ribs {\n-            Some((ns, i)) => &self.ribs[ns][i + 1..],\n-            None => &[] as &[_],\n-        };\n-        let mut def = local_def.def;\n+    fn adjust_local_def(&mut self,\n+                        ns: Namespace,\n+                        rib_index: usize,\n+                        mut def: Def,\n+                        record_used: Option<Span>) -> Def {\n+        let ribs = &self.ribs[ns][rib_index + 1..];\n+\n+        // An invalid forward use of a type parameter from a previous default.\n+        if let ForwardTyParamBanRibKind = self.ribs[ns][rib_index].kind {\n+            if let Some(span) = record_used {\n+                resolve_error(self, span,\n+                        ResolutionError::ForwardDeclaredTyParam);\n+            }\n+            assert_eq!(def, Def::Err);\n+            return Def::Err;\n+        }\n+\n         match def {\n             Def::Upvar(..) => {\n                 span_bug!(record_used.unwrap_or(DUMMY_SP), \"unexpected {:?} in bindings\", def)\n             }\n             Def::Local(def_id) => {\n                 for rib in ribs {\n                     match rib.kind {\n-                        NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) => {\n+                        NormalRibKind | ModuleRibKind(..) | MacroDefinition(..) |\n+                        ForwardTyParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n@@ -2593,7 +2639,7 @@ impl<'a> Resolver<'a> {\n                 for rib in ribs {\n                     match rib.kind {\n                         NormalRibKind | MethodRibKind(_) | ClosureRibKind(..) |\n-                        ModuleRibKind(..) | MacroDefinition(..) => {\n+                        ModuleRibKind(..) | MacroDefinition(..) | ForwardTyParamBanRibKind => {\n                             // Nothing to do. Continue.\n                         }\n                         ItemRibKind => {"}, {"sha": "4a8b0ff45522fb6ec4236ac6e2b62b5d5a487f1d", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -332,7 +332,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     }\n \n     fn get_template_parameters<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n-                                         generics: &ty::Generics<'tcx>,\n+                                         generics: &ty::Generics,\n                                          substs: &Substs<'tcx>,\n                                          file_metadata: DIFile,\n                                          name_to_append_suffix_to: &mut String)\n@@ -382,9 +382,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         return create_DIArray(DIB(cx), &template_params[..]);\n     }\n \n-    fn get_type_parameter_names<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n-                                          generics: &ty::Generics<'tcx>)\n-                                          -> Vec<ast::Name> {\n+    fn get_type_parameter_names(cx: &CrateContext, generics: &ty::Generics) -> Vec<ast::Name> {\n         let mut names = generics.parent.map_or(vec![], |def_id| {\n             get_type_parameter_names(cx, cx.tcx().item_generics(def_id))\n         });"}, {"sha": "ceff96a39b2c982a04bc8233028aa67357506961", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -14,6 +14,7 @@ use super::{CrateDebugContext};\n use super::namespace::item_namespace;\n \n use rustc::hir::def_id::DefId;\n+use rustc::ty::DefIdTree;\n \n use llvm;\n use llvm::debuginfo::{DIScope, DIBuilderRef, DIDescriptor, DIArray};\n@@ -74,11 +75,8 @@ pub fn DIB(cx: &CrateContext) -> DIBuilderRef {\n \n pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)\n                                    -> (DIScope, Span) {\n-    let containing_scope = item_namespace(cx, DefId {\n-        krate: def_id.krate,\n-        index: cx.tcx().def_key(def_id).parent\n-                 .expect(\"get_namespace_and_span_for_item: missing parent?\")\n-    });\n+    let containing_scope = item_namespace(cx, cx.tcx().parent(def_id)\n+        .expect(\"get_namespace_and_span_for_item: missing parent?\"));\n \n     // Try to get some span information, if we have an inlined item.\n     let definition_span = cx.tcx().def_span(def_id);"}, {"sha": "8f556726f22f5a44fc6fb7fafc537e191262b770", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -42,7 +42,7 @@ use std::cell::RefCell;\n use std::iter;\n use syntax::{abi, ast};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n-use syntax::symbol::{Symbol, keywords};\n+use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n pub trait AstConv<'gcx, 'tcx> {\n@@ -53,7 +53,7 @@ pub trait AstConv<'gcx, 'tcx> {\n \n     /// Returns the generic type and lifetime parameters for an item.\n     fn get_generics(&self, span: Span, id: DefId)\n-                    -> Result<&'tcx ty::Generics<'tcx>, ErrorReported>;\n+                    -> Result<&'tcx ty::Generics, ErrorReported>;\n \n     /// Identify the type for an item, like a type alias, fn, or struct.\n     fn get_item_type(&self, span: Span, id: DefId) -> Result<Ty<'tcx>, ErrorReported>;\n@@ -89,7 +89,7 @@ pub trait AstConv<'gcx, 'tcx> {\n \n     /// Same as ty_infer, but with a known type parameter definition.\n     fn ty_infer_for_def(&self,\n-                        _def: &ty::TypeParameterDef<'tcx>,\n+                        _def: &ty::TypeParameterDef,\n                         _substs: &[Kind<'tcx>],\n                         span: Span) -> Ty<'tcx> {\n         self.ty_infer(span)\n@@ -277,9 +277,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         }\n \n         let is_object = self_ty.map_or(false, |ty| ty.sty == TRAIT_OBJECT_DUMMY_SELF);\n-        let default_needs_object_self = |p: &ty::TypeParameterDef<'tcx>| {\n-            if let Some(ref default) = p.default {\n-                if is_object && default.has_self_ty() {\n+        let default_needs_object_self = |p: &ty::TypeParameterDef| {\n+            if is_object && p.has_default {\n+                let default = self.get_item_type(span, p.def_id).ok();\n+                if default.has_self_ty() {\n                     // There is no suitable inference default for a type parameter\n                     // that references self, in an object type.\n                     return true;\n@@ -327,7 +328,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     self.ty_infer(span)\n                 };\n                 ty_var\n-            } else if let Some(default) = def.default {\n+            } else if def.has_default {\n                 // No type parameter provided, but a default exists.\n \n                 // If we are converting an object type, then the\n@@ -346,7 +347,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     tcx.types.err\n                 } else {\n                     // This is a default type parameter.\n-                    default.subst_spanned(tcx, substs, Some(span))\n+                    match self.get_item_type(span, def.def_id) {\n+                        Ok(ty) => ty.subst_spanned(tcx, substs, Some(span)),\n+                        Err(ErrorReported) => tcx.types.err\n+                    }\n                 }\n             } else {\n                 // We've already errored above about the mismatch.\n@@ -954,19 +958,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                     Err(ErrorReported) => return (tcx.types.err, Def::Err),\n                 }\n             }\n-            (&ty::TyParam(_), Def::SelfTy(Some(trait_did), None)) => {\n-                let trait_node_id = tcx.hir.as_local_node_id(trait_did).unwrap();\n-                match self.find_bound_for_assoc_item(trait_node_id,\n-                                                     keywords::SelfType.name(),\n-                                                     assoc_name,\n-                                                     span) {\n-                    Ok(bound) => bound,\n-                    Err(ErrorReported) => return (tcx.types.err, Def::Err),\n-                }\n-            }\n+            (&ty::TyParam(_), Def::SelfTy(Some(param_did), None)) |\n             (&ty::TyParam(_), Def::TyParam(param_did)) => {\n                 let param_node_id = tcx.hir.as_local_node_id(param_did).unwrap();\n-                let param_name = tcx.type_parameter_def(param_node_id).name;\n+                let param_name = ::ty_param_name(tcx, param_node_id);\n                 match self.find_bound_for_assoc_item(param_node_id,\n                                                      param_name,\n                                                      assoc_name,\n@@ -1063,21 +1058,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 tcx.prohibit_type_params(&path.segments);\n \n                 let node_id = tcx.hir.as_local_node_id(did).unwrap();\n-                let param = tcx.ty_param_defs.borrow().get(&node_id)\n-                               .map(ty::ParamTy::for_def);\n-                if let Some(p) = param {\n-                    p.to_ty(tcx)\n-                } else {\n-                    // Only while computing defaults of earlier type\n-                    // parameters can a type parameter be missing its def.\n-                    struct_span_err!(tcx.sess, span, E0128,\n-                                     \"type parameters with a default cannot use \\\n-                                      forward declared identifiers\")\n-                        .span_label(span, &format!(\"defaulted type parameters \\\n-                                                    cannot be forward declared\"))\n-                        .emit();\n-                    tcx.types.err\n-                }\n+                let item_def_id = tcx.hir.local_def_id(::ty_param_owner(tcx, node_id));\n+                let index = match self.get_generics(span, item_def_id) {\n+                    Ok(generics) => {\n+                        generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index]\n+                    }\n+                    Err(ErrorReported) => return tcx.types.err\n+                };\n+                tcx.mk_param(index, ::ty_param_name(tcx, node_id))\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type).\n@@ -1510,7 +1498,7 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n fn check_type_argument_count(tcx: TyCtxt, span: Span, supplied: usize,\n                              ty_param_defs: &[ty::TypeParameterDef]) {\n     let accepted = ty_param_defs.len();\n-    let required = ty_param_defs.iter().take_while(|x| x.default.is_none()) .count();\n+    let required = ty_param_defs.iter().take_while(|x| !x.has_default).count();\n     if supplied < required {\n         let expected = if required < accepted {\n             \"expected at least\""}, {"sha": "bdeb7165356559a8048b2cca0f4b49f2fc3a04e7", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -386,8 +386,8 @@ fn compare_predicate_entailment<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn check_region_bounds_on_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                                 span: Span,\n                                                 impl_m: &ty::AssociatedItem,\n-                                                trait_generics: &ty::Generics<'tcx>,\n-                                                impl_generics: &ty::Generics<'tcx>,\n+                                                trait_generics: &ty::Generics,\n+                                                impl_generics: &ty::Generics,\n                                                 trait_to_skol_substs: &Substs<'tcx>,\n                                                 impl_to_skol_substs: &Substs<'tcx>)\n                                                 -> Result<(), ErrorReported> {"}, {"sha": "60805625b7b321d66138566869e80478ad9f9f17", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -1360,7 +1360,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn get_generics(&self, _: Span, id: DefId)\n-                    -> Result<&'tcx ty::Generics<'tcx>, ErrorReported>\n+                    -> Result<&'tcx ty::Generics, ErrorReported>\n     {\n         Ok(self.tcx().item_generics(id))\n     }\n@@ -1390,14 +1390,17 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n                                  node_id: ast::NodeId)\n                                  -> Result<Vec<ty::PolyTraitRef<'tcx>>, ErrorReported>\n     {\n-        let def = self.tcx.type_parameter_def(node_id);\n+        let tcx = self.tcx;\n+        let item_def_id = tcx.hir.local_def_id(::ty_param_owner(tcx, node_id));\n+        let generics = tcx.item_generics(item_def_id);\n+        let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index];\n         let r = self.parameter_environment\n                                   .caller_bounds\n                                   .iter()\n                                   .filter_map(|predicate| {\n                                       match *predicate {\n                                           ty::Predicate::Trait(ref data) => {\n-                                              if data.0.self_ty().is_param(def.index) {\n+                                              if data.0.self_ty().is_param(index) {\n                                                   Some(data.to_poly_trait_ref())\n                                               } else {\n                                                   None\n@@ -1426,7 +1429,7 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn ty_infer_for_def(&self,\n-                        ty_param_def: &ty::TypeParameterDef<'tcx>,\n+                        ty_param_def: &ty::TypeParameterDef,\n                         substs: &[Kind<'tcx>],\n                         span: Span) -> Ty<'tcx> {\n         self.type_var_for_def(span, ty_param_def, substs)\n@@ -4423,8 +4426,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             if let Some(ast_ty) = types.get(i) {\n                 // A provided type parameter.\n                 self.to_ty(ast_ty)\n-            } else if let (false, Some(default)) = (infer_types, def.default) {\n+            } else if !infer_types && def.has_default {\n                 // No type parameter provided, but a default exists.\n+                let default = self.tcx.item_type(def.def_id);\n                 default.subst_spanned(self.tcx, substs, Some(span))\n             } else {\n                 // No type parameters were provided, we can infer all.\n@@ -4537,9 +4541,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 &generics.types\n             }\n         });\n-        let required_len = type_defs.iter()\n-                                    .take_while(|d| d.default.is_none())\n-                                    .count();\n+        let required_len = type_defs.iter().take_while(|d| !d.has_default).count();\n         if types.len() > type_defs.len() {\n             let span = types[type_defs.len()].span;\n             let expected_text = count_type_params(type_defs.len());"}, {"sha": "d168f5d42410548fa96b70fa1881e1e8ba823088", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 79, "deletions": 78, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -62,6 +62,7 @@ use lint;\n use constrained_type_params as ctp;\n use middle::lang_items::SizedTraitLangItem;\n use middle::const_val::ConstVal;\n+use middle::resolve_lifetime as rl;\n use rustc_const_eval::EvalHint::UncheckedExprHint;\n use rustc_const_eval::{ConstContext, report_const_eval_err};\n use rustc::ty::subst::Substs;\n@@ -76,6 +77,7 @@ use CrateCtxt;\n use rustc_const_math::ConstInt;\n \n use std::cell::RefCell;\n+use std::collections::BTreeMap;\n \n use syntax::{abi, ast, attr};\n use syntax::symbol::{Symbol, keywords};\n@@ -186,6 +188,16 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n         intravisit::walk_item(self, item);\n     }\n \n+    fn visit_generics(&mut self, generics: &'tcx hir::Generics) {\n+        for param in &generics.ty_params {\n+            if param.default.is_some() {\n+                let def_id = self.ccx.tcx.hir.local_def_id(param.id);\n+                type_of_def_id(self.ccx, def_id);\n+            }\n+        }\n+        intravisit::walk_generics(self, generics);\n+    }\n+\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if let hir::ExprClosure(..) = expr.node {\n             let def_id = self.ccx.tcx.hir.local_def_id(expr.id);\n@@ -277,11 +289,10 @@ impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n                              tcx.item_path_str(def_id)));\n             }\n             AstConvRequest::GetTypeParameterBounds(id) => {\n-                let def = tcx.type_parameter_def(id);\n                 err.note(\n                     &format!(\"the cycle begins when computing the bounds \\\n                               for type parameter `{}`...\",\n-                             def.name));\n+                             ::ty_param_name(tcx, id)));\n             }\n         }\n \n@@ -300,11 +311,10 @@ impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n                                  tcx.item_path_str(def_id)));\n                 }\n                 AstConvRequest::GetTypeParameterBounds(id) => {\n-                    let def = tcx.type_parameter_def(id);\n                     err.note(\n                         &format!(\"...which then requires computing the bounds \\\n                                   for type parameter `{}`...\",\n-                                 def.name));\n+                                 ::ty_param_name(tcx, id)));\n                 }\n             }\n         }\n@@ -324,11 +334,10 @@ impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n                              tcx.item_path_str(def_id)));\n             }\n             AstConvRequest::GetTypeParameterBounds(id) => {\n-                let def = tcx.type_parameter_def(id);\n                 err.note(\n                     &format!(\"...which then again requires computing the bounds \\\n                               for type parameter `{}`, completing the cycle.\",\n-                             def.name));\n+                             ::ty_param_name(tcx, id)));\n             }\n         }\n         err.emit();\n@@ -385,7 +394,7 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n     }\n \n     fn get_generics(&self, span: Span, id: DefId)\n-                    -> Result<&'tcx ty::Generics<'tcx>, ErrorReported>\n+                    -> Result<&'tcx ty::Generics, ErrorReported>\n     {\n         self.ccx.cycle_check(span, AstConvRequest::GetGenerics(id), || {\n             Ok(generics_of_def_id(self.ccx, id))\n@@ -531,20 +540,23 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n                                  node_id: ast::NodeId)\n                                  -> Vec<ty::Predicate<'tcx>>\n     {\n-        let def = astconv.tcx().type_parameter_def(node_id);\n+        let tcx = astconv.tcx();\n+        let item_def_id = tcx.hir.local_def_id(::ty_param_owner(tcx, node_id));\n+        let generics = tcx.item_generics(item_def_id);\n+        let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index];\n \n         let mut results = self.parent.map_or(vec![], |def_id| {\n-            let parent = astconv.tcx().item_predicates(def_id);\n+            let parent = tcx.item_predicates(def_id);\n             parent.get_type_parameter_bounds(astconv, span, node_id)\n         });\n \n         results.extend(self.predicates.iter().filter(|predicate| {\n             match **predicate {\n                 ty::Predicate::Trait(ref data) => {\n-                    data.skip_binder().self_ty().is_param(def.index)\n+                    data.skip_binder().self_ty().is_param(index)\n                 }\n                 ty::Predicate::TypeOutlives(ref data) => {\n-                    data.skip_binder().0.is_param(def.index)\n+                    data.skip_binder().0.is_param(index)\n                 }\n                 ty::Predicate::Equate(..) |\n                 ty::Predicate::RegionOutlives(..) |\n@@ -568,16 +580,23 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for ty::GenericPredicates<'tcx> {\n impl<'tcx> GetTypeParameterBounds<'tcx> for hir::Generics {\n     fn get_type_parameter_bounds(&self,\n                                  astconv: &AstConv<'tcx, 'tcx>,\n-                                 _: Span,\n+                                 span: Span,\n                                  node_id: ast::NodeId)\n                                  -> Vec<ty::Predicate<'tcx>>\n     {\n         // In the AST, bounds can derive from two places. Either\n         // written inline like `<T:Foo>` or in a where clause like\n         // `where T:Foo`.\n \n-        let def = astconv.tcx().type_parameter_def(node_id);\n-        let ty = astconv.tcx().mk_param_from_def(&def);\n+        let tcx = astconv.tcx();\n+        let item_def_id = tcx.hir.local_def_id(::ty_param_owner(tcx, node_id));\n+        let index = match astconv.get_generics(span, item_def_id) {\n+            Ok(generics) => {\n+                generics.type_param_to_index[&tcx.hir.local_def_id(node_id).index]\n+            }\n+            Err(ErrorReported) => return vec![]\n+        };\n+        let ty = tcx.mk_param(index, ::ty_param_name(tcx, node_id));\n \n         let from_ty_params =\n             self.ty_params\n@@ -594,7 +613,7 @@ impl<'tcx> GetTypeParameterBounds<'tcx> for hir::Generics {\n                     hir::WherePredicate::BoundPredicate(ref bp) => Some(bp),\n                     _ => None\n                 })\n-                .filter(|bp| is_param(astconv.tcx(), &bp.bounded_ty, node_id))\n+                .filter(|bp| is_param(tcx, &bp.bounded_ty, node_id))\n                 .flat_map(|bp| bp.bounds.iter())\n                 .flat_map(|b| predicates_from_bound(astconv, ty, b));\n \n@@ -625,7 +644,7 @@ fn is_param<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n \n fn convert_field<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                           struct_generics: &'tcx ty::Generics<'tcx>,\n+                           struct_generics: &'tcx ty::Generics,\n                            struct_predicates: &ty::GenericPredicates<'tcx>,\n                            field: &hir::StructField,\n                            ty_f: &'tcx ty::FieldDef)\n@@ -938,7 +957,7 @@ fn convert_variant_ctor<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         def: &'tcx ty::AdtDef,\n                                         ty: Ty<'tcx>,\n-                                        generics: &'tcx ty::Generics<'tcx>,\n+                                        generics: &'tcx ty::Generics,\n                                         predicates: ty::GenericPredicates<'tcx>,\n                                         variants: &[hir::Variant]) {\n     // fill the field types\n@@ -1325,7 +1344,7 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &hir::Item)\n \n fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                 def_id: DefId)\n-                                -> &'tcx ty::Generics<'tcx> {\n+                                -> &'tcx ty::Generics {\n     let tcx = ccx.tcx;\n     let node_id = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n         id\n@@ -1402,18 +1421,14 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         // the node id for the Self type parameter.\n                         let param_id = item.id;\n \n-                        let parent = ccx.tcx.hir.get_parent(param_id);\n-\n-                        let def = ty::TypeParameterDef {\n+                        opt_self = Some(ty::TypeParameterDef {\n                             index: 0,\n                             name: keywords::SelfType.name(),\n                             def_id: tcx.hir.local_def_id(param_id),\n-                            default_def_id: tcx.hir.local_def_id(parent),\n-                            default: None,\n+                            has_default: false,\n+                            object_lifetime_default: rl::Set1::Empty,\n                             pure_wrt_drop: false,\n-                        };\n-                        tcx.ty_param_defs.borrow_mut().insert(param_id, def.clone());\n-                        opt_self = Some(def);\n+                        });\n \n                         allow_defaults = true;\n                         generics\n@@ -1459,11 +1474,36 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             }\n         }).collect::<Vec<_>>();\n \n+        let object_lifetime_defaults =\n+            tcx.named_region_map.object_lifetime_defaults.get(&node_id);\n+\n         // Now create the real type parameters.\n         let type_start = own_start + regions.len() as u32;\n         let types = ast_generics.ty_params.iter().enumerate().map(|(i, p)| {\n-            let i = type_start + i as u32;\n-            get_or_create_type_parameter_def(ccx, i, p, allow_defaults)\n+            if p.name == keywords::SelfType.name() {\n+                span_bug!(p.span, \"`Self` should not be the name of a regular parameter\");\n+            }\n+\n+            if !allow_defaults && p.default.is_some() {\n+                if !tcx.sess.features.borrow().default_type_parameter_fallback {\n+                    tcx.sess.add_lint(\n+                        lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n+                        p.id,\n+                        p.span,\n+                        format!(\"defaults for type parameters are only allowed in `struct`, \\\n+                                 `enum`, `type`, or `trait` definitions.\"));\n+                }\n+            }\n+\n+            ty::TypeParameterDef {\n+                index: type_start + i as u32,\n+                name: p.name,\n+                def_id: tcx.hir.local_def_id(p.id),\n+                has_default: p.default.is_some(),\n+                object_lifetime_default:\n+                    object_lifetime_defaults.map_or(rl::Set1::Empty, |o| o[i]),\n+                pure_wrt_drop: p.pure_wrt_drop,\n+            }\n         });\n         let mut types: Vec<_> = opt_self.into_iter().chain(types).collect();\n \n@@ -1476,19 +1516,25 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     index: type_start + i as u32,\n                     name: Symbol::intern(\"<upvar>\"),\n                     def_id: def_id,\n-                    default_def_id: parent_def_id.unwrap(),\n-                    default: None,\n+                    has_default: false,\n+                    object_lifetime_default: rl::Set1::Empty,\n                     pure_wrt_drop: false,\n                }));\n             });\n         }\n \n+        let mut type_param_to_index = BTreeMap::new();\n+        for param in &types {\n+            type_param_to_index.insert(param.def_id.index, param.index);\n+        }\n+\n         tcx.alloc_generics(ty::Generics {\n             parent: parent_def_id,\n             parent_regions: parent_regions,\n             parent_types: parent_types,\n             regions: regions,\n             types: types,\n+            type_param_to_index: type_param_to_index,\n             has_self: has_self || parent_has_self\n         })\n     })\n@@ -1576,6 +1622,9 @@ fn type_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                     |def, _| ccx.tcx.mk_param_from_def(def)\n                 ))\n             }\n+            NodeTyParam(&hir::TyParam { default: Some(ref ty), .. }) => {\n+                ccx.icx(&()).to_ty(ty)\n+            }\n             x => {\n                 bug!(\"unexpected sort of node in type_of_def_id(): {:?}\", x);\n             }\n@@ -1808,54 +1857,6 @@ fn ty_generic_predicates<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     }\n }\n \n-fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n-                                             index: u32,\n-                                             param: &hir::TyParam,\n-                                             allow_defaults: bool)\n-                                             -> ty::TypeParameterDef<'tcx>\n-{\n-    let tcx = ccx.tcx;\n-    match tcx.ty_param_defs.borrow().get(&param.id) {\n-        Some(d) => { return d.clone(); }\n-        None => { }\n-    }\n-\n-    let default =\n-        param.default.as_ref().map(|def| ccx.icx(&()).to_ty(def));\n-\n-    let parent = tcx.hir.get_parent(param.id);\n-\n-    if !allow_defaults && default.is_some() {\n-        if !tcx.sess.features.borrow().default_type_parameter_fallback {\n-            tcx.sess.add_lint(\n-                lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                param.id,\n-                param.span,\n-                format!(\"defaults for type parameters are only allowed in `struct`, \\\n-                         `enum`, `type`, or `trait` definitions.\"));\n-        }\n-    }\n-\n-    let def = ty::TypeParameterDef {\n-        index: index,\n-        name: param.name,\n-        def_id: ccx.tcx.hir.local_def_id(param.id),\n-        default_def_id: ccx.tcx.hir.local_def_id(parent),\n-        default: default,\n-        pure_wrt_drop: param.pure_wrt_drop,\n-    };\n-\n-    if def.name == keywords::SelfType.name() {\n-        span_bug!(param.span, \"`Self` should not be the name of a regular parameter\");\n-    }\n-\n-    tcx.ty_param_defs.borrow_mut().insert(param.id, def.clone());\n-\n-    debug!(\"get_or_create_type_parameter_def: def for type param: {:?}\", def);\n-\n-    def\n-}\n-\n pub enum SizedByDefault { Yes, No, }\n \n /// Translate the AST's notion of ty param bounds (which are an enum consisting of a newtyped Ty or"}, {"sha": "1ff6944d98dd35c2ebfada46a230bdcdc1cee4cf", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -1701,33 +1701,6 @@ struct Foo {\n ```\n \"##,\n \n-E0128: r##\"\n-Type parameter defaults can only use parameters that occur before them.\n-Erroneous code example:\n-\n-```compile_fail,E0128\n-struct Foo<T=U, U=()> {\n-    field1: T,\n-    filed2: U,\n-}\n-// error: type parameters with a default cannot use forward declared\n-// identifiers\n-```\n-\n-Since type parameters are evaluated in-order, you may be able to fix this issue\n-by doing:\n-\n-```\n-struct Foo<U=(), T=U> {\n-    field1: T,\n-    filed2: U,\n-}\n-```\n-\n-Please also verify that this wasn't because of a name-clash and rename the type\n-parameter if so.\n-\"##,\n-\n E0131: r##\"\n It is not possible to define `main` with type parameters, or even with function\n parameters. When `main` is present, it must take no arguments and return `()`."}, {"sha": "03175782c38fda5b8ffd575738a17f392a3fc251", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -116,6 +116,7 @@ use util::common::time;\n \n use syntax::ast;\n use syntax::abi::Abi;\n+use syntax::symbol::keywords;\n use syntax_pos::Span;\n \n use std::iter;\n@@ -193,6 +194,30 @@ fn require_same_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     })\n }\n \n+fn ty_param_owner(tcx: TyCtxt, id: ast::NodeId) -> ast::NodeId {\n+    match tcx.hir.get(id) {\n+        hir::map::NodeItem(&hir::Item { node: hir::ItemTrait(..), .. }) => id,\n+        hir::map::NodeTyParam(_) => tcx.hir.get_parent_node(id),\n+        _ => {\n+            bug!(\"ty_param_owner: {} not a type parameter\",\n+                 tcx.hir.node_to_string(id))\n+        }\n+    }\n+}\n+\n+fn ty_param_name(tcx: TyCtxt, id: ast::NodeId) -> ast::Name {\n+    match tcx.hir.get(id) {\n+        hir::map::NodeItem(&hir::Item { node: hir::ItemTrait(..), .. }) => {\n+            keywords::SelfType.name()\n+        }\n+        hir::map::NodeTyParam(tp) => tp.name,\n+        _ => {\n+            bug!(\"ty_param_name: {} not a type parameter\",\n+                 tcx.hir.node_to_string(id))\n+        }\n+    }\n+}\n+\n fn check_main_fn_ty(ccx: &CrateCtxt,\n                     main_id: ast::NodeId,\n                     main_span: Span) {"}, {"sha": "b22db94079891c63a951c939bcdb173548a875b7", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -279,7 +279,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     }\n \n     fn add_constraints_from_trait_ref(&mut self,\n-                                      generics: &ty::Generics<'tcx>,\n+                                      generics: &ty::Generics,\n                                       trait_ref: ty::TraitRef<'tcx>,\n                                       variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_trait_ref: trait_ref={:?} variance={:?}\",\n@@ -305,7 +305,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// in a context with the generics defined in `generics` and\n     /// ambient variance `variance`\n     fn add_constraints_from_ty(&mut self,\n-                               generics: &ty::Generics<'tcx>,\n+                               generics: &ty::Generics,\n                                ty: Ty<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         debug!(\"add_constraints_from_ty(ty={:?}, variance={:?})\",\n@@ -433,9 +433,9 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a nominal type (enum, struct,\n     /// object, etc) appearing in a context with ambient variance `variance`\n     fn add_constraints_from_substs(&mut self,\n-                                   generics: &ty::Generics<'tcx>,\n+                                   generics: &ty::Generics,\n                                    def_id: DefId,\n-                                   type_param_defs: &[ty::TypeParameterDef<'tcx>],\n+                                   type_param_defs: &[ty::TypeParameterDef],\n                                    region_param_defs: &[ty::RegionParameterDef],\n                                    substs: &Substs<'tcx>,\n                                    variance: VarianceTermPtr<'a>) {\n@@ -465,7 +465,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig(&mut self,\n-                                generics: &ty::Generics<'tcx>,\n+                                generics: &ty::Generics,\n                                 sig: &ty::PolyFnSig<'tcx>,\n                                 variance: VarianceTermPtr<'a>) {\n         let contra = self.contravariant(variance);\n@@ -478,7 +478,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a region appearing in a\n     /// context with ambient variance `variance`\n     fn add_constraints_from_region(&mut self,\n-                                   generics: &ty::Generics<'tcx>,\n+                                   generics: &ty::Generics,\n                                    region: &'tcx ty::Region,\n                                    variance: VarianceTermPtr<'a>) {\n         match *region {\n@@ -518,7 +518,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n     /// Adds constraints appropriate for a mutability-type pair\n     /// appearing in a context with ambient variance `variance`\n     fn add_constraints_from_mt(&mut self,\n-                               generics: &ty::Generics<'tcx>,\n+                               generics: &ty::Generics,\n                                mt: &ty::TypeAndMut<'tcx>,\n                                variance: VarianceTermPtr<'a>) {\n         match mt.mutbl {"}, {"sha": "dc09fc2b8d3cc6a59fcf8866c9ec0d3ed28ea153", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -596,14 +596,18 @@ impl Clean<TyParam> for hir::TyParam {\n     }\n }\n \n-impl<'tcx> Clean<TyParam> for ty::TypeParameterDef<'tcx> {\n+impl<'tcx> Clean<TyParam> for ty::TypeParameterDef {\n     fn clean(&self, cx: &DocContext) -> TyParam {\n         cx.renderinfo.borrow_mut().external_typarams.insert(self.def_id, self.name.clean(cx));\n         TyParam {\n             name: self.name.clean(cx),\n             did: self.def_id,\n             bounds: vec![], // these are filled in from the where-clauses\n-            default: self.default.clean(cx),\n+            default: if self.has_default {\n+                Some(cx.tcx.item_type(self.def_id).clean(cx))\n+            } else {\n+                None\n+            }\n         }\n     }\n }\n@@ -965,7 +969,7 @@ impl Clean<Generics> for hir::Generics {\n     }\n }\n \n-impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics<'tcx>,\n+impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n                                     &'a ty::GenericPredicates<'tcx>) {\n     fn clean(&self, cx: &DocContext) -> Generics {\n         use self::WherePredicate as WP;"}, {"sha": "013632141dee69b27baf174a1abfe5a62b9fb973", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 27, "deletions": 22, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -68,6 +68,9 @@ pub trait Visitor<'ast>: Sized {\n     fn visit_expr_post(&mut self, _ex: &'ast Expr) { }\n     fn visit_ty(&mut self, t: &'ast Ty) { walk_ty(self, t) }\n     fn visit_generics(&mut self, g: &'ast Generics) { walk_generics(self, g) }\n+    fn visit_where_predicate(&mut self, p: &'ast WherePredicate) {\n+        walk_where_predicate(self, p)\n+    }\n     fn visit_fn(&mut self, fk: FnKind<'ast>, fd: &'ast FnDecl, s: Span, _: NodeId) {\n         walk_fn(self, fk, fd, s)\n     }\n@@ -488,28 +491,30 @@ pub fn walk_generics<'a, V: Visitor<'a>>(visitor: &mut V, generics: &'a Generics\n         walk_list!(visitor, visit_attribute, &*param.attrs);\n     }\n     walk_list!(visitor, visit_lifetime_def, &generics.lifetimes);\n-    for predicate in &generics.where_clause.predicates {\n-        match *predicate {\n-            WherePredicate::BoundPredicate(WhereBoundPredicate{ref bounded_ty,\n-                                                               ref bounds,\n-                                                               ref bound_lifetimes,\n-                                                               ..}) => {\n-                visitor.visit_ty(bounded_ty);\n-                walk_list!(visitor, visit_ty_param_bound, bounds);\n-                walk_list!(visitor, visit_lifetime_def, bound_lifetimes);\n-            }\n-            WherePredicate::RegionPredicate(WhereRegionPredicate{ref lifetime,\n-                                                                 ref bounds,\n-                                                                 ..}) => {\n-                visitor.visit_lifetime(lifetime);\n-                walk_list!(visitor, visit_lifetime, bounds);\n-            }\n-            WherePredicate::EqPredicate(WhereEqPredicate{ref lhs_ty,\n-                                                         ref rhs_ty,\n-                                                         ..}) => {\n-                visitor.visit_ty(lhs_ty);\n-                visitor.visit_ty(rhs_ty);\n-            }\n+    walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n+}\n+\n+pub fn walk_where_predicate<'a, V: Visitor<'a>>(visitor: &mut V, predicate: &'a WherePredicate) {\n+    match *predicate {\n+        WherePredicate::BoundPredicate(WhereBoundPredicate{ref bounded_ty,\n+                                                           ref bounds,\n+                                                           ref bound_lifetimes,\n+                                                           ..}) => {\n+            visitor.visit_ty(bounded_ty);\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+            walk_list!(visitor, visit_lifetime_def, bound_lifetimes);\n+        }\n+        WherePredicate::RegionPredicate(WhereRegionPredicate{ref lifetime,\n+                                                             ref bounds,\n+                                                             ..}) => {\n+            visitor.visit_lifetime(lifetime);\n+            walk_list!(visitor, visit_lifetime, bounds);\n+        }\n+        WherePredicate::EqPredicate(WhereEqPredicate{ref lhs_ty,\n+                                                     ref rhs_ty,\n+                                                     ..}) => {\n+            visitor.visit_ty(lhs_ty);\n+            visitor.visit_ty(rhs_ty);\n         }\n     }\n }"}, {"sha": "6825572b26c83cfa83eb9b154e4b2d2275fb1f41", "filename": "src/test/compile-fail/cycle-trait-default-type-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcycle-trait-default-type-trait.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -13,6 +13,7 @@\n \n trait Foo<X = Box<Foo>> {\n     //~^ ERROR unsupported cyclic reference\n+    //~| ERROR unsupported cyclic reference\n }\n \n fn main() { }"}, {"sha": "13b7753082c61d3c8915b5c75acbe58fd64ca06a", "filename": "src/test/compile-fail/generic-non-trailing-defaults.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -10,10 +10,10 @@\n \n struct Heap;\n \n-struct Vec<A = Heap, T>;\n+struct Vec<A = Heap, T>(A, T);\n //~^ ERROR type parameters with a default must be trailing\n \n-struct Foo<A, B = Vec<C>, C>;\n+struct Foo<A, B = Vec<C>, C>(A, B, C);\n //~^ ERROR type parameters with a default must be trailing\n //~| ERROR type parameters with a default cannot use forward declared identifiers\n "}, {"sha": "bfa6af0da433bc2b2b2c9a638e7cf3debc0707bb", "filename": "src/test/compile-fail/generic-type-params-forward-mention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Ensure that we get an error and not an ICE for this problematic case.\n-struct Foo<T = Option<U>, U = bool>;\n+struct Foo<T = Option<U>, U = bool>(T, U);\n //~^ ERROR type parameters with a default cannot use forward declared identifiers\n fn main() {\n     let x: Foo;"}, {"sha": "feab04531b7e11bca3b4738a7de5a19c6e1d8b71", "filename": "src/test/compile-fail/issue-18183.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18183.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub struct Foo<Bar=Bar>; //~ ERROR E0128\n-                         //~| NOTE defaulted type parameters cannot be forward declared\n+pub struct Foo<Bar=Bar>(Bar); //~ ERROR E0128\n+                              //~| NOTE defaulted type parameters cannot be forward declared\n pub struct Baz(Foo);\n fn main() {}"}, {"sha": "ab9ac0398259950e5e594ec06fd9bb3c09304efc", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8d01ea4c76f6f3cb4f71dbff261355f825d12bb/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=e8d01ea4c76f6f3cb4f71dbff261355f825d12bb", "patch": "@@ -15,7 +15,7 @@ impl Tr<Self> for S {} // OK\n \n // FIXME: `Self` cannot be used in bounds because it depends on bounds itself.\n impl<T: Tr<Self>> Tr<T> for S {} //~ ERROR `Self` type is used before it's determined\n-impl<T = Self> Tr<T> for S {} //~ ERROR `Self` type is used before it's determined\n+impl<T = Self> Tr<T> for S {}\n impl Tr for S where Self: Copy {} //~ ERROR `Self` type is used before it's determined\n impl Tr for S where S<Self>: Copy {} //~ ERROR `Self` type is used before it's determined\n impl Tr for S where Self::Assoc: Copy {} //~ ERROR `Self` type is used before it's determined"}]}