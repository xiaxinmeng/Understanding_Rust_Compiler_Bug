{"sha": "28ebec516015eb0b9cef05e5da0685a18620b105", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4ZWJlYzUxNjAxNWViMGI5Y2VmMDVlNWRhMDY4NWExODYyMGIxMDU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-02-26T13:59:49Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2014-03-12T07:02:38Z"}, "message": "Introduce Scope<'a> shorthand for &'a ScopeChain<'a>.", "tree": {"sha": "4e64eb8485e72492a32a73198f0e30854e68755e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e64eb8485e72492a32a73198f0e30854e68755e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ebec516015eb0b9cef05e5da0685a18620b105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ebec516015eb0b9cef05e5da0685a18620b105", "html_url": "https://github.com/rust-lang/rust/commit/28ebec516015eb0b9cef05e5da0685a18620b105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ebec516015eb0b9cef05e5da0685a18620b105/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "url": "https://api.github.com/repos/rust-lang/rust/commits/189c0085d19c2cbd8e3b6ca8274e2cab60aad515", "html_url": "https://github.com/rust-lang/rust/commit/189c0085d19c2cbd8e3b6ca8274e2cab60aad515"}], "stats": {"total": 24, "additions": 13, "deletions": 11}, "files": [{"sha": "90069cf899bb68f42e4936d2c003543d78aecbfe", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/28ebec516015eb0b9cef05e5da0685a18620b105/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ebec516015eb0b9cef05e5da0685a18620b105/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=28ebec516015eb0b9cef05e5da0685a18620b105", "patch": "@@ -40,11 +40,13 @@ struct LifetimeContext {\n \n enum ScopeChain<'a> {\n     ItemScope(&'a OptVec<ast::Lifetime>),\n-    FnScope(ast::NodeId, &'a OptVec<ast::Lifetime>, &'a ScopeChain<'a>),\n-    BlockScope(ast::NodeId, &'a ScopeChain<'a>),\n+    FnScope(ast::NodeId, &'a OptVec<ast::Lifetime>, Scope<'a>),\n+    BlockScope(ast::NodeId, Scope<'a>),\n     RootScope\n }\n \n+type Scope<'a> = &'a ScopeChain<'a>;\n+\n pub fn krate(sess: session::Session, krate: &ast::Crate)\n              -> @RefCell<NamedRegionMap> {\n     let mut ctxt = LifetimeContext {\n@@ -56,10 +58,10 @@ pub fn krate(sess: session::Session, krate: &ast::Crate)\n     ctxt.named_region_map\n }\n \n-impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n+impl<'a> Visitor<Scope<'a>> for LifetimeContext {\n     fn visit_item(&mut self,\n                   item: &ast::Item,\n-                  _: &'a ScopeChain<'a>) {\n+                  _: Scope<'a>) {\n         let scope = match item.node {\n             ast::ItemFn(..) | // fn lifetimes get added in visit_fn below\n             ast::ItemMod(..) |\n@@ -84,7 +86,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n \n     fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n                 b: &ast::Block, s: Span, n: ast::NodeId,\n-                scope: &'a ScopeChain<'a>) {\n+                scope: Scope<'a>) {\n         match *fk {\n             visit::FkItemFn(_, generics, _, _) |\n             visit::FkMethod(_, generics, _) => {\n@@ -101,7 +103,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n     }\n \n     fn visit_ty(&mut self, ty: &ast::Ty,\n-                scope: &'a ScopeChain<'a>) {\n+                scope: Scope<'a>) {\n         match ty.node {\n             ast::TyClosure(closure) => {\n                 let scope1 = FnScope(ty.id, &closure.lifetimes, scope);\n@@ -125,7 +127,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n \n     fn visit_ty_method(&mut self,\n                        m: &ast::TypeMethod,\n-                       scope: &'a ScopeChain<'a>) {\n+                       scope: Scope<'a>) {\n         let scope1 = FnScope(m.id, &m.generics.lifetimes, scope);\n         self.check_lifetime_names(&m.generics.lifetimes);\n         debug!(\"pushing fn scope id={} due to ty_method\", m.id);\n@@ -135,7 +137,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n \n     fn visit_block(&mut self,\n                    b: &ast::Block,\n-                   scope: &'a ScopeChain<'a>) {\n+                   scope: Scope<'a>) {\n         let scope1 = BlockScope(b.id, scope);\n         debug!(\"pushing block scope {}\", b.id);\n         visit::walk_block(self, b, &scope1);\n@@ -144,7 +146,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n \n     fn visit_lifetime_ref(&mut self,\n                           lifetime_ref: &ast::Lifetime,\n-                          scope: &'a ScopeChain<'a>) {\n+                          scope: Scope<'a>) {\n         if lifetime_ref.name == special_idents::statik.name {\n             self.insert_lifetime(lifetime_ref, ast::DefStaticRegion);\n             return;\n@@ -156,7 +158,7 @@ impl<'a> Visitor<&'a ScopeChain<'a>> for LifetimeContext {\n impl LifetimeContext {\n     fn resolve_lifetime_ref(&self,\n                             lifetime_ref: &ast::Lifetime,\n-                            scope: &ScopeChain) {\n+                            scope: Scope) {\n         // Walk up the scope chain, tracking the number of fn scopes\n         // that we pass through, until we find a lifetime with the\n         // given name or we run out of scopes. If we encounter a code\n@@ -211,7 +213,7 @@ impl LifetimeContext {\n     fn resolve_free_lifetime_ref(&self,\n                                  scope_id: ast::NodeId,\n                                  lifetime_ref: &ast::Lifetime,\n-                                 scope: &ScopeChain) {\n+                                 scope: Scope) {\n         // Walk up the scope chain, tracking the outermost free scope,\n         // until we encounter a scope that contains the named lifetime\n         // or we run out of scopes."}]}