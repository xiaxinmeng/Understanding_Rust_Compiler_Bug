{"sha": "4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MzZhYmRkNDliMWQwYmE2YjJhODU4YmVlM2E1YTY2NWRlOWQ2ZjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T16:51:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-01T16:51:16Z"}, "message": "Reduce scope of deserialization", "tree": {"sha": "bd71ed664cb86aa8f3a33896a2ee36e11f17cd50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd71ed664cb86aa8f3a33896a2ee36e11f17cd50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "html_url": "https://github.com/rust-lang/rust/commit/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e870cbc23d78f5bc424983b1d9ef945888f9dc49", "url": "https://api.github.com/repos/rust-lang/rust/commits/e870cbc23d78f5bc424983b1d9ef945888f9dc49", "html_url": "https://github.com/rust-lang/rust/commit/e870cbc23d78f5bc424983b1d9ef945888f9dc49"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "c1b6e1ddc382a0db2e84778625a15e09a91e8736", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "patch": "@@ -13,7 +13,6 @@ use cargo_metadata::{BuildScript, CargoOpt, Message, MetadataCommand, PackageId}\n use ra_arena::{Arena, Idx};\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n-use serde::Deserialize;\n \n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n@@ -43,10 +42,8 @@ impl ops::Index<Target> for CargoWorkspace {\n     }\n }\n \n-// TODO: rename to CargoConfig, kill `rename_all`, kill serde dep?\n-#[derive(Deserialize, Clone, Debug, PartialEq, Eq)]\n-#[serde(rename_all = \"camelCase\", default)]\n-pub struct CargoFeatures {\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub struct CargoConfig {\n     /// Do not activate the `default` feature.\n     pub no_default_features: bool,\n \n@@ -61,9 +58,9 @@ pub struct CargoFeatures {\n     pub load_out_dirs_from_check: bool,\n }\n \n-impl Default for CargoFeatures {\n+impl Default for CargoConfig {\n     fn default() -> Self {\n-        CargoFeatures {\n+        CargoConfig {\n             no_default_features: false,\n             all_features: true,\n             features: Vec::new(),\n@@ -142,7 +139,7 @@ impl PackageData {\n impl CargoWorkspace {\n     pub fn from_cargo_metadata(\n         cargo_toml: &Path,\n-        cargo_features: &CargoFeatures,\n+        cargo_features: &CargoConfig,\n     ) -> Result<CargoWorkspace> {\n         let mut meta = MetadataCommand::new();\n         meta.manifest_path(cargo_toml);\n@@ -276,7 +273,7 @@ pub struct ExternResources {\n \n pub fn load_extern_resources(\n     cargo_toml: &Path,\n-    cargo_features: &CargoFeatures,\n+    cargo_features: &CargoConfig,\n ) -> Result<ExternResources> {\n     let mut cmd = Command::new(cargo_binary());\n     cmd.args(&[\"check\", \"--message-format=json\", \"--manifest-path\"]).arg(cargo_toml);\n@@ -294,9 +291,8 @@ pub fn load_extern_resources(\n \n     let mut res = ExternResources::default();\n \n-    let stdout = String::from_utf8(output.stdout)?;\n-    for line in stdout.lines() {\n-        if let Ok(message) = serde_json::from_str::<cargo_metadata::Message>(&line) {\n+    for message in cargo_metadata::parse_messages(output.stdout.as_slice()) {\n+        if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript { package_id, out_dir, .. }) => {\n                     res.out_dirs.insert(package_id, out_dir);"}, {"sha": "dd9c80691f3de78016456d5cc038fbbade75cb36", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "patch": "@@ -19,7 +19,7 @@ use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n pub use crate::{\n-    cargo_workspace::{CargoFeatures, CargoWorkspace, Package, Target, TargetKind},\n+    cargo_workspace::{CargoConfig, CargoWorkspace, Package, Target, TargetKind},\n     json_project::JsonProject,\n     sysroot::Sysroot,\n };\n@@ -78,14 +78,14 @@ impl PackageRoot {\n }\n \n impl ProjectWorkspace {\n-    pub fn discover(path: &Path, cargo_features: &CargoFeatures) -> Result<ProjectWorkspace> {\n+    pub fn discover(path: &Path, cargo_features: &CargoConfig) -> Result<ProjectWorkspace> {\n         ProjectWorkspace::discover_with_sysroot(path, true, cargo_features)\n     }\n \n     pub fn discover_with_sysroot(\n         path: &Path,\n         with_sysroot: bool,\n-        cargo_features: &CargoFeatures,\n+        cargo_features: &CargoConfig,\n     ) -> Result<ProjectWorkspace> {\n         match find_rust_project_json(path) {\n             Some(json_path) => {"}, {"sha": "608f4f67b2c8cbb7ecf6ad4c310cd2bfb26626cc", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "patch": "@@ -4,7 +4,6 @@\n mod args;\n \n use lsp_server::Connection;\n-\n use rust_analyzer::{cli, config::Config, from_json, Result};\n \n use crate::args::HelpPrinted;"}, {"sha": "2c0bde920bef68d5c74e09103aa73e022c7da912", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "patch": "@@ -8,7 +8,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use ra_db::{ExternSourceId, FileId, SourceRootId};\n use ra_ide::{AnalysisChange, AnalysisHost};\n use ra_project_model::{\n-    get_rustc_cfg_options, CargoFeatures, PackageRoot, ProcMacroClient, ProjectWorkspace,\n+    get_rustc_cfg_options, CargoConfig, PackageRoot, ProcMacroClient, ProjectWorkspace,\n };\n use ra_vfs::{RootEntry, Vfs, VfsChange, VfsTask, Watch};\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -29,7 +29,7 @@ pub(crate) fn load_cargo(\n     let root = std::env::current_dir()?.join(root);\n     let ws = ProjectWorkspace::discover(\n         root.as_ref(),\n-        &CargoFeatures { load_out_dirs_from_check, ..Default::default() },\n+        &CargoConfig { load_out_dirs_from_check, ..Default::default() },\n     )?;\n \n     let mut extern_dirs = FxHashSet::default();"}, {"sha": "57372768c43de139c6979304bd8fd8bbad6154c8", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4936abdd49b1d0ba6b2a858bee3a5a665de9d6f3", "patch": "@@ -10,7 +10,7 @@\n use lsp_types::TextDocumentClientCapabilities;\n use ra_flycheck::FlycheckConfig;\n use ra_ide::{CompletionConfig, InlayHintsConfig};\n-use ra_project_model::CargoFeatures;\n+use ra_project_model::CargoConfig;\n use serde::Deserialize;\n \n #[derive(Debug, Clone)]\n@@ -29,7 +29,7 @@ pub struct Config {\n     pub lru_capacity: Option<usize>,\n     pub use_client_watching: bool,\n     pub exclude_globs: Vec<String>,\n-    pub cargo: CargoFeatures,\n+    pub cargo: CargoConfig,\n     pub with_sysroot: bool,\n }\n \n@@ -92,7 +92,7 @@ impl Default for Config {\n             lru_capacity: None,\n             use_client_watching: false,\n             exclude_globs: Vec::new(),\n-            cargo: CargoFeatures::default(),\n+            cargo: CargoConfig::default(),\n             with_sysroot: true,\n         }\n     }"}]}