{"sha": "58d5c69a638c278b893212f7b931e1ab09baeaab", "node_id": "C_kwDOAAsO6NoAKDU4ZDVjNjlhNjM4YzI3OGI4OTMyMTJmN2I5MzFlMWFiMDliYWVhYWI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-01T13:34:29Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-01T13:34:29Z"}, "message": "Fix Expr::MacroStmts using wrong scopes", "tree": {"sha": "fbbbd9396a5d807d7f752d09ebea6d49888b8552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbbbd9396a5d807d7f752d09ebea6d49888b8552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58d5c69a638c278b893212f7b931e1ab09baeaab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58d5c69a638c278b893212f7b931e1ab09baeaab", "html_url": "https://github.com/rust-lang/rust/commit/58d5c69a638c278b893212f7b931e1ab09baeaab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58d5c69a638c278b893212f7b931e1ab09baeaab/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9165e3b3810f7f602edc4977bf032a5cd53378cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/9165e3b3810f7f602edc4977bf032a5cd53378cc", "html_url": "https://github.com/rust-lang/rust/commit/9165e3b3810f7f602edc4977bf032a5cd53378cc"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "f4c390dce26e0520168594430508281406137c3f", "filename": "crates/hir-def/src/body/scope.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/58d5c69a638c278b893212f7b931e1ab09baeaab/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5c69a638c278b893212f7b931e1ab09baeaab/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Fscope.rs?ref=58d5c69a638c278b893212f7b931e1ab09baeaab", "patch": "@@ -145,27 +145,28 @@ fn compute_block_scopes(\n     tail: Option<ExprId>,\n     body: &Body,\n     scopes: &mut ExprScopes,\n-    mut scope: ScopeId,\n+    scope: &mut ScopeId,\n ) {\n     for stmt in statements {\n         match stmt {\n             Statement::Let { pat, initializer, else_branch, .. } => {\n                 if let Some(expr) = initializer {\n-                    compute_expr_scopes(*expr, body, scopes, &mut scope);\n+                    compute_expr_scopes(*expr, body, scopes, scope);\n                 }\n                 if let Some(expr) = else_branch {\n-                    compute_expr_scopes(*expr, body, scopes, &mut scope);\n+                    compute_expr_scopes(*expr, body, scopes, scope);\n                 }\n-                scope = scopes.new_scope(scope);\n-                scopes.add_bindings(body, scope, *pat);\n+\n+                *scope = scopes.new_scope(*scope);\n+                scopes.add_bindings(body, *scope, *pat);\n             }\n             Statement::Expr { expr, .. } => {\n-                compute_expr_scopes(*expr, body, scopes, &mut scope);\n+                compute_expr_scopes(*expr, body, scopes, scope);\n             }\n         }\n     }\n     if let Some(expr) = tail {\n-        compute_expr_scopes(expr, body, scopes, &mut scope);\n+        compute_expr_scopes(expr, body, scopes, scope);\n     }\n }\n \n@@ -176,14 +177,14 @@ fn compute_expr_scopes(expr: ExprId, body: &Body, scopes: &mut ExprScopes, scope\n     scopes.set_scope(expr, *scope);\n     match &body[expr] {\n         Expr::MacroStmts { statements, tail } => {\n-            compute_block_scopes(statements, *tail, body, scopes, *scope);\n+            compute_block_scopes(statements, *tail, body, scopes, scope);\n         }\n         Expr::Block { statements, tail, id, label } => {\n-            let scope = scopes.new_block_scope(*scope, *id, make_label(label));\n+            let mut scope = scopes.new_block_scope(*scope, *id, make_label(label));\n             // Overwrite the old scope for the block expr, so that every block scope can be found\n             // via the block itself (important for blocks that only contain items, no expressions).\n             scopes.set_scope(expr, scope);\n-            compute_block_scopes(statements, *tail, body, scopes, scope);\n+            compute_block_scopes(statements, *tail, body, scopes, &mut scope);\n         }\n         Expr::For { iterable, pat, body: body_expr, label } => {\n             compute_expr_scopes(*iterable, body, scopes, scope);"}, {"sha": "81268f37fd36a6544acf6218f36999ddb9bcf7f6", "filename": "crates/hir-ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58d5c69a638c278b893212f7b931e1ab09baeaab/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58d5c69a638c278b893212f7b931e1ab09baeaab/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fmacros.rs?ref=58d5c69a638c278b893212f7b931e1ab09baeaab", "patch": "@@ -346,8 +346,8 @@ fn recurisve_macro_expanded_in_stmts() {\n             !3..4 'a': i32\n             !5..6 '3': i32\n             196..237 '{     ...= a; }': ()\n-            229..230 'b': {unknown}\n-            233..234 'a': {unknown}\n+            229..230 'b': i32\n+            233..234 'a': i32\n         \"#]],\n     );\n }"}]}