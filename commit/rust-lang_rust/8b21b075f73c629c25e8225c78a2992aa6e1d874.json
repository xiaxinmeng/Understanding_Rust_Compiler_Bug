{"sha": "8b21b075f73c629c25e8225c78a2992aa6e1d874", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMjFiMDc1ZjczYzYyOWMyNWU4MjI1Yzc4YTI5OTJhYTZlMWQ4NzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:21:44Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:21:44Z"}, "message": "Add functions to build raw slices", "tree": {"sha": "ed15409aa1e9be2e22176e144a4fb1ced56108d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed15409aa1e9be2e22176e144a4fb1ced56108d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b21b075f73c629c25e8225c78a2992aa6e1d874", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b21b075f73c629c25e8225c78a2992aa6e1d874", "html_url": "https://github.com/rust-lang/rust/commit/8b21b075f73c629c25e8225c78a2992aa6e1d874", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b21b075f73c629c25e8225c78a2992aa6e1d874/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "605ea9d05c48957a291eec11eb7339788c3140ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/605ea9d05c48957a291eec11eb7339788c3140ed", "html_url": "https://github.com/rust-lang/rust/commit/605ea9d05c48957a291eec11eb7339788c3140ed"}], "stats": {"total": 66, "additions": 50, "deletions": 16}, "files": [{"sha": "ba88fde6ebc97afa70aa3f7eddecafd1b93171ea", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b21b075f73c629c25e8225c78a2992aa6e1d874/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b21b075f73c629c25e8225c78a2992aa6e1d874/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=8b21b075f73c629c25e8225c78a2992aa6e1d874", "patch": "@@ -230,6 +230,53 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n #[rustc_promotable]\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n+#[repr(C)]\n+pub(crate) union Repr<T> {\n+    pub(crate) rust: *const [T],\n+    rust_mut: *mut [T],\n+    pub(crate) raw: FatPtr<T>,\n+}\n+\n+#[repr(C)]\n+pub(crate) struct FatPtr<T> {\n+    data: *const T,\n+    pub(crate) len: usize,\n+}\n+\n+/// Forms a slice from a pointer and a length.\n+///\n+/// The `len` argument is the number of **elements**, not the number of bytes.\n+///\n+/// # Examples\n+///\n+/// ```rust\n+/// #![feature(slice_from_raw_parts)]\n+/// use std::ptr;\n+///\n+/// // create a slice pointer when starting out with a pointer to the first element\n+/// let mut x = [5, 6, 7];\n+/// let ptr = &mut x[0] as *mut _;\n+/// let slice = ptr::slice_from_raw_parts_mut(ptr, 3);\n+/// assert_eq!(unsafe { &*slice }[2], 7);\n+/// ```\n+#[inline]\n+#[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n+pub fn slice_from_raw_parts<T>(data: *const T, len: usize) -> *const [T] {\n+    unsafe { Repr { raw: FatPtr { data, len } }.rust }\n+}\n+\n+/// Performs the same functionality as [`from_raw_parts`], except that a\n+/// mutable slice is returned.\n+///\n+/// See the documentation of [`from_raw_parts`] for more details.\n+///\n+/// [`from_raw_parts`]: ../../std/slice/fn.from_raw_parts.html\n+#[inline]\n+#[unstable(feature = \"slice_from_raw_parts\", reason = \"recently added\", issue = \"36925\")]\n+pub fn slice_from_raw_parts_mut<T>(data: *mut T, len: usize) -> *mut [T] {\n+    unsafe { Repr { raw: FatPtr { data, len } }.rust_mut }\n+}\n+\n /// Swaps the values at two mutable locations of the same type, without\n /// deinitializing either.\n ///"}, {"sha": "af1b20a4c10cfc0539fba0d835bebca40b3994aa", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8b21b075f73c629c25e8225c78a2992aa6e1d874/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b21b075f73c629c25e8225c78a2992aa6e1d874/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=8b21b075f73c629c25e8225c78a2992aa6e1d874", "patch": "@@ -45,19 +45,6 @@ pub mod memchr;\n mod rotate;\n mod sort;\n \n-#[repr(C)]\n-union Repr<'a, T: 'a> {\n-    rust: &'a [T],\n-    rust_mut: &'a mut [T],\n-    raw: FatPtr<T>,\n-}\n-\n-#[repr(C)]\n-struct FatPtr<T> {\n-    data: *const T,\n-    len: usize,\n-}\n-\n //\n // Extension traits\n //\n@@ -78,7 +65,7 @@ impl<T> [T] {\n     #[rustc_const_unstable(feature = \"const_slice_len\")]\n     pub const fn len(&self) -> usize {\n         unsafe {\n-            Repr { rust: self }.raw.len\n+            crate::ptr::Repr { rust: self }.raw.len\n         }\n     }\n \n@@ -5195,7 +5182,7 @@ pub unsafe fn from_raw_parts<'a, T>(data: *const T, len: usize) -> &'a [T] {\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n-    Repr { raw: FatPtr { data, len } }.rust\n+    &*ptr::slice_from_raw_parts(data, len)\n }\n \n /// Performs the same functionality as [`from_raw_parts`], except that a\n@@ -5216,7 +5203,7 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n     debug_assert!(data as usize % mem::align_of::<T>() == 0, \"attempt to create unaligned slice\");\n     debug_assert!(mem::size_of::<T>().saturating_mul(len) <= isize::MAX as usize,\n                   \"attempt to create slice covering half the address space\");\n-    Repr { raw: FatPtr { data, len } }.rust_mut\n+    &mut *ptr::slice_from_raw_parts_mut(data, len)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying)."}]}