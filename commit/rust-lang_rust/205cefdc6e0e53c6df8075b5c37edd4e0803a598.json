{"sha": "205cefdc6e0e53c6df8075b5c37edd4e0803a598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNWNlZmRjNmUwZTUzYzZkZjgwNzViNWMzN2VkZDRlMDgwM2E1OTg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-11T04:34:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-11T04:34:57Z"}, "message": "In typestate, consider infinite loops w/ conts to be infinite\n\nIf a loop { } contains a cont, that doesn't affect whether the entire\nloop diverges. Only breaks affect that. Fix that in typestate.", "tree": {"sha": "d3b2da8e4e0f047ecf8c3b69ecab85fc777c6d5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b2da8e4e0f047ecf8c3b69ecab85fc777c6d5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/205cefdc6e0e53c6df8075b5c37edd4e0803a598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/205cefdc6e0e53c6df8075b5c37edd4e0803a598", "html_url": "https://github.com/rust-lang/rust/commit/205cefdc6e0e53c6df8075b5c37edd4e0803a598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/205cefdc6e0e53c6df8075b5c37edd4e0803a598/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35400e13ada84aeb578e37262a6bf16c48d128d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/35400e13ada84aeb578e37262a6bf16c48d128d7", "html_url": "https://github.com/rust-lang/rust/commit/35400e13ada84aeb578e37262a6bf16c48d128d7"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "22380be87f566e83872cca86012201965446f7a8", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/205cefdc6e0e53c6df8075b5c37edd4e0803a598/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205cefdc6e0e53c6df8075b5c37edd4e0803a598/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=205cefdc6e0e53c6df8075b5c37edd4e0803a598", "patch": "@@ -550,7 +550,9 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n         /* conservative approximation: if a loop contains a break\n            or cont, we assume nothing about the poststate */\n         /* which is still unsound -- see [Break-unsound] */\n-        if has_nonlocal_exits(body) {\n+        if may_break(body) {\n+                /* Only do this if there are *breaks* not conts.\n+                 An infinite loop with conts is still an infinite loop. */\n             ret changed | set_poststate_ann(fcx.ccx, e.id, pres);\n         } else {\n             ret changed | set_poststate_ann(fcx.ccx, e.id,"}, {"sha": "ecc70b6c65486da8de99007893fbf578ae5acc3f", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/205cefdc6e0e53c6df8075b5c37edd4e0803a598/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/205cefdc6e0e53c6df8075b5c37edd4e0803a598/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=205cefdc6e0e53c6df8075b5c37edd4e0803a598", "patch": "@@ -83,6 +83,22 @@ fn has_nonlocal_exits(b: ast::blk) -> bool {\n     ret *has_exits;\n }\n \n+/* FIXME: copy/paste, yuck */\n+fn may_break(b: ast::blk) -> bool {\n+    let has_exits = @mutable false;\n+    fn visit_expr(flag: @mutable bool, e: @ast::expr) {\n+        alt e.node {\n+          ast::expr_break { *flag = true; }\n+          _ { }\n+        }\n+    }\n+    let v =\n+        visit::mk_simple_visitor(@{visit_expr: bind visit_expr(has_exits, _)\n+                                      with *visit::default_simple_visitor()});\n+    visit::visit_block(b, (), v);\n+    ret *has_exits;\n+}\n+\n fn local_rhs_span(l: @ast::local, def: span) -> span {\n     alt l.node.init { some(i) { ret i.expr.span; } _ { ret def; } }\n }"}]}