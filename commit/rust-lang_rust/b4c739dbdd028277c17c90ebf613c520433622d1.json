{"sha": "b4c739dbdd028277c17c90ebf613c520433622d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0YzczOWRiZGQwMjgyNzdjMTdjOTBlYmY2MTNjNTIwNDMzNjIyZDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-12T19:37:41Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-09-18T12:26:49Z"}, "message": "Add missing Eq implementations", "tree": {"sha": "111f31915bb7b904e65e05f0545eb877d0e2e74c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/111f31915bb7b904e65e05f0545eb877d0e2e74c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4c739dbdd028277c17c90ebf613c520433622d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4c739dbdd028277c17c90ebf613c520433622d1", "html_url": "https://github.com/rust-lang/rust/commit/b4c739dbdd028277c17c90ebf613c520433622d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4c739dbdd028277c17c90ebf613c520433622d1/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888970370a3f4b9e8be399869581422c67638d7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/888970370a3f4b9e8be399869581422c67638d7b", "html_url": "https://github.com/rust-lang/rust/commit/888970370a3f4b9e8be399869581422c67638d7b"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "a21d1229d358be89a4c57be74bdc03c48caf5bc2", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -800,7 +800,7 @@ pub fn decode_utf8<I: IntoIterator<Item = u8>>(i: I) -> DecodeUtf8<I::IntoIter>\n \n /// `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n-#[derive(PartialEq, Debug)]\n+#[derive(PartialEq, Eq, Debug)]\n pub struct InvalidSequence(());\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]"}, {"sha": "ec7add9c3759f9d61969d6303aa0d6363186923e", "filename": "src/libcore/fmt/rt/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Frt%2Fv1.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -31,7 +31,7 @@ pub struct FormatSpec {\n }\n \n /// Possible alignments that can be requested as part of a formatting directive.\n-#[derive(Copy, Clone, PartialEq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n pub enum Alignment {\n     /// Indication that contents should be left-aligned.\n     Left,"}, {"sha": "eee3e9250fe816a2778afbc3616cd76c9aba6efa", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -155,13 +155,13 @@ from_str_float_impl!(f64);\n /// [`FromStr`]: ../str/trait.FromStr.html\n /// [`f32`]: ../../std/primitive.f32.html\n /// [`f64`]: ../../std/primitive.f64.html\n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseFloatError {\n     kind: FloatErrorKind\n }\n \n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n enum FloatErrorKind {\n     Empty,\n     Invalid,"}, {"sha": "72529d3da01d11b0325827f103096b9b2356c779", "filename": "src/libcore/num/flt2dec/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fdecoder.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -21,7 +21,7 @@ use num::dec2flt::rawfp::RawFloat;\n /// - Any number from `(mant - minus) * 2^exp` to `(mant + plus) * 2^exp` will\n ///   round to the original value. The range is inclusive only when\n ///   `inclusive` is true.\n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Decoded {\n     /// The scaled mantissa.\n     pub mant: u64,\n@@ -38,7 +38,7 @@ pub struct Decoded {\n }\n \n /// Decoded unsigned value.\n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub enum FullDecoded {\n     /// Not-a-number.\n     Nan,"}, {"sha": "e7aafd5e1341c20b1c1e3a5c2fd89cd295eba10b", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -2405,7 +2405,7 @@ impl usize {\n /// assert_eq!(nan.classify(), FpCategory::Nan);\n /// assert_eq!(sub.classify(), FpCategory::Subnormal);\n /// ```\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum FpCategory {\n     /// \"Not a Number\", often obtained by dividing by zero.\n@@ -2748,11 +2748,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32)\n /// on the primitive integer types, such as [`i8::from_str_radix()`].\n ///\n /// [`i8::from_str_radix()`]: ../../std/primitive.i8.html#method.from_str_radix\n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseIntError { kind: IntErrorKind }\n \n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n enum IntErrorKind {\n     Empty,\n     InvalidDigit,"}, {"sha": "17cac83868be8dae5d69b57f6443ea73c264ee29", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -101,7 +101,7 @@ impl FromStr for bool {\n }\n \n /// An error returned when parsing a `bool` from a string fails.\n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ParseBoolError { _priv: () }\n "}, {"sha": "82c90a8e6c4d9ff456dc247f0aa90f1f7874b0b0", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -142,19 +142,19 @@ pub struct CStr {\n \n /// An error returned from `CString::new` to indicate that a nul byte was found\n /// in the vector provided.\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct NulError(usize, Vec<u8>);\n \n /// An error returned from `CStr::from_bytes_with_nul` to indicate that a nul\n /// byte was found too early in the slice provided or one wasn't found at all.\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n pub struct FromBytesWithNulError { _a: () }\n \n /// An error returned from `CString::into_string` to indicate that a UTF-8 error\n /// was encountered during the conversion.\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n pub struct IntoStringError {\n     inner: CString,"}, {"sha": "ad2fe3c1c0dbc8874e093328a1c530d6bec47aab", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -38,7 +38,7 @@ mod parser;\n ///\n /// [`shutdown`]: struct.TcpStream.html#method.shutdown\n /// [`TcpStream`]: struct.TcpStream.html\n-#[derive(Copy, Clone, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Shutdown {\n     /// Indicates that the reading portion of this stream/socket should be shut"}, {"sha": "ed4af471f2f56ce1d621d5f7bd50209259b820f0", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -370,7 +370,7 @@ impl FromStr for SocketAddr {\n \n /// An error returned when parsing an IP address or a socket address.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[derive(Debug, Clone, PartialEq)]\n+#[derive(Debug, Clone, PartialEq, Eq)]\n pub struct AddrParseError(());\n \n #[stable(feature = \"addr_parse_error_error\", since = \"1.4.0\")]"}, {"sha": "51b08bd75c4bc3475548171cf9dd1ec018619629", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4c739dbdd028277c17c90ebf613c520433622d1/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=b4c739dbdd028277c17c90ebf613c520433622d1", "patch": "@@ -103,7 +103,7 @@ pub struct Handle<'rx, T:Send+'rx> {\n struct Packets { cur: *mut Handle<'static, ()> }\n \n #[doc(hidden)]\n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n pub enum StartResult {\n     Installed,\n     Abort,"}]}