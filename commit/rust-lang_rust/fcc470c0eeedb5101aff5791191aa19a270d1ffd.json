{"sha": "fcc470c0eeedb5101aff5791191aa19a270d1ffd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYzQ3MGMwZWVlZGI1MTAxYWZmNTc5MTE5MWFhMTlhMjcwZDFmZmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-08T02:54:28Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-08T02:55:12Z"}, "message": "test: Fix check-fast for resolve changes. rs=bustage", "tree": {"sha": "7b38fc6730dc3d00e44dd07a4d0f45bd5e605b4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b38fc6730dc3d00e44dd07a4d0f45bd5e605b4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcc470c0eeedb5101aff5791191aa19a270d1ffd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcc470c0eeedb5101aff5791191aa19a270d1ffd", "html_url": "https://github.com/rust-lang/rust/commit/fcc470c0eeedb5101aff5791191aa19a270d1ffd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcc470c0eeedb5101aff5791191aa19a270d1ffd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ec9aa6e7b999e235007f75af2fd631f7333a84", "url": "https://api.github.com/repos/rust-lang/rust/commits/16ec9aa6e7b999e235007f75af2fd631f7333a84", "html_url": "https://github.com/rust-lang/rust/commit/16ec9aa6e7b999e235007f75af2fd631f7333a84"}], "stats": {"total": 384, "additions": 197, "deletions": 187}, "files": [{"sha": "ccc65cdab7515a2706779ca0f73c9a79f95b131d", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -14,7 +14,7 @@\n enum t { make_t(@int), clam, }\n \n fn foo(s: @int) {\n-    let count = core::sys::refcount(s);\n+    let count = ::core::sys::refcount(s);\n     let x: t = make_t(s); // ref up\n \n     match x {\n@@ -24,20 +24,20 @@ fn foo(s: @int) {\n       }\n       _ => { debug!(\"?\"); fail; }\n     }\n-    log(debug, core::sys::refcount(s));\n-    assert (core::sys::refcount(s) == count + 1u);\n-    let _ = core::sys::refcount(s); // don't get bitten by last-use.\n+    log(debug, ::core::sys::refcount(s));\n+    assert (::core::sys::refcount(s) == count + 1u);\n+    let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n }\n \n fn main() {\n     let s: @int = @0; // ref up\n \n-    let count = core::sys::refcount(s);\n+    let count = ::core::sys::refcount(s);\n \n     foo(s); // ref up then down\n \n-    log(debug, core::sys::refcount(s));\n-    let count2 = core::sys::refcount(s);\n-    let _ = core::sys::refcount(s); // don't get bitten by last-use.\n+    log(debug, ::core::sys::refcount(s));\n+    let count2 = ::core::sys::refcount(s);\n+    let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n     assert count == count2;\n }"}, {"sha": "87fd1443db9e3c1de236132f49105268ec2100fb", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,25 +10,25 @@\n // except according to those terms.\n \n \n-fn a(c: core::oldcomm::Chan<int>) { core::oldcomm::send(c, 10); }\n+fn a(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 10); }\n \n fn main() {\n-    let p = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| a(ch) );\n     let mut n: int = 0;\n-    n = core::oldcomm::recv(p);\n-    n = core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n     //    debug!(\"Finished.\");\n }\n \n-fn b(c: core::oldcomm::Chan<int>) {\n+fn b(c: ::core::oldcomm::Chan<int>) {\n     //    debug!(\"task b0\");\n     //    debug!(\"task b1\");\n     //    debug!(\"task b2\");\n     //    debug!(\"task b3\");\n     //    debug!(\"task b4\");\n     //    debug!(\"task b5\");\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n }"}, {"sha": "0e542e157cf934ecdd1905a6799e368ecbf2a06c", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,28 +10,28 @@\n // except according to those terms.\n \n \n-fn a(c: core::oldcomm::Chan<int>) {\n+fn a(c: ::core::oldcomm::Chan<int>) {\n     debug!(\"task a0\");\n     debug!(\"task a1\");\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n }\n \n fn main() {\n-    let p = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut n: int = 0;\n-    n = core::oldcomm::recv(p);\n-    n = core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n     debug!(\"Finished.\");\n }\n \n-fn b(c: core::oldcomm::Chan<int>) {\n+fn b(c: ::core::oldcomm::Chan<int>) {\n     debug!(\"task b0\");\n     debug!(\"task b1\");\n     debug!(\"task b2\");\n     debug!(\"task b2\");\n     debug!(\"task b3\");\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n }"}, {"sha": "ac029b63eef4075d344c886dc796aafa7ccd54f9", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,15 +10,15 @@\n // except according to those terms.\n \n \n-fn a(c: core::oldcomm::Chan<int>) {\n+fn a(c: ::core::oldcomm::Chan<int>) {\n     if true {\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n         debug!(\"task a\");\n     }\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n }\n \n fn k(x: int) -> int { return 15; }\n@@ -34,18 +34,18 @@ fn main() {\n     let mut n: int = 2 + 3 * 7;\n     let s: ~str = ~\"hello there\";\n     let p = oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let ch = ::core::oldcomm::Chan(&p);\n     task::spawn(|| a(ch) );\n     task::spawn(|| b(ch) );\n     let mut x: int = 10;\n     x = g(n, s);\n     log(debug, x);\n-    n = core::oldcomm::recv(p);\n-    n = core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n+    n = ::core::oldcomm::recv(p);\n     debug!(\"children finished, root finishing\");\n }\n \n-fn b(c: core::oldcomm::Chan<int>) {\n+fn b(c: ::core::oldcomm::Chan<int>) {\n     if true {\n         debug!(\"task b\");\n         debug!(\"task b\");\n@@ -54,5 +54,5 @@ fn b(c: core::oldcomm::Chan<int>) {\n         debug!(\"task b\");\n         debug!(\"task b\");\n     }\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n }"}, {"sha": "04cc55b22640c865ee76dfd82b8dbc1508df2671", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -63,9 +63,9 @@ fn test_box() {\n }\n \n fn test_ptr() unsafe {\n-    let p1: *u8 = core::cast::reinterpret_cast(&0);\n-    let p2: *u8 = core::cast::reinterpret_cast(&0);\n-    let p3: *u8 = core::cast::reinterpret_cast(&1);\n+    let p1: *u8 = ::core::cast::reinterpret_cast(&0);\n+    let p2: *u8 = ::core::cast::reinterpret_cast(&0);\n+    let p3: *u8 = ::core::cast::reinterpret_cast(&1);\n \n     assert p1 == p2;\n     assert p1 != p3;\n@@ -110,8 +110,8 @@ fn test_class() {\n   \n   unsafe {\n   error!(\"q = %x, r = %x\",\n-         (core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&q))),\n-         (core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&r))));\n+         (::core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&q))),\n+         (::core::cast::reinterpret_cast::<*p, uint>(&ptr::addr_of(&r))));\n   }\n   assert(q == r);\n   r.y = 17;"}, {"sha": "893912d5c05897a159619cbb2865644dca1f8740", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -24,9 +24,9 @@\n // course preferable, as the value itself is\n // irrelevant).\n \n-fn foo(&&x: ()) -> core::oldcomm::Port<()> {\n-    let p = core::oldcomm::Port();\n-    let c = core::oldcomm::Chan(&p);\n+fn foo(&&x: ()) -> ::core::oldcomm::Port<()> {\n+    let p = ::core::oldcomm::Port();\n+    let c = ::core::oldcomm::Chan(&p);\n     do task::spawn() |copy c, copy x| {\n         c.send(x);\n     }"}, {"sha": "4e75d19dba0f14b86b8b1f2aa50dd1ee9f9bd446", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -18,7 +18,7 @@\n \n extern mod cci_capture_clause;\n \n-use core::oldcomm::recv;\n+use ::core::oldcomm::recv;\n \n fn main() {\n     cci_capture_clause::foo(()).recv()"}, {"sha": "43825b03c296d8c9e139597a6a09f62a091d9557", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,32 +10,32 @@\n \n // Issue #763\n \n-enum request { quit, close(core::oldcomm::Chan<bool>), }\n+enum request { quit, close(::core::oldcomm::Chan<bool>), }\n \n-type ctx = core::oldcomm::Chan<request>;\n+type ctx = ::core::oldcomm::Chan<request>;\n \n-fn request_task(c: core::oldcomm::Chan<ctx>) {\n-    let p = core::oldcomm::Port();\n-    core::oldcomm::send(c, core::oldcomm::Chan(&p));\n+fn request_task(c: ::core::oldcomm::Chan<ctx>) {\n+    let p = ::core::oldcomm::Port();\n+    ::core::oldcomm::send(c, ::core::oldcomm::Chan(&p));\n     let mut req: request;\n-    req = core::oldcomm::recv(p);\n+    req = ::core::oldcomm::recv(p);\n     // Need to drop req before receiving it again\n-    req = core::oldcomm::recv(p);\n+    req = ::core::oldcomm::recv(p);\n }\n \n fn new_cx() -> ctx {\n-    let p = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n     let t = task::spawn(|| request_task(ch) );\n     let mut cx: ctx;\n-    cx = core::oldcomm::recv(p);\n+    cx = ::core::oldcomm::recv(p);\n     return cx;\n }\n \n fn main() {\n     let cx = new_cx();\n \n-    let p = core::oldcomm::Port::<bool>();\n-    core::oldcomm::send(cx, close(core::oldcomm::Chan(&p)));\n-    core::oldcomm::send(cx, quit);\n+    let p = ::core::oldcomm::Port::<bool>();\n+    ::core::oldcomm::send(cx, close(::core::oldcomm::Chan(&p)));\n+    ::core::oldcomm::send(cx, quit);\n }"}, {"sha": "7c022dc8441a0e19a70bb6f63e8364e79003575a", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -11,7 +11,7 @@\n // xfail-fast\n // aux-build:cci_class_cast.rs\n extern mod cci_class_cast;\n-use core::to_str::ToStr;\n+use ::core::to_str::ToStr;\n use cci_class_cast::kitty::*;\n \n fn print_out<T: ToStr>(thing: T, expected: ~str) {"}, {"sha": "9454dbf9bcb45c586bd7c5945b2198274f9a4a23", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // xfail-fast\n-use core::to_str::*;\n+use ::core::to_str::*;\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "e014ffe4bef4786e0650ce28faa8175b77a94d6f", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     enum x { foo }\n-    impl x : core::cmp::Eq {\n+    impl x : ::core::cmp::Eq {\n         pure fn eq(&self, other: &x) -> bool {\n             (*self) as int == (*other) as int\n         }"}, {"sha": "7a79d2360684d02f29be5d060458b252db5ac483", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -12,16 +12,16 @@\n \n fn main() {\n     let p = oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let ch = ::core::oldcomm::Chan(&p);\n     let t = task::spawn(|| child(ch) );\n-    let y = core::oldcomm::recv(p);\n+    let y = ::core::oldcomm::recv(p);\n     error!(\"received\");\n     log(error, y);\n     assert (y == 10);\n }\n \n-fn child(c: core::oldcomm::Chan<int>) {\n+fn child(c: ::core::oldcomm::Chan<int>) {\n     error!(\"sending\");\n-    core::oldcomm::send(c, 10);\n+    ::core::oldcomm::send(c, 10);\n     error!(\"value sent\");\n }"}, {"sha": "9b080206fcdea58ea12380e3e450c52e26413825", "filename": "src/test/run-pass/core-export-f64-sqrt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -14,5 +14,5 @@ fn main() {\n \n     let digits: uint = 10 as uint;\n \n-    core::io::println(float::to_str(f64::sqrt(42.0f64) as float, digits));\n+    ::core::io::println(float::to_str(f64::sqrt(42.0f64) as float, digits));\n }"}, {"sha": "a3679f71a6b1bb7a3096daa1b234e7336bc48a28", "filename": "src/test/run-pass/decl-with-recv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdecl-with-recv.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -11,12 +11,12 @@\n \n \n fn main() {\n-    let po = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&po);\n-    core::oldcomm::send(ch, 10);\n-    let i = core::oldcomm::recv(po);\n+    let po = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&po);\n+    ::core::oldcomm::send(ch, 10);\n+    let i = ::core::oldcomm::recv(po);\n     assert (i == 10);\n-    core::oldcomm::send(ch, 11);\n-    let j = core::oldcomm::recv(po);\n+    ::core::oldcomm::send(ch, 11);\n+    let j = ::core::oldcomm::recv(po);\n     assert (j == 11);\n }"}, {"sha": "849ad64270de9b80b40c2b0590bb8d8d27570c7a", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-enum.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "5855b1a530ba3ef362abe3545dd08fd8f4927cde", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-struct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "b1b196e6986a43d77a880e0d44996e0c3a97a9a1", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "238f3b8b587a3e5f890aafe70cbfb72dcaa8267a", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -12,7 +12,7 @@ struct S<T> {\n     x: T\n }\n \n-impl<T> S<T> : core::ops::Drop {\n+impl<T> S<T> : ::core::ops::Drop {\n     fn finalize(&self) {\n         io::println(\"bye\");\n     }"}, {"sha": "5f8a74203e4e8aba2cf11f224a79077257bdf020", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "0018a1d62f68644fdbae688051509efdab47dcac", "filename": "src/test/run-pass/foreign2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fforeign2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fforeign2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign2.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -23,7 +23,7 @@ extern mod zed {\n extern mod libc {\n     #[legacy_exports];\n     fn write(fd: int, buf: *u8,\n-             count: core::libc::size_t) -> core::libc::ssize_t;\n+             count: ::core::libc::size_t) -> ::core::libc::ssize_t;\n }\n \n #[abi = \"cdecl\"]"}, {"sha": "bde4b96a927410e45a086a16574ab426e2aafbeb", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -12,7 +12,7 @@\n \n \n extern mod std;\n-use core::vec::*;\n+use ::core::vec::*;\n \n fn main() {\n     let mut v = from_elem(0u, 0);"}, {"sha": "7ba9583a77f2996c107980f35addc47e36891870", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,9 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::cast;\n-use core::libc::{c_double, c_int};\n-use core::f64::*;\n+use ::core::cast;\n+use ::core::libc::{c_double, c_int};\n+use ::core::f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int unsafe {\n     cast::reinterpret_cast(&v)"}, {"sha": "ebc97f79aefd8a680fc0695c9f6936330d74f4de", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -12,7 +12,7 @@\n \n // tjc: I don't know why\n pub mod pipes {\n-    use core::cast::{forget, transmute};\n+    use ::core::cast::{forget, transmute};\n \n     pub enum state {\n         empty,\n@@ -50,7 +50,7 @@ pub mod pipes {\n       pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail; }\n     }\n \n-    // We should consider moving this to core::unsafe, although I\n+    // We should consider moving this to ::core::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n     pub unsafe fn uniquify<T>(+x: *T) -> ~T {\n         unsafe { cast::transmute(move x) }\n@@ -212,8 +212,8 @@ pub mod pipes {\n }\n \n pub mod pingpong {\n-    use core::cast;\n-    use core::ptr;\n+    use ::core::cast;\n+    use ::core::ptr;\n \n     pub enum ping = ::pipes::send_packet<pong>;\n     pub enum pong = ::pipes::send_packet<ping>;\n@@ -241,7 +241,7 @@ pub mod pingpong {\n     }\n \n     pub mod client {\n-        use core::option;\n+        use ::core::option;\n         use pingpong;\n \n         pub type ping = ::pipes::send_packet<pingpong::ping>;"}, {"sha": "cca4a25569bee293989dc5785fd25fa1c58a7809", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -13,7 +13,7 @@\n // rustc --test map_to_str.rs && ./map_to_str\n extern mod std;\n \n-use core::io::{WriterUtil};\n+use ::core::io::{WriterUtil};\n use std::map::*;\n \n #[cfg(test)]"}, {"sha": "0cdc394948db6ef947fa85346c14b672f4881ebc", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -13,7 +13,7 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n-use core::libc::*;\n+use ::core::libc::*;\n \n struct KEYGEN {\n     hash_algorithm: [c_uint * 2],"}, {"sha": "52f202a2deb48497125a9c6c5aebde401f16678b", "filename": "src/test/run-pass/issue-507.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-507.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -15,19 +15,19 @@\n    https://github.com/graydon/rust/issues/507\n */\n \n-fn grandchild(c: core::oldcomm::Chan<int>) { core::oldcomm::send(c, 42); }\n+fn grandchild(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 42); }\n \n-fn child(c: core::oldcomm::Chan<int>) {\n+fn child(c: ::core::oldcomm::Chan<int>) {\n     task::spawn(|| grandchild(c) )\n }\n \n fn main() {\n-    let p = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n \n     task::spawn(|| child(ch) );\n \n-    let x: int = core::oldcomm::recv(p);\n+    let x: int = ::core::oldcomm::recv(p);\n \n     log(debug, x);\n "}, {"sha": "53827bb63fa3cfaeac61d354109cfb658fa77e48", "filename": "src/test/run-pass/issue-687.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-687.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-687.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-687.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,45 +10,45 @@\n \n enum msg { closed, received(~[u8]), }\n \n-fn producer(c: core::oldcomm::Chan<~[u8]>) {\n-    core::oldcomm::send(c, ~[1u8, 2u8, 3u8, 4u8]);\n+fn producer(c: ::core::oldcomm::Chan<~[u8]>) {\n+    ::core::oldcomm::send(c, ~[1u8, 2u8, 3u8, 4u8]);\n     let empty: ~[u8] = ~[];\n-    core::oldcomm::send(c, empty);\n+    ::core::oldcomm::send(c, empty);\n }\n \n-fn packager(cb: core::oldcomm::Chan<core::oldcomm::Chan<~[u8]>>, msg: core::oldcomm::Chan<msg>) {\n-    let p: core::oldcomm::Port<~[u8]> = core::oldcomm::Port();\n-    core::oldcomm::send(cb, core::oldcomm::Chan(&p));\n+fn packager(cb: ::core::oldcomm::Chan<::core::oldcomm::Chan<~[u8]>>, msg: ::core::oldcomm::Chan<msg>) {\n+    let p: ::core::oldcomm::Port<~[u8]> = ::core::oldcomm::Port();\n+    ::core::oldcomm::send(cb, ::core::oldcomm::Chan(&p));\n     loop {\n         debug!(\"waiting for bytes\");\n-        let data = core::oldcomm::recv(p);\n+        let data = ::core::oldcomm::recv(p);\n         debug!(\"got bytes\");\n         if vec::len(data) == 0u {\n             debug!(\"got empty bytes, quitting\");\n             break;\n         }\n         debug!(\"sending non-empty buffer of length\");\n         log(debug, vec::len(data));\n-        core::oldcomm::send(msg, received(data));\n+        ::core::oldcomm::send(msg, received(data));\n         debug!(\"sent non-empty buffer\");\n     }\n     debug!(\"sending closed message\");\n-    core::oldcomm::send(msg, closed);\n+    ::core::oldcomm::send(msg, closed);\n     debug!(\"sent closed message\");\n }\n \n fn main() {\n-    let p: core::oldcomm::Port<msg> = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n-    let recv_reader: core::oldcomm::Port<core::oldcomm::Chan<~[u8]>> = core::oldcomm::Port();\n-    let recv_reader_chan = core::oldcomm::Chan(&recv_reader);\n+    let p: ::core::oldcomm::Port<msg> = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n+    let recv_reader: ::core::oldcomm::Port<::core::oldcomm::Chan<~[u8]>> = ::core::oldcomm::Port();\n+    let recv_reader_chan = ::core::oldcomm::Chan(&recv_reader);\n     let pack = task::spawn(|| packager(recv_reader_chan, ch) );\n \n-    let source_chan: core::oldcomm::Chan<~[u8]> = core::oldcomm::recv(recv_reader);\n+    let source_chan: ::core::oldcomm::Chan<~[u8]> = ::core::oldcomm::recv(recv_reader);\n     let prod = task::spawn(|| producer(source_chan) );\n \n     loop {\n-        let msg = core::oldcomm::recv(p);\n+        let msg = ::core::oldcomm::recv(p);\n         match msg {\n           closed => { debug!(\"Got close message\"); break; }\n           received(data) => {"}, {"sha": "75404c01fc53aa2a605c88f810524c95f0e6cfc1", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,14 +10,14 @@\n \n fn a() {\n     fn doit() {\n-        fn b(c: core::oldcomm::Chan<core::oldcomm::Chan<int>>) {\n-            let p = core::oldcomm::Port();\n-            core::oldcomm::send(c, core::oldcomm::Chan(&p));\n+        fn b(c: ::core::oldcomm::Chan<::core::oldcomm::Chan<int>>) {\n+            let p = ::core::oldcomm::Port();\n+            ::core::oldcomm::send(c, ::core::oldcomm::Chan(&p));\n         }\n-        let p = core::oldcomm::Port();\n-        let ch = core::oldcomm::Chan(&p);\n+        let p = ::core::oldcomm::Port();\n+        let ch = ::core::oldcomm::Chan(&p);\n         task::spawn(|| b(ch) );\n-        core::oldcomm::recv(p);\n+        ::core::oldcomm::recv(p);\n     }\n     let mut i = 0;\n     while i < 100 {"}, {"sha": "31651ab7c20a63a50b333eee00565a47c9e10ee0", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,13 +1,13 @@\n-fn producer(c: core::oldcomm::Chan<~[u8]>) {\n-    core::oldcomm::send(c,\n+fn producer(c: ::core::oldcomm::Chan<~[u8]>) {\n+    ::core::oldcomm::send(c,\n          ~[1u8, 2u8, 3u8, 4u8, 5u8, 6u8, 7u8, 8u8, 9u8, 10u8, 11u8, 12u8,\n           13u8]);\n }\n \n fn main() {\n-    let p: core::oldcomm::Port<~[u8]> = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p: ::core::oldcomm::Port<~[u8]> = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n     let prod = task::spawn(|| producer(ch) );\n \n-    let data: ~[u8] = core::oldcomm::recv(p);\n+    let data: ~[u8] = ::core::oldcomm::recv(p);\n }"}, {"sha": "4e5ce6cd0915fa7ef6b2939bd91630fc648f03f1", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -10,21 +10,21 @@\n // except according to those terms.\n \n fn main() {\n-    let p = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&p);\n     let mut y: int;\n \n     task::spawn(|| child(ch) );\n-    y = core::oldcomm::recv(p);\n+    y = ::core::oldcomm::recv(p);\n     debug!(\"received 1\");\n     log(debug, y);\n     assert (y == 10);\n \n     task::spawn(|| child(ch) );\n-    y = core::oldcomm::recv(p);\n+    y = ::core::oldcomm::recv(p);\n     debug!(\"received 2\");\n     log(debug, y);\n     assert (y == 10);\n }\n \n-fn child(c: core::oldcomm::Chan<int>) { core::oldcomm::send(c, 10); }\n+fn child(c: ::core::oldcomm::Chan<int>) { ::core::oldcomm::send(c, 10); }"}, {"sha": "81424a7a8f940ca81f62f705de111738157fa425", "filename": "src/test/run-pass/mod-view-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fmod-view-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod-view-items.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -18,7 +18,7 @@\n \n mod m {\n     #[legacy_exports];\n-    use core::vec;\n+    use ::core::vec;\n     fn f() -> ~[int] { vec::from_elem(1u, 0) }\n }\n "}, {"sha": "a00644fa8db56f8eb995c31a3c50b6d57d781918", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -18,8 +18,8 @@\n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n mod pingpong {\n-    use core::pipes::*;\n-    use core::ptr;\n+    use ::core::pipes::*;\n+    use ::core::ptr;\n \n     pub type packets = {\n         ping: Packet<ping>,\n@@ -43,7 +43,7 @@ mod pingpong {\n     pub enum ping = server::pong;\n     pub enum pong = client::ping;\n     pub mod client {\n-        use core::ptr;\n+        use ::core::ptr;\n \n         pub fn ping(+pipe: ping) -> pong {\n             {\n@@ -61,7 +61,7 @@ mod pingpong {\n                                                   ::pingpong::packets>;\n     }\n     pub mod server {\n-        use core::ptr;\n+        use ::core::ptr;\n \n         pub type ping = pipes::RecvPacketBuffered<::pingpong::ping,\n         ::pingpong::packets>;"}, {"sha": "49eb5c9e63c5a5eaae1ea248ecde3f10f5039e57", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -12,7 +12,7 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n-use core::option;\n+use ::core::option;\n \n proto! pingpong (\n     ping:send {\n@@ -25,7 +25,7 @@ proto! pingpong (\n )\n \n mod test {\n-    use core::pipes::recv;\n+    use ::core::pipes::recv;\n     use pingpong::{ping, pong};\n \n     pub fn client(-chan: ::pingpong::client::ping) {"}, {"sha": "1ddeee336e3c0d4f65d1e261ba3596f5e9191809", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -13,7 +13,7 @@\n // Regression tests for circular_buffer when using a unit\n // that has a size that is not a power of two\n \n-// A 12-byte unit to core::oldcomm::send over the channel\n+// A 12-byte unit to ::core::oldcomm::send over the channel\n type record = {val1: u32, val2: u32, val3: u32};\n \n \n@@ -22,52 +22,52 @@ type record = {val1: u32, val2: u32, val3: u32};\n // power of two so needs to be rounded up. Don't trigger any\n // assertions.\n fn test_init() {\n-    let myport = core::oldcomm::Port();\n-    let mychan = core::oldcomm::Chan(&myport);\n+    let myport = ::core::oldcomm::Port();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n     let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-    core::oldcomm::send(mychan, val);\n+    ::core::oldcomm::send(mychan, val);\n }\n \n \n // Dump lots of items into the channel so it has to grow.\n // Don't trigger any assertions.\n fn test_grow() {\n-    let myport = core::oldcomm::Port();\n-    let mychan = core::oldcomm::Chan(&myport);\n+    let myport = ::core::oldcomm::Port();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-        core::oldcomm::send(mychan, val);\n+        ::core::oldcomm::send(mychan, val);\n     }\n }\n \n \n // Don't allow the buffer to shrink below it's original size\n fn test_shrink1() {\n-    let myport = core::oldcomm::Port();\n-    let mychan = core::oldcomm::Chan(&myport);\n-    core::oldcomm::send(mychan, 0i8);\n-    let x = core::oldcomm::recv(myport);\n+    let myport = ::core::oldcomm::Port();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n+    ::core::oldcomm::send(mychan, 0i8);\n+    let x = ::core::oldcomm::recv(myport);\n }\n \n fn test_shrink2() {\n-    let myport = core::oldcomm::Port();\n-    let mychan = core::oldcomm::Chan(&myport);\n+    let myport = ::core::oldcomm::Port();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |_i| {\n         let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n-        core::oldcomm::send(mychan, val);\n+        ::core::oldcomm::send(mychan, val);\n     }\n-    for uint::range(0u, 100u) |_i| { let x = core::oldcomm::recv(myport); }\n+    for uint::range(0u, 100u) |_i| { let x = ::core::oldcomm::recv(myport); }\n }\n \n \n // Test rotating the buffer when the unit size is not a power of two\n fn test_rotate() {\n-    let myport = core::oldcomm::Port();\n-    let mychan = core::oldcomm::Chan(&myport);\n+    let myport = ::core::oldcomm::Port();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n         let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n-        core::oldcomm::send(mychan, val);\n-        let x = core::oldcomm::recv(myport);\n+        ::core::oldcomm::send(mychan, val);\n+        let x = ::core::oldcomm::recv(myport);\n         assert (x.val1 == i as u32);\n         assert (x.val2 == i as u32);\n         assert (x.val3 == i as u32);\n@@ -78,16 +78,16 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = core::oldcomm::Port::<record>();\n-    let mychan = core::oldcomm::Chan(&myport);\n+    let myport = ::core::oldcomm::Port::<record>();\n+    let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 10u) |j| {\n         for uint::range(0u, 10u) |i| {\n             let val: record =\n                 {val1: i as u32, val2: i as u32, val3: i as u32};\n-            core::oldcomm::send(mychan, val);\n+            ::core::oldcomm::send(mychan, val);\n         }\n         for uint::range(0u, 10u) |i| {\n-            let x = core::oldcomm::recv(myport);\n+            let x = ::core::oldcomm::recv(myport);\n             assert (x.val1 == i as u32);\n             assert (x.val2 == i as u32);\n             assert (x.val3 == i as u32);"}, {"sha": "39ef99a72b6114a129410f810e79eac2d9a0c472", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -23,12 +23,12 @@ fn test(f: int) -> test {\n }\n \n fn main() {\n-    let p = core::oldcomm::Port();\n-    let c = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let c = ::core::oldcomm::Chan(&p);\n \n     do task::spawn() {\n-        let p = core::oldcomm::Port();\n-        c.send(core::oldcomm::Chan(&p));\n+        let p = ::core::oldcomm::Port();\n+        c.send(::core::oldcomm::Chan(&p));\n \n         let _r = p.recv();\n     }"}, {"sha": "d67f327370399014439b0e06e80f369d5f4c1ee5", "filename": "src/test/run-pass/static-fn-inline-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-inline-xc.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -13,7 +13,7 @@\n \n extern mod mycore(name =\"static_fn_inline_xc_aux\");\n \n-use mycore::num;\n+use my::core::num;\n \n fn main() {\n     let _1:float = num::Num2::from_int2(1i);"}, {"sha": "8c643fb145a97fd41259c2ba19bb4d2c0306b1a7", "filename": "src/test/run-pass/static-fn-trait-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-fn-trait-xc.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -3,7 +3,7 @@\n \n extern mod mycore(name =\"static_fn_trait_xc_aux\");\n \n-use mycore::num;\n+use my::core::num;\n \n fn main() {\n     let _1:float = num::Num2::from_int2(1i);"}, {"sha": "311da9762b3c796947506cf3dc06def0b0ee2d21", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -17,12 +17,12 @@ fn main() {\n     test06();\n }\n \n-fn test00_start(ch: core::oldcomm::Chan<int>, message: int, count: int) {\n+fn test00_start(ch: ::core::oldcomm::Chan<int>, message: int, count: int) {\n     debug!(\"Starting test00_start\");\n     let mut i: int = 0;\n     while i < count {\n         debug!(\"Sending Message\");\n-        core::oldcomm::send(ch, message + 0);\n+        ::core::oldcomm::send(ch, message + 0);\n         i = i + 1;\n     }\n     debug!(\"Ending test00_start\");\n@@ -33,8 +33,8 @@ fn test00() {\n     let number_of_messages: int = 4;\n     debug!(\"Creating tasks\");\n \n-    let po = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&po);\n+    let po = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&po);\n \n     let mut i: int = 0;\n \n@@ -50,7 +50,7 @@ fn test00() {\n     let mut sum: int = 0;\n     for results.each |r| {\n         i = 0;\n-        while i < number_of_messages { sum += core::oldcomm::recv(po); i = i + 1; }\n+        while i < number_of_messages { sum += ::core::oldcomm::recv(po); i = i + 1; }\n     }\n \n     for results.each |r| { r.recv(); }\n@@ -63,19 +63,19 @@ fn test00() {\n }\n \n fn test01() {\n-    let p = core::oldcomm::Port();\n+    let p = ::core::oldcomm::Port();\n     debug!(\"Reading from a port that is never written to.\");\n-    let value: int = core::oldcomm::recv(p);\n+    let value: int = ::core::oldcomm::recv(p);\n     log(debug, value);\n }\n \n fn test02() {\n-    let p = core::oldcomm::Port();\n-    let c = core::oldcomm::Chan(&p);\n+    let p = ::core::oldcomm::Port();\n+    let c = ::core::oldcomm::Chan(&p);\n     debug!(\"Writing to a local task channel.\");\n-    core::oldcomm::send(c, 42);\n+    ::core::oldcomm::send(c, 42);\n     debug!(\"Reading from a local task port.\");\n-    let value: int = core::oldcomm::recv(p);\n+    let value: int = ::core::oldcomm::recv(p);\n     log(debug, value);\n }\n \n@@ -93,22 +93,22 @@ fn test04() {\n     debug!(\"Finishing up.\");\n }\n \n-fn test05_start(ch: core::oldcomm::Chan<int>) {\n-    core::oldcomm::send(ch, 10);\n-    core::oldcomm::send(ch, 20);\n-    core::oldcomm::send(ch, 30);\n-    core::oldcomm::send(ch, 30);\n-    core::oldcomm::send(ch, 30);\n+fn test05_start(ch: ::core::oldcomm::Chan<int>) {\n+    ::core::oldcomm::send(ch, 10);\n+    ::core::oldcomm::send(ch, 20);\n+    ::core::oldcomm::send(ch, 30);\n+    ::core::oldcomm::send(ch, 30);\n+    ::core::oldcomm::send(ch, 30);\n }\n \n fn test05() {\n-    let po = core::oldcomm::Port();\n-    let ch = core::oldcomm::Chan(&po);\n+    let po = ::core::oldcomm::Port();\n+    let ch = ::core::oldcomm::Chan(&po);\n     task::spawn(|| test05_start(ch) );\n     let mut value: int;\n-    value = core::oldcomm::recv(po);\n-    value = core::oldcomm::recv(po);\n-    value = core::oldcomm::recv(po);\n+    value = ::core::oldcomm::recv(po);\n+    value = ::core::oldcomm::recv(po);\n+    value = ::core::oldcomm::recv(po);\n     log(debug, value);\n }\n "}, {"sha": "d8a8fc26d7fdfb456955b28988b9f70f2e224cdd", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,3 +1,5 @@\n+// xfail-fast\n+\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT."}, {"sha": "77384bdd27ae12c4edda08c2025f60b1e28df57f", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -14,7 +14,7 @@\n \n extern mod core;\n \n-use core::{str, int, vec};\n+use ::core::{str, int, vec};\n \n trait to_str {\n     fn to_str() -> ~str;"}, {"sha": "23202243b4504c4ec2d1e8604d37cd5828e798e2", "filename": "src/test/run-pass/use.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fuse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fuse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -16,12 +16,12 @@ extern mod zed(name = \"core\");\n extern mod bar(name = \"core\", vers = \"0.6\");\n \n \n-use core::str;\n+use ::core::str;\n use x = zed::str;\n mod baz {\n     #[legacy_exports];\n     use bar::str;\n-    use x = core::str;\n+    use x = ::core::str;\n }\n \n fn main() { }"}, {"sha": "298253b8825d37abcd93a0ac03071611b5bc6104", "filename": "src/test/run-pass/vec-matching-autoslice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-autoslice.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -1,22 +1,22 @@\n fn main() {\n     let x = @[1, 2, 3];\n     match x {\n-        [2, .._] => core::util::unreachable(),\n+        [2, .._] => ::core::util::unreachable(),\n         [1, ..tail] => {\n             assert tail == [2, 3];\n         }\n-        [_] => core::util::unreachable(),\n-        [] => core::util::unreachable()\n+        [_] => ::core::util::unreachable(),\n+        [] => ::core::util::unreachable()\n     }\n \n     let y = (~[(1, true), (2, false)], 0.5);\n     match y {\n-        ([_, _, _], 0.5) => core::util::unreachable(),\n+        ([_, _, _], 0.5) => ::core::util::unreachable(),\n         ([(1, a), (b, false), ..tail], _) => {\n             assert a == true;\n             assert b == 2;\n             assert tail.is_empty();\n         }\n-        ([..tail], _) => core::util::unreachable()\n+        ([..tail], _) => ::core::util::unreachable()\n     }\n }"}, {"sha": "6b005bf0e1218fe7781833f80e83490f40b3a5b7", "filename": "src/test/run-pass/vec-matching-legal-tail-element-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching-legal-tail-element-borrow.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -3,7 +3,7 @@ fn main() {\n     if !x.is_empty() {\n         let el = match x {\n             [1, ..ref tail] => &tail[0], \n-            _ => core::util::unreachable()\n+            _ => ::core::util::unreachable()\n         };\n         io::println(fmt!(\"%d\", *el));\n     }"}, {"sha": "687788d8ce83d1d944c4646e875b649d54e243b8", "filename": "src/test/run-pass/vec-matching.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-matching.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = [1, 2, 3, 4, 5];\n     match x {\n         [a, b, c, d, e, f] => {\n-            core::util::unreachable();\n+            ::core::util::unreachable();\n         }\n         [a, b, c, d, e] => {\n             assert a == 1;\n@@ -24,7 +24,7 @@ fn main() {\n             assert e == 5;\n         }\n         _ => {\n-            core::util::unreachable();\n+            ::core::util::unreachable();\n         }\n     }\n "}, {"sha": "8a50d7b1643ac21bfbcb1e420b94c94d37fa9c93", "filename": "src/test/run-pass/vec-tail-matching.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcc470c0eeedb5101aff5791191aa19a270d1ffd/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-tail-matching.rs?ref=fcc470c0eeedb5101aff5791191aa19a270d1ffd", "patch": "@@ -17,19 +17,19 @@ fn main() {\n \n             match tail {\n                 [Foo { _ }, _, Foo { _ }, ..tail] => {\n-                    core::util::unreachable();\n+                    ::core::util::unreachable();\n                 }\n                 [Foo { string: a }, Foo { string: b }] => {\n                     assert a == ~\"bar\";\n                     assert b == ~\"baz\";\n                 }\n                 _ => {\n-                    core::util::unreachable();\n+                    ::core::util::unreachable();\n                 }\n             }\n         }\n         _ => {\n-            core::util::unreachable();\n+            ::core::util::unreachable();\n         }\n     }\n }"}]}