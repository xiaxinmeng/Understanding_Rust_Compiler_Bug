{"sha": "4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "node_id": "C_kwDOAAsO6NoAKDRmNDk2MjdjNmZlMmEzMmQxZmVkNjMxMDQ2NmJiMGUxYzUzNWMwYzA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-01T13:28:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-01T13:28:13Z"}, "message": "Auto merge of #92419 - erikdesjardins:coldland, r=nagisa\n\nMark drop calls in landing pads `cold` instead of `noinline`\n\nNow that deferred inlining has been disabled in LLVM (#92110), this shouldn't cause catastrophic size blowup.\n\nI confirmed that the test cases from https://github.com/rust-lang/rust/issues/41696#issuecomment-298696944 still compile quickly (<1s) after this change. ~Although note that I wasn't able to reproduce the original issue using a recent rustc/llvm with deferred inlining enabled, so those tests may no longer be representative. I was also unable to create a modified test case that reproduced the original issue.~ (edit: I reproduced it on CI by accident--the first commit timed out on the LLVM 12 builder, because I forgot to make it conditional on LLVM version)\n\nr? `@nagisa`\ncc `@arielb1` (this effectively reverts #42771 \"mark calls in the unwind path as !noinline\")\ncc `@RalfJung` (fixes #46515)\n\nedit: also fixes #87055", "tree": {"sha": "b4b4ca1ad7daee4bd3721ec3d047e0a7da9df104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4b4ca1ad7daee4bd3721ec3d047e0a7da9df104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "html_url": "https://github.com/rust-lang/rust/commit/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "028c6f1454787c068ff5117e9000a1de4fd98374", "url": "https://api.github.com/repos/rust-lang/rust/commits/028c6f1454787c068ff5117e9000a1de4fd98374", "html_url": "https://github.com/rust-lang/rust/commit/028c6f1454787c068ff5117e9000a1de4fd98374"}, {"sha": "64da730a41ac7df5fa8e03a82beb50abcdf5123e", "url": "https://api.github.com/repos/rust-lang/rust/commits/64da730a41ac7df5fa8e03a82beb50abcdf5123e", "html_url": "https://github.com/rust-lang/rust/commit/64da730a41ac7df5fa8e03a82beb50abcdf5123e"}], "stats": {"total": 89, "additions": 80, "deletions": 9}, "files": [{"sha": "379c88bbd40fac448316953c2f5047c03b46e8f3", "filename": "compiler/rustc_codegen_gcc/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fbuilder.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -1403,7 +1403,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n         self.cx\n     }\n \n-    fn do_not_inline(&mut self, _llret: RValue<'gcc>) {\n+    fn apply_attrs_to_cleanup_callsite(&mut self, _llret: RValue<'gcc>) {\n         unimplemented!();\n     }\n "}, {"sha": "5217fa2758f79c7f4f559c76fb91698d61b184b7", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -1201,8 +1201,15 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         unsafe { llvm::LLVMBuildZExt(self.llbuilder, val, dest_ty, UNNAMED) }\n     }\n \n-    fn do_not_inline(&mut self, llret: &'ll Value) {\n-        llvm::Attribute::NoInline.apply_callsite(llvm::AttributePlace::Function, llret);\n+    fn apply_attrs_to_cleanup_callsite(&mut self, llret: &'ll Value) {\n+        // Cleanup is always the cold path.\n+        llvm::Attribute::Cold.apply_callsite(llvm::AttributePlace::Function, llret);\n+\n+        // In LLVM versions with deferred inlining (currently, system LLVM < 14),\n+        // inlining drop glue can lead to exponential size blowup, see #41696 and #92110.\n+        if !llvm_util::is_rust_llvm() && llvm_util::get_version() < (14, 0, 0) {\n+            llvm::Attribute::NoInline.apply_callsite(llvm::AttributePlace::Function, llret);\n+        }\n     }\n }\n "}, {"sha": "6450b7490bd2bdb800336cb2c47cb4f83f5b47fc", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -1902,6 +1902,8 @@ extern \"C\" {\n     pub fn LLVMRustVersionMinor() -> u32;\n     pub fn LLVMRustVersionPatch() -> u32;\n \n+    pub fn LLVMRustIsRustLLVM() -> bool;\n+\n     pub fn LLVMRustAddModuleFlag(M: &Module, name: *const c_char, value: u32);\n \n     pub fn LLVMRustMetadataAsValue<'a>(C: &'a Context, MD: &'a Metadata) -> &'a Value;"}, {"sha": "d49df29f4534ec173fe60c0295bc20fae74c13fb", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -223,6 +223,12 @@ pub fn get_version() -> (u32, u32, u32) {\n     }\n }\n \n+/// Returns `true` if this LLVM is Rust's bundled LLVM (and not system LLVM).\n+pub fn is_rust_llvm() -> bool {\n+    // Can be called without initializing LLVM\n+    unsafe { llvm::LLVMRustIsRustLLVM() }\n+}\n+\n pub fn print_passes() {\n     // Can be called without initializing LLVM\n     unsafe {"}, {"sha": "dcfe5fcc2ca735aeba3339925f06355d4d390e29", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -160,11 +160,7 @@ impl<'a, 'tcx> TerminatorCodegenHelper<'tcx> {\n             let llret = bx.call(fn_ty, fn_ptr, &llargs, self.funclet(fx));\n             bx.apply_attrs_callsite(&fn_abi, llret);\n             if fx.mir[self.bb].is_cleanup {\n-                // Cleanup is always the cold path. Don't inline\n-                // drop glue. Also, when there is a deeply-nested\n-                // struct, there are \"symmetry\" issues that cause\n-                // exponential inlining - see issue #41696.\n-                bx.do_not_inline(llret);\n+                bx.apply_attrs_to_cleanup_callsite(llret);\n             }\n \n             if let Some((ret_dest, target)) = destination {"}, {"sha": "48d88095855d11300667659b63d76e3fdc5f4963", "filename": "compiler/rustc_codegen_ssa/src/traits/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fbuilder.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -311,5 +311,5 @@ pub trait BuilderMethods<'a, 'tcx>:\n     ) -> Self::Value;\n     fn zext(&mut self, val: Self::Value, dest_ty: Self::Type) -> Self::Value;\n \n-    fn do_not_inline(&mut self, llret: Self::Value);\n+    fn apply_attrs_to_cleanup_callsite(&mut self, llret: Self::Value);\n }"}, {"sha": "025a0ee376e3e5e6f390ca00b2c23929446a0dbd", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -716,6 +716,14 @@ extern \"C\" uint32_t LLVMRustVersionMinor() { return LLVM_VERSION_MINOR; }\n \n extern \"C\" uint32_t LLVMRustVersionMajor() { return LLVM_VERSION_MAJOR; }\n \n+extern \"C\" bool LLVMRustIsRustLLVM() {\n+#ifdef LLVM_RUSTLLVM\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n                                       uint32_t Value) {\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);"}, {"sha": "650d5b230f4c23a52cc90061047cc9f04fa7d108", "filename": "src/test/codegen/unwind-landingpad-cold.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-cold.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -0,0 +1,15 @@\n+// no-system-llvm: needs #92110\n+// compile-flags: -Cno-prepopulate-passes\n+#![crate_type = \"lib\"]\n+\n+// This test checks that drop calls in unwind landing pads\n+// get the `cold` attribute.\n+\n+// CHECK-LABEL: @check_cold\n+// CHECK: call void {{.+}}drop_in_place{{.+}} [[ATTRIBUTES:#[0-9]+]]\n+// CHECK: attributes [[ATTRIBUTES]] = { cold }\n+#[no_mangle]\n+pub fn check_cold(f: fn(), x: Box<u32>) {\n+    // this may unwind\n+    f();\n+}"}, {"sha": "ce78d075dd0f4838bb61cc17f21c376400a4caeb", "filename": "src/test/codegen/unwind-landingpad-inline.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f49627c6fe2a32d1fed6310466bb0e1c535c0c0/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funwind-landingpad-inline.rs?ref=4f49627c6fe2a32d1fed6310466bb0e1c535c0c0", "patch": "@@ -0,0 +1,37 @@\n+// no-system-llvm: needs #92110 + patch for Rust alloc/dealloc functions\n+// compile-flags: -Copt-level=3\n+#![crate_type = \"lib\"]\n+\n+// This test checks that we can inline drop_in_place in\n+// unwind landing pads.\n+\n+// Without inlining, the box pointers escape via the call to drop_in_place,\n+// and LLVM will not optimize out the pointer comparison.\n+// With inlining, everything should be optimized out.\n+// See https://github.com/rust-lang/rust/issues/46515\n+// CHECK-LABEL: @check_no_escape_in_landingpad\n+// CHECK: start:\n+// CHECK-NEXT: ret void\n+#[no_mangle]\n+pub fn check_no_escape_in_landingpad(f: fn()) {\n+    let x = &*Box::new(0);\n+    let y = &*Box::new(0);\n+\n+    if x as *const _ == y as *const _ {\n+        f();\n+    }\n+}\n+\n+// Without inlining, the compiler can't tell that\n+// dropping an empty string (in a landing pad) does nothing.\n+// With inlining, the landing pad should be optimized out.\n+// See https://github.com/rust-lang/rust/issues/87055\n+// CHECK-LABEL: @check_eliminate_noop_drop\n+// CHECK: start:\n+// CHECK-NEXT: call void %g()\n+// CHECK-NEXT: ret void\n+#[no_mangle]\n+pub fn check_eliminate_noop_drop(g: fn()) {\n+    let _var = String::new();\n+    g();\n+}"}]}