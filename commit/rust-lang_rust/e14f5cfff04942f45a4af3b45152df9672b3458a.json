{"sha": "e14f5cfff04942f45a4af3b45152df9672b3458a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNGY1Y2ZmZjA0OTQyZjQ1YTRhZjNiNDUxNTJkZjk2NzJiMzQ1OGE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T11:13:12Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-17T11:13:12Z"}, "message": "Move out and rewrite UseTree completion tests", "tree": {"sha": "0ed0353823e6194bc5f940d2033ab2c0788f19fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ed0353823e6194bc5f940d2033ab2c0788f19fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e14f5cfff04942f45a4af3b45152df9672b3458a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e14f5cfff04942f45a4af3b45152df9672b3458a", "html_url": "https://github.com/rust-lang/rust/commit/e14f5cfff04942f45a4af3b45152df9672b3458a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e14f5cfff04942f45a4af3b45152df9672b3458a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6b8af44829521a9f925c4d87599efa3fef38edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6b8af44829521a9f925c4d87599efa3fef38edc", "html_url": "https://github.com/rust-lang/rust/commit/d6b8af44829521a9f925c4d87599efa3fef38edc"}], "stats": {"total": 486, "additions": 262, "deletions": 224}, "files": [{"sha": "b6f06a44fb6c5f8a441b77434cc2552180f30c25", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=e14f5cfff04942f45a4af3b45152df9672b3458a", "patch": "@@ -199,41 +199,6 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n-    #[test]\n-    fn test_keywords_in_use_stmt() {\n-        check(\n-            r\"use $0\",\n-            expect![[r#\"\n-                kw crate::\n-                kw self\n-                kw super::\n-            \"#]],\n-        );\n-\n-        // FIXME: `self` shouldn't be shown here and the check below\n-        check(\n-            r\"use a::$0\",\n-            expect![[r#\"\n-            kw self\n-        \"#]],\n-        );\n-\n-        check(\n-            r\"use super::$0\",\n-            expect![[r#\"\n-                kw self\n-                kw super::\n-            \"#]],\n-        );\n-\n-        check(\n-            r\"use a::{b, $0}\",\n-            expect![[r#\"\n-            kw self\n-        \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn test_keywords_in_function() {\n         check("}, {"sha": "5b49868e4e0a40f8521d37ef11ca81f5ce509779", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 0, "deletions": 157, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=e14f5cfff04942f45a4af3b45152df9672b3458a", "patch": "@@ -212,12 +212,6 @@ mod tests {\n         expect.assert_eq(&actual);\n     }\n \n-    #[test]\n-    fn dont_complete_current_use() {\n-        cov_mark::check!(dont_complete_current_use);\n-        check(r#\"use self::foo$0;\"#, expect![[\"\"]]);\n-    }\n-\n     #[test]\n     fn dont_complete_values_in_type_pos() {\n         check(\n@@ -248,20 +242,6 @@ fn foo() {\n         );\n     }\n \n-    #[test]\n-    fn dont_complete_current_use_in_braces_with_glob() {\n-        check(\n-            r#\"\n-mod foo { pub struct S; }\n-use self::{foo::*, bar$0};\n-\"#,\n-            expect![[r#\"\n-                st S\n-                md foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn dont_complete_primitive_in_use() {\n         check_builtin(r#\"use self::$0;\"#, expect![[\"\"]]);\n@@ -298,108 +278,6 @@ use self::{foo::*, bar$0};\n         );\n     }\n \n-    #[test]\n-    fn completes_mod_with_same_name_as_function() {\n-        check(\n-            r#\"\n-use self::my::$0;\n-\n-mod my { pub struct Bar; }\n-fn my() {}\n-\"#,\n-            expect![[r#\"\n-                st Bar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn filters_visibility() {\n-        check(\n-            r#\"\n-use self::my::$0;\n-\n-mod my {\n-    struct Bar;\n-    pub struct Foo;\n-    pub use Bar as PublicBar;\n-}\n-\"#,\n-            expect![[r#\"\n-                st Foo\n-                st PublicBar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_use_item_starting_with_self() {\n-        check(\n-            r#\"\n-use self::m::$0;\n-\n-mod m { pub struct Bar; }\n-\"#,\n-            expect![[r#\"\n-                st Bar\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_use_item_starting_with_crate() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-struct Spam;\n-//- /foo.rs\n-use crate::Sp$0\n-\"#,\n-            expect![[r#\"\n-                md foo\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_nested_use_tree() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-struct Spam;\n-//- /foo.rs\n-use crate::{Sp$0};\n-\"#,\n-            expect![[r#\"\n-                md foo\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn completes_deeply_nested_use_tree() {\n-        check(\n-            r#\"\n-//- /lib.rs\n-mod foo;\n-pub mod bar {\n-    pub mod baz {\n-        pub struct Spam;\n-    }\n-}\n-//- /foo.rs\n-use crate::{bar::{baz::Sp$0}};\n-\"#,\n-            expect![[r#\"\n-                st Spam\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_enum_variant() {\n         check(\n@@ -496,22 +374,6 @@ fn foo() { let _ = U::$0 }\n         );\n     }\n \n-    #[test]\n-    fn completes_use_paths_across_crates() {\n-        check(\n-            r#\"\n-//- /main.rs crate:main deps:foo\n-use foo::$0;\n-\n-//- /foo/lib.rs crate:foo\n-pub mod bar { pub struct S; }\n-\"#,\n-            expect![[r#\"\n-                md bar\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_trait_associated_method_1() {\n         check(\n@@ -713,25 +575,6 @@ impl MyStruct {\n         );\n     }\n \n-    #[test]\n-    fn test_super_super_completion() {\n-        check(\n-            r#\"\n-mod a {\n-    const A: usize = 0;\n-    mod b {\n-        const B: usize = 0;\n-        mod c { use super::super::$0 }\n-    }\n-}\n-\"#,\n-            expect![[r#\"\n-                md b\n-                ct A\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_reexported_items_under_correct_name() {\n         check("}, {"sha": "83b9148b31d3825a2e99b3fa07f8d622a965612e", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=e14f5cfff04942f45a4af3b45152df9672b3458a", "patch": "@@ -129,22 +129,6 @@ fn foo() {\n         );\n     }\n \n-    #[test]\n-    fn only_completes_modules_in_import() {\n-        cov_mark::check!(only_completes_modules_in_import);\n-        check(\n-            r#\"\n-use f$0\n-\n-struct Foo;\n-mod foo {}\n-\"#,\n-            expect![[r#\"\n-                md foo\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn bind_pat_and_path_ignore_at() {\n         check(\n@@ -358,22 +342,6 @@ fn _alpha() {}\n         )\n     }\n \n-    #[test]\n-    fn completes_extern_prelude() {\n-        check(\n-            r#\"\n-//- /lib.rs crate:main deps:other_crate\n-use $0;\n-\n-//- /other_crate/lib.rs crate:other_crate\n-// nothing here\n-\"#,\n-            expect![[r#\"\n-                md other_crate\n-            \"#]],\n-        );\n-    }\n-\n     #[test]\n     fn completes_module_items_in_nested_modules() {\n         check("}, {"sha": "89c7fb524eca57a4d2f12d8a10f56c927ca4d5bf", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=e14f5cfff04942f45a4af3b45152df9672b3458a", "patch": "@@ -1,4 +1,5 @@\n mod item_list;\n+mod use_tree;\n \n use hir::{PrefixKind, Semantics};\n use ide_db::{"}, {"sha": "156ca244dc6563d94a25a33f027b40fda988c610", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e14f5cfff04942f45a4af3b45152df9672b3458a/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=e14f5cfff04942f45a4af3b45152df9672b3458a", "patch": "@@ -0,0 +1,261 @@\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn use_tree_start() {\n+    cov_mark::check!(only_completes_modules_in_import);\n+    check(\n+        r#\"\n+//- /lib.rs crate:main deps:other_crate\n+use f$0\n+\n+struct Foo;\n+mod foo {}\n+//- /other_crate/lib.rs crate:other_crate\n+// nothing here\n+\"#,\n+        // FIXME: self in this case should also get the colons\n+        expect![[r#\"\n+            kw crate::\n+            kw self\n+            kw super::\n+            md foo\n+            md other_crate\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn dont_complete_current_use() {\n+    cov_mark::check!(dont_complete_current_use);\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"use self::foo$0;\"#,\n+        expect![[r#\"\n+        kw self\n+    \"#]],\n+    );\n+    check(\n+        r#\"\n+mod foo { pub struct S; }\n+use self::{foo::*, bar$0};\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st S\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn nested_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct FooBar;\n+    }\n+}\n+use foo::{bar::$0}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st FooBar\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub struct FooBar;\n+    }\n+}\n+use foo::{$0}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn deeply_nested_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct FooBarBaz;\n+        }\n+    }\n+}\n+use foo::{bar::{baz::$0}}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st FooBarBaz\n+        \"#]],\n+    );\n+    check(\n+        r#\"\n+mod foo {\n+    pub mod bar {\n+        pub mod baz {\n+            pub struct FooBarBaz;\n+        }\n+    }\n+}\n+use foo::{bar::{$0}}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md baz\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn plain_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+use foo::$0\n+\n+mod foo {\n+    struct Private;\n+    pub struct Foo;\n+}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st Foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn self_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+use self::$0\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md foo\n+            st Bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn super_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+mod bar {\n+    use super::$0\n+}\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            kw super::\n+            st Bar\n+            md bar\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn super_super_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+mod a {\n+    const A: usize = 0;\n+    mod b {\n+        const B: usize = 0;\n+        mod c { use super::super::$0 }\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            kw super::\n+            md b\n+            ct A\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn crate_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+use crate::$0\n+\n+mod foo {}\n+struct Bar;\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            md foo\n+            st Bar\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn extern_crate_qualified_use_tree() {\n+    // FIXME: self shouldn't be here\n+    check(\n+        r#\"\n+//- /lib.rs crate:main deps:other_crate\n+use other_crate::$0\n+//- /other_crate/lib.rs crate:other_crate\n+pub struct Foo;\n+pub mod foo {}\n+\"#,\n+        expect![[r#\"\n+            kw self\n+            st Foo\n+            md foo\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn pub_use_tree() {\n+    check(\n+        r#\"\n+pub struct X;\n+pub mod bar {}\n+pub use $0;\n+\"#,\n+        expect![[r#\"\n+            kw crate::\n+            kw self\n+            kw super::\n+            md bar\n+        \"#]],\n+    );\n+}"}]}