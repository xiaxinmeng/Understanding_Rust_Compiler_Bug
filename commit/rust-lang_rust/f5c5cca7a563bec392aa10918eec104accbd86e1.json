{"sha": "f5c5cca7a563bec392aa10918eec104accbd86e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YzVjY2E3YTU2M2JlYzM5MmFhMTA5MThlZWMxMDRhY2NiZDg2ZTE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-05-26T11:32:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-26T11:32:07Z"}, "message": "Rollup merge of #85627 - LeSeulArtichaut:thir-unsafe-fn-lint, r=nikomatsakis\n\nFix a few details in THIR unsafeck\n\nThis makes it consistent with RFC 2585 (`unsafe_op_in_unsafe_fn`) and with the MIR unsafeck.\n\nr? `@nikomatsakis`", "tree": {"sha": "c56a99331d91cc3cfe2c910f18d3f6e6dca1929a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c56a99331d91cc3cfe2c910f18d3f6e6dca1929a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5c5cca7a563bec392aa10918eec104accbd86e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgrjG4CRBK7hj4Ov3rIwAAiwkIAKylyCY+atQ8zpDvGK7Nk/WC\nqIfOELZ3qTEeo2Fej1G9SmccD14KCFxLvmz+WpJMg5WLpm9k06OqhG76JQJVChLe\nKclPT0e1Z78o00yQ0MYcFQVGQwA3zdp9UUj7pVh4EPy5QNiu6psIR1Y6cTi3AE/U\n/mhfpmCoxKg+1QRVDwkEckswjSf7t28O0/9rfRS4PxHHbHOtRM2fUeDZkJtOMxwV\nkhyzU1UR8es8NOgPTBsgE528qpIwF/SurcPT+9dutO+nNHhPQUKBnVtkHurFyiuq\nIusni7so0B+WSyNWfGgGu4WQykkQNuQisXtIa6P6dyiDmsOY/B2LL+lzA7paqMg=\n=WyJf\n-----END PGP SIGNATURE-----\n", "payload": "tree c56a99331d91cc3cfe2c910f18d3f6e6dca1929a\nparent 27899e3887c1e7c767b51ca5ee5e88ac4a543687\nparent f9e08cd75f4bc49f3c2e1e0c2e5b654e11c727c5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1622028727 +0200\ncommitter GitHub <noreply@github.com> 1622028727 +0200\n\nRollup merge of #85627 - LeSeulArtichaut:thir-unsafe-fn-lint, r=nikomatsakis\n\nFix a few details in THIR unsafeck\n\nThis makes it consistent with RFC 2585 (`unsafe_op_in_unsafe_fn`) and with the MIR unsafeck.\n\nr? `@nikomatsakis`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5c5cca7a563bec392aa10918eec104accbd86e1", "html_url": "https://github.com/rust-lang/rust/commit/f5c5cca7a563bec392aa10918eec104accbd86e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5c5cca7a563bec392aa10918eec104accbd86e1/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27899e3887c1e7c767b51ca5ee5e88ac4a543687", "url": "https://api.github.com/repos/rust-lang/rust/commits/27899e3887c1e7c767b51ca5ee5e88ac4a543687", "html_url": "https://github.com/rust-lang/rust/commit/27899e3887c1e7c767b51ca5ee5e88ac4a543687"}, {"sha": "f9e08cd75f4bc49f3c2e1e0c2e5b654e11c727c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e08cd75f4bc49f3c2e1e0c2e5b654e11c727c5", "html_url": "https://github.com/rust-lang/rust/commit/f9e08cd75f4bc49f3c2e1e0c2e5b654e11c727c5"}], "stats": {"total": 198, "additions": 166, "deletions": 32}, "files": [{"sha": "971b6dd9e1c8905bcd592f56342eba299fc9cd1e", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f5c5cca7a563bec392aa10918eec104accbd86e1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c5cca7a563bec392aa10918eec104accbd86e1/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=f5c5cca7a563bec392aa10918eec104accbd86e1", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             self.warn_unused_unsafe(\n                 hir_id,\n                 block_span,\n-                Some(self.tcx.sess.source_map().guess_head_span(enclosing_span)),\n+                Some((self.tcx.sess.source_map().guess_head_span(enclosing_span), \"block\")),\n             );\n             f(self);\n         } else {\n@@ -52,7 +52,15 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             f(self);\n \n             if let SafetyContext::UnsafeBlock { used: false, span, hir_id } = self.safety_context {\n-                self.warn_unused_unsafe(hir_id, span, self.body_unsafety.unsafe_fn_sig_span());\n+                self.warn_unused_unsafe(\n+                    hir_id,\n+                    span,\n+                    if self.unsafe_op_in_unsafe_fn_allowed() {\n+                        self.body_unsafety.unsafe_fn_sig_span().map(|span| (span, \"fn\"))\n+                    } else {\n+                        None\n+                    },\n+                );\n             }\n             self.safety_context = prev_context;\n             return;\n@@ -72,16 +80,20 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {\n                 // unsafe_op_in_unsafe_fn is disallowed\n-                struct_span_err!(\n-                    self.tcx.sess,\n+                self.tcx.struct_span_lint_hir(\n+                    UNSAFE_OP_IN_UNSAFE_FN,\n+                    self.hir_context,\n                     span,\n-                    E0133,\n-                    \"{} is unsafe and requires unsafe block\",\n-                    description,\n+                    |lint| {\n+                        lint.build(&format!(\n+                            \"{} is unsafe and requires unsafe block (error E0133)\",\n+                            description,\n+                        ))\n+                        .span_label(span, description)\n+                        .note(note)\n+                        .emit();\n+                    },\n                 )\n-                .span_label(span, description)\n-                .note(note)\n-                .emit();\n             }\n             SafetyContext::Safe => {\n                 let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n@@ -104,18 +116,15 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n         &self,\n         hir_id: hir::HirId,\n         block_span: Span,\n-        enclosing_span: Option<Span>,\n+        enclosing_unsafe: Option<(Span, &'static str)>,\n     ) {\n         let block_span = self.tcx.sess.source_map().guess_head_span(block_span);\n         self.tcx.struct_span_lint_hir(UNUSED_UNSAFE, hir_id, block_span, |lint| {\n             let msg = \"unnecessary `unsafe` block\";\n             let mut db = lint.build(msg);\n             db.span_label(block_span, msg);\n-            if let Some(enclosing_span) = enclosing_span {\n-                db.span_label(\n-                    enclosing_span,\n-                    format!(\"because it's nested under this `unsafe` block\"),\n-                );\n+            if let Some((span, kind)) = enclosing_unsafe {\n+                db.span_label(span, format!(\"because it's nested under this `unsafe` {}\", kind));\n             }\n             db.emit();\n         });"}, {"sha": "9a522fac65fad7d4681411200a99f539fc3091dc", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "renamed", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=f5c5cca7a563bec392aa10918eec104accbd86e1", "patch": "@@ -1,90 +1,90 @@\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:9:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:1:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:11:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:13:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:19:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:2:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:5:9\n    |\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:28:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:30:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n    |\n LL |     unsafe {}\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:44:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n    |     |\n    |     because it's nested under this `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:55:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:58:5\n    |\n LL | unsafe fn allow_level() {\n    | ----------------------- because it's nested under this `unsafe` fn\n@@ -93,7 +93,7 @@ LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:67:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:70:9\n    |\n LL | unsafe fn nested_allow_level() {\n    | ------------------------------ because it's nested under this `unsafe` fn\n@@ -102,15 +102,15 @@ LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:73:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:77:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function", "previous_filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr"}, {"sha": "7ca714b85c216a940a79733a24c4229792ce3705", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=f5c5cca7a563bec392aa10918eec104accbd86e1", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Zthir-unsafeck\n+\n #![deny(unsafe_op_in_unsafe_fn)]\n #![deny(unused_unsafe)]\n "}, {"sha": "ad87690bb52f04869ef5792a29286931ebdafb8e", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f5c5cca7a563bec392aa10918eec104accbd86e1/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=f5c5cca7a563bec392aa10918eec104accbd86e1", "patch": "@@ -0,0 +1,122 @@\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n+   |\n+LL | #![deny(unsafe_op_in_unsafe_fn)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:14:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:16:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:19:5\n+   |\n+LL |     unsafe {}\n+   |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:5:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n+   |\n+LL | #[deny(warnings)]\n+   |        ^^^^^^^^\n+   = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n+   |\n+LL |     *PTR;\n+   |     ^^^^ dereference of raw pointer\n+   |\n+   = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n+\n+error: use of mutable static is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+   |\n+LL |     VOID = ();\n+   |     ^^^^ use of mutable static\n+   |\n+   = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:33:5\n+   |\n+LL |     unsafe {}\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:47:14\n+   |\n+LL |     unsafe { unsafe { unsf() } }\n+   |     ------   ^^^^^^ unnecessary `unsafe` block\n+   |     |\n+   |     because it's nested under this `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:58:5\n+   |\n+LL | unsafe fn allow_level() {\n+   | ----------------------- because it's nested under this `unsafe` fn\n+...\n+LL |     unsafe { unsf() }\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:70:9\n+   |\n+LL | unsafe fn nested_allow_level() {\n+   | ------------------------------ because it's nested under this `unsafe` fn\n+...\n+LL |         unsafe { unsf() }\n+   |         ^^^^^^ unnecessary `unsafe` block\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n+   |\n+LL |     unsf();\n+   |     ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n+   |\n+LL |         unsf();\n+   |         ^^^^^^ call to unsafe function\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+\n+error: aborting due to 13 previous errors\n+\n+For more information about this error, try `rustc --explain E0133`."}]}