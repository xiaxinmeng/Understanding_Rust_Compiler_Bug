{"sha": "b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMmFmZTllZTdjZTg5YWM5ZjgyZmUzMTVmMDllNDlkOWQ4Y2VlZjg=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:43Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:43Z"}, "message": "rollup merge of #18990: alfie/master", "tree": {"sha": "bcb1bc3b4901167747f5f8f84f029f62f81803c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcb1bc3b4901167747f5f8f84f029f62f81803c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8", "html_url": "https://github.com/rust-lang/rust/commit/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8/comments", "author": null, "committer": null, "parents": [{"sha": "a9f9e80de5df8bf30e24a6521d5853660c1823d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9e80de5df8bf30e24a6521d5853660c1823d5", "html_url": "https://github.com/rust-lang/rust/commit/a9f9e80de5df8bf30e24a6521d5853660c1823d5"}, {"sha": "c5232615b6669431b70720d25f68b5c1bc9662e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5232615b6669431b70720d25f68b5c1bc9662e2", "html_url": "https://github.com/rust-lang/rust/commit/c5232615b6669431b70720d25f68b5c1bc9662e2"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "e57953db3a256fd2463ad6a04d3015dccd830c96", "filename": "src/doc/complement-design-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8/src%2Fdoc%2Fcomplement-design-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8/src%2Fdoc%2Fcomplement-design-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fcomplement-design-faq.md?ref=b22afe9ee7ce89ac9f82fe315f09e49d9d8ceef8", "patch": "@@ -95,7 +95,7 @@ code should need to run is a stack.\n `match` being exhaustive has some useful properties. First, if every\n possibility is covered by the `match`, adding further variants to the `enum`\n in the future will prompt a compilation failure, rather than runtime panic.\n-Second, it makes cost explicit. In general, only safe way to have a\n+Second, it makes cost explicit. In general, the only safe way to have a\n non-exhaustive match would be to panic the task if nothing is matched, though\n it could fall through if the type of the `match` expression is `()`. This sort\n of hidden cost and special casing is against the language's philosophy. It's"}]}