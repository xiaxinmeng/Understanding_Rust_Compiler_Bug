{"sha": "5cd02eaece8cf537054960d0d6db67096e78865d", "node_id": "C_kwDOAAsO6NoAKDVjZDAyZWFlY2U4Y2Y1MzcwNTQ5NjBkMGQ2ZGI2NzA5NmU3ODg2NWQ", "commit": {"author": {"name": "Jules Bertholet", "email": "julesbertholet@quoi.xyz", "date": "2023-05-23T07:01:28Z"}, "committer": {"name": "Jules Bertholet", "email": "julesbertholet@quoi.xyz", "date": "2023-05-23T16:46:25Z"}, "message": "Always require closure parameters to be `Sized`\n\nThe `rust-call` ABI isn't compatible with\n`#![feature(unsized_fn_params)]`, so trying to use that feature with\nclosures leads to an ICE (#67981). This turns that ICE into a\ntype-check error.", "tree": {"sha": "c82eee0279aa5e2c7b2fbe61e8cc6955d01fcd80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c82eee0279aa5e2c7b2fbe61e8cc6955d01fcd80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cd02eaece8cf537054960d0d6db67096e78865d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEMF9QrRtpLpRzqgMeMgNNr8OMG/wFAmRs7eMACgkQMgNNr8OM\nG/yc+BAAhV9ds9LwUe9/aN4kgRUkF0uK93I+EkI7blXHqINpGvFBNEXZws6S2how\n5KarW0duy8pp0SWzmlc5Vjj44xHBzejBZm8qG8meJzCOAfhTdqzGHJ8fm4LMa6O8\n188nvNphT95A052wmrWh8RiACVJkExy+n6lHwUaRYmIs/uu7vcBzIEubM3LrdPiT\nk23yhyBvcGWZdQ+GwPhd6fr8hxLVo/tC6XSkUhTxCoBjN6vFKctOyHb5LZH7CdBI\nwZIDC5/RYzEgcLpMw8rFYVysOCH14TUseMZSFGcCD484g4FoMiolPMs1M36faieX\nT89WITSwJ/9GxE0Y7NeKsUtERSHqlgtVwZmc5W0gnnr1K8iLQonhaZRm2oeR4acg\nSwr+DrxTptkBDuuFLLARypFX0G2bbQx6yclWbX/YHuaA/r1H3Vt0v6FvuEnKbrbv\n2PUO3F3VCfRVe9kRJLwgyJE1WtAmhXoPLSVExYAu8oTwhosvyW+0cPGGxcNSzjjG\nFLufzrxkgVCwHARUafeDzCItBTlxf87Jq2J9gTHYFg5fXImYjpTES88ikBaKCwDC\nJTRYf2Bzi5VFQ7ZIgPXsp4ntBlh7C+6G+0kWj9RdzpCEDE0ji7oAUV6QFOWhf0Tf\nSztgTjjx4VWX94/cbJlxsaqZvv1gx9WLLyP5umSV1/lXDhgUmLg=\n=49bM\n-----END PGP SIGNATURE-----", "payload": "tree c82eee0279aa5e2c7b2fbe61e8cc6955d01fcd80\nparent 8b4b20836b832e91aa605a2faf5e2a55190202c8\nauthor Jules Bertholet <julesbertholet@quoi.xyz> 1684825288 -0400\ncommitter Jules Bertholet <julesbertholet@quoi.xyz> 1684860385 -0400\n\nAlways require closure parameters to be `Sized`\n\nThe `rust-call` ABI isn't compatible with\n`#![feature(unsized_fn_params)]`, so trying to use that feature with\nclosures leads to an ICE (#67981). This turns that ICE into a\ntype-check error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cd02eaece8cf537054960d0d6db67096e78865d", "html_url": "https://github.com/rust-lang/rust/commit/5cd02eaece8cf537054960d0d6db67096e78865d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cd02eaece8cf537054960d0d6db67096e78865d/comments", "author": {"login": "Jules-Bertholet", "id": 79955405, "node_id": "MDQ6VXNlcjc5OTU1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/79955405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jules-Bertholet", "html_url": "https://github.com/Jules-Bertholet", "followers_url": "https://api.github.com/users/Jules-Bertholet/followers", "following_url": "https://api.github.com/users/Jules-Bertholet/following{/other_user}", "gists_url": "https://api.github.com/users/Jules-Bertholet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jules-Bertholet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jules-Bertholet/subscriptions", "organizations_url": "https://api.github.com/users/Jules-Bertholet/orgs", "repos_url": "https://api.github.com/users/Jules-Bertholet/repos", "events_url": "https://api.github.com/users/Jules-Bertholet/events{/privacy}", "received_events_url": "https://api.github.com/users/Jules-Bertholet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jules-Bertholet", "id": 79955405, "node_id": "MDQ6VXNlcjc5OTU1NDA1", "avatar_url": "https://avatars.githubusercontent.com/u/79955405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jules-Bertholet", "html_url": "https://github.com/Jules-Bertholet", "followers_url": "https://api.github.com/users/Jules-Bertholet/followers", "following_url": "https://api.github.com/users/Jules-Bertholet/following{/other_user}", "gists_url": "https://api.github.com/users/Jules-Bertholet/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jules-Bertholet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jules-Bertholet/subscriptions", "organizations_url": "https://api.github.com/users/Jules-Bertholet/orgs", "repos_url": "https://api.github.com/users/Jules-Bertholet/repos", "events_url": "https://api.github.com/users/Jules-Bertholet/events{/privacy}", "received_events_url": "https://api.github.com/users/Jules-Bertholet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b4b20836b832e91aa605a2faf5e2a55190202c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b4b20836b832e91aa605a2faf5e2a55190202c8", "html_url": "https://github.com/rust-lang/rust/commit/8b4b20836b832e91aa605a2faf5e2a55190202c8"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "3e5d808325ccb688768c5e12f461b6fe67e3dc45", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=5cd02eaece8cf537054960d0d6db67096e78865d", "patch": "@@ -32,6 +32,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n     fn_def_id: LocalDefId,\n     body: &'tcx hir::Body<'tcx>,\n     can_be_generator: Option<hir::Movability>,\n+    params_can_be_unsized: bool,\n ) -> Option<GeneratorTypes<'tcx>> {\n     let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n \n@@ -94,7 +95,7 @@ pub(super) fn check_fn<'a, 'tcx>(\n         // The check for a non-trivial pattern is a hack to avoid duplicate warnings\n         // for simple cases like `fn foo(x: Trait)`,\n         // where we would error once on the parameter as a whole, and once on the binding `x`.\n-        if param.pat.simple_ident().is_none() && !tcx.features().unsized_fn_params {\n+        if param.pat.simple_ident().is_none() && !params_can_be_unsized {\n             fcx.require_type_is_sized(param_ty, param.pat.span, traits::SizedArgumentType(ty_span));\n         }\n "}, {"sha": "9659a0ec13d4029324bd61e909b180622db7a2d6", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=5cd02eaece8cf537054960d0d6db67096e78865d", "patch": "@@ -89,6 +89,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             expr_def_id,\n             body,\n             closure.movability,\n+            // Closure \"rust-call\" ABI doesn't support unsized params\n+            false,\n         );\n \n         let parent_substs = InternalSubsts::identity_for_item("}, {"sha": "b97b55d8f7ee824e50327ff9ce8f7e9bfebc9020", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd02eaece8cf537054960d0d6db67096e78865d/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=5cd02eaece8cf537054960d0d6db67096e78865d", "patch": "@@ -212,7 +212,7 @@ fn typeck_with_fallback<'tcx>(\n         let fn_sig = tcx.liberate_late_bound_regions(def_id.to_def_id(), fn_sig);\n         let fn_sig = fcx.normalize(body.value.span, fn_sig);\n \n-        check_fn(&mut fcx, fn_sig, decl, def_id, body, None);\n+        check_fn(&mut fcx, fn_sig, decl, def_id, body, None, tcx.features().unsized_fn_params);\n     } else {\n         let expected_type = if let Some(&hir::Ty { kind: hir::TyKind::Infer, span, .. }) = body_ty {\n             Some(fcx.next_ty_var(TypeVariableOrigin {"}, {"sha": "3eb6498e9dcff64e43acba36568df6a1331d0605", "filename": "tests/ui/unsized-locals/issue-67981.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cd02eaece8cf537054960d0d6db67096e78865d/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cd02eaece8cf537054960d0d6db67096e78865d/tests%2Fui%2Funsized-locals%2Fissue-67981.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.rs?ref=5cd02eaece8cf537054960d0d6db67096e78865d", "patch": "@@ -0,0 +1,9 @@\n+#![feature(unsized_fn_params)]\n+\n+fn main() {\n+    let f: fn([u8]) = |_| {};\n+    //~^ERROR the size for values of type `[u8]` cannot be known at compilation time\n+    let slice: Box<[u8]> = Box::new([1; 8]);\n+\n+    f(*slice);\n+}"}, {"sha": "a4b179ae2fd12b494ca770989cb6921b1718c5b8", "filename": "tests/ui/unsized-locals/issue-67981.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cd02eaece8cf537054960d0d6db67096e78865d/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5cd02eaece8cf537054960d0d6db67096e78865d/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized-locals%2Fissue-67981.stderr?ref=5cd02eaece8cf537054960d0d6db67096e78865d", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the size for values of type `[u8]` cannot be known at compilation time\n+  --> $DIR/issue-67981.rs:4:24\n+   |\n+LL |     let f: fn([u8]) = |_| {};\n+   |                        ^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `[u8]`\n+help: function arguments must have a statically known size, borrowed types always have a known size\n+   |\n+LL |     let f: fn([u8]) = |&_| {};\n+   |                        +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}