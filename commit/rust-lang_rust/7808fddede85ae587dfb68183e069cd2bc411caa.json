{"sha": "7808fddede85ae587dfb68183e069cd2bc411caa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MDhmZGRlZGU4NWFlNTg3ZGZiNjgxODNlMDY5Y2QyYmM0MTFjYWE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-27T03:34:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-27T03:34:11Z"}, "message": "Rollup merge of #42874 - zackmdavis:overzealous_by_outer_forbid, r=nikomatsakis\n\nonly set \"overruled by outer forbid\" once for lint groups, by group name\n\nPreviously, conflicting forbid/allow attributes for a lint group would\nresult in a separate \"allow(L) overruled by outer forbid(L)\" error for\nevery lint L in the group. This was needlessly and annoyingly verbose;\nwe prefer to just have one error pointing out the conflicting\nattributes.\n\n(Also, while we're touching context.rs, clean up some unused arguments.)\n\nResolves #42873.", "tree": {"sha": "a5fa161a40b8a65e53acd4ca8a8bb5daa3c245a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5fa161a40b8a65e53acd4ca8a8bb5daa3c245a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7808fddede85ae587dfb68183e069cd2bc411caa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7808fddede85ae587dfb68183e069cd2bc411caa", "html_url": "https://github.com/rust-lang/rust/commit/7808fddede85ae587dfb68183e069cd2bc411caa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7808fddede85ae587dfb68183e069cd2bc411caa/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1afcb6ae958ac3ad7ff39ad6ca6112366536b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1afcb6ae958ac3ad7ff39ad6ca6112366536b76", "html_url": "https://github.com/rust-lang/rust/commit/b1afcb6ae958ac3ad7ff39ad6ca6112366536b76"}, {"sha": "890a76f479e32d7509b85aadd48301634508de39", "url": "https://api.github.com/repos/rust-lang/rust/commits/890a76f479e32d7509b85aadd48301634508de39", "html_url": "https://github.com/rust-lang/rust/commit/890a76f479e32d7509b85aadd48301634508de39"}], "stats": {"total": 90, "additions": 73, "deletions": 17}, "files": [{"sha": "466d163854f1d81bd0a7d4fcb17199fbf979871a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 22, "deletions": 17, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7808fddede85ae587dfb68183e069cd2bc411caa", "patch": "@@ -291,16 +291,13 @@ impl LintStore {\n         self.by_name.insert(name.into(), Removed(reason.into()));\n     }\n \n-    #[allow(unused_variables)]\n-    fn find_lint(&self, lint_name: &str, sess: &Session, span: Option<Span>)\n-                 -> Result<LintId, FindLintError>\n-    {\n+    fn find_lint(&self, lint_name: &str) -> Result<LintId, FindLintError> {\n         match self.by_name.get(lint_name) {\n             Some(&Id(lint_id)) => Ok(lint_id),\n             Some(&Renamed(_, lint_id)) => {\n                 Ok(lint_id)\n             },\n-            Some(&Removed(ref reason)) => {\n+            Some(&Removed(_)) => {\n                 Err(FindLintError::Removed)\n             },\n             None => Err(FindLintError::NotFound)\n@@ -313,7 +310,7 @@ impl LintStore {\n                                     &lint_name[..], level);\n \n             let lint_flag_val = Symbol::intern(&lint_name);\n-            match self.find_lint(&lint_name[..], sess, None) {\n+            match self.find_lint(&lint_name[..]) {\n                 Ok(lint_id) => self.levels.set(lint_id, (level, CommandLine(lint_flag_val))),\n                 Err(FindLintError::Removed) => { }\n                 Err(_) => {\n@@ -724,21 +721,22 @@ pub trait LintContext<'tcx>: Sized {\n         let mut pushed = 0;\n \n         for result in gather_attrs(attrs) {\n-            let v = match result {\n+            let (is_group, lint_level_spans) = match result {\n                 Err(span) => {\n                     span_err!(self.sess(), span, E0452,\n                               \"malformed lint attribute\");\n                     continue;\n                 }\n                 Ok((lint_name, level, span)) => {\n-                    match self.lints().find_lint(&lint_name.as_str(), &self.sess(), Some(span)) {\n-                        Ok(lint_id) => vec![(lint_id, level, span)],\n+                    match self.lints().find_lint(&lint_name.as_str()) {\n+                        Ok(lint_id) => (false, vec![(lint_id, level, span)]),\n                         Err(FindLintError::NotFound) => {\n                             match self.lints().lint_groups.get(&*lint_name.as_str()) {\n-                                Some(&(ref v, _)) => v.iter()\n+                                Some(&(ref v, _)) => (true,\n+                                                      v.iter()\n                                                       .map(|lint_id: &LintId|\n                                                            (*lint_id, level, span))\n-                                                      .collect(),\n+                                                      .collect()),\n                                 None => {\n                                     // The lint or lint group doesn't exist.\n                                     // This is an error, but it was handled\n@@ -754,14 +752,18 @@ pub trait LintContext<'tcx>: Sized {\n \n             let lint_attr_name = result.expect(\"lint attribute should be well-formed\").0;\n \n-            for (lint_id, level, span) in v {\n+            for (lint_id, level, span) in lint_level_spans {\n                 let (now, now_source) = self.lint_sess().get_source(lint_id);\n                 if now == Forbid && level != Forbid {\n-                    let lint_name = lint_id.to_string();\n+                    let forbidden_lint_name = match now_source {\n+                        LintSource::Default => lint_id.to_string(),\n+                        LintSource::Node(name, _) => name.to_string(),\n+                        LintSource::CommandLine(name) => name.to_string(),\n+                    };\n                     let mut diag_builder = struct_span_err!(self.sess(), span, E0453,\n                                                             \"{}({}) overruled by outer forbid({})\",\n-                                                            level.as_str(), lint_name,\n-                                                            lint_name);\n+                                                            level.as_str(), lint_attr_name,\n+                                                            forbidden_lint_name);\n                     diag_builder.span_label(span, \"overruled by previous forbid\");\n                     match now_source {\n                         LintSource::Default => &mut diag_builder,\n@@ -772,7 +774,10 @@ pub trait LintContext<'tcx>: Sized {\n                         LintSource::CommandLine(_) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\")\n                         }\n-                    }.emit()\n+                    }.emit();\n+                    if is_group { // don't set a separate error for every lint in the group\n+                        break;\n+                    }\n                 } else if now != level {\n                     let cx = self.lint_sess_mut();\n                     cx.stack.push((lint_id, (now, now_source)));\n@@ -1420,7 +1425,7 @@ impl Decodable for LintId {\n     fn decode<D: Decoder>(d: &mut D) -> Result<LintId, D::Error> {\n         let s = d.read_str()?;\n         ty::tls::with(|tcx| {\n-            match tcx.sess.lint_store.borrow().find_lint(&s, tcx.sess, None) {\n+            match tcx.sess.lint_store.borrow().find_lint(&s) {\n                 Ok(id) => Ok(id),\n                 Err(_) => panic!(\"invalid lint-id `{}`\", s),\n             }"}, {"sha": "d71da58829a72772ca51a61d1e91ffe1f648c65c", "filename": "src/test/ui/lint/outer-forbid.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.rs?ref=7808fddede85ae587dfb68183e069cd2bc411caa", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Forbidding a group (here, `unused`) overrules subsequent allowance of both\n+// the group, and an individual lint in the group (here, `unused_variables`);\n+// and, forbidding an individual lint (here, `non_snake_case`) overrules\n+// subsequent allowance of a lint group containing it (here, `bad_style`). See\n+// Issue #42873.\n+\n+#![forbid(unused, non_snake_case)]\n+\n+#[allow(unused, unused_variables, bad_style)]\n+fn main() {\n+    println!(\"hello forbidden world\")\n+}"}, {"sha": "831b3f65634b2b805485b8dfbe8dd3dfe1899c43", "filename": "src/test/ui/lint/outer-forbid.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7808fddede85ae587dfb68183e069cd2bc411caa/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fouter-forbid.stderr?ref=7808fddede85ae587dfb68183e069cd2bc411caa", "patch": "@@ -0,0 +1,29 @@\n+error[E0453]: allow(unused) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:19:9\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |         ^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(unused_variables) overruled by outer forbid(unused)\n+  --> $DIR/outer-forbid.rs:19:17\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |           ------ `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |                 ^^^^^^^^^^^^^^^^ overruled by previous forbid\n+\n+error[E0453]: allow(bad_style) overruled by outer forbid(non_snake_case)\n+  --> $DIR/outer-forbid.rs:19:35\n+   |\n+17 | #![forbid(unused, non_snake_case)]\n+   |                   -------------- `forbid` level set here\n+18 | \n+19 | #[allow(unused, unused_variables, bad_style)]\n+   |                                   ^^^^^^^^^ overruled by previous forbid\n+\n+error: aborting due to previous error(s)\n+"}]}