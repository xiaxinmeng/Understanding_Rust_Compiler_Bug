{"sha": "191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5MWE2YmEzMzBiZDQ3ZmMzYjljYzA1ZDU5YjJkNDU2YjQ3MWViODk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T16:05:34Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T16:05:34Z"}, "message": "convenience api", "tree": {"sha": "9c7996d6ac7323da527fb53171b9275545d1640a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7996d6ac7323da527fb53171b9275545d1640a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "html_url": "https://github.com/rust-lang/rust/commit/191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6df224f7d3893f5a742b58818eac6c5a953721d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6df224f7d3893f5a742b58818eac6c5a953721d", "html_url": "https://github.com/rust-lang/rust/commit/a6df224f7d3893f5a742b58818eac6c5a953721d"}], "stats": {"total": 113, "additions": 63, "deletions": 50}, "files": [{"sha": "a35334d7e29784dc14e56bfd79a364c3cae3b856", "filename": "crates/ra_assists/src/ast_editor.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_assists%2Fsrc%2Fast_editor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fast_editor.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -299,7 +299,7 @@ mod tokens {\n             .tree()\n             .syntax()\n             .descendants_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == T![,])\n             .unwrap()\n     }\n@@ -309,7 +309,7 @@ mod tokens {\n             .tree()\n             .syntax()\n             .descendants_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \" \")\n             .unwrap()\n     }\n@@ -320,7 +320,7 @@ mod tokens {\n             .tree()\n             .syntax()\n             .descendants_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == WHITESPACE && it.text().as_str() == \"\\n\")\n             .unwrap()\n     }\n@@ -332,7 +332,7 @@ mod tokens {\n             WsBuilder(SourceFile::parse(text).ok().unwrap())\n         }\n         pub(crate) fn ws(&self) -> SyntaxToken {\n-            self.0.syntax().first_child_or_token().unwrap().as_token().cloned().unwrap()\n+            self.0.syntax().first_child_or_token().unwrap().into_token().unwrap()\n         }\n     }\n "}, {"sha": "292f61f4acc9ad95ef7c31cb6a8e2ae2af4db8bc", "filename": "crates/ra_ide_api/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fextend_selection.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -156,7 +156,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n                 SyntaxElement::Token(it) => is_single_line_ws(it),\n             })\n             .next()\n-            .and_then(|it| it.as_token().cloned())\n+            .and_then(|it| it.into_token())\n             .filter(|node| node.kind() == T![,])\n     }\n \n@@ -167,7 +167,7 @@ fn extend_list_item(node: &SyntaxNode) -> Option<TextRange> {\n         // Include any following whitespace when comma if after list item.\n         let final_node = comma_node\n             .next_sibling_or_token()\n-            .and_then(|it| it.as_token().cloned())\n+            .and_then(|it| it.into_token())\n             .filter(|node| is_single_line_ws(node))\n             .unwrap_or(comma_node);\n "}, {"sha": "9b81ad9e4b2251961ba4fcb03ba3d3e3c448eab7", "filename": "crates/ra_ide_api/src/join_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fjoin_lines.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -27,7 +27,7 @@ pub fn join_lines(file: &SourceFile, range: TextRange) -> TextEdit {\n         SyntaxElement::Token(token) => token.parent(),\n     };\n     let mut edit = TextEditBuilder::default();\n-    for token in node.descendants_with_tokens().filter_map(|it| it.as_token().cloned()) {\n+    for token in node.descendants_with_tokens().filter_map(|it| it.into_token()) {\n         let range = match range.intersection(&token.range()) {\n             Some(range) => range,\n             None => continue,"}, {"sha": "477827fa7107954ed19e77245400de75033c95bf", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -237,8 +237,7 @@ pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId, rainbow: boo\n     let mut buf = String::new();\n     buf.push_str(&STYLE);\n     buf.push_str(\"<pre><code>\");\n-    let tokens =\n-        parse.tree().syntax().descendants_with_tokens().filter_map(|it| it.as_token().cloned());\n+    let tokens = parse.tree().syntax().descendants_with_tokens().filter_map(|it| it.into_token());\n     for token in tokens {\n         could_intersect.retain(|it| token.range().start() <= it.range.end());\n         while let Some(r) = ranges.get(frontier) {"}, {"sha": "139bd3ec08b55260ad553393e8e7b39bc17b2ee2", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -60,7 +60,7 @@ impl ast::PrefixExpr {\n     }\n \n     pub fn op_token(&self) -> Option<SyntaxToken> {\n-        self.syntax().first_child_or_token()?.as_token().cloned()\n+        self.syntax().first_child_or_token()?.into_token()\n     }\n }\n \n@@ -132,41 +132,41 @@ pub enum BinOp {\n \n impl ast::BinExpr {\n     fn op_details(&self) -> Option<(SyntaxToken, BinOp)> {\n-        self.syntax().children_with_tokens().filter_map(|it| it.as_token().cloned()).find_map(|c| {\n-            match c.kind() {\n-                T![||] => Some((c, BinOp::BooleanOr)),\n-                T![&&] => Some((c, BinOp::BooleanAnd)),\n-                T![==] => Some((c, BinOp::EqualityTest)),\n-                T![!=] => Some((c, BinOp::NegatedEqualityTest)),\n-                T![<=] => Some((c, BinOp::LesserEqualTest)),\n-                T![>=] => Some((c, BinOp::GreaterEqualTest)),\n-                T![<] => Some((c, BinOp::LesserTest)),\n-                T![>] => Some((c, BinOp::GreaterTest)),\n-                T![+] => Some((c, BinOp::Addition)),\n-                T![*] => Some((c, BinOp::Multiplication)),\n-                T![-] => Some((c, BinOp::Subtraction)),\n-                T![/] => Some((c, BinOp::Division)),\n-                T![%] => Some((c, BinOp::Remainder)),\n-                T![<<] => Some((c, BinOp::LeftShift)),\n-                T![>>] => Some((c, BinOp::RightShift)),\n-                T![^] => Some((c, BinOp::BitwiseXor)),\n-                T![|] => Some((c, BinOp::BitwiseOr)),\n-                T![&] => Some((c, BinOp::BitwiseAnd)),\n-                T![..] => Some((c, BinOp::RangeRightOpen)),\n-                T![..=] => Some((c, BinOp::RangeRightClosed)),\n-                T![=] => Some((c, BinOp::Assignment)),\n-                T![+=] => Some((c, BinOp::AddAssign)),\n-                T![/=] => Some((c, BinOp::DivAssign)),\n-                T![*=] => Some((c, BinOp::MulAssign)),\n-                T![%=] => Some((c, BinOp::RemAssign)),\n-                T![>>=] => Some((c, BinOp::ShrAssign)),\n-                T![<<=] => Some((c, BinOp::ShlAssign)),\n-                T![-=] => Some((c, BinOp::SubAssign)),\n-                T![|=] => Some((c, BinOp::BitOrAssign)),\n-                T![&=] => Some((c, BinOp::BitAndAssign)),\n-                T![^=] => Some((c, BinOp::BitXorAssign)),\n-                _ => None,\n-            }\n+        self.syntax().children_with_tokens().filter_map(|it| it.into_token()).find_map(|c| match c\n+            .kind()\n+        {\n+            T![||] => Some((c, BinOp::BooleanOr)),\n+            T![&&] => Some((c, BinOp::BooleanAnd)),\n+            T![==] => Some((c, BinOp::EqualityTest)),\n+            T![!=] => Some((c, BinOp::NegatedEqualityTest)),\n+            T![<=] => Some((c, BinOp::LesserEqualTest)),\n+            T![>=] => Some((c, BinOp::GreaterEqualTest)),\n+            T![<] => Some((c, BinOp::LesserTest)),\n+            T![>] => Some((c, BinOp::GreaterTest)),\n+            T![+] => Some((c, BinOp::Addition)),\n+            T![*] => Some((c, BinOp::Multiplication)),\n+            T![-] => Some((c, BinOp::Subtraction)),\n+            T![/] => Some((c, BinOp::Division)),\n+            T![%] => Some((c, BinOp::Remainder)),\n+            T![<<] => Some((c, BinOp::LeftShift)),\n+            T![>>] => Some((c, BinOp::RightShift)),\n+            T![^] => Some((c, BinOp::BitwiseXor)),\n+            T![|] => Some((c, BinOp::BitwiseOr)),\n+            T![&] => Some((c, BinOp::BitwiseAnd)),\n+            T![..] => Some((c, BinOp::RangeRightOpen)),\n+            T![..=] => Some((c, BinOp::RangeRightClosed)),\n+            T![=] => Some((c, BinOp::Assignment)),\n+            T![+=] => Some((c, BinOp::AddAssign)),\n+            T![/=] => Some((c, BinOp::DivAssign)),\n+            T![*=] => Some((c, BinOp::MulAssign)),\n+            T![%=] => Some((c, BinOp::RemAssign)),\n+            T![>>=] => Some((c, BinOp::ShrAssign)),\n+            T![<<=] => Some((c, BinOp::ShlAssign)),\n+            T![-=] => Some((c, BinOp::SubAssign)),\n+            T![|=] => Some((c, BinOp::BitOrAssign)),\n+            T![&=] => Some((c, BinOp::BitAndAssign)),\n+            T![^=] => Some((c, BinOp::BitXorAssign)),\n+            _ => None,\n         })\n     }\n "}, {"sha": "753fc42c66c923040c83979d03b70a1c135501ef", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -239,7 +239,7 @@ impl ast::FnDef {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .last_child_or_token()\n-            .and_then(|it| it.as_token().cloned())\n+            .and_then(|it| it.into_token())\n             .filter(|it| it.kind() == T![;])\n     }\n }\n@@ -332,7 +332,7 @@ impl ast::SelfParam {\n     pub fn self_kw_token(&self) -> SyntaxToken {\n         self.syntax()\n             .children_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == T![self])\n             .expect(\"invalid tree: self param must have self\")\n     }\n@@ -361,7 +361,7 @@ impl ast::LifetimeParam {\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == LIFETIME)\n     }\n }\n@@ -370,7 +370,7 @@ impl ast::WherePred {\n     pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n         self.syntax()\n             .children_with_tokens()\n-            .filter_map(|it| it.as_token().cloned())\n+            .filter_map(|it| it.into_token())\n             .find(|it| it.kind() == LIFETIME)\n     }\n }"}, {"sha": "6ed1b5213dcbafe6ca375ba5607e6ef73913ba76", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -155,7 +155,7 @@ pub struct CommentIter {\n impl Iterator for CommentIter {\n     type Item = ast::Comment;\n     fn next(&mut self) -> Option<ast::Comment> {\n-        self.iter.by_ref().find_map(|el| el.as_token().cloned().and_then(ast::Comment::cast))\n+        self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n     }\n }\n "}, {"sha": "98955832b44a4d144499766b6f550a54dd54c1f4", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/191a6ba330bd47fc3b9cc05d59b2d456b471eb89/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=191a6ba330bd47fc3b9cc05d59b2d456b471eb89", "patch": "@@ -423,13 +423,27 @@ impl SyntaxElement {\n         }\n     }\n \n+    pub fn into_node(self) -> Option<SyntaxNode> {\n+        match self {\n+            SyntaxElement::Node(node) => Some(node),\n+            SyntaxElement::Token(_) => None,\n+        }\n+    }\n+\n     pub fn as_token(&self) -> Option<&SyntaxToken> {\n         match self {\n             SyntaxElement::Node(_) => None,\n             SyntaxElement::Token(token) => Some(token),\n         }\n     }\n \n+    pub fn into_token(self) -> Option<SyntaxToken> {\n+        match self {\n+            SyntaxElement::Node(_) => None,\n+            SyntaxElement::Token(token) => Some(token),\n+        }\n+    }\n+\n     pub fn next_sibling_or_token(&self) -> Option<SyntaxElement> {\n         match self {\n             SyntaxElement::Node(it) => it.next_sibling_or_token(),"}]}