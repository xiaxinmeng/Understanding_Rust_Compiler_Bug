{"sha": "632fab4c954b2b5d213d972652f900c25ad918aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzMmZhYjRjOTU0YjJiNWQyMTNkOTcyNjUyZjkwMGMyNWFkOTE4YWE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T03:54:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-21T03:54:56Z"}, "message": "documentation", "tree": {"sha": "1bf8e21b7dea5015a61e5e440513582de540a269", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bf8e21b7dea5015a61e5e440513582de540a269"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/632fab4c954b2b5d213d972652f900c25ad918aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/632fab4c954b2b5d213d972652f900c25ad918aa", "html_url": "https://github.com/rust-lang/rust/commit/632fab4c954b2b5d213d972652f900c25ad918aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/632fab4c954b2b5d213d972652f900c25ad918aa/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6541be3c6f2a8f4f5f5ccd29a793f8ea700a5786", "url": "https://api.github.com/repos/rust-lang/rust/commits/6541be3c6f2a8f4f5f5ccd29a793f8ea700a5786", "html_url": "https://github.com/rust-lang/rust/commit/6541be3c6f2a8f4f5f5ccd29a793f8ea700a5786"}], "stats": {"total": 49, "additions": 41, "deletions": 8}, "files": [{"sha": "e252e71f8298482cc592a0215939d0982f3ef86e", "filename": "src/checkstyle.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fcheckstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fcheckstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcheckstyle.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -13,6 +13,10 @@ use std::path::Path;\n \n use rustfmt_diff::{DiffLine, Mismatch};\n \n+/// The checkstyle header - should be emitted before the output of Rustfmt.\n+///\n+/// Note that emitting checkstyle output is not stable and may removed in a\n+/// future version of Rustfmt.\n pub fn header() -> String {\n     let mut xml_heading = String::new();\n     xml_heading.push_str(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\");\n@@ -21,6 +25,10 @@ pub fn header() -> String {\n     xml_heading\n }\n \n+/// The checkstyle footer - should be emitted after the output of Rustfmt.\n+///\n+/// Note that emitting checkstyle output is not stable and may removed in a\n+/// future version of Rustfmt.\n pub fn footer() -> String {\n     \"</checkstyle>\\n\".to_owned()\n }"}, {"sha": "ffe4b11486e39ddc012e404b879bbb830adb56ee", "filename": "src/config/file_lines.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Ffile_lines.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -27,6 +27,7 @@ pub struct LineRange {\n     pub hi: usize,\n }\n \n+/// Defines the name of an input - either a file or stdin.\n #[derive(Clone, Debug, Eq, PartialEq, Hash, Ord, PartialOrd)]\n pub enum FileName {\n     Real(PathBuf),"}, {"sha": "992bd749b2959f402768d5becf05072803701ba8", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -146,6 +146,8 @@ create_config! {\n     make_backup: bool, false, false, \"Backup changed files\";\n }\n \n+/// Load a config by checking the client-supplied options and if appropriate, the\n+/// file system (including searching the file system for overrides).\n pub fn load_config<O: CliOptions>(\n     file_path: Option<&Path>,\n     options: Option<O>,"}, {"sha": "8f16e57d468adc0a374a8906971272a700d2996d", "filename": "src/config/options.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -167,6 +167,8 @@ configuration_option_enum! { ReportTactic:\n     Never,\n }\n \n+// What Rustfmt should emit. Mostly corresponds to the `--emit` command line\n+// option.\n configuration_option_enum! { EmitMode:\n     // Emits to files.\n     Files,\n@@ -180,10 +182,11 @@ configuration_option_enum! { EmitMode:\n     ModifiedLines,\n     // Checks if a diff can be generated. If so, rustfmt outputs a diff and quits with exit code 1.\n     // This option is designed to be run in CI where a non-zero exit signifies non-standard code\n-    // formatting.\n+    // formatting. Used for `--check`.\n     Diff,\n }\n \n+// Client-preference for coloured output.\n configuration_option_enum! { Color:\n     // Always use color, whether it is a piped or terminal output\n     Always,\n@@ -194,6 +197,7 @@ configuration_option_enum! { Color:\n }\n \n impl Color {\n+    /// Whether we should use a coloured terminal.\n     pub fn use_colored_tty(&self) -> bool {\n         match self {\n             Color::Always => true,\n@@ -203,6 +207,7 @@ impl Color {\n     }\n }\n \n+// How chatty should Rustfmt be?\n configuration_option_enum! { Verbosity:\n     // Emit more.\n     Verbose,\n@@ -322,6 +327,8 @@ impl ::std::str::FromStr for IgnoreList {\n     }\n }\n \n+/// Maps client-supplied options to Rustfmt's internals, mostly overriding\n+/// values in a config with values from the command line.\n pub trait CliOptions {\n     fn apply_to(self, config: &mut Config);\n     fn config_path(&self) -> Option<&Path>;"}, {"sha": "53d2c0a2f20e1bce87f1f714be1067b5c6df8496", "filename": "src/config/summary.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Fconfig%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fsummary.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -11,6 +11,7 @@\n use std::default::Default;\n use std::time::{Duration, Instant};\n \n+/// A summary of a Rustfmt run.\n #[derive(Debug, Default, Clone, Copy)]\n pub struct Summary {\n     // Encountered e.g. an IO error.\n@@ -25,7 +26,7 @@ pub struct Summary {\n     // Failed a check, such as the license check or other opt-in checking.\n     has_check_errors: bool,\n \n-    // Formatted code differs from existing code (--check only).\n+    /// Formatted code differs from existing code (--check only).\n     pub has_diff: bool,\n \n     // Keeps track of time spent in parsing and formatting steps.\n@@ -106,6 +107,7 @@ impl Summary {\n             || self.has_diff)\n     }\n \n+    /// Combine two summaries together.\n     pub fn add(&mut self, other: Summary) {\n         self.has_operational_errors |= other.has_operational_errors;\n         self.has_formatting_errors |= other.has_formatting_errors;"}, {"sha": "8de2e3bcad3a1a80b5fc55cfa051e777bc96fc94", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/632fab4c954b2b5d213d972652f900c25ad918aa/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=632fab4c954b2b5d213d972652f900c25ad918aa", "patch": "@@ -102,33 +102,38 @@ pub(crate) type FileMap = Vec<FileRecord>;\n \n pub(crate) type FileRecord = (FileName, String);\n \n+/// The various errors that can occur during formatting. Note that not all of\n+/// these can currently be propagated to clients.\n #[derive(Fail, Debug)]\n pub enum ErrorKind {\n-    // Line has exceeded character limit (found, maximum)\n+    /// Line has exceeded character limit (found, maximum).\n     #[fail(\n         display = \"line formatted, but exceeded maximum width \\\n                    (maximum: {} (see `max_width` option), found: {})\",\n         _0,\n         _1\n     )]\n     LineOverflow(usize, usize),\n-    // Line ends in whitespace\n+    /// Line ends in whitespace.\n     #[fail(display = \"left behind trailing whitespace\")]\n     TrailingWhitespace,\n-    // TODO or FIXME item without an issue number\n+    /// TODO or FIXME item without an issue number.\n     #[fail(display = \"found {}\", _0)]\n     BadIssue(Issue),\n-    // License check has failed\n+    /// License check has failed.\n     #[fail(display = \"license check failed\")]\n     LicenseCheck,\n-    // Used deprecated skip attribute\n+    /// Used deprecated skip attribute.\n     #[fail(display = \"`rustfmt_skip` is deprecated; use `rustfmt::skip`\")]\n     DeprecatedAttr,\n-    // Used a rustfmt:: attribute other than skip\n+    /// Used a rustfmt:: attribute other than skip.\n     #[fail(display = \"invalid attribute\")]\n     BadAttr,\n+    /// An io error during reading or writing.\n     #[fail(display = \"io error: {}\", _0)]\n     IoError(io::Error),\n+    /// The user mandated a version and the current version of Rustfmt does not\n+    /// satisfy that requirement.\n     #[fail(display = \"Version mismatch\")]\n     VersionMismatch,\n }\n@@ -204,6 +209,9 @@ impl FormattingError {\n     }\n }\n \n+/// Reports on any issues that occurred during a run of Rustfmt.\n+///\n+/// Can be reported to the user via its `Display` implementation of `print_fancy`.\n #[derive(Clone)]\n pub struct FormatReport {\n     // Maps stringified file paths to their associated formatting errors.\n@@ -266,10 +274,13 @@ impl FormatReport {\n             .sum()\n     }\n \n+    /// Whether any warnings or errors are present in the report.\n     pub fn has_warnings(&self) -> bool {\n         self.warning_count() > 0\n     }\n \n+    /// Print the report to a terminal using colours and potentially other\n+    /// fancy output.\n     pub fn fancy_print(\n         &self,\n         mut t: Box<term::Terminal<Output = io::Stderr>>,\n@@ -758,6 +769,8 @@ pub enum Input {\n     Text(String),\n }\n \n+/// The main entry point for Rustfmt. Formats the given input according to the\n+/// given config. `out` is only necessary if required by the configuration.\n pub fn format_input<T: Write>(\n     input: Input,\n     config: &Config,"}]}