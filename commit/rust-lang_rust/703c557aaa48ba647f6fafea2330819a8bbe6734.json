{"sha": "703c557aaa48ba647f6fafea2330819a8bbe6734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwM2M1NTdhYWE0OGJhNjQ3ZjZmYWZlYTIzMzA4MTlhOGJiZTY3MzQ=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-25T15:21:55Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-08-27T05:07:38Z"}, "message": "Fix more tests", "tree": {"sha": "0f9a09b4a0aaabed162d556b8fe4a05e2d9b3319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f9a09b4a0aaabed162d556b8fe4a05e2d9b3319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/703c557aaa48ba647f6fafea2330819a8bbe6734", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmEocxoACgkQAn35M4hi\nrd02rg//U/sL1LV9ooJ2bosVI0JSzhjBSvo6oqpTSZWs1mTIvGKZmsFqrmlGI+dw\nVNgb8v1Nh1AITootzvLGiT3X45VN+GYlgJoxw0VcgO76KDrxlezbsIQtP+Sefyuo\nfx6cnCI0rajkhCUzAviUXO4WsTsCODp/giF4nV0ZnghFld4QEufdGl+Ws+3xQ6ZQ\n5oV38z4cdVilHR55Vn2Ta8HKaE3PMfze4wBxJQJ1TxYOIDfjnIZMb3nUHeWKbJb+\n288HGSQlSck3N2CF/ria/J1zxguiyX1NNrbdq9oVh2IrLU6YHxdMUkaPwmhpzxqu\n6C55BKLjmtAJoIkL4w4RtXCkyzmrm2SWMhlkaNbHPF2LB4xe5J4JR48XYhGu82Ca\n7jchzGIDvs07ERFiLK3KLIH0WqbUlRRE/IBSwJh4yYcxe1YzykGZpRUoUxR7t0sZ\nraU0i5S6eIIqCQhbpmq7d2ctakKZ14XBAN6eseDwORN9f3jxs2Zo9Sw9ZQXD5PaO\nXVXaqcoIycZm77qBSg0LXc3GWauo6W29A1ejXw4vbfE0vkfA5GiqaUl4tN5H/FPR\nbMpPdR8HSlDnlkzFdMTRucXrUh//OL96b16AWxRh8Z9YITIUHJT7X/PXD2R4/YyE\n2WpsIJJD/wdFLhufl8HgSv+XtvdrIT9InvXULJwkk97wYNWsOUM=\n=5mcz\n-----END PGP SIGNATURE-----", "payload": "tree 0f9a09b4a0aaabed162d556b8fe4a05e2d9b3319\nparent ff24ac4f2b1415cc93e0cc3edb70097df6dae073\nauthor Deadbeef <ent3rm4n@gmail.com> 1629904915 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1630040858 +0000\n\nFix more tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/703c557aaa48ba647f6fafea2330819a8bbe6734", "html_url": "https://github.com/rust-lang/rust/commit/703c557aaa48ba647f6fafea2330819a8bbe6734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/703c557aaa48ba647f6fafea2330819a8bbe6734/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff24ac4f2b1415cc93e0cc3edb70097df6dae073", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff24ac4f2b1415cc93e0cc3edb70097df6dae073", "html_url": "https://github.com/rust-lang/rust/commit/ff24ac4f2b1415cc93e0cc3edb70097df6dae073"}], "stats": {"total": 153, "additions": 103, "deletions": 50}, "files": [{"sha": "b7054d1562686552f02a1e9c785854062b6323a3", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -927,7 +927,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        constness,\n+                        Constness::NotConst,\n                         param_ty,\n                         bounds,\n                         false,\n@@ -937,7 +937,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     self.instantiate_poly_trait_ref(\n                         &b.trait_ref,\n                         b.span,\n-                        Constness::NotConst,\n+                        constness,\n                         param_ty,\n                         bounds,\n                         false,"}, {"sha": "bc3074b10bee6f326c048121d07b093515e63e46", "filename": "src/test/ui/consts/const-eval/issue-49296.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-49296.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -1,5 +1,5 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-49296.rs:20:16\n+  --> $DIR/issue-49296.rs:11:16\n    |\n LL | const X: u64 = *wat(42);\n    |                ^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed"}, {"sha": "2b57c439fe9a026057815233558d1cf5512e6a1e", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle-generic.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle-generic.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -4,11 +4,11 @@ error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required by a bound in `Foo::Item`\n-  --> $DIR/projection-bound-cycle-generic.rs:11:49\n+note: required by a bound in `OnlySized`\n+  --> $DIR/projection-bound-cycle-generic.rs:28:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ^^^^^ required by this bound in `Foo::Item`\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  ^ required by this bound in `OnlySized`\n \n error: aborting due to previous error\n "}, {"sha": "d9d0bf4274bd72c2f35ed75ea9053881260c36fb", "filename": "src/test/ui/generic-associated-types/projection-bound-cycle.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-bound-cycle.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -4,11 +4,11 @@ error[E0275]: overflow evaluating the requirement `<T as Foo>::Item: Sized`\n LL |     type Assoc = OnlySized<<T as Foo>::Item>;\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: required by a bound in `Foo::Item`\n-  --> $DIR/projection-bound-cycle.rs:13:49\n+note: required by a bound in `OnlySized`\n+  --> $DIR/projection-bound-cycle.rs:30:18\n    |\n-LL |     type Item: Sized where <Self as Foo>::Item: Sized;\n-   |                                                 ^^^^^ required by this bound in `Foo::Item`\n+LL | struct OnlySized<T> where T: Sized { f: T }\n+   |                  ^ required by this bound in `OnlySized`\n \n error: aborting due to previous error\n "}, {"sha": "4ae4549ea58966346c2d0d6994ae0a8d0407d8c1", "filename": "src/test/ui/parser/bounds-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -9,10 +9,10 @@ struct S<\n     T: Tr +, // OK\n     T: ?'a, //~ ERROR `?` may only modify trait bounds, not lifetime bounds\n \n-    T: ?const Tr, // OK\n-    T: ?const ?Tr, // OK\n-    T: ?const Tr + 'a, // OK\n-    T: ?const 'a, //~ ERROR `?const` may only modify trait bounds, not lifetime bounds\n+    T: ~const Tr, // OK\n+    T: ~const ?Tr, // OK\n+    T: ~const Tr + 'a, // OK\n+    T: ~const 'a, //~ ERROR `~const` may only modify trait bounds, not lifetime bounds\n >;\n \n fn main() {}"}, {"sha": "005bc1e54bd00421358c18ea1f832e595df62041", "filename": "src/test/ui/parser/bounds-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbounds-type.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -4,10 +4,10 @@ error: `?` may only modify trait bounds, not lifetime bounds\n LL |     T: ?'a,\n    |        ^\n \n-error: `?const` may only modify trait bounds, not lifetime bounds\n+error: `~const` may only modify trait bounds, not lifetime bounds\n   --> $DIR/bounds-type.rs:15:8\n    |\n-LL |     T: ?const 'a,\n+LL |     T: ~const 'a,\n    |        ^^^^^^\n \n error: aborting due to 2 previous errors"}, {"sha": "b5258eebb90adf774132336d9078bc3226aa48c8", "filename": "src/test/ui/parser/trait-object-delimiters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -6,7 +6,7 @@ fn foo1(_: &dyn Drop + AsRef<str>) {} //~ ERROR ambiguous `+` in a type\n fn foo2(_: &dyn (Drop + AsRef<str>)) {} //~ ERROR incorrect braces around trait bounds\n \n fn foo3(_: &dyn {Drop + AsRef<str>}) {} //~ ERROR expected parameter name, found `{`\n-//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+//~^ ERROR expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n //~| ERROR at least one trait is required for an object type\n \n fn foo4(_: &dyn <Drop + AsRef<str>>) {} //~ ERROR expected identifier, found `<`"}, {"sha": "ee638d8a4f5ecf20c214d76f1dcfcb2687e1fb2c", "filename": "src/test/ui/parser/trait-object-delimiters.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-delimiters.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -22,11 +22,11 @@ error: expected parameter name, found `{`\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n    |                 ^ expected parameter name\n \n-error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, lifetime, or path, found `{`\n+error: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `{`\n   --> $DIR/trait-object-delimiters.rs:8:17\n    |\n LL | fn foo3(_: &dyn {Drop + AsRef<str>}) {}\n-   |                -^ expected one of 8 possible tokens\n+   |                -^ expected one of 9 possible tokens\n    |                |\n    |                help: missing `,`\n "}, {"sha": "228b5ed71e80a833142ecd43054b0cc42fd936bb", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -1,7 +1,5 @@\n // FIXME(fee1-dead): this should have a better error message\n #![feature(const_trait_impl)]\n-#![feature(const_trait_bound_opt_out)]\n-#![allow(incomplete_features)]\n \n struct NonConstAdd(i32);\n \n@@ -14,7 +12,7 @@ impl std::ops::Add for NonConstAdd {\n }\n \n trait Foo {\n-    type Bar: std::ops::Add;\n+    type Bar: ~const std::ops::Add;\n }\n \n impl const Foo for NonConstAdd {\n@@ -23,7 +21,7 @@ impl const Foo for NonConstAdd {\n }\n \n trait Baz {\n-    type Qux: ?const std::ops::Add;\n+    type Qux: std::ops::Add;\n }\n \n impl const Baz for NonConstAdd {"}, {"sha": "b894092205e433448fc0c812770e9fbace38583b", "filename": "src/test/ui/rfc-2632-const-trait-impl/assoc-type.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fassoc-type.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -1,15 +1,15 @@\n error[E0277]: cannot add `NonConstAdd` to `NonConstAdd`\n-  --> $DIR/assoc-type.rs:21:5\n+  --> $DIR/assoc-type.rs:19:5\n    |\n LL |     type Bar = NonConstAdd;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `NonConstAdd + NonConstAdd`\n    |\n    = help: the trait `Add` is not implemented for `NonConstAdd`\n note: required by a bound in `Foo::Bar`\n-  --> $DIR/assoc-type.rs:17:15\n+  --> $DIR/assoc-type.rs:15:15\n    |\n-LL |     type Bar: std::ops::Add;\n-   |               ^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n+LL |     type Bar: ~const std::ops::Add;\n+   |               ^^^^^^^^^^^^^^^^^^^^ required by this bound in `Foo::Bar`\n help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n    |\n LL | impl const Foo for NonConstAdd where NonConstAdd: Add {"}, {"sha": "4b706a190e65e5985a7a3e3048ff0c1fa90e9426", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-in-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-in-impl.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -6,7 +6,7 @@ trait MyPartialEq {\n     fn eq(&self, other: &Self) -> bool;\n }\n \n-impl<T: PartialEq> const MyPartialEq for T {\n+impl<T: ~const PartialEq> const MyPartialEq for T {\n     fn eq(&self, other: &Self) -> bool {\n         PartialEq::eq(self, other)\n     }"}, {"sha": "adf8d4f9ea565a208c3d92cd57416df8eb54b968", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-chain.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-chain.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -16,11 +16,11 @@ impl const PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n \n-const fn equals_self_wrapper<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self_wrapper<T: ~const PartialEq>(t: &T) -> bool {\n     equals_self(t)\n }\n "}, {"sha": "818c582869631f9bc70f22b5be7077b0d34955a7", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-fail.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -1,5 +1,5 @@\n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/call-generic-method-fail.rs:7:5\n+  --> $DIR/call-generic-method-fail.rs:5:5\n    |\n LL |     *t == *t\n    |     ^^^^^^^^"}, {"sha": "6881db0aa02c3cec75158117a2e856de518efd82", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -9,7 +9,7 @@ impl PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     true\n }\n "}, {"sha": "9b9bda7c90ec7d313aab8b9096411c4c5d6acc2f", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-nonconst.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-nonconst.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -8,8 +8,8 @@ LL | pub const EQ: bool = equals_self(&S);\n note: required by a bound in `equals_self`\n   --> $DIR/call-generic-method-nonconst.rs:12:25\n    |\n-LL | const fn equals_self<T: PartialEq>(t: &T) -> bool {\n-   |                         ^^^^^^^^^ required by this bound in `equals_self`\n+LL | const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n+   |                         ^^^^^^^^^^^^^^^^ required by this bound in `equals_self`\n \n error: aborting due to previous error\n "}, {"sha": "aa9bd4d824e1704aba419008433985d59c7f7727", "filename": "src/test/ui/rfc-2632-const-trait-impl/call-generic-method-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fcall-generic-method-pass.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -16,7 +16,7 @@ impl const PartialEq for S {\n     }\n }\n \n-const fn equals_self<T: PartialEq>(t: &T) -> bool {\n+const fn equals_self<T: ~const PartialEq>(t: &T) -> bool {\n     *t == *t\n }\n "}, {"sha": "0a91719e1f15b269b7652866d0b5264b43a10bb6", "filename": "src/test/ui/rfc-2632-const-trait-impl/impl-tilde-const-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fimpl-tilde-const-trait.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -0,0 +1,8 @@\n+error: expected a trait, found type\n+  --> $DIR/impl-tilde-const-trait.rs:6:6\n+   |\n+LL | impl ~const T for S {}\n+   |      ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "8c55627031d1edfbaeb6636e237c39f5d5223897", "filename": "src/test/ui/rfc-2632-const-trait-impl/inherent-impl.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Finherent-impl.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -1,5 +1,5 @@\n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:9:12\n+  --> $DIR/inherent-impl.rs:7:12\n    |\n LL | impl const S {}\n    |      ----- ^ inherent impl for this type\n@@ -9,7 +9,7 @@ LL | impl const S {}\n    = note: only trait implementations may be annotated with `const`\n \n error: inherent impls cannot be `const`\n-  --> $DIR/inherent-impl.rs:12:12\n+  --> $DIR/inherent-impl.rs:10:12\n    |\n LL | impl const T {}\n    |      ----- ^ inherent impl for this type"}, {"sha": "b4302f3e75fd4dc495edd662fc8a0b5206d7acd4", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -17,22 +17,13 @@ fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n //~^ ERROR `~const` is not allowed\n \n-fn generic<T: ~const T>() {}\n+fn generic<P: ~const T>() {}\n //~^ ERROR `~const` is not allowed\n \n-fn where_clause<T>() where T: ~const T {}\n+fn where_clause<P>() where P: ~const T {}\n //~^ ERROR `~const` is not allowed\n \n-impl ~const T {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn trait_object() -> &'static dyn ~const T { &S }\n-//~^ ERROR `~const` is not allowed\n-\n-fn trait_object_in_apit(_: impl IntoIterator<Item = Box<dyn ~const T>>) {}\n-//~^ ERROR `~const` is not allowed\n-\n-struct S<T: ~const ?Sized>(std::marker::PhantomData<T>);\n+struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n \n fn main() {}"}, {"sha": "b026099f6829b5e3b04099e5a23641dcb82fd1a0", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/703c557aaa48ba647f6fafea2330819a8bbe6734/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=703c557aaa48ba647f6fafea2330819a8bbe6734", "patch": "@@ -0,0 +1,56 @@\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:8:19\n+   |\n+LL | fn rpit() -> impl ~const T { S }\n+   |                   ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:11:17\n+   |\n+LL | fn apit(_: impl ~const T) {}\n+   |                 ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:14:50\n+   |\n+LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+   |                                                  ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:17:48\n+   |\n+LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n+   |                                                ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:20:15\n+   |\n+LL | fn generic<P: ~const T>() {}\n+   |               ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` is not allowed here\n+  --> $DIR/tilde-const-invalid-places.rs:23:31\n+   |\n+LL | fn where_clause<P>() where P: ~const T {}\n+   |                               ^^^^^^^^\n+   |\n+   = note: only allowed on bounds on traits' associated types, const fns, const impls and its associated functions\n+\n+error: `~const` and `?` are mutually exclusive\n+  --> $DIR/tilde-const-invalid-places.rs:26:25\n+   |\n+LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n+   |                         ^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}]}