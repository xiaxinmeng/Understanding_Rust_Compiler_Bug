{"sha": "dff602fc18be295d1b87196a6eee1c72673e6bb8", "node_id": "C_kwDOAAsO6NoAKGRmZjYwMmZjMThiZTI5NWQxYjg3MTk2YTZlZWUxYzcyNjczZTZiYjg", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-31T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-31T00:00:00Z"}, "message": "Add a pointer to address cast kind\n\nA pointer to address cast are often special-cased.\nIntroduce a dedicated cast kind to make them easy distinguishable.", "tree": {"sha": "3c08934e4fe11ed94c9875185f3e61bcdd1a2484", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c08934e4fe11ed94c9875185f3e61bcdd1a2484"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dff602fc18be295d1b87196a6eee1c72673e6bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dff602fc18be295d1b87196a6eee1c72673e6bb8", "html_url": "https://github.com/rust-lang/rust/commit/dff602fc18be295d1b87196a6eee1c72673e6bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dff602fc18be295d1b87196a6eee1c72673e6bb8/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d35d972e6974d40d30362344ea619a5b560aae20", "url": "https://api.github.com/repos/rust-lang/rust/commits/d35d972e6974d40d30362344ea619a5b560aae20", "html_url": "https://github.com/rust-lang/rust/commit/d35d972e6974d40d30362344ea619a5b560aae20"}], "stats": {"total": 190, "additions": 96, "deletions": 94}, "files": [{"sha": "d9d31ab2c89a1bb155921b8f08e7c14a0e3a7c27", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -2147,6 +2147,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                         }\n                     }\n \n+                    CastKind::PointerAddress => {\n+                        let ty_from = op.ty(body, tcx);\n+                        let cast_ty_from = CastTy::from_ty(ty_from);\n+                        let cast_ty_to = CastTy::from_ty(*ty);\n+                        match (cast_ty_from, cast_ty_to) {\n+                            (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => (),\n+                            _ => {\n+                                span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty)\n+                            }\n+                        }\n+                    }\n+\n                     CastKind::Misc => {\n                         let ty_from = op.ty(body, tcx);\n                         let cast_ty_from = CastTy::from_ty(ty_from);\n@@ -2155,16 +2167,18 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                             (None, _)\n                             | (_, None | Some(CastTy::FnPtr))\n                             | (Some(CastTy::Float), Some(CastTy::Ptr(_)))\n-                            | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Float)) => {\n+                            | (\n+                                Some(CastTy::Ptr(_) | CastTy::FnPtr),\n+                                Some(CastTy::Float | CastTy::Int(_)),\n+                            ) => {\n                                 span_mirbug!(self, rvalue, \"Invalid cast {:?} -> {:?}\", ty_from, ty,)\n                             }\n                             (\n                                 Some(CastTy::Int(_)),\n                                 Some(CastTy::Int(_) | CastTy::Float | CastTy::Ptr(_)),\n                             )\n                             | (Some(CastTy::Float), Some(CastTy::Int(_) | CastTy::Float))\n-                            | (Some(CastTy::Ptr(_)), Some(CastTy::Int(_) | CastTy::Ptr(_)))\n-                            | (Some(CastTy::FnPtr), Some(CastTy::Int(_) | CastTy::Ptr(_))) => (),\n+                            | (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Ptr(_))) => (),\n                         }\n                     }\n                 }"}, {"sha": "7c59ce354c01a42933603d84f638df0dcf48d851", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -607,7 +607,7 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     lval.write_cvalue(fx, operand.cast_pointer_to(to_layout));\n                 }\n-                Rvalue::Cast(CastKind::Misc, ref operand, to_ty) => {\n+                Rvalue::Cast(CastKind::Misc | CastKind::PointerAddress, ref operand, to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n                     let from_ty = operand.layout().ty;\n                     let to_ty = fx.monomorphize(to_ty);"}, {"sha": "bd88aa33372dff03972fca9962480dfc22dbea57", "filename": "compiler/rustc_codegen_ssa/src/mir/rvalue.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Frvalue.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -181,6 +181,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 let cast = bx.cx().layout_of(self.monomorphize(mir_cast_ty));\n \n                 let val = match *kind {\n+                    mir::CastKind::PointerAddress => {\n+                        assert!(bx.cx().is_backend_immediate(cast));\n+                        let llptr = operand.immediate();\n+                        let llcast_ty = bx.cx().immediate_backend_type(cast);\n+                        let lladdr = bx.ptrtoint(llptr, llcast_ty);\n+                        OperandValue::Immediate(lladdr)\n+                    }\n                     mir::CastKind::Pointer(PointerCast::ReifyFnPointer) => {\n                         match *operand.layout.ty.kind() {\n                             ty::FnDef(def_id, substs) => {\n@@ -362,9 +369,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                             (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Ptr(_)) => {\n                                 bx.pointercast(llval, ll_t_out)\n                             }\n-                            (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                                bx.ptrtoint(llval, ll_t_out)\n-                            }\n                             (CastTy::Int(_), CastTy::Ptr(_)) => {\n                                 let usize_llval = bx.intcast(llval, bx.cx().type_isize(), signed);\n                                 bx.inttoptr(usize_llval, ll_t_out)"}, {"sha": "af563c1450ea02d258ea3be80bc712676387ae03", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -1,3 +1,4 @@\n+use std::assert_matches::assert_matches;\n use std::convert::TryFrom;\n \n use rustc_apfloat::ieee::{Double, Single};\n@@ -30,6 +31,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.unsize_into(src, cast_ty, dest)?;\n             }\n \n+            PointerAddress => {\n+                let src = self.read_immediate(src)?;\n+                let res = self.pointer_address_cast(&src, cast_ty)?;\n+                self.write_immediate(res, dest)?;\n+            }\n+\n             Misc => {\n                 let src = self.read_immediate(src)?;\n                 let res = self.misc_cast(&src, cast_ty)?;\n@@ -174,23 +181,23 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // # The remaining source values are scalar and \"int-like\".\n         let scalar = src.to_scalar()?;\n+        Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n+    }\n \n-        // If we are casting from a pointer to something\n-        // that is not a pointer, mark the pointer as exposed\n-        if src.layout.ty.is_any_ptr() && !cast_ty.is_any_ptr() {\n-            let ptr = self.scalar_to_ptr(scalar)?;\n-\n-            match ptr.into_pointer_or_addr() {\n-                Ok(ptr) => {\n-                    M::expose_ptr(self, ptr)?;\n-                }\n-                Err(_) => {\n-                    // do nothing, exposing an invalid pointer\n-                    // has no meaning\n-                }\n-            };\n-        }\n+    pub fn pointer_address_cast(\n+        &mut self,\n+        src: &ImmTy<'tcx, M::PointerTag>,\n+        cast_ty: Ty<'tcx>,\n+    ) -> InterpResult<'tcx, Immediate<M::PointerTag>> {\n+        assert_matches!(src.layout.ty.kind(), ty::RawPtr(_) | ty::FnPtr(_));\n+        assert!(cast_ty.is_integral());\n \n+        let scalar = src.to_scalar()?;\n+        let ptr = self.scalar_to_ptr(scalar)?;\n+        match ptr.into_pointer_or_addr() {\n+            Ok(ptr) => M::expose_ptr(self, ptr)?,\n+            Err(_) => {} // do nothing, exposing an invalid pointer has no meaning\n+        };\n         Ok(self.cast_from_int_like(scalar, src.layout, cast_ty)?.into())\n     }\n "}, {"sha": "4ef33d62a6bfe736242f4aed8f8948b3fc9c807a", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -8,7 +8,6 @@ use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef, TypeFoldable};\n@@ -543,16 +542,12 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                 // in the type of any local, which also excludes casts).\n             }\n \n-            Rvalue::Cast(CastKind::Misc, ref operand, cast_ty) => {\n-                let operand_ty = operand.ty(self.body, self.tcx);\n-                let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n-                let cast_out = CastTy::from_ty(cast_ty).expect(\"bad output type for cast\");\n-\n-                if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {\n-                    self.check_op(ops::RawPtrToIntCast);\n-                }\n+            Rvalue::Cast(CastKind::PointerAddress, _, _) => {\n+                self.check_op(ops::RawPtrToIntCast);\n             }\n \n+            Rvalue::Cast(CastKind::Misc, _, _) => {}\n+\n             Rvalue::NullaryOp(NullOp::SizeOf | NullOp::AlignOf, _) => {}\n             Rvalue::ShallowInitBox(_, _) => {}\n "}, {"sha": "ea23bd14d2538fe03f285e62a20374ab5d55b2fd", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -16,7 +16,6 @@ use rustc_hir as hir;\n use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n-use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeFoldable};\n use rustc_span::Span;\n@@ -502,18 +501,11 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n             Rvalue::ThreadLocalRef(_) => return Err(Unpromotable),\n \n-            Rvalue::Cast(kind, operand, cast_ty) => {\n-                if matches!(kind, CastKind::Misc) {\n-                    let operand_ty = operand.ty(self.body, self.tcx);\n-                    let cast_in = CastTy::from_ty(operand_ty).expect(\"bad input type for cast\");\n-                    let cast_out = CastTy::from_ty(*cast_ty).expect(\"bad output type for cast\");\n-                    if let (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) = (cast_in, cast_out) {\n-                        // ptr-to-int casts are not possible in consts and thus not promotable\n-                        return Err(Unpromotable);\n-                    }\n-                    // int-to-ptr casts are fine, they just use the integer value at pointer type.\n-                }\n+            // ptr-to-int casts are not possible in consts and thus not promotable\n+            Rvalue::Cast(CastKind::PointerAddress, _, _) => return Err(Unpromotable),\n \n+            // int-to-ptr casts are fine, they just use the integer value at pointer type.\n+            Rvalue::Cast(_, operand, _) => {\n                 self.validate_operand(operand)?;\n             }\n "}, {"sha": "1b63c8d67ca1402d1a3eef7e3ac27ed8f161291b", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -2604,9 +2604,19 @@ pub enum Rvalue<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n static_assert_size!(Rvalue<'_>, 40);\n \n+impl<'tcx> Rvalue<'tcx> {\n+    #[inline]\n+    pub fn is_pointer_int_cast(&self) -> bool {\n+        matches!(self, Rvalue::Cast(CastKind::PointerAddress, _, _))\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum CastKind {\n     Misc,\n+    /// A pointer to address cast. A cast between a pointer and an integer type,\n+    /// or between a function pointer and an integer type.\n+    PointerAddress,\n     Pointer(PointerCast),\n }\n "}, {"sha": "c93b7a955022925bd0b01d2168dd9a2f8a7ac3b2", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -4,7 +4,6 @@\n  */\n \n use crate::mir::*;\n-use crate::ty::cast::CastTy;\n use crate::ty::subst::Subst;\n use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n@@ -224,22 +223,6 @@ impl<'tcx> Rvalue<'tcx> {\n             _ => RvalueInitializationState::Deep,\n         }\n     }\n-\n-    pub fn is_pointer_int_cast<D>(&self, local_decls: &D, tcx: TyCtxt<'tcx>) -> bool\n-    where\n-        D: HasLocalDecls<'tcx>,\n-    {\n-        if let Rvalue::Cast(CastKind::Misc, src_op, dest_ty) = self {\n-            if let Some(CastTy::Int(_)) = CastTy::from_ty(*dest_ty) {\n-                let src_ty = src_op.ty(local_decls, tcx);\n-                if let Some(CastTy::FnPtr | CastTy::Ptr(_)) = CastTy::from_ty(src_ty) {\n-                    return true;\n-                }\n-            }\n-        }\n-\n-        false\n-    }\n }\n \n impl<'tcx> Operand<'tcx> {"}, {"sha": "2b137046c7f73eee7d921598c1a69abb538a1398", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -11,6 +11,7 @@ use rustc_middle::mir::AssertKind;\n use rustc_middle::mir::Place;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n+use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n@@ -188,11 +189,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(Rvalue::Use(Operand::Move(Place::from(result))))\n             }\n             ExprKind::Cast { source } => {\n+                let source = &this.thir[source];\n+                let from_ty = CastTy::from_ty(source.ty);\n+                let cast_ty = CastTy::from_ty(expr.ty);\n+                let cast_kind = match (from_ty, cast_ty) {\n+                    (Some(CastTy::Ptr(_) | CastTy::FnPtr), Some(CastTy::Int(_))) => {\n+                        CastKind::PointerAddress\n+                    }\n+                    (_, _) => CastKind::Misc,\n+                };\n                 let source = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[source], None, NeedsTemporary::No)\n+                    block = this.as_operand(block, scope, source, None, NeedsTemporary::No)\n                 );\n-                block.and(Rvalue::Cast(CastKind::Misc, source, expr.ty))\n+                block.and(Rvalue::Cast(cast_kind, source, expr.ty))\n             }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!("}, {"sha": "7076fbe1bdb535ffa895a0fdb92478a1c0971de1", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -1,7 +1,6 @@\n use rustc_index::bit_set::{BitSet, ChunkedBitSet};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n-use rustc_middle::mir::{self, Local, LocalDecls, Location, Place, StatementKind};\n-use rustc_middle::ty::TyCtxt;\n+use rustc_middle::mir::{self, Local, Location, Place, StatementKind};\n \n use crate::{Analysis, AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKillAnalysis};\n \n@@ -193,27 +192,21 @@ impl DefUse {\n /// This is basically written for dead store elimination and nothing else.\n ///\n /// All of the caveats of `MaybeLiveLocals` apply.\n-pub struct MaybeTransitiveLiveLocals<'a, 'tcx> {\n+pub struct MaybeTransitiveLiveLocals<'a> {\n     always_live: &'a BitSet<Local>,\n-    local_decls: &'a LocalDecls<'tcx>,\n-    tcx: TyCtxt<'tcx>,\n }\n \n-impl<'a, 'tcx> MaybeTransitiveLiveLocals<'a, 'tcx> {\n+impl<'a> MaybeTransitiveLiveLocals<'a> {\n     /// The `always_alive` set is the set of locals to which all stores should unconditionally be\n     /// considered live.\n     ///\n     /// This should include at least all locals that are ever borrowed.\n-    pub fn new(\n-        always_live: &'a BitSet<Local>,\n-        local_decls: &'a LocalDecls<'tcx>,\n-        tcx: TyCtxt<'tcx>,\n-    ) -> Self {\n-        MaybeTransitiveLiveLocals { always_live, local_decls, tcx }\n+    pub fn new(always_live: &'a BitSet<Local>) -> Self {\n+        MaybeTransitiveLiveLocals { always_live }\n     }\n }\n \n-impl<'a, 'tcx> AnalysisDomain<'tcx> for MaybeTransitiveLiveLocals<'a, 'tcx> {\n+impl<'a, 'tcx> AnalysisDomain<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     type Domain = ChunkedBitSet<Local>;\n     type Direction = Backward;\n \n@@ -241,7 +234,7 @@ impl<'a> GenKill<Local> for TransferWrapper<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a, 'tcx> {\n+impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n     fn apply_statement_effect(\n         &self,\n         trans: &mut Self::Domain,\n@@ -251,7 +244,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a, 'tcx> {\n         // Compute the place that we are storing to, if any\n         let destination = match &statement.kind {\n             StatementKind::Assign(assign) => {\n-                if assign.1.is_pointer_int_cast(self.local_decls, self.tcx) {\n+                if assign.1.is_pointer_int_cast() {\n                     // Pointer to int casts may be side-effects due to exposing the provenance.\n                     // While the model is undecided, we should be conservative. See\n                     // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>"}, {"sha": "8becac34ed7ee3a7846dc32352bb90ea324845e4", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -24,7 +24,7 @@ use rustc_mir_dataflow::{impls::MaybeTransitiveLiveLocals, Analysis};\n /// The `borrowed` set must be a `BitSet` of all the locals that are ever borrowed in this body. It\n /// can be generated via the [`get_borrowed_locals`] function.\n pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitSet<Local>) {\n-    let mut live = MaybeTransitiveLiveLocals::new(borrowed, &body.local_decls, tcx)\n+    let mut live = MaybeTransitiveLiveLocals::new(borrowed)\n         .into_engine(tcx, body)\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n@@ -34,7 +34,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n         for (statement_index, statement) in bb_data.statements.iter().enumerate().rev() {\n             let loc = Location { block: bb, statement_index };\n             if let StatementKind::Assign(assign) = &statement.kind {\n-                if assign.1.is_pointer_int_cast(&body.local_decls, tcx) {\n+                if assign.1.is_pointer_int_cast() {\n                     continue;\n                 }\n             }"}, {"sha": "4fdd4b2b4bb8694a86aefcdb11284ad5493ac696", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -21,7 +21,7 @@\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n                                            // + literal: Const { ty: &i32, val: Unevaluated(FOO, [], None) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-          _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n+          _1 = move _2 as usize (PointerAddress); // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39\n           StorageDead(_3);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:39: 7:40\n           StorageLive(_4);                 // scope 1 at $DIR/const_prop_fails_gracefully.rs:8:5: 8:12"}, {"sha": "7eb34ed5469ba49d566de90fd0a65917700e01f7", "filename": "src/test/mir-opt/const_prop/reify_fn_ptr.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freify_fn_ptr.main.ConstProp.diff?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -17,7 +17,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/reify_fn_ptr.rs:4:13: 4:17\n                                            // + literal: Const { ty: fn() {main}, val: Value(Scalar(<ZST>)) }\n-          _2 = move _3 as usize (Misc);    // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n+          _2 = move _3 as usize (PointerAddress); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:26\n           StorageDead(_3);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:25: 4:26\n           _1 = move _2 as *const fn() (Misc); // scope 0 at $DIR/reify_fn_ptr.rs:4:13: 4:41\n           StorageDead(_2);                 // scope 0 at $DIR/reify_fn_ptr.rs:4:40: 4:41"}, {"sha": "bf32245e3009847b5917711ec2f645e027100619", "filename": "src/test/mir-opt/dead-store-elimination/provenance_soundness.pointer_to_int.DeadStoreElimination.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdead-store-elimination%2Fprovenance_soundness.pointer_to_int.DeadStoreElimination.diff?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -19,12 +19,12 @@\n           StorageLive(_2);                 // scope 0 at $DIR/provenance_soundness.rs:8:9: 8:11\n           StorageLive(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n           _3 = _1;                         // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:15\n-          _2 = move _3 as usize (Misc);    // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n+          _2 = move _3 as usize (PointerAddress); // scope 0 at $DIR/provenance_soundness.rs:8:14: 8:24\n           StorageDead(_3);                 // scope 0 at $DIR/provenance_soundness.rs:8:23: 8:24\n           StorageLive(_4);                 // scope 1 at $DIR/provenance_soundness.rs:9:9: 9:11\n           StorageLive(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n           _5 = _1;                         // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:15\n-          _4 = move _5 as isize (Misc);    // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n+          _4 = move _5 as isize (PointerAddress); // scope 1 at $DIR/provenance_soundness.rs:9:14: 9:24\n           StorageDead(_5);                 // scope 1 at $DIR/provenance_soundness.rs:9:23: 9:24\n           _0 = const ();                   // scope 0 at $DIR/provenance_soundness.rs:7:32: 10:2\n           StorageDead(_4);                 // scope 1 at $DIR/provenance_soundness.rs:10:1: 10:2"}, {"sha": "283b20fc24d82c62317ccc19dc8e69f26a2cb94c", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dff602fc18be295d1b87196a6eee1c72673e6bb8/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=dff602fc18be295d1b87196a6eee1c72673e6bb8", "patch": "@@ -125,16 +125,11 @@ fn check_rvalue<'tcx>(\n         Rvalue::Len(place) | Rvalue::Discriminant(place) | Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n             check_place(tcx, *place, span, body)\n         },\n-        Rvalue::Cast(CastKind::Misc, operand, cast_ty) => {\n-            use rustc_middle::ty::cast::CastTy;\n-            let cast_in = CastTy::from_ty(operand.ty(body, tcx)).expect(\"bad input type for cast\");\n-            let cast_out = CastTy::from_ty(*cast_ty).expect(\"bad output type for cast\");\n-            match (cast_in, cast_out) {\n-                (CastTy::Ptr(_) | CastTy::FnPtr, CastTy::Int(_)) => {\n-                    Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n-                },\n-                _ => check_operand(tcx, operand, span, body),\n-            }\n+        Rvalue::Cast(CastKind::PointerAddress, _, _) => {\n+            Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n+        },\n+        Rvalue::Cast(CastKind::Misc, operand, _) => {\n+            check_operand(tcx, operand, span, body)\n         },\n         Rvalue::Cast(CastKind::Pointer(PointerCast::MutToConstPointer | PointerCast::ArrayToPointer), operand, _) => {\n             check_operand(tcx, operand, span, body)"}]}