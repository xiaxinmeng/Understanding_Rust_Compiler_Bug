{"sha": "003ce502350ed1e374b740ee2d719e500c165615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwM2NlNTAyMzUwZWQxZTM3NGI3NDBlZTJkNzE5ZTUwMGMxNjU2MTU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-29T13:46:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-02T01:55:15Z"}, "message": "std: rename fmt::Default to `Show`.\n\nThis is a better name with which to have a #[deriving] mode.\n\nDecision in:\nhttps://github.com/mozilla/rust/wiki/Meeting-weekly-2014-01-28", "tree": {"sha": "e253c6227b70a139539529bbdbb4d348cb1f64c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e253c6227b70a139539529bbdbb4d348cb1f64c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003ce502350ed1e374b740ee2d719e500c165615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003ce502350ed1e374b740ee2d719e500c165615", "html_url": "https://github.com/rust-lang/rust/commit/003ce502350ed1e374b740ee2d719e500c165615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003ce502350ed1e374b740ee2d719e500c165615/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2bcd951749b67402ccaa31f1bb0349656f880fe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2bcd951749b67402ccaa31f1bb0349656f880fe2", "html_url": "https://github.com/rust-lang/rust/commit/2bcd951749b67402ccaa31f1bb0349656f880fe2"}], "stats": {"total": 131, "additions": 75, "deletions": 56}, "files": [{"sha": "1aaa446fc6cf36846ec46eef3cf3635bd2e44822", "filename": "src/librustdoc/html/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fescape.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -19,7 +19,7 @@ use std::fmt;\n /// string when passed to a format string.\n pub struct Escape<'a>(&'a str);\n \n-impl<'a> fmt::Default for Escape<'a> {\n+impl<'a> fmt::Show for Escape<'a> {\n     fn fmt(s: &Escape<'a>, fmt: &mut fmt::Formatter) {\n         // Because the internet is always right, turns out there's not that many\n         // characters to escape: http://stackoverflow.com/questions/7381974"}, {"sha": "6b09072ff080ef538d58c2dcdc52fffd1ec80acc", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -10,7 +10,7 @@\n \n //! HTML formatting module\n //!\n-//! This module contains a large number of `fmt::Default` implementations for\n+//! This module contains a large number of `fmt::Show` implementations for\n //! various types in `rustdoc::clean`. These implementations all currently\n //! assume that HTML output is desired, although it may be possible to redesign\n //! them in the future to instead emit any format desired.\n@@ -47,7 +47,7 @@ impl PuritySpace {\n     }\n }\n \n-impl fmt::Default for clean::Generics {\n+impl fmt::Show for clean::Generics {\n     fn fmt(g: &clean::Generics, f: &mut fmt::Formatter) {\n         if g.lifetimes.len() == 0 && g.type_params.len() == 0 { return }\n         f.buf.write(\"&lt;\".as_bytes());\n@@ -77,14 +77,14 @@ impl fmt::Default for clean::Generics {\n     }\n }\n \n-impl fmt::Default for clean::Lifetime {\n+impl fmt::Show for clean::Lifetime {\n     fn fmt(l: &clean::Lifetime, f: &mut fmt::Formatter) {\n         f.buf.write(\"'\".as_bytes());\n         f.buf.write(l.get_ref().as_bytes());\n     }\n }\n \n-impl fmt::Default for clean::TyParamBound {\n+impl fmt::Show for clean::TyParamBound {\n     fn fmt(bound: &clean::TyParamBound, f: &mut fmt::Formatter) {\n         match *bound {\n             clean::RegionBound => {\n@@ -97,7 +97,7 @@ impl fmt::Default for clean::TyParamBound {\n     }\n }\n \n-impl fmt::Default for clean::Path {\n+impl fmt::Show for clean::Path {\n     fn fmt(path: &clean::Path, f: &mut fmt::Formatter) {\n         if path.global { f.buf.write(\"::\".as_bytes()) }\n         for (i, seg) in path.segments.iter().enumerate() {\n@@ -269,7 +269,7 @@ fn typarams(w: &mut io::Writer, typarams: &Option<~[clean::TyParamBound]>) {\n     }\n }\n \n-impl fmt::Default for clean::Type {\n+impl fmt::Show for clean::Type {\n     fn fmt(g: &clean::Type, f: &mut fmt::Formatter) {\n         match *g {\n             clean::TyParamBinder(id) | clean::Generic(id) => {\n@@ -374,7 +374,7 @@ impl fmt::Default for clean::Type {\n     }\n }\n \n-impl fmt::Default for clean::FnDecl {\n+impl fmt::Show for clean::FnDecl {\n     fn fmt(d: &clean::FnDecl, f: &mut fmt::Formatter) {\n         write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n                args = d.inputs,\n@@ -383,7 +383,7 @@ impl fmt::Default for clean::FnDecl {\n     }\n }\n \n-impl fmt::Default for ~[clean::Argument] {\n+impl fmt::Show for ~[clean::Argument] {\n     fn fmt(inputs: &~[clean::Argument], f: &mut fmt::Formatter) {\n         let mut args = ~\"\";\n         for (i, input) in inputs.iter().enumerate() {\n@@ -397,7 +397,7 @@ impl fmt::Default for ~[clean::Argument] {\n     }\n }\n \n-impl<'a> fmt::Default for Method<'a> {\n+impl<'a> fmt::Show for Method<'a> {\n     fn fmt(m: &Method<'a>, f: &mut fmt::Formatter) {\n         let Method(selfty, d) = *m;\n         let mut args = ~\"\";\n@@ -433,7 +433,7 @@ impl<'a> fmt::Default for Method<'a> {\n     }\n }\n \n-impl fmt::Default for VisSpace {\n+impl fmt::Show for VisSpace {\n     fn fmt(v: &VisSpace, f: &mut fmt::Formatter) {\n         match v.get() {\n             Some(ast::Public) => { write!(f.buf, \"pub \"); }\n@@ -443,7 +443,7 @@ impl fmt::Default for VisSpace {\n     }\n }\n \n-impl fmt::Default for PuritySpace {\n+impl fmt::Show for PuritySpace {\n     fn fmt(p: &PuritySpace, f: &mut fmt::Formatter) {\n         match p.get() {\n             ast::UnsafeFn => write!(f.buf, \"unsafe \"),\n@@ -453,7 +453,7 @@ impl fmt::Default for PuritySpace {\n     }\n }\n \n-impl fmt::Default for clean::ViewPath {\n+impl fmt::Show for clean::ViewPath {\n     fn fmt(v: &clean::ViewPath, f: &mut fmt::Formatter) {\n         match *v {\n             clean::SimpleImport(ref name, ref src) => {\n@@ -478,7 +478,7 @@ impl fmt::Default for clean::ViewPath {\n     }\n }\n \n-impl fmt::Default for clean::ImportSource {\n+impl fmt::Show for clean::ImportSource {\n     fn fmt(v: &clean::ImportSource, f: &mut fmt::Formatter) {\n         match v.did {\n             // FIXME: shouldn't be restricted to just local imports\n@@ -495,7 +495,7 @@ impl fmt::Default for clean::ImportSource {\n     }\n }\n \n-impl fmt::Default for clean::ViewListIdent {\n+impl fmt::Show for clean::ViewListIdent {\n     fn fmt(v: &clean::ViewListIdent, f: &mut fmt::Formatter) {\n         match v.source {\n             // FIXME: shouldn't be limited to just local imports"}, {"sha": "4565facea0211ed8cd6a412f0d56975f0e800b7f", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -24,7 +24,7 @@ pub struct Page<'a> {\n     root_path: &'a str,\n }\n \n-pub fn render<T: fmt::Default, S: fmt::Default>(\n+pub fn render<T: fmt::Show, S: fmt::Show>(\n     dst: &mut io::Writer, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n {\n     write!(dst,"}, {"sha": "254d65ae2f604093a1894018d041fbf29e730acf", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -14,7 +14,7 @@\n //! (bundled into the rust runtime). This module self-contains the C bindings\n //! and necessary legwork to render markdown, and exposes all of the\n //! functionality through a unit-struct, `Markdown`, which has an implementation\n-//! of `fmt::Default`. Example usage:\n+//! of `fmt::Show`. Example usage:\n //!\n //! ```rust,ignore\n //! use rustdoc::html::markdown::Markdown;\n@@ -32,7 +32,7 @@ use std::str;\n use std::unstable::intrinsics;\n use std::vec;\n \n-/// A unit struct which has the `fmt::Default` trait implemented. When\n+/// A unit struct which has the `fmt::Show` trait implemented. When\n /// formatted, this struct will emit the HTML corresponding to the rendered\n /// version of the contained markdown string.\n pub struct Markdown<'a>(&'a str);\n@@ -209,7 +209,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n     }\n }\n \n-impl<'a> fmt::Default for Markdown<'a> {\n+impl<'a> fmt::Show for Markdown<'a> {\n     fn fmt(md: &Markdown<'a>, fmt: &mut fmt::Formatter) {\n         let Markdown(md) = *md;\n         // This is actually common enough to special-case"}, {"sha": "0b2c568c723aee8d836787a344b8a2e7fc7e5663", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -801,7 +801,7 @@ impl<'a> Item<'a> {\n     }\n }\n \n-impl<'a> fmt::Default for Item<'a> {\n+impl<'a> fmt::Show for Item<'a> {\n     fn fmt(it: &Item<'a>, fmt: &mut fmt::Formatter) {\n         match attr::find_stability(it.item.attrs.iter()) {\n             Some(ref stability) => {\n@@ -990,7 +990,7 @@ fn item_module(w: &mut Writer, cx: &Context,\n         match myitem.inner {\n             clean::StaticItem(ref s) | clean::ForeignStaticItem(ref s) => {\n                 struct Initializer<'a>(&'a str);\n-                impl<'a> fmt::Default for Initializer<'a> {\n+                impl<'a> fmt::Show for Initializer<'a> {\n                     fn fmt(s: &Initializer<'a>, f: &mut fmt::Formatter) {\n                         let Initializer(s) = *s;\n                         if s.len() == 0 { return; }\n@@ -1491,7 +1491,7 @@ fn item_typedef(w: &mut Writer, it: &clean::Item, t: &clean::Typedef) {\n     document(w, it);\n }\n \n-impl<'a> fmt::Default for Sidebar<'a> {\n+impl<'a> fmt::Show for Sidebar<'a> {\n     fn fmt(s: &Sidebar<'a>, fmt: &mut fmt::Formatter) {\n         let cx = s.cx;\n         let it = s.item;\n@@ -1556,7 +1556,7 @@ fn build_sidebar(m: &clean::Module) -> HashMap<~str, ~[~str]> {\n     return map;\n }\n \n-impl<'a> fmt::Default for Source<'a> {\n+impl<'a> fmt::Show for Source<'a> {\n     fn fmt(s: &Source<'a>, fmt: &mut fmt::Formatter) {\n         let Source(s) = *s;\n         let lines = s.lines().len();"}, {"sha": "435e5568b8f31a74842b418d2826cafdf5854609", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -149,13 +149,13 @@ The current mapping of types to traits is:\n * `f` \u21d2 `Float`\n * `e` \u21d2 `LowerExp`\n * `E` \u21d2 `UpperExp`\n-* *nothing* \u21d2 `Default`\n+* *nothing* \u21d2 `Show`\n \n What this means is that any type of argument which implements the\n `std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are\n provided for these traits for a number of primitive types by the standard\n library as well. If no format is specified (as in `{}` or `{:6}`), then the\n-format trait used is the `Default` trait. This is one of the more commonly\n+format trait used is the `Show` trait. This is one of the more commonly\n implemented traits when formatting a custom type.\n \n When implementing a format trait for your own time, you will have to implement a\n@@ -186,7 +186,7 @@ struct Vector2D {\n     y: int,\n }\n \n-impl fmt::Default for Vector2D {\n+impl fmt::Show for Vector2D {\n     fn fmt(obj: &Vector2D, f: &mut fmt::Formatter) {\n         // The `f.buf` value is of the type `&mut io::Writer`, which is what th\n         // write! macro is expecting. Note that this formatting ignores the\n@@ -468,6 +468,7 @@ will look like `\"\\\\{\"`.\n \n */\n \n+#[cfg(not(stage0))]\n use prelude::*;\n \n use cast;\n@@ -479,6 +480,24 @@ use repr;\n use util;\n use vec;\n \n+// SNAP b6400f9 this is just because the `prelude::*` import above\n+// includes default::Default, so the reexport doesn't work.\n+#[cfg(stage0)]\n+pub use Default = fmt::Show; // export required for `format!()` etc.\n+\n+#[cfg(stage0)]\n+use container::Container;\n+#[cfg(stage0)]\n+use iter::{Iterator, range};\n+#[cfg(stage0)]\n+use option::{Option,Some,None};\n+#[cfg(stage0)]\n+use vec::ImmutableVector;\n+#[cfg(stage0)]\n+use str::StrSlice;\n+#[cfg(stage0)]\n+use num::Signed;\n+\n pub mod parse;\n pub mod rt;\n \n@@ -542,7 +561,7 @@ pub struct Arguments<'a> {\n /// to this trait. There is not an explicit way of selecting this trait to be\n /// used for formatting, it is only if no other format is specified.\n #[allow(missing_doc)]\n-pub trait Default { fn fmt(&Self, &mut Formatter); }\n+pub trait Show { fn fmt(&Self, &mut Formatter); }\n \n /// Format trait for the `b` character\n #[allow(missing_doc)]\n@@ -1148,10 +1167,10 @@ impl<T> Pointer for *mut T {\n     fn fmt(t: &*mut T, f: &mut Formatter) { Pointer::fmt(&(*t as *T), f) }\n }\n \n-// Implementation of Default for various core types\n+// Implementation of Show for various core types\n \n macro_rules! delegate(($ty:ty to $other:ident) => {\n-    impl<'a> Default for $ty {\n+    impl<'a> Show for $ty {\n         fn fmt(me: &$ty, f: &mut Formatter) {\n             $other::fmt(me, f)\n         }\n@@ -1174,10 +1193,10 @@ delegate!(char to Char)\n delegate!(f32 to Float)\n delegate!(f64 to Float)\n \n-impl<T> Default for *T {\n+impl<T> Show for *T {\n     fn fmt(me: &*T, f: &mut Formatter) { Pointer::fmt(me, f) }\n }\n-impl<T> Default for *mut T {\n+impl<T> Show for *mut T {\n     fn fmt(me: &*mut T, f: &mut Formatter) { Pointer::fmt(me, f) }\n }\n "}, {"sha": "6a10f24916f2fb5c6bb42d733bc4146f2782f4a3", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -91,7 +91,7 @@ pub enum ProcessExit {\n     ExitSignal(int),\n }\n \n-impl fmt::Default for ProcessExit {\n+impl fmt::Show for ProcessExit {\n     /// Format a ProcessExit enum, to nicely present the information.\n     fn fmt(obj: &ProcessExit, f: &mut fmt::Formatter) {\n         match *obj {"}, {"sha": "83cedd92a3f7d238c6e22c346bc5a152fc1512f4", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -380,7 +380,7 @@ impl<T: Default> Option<T> {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T: fmt::Default> fmt::Default for Option<T> {\n+impl<T: fmt::Show> fmt::Show for Option<T> {\n     #[inline]\n     fn fmt(s: &Option<T>, f: &mut fmt::Formatter) {\n         match *s {"}, {"sha": "0ea1c7510a1d200195145c50554bd68cee449617", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -928,7 +928,7 @@ pub enum MapError {\n     ErrMapViewOfFile(uint)\n }\n \n-impl fmt::Default for MapError {\n+impl fmt::Show for MapError {\n     fn fmt(val: &MapError, out: &mut fmt::Formatter) {\n         let str = match *val {\n             ErrFdNotAvail => \"fd not available for reading or writing\","}, {"sha": "86f96a1075bebe0aa84fa8dbb9a8d7dfe73b2cf6", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -198,14 +198,14 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     /// Converts the Path into an owned byte vector\n     fn into_vec(self) -> ~[u8];\n \n-    /// Returns an object that implements `fmt::Default` for printing paths\n+    /// Returns an object that implements `Show` for printing paths\n     ///\n     /// This will print the equivalent of `to_display_str()` when used with a {} format parameter.\n     fn display<'a>(&'a self) -> Display<'a, Self> {\n         Display{ path: self, filename: false }\n     }\n \n-    /// Returns an object that implements `fmt::Default` for printing filenames\n+    /// Returns an object that implements `Show` for printing filenames\n     ///\n     /// This will print the equivalent of `to_filename_display_str()` when used with a {}\n     /// format parameter. If there is no filename, nothing will be printed.\n@@ -532,7 +532,7 @@ pub struct Display<'a, P> {\n     priv filename: bool\n }\n \n-impl<'a, P: GenericPath> fmt::Default for Display<'a, P> {\n+impl<'a, P: GenericPath> fmt::Show for Display<'a, P> {\n     fn fmt(d: &Display<P>, f: &mut fmt::Formatter) {\n         d.with_str(|s| f.pad(s))\n     }"}, {"sha": "cc8fdeaccfea9765d1e1fcf13eaf593981148e70", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -206,7 +206,7 @@ impl<T, E> Result<T, E> {\n // Trait implementations\n /////////////////////////////////////////////////////////////////////////////\n \n-impl<T: fmt::Default, E: fmt::Default> fmt::Default for Result<T, E> {\n+impl<T: fmt::Show, E: fmt::Show> fmt::Show for Result<T, E> {\n     #[inline]\n     fn fmt(s: &Result<T, E>, f: &mut fmt::Formatter) {\n         match *s {"}, {"sha": "535f5a5d0cd51e18073ea17f9439e2ae22b75db6", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -704,22 +704,22 @@ impl<'a> Context<'a> {\n \n         let fmt_trait = match *ty {\n             Known(ref tyname) => {\n-                match (*tyname).as_slice() {\n-                    \"\"  => \"Default\",\n-                    \"?\" => \"Poly\",\n-                    \"b\" => \"Bool\",\n-                    \"c\" => \"Char\",\n-                    \"d\" | \"i\" => \"Signed\",\n-                    \"e\" => \"LowerExp\",\n-                    \"E\" => \"UpperExp\",\n-                    \"f\" => \"Float\",\n-                    \"o\" => \"Octal\",\n-                    \"p\" => \"Pointer\",\n-                    \"s\" => \"String\",\n-                    \"t\" => \"Binary\",\n-                    \"u\" => \"Unsigned\",\n-                    \"x\" => \"LowerHex\",\n-                    \"X\" => \"UpperHex\",\n+                match tyname.as_slice() {\n+                    \"\"  => \"secret_show\",\n+                    \"?\" => \"secret_poly\",\n+                    \"b\" => \"secret_bool\",\n+                    \"c\" => \"secret_char\",\n+                    \"d\" | \"i\" => \"secret_signed\",\n+                    \"e\" => \"secret_lower_exp\",\n+                    \"E\" => \"secret_upper_exp\",\n+                    \"f\" => \"secret_float\",\n+                    \"o\" => \"secret_octal\",\n+                    \"p\" => \"secret_pointer\",\n+                    \"s\" => \"secret_string\",\n+                    \"t\" => \"secret_binary\",\n+                    \"u\" => \"secret_unsigned\",\n+                    \"x\" => \"secret_lower_hex\",\n+                    \"X\" => \"secret_upper_hex\",\n                     _ => {\n                         self.ecx.span_err(sp,\n                                           format!(\"unknown format trait `{}`\","}, {"sha": "6d2acd3d803de592cf4bc1e1cf7fa9fcc7bbc10d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -587,7 +587,7 @@ impl BytesContainer for InternedString {\n     }\n }\n \n-impl fmt::Default for InternedString {\n+impl fmt::Show for InternedString {\n     fn fmt(obj: &InternedString, f: &mut fmt::Formatter) {\n         write!(f.buf, \"{}\", obj.string.as_slice());\n     }"}, {"sha": "4aef239f796f79781122902f44a5a8b251bba1ba", "filename": "src/test/run-pass/logging-only-prints-once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/003ce502350ed1e374b740ee2d719e500c165615/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003ce502350ed1e374b740ee2d719e500c165615/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flogging-only-prints-once.rs?ref=003ce502350ed1e374b740ee2d719e500c165615", "patch": "@@ -16,7 +16,7 @@ use std::fmt;\n \n struct Foo(Cell<int>);\n \n-impl fmt::Default for Foo {\n+impl fmt::Show for Foo {\n     fn fmt(f: &Foo, _fmt: &mut fmt::Formatter) {\n         let Foo(ref f) = *f;\n         assert!(f.get() == 0);"}]}