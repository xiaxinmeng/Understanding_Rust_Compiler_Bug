{"sha": "c1c935db4611da949e4e79b1abe048d18d1224bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzkzNWRiNDYxMWRhOTQ5ZTRlNzliMWFiZTA0OGQxOGQxMjI0YmY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-04-04T18:58:32Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-04-04T18:58:32Z"}, "message": "Merge pull request #836 from Manishearth/doc\n\nFix false positive with `DOC_MARKDOWN` and `32MiB`", "tree": {"sha": "1def05a1f1b33ab724dbbd2ed8dcc8d5a9ebc1b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1def05a1f1b33ab724dbbd2ed8dcc8d5a9ebc1b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c935db4611da949e4e79b1abe048d18d1224bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c935db4611da949e4e79b1abe048d18d1224bf", "html_url": "https://github.com/rust-lang/rust/commit/c1c935db4611da949e4e79b1abe048d18d1224bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c935db4611da949e4e79b1abe048d18d1224bf/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69913e65f36fa654f5c496990867b3c290ea671c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69913e65f36fa654f5c496990867b3c290ea671c", "html_url": "https://github.com/rust-lang/rust/commit/69913e65f36fa654f5c496990867b3c290ea671c"}, {"sha": "ee907b73a4935140c547d3f794e31a13e4f6a75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee907b73a4935140c547d3f794e31a13e4f6a75a", "html_url": "https://github.com/rust-lang/rust/commit/ee907b73a4935140c547d3f794e31a13e4f6a75a"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "0ad238b5522963980fb33a6845116f799e502f9f", "filename": "src/doc.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc.rs?ref=c1c935db4611da949e4e79b1abe048d18d1224bf", "patch": "@@ -24,8 +24,16 @@ declare_lint! {\n     \"checks for the presence of `_`, `::` or camel-case outside ticks in documentation\"\n }\n \n-#[derive(Copy,Clone)]\n-pub struct Doc;\n+#[derive(Clone)]\n+pub struct Doc {\n+    valid_idents: Vec<String>,\n+}\n+\n+impl Doc {\n+    pub fn new(valid_idents: Vec<String>) -> Self {\n+        Doc { valid_idents: valid_idents }\n+    }\n+}\n \n impl LintPass for Doc {\n     fn get_lints(&self) -> LintArray {\n@@ -35,11 +43,11 @@ impl LintPass for Doc {\n \n impl EarlyLintPass for Doc {\n     fn check_crate(&mut self, cx: &EarlyContext, krate: &ast::Crate) {\n-        check_attrs(cx, &krate.attrs, krate.span);\n+        check_attrs(cx, &self.valid_idents, &krate.attrs, krate.span);\n     }\n \n     fn check_item(&mut self, cx: &EarlyContext, item: &ast::Item) {\n-        check_attrs(cx, &item.attrs, item.span);\n+        check_attrs(cx, &self.valid_idents, &item.attrs, item.span);\n     }\n }\n \n@@ -73,7 +81,7 @@ fn collect_doc(attrs: &[ast::Attribute]) -> (Cow<str>, Option<Span>) {\n     }\n }\n \n-pub fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_span: Span) {\n+pub fn check_attrs<'a>(cx: &EarlyContext, valid_idents: &[String], attrs: &'a [ast::Attribute], default_span: Span) {\n     let (doc, span) = collect_doc(attrs);\n     let span = span.unwrap_or(default_span);\n \n@@ -100,15 +108,19 @@ pub fn check_attrs<'a>(cx: &EarlyContext, attrs: &'a [ast::Attribute], default_s\n         }\n \n         if !in_ticks {\n-            check_word(cx, word, span);\n+            check_word(cx, valid_idents, word, span);\n         }\n     }\n }\n \n-fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n+fn check_word(cx: &EarlyContext, valid_idents: &[String], word: &str, span: Span) {\n     /// Checks if a string a camel-case, ie. contains at least two uppercase letter (`Clippy` is\n     /// ok) and one lower-case letter (`NASA` is ok). Plural are also excluded (`IDs` is ok).\n     fn is_camel_case(s: &str) -> bool {\n+        if s.starts_with(|c: char| c.is_digit(10)) {\n+            return false;\n+        }\n+\n         let s = if s.ends_with('s') {\n             &s[..s.len()-1]\n         } else {\n@@ -134,6 +146,10 @@ fn check_word(cx: &EarlyContext, word: &str, span: Span) {\n     // Or even as in `_foo bar_` which is emphasized.\n     let word = word.trim_matches(|c: char| !c.is_alphanumeric());\n \n+    if valid_idents.iter().any(|i| i == word) {\n+        return;\n+    }\n+\n     if has_underscore(word) || word.contains(\"::\") || is_camel_case(word) {\n         span_lint(cx, DOC_MARKDOWN, span, &format!(\"you should put `{}` between ticks in the documentation\", word));\n     }"}, {"sha": "7ab48f4622361b613d8ee5b45225f0cbe34ae4e0", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c1c935db4611da949e4e79b1abe048d18d1224bf", "patch": "@@ -233,7 +233,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box new_without_default::NewWithoutDefault);\n     reg.register_late_lint_pass(box blacklisted_name::BlackListedName::new(conf.blacklisted_names));\n     reg.register_late_lint_pass(box functions::Functions::new(conf.too_many_arguments_threshold));\n-    reg.register_early_lint_pass(box doc::Doc);\n+    reg.register_early_lint_pass(box doc::Doc::new(conf.doc_valid_idents));\n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n         array_indexing::INDEXING_SLICING,"}, {"sha": "e11a6c0d9c7ce2fe9ebfe862f5d56f860b30cc20", "filename": "src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c935db4611da949e4e79b1abe048d18d1224bf/src%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fconf.rs?ref=c1c935db4611da949e4e79b1abe048d18d1224bf", "patch": "@@ -149,6 +149,8 @@ define_Conf! {\n     (\"blacklisted-names\", blacklisted_names, [\"foo\", \"bar\", \"baz\"] => Vec<String>),\n     /// Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have\n     (\"cyclomatic-complexity-threshold\", cyclomatic_complexity_threshold, 25 => u64),\n+    /// Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks\n+    (\"doc-valid-idents\", doc_valid_idents, [\"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\"] => Vec<String>),\n     /// Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have\n     (\"too-many-arguments-threshold\", too_many_arguments_threshold, 7 => u64),\n     /// Lint: TYPE_COMPLEXITY. The maximum complexity a type can have"}, {"sha": "635b33be9070cb182d167e2b8048e4b2827f42eb", "filename": "tests/compile-fail/doc.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1c935db4611da949e4e79b1abe048d18d1224bf/tests%2Fcompile-fail%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c935db4611da949e4e79b1abe048d18d1224bf/tests%2Fcompile-fail%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdoc.rs?ref=c1c935db4611da949e4e79b1abe048d18d1224bf", "patch": "@@ -29,6 +29,18 @@ fn multiline_ticks() {\n fn test_emphasis() {\n }\n \n+/// This tests units. See also #835.\n+/// kiB MiB GiB TiB PiB EiB\n+/// kib Mib Gib Tib Pib Eib\n+/// kB MB GB TB PB EB\n+/// kb Mb Gb Tb Pb Eb\n+/// 32kiB 32MiB 32GiB 32TiB 32PiB 32EiB\n+/// 32kib 32Mib 32Gib 32Tib 32Pib 32Eib\n+/// 32kB 32MB 32GB 32TB 32PB 32EB\n+/// 32kb 32Mb 32Gb 32Tb 32Pb 32Eb\n+fn test_units() {\n+}\n+\n /// This test has [a link with underscores][chunked-example] inside it. See #823.\n /// See also [the issue tracker](https://github.com/Manishearth/rust-clippy/search?q=doc_markdown&type=Issues).\n ///\n@@ -40,4 +52,5 @@ fn main() {\n     foo_bar();\n     multiline_ticks();\n     test_emphasis();\n+    test_units();\n }"}]}