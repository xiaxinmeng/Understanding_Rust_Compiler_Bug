{"sha": "f5ac844296335590c30caeef9fddb1af0692ab76", "node_id": "C_kwDOAAsO6NoAKGY1YWM4NDQyOTYzMzU1OTBjMzBjYWVlZjlmZGRiMWFmMDY5MmFiNzY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-10-08T22:47:59Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-04-06T08:34:16Z"}, "message": "Refactor unwind from Option to a new enum", "tree": {"sha": "70623e7fd38e66d0625329a0e5b07668ff6a1278", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70623e7fd38e66d0625329a0e5b07668ff6a1278"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ac844296335590c30caeef9fddb1af0692ab76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac844296335590c30caeef9fddb1af0692ab76", "html_url": "https://github.com/rust-lang/rust/commit/f5ac844296335590c30caeef9fddb1af0692ab76", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ac844296335590c30caeef9fddb1af0692ab76/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9c7fb10b92c47e9bb2713fae5ef74a07efce92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9c7fb10b92c47e9bb2713fae5ef74a07efce92d", "html_url": "https://github.com/rust-lang/rust/commit/e9c7fb10b92c47e9bb2713fae5ef74a07efce92d"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "ff195cd7288028ec914773c09a8cc5aae1e7a9d6", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5ac844296335590c30caeef9fddb1af0692ab76/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ac844296335590c30caeef9fddb1af0692ab76/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=f5ac844296335590c30caeef9fddb1af0692ab76", "patch": "@@ -318,7 +318,7 @@ fn check_terminator<'tcx>(\n             from_hir_call: _,\n             destination: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n             fn_span: _,\n         } => {\n             let fn_ty = func.ty(body, tcx);\n@@ -361,7 +361,7 @@ fn check_terminator<'tcx>(\n             expected: _,\n             msg: _,\n             target: _,\n-            cleanup: _,\n+            unwind: _,\n         } => check_operand(tcx, cond, span, body),\n \n         TerminatorKind::InlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),"}]}