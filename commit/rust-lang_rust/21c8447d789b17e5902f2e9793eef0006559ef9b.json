{"sha": "21c8447d789b17e5902f2e9793eef0006559ef9b", "node_id": "C_kwDOAAsO6NoAKDIxYzg0NDdkNzg5YjE3ZTU5MDJmMmU5NzkzZWVmMDAwNjU1OWVmOWI", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-01T19:37:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-01T19:37:11Z"}, "message": "Rollup merge of #101245 - GuillaumeGomez:remove-unneeded-where-whitespace, r=notriddle\n\nRemove unneeded where whitespace\n\nIt fixes these two bugs:\n\n![Screenshot from 2022-08-31 18-14-40](https://user-images.githubusercontent.com/3050060/187727950-94657419-abfa-454c-9d27-004280fbcb45.png)\n![Screenshot from 2022-08-31 18-14-49](https://user-images.githubusercontent.com/3050060/187727956-21d1b39d-62d7-4e7b-8f6f-631ceda67a19.png)\n\nIt's a relic from a very old time (this commit: https://github.com/rust-lang/rust/commit/bfd01b7f40ae2cbfe9acbc1d10e79ffe16870df8).\n\nYou can test the result [here](https://rustdoc.crud.net/imperio/remove-unneeded-where-whitespace/lib2/struct.WhereWhitespace.html).\n\ncc `````````@jsha`````````\nr? `````````@notriddle`````````", "tree": {"sha": "5a7e7a1b77aa384f15577c10a764a0b2ffd1a875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a7e7a1b77aa384f15577c10a764a0b2ffd1a875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c8447d789b17e5902f2e9793eef0006559ef9b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEQnnCRBK7hj4Ov3rIwAADSoIADFQ1Kbm3ynIn8Sv+0Mf3Tqw\ny8f9+lOwogoUJvOTdXmCkXz176pdm6aBp+fYYa0AQEkfvOhufMoFEFkLkDVpBVHd\n3OsIb7zxMf1FhElB1rbIJDejVQoUQ9dpXQi6yJ5E48aRy4gSgUJdEM7YfxbsNV4S\nUh0HoJ+Vc3ocP+9ySswpLKCmsmAH8K7FF71Mkp8eTWgHjuEJw2v2Rct/j7vbRbqd\nNy3+voFkiybyjperd6Qgu5Wb2S8OLwZ05B+ELabkU1zw8SVrnvq2WOOUEoWMc6P7\nkVYpC41eyKq49bsP1cgy2UHO70F45TQxlwM5Fa4HPNTaDS24kraaVM1Jk+pboiw=\n=Rgge\n-----END PGP SIGNATURE-----\n", "payload": "tree 5a7e7a1b77aa384f15577c10a764a0b2ffd1a875\nparent 36d050645fecdadd40bbaeb9cc9071a990978b69\nparent b112bfeda9dba77c6d7e8eef92125e7002c43e68\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662061031 +0200\ncommitter GitHub <noreply@github.com> 1662061031 +0200\n\nRollup merge of #101245 - GuillaumeGomez:remove-unneeded-where-whitespace, r=notriddle\n\nRemove unneeded where whitespace\n\nIt fixes these two bugs:\n\n![Screenshot from 2022-08-31 18-14-40](https://user-images.githubusercontent.com/3050060/187727950-94657419-abfa-454c-9d27-004280fbcb45.png)\n![Screenshot from 2022-08-31 18-14-49](https://user-images.githubusercontent.com/3050060/187727956-21d1b39d-62d7-4e7b-8f6f-631ceda67a19.png)\n\nIt's a relic from a very old time (this commit: https://github.com/rust-lang/rust/commit/bfd01b7f40ae2cbfe9acbc1d10e79ffe16870df8).\n\nYou can test the result [here](https://rustdoc.crud.net/imperio/remove-unneeded-where-whitespace/lib2/struct.WhereWhitespace.html).\n\ncc `````````@jsha`````````\nr? `````````@notriddle`````````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c8447d789b17e5902f2e9793eef0006559ef9b", "html_url": "https://github.com/rust-lang/rust/commit/21c8447d789b17e5902f2e9793eef0006559ef9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c8447d789b17e5902f2e9793eef0006559ef9b/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d050645fecdadd40bbaeb9cc9071a990978b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d050645fecdadd40bbaeb9cc9071a990978b69", "html_url": "https://github.com/rust-lang/rust/commit/36d050645fecdadd40bbaeb9cc9071a990978b69"}, {"sha": "b112bfeda9dba77c6d7e8eef92125e7002c43e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/b112bfeda9dba77c6d7e8eef92125e7002c43e68", "html_url": "https://github.com/rust-lang/rust/commit/b112bfeda9dba77c6d7e8eef92125e7002c43e68"}], "stats": {"total": 181, "additions": 114, "deletions": 67}, "files": [{"sha": "be10a5c101f7ffa3e5ad5c9aa028f40201a07d45", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -349,8 +349,7 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n         let where_preds = comma_sep(where_predicates, false);\n         let clause = if f.alternate() {\n             if ending == Ending::Newline {\n-                // add a space so stripping <br> tags and breaking spaces still renders properly\n-                format!(\" where{where_preds}, \")\n+                format!(\" where{where_preds},\")\n             } else {\n                 format!(\" where{where_preds}\")\n             }\n@@ -364,20 +363,16 @@ pub(crate) fn print_where_clause<'a, 'tcx: 'a>(\n \n             if ending == Ending::Newline {\n                 let mut clause = \"&nbsp;\".repeat(indent.saturating_sub(1));\n-                // add a space so stripping <br> tags and breaking spaces still renders properly\n-                write!(\n-                    clause,\n-                    \" <span class=\\\"where fmt-newline\\\">where{where_preds},&nbsp;</span>\"\n-                )?;\n+                write!(clause, \"<span class=\\\"where fmt-newline\\\">where{where_preds},</span>\")?;\n                 clause\n             } else {\n                 // insert a <br> tag after a single space but before multiple spaces at the start\n                 if indent == 0 {\n-                    format!(\" <br><span class=\\\"where\\\">where{where_preds}</span>\")\n+                    format!(\"<br><span class=\\\"where\\\">where{where_preds}</span>\")\n                 } else {\n                     let mut clause = br_with_padding;\n                     clause.truncate(clause.len() - 5 * \"&nbsp;\".len());\n-                    write!(clause, \" <span class=\\\"where\\\">where{where_preds}</span>\")?;\n+                    write!(clause, \"<span class=\\\"where\\\">where{where_preds}</span>\")?;\n                     clause\n                 }\n             }"}, {"sha": "7577c71962388ebc2617ebebd3b722d0ff55af10", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -1737,8 +1737,8 @@ pub(crate) fn render_impl_summary(\n     // in documentation pages for trait with automatic implementations like \"Send\" and \"Sync\".\n     aliases: &[String],\n ) {\n-    let id =\n-        cx.derive_id(get_id_for_impl(&i.inner_impl().for_, i.inner_impl().trait_.as_ref(), cx));\n+    let inner_impl = i.inner_impl();\n+    let id = cx.derive_id(get_id_for_impl(&inner_impl.for_, inner_impl.trait_.as_ref(), cx));\n     let aliases = if aliases.is_empty() {\n         String::new()\n     } else {\n@@ -1750,9 +1750,9 @@ pub(crate) fn render_impl_summary(\n     write!(w, \"<h3 class=\\\"code-header in-band\\\">\");\n \n     if let Some(use_absolute) = use_absolute {\n-        write!(w, \"{}\", i.inner_impl().print(use_absolute, cx));\n+        write!(w, \"{}\", inner_impl.print(use_absolute, cx));\n         if show_def_docs {\n-            for it in &i.inner_impl().items {\n+            for it in &inner_impl.items {\n                 if let clean::AssocTypeItem(ref tydef, ref _bounds) = *it.kind {\n                     w.write_str(\"<span class=\\\"where fmt-newline\\\">  \");\n                     assoc_type(\n@@ -1770,11 +1770,11 @@ pub(crate) fn render_impl_summary(\n             }\n         }\n     } else {\n-        write!(w, \"{}\", i.inner_impl().print(false, cx));\n+        write!(w, \"{}\", inner_impl.print(false, cx));\n     }\n     write!(w, \"</h3>\");\n \n-    let is_trait = i.inner_impl().trait_.is_some();\n+    let is_trait = inner_impl.trait_.is_some();\n     if is_trait {\n         if let Some(portability) = portability(&i.impl_item, Some(parent)) {\n             write!(w, \"<span class=\\\"item-info\\\">{}</span>\", portability);"}, {"sha": "7f3172878bfb5f74325ee5b1a0f75db7143c30d1", "filename": "src/test/rustdoc-gui/src/lib2/lib.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Flib2%2Flib.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -143,3 +143,30 @@ pub struct LongItemInfo2;\n /// Some docs.\n #[doc(cfg(any(target_os = \"android\", target_os = \"linux\", target_os = \"emscripten\", target_os = \"dragonfly\", target_os = \"freebsd\", target_os = \"netbsd\", target_os = \"openbsd\")))]\n impl SimpleTrait for LongItemInfo2 {}\n+\n+pub struct WhereWhitespace<T>;\n+\n+impl<T> WhereWhitespace<T> {\n+    pub fn new<F>(f: F) -> Self\n+    where\n+        F: FnMut() -> i32,\n+    {}\n+}\n+\n+impl<K, T> Whitespace<&K> for WhereWhitespace<T>\n+where\n+    K: std::fmt::Debug,\n+{\n+    type Output = WhereWhitespace<T>;\n+    fn index(&self, _key: &K) -> &Self::Output {\n+        self\n+    }\n+}\n+\n+pub trait Whitespace<Idx>\n+where\n+    Idx: ?Sized,\n+{\n+    type Output;\n+    fn index(&self, index: Idx) -> &Self::Output;\n+}"}, {"sha": "1a3ff1f491cbbff8fe55c6f3dff28da522b4c90a", "filename": "src/test/rustdoc-gui/where-whitespace.goml", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fwhere-whitespace.goml?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -0,0 +1,27 @@\n+// This test ensures that the where conditions are correctly displayed.\n+goto: file://|DOC_PATH|/lib2/trait.Whitespace.html\n+show-text: true\n+// First, we check in the trait definition if the where clause is \"on its own\" (not on the same\n+// line than \"pub trait Whitespace<Idx>\").\n+compare-elements-position-false: (\".item-decl code\", \".where.fmt-newline\", (\"y\"))\n+// And that the code following it isn't on the same line either.\n+compare-elements-position-false: (\".item-decl .fnname\", \".where.fmt-newline\", (\"y\"))\n+\n+goto: file://|DOC_PATH|/lib2/struct.WhereWhitespace.html\n+// We make the screen a bit wider to ensure that the trait impl is on one line.\n+size: (915, 915)\n+\n+compare-elements-position-false: (\"#method\\.new .fnname\", \"#method\\.new .where.fmt-newline\", (\"y\"))\n+// We ensure that both the trait name and the struct name are on the same line in\n+// \"impl<K, T> Whitespace<&K> for WhereWhitespace<T>\".\n+compare-elements-position: (\n+    \"#trait-implementations-list .impl h3 .trait\",\n+    \"#trait-implementations-list .impl h3 .struct\",\n+    (\"y\"),\n+)\n+// And we now check that the where condition isn't on the same line.\n+compare-elements-position-false: (\n+    \"#trait-implementations-list .impl h3 .trait\",\n+    \"#trait-implementations-list .impl h3 .where.fmt-newline\",\n+    (\"y\"),\n+)"}, {"sha": "87d2f29e26055461a284f5b581469cc2e421e399", "filename": "src/test/rustdoc/const-generics/const-generics-docs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fconst-generics-docs.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -31,12 +31,12 @@ impl Trait<{1 + 2}> for u8 {}\n impl<const N: usize> Trait<N> for [u8; N] {}\n \n // @has foo/struct.Foo.html '//pre[@class=\"rust struct\"]' \\\n-//      'pub struct Foo<const N: usize> where u8: Trait<N>'\n+//      'pub struct Foo<const N: usize>where u8: Trait<N>'\n pub struct Foo<const N: usize> where u8: Trait<N>;\n // @has foo/struct.Bar.html '//pre[@class=\"rust struct\"]' 'pub struct Bar<T, const N: usize>(_)'\n pub struct Bar<T, const N: usize>([T; N]);\n \n-// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M> where u8: Trait<M>'\n+// @has foo/struct.Foo.html '//*[@id=\"impl-Foo%3CM%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Foo<M>where u8: Trait<M>'\n impl<const M: usize> Foo<M> where u8: Trait<M> {\n     // @has - '//*[@id=\"associatedconstant.FOO_ASSOC\"]' 'pub const FOO_ASSOC: usize'\n     pub const FOO_ASSOC: usize = M + 13;\n@@ -50,14 +50,14 @@ impl<const M: usize> Foo<M> where u8: Trait<M> {\n // @has foo/struct.Bar.html '//*[@id=\"impl-Bar%3Cu8%2C%20M%3E\"]/h3[@class=\"code-header in-band\"]' 'impl<const M: usize> Bar<u8, M>'\n impl<const M: usize> Bar<u8, M> {\n     // @has - '//*[@id=\"method.hey\"]' \\\n-    //      'pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N>'\n+    //      'pub fn hey<const N: usize>(&self) -> Foo<N>where u8: Trait<N>'\n     pub fn hey<const N: usize>(&self) -> Foo<N> where u8: Trait<N> {\n         Foo\n     }\n }\n \n // @has foo/fn.test.html '//pre[@class=\"rust fn\"]' \\\n-//      'pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N>'\n+//      'pub fn test<const N: usize>() -> impl Trait<N>where u8: Trait<N>'\n pub fn test<const N: usize>() -> impl Trait<N> where u8: Trait<N> {\n     2u8\n }"}, {"sha": "2b9d4952d04eecd6c670d920b4f530b62dfc009d", "filename": "src/test/rustdoc/generic-associated-types/gats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fgeneric-associated-types%2Fgats.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -3,7 +3,7 @@\n \n // @has foo/trait.LendingIterator.html\n pub trait LendingIterator {\n-    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a\"\n+    // @has - '//*[@id=\"associatedtype.Item\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a\"\n     type Item<'a> where Self: 'a;\n \n     // @has - '//*[@id=\"tymethod.next\"]//h4[@class=\"code-header\"]' \\\n@@ -24,7 +24,7 @@ impl LendingIterator for () {\n pub struct Infinite<T>(T);\n \n // @has foo/trait.LendingIterator.html\n-// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a> where Self: 'a = &'a T\"\n+// @has - '//*[@id=\"associatedtype.Item-2\"]//h4[@class=\"code-header\"]' \"type Item<'a>where Self: 'a = &'a T\"\n impl<T> LendingIterator for Infinite<T> {\n     type Item<'a> where Self: 'a = &'a T;\n "}, {"sha": "59b5b6e5797cc47e3037fdd914df2f6476a24187", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -4,23 +4,23 @@\n pub trait Trait<'x> {}\n \n // @has foo/fn.test1.html\n-// @has - '//pre' \"pub fn test1<T>() where for<'a> &'a T: Iterator,\"\n+// @has - '//pre' \"pub fn test1<T>()where for<'a> &'a T: Iterator,\"\n pub fn test1<T>()\n where\n     for<'a> &'a T: Iterator,\n {\n }\n \n // @has foo/fn.test2.html\n-// @has - '//pre' \"pub fn test2<T>() where for<'a, 'b> &'a T: Trait<'b>,\"\n+// @has - '//pre' \"pub fn test2<T>()where for<'a, 'b> &'a T: Trait<'b>,\"\n pub fn test2<T>()\n where\n     for<'a, 'b> &'a T: Trait<'b>,\n {\n }\n \n // @has foo/fn.test3.html\n-// @has - '//pre' \"pub fn test3<F>() where F: for<'a, 'b> Fn(&'a u8, &'b u8),\"\n+// @has - '//pre' \"pub fn test3<F>()where F: for<'a, 'b> Fn(&'a u8, &'b u8),\"\n pub fn test3<F>()\n where\n     F: for<'a, 'b> Fn(&'a u8, &'b u8),\n@@ -38,7 +38,7 @@ pub struct Foo<'a> {\n // @has - '//span[@id=\"structfield.some_trait\"]' \"some_trait: &'a dyn for<'b> Trait<'b>\"\n \n impl<'a> Foo<'a> {\n-    // @has - '//h4[@class=\"code-header\"]' \"pub fn bar<T>() where T: Trait<'a>,\"\n+    // @has - '//h4[@class=\"code-header\"]' \"pub fn bar<T>()where T: Trait<'a>,\"\n     pub fn bar<T>()\n     where\n         T: Trait<'a>,"}, {"sha": "b1481e1f27978045e6864c92d42841fdf5d0755a", "filename": "src/test/rustdoc/impl-parts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fimpl-parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -6,7 +6,7 @@ pub auto trait AnAutoTrait {}\n pub struct Foo<T> { field: T }\n \n // @has impl_parts/struct.Foo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n // @has impl_parts/trait.AnAutoTrait.html '//*[@class=\"item-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//     \"impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync,\"\n+//     \"impl<T: Clone> !AnAutoTrait for Foo<T>where T: Sync,\"\n impl<T: Clone> !AnAutoTrait for Foo<T> where T: Sync {}"}, {"sha": "643f93875909390b0b8bf410c325ecfd9393a309", "filename": "src/test/rustdoc/issue-20727-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-20727-4.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -25,15 +25,15 @@ pub trait IndexMut<Idx: ?Sized>: Index<Idx> {\n \n pub mod reexport {\n     // @has issue_20727_4/reexport/trait.Index.html\n-    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx> where Idx: ?Sized, {'\n+    // @has - '//*[@class=\"rust trait\"]' 'trait Index<Idx>where Idx: ?Sized,{'\n     // @has - '//*[@class=\"rust trait\"]' 'type Output: ?Sized'\n     // @has - '//*[@class=\"rust trait\"]' \\\n     //        'fn index(&self, index: Idx) -> &Self::Output'\n     pub use issue_20727::Index;\n \n     // @has issue_20727_4/reexport/trait.IndexMut.html\n     // @has - '//*[@class=\"rust trait\"]' \\\n-    //        'trait IndexMut<Idx>: Index<Idx> where Idx: ?Sized, {'\n+    //        'trait IndexMut<Idx>: Index<Idx>where Idx: ?Sized,{'\n     // @has - '//*[@class=\"rust trait\"]' \\\n     //        'fn index_mut(&mut self, index: Idx) -> &mut Self::Output;'\n     pub use issue_20727::IndexMut;"}, {"sha": "29d2ec64c206d007d1d1a395fc0c38a3feb10615", "filename": "src/test/rustdoc/issue-21801.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-21801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-21801.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -5,5 +5,5 @@ extern crate issue_21801;\n \n // @has issue_21801/struct.Foo.html\n // @has - '//*[@id=\"method.new\"]' \\\n-//        'fn new<F>(f: F) -> Foo where F: FnMut() -> i32'\n+//        'fn new<F>(f: F) -> Foowhere F: FnMut() -> i32'\n pub use issue_21801::Foo;"}, {"sha": "134821e1ef3ea9bc724bb81e119a664724597461", "filename": "src/test/rustdoc/issue-29503.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-29503.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-29503.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -5,7 +5,7 @@ pub trait MyTrait {\n     fn my_string(&self) -> String;\n }\n \n-// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for T where T: Debug\"\n+// @has - \"//div[@id='implementors-list']//*[@id='impl-MyTrait-for-T']//h3[@class='code-header in-band']\" \"impl<T> MyTrait for Twhere T: Debug\"\n impl<T> MyTrait for T\n where\n     T: fmt::Debug,"}, {"sha": "91b67757453d2e788343eb82a15fa1d26313d309", "filename": "src/test/rustdoc/issue-34928.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-34928.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-34928.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-34928.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -2,5 +2,5 @@\n \n pub trait Bar {}\n \n-// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T) where T: Bar;'\n+// @has foo/struct.Foo.html '//pre' 'pub struct Foo<T>(pub T)where T: Bar;'\n pub struct Foo<T>(pub T) where T: Bar;"}, {"sha": "43fb705f58994717d9868b4942bdf5801c7fb847", "filename": "src/test/rustdoc/issue-50159.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-50159.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-50159.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -11,8 +11,8 @@ impl<B, C> Signal2 for B where B: Signal<Item = C> {\n }\n \n // @has issue_50159/struct.Switch.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B> where <B as Signal>::Item: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B> where <B as Signal>::Item: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Send for Switch<B>where <B as Signal>::Item: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<B> Sync for Switch<B>where <B as Signal>::Item: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Switch<B: Signal> {"}, {"sha": "aa5890a84514fc56364e8724fbcaf5891fdbf6d0", "filename": "src/test/rustdoc/issue-51236.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-51236.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-51236.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -8,7 +8,7 @@ pub mod traits {\n \n // @has issue_51236/struct.Owned.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Owned<T> where <T as Owned<'static>>::Reader: Send\"\n+// \"impl<T> Send for Owned<T>where <T as Owned<'static>>::Reader: Send\"\n pub struct Owned<T> where T: for<'a> ::traits::Owned<'a> {\n     marker: PhantomData<<T as ::traits::Owned<'static>>::Reader>,\n }"}, {"sha": "ce0f85d25da56d70009b7fee9911db47c06bd05e", "filename": "src/test/rustdoc/issue-54705.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-54705.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-54705.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -1,13 +1,11 @@\n pub trait ScopeHandle<'scope> {}\n \n-\n-\n // @has issue_54705/struct.ScopeFutureContents.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'scope, S> Send for ScopeFutureContents<'scope, S> where S: Sync\"\n+// \"impl<'scope, S> Send for ScopeFutureContents<'scope, S>where S: Sync\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S> where S: Sync\"\n+// \"impl<'scope, S> Sync for ScopeFutureContents<'scope, S>where S: Sync\"\n pub struct ScopeFutureContents<'scope, S>\n     where S: ScopeHandle<'scope>,\n {"}, {"sha": "a8841f137fecff11bb32a8a7fa028e850e30d40d", "filename": "src/test/rustdoc/issue-98697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fissue-98697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-98697.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -8,7 +8,7 @@\n \n extern crate issue_98697_reexport_with_anonymous_lifetime;\n \n-// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>() where F: Fn(&str)'\n+// @has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'fn repro<F>()where F: Fn(&str)'\n // @!has issue_98697/fn.repro.html '//pre[@class=\"rust fn\"]/code' 'for<'\n pub use issue_98697_reexport_with_anonymous_lifetime::repro;\n "}, {"sha": "7f8f74ff457a5ab906ec670ea3d930d4e049adaa", "filename": "src/test/rustdoc/primitive-slice-auto-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fprimitive-slice-auto-trait.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -7,8 +7,8 @@\n // @has - '//span[@class=\"in-band\"]' 'Primitive Type slice'\n // @has - '//section[@id=\"main-content\"]//div[@class=\"docblock\"]//p' 'this is a test!'\n // @has - '//h2[@id=\"synthetic-implementations\"]' 'Auto Trait Implementations'\n-// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T] where T: Send'\n-// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T] where T: Sync'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Send for [T]where T: Send'\n+// @has - '//div[@id=\"synthetic-implementations-list\"]//h3' 'impl<T> Sync for [T]where T: Sync'\n #[doc(primitive = \"slice\")]\n /// this is a test!\n mod slice_prim {}"}, {"sha": "19138fd1aceb20d1c1c8edb5699b83befb86cac9", "filename": "src/test/rustdoc/synthetic_auto/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fbasic.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -1,6 +1,6 @@\n // @has basic/struct.Foo.html\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T> where T: Send'\n-// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T> where T: Sync'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Send for Foo<T>where T: Send'\n+// @has - '//h3[@class=\"code-header in-band\"]' 'impl<T> Sync for Foo<T>where T: Sync'\n // @count - '//*[@id=\"implementations-list\"]//*[@class=\"impl has-srclink\"]' 0\n // @count - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]' 5\n pub struct Foo<T> {"}, {"sha": "39f78983da2b031766ab2c8968a2d26d73e4f320", "filename": "src/test/rustdoc/synthetic_auto/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fcomplex.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -21,7 +21,7 @@ mod foo {\n \n // @has complex/struct.NotOuter.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K> where K: for<'b> Fn((&'b bool, &'a u8)) \\\n+// \"impl<'a, T, K: ?Sized> Send for Outer<'a, T, K>where K: for<'b> Fn((&'b bool, &'a u8)) \\\n // -> &'b i8, T: MyTrait<'a>, <T as MyTrait<'a>>::MyItem: Copy, 'a: 'static\"\n \n pub use foo::{Foo, Inner as NotInner, MyTrait as NotMyTrait, Outer as NotOuter};"}, {"sha": "0c94850e78608c2cb12b5f90bf4cf80d6fd18e77", "filename": "src/test/rustdoc/synthetic_auto/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Flifetimes.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -10,10 +10,10 @@ where\n \n // @has lifetimes/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Send for Foo<'c, K> where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n+// \"impl<'c, K> Send for Foo<'c, K>where K: for<'b> Fn(&'b bool) -> &'c u8, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Sync for Foo<'c, K> where K: Sync\"\n+// \"impl<'c, K> Sync for Foo<'c, K>where K: Sync\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,\n }"}, {"sha": "35047e3e8c0717349eca64a02043ac1b06c4bc97", "filename": "src/test/rustdoc/synthetic_auto/manual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fmanual.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -1,6 +1,6 @@\n // @has manual/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Sync for Foo<T> where T: Sync'\n+// 'impl<T> Sync for Foo<T>where T: Sync'\n //\n // @has - '//*[@id=\"trait-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n // 'impl<T> Send for Foo<T>'"}, {"sha": "09587bcc30f13954f3c742080c7ec24be6453d9e", "filename": "src/test/rustdoc/synthetic_auto/nested.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fnested.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -10,10 +10,10 @@ where\n \n // @has nested/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Send for Foo<T> where T: Copy'\n+// 'impl<T> Send for Foo<T>where T: Copy'\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// 'impl<T> Sync for Foo<T> where T: Sync'\n+// 'impl<T> Sync for Foo<T>where T: Sync'\n pub struct Foo<T> {\n     inner_field: Inner<T>,\n }"}, {"sha": "41375decc8a4aa6c9971764ab82fab822973f17c", "filename": "src/test/rustdoc/synthetic_auto/no-redundancy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fno-redundancy.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -10,7 +10,7 @@ where\n \n // @has no_redundancy/struct.Outer.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Outer<T> where T: Send + Copy\"\n+// \"impl<T> Send for Outer<T>where T: Send + Copy\"\n pub struct Outer<T> {\n     inner_field: Inner<T>,\n }"}, {"sha": "e80b1b1dc9bcf99c96fc535bcc8d9ca7f9ed470a", "filename": "src/test/rustdoc/synthetic_auto/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fproject.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -24,10 +24,10 @@ where\n \n // @has project/struct.Foo.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Send for Foo<'c, K> where K: MyTrait<MyItem = bool>, 'c: 'static\"\n+// \"impl<'c, K> Send for Foo<'c, K>where K: MyTrait<MyItem = bool>, 'c: 'static\"\n //\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<'c, K> Sync for Foo<'c, K> where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n+// \"impl<'c, K> Sync for Foo<'c, K>where K: MyTrait, <K as MyTrait>::MyItem: OtherTrait, \\\n // 'c: 'static,\"\n pub struct Foo<'c, K: 'c> {\n     inner_field: Inner<'c, K>,"}, {"sha": "d15a8de7d2fe14fdb20381086bc6dc7a6762e58c", "filename": "src/test/rustdoc/synthetic_auto/self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fself-referential.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -24,6 +24,6 @@ impl<T> Pattern for Wrapper<T> {\n \n // @has self_referential/struct.WriteAndThen.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<P1> Send for WriteAndThen<P1>  where  <P1 as Pattern>::Value: Send\"\n+// \"impl<P1> Send for WriteAndThen<P1>where    <P1 as Pattern>::Value: Send\"\n pub struct WriteAndThen<P1>(pub P1::Value,pub <Constrain<P1, Wrapper<P1::Value>> as Pattern>::Value)\n     where P1: Pattern;"}, {"sha": "08e9567313e22bb78f0faf6f5701537b6c9e3ecf", "filename": "src/test/rustdoc/synthetic_auto/static-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsynthetic_auto%2Fstatic-region.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -4,7 +4,7 @@ pub trait OwnedTrait<'a> {\n \n // @has static_region/struct.Owned.html\n // @has - '//*[@id=\"synthetic-implementations-list\"]//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-// \"impl<T> Send for Owned<T> where <T as OwnedTrait<'static>>::Reader: Send\"\n+// \"impl<T> Send for Owned<T>where <T as OwnedTrait<'static>>::Reader: Send\"\n pub struct Owned<T> where T: OwnedTrait<'static> {\n     marker: <T as OwnedTrait<'static>>::Reader,\n }"}, {"sha": "b8502e10a48c4dcb5ad05e763930a673bae55046", "filename": "src/test/rustdoc/where-clause-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere-clause-order.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -7,7 +7,7 @@ where\n }\n \n // @has 'foo/trait.SomeTrait.html'\n-// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E) where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n+// @has - \"//*[@id='impl-SomeTrait%3C(A%2C%20B%2C%20C%2C%20D%2C%20E)%3E-for-(A%2C%20B%2C%20C%2C%20D%2C%20E)']/h3\" \"impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)where A: PartialOrd<A> + PartialEq<A>, B: PartialOrd<B> + PartialEq<B>, C: PartialOrd<C> + PartialEq<C>, D: PartialOrd<D> + PartialEq<D>, E: PartialOrd<E> + PartialEq<E> + ?Sized, \"\n impl<A, B, C, D, E> SomeTrait<(A, B, C, D, E)> for (A, B, C, D, E)\n where\n     A: PartialOrd<A> + PartialEq<A>,"}, {"sha": "c1a630e25ba0ef00881c4682afd10ed922f97351", "filename": "src/test/rustdoc/where.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fwhere.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c8447d789b17e5902f2e9793eef0006559ef9b/src%2Ftest%2Frustdoc%2Fwhere.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fwhere.rs?ref=21c8447d789b17e5902f2e9793eef0006559ef9b", "patch": "@@ -3,17 +3,17 @@\n \n pub trait MyTrait { fn dummy(&self) { } }\n \n-// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_) where A: MyTrait\"\n+// @has foo/struct.Alpha.html '//pre' \"pub struct Alpha<A>(_)where A: MyTrait\"\n pub struct Alpha<A>(A) where A: MyTrait;\n-// @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B> where B: MyTrait\"\n+// @has foo/trait.Bravo.html '//pre' \"pub trait Bravo<B>where B: MyTrait\"\n pub trait Bravo<B> where B: MyTrait { fn get(&self, B: B); }\n-// @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>() where C: MyTrait\"\n+// @has foo/fn.charlie.html '//pre' \"pub fn charlie<C>()where C: MyTrait\"\n pub fn charlie<C>() where C: MyTrait {}\n \n pub struct Delta<D>(D);\n \n // @has foo/struct.Delta.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<D> Delta<D> where D: MyTrait\"\n+//          \"impl<D> Delta<D>where D: MyTrait\"\n impl<D> Delta<D> where D: MyTrait {\n     pub fn delta() {}\n }\n@@ -33,19 +33,19 @@ pub trait TraitWhere {\n }\n \n // @has foo/struct.Echo.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n+//          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<E> MyTrait for Echo<E> where E: MyTrait\"\n-impl<E> MyTrait for Echo<E> where E: MyTrait {}\n+//          \"impl<E> MyTrait for Echo<E>where E: MyTrait\"\n+impl<E> MyTrait for Echo<E>where E: MyTrait {}\n \n pub enum Foxtrot<F> { Foxtrot1(F) }\n \n // @has foo/enum.Foxtrot.html '//*[@class=\"impl has-srclink\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n+//          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n // @has foo/trait.MyTrait.html '//*[@id=\"implementors-list\"]//h3[@class=\"code-header in-band\"]' \\\n-//          \"impl<F> MyTrait for Foxtrot<F> where F: MyTrait\"\n-impl<F> MyTrait for Foxtrot<F> where F: MyTrait {}\n+//          \"impl<F> MyTrait for Foxtrot<F>where F: MyTrait\"\n+impl<F> MyTrait for Foxtrot<F>where F: MyTrait {}\n \n // @has foo/type.Golf.html '//pre[@class=\"rust typedef\"]' \\\n-//          \"type Golf<T> where T: Clone, = (T, T)\"\n+//          \"type Golf<T>where T: Clone, = (T, T)\"\n pub type Golf<T> where T: Clone = (T, T);"}]}