{"sha": "1a44875af985de43d514192d43ef260a24e83d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNDQ4NzVhZjk4NWRlNDNkNTE0MTkyZDQzZWYyNjBhMjRlODNkMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T17:42:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-26T17:42:07Z"}, "message": "auto merge of #19176 : aturon/rust/stab-iter, r=alexcrichton\n\nThis is an initial pass at stabilizing the `iter` module. The module is\r\nfairly large, but is also pretty polished, so most of the stabilization\r\nleaves things as they are.\r\n\r\nSome changes:\r\n\r\n* Due to the new object safety rules, various traits needs to be split\r\n  into object-safe traits and extension traits. This includes `Iterator`\r\n  itself. While splitting up the traits adds some complexity, it will\r\n  also increase flexbility: once we have automatic impls of `Trait` for\r\n  trait objects over `Trait`, then things like the iterator adapters\r\n  will all work with trait objects.\r\n\r\n* Iterator adapters that use up the entire iterator now take it by\r\n  value, which makes the semantics more clear and helps catch bugs. Due\r\n  to the splitting of Iterator, this does not affect trait objects. If\r\n  the underlying iterator is still desired for some reason, `by_ref` can\r\n  be used. (Note: this change had no fallout in the Rust distro except\r\n  for the useless mut lint.)\r\n\r\n* In general, extension traits new and old are following an [in-progress\r\n  convention](rust-lang/rfcs#445). As such, they\r\n  are marked `unstable`.\r\n\r\n* As usual, anything involving closures is `unstable` pending unboxed\r\n  closures.\r\n\r\n* A few of the more esoteric/underdeveloped iterator forms (like\r\n  `RandomAccessIterator` and `MutableDoubleEndedIterator`, along with\r\n  various unfolds) are left experimental for now.\r\n\r\n* The `order` submodule is left `experimental` because it will hopefully\r\n  be replaced by generalized comparison traits.\r\n\r\n* \"Leaf\" iterators (like `Repeat` and `Counter`) are uniformly\r\n  constructed by free fns at the module level. That's because the types\r\n  are not otherwise of any significance (if we had `impl Trait`, you\r\n  wouldn't want to define a type at all).\r\n\r\nCloses #17701\r\n\r\nDue to renamings and splitting of traits, this is a:\r\n\r\n[breaking-change]", "tree": {"sha": "fee60256afc116e40c89bceb35eb0c4665150de5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fee60256afc116e40c89bceb35eb0c4665150de5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a44875af985de43d514192d43ef260a24e83d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a44875af985de43d514192d43ef260a24e83d26", "html_url": "https://github.com/rust-lang/rust/commit/1a44875af985de43d514192d43ef260a24e83d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a44875af985de43d514192d43ef260a24e83d26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "930f87774db33f8a8963b22e82e1b1d1907ea30a", "url": "https://api.github.com/repos/rust-lang/rust/commits/930f87774db33f8a8963b22e82e1b1d1907ea30a", "html_url": "https://github.com/rust-lang/rust/commit/930f87774db33f8a8963b22e82e1b1d1907ea30a"}, {"sha": "b299c2b57db90025cbf59d4b5152c9c37db6bc63", "url": "https://api.github.com/repos/rust-lang/rust/commits/b299c2b57db90025cbf59d4b5152c9c37db6bc63", "html_url": "https://github.com/rust-lang/rust/commit/b299c2b57db90025cbf59d4b5152c9c37db6bc63"}], "stats": {"total": 451, "additions": 304, "deletions": 147}, "files": [{"sha": "ed9310284461c152835662ae78fbd7b3ae84cc8e", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -585,10 +585,10 @@ impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n     fn next_back(&mut self) -> Option<T> { self.iter.next_back() }\n }\n \n-impl<T> ExactSize<T> for MoveItems<T> {}\n+impl<T> ExactSizeIterator<T> for MoveItems<T> {}\n \n impl<T: Ord> FromIterator<T> for BinaryHeap<T> {\n-    fn from_iter<Iter: Iterator<T>>(mut iter: Iter) -> BinaryHeap<T> {\n+    fn from_iter<Iter: Iterator<T>>(iter: Iter) -> BinaryHeap<T> {\n         let vec: Vec<T> = iter.collect();\n         BinaryHeap::from_vec(vec)\n     }"}, {"sha": "903a9bd982324dcae57494bdb36a438149fdc2f1", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -68,7 +68,7 @@ use core::prelude::*;\n use core::cmp;\n use core::default::Default;\n use core::fmt;\n-use core::iter::{Chain, Enumerate, Repeat, Skip, Take};\n+use core::iter::{Chain, Enumerate, Repeat, Skip, Take, repeat};\n use core::iter;\n use core::num::Int;\n use core::slice;\n@@ -88,11 +88,11 @@ fn match_words <'a,'b>(a: &'a Bitv, b: &'b Bitv) -> (MatchWords<'a>, MatchWords<\n \n     // have to uselessly pretend to pad the longer one for type matching\n     if a_len < b_len {\n-        (a.mask_words(0).chain(Repeat::new(0u32).enumerate().take(b_len).skip(a_len)),\n-         b.mask_words(0).chain(Repeat::new(0u32).enumerate().take(0).skip(0)))\n+        (a.mask_words(0).chain(repeat(0u32).enumerate().take(b_len).skip(a_len)),\n+         b.mask_words(0).chain(repeat(0u32).enumerate().take(0).skip(0)))\n     } else {\n-        (a.mask_words(0).chain(Repeat::new(0u32).enumerate().take(0).skip(0)),\n-         b.mask_words(0).chain(Repeat::new(0u32).enumerate().take(a_len).skip(b_len)))\n+        (a.mask_words(0).chain(repeat(0u32).enumerate().take(0).skip(0)),\n+         b.mask_words(0).chain(repeat(0u32).enumerate().take(a_len).skip(b_len)))\n     }\n }\n \n@@ -943,7 +943,7 @@ impl<'a> DoubleEndedIterator<bool> for Bits<'a> {\n     }\n }\n \n-impl<'a> ExactSize<bool> for Bits<'a> {}\n+impl<'a> ExactSizeIterator<bool> for Bits<'a> {}\n \n impl<'a> RandomAccessIterator<bool> for Bits<'a> {\n     #[inline]"}, {"sha": "8a6d26c26bf3c0651020e7d0fe3dbc447a84ee4b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -863,7 +863,7 @@ impl<K, V, E, T: Traverse<E> + DoubleEndedIterator<TraversalItem<K, V, E>>>\n     // Note that the design of these iterators permits an *arbitrary* initial pair of min and max,\n     // making these arbitrary sub-range iterators. However the logic to construct these paths\n     // efficiently is fairly involved, so this is a FIXME. The sub-range iterators also wouldn't be\n-    // able to accurately predict size, so those iterators can't implement ExactSize.\n+    // able to accurately predict size, so those iterators can't implement ExactSizeIterator.\n     fn next(&mut self) -> Option<(K, V)> {\n         loop {\n             // We want the smallest element, so try to get the top of the left stack\n@@ -963,7 +963,7 @@ impl<'a, K, V> Iterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a V)> for Entries<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a V)> { self.inner.next_back() }\n }\n-impl<'a, K, V> ExactSize<(&'a K, &'a V)> for Entries<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator<(&'a K, &'a V)> for Entries<'a, K, V> {}\n \n \n impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n@@ -973,7 +973,7 @@ impl<'a, K, V> Iterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n impl<'a, K, V> DoubleEndedIterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {\n     fn next_back(&mut self) -> Option<(&'a K, &'a mut V)> { self.inner.next_back() }\n }\n-impl<'a, K, V> ExactSize<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {}\n+impl<'a, K, V> ExactSizeIterator<(&'a K, &'a mut V)> for MutEntries<'a, K, V> {}\n \n \n impl<K, V> Iterator<(K, V)> for MoveEntries<K, V> {\n@@ -983,7 +983,7 @@ impl<K, V> Iterator<(K, V)> for MoveEntries<K, V> {\n impl<K, V> DoubleEndedIterator<(K, V)> for MoveEntries<K, V> {\n     fn next_back(&mut self) -> Option<(K, V)> { self.inner.next_back() }\n }\n-impl<K, V> ExactSize<(K, V)> for MoveEntries<K, V> {}\n+impl<K, V> ExactSizeIterator<(K, V)> for MoveEntries<K, V> {}\n \n \n "}, {"sha": "3f95bda663e1573675bd84c53bbf77b58665553c", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -607,7 +607,7 @@ impl<'a, A> DoubleEndedIterator<&'a A> for Items<'a, A> {\n     }\n }\n \n-impl<'a, A> ExactSize<&'a A> for Items<'a, A> {}\n+impl<'a, A> ExactSizeIterator<&'a A> for Items<'a, A> {}\n \n impl<'a, A> Iterator<&'a mut A> for MutItems<'a, A> {\n     #[inline]\n@@ -645,7 +645,7 @@ impl<'a, A> DoubleEndedIterator<&'a mut A> for MutItems<'a, A> {\n     }\n }\n \n-impl<'a, A> ExactSize<&'a mut A> for MutItems<'a, A> {}\n+impl<'a, A> ExactSizeIterator<&'a mut A> for MutItems<'a, A> {}\n \n /// Allows mutating a `DList` while iterating.\n pub trait ListInsertion<A> {"}, {"sha": "8f0b0d41b03d4836eeceeb3cc1e6b8711a710c57", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -695,8 +695,7 @@ impl<'a, T> DoubleEndedIterator<&'a T> for Items<'a, T> {\n     }\n }\n \n-\n-impl<'a, T> ExactSize<&'a T> for Items<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n \n impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n     #[inline]\n@@ -763,7 +762,7 @@ impl<'a, T> DoubleEndedIterator<&'a mut T> for MutItems<'a, T> {\n     }\n }\n \n-impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a mut T> for MutItems<'a, T> {}\n \n impl<A: PartialEq> PartialEq for RingBuf<A> {\n     fn eq(&self, other: &RingBuf<A>) -> bool {\n@@ -1322,7 +1321,7 @@ mod tests {\n         let u: Vec<int> = deq.iter().map(|&x| x).collect();\n         assert_eq!(u, v);\n \n-        let mut seq = iter::count(0u, 2).take(256);\n+        let seq = iter::count(0u, 2).take(256);\n         let deq: RingBuf<uint> = seq.collect();\n         for (i, &x) in deq.iter().enumerate() {\n             assert_eq!(2*i, x);"}, {"sha": "06e1ee0fc0f18869ae2be53c01927c9d155115e4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -94,7 +94,7 @@ use core::cmp;\n use core::kinds::Sized;\n use core::mem::size_of;\n use core::mem;\n-use core::prelude::{Clone, Greater, Iterator, Less, None, Option};\n+use core::prelude::{Clone, Greater, Iterator, IteratorExt, Less, None, Option};\n use core::prelude::{Ord, Ordering, RawPtr, Some, range};\n use core::ptr;\n use core::iter::{range_step, MultiplicativeIterator};"}, {"sha": "ebd30d758f2a7bc1bd009d7b72a931caafee2bfd", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -61,7 +61,7 @@ use core::cmp;\n use core::iter::AdditiveIterator;\n use core::kinds::Sized;\n use core::prelude::{Char, Clone, Eq, Equiv};\n-use core::prelude::{Iterator, SlicePrelude, None, Option, Ord, Ordering};\n+use core::prelude::{Iterator, IteratorExt, SlicePrelude, None, Option, Ord, Ordering};\n use core::prelude::{PartialEq, PartialOrd, Result, AsSlice, Some, Tuple2};\n use core::prelude::{range};\n \n@@ -828,7 +828,7 @@ mod tests {\n     use std::cmp::{Equal, Greater, Less, Ord, PartialOrd, Equiv};\n     use std::option::{Some, None};\n     use std::ptr::RawPtr;\n-    use std::iter::{Iterator, DoubleEndedIterator};\n+    use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n \n     use super::*;\n     use std::slice::{AsSlice, SlicePrelude};\n@@ -2177,12 +2177,15 @@ mod tests {\n         let gr_inds = s.grapheme_indices(true).rev().collect::<Vec<(uint, &str)>>();\n         let b: &[_] = &[(11, \"\\r\\n\"), (6, \"o\u0308\u0332\"), (3, \"e\u0301\"), (0u, \"a\u0310\")];\n         assert_eq!(gr_inds.as_slice(), b);\n-        let mut gr_inds = s.grapheme_indices(true);\n-        let e1 = gr_inds.size_hint();\n-        assert_eq!(e1, (1, Some(13)));\n-        let c = gr_inds.count();\n-        assert_eq!(c, 4);\n-        let e2 = gr_inds.size_hint();\n+        let mut gr_inds_iter = s.grapheme_indices(true);\n+        {\n+            let gr_inds = gr_inds_iter.by_ref();\n+            let e1 = gr_inds.size_hint();\n+            assert_eq!(e1, (1, Some(13)));\n+            let c = gr_inds.count();\n+            assert_eq!(c, 4);\n+        }\n+        let e2 = gr_inds_iter.size_hint();\n         assert_eq!(e2, (0, Some(0)));\n \n         // make sure the reverse iterator does the right thing with \"\\n\" at beginning of string\n@@ -2319,7 +2322,7 @@ mod bench {\n     use test::Bencher;\n     use test::black_box;\n     use super::*;\n-    use std::iter::{Iterator, DoubleEndedIterator};\n+    use std::iter::{IteratorExt, DoubleEndedIteratorExt};\n     use std::str::StrPrelude;\n     use std::slice::SlicePrelude;\n "}, {"sha": "acbb28293fd8eb33bfb8e4a89382e96526eef8fd", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -1341,7 +1341,7 @@ impl<T> DoubleEndedIterator<T> for MoveItems<T> {\n     }\n }\n \n-impl<T> ExactSize<T> for MoveItems<T> {}\n+impl<T> ExactSizeIterator<T> for MoveItems<T> {}\n \n #[unsafe_destructor]\n impl<T> Drop for MoveItems<T> {"}, {"sha": "31a46c26e2a73ec82edb01e20d2c653b353541d8", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -17,7 +17,7 @@ pub use self::SignFormat::*;\n use char;\n use char::Char;\n use fmt;\n-use iter::{range, DoubleEndedIterator};\n+use iter::{range, DoubleEndedIteratorExt};\n use num::{Float, FPNaN, FPInfinite, ToPrimitive};\n use num::cast;\n use result::Ok;"}, {"sha": "605148beb90b131c5e86b03391d419185d30d1ae", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -14,7 +14,7 @@\n \n use any;\n use cell::{Cell, Ref, RefMut};\n-use iter::{Iterator, range};\n+use iter::{Iterator, IteratorExt, range};\n use kinds::{Copy, Sized};\n use mem;\n use option::{Option, Some, None};"}, {"sha": "a441ced03b26ea5e08defdf9cc6611e310f465dc", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -15,7 +15,7 @@\n #![allow(unsigned_negation)]\n \n use fmt;\n-use iter::DoubleEndedIterator;\n+use iter::DoubleEndedIteratorExt;\n use num::{Int, cast};\n use slice::SlicePrelude;\n "}, {"sha": "496e7979b726eeec3def4f13d6fee4ad05769d18", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 199, "deletions": 44, "changes": 243, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -72,12 +72,14 @@ use uint;\n #[deprecated = \"renamed to Extend\"] pub use self::Extend as Extendable;\n \n /// Conversion from an `Iterator`\n+#[unstable = \"may be replaced by a more general conversion trait\"]\n pub trait FromIterator<A> {\n     /// Build a container with elements from an external iterator.\n     fn from_iter<T: Iterator<A>>(iterator: T) -> Self;\n }\n \n /// A type growable from an `Iterator` implementation\n+#[unstable = \"just renamed as part of collections reform\"]\n pub trait Extend<A> {\n     /// Extend a container with the elements yielded by an arbitrary iterator\n     fn extend<T: Iterator<A>>(&mut self, iterator: T);\n@@ -94,6 +96,7 @@ pub trait Extend<A> {\n /// it wishes, either by returning `None` infinitely, or by doing something\n /// else.\n #[lang=\"iterator\"]\n+#[unstable = \"just split up for object safety\"]\n pub trait Iterator<A> {\n     /// Advance the iterator and return the next value. Return `None` when the end is reached.\n     fn next(&mut self) -> Option<A>;\n@@ -104,7 +107,11 @@ pub trait Iterator<A> {\n     /// does not fit within a `uint`.\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n+}\n \n+#[unstable = \"new convention for extension traits\"]\n+/// An extension trait providing numerous methods applicable to all iterators.\n+pub trait IteratorExt<A>: Iterator<A> {\n     /// Chain this iterator with another, returning a new iterator which will\n     /// finish iterating over the current iterator, and then it will iterate\n     /// over the other specified iterator.\n@@ -120,6 +127,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn chain<U: Iterator<A>>(self, other: U) -> Chain<Self, U> {\n         Chain{a: self, b: other, flag: false}\n     }\n@@ -140,6 +148,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn zip<B, U: Iterator<B>>(self, other: U) -> Zip<Self, U> {\n         Zip{a: self, b: other}\n     }\n@@ -157,6 +166,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn map<'r, B>(self, f: |A|: 'r -> B) -> Map<'r, A, B, Self> {\n         Map{iter: self, f: f}\n     }\n@@ -174,6 +184,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn filter<'r>(self, predicate: |&A|: 'r -> bool) -> Filter<'r, A, Self> {\n         Filter{iter: self, predicate: predicate}\n     }\n@@ -191,6 +202,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn filter_map<'r, B>(self, f: |A|: 'r -> Option<B>) -> FilterMap<'r, A, B, Self> {\n         FilterMap { iter: self, f: f }\n     }\n@@ -209,6 +221,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn enumerate(self) -> Enumerate<Self> {\n         Enumerate{iter: self, count: 0}\n     }\n@@ -232,6 +245,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn peekable(self) -> Peekable<A, Self> {\n         Peekable{iter: self, peeked: None}\n     }\n@@ -251,6 +265,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn skip_while<'r>(self, predicate: |&A|: 'r -> bool) -> SkipWhile<'r, A, Self> {\n         SkipWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -269,6 +284,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures, may want to require peek\"]\n     fn take_while<'r>(self, predicate: |&A|: 'r -> bool) -> TakeWhile<'r, A, Self> {\n         TakeWhile{iter: self, flag: false, predicate: predicate}\n     }\n@@ -286,6 +302,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn skip(self, n: uint) -> Skip<Self> {\n         Skip{iter: self, n: n}\n     }\n@@ -304,6 +321,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[stable]\n     fn take(self, n: uint) -> Take<Self> {\n         Take{iter: self, n: n}\n     }\n@@ -329,6 +347,7 @@ pub trait Iterator<A> {\n     /// assert!(it.next().is_none());\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn scan<'r, St, B>(self, initial_state: St, f: |&mut St, A|: 'r -> Option<B>)\n         -> Scan<'r, A, B, Self, St> {\n         Scan{iter: self, f: f, state: initial_state}\n@@ -353,6 +372,7 @@ pub trait Iterator<A> {\n     /// }\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn flat_map<'r, B, U: Iterator<B>>(self, f: |A|: 'r -> U)\n         -> FlatMap<'r, A, Self, U> {\n         FlatMap{iter: self, f: f, frontiter: None, backiter: None }\n@@ -386,6 +406,7 @@ pub trait Iterator<A> {\n     /// assert_eq!(process(x.into_iter()), 1006);\n     /// ```\n     #[inline]\n+    #[stable]\n     fn fuse(self) -> Fuse<Self> {\n         Fuse{iter: self, done: false}\n     }\n@@ -409,6 +430,7 @@ pub trait Iterator<A> {\n     /// println!(\"{}\", sum);\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn inspect<'r>(self, f: |&A|: 'r) -> Inspect<'r, A, Self> {\n         Inspect{iter: self, f: f}\n     }\n@@ -428,6 +450,7 @@ pub trait Iterator<A> {\n     /// // xs.next() is now `5`\n     /// assert!(xs.next() == Some(5));\n     /// ```\n+    #[stable]\n     fn by_ref<'r>(&'r mut self) -> ByRef<'r, Self> {\n         ByRef{iter: self}\n     }\n@@ -443,8 +466,9 @@ pub trait Iterator<A> {\n     /// assert!(a.as_slice() == b.as_slice());\n     /// ```\n     #[inline]\n-    fn collect<B: FromIterator<A>>(&mut self) -> B {\n-        FromIterator::from_iter(self.by_ref())\n+    #[unstable = \"waiting for general conversion traits, just changed to take self by value\"]\n+    fn collect<B: FromIterator<A>>(self) -> B {\n+        FromIterator::from_iter(self)\n     }\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n@@ -459,6 +483,7 @@ pub trait Iterator<A> {\n     /// assert!(it.nth(2) == None);\n     /// ```\n     #[inline]\n+    #[stable]\n     fn nth(&mut self, mut n: uint) -> Option<A> {\n         for x in *self {\n             if n == 0 { return Some(x) }\n@@ -477,9 +502,10 @@ pub trait Iterator<A> {\n     /// assert!(a.iter().last().unwrap() == &5);\n     /// ```\n     #[inline]\n-    fn last(&mut self) -> Option<A> {\n+    #[unstable = \"just changed to take self by value\"]\n+    fn last(mut self) -> Option<A> {\n         let mut last = None;\n-        for x in *self { last = Some(x); }\n+        for x in self { last = Some(x); }\n         last\n     }\n \n@@ -493,9 +519,10 @@ pub trait Iterator<A> {\n     /// assert!(a.iter().fold(0, |a, &b| a + b) == 15);\n     /// ```\n     #[inline]\n-    fn fold<B>(&mut self, init: B, f: |B, A| -> B) -> B {\n+    #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n+    fn fold<B>(mut self, init: B, f: |B, A| -> B) -> B {\n         let mut accum = init;\n-        for x in *self {\n+        for x in self {\n             accum = f(accum, x);\n         }\n         accum\n@@ -509,10 +536,10 @@ pub trait Iterator<A> {\n     /// let a = [1i, 2, 3, 4, 5];\n     /// let mut it = a.iter();\n     /// assert!(it.count() == 5);\n-    /// assert!(it.count() == 0);\n     /// ```\n     #[inline]\n-    fn count(&mut self) -> uint {\n+    #[unstable = \"just changed to take self by value\"]\n+    fn count(self) -> uint {\n         self.fold(0, |cnt, _x| cnt + 1)\n     }\n \n@@ -526,8 +553,9 @@ pub trait Iterator<A> {\n     /// assert!(!a.iter().all(|x| *x > 2));\n     /// ```\n     #[inline]\n-    fn all(&mut self, f: |A| -> bool) -> bool {\n-        for x in *self { if !f(x) { return false; } }\n+    #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n+    fn all(mut self, f: |A| -> bool) -> bool {\n+        for x in self { if !f(x) { return false; } }\n         true\n     }\n \n@@ -543,6 +571,7 @@ pub trait Iterator<A> {\n     /// assert!(!it.any(|x| *x == 3));\n     /// ```\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn any(&mut self, f: |A| -> bool) -> bool {\n         for x in *self { if f(x) { return true; } }\n         false\n@@ -552,6 +581,7 @@ pub trait Iterator<A> {\n     ///\n     /// Does not consume the iterator past the first found element.\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn find(&mut self, predicate: |&A| -> bool) -> Option<A> {\n         for x in *self {\n             if predicate(&x) { return Some(x) }\n@@ -561,6 +591,7 @@ pub trait Iterator<A> {\n \n     /// Return the index of the first element satisfying the specified predicate\n     #[inline]\n+    #[unstable = \"waiting for unboxed closures\"]\n     fn position(&mut self, predicate: |A| -> bool) -> Option<uint> {\n         let mut i = 0;\n         for x in *self {\n@@ -584,7 +615,8 @@ pub trait Iterator<A> {\n     /// assert_eq!(*xs.iter().max_by(|x| x.abs()).unwrap(), -10);\n     /// ```\n     #[inline]\n-    fn max_by<B: Ord>(&mut self, f: |&A| -> B) -> Option<A> {\n+    #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n+    fn max_by<B: Ord>(self, f: |&A| -> B) -> Option<A> {\n         self.fold(None, |max: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match max {\n@@ -610,7 +642,8 @@ pub trait Iterator<A> {\n     /// assert_eq!(*xs.iter().min_by(|x| x.abs()).unwrap(), 0);\n     /// ```\n     #[inline]\n-    fn min_by<B: Ord>(&mut self, f: |&A| -> B) -> Option<A> {\n+    #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n+    fn min_by<B: Ord>(self, f: |&A| -> B) -> Option<A> {\n         self.fold(None, |min: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match min {\n@@ -625,14 +658,22 @@ pub trait Iterator<A> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl<A, I> IteratorExt<A> for I where I: Iterator<A> {}\n+\n /// A range iterator able to yield elements from both ends\n ///\n /// A `DoubleEndedIterator` can be thought of as a deque in that `next()` and `next_back()` exhaust\n /// elements from the *same* range, and do not work independently of each other.\n+#[unstable = \"recently split into two traits\"]\n pub trait DoubleEndedIterator<A>: Iterator<A> {\n     /// Yield an element from the end of the range, returning `None` if the range is empty.\n     fn next_back(&mut self) -> Option<A>;\n+}\n \n+/// Extension methods for double-ended iterators.\n+#[unstable = \"new extension trait convention\"]\n+pub trait DoubleEndedIteratorExt<A>: DoubleEndedIterator<A> {\n     /// Change the direction of the iterator\n     ///\n     /// The flipped iterator swaps the ends on an iterator that can already\n@@ -646,18 +687,24 @@ pub trait DoubleEndedIterator<A>: Iterator<A> {\n     /// Note: Random access with flipped indices still only applies to the first\n     /// `uint::MAX` elements of the original iterator.\n     #[inline]\n+    #[stable]\n     fn rev(self) -> Rev<Self> {\n         Rev{iter: self}\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n+impl<A, I> DoubleEndedIteratorExt<A> for I where I: DoubleEndedIterator<A> {}\n+\n /// A double-ended iterator yielding mutable references\n+#[experimental = \"not widely used\"]\n pub trait MutableDoubleEndedIterator {\n     // FIXME: #5898: should be called `reverse`\n     /// Use an iterator to reverse a container in-place\n     fn reverse_(&mut self);\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<'a, A:'a, T: DoubleEndedIterator<&'a mut A>> MutableDoubleEndedIterator for T {\n     // FIXME: #5898: should be called `reverse`\n     /// Use an iterator to reverse a container in-place\n@@ -678,6 +725,7 @@ impl<'a, A:'a, T: DoubleEndedIterator<&'a mut A>> MutableDoubleEndedIterator for\n /// Calling `next()` or `next_back()` on a `RandomAccessIterator`\n /// reduces the indexable range accordingly. That is, `it.idx(1)` will become `it.idx(0)`\n /// after `it.next()` is called.\n+#[experimental = \"not widely used, may be better decomposed into Index and ExactSizeIterator\"]\n pub trait RandomAccessIterator<A>: Iterator<A> {\n     /// Return the number of indexable elements. At most `std::uint::MAX`\n     /// elements are indexable, even if the iterator represents a longer range.\n@@ -694,15 +742,16 @@ pub trait RandomAccessIterator<A>: Iterator<A> {\n ///\n /// `Iterator::size_hint` *must* return the exact size of the iterator.\n /// Note that the size must fit in `uint`.\n-pub trait ExactSize<A> : DoubleEndedIterator<A> {\n+#[unstable = \"could move DoubleEndedIterator bound onto rposition with method-level where clauses\"]\n+pub trait ExactSizeIterator<A> : DoubleEndedIterator<A> {\n     /// Return the index of the last element satisfying the specified predicate\n     ///\n     /// If no element matches, None is returned.\n     #[inline]\n     fn rposition(&mut self, predicate: |A| -> bool) -> Option<uint> {\n         let len = self.len();\n         for i in range(0, len).rev() {\n-            if predicate(self.next_back().expect(\"rposition: incorrect ExactSize\")) {\n+            if predicate(self.next_back().expect(\"rposition: incorrect ExactSizeIterator\")) {\n                 return Some(i);\n             }\n         }\n@@ -724,31 +773,41 @@ pub trait ExactSize<A> : DoubleEndedIterator<A> {\n \n // All adaptors that preserve the size of the wrapped iterator are fine\n // Adaptors that may overflow in `size_hint` are not, i.e. `Chain`.\n-impl<A, T: ExactSize<A>> ExactSize<(uint, A)> for Enumerate<T> {}\n-impl<'a, A, T: ExactSize<A>> ExactSize<A> for Inspect<'a, A, T> {}\n-impl<A, T: ExactSize<A>> ExactSize<A> for Rev<T> {}\n-impl<'a, A, B, T: ExactSize<A>> ExactSize<B> for Map<'a, A, B, T> {}\n-impl<A, B, T: ExactSize<A>, U: ExactSize<B>> ExactSize<(A, B)> for Zip<T, U> {}\n+#[unstable = \"trait is unstable\"]\n+impl<A, T: ExactSizeIterator<A>> ExactSizeIterator<(uint, A)> for Enumerate<T> {}\n+#[unstable = \"trait is unstable\"]\n+impl<'a, A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Inspect<'a, A, T> {}\n+#[unstable = \"trait is unstable\"]\n+impl<A, T: ExactSizeIterator<A>> ExactSizeIterator<A> for Rev<T> {}\n+#[unstable = \"trait is unstable\"]\n+impl<'a, A, B, T: ExactSizeIterator<A>> ExactSizeIterator<B> for Map<'a, A, B, T> {}\n+#[unstable = \"trait is unstable\"]\n+impl<A, B, T, U> ExactSizeIterator<(A, B)> for Zip<T, U>\n+    where T: ExactSizeIterator<A>, U: ExactSizeIterator<B> {}\n \n /// An double-ended iterator with the direction inverted\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Rev<T> {\n     iter: T\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: DoubleEndedIterator<A>> Iterator<A> for Rev<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.iter.next_back() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Rev<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.iter.next() }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterator<A>\n     for Rev<T> {\n     #[inline]\n@@ -762,23 +821,27 @@ impl<A, T: DoubleEndedIterator<A> + RandomAccessIterator<A>> RandomAccessIterato\n \n /// A mutable reference to an iterator\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct ByRef<'a, T:'a> {\n     iter: &'a mut T\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>+'a> Iterator<A> for ByRef<'a, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.iter.next() }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: DoubleEndedIterator<A>+'a> DoubleEndedIterator<A> for ByRef<'a, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.iter.next_back() }\n }\n \n /// A trait for iterators over elements which can be added together\n+#[experimental = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait AdditiveIterator<A> {\n     /// Iterates over the entire iterator, summing up all the elements\n     ///\n@@ -791,14 +854,15 @@ pub trait AdditiveIterator<A> {\n     /// let mut it = a.iter().map(|&x| x);\n     /// assert!(it.sum() == 15);\n     /// ```\n-    fn sum(&mut self) -> A;\n+    fn sum(self) -> A;\n }\n \n macro_rules! impl_additive {\n     ($A:ty, $init:expr) => {\n+        #[experimental = \"trait is experimental\"]\n         impl<T: Iterator<$A>> AdditiveIterator<$A> for T {\n             #[inline]\n-            fn sum(&mut self) -> $A {\n+            fn sum(self) -> $A {\n                 self.fold($init, |acc, x| acc + x)\n             }\n         }\n@@ -818,6 +882,7 @@ impl_additive!(f32,  0.0)\n impl_additive!(f64,  0.0)\n \n /// A trait for iterators over elements which can be multiplied together.\n+#[experimental = \"needs to be re-evaluated as part of numerics reform\"]\n pub trait MultiplicativeIterator<A> {\n     /// Iterates over the entire iterator, multiplying all the elements\n     ///\n@@ -833,14 +898,15 @@ pub trait MultiplicativeIterator<A> {\n     /// assert!(factorial(1) == 1);\n     /// assert!(factorial(5) == 120);\n     /// ```\n-    fn product(&mut self) -> A;\n+    fn product(self) -> A;\n }\n \n macro_rules! impl_multiplicative {\n     ($A:ty, $init:expr) => {\n+        #[experimental = \"trait is experimental\"]\n         impl<T: Iterator<$A>> MultiplicativeIterator<$A> for T {\n             #[inline]\n-            fn product(&mut self) -> $A {\n+            fn product(self) -> $A {\n                 self.fold($init, |acc, x| acc * x)\n             }\n         }\n@@ -860,7 +926,8 @@ impl_multiplicative!(f32,  1.0)\n impl_multiplicative!(f64,  1.0)\n \n /// A trait for iterators over elements which can be compared to one another.\n-pub trait OrdIterator<A> {\n+#[unstable = \"recently renamed for new extension trait conventions\"]\n+pub trait IteratorOrdExt<A> {\n     /// Consumes the entire iterator to return the maximum element.\n     ///\n     /// # Example\n@@ -869,7 +936,7 @@ pub trait OrdIterator<A> {\n     /// let a = [1i, 2, 3, 4, 5];\n     /// assert!(a.iter().max().unwrap() == &5);\n     /// ```\n-    fn max(&mut self) -> Option<A>;\n+    fn max(self) -> Option<A>;\n \n     /// Consumes the entire iterator to return the minimum element.\n     ///\n@@ -879,7 +946,7 @@ pub trait OrdIterator<A> {\n     /// let a = [1i, 2, 3, 4, 5];\n     /// assert!(a.iter().min().unwrap() == &1);\n     /// ```\n-    fn min(&mut self) -> Option<A>;\n+    fn min(self) -> Option<A>;\n \n     /// `min_max` finds the minimum and maximum elements in the iterator.\n     ///\n@@ -914,12 +981,13 @@ pub trait OrdIterator<A> {\n     /// let v = [1i, 1, 1, 1];\n     /// assert!(v.iter().min_max() == MinMax(&1, &1));\n     /// ```\n-    fn min_max(&mut self) -> MinMaxResult<A>;\n+    fn min_max(self) -> MinMaxResult<A>;\n }\n \n-impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n+#[unstable = \"trait is unstable\"]\n+impl<A: Ord, T: Iterator<A>> IteratorOrdExt<A> for T {\n     #[inline]\n-    fn max(&mut self) -> Option<A> {\n+    fn max(self) -> Option<A> {\n         self.fold(None, |max, x| {\n             match max {\n                 None    => Some(x),\n@@ -929,7 +997,7 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n     }\n \n     #[inline]\n-    fn min(&mut self) -> Option<A> {\n+    fn min(self) -> Option<A> {\n         self.fold(None, |min, x| {\n             match min {\n                 None    => Some(x),\n@@ -938,7 +1006,7 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n         })\n     }\n \n-    fn min_max(&mut self) -> MinMaxResult<A> {\n+    fn min_max(mut self) -> MinMaxResult<A> {\n         let (mut min, mut max) = match self.next() {\n             None => return NoElements,\n             Some(x) => {\n@@ -982,8 +1050,9 @@ impl<A: Ord, T: Iterator<A>> OrdIterator<A> for T {\n     }\n }\n \n-/// `MinMaxResult` is an enum returned by `min_max`. See `OrdIterator::min_max` for more detail.\n+/// `MinMaxResult` is an enum returned by `min_max`. See `IteratorOrdExt::min_max` for more detail.\n #[deriving(Clone, PartialEq, Show)]\n+#[unstable = \"waiting on namespaced enum conventions\"]\n pub enum MinMaxResult<T> {\n     /// Empty iterator\n     NoElements,\n@@ -995,6 +1064,7 @@ pub enum MinMaxResult<T> {\n     MinMax(T, T)\n }\n \n+#[stable]\n impl<T: Clone> MinMaxResult<T> {\n     /// `into_option` creates an `Option` of type `(T,T)`. The returned `Option` has variant\n     /// `None` if and only if the `MinMaxResult` has variant `NoElements`. Otherwise variant\n@@ -1025,14 +1095,15 @@ impl<T: Clone> MinMaxResult<T> {\n }\n \n /// A trait for iterators that contain cloneable elements\n-pub trait CloneIteratorExt<A> {\n+#[unstable = \"recently renamed for extension trait conventions\"]\n+pub trait IteratorCloneExt<A> {\n     /// Creates an iterator that clones the elements it yields. Useful for converting an\n     /// Iterator<&T> to an Iterator<T>.\n     fn cloned(self) -> Cloned<Self>;\n }\n \n-\n-impl<A: Clone, D: Deref<A>, I: Iterator<D>> CloneIteratorExt<A> for I {\n+#[unstable = \"trait is unstable\"]\n+impl<A: Clone, D: Deref<A>, I: Iterator<D>> IteratorCloneExt<A> for I {\n     fn cloned(self) -> Cloned<I> {\n         Cloned { it: self }\n     }\n@@ -1060,40 +1131,45 @@ impl<A: Clone, D: Deref<A>, I: DoubleEndedIterator<D>>\n     }\n }\n \n-impl<A: Clone, D: Deref<A>, I: ExactSize<D>> ExactSize<A> for Cloned<I> {}\n+#[unstable = \"trait is unstable\"]\n+impl<A: Clone, D: Deref<A>, I: ExactSizeIterator<D>> ExactSizeIterator<A> for Cloned<I> {}\n \n-/// A trait for iterators that are cloneable.\n-pub trait CloneableIterator {\n+#[unstable = \"recently renamed for extension trait conventions\"]\n+/// An extension trait for cloneable iterators.\n+pub trait CloneIteratorExt {\n     /// Repeats an iterator endlessly\n     ///\n     /// # Example\n     ///\n     /// ```rust\n-    /// use std::iter::{CloneableIterator, count};\n+    /// use std::iter::{CloneIteratorExt, count};\n     ///\n     /// let a = count(1i,1i).take(1);\n     /// let mut cy = a.cycle();\n     /// assert_eq!(cy.next(), Some(1));\n     /// assert_eq!(cy.next(), Some(1));\n     /// ```\n+    #[stable]\n     fn cycle(self) -> Cycle<Self>;\n }\n \n-impl<A, T: Clone + Iterator<A>> CloneableIterator for T {\n+impl<A, I> CloneIteratorExt for I where I: Iterator<A> + Clone {\n     #[inline]\n-    fn cycle(self) -> Cycle<T> {\n+    fn cycle(self) -> Cycle<I> {\n         Cycle{orig: self.clone(), iter: self}\n     }\n }\n \n /// An iterator that repeats endlessly\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Cycle<T> {\n     orig: T,\n     iter: T,\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1114,6 +1190,7 @@ impl<A, T: Clone + Iterator<A>> Iterator<A> for Cycle<T> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1141,12 +1218,14 @@ impl<A, T: Clone + RandomAccessIterator<A>> RandomAccessIterator<A> for Cycle<T>\n /// An iterator which strings two iterators together\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Chain<T, U> {\n     a: T,\n     b: U,\n     flag: bool,\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1178,6 +1257,7 @@ impl<A, T: Iterator<A>, U: Iterator<A>> Iterator<A> for Chain<T, U> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: DoubleEndedIterator<A>, U: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n for Chain<T, U> {\n     #[inline]\n@@ -1189,6 +1269,7 @@ for Chain<T, U> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: RandomAccessIterator<A>, U: RandomAccessIterator<A>> RandomAccessIterator<A>\n for Chain<T, U> {\n     #[inline]\n@@ -1211,11 +1292,13 @@ for Chain<T, U> {\n /// An iterator which iterates two other iterators simultaneously\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Zip<T, U> {\n     a: T,\n     b: U\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<(A, B)> {\n@@ -1246,7 +1329,8 @@ impl<A, B, T: Iterator<A>, U: Iterator<B>> Iterator<(A, B)> for Zip<T, U> {\n     }\n }\n \n-impl<A, B, T: ExactSize<A>, U: ExactSize<B>> DoubleEndedIterator<(A, B)>\n+#[unstable = \"trait is unstable\"]\n+impl<A, B, T: ExactSizeIterator<A>, U: ExactSizeIterator<B>> DoubleEndedIterator<(A, B)>\n for Zip<T, U> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(A, B)> {\n@@ -1268,6 +1352,7 @@ for Zip<T, U> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, B, T: RandomAccessIterator<A>, U: RandomAccessIterator<B>>\n RandomAccessIterator<(A, B)> for Zip<T, U> {\n     #[inline]\n@@ -1289,6 +1374,7 @@ RandomAccessIterator<(A, B)> for Zip<T, U> {\n \n /// An iterator which maps the values of `iter` with `f`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Map<'a, A, B, T> {\n     iter: T,\n     f: |A|: 'a -> B\n@@ -1304,6 +1390,7 @@ impl<'a, A, B, T> Map<'a, A, B, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, B, T: Iterator<A>> Iterator<B> for Map<'a, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n@@ -1317,6 +1404,7 @@ impl<'a, A, B, T: Iterator<A>> Iterator<B> for Map<'a, A, B, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B> for Map<'a, A, B, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<B> {\n@@ -1325,6 +1413,7 @@ impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B> for Map<'a, A,\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A, B, T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1340,11 +1429,13 @@ impl<'a, A, B, T: RandomAccessIterator<A>> RandomAccessIterator<B> for Map<'a, A\n \n /// An iterator which filters the elements of `iter` with `predicate`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Filter<'a, A, T> {\n     iter: T,\n     predicate: |&A|: 'a -> bool\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1365,6 +1456,7 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for Filter<'a, A, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A, T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n@@ -1379,11 +1471,13 @@ impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Filter<'a, A,\n \n /// An iterator which uses `f` to both filter and map elements from `iter`\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct FilterMap<'a, A, B, T> {\n     iter: T,\n     f: |A|: 'a -> Option<B>\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n@@ -1403,6 +1497,7 @@ impl<'a, A, B, T: Iterator<A>> Iterator<B> for FilterMap<'a, A, B, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, B, T: DoubleEndedIterator<A>> DoubleEndedIterator<B>\n for FilterMap<'a, A, B, T> {\n     #[inline]\n@@ -1420,11 +1515,13 @@ for FilterMap<'a, A, B, T> {\n /// An iterator which yields the current count and the element during iteration\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Enumerate<T> {\n     iter: T,\n     count: uint\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn next(&mut self) -> Option<(uint, A)> {\n@@ -1444,7 +1541,8 @@ impl<A, T: Iterator<A>> Iterator<(uint, A)> for Enumerate<T> {\n     }\n }\n \n-impl<A, T: ExactSize<A>> DoubleEndedIterator<(uint, A)> for Enumerate<T> {\n+#[unstable = \"trait is unstable\"]\n+impl<A, T: ExactSizeIterator<A>> DoubleEndedIterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<(uint, A)> {\n         match self.iter.next_back() {\n@@ -1457,6 +1555,7 @@ impl<A, T: ExactSize<A>> DoubleEndedIterator<(uint, A)> for Enumerate<T> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerate<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1474,11 +1573,13 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<(uint, A)> for Enumerat\n \n /// An iterator with a `peek()` that returns an optional reference to the next element.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Peekable<A, T> {\n     iter: T,\n     peeked: Option<A>,\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1502,6 +1603,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Peekable<A, T> {\n     }\n }\n \n+#[stable]\n impl<'a, A, T: Iterator<A>> Peekable<A, T> {\n     /// Return a reference to the next element of the iterator with out advancing it,\n     /// or None if the iterator is exhausted.\n@@ -1525,12 +1627,14 @@ impl<'a, A, T: Iterator<A>> Peekable<A, T> {\n \n /// An iterator which rejects elements while `predicate` is true\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct SkipWhile<'a, A, T> {\n     iter: T,\n     flag: bool,\n     predicate: |&A|: 'a -> bool\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1552,12 +1656,14 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for SkipWhile<'a, A, T> {\n \n /// An iterator which only accepts elements while `predicate` is true\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct TakeWhile<'a, A, T> {\n     iter: T,\n     flag: bool,\n     predicate: |&A|: 'a -> bool\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1588,11 +1694,13 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for TakeWhile<'a, A, T> {\n /// An iterator which skips over `n` elements of `iter`.\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Skip<T> {\n     iter: T,\n     n: uint\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1634,6 +1742,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Skip<T> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1653,11 +1762,13 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Skip<T> {\n /// An iterator which only iterates over the first `n` iterations of `iter`.\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Take<T> {\n     iter: T,\n     n: uint\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>> Iterator<A> for Take<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1684,6 +1795,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Take<T> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1703,6 +1815,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Take<T> {\n \n /// An iterator to maintain state while iterating another iterator\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable = \"waiting for unboxed closures\"]\n pub struct Scan<'a, A, B, T, St> {\n     iter: T,\n     f: |&mut St, A|: 'a -> Option<B>,\n@@ -1711,6 +1824,7 @@ pub struct Scan<'a, A, B, T, St> {\n     pub state: St,\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n@@ -1728,13 +1842,15 @@ impl<'a, A, B, T: Iterator<A>, St> Iterator<B> for Scan<'a, A, B, T, St> {\n /// and yields the elements of the produced iterators\n ///\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable = \"waiting for unboxed closures\"]\n pub struct FlatMap<'a, A, T, U> {\n     iter: T,\n     f: |A|: 'a -> U,\n     frontiter: Option<U>,\n     backiter: Option<U>,\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'a, A, T, U> {\n     #[inline]\n     fn next(&mut self) -> Option<B> {\n@@ -1763,6 +1879,7 @@ impl<'a, A, T: Iterator<A>, B, U: Iterator<B>> Iterator<B> for FlatMap<'a, A, T,\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a,\n      A, T: DoubleEndedIterator<A>,\n      B, U: DoubleEndedIterator<B>> DoubleEndedIterator<B>\n@@ -1788,11 +1905,13 @@ impl<'a,\n /// yields `None` once.\n #[deriving(Clone)]\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[stable]\n pub struct Fuse<T> {\n     iter: T,\n     done: bool\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: Iterator<A>> Iterator<A> for Fuse<T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1819,6 +1938,7 @@ impl<A, T: Iterator<A>> Iterator<A> for Fuse<T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Fuse<T> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n@@ -1837,6 +1957,7 @@ impl<A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A> for Fuse<T> {\n }\n \n // Allow RandomAccessIterators to be fused without affecting random-access behavior\n+#[experimental = \"trait is experimental\"]\n impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Fuse<T> {\n     #[inline]\n     fn indexable(&self) -> uint {\n@@ -1849,6 +1970,7 @@ impl<A, T: RandomAccessIterator<A>> RandomAccessIterator<A> for Fuse<T> {\n     }\n }\n \n+#[experimental = \"seems marginal\"]\n impl<T> Fuse<T> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will\n     /// call the underlying iterator again even if it previously returned None.\n@@ -1861,6 +1983,7 @@ impl<T> Fuse<T> {\n /// An iterator that calls a function with a reference to each\n /// element before yielding it.\n #[must_use = \"iterator adaptors are lazy and do nothing unless consumed\"]\n+#[unstable = \"waiting for unboxed closures\"]\n pub struct Inspect<'a, A, T> {\n     iter: T,\n     f: |&A|: 'a\n@@ -1878,6 +2001,7 @@ impl<'a, A, T> Inspect<'a, A, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: Iterator<A>> Iterator<A> for Inspect<'a, A, T> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1891,6 +2015,7 @@ impl<'a, A, T: Iterator<A>> Iterator<A> for Inspect<'a, A, T> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<'a, A, T: DoubleEndedIterator<A>> DoubleEndedIterator<A>\n for Inspect<'a, A, T> {\n     #[inline]\n@@ -1900,6 +2025,7 @@ for Inspect<'a, A, T> {\n     }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<'a, A, T: RandomAccessIterator<A>> RandomAccessIterator<A>\n for Inspect<'a, A, T> {\n     #[inline]\n@@ -1915,12 +2041,14 @@ for Inspect<'a, A, T> {\n }\n \n /// An iterator which just modifies the contained state throughout iteration.\n+#[experimental]\n pub struct Unfold<'a, A, St> {\n     f: |&mut St|: 'a -> Option<A>,\n     /// Internal state that will be yielded on the next iteration\n     pub state: St,\n }\n \n+#[experimental]\n impl<'a, A, St> Unfold<'a, A, St> {\n     /// Creates a new iterator with the specified closure as the \"iterator\n     /// function\" and an initial state to eventually pass to the iterator\n@@ -1934,6 +2062,7 @@ impl<'a, A, St> Unfold<'a, A, St> {\n     }\n }\n \n+#[experimental]\n impl<'a, A, St> Iterator<A> for Unfold<'a, A, St> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1950,6 +2079,7 @@ impl<'a, A, St> Iterator<A> for Unfold<'a, A, St> {\n /// An infinite iterator starting at `start` and advancing by `step` with each\n /// iteration\n #[deriving(Clone)]\n+#[unstable = \"may be renamed\"]\n pub struct Counter<A> {\n     /// The current state the counter is at (next value to be yielded)\n     state: A,\n@@ -1959,10 +2089,12 @@ pub struct Counter<A> {\n \n /// Creates a new counter with the specified start/step\n #[inline]\n+#[unstable = \"may be renamed\"]\n pub fn count<A>(start: A, step: A) -> Counter<A> {\n     Counter{state: start, step: step}\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -1979,6 +2111,7 @@ impl<A: Add<A, A> + Clone> Iterator<A> for Counter<A> {\n \n /// An iterator over the range [start, stop)\n #[deriving(Clone)]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct Range<A> {\n     state: A,\n     stop: A,\n@@ -2008,6 +2141,7 @@ pub fn range<A: Int>(start: A, stop: A) -> Range<A> {\n }\n \n // FIXME: #10414: Unfortunate type bound\n+#[unstable = \"trait is unstable\"]\n impl<A: Int + ToPrimitive> Iterator<A> for Range<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2055,6 +2189,7 @@ impl<A: Int + ToPrimitive> Iterator<A> for Range<A> {\n \n /// `Int` is required to ensure the range will be the same regardless of\n /// the direction it is consumed.\n+#[unstable = \"trait is unstable\"]\n impl<A: Int + ToPrimitive> DoubleEndedIterator<A> for Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n@@ -2069,20 +2204,23 @@ impl<A: Int + ToPrimitive> DoubleEndedIterator<A> for Range<A> {\n \n /// An iterator over the range [start, stop]\n #[deriving(Clone)]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeInclusive<A> {\n     range: Range<A>,\n     done: bool,\n }\n \n /// Return an iterator over the range [start, stop]\n #[inline]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub fn range_inclusive<A: Int>(start: A, stop: A) -> RangeInclusive<A> {\n     RangeInclusive {\n         range: range(start, stop),\n         done: false,\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Int + ToPrimitive> Iterator<A> for RangeInclusive<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2115,6 +2253,7 @@ impl<A: Int + ToPrimitive> Iterator<A> for RangeInclusive<A> {\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Int + ToPrimitive> DoubleEndedIterator<A> for RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n@@ -2133,6 +2272,7 @@ impl<A: Int + ToPrimitive> DoubleEndedIterator<A> for RangeInclusive<A> {\n \n /// An iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeStep<A> {\n     state: A,\n     stop: A,\n@@ -2142,11 +2282,13 @@ pub struct RangeStep<A> {\n \n /// Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.\n #[inline]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub fn range_step<A: Int>(start: A, stop: A, step: A) -> RangeStep<A> {\n     let rev = step < Int::zero();\n     RangeStep{state: start, stop: stop, step: step, rev: rev}\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Int> Iterator<A> for RangeStep<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2165,6 +2307,7 @@ impl<A: Int> Iterator<A> for RangeStep<A> {\n \n /// An iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n #[deriving(Clone)]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub struct RangeStepInclusive<A> {\n     state: A,\n     stop: A,\n@@ -2175,6 +2318,7 @@ pub struct RangeStepInclusive<A> {\n \n /// Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.\n #[inline]\n+#[unstable = \"may be refactored due to numerics reform or ops reform\"]\n pub fn range_step_inclusive<A: Int>(start: A, stop: A, step: A) -> RangeStepInclusive<A> {\n     let rev = step < Int::zero();\n     RangeStepInclusive {\n@@ -2186,6 +2330,7 @@ pub fn range_step_inclusive<A: Int>(start: A, stop: A, step: A) -> RangeStepIncl\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Int> Iterator<A> for RangeStepInclusive<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n@@ -2205,30 +2350,35 @@ impl<A: Int> Iterator<A> for RangeStepInclusive<A> {\n \n /// An iterator that repeats an element endlessly\n #[deriving(Clone)]\n+#[stable]\n pub struct Repeat<A> {\n     element: A\n }\n \n impl<A: Clone> Repeat<A> {\n     /// Create a new `Repeat` that endlessly repeats the element `elt`.\n     #[inline]\n+    #[deprecated = \"use iter::repeat instead\"]\n     pub fn new(elt: A) -> Repeat<A> {\n         Repeat{element: elt}\n     }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Clone> Iterator<A> for Repeat<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> { self.idx(0) }\n     #[inline]\n     fn size_hint(&self) -> (uint, Option<uint>) { (uint::MAX, None) }\n }\n \n+#[unstable = \"trait is unstable\"]\n impl<A: Clone> DoubleEndedIterator<A> for Repeat<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> { self.idx(0) }\n }\n \n+#[experimental = \"trait is experimental\"]\n impl<A: Clone> RandomAccessIterator<A> for Repeat<A> {\n     #[inline]\n     fn indexable(&self) -> uint { uint::MAX }\n@@ -2240,10 +2390,12 @@ type IterateState<'a, T> = (|T|: 'a -> T, Option<T>, bool);\n \n /// An iterator that repeatedly applies a given function, starting\n /// from a given seed value.\n+#[experimental]\n pub type Iterate<'a, T> = Unfold<'a, T, IterateState<'a, T>>;\n \n /// Create a new iterator that produces an infinite sequence of\n /// repeated applications of the given function `f`.\n+#[experimental]\n pub fn iterate<'a, T: Clone>(seed: T, f: |T|: 'a -> T) -> Iterate<'a, T> {\n     Unfold::new((f, Some(seed), true), |st| {\n         let &(ref mut f, ref mut val, ref mut first) = st;\n@@ -2262,8 +2414,10 @@ pub fn iterate<'a, T: Clone>(seed: T, f: |T|: 'a -> T) -> Iterate<'a, T> {\n }\n \n /// Create a new iterator that endlessly repeats the element `elt`.\n+#[inline]\n+#[stable]\n pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n-    Repeat::new(elt)\n+    Repeat{element: elt}\n }\n \n /// Functions for lexicographical ordering of sequences.\n@@ -2273,6 +2427,7 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n ///\n /// If two sequences are equal up until the point where one ends,\n /// the shorter sequence compares less.\n+#[experimental = \"likely to be removed after cmp reform\"]\n pub mod order {\n     use cmp;\n     use cmp::{Eq, Ord, PartialOrd, PartialEq};"}, {"sha": "ce61bd97e1323bd50be31c6311038516bc0927ab", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -25,7 +25,7 @@ use clone::Clone;\n use cmp::{PartialEq, Eq};\n use cmp::{PartialOrd, Ord};\n use intrinsics;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use kinds::Copy;\n use mem::size_of;\n use ops::{Add, Sub, Mul, Div, Rem, Neg};"}, {"sha": "7d7b41bf7bfd849d4c9a0e0ca1abeed4adbd5701", "filename": "src/libcore/option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -147,7 +147,7 @@ pub use self::Option::*;\n \n use cmp::{Eq, Ord};\n use default::Default;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use mem;\n use result::{Result, Ok, Err};\n use slice;\n@@ -797,7 +797,7 @@ impl<A> DoubleEndedIterator<A> for Item<A> {\n     }\n }\n \n-impl<A> ExactSize<A> for Item<A> {}\n+impl<A> ExactSizeIterator<A> for Item<A> {}\n \n /////////////////////////////////////////////////////////////////////////////\n // FromIterator"}, {"sha": "6678a20087b72fa9300dbbed09726f7b573f259d", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -39,7 +39,7 @@ pub use ops::{Slice, SliceMut};\n pub use ops::{Fn, FnMut, FnOnce};\n \n // Reexported functions\n-pub use iter::{range, repeat};\n+pub use iter::range;\n pub use mem::drop;\n pub use str::from_str;\n \n@@ -50,9 +50,10 @@ pub use clone::Clone;\n pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n pub use cmp::{Ordering, Equiv};\n pub use cmp::Ordering::{Less, Equal, Greater};\n-pub use iter::{FromIterator, Extend};\n-pub use iter::{Iterator, DoubleEndedIterator, RandomAccessIterator, CloneableIterator};\n-pub use iter::{OrdIterator, MutableDoubleEndedIterator, ExactSize};\n+pub use iter::{FromIterator, Extend, IteratorExt};\n+pub use iter::{Iterator, DoubleEndedIterator, DoubleEndedIteratorExt, RandomAccessIterator};\n+pub use iter::{IteratorCloneExt, CloneIteratorExt};\n+pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n pub use num::{ToPrimitive, FromPrimitive};\n pub use option::Option;\n pub use option::Option::{Some, None};"}, {"sha": "202ac4644975443bd79d384142b4cb3acd7fe149", "filename": "src/libcore/result.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -235,7 +235,7 @@ pub use self::Result::*;\n use std::fmt::Show;\n use slice;\n use slice::AsSlice;\n-use iter::{Iterator, DoubleEndedIterator, FromIterator, ExactSize};\n+use iter::{Iterator, IteratorExt, DoubleEndedIterator, FromIterator, ExactSizeIterator};\n use option::{None, Option, Some};\n \n /// `Result` is a type that represents either success (`Ok`) or failure (`Err`).\n@@ -831,7 +831,7 @@ impl<A> DoubleEndedIterator<A> for Item<A> {\n     }\n }\n \n-impl<A> ExactSize<A> for Item<A> {}\n+impl<A> ExactSizeIterator<A> for Item<A> {}\n \n /////////////////////////////////////////////////////////////////////////////\n // FromIterator"}, {"sha": "36464e4d29e46b8d7e4c1a4c7a540798064e2c9a", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -1160,7 +1160,7 @@ impl<'a, T> Items<'a, T> {\n iterator!{struct Items -> *const T, &'a T}\n \n #[experimental = \"needs review\"]\n-impl<'a, T> ExactSize<&'a T> for Items<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n \n #[experimental = \"needs review\"]\n impl<'a, T> Clone for Items<'a, T> {\n@@ -1255,7 +1255,7 @@ impl<'a, T> MutItems<'a, T> {\n iterator!{struct MutItems -> *mut T, &'a mut T}\n \n #[experimental = \"needs review\"]\n-impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n+impl<'a, T> ExactSizeIterator<&'a mut T> for MutItems<'a, T> {}\n \n /// An abstraction over the splitting iterators, so that splitn, splitn_mut etc\n /// can be implemented once."}, {"sha": "b9586399aec5d19ee143b1358e9df285c8a25aec", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -23,9 +23,9 @@ use char::Char;\n use char;\n use cmp::{Eq, mod};\n use default::Default;\n+use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n+use iter::{DoubleEndedIteratorExt, ExactSizeIterator};\n use iter::range;\n-use iter::{DoubleEndedIterator, ExactSize};\n-use iter::{Map, Iterator};\n use kinds::Sized;\n use mem;\n use num::Int;\n@@ -1210,7 +1210,7 @@ Section: Trait implementations\n #[allow(missing_docs)]\n pub mod traits {\n     use cmp::{Ord, Ordering, Less, Equal, Greater, PartialEq, PartialOrd, Equiv, Eq};\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use option::{Option, Some};\n     use ops;\n     use str::{Str, StrPrelude, eq_slice};"}, {"sha": "74165dcabc4a0eaf1474b9244b2fefa8a9bd5f89", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -710,7 +710,7 @@ pub fn usage(brief: &str, opts: &[OptGroup]) -> String {\n \n     let desc_sep = format!(\"\\n{}\", \" \".repeat(24));\n \n-    let mut rows = opts.iter().map(|optref| {\n+    let rows = opts.iter().map(|optref| {\n         let OptGroup{short_name,\n                      long_name,\n                      hint,"}, {"sha": "517b50c49c7ef9478bad3459a7c15070f40a7025", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -11,8 +11,8 @@\n //! The ISAAC random number generator.\n \n use core::prelude::*;\n-use core::iter::{range_step, Repeat};\n use core::slice;\n+use core::iter::{range_step, repeat};\n \n use {Rng, SeedableRng, Rand};\n \n@@ -205,7 +205,7 @@ impl<'a> SeedableRng<&'a [u32]> for IsaacRng {\n     fn reseed(&mut self, seed: &'a [u32]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(Repeat::new(0u32));\n+        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u32));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;\n@@ -438,7 +438,7 @@ impl<'a> SeedableRng<&'a [u64]> for Isaac64Rng {\n     fn reseed(&mut self, seed: &'a [u64]) {\n         // make the seed into [seed[0], seed[1], ..., seed[seed.len()\n         // - 1], 0, 0, ...], to fill rng.rsl.\n-        let seed_iter = seed.iter().map(|&x| x).chain(Repeat::new(0u64));\n+        let seed_iter = seed.iter().map(|&x| x).chain(repeat(0u64));\n \n         for (rsl_elem, seed_elem) in self.rsl.iter_mut().zip(seed_iter) {\n             *rsl_elem = seed_elem;"}, {"sha": "b42fb8ccc41f4318885d38bc3c2f2e9278791061", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -154,7 +154,6 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                                           pats: I,\n                                           pred: CFGIndex) -> CFGIndex {\n         //! Handles case where all of the patterns must match.\n-        let mut pats = pats;\n         pats.fold(pred, |pred, pat| self.pat(&**pat, pred))\n     }\n \n@@ -527,7 +526,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     }\n \n     fn exprs<'a, I: Iterator<&'a ast::Expr>>(&mut self,\n-                                             mut exprs: I,\n+                                             exprs: I,\n                                              pred: CFGIndex) -> CFGIndex {\n         //! Constructs graph for `exprs` evaluated in order\n         exprs.fold(pred, |p, e| self.expr(e, p))"}, {"sha": "bcfc003480f4300003db5109f2203f6ee0ae23bc", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -93,7 +93,7 @@ impl<'a> fmt::Show for Matrix<'a> {\n }\n \n impl<'a> FromIterator<Vec<&'a Pat>> for Matrix<'a> {\n-    fn from_iter<T: Iterator<Vec<&'a Pat>>>(mut iterator: T) -> Matrix<'a> {\n+    fn from_iter<T: Iterator<Vec<&'a Pat>>>(iterator: T) -> Matrix<'a> {\n         Matrix(iterator.collect())\n     }\n }\n@@ -1091,4 +1091,3 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n         }\n     }\n }\n-"}, {"sha": "7b442fedc2477adc877f6759917eb72a82d4357b", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -80,7 +80,7 @@ pub fn join(a: constness, b: constness) -> constness {\n     }\n }\n \n-pub fn join_all<It: Iterator<constness>>(mut cs: It) -> constness {\n+pub fn join_all<It: Iterator<constness>>(cs: It) -> constness {\n     cs.fold(integral_const, |a, b| join(a, b))\n }\n "}, {"sha": "3cb628c2e65c569a5056a73ad30ccff51115eabb", "filename": "src/librustc/middle/dependency_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdependency_format.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -233,7 +233,7 @@ fn add_library(sess: &session::Session,\n \n fn attempt_static(sess: &session::Session) -> Option<DependencyList> {\n     let crates = sess.cstore.get_used_crates(cstore::RequireStatic);\n-    if crates.iter().all(|&(_, ref p)| p.is_some()) {\n+    if crates.iter().by_ref().all(|&(_, ref p)| p.is_some()) {\n         Some(crates.into_iter().map(|_| Some(cstore::RequireStatic)).collect())\n     } else {\n         None"}, {"sha": "417e5336249840c9eb67aabab6a177fca6076254", "filename": "src/librustc/middle/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fentry.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -80,7 +80,7 @@ fn find_item(item: &Item, ctxt: &mut EntryContext) {\n     match item.node {\n         ItemFn(..) => {\n             if item.ident.name == ctxt.main_name {\n-                 ctxt.ast_map.with_path(item.id, |mut path| {\n+                 ctxt.ast_map.with_path(item.id, |path| {\n                         if path.count() == 1 {\n                             // This is a top-level function so can be 'main'\n                             if ctxt.main_fn.is_none() {"}, {"sha": "8d4fbfd4cbcccea6740ed68fddd447b5cb2208f3", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -132,7 +132,7 @@ pub fn simple_identifier<'a>(pat: &'a ast::Pat) -> Option<&'a ast::Ident> {\n }\n \n pub fn def_to_path(tcx: &ty::ctxt, id: ast::DefId) -> ast::Path {\n-    ty::with_path(tcx, id, |mut path| ast::Path {\n+    ty::with_path(tcx, id, |path| ast::Path {\n         global: false,\n         segments: path.last().map(|elem| ast::PathSegment {\n             identifier: ast::Ident::new(elem.name()),"}, {"sha": "2c8465e62d7c3257a3cdb1207e7d416e5a2c9360", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -3106,7 +3106,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n     // Iterate until something non-representable is found\n     fn find_nonrepresentable<'tcx, It: Iterator<Ty<'tcx>>>(cx: &ctxt<'tcx>, sp: Span,\n                                                            seen: &mut Vec<Ty<'tcx>>,\n-                                                           mut iter: It)\n+                                                           iter: It)\n                                                            -> Representability {\n         iter.fold(Representable,\n                   |r, ty| cmp::max(r, is_type_structurally_recursive(cx, sp, seen, ty)))\n@@ -3164,7 +3164,7 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                 let types_a = substs_a.types.get_slice(subst::TypeSpace);\n                 let types_b = substs_b.types.get_slice(subst::TypeSpace);\n \n-                let mut pairs = types_a.iter().zip(types_b.iter());\n+                let pairs = types_a.iter().zip(types_b.iter());\n \n                 pairs.all(|(&a, &b)| same_type(a, b))\n             }"}, {"sha": "754bdc8c8ea013172526fe87b45fd5106045c973", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -4177,7 +4177,7 @@ fn check_expr_with_unifier<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n       }\n       ast::ExprMethodCall(ident, ref tps, ref args) => {\n         check_method_call(fcx, expr, ident, args.as_slice(), tps.as_slice(), lvalue_pref);\n-        let mut arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n+        let arg_tys = args.iter().map(|a| fcx.expr_ty(&**a));\n         let  args_err = arg_tys.fold(false,\n              |rest_err, a| {\n               rest_err || ty::type_is_error(a)});"}, {"sha": "2102133f97d3d52c3e7dd14e1aff19860945198f", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -170,7 +170,7 @@ impl<'a> FmtStrs<'a> {\n         });\n \n         let pairs = fields.iter().zip(values);\n-        let mut strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(\n+        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(\n             if *f == \"qualname\" && v.len() > 0 {\n                 let mut n = self.krate.clone();\n                 n.push_str(\"::\");"}, {"sha": "6fe5298393e7d7d92ca839df2943819312cc2a72", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -2696,7 +2696,7 @@ fn exported_name<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, id: ast::NodeId,\n         // Use provided name\n         Some(name) => name.get().to_string(),\n \n-        _ => ccx.tcx().map.with_path(id, |mut path| {\n+        _ => ccx.tcx().map.with_path(id, |path| {\n             if attr::contains_name(attrs, \"no_mangle\") {\n                 // Don't mangle\n                 path.last().unwrap().to_string()"}, {"sha": "a646b7e1ccbeeac8045f0d1fb7a3d0d11ff63934", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -151,7 +151,7 @@ pub fn build_external_trait(cx: &DocContext, tcx: &ty::ctxt,\n     let def = ty::lookup_trait_def(tcx, did);\n     let trait_items = ty::trait_items(tcx, did).clean(cx);\n     let provided = ty::provided_trait_methods(tcx, did);\n-    let mut items = trait_items.into_iter().map(|trait_item| {\n+    let items = trait_items.into_iter().map(|trait_item| {\n         if provided.iter().any(|a| a.def_id == trait_item.def_id) {\n             clean::ProvidedMethod(trait_item)\n         } else {"}, {"sha": "d523992b4c61752da31138a15b06179274ae0f0e", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -422,7 +422,7 @@ impl fmt::Show for clean::Type {\n                        bounds = if decl.bounds.len() == 0 {\n                            \"\".to_string()\n                        } else {\n-                           let mut m = decl.bounds\n+                           let m = decl.bounds\n                                            .iter()\n                                            .map(|s| s.to_string());\n                            format!("}, {"sha": "df25daa3ca1acba0829a537ed7e318f50074b835", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -183,7 +183,7 @@ pub fn render(w: &mut fmt::Formatter, s: &str, print_toc: bool) -> fmt::Result {\n                 }\n             };\n \n-            let mut lines = origtext.lines().filter(|l| {\n+            let lines = origtext.lines().filter(|l| {\n                 stripped_filtered_line(*l).is_none()\n             });\n             let text = lines.collect::<Vec<&str>>().connect(\"\\n\");\n@@ -325,7 +325,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector) {\n             let opaque = opaque as *mut hoedown_html_renderer_state;\n             let tests = &mut *((*opaque).opaque as *mut ::test::Collector);\n             let text = str::from_utf8(text).unwrap();\n-            let mut lines = text.lines().map(|l| {\n+            let lines = text.lines().map(|l| {\n                 stripped_filtered_line(l).unwrap_or(l)\n             });\n             let text = lines.collect::<Vec<&str>>().connect(\"\\n\");"}, {"sha": "325bdc284acfc8a08e576d0e05515c34357f474f", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -19,7 +19,7 @@ use alloc::arc::Arc;\n use alloc::boxed::Box;\n use core::any::Any;\n use core::atomic::{AtomicUint, SeqCst};\n-use core::iter::Take;\n+use core::iter::{IteratorExt, Take};\n use core::kinds::marker;\n use core::mem;\n use core::prelude::{Clone, Drop, Err, Iterator, None, Ok, Option, Send, Some};"}, {"sha": "403ca9d14321a0301f722ad321d2cc88440694fe", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -17,7 +17,7 @@\n \n use core::kinds::Sized;\n use fmt;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use mem;\n use option::{Option, Some, None};\n use slice::{SlicePrelude, AsSlice};"}, {"sha": "9c7967d17bb8fcc67288571321b2e34f821c4727", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -20,7 +20,7 @@ use cmp::{max, Eq, Equiv, PartialEq};\n use default::Default;\n use fmt::{mod, Show};\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{mod, Iterator, FromIterator, Extend};\n+use iter::{mod, Iterator, IteratorExt, FromIterator, Extend};\n use kinds::Sized;\n use mem::{mod, replace};\n use num::UnsignedInt;"}, {"sha": "f6d526cca395d7caba2246ef33dcea14397a2cd2", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -17,7 +17,7 @@ use default::Default;\n use fmt::Show;\n use fmt;\n use hash::{Hash, Hasher, RandomSipHasher};\n-use iter::{Iterator, FromIterator, FilterMap, Chain, Repeat, Zip, Extend};\n+use iter::{Iterator, IteratorExt, FromIterator, FilterMap, Chain, Repeat, Zip, Extend, repeat};\n use iter;\n use option::{Some, None};\n use result::{Ok, Err};\n@@ -262,7 +262,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     /// ```\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn difference<'a>(&'a self, other: &'a HashSet<T, H>) -> SetAlgebraItems<'a, T, H> {\n-        Repeat::new(other).zip(self.iter())\n+        repeat(other).zip(self.iter())\n             .filter_map(|(other, elt)| {\n                 if !other.contains(elt) { Some(elt) } else { None }\n             })\n@@ -314,7 +314,7 @@ impl<T: Eq + Hash<S>, S, H: Hasher<S>> HashSet<T, H> {\n     #[unstable = \"matches collection reform specification, waiting for dust to settle\"]\n     pub fn intersection<'a>(&'a self, other: &'a HashSet<T, H>)\n         -> SetAlgebraItems<'a, T, H> {\n-        Repeat::new(other).zip(self.iter())\n+        repeat(other).zip(self.iter())\n             .filter_map(|(other, elt)| {\n                 if other.contains(elt) { Some(elt) } else { None }\n             })"}, {"sha": "4b868f6a95b7c73cb6fc566ed2e90f816ae41299", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -21,7 +21,7 @@ A simple wrapper over the platform's dynamic library facilities\n \n use clone::Clone;\n use c_str::ToCStr;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use mem;\n use ops::*;\n use option::*;\n@@ -280,7 +280,7 @@ pub mod dl {\n #[cfg(target_os = \"windows\")]\n pub mod dl {\n     use c_str::ToCStr;\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use libc;\n     use os;\n     use ptr;"}, {"sha": "025033a112c0cb51ed81181af6a20d89e53d2345", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -14,7 +14,7 @@\n \n use cmp;\n use io::{Reader, Writer, Stream, Buffer, DEFAULT_BUF_SIZE, IoResult};\n-use iter::ExactSize;\n+use iter::ExactSizeIterator;\n use ops::Drop;\n use option::{Some, None, Option};\n use result::{Ok, Err};"}, {"sha": "a25674030aeacd3d7f8a179e983c43cdcb4fa0d9", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -233,7 +233,7 @@ use default::Default;\n use error::{FromError, Error};\n use fmt;\n use int;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use mem::transmute;\n use ops::{BitOr, BitXor, BitAnd, Sub, Not};\n use option::{Option, Some, None};"}, {"sha": "d6a48fd39e6239bcc4998cf9dd83f42a6fce216e", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -23,7 +23,7 @@ pub use self::SocketType::*;\n pub use self::Flag::*;\n pub use self::Protocol::*;\n \n-use iter::Iterator;\n+use iter::IteratorExt;\n use io::{IoResult};\n use io::net::ip::{SocketAddr, IpAddr};\n use option::{Option, Some, None};"}, {"sha": "4812e911cc4812ce6497a56ff0306e41700551bc", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -20,7 +20,7 @@ pub use self::IpAddr::*;\n use fmt;\n use io::{mod, IoResult, IoError};\n use io::net;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use option::{Option, None, Some};\n use result::{Ok, Err};\n use str::{FromStr, StrPrelude};"}, {"sha": "aa2234175917c3c3e7dff2c9de72919b9dbe7ad6", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -19,7 +19,6 @@\n \n use clone::Clone;\n use io::IoResult;\n-use iter::Iterator;\n use result::Err;\n use io::net::ip::{SocketAddr, ToSocketAddr};\n use io::{Reader, Writer, Listener, Acceptor};"}, {"sha": "e6dd20f63fbbcedea53287bca0ba69f489cc5365", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -35,7 +35,6 @@ use failure::LOCAL_STDERR;\n use fmt;\n use io::{Reader, Writer, IoResult, IoError, OtherIoError,\n          standard_error, EndOfFile, LineBufferedWriter, BufferedReader};\n-use iter::Iterator;\n use kinds::Send;\n use libc;\n use mem;"}, {"sha": "6b5ec983a8071b873c0880d40d2a6594e8a3beae", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -39,7 +39,7 @@ use clone::Clone;\n use error::{FromError, Error};\n use fmt;\n use io::{IoResult, IoError};\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use libc::{c_void, c_int};\n use libc;\n use boxed::Box;"}, {"sha": "047fa51b92f600fc142cff7a0b427724e6a5cb9e", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -71,7 +71,7 @@ use core::kinds::Sized;\n use c_str::CString;\n use clone::Clone;\n use fmt;\n-use iter::Iterator;\n+use iter::IteratorExt;\n use option::{Option, None, Some};\n use str;\n use str::{CowString, MaybeOwned, Str, StrPrelude};"}, {"sha": "cc8fcccf14a06b2d01b9a04135b13f40085d518c", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -15,9 +15,10 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{DoubleEndedIterator, AdditiveIterator, Extend, Iterator, Map};\n-use kinds::Sized;\n+use iter::{DoubleEndedIteratorExt, AdditiveIterator, Extend};\n+use iter::{Iterator, IteratorExt, Map};\n use option::{Option, None, Some};\n+use kinds::Sized;\n use str::{FromStr, Str};\n use str;\n use slice::{CloneSliceAllocPrelude, Splits, AsSlice, VectorVector,"}, {"sha": "6a6551af4999b938091bb29160735f39fd1f9732", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -20,7 +20,8 @@ use clone::Clone;\n use cmp::{PartialEq, Eq, PartialOrd, Ord, Ordering};\n use hash;\n use io::Writer;\n-use iter::{AdditiveIterator, DoubleEndedIterator, Extend, Iterator, Map};\n+use iter::{AdditiveIterator, DoubleEndedIteratorExt, Extend};\n+use iter::{Iterator, IteratorExt, Map};\n use mem;\n use option::{Option, Some, None};\n use slice::{AsSlice, SlicePrelude};"}, {"sha": "590a7894fa7bb75925d0bedb99fc8f89fb92cd87", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -50,7 +50,7 @@\n #[doc(no_inline)] pub use ops::{Fn, FnMut, FnOnce};\n \n // Reexported functions\n-#[doc(no_inline)] pub use iter::{range, repeat};\n+#[doc(no_inline)] pub use iter::range;\n #[doc(no_inline)] pub use mem::drop;\n #[doc(no_inline)] pub use str::from_str;\n \n@@ -65,10 +65,11 @@\n #[doc(no_inline)] pub use cmp::{PartialEq, PartialOrd, Eq, Ord};\n #[doc(no_inline)] pub use cmp::{Ordering, Equiv};\n #[doc(no_inline)] pub use cmp::Ordering::{Less, Equal, Greater};\n-#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSize};\n-#[doc(no_inline)] pub use iter::{Iterator, DoubleEndedIterator};\n-#[doc(no_inline)] pub use iter::{RandomAccessIterator, CloneableIterator};\n-#[doc(no_inline)] pub use iter::{OrdIterator, MutableDoubleEndedIterator};\n+#[doc(no_inline)] pub use iter::{FromIterator, Extend, ExactSizeIterator};\n+#[doc(no_inline)] pub use iter::{Iterator, IteratorExt, DoubleEndedIterator};\n+#[doc(no_inline)] pub use iter::{DoubleEndedIteratorExt, CloneIteratorExt};\n+#[doc(no_inline)] pub use iter::{RandomAccessIterator, IteratorCloneExt};\n+#[doc(no_inline)] pub use iter::{IteratorOrdExt, MutableDoubleEndedIterator};\n #[doc(no_inline)] pub use num::{ToPrimitive, FromPrimitive};\n #[doc(no_inline)] pub use boxed::Box;\n #[doc(no_inline)] pub use option::Option;"}, {"sha": "da690f5d154df658ea66267c5e4b9ab47142ef80", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -224,7 +224,7 @@\n use cell::RefCell;\n use clone::Clone;\n use io::IoResult;\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use mem;\n use rc::Rc;\n use result::{Ok, Err};"}, {"sha": "4f6c1f8a2c61a326b0f9f8e1bd5e16c47422fe4d", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -13,7 +13,7 @@\n #![allow(non_camel_case_types)]\n \n use io::{IoResult, Writer};\n-use iter::Iterator;\n+use iter::{Iterator, IteratorExt};\n use option::{Some, None};\n use os;\n use result::{Ok, Err};\n@@ -388,7 +388,7 @@ mod imp {\n \n     #[cfg(not(any(target_os = \"macos\", target_os = \"ios\")))]\n     fn print(w: &mut Writer, idx: int, addr: *mut libc::c_void) -> IoResult<()> {\n-        use iter::Iterator;\n+        use iter::IteratorExt;\n         use os;\n         use path::GenericPath;\n         use ptr::RawPtr;"}, {"sha": "e46765f25b8aa67e311e696ee2fa1c0fbbf30ea2", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -131,7 +131,7 @@ extern \"system\" {\n \n pub mod compat {\n     use intrinsics::{atomic_store_relaxed, transmute};\n-    use iter::Iterator;\n+    use iter::IteratorExt;\n     use libc::types::os::arch::extra::{LPCWSTR, HMODULE, LPCSTR, LPVOID};\n     use prelude::*;\n "}, {"sha": "7d0151a7b6b7630d04957786bf5878d5783a7065", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -124,7 +124,7 @@ impl Process {\n         use libc::funcs::extra::msvcrt::get_osfhandle;\n \n         use mem;\n-        use iter::Iterator;\n+        use iter::{Iterator, IteratorExt};\n         use str::StrPrelude;\n \n         if cfg.gid().is_some() || cfg.uid().is_some() {"}, {"sha": "6b97b931ef7c6a36d24ad15a9f772a7aeee6b9e2", "filename": "src/libsyntax/ast_map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fast_map%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fast_map%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map%2Fmod.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -87,7 +87,7 @@ impl<'a, T: Copy> Iterator<T> for Values<'a, T> {\n /// The type of the iterator used by with_path.\n pub type PathElems<'a, 'b> = iter::Chain<Values<'a, PathElem>, LinkedPath<'b>>;\n \n-pub fn path_to_string<PI: Iterator<PathElem>>(mut path: PI) -> String {\n+pub fn path_to_string<PI: Iterator<PathElem>>(path: PI) -> String {\n     let itr = token::get_ident_interner();\n \n     path.fold(String::new(), |mut s, e| {"}, {"sha": "4f718555d533183bfe8608dc968ab36eb0314289", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -131,7 +131,7 @@ fn fold_item_underscore(cx: &mut Context, item: ast::Item_) -> ast::Item_ {\n             ast::ItemStruct(fold_struct(cx, def), generics)\n         }\n         ast::ItemEnum(def, generics) => {\n-            let mut variants = def.variants.into_iter().filter_map(|v| {\n+            let variants = def.variants.into_iter().filter_map(|v| {\n                 if !(cx.in_cfg)(v.node.attrs.as_slice()) {\n                     None\n                 } else {\n@@ -273,4 +273,3 @@ fn in_cfg(diagnostic: &SpanHandler, cfg: &[P<ast::MetaItem>], attrs: &[ast::Attr\n         attr::cfg_matches(diagnostic, cfg, &*mis[0])\n     })\n }\n-"}, {"sha": "8d0d399fa31531a91693530166f2dabdf517c1df", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -210,7 +210,7 @@ pub struct MacItems {\n }\n \n impl MacItems {\n-    pub fn new<I: Iterator<P<ast::Item>>>(mut it: I) -> Box<MacResult+'static> {\n+    pub fn new<I: Iterator<P<ast::Item>>>(it: I) -> Box<MacResult+'static> {\n         box MacItems { items: it.collect() } as Box<MacResult+'static>\n     }\n }"}, {"sha": "490246f8246f5f539a5fe76078912e3da645d0a6", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -580,7 +580,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         let slicename = self.ecx.ident_of(\"__args_vec\");\n         {\n             let args = names.into_iter().map(|a| a.unwrap());\n-            let mut args = locals.into_iter().chain(args);\n+            let args = locals.into_iter().chain(args);\n             let args = self.ecx.expr_vec_slice(self.fmtsp, args.collect());\n             lets.push(self.ecx.stmt_let(self.fmtsp, false, slicename, args));\n         }"}, {"sha": "b31b20c80c2baeff5968f610495fb93e03fc08bf", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -145,7 +145,7 @@ impl<T: PartialEq> PartialEq for OwnedSlice<T> {\n impl<T: Eq> Eq for OwnedSlice<T> {}\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iter<I: Iterator<T>>(mut iter: I) -> OwnedSlice<T> {\n+    fn from_iter<I: Iterator<T>>(iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())\n     }\n }"}, {"sha": "03a50409d7e520f621b740d517124fbdacc95c82", "filename": "src/libunicode/u_str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibunicode%2Fu_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a44875af985de43d514192d43ef260a24e83d26/src%2Flibunicode%2Fu_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Fu_str.rs?ref=1a44875af985de43d514192d43ef260a24e83d26", "patch": "@@ -20,7 +20,8 @@\n use self::GraphemeState::*;\n use core::cmp;\n use core::slice::SlicePrelude;\n-use core::iter::{Filter, AdditiveIterator, Iterator, DoubleEndedIterator};\n+use core::iter::{Filter, AdditiveIterator, Iterator, IteratorExt};\n+use core::iter::{DoubleEndedIterator, DoubleEndedIteratorExt};\n use core::kinds::Sized;\n use core::option::{Option, None, Some};\n use core::str::{CharSplits, StrPrelude};"}]}