{"sha": "8ca214fbfbd2058140764bf12005a9281a121601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjYTIxNGZiZmJkMjA1ODE0MDc2NGJmMTIwMDVhOTI4MWExMjE2MDE=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-09-13T17:24:04Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-10-03T05:30:25Z"}, "message": "Better inlay hints in 'for' loops", "tree": {"sha": "4da7bda151a3c88013140b1942a22f892cc7bb21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da7bda151a3c88013140b1942a22f892cc7bb21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ca214fbfbd2058140764bf12005a9281a121601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ca214fbfbd2058140764bf12005a9281a121601", "html_url": "https://github.com/rust-lang/rust/commit/8ca214fbfbd2058140764bf12005a9281a121601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ca214fbfbd2058140764bf12005a9281a121601/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03dcf5111ad23700335d25ef02749666bbd08cca", "url": "https://api.github.com/repos/rust-lang/rust/commits/03dcf5111ad23700335d25ef02749666bbd08cca", "html_url": "https://github.com/rust-lang/rust/commit/03dcf5111ad23700335d25ef02749666bbd08cca"}], "stats": {"total": 51, "additions": 49, "deletions": 2}, "files": [{"sha": "60dc74d4178cb9dfcf26f81283671f1a3a11fc4e", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8ca214fbfbd2058140764bf12005a9281a121601/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ca214fbfbd2058140764bf12005a9281a121601/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=8ca214fbfbd2058140764bf12005a9281a121601", "patch": "@@ -189,7 +189,7 @@ fn get_bind_pat_hints(\n \n     let ty = sema.type_of_pat(&pat.clone().into())?;\n \n-    if should_not_display_type_hint(sema.db, &pat, &ty) {\n+    if should_not_display_type_hint(sema, &pat, &ty) {\n         return None;\n     }\n \n@@ -215,10 +215,12 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &Typ\n }\n \n fn should_not_display_type_hint(\n-    db: &RootDatabase,\n+    sema: &Semantics<RootDatabase>,\n     bind_pat: &ast::IdentPat,\n     pat_ty: &Type,\n ) -> bool {\n+    let db = sema.db;\n+\n     if pat_ty.is_unknown() {\n         return true;\n     }\n@@ -249,6 +251,14 @@ fn should_not_display_type_hint(\n                     return it.condition().and_then(|condition| condition.pat()).is_some()\n                         && pat_is_enum_variant(db, bind_pat, pat_ty);\n                 },\n+                ast::ForExpr(it) => {\n+                    // We *should* display hint only if user provided \"in {expr}\" and we know the type of expr (and it's not unit).\n+                    // Type of expr should be iterable.\n+                    let type_is_known = |ty: Option<hir::Type>| ty.map(|ty| !ty.is_unit() && !ty.is_unknown()).unwrap_or(false);\n+                    let should_display = it.in_token().is_some()\n+                        && it.iterable().map(|expr| type_is_known(sema.type_of_expr(&expr))).unwrap_or(false);\n+                    return !should_display;\n+                },\n                 _ => (),\n             }\n         }\n@@ -924,4 +934,41 @@ fn main() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn incomplete_for_no_hint() {\n+        check(\n+            r#\"\n+fn main() {\n+    let data = &[1i32, 2, 3];\n+      //^^^^ &[i32; _]\n+    for i\n+}\"#,\n+        );\n+        check(\n+            r#\"\n+fn main() {\n+    let data = &[1i32, 2, 3];\n+      //^^^^ &[i32; _]\n+    for i in\n+\n+    println!(\"Unit expr\");\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_for_hint() {\n+        check(\n+            r#\"\n+fn main() {\n+    let data = &[ 1, 2, 3 ];\n+      //^^^^ &[i32; _]\n+    for i in data.into_iter() {\n+      //^ &i32\n+      println!(\"{}\", i);\n+    }\n+}\"#,\n+        );\n+    }\n }"}]}