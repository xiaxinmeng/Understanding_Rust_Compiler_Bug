{"sha": "5b2dc520340103491088616ba4f58095948f5821", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMmRjNTIwMzQwMTAzNDkxMDg4NjE2YmE0ZjU4MDk1OTQ4ZjU4MjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T07:17:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T07:17:14Z"}, "message": "std::rt: Turn on multithreaded scheduling", "tree": {"sha": "938fea5a173804ab35ec868b19ba4b0ead8408c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/938fea5a173804ab35ec868b19ba4b0ead8408c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b2dc520340103491088616ba4f58095948f5821", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2dc520340103491088616ba4f58095948f5821", "html_url": "https://github.com/rust-lang/rust/commit/5b2dc520340103491088616ba4f58095948f5821", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b2dc520340103491088616ba4f58095948f5821/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849", "html_url": "https://github.com/rust-lang/rust/commit/b5fbec9c1e519c7e6fa45e2157f6e746ef3f6849"}], "stats": {"total": 92, "additions": 76, "deletions": 16}, "files": [{"sha": "581e3addff0f49abe8264a73972355aef89cb3b3", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 76, "deletions": 16, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/5b2dc520340103491088616ba4f58095948f5821/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b2dc520340103491088616ba4f58095948f5821/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=5b2dc520340103491088616ba4f58095948f5821", "patch": "@@ -60,7 +60,21 @@ Several modules in `core` are clients of `rt`:\n #[deny(unused_variable)];\n \n use cell::Cell;\n+use clone::Clone;\n+use container::Container;\n+use from_str::FromStr;\n+use iterator::IteratorUtil;\n+use option::{Some, None};\n+use os;\n use ptr::RawPtr;\n+use uint;\n+use rt::sched::{Scheduler, Coroutine, Shutdown};\n+use rt::sleeper_list::SleeperList;\n+use rt::task::Task;\n+use rt::thread::Thread;\n+use rt::work_queue::WorkQueue;\n+use rt::uv::uvio::UvEventLoop;\n+use vec::{OwnedVector, MutableVector};\n \n /// The global (exchange) heap.\n pub mod global_heap;\n@@ -159,23 +173,8 @@ pub mod util;\n /// The return value is used as the process return code. 0 on success, 101 on error.\n pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n \n-    use self::sched::{Scheduler, Coroutine};\n-    use self::work_queue::WorkQueue;\n-    use self::uv::uvio::UvEventLoop;\n-    use self::sleeper_list::SleeperList;\n-\n     init(crate_map);\n-\n-    let loop_ = ~UvEventLoop::new();\n-    let work_queue = WorkQueue::new();\n-    let sleepers = SleeperList::new();\n-    let mut sched = ~Scheduler::new(loop_, work_queue, sleepers);\n-    sched.no_sleep = true;\n-    let main_task = ~Coroutine::new_root(&mut sched.stack_pool, main);\n-\n-    sched.enqueue_task(main_task);\n-    sched.run();\n-\n+    run(main);\n     cleanup();\n \n     return 0;\n@@ -191,6 +190,67 @@ pub fn cleanup() {\n     global_heap::cleanup();\n }\n \n+pub fn run(main: ~fn()) {\n+    let nthreads = match os::getenv(\"RUST_THREADS\") {\n+        Some(nstr) => FromStr::from_str(nstr).get(),\n+        None => unsafe {\n+            // Using more threads than cores in test code\n+            // to force the OS to preempt them frequently.\n+            // Assuming that this help stress test concurrent types.\n+            util::num_cpus() * 2\n+        }\n+    };\n+\n+    let sleepers = SleeperList::new();\n+    let work_queue = WorkQueue::new();\n+\n+    let mut handles = ~[];\n+    let mut scheds = ~[];\n+\n+    for uint::range(0, nthreads) |_| {\n+        let loop_ = ~UvEventLoop::new();\n+        let mut sched = ~Scheduler::new(loop_, work_queue.clone(), sleepers.clone());\n+        let handle = sched.make_handle();\n+\n+        handles.push(handle);\n+        scheds.push(sched);\n+    }\n+\n+    let main_cell = Cell::new(main);\n+    let handles = Cell::new(handles);\n+    let mut new_task = ~Task::new_root();\n+    let on_exit: ~fn(bool) = |exit_status| {\n+\n+        let mut handles = handles.take();\n+        // Tell schedulers to exit\n+        for handles.mut_iter().advance |handle| {\n+            handle.send(Shutdown);\n+        }\n+\n+        rtassert!(exit_status);\n+    };\n+    new_task.on_exit = Some(on_exit);\n+    let main_task = ~Coroutine::with_task(&mut scheds[0].stack_pool,\n+                                          new_task, main_cell.take());\n+    scheds[0].enqueue_task(main_task);\n+\n+    let mut threads = ~[];\n+\n+    while !scheds.is_empty() {\n+        let sched = scheds.pop();\n+        let sched_cell = Cell::new(sched);\n+        let thread = do Thread::start {\n+            let sched = sched_cell.take();\n+            sched.run();\n+        };\n+\n+        threads.push(thread);\n+    }\n+\n+    // Wait for schedulers\n+    let _threads = threads;\n+}\n+\n /// Possible contexts in which Rust code may be executing.\n /// Different runtime services are available depending on context.\n /// Mostly used for determining if we're using the new scheduler"}]}