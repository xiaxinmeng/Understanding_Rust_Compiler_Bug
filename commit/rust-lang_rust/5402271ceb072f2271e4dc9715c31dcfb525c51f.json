{"sha": "5402271ceb072f2271e4dc9715c31dcfb525c51f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDIyNzFjZWIwNzJmMjI3MWU0ZGM5NzE1YzMxZGNmYjUyNWM1MWY=", "commit": {"author": {"name": "Ryan Senior", "email": "ryan.senior@puppetlabs.com", "date": "2016-10-16T21:35:22Z"}, "committer": {"name": "Ryan Senior", "email": "ryan.senior@puppetlabs.com", "date": "2016-10-21T12:23:40Z"}, "message": "Add an error explaination for E0182", "tree": {"sha": "469b0bd553e45a56a0ac2cd335ba98b2cd0f7b68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/469b0bd553e45a56a0ac2cd335ba98b2cd0f7b68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5402271ceb072f2271e4dc9715c31dcfb525c51f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5402271ceb072f2271e4dc9715c31dcfb525c51f", "html_url": "https://github.com/rust-lang/rust/commit/5402271ceb072f2271e4dc9715c31dcfb525c51f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5402271ceb072f2271e4dc9715c31dcfb525c51f/comments", "author": null, "committer": null, "parents": [{"sha": "e0111758eb4f215db4ec26f809ef3edf5dfb66f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0111758eb4f215db4ec26f809ef3edf5dfb66f5", "html_url": "https://github.com/rust-lang/rust/commit/e0111758eb4f215db4ec26f809ef3edf5dfb66f5"}], "stats": {"total": 40, "additions": 39, "deletions": 1}, "files": [{"sha": "946e9add2b7b1e20dd808c2df97798313c321d97", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5402271ceb072f2271e4dc9715c31dcfb525c51f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402271ceb072f2271e4dc9715c31dcfb525c51f/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=5402271ceb072f2271e4dc9715c31dcfb525c51f", "patch": "@@ -1915,6 +1915,45 @@ More details can be found in [RFC 438].\n [RFC 438]: https://github.com/rust-lang/rfcs/pull/438\n \"##,\n \n+E0182: r##\"\n+You bound an associated type in an expression path which is not\n+allowed.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0182\n+trait Foo {\n+    type A;\n+    fn bar() -> isize;\n+}\n+\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n+}\n+\n+// error: unexpected binding of associated item in expression path\n+let x: isize = Foo::<A=usize>::bar();\n+```\n+\n+To give a concrete type when using the Universal Function Call Syntax,\n+use \"Type as Trait\". Example:\n+\n+```\n+trait Foo {\n+    type A;\n+    fn bar() -> isize;\n+}\n+\n+impl Foo for isize {\n+    type A = usize;\n+    fn bar() -> isize { 42 }\n+}\n+\n+let x: isize = <isize as Foo>::bar(); // ok!\n+```\n+\"##,\n+\n E0184: r##\"\n Explicitly implementing both Drop and Copy for a type is currently disallowed.\n This feature can make some sense in theory, but the current implementation is\n@@ -4054,7 +4093,6 @@ register_diagnostics! {\n //  E0168,\n //  E0173, // manual implementations of unboxed closure traits are experimental\n //  E0174,\n-    E0182,\n     E0183,\n //  E0187, // can't infer the kind of the closure\n //  E0188, // can not cast an immutable reference to a mutable pointer"}]}