{"sha": "aea974939064b0f7b83de371a93ee4190c80e544", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTk3NDkzOTA2NGIwZjdiODNkZTM3MWE5M2VlNDE5MGM4MGU1NDQ=", "commit": {"author": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-06T19:30:43Z"}, "committer": {"name": "Kevin Mehall", "email": "km@kevinmehall.net", "date": "2021-03-06T19:30:43Z"}, "message": "Move TokenStream::to_string helpers inside the method", "tree": {"sha": "3e70459ed77a91b24bc894c1ce0d1ef16f447a11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e70459ed77a91b24bc894c1ce0d1ef16f447a11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea974939064b0f7b83de371a93ee4190c80e544", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea974939064b0f7b83de371a93ee4190c80e544", "html_url": "https://github.com/rust-lang/rust/commit/aea974939064b0f7b83de371a93ee4190c80e544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea974939064b0f7b83de371a93ee4190c80e544/comments", "author": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevinmehall", "id": 119951, "node_id": "MDQ6VXNlcjExOTk1MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/119951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevinmehall", "html_url": "https://github.com/kevinmehall", "followers_url": "https://api.github.com/users/kevinmehall/followers", "following_url": "https://api.github.com/users/kevinmehall/following{/other_user}", "gists_url": "https://api.github.com/users/kevinmehall/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevinmehall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevinmehall/subscriptions", "organizations_url": "https://api.github.com/users/kevinmehall/orgs", "repos_url": "https://api.github.com/users/kevinmehall/repos", "events_url": "https://api.github.com/users/kevinmehall/events{/privacy}", "received_events_url": "https://api.github.com/users/kevinmehall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93c9b346359a1ca70126242f740e6fc0911c535b", "url": "https://api.github.com/repos/rust-lang/rust/commits/93c9b346359a1ca70126242f740e6fc0911c535b", "html_url": "https://github.com/rust-lang/rust/commit/93c9b346359a1ca70126242f740e6fc0911c535b"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "ceefd187d257f2e0c1f156a57a6082801b161125", "filename": "crates/proc_macro_srv/src/rustc_server.rs", "status": "modified", "additions": 34, "deletions": 30, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/aea974939064b0f7b83de371a93ee4190c80e544/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea974939064b0f7b83de371a93ee4190c80e544/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Frustc_server.rs?ref=aea974939064b0f7b83de371a93ee4190c80e544", "patch": "@@ -199,39 +199,43 @@ pub mod token_stream {\n \n     impl ToString for TokenStream {\n         fn to_string(&self) -> String {\n-            tokentrees_to_text(&self.token_trees[..])\n-        }\n-    }\n+            return tokentrees_to_text(&self.token_trees[..]);\n+\n+            fn tokentrees_to_text(tkns: &[tt::TokenTree]) -> String {\n+                tkns.iter()\n+                    .fold((String::new(), true), |(last, last_to_joint), tkn| {\n+                        let s = [last, tokentree_to_text(tkn)].join(if last_to_joint {\n+                            \"\"\n+                        } else {\n+                            \" \"\n+                        });\n+                        let mut is_joint = false;\n+                        if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n+                            if punct.spacing == tt::Spacing::Joint {\n+                                is_joint = true;\n+                            }\n+                        }\n+                        (s, is_joint)\n+                    })\n+                    .0\n+            }\n \n-    fn tokentrees_to_text(tkns: &[tt::TokenTree]) -> String {\n-        tkns.iter()\n-            .fold((String::new(), true), |(last, last_to_joint), tkn| {\n-                let s = [last, tokentree_to_text(tkn)].join(if last_to_joint { \"\" } else { \" \" });\n-                let mut is_joint = false;\n-                if let tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) = tkn {\n-                    if punct.spacing == tt::Spacing::Joint {\n-                        is_joint = true;\n+            fn tokentree_to_text(tkn: &tt::TokenTree) -> String {\n+                match tkn {\n+                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident.text.clone().into(),\n+                    tt::TokenTree::Leaf(tt::Leaf::Literal(literal)) => literal.text.clone().into(),\n+                    tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n+                    tt::TokenTree::Subtree(subtree) => {\n+                        let content = tokentrees_to_text(&subtree.token_trees);\n+                        let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n+                            None => (\"\", \"\"),\n+                            Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n+                            Some(tt::DelimiterKind::Parenthesis) => (\"(\", \")\"),\n+                            Some(tt::DelimiterKind::Bracket) => (\"[\", \"]\"),\n+                        };\n+                        format!(\"{}{}{}\", open, content, close)\n                     }\n                 }\n-                (s, is_joint)\n-            })\n-            .0\n-    }\n-\n-    fn tokentree_to_text(tkn: &tt::TokenTree) -> String {\n-        match tkn {\n-            tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident.text.clone().into(),\n-            tt::TokenTree::Leaf(tt::Leaf::Literal(literal)) => literal.text.clone().into(),\n-            tt::TokenTree::Leaf(tt::Leaf::Punct(punct)) => format!(\"{}\", punct.char),\n-            tt::TokenTree::Subtree(subtree) => {\n-                let content = tokentrees_to_text(&subtree.token_trees);\n-                let (open, close) = match subtree.delimiter.map(|it| it.kind) {\n-                    None => (\"\", \"\"),\n-                    Some(tt::DelimiterKind::Brace) => (\"{\", \"}\"),\n-                    Some(tt::DelimiterKind::Parenthesis) => (\"(\", \")\"),\n-                    Some(tt::DelimiterKind::Bracket) => (\"[\", \"]\"),\n-                };\n-                format!(\"{}{}{}\", open, content, close)\n             }\n         }\n     }"}]}