{"sha": "42ce11eb5a2505e556137e1fa90324722aec5256", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyY2UxMWViNWEyNTA1ZTU1NjEzN2UxZmE5MDMyNDcyMmFlYzUyNTY=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2017-05-10T15:18:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-10T15:18:33Z"}, "message": "Rollup merge of #41854 - gamazeps:thread-spawn-doc, r=steveklabnik\n\n[Doc] Improve `thread::spawn` documentation\n\nPart of #29378\n\n- Add two examples to `thread::spawn` doumentation that show common uses of threads.\n- Add a link to `thread::Builder` in the `thread::spawn` documentation for configuring threads.\n- Add a link to `thread::spawn` in `thread::Builder` in order to avoid documentation duplication.\n\nr? @steveklabnik", "tree": {"sha": "92da3f549c1918da27f7e1cca4e85c8261d78b5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92da3f549c1918da27f7e1cca4e85c8261d78b5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42ce11eb5a2505e556137e1fa90324722aec5256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42ce11eb5a2505e556137e1fa90324722aec5256", "html_url": "https://github.com/rust-lang/rust/commit/42ce11eb5a2505e556137e1fa90324722aec5256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42ce11eb5a2505e556137e1fa90324722aec5256/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec85859d9a6735f5f8c2f7f203fa54b49ba8c946", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec85859d9a6735f5f8c2f7f203fa54b49ba8c946", "html_url": "https://github.com/rust-lang/rust/commit/ec85859d9a6735f5f8c2f7f203fa54b49ba8c946"}, {"sha": "fe7b6db39b6efa064ab795103342ca3d298dc943", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe7b6db39b6efa064ab795103342ca3d298dc943", "html_url": "https://github.com/rust-lang/rust/commit/fe7b6db39b6efa064ab795103342ca3d298dc943"}], "stats": {"total": 62, "additions": 56, "deletions": 6}, "files": [{"sha": "230c60baf8bb49a95b123d4c29b4c4a90caeb660", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 56, "deletions": 6, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/42ce11eb5a2505e556137e1fa90324722aec5256/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42ce11eb5a2505e556137e1fa90324722aec5256/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=42ce11eb5a2505e556137e1fa90324722aec5256", "patch": "@@ -287,6 +287,8 @@ impl Builder {\n     /// thread finishes). The join handle can be used to block on\n     /// termination of the child thread, including recovering its panics.\n     ///\n+    /// For a more complete documentation see [`thread::spawn`][`spawn`].\n+    ///\n     /// # Errors\n     ///\n     /// Unlike the [`spawn`] free function, this method yields an\n@@ -361,19 +363,19 @@ impl Builder {\n /// panics, [`join`] will return an [`Err`] containing the argument given to\n /// [`panic`].\n ///\n+/// This will create a thread using default parameters of [`Builder`], if you\n+/// want to specify the stack size or the name of the thread, use this API\n+/// instead.\n+///\n /// # Panics\n ///\n /// Panics if the OS fails to create a thread; use [`Builder::spawn`]\n /// to recover from such errors.\n ///\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`panic`]: ../../std/macro.panic.html\n-/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-///\n /// # Examples\n ///\n+/// Creating a thread.\n+///\n /// ```\n /// use std::thread;\n ///\n@@ -383,6 +385,54 @@ impl Builder {\n ///\n /// handler.join().unwrap();\n /// ```\n+///\n+/// As mentioned in the module documentation, threads are usually made to\n+/// communicate using [`channels`], here is how it usually looks.\n+///\n+/// This example also shows how to use `move`, in order to give ownership\n+/// of values to a thread.\n+///\n+/// ```\n+/// use std::thread;\n+/// use std::sync::mpsc::channel;\n+///\n+/// let (tx, rx) = channel();\n+///\n+/// let sender = thread::spawn(move || {\n+///     let _ = tx.send(\"Hello, thread\".to_owned());\n+/// });\n+///\n+/// let receiver = thread::spawn(move || {\n+///     println!(\"{}\", rx.recv().unwrap());\n+/// });\n+///\n+/// let _ = sender.join();\n+/// let _ = receiver.join();\n+/// ```\n+///\n+/// A thread can also return a value through its [`JoinHandle`], you can use\n+/// this to make asynchronous computations (futures might be more appropriate\n+/// though).\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let computation = thread::spawn(|| {\n+///     // Some expensive computation.\n+///     42\n+/// });\n+///\n+/// let result = computation.join().unwrap();\n+/// println!(\"{}\", result);\n+/// ```\n+///\n+/// [`channels`]: ../../std/sync/mpsc/index.html\n+/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+/// [`panic`]: ../../std/macro.panic.html\n+/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n+/// [`Builder`]: ../../std/thread/struct.Builder.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static"}]}