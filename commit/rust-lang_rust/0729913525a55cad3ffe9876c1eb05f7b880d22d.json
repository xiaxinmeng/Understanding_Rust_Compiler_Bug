{"sha": "0729913525a55cad3ffe9876c1eb05f7b880d22d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Mjk5MTM1MjVhNTVjYWQzZmZlOTg3NmMxZWIwNWY3Yjg4MGQyMmQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T13:14:28Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-21T13:14:28Z"}, "message": "Various keyword completion fixes", "tree": {"sha": "7ce7b744bb168f245f201a95b19b584479d93eda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ce7b744bb168f245f201a95b19b584479d93eda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0729913525a55cad3ffe9876c1eb05f7b880d22d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0729913525a55cad3ffe9876c1eb05f7b880d22d", "html_url": "https://github.com/rust-lang/rust/commit/0729913525a55cad3ffe9876c1eb05f7b880d22d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0729913525a55cad3ffe9876c1eb05f7b880d22d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9d85f55b7a0a2159971b42bb5dae71efbfeada4", "html_url": "https://github.com/rust-lang/rust/commit/b9d85f55b7a0a2159971b42bb5dae71efbfeada4"}], "stats": {"total": 38, "additions": 22, "deletions": 16}, "files": [{"sha": "407f796efe4282c7c593210d1a3171ccb806e792", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=0729913525a55cad3ffe9876c1eb05f7b880d22d", "patch": "@@ -92,7 +92,7 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n     }\n \n     if !ctx.has_visibility_prev_sibling()\n-        && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_record_field())\n+        && (expects_item || ctx.expects_non_trait_assoc_item() || ctx.expect_field())\n     {\n         add_keyword(\"pub(crate)\", \"pub(crate) \");\n         add_keyword(\"pub\", \"pub \");\n@@ -122,6 +122,10 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(\"union\", \"union $1 {\\n    $0\\n}\");\n     }\n \n+    if ctx.expects_type() {\n+        return;\n+    }\n+\n     if ctx.expects_expression() {\n         if !has_block_expr_parent {\n             add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");"}, {"sha": "4814bd64d76e88552e6001ed41adfd7769a7c976", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=0729913525a55cad3ffe9876c1eb05f7b880d22d", "patch": "@@ -286,8 +286,11 @@ impl<'a> CompletionContext<'a> {\n         )\n     }\n \n-    pub(crate) fn expect_record_field(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::RecordField))\n+    pub(crate) fn expect_field(&self) -> bool {\n+        matches!(\n+            self.completion_location,\n+            Some(ImmediateLocation::RecordField | ImmediateLocation::TupleField)\n+        )\n     }\n \n     pub(crate) fn in_use_tree(&self) -> bool {"}, {"sha": "757c9a3daa394adf5d2405edd543e8f3467ce164", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=0729913525a55cad3ffe9876c1eb05f7b880d22d", "patch": "@@ -31,6 +31,7 @@ pub(crate) enum ImmediateLocation {\n     Impl,\n     Trait,\n     RecordField,\n+    TupleField,\n     RefExpr,\n     IdentPat,\n     BlockExpr,\n@@ -187,7 +188,13 @@ pub(crate) fn determine_location(\n             ast::SourceFile(_it) => ImmediateLocation::ItemList,\n             ast::ItemList(_it) => ImmediateLocation::ItemList,\n             ast::RefExpr(_it) => ImmediateLocation::RefExpr,\n-            ast::RecordField(_it) => ImmediateLocation::RecordField,\n+            ast::RecordField(it) => if it.ty().map_or(false, |it| it.syntax().text_range().contains(offset)) {\n+                return None;\n+            } else {\n+                ImmediateLocation::RecordField\n+            },\n+            ast::TupleField(_it) => ImmediateLocation::TupleField,\n+            ast::TupleFieldList(_it) => ImmediateLocation::TupleField,\n             ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n                 Some(IMPL) => ImmediateLocation::Impl,\n                 Some(TRAIT) => ImmediateLocation::Trait,"}, {"sha": "1ab47b27e8516754576fb4bb2e41db2bbd2fb42e", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0729913525a55cad3ffe9876c1eb05f7b880d22d/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=0729913525a55cad3ffe9876c1eb05f7b880d22d", "patch": "@@ -23,16 +23,13 @@ macro_rules! makro {}\n \n #[test]\n fn record_field_ty() {\n-    // FIXME: pub shouldnt show up here\n     check_with(\n         r#\"\n struct Foo<'lt, T, const C: usize> {\n     f: $0\n }\n \"#,\n         expect![[r#\"\n-            kw pub(crate)\n-            kw pub\n             sp Self\n             tp T\n             tt Trait\n@@ -42,20 +39,21 @@ struct Foo<'lt, T, const C: usize> {\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026)  macro_rules! makro\n+            ma makro!(\u2026) macro_rules! makro\n             bt u32\n         \"#]],\n     )\n }\n \n #[test]\n fn tuple_struct_field() {\n-    // FIXME: pub should show up here\n     check_with(\n         r#\"\n struct Foo<'lt, T, const C: usize>(f$0);\n \"#,\n         expect![[r#\"\n+            kw pub(crate)\n+            kw pub\n             sp Self\n             tp T\n             tt Trait\n@@ -65,21 +63,19 @@ struct Foo<'lt, T, const C: usize>(f$0);\n             md module\n             st Foo<\u2026>\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             bt u32\n         \"#]],\n     )\n }\n \n #[test]\n fn fn_return_type() {\n-    // FIXME: return shouldnt show up here\n     check_with(\n         r#\"\n fn x<'lt, T, const C: usize>() -> $0\n \"#,\n         expect![[r#\"\n-            kw return\n             tp T\n             tt Trait\n             en Enum\n@@ -95,7 +91,6 @@ fn x<'lt, T, const C: usize>() -> $0\n \n #[test]\n fn body_type_pos() {\n-    // FIXME: return shouldnt show up here\n     check_with(\n         r#\"\n fn foo<'lt, T, const C: usize>() {\n@@ -104,7 +99,6 @@ fn foo<'lt, T, const C: usize>() {\n }\n \"#,\n         expect![[r#\"\n-            kw return\n             tp T\n             tt Trait\n             en Enum\n@@ -136,7 +130,6 @@ fn foo<'lt, T, const C: usize>() {\n \n #[test]\n fn completes_types_and_const_in_arg_list() {\n-    // FIXME: return shouldnt show up here\n     // FIXME: we should complete the lifetime here for now\n     check_with(\n         r#\"\n@@ -147,7 +140,6 @@ trait Trait2 {\n fn foo<'lt, T: Trait2<$0>, const CONST_PARAM: usize>(_: T) {}\n \"#,\n         expect![[r#\"\n-            kw return\n             ta Foo =       type Foo;\n             tp T\n             cp CONST_PARAM"}]}