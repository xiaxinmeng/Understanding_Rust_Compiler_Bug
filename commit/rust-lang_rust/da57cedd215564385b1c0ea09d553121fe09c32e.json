{"sha": "da57cedd215564385b1c0ea09d553121fe09c32e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNTdjZWRkMjE1NTY0Mzg1YjFjMGVhMDlkNTUzMTIxZmUwOWMzMmU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T09:49:24Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-23T10:24:19Z"}, "message": "iterate List by value", "tree": {"sha": "b6682e85d0fb60f303f69abcfe369e92791983f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6682e85d0fb60f303f69abcfe369e92791983f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da57cedd215564385b1c0ea09d553121fe09c32e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da57cedd215564385b1c0ea09d553121fe09c32e", "html_url": "https://github.com/rust-lang/rust/commit/da57cedd215564385b1c0ea09d553121fe09c32e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da57cedd215564385b1c0ea09d553121fe09c32e/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647ae50ce69e1714faebc4e2a4d252536a5663d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/647ae50ce69e1714faebc4e2a4d252536a5663d8", "html_url": "https://github.com/rust-lang/rust/commit/647ae50ce69e1714faebc4e2a4d252536a5663d8"}], "stats": {"total": 154, "additions": 82, "deletions": 72}, "files": [{"sha": "57a3d8b5edcafc0b30f47061ef1a5a69d0361794", "filename": "src/librustc_codegen_ssa/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fdebuginfo%2Ftype_names.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -48,7 +48,7 @@ pub fn push_debuginfo_type_name<'tcx>(\n         }\n         ty::Tuple(component_types) => {\n             output.push('(');\n-            for &component_type in component_types {\n+            for component_type in component_types {\n                 push_debuginfo_type_name(tcx, component_type.expect_ty(), true, output, visited);\n                 output.push_str(\", \");\n             }"}, {"sha": "7310d2c3bdcf8318fc1d304069798bd98afa6331", "filename": "src/librustc_infer/infer/canonical/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -87,7 +87,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n     ) -> CanonicalVarValues<'tcx> {\n         let var_values: IndexVec<BoundVar, GenericArg<'tcx>> = variables\n             .iter()\n-            .map(|info| self.instantiate_canonical_var(span, *info, &universe_map))\n+            .map(|info| self.instantiate_canonical_var(span, info, &universe_map))\n             .collect();\n \n         CanonicalVarValues { var_values }"}, {"sha": "ab2393918c35420072b38b59010728123e16b3c2", "filename": "src/librustc_infer/infer/canonical/query_response.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcanonical%2Fquery_response.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -464,12 +464,12 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n                     if info.is_existential() {\n                         match opt_values[BoundVar::new(index)] {\n                             Some(k) => k,\n-                            None => self.instantiate_canonical_var(cause.span, *info, |u| {\n+                            None => self.instantiate_canonical_var(cause.span, info, |u| {\n                                 universe_map[u.as_usize()]\n                             }),\n                         }\n                     } else {\n-                        self.instantiate_canonical_var(cause.span, *info, |u| {\n+                        self.instantiate_canonical_var(cause.span, info, |u| {\n                             universe_map[u.as_usize()]\n                         })\n                     }"}, {"sha": "82d32b008088ddde01bfa257e0d8537aca3b12b8", "filename": "src/librustc_infer/infer/outlives/verify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Foutlives%2Fverify.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -50,7 +50,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n                 // for further background and discussion.\n                 let mut bounds = substs\n                     .iter()\n-                    .filter_map(|&child| match child.unpack() {\n+                    .filter_map(|child| match child.unpack() {\n                         GenericArgKind::Type(ty) => Some(self.type_bound(ty)),\n                         GenericArgKind::Lifetime(_) => None,\n                         GenericArgKind::Const(_) => Some(self.recursive_bound(child)),\n@@ -223,8 +223,7 @@ impl<'cx, 'tcx> VerifyBoundCx<'cx, 'tcx> {\n         // like `T` and `T::Item`. It may not work as well for things\n         // like `<T as Foo<'a>>::Item`.\n         let c_b = self.param_env.caller_bounds;\n-        let param_bounds =\n-            self.collect_outlives_from_predicate_list(&compare_ty, c_b.into_iter().copied());\n+        let param_bounds = self.collect_outlives_from_predicate_list(&compare_ty, c_b.into_iter());\n \n         // Next, collect regions we scraped from the well-formedness\n         // constraints in the fn signature. To do that, we walk the list"}, {"sha": "ebdf738b417ff243d1b046f480b725328d571c5e", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -2077,10 +2077,10 @@ impl Debug for Place<'_> {\n                 ProjectionElem::ConstantIndex { offset, min_length, from_end: true } => {\n                     write!(fmt, \"[-{:?} of {:?}]\", offset, min_length)?;\n                 }\n-                ProjectionElem::Subslice { from, to, from_end: true } if *to == 0 => {\n+                ProjectionElem::Subslice { from, to, from_end: true } if to == 0 => {\n                     write!(fmt, \"[{:?}:]\", from)?;\n                 }\n-                ProjectionElem::Subslice { from, to, from_end: true } if *from == 0 => {\n+                ProjectionElem::Subslice { from, to, from_end: true } if from == 0 => {\n                     write!(fmt, \"[:-{:?}]\", to)?;\n                 }\n                 ProjectionElem::Subslice { from, to, from_end: true } => {"}, {"sha": "edcb69c5e8cbdf3fc3b01cbdf3d0e4883fee1f08", "filename": "src/librustc_middle/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fflags.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -129,7 +129,7 @@ impl FlagComputation {\n             &ty::Dynamic(ref obj, r) => {\n                 let mut computation = FlagComputation::new();\n                 for predicate in obj.skip_binder().iter() {\n-                    match *predicate {\n+                    match predicate {\n                         ty::ExistentialPredicate::Trait(tr) => computation.add_substs(tr.substs),\n                         ty::ExistentialPredicate::Projection(p) => {\n                             let mut proj_computation = FlagComputation::new();"}, {"sha": "161783bb370d44904b4a492ae05d2c55e1636f22", "filename": "src/librustc_middle/ty/list.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flist.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -5,6 +5,7 @@ use rustc_serialize::{Encodable, Encoder};\n use std::cmp::{self, Ordering};\n use std::fmt;\n use std::hash::{Hash, Hasher};\n+use std::iter;\n use std::mem;\n use std::ops::Deref;\n use std::ptr;\n@@ -21,6 +22,10 @@ extern \"C\" {\n /// the same contents can exist in the same context.\n /// This means we can use pointer for both\n /// equality comparisons and hashing.\n+///\n+/// Unlike slices, The types contained in `List` are expected to be `Copy`\n+/// and iterating over a `List` returns `T` instead of a reference.\n+///\n /// Note: `Slice` was already taken by the `Ty`.\n #[repr(C)]\n pub struct List<T> {\n@@ -61,6 +66,15 @@ impl<T: Copy> List<T> {\n             result\n         }\n     }\n+\n+    // If this method didn't exist, we would use `slice.iter` due to\n+    // deref coercion.\n+    //\n+    // This would be weird, as `self.into_iter` iterates over `T` directly.\n+    #[inline(always)]\n+    pub fn iter(&self) -> <&'_ List<T> as IntoIterator>::IntoIter {\n+        self.into_iter()\n+    }\n }\n \n impl<T: fmt::Debug> fmt::Debug for List<T> {\n@@ -128,12 +142,12 @@ impl<T> AsRef<[T]> for List<T> {\n     }\n }\n \n-impl<'a, T> IntoIterator for &'a List<T> {\n-    type Item = &'a T;\n-    type IntoIter = <&'a [T] as IntoIterator>::IntoIter;\n+impl<'a, T: Copy> IntoIterator for &'a List<T> {\n+    type Item = T;\n+    type IntoIter = iter::Copied<<&'a [T] as IntoIterator>::IntoIter>;\n     #[inline(always)]\n     fn into_iter(self) -> Self::IntoIter {\n-        self[..].iter()\n+        self[..].iter().copied()\n     }\n }\n "}, {"sha": "1da042e161737ec6f7ebe730d06aa1bf0172bd76", "filename": "src/librustc_middle/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Foutlives.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -70,7 +70,7 @@ fn compute_components(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, out: &mut SmallVec<[Compo\n                 // consistent with previous (accidental) behavior.\n                 // See https://github.com/rust-lang/rust/issues/70917\n                 // for further background and discussion.\n-                for &child in substs {\n+                for child in substs {\n                     match child.unpack() {\n                         GenericArgKind::Type(ty) => {\n                             compute_components(tcx, ty, out);"}, {"sha": "7d9943ab07902986478494a6a2e58041d901a5e4", "filename": "src/librustc_middle/ty/print/obsolete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fobsolete.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -47,7 +47,7 @@ impl DefPathBasedNames<'tcx> {\n             }\n             ty::Tuple(component_types) => {\n                 output.push('(');\n-                for &component_type in component_types {\n+                for component_type in component_types {\n                     self.push_type_name(component_type.expect_ty(), output, debug);\n                     output.push_str(\", \");\n                 }"}, {"sha": "e5eb6ce3fb41cb7b4872d5eeab15f204647b5e32", "filename": "src/librustc_middle/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fprint%2Fpretty.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -495,7 +495,7 @@ pub trait PrettyPrinter<'tcx>:\n             }\n             ty::Never => p!(write(\"!\")),\n             ty::Tuple(ref tys) => {\n-                p!(write(\"(\"), comma_sep(tys.iter().copied()));\n+                p!(write(\"(\"), comma_sep(tys.iter()));\n                 if tys.len() == 1 {\n                     p!(write(\",\"));\n                 }\n@@ -560,7 +560,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // FIXME(eddyb) print this with `print_def_path`.\n                         if !substs.is_empty() {\n                             p!(write(\"::\"));\n-                            p!(generic_delimiters(|cx| cx.comma_sep(substs.iter().copied())));\n+                            p!(generic_delimiters(|cx| cx.comma_sep(substs.iter())));\n                         }\n                         return Ok(self);\n                     }\n@@ -1935,7 +1935,7 @@ define_print_and_forward_display! {\n     (self, cx):\n \n     &'tcx ty::List<Ty<'tcx>> {\n-        p!(write(\"{{\"), comma_sep(self.iter().copied()), write(\"}}\"))\n+        p!(write(\"{{\"), comma_sep(self.iter()), write(\"}}\"))\n     }\n \n     ty::TypeAndMut<'tcx> {"}, {"sha": "d507fcbc19404ff69002dfc65e22ba50240bbce4", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -143,7 +143,7 @@ pub fn relate_substs<R: TypeRelation<'tcx>>(\n \n     let params = a_subst.iter().zip(b_subst).enumerate().map(|(i, (a, b))| {\n         let variance = variances.map_or(ty::Invariant, |v| v[i]);\n-        relation.relate_with_variance(variance, a, b)\n+        relation.relate_with_variance(variance, &a, &b)\n     });\n \n     Ok(tcx.mk_substs(params)?)\n@@ -319,7 +319,7 @@ impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n     ) -> RelateResult<'tcx, GeneratorWitness<'tcx>> {\n         assert_eq!(a.0.len(), b.0.len());\n         let tcx = relation.tcx();\n-        let types = tcx.mk_type_list(a.0.iter().zip(b.0).map(|(a, b)| relation.relate(a, b)))?;\n+        let types = tcx.mk_type_list(a.0.iter().zip(b.0).map(|(a, b)| relation.relate(&a, &b)))?;\n         Ok(GeneratorWitness(types))\n     }\n }\n@@ -633,7 +633,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n         let tcx = relation.tcx();\n         let v = a.iter().zip(b.iter()).map(|(ep_a, ep_b)| {\n             use crate::ty::ExistentialPredicate::*;\n-            match (*ep_a, *ep_b) {\n+            match (ep_a, ep_b) {\n                 (Trait(ref a), Trait(ref b)) => Ok(Trait(relation.relate(a, b)?)),\n                 (Projection(ref a), Projection(ref b)) => Ok(Projection(relation.relate(a, b)?)),\n                 (AutoTrait(ref a), AutoTrait(ref b)) if a == b => Ok(AutoTrait(*a)),"}, {"sha": "5cf41982ff2149ed235585108d26667a744fa319", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -1093,7 +1093,7 @@ where\n     // Look for the first element that changed\n     if let Some((i, new_t)) = iter.by_ref().enumerate().find_map(|(i, t)| {\n         let new_t = t.fold_with(folder);\n-        if new_t == *t { None } else { Some((i, new_t)) }\n+        if new_t == t { None } else { Some((i, new_t)) }\n     }) {\n         // An element changed, prepare to intern the resulting list\n         let mut new_list = SmallVec::<[_; 8]>::with_capacity(list.len());"}, {"sha": "8b87a63343c1534cd7c0db93e4fbfe911e0ade50", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -670,15 +670,15 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     pub fn projection_bounds<'a>(\n         &'a self,\n     ) -> impl Iterator<Item = ExistentialProjection<'tcx>> + 'a {\n-        self.iter().filter_map(|predicate| match *predicate {\n+        self.iter().filter_map(|predicate| match predicate {\n             ExistentialPredicate::Projection(projection) => Some(projection),\n             _ => None,\n         })\n     }\n \n     #[inline]\n     pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {\n-        self.iter().filter_map(|predicate| match *predicate {\n+        self.iter().filter_map(|predicate| match predicate {\n             ExistentialPredicate::AutoTrait(did) => Some(did),\n             _ => None,\n         })\n@@ -709,7 +709,7 @@ impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n     pub fn iter<'a>(\n         &'a self,\n     ) -> impl DoubleEndedIterator<Item = Binder<ExistentialPredicate<'tcx>>> + 'tcx {\n-        self.skip_binder().iter().cloned().map(Binder::bind)\n+        self.skip_binder().iter().map(Binder::bind)\n     }\n }\n "}, {"sha": "1529f1173b391caea5df017e76d86b1e957eb646", "filename": "src/librustc_middle/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsubst.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -340,11 +340,11 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n         target_substs: SubstsRef<'tcx>,\n     ) -> SubstsRef<'tcx> {\n         let defs = tcx.generics_of(source_ancestor);\n-        tcx.mk_substs(target_substs.iter().chain(&self[defs.params.len()..]).cloned())\n+        tcx.mk_substs(target_substs.iter().chain(self.iter().skip(defs.params.len())))\n     }\n \n     pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {\n-        tcx.mk_substs(self.iter().take(generics.count()).cloned())\n+        tcx.mk_substs(self.iter().take(generics.count()))\n     }\n }\n "}, {"sha": "c2b794ca4bdd9e0ed5e3d6a2ca0a16ed795551f6", "filename": "src/librustc_middle/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Futil.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -413,7 +413,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let result = item_substs\n             .iter()\n             .zip(impl_substs.iter())\n-            .filter(|&(_, &k)| {\n+            .filter(|&(_, k)| {\n                 match k.unpack() {\n                     GenericArgKind::Lifetime(&ty::RegionKind::ReEarlyBound(ref ebr)) => {\n                         !impl_generics.region_param(ebr, self).pure_wrt_drop\n@@ -433,7 +433,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     }\n                 }\n             })\n-            .map(|(&item_param, _)| item_param)\n+            .map(|(item_param, _)| item_param)\n             .collect();\n         debug!(\"destructor_constraint({:?}) = {:?}\", def.did, result);\n         result"}, {"sha": "bf988a430263303e9687dae8e9d2ef91d26c56b2", "filename": "src/librustc_middle/ty/walk.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_middle%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fwalk.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -128,7 +128,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 stack.push(lt.into());\n             }\n             ty::Projection(data) => {\n-                stack.extend(data.substs.iter().copied().rev());\n+                stack.extend(data.substs.iter().rev());\n             }\n             ty::Dynamic(obj, lt) => {\n                 stack.push(lt.into());\n@@ -143,7 +143,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                         }\n                     };\n \n-                    substs.iter().copied().rev().chain(opt_ty.map(|ty| ty.into()))\n+                    substs.iter().rev().chain(opt_ty.map(|ty| ty.into()))\n                 }));\n             }\n             ty::Adt(_, substs)\n@@ -152,14 +152,14 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n             | ty::Generator(_, substs, _)\n             | ty::Tuple(substs)\n             | ty::FnDef(_, substs) => {\n-                stack.extend(substs.iter().copied().rev());\n+                stack.extend(substs.iter().rev());\n             }\n             ty::GeneratorWitness(ts) => {\n-                stack.extend(ts.skip_binder().iter().cloned().rev().map(|ty| ty.into()));\n+                stack.extend(ts.skip_binder().iter().rev().map(|ty| ty.into()));\n             }\n             ty::FnPtr(sig) => {\n                 stack.push(sig.skip_binder().output().into());\n-                stack.extend(sig.skip_binder().inputs().iter().cloned().rev().map(|ty| ty.into()));\n+                stack.extend(sig.skip_binder().inputs().iter().copied().rev().map(|ty| ty.into()));\n             }\n         },\n         GenericArgKind::Lifetime(_) => {}\n@@ -174,7 +174,7 @@ fn push_inner<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent: GenericArg<'tcx>)\n                 | ty::ConstKind::Error => {}\n \n                 ty::ConstKind::Unevaluated(_, substs, _) => {\n-                    stack.extend(substs.iter().copied().rev());\n+                    stack.extend(substs.iter().rev());\n                 }\n             }\n         }"}, {"sha": "cadf1ebf1b774c30ef68ae59fbb8e4fd54a3a10b", "filename": "src/librustc_mir/borrow_check/place_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplace_ext.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -47,7 +47,7 @@ impl<'tcx> PlaceExt<'tcx> for Place<'tcx> {\n         for (i, elem) in self.projection.iter().enumerate() {\n             let proj_base = &self.projection[..i];\n \n-            if *elem == ProjectionElem::Deref {\n+            if elem == ProjectionElem::Deref {\n                 let ty = Place::ty_from(self.local, proj_base, body, tcx).ty;\n                 match ty.kind {\n                     ty::Ref(_, _, hir::Mutability::Not) if i == 0 => {"}, {"sha": "809b749f1e71f253669481f49fe8c5dd8b2d696f", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -163,8 +163,8 @@ fn place_components_conflict<'tcx>(\n             body,\n             borrow_local,\n             borrow_proj_base,\n-            borrow_c,\n-            access_c,\n+            &borrow_c,\n+            &access_c,\n             bias,\n         ) {\n             Overlap::Arbitrary => {\n@@ -420,24 +420,24 @@ fn place_projection_conflict<'tcx>(\n             }\n         }\n         (\n-            ProjectionElem::ConstantIndex {\n+            &ProjectionElem::ConstantIndex {\n                 offset: offset_from_begin,\n                 min_length: min_length1,\n                 from_end: false,\n             },\n-            ProjectionElem::ConstantIndex {\n+            &ProjectionElem::ConstantIndex {\n                 offset: offset_from_end,\n                 min_length: min_length2,\n                 from_end: true,\n             },\n         )\n         | (\n-            ProjectionElem::ConstantIndex {\n+            &ProjectionElem::ConstantIndex {\n                 offset: offset_from_end,\n                 min_length: min_length1,\n                 from_end: true,\n             },\n-            ProjectionElem::ConstantIndex {\n+            &ProjectionElem::ConstantIndex {\n                 offset: offset_from_begin,\n                 min_length: min_length2,\n                 from_end: false,\n@@ -449,7 +449,7 @@ fn place_projection_conflict<'tcx>(\n             // element (like -1 in Python) and `min_length` the first.\n             // Therefore, `min_length - offset_from_end` gives the minimal possible\n             // offset from the beginning\n-            if *offset_from_begin >= *min_length - *offset_from_end {\n+            if offset_from_begin >= min_length - offset_from_end {\n                 debug!(\"place_element_conflict: DISJOINT-OR-EQ-ARRAY-CONSTANT-INDEX-FE\");\n                 Overlap::EqualOrDisjoint\n             } else {"}, {"sha": "1a64dcbf439d9eb75612af17893e5fa0675c8227", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                     return PlaceTy::from_ty(self.tcx().types.err);\n                 }\n             }\n-            place_ty = self.sanitize_projection(place_ty, elem, place, location)\n+            place_ty = self.sanitize_projection(place_ty, &elem, place, location)\n         }\n \n         if let PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy) = context {"}, {"sha": "b89884a4492f8a887fd2456596a367698cdad4c0", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -158,7 +158,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             };\n \n             if union_path.is_none() {\n-                base = self.add_move_path(base, elem, |tcx| Place {\n+                base = self.add_move_path(base, &elem, |tcx| Place {\n                     local: place.local,\n                     projection: tcx.intern_place_elems(&place.projection[..i + 1]),\n                 });"}, {"sha": "8edfbbb3c22cb989b7a6120c07f71199277d1209", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -466,7 +466,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let op = place\n             .projection\n             .iter()\n-            .try_fold(base_op, |op, elem| self.operand_projection(op, elem))?;\n+            .try_fold(base_op, |op, elem| self.operand_projection(op, &elem))?;\n \n         trace!(\"eval_place_to_op: got {:?}\", *op);\n         Ok(op)"}, {"sha": "4943e148731eda380bcd555822bb9b9cd9604a51", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -634,7 +634,7 @@ where\n         };\n \n         for elem in place.projection.iter() {\n-            place_ty = self.place_projection(place_ty, elem)?\n+            place_ty = self.place_projection(place_ty, &elem)?\n         }\n \n         self.dump_place(place_ty.place);"}, {"sha": "c75e8414e8ccaf38a7f205fcb11e3c7599d2ce66", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -449,7 +449,7 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     let type_length = instance\n         .substs\n         .iter()\n-        .flat_map(|&arg| arg.walk())\n+        .flat_map(|arg| arg.walk())\n         .filter(|arg| match arg.unpack() {\n             GenericArgKind::Type(_) | GenericArgKind::Const(_) => true,\n             GenericArgKind::Lifetime(_) => false,"}, {"sha": "846ae55dffeffd60a3ed55fe54c79a82587ea264", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -132,7 +132,7 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, SELF_ARG);\n+                    assert_ne!(local, SELF_ARG);\n                 }\n             }\n         }\n@@ -171,7 +171,7 @@ impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n \n             for elem in place.projection.iter() {\n                 if let PlaceElem::Index(local) = elem {\n-                    assert_ne!(*local, SELF_ARG);\n+                    assert_ne!(local, SELF_ARG);\n                 }\n             }\n         }"}, {"sha": "147c09d8f3af66a587706c57647303049a1016d3", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -1042,7 +1042,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 matched_candidates.iter().flat_map(|candidate| &candidate.bindings)\n             {\n                 if let Some(i) =\n-                    source.projection.iter().rposition(|elem| *elem == ProjectionElem::Deref)\n+                    source.projection.iter().rposition(|elem| elem == ProjectionElem::Deref)\n                 {\n                     let proj_base = &source.projection[..i];\n "}, {"sha": "cb896810951baee40f1bf3d8fdbaf19aa4af1ddd", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -176,7 +176,7 @@ where\n                 // All traits in the list are considered the \"primary\" part of the type\n                 // and are visited by shallow visitors.\n                 for predicate in *predicates.skip_binder() {\n-                    let trait_ref = match *predicate {\n+                    let trait_ref = match predicate {\n                         ty::ExistentialPredicate::Trait(trait_ref) => trait_ref,\n                         ty::ExistentialPredicate::Projection(proj) => proj.trait_ref(tcx),\n                         ty::ExistentialPredicate::AutoTrait(def_id) => {"}, {"sha": "1a536b6a4294feb96f7d28cb2ab9c9bca01e567e", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -477,7 +477,7 @@ impl Printer<'tcx> for SymbolMangler<'tcx> {\n         predicates: &'tcx ty::List<ty::ExistentialPredicate<'tcx>>,\n     ) -> Result<Self::DynExistential, Self::Error> {\n         for predicate in predicates {\n-            match *predicate {\n+            match predicate {\n                 ty::ExistentialPredicate::Trait(trait_ref) => {\n                     // Use a type that can't appear in defaults of type parameters.\n                     let dummy_self = self.tcx.mk_ty_infer(ty::FreshTy(0));"}, {"sha": "767640bcd3c302414de2ab7bc4402e70c75ce969", "filename": "src/librustc_trait_selection/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Fopaque_types.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -647,7 +647,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         // shifting.\n         let id_substs = InternalSubsts::identity_for_item(self.tcx, def_id);\n         let map: FxHashMap<GenericArg<'tcx>, GenericArg<'tcx>> =\n-            substs.iter().enumerate().map(|(index, subst)| (*subst, id_substs[index])).collect();\n+            substs.iter().enumerate().map(|(index, subst)| (subst, id_substs[index])).collect();\n \n         // Convert the type from the function into a type valid outside\n         // the function, by replacing invalid regions with 'static,\n@@ -891,7 +891,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n                 // during codegen.\n \n                 let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n+                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n                     if index < generics.parent_count {\n                         // Accommodate missing regions in the parent kinds...\n                         self.fold_kind_mapping_missing_regions_to_empty(kind)\n@@ -906,7 +906,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n             ty::Generator(def_id, substs, movability) => {\n                 let generics = self.tcx.generics_of(def_id);\n-                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n+                let substs = self.tcx.mk_substs(substs.iter().enumerate().map(|(index, kind)| {\n                     if index < generics.parent_count {\n                         // Accommodate missing regions in the parent kinds...\n                         self.fold_kind_mapping_missing_regions_to_empty(kind)"}, {"sha": "433e1e46f6bba24d74fc1f6b201e8c5ff43b2fc0", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -281,9 +281,8 @@ impl AutoTraitFinder<'tcx> {\n             },\n         }));\n \n-        let computed_preds = param_env.caller_bounds.iter().cloned();\n-        let mut user_computed_preds: FxHashSet<_> =\n-            user_env.caller_bounds.iter().cloned().collect();\n+        let computed_preds = param_env.caller_bounds.iter();\n+        let mut user_computed_preds: FxHashSet<_> = user_env.caller_bounds.iter().collect();\n \n         let mut new_env = param_env;\n         let dummy_cause = ObligationCause::dummy();"}, {"sha": "2d4d582c939b6e925a64c4399a97a3809e8b879f", "filename": "src/librustc_trait_selection/traits/chalk_fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fchalk_fulfill.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -87,7 +87,7 @@ fn environment<'tcx>(\n         NodeKind::TraitImpl => {\n             let trait_ref = tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n \n-            inputs.extend(trait_ref.substs.iter().flat_map(|&arg| arg.walk()));\n+            inputs.extend(trait_ref.substs.iter().flat_map(|arg| arg.walk()));\n         }\n \n         // In an inherent impl, we assume that the receiver type and all its"}, {"sha": "a5b9fd8f8d8e1812bb005f343839df15936f2aa7", "filename": "src/librustc_trait_selection/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -302,7 +302,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     );\n \n     let mut predicates: Vec<_> =\n-        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.into_iter().cloned())\n+        util::elaborate_predicates(tcx, unnormalized_env.caller_bounds.into_iter())\n             .map(|obligation| obligation.predicate)\n             .collect();\n "}, {"sha": "5befc797a517a39573862a48ac70447a307931d6", "filename": "src/librustc_trait_selection/traits/object_safety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fobject_safety.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -658,7 +658,6 @@ fn receiver_is_dispatchable<'tcx>(\n         let caller_bounds: Vec<Predicate<'tcx>> = param_env\n             .caller_bounds\n             .iter()\n-            .cloned()\n             .chain(iter::once(unsize_predicate))\n             .chain(iter::once(trait_predicate))\n             .collect();"}, {"sha": "cd5d0be003aaf784bf3f832038f4873a53f556b8", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -872,7 +872,7 @@ fn assemble_candidates_from_param_env<'cx, 'tcx>(\n         obligation_trait_ref,\n         candidate_set,\n         ProjectionTyCandidate::ParamEnv,\n-        obligation.param_env.caller_bounds.iter().cloned(),\n+        obligation.param_env.caller_bounds.iter(),\n     );\n }\n "}, {"sha": "82a3873f406a8e7ce9a6e9688db21d12a04c2d9b", "filename": "src/librustc_trait_selection/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fselect.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -3154,7 +3154,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n                 // Check that the source struct with the target's\n                 // unsizing parameters is equal to the target.\n-                let substs = tcx.mk_substs(substs_a.iter().enumerate().map(|(i, &k)| {\n+                let substs = tcx.mk_substs(substs_a.iter().enumerate().map(|(i, k)| {\n                     if unsizing_params.contains(i as u32) { substs_b[i] } else { k }\n                 }));\n                 let new_struct = tcx.mk_adt(def, substs);"}, {"sha": "1b059fa3dbdf0cd14b9843f38401b23973bd9fc8", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -11,7 +11,7 @@ type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n     let adt_fields =\n-        move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter().copied());\n+        move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n     // needs drop."}, {"sha": "0c8613d82db7617fc626a7f165036241d9cd15d1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -2769,7 +2769,7 @@ impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n         ty::GenericPredicates {\n             parent: None,\n             predicates: tcx.arena.alloc_from_iter(self.param_env.caller_bounds.iter().filter_map(\n-                |&predicate| match predicate.kind() {\n+                |predicate| match predicate.kind() {\n                     ty::PredicateKind::Trait(ref data, _)\n                         if data.skip_binder().self_ty().is_param(index) =>\n                     {"}, {"sha": "e154184f1822ce8747ca2d475d60e442a359d66d", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -900,7 +900,7 @@ fn check_opaque_types<'fcx, 'tcx>(\n                     if may_define_opaque_type(tcx, fn_def_id, opaque_hir_id) {\n                         trace!(\"check_opaque_types: may define, generics={:#?}\", generics);\n                         let mut seen_params: FxHashMap<_, Vec<_>> = FxHashMap::default();\n-                        for (i, &arg) in substs.iter().enumerate() {\n+                        for (i, arg) in substs.iter().enumerate() {\n                             let arg_is_param = match arg.unpack() {\n                                 GenericArgKind::Type(ty) => matches!(ty.kind, ty::Param(_)),\n "}, {"sha": "ded27605d1586628b57d283a0201e8d0497653b5", "filename": "src/librustc_typeck/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check%2Fmin_specialization.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -229,7 +229,7 @@ fn unconstrained_parent_impl_substs<'tcx>(\n         .iter()\n         .enumerate()\n         .filter(|&(idx, _)| !constrained_params.contains(&(idx as u32)))\n-        .map(|(_, arg)| *arg)\n+        .map(|(_, arg)| arg)\n         .collect()\n }\n "}, {"sha": "e42cf3ef32a2805744ec193b48017af2fc650c76", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::Tuple(subtys) => {\n-                for &subty in subtys {\n+                for subty in subtys {\n                     self.add_constraints_from_ty(current, subty.expect_ty(), variance);\n                 }\n             }"}, {"sha": "1621c7f947c3314d96ffa3f0187985810acb633f", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da57cedd215564385b1c0ea09d553121fe09c32e/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=da57cedd215564385b1c0ea09d553121fe09c32e", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n \n-        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.iter().copied())\n+        let preds = traits::elaborate_predicates(cx.tcx, cx.param_env.caller_bounds.iter())\n             .filter(|p| !p.is_global())\n             .filter_map(|obligation| {\n                 if let ty::PredicateKind::Trait(poly_trait_ref, _) = obligation.predicate.kind() {\n@@ -179,7 +179,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                                 .substs\n                                 .iter()\n                                 .skip(1)\n-                                .cloned()\n                                 .collect::<Vec<_>>();\n                             implements_trait(cx, ty_empty_region, t.def_id(), ty_params)\n                         })"}]}