{"sha": "4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562", "node_id": "C_kwDOAAsO6NoAKDRlNWRkZjFhZGYwOWM1ZDFjNDI1YjFhZmVlZjhmMWFjMTlmMDU1NjI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-30T21:57:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-10-03T00:42:29Z"}, "message": "Invert `is_top_level` to avoid negation.", "tree": {"sha": "ff6a63134d61e81ec1e49ed8782921043e2d02de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff6a63134d61e81ec1e49ed8782921043e2d02de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562", "html_url": "https://github.com/rust-lang/rust/commit/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a822d08bd1145f14838b5483582b574c8c12df52", "url": "https://api.github.com/repos/rust-lang/rust/commits/a822d08bd1145f14838b5483582b574c8c12df52", "html_url": "https://github.com/rust-lang/rust/commit/a822d08bd1145f14838b5483582b574c8c12df52"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "b2701817d489ba89c22e8c5692b0e906229bcc36", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=4e5ddf1adf09c5d1c425b1afeef8f1ac19f05562", "patch": "@@ -40,26 +40,26 @@ impl<'a> TokenTreesReader<'a> {\n             last_delim_empty_block_spans: FxHashMap::default(),\n             matching_block_spans: Vec::new(),\n         };\n-        let res = tt_reader.parse_token_trees(/* is_top_level */ true);\n+        let res = tt_reader.parse_token_trees(/* is_delimited */ false);\n         (res, tt_reader.unmatched_braces)\n     }\n \n     // Parse a stream of tokens into a list of `TokenTree`s.\n-    fn parse_token_trees(&mut self, is_top_level: bool) -> PResult<'a, TokenStream> {\n+    fn parse_token_trees(&mut self, is_delimited: bool) -> PResult<'a, TokenStream> {\n         self.token = self.string_reader.next_token().0;\n         let mut buf = Vec::new();\n         loop {\n             match self.token.kind {\n                 token::OpenDelim(delim) => buf.push(self.parse_token_tree_open_delim(delim)),\n                 token::CloseDelim(delim) => {\n-                    return if !is_top_level {\n+                    return if is_delimited {\n                         Ok(TokenStream::new(buf))\n                     } else {\n                         Err(self.close_delim_err(delim))\n                     };\n                 }\n                 token::Eof => {\n-                    if !is_top_level {\n+                    if is_delimited {\n                         self.eof_err().emit();\n                     }\n                     return Ok(TokenStream::new(buf));\n@@ -133,7 +133,7 @@ impl<'a> TokenTreesReader<'a> {\n         // Parse the token trees within the delimiters.\n         // We stop at any delimiter so we can try to recover if the user\n         // uses an incorrect delimiter.\n-        let tts = self.parse_token_trees(/* is_top_level */ false).unwrap();\n+        let tts = self.parse_token_trees(/* is_delimited */ true).unwrap();\n \n         // Expand to cover the entire delimited token tree\n         let delim_span = DelimSpan::from_pair(pre_span, self.token.span);"}]}