{"sha": "06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "node_id": "C_kwDOAAsO6NoAKDA2YWYyNWU0ZjE4ODk0NmQ5YWJhMWM1ZjUyZWY3ZWVjOGZiMjlhNDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-09T16:15:35Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-10T18:16:35Z"}, "message": "Bless tests.", "tree": {"sha": "c736ffe039d451ce50508ef58228f2544965ae27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c736ffe039d451ce50508ef58228f2544965ae27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "html_url": "https://github.com/rust-lang/rust/commit/06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "871993f7a19794a01cd229a4a9810c1a0fc574f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/871993f7a19794a01cd229a4a9810c1a0fc574f7", "html_url": "https://github.com/rust-lang/rust/commit/871993f7a19794a01cd229a4a9810c1a0fc574f7"}], "stats": {"total": 281, "additions": 189, "deletions": 92}, "files": [{"sha": "0e788a16eb0411fffe661c2069146868aa732f0a", "filename": "src/test/ui/closures/issue-87461.stderr", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fissue-87461.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -5,6 +5,12 @@ LL |     Ok(())\n    |     -- ^^ expected `u16`, found `()`\n    |     |\n    |     arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:17:8\n@@ -13,6 +19,12 @@ LL |     Ok(())\n    |     -- ^^ expected `u16`, found `()`\n    |     |\n    |     arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error[E0308]: mismatched types\n   --> $DIR/issue-87461.rs:26:12\n@@ -21,6 +33,12 @@ LL |         Ok(())\n    |         -- ^^ expected `u16`, found `()`\n    |         |\n    |         arguments to this enum variant are incorrect\n+   |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "d5eefd35753656684210249213720a35f6021370", "filename": "src/test/ui/const-generics/const-argument-cross-crate-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-cross-crate-mismatch.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -5,6 +5,12 @@ LL |     let _ = const_generic_lib::function(const_generic_lib::Struct([0u8, 1u8\n    |                                         ------------------------- ^^^^^^^^^^ expected an array with a fixed size of 3 elements, found one with 2 elements\n    |                                         |\n    |                                         arguments to this struct are incorrect\n+   |\n+note: tuple struct defined here\n+  --> $DIR/auxiliary/const_generic_lib.rs:1:12\n+   |\n+LL | pub struct Struct<const N: usize>(pub [u8; N]);\n+   |            ^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/const-argument-cross-crate-mismatch.rs:8:65\n@@ -13,6 +19,12 @@ LL |     let _: const_generic_lib::Alias = const_generic_lib::Struct([0u8, 1u8,\n    |                                       ------------------------- ^^^^^^^^^^^^^^^ expected an array with a fixed size of 2 elements, found one with 3 elements\n    |                                       |\n    |                                       arguments to this struct are incorrect\n+   |\n+note: tuple struct defined here\n+  --> $DIR/auxiliary/const_generic_lib.rs:1:12\n+   |\n+LL | pub struct Struct<const N: usize>(pub [u8; N]);\n+   |            ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5ea9bcfc122cb31df5cd24b3c9467a8672d01adb", "filename": "src/test/ui/mismatched_types/issue-35030.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-35030.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -11,6 +11,11 @@ LL |         Some(true)\n    |\n    = note: expected type parameter `bool` (type parameter `bool`)\n                         found type `bool` (`bool`)\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error: aborting due to previous error\n "}, {"sha": "07b678bc8731a299730bcfff836803d2196385f5", "filename": "src/test/ui/pattern/pat-tuple-field-count-cross.stderr", "status": "modified", "additions": 84, "deletions": 92, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpat-tuple-field-count-cross.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -198,20 +198,19 @@ LL | pub struct S(pub u8, pub u8, pub u8);\n error[E0023]: this pattern has 0 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:24:9\n    |\n-LL |           M() => {}\n-   |           ^^^ expected 3 fields, found 0\n+LL |         M() => {}\n+   |         ^^^ expected 3 fields, found 0\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -225,20 +224,19 @@ LL |         M(..) => {}\n error[E0023]: this pattern has 1 field, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:25:11\n    |\n-LL |           M(1) => {}\n-   |             ^ expected 3 fields, found 1\n+LL |         M(1) => {}\n+   |           ^ expected 3 fields, found 1\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -252,20 +250,19 @@ LL |         M(1, ..) => {}\n error[E0023]: this pattern has 2 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:26:11\n    |\n-LL |           M(xyz, abc) => {}\n-   |             ^^^  ^^^ expected 3 fields, found 2\n+LL |         M(xyz, abc) => {}\n+   |           ^^^  ^^^ expected 3 fields, found 2\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -275,20 +272,19 @@ LL |         M(xyz, abc, _) => {}\n error[E0023]: this pattern has 4 fields, but the corresponding tuple struct has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:27:11\n    |\n-LL |           M(1, 2, 3, 4) => {}\n-   |             ^  ^  ^  ^ expected 3 fields, found 4\n+LL |         M(1, 2, 3, 4) => {}\n+   |           ^  ^  ^  ^ expected 3 fields, found 4\n    |\n-  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:1\n+  ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:5:12\n    |\n-LL | / pub struct M(\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------\n-LL | |     pub u8,\n-   | |     ------ tuple struct has 3 fields\n-LL | | );\n-   | |__- tuple struct defined here\n+LL | pub struct M(\n+   |            - tuple struct defined here\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------\n+LL |     pub u8,\n+   |     ------ tuple struct has 3 fields\n \n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 0 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:36:16\n@@ -438,20 +434,19 @@ LL |     S(u8, u8, u8),\n error[E0023]: this pattern has 0 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:52:9\n    |\n-LL |           E2::M() => {}\n-   |           ^^^^^^^ expected 3 fields, found 0\n+LL |         E2::M() => {}\n+   |         ^^^^^^^ expected 3 fields, found 0\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -465,20 +460,19 @@ LL |         E2::M(..) => {}\n error[E0023]: this pattern has 1 field, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:53:15\n    |\n-LL |           E2::M(1) => {}\n-   |                 ^ expected 3 fields, found 1\n+LL |         E2::M(1) => {}\n+   |               ^ expected 3 fields, found 1\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -492,20 +486,19 @@ LL |         E2::M(1, ..) => {}\n error[E0023]: this pattern has 2 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:54:15\n    |\n-LL |           E2::M(xyz, abc) => {}\n-   |                 ^^^  ^^^ expected 3 fields, found 2\n+LL |         E2::M(xyz, abc) => {}\n+   |               ^^^  ^^^ expected 3 fields, found 2\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n    |\n help: use `_` to explicitly ignore each field\n    |\n@@ -515,20 +508,19 @@ LL |         E2::M(xyz, abc, _) => {}\n error[E0023]: this pattern has 4 fields, but the corresponding tuple variant has 3 fields\n   --> $DIR/pat-tuple-field-count-cross.rs:55:15\n    |\n-LL |           E2::M(1, 2, 3, 4) => {}\n-   |                 ^  ^  ^  ^ expected 3 fields, found 4\n+LL |         E2::M(1, 2, 3, 4) => {}\n+   |               ^  ^  ^  ^ expected 3 fields, found 4\n    |\n   ::: $DIR/auxiliary/declarations-for-tuple-field-count-errors.rs:15:5\n    |\n-LL | /     M(\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         --\n-LL | |         u8,\n-   | |         -- tuple variant has 3 fields\n-LL | |     ),\n-   | |_____- tuple variant defined here\n+LL |     M(\n+   |     - tuple variant defined here\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         --\n+LL |         u8,\n+   |         -- tuple variant has 3 fields\n \n error: aborting due to 28 previous errors\n "}, {"sha": "e68260e4a09407da1353a7f4f58d03c7b4e8fd98", "filename": "src/test/ui/span/missing-unit-argument.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmissing-unit-argument.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Result<(), String> = Ok();\n    |                                 ^^-- an argument of type `()` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: provide the argument\n    |\n LL |     let _: Result<(), String> = Ok(());"}, {"sha": "aacbe1d9efb1f53208642dce6b6c17c78a5acb74", "filename": "src/test/ui/suggestions/args-instead-of-tuple-errors.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple-errors.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -8,6 +8,11 @@ LL |     let _: Option<(i32, bool)> = Some(1, 2);\n    |\n    = note: expected tuple `(i32, bool)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _: Option<(i32, bool)> = Some({(i32, bool)});\n@@ -39,6 +44,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Option<(i8,)> = Some();\n    |                            ^^^^-- an argument of type `(i8,)` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<(i8,)> = Some({(i8,)});\n@@ -54,6 +64,11 @@ LL |     let _: Option<(i32,)> = Some(5_usize);\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/args-instead-of-tuple-errors.rs:17:34\n@@ -65,6 +80,11 @@ LL |     let _: Option<(i32,)> = Some((5_usize));\n    |\n    = note: expected tuple `(i32,)`\n                found type `usize`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "f6d158782dad2b02fdd9ec87864c4fd6d58a92ce", "filename": "src/test/ui/suggestions/args-instead-of-tuple.stderr", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fargs-instead-of-tuple.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n LL |     let _: Result<(i32, i8), ()> = Ok(1, 2);\n    |                                    ^^\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: use parentheses to construct a tuple\n    |\n LL |     let _: Result<(i32, i8), ()> = Ok((1, 2));\n@@ -15,6 +20,11 @@ error[E0061]: this enum variant takes 1 argument but 3 arguments were supplied\n LL |     let _: Option<(i32, i8, &'static str)> = Some(1, 2, \"hi\");\n    |                                              ^^^^\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use parentheses to construct a tuple\n    |\n LL |     let _: Option<(i32, i8, &'static str)> = Some((1, 2, \"hi\"));\n@@ -26,6 +36,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _: Option<()> = Some();\n    |                         ^^^^-- an argument of type `()` is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: provide the argument\n    |\n LL |     let _: Option<()> = Some(());\n@@ -41,6 +56,11 @@ LL |     let _: Option<(i32,)> = Some(3);\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));\n@@ -56,6 +76,11 @@ LL |     let _: Option<(i32,)> = Some((3));\n    |\n    = note: expected tuple `(i32,)`\n                found type `{integer}`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: use a trailing comma to create a tuple with one element\n    |\n LL |     let _: Option<(i32,)> = Some((3,));"}, {"sha": "91381e8ef4acf6ebff0d94551cacae652a7a5f6b", "filename": "src/test/ui/typeck/issue-46112.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-46112.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -8,6 +8,11 @@ LL | fn main() { test(Ok(())); }\n    |\n    = note:   expected enum `Option<()>`\n            found unit type `()`\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: try wrapping the expression in `Some`\n    |\n LL | fn main() { test(Ok(Some(()))); }"}, {"sha": "aafb29f25d0bdbbe537d89ea964b6ff2fbb5da9b", "filename": "src/test/ui/typeck/struct-enum-wrong-args.stderr", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/06af25e4f188946d9aba1c5f52ef7eec8fb29a45/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fstruct-enum-wrong-args.stderr?ref=06af25e4f188946d9aba1c5f52ef7eec8fb29a45", "patch": "@@ -4,6 +4,11 @@ error[E0061]: this enum variant takes 1 argument but 2 arguments were supplied\n LL |     let _ = Some(3, 2);\n    |             ^^^^    - argument unexpected\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+   |\n+LL |     Some(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^^^\n help: remove the extra argument\n    |\n LL |     let _ = Some(3);\n@@ -17,6 +22,11 @@ LL |     let _ = Ok(3, 6, 2);\n    |                   |\n    |                   argument unexpected\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: remove the extra arguments\n    |\n LL |     let _ = Ok(3);\n@@ -28,6 +38,11 @@ error[E0061]: this enum variant takes 1 argument but 0 arguments were supplied\n LL |     let _ = Ok();\n    |             ^^-- an argument is missing\n    |\n+note: tuple variant defined here\n+  --> $SRC_DIR/core/src/result.rs:LL:COL\n+   |\n+LL |     Ok(#[stable(feature = \"rust1\", since = \"1.0.0\")] T),\n+   |     ^^\n help: provide the argument\n    |\n LL |     let _ = Ok({_});"}]}