{"sha": "440113ddf68522a3cecac66dc3cd0bdf88718013", "node_id": "C_kwDOAAsO6NoAKDQ0MDExM2RkZjY4NTIyYTNjZWNhYzY2ZGMzY2QwYmRmODg3MTgwMTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-24T06:32:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-24T06:32:41Z"}, "message": "Rollup merge of #108169 - Zoxc:query-key-copy, r=cjgillot\n\nMake query keys `Copy`\n\nThis regressed compiler performance locally, so I'm curious what perf will say about it.\n\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check</td><td align=\"right\">1.7566s</td><td align=\"right\">1.7657s</td><td align=\"right\"> 0.52%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check</td><td align=\"right\">0.2572s</td><td align=\"right\">0.2578s</td><td align=\"right\"> 0.20%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check</td><td align=\"right\">0.9863s</td><td align=\"right\">0.9900s</td><td align=\"right\"> 0.37%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check</td><td align=\"right\">1.6018s</td><td align=\"right\">1.6073s</td><td align=\"right\"> 0.34%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check</td><td align=\"right\">6.2493s</td><td align=\"right\">6.2920s</td><td align=\"right\"> 0.68%</td></tr><tr><td>Total</td><td align=\"right\">10.8512s</td><td align=\"right\">10.9127s</td><td align=\"right\"> 0.57%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">1.0042s</td><td align=\"right\"> 0.42%</td></tr></table>", "tree": {"sha": "c0a29eba6d67427fc8c7a0b118ee3d1a32763ad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0a29eba6d67427fc8c7a0b118ee3d1a32763ad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/440113ddf68522a3cecac66dc3cd0bdf88718013", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+FoJCRBK7hj4Ov3rIwAAyYAIAFP++UkJVG8uT/+2klrFDFJD\nBAiUZE2RINBP4J0QuabcFStn4F7qFgwo+JsqAHgn/fd6LA38kyb4irPxAN8Z03x9\n6CXjsBot6e1TAZSNoH0Yb8jXlIxdFchkd93+5VFpb23qTiOff21mMDHaIvgYti97\nyeuWmx85OfNKCvURCnW0zAGW3uJzXZpOnDI8NxtD9gjdCEd5FIlsWW3brwx+rdc2\n4HOzdFIfegqAQ2lpChE1YZEPTnLDDu754AJoGxxJDkojxSwiW0AVFO0vtOeakvd7\nfzjq/wdpcoRZ/MmqX6QuQvIgfYvOsMPQygxuFm7jTZRwNX00+RskPnjcSss8r6g=\n=Yqdk\n-----END PGP SIGNATURE-----\n", "payload": "tree c0a29eba6d67427fc8c7a0b118ee3d1a32763ad6\nparent 6826a9606738e99c1b5e818061ea622492636baa\nparent 056c5b3b57256e03ac0f439f699937d2ae9b208a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677220361 +0530\ncommitter GitHub <noreply@github.com> 1677220361 +0530\n\nRollup merge of #108169 - Zoxc:query-key-copy, r=cjgillot\n\nMake query keys `Copy`\n\nThis regressed compiler performance locally, so I'm curious what perf will say about it.\n\n<table><tr><td rowspan=\"2\">Benchmark</td><td colspan=\"1\"><b>Before</b></th><td colspan=\"2\"><b>After</b></th></tr><tr><td align=\"right\">Time</td><td align=\"right\">Time</td><td align=\"right\">%</th></tr><tr><td>\ud83d\udfe3 <b>clap</b>:check</td><td align=\"right\">1.7566s</td><td align=\"right\">1.7657s</td><td align=\"right\"> 0.52%</td></tr><tr><td>\ud83d\udfe3 <b>hyper</b>:check</td><td align=\"right\">0.2572s</td><td align=\"right\">0.2578s</td><td align=\"right\"> 0.20%</td></tr><tr><td>\ud83d\udfe3 <b>regex</b>:check</td><td align=\"right\">0.9863s</td><td align=\"right\">0.9900s</td><td align=\"right\"> 0.37%</td></tr><tr><td>\ud83d\udfe3 <b>syn</b>:check</td><td align=\"right\">1.6018s</td><td align=\"right\">1.6073s</td><td align=\"right\"> 0.34%</td></tr><tr><td>\ud83d\udfe3 <b>syntex_syntax</b>:check</td><td align=\"right\">6.2493s</td><td align=\"right\">6.2920s</td><td align=\"right\"> 0.68%</td></tr><tr><td>Total</td><td align=\"right\">10.8512s</td><td align=\"right\">10.9127s</td><td align=\"right\"> 0.57%</td></tr><tr><td>Summary</td><td align=\"right\">1.0000s</td><td align=\"right\">1.0042s</td><td align=\"right\"> 0.42%</td></tr></table>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/440113ddf68522a3cecac66dc3cd0bdf88718013", "html_url": "https://github.com/rust-lang/rust/commit/440113ddf68522a3cecac66dc3cd0bdf88718013", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/440113ddf68522a3cecac66dc3cd0bdf88718013/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6826a9606738e99c1b5e818061ea622492636baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6826a9606738e99c1b5e818061ea622492636baa", "html_url": "https://github.com/rust-lang/rust/commit/6826a9606738e99c1b5e818061ea622492636baa"}, {"sha": "056c5b3b57256e03ac0f439f699937d2ae9b208a", "url": "https://api.github.com/repos/rust-lang/rust/commits/056c5b3b57256e03ac0f439f699937d2ae9b208a", "html_url": "https://github.com/rust-lang/rust/commit/056c5b3b57256e03ac0f439f699937d2ae9b208a"}], "stats": {"total": 35, "additions": 18, "deletions": 17}, "files": [{"sha": "4b3cd16c29f25914d6fea13aa84819feaeb8f7f1", "filename": "compiler/rustc_query_system/src/query/caches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fcaches.rs?ref=440113ddf68522a3cecac66dc3cd0bdf88718013", "patch": "@@ -21,7 +21,7 @@ pub trait QueryStorage {\n }\n \n pub trait QueryCache: QueryStorage + Sized {\n-    type Key: Hash + Eq + Clone + Debug;\n+    type Key: Hash + Eq + Copy + Debug;\n \n     /// Checks if the query is already computed and in the cache.\n     /// It returns the shard index and a lock guard to the shard,\n@@ -61,7 +61,7 @@ impl<K: Eq + Hash, V: Copy + Debug> QueryStorage for DefaultCache<K, V> {\n \n impl<K, V> QueryCache for DefaultCache<K, V>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;\n@@ -179,7 +179,7 @@ impl<K: Eq + Idx, V: Copy + Debug> QueryStorage for VecCache<K, V> {\n \n impl<K, V> QueryCache for VecCache<K, V>\n where\n-    K: Eq + Idx + Clone + Debug,\n+    K: Eq + Idx + Copy + Debug,\n     V: Copy + Debug,\n {\n     type Key = K;"}, {"sha": "d563738734657e3c64171cde5bf1f23608780888", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=440113ddf68522a3cecac66dc3cd0bdf88718013", "patch": "@@ -19,7 +19,9 @@ pub type TryLoadFromDisk<Qcx, Q> =\n pub trait QueryConfig<Qcx: QueryContext> {\n     const NAME: &'static str;\n \n-    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Clone + Debug;\n+    // `Key` and `Value` are `Copy` instead of `Clone` to ensure copying them stays cheap,\n+    // but it isn't necessary.\n+    type Key: DepNodeParams<Qcx::DepContext> + Eq + Hash + Copy + Debug;\n     type Value: Debug + Copy;\n \n     type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;"}, {"sha": "5499165930db0209babbcd3c20ffdc678eaa00b3", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/440113ddf68522a3cecac66dc3cd0bdf88718013/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=440113ddf68522a3cecac66dc3cd0bdf88718013", "patch": "@@ -48,7 +48,7 @@ enum QueryResult<D: DepKind> {\n \n impl<K, D> QueryState<K, D>\n where\n-    K: Eq + Hash + Clone + Debug,\n+    K: Eq + Hash + Copy + Debug,\n     D: DepKind,\n {\n     pub fn all_inactive(&self) -> bool {\n@@ -77,7 +77,7 @@ where\n             for shard in shards.iter() {\n                 for (k, v) in shard.iter() {\n                     if let QueryResult::Started(ref job) = *v {\n-                        let query = make_query(qcx, k.clone());\n+                        let query = make_query(qcx, *k);\n                         jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                     }\n                 }\n@@ -91,7 +91,7 @@ where\n             // really hurt much.)\n             for (k, v) in self.active.try_lock()?.iter() {\n                 if let QueryResult::Started(ref job) = *v {\n-                    let query = make_query(qcx, k.clone());\n+                    let query = make_query(qcx, *k);\n                     jobs.insert(job.id, QueryJobInfo { query, job: job.clone() });\n                 }\n             }\n@@ -111,7 +111,7 @@ impl<K, D: DepKind> Default for QueryState<K, D> {\n /// This will poison the relevant query if dropped.\n struct JobOwner<'tcx, K, D: DepKind>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     state: &'tcx QueryState<K, D>,\n     key: K,\n@@ -163,7 +163,7 @@ where\n \n impl<'tcx, K, D: DepKind> JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n {\n     /// Either gets a `JobOwner` corresponding the query, allowing us to\n     /// start executing the query, or returns with the result of the query.\n@@ -195,7 +195,7 @@ where\n                 let job = qcx.current_query_job();\n                 let job = QueryJob::new(id, span, job);\n \n-                let key = entry.key().clone();\n+                let key = *entry.key();\n                 entry.insert(QueryResult::Started(job));\n \n                 let owner = JobOwner { state, id, key };\n@@ -274,7 +274,7 @@ where\n \n impl<'tcx, K, D> Drop for JobOwner<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     #[inline(never)]\n@@ -291,7 +291,7 @@ where\n                 QueryResult::Started(job) => job,\n                 QueryResult::Poisoned => panic!(),\n             };\n-            shard.insert(self.key.clone(), QueryResult::Poisoned);\n+            shard.insert(self.key, QueryResult::Poisoned);\n             job\n         };\n         // Also signal the completion of the job, so waiters\n@@ -310,7 +310,7 @@ pub(crate) struct CycleError<D: DepKind> {\n /// The result of `try_start`.\n enum TryGetJob<'tcx, K, D>\n where\n-    K: Eq + Hash + Clone,\n+    K: Eq + Hash + Copy,\n     D: DepKind,\n {\n     /// The query is not yet started. Contains a guard to the cache eventually used to start it.\n@@ -358,10 +358,9 @@ where\n     Q: QueryConfig<Qcx>,\n     Qcx: QueryContext,\n {\n-    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key.clone()) {\n+    match JobOwner::<'_, Q::Key, Qcx::DepKind>::try_start(&qcx, state, span, key) {\n         TryGetJob::NotYetStarted(job) => {\n-            let (result, dep_node_index) =\n-                execute_job::<Q, Qcx>(qcx, key.clone(), dep_node, job.id);\n+            let (result, dep_node_index) = execute_job::<Q, Qcx>(qcx, key, dep_node, job.id);\n             if Q::FEEDABLE {\n                 // We should not compute queries that also got a value via feeding.\n                 // This can't happen, as query feeding adds the very dependencies to the fed query\n@@ -551,7 +550,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = dep_graph.with_ignore(|| Q::compute(qcx, key.clone()));\n+    let result = dep_graph.with_ignore(|| Q::compute(qcx, *key));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}]}