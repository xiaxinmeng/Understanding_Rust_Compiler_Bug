{"sha": "1e7b24608631cc1405872631a155fb4e8d52329e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlN2IyNDYwODYzMWNjMTQwNTg3MjYzMWExNTVmYjRlOGQ1MjMyOWU=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-02-14T18:17:50Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:31Z"}, "message": "Add asm! to MIR", "tree": {"sha": "7ec1c3f466d626578c15dc202efd0272fb0fdce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec1c3f466d626578c15dc202efd0272fb0fdce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7b24608631cc1405872631a155fb4e8d52329e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7b24608631cc1405872631a155fb4e8d52329e", "html_url": "https://github.com/rust-lang/rust/commit/1e7b24608631cc1405872631a155fb4e8d52329e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7b24608631cc1405872631a155fb4e8d52329e/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10510b5820a030a6e8fd1018942f4b46633ec418", "url": "https://api.github.com/repos/rust-lang/rust/commits/10510b5820a030a6e8fd1018942f4b46633ec418", "html_url": "https://github.com/rust-lang/rust/commit/10510b5820a030a6e8fd1018942f4b46633ec418"}], "stats": {"total": 566, "additions": 544, "deletions": 22}, "files": [{"sha": "707e831b3e8a76efa9bf1b0f589b4dce88bcd0ab", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 104, "deletions": 8, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -28,6 +28,7 @@ use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n+use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{Index, IndexMut};\n@@ -1178,6 +1179,23 @@ pub enum TerminatorKind<'tcx> {\n         /// of the `remove_noop_landing_pads` and `no_landing_pads` passes.\n         unwind: Option<BasicBlock>,\n     },\n+\n+    /// Block ends with an inline assembly block. This is a terminator since\n+    /// inline assembly is allowed to diverge.\n+    InlineAsm {\n+        /// The template for the inline assembly, with placeholders.\n+        template: &'tcx [InlineAsmTemplatePiece],\n+\n+        /// The operands for the inline assembly, as `Operand`s or `Place`s.\n+        operands: Vec<InlineAsmOperand<'tcx>>,\n+\n+        /// Miscellaneous options for the inline assembly.\n+        options: InlineAsmOptions,\n+\n+        /// Destination block after the inline assembly returns, unless it is\n+        /// diverging (InlineAsmOptions::NORETURN).\n+        destination: Option<BasicBlock>,\n+    },\n }\n \n /// Information about an assertion failure.\n@@ -1192,6 +1210,34 @@ pub enum AssertKind<O> {\n     ResumedAfterPanic(GeneratorKind),\n }\n \n+#[derive(Clone, Debug, PartialEq, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+pub enum InlineAsmOperand<'tcx> {\n+    In {\n+        reg: InlineAsmRegOrRegClass,\n+        value: Operand<'tcx>,\n+    },\n+    Out {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        place: Option<Place<'tcx>>,\n+    },\n+    InOut {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        in_value: Operand<'tcx>,\n+        out_place: Option<Place<'tcx>>,\n+    },\n+    Const {\n+        value: Operand<'tcx>,\n+    },\n+    SymFn {\n+        value: Box<Constant<'tcx>>,\n+    },\n+    SymStatic {\n+        value: Box<Constant<'tcx>>,\n+    },\n+}\n+\n /// Type for MIR `Assert` terminator error messages.\n pub type AssertMessage<'tcx> = AssertKind<Operand<'tcx>>;\n \n@@ -1242,15 +1288,17 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { destination: None, cleanup: None, .. } => None.into_iter().chain(&[]),\n+            | Call { destination: None, cleanup: None, .. }\n+            | InlineAsm { destination: None, .. } => None.into_iter().chain(&[]),\n             Goto { target: ref t }\n             | Call { destination: None, cleanup: Some(ref t), .. }\n             | Call { destination: Some((_, ref t)), cleanup: None, .. }\n             | Yield { resume: ref t, drop: None, .. }\n             | DropAndReplace { target: ref t, unwind: None, .. }\n             | Drop { target: ref t, unwind: None, .. }\n             | Assert { target: ref t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref t, unwind: None } => Some(t).into_iter().chain(&[]),\n+            | FalseUnwind { real_target: ref t, unwind: None }\n+            | InlineAsm { destination: Some(ref t), .. } => Some(t).into_iter().chain(&[]),\n             Call { destination: Some((_, ref t)), cleanup: Some(ref u), .. }\n             | Yield { resume: ref t, drop: Some(ref u), .. }\n             | DropAndReplace { target: ref t, unwind: Some(ref u), .. }\n@@ -1274,17 +1322,17 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | GeneratorDrop\n             | Return\n             | Unreachable\n-            | Call { destination: None, cleanup: None, .. } => None.into_iter().chain(&mut []),\n+            | Call { destination: None, cleanup: None, .. }\n+            | InlineAsm { destination: None, .. } => None.into_iter().chain(&mut []),\n             Goto { target: ref mut t }\n             | Call { destination: None, cleanup: Some(ref mut t), .. }\n             | Call { destination: Some((_, ref mut t)), cleanup: None, .. }\n             | Yield { resume: ref mut t, drop: None, .. }\n             | DropAndReplace { target: ref mut t, unwind: None, .. }\n             | Drop { target: ref mut t, unwind: None, .. }\n             | Assert { target: ref mut t, cleanup: None, .. }\n-            | FalseUnwind { real_target: ref mut t, unwind: None } => {\n-                Some(t).into_iter().chain(&mut [])\n-            }\n+            | FalseUnwind { real_target: ref mut t, unwind: None }\n+            | InlineAsm { destination: Some(ref mut t), .. } => Some(t).into_iter().chain(&mut []),\n             Call { destination: Some((_, ref mut t)), cleanup: Some(ref mut u), .. }\n             | Yield { resume: ref mut t, drop: Some(ref mut u), .. }\n             | DropAndReplace { target: ref mut t, unwind: Some(ref mut u), .. }\n@@ -1310,7 +1358,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdges { .. } => None,\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::InlineAsm { .. } => None,\n             TerminatorKind::Call { cleanup: ref unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref unwind, .. }\n             | TerminatorKind::DropAndReplace { ref unwind, .. }\n@@ -1329,7 +1378,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::FalseEdges { .. } => None,\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::InlineAsm { .. } => None,\n             TerminatorKind::Call { cleanup: ref mut unwind, .. }\n             | TerminatorKind::Assert { cleanup: ref mut unwind, .. }\n             | TerminatorKind::DropAndReplace { ref mut unwind, .. }\n@@ -1544,6 +1594,50 @@ impl<'tcx> TerminatorKind<'tcx> {\n             }\n             FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n             FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),\n+            InlineAsm { template, ref operands, options, destination: _ } => {\n+                write!(fmt, \"asm!(\\\"{}\\\"\", InlineAsmTemplatePiece::to_string(template))?;\n+                for op in operands {\n+                    write!(fmt, \", \")?;\n+                    let print_late = |&late| if late { \"late\" } else { \"\" };\n+                    match op {\n+                        InlineAsmOperand::In { reg, value } => {\n+                            write!(fmt, \"in({}) {:?}\", reg, value)?;\n+                        }\n+                        InlineAsmOperand::Out { reg, late, place: Some(place) } => {\n+                            write!(fmt, \"{}out({}) {:?}\", print_late(late), reg, place)?;\n+                        }\n+                        InlineAsmOperand::Out { reg, late, place: None } => {\n+                            write!(fmt, \"{}out({}) _\", print_late(late), reg)?;\n+                        }\n+                        InlineAsmOperand::InOut {\n+                            reg,\n+                            late,\n+                            in_value,\n+                            out_place: Some(out_place),\n+                        } => {\n+                            write!(\n+                                fmt,\n+                                \"in{}out({}) {:?} => {:?}\",\n+                                print_late(late),\n+                                reg,\n+                                in_value,\n+                                out_place\n+                            )?;\n+                        }\n+                        InlineAsmOperand::InOut { reg, late, in_value, out_place: None } => {\n+                            write!(fmt, \"in{}out({}) {:?} => _\", print_late(late), reg, in_value)?;\n+                        }\n+                        InlineAsmOperand::Const { value } => {\n+                            write!(fmt, \"const {:?}\", value)?;\n+                        }\n+                        InlineAsmOperand::SymFn { value }\n+                        | InlineAsmOperand::SymStatic { value } => {\n+                            write!(fmt, \"sym {:?}\", value)?;\n+                        }\n+                    }\n+                }\n+                write!(fmt, \", options({:?}))\", options)\n+            }\n         }\n     }\n \n@@ -1586,6 +1680,8 @@ impl<'tcx> TerminatorKind<'tcx> {\n             FalseEdges { .. } => vec![\"real\".into(), \"imaginary\".into()],\n             FalseUnwind { unwind: Some(_), .. } => vec![\"real\".into(), \"cleanup\".into()],\n             FalseUnwind { unwind: None, .. } => vec![\"real\".into()],\n+            InlineAsm { destination: Some(_), .. } => vec![\"\".into()],\n+            InlineAsm { destination: None, .. } => vec![],\n         }\n     }\n }"}, {"sha": "bb7001c1207bf51dfd50872053dcca7d047e1568", "filename": "src/librustc_middle/mir/type_foldable.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Ftype_foldable.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -78,6 +78,9 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                 FalseEdges { real_target, imaginary_target }\n             }\n             FalseUnwind { real_target, unwind } => FalseUnwind { real_target, unwind },\n+            InlineAsm { template, ref operands, options, destination } => {\n+                InlineAsm { template, operands: operands.fold_with(folder), options, destination }\n+            }\n         };\n         Terminator { source_info: self.source_info, kind }\n     }\n@@ -120,6 +123,7 @@ impl<'tcx> TypeFoldable<'tcx> for Terminator<'tcx> {\n                     false\n                 }\n             }\n+            InlineAsm { ref operands, .. } => operands.visit_with(visitor),\n             Goto { .. }\n             | Resume\n             | Abort"}, {"sha": "02164244771c9ad92ddef6662d23f0d344d53596", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -531,6 +531,44 @@ macro_rules! make_mir_visitor {\n                         );\n                     }\n \n+                    TerminatorKind::InlineAsm {\n+                        template: _,\n+                        operands,\n+                        options: _,\n+                        destination: _,\n+                    } => {\n+                        for op in operands {\n+                            match op {\n+                                InlineAsmOperand::In { value, .. }\n+                                | InlineAsmOperand::Const { value } => {\n+                                    self.visit_operand(value, source_location);\n+                                }\n+                                InlineAsmOperand::Out { place, .. } => {\n+                                    if let Some(place) = place {\n+                                        self.visit_place(\n+                                            place,\n+                                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                                            source_location,\n+                                        );\n+                                    }\n+                                }\n+                                InlineAsmOperand::InOut { in_value, out_place, .. } => {\n+                                    self.visit_operand(in_value, source_location);\n+                                    if let Some(out_place) = out_place {\n+                                        self.visit_place(\n+                                            out_place,\n+                                            PlaceContext::MutatingUse(MutatingUseContext::Store),\n+                                            source_location,\n+                                        );\n+                                    }\n+                                }\n+                                InlineAsmOperand::SymFn { value }\n+                                | InlineAsmOperand::SymStatic { value } => {\n+                                    self.visit_constant(value, source_location);\n+                                }\n+                            }\n+                        }\n+                    }\n                 }\n             }\n "}, {"sha": "ce0ee5fe53acc101e690901491e4b1d5d8155ac1", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -267,6 +267,9 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n     ::rustc_hir::Unsafety,\n+    ::rustc_target::asm::InlineAsmOptions,\n+    ::rustc_target::asm::InlineAsmRegOrRegClass,\n+    ::rustc_target::asm::InlineAsmTemplatePiece,\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::Local,\n     crate::mir::Promoted,"}, {"sha": "178e3db17cd32cda18259a01b04e12cdafdea475", "filename": "src/librustc_mir/borrow_check/invalidation.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Finvalidation.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -1,8 +1,8 @@\n use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::visit::Visitor;\n-use rustc_middle::mir::TerminatorKind;\n use rustc_middle::mir::{BasicBlock, Body, Location, Place, Rvalue};\n use rustc_middle::mir::{BorrowKind, Mutability, Operand};\n+use rustc_middle::mir::{InlineAsmOperand, TerminatorKind};\n use rustc_middle::mir::{Statement, StatementKind};\n use rustc_middle::ty::TyCtxt;\n \n@@ -183,6 +183,29 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     }\n                 }\n             }\n+            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+                for op in operands {\n+                    match *op {\n+                        InlineAsmOperand::In { reg: _, ref value }\n+                        | InlineAsmOperand::Const { ref value } => {\n+                            self.consume_operand(location, value);\n+                        }\n+                        InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n+                            if let Some(place) = place {\n+                                self.mutate_place(location, place, Shallow(None), JustWrite);\n+                            }\n+                        }\n+                        InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n+                            self.consume_operand(location, in_value);\n+                            if let Some(out_place) = out_place {\n+                                self.mutate_place(location, out_place, Shallow(None), JustWrite);\n+                            }\n+                        }\n+                        InlineAsmOperand::SymFn { value: _ }\n+                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                    }\n+                }\n+            }\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n             | TerminatorKind::Unreachable"}, {"sha": "a0c1d96bb4743fc2a63ce57f32a4fcde8c509a3f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n-use rustc_middle::mir::{Terminator, TerminatorKind};\n+use rustc_middle::mir::{InlineAsmOperand, Terminator, TerminatorKind};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, RegionVid, TyCtxt};\n use rustc_session::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT, UNUSED_MUT};\n@@ -724,6 +724,42 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n                 self.mutate_place(loc, (resume_arg, span), Deep, JustWrite, flow_state);\n             }\n \n+            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+                for op in operands {\n+                    match *op {\n+                        InlineAsmOperand::In { reg: _, ref value }\n+                        | InlineAsmOperand::Const { ref value } => {\n+                            self.consume_operand(loc, (value, span), flow_state);\n+                        }\n+                        InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n+                            if let Some(place) = place {\n+                                self.mutate_place(\n+                                    loc,\n+                                    (place, span),\n+                                    Shallow(None),\n+                                    JustWrite,\n+                                    flow_state,\n+                                );\n+                            }\n+                        }\n+                        InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n+                            self.consume_operand(loc, (in_value, span), flow_state);\n+                            if let Some(out_place) = out_place {\n+                                self.mutate_place(\n+                                    loc,\n+                                    (out_place, span),\n+                                    Shallow(None),\n+                                    JustWrite,\n+                                    flow_state,\n+                                );\n+                            }\n+                        }\n+                        InlineAsmOperand::SymFn { value: _ }\n+                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                    }\n+                }\n+            }\n+\n             TerminatorKind::Goto { target: _ }\n             | TerminatorKind::Abort\n             | TerminatorKind::Unreachable\n@@ -778,7 +814,8 @@ impl<'cx, 'tcx> dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtxt<'cx, 'tc\n             | TerminatorKind::FalseUnwind { real_target: _, unwind: _ }\n             | TerminatorKind::Goto { .. }\n             | TerminatorKind::SwitchInt { .. }\n-            | TerminatorKind::Unreachable => {}\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::InlineAsm { .. } => {}\n         }\n     }\n }"}, {"sha": "d7705b8c6a17548c6b208bac7d570c603f8df20c", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -1548,7 +1548,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Drop { .. }\n             | TerminatorKind::FalseEdges { .. }\n-            | TerminatorKind::FalseUnwind { .. } => {\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::InlineAsm { .. } => {\n                 // no checks needed for these\n             }\n \n@@ -1855,6 +1856,11 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     self.assert_iscleanup(body, block_data, unwind, true);\n                 }\n             }\n+            TerminatorKind::InlineAsm { ref destination, .. } => {\n+                if let &Some(target) = destination {\n+                    self.assert_iscleanup(body, block_data, target, is_cleanup);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "97b14ea771b2fc0fdf4042bd606d489510876a20", "filename": "src/librustc_mir/dataflow/framework/direction.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fframework%2Fdirection.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -482,6 +482,12 @@ impl Direction for Forward {\n                 }\n             }\n \n+            InlineAsm { template: _, operands: _, options: _, destination } => {\n+                if let Some(target) = destination {\n+                    propagate(target, exit_state);\n+                }\n+            }\n+\n             SwitchInt { ref targets, ref values, ref discr, switch_ty: _ } => {\n                 let enum_ = discr\n                     .place()"}, {"sha": "f929b2ddde0bad4b7c9b3d82f2386da7d20bb53b", "filename": "src/librustc_mir/dataflow/impls/borrowed_locals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrowed_locals.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -203,6 +203,7 @@ where\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Goto { .. }\n+            | TerminatorKind::InlineAsm { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n             | TerminatorKind::SwitchInt { .. }"}, {"sha": "dfca270396de923368a79c6c2c57e25c581fbd36", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -317,10 +317,19 @@ impl<'tcx> dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n \n     fn terminator_effect(\n         &self,\n-        _: &mut impl GenKill<Self::Idx>,\n-        _: &mir::Terminator<'tcx>,\n-        _: Location,\n+        trans: &mut impl GenKill<Self::Idx>,\n+        teminator: &mir::Terminator<'tcx>,\n+        _location: Location,\n     ) {\n+        if let mir::TerminatorKind::InlineAsm { operands, .. } = &teminator.kind {\n+            for op in operands {\n+                if let mir::InlineAsmOperand::Out { place: Some(place), .. }\n+                | mir::InlineAsmOperand::InOut { out_place: Some(place), .. } = *op\n+                {\n+                    self.kill_borrows_on_place(trans, place);\n+                }\n+            }\n+        }\n     }\n \n     fn call_return_effect("}, {"sha": "bbc4942030ef796902ca3f31789052de634ea919", "filename": "src/librustc_mir/dataflow/impls/storage_liveness.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fstorage_liveness.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -183,6 +183,23 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             // place to have storage *before* the yield, only after.\n             TerminatorKind::Yield { .. } => {}\n \n+            TerminatorKind::InlineAsm { operands, .. } => {\n+                for op in operands {\n+                    match op {\n+                        InlineAsmOperand::Out { place, .. }\n+                        | InlineAsmOperand::InOut { out_place: place, .. } => {\n+                            if let Some(place) = place {\n+                                trans.gen(place.local);\n+                            }\n+                        }\n+                        InlineAsmOperand::In { .. }\n+                        | InlineAsmOperand::Const { .. }\n+                        | InlineAsmOperand::SymFn { .. }\n+                        | InlineAsmOperand::SymStatic { .. } => {}\n+                    }\n+                }\n+            }\n+\n             // Nothing to do for these. Match exhaustively so this fails to compile when new\n             // variants are added.\n             TerminatorKind::Call { destination: None, .. }\n@@ -228,6 +245,7 @@ impl<'mir, 'tcx> dataflow::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir,\n             | TerminatorKind::FalseUnwind { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::Goto { .. }\n+            | TerminatorKind::InlineAsm { .. }\n             | TerminatorKind::Resume\n             | TerminatorKind::Return\n             | TerminatorKind::SwitchInt { .. }"}, {"sha": "0f2760b3f3b4ed4dac6e3edebf78fa9ef221555a", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -411,6 +411,31 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n                     self.gather_init(destination.as_ref(), InitKind::NonPanicPathOnly);\n                 }\n             }\n+            TerminatorKind::InlineAsm { template: _, ref operands, options: _, destination: _ } => {\n+                for op in operands {\n+                    match *op {\n+                        InlineAsmOperand::In { reg: _, ref value }\n+                        | InlineAsmOperand::Const { ref value } => {\n+                            self.gather_operand(value);\n+                        }\n+                        InlineAsmOperand::Out { reg: _, late: _, place, .. } => {\n+                            if let Some(place) = place {\n+                                self.create_move_path(place);\n+                                self.gather_init(place.as_ref(), InitKind::Deep);\n+                            }\n+                        }\n+                        InlineAsmOperand::InOut { reg: _, late: _, ref in_value, out_place } => {\n+                            self.gather_operand(in_value);\n+                            if let Some(out_place) = out_place {\n+                                self.create_move_path(out_place);\n+                                self.gather_init(out_place.as_ref(), InitKind::Deep);\n+                            }\n+                        }\n+                        InlineAsmOperand::SymFn { value: _ }\n+                        | InlineAsmOperand::SymStatic { value: _ } => {}\n+                    }\n+                }\n+            }\n         }\n     }\n "}, {"sha": "b048240ca8dc12ef881b8652a69aef22045979f0", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -131,6 +131,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 \"{:#?} should have been eliminated by MIR pass\",\n                 terminator.kind\n             ),\n+\n+            // Inline assembly can't be interpreted.\n+            InlineAsm { .. } => throw_unsup_format!(\"inline assembly is not supported\"),\n         }\n \n         Ok(())"}, {"sha": "925b8d329668f4649b83ca01a9f54838de932b9f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -639,7 +639,8 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             | mir::TerminatorKind::Abort\n             | mir::TerminatorKind::Return\n             | mir::TerminatorKind::Unreachable\n-            | mir::TerminatorKind::Assert { .. } => {}\n+            | mir::TerminatorKind::Assert { .. }\n+            | mir::TerminatorKind::InlineAsm { .. } => {}\n             mir::TerminatorKind::GeneratorDrop\n             | mir::TerminatorKind::Yield { .. }\n             | mir::TerminatorKind::FalseEdges { .. }"}, {"sha": "987c9e24fc3c33044c720b0abc4fa5522644dd49", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -603,6 +603,10 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                 }\n             }\n \n+            TerminatorKind::InlineAsm { .. } => {\n+                self.check_op(ops::InlineAsm);\n+            }\n+\n             // FIXME: Some of these are only caught by `min_const_fn`, but should error here\n             // instead.\n             TerminatorKind::Abort"}, {"sha": "9bcb45f6493d16e07df611f4414c3675b50b6725", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -95,6 +95,12 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.check_target_features(func_id);\n                 }\n             }\n+\n+            TerminatorKind::InlineAsm { .. } => self.require_unsafe(\n+                \"use of inline assembly\",\n+                \"inline assembly is entirely unchecked and can cause undefined behavior\",\n+                UnsafetyViolationKind::General,\n+            ),\n         }\n         self.super_terminator(terminator, location);\n     }"}, {"sha": "f69343f4d7500855002e47ee842ef4c5543f0c96", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -1014,7 +1014,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n-            | TerminatorKind::FalseUnwind { .. } => {}\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::InlineAsm { .. } => {}\n             // Every argument in our function calls can be const propagated.\n             TerminatorKind::Call { ref mut args, .. } => {\n                 let mir_opt_level = self.tcx.sess.opts.debugging_opts.mir_opt_level;"}, {"sha": "4bf2adcd450c0b75a0b92d0537c138ca5d93cd07", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -981,7 +981,8 @@ fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::GeneratorDrop\n             | TerminatorKind::FalseEdges { .. }\n-            | TerminatorKind::FalseUnwind { .. } => {}\n+            | TerminatorKind::FalseUnwind { .. }\n+            | TerminatorKind::InlineAsm { .. } => {}\n \n             // Resume will *continue* unwinding, but if there's no other unwinding terminator it\n             // will never be reached."}, {"sha": "35d55c4cb9b6d53c776466c91bb15a22d22bcd08", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -800,6 +800,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n             {\n                 bug!(\"False unwinds should have been removed before inlining\")\n             }\n+            TerminatorKind::InlineAsm { ref mut destination, .. } => {\n+                if let Some(ref mut tgt) = *destination {\n+                    *tgt = self.update_target(*tgt);\n+                }\n+            }\n         }\n     }\n "}, {"sha": "a9d6c95b257bca8f1540fd5887913dd3c14f2d99", "filename": "src/librustc_mir/transform/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_min_const_fn.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -391,5 +391,9 @@ fn check_terminator(\n         TerminatorKind::Assert { cond, expected: _, msg: _, target: _, cleanup: _ } => {\n             check_operand(tcx, cond, span, def_id, body)\n         }\n+\n+        TerminatorKind::InlineAsm { .. } => {\n+            Err((span, \"cannot use inline assembly in const fn\".into()))\n+        }\n     }\n }"}, {"sha": "69c0163b649d6ef90d25dca2a17a1d4947f5dcd7", "filename": "src/librustc_mir/transform/remove_noop_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fremove_noop_landing_pads.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -77,7 +77,8 @@ impl RemoveNoopLandingPads {\n             | TerminatorKind::Call { .. }\n             | TerminatorKind::Assert { .. }\n             | TerminatorKind::DropAndReplace { .. }\n-            | TerminatorKind::Drop { .. } => false,\n+            | TerminatorKind::Drop { .. }\n+            | TerminatorKind::InlineAsm { .. } => false,\n         }\n     }\n "}, {"sha": "16bba6ad14780812baded5515a63faec94f9d861", "filename": "src/librustc_mir_build/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_place.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -255,6 +255,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Return { .. }\n             | ExprKind::Literal { .. }\n             | ExprKind::StaticRef { .. }\n+            | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::Yield { .. }\n             | ExprKind::Call { .. } => {"}, {"sha": "0f15190975087c09b6155df5043ded62c4d0a208", "filename": "src/librustc_mir_build/build/expr/as_rvalue.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -252,6 +252,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             | ExprKind::Break { .. }\n             | ExprKind::Continue { .. }\n             | ExprKind::Return { .. }\n+            | ExprKind::InlineAsm { .. }\n             | ExprKind::LlvmInlineAsm { .. }\n             | ExprKind::PlaceTypeAscription { .. }\n             | ExprKind::ValueTypeAscription { .. } => {"}, {"sha": "59d3003c9f49a04c7c7368fceb621dbb0321efe3", "filename": "src/librustc_mir_build/build/expr/category.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Fcategory.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -51,7 +51,8 @@ impl Category {\n             | ExprKind::Borrow { .. }\n             | ExprKind::AddressOf { .. }\n             | ExprKind::Yield { .. }\n-            | ExprKind::Call { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n+            | ExprKind::Call { .. }\n+            | ExprKind::InlineAsm { .. } => Some(Category::Rvalue(RvalueFunc::Into)),\n \n             ExprKind::Array { .. }\n             | ExprKind::Tuple { .. }"}, {"sha": "44c79a49f4518afbbf1b98bb6e282298b88e6979", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -8,6 +8,7 @@ use rustc_hir as hir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_span::symbol::sym;\n+use rustc_target::asm::InlineAsmOptions;\n \n use rustc_target::spec::abi::Abi;\n \n@@ -53,7 +54,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             ExprKind::NeverToAny { source } => {\n                 let source = this.hir.mirror(source);\n                 let is_call = match source.kind {\n-                    ExprKind::Call { .. } => true,\n+                    ExprKind::Call { .. } | ExprKind::InlineAsm { .. } => true,\n                     _ => false,\n                 };\n \n@@ -309,6 +310,73 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 block.unit()\n             }\n+            ExprKind::InlineAsm { template, operands, options } => {\n+                use crate::hair;\n+                use rustc_middle::mir;\n+                let operands = operands\n+                    .into_iter()\n+                    .map(|op| match op {\n+                        hair::InlineAsmOperand::In { reg, expr } => mir::InlineAsmOperand::In {\n+                            reg,\n+                            value: unpack!(block = this.as_local_operand(block, expr)),\n+                        },\n+                        hair::InlineAsmOperand::Out { reg, late, expr } => {\n+                            mir::InlineAsmOperand::Out {\n+                                reg,\n+                                late,\n+                                place: expr.map(|expr| unpack!(block = this.as_place(block, expr))),\n+                            }\n+                        }\n+                        hair::InlineAsmOperand::InOut { reg, late, expr } => {\n+                            let place = unpack!(block = this.as_place(block, expr));\n+                            mir::InlineAsmOperand::InOut {\n+                                reg,\n+                                late,\n+                                // This works because asm operands must be Copy\n+                                in_value: Operand::Copy(place),\n+                                out_place: Some(place),\n+                            }\n+                        }\n+                        hair::InlineAsmOperand::SplitInOut { reg, late, in_expr, out_expr } => {\n+                            mir::InlineAsmOperand::InOut {\n+                                reg,\n+                                late,\n+                                in_value: unpack!(block = this.as_local_operand(block, in_expr)),\n+                                out_place: out_expr.map(|out_expr| {\n+                                    unpack!(block = this.as_place(block, out_expr))\n+                                }),\n+                            }\n+                        }\n+                        hair::InlineAsmOperand::Const { expr } => mir::InlineAsmOperand::Const {\n+                            value: unpack!(block = this.as_local_operand(block, expr)),\n+                        },\n+                        hair::InlineAsmOperand::SymFn { expr } => {\n+                            mir::InlineAsmOperand::SymFn { value: box this.as_constant(expr) }\n+                        }\n+                        hair::InlineAsmOperand::SymStatic { expr } => {\n+                            mir::InlineAsmOperand::SymStatic { value: box this.as_constant(expr) }\n+                        }\n+                    })\n+                    .collect();\n+\n+                let destination = this.cfg.start_new_block();\n+\n+                this.cfg.terminate(\n+                    block,\n+                    source_info,\n+                    TerminatorKind::InlineAsm {\n+                        template,\n+                        operands,\n+                        options,\n+                        destination: if options.contains(InlineAsmOptions::NORETURN) {\n+                            None\n+                        } else {\n+                            Some(destination)\n+                        },\n+                    },\n+                );\n+                destination.unit()\n+            }\n \n             // These cases don't actually need a destination\n             ExprKind::Assign { .. }"}, {"sha": "868fb69abe80c60e382c775b940d789bd0f1cb59", "filename": "src/librustc_mir_build/build/scope.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fscope.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -1388,7 +1388,8 @@ impl<'tcx> DropTreeBuilder<'tcx> for Unwind {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. }\n             | TerminatorKind::GeneratorDrop\n-            | TerminatorKind::FalseEdges { .. } => {\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::InlineAsm { .. } => {\n                 span_bug!(term.source_info.span, \"cannot unwind from {:?}\", term.kind)\n             }\n         }"}, {"sha": "99b59d16029ff73df3689d61dc7cbd85dc42020f", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -400,6 +400,121 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             convert_path_expr(cx, expr, res)\n         }\n \n+        hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {\n+            template: asm.template,\n+            operands: asm\n+                .operands\n+                .iter()\n+                .map(|op| {\n+                    match *op {\n+                        hir::InlineAsmOperand::In { reg, ref expr } => {\n+                            InlineAsmOperand::In { reg, expr: expr.to_ref() }\n+                        }\n+                        hir::InlineAsmOperand::Out { reg, late, ref expr } => {\n+                            InlineAsmOperand::Out {\n+                                reg,\n+                                late,\n+                                expr: expr.as_ref().map(|expr| expr.to_ref()),\n+                            }\n+                        }\n+                        hir::InlineAsmOperand::InOut { reg, late, ref expr } => {\n+                            InlineAsmOperand::InOut { reg, late, expr: expr.to_ref() }\n+                        }\n+                        hir::InlineAsmOperand::SplitInOut {\n+                            reg,\n+                            late,\n+                            ref in_expr,\n+                            ref out_expr,\n+                        } => InlineAsmOperand::SplitInOut {\n+                            reg,\n+                            late,\n+                            in_expr: in_expr.to_ref(),\n+                            out_expr: out_expr.as_ref().map(|expr| expr.to_ref()),\n+                        },\n+                        hir::InlineAsmOperand::Const { ref expr } => {\n+                            InlineAsmOperand::Const { expr: expr.to_ref() }\n+                        }\n+                        hir::InlineAsmOperand::Sym { ref expr } => {\n+                            let qpath = match expr.kind {\n+                                hir::ExprKind::Path(ref qpath) => qpath,\n+                                _ => span_bug!(\n+                                    expr.span,\n+                                    \"asm `sym` operand should be a path, found {:?}\",\n+                                    expr.kind\n+                                ),\n+                            };\n+                            let temp_lifetime =\n+                                cx.region_scope_tree.temporary_scope(expr.hir_id.local_id);\n+                            let res = cx.tables().qpath_res(qpath, expr.hir_id);\n+                            let ty;\n+                            match res {\n+                                Res::Def(DefKind::Fn, _) | Res::Def(DefKind::AssocFn, _) => {\n+                                    ty = cx.tables().node_type(expr.hir_id);\n+                                    let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);\n+                                    InlineAsmOperand::SymFn {\n+                                        expr: Expr {\n+                                            ty,\n+                                            temp_lifetime,\n+                                            span: expr.span,\n+                                            kind: ExprKind::Literal {\n+                                                literal: ty::Const::zero_sized(cx.tcx, ty),\n+                                                user_ty,\n+                                            },\n+                                        }\n+                                        .to_ref(),\n+                                    }\n+                                }\n+\n+                                Res::Def(DefKind::Static, id) => {\n+                                    ty = cx.tcx.static_ptr_ty(id);\n+                                    let ptr = cx.tcx.create_static_alloc(id);\n+                                    InlineAsmOperand::SymStatic {\n+                                        expr: Expr {\n+                                            ty,\n+                                            temp_lifetime,\n+                                            span: expr.span,\n+                                            kind: ExprKind::StaticRef {\n+                                                literal: ty::Const::from_scalar(\n+                                                    cx.tcx,\n+                                                    Scalar::Ptr(ptr.into()),\n+                                                    ty,\n+                                                ),\n+                                                def_id: id,\n+                                            },\n+                                        }\n+                                        .to_ref(),\n+                                    }\n+                                }\n+\n+                                _ => {\n+                                    cx.tcx.sess.span_err(\n+                                        expr.span,\n+                                        \"asm `sym` operand must point to a fn or static\",\n+                                    );\n+\n+                                    // Not a real fn, but we're not reaching codegen anyways...\n+                                    ty = cx.tcx.types.err;\n+                                    InlineAsmOperand::SymFn {\n+                                        expr: Expr {\n+                                            ty,\n+                                            temp_lifetime,\n+                                            span: expr.span,\n+                                            kind: ExprKind::Literal {\n+                                                literal: ty::Const::zero_sized(cx.tcx, ty),\n+                                                user_ty: None,\n+                                            },\n+                                        }\n+                                        .to_ref(),\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                })\n+                .collect(),\n+            options: asm.options,\n+        },\n+\n         hir::ExprKind::LlvmInlineAsm(ref asm) => ExprKind::LlvmInlineAsm {\n             asm: &asm.inner,\n             outputs: asm.outputs_exprs.to_ref(),"}, {"sha": "0c49e698e89dba2f97efb898e735e498a88c0f04", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{AdtDef, Const, Ty, UpvarSubsts, UserType};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n+use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n \n crate mod constant;\n crate mod cx;\n@@ -277,6 +278,11 @@ crate enum ExprKind<'tcx> {\n         literal: &'tcx Const<'tcx>,\n         def_id: DefId,\n     },\n+    InlineAsm {\n+        template: &'tcx [InlineAsmTemplatePiece],\n+        operands: Vec<InlineAsmOperand<'tcx>>,\n+        options: InlineAsmOptions,\n+    },\n     LlvmInlineAsm {\n         asm: &'tcx hir::LlvmInlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,\n@@ -335,6 +341,39 @@ impl<'tcx> ExprRef<'tcx> {\n     }\n }\n \n+#[derive(Clone, Debug)]\n+crate enum InlineAsmOperand<'tcx> {\n+    In {\n+        reg: InlineAsmRegOrRegClass,\n+        expr: ExprRef<'tcx>,\n+    },\n+    Out {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        expr: Option<ExprRef<'tcx>>,\n+    },\n+    InOut {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        expr: ExprRef<'tcx>,\n+    },\n+    SplitInOut {\n+        reg: InlineAsmRegOrRegClass,\n+        late: bool,\n+        in_expr: ExprRef<'tcx>,\n+        out_expr: Option<ExprRef<'tcx>>,\n+    },\n+    Const {\n+        expr: ExprRef<'tcx>,\n+    },\n+    SymFn {\n+        expr: ExprRef<'tcx>,\n+    },\n+    SymStatic {\n+        expr: ExprRef<'tcx>,\n+    },\n+}\n+\n ///////////////////////////////////////////////////////////////////////////\n // The Mirror trait\n "}, {"sha": "161023f1613838708b5bd6ac18c836a5c24b11a1", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7b24608631cc1405872631a155fb4e8d52329e/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=1e7b24608631cc1405872631a155fb4e8d52329e", "patch": "@@ -114,6 +114,10 @@ impl<'mir, 'tcx> TriColorVisitor<&'mir Body<'tcx>> for Search<'mir, 'tcx> {\n             | TerminatorKind::Unreachable\n             | TerminatorKind::Yield { .. } => ControlFlow::Break(NonRecursive),\n \n+            // FIXME(Amanieu): I am not 100% sure about this, but it triggers\n+            // a spurious warning otherwise.\n+            TerminatorKind::InlineAsm { .. } => ControlFlow::Break(NonRecursive),\n+\n             // These do not.\n             TerminatorKind::Assert { .. }\n             | TerminatorKind::Call { .. }"}]}