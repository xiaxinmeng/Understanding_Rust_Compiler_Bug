{"sha": "9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "node_id": "C_kwDOAAsO6NoAKDllN2M2NDYzMTkwZjQ0MjRjY2FlZTNkMmIwMzNlYTdmZDFiZDhlMGQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-26T17:57:03Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-26T17:57:03Z"}, "message": "Merge branch 'staging'", "tree": {"sha": "d00796e256e8fec86ba90bae36fd0292c51c9953", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d00796e256e8fec86ba90bae36fd0292c51c9953"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "html_url": "https://github.com/rust-lang/rust/commit/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea3bd664137b1e04a2530cc47025f031c9b9974", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea3bd664137b1e04a2530cc47025f031c9b9974", "html_url": "https://github.com/rust-lang/rust/commit/aea3bd664137b1e04a2530cc47025f031c9b9974"}, {"sha": "b88e129915b2b623331997b4234cdfeb367b45c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b88e129915b2b623331997b4234cdfeb367b45c7", "html_url": "https://github.com/rust-lang/rust/commit/b88e129915b2b623331997b4234cdfeb367b45c7"}], "stats": {"total": 40, "additions": 8, "deletions": 32}, "files": [{"sha": "261948a6971375f534935991d7f27d27e1209639", "filename": "build_system/tests.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "patch": "@@ -94,13 +94,15 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::build_bin_and_run(\"aot.issue-72793\", \"example/issue-72793.rs\", &[]),\n ];\n \n+// FIXME(rust-random/rand#1293): Newer rand versions fail to test on Windows. Update once this is\n+// fixed.\n pub(crate) static RAND_REPO: GitRepo =\n-    GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n+    GitRepo::github(\"rust-random\", \"rand\", \"50b9a447410860af8d6db9a208c3576886955874\", \"rand\");\n \n pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n-    GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n+    GitRepo::github(\"rust-lang\", \"regex\", \"a9b2e02352db92ce1f6e5b7ecd41b8bbffbe161a\", \"regex\");\n \n pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n \n@@ -123,12 +125,11 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         RAND.clean(&runner.dirs);\n \n         if runner.is_native {\n-            eprintln!(\"[TEST] rust-random/rand\");\n             let mut test_cmd = RAND.test(&runner.target_compiler, &runner.dirs);\n             test_cmd.arg(\"--workspace\").arg(\"--\").arg(\"-q\");\n             spawn_and_wait(test_cmd);\n         } else {\n-            eprintln!(\"[AOT] rust-random/rand\");\n+            eprintln!(\"Cross-Compiling: Not running tests\");\n             let mut build_cmd = RAND.build(&runner.target_compiler, &runner.dirs);\n             build_cmd.arg(\"--workspace\").arg(\"--tests\");\n             spawn_and_wait(build_cmd);\n@@ -151,18 +152,13 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n         REGEX.clean(&runner.dirs);\n \n-        // newer aho_corasick versions throw a deprecation warning\n-        let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n-\n         let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n         build_cmd.arg(\"--example\").arg(\"shootout-regex-dna\");\n-        build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n         spawn_and_wait(build_cmd);\n \n         if runner.is_native {\n             let mut run_cmd = REGEX.run(&runner.target_compiler, &runner.dirs);\n             run_cmd.arg(\"--example\").arg(\"shootout-regex-dna\");\n-            run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n \n             let input = fs::read_to_string(\n                 REGEX.source_dir(&runner.dirs).join(\"examples\").join(\"regexdna-input.txt\"),\n@@ -174,13 +170,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             .unwrap();\n \n             let output = spawn_and_wait_with_input(run_cmd, input);\n-            // Make sure `[codegen mono items] start` doesn't poison the diff\n-            let output = output\n-                .lines()\n-                .filter(|line| !line.contains(\"codegen mono items\"))\n-                .chain(Some(\"\")) // This just adds the trailing newline\n-                .collect::<Vec<&str>>()\n-                .join(\"\\r\\n\");\n \n             let output_matches = expected.lines().eq(output.lines());\n             if !output_matches {\n@@ -195,27 +184,14 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.regex\", &|runner| {\n         REGEX.clean(&runner.dirs);\n \n-        // newer aho_corasick versions throw a deprecation warning\n-        let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n-\n         if runner.is_native {\n             let mut run_cmd = REGEX.test(&runner.target_compiler, &runner.dirs);\n-            run_cmd.args([\n-                \"--tests\",\n-                \"--\",\n-                \"--exclude-should-panic\",\n-                \"--test-threads\",\n-                \"1\",\n-                \"-Zunstable-options\",\n-                \"-q\",\n-            ]);\n-            run_cmd.env(\"RUSTFLAGS\", lint_rust_flags);\n+            run_cmd.args([\"--workspace\", \"--\", \"-q\"]);\n             spawn_and_wait(run_cmd);\n         } else {\n             eprintln!(\"Cross-Compiling: Not running tests\");\n             let mut build_cmd = REGEX.build(&runner.target_compiler, &runner.dirs);\n             build_cmd.arg(\"--tests\");\n-            build_cmd.env(\"RUSTFLAGS\", lint_rust_flags.clone());\n             spawn_and_wait(build_cmd);\n         }\n     }),"}, {"sha": "eb452c5cd377268b031cee0a3890c3b625333ef5", "filename": "patches/0003-rand-Disable-rand-tests-on-mingw.patch", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d/patches%2F0003-rand-Disable-rand-tests-on-mingw.patch", "raw_url": "https://github.com/rust-lang/rust/raw/9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d/patches%2F0003-rand-Disable-rand-tests-on-mingw.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0003-rand-Disable-rand-tests-on-mingw.patch?ref=9e7c6463190f4424ccaee3d2b033ea7fd1bd8e0d", "patch": "@@ -19,8 +19,8 @@ index 217899e..9cedeb7 100644\n +    // This is broken on x86_64-pc-windows-gnu presumably due to a broken powf implementation\n +    #[cfg_attr(all(target_os = \"windows\", target_env = \"gnu\"), ignore)]\n      fn value_stability() {\n-         fn test_samples<F: Float + core::fmt::Debug, D: Distribution<F>>(\n-             distr: D, zero: F, expected: &[F],\n+         fn test_samples<F: Float + Debug + Display + LowerExp, D: Distribution<F>>(\n+             distr: D, thresh: F, expected: &[F],\n diff --git a/rand_distr/tests/value_stability.rs b/rand_distr/tests/value_stability.rs\n index 192ba74..0101ace 100644\n --- a/rand_distr/tests/value_stability.rs"}]}