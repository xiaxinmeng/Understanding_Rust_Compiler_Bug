{"sha": "755f6229da1d436f4cb23fffea644ba13291b434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NWY2MjI5ZGExZDQzNmY0Y2IyM2ZmZmVhNjQ0YmExMzI5MWI0MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-19T16:55:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-19T16:55:59Z"}, "message": "auto merge of #9279 : erickt/rust/master, r=alexcrichton\n\n`Some(5).or_{default,zero}` can be easily replaced with `Some(Some(5).unwrap_or_default())`.", "tree": {"sha": "7bb62b2c7de33a72c9cc9f387c80a7a4f0daa47d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bb62b2c7de33a72c9cc9f387c80a7a4f0daa47d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/755f6229da1d436f4cb23fffea644ba13291b434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/755f6229da1d436f4cb23fffea644ba13291b434", "html_url": "https://github.com/rust-lang/rust/commit/755f6229da1d436f4cb23fffea644ba13291b434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/755f6229da1d436f4cb23fffea644ba13291b434/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "068e04231ded7fccca349babb1ba58ab3d796f40", "url": "https://api.github.com/repos/rust-lang/rust/commits/068e04231ded7fccca349babb1ba58ab3d796f40", "html_url": "https://github.com/rust-lang/rust/commit/068e04231ded7fccca349babb1ba58ab3d796f40"}, {"sha": "1a90f24bbdd4decec3df35d628fdb8825675190a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a90f24bbdd4decec3df35d628fdb8825675190a", "html_url": "https://github.com/rust-lang/rust/commit/1a90f24bbdd4decec3df35d628fdb8825675190a"}], "stats": {"total": 36, "additions": 7, "deletions": 29}, "files": [{"sha": "42878f6effbae677d3ab33815f69ab59d6113ce7", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=755f6229da1d436f4cb23fffea644ba13291b434", "patch": "@@ -467,23 +467,14 @@ impl<T: Default> Option<T> {\n             None => Default::default()\n         }\n     }\n-\n-    /// Returns self or `Some`-wrapped default value\n-    #[inline]\n-    pub fn or_default(self) -> Option<T> {\n-        match self {\n-            None => Some(Default::default()),\n-            x => x,\n-        }\n-    }\n }\n \n impl<T> Default for Option<T> {\n     #[inline]\n     fn default() -> Option<T> { None }\n }\n \n-impl<T:Zero> Option<T> {\n+impl<T: Zero> Option<T> {\n     /// Returns the contained value or zero (for this type)\n     #[inline]\n     pub fn unwrap_or_zero(self) -> T {\n@@ -492,15 +483,6 @@ impl<T:Zero> Option<T> {\n             None => Zero::zero()\n         }\n     }\n-\n-    /// Returns self or `Some`-wrapped zero value\n-    #[inline]\n-    pub fn or_zero(self) -> Option<T> {\n-        match self {\n-            None => Some(Zero::zero()),\n-            x => x\n-        }\n-    }\n }\n \n /// An iterator that yields either one or zero elements"}, {"sha": "d8c78842808d3de9ee5ff53571929d4dfe62cda0", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=755f6229da1d436f4cb23fffea644ba13291b434", "patch": "@@ -47,9 +47,7 @@ fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Exp\n         cx.ident_of(\"Default\"),\n         cx.ident_of(\"default\")\n     ];\n-    let default_call = || {\n-        cx.expr_call_global(span, default_ident.clone(), ~[])\n-    };\n+    let default_call = cx.expr_call_global(span, default_ident.clone(), ~[]);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -58,13 +56,13 @@ fn default_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Exp\n                     if count == 0 {\n                         cx.expr_ident(span, substr.type_ident)\n                     } else {\n-                        let exprs = vec::from_fn(count, |_| default_call());\n+                        let exprs = vec::from_elem(count, default_call);\n                         cx.expr_call_ident(span, substr.type_ident, exprs)\n                     }\n                 }\n                 Right(ref fields) => {\n                     let default_fields = do fields.map |ident| {\n-                        cx.field_imm(span, *ident, default_call())\n+                        cx.field_imm(span, *ident, default_call)\n                     };\n                     cx.expr_struct_ident(span, substr.type_ident, default_fields)\n                 }"}, {"sha": "2546cfc2e3999c9c65172f70784c57be662dcacb", "filename": "src/libsyntax/ext/deriving/zero.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/755f6229da1d436f4cb23fffea644ba13291b434/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fzero.rs?ref=755f6229da1d436f4cb23fffea644ba13291b434", "patch": "@@ -62,9 +62,7 @@ fn zero_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n         cx.ident_of(\"Zero\"),\n         cx.ident_of(\"zero\")\n     ];\n-    let zero_call = || {\n-        cx.expr_call_global(span, zero_ident.clone(), ~[])\n-    };\n+    let zero_call = cx.expr_call_global(span, zero_ident.clone(), ~[]);\n \n     return match *substr.fields {\n         StaticStruct(_, ref summary) => {\n@@ -73,13 +71,13 @@ fn zero_substructure(cx: @ExtCtxt, span: Span, substr: &Substructure) -> @Expr {\n                     if count == 0 {\n                         cx.expr_ident(span, substr.type_ident)\n                     } else {\n-                        let exprs = vec::from_fn(count, |_| zero_call());\n+                        let exprs = vec::from_elem(count, zero_call);\n                         cx.expr_call_ident(span, substr.type_ident, exprs)\n                     }\n                 }\n                 Right(ref fields) => {\n                     let zero_fields = do fields.map |ident| {\n-                        cx.field_imm(span, *ident, zero_call())\n+                        cx.field_imm(span, *ident, zero_call)\n                     };\n                     cx.expr_struct_ident(span, substr.type_ident, zero_fields)\n                 }"}]}