{"sha": "5724462f628113598a2bfb5ddc945bb03b82080a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3MjQ0NjJmNjI4MTEzNTk4YTJiZmI1ZGRjOTQ1YmIwM2I4MjA4MGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-14T01:28:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-14T01:28:13Z"}, "message": "Auto merge of #49326 - petrochenkov:nteq, r=eddyb\n\nmacros: Remove matching on \"complex\" nonterminals requiring AST comparisons\n\nSo, you can actually use nonterminals from outer macros in left hand side of nested macros and invocations of nested macros will try to match passed arguments to them.\n\n```rust\nmacro outer($nt_item: item) {\n    macro inner($nt_item) {\n        struct S;\n    }\n\n    inner!($nt_item); // OK, `$nt_item` matches `$nt_item`\n}\n```\n\nWhy this is bad:\n- We can't do this matching correctly. When two nonterminals are compared, the original tokens are lost and we have to compare AST fragments instead. Right now the comparison is done by `PartialEq` impls derived on AST structures.\n    - On one hand, AST loses information compared to original tokens (e.g. trailing separators and other simplifications done during parsing to AST), so we can produce matches that are not actually correct.\n    - On another hand derived `PartialEq` impls for AST structures don't make much sense in general and compare various auxiliary garbage like spans. For the argument nonterminal to match we should use literally the same token (possibly cloned) as was used in the macro LHS (as in the example above). So we can reject matches that are actually correct.\n    - Support for nonterminal matching is the only thing that forces us to derive `PartialEq` for all (!) AST structures. As I mentioned these impls are also mostly nonsensical.\n\nThis PR removes support for matching on all nonterminals except for \"simple\" ones like `ident`, `lifetime` and `tt` for which we have original tokens that can be compared.\nAfter this is done I'll submit another PR removing huge number of `PartialEq` impls from AST and HIR structures.\n\nThis is an arcane feature and I don't personally know why would anyone use it, but the change should ideally go through crater.\nWe'll be able to support this feature again in the future when all nonterminals have original token streams attached to them in addition to (or instead of) AST fragments.", "tree": {"sha": "97c758abfce0ce6a768ded3de7411ebb406353bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97c758abfce0ce6a768ded3de7411ebb406353bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5724462f628113598a2bfb5ddc945bb03b82080a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5724462f628113598a2bfb5ddc945bb03b82080a", "html_url": "https://github.com/rust-lang/rust/commit/5724462f628113598a2bfb5ddc945bb03b82080a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5724462f628113598a2bfb5ddc945bb03b82080a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7252f616c591cc53b646b8d066d2fe45616ad23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7252f616c591cc53b646b8d066d2fe45616ad23", "html_url": "https://github.com/rust-lang/rust/commit/e7252f616c591cc53b646b8d066d2fe45616ad23"}, {"sha": "7e1f73beb6144503851c71b28fc50fd477afe622", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1f73beb6144503851c71b28fc50fd477afe622", "html_url": "https://github.com/rust-lang/rust/commit/7e1f73beb6144503851c71b28fc50fd477afe622"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "35a745ccdee32f2e48ba3e2b31829226e39416f0", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=5724462f628113598a2bfb5ddc945bb03b82080a", "patch": "@@ -565,7 +565,7 @@ impl Token {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, Eq, Hash)]\n /// For interpolation during macro expansion.\n pub enum Nonterminal {\n     NtItem(P<ast::Item>),\n@@ -591,6 +591,22 @@ pub enum Nonterminal {\n     NtArg(ast::Arg),\n }\n \n+impl PartialEq for Nonterminal {\n+    fn eq(&self, rhs: &Self) -> bool {\n+        match (self, rhs) {\n+            (NtIdent(ident_lhs, is_raw_lhs), NtIdent(ident_rhs, is_raw_rhs)) =>\n+                ident_lhs == ident_rhs && is_raw_lhs == is_raw_rhs,\n+            (NtLifetime(ident_lhs), NtLifetime(ident_rhs)) => ident_lhs == ident_rhs,\n+            (NtTT(tt_lhs), NtTT(tt_rhs)) => tt_lhs == tt_rhs,\n+            // FIXME: Assume that all \"complex\" nonterminal are not equal, we can't compare them\n+            // correctly based on data from AST. This will prevent them from matching each other\n+            // in macros. The comparison will become possible only when each nonterminal has an\n+            // attached token stream from which it was parsed.\n+            _ => false,\n+        }\n+    }\n+}\n+\n impl fmt::Debug for Nonterminal {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}, {"sha": "4dcb8afa94eab1564814c08140ac6b5855373477", "filename": "src/test/ui/macros/nonterminal-matching.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.rs?ref=5724462f628113598a2bfb5ddc945bb03b82080a", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Check that we are refusing to match on complex nonterminals for which tokens are\n+// unavailable and we'd have to go through AST comparisons.\n+\n+#![feature(decl_macro, macro_lifetime_matcher)]\n+\n+macro simple_nonterminal($nt_ident: ident, $nt_lifetime: lifetime, $nt_tt: tt) {\n+    macro n(a $nt_ident b $nt_lifetime c $nt_tt d) {\n+        struct S;\n+    }\n+\n+    n!(a $nt_ident b $nt_lifetime c $nt_tt d);\n+}\n+\n+macro complex_nonterminal($nt_item: item) {\n+    macro n(a $nt_item b) {\n+        struct S;\n+    }\n+\n+    n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n+}\n+\n+simple_nonterminal!(a, 'a, (x, y, z)); // OK\n+\n+complex_nonterminal!(enum E {});\n+\n+fn main() {}"}, {"sha": "bf2221d52a4920dbce37818a24f653cc120a0b1d", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5724462f628113598a2bfb5ddc945bb03b82080a/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=5724462f628113598a2bfb5ddc945bb03b82080a", "patch": "@@ -0,0 +1,11 @@\n+error: no rules expected the token `enum E { }`\n+  --> $DIR/nonterminal-matching.rs:29:10\n+   |\n+LL |     n!(a $nt_item b); //~ ERROR no rules expected the token `enum E { }`\n+   |          ^^^^^^^^\n+...\n+LL | complex_nonterminal!(enum E {});\n+   | -------------------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}]}