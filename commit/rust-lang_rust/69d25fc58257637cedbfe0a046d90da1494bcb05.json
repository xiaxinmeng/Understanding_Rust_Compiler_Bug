{"sha": "69d25fc58257637cedbfe0a046d90da1494bcb05", "node_id": "C_kwDOAAsO6NoAKDY5ZDI1ZmM1ODI1NzYzN2NlZGJmZTBhMDQ2ZDkwZGExNDk0YmNiMDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T04:24:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-15T04:24:13Z"}, "message": "Auto merge of #92915 - matthiaskrgr:rollup-pxxk8jp, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #92191 (Prefer projection candidates instead of param_env candidates for Sized predicates)\n - #92382 (Extend const_convert to rest of blanket core::convert impls)\n - #92625 (Add `#[track_caller]` to `mirbug`)\n - #92684 (Export `tcp::IntoIncoming`)\n - #92743 (Use pre-interned symbols in a couple of places)\n - #92838 (Clean up some links in RELEASES)\n - #92868 (librustdoc: Address some clippy lints)\n - #92875 (Make `opt_const_param_of` work in the presence of `GenericArg::Infer`)\n - #92891 (Add myself to .mailmap)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "a5ba6bd1ebf5f76b6ba5501843a11cc0756895ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5ba6bd1ebf5f76b6ba5501843a11cc0756895ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69d25fc58257637cedbfe0a046d90da1494bcb05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69d25fc58257637cedbfe0a046d90da1494bcb05", "html_url": "https://github.com/rust-lang/rust/commit/69d25fc58257637cedbfe0a046d90da1494bcb05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69d25fc58257637cedbfe0a046d90da1494bcb05/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9b573eedaaa6d6e7c00c986cccbee802f9287b", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9b573eedaaa6d6e7c00c986cccbee802f9287b", "html_url": "https://github.com/rust-lang/rust/commit/de9b573eedaaa6d6e7c00c986cccbee802f9287b"}, {"sha": "ff6c17598f1c4b803bd4ea971628051679dd37f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6c17598f1c4b803bd4ea971628051679dd37f4", "html_url": "https://github.com/rust-lang/rust/commit/ff6c17598f1c4b803bd4ea971628051679dd37f4"}], "stats": {"total": 793, "additions": 378, "deletions": 415}, "files": [{"sha": "ac221fa3a60e464ced301ce0e611295510ddbc30", "filename": ".mailmap", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/.mailmap", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/.mailmap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.mailmap?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -129,6 +129,7 @@ Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub.bukaj@yahoo.com>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakub@jakub.cc>\n Jakub Adam Wieczorek <jakub.adam.wieczorek@gmail.com> <jakubw@jakubw.net>\n James Deng <cnjamesdeng@gmail.com> <cnJamesDeng@gmail.com>\n+James Hinshelwood <jameshinshelwood1@gmail.com> <james.hinshelwood@bigpayme.com>\n James Miller <bladeon@gmail.com> <james@aatch.net>\n James Perry <james.austin.perry@gmail.com>\n Jason Fager <jfager@gmail.com>"}, {"sha": "460c78b14d13815004f7cfd57a8394a9e3f5cd10", "filename": "RELEASES.md", "status": "modified", "additions": 16, "deletions": 126, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -95,19 +95,14 @@ and related tools.\n [87467]: https://github.com/rust-lang/rust/pull/87467/\n [87704]: https://github.com/rust-lang/rust/pull/87704/\n [88041]: https://github.com/rust-lang/rust/pull/88041/\n-[88300]: https://github.com/rust-lang/rust/pull/88300/\n [88447]: https://github.com/rust-lang/rust/pull/88447/\n [88601]: https://github.com/rust-lang/rust/pull/88601/\n-[88624]: https://github.com/rust-lang/rust/pull/88624/\n [89062]: https://github.com/rust-lang/rust/pull/89062/\n [89174]: https://github.com/rust-lang/rust/pull/89174/\n-[89542]: https://github.com/rust-lang/rust/pull/89542/\n [89551]: https://github.com/rust-lang/rust/pull/89551/\n [89558]: https://github.com/rust-lang/rust/pull/89558/\n [89580]: https://github.com/rust-lang/rust/pull/89580/\n [89652]: https://github.com/rust-lang/rust/pull/89652/\n-[89677]: https://github.com/rust-lang/rust/pull/89677/\n-[89951]: https://github.com/rust-lang/rust/pull/89951/\n [90041]: https://github.com/rust-lang/rust/pull/90041/\n [90058]: https://github.com/rust-lang/rust/pull/90058/\n [90104]: https://github.com/rust-lang/rust/pull/90104/\n@@ -123,11 +118,9 @@ and related tools.\n [90733]: https://github.com/rust-lang/rust/pull/90733/\n [90833]: https://github.com/rust-lang/rust/pull/90833/\n [90846]: https://github.com/rust-lang/rust/pull/90846/\n-[90896]: https://github.com/rust-lang/rust/pull/90896/\n [91026]: https://github.com/rust-lang/rust/pull/91026/\n [91207]: https://github.com/rust-lang/rust/pull/91207/\n [91255]: https://github.com/rust-lang/rust/pull/91255/\n-[91301]: https://github.com/rust-lang/rust/pull/91301/\n [cargo/10082]: https://github.com/rust-lang/cargo/pull/10082/\n [cargo/10107]: https://github.com/rust-lang/cargo/pull/10107/\n [`Metadata::is_symlink`]: https://doc.rust-lang.org/stable/std/fs/struct.Metadata.html#method.is_symlink\n@@ -137,28 +130,7 @@ and related tools.\n [`Result::unwrap_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_unchecked\n [`Result::unwrap_err_unchecked`]: https://doc.rust-lang.org/stable/std/result/enum.Result.html#method.unwrap_err_unchecked\n [`File::options`]: https://doc.rust-lang.org/stable/std/fs/struct.File.html#method.options\n-[`unix::process::ExitStatusExt::core_dumped`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.core_dumped\n-[`unix::process::ExitStatusExt::stopped_signal`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.stopped_signal\n-[`unix::process::ExitStatusExt::continued`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.continued\n-[`unix::process::ExitStatusExt::into_raw`]: https://doc.rust-lang.org/stable/std/os/unix/process/trait.ExitStatusExt.html#tymethod.into_raw\n [`Duration::new`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.new\n-[`Duration::checked_add`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.checked_add\n-[`Duration::saturating_add`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.saturating_add\n-[`Duration::checked_sub`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.checked_sub\n-[`Duration::saturating_sub`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.saturating_sub\n-[`Duration::checked_mul`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.checked_mul\n-[`Duration::saturating_mul`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.saturating_mul\n-[`Duration::checked_div`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.checked_div\n-[`Duration::as_secs_f64`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.as_secs_f64\n-[`Duration::as_secs_f32`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.as_secs_f32\n-[`Duration::from_secs_f64`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.from_secs_f64\n-[`Duration::from_secs_f32`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.from_secs_f32\n-[`Duration::mul_f64`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.mul_f64\n-[`Duration::mul_f32`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.mul_f32\n-[`Duration::div_f64`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_f64\n-[`Duration::div_f32`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_f32\n-[`Duration::div_duration_f64`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_duration_f64\n-[`Duration::div_duration_f32`]: https://doc.rust-lang.org/stable/std/time/struct.Duration.html#method.div_duration_f32\n \n Version 1.57.0 (2021-12-02)\n ==========================\n@@ -240,7 +212,6 @@ and related tools.\n [86191]: https://github.com/rust-lang/rust/pull/86191/\n [87220]: https://github.com/rust-lang/rust/pull/87220/\n [87260]: https://github.com/rust-lang/rust/pull/87260/\n-[88243]: https://github.com/rust-lang/rust/pull/88243/\n [88321]: https://github.com/rust-lang/rust/pull/88321/\n [88529]: https://github.com/rust-lang/rust/pull/88529/\n [88690]: https://github.com/rust-lang/rust/pull/88690/\n@@ -396,8 +367,6 @@ and related tools.\n   as well as rustdoc.\n \n [`std::os::unix::fs::chroot`]: https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chroot.html\n-[`Iterator::intersperse`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n-[`Iterator::intersperse_with`]: https://doc.rust-lang.org/stable/std/iter/trait.Iterator.html#method.intersperse\n [`UnsafeCell::raw_get`]: https://doc.rust-lang.org/stable/std/cell/struct.UnsafeCell.html#method.raw_get\n [`BufWriter::into_parts`]: https://doc.rust-lang.org/stable/std/io/struct.BufWriter.html#method.into_parts\n [`core::panic::{UnwindSafe, RefUnwindSafe, AssertUnwindSafe}`]: https://github.com/rust-lang/rust/pull/84662\n@@ -419,12 +388,7 @@ and related tools.\n [rust#86183]: https://github.com/rust-lang/rust/pull/86183\n [rust#87385]: https://github.com/rust-lang/rust/pull/87385\n [rust#88100]: https://github.com/rust-lang/rust/pull/88100\n-[rust#86860]: https://github.com/rust-lang/rust/pull/86860\n-[rust#84039]: https://github.com/rust-lang/rust/pull/84039\n-[rust#86492]: https://github.com/rust-lang/rust/pull/86492\n-[rust#88363]: https://github.com/rust-lang/rust/pull/88363\n [rust#85305]: https://github.com/rust-lang/rust/pull/85305\n-[rust#87832]: https://github.com/rust-lang/rust/pull/87832\n [rust#88069]: https://github.com/rust-lang/rust/pull/88069\n [rust#87472]: https://github.com/rust-lang/rust/pull/87472\n [rust#87699]: https://github.com/rust-lang/rust/pull/87699\n@@ -435,31 +399,12 @@ and related tools.\n [rust#87580]: https://github.com/rust-lang/rust/pull/87580\n [rust#83342]: https://github.com/rust-lang/rust/pull/83342\n [rust#83093]: https://github.com/rust-lang/rust/pull/83093\n-[rust#88177]: https://github.com/rust-lang/rust/pull/88177\n-[rust#88548]: https://github.com/rust-lang/rust/pull/88548\n-[rust#88551]: https://github.com/rust-lang/rust/pull/88551\n-[rust#88299]: https://github.com/rust-lang/rust/pull/88299\n-[rust#88220]: https://github.com/rust-lang/rust/pull/88220\n [rust#85835]: https://github.com/rust-lang/rust/pull/85835\n-[rust#86879]: https://github.com/rust-lang/rust/pull/86879\n [rust#86744]: https://github.com/rust-lang/rust/pull/86744\n-[rust#84662]: https://github.com/rust-lang/rust/pull/84662\n-[rust#86593]: https://github.com/rust-lang/rust/pull/86593\n-[rust#81050]: https://github.com/rust-lang/rust/pull/81050\n [rust#81363]: https://github.com/rust-lang/rust/pull/81363\n [rust#84111]: https://github.com/rust-lang/rust/pull/84111\n [rust#85769]: https://github.com/rust-lang/rust/pull/85769#issuecomment-854363720\n-[rust#88490]: https://github.com/rust-lang/rust/pull/88490\n-[rust#88269]: https://github.com/rust-lang/rust/pull/88269\n-[rust#84176]: https://github.com/rust-lang/rust/pull/84176\n [rust#88399]: https://github.com/rust-lang/rust/pull/88399\n-[rust#88227]: https://github.com/rust-lang/rust/pull/88227\n-[rust#88200]: https://github.com/rust-lang/rust/pull/88200\n-[rust#82776]: https://github.com/rust-lang/rust/pull/82776\n-[rust#88077]: https://github.com/rust-lang/rust/pull/88077\n-[rust#87728]: https://github.com/rust-lang/rust/pull/87728\n-[rust#87050]: https://github.com/rust-lang/rust/pull/87050\n-[rust#87619]: https://github.com/rust-lang/rust/pull/87619\n [rust#81825]: https://github.com/rust-lang/rust/pull/81825#issuecomment-808406918\n [rust#88019]: https://github.com/rust-lang/rust/pull/88019\n [rust#87666]: https://github.com/rust-lang/rust/pull/87666\n@@ -565,20 +510,14 @@ Compatibility Notes\n [86294]: https://github.com/rust-lang/rust/pull/86294\n [86858]: https://github.com/rust-lang/rust/pull/86858\n [86761]: https://github.com/rust-lang/rust/pull/86761\n-[85769]: https://github.com/rust-lang/rust/pull/85769\n [85746]: https://github.com/rust-lang/rust/pull/85746\n-[85305]: https://github.com/rust-lang/rust/pull/85305\n [85270]: https://github.com/rust-lang/rust/pull/85270\n-[84111]: https://github.com/rust-lang/rust/pull/84111\n [83918]: https://github.com/rust-lang/rust/pull/83918\n [79965]: https://github.com/rust-lang/rust/pull/79965\n-[87370]: https://github.com/rust-lang/rust/pull/87370\n-[87298]: https://github.com/rust-lang/rust/pull/87298\n [cargo/9663]: https://github.com/rust-lang/cargo/pull/9663\n [cargo/9675]: https://github.com/rust-lang/cargo/pull/9675\n [cargo/9550]: https://github.com/rust-lang/cargo/pull/9550\n [cargo/9680]: https://github.com/rust-lang/cargo/pull/9680\n-[cargo/9663]: https://github.com/rust-lang/cargo/pull/9663\n [`array::map`]: https://doc.rust-lang.org/stable/std/primitive.array.html#method.map\n [`Bound::cloned`]: https://doc.rust-lang.org/stable/std/ops/enum.Bound.html#method.cloned\n [`Drain::as_str`]: https://doc.rust-lang.org/stable/std/string/struct.Drain.html#method.as_str\n@@ -587,7 +526,6 @@ Compatibility Notes\n [`MaybeUninit::assume_init_mut`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_mut\n [`MaybeUninit::assume_init_ref`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.assume_init_ref\n [`MaybeUninit::write`]: https://doc.rust-lang.org/stable/std/mem/union.MaybeUninit.html#method.write\n-[`Seek::rewind`]: https://doc.rust-lang.org/stable/std/io/trait.Seek.html#method.rewind\n [`ops::ControlFlow`]: https://doc.rust-lang.org/stable/std/ops/enum.ControlFlow.html\n [`str::from_utf8_unchecked`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8_unchecked.html\n [`x86::_bittest`]: https://doc.rust-lang.org/stable/core/arch/x86/fn._bittest.html\n@@ -691,7 +629,6 @@ Compatibility Notes\n [85574]: https://github.com/rust-lang/rust/issues/85574\n [86831]: https://github.com/rust-lang/rust/issues/86831\n [86063]: https://github.com/rust-lang/rust/issues/86063\n-[86831]: https://github.com/rust-lang/rust/issues/86831\n [79608]: https://github.com/rust-lang/rust/pull/79608\n [84988]: https://github.com/rust-lang/rust/pull/84988\n [84701]: https://github.com/rust-lang/rust/pull/84701\n@@ -893,7 +830,6 @@ related tools.\n [`Ordering::is_le`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_le\n [`Ordering::is_lt`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_lt\n [`Ordering::is_ne`]: https://doc.rust-lang.org/std/cmp/enum.Ordering.html#method.is_ne\n-[`OsStr::eq_ignore_ascii_case`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.eq_ignore_ascii_case\n [`OsStr::is_ascii`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.is_ascii\n [`OsStr::make_ascii_lowercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_lowercase\n [`OsStr::make_ascii_uppercase`]: https://doc.rust-lang.org/std/ffi/struct.OsStr.html#method.make_ascii_uppercase\n@@ -1224,7 +1160,6 @@ Internal Only\n [80053]: https://github.com/rust-lang/rust/pull/80053\n [79502]: https://github.com/rust-lang/rust/pull/79502\n [75180]: https://github.com/rust-lang/rust/pull/75180\n-[79135]: https://github.com/rust-lang/rust/pull/79135\n [81521]: https://github.com/rust-lang/rust/pull/81521\n [80968]: https://github.com/rust-lang/rust/pull/80968\n [80959]: https://github.com/rust-lang/rust/pull/80959\n@@ -1538,7 +1473,6 @@ related tools.\n [`slice::select_nth_unstable`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable\n [`slice::select_nth_unstable_by`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable_by\n [`slice::select_nth_unstable_by_key`]: https://doc.rust-lang.org/nightly/std/primitive.slice.html#method.select_nth_unstable_by_key\n-[`hint::spin_loop`]: https://doc.rust-lang.org/stable/std/hint/fn.spin_loop.html\n [`Poll::is_ready`]: https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_ready\n [`Poll::is_pending`]: https://doc.rust-lang.org/stable/std/task/enum.Poll.html#method.is_pending\n [rustdoc-ws-post]: https://blog.guillaume-gomez.fr/articles/2020-11-11+New+doc+comment+handling+in+rustdoc\n@@ -1785,8 +1719,6 @@ Internal Only\n [74869]: https://github.com/rust-lang/rust/pull/74869/\n [73858]: https://github.com/rust-lang/rust/pull/73858/\n [75716]: https://github.com/rust-lang/rust/pull/75716/\n-[75908]: https://github.com/rust-lang/rust/pull/75908/\n-[75516]: https://github.com/rust-lang/rust/pull/75516/\n [75560]: https://github.com/rust-lang/rust/pull/75560/\n [75568]: https://github.com/rust-lang/rust/pull/75568/\n [75366]: https://github.com/rust-lang/rust/pull/75366/\n@@ -1801,7 +1733,6 @@ Internal Only\n [73583]: https://github.com/rust-lang/rust/pull/73583/\n [73084]: https://github.com/rust-lang/rust/pull/73084/\n [73197]: https://github.com/rust-lang/rust/pull/73197/\n-[72488]: https://github.com/rust-lang/rust/pull/72488/\n [cargo/8456]: https://github.com/rust-lang/cargo/pull/8456/\n [cargo/8478]: https://github.com/rust-lang/cargo/pull/8478/\n [cargo/8485]: https://github.com/rust-lang/cargo/pull/8485/\n@@ -1812,7 +1743,6 @@ Internal Only\n [`RangeInclusive::is_empty`]: https://doc.rust-lang.org/nightly/std/ops/struct.RangeInclusive.html#method.is_empty\n [`Result::as_deref_mut`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref_mut\n [`Result::as_deref`]: https://doc.rust-lang.org/nightly/std/result/enum.Result.html#method.as_deref\n-[`TypeId::of`]: https://doc.rust-lang.org/nightly/std/any/struct.TypeId.html#method.of\n [`Vec::leak`]: https://doc.rust-lang.org/nightly/std/vec/struct.Vec.html#method.leak\n [`f32::TAU`]: https://doc.rust-lang.org/nightly/std/f32/consts/constant.TAU.html\n [`f64::TAU`]: https://doc.rust-lang.org/nightly/std/f64/consts/constant.TAU.html\n@@ -2796,7 +2726,6 @@ Compatibility Notes\n [63803]: https://github.com/rust-lang/rust/pull/63803/\n [cargo/7450]: https://github.com/rust-lang/cargo/pull/7450/\n [cargo/7507]: https://github.com/rust-lang/cargo/pull/7507/\n-[cargo/7525]: https://github.com/rust-lang/cargo/pull/7525/\n [cargo/7333]: https://github.com/rust-lang/cargo/pull/7333/\n [(rfc 2008)]: https://rust-lang.github.io/rfcs/2008-non-exhaustive.html\n [`f32::to_be_bytes`]: https://doc.rust-lang.org/std/primitive.f32.html#method.to_be_bytes\n@@ -2929,13 +2858,6 @@ Compatibility Notes\n [63786]: https://github.com/rust-lang/rust/pull/63786/\n [63827]: https://github.com/rust-lang/rust/pull/63827/\n [63834]: https://github.com/rust-lang/rust/pull/63834/\n-[63927]: https://github.com/rust-lang/rust/pull/63927/\n-[63933]: https://github.com/rust-lang/rust/pull/63933/\n-[63934]: https://github.com/rust-lang/rust/pull/63934/\n-[63938]: https://github.com/rust-lang/rust/pull/63938/\n-[63940]: https://github.com/rust-lang/rust/pull/63940/\n-[63941]: https://github.com/rust-lang/rust/pull/63941/\n-[63945]: https://github.com/rust-lang/rust/pull/63945/\n [64010]: https://github.com/rust-lang/rust/pull/64010/\n [64028]: https://github.com/rust-lang/rust/pull/64028/\n [64334]: https://github.com/rust-lang/rust/pull/64334/\n@@ -3164,7 +3086,6 @@ Compatibility Notes\n [`Cell<slice>::as_slice_of_cells`]: https://doc.rust-lang.org/std/cell/struct.Cell.html#method.as_slice_of_cells\n [`DoubleEndedIterator::nth_back`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.nth_back\n [`Option::xor`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.xor\n-[`RefCell::try_borrow_unguarded`]: https://doc.rust-lang.org/std/cell/struct.RefCell.html#method.try_borrow_unguarded\n [`Wrapping::reverse_bits`]: https://doc.rust-lang.org/std/num/struct.Wrapping.html#method.reverse_bits\n [`i128::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i128.html#method.reverse_bits\n [`i16::reverse_bits`]: https://doc.rust-lang.org/std/primitive.i16.html#method.reverse_bits\n@@ -3663,7 +3584,6 @@ Compatibility Notes\n - [Libtest no longer creates a new thread for each test when\n   `--test-threads=1`.  It also runs the tests in deterministic order][56243]\n \n-[55982]: https://github.com/rust-lang/rust/pull/55982/\n [56243]: https://github.com/rust-lang/rust/pull/56243\n [56303]: https://github.com/rust-lang/rust/pull/56303/\n [56351]: https://github.com/rust-lang/rust/pull/56351/\n@@ -4063,7 +3983,6 @@ Cargo\n \n [52813]: https://github.com/rust-lang/rust/pull/52813/\n [53218]: https://github.com/rust-lang/rust/pull/53218/\n-[53555]: https://github.com/rust-lang/rust/issues/53555/\n [54057]: https://github.com/rust-lang/rust/pull/54057/\n [54240]: https://github.com/rust-lang/rust/pull/54240/\n [54430]: https://github.com/rust-lang/rust/pull/54430/\n@@ -4185,15 +4104,13 @@ Misc\n [53044]: https://github.com/rust-lang/rust/pull/53044/\n [53165]: https://github.com/rust-lang/rust/pull/53165/\n [53611]: https://github.com/rust-lang/rust/pull/53611/\n-[53213]: https://github.com/rust-lang/rust/pull/53213/\n [53236]: https://github.com/rust-lang/rust/pull/53236/\n [53272]: https://github.com/rust-lang/rust/pull/53272/\n [53370]: https://github.com/rust-lang/rust/pull/53370/\n [53459]: https://github.com/rust-lang/rust/pull/53459/\n [53774]: https://github.com/rust-lang/rust/pull/53774/\n [53822]: https://github.com/rust-lang/rust/pull/53822/\n [54057]: https://github.com/rust-lang/rust/pull/54057/\n-[54146]: https://github.com/rust-lang/rust/pull/54146/\n [54404]: https://github.com/rust-lang/rust/pull/54404/\n [cargo/5877]: https://github.com/rust-lang/cargo/pull/5877/\n [cargo/5878]: https://github.com/rust-lang/cargo/pull/5878/\n@@ -4301,12 +4218,10 @@ Compatibility Notes\n [52330]: https://github.com/rust-lang/rust/pull/52330/\n [52354]: https://github.com/rust-lang/rust/pull/52354/\n [52402]: https://github.com/rust-lang/rust/pull/52402/\n-[52103]: https://github.com/rust-lang/rust/pull/52103/\n [52197]: https://github.com/rust-lang/rust/pull/52197/\n [51807]: https://github.com/rust-lang/rust/pull/51807/\n [51899]: https://github.com/rust-lang/rust/pull/51899/\n [51912]: https://github.com/rust-lang/rust/pull/51912/\n-[51511]: https://github.com/rust-lang/rust/pull/51511/\n [51619]: https://github.com/rust-lang/rust/pull/51619/\n [51656]: https://github.com/rust-lang/rust/pull/51656/\n [51178]: https://github.com/rust-lang/rust/pull/51178/\n@@ -4446,7 +4361,6 @@ Compatibility Notes\n [50855]: https://github.com/rust-lang/rust/pull/50855/\n [51050]: https://github.com/rust-lang/rust/pull/51050/\n [51196]: https://github.com/rust-lang/rust/pull/51196/\n-[51200]: https://github.com/rust-lang/rust/pull/51200/\n [51241]: https://github.com/rust-lang/rust/pull/51241/\n [51276]: https://github.com/rust-lang/rust/pull/51276/\n [51298]: https://github.com/rust-lang/rust/pull/51298/\n@@ -4627,15 +4541,12 @@ Compatibility Notes\n [49664]: https://github.com/rust-lang/rust/pull/49664/\n [49699]: https://github.com/rust-lang/rust/pull/49699/\n [49707]: https://github.com/rust-lang/rust/pull/49707/\n-[49719]: https://github.com/rust-lang/rust/pull/49719/\n [49896]: https://github.com/rust-lang/rust/pull/49896/\n [49968]: https://github.com/rust-lang/rust/pull/49968/\n [50163]: https://github.com/rust-lang/rust/pull/50163\n [50177]: https://github.com/rust-lang/rust/pull/50177/\n [50378]: https://github.com/rust-lang/rust/pull/50378/\n-[50398]: https://github.com/rust-lang/rust/pull/50398/\n [50423]: https://github.com/rust-lang/rust/pull/50423/\n-[cargo/5203]: https://github.com/rust-lang/cargo/pull/5203/\n [cargo/5335]: https://github.com/rust-lang/cargo/pull/5335/\n [cargo/5359]: https://github.com/rust-lang/cargo/pull/5359/\n [cargo/5360]: https://github.com/rust-lang/cargo/pull/5360/\n@@ -4837,7 +4748,6 @@ Compatibility Notes\n [47813]: https://github.com/rust-lang/rust/pull/47813\n [48056]: https://github.com/rust-lang/rust/pull/48056\n [48125]: https://github.com/rust-lang/rust/pull/48125\n-[48166]: https://github.com/rust-lang/rust/pull/48166\n [48235]: https://github.com/rust-lang/rust/pull/48235\n [48274]: https://github.com/rust-lang/rust/pull/48274\n [48281]: https://github.com/rust-lang/rust/pull/48281\n@@ -4854,10 +4764,7 @@ Compatibility Notes\n [48978]: https://github.com/rust-lang/rust/pull/48978\n [49101]: https://github.com/rust-lang/rust/pull/49101\n [49109]: https://github.com/rust-lang/rust/pull/49109\n-[49121]: https://github.com/rust-lang/rust/pull/49121\n [49162]: https://github.com/rust-lang/rust/pull/49162\n-[49184]: https://github.com/rust-lang/rust/pull/49184\n-[49234]: https://github.com/rust-lang/rust/pull/49234\n [49255]: https://github.com/rust-lang/rust/pull/49255\n [49299]: https://github.com/rust-lang/rust/pull/49299\n [49305]: https://github.com/rust-lang/rust/pull/49305\n@@ -5104,7 +5011,6 @@ Compatibility Notes\n [44884]: https://github.com/rust-lang/rust/pull/44884\n [45198]: https://github.com/rust-lang/rust/pull/45198\n [45506]: https://github.com/rust-lang/rust/pull/45506\n-[45904]: https://github.com/rust-lang/rust/pull/45904\n [45990]: https://github.com/rust-lang/rust/pull/45990\n [46012]: https://github.com/rust-lang/rust/pull/46012\n [46077]: https://github.com/rust-lang/rust/pull/46077\n@@ -5116,7 +5022,6 @@ Compatibility Notes\n [46671]: https://github.com/rust-lang/rust/pull/46671\n [46713]: https://github.com/rust-lang/rust/pull/46713\n [46735]: https://github.com/rust-lang/rust/pull/46735\n-[46749]: https://github.com/rust-lang/rust/pull/46749\n [46760]: https://github.com/rust-lang/rust/pull/46760\n [46798]: https://github.com/rust-lang/rust/pull/46798\n [46828]: https://github.com/rust-lang/rust/pull/46828\n@@ -5287,7 +5192,6 @@ Compatibility Notes\n \n \n [42526]: https://github.com/rust-lang/rust/pull/42526\n-[43017]: https://github.com/rust-lang/rust/pull/43017\n [43716]: https://github.com/rust-lang/rust/pull/43716\n [43949]: https://github.com/rust-lang/rust/pull/43949\n [44015]: https://github.com/rust-lang/rust/pull/44015\n@@ -5517,8 +5421,6 @@ Cargo\n - [Added `--no-fail-fast` flag to cargo to run all benchmarks regardless of\n   failure.][cargo/4248]\n - [Changed the convention around which file is the crate root.][cargo/4259]\n-- [The `include`/`exclude` property in `Cargo.toml` now accepts gitignore paths\n-  instead of glob patterns][cargo/4270]. Glob patterns are now deprecated.\n \n Compatibility Notes\n -------------------\n@@ -5561,7 +5463,6 @@ Compatibility Notes\n [cargo/4229]: https://github.com/rust-lang/cargo/pull/4229\n [cargo/4248]: https://github.com/rust-lang/cargo/pull/4248\n [cargo/4259]: https://github.com/rust-lang/cargo/pull/4259\n-[cargo/4270]: https://github.com/rust-lang/cargo/pull/4270\n [`CStr::into_c_string`]: https://doc.rust-lang.org/std/ffi/struct.CStr.html#method.into_c_string\n [`CString::as_c_str`]: https://doc.rust-lang.org/std/ffi/struct.CString.html#method.as_c_str\n [`CString::into_boxed_c_str`]: https://doc.rust-lang.org/std/ffi/struct.CString.html#method.into_boxed_c_str\n@@ -5854,7 +5755,6 @@ Misc\n ----\n \n - [rustdoc can now use pulldown-cmark with the `--enable-commonmark` flag][40338]\n-- [Added rust-windbg script for better debugging on Windows][39983]\n - [Rust now uses the official cross compiler for NetBSD][40612]\n - [rustdoc now accepts `#` at the start of files][40828]\n - [Fixed jemalloc support for musl][41168]\n@@ -5889,7 +5789,6 @@ Compatibility Notes\n [38165]: https://github.com/rust-lang/rust/pull/38165\n [39799]: https://github.com/rust-lang/rust/pull/39799\n [39891]: https://github.com/rust-lang/rust/pull/39891\n-[39983]: https://github.com/rust-lang/rust/pull/39983\n [40043]: https://github.com/rust-lang/rust/pull/40043\n [40241]: https://github.com/rust-lang/rust/pull/40241\n [40338]: https://github.com/rust-lang/rust/pull/40338\n@@ -6185,7 +6084,6 @@ Compatibility Notes\n [cargo/3691]: https://github.com/rust-lang/cargo/pull/3691\n [cargo/3699]: https://github.com/rust-lang/cargo/pull/3699\n [cargo/3731]: https://github.com/rust-lang/cargo/pull/3731\n-[mdbook]: https://crates.io/crates/mdbook\n [ubook]: https://doc.rust-lang.org/unstable-book/\n \n \n@@ -6256,7 +6154,7 @@ Libraries\n * [Ctrl-Z returns from `Stdin.read()` when reading from the console on\n   Windows][38274]\n * [std: Fix partial writes in `LineWriter`][38062]\n-* [std: Clamp max read/write sizes on Unix][38062]\n+* [std: Clamp max read/write sizes on Unix][38622]\n * [Use more specific panic message for `&str` slicing errors][38066]\n * [`TcpListener::set_only_v6` is deprecated][38304]. This\n   functionality cannot be achieved in std currently.\n@@ -6322,15 +6220,14 @@ Compatibility Notes\n [38006]: https://github.com/rust-lang/rust/pull/38006\n [38051]: https://github.com/rust-lang/rust/pull/38051\n [38062]: https://github.com/rust-lang/rust/pull/38062\n-[38062]: https://github.com/rust-lang/rust/pull/38622\n+[38622]: https://github.com/rust-lang/rust/pull/38622\n [38066]: https://github.com/rust-lang/rust/pull/38066\n [38069]: https://github.com/rust-lang/rust/pull/38069\n [38131]: https://github.com/rust-lang/rust/pull/38131\n [38154]: https://github.com/rust-lang/rust/pull/38154\n [38274]: https://github.com/rust-lang/rust/pull/38274\n [38304]: https://github.com/rust-lang/rust/pull/38304\n [38313]: https://github.com/rust-lang/rust/pull/38313\n-[38314]: https://github.com/rust-lang/rust/pull/38314\n [38327]: https://github.com/rust-lang/rust/pull/38327\n [38401]: https://github.com/rust-lang/rust/pull/38401\n [38413]: https://github.com/rust-lang/rust/pull/38413\n@@ -6380,7 +6277,6 @@ Compatibility Notes\n [cargo/3546]: https://github.com/rust-lang/cargo/pull/3546\n [cargo/3557]: https://github.com/rust-lang/cargo/pull/3557\n [cargo/3604]: https://github.com/rust-lang/cargo/pull/3604\n-[RFC 1623]: https://github.com/rust-lang/rfcs/blob/master/text/1623-static.md\n \n \n Version 1.15.1 (2017-02-09)\n@@ -6595,7 +6491,6 @@ Compatibility Notes\n [38192]: https://github.com/rust-lang/rust/pull/38192\n [38279]: https://github.com/rust-lang/rust/pull/38279\n [38835]: https://github.com/rust-lang/rust/pull/38835\n-[RFC 1492]: https://github.com/rust-lang/rfcs/blob/master/text/1492-dotdot-in-patterns.md\n [RFC 1506]: https://github.com/rust-lang/rfcs/blob/master/text/1506-adt-kinds.md\n [RFC 1560]: https://github.com/rust-lang/rfcs/blob/master/text/1560-name-resolution.md\n [RFC 1681]: https://github.com/rust-lang/rfcs/blob/master/text/1681-macros-1.1.md\n@@ -6784,7 +6679,6 @@ Compatibility Notes\n [1.14wasm]: https://users.rust-lang.org/t/compiling-to-the-web-with-rust-and-emscripten/7627\n [36430]: https://github.com/rust-lang/rust/pull/36430\n [36595]: https://github.com/rust-lang/rust/pull/36595\n-[36595]: https://github.com/rust-lang/rust/pull/36595\n [36692]: https://github.com/rust-lang/rust/pull/36692\n [36767]: https://github.com/rust-lang/rust/pull/36767\n [36794]: https://github.com/rust-lang/rust/pull/36794\n@@ -7012,7 +6906,6 @@ Compatibility Notes\n [34623]: https://github.com/rust-lang/rust/pull/34623\n [34923]: https://github.com/rust-lang/rust/pull/34923\n [34942]: https://github.com/rust-lang/rust/pull/34942\n-[34982]: https://github.com/rust-lang/rust/pull/34982\n [35021]: https://github.com/rust-lang/rust/pull/35021\n [35048]: https://github.com/rust-lang/rust/pull/35048\n [35074]: https://github.com/rust-lang/rust/pull/35074\n@@ -7069,7 +6962,6 @@ Compatibility Notes\n [36586]: https://github.com/rust-lang/rust/pull/36586\n [36592]: https://github.com/rust-lang/rust/pull/36592\n [36631]: https://github.com/rust-lang/rust/pull/36631\n-[36639]: https://github.com/rust-lang/rust/pull/36639\n [36721]: https://github.com/rust-lang/rust/pull/36721\n [36727]: https://github.com/rust-lang/rust/pull/36727\n [36730]: https://github.com/rust-lang/rust/pull/36730\n@@ -7101,7 +6993,6 @@ Compatibility Notes\n [cargo/3205]: https://github.com/rust-lang/cargo/pull/3205\n [cargo/3241]: https://github.com/rust-lang/cargo/pull/3241\n [cargo/3242]: https://github.com/rust-lang/cargo/pull/3242\n-[rustup]: https://www.rustup.rs\n [`checked_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.checked_abs\n [`wrapping_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.wrapping_abs\n [`overflowing_abs`]: https://doc.rust-lang.org/std/primitive.i32.html#method.overflowing_abs\n@@ -8019,7 +7910,7 @@ Cargo\n   targets can be specified together. [RFC 1361].\n * [The environment variables `CARGO_TARGET_ROOT`, `RUSTC`, and\n   `RUSTDOC` take precedence over the `build.target-dir`,\n-  `build.rustc`, and `build.rustdoc` configuration values][1.8cv].\n+  `build.rustc`, and `build.rustdoc` configuration values][1.8cfv].\n * [The child process tree is killed on Windows when Cargo is\n   killed][1.8ck].\n * [The `build.target` configuration value sets the target platform,\n@@ -8069,7 +7960,7 @@ Compatibility Notes\n [1.8ck]: https://github.com/rust-lang/cargo/pull/2370\n [1.8ct]: https://github.com/rust-lang/cargo/pull/2335\n [1.8cu]: https://github.com/rust-lang/rust/pull/31390\n-[1.8cv]: https://github.com/rust-lang/cargo/issues/2365\n+[1.8cfv]: https://github.com/rust-lang/cargo/issues/2365\n [1.8cv]: https://github.com/rust-lang/rust/pull/30998\n [1.8h]: https://github.com/rust-lang/rust/pull/31460\n [1.8l]: https://github.com/rust-lang/rust/pull/31668\n@@ -8992,13 +8883,13 @@ Misc\n * The compiler gained many new extended error descriptions, which can\n   be accessed with the `--explain` flag.\n * The `dropck` pass, which checks that destructors can't access\n-  destroyed values, [has been rewritten][dropck]. This fixes some\n+  destroyed values, [has been rewritten][27261]. This fixes some\n   soundness holes, and as such will cause some previously-compiling\n   code to no longer build.\n * `rustc` now uses [LLVM to write archive files where possible][ar].\n   Eventually this will eliminate the compiler's dependency on the ar\n   utility.\n-* Rust has [preliminary support for i686 FreeBSD][fb] (it has long\n+* Rust has [preliminary support for i686 FreeBSD][26959] (it has long\n   supported FreeBSD on x86_64).\n * The [`unused_mut`][lum], [`unconditional_recursion`][lur],\n   [`improper_ctypes`][lic], and [`negate_unsigned`][lnu] lints are\n@@ -9037,17 +8928,16 @@ Misc\n [ar]: https://github.com/rust-lang/rust/pull/26926\n [b14]: https://static.rust-lang.org/dist/rust-beta-x86_64-pc-windows-msvc.msi\n [dms]: https://github.com/rust-lang/rust/pull/26241\n-[dropck]: https://github.com/rust-lang/rust/pull/27261\n+[27261]: https://github.com/rust-lang/rust/pull/27261\n [dropckrfc]: https://github.com/rust-lang/rfcs/blob/master/text/0769-sound-generic-drop.md\n [ds]: https://github.com/rust-lang/rust/pull/26818\n [dst1]: http://doc.rust-lang.org/nightly/std/mem/fn.size_of_val.html\n [dst2]: http://doc.rust-lang.org/nightly/std/mem/fn.align_of_val.html\n [dst3]: https://github.com/rust-lang/rust/pull/27351\n [e]: https://github.com/rust-lang/rust/pull/24793\n [f]: https://github.com/rust-lang/rust/pull/26588\n-[fb]: https://github.com/rust-lang/rust/pull/26959\n+[26959]: https://github.com/rust-lang/rust/pull/26959\n [fl]: https://github.com/rust-lang/rust-installer/pull/41\n-[hs]: http://doc.rust-lang.org/nightly/std/hash/trait.Hash.html#method.hash_slice\n [ie]: http://doc.rust-lang.org/nightly/std/io/struct.Error.html\n [iec]: http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.cause\n [iegm]: http://doc.rust-lang.org/nightly/std/io/struct.Error.html#method.get_mut\n@@ -9318,7 +9208,7 @@ Misc\n   to rustc.\n * [Android executables are always position independent][pie].\n * [The `drop_with_repr_extern` lint warns about mixing `repr(C)`\n-  with `Drop`][drop].\n+  with `Drop`][24935].\n \n [`str::split_whitespace`]: https://doc.rust-lang.org/nightly/std/primitive.str.html#method.split_whitespace\n [`FromRawFd`]: https://doc.rust-lang.org/nightly/std/os/unix/io/trait.FromRawFd.html\n@@ -9348,7 +9238,7 @@ Misc\n [`BinaryHeap`]: https://doc.rust-lang.org/nightly/std/collections/struct.BinaryHeap.html\n [ll]: https://github.com/rust-lang/rust/pull/26022\n [`split_off`]: https://doc.rust-lang.org/nightly/collections/linked_list/struct.LinkedList.html#method.split_off\n-[drop]: https://github.com/rust-lang/rust/pull/24935\n+[24935]: https://github.com/rust-lang/rust/pull/24935\n \n Version 1.0.0 (2015-05-15)\n ========================\n@@ -9401,15 +9291,15 @@ Language\n   property: generic code cannot behave differently for different type\n   arguments except in minor ways.\n * The `unsafe_destructor` feature is now deprecated in favor of the\n-  [new `dropck`][dropck]. This change is a major reduction in unsafe\n+  [new `dropck`][rfc769]. This change is a major reduction in unsafe\n   code.\n \n Libraries\n ---------\n \n * The `thread_local` module [has been renamed to `std::thread`][th].\n * The methods of `IteratorExt` [have been moved to the `Iterator`\n-  trait itself][ie].\n+  trait itself][23300].\n * Several traits that implement Rust's conventions for type\n   conversions, `AsMut`, `AsRef`, `From`, and `Into` have been\n   [centralized in the `std::convert` module][con].\n@@ -9428,7 +9318,7 @@ Libraries\n * [In method resolution, object methods are resolved before inherent\n   methods][meth].\n * [`String::from_str` has been deprecated in favor of the `From` impl,\n-  `String::from`][sf].\n+  `String::from`][24517].\n * [`io::Error` implements `Sync`][ios].\n * [The `words` method on `&str` has been replaced with\n   `split_whitespace`][sw], to avoid answering the tricky question, 'what is\n@@ -9476,15 +9366,15 @@ Misc\n [con]: https://github.com/rust-lang/rust/pull/23875\n [cr]: https://github.com/rust-lang/rust/pull/23419\n [fe]: https://github.com/rust-lang/rust/pull/23879\n-[ie]: https://github.com/rust-lang/rust/pull/23300\n+[23300]: https://github.com/rust-lang/rust/pull/23300\n [inv]: https://github.com/rust-lang/rust/pull/23938\n [ios]: https://github.com/rust-lang/rust/pull/24133\n [lex]: https://github.com/rust-lang/rfcs/blob/master/text/0879-small-base-lexing.md\n [lt]: https://github.com/rust-lang/rust/pull/24057\n [meth]: https://github.com/rust-lang/rust/pull/24056\n [pat]: https://github.com/rust-lang/rfcs/blob/master/text/0528-string-patterns.md\n [po]: https://github.com/rust-lang/rust/pull/24270\n-[sf]: https://github.com/rust-lang/rust/pull/24517\n+[24517]: https://github.com/rust-lang/rust/pull/24517\n [slp]: https://github.com/rust-lang/rust/pull/23949\n [spl]: https://github.com/rust-lang/rfcs/blob/master/text/0979-align-splitn-with-other-languages.md\n [sw]: https://github.com/rust-lang/rfcs/blob/master/text/1054-str-words.md\n@@ -9502,7 +9392,7 @@ Misc\n [conversion]: https://github.com/rust-lang/rfcs/pull/529\n [num-traits]: https://github.com/rust-lang/rust/pull/23549\n [index-value]: https://github.com/rust-lang/rust/pull/23601\n-[dropck]: https://github.com/rust-lang/rfcs/pull/769\n+[rfc769]: https://github.com/rust-lang/rfcs/pull/769\n [ci-compare]: https://gist.github.com/brson/a30a77836fbec057cbee\n [fn-inherit]: https://github.com/rust-lang/rust/pull/23282\n [fn-blanket]: https://github.com/rust-lang/rust/pull/23895"}, {"sha": "885537a212fe10197adc6f4f14c04815f38e9220", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def::Res;\n use rustc_hir::definitions::DefPathData;\n use rustc_span::hygiene::ExpnId;\n use rustc_span::source_map::{respan, DesugaringKind, Span, Spanned};\n-use rustc_span::symbol::{sym, Ident, Symbol};\n+use rustc_span::symbol::{sym, Ident};\n use rustc_span::DUMMY_SP;\n \n impl<'hir> LoweringContext<'_, 'hir> {\n@@ -1204,11 +1204,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         };\n \n         let fields = self.arena.alloc_from_iter(\n-            e1.iter().map(|e| (\"start\", e)).chain(e2.iter().map(|e| (\"end\", e))).map(|(s, e)| {\n-                let expr = self.lower_expr(&e);\n-                let ident = Ident::new(Symbol::intern(s), self.lower_span(e.span));\n-                self.expr_field(ident, expr, e.span)\n-            }),\n+            e1.iter().map(|e| (sym::start, e)).chain(e2.iter().map(|e| (sym::end, e))).map(\n+                |(s, e)| {\n+                    let expr = self.lower_expr(&e);\n+                    let ident = Ident::new(s, self.lower_span(e.span));\n+                    self.expr_field(ident, expr, e.span)\n+                },\n+            ),\n         );\n \n         hir::ExprKind::Struct("}, {"sha": "87b0a887d1cc47fb1fc38ea6b32052853c45f864", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -312,6 +312,7 @@ fn translate_outlives_facts(typeck: &mut TypeChecker<'_, '_>) {\n     }\n }\n \n+#[track_caller]\n fn mirbug(tcx: TyCtxt<'_>, span: Span, msg: &str) {\n     // We sometimes see MIR failures (notably predicate failures) due to\n     // the fact that we check rvalue sized predicates here. So use `delay_span_bug`"}, {"sha": "76f4df6ec2da8c4080cea1bc4fc93fff2ef34e38", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -293,10 +293,6 @@ impl GenericArg<'_> {\n         }\n     }\n \n-    pub fn is_const(&self) -> bool {\n-        matches!(self, GenericArg::Const(_))\n-    }\n-\n     pub fn is_synthetic(&self) -> bool {\n         matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::empty())\n     }\n@@ -318,6 +314,13 @@ impl GenericArg<'_> {\n             GenericArg::Infer(_) => ast::ParamKindOrd::Infer,\n         }\n     }\n+\n+    pub fn is_ty_or_const(&self) -> bool {\n+        match self {\n+            GenericArg::Lifetime(_) => false,\n+            GenericArg::Type(_) | GenericArg::Const(_) | GenericArg::Infer(_) => true,\n+        }\n+    }\n }\n \n #[derive(Debug, HashStable_Generic)]"}, {"sha": "c1cca834f2b7bdf1b3b9122aab18fcd03a4b29b5", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::print::Print;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Const, DefIdTree, InferConst, Ty, TyCtxt, TypeFoldable, TypeFolder};\n use rustc_span::symbol::kw;\n-use rustc_span::Span;\n+use rustc_span::{sym, Span};\n use std::borrow::Cow;\n \n struct FindHirNodeVisitor<'a, 'tcx> {\n@@ -1003,9 +1003,9 @@ impl<'tcx> TypeFolder<'tcx> for ResolvedTypeParamEraser<'tcx> {\n             | ty::Opaque(..)\n             | ty::Projection(_)\n             | ty::Never => t.super_fold_with(self),\n-            ty::Array(ty, c) => self\n-                .tcx()\n-                .mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, Symbol::intern(\"N\")))),\n+            ty::Array(ty, c) => {\n+                self.tcx().mk_ty(ty::Array(self.fold_ty(ty), self.replace_infers(c, 0, sym::N)))\n+            }\n             // We don't want to hide type params that haven't been resolved yet.\n             // This would be the type that will be written out with the type param\n             // name in the output."}, {"sha": "65443fd88d7339728c2115d6c599dca6ffa512ac", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -152,7 +152,7 @@ impl<'tcx> Elaborator<'tcx> {\n                         obligation.cause.clone(),\n                     )\n                 });\n-                debug!(\"super_predicates: data={:?}\", data);\n+                debug!(?data, ?obligations, \"super_predicates\");\n \n                 // Only keep those bounds that we haven't already seen.\n                 // This is necessary to prevent infinite recursion in some"}, {"sha": "0bd96f8f865fcaa33f4882a1c1f5535802300765", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -31,6 +31,13 @@ impl GenericParamDefKind {\n             GenericParamDefKind::Const { .. } => ast::ParamKindOrd::Const,\n         }\n     }\n+\n+    pub fn is_ty_or_const(&self) -> bool {\n+        match self {\n+            GenericParamDefKind::Lifetime => false,\n+            GenericParamDefKind::Type { .. } | GenericParamDefKind::Const { .. } => true,\n+        }\n+    }\n }\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]"}, {"sha": "7b5905fddc9e53329e7c81b9f016c61e24b68bf3", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -188,6 +188,11 @@ pub trait Printer<'tcx>: Sized {\n             own_params.start = 1;\n         }\n \n+        // If we're in verbose mode, then print default-equal args too\n+        if self.tcx().sess.verbose() {\n+            return &substs[own_params];\n+        }\n+\n         // Don't print args that are the defaults of their respective parameters.\n         own_params.end -= generics\n             .params"}, {"sha": "b2ae6e6fae6fd8141697c196c8e170f8fcb099ae", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -1784,10 +1784,11 @@ impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self = print_prefix(self)?;\n \n         // Don't print `'_` if there's no unerased regions.\n-        let print_regions = args.iter().any(|arg| match arg.unpack() {\n-            GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n-            _ => false,\n-        });\n+        let print_regions = self.tcx.sess.verbose()\n+            || args.iter().any(|arg| match arg.unpack() {\n+                GenericArgKind::Lifetime(r) => *r != ty::ReErased,\n+                _ => false,\n+            });\n         let args = args.iter().cloned().filter(|arg| match arg.unpack() {\n             GenericArgKind::Lifetime(_) => print_regions,\n             _ => true,"}, {"sha": "f99d5cfad0ab81a01f4ba65216b3d4100ca1e1c8", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -208,6 +208,7 @@ symbols! {\n         LinkedList,\n         LintPass,\n         Mutex,\n+        N,\n         None,\n         Ok,\n         Option,\n@@ -327,6 +328,7 @@ symbols! {\n         array,\n         arrays,\n         as_ptr,\n+        as_ref,\n         as_str,\n         asm,\n         asm_const,\n@@ -593,6 +595,7 @@ symbols! {\n         enable,\n         enclosing_scope,\n         encode,\n+        end,\n         env,\n         eq,\n         ermsb_target_feature,"}, {"sha": "577b96f3a400ba5e331f7803f4c9290de27a80db", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -1225,6 +1225,10 @@ fn assemble_candidates_from_object_ty<'cx, 'tcx>(\n     );\n }\n \n+#[tracing::instrument(\n+    level = \"debug\",\n+    skip(selcx, candidate_set, ctor, env_predicates, potentially_unnormalized_candidates)\n+)]\n fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n@@ -1233,8 +1237,6 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     env_predicates: impl Iterator<Item = ty::Predicate<'tcx>>,\n     potentially_unnormalized_candidates: bool,\n ) {\n-    debug!(?obligation, \"assemble_candidates_from_predicates\");\n-\n     let infcx = selcx.infcx();\n     for predicate in env_predicates {\n         debug!(?predicate);\n@@ -1270,13 +1272,12 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n     }\n }\n \n+#[tracing::instrument(level = \"debug\", skip(selcx, obligation, candidate_set))]\n fn assemble_candidates_from_impls<'cx, 'tcx>(\n     selcx: &mut SelectionContext<'cx, 'tcx>,\n     obligation: &ProjectionTyObligation<'tcx>,\n     candidate_set: &mut ProjectionTyCandidateSet<'tcx>,\n ) {\n-    debug!(\"assemble_candidates_from_impls\");\n-\n     // If we are resolving `<T as TraitRef<...>>::Item == Type`,\n     // start out by selecting the predicate `T as TraitRef<...>`:\n     let poly_trait_ref = ty::Binder::dummy(obligation.predicate.trait_ref(selcx.tcx()));"}, {"sha": "b573c4b43906c58ed3e19dd7ceca3ad9a6fcdf51", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -173,6 +173,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let needs_infer = stack.obligation.predicate.has_infer_types_or_consts();\n \n+        let sized_predicate = self.tcx().lang_items().sized_trait()\n+            == Some(stack.obligation.predicate.skip_binder().def_id());\n+\n         // If there are STILL multiple candidates, we can further\n         // reduce the list by dropping duplicates -- including\n         // resolving specializations.\n@@ -181,6 +184,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             while i < candidates.len() {\n                 let is_dup = (0..candidates.len()).filter(|&j| i != j).any(|j| {\n                     self.candidate_should_be_dropped_in_favor_of(\n+                        sized_predicate,\n                         &candidates[i],\n                         &candidates[j],\n                         needs_infer,\n@@ -338,13 +342,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         Ok(candidates)\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_candidates_from_projected_tys(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        debug!(?obligation, \"assemble_candidates_from_projected_tys\");\n-\n         // Before we go into the whole placeholder thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.skip_binder().trait_ref.self_ty().kind() {\n@@ -369,12 +372,13 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// supplied to find out whether it is listed among them.\n     ///\n     /// Never affects the inference environment.\n+    #[tracing::instrument(level = \"debug\", skip(self, stack, candidates))]\n     fn assemble_candidates_from_caller_bounds<'o>(\n         &mut self,\n         stack: &TraitObligationStack<'o, 'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) -> Result<(), SelectionError<'tcx>> {\n-        debug!(?stack.obligation, \"assemble_candidates_from_caller_bounds\");\n+        debug!(?stack.obligation);\n \n         let all_bounds = stack\n             .obligation\n@@ -876,14 +880,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         };\n     }\n \n+    #[tracing::instrument(level = \"debug\", skip(self, obligation, candidates))]\n     fn assemble_candidates_for_trait_alias(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         // Okay to skip binder here because the tests we do below do not involve bound regions.\n         let self_ty = obligation.self_ty().skip_binder();\n-        debug!(?self_ty, \"assemble_candidates_for_trait_alias\");\n+        debug!(?self_ty);\n \n         let def_id = obligation.predicate.def_id();\n \n@@ -894,21 +899,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n     /// Assembles the trait which are built-in to the language itself:\n     /// `Copy`, `Clone` and `Sized`.\n+    #[tracing::instrument(level = \"debug\", skip(self, candidates))]\n     fn assemble_builtin_bound_candidates(\n         &mut self,\n         conditions: BuiltinImplConditions<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n         match conditions {\n             BuiltinImplConditions::Where(nested) => {\n-                debug!(?nested, \"builtin_bound\");\n                 candidates\n                     .vec\n                     .push(BuiltinCandidate { has_nested: !nested.skip_binder().is_empty() });\n             }\n             BuiltinImplConditions::None => {}\n             BuiltinImplConditions::Ambiguous => {\n-                debug!(\"assemble_builtin_bound_candidates: ambiguous builtin\");\n                 candidates.ambiguous = true;\n             }\n         }"}, {"sha": "32518ffb0715339847378a1fd17d3240fd555b9d", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -201,6 +201,7 @@ struct EvaluatedCandidate<'tcx> {\n }\n \n /// When does the builtin impl for `T: Trait` apply?\n+#[derive(Debug)]\n enum BuiltinImplConditions<'tcx> {\n     /// The impl is conditional on `T1, T2, ...: Trait`.\n     Where(ty::Binder<'tcx, Vec<Ty<'tcx>>>),\n@@ -344,7 +345,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n             Err(e) => Err(e),\n             Ok(candidate) => {\n-                debug!(?candidate);\n+                debug!(?candidate, \"confirmed\");\n                 Ok(Some(candidate))\n             }\n         }\n@@ -1523,6 +1524,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// See the comment for \"SelectionCandidate\" for more details.\n     fn candidate_should_be_dropped_in_favor_of(\n         &mut self,\n+        sized_predicate: bool,\n         victim: &EvaluatedCandidate<'tcx>,\n         other: &EvaluatedCandidate<'tcx>,\n         needs_infer: bool,\n@@ -1594,6 +1596,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             // Drop otherwise equivalent non-const fn pointer candidates\n             (FnPointerCandidate { .. }, FnPointerCandidate { is_const: false }) => true,\n \n+            // If obligation is a sized predicate or the where-clause bound is\n+            // global, prefer the projection or object candidate. See issue\n+            // #50825 and #89352.\n+            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n+                sized_predicate || is_global(cand)\n+            }\n+            (ParamCandidate(ref cand), ObjectCandidate(_) | ProjectionCandidate(_)) => {\n+                !(sized_predicate || is_global(cand))\n+            }\n+\n             // Global bounds from the where clause should be ignored\n             // here (see issue #50825). Otherwise, we have a where\n             // clause so don't go around looking for impls.\n@@ -1609,15 +1621,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 | BuiltinUnsizeCandidate\n                 | TraitUpcastingUnsizeCandidate(_)\n                 | BuiltinCandidate { .. }\n-                | TraitAliasCandidate(..)\n-                | ObjectCandidate(_)\n-                | ProjectionCandidate(_),\n+                | TraitAliasCandidate(..),\n             ) => !is_global(cand),\n-            (ObjectCandidate(_) | ProjectionCandidate(_), ParamCandidate(ref cand)) => {\n-                // Prefer these to a global where-clause bound\n-                // (see issue #50825).\n-                is_global(cand)\n-            }\n             (\n                 ImplCandidate(_)\n                 | ClosureCandidate"}, {"sha": "34f93a517cefb7161f79abe08aeb7bec06b1b079", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -288,7 +288,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     /// Given the type/lifetime/const arguments provided to some path (along with\n     /// an implicit `Self`, if this is a trait reference), returns the complete\n     /// set of substitutions. This may involve applying defaulted type parameters.\n-    /// Also returns back constraints on associated types.\n+    /// Constraints on associated typess are created from `create_assoc_bindings_for_generic_args`.\n     ///\n     /// Example:\n     ///\n@@ -302,7 +302,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n     ///    which will have been resolved to a `def_id`\n     /// 3. The `generic_args` contains info on the `<...>` contents. The `usize` type\n     ///    parameters are returned in the `SubstsRef`, the associated type bindings like\n-    ///    `Output = u32` are returned in the `Vec<ConvertedBinding...>` result.\n+    ///    `Output = u32` are returned from `create_assoc_bindings_for_generic_args`.\n     ///\n     /// Note that the type listing given here is *exactly* what the user provided.\n     ///"}, {"sha": "5057be70c486980cb67e5a234f7f0e15c9c7da8a", "filename": "compiler/rustc_typeck/src/check/method/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -359,6 +359,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let (obligation, substs) =\n             self.obligation_for_method(span, trait_def_id, self_ty, opt_input_types);\n \n+        debug!(?obligation);\n+\n         // Now we want to know if this can be matched\n         if !self.predicate_may_hold(&obligation) {\n             debug!(\"--> Cannot match obligation\");"}, {"sha": "de83e45329b396f4d9ae74da3bfd4ef23bc3eee4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{self, DefIdTree, ToPredicate, Ty, TyCtxt, TypeFoldable};\n use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n-use rustc_span::{source_map, FileName, MultiSpan, Span, Symbol};\n+use rustc_span::{source_map, FileName, MultiSpan, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use rustc_trait_selection::traits::{\n     FulfillmentError, Obligation, ObligationCause, ObligationCauseCode,\n@@ -1524,8 +1524,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             // Explicitly ignore the `Pin::as_ref()` method as `Pin` does not\n                             // implement the `AsRef` trait.\n                             let skip = skippable.contains(&did)\n-                                || ((\"Pin::new\" == *pre)\n-                                    && (Symbol::intern(\"as_ref\") == item_name.name));\n+                                || ((\"Pin::new\" == *pre) && (sym::as_ref == item_name.name));\n                             // Make sure the method is defined for the *actual* receiver: we don't\n                             // want to treat `Box<Self>` as a receiver if it only works because of\n                             // an autoderef to `&self`"}, {"sha": "5ff2a74754117d988c44c17a5b12971f89faac3c", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 202, "deletions": 204, "changes": 406, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -18,238 +18,236 @@ use super::{bad_placeholder, is_suggestable_infer_ty};\n /// Computes the relevant generic parameter for a potential generic const argument.\n ///\n /// This should be called using the query `tcx.opt_const_param_of`.\n+#[instrument(level = \"debug\", skip(tcx))]\n pub(super) fn opt_const_param_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<DefId> {\n     // FIXME(generic_arg_infer): allow for returning DefIds of inference of\n     // GenericArg::Infer below. This may require a change where GenericArg::Infer has some flag\n     // for const or type.\n     use hir::*;\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n \n-    if let Node::AnonConst(_) = tcx.hir().get(hir_id) {\n-        let parent_node_id = tcx.hir().get_parent_node(hir_id);\n-        let parent_node = tcx.hir().get(parent_node_id);\n+    match tcx.hir().get(hir_id) {\n+        Node::AnonConst(_) => (),\n+        _ => return None,\n+    };\n \n-        match parent_node {\n-            // This match arm is for when the def_id appears in a GAT whose\n-            // path can't be resolved without typechecking e.g.\n-            //\n-            // trait Foo {\n-            //   type Assoc<const N: usize>;\n-            //   fn foo() -> Self::Assoc<3>;\n-            // }\n-            //\n-            // In the above code we would call this query with the def_id of 3 and\n-            // the parent_node we match on would be the hir node for Self::Assoc<3>\n-            //\n-            // `Self::Assoc<3>` cant be resolved without typchecking here as we\n-            // didnt write <Self as Foo>::Assoc<3>. If we did then another match\n-            // arm would handle this.\n-            //\n-            // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n-            Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n-                // Find the Item containing the associated type so we can create an ItemCtxt.\n-                // Using the ItemCtxt convert the HIR for the unresolved assoc type into a\n-                // ty which is a fully resolved projection.\n-                // For the code example above, this would mean converting Self::Assoc<3>\n-                // into a ty::Projection(<Self as Foo>::Assoc<3>)\n-                let item_hir_id = tcx\n-                    .hir()\n-                    .parent_iter(hir_id)\n-                    .filter(|(_, node)| matches!(node, Node::Item(_)))\n-                    .map(|(id, _)| id)\n-                    .next()\n-                    .unwrap();\n-                let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n-                let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n-                let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n-\n-                // Iterate through the generics of the projection to find the one that corresponds to\n-                // the def_id that this query was called with. We filter to only const args here as a\n-                // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n-                // but it can't hurt to be safe ^^\n-                if let ty::Projection(projection) = ty.kind() {\n-                    let generics = tcx.generics_of(projection.item_def_id);\n-\n-                    let arg_index = segment\n-                        .args\n-                        .and_then(|args| {\n-                            args.args\n-                                .iter()\n-                                .filter(|arg| arg.is_const())\n-                                .position(|arg| arg.id() == hir_id)\n-                        })\n-                        .unwrap_or_else(|| {\n-                            bug!(\"no arg matching AnonConst in segment\");\n-                        });\n+    let parent_node_id = tcx.hir().get_parent_node(hir_id);\n+    let parent_node = tcx.hir().get(parent_node_id);\n \n-                    return generics\n-                        .params\n-                        .iter()\n-                        .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                        .nth(arg_index)\n-                        .map(|param| param.def_id);\n-                }\n-\n-                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n-                tcx.sess.delay_span_bug(\n-                    tcx.def_span(def_id),\n-                    \"unexpected non-GAT usage of an anon const\",\n-                );\n-                return None;\n-            }\n-            Node::Expr(&Expr {\n-                kind:\n-                    ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n-                ..\n-            }) => {\n-                let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n-                let tables = tcx.typeck(body_owner);\n-                // This may fail in case the method/path does not actually exist.\n-                // As there is no relevant param for `def_id`, we simply return\n-                // `None` here.\n-                let type_dependent_def = tables.type_dependent_def_id(parent_node_id)?;\n-                let idx = segment\n+    let (generics, arg_idx) = match parent_node {\n+        // This match arm is for when the def_id appears in a GAT whose\n+        // path can't be resolved without typechecking e.g.\n+        //\n+        // trait Foo {\n+        //   type Assoc<const N: usize>;\n+        //   fn foo() -> Self::Assoc<3>;\n+        // }\n+        //\n+        // In the above code we would call this query with the def_id of 3 and\n+        // the parent_node we match on would be the hir node for Self::Assoc<3>\n+        //\n+        // `Self::Assoc<3>` cant be resolved without typchecking here as we\n+        // didnt write <Self as Foo>::Assoc<3>. If we did then another match\n+        // arm would handle this.\n+        //\n+        // I believe this match arm is only needed for GAT but I am not 100% sure - BoxyUwU\n+        Node::Ty(hir_ty @ Ty { kind: TyKind::Path(QPath::TypeRelative(_, segment)), .. }) => {\n+            // Find the Item containing the associated type so we can create an ItemCtxt.\n+            // Using the ItemCtxt convert the HIR for the unresolved assoc type into a\n+            // ty which is a fully resolved projection.\n+            // For the code example above, this would mean converting Self::Assoc<3>\n+            // into a ty::Projection(<Self as Foo>::Assoc<3>)\n+            let item_hir_id = tcx\n+                .hir()\n+                .parent_iter(hir_id)\n+                .filter(|(_, node)| matches!(node, Node::Item(_)))\n+                .map(|(id, _)| id)\n+                .next()\n+                .unwrap();\n+            let item_did = tcx.hir().local_def_id(item_hir_id).to_def_id();\n+            let item_ctxt = &ItemCtxt::new(tcx, item_did) as &dyn crate::astconv::AstConv<'_>;\n+            let ty = item_ctxt.ast_ty_to_ty(hir_ty);\n+\n+            // Iterate through the generics of the projection to find the one that corresponds to\n+            // the def_id that this query was called with. We filter to only const args here as a\n+            // precaution for if it's ever allowed to elide lifetimes in GAT's. It currently isn't\n+            // but it can't hurt to be safe ^^\n+            if let ty::Projection(projection) = ty.kind() {\n+                let generics = tcx.generics_of(projection.item_def_id);\n+\n+                let arg_index = segment\n                     .args\n                     .and_then(|args| {\n                         args.args\n                             .iter()\n-                            .filter(|arg| arg.is_const())\n+                            .filter(|arg| arg.is_ty_or_const())\n                             .position(|arg| arg.id() == hir_id)\n                     })\n                     .unwrap_or_else(|| {\n                         bug!(\"no arg matching AnonConst in segment\");\n                     });\n \n-                tcx.generics_of(type_dependent_def)\n-                    .params\n-                    .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                    .nth(idx)\n-                    .map(|param| param.def_id)\n+                (generics, arg_index)\n+            } else {\n+                // I dont think it's possible to reach this but I'm not 100% sure - BoxyUwU\n+                tcx.sess.delay_span_bug(\n+                    tcx.def_span(def_id),\n+                    \"unexpected non-GAT usage of an anon const\",\n+                );\n+                return None;\n             }\n+        }\n+        Node::Expr(&Expr {\n+            kind:\n+                ExprKind::MethodCall(segment, ..) | ExprKind::Path(QPath::TypeRelative(_, segment)),\n+            ..\n+        }) => {\n+            let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+            let tables = tcx.typeck(body_owner);\n+            // This may fail in case the method/path does not actually exist.\n+            // As there is no relevant param for `def_id`, we simply return\n+            // `None` here.\n+            let type_dependent_def = tables.type_dependent_def_id(parent_node_id)?;\n+            let idx = segment\n+                .args\n+                .and_then(|args| {\n+                    args.args\n+                        .iter()\n+                        .filter(|arg| arg.is_ty_or_const())\n+                        .position(|arg| arg.id() == hir_id)\n+                })\n+                .unwrap_or_else(|| {\n+                    bug!(\"no arg matching AnonConst in segment\");\n+                });\n \n-            Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n-            | Node::Expr(&Expr { kind: ExprKind::Path(_) | ExprKind::Struct(..), .. })\n-            | Node::TraitRef(..)\n-            | Node::Pat(_) => {\n-                let path = match parent_node {\n-                    Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })\n-                    | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n-                    Node::Expr(&Expr {\n-                        kind:\n-                            ExprKind::Path(QPath::Resolved(_, path))\n-                            | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n-                        ..\n-                    }) => {\n-                        let body_owner =\n-                            tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n-                        let _tables = tcx.typeck(body_owner);\n-                        &*path\n-                    }\n-                    Node::Pat(pat) => {\n-                        if let Some(path) = get_path_containing_arg_in_pat(pat, hir_id) {\n-                            path\n-                        } else {\n-                            tcx.sess.delay_span_bug(\n-                                tcx.def_span(def_id),\n-                                &format!(\n-                                    \"unable to find const parent for {} in pat {:?}\",\n-                                    hir_id, pat\n-                                ),\n-                            );\n-                            return None;\n-                        }\n-                    }\n-                    _ => {\n-                        tcx.sess.delay_span_bug(\n-                            tcx.def_span(def_id),\n-                            &format!(\"unexpected const parent path {:?}\", parent_node),\n-                        );\n-                        return None;\n-                    }\n-                };\n-\n-                // We've encountered an `AnonConst` in some path, so we need to\n-                // figure out which generic parameter it corresponds to and return\n-                // the relevant type.\n-                let filtered = path\n-                    .segments\n-                    .iter()\n-                    .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n-                    .find_map(|(args, seg)| {\n-                        args.iter()\n-                            .filter(|arg| arg.is_const())\n-                            .position(|arg| arg.id() == hir_id)\n-                            .map(|index| (index, seg))\n-                    });\n-                let (arg_index, segment) = match filtered {\n-                    None => {\n-                        tcx.sess.delay_span_bug(\n-                            tcx.def_span(def_id),\n-                            \"no arg matching AnonConst in path\",\n-                        );\n-                        return None;\n-                    }\n-                    Some(inner) => inner,\n-                };\n-\n-                // Try to use the segment resolution if it is valid, otherwise we\n-                // default to the path resolution.\n-                let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n-                use def::CtorOf;\n-                let generics = match res {\n-                    Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => tcx.generics_of(\n-                        tcx.parent(def_id).and_then(|def_id| tcx.parent(def_id)).unwrap(),\n-                    ),\n-                    Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n-                        tcx.generics_of(tcx.parent(def_id).unwrap())\n-                    }\n-                    // Other `DefKind`s don't have generics and would ICE when calling\n-                    // `generics_of`.\n-                    Res::Def(\n-                        DefKind::Struct\n-                        | DefKind::Union\n-                        | DefKind::Enum\n-                        | DefKind::Trait\n-                        | DefKind::OpaqueTy\n-                        | DefKind::TyAlias\n-                        | DefKind::ForeignTy\n-                        | DefKind::TraitAlias\n-                        | DefKind::AssocTy\n-                        | DefKind::Fn\n-                        | DefKind::AssocFn\n-                        | DefKind::AssocConst\n-                        | DefKind::Impl,\n-                        def_id,\n-                    ) => tcx.generics_of(def_id),\n-                    Res::Err => {\n-                        tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n-                        return None;\n-                    }\n-                    _ => {\n-                        // If the user tries to specify generics on a type that does not take them,\n-                        // e.g. `usize<T>`, we may hit this branch, in which case we treat it as if\n-                        // no arguments have been passed. An error should already have been emitted.\n+            (tcx.generics_of(type_dependent_def), idx)\n+        }\n+\n+        Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n+        | Node::Expr(&Expr { kind: ExprKind::Path(_) | ExprKind::Struct(..), .. })\n+        | Node::TraitRef(..)\n+        | Node::Pat(_) => {\n+            let path = match parent_node {\n+                Node::Ty(&Ty { kind: TyKind::Path(QPath::Resolved(_, path)), .. })\n+                | Node::TraitRef(&TraitRef { path, .. }) => &*path,\n+                Node::Expr(&Expr {\n+                    kind:\n+                        ExprKind::Path(QPath::Resolved(_, path))\n+                        | ExprKind::Struct(&QPath::Resolved(_, path), ..),\n+                    ..\n+                }) => {\n+                    let body_owner = tcx.hir().local_def_id(tcx.hir().enclosing_body_owner(hir_id));\n+                    let _tables = tcx.typeck(body_owner);\n+                    &*path\n+                }\n+                Node::Pat(pat) => {\n+                    if let Some(path) = get_path_containing_arg_in_pat(pat, hir_id) {\n+                        path\n+                    } else {\n                         tcx.sess.delay_span_bug(\n                             tcx.def_span(def_id),\n-                            &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),\n+                            &format!(\"unable to find const parent for {} in pat {:?}\", hir_id, pat),\n                         );\n                         return None;\n                     }\n-                };\n-\n-                generics\n-                    .params\n-                    .iter()\n-                    .filter(|param| matches!(param.kind, ty::GenericParamDefKind::Const { .. }))\n-                    .nth(arg_index)\n-                    .map(|param| param.def_id)\n+                }\n+                _ => {\n+                    tcx.sess.delay_span_bug(\n+                        tcx.def_span(def_id),\n+                        &format!(\"unexpected const parent path {:?}\", parent_node),\n+                    );\n+                    return None;\n+                }\n+            };\n+\n+            // We've encountered an `AnonConst` in some path, so we need to\n+            // figure out which generic parameter it corresponds to and return\n+            // the relevant type.\n+            let filtered = path\n+                .segments\n+                .iter()\n+                .filter_map(|seg| seg.args.map(|args| (args.args, seg)))\n+                .find_map(|(args, seg)| {\n+                    args.iter()\n+                        .filter(|arg| arg.is_ty_or_const())\n+                        .position(|arg| arg.id() == hir_id)\n+                        .map(|index| (index, seg))\n+                });\n+            let (arg_index, segment) = match filtered {\n+                None => {\n+                    tcx.sess\n+                        .delay_span_bug(tcx.def_span(def_id), \"no arg matching AnonConst in path\");\n+                    return None;\n+                }\n+                Some(inner) => inner,\n+            };\n+\n+            // Try to use the segment resolution if it is valid, otherwise we\n+            // default to the path resolution.\n+            let res = segment.res.filter(|&r| r != Res::Err).unwrap_or(path.res);\n+            use def::CtorOf;\n+            let generics = match res {\n+                Res::Def(DefKind::Ctor(CtorOf::Variant, _), def_id) => tcx\n+                    .generics_of(tcx.parent(def_id).and_then(|def_id| tcx.parent(def_id)).unwrap()),\n+                Res::Def(DefKind::Variant | DefKind::Ctor(CtorOf::Struct, _), def_id) => {\n+                    tcx.generics_of(tcx.parent(def_id).unwrap())\n+                }\n+                // Other `DefKind`s don't have generics and would ICE when calling\n+                // `generics_of`.\n+                Res::Def(\n+                    DefKind::Struct\n+                    | DefKind::Union\n+                    | DefKind::Enum\n+                    | DefKind::Trait\n+                    | DefKind::OpaqueTy\n+                    | DefKind::TyAlias\n+                    | DefKind::ForeignTy\n+                    | DefKind::TraitAlias\n+                    | DefKind::AssocTy\n+                    | DefKind::Fn\n+                    | DefKind::AssocFn\n+                    | DefKind::AssocConst\n+                    | DefKind::Impl,\n+                    def_id,\n+                ) => tcx.generics_of(def_id),\n+                Res::Err => {\n+                    tcx.sess.delay_span_bug(tcx.def_span(def_id), \"anon const with Res::Err\");\n+                    return None;\n+                }\n+                _ => {\n+                    // If the user tries to specify generics on a type that does not take them,\n+                    // e.g. `usize<T>`, we may hit this branch, in which case we treat it as if\n+                    // no arguments have been passed. An error should already have been emitted.\n+                    tcx.sess.delay_span_bug(\n+                        tcx.def_span(def_id),\n+                        &format!(\"unexpected anon const res {:?} in path: {:?}\", res, path),\n+                    );\n+                    return None;\n+                }\n+            };\n+\n+            (generics, arg_index)\n+        }\n+        _ => return None,\n+    };\n+\n+    debug!(?parent_node);\n+    debug!(?generics, ?arg_idx);\n+    generics\n+        .params\n+        .iter()\n+        .filter(|param| param.kind.is_ty_or_const())\n+        .nth(match generics.has_self && generics.parent.is_none() {\n+            true => arg_idx + 1,\n+            false => arg_idx,\n+        })\n+        .and_then(|param| match param.kind {\n+            ty::GenericParamDefKind::Const { .. } => {\n+                debug!(?param);\n+                Some(param.def_id)\n             }\n             _ => None,\n-        }\n-    } else {\n-        None\n-    }\n+        })\n }\n \n fn get_path_containing_arg_in_pat<'hir>("}, {"sha": "5566c2ffe87deeed0a75bb26e745f2527cd5e079", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -481,9 +481,10 @@ pub trait TryFrom<T>: Sized {\n \n // As lifts over &\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsRef<U> for &T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsRef<U> for &T\n where\n-    T: AsRef<U>,\n+    T: ~const AsRef<U>,\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -492,9 +493,10 @@ where\n \n // As lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsRef<U> for &mut T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsRef<U> for &mut T\n where\n-    T: AsRef<U>,\n+    T: ~const AsRef<U>,\n {\n     fn as_ref(&self) -> &U {\n         <T as AsRef<U>>::as_ref(*self)\n@@ -511,9 +513,10 @@ where\n \n // AsMut lifts over &mut\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: ?Sized, U: ?Sized> AsMut<U> for &mut T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T: ?Sized, U: ?Sized> const AsMut<U> for &mut T\n where\n-    T: AsMut<U>,\n+    T: ~const AsMut<U>,\n {\n     fn as_mut(&mut self) -> &mut U {\n         (*self).as_mut()\n@@ -567,9 +570,10 @@ impl<T> const From<!> for T {\n \n // TryFrom implies TryInto\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<T, U> TryInto<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const TryInto<U> for T\n where\n-    U: TryFrom<T>,\n+    U: ~const TryFrom<T>,\n {\n     type Error = U::Error;\n \n@@ -581,9 +585,10 @@ where\n // Infallible conversions are semantically equivalent to fallible conversions\n // with an uninhabited error type.\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<T, U> TryFrom<U> for T\n+#[rustc_const_unstable(feature = \"const_convert\", issue = \"88674\")]\n+impl<T, U> const TryFrom<U> for T\n where\n-    U: Into<T>,\n+    U: ~const Into<T>,\n {\n     type Error = Infallible;\n "}, {"sha": "2669f4dbf3068b9603f58098dc7c07efedffccb1", "filename": "library/std/src/net/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -25,6 +25,8 @@ pub use self::addr::{SocketAddr, SocketAddrV4, SocketAddrV6, ToSocketAddrs};\n pub use self::ip::{IpAddr, Ipv4Addr, Ipv6Addr, Ipv6MulticastScope};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::parser::AddrParseError;\n+#[unstable(feature = \"tcplistener_into_incoming\", issue = \"88339\")]\n+pub use self::tcp::IntoIncoming;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::tcp::{Incoming, TcpListener, TcpStream};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f0cbe79bd065e96058b153b75a5ae4699b8ec071", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -1191,11 +1191,9 @@ fn render_deref_methods(\n             }\n         }\n         render_assoc_items_inner(w, cx, container_item, did, what, derefs);\n-    } else {\n-        if let Some(prim) = target.primitive_type() {\n-            if let Some(&did) = cache.primitive_locations.get(&prim) {\n-                render_assoc_items_inner(w, cx, container_item, did, what, derefs);\n-            }\n+    } else if let Some(prim) = target.primitive_type() {\n+        if let Some(&did) = cache.primitive_locations.get(&prim) {\n+            render_assoc_items_inner(w, cx, container_item, did, what, derefs);\n         }\n     }\n }"}, {"sha": "67821f19a23f6a7093f3dcac12ba5f6d4c1513e7", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -129,12 +129,12 @@ pub(super) fn print_item(cx: &Context<'_>, item: &clean::Item, buf: &mut Buffer,\n     };\n \n     let item_vars = ItemVars {\n-        page: page,\n+        page,\n         static_root_path: page.get_static_root_path(),\n-        typ: typ,\n+        typ,\n         name: item.name.as_ref().unwrap().as_str(),\n         item_type: &item.type_().to_string(),\n-        path_components: path_components,\n+        path_components,\n         stability_since_raw: &stability_since_raw,\n         src_href: src_href.as_deref(),\n     };"}, {"sha": "a647a0fbfa55d52d213310635d86bab5b0842f5d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -18,6 +18,7 @@\n #![feature(iter_intersperse)]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n+#![allow(clippy::collapsible_if, clippy::collapsible_else_if)]\n \n #[macro_use]\n extern crate tracing;"}, {"sha": "7b07974ae01c67a54cb59905ecc12e26148ff3cd", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -43,11 +43,10 @@ impl<'a> DocFolder for Stripper<'a> {\n             | clean::TraitAliasItem(..)\n             | clean::MacroItem(..)\n             | clean::ForeignTypeItem => {\n-                if i.def_id.is_local() {\n-                    if !self.access_levels.is_exported(i.def_id.expect_def_id()) {\n-                        debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n-                        return None;\n-                    }\n+                if i.def_id.is_local() && !self.access_levels.is_exported(i.def_id.expect_def_id())\n+                {\n+                    debug!(\"Stripper: stripping {:?} {:?}\", i.type_(), i.name);\n+                    return None;\n                 }\n             }\n "}, {"sha": "974a1d961a05e07c737a2873b8b147786d3a145c", "filename": "src/test/ui/associated-types/substs-ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -25,7 +25,7 @@ fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n     //[verbose]~| expected unit type `()`\n-    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+    //[verbose]~| found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n     //[normal]~| expected unit type `()`\n     //[normal]~| found fn item `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`"}, {"sha": "cf480223da2b3a5496529e1f24fbde565e7b6e02", "filename": "src/test/ui/associated-types/substs-ppaux.verbose.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fsubsts-ppaux.verbose.stderr?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -20,15 +20,15 @@ error[E0308]: mismatched types\n   --> $DIR/substs-ppaux.rs:25:17\n    |\n LL |     fn bar<'a, T>() where T: 'a {}\n-   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>} defined here\n+   |     --------------------------- fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>} defined here\n ...\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n    |            --   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found fn item\n    |            |\n    |            expected due to this\n    |\n    = note: expected unit type `()`\n-                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic>>::bar::<ReStatic, char>}`\n+                found fn item `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n help: use parentheses to call this function\n    |\n LL |     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>();"}, {"sha": "23c8d7537521819e2c50dea7dbc66ae8a8dcba01", "filename": "src/test/ui/const-generics/generic_arg_infer/infer_arg_and_const_arg.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_arg_infer%2Finfer_arg_and_const_arg.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+#![feature(generic_arg_infer)]\n+\n+struct Foo<const N: bool, const M: u8>;\n+struct Bar<const N: u8, const M: u32>;\n+\n+fn main() {\n+    let _: Foo<true, _> = Foo::<_, 1>;\n+    let _: Foo<_, 1> = Foo::<true, _>;\n+    let _: Bar<1, _> = Bar::<_, 300>;\n+    let _: Bar<_, 300> = Bar::<1, _>;\n+}"}, {"sha": "3a2b291d7ba1f127fd71bdbb95c4c8d3ed2c9a6c", "filename": "src/test/ui/const-generics/issues/issue-62878.full.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.full.stderr?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -4,13 +4,6 @@ error[E0770]: the type of const parameters must not depend on other generic para\n LL | fn foo<const N: usize, const A: [u8; N]>() {}\n    |                                      ^ the type must not depend on the parameter `N`\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-62878.rs:10:15\n-   |\n-LL |     foo::<_, {[1]}>();\n-   |               ^^^ expected `usize`, found array `[{integer}; 1]`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0770.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "578ce765b2fb82048309f1be5ef325f467ed28c2", "filename": "src/test/ui/const-generics/issues/issue-62878.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -7,6 +7,5 @@ fn foo<const N: usize, const A: [u8; N]>() {}\n //[min]~| ERROR `[u8; _]` is forbidden as the type of a const generic parameter\n \n fn main() {\n-    foo::<_, {[1]}>();\n-    //[full]~^ ERROR mismatched types\n+    foo::<_, { [1] }>();\n }"}, {"sha": "d9c656d5f58a9e8495a2cf0b2386c4d5bd91529c", "filename": "src/test/ui/generic-associated-types/issue-89352.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-89352.rs?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+\n+use std::marker::PhantomData;\n+\n+pub trait GenAssoc<T> {\n+    type Iter<'at>;\n+    fn iter(&self) -> Self::Iter<'_>;\n+    fn reborrow<'longt: 'shortt, 'shortt>(iter: Self::Iter<'longt>) -> Self::Iter<'shortt>;\n+}\n+\n+pub struct Wrapper<'a, T: 'a, A: GenAssoc<T>> {\n+    a: A::Iter<'a>,\n+    _p: PhantomData<T>,\n+}\n+\n+impl<'ai, T: 'ai, A: GenAssoc<T>> GenAssoc<T> for Wrapper<'ai, T, A>\n+where\n+    A::Iter<'ai>: Clone,\n+{\n+    type Iter<'b> = ();\n+    fn iter<'s>(&'s self) -> Self::Iter<'s> {\n+        let a = A::reborrow::<'ai, 's>(self.a.clone());\n+    }\n+\n+    fn reborrow<'long: 'short, 'short>(iter: Self::Iter<'long>) -> Self::Iter<'short> {\n+        ()\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "459198eec5a8e50c55919233daf59655e84e721f", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -42,7 +42,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3\n@@ -69,7 +69,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 4\n@@ -105,7 +105,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn Anything + '_#3r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn Anything + '_#3r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 4"}, {"sha": "6e8b3021d330c9139fb1a6519c28558b3441ba89", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69d25fc58257637cedbfe0a046d90da1494bcb05/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=69d25fc58257637cedbfe0a046d90da1494bcb05", "patch": "@@ -6,7 +6,7 @@ LL |     with_signature(x, |y| y)\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n-               extern \"rust-call\" fn((std::boxed::Box<T>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r)>,\n+               extern \"rust-call\" fn((std::boxed::Box<T, std::alloc::Global>,)) -> std::boxed::Box<(dyn std::fmt::Debug + '_#2r), std::alloc::Global>,\n                (),\n            ]\n    = note: number of external vids: 3"}]}