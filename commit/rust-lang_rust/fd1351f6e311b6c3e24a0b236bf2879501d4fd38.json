{"sha": "fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMTM1MWY2ZTMxMWI2YzNlMjRhMGIyMzZiZjI4Nzk1MDFkNGZkMzg=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-07T20:05:30Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2017-02-07T20:05:30Z"}, "message": "rustup and compile-fail -> ui test move", "tree": {"sha": "3fe64508b48dd092c9ad087cc2bcf232967562e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fe64508b48dd092c9ad087cc2bcf232967562e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "html_url": "https://github.com/rust-lang/rust/commit/fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee839857b5b866f48a2333d56748bcebc7b3697", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee839857b5b866f48a2333d56748bcebc7b3697", "html_url": "https://github.com/rust-lang/rust/commit/4ee839857b5b866f48a2333d56748bcebc7b3697"}], "stats": {"total": 12046, "additions": 12031, "deletions": 15}, "files": [{"sha": "1a8249aa5635575e4a2bb850e99cea778a6c7c0a", "filename": "CHANGELOG.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -1,6 +1,10 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.114 \u2014 2017-02-07\n+* Rustup to rustc 1.17.0-nightly (c49d10207 2017-02-07)\n+* Tests are now ui tests (testing the exact output of rustc)\n+\n ## 0.0.113 \u2014 2017-02-04\n * Rustup to *rustc 1.16.0-nightly (eedaa94e3 2017-02-02)*\n * New lint: [`large_enum_variant`]"}, {"sha": "b7f68dc854de2171329736f6e8b3c801f67d37ef", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -40,6 +40,11 @@ contains some questionable code itself! Also before making a pull request, pleas\n `util/update_lints.py`, which will update `lib.rs` and `README.md` with the lint declarations. Our\n travis build actually checks for this.\n \n+Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected.\n+Of course there's little sense in writing the output yourself or copying it around.\n+Therefore you can simply run `tests/ui/update-all-references.sh` and check whether\n+the output looks as you expect with `git diff`. Commit all `.stderr` files, too.\n+\n Also please document your lint with a doc comment akin to the following:\n ```rust\n /// **What it does:** Checks for ... (describe what the lint matches)."}, {"sha": "a45a7edf0fe29361561e19b56743cbd9f47a5d2d", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.0.113\"\n+version = \"0.0.114\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\",\n@@ -30,7 +30,7 @@ test = false\n \n [dependencies]\n # begin automatic update\n-clippy_lints = { version = \"0.0.113\", path = \"clippy_lints\" }\n+clippy_lints = { version = \"0.0.114\", path = \"clippy_lints\" }\n # end automatic update\n cargo_metadata = \"0.1.1\"\n "}, {"sha": "d7a95ba04dd4c179b89920c5f30930bc56ec1d0a", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.0.113\"\n+version = \"0.0.114\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "951dd51dec44f6d8b25281898326ce2abf7eb30a", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -158,7 +158,7 @@ fn check_copy_clone<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, item: &Item, trait_ref\n                             TypeVariants::TyFnPtr(..) => {\n                                 return;\n                             },\n-                            TypeVariants::TyTuple(tys) if tys.len() > 12 => {\n+                            TypeVariants::TyTuple(tys, _) if tys.len() > 12 => {\n                                 return;\n                             },\n                             _ => (),"}, {"sha": "b1581127c3250333b3fc8c6afe71e8be86b1370e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -197,7 +197,7 @@ fn check_let_unit(cx: &LateContext, decl: &Decl) {\n     if let DeclLocal(ref local) = decl.node {\n         let bindtype = &cx.tables.pat_ty(&local.pat).sty;\n         match *bindtype {\n-            ty::TyTuple(slice) if slice.is_empty() => {\n+            ty::TyTuple(slice, _) if slice.is_empty() => {\n                 if in_external_macro(cx, decl.span) || in_macro(cx, local.pat.span) {\n                     return;\n                 }\n@@ -268,7 +268,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitCmp {\n             if op.is_comparison() {\n                 let sty = &cx.tables.expr_ty(left).sty;\n                 match *sty {\n-                    ty::TyTuple(slice) if slice.is_empty() => {\n+                    ty::TyTuple(slice, _) if slice.is_empty() => {\n                         let result = match op {\n                             BiEq | BiLe | BiGe => \"true\",\n                             _ => \"false\","}, {"sha": "778041f49b8c63a1b4cd2be785e1bb7947989e1e", "filename": "tests/compile-fail/non_expressive_names.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnon_expressive_names.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -129,14 +129,18 @@ fn bla() {\n         }\n         {\n             let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n         }\n         {\n             let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n             let f: i32; //~ ERROR: 6th binding whose name is just one char\n+            //~^ NOTE implied by\n         }\n         match 5 {\n             1 => println!(\"\"),\n             e => panic!(), //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n         }\n         match 5 {\n             1 => println!(\"\"),"}, {"sha": "7cfc8a41ea1f1c920f41e184845a464ef98c7efa", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     // the add is only caught for `String`\n     let mut x = 1;\n     ; x = x + 1;\n-    //~^ WARN assign_op_pattern\n+    //~^ WARN manual implementation of an assign operation\n     //~| HELP replace\n     //~| SUGGESTION ; x += 1;\n     assert_eq!(2, x);"}, {"sha": "0e56d5ca86e62e8311ec9c82fa3eb45081df4ed8", "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -8,7 +8,7 @@ struct Foo(u32);\n \n fn array() {\n     let mut foo = [1, 2];\n-    let temp = foo[0];\n+    let temp = foo[0]; //~ NOTE implied by\n     foo[0] = foo[1];\n     foo[1] = temp;\n     //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n@@ -20,7 +20,7 @@ fn array() {\n \n fn slice() {\n     let foo = &mut [1, 2];\n-    let temp = foo[0];\n+    let temp = foo[0]; //~ NOTE implied by\n     foo[0] = foo[1];\n     foo[1] = temp;\n     //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n@@ -32,7 +32,7 @@ fn slice() {\n \n fn vec() {\n     let mut foo = vec![1, 2];\n-    let temp = foo[0];\n+    let temp = foo[0]; //~ NOTE implied by\n     foo[0] = foo[1];\n     foo[1] = temp;\n     //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n@@ -50,14 +50,14 @@ fn main() {\n     let mut a = 42;\n     let mut b = 1337;\n \n-    a = b;\n+    a = b; //~ NOTE implied by\n     b = a;\n     //~^^ ERROR this looks like you are trying to swap `a` and `b`\n     //~| HELP try\n     //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    ; let t = a;\n+    ; let t = a; //~ NOTE implied by\n     a = b;\n     b = t;\n     //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n@@ -67,14 +67,14 @@ fn main() {\n \n     let mut c = Foo(42);\n \n-    c.0 = a;\n+    c.0 = a; //~ NOTE implied by\n     a = c.0;\n     //~^^ ERROR this looks like you are trying to swap `c.0` and `a`\n     //~| HELP try\n     //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    ; let t = c.0;\n+    ; let t = c.0; //~ NOTE implied by\n     c.0 = a;\n     a = t;\n     //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually"}, {"sha": "bb60934d443ef31c8e8a70db6fb27afd50a05402", "filename": "tests/compile-test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fcompile-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-test.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -14,6 +14,7 @@ fn run_mode(dir: &'static str, mode: &'static str) {\n     }\n \n     config.mode = cfg_mode;\n+    config.build_base = PathBuf::from(\"target/debug/test_build_base\");\n     config.src_base = PathBuf::from(format!(\"tests/{}\", dir));\n \n     compiletest::run_tests(&config);\n@@ -27,5 +28,5 @@ fn prepare_env() {\n fn compile_test() {\n     prepare_env();\n     run_mode(\"run-pass\", \"run-pass\");\n-    run_mode(\"compile-fail\", \"compile-fail\");\n+    run_mode(\"ui\", \"ui\");\n }"}, {"sha": "cf69473bbe5f6ffd2acea28d222a0458dc9b2e31", "filename": "tests/ui/absurd-extreme-comparisons.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/absurd-extreme-comparisons.rs"}, {"sha": "ba3b6a248205cf19b18216afb8fc0fdff09e761d", "filename": "tests/ui/absurd-extreme-comparisons.stderr", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fabsurd-extreme-comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fabsurd-extreme-comparisons.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,151 @@\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:12:5\n+   |\n+12 |     u <= 0;\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/absurd-extreme-comparisons.rs:4:9\n+   |\n+4  | #![deny(absurd_extreme_comparisons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: because 0 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 0 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:15:5\n+   |\n+15 |     u <= Z;\n+   |     ^^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == Z instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:18:5\n+   |\n+18 |     u < Z;\n+   |     ^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:21:5\n+   |\n+21 |     Z >= u;\n+   |     ^^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, the case where the two sides are not equal never occurs, consider using Z == u instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:24:5\n+   |\n+24 |     Z > u;\n+   |     ^^^^^\n+   |\n+   = help: because Z is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:27:5\n+   |\n+27 |     u > std::u32::MAX;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:30:5\n+   |\n+30 |     u >= std::u32::MAX;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == std::u32::MAX instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:33:5\n+   |\n+33 |     std::u32::MAX < u;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:36:5\n+   |\n+36 |     std::u32::MAX <= u;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::u32::MAX is the maximum value for this type, the case where the two sides are not equal never occurs, consider using std::u32::MAX == u instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:40:5\n+   |\n+40 |     1-1 > u;\n+   |     ^^^^^^^\n+   |\n+   = help: because 1-1 is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:43:5\n+   |\n+43 |     u >= !0;\n+   |     ^^^^^^^\n+   |\n+   = help: because !0 is the maximum value for this type, the case where the two sides are not equal never occurs, consider using u == !0 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:46:5\n+   |\n+46 |     u <= 12 - 2*6;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:51:5\n+   |\n+51 |     i < -127 - 1;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = help: because -127 - 1 is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:54:5\n+   |\n+54 |     std::i8::MAX >= i;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::i8::MAX is the maximum value for this type, this comparison is always true\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:57:5\n+   |\n+57 |     3-7 < std::i32::MIN;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: because std::i32::MIN is the minimum value for this type, this comparison is always false\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:62:5\n+   |\n+62 |     b >= true;\n+   |     ^^^^^^^^^\n+   |\n+   = help: because true is the maximum value for this type, the case where the two sides are not equal never occurs, consider using b == true instead\n+\n+error: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+  --> $DIR/absurd-extreme-comparisons.rs:65:5\n+   |\n+65 |     false > b;\n+   |     ^^^^^^^^^\n+   |\n+   = help: because false is the minimum value for this type, this comparison is always false\n+\n+warning: <-comparison of unit values detected. This will always be false\n+  --> $DIR/absurd-extreme-comparisons.rs:72:5\n+   |\n+72 |     () < {}; //~WARNING <-comparison of unit values detected.\n+   |     ^^^^^^^\n+   |\n+   = note: #[warn(unit_cmp)] on by default\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "2240c3799a3c91e1ff141d61a92b35be9f73a15f", "filename": "tests/ui/approx_const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/approx_const.rs"}, {"sha": "9f5a91074e562d1d32844840d07f530c04330277", "filename": "tests/ui/approx_const.stderr", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fapprox_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fapprox_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fapprox_const.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,122 @@\n+error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+ --> $DIR/approx_const.rs:7:16\n+  |\n+7 |     let my_e = 2.7182; //~ERROR approximate value of `f{32, 64}::consts::E` found\n+  |                ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/approx_const.rs:4:8\n+  |\n+4 | #[deny(approx_constant)]\n+  |        ^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::E` found. Consider using it directly\n+ --> $DIR/approx_const.rs:8:20\n+  |\n+8 |     let almost_e = 2.718; //~ERROR approximate value of `f{32, 64}::consts::E` found\n+  |                    ^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:11:24\n+   |\n+11 |     let my_1_frac_pi = 0.3183; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_PI` found\n+   |                        ^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:14:28\n+   |\n+14 |     let my_frac_1_sqrt_2 = 0.70710678; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n+   |                            ^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:15:32\n+   |\n+15 |     let almost_frac_1_sqrt_2 = 0.70711; //~ERROR approximate value of `f{32, 64}::consts::FRAC_1_SQRT_2` found\n+   |                                ^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_2_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:18:24\n+   |\n+18 |     let my_frac_2_pi = 0.63661977; //~ERROR approximate value of `f{32, 64}::consts::FRAC_2_PI` found\n+   |                        ^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:21:27\n+   |\n+21 |     let my_frac_2_sq_pi = 1.128379; //~ERROR approximate value of `f{32, 64}::consts::FRAC_2_SQRT_PI` found\n+   |                           ^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:24:24\n+   |\n+24 |     let my_frac_pi_2 = 1.57079632679; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_2` found\n+   |                        ^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_3` found. Consider using it directly\n+  --> $DIR/approx_const.rs:27:24\n+   |\n+27 |     let my_frac_pi_3 = 1.04719755119; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_3` found\n+   |                        ^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_4` found. Consider using it directly\n+  --> $DIR/approx_const.rs:30:24\n+   |\n+30 |     let my_frac_pi_4 = 0.785398163397; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_4` found\n+   |                        ^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_6` found. Consider using it directly\n+  --> $DIR/approx_const.rs:33:24\n+   |\n+33 |     let my_frac_pi_6 = 0.523598775598; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_6` found\n+   |                        ^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::FRAC_PI_8` found. Consider using it directly\n+  --> $DIR/approx_const.rs:36:24\n+   |\n+36 |     let my_frac_pi_8 = 0.3926990816987; //~ERROR approximate value of `f{32, 64}::consts::FRAC_PI_8` found\n+   |                        ^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LN_10` found. Consider using it directly\n+  --> $DIR/approx_const.rs:39:20\n+   |\n+39 |     let my_ln_10 = 2.302585092994046; //~ERROR approximate value of `f{32, 64}::consts::LN_10` found\n+   |                    ^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LN_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:42:19\n+   |\n+42 |     let my_ln_2 = 0.6931471805599453; //~ERROR approximate value of `f{32, 64}::consts::LN_2` found\n+   |                   ^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LOG10_E` found. Consider using it directly\n+  --> $DIR/approx_const.rs:45:22\n+   |\n+45 |     let my_log10_e = 0.43429448190325182; //~ERROR approximate value of `f{32, 64}::consts::LOG10_E` found\n+   |                      ^^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::LOG2_E` found. Consider using it directly\n+  --> $DIR/approx_const.rs:48:21\n+   |\n+48 |     let my_log2_e = 1.4426950408889634; //~ERROR approximate value of `f{32, 64}::consts::LOG2_E` found\n+   |                     ^^^^^^^^^^^^^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:51:17\n+   |\n+51 |     let my_pi = 3.1415; //~ERROR approximate value of `f{32, 64}::consts::PI` found\n+   |                 ^^^^^^\n+\n+error: approximate value of `f{32, 64}::consts::PI` found. Consider using it directly\n+  --> $DIR/approx_const.rs:52:21\n+   |\n+52 |     let almost_pi = 3.14; //~ERROR approximate value of `f{32, 64}::consts::PI` found\n+   |                     ^^^^\n+\n+error: approximate value of `f{32, 64}::consts::SQRT_2` found. Consider using it directly\n+  --> $DIR/approx_const.rs:55:18\n+   |\n+55 |     let my_sq2 = 1.4142; //~ERROR approximate value of `f{32, 64}::consts::SQRT_2` found\n+   |                  ^^^^^^\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "5479c55e11e030ae824155757a22b023746dd6ec", "filename": "tests/ui/arithmetic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/arithmetic.rs"}, {"sha": "1c333bfdccad3fc679a035a67c7a142439cadc5a", "filename": "tests/ui/arithmetic.stderr", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farithmetic.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,82 @@\n+error: integer arithmetic detected\n+ --> $DIR/arithmetic.rs:8:5\n+  |\n+8 |     1 + i; //~ERROR integer arithmetic detected\n+  |     ^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/arithmetic.rs:4:9\n+  |\n+4 | #![deny(integer_arithmetic, float_arithmetic)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: integer arithmetic detected\n+ --> $DIR/arithmetic.rs:9:5\n+  |\n+9 |     i * 2; //~ERROR integer arithmetic detected\n+  |     ^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:10:5\n+   |\n+10 |       1 % //~ERROR integer arithmetic detected\n+   |  _____^ starting here...\n+11 | |     i / 2; // no error, this is part of the expression in the preceding line\n+   | |_________^ ...ending here\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:12:5\n+   |\n+12 |     i - 2 + 2 - i; //~ERROR integer arithmetic detected\n+   |     ^^^^^^^^^^^^^\n+\n+error: integer arithmetic detected\n+  --> $DIR/arithmetic.rs:13:5\n+   |\n+13 |     -i; //~ERROR integer arithmetic detected\n+   |     ^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:23:5\n+   |\n+23 |     f * 2.0; //~ERROR floating-point arithmetic detected\n+   |     ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/arithmetic.rs:4:29\n+   |\n+4  | #![deny(integer_arithmetic, float_arithmetic)]\n+   |                             ^^^^^^^^^^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:25:5\n+   |\n+25 |     1.0 + f; //~ERROR floating-point arithmetic detected\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:26:5\n+   |\n+26 |     f * 2.0; //~ERROR floating-point arithmetic detected\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:27:5\n+   |\n+27 |     f / 2.0; //~ERROR floating-point arithmetic detected\n+   |     ^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:28:5\n+   |\n+28 |     f - 2.0 * 4.2; //~ERROR floating-point arithmetic detected\n+   |     ^^^^^^^^^^^^^\n+\n+error: floating-point arithmetic detected\n+  --> $DIR/arithmetic.rs:29:5\n+   |\n+29 |     -f; //~ERROR floating-point arithmetic detected\n+   |     ^^\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "c69144fe292045106ba9c8f6c7296839840768aa", "filename": "tests/ui/array_indexing.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/array_indexing.rs"}, {"sha": "3eba56d35f867bb6d6ca15145adfacce0617160c", "filename": "tests/ui/array_indexing.stderr", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farray_indexing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Farray_indexing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray_indexing.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,152 @@\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:12:5\n+   |\n+12 |     x[4]; //~ERROR: const index is out of bounds\n+   |     ^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:13:5\n+   |\n+13 |     x[1 << 3]; //~ERROR: const index is out of bounds\n+   |     ^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:14:6\n+   |\n+14 |     &x[1..5]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:16:6\n+   |\n+16 |     &x[0...4]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:17:6\n+   |\n+17 |     &x[...4]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:21:6\n+   |\n+21 |     &x[5..]; //~ERROR: range is out of bounds\n+   |      ^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:23:6\n+   |\n+23 |     &x[..5]; //~ERROR: range is out of bounds\n+   |      ^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: indexing may panic\n+  --> $DIR/array_indexing.rs:26:5\n+   |\n+26 |     y[0]; //~ERROR: indexing may panic\n+   |     ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/array_indexing.rs:4:9\n+   |\n+4  | #![deny(indexing_slicing)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:27:6\n+   |\n+27 |     &y[1..2]; //~ERROR: slicing may panic\n+   |      ^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:29:6\n+   |\n+29 |     &y[0...4]; //~ERROR: slicing may panic\n+   |      ^^^^^^^^\n+\n+error: slicing may panic\n+  --> $DIR/array_indexing.rs:30:6\n+   |\n+30 |     &y[...4]; //~ERROR: slicing may panic\n+   |      ^^^^^^^\n+\n+error: const index is out of bounds\n+  --> $DIR/array_indexing.rs:33:5\n+   |\n+33 |     empty[0]; //~ERROR: const index is out of bounds\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:34:6\n+   |\n+34 |     &empty[1..5]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:35:6\n+   |\n+35 |     &empty[0...4]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:36:6\n+   |\n+36 |     &empty[...4]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:40:6\n+   |\n+40 |     &empty[0...0]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:41:6\n+   |\n+41 |     &empty[...0]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:43:6\n+   |\n+43 |     &empty[1..]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: range is out of bounds\n+  --> $DIR/array_indexing.rs:44:6\n+   |\n+44 |     &empty[..4]; //~ERROR: range is out of bounds\n+   |      ^^^^^^^^^^\n+   |\n+   = note: #[deny(out_of_bounds_indexing)] on by default\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "2b69e110f43d7749dc9e3d93d5c4053051428c81", "filename": "tests/ui/assign_ops.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/assign_ops.rs"}, {"sha": "61efd362a801fb4e3be8b2af645fd785be259828", "filename": "tests/ui/assign_ops.stderr", "status": "added", "additions": 201, "deletions": 0, "changes": 201, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,201 @@\n+error: assign operation detected\n+ --> $DIR/assign_ops.rs:8:5\n+  |\n+8 |     i += 2; //~ ERROR assign operation detected\n+  |     ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/assign_ops.rs:4:8\n+  |\n+4 | #[deny(assign_ops)]\n+  |        ^^^^^^^^^^\n+help: replace it with\n+  |     i = i + 2; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:11:5\n+   |\n+11 |     i += 2 + 17; //~ ERROR assign operation detected\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i + 2 + 17; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:14:5\n+   |\n+14 |     i -= 6; //~ ERROR assign operation detected\n+   |     ^^^^^^\n+   |\n+help: replace it with\n+   |     i = i - 6; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:17:5\n+   |\n+17 |     i -= 2 - 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i - (2 - 1);\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:21:5\n+   |\n+21 |     i *= 5; //~ ERROR assign operation detected\n+   |     ^^^^^^\n+   |\n+help: replace it with\n+   |     i = i * 5; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:24:5\n+   |\n+24 |     i *= 1+5; //~ ERROR assign operation detected\n+   |     ^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i * (1+5); //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:27:5\n+   |\n+27 |     i /= 32; //~ ERROR assign operation detected\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / 32; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:30:5\n+   |\n+30 |     i /= 32 | 5; //~ ERROR assign operation detected\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / (32 | 5); //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:33:5\n+   |\n+33 |     i /= 32 / 5; //~ ERROR assign operation detected\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i / (32 / 5); //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:36:5\n+   |\n+36 |     i %= 42; //~ ERROR assign operation detected\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i % 42; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:39:5\n+   |\n+39 |     i >>= i; //~ ERROR assign operation detected\n+   |     ^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i >> i; //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:42:5\n+   |\n+42 |     i <<= 9 + 6 - 7; //~ ERROR assign operation detected\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i << (9 + 6 - 7); //~ ERROR assign operation detected\n+\n+error: assign operation detected\n+  --> $DIR/assign_ops.rs:45:5\n+   |\n+45 |     i += 1 << 5;\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     i = i + (1 << 5);\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:55:5\n+   |\n+55 |     a = a + 1; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/assign_ops.rs:52:8\n+   |\n+52 | #[deny(assign_op_pattern)]\n+   |        ^^^^^^^^^^^^^^^^^\n+help: replace it with\n+   |     a += 1; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:58:5\n+   |\n+58 |     a = 1 + a; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a += 1; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:61:5\n+   |\n+61 |     a = a - 1; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a -= 1; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:64:5\n+   |\n+64 |     a = a * 99; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 99; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:67:5\n+   |\n+67 |     a = 42 * a; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 42; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:70:5\n+   |\n+70 |     a = a / 2; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a /= 2; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:73:5\n+   |\n+73 |     a = a % 5; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a %= 5; //~ ERROR manual implementation of an assign operation\n+\n+error: manual implementation of an assign operation\n+  --> $DIR/assign_ops.rs:76:5\n+   |\n+76 |     a = a & 1; //~ ERROR manual implementation of an assign operation\n+   |     ^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a &= 1; //~ ERROR manual implementation of an assign operation\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "e8549c01bc93268c7d4ff431a017150f3b14249b", "filename": "tests/ui/assign_ops2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/assign_ops2.rs"}, {"sha": "98968fe8d2bf03c8fd3bfc1df755980e995255df", "filename": "tests/ui/assign_ops2.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,79 @@\n+error: variable appears on both sides of an assignment operation\n+ --> $DIR/assign_ops2.rs:8:5\n+  |\n+8 |     a += a + 1; //~ ERROR variable appears on both sides of an assignment operation\n+  |     ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/assign_ops2.rs:5:8\n+  |\n+5 | #[deny(misrefactored_assign_op)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+  |     a += 1; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:11:5\n+   |\n+11 |     a += 1 + a; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a += 1; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:14:5\n+   |\n+14 |     a -= a - 1; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a -= 1; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:17:5\n+   |\n+17 |     a *= a * 99; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 99; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:20:5\n+   |\n+20 |     a *= 42 * a; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a *= 42; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:23:5\n+   |\n+23 |     a /= a / 2; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a /= 2; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:26:5\n+   |\n+26 |     a %= a % 5; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a %= 5; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: variable appears on both sides of an assignment operation\n+  --> $DIR/assign_ops2.rs:29:5\n+   |\n+29 |     a &= a & 1; //~ ERROR variable appears on both sides of an assignment operation\n+   |     ^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     a &= 1; //~ ERROR variable appears on both sides of an assignment operation\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "314602b2b0bf7bfe12f1208104a30300734fa277", "filename": "tests/ui/attrs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/attrs.rs"}, {"sha": "411da0e22de78fb0b35b87310a55d245aa9789da", "filename": "tests/ui/attrs.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fattrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fattrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fattrs.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,32 @@\n+error: you have declared `#[inline(always)]` on `test_attr_lint`. This is usually a bad idea\n+ --> $DIR/attrs.rs:6:1\n+  |\n+6 | #[inline(always)] //~ERROR you have declared `#[inline(always)]` on `test_attr_lint`.\n+  | ^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/attrs.rs:4:9\n+  |\n+4 | #![deny(inline_always, deprecated_semver)]\n+  |         ^^^^^^^^^^^^^\n+\n+error: the since field must contain a semver-compliant version\n+  --> $DIR/attrs.rs:27:14\n+   |\n+27 | #[deprecated(since = \"forever\")] //~ERROR the since field must contain a semver-compliant version\n+   |              ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/attrs.rs:4:24\n+   |\n+4  | #![deny(inline_always, deprecated_semver)]\n+   |                        ^^^^^^^^^^^^^^^^^\n+\n+error: the since field must contain a semver-compliant version\n+  --> $DIR/attrs.rs:30:14\n+   |\n+30 | #[deprecated(since = \"1\")] //~ERROR the since field must contain a semver-compliant version\n+   |              ^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "79772840c73dbfb8977482857f8e0cb901acda79", "filename": "tests/ui/bit_masks.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbit_masks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbit_masks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/bit_masks.rs"}, {"sha": "b8e63cef20ae5364e7dad286d5aba99c36462c5e", "filename": "tests/ui/bit_masks.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbit_masks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbit_masks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbit_masks.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,104 @@\n+error: &-masking with zero\n+  --> $DIR/bit_masks.rs:12:5\n+   |\n+12 |     x & 0 == 0; //~ERROR &-masking with zero\n+   |     ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bit_masks.rs:7:8\n+   |\n+7  | #[deny(bad_bit_mask)]\n+   |        ^^^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 2` can never be equal to `1`\n+  --> $DIR/bit_masks.rs:15:5\n+   |\n+15 |     x & 2 == 1; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 3` can never be equal to `2`\n+  --> $DIR/bit_masks.rs:19:5\n+   |\n+19 |     x | 3 == 2; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 1` will never be higher than `1`\n+  --> $DIR/bit_masks.rs:21:5\n+   |\n+21 |     x & 1 > 1; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 2` will always be higher than `1`\n+  --> $DIR/bit_masks.rs:25:5\n+   |\n+25 |     x | 2 > 1; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 7` can never be equal to `8`\n+  --> $DIR/bit_masks.rs:32:5\n+   |\n+32 |     x & THREE_BITS == 8; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 7` will never be lower than `7`\n+  --> $DIR/bit_masks.rs:33:5\n+   |\n+33 |     x | EVEN_MORE_REDIRECTION < 7; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: &-masking with zero\n+  --> $DIR/bit_masks.rs:35:5\n+   |\n+35 |     0 & x == 0; //~ERROR &-masking with zero\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 2` will always be higher than `1`\n+  --> $DIR/bit_masks.rs:39:5\n+   |\n+39 |     1 < 2 | x; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^\n+\n+error: incompatible bit mask: `_ | 3` can never be equal to `2`\n+  --> $DIR/bit_masks.rs:40:5\n+   |\n+40 |     2 == 3 | x; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^\n+\n+error: incompatible bit mask: `_ & 2` can never be equal to `1`\n+  --> $DIR/bit_masks.rs:41:5\n+   |\n+41 |     1 == x & 2; //~ERROR incompatible bit mask\n+   |     ^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `3`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:52:5\n+   |\n+52 |     x | 1 > 3; //~ERROR ineffective bit mask\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/bit_masks.rs:47:8\n+   |\n+47 | #[deny(ineffective_bit_mask)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `4`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:53:5\n+   |\n+53 |     x | 1 < 4; //~ERROR ineffective bit mask\n+   |     ^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `3`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:54:5\n+   |\n+54 |     x | 1 <= 3; //~ERROR ineffective bit mask\n+   |     ^^^^^^^^^^\n+\n+error: ineffective bit mask: `x | 1` compared to `8`, is the same as x compared directly\n+  --> $DIR/bit_masks.rs:55:5\n+   |\n+55 |     x | 1 >= 8; //~ERROR ineffective bit mask\n+   |     ^^^^^^^^^^\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "1afcd94a0b1d43a75e69561b7d096887a2bb5021", "filename": "tests/ui/blacklisted_name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/blacklisted_name.rs"}, {"sha": "055fb8836d78408c079de55fde946f3399ec56d0", "filename": "tests/ui/blacklisted_name.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblacklisted_name.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,50 @@\n+error: use of a blacklisted/placeholder name `foo`\n+ --> $DIR/blacklisted_name.rs:9:9\n+  |\n+9 | fn test(foo: ()) {} //~ERROR use of a blacklisted/placeholder name `foo`\n+  |         ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/blacklisted_name.rs:7:9\n+  |\n+7 | #![deny(blacklisted_name)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/blacklisted_name.rs:12:9\n+   |\n+12 |     let foo = 42; //~ERROR use of a blacklisted/placeholder name `foo`\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `bar`\n+  --> $DIR/blacklisted_name.rs:13:9\n+   |\n+13 |     let bar = 42; //~ERROR use of a blacklisted/placeholder name `bar`\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:14:9\n+   |\n+14 |     let baz = 42; //~ERROR use of a blacklisted/placeholder name `baz`\n+   |         ^^^\n+\n+error: use of a blacklisted/placeholder name `foo`\n+  --> $DIR/blacklisted_name.rs:20:10\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |          ^^^\n+\n+error: use of a blacklisted/placeholder name `bar`\n+  --> $DIR/blacklisted_name.rs:20:20\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |                    ^^^\n+\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:20:26\n+   |\n+20 |         (foo, Some(bar), baz @ Some(_)) => (),\n+   |                          ^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "090c39abc9268aa1a3af0e728d8a9baf98e8d3b9", "filename": "tests/ui/block_in_if_condition.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/block_in_if_condition.rs"}, {"sha": "be63b4a7430a7ce734ef37d39df76899cde1374a", "filename": "tests/ui/block_in_if_condition.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblock_in_if_condition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fblock_in_if_condition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fblock_in_if_condition.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,68 @@\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:30:8\n+   |\n+30 |       if { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n+   |  ________^ starting here...\n+31 | |         let x = 3;\n+32 | |         x == 3\n+33 | |     } {\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:5:9\n+   |\n+5  | #![deny(block_in_if_condition_stmt)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try\n+           let res = { //~ERROR in an 'if' condition, avoid complex blocks or closures with blocks;\n+               let x = 3;\n+               x == 3\n+           };\n+           if res {\n+               6\n+           } ... \n+\n+error: omit braces around single expression condition\n+  --> $DIR/block_in_if_condition.rs:41:8\n+   |\n+41 |     if { true } { //~ERROR omit braces around single expression condition\n+   |        ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:4:9\n+   |\n+4  | #![deny(block_in_if_condition_expr)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: try\n+           if true { //~ERROR omit braces around single expression condition\n+               6\n+           } ... \n+\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:58:49\n+   |\n+58 |     if v == 3 && sky == \"blue\" && predicate(|x| { let target = 3; x == target }, v) {\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: in an 'if' condition, avoid complex blocks or closures with blocks; instead, move the block or closure higher and bind it with a 'let'\n+  --> $DIR/block_in_if_condition.rs:62:22\n+   |\n+62 |     if predicate(|x| { let target = 3; x == target }, v) {\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: this boolean expression can be simplified\n+  --> $DIR/block_in_if_condition.rs:70:8\n+   |\n+70 |     if true && x == 3 { //~ WARN this boolean expression can be simplified\n+   |        ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/block_in_if_condition.rs:7:9\n+   |\n+7  | #![warn(nonminimal_bool)]\n+   |         ^^^^^^^^^^^^^^^\n+help: try\n+   |     if x == 3 { //~ WARN this boolean expression can be simplified\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "836759455197f08d427d15e67b270f6c212902dd", "filename": "tests/ui/bool_comparison.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbool_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbool_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/bool_comparison.rs"}, {"sha": "9da1c76d07e686a3be82fe8b4870ab31982fb665", "filename": "tests/ui/bool_comparison.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbool_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbool_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_comparison.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,43 @@\n+error: equality checks against true are unnecessary\n+ --> $DIR/bool_comparison.rs:7:8\n+  |\n+7 |     if x == true { \"yes\" } else { \"no\" };\n+  |        ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/bool_comparison.rs:4:8\n+  |\n+4 | #[deny(bool_comparison)]\n+  |        ^^^^^^^^^^^^^^^\n+help: try simplifying it as shown:\n+  |     if x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:11:8\n+   |\n+11 |     if x == false { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if !x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against true are unnecessary\n+  --> $DIR/bool_comparison.rs:15:8\n+   |\n+15 |     if true == x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if x { \"yes\" } else { \"no\" };\n+\n+error: equality checks against false can be replaced by a negation\n+  --> $DIR/bool_comparison.rs:19:8\n+   |\n+19 |     if false == x { \"yes\" } else { \"no\" };\n+   |        ^^^^^^^^^^\n+   |\n+help: try simplifying it as shown:\n+   |     if !x { \"yes\" } else { \"no\" };\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "193edebf3c4ffb8f37f5067a01120404bd43d9d1", "filename": "tests/ui/booleans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/booleans.rs"}, {"sha": "9be511928b87da8b2c7d2acde1d811e0216eee56", "filename": "tests/ui/booleans.stderr", "status": "added", "additions": 160, "deletions": 0, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,160 @@\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:12:13\n+   |\n+12 |     let _ = a && b || a; //~ ERROR this boolean expression contains a logic bug\n+   |             ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/booleans.rs:3:26\n+   |\n+3  | #![deny(nonminimal_bool, logic_bug)]\n+   |                          ^^^^^^^^^\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:12:18\n+   |\n+12 |     let _ = a && b || a; //~ ERROR this boolean expression contains a logic bug\n+   |                  ^\n+help: it would look like the following\n+   |     let _ = a; //~ ERROR this boolean expression contains a logic bug\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:17:13\n+   |\n+17 |     let _ = !true; //~ ERROR this boolean expression can be simplified\n+   |             ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/booleans.rs:3:9\n+   |\n+3  | #![deny(nonminimal_bool, logic_bug)]\n+   |         ^^^^^^^^^^^^^^^\n+help: try\n+   |     let _ = false; //~ ERROR this boolean expression can be simplified\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:20:13\n+   |\n+20 |     let _ = !false; //~ ERROR this boolean expression can be simplified\n+   |             ^^^^^^\n+   |\n+help: try\n+   |     let _ = true; //~ ERROR this boolean expression can be simplified\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:23:13\n+   |\n+23 |     let _ = !!a; //~ ERROR this boolean expression can be simplified\n+   |             ^^^\n+   |\n+help: try\n+   |     let _ = a; //~ ERROR this boolean expression can be simplified\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:27:13\n+   |\n+27 |     let _ = false && a; //~ ERROR this boolean expression contains a logic bug\n+   |             ^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:27:22\n+   |\n+27 |     let _ = false && a; //~ ERROR this boolean expression contains a logic bug\n+   |                      ^\n+help: it would look like the following\n+   |     let _ = false; //~ ERROR this boolean expression contains a logic bug\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:32:13\n+   |\n+32 |     let _ = false || a; //~ ERROR this boolean expression can be simplified\n+   |             ^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a; //~ ERROR this boolean expression can be simplified\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:43:13\n+   |\n+43 |     let _ = !(!a && b); //~ ERROR this boolean expression can be simplified\n+   |             ^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = !b || a; //~ ERROR this boolean expression can be simplified\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:55:13\n+   |\n+55 |     let _ = a == b && a != b;\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:55:13\n+   |\n+55 |     let _ = a == b && a != b;\n+   |             ^^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:60:13\n+   |\n+60 |     let _ = a == b && c == 5 && a == b;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+help: try\n+   |     let _ = !(c != 5 || a != b);\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:66:13\n+   |\n+66 |     let _ = a == b && c == 5 && b == a;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = a == b && c == 5;\n+help: try\n+   |     let _ = !(c != 5 || a != b);\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:72:13\n+   |\n+72 |     let _ = a < b && a >= b;\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:72:13\n+   |\n+72 |     let _ = a < b && a >= b;\n+   |             ^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression contains a logic bug\n+  --> $DIR/booleans.rs:77:13\n+   |\n+77 |     let _ = a > b && a <= b;\n+   |             ^^^^^^^^^^^^^^^\n+   |\n+help: this expression can be optimized out by applying boolean operations to the outer expression\n+  --> $DIR/booleans.rs:77:13\n+   |\n+77 |     let _ = a > b && a <= b;\n+   |             ^^^^^\n+help: it would look like the following\n+   |     let _ = false;\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:84:13\n+   |\n+84 |     let _ = a != b || !(a != b || c == d);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _ = c != d || a != b;\n+help: try\n+   |     let _ = !(a == b && c == d);\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "071945a81b23c5d804780b54fc9e7042bed24b1a", "filename": "tests/ui/box_vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/box_vec.rs"}, {"sha": "b5cc66b60c91ab5fe947503ac41907eef9c57cb8", "filename": "tests/ui/box_vec.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbox_vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbox_vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_vec.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,16 @@\n+error: you seem to be trying to use `Box<Vec<T>>`. Consider using just `Vec<T>`\n+  --> $DIR/box_vec.rs:17:18\n+   |\n+17 | pub fn test(foo: Box<Vec<bool>>) { //~ ERROR you seem to be trying to use `Box<Vec<T>>`\n+   |                  ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(box_vec)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/box_vec.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = help: `Vec<T>` is already on the heap, `Box<Vec<T>>` makes an extra allocation.\n+\n+error: aborting due to previous error\n+"}, {"sha": "172875a6b9aacfe1df7c96a98c7432cd845e1718", "filename": "tests/ui/builtin-type-shadow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbuiltin-type-shadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbuiltin-type-shadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/builtin-type-shadow.rs"}, {"sha": "e3b6c68e8c23de699e627ece4ef559b060b63ae8", "filename": "tests/ui/builtin-type-shadow.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbuiltin-type-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fbuiltin-type-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbuiltin-type-shadow.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,23 @@\n+error: This generic shadows the built-in type `u32`\n+ --> $DIR/builtin-type-shadow.rs:5:8\n+  |\n+5 | fn foo<u32>(a: u32) -> u32 { //~ERROR shadows the built-in type `u32`\n+  |        ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/builtin-type-shadow.rs:3:9\n+  |\n+3 | #![deny(builtin_type_shadow)]\n+  |         ^^^^^^^^^^^^^^^^^^^\n+\n+error[E0308]: mismatched types\n+ --> $DIR/builtin-type-shadow.rs:6:5\n+  |\n+6 |     42  //~ERROR E0308\n+  |     ^^ expected type parameter, found integral variable\n+  |\n+  = note: expected type `u32`\n+             found type `{integer}`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d0ea5f40789d934167a6131c8eddd7445910e1ec", "filename": "tests/ui/cast.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cast.rs"}, {"sha": "e5fbc8fe4da17e800d3c6716584b92a58e6a7752", "filename": "tests/ui/cast.stderr", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,278 @@\n+error: casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast.rs:8:5\n+  |\n+8 |     1i32 as f32; //~ERROR casting i32 to f32 causes a loss of precision (i32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+  |     ^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/cast.rs:4:8\n+  |\n+4 | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+  |        ^^^^^^^^^^^^^^^^^^^\n+\n+error: casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+ --> $DIR/cast.rs:9:5\n+  |\n+9 |     1i64 as f32; //~ERROR casting i64 to f32 causes a loss of precision (i64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  |     ^^^^^^^^^^^\n+\n+error: casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:10:5\n+   |\n+10 |     1i64 as f64; //~ERROR casting i64 to f64 causes a loss of precision (i64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+   |     ^^^^^^^^^^^\n+\n+error: casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:11:5\n+   |\n+11 |     1u32 as f32; //~ERROR casting u32 to f32 causes a loss of precision (u32 is 32 bits wide, but f32's mantissa is only 23 bits wide)\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:12:5\n+   |\n+12 |     1u64 as f32; //~ERROR casting u64 to f32 causes a loss of precision (u64 is 64 bits wide, but f32's mantissa is only 23 bits wide)\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:13:5\n+   |\n+13 |     1u64 as f64; //~ERROR casting u64 to f64 causes a loss of precision (u64 is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+   |     ^^^^^^^^^^^\n+\n+error: casting f32 to i32 may truncate the value\n+  --> $DIR/cast.rs:18:5\n+   |\n+18 |     1f32 as i32;   //~ERROR casting f32 to i32 may truncate the value\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:29\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: casting f32 to u32 may truncate the value\n+  --> $DIR/cast.rs:19:5\n+   |\n+19 |     1f32 as u32;   //~ERROR casting f32 to u32 may truncate the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting f32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:19:5\n+   |\n+19 |     1f32 as u32;   //~ERROR casting f32 to u32 may truncate the value\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:55\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                                                       ^^^^^^^^^^^^^^\n+\n+error: casting f64 to f32 may truncate the value\n+  --> $DIR/cast.rs:21:5\n+   |\n+21 |     1f64 as f32;   //~ERROR casting f64 to f32 may truncate the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting i32 to i8 may truncate the value\n+  --> $DIR/cast.rs:22:5\n+   |\n+22 |     1i32 as i8;    //~ERROR casting i32 to i8 may truncate the value\n+   |     ^^^^^^^^^^\n+\n+error: casting i32 to u8 may lose the sign of the value\n+  --> $DIR/cast.rs:23:5\n+   |\n+23 |     1i32 as u8;    //~ERROR casting i32 to u8 may truncate the value\n+   |     ^^^^^^^^^^\n+\n+error: casting i32 to u8 may truncate the value\n+  --> $DIR/cast.rs:23:5\n+   |\n+23 |     1i32 as u8;    //~ERROR casting i32 to u8 may truncate the value\n+   |     ^^^^^^^^^^\n+\n+error: casting f64 to isize may truncate the value\n+  --> $DIR/cast.rs:25:5\n+   |\n+25 |     1f64 as isize; //~ERROR casting f64 to isize may truncate the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting f64 to usize may truncate the value\n+  --> $DIR/cast.rs:26:5\n+   |\n+26 |     1f64 as usize; //~ERROR casting f64 to usize may truncate the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting f64 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:26:5\n+   |\n+26 |     1f64 as usize; //~ERROR casting f64 to usize may truncate the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u8 to i8 may wrap around the value\n+  --> $DIR/cast.rs:30:5\n+   |\n+30 |     1u8 as i8;       //~ERROR casting u8 to i8 may wrap around the value\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cast.rs:4:71\n+   |\n+4  | #[deny(cast_precision_loss, cast_possible_truncation, cast_sign_loss, cast_possible_wrap)]\n+   |                                                                       ^^^^^^^^^^^^^^^^^^\n+\n+error: casting u16 to i16 may wrap around the value\n+  --> $DIR/cast.rs:31:5\n+   |\n+31 |     1u16 as i16;     //~ERROR casting u16 to i16 may wrap around the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting u32 to i32 may wrap around the value\n+  --> $DIR/cast.rs:32:5\n+   |\n+32 |     1u32 as i32;     //~ERROR casting u32 to i32 may wrap around the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting u64 to i64 may wrap around the value\n+  --> $DIR/cast.rs:33:5\n+   |\n+33 |     1u64 as i64;     //~ERROR casting u64 to i64 may wrap around the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting usize to isize may wrap around the value\n+  --> $DIR/cast.rs:34:5\n+   |\n+34 |     1usize as isize; //~ERROR casting usize to isize may wrap around the value\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: casting i32 to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:37:5\n+   |\n+37 |     1i32 as u32;     //~ERROR casting i32 to u32 may lose the sign of the value\n+   |     ^^^^^^^^^^^\n+\n+error: casting isize to usize may lose the sign of the value\n+  --> $DIR/cast.rs:38:5\n+   |\n+38 |     1isize as usize; //~ERROR casting isize to usize may lose the sign of the value\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: casting isize to i8 may truncate the value\n+  --> $DIR/cast.rs:42:5\n+   |\n+42 |     1isize as i8;  //~ERROR casting isize to i8 may truncate the value\n+   |     ^^^^^^^^^^^^\n+\n+error: casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:43:5\n+   |\n+43 |     1isize as f64; //~ERROR casting isize to f64 causes a loss of precision on targets with 64-bit wide pointers (isize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+  --> $DIR/cast.rs:44:5\n+   |\n+44 |     1usize as f64; //~ERROR casting usize to f64 causes a loss of precision on targets with 64-bit wide pointers (usize is 64 bits wide, but f64's mantissa is only 52 bits wide)\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:45:5\n+   |\n+45 |     1isize as f32; //~ERROR casting isize to f32 causes a loss of precision (isize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+  --> $DIR/cast.rs:46:5\n+   |\n+46 |     1usize as f32; //~ERROR casting usize to f32 causes a loss of precision (usize is 32 or 64 bits wide, but f32's mantissa is only 23 bits wide)\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:47:5\n+   |\n+47 |     1isize as i32; //~ERROR casting isize to i32 may truncate the value on targets with 64-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may lose the sign of the value\n+  --> $DIR/cast.rs:48:5\n+   |\n+48 |     1isize as u32; //~ERROR casting isize to u32 may lose the sign of the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting isize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:48:5\n+   |\n+48 |     1isize as u32; //~ERROR casting isize to u32 may lose the sign of the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:50:5\n+   |\n+50 |     1usize as u32; //~ERROR casting usize to u32 may truncate the value on targets with 64-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:51:5\n+   |\n+51 |     1usize as i32; //~ERROR casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting usize to i32 may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:51:5\n+   |\n+51 |     1usize as i32; //~ERROR casting usize to i32 may truncate the value on targets with 64-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:54:5\n+   |\n+54 |     1i64 as isize; //~ERROR casting i64 to isize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:55:5\n+   |\n+55 |     1i64 as usize; //~ERROR casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:55:5\n+   |\n+55 |     1i64 as usize; //~ERROR casting i64 to usize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:57:5\n+   |\n+57 |     1u64 as isize; //~ERROR casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to isize may wrap around the value on targets with 64-bit wide pointers\n+  --> $DIR/cast.rs:57:5\n+   |\n+57 |     1u64 as isize; //~ERROR casting u64 to isize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:59:5\n+   |\n+59 |     1u64 as usize; //~ERROR casting u64 to usize may truncate the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+  --> $DIR/cast.rs:60:5\n+   |\n+60 |     1u32 as isize; //~ERROR casting u32 to isize may wrap around the value on targets with 32-bit wide pointers\n+   |     ^^^^^^^^^^^^^\n+\n+error: casting i32 to usize may lose the sign of the value\n+  --> $DIR/cast.rs:63:5\n+   |\n+63 |     1i32 as usize; //~ERROR casting i32 to usize may lose the sign of the value\n+   |     ^^^^^^^^^^^^^\n+\n+error: aborting due to 42 previous errors\n+"}, {"sha": "4fca878c4daf2eadbc3b0aca1ab6903f36dfe2d4", "filename": "tests/ui/char_lit_as_u8.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/char_lit_as_u8.rs"}, {"sha": "f297f692dbbfeaae134acf709677056cb806619c", "filename": "tests/ui/char_lit_as_u8.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fchar_lit_as_u8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fchar_lit_as_u8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchar_lit_as_u8.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,16 @@\n+error: casting character literal to u8. `char`s are 4 bytes wide in rust, so casting to u8 truncates them\n+ --> $DIR/char_lit_as_u8.rs:7:13\n+  |\n+7 |     let c = 'a' as u8; //~ERROR casting character literal\n+  |             ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/char_lit_as_u8.rs:4:9\n+  |\n+4 | #![deny(char_lit_as_u8)]\n+  |         ^^^^^^^^^^^^^^\n+  = help: Consider using a byte literal instead:\n+          b'a'\n+\n+error: aborting due to previous error\n+"}, {"sha": "8d173665a2429fb241ebe4159063fefb112049fb", "filename": "tests/ui/cmp_nan.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_nan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_nan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cmp_nan.rs"}, {"sha": "9d76a076b4a7fc4ba884bfb7fd0a78782ce32108", "filename": "tests/ui/cmp_nan.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_nan.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_nan.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_nan.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,98 @@\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+ --> $DIR/cmp_nan.rs:8:5\n+  |\n+8 |     x == std::f32::NAN; //~ERROR doomed comparison with NAN\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+ --> $DIR/cmp_nan.rs:9:5\n+  |\n+9 |     x != std::f32::NAN; //~ERROR doomed comparison with NAN\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:10:5\n+   |\n+10 |     x < std::f32::NAN;  //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:11:5\n+   |\n+11 |     x > std::f32::NAN;  //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:12:5\n+   |\n+12 |     x <= std::f32::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:13:5\n+   |\n+13 |     x >= std::f32::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:16:5\n+   |\n+16 |     y == std::f64::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:17:5\n+   |\n+17 |     y != std::f64::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:18:5\n+   |\n+18 |     y < std::f64::NAN;  //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:19:5\n+   |\n+19 |     y > std::f64::NAN;  //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:20:5\n+   |\n+20 |     y <= std::f64::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\n+  --> $DIR/cmp_nan.rs:21:5\n+   |\n+21 |     y >= std::f64::NAN; //~ERROR doomed comparison with NAN\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(cmp_nan)] on by default\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "a55ea6f5bca29fdc8294310a8c0fc67146280ad8", "filename": "tests/ui/cmp_null.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cmp_null.rs"}, {"sha": "45523cea39e60237b7600b9107f36b9ecdf59a94", "filename": "tests/ui/cmp_null.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_null.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: Comparing with null is better expressed by the .is_null() method\n+  --> $DIR/cmp_null.rs:11:8\n+   |\n+11 |     if p == ptr::null() { //~ERROR:  Comparing with null\n+   |        ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/cmp_null.rs:3:9\n+   |\n+3  | #![deny(cmp_null)]\n+   |         ^^^^^^^^\n+\n+error: Comparing with null is better expressed by the .is_null() method\n+  --> $DIR/cmp_null.rs:16:8\n+   |\n+16 |     if m == ptr::null_mut() { //~ERROR:  Comparing with null\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f7c7824e9d1cddb1c326c9f3a6028ddc521bd08f", "filename": "tests/ui/cmp_owned.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cmp_owned.rs"}, {"sha": "5c4ff833849ebc08bb0d93c2fa930df87d294856", "filename": "tests/ui/cmp_owned.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcmp_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcmp_owned.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,32 @@\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+ --> $DIR/cmp_owned.rs:8:14\n+  |\n+8 |         x != \"foo\".to_string();\n+  |              ^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/cmp_owned.rs:4:8\n+  |\n+4 | #[deny(cmp_owned)]\n+  |        ^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `\"foo\" != x` to compare without allocation\n+  --> $DIR/cmp_owned.rs:11:9\n+   |\n+11 |         \"foo\".to_string() != x;\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+  --> $DIR/cmp_owned.rs:19:10\n+   |\n+19 |     x != \"foo\".to_owned(); //~ERROR this creates an owned instance\n+   |          ^^^^^^^^^^^^^^^^\n+\n+error: this creates an owned instance just for comparison. Consider using `x != \"foo\"` to compare without allocation\n+  --> $DIR/cmp_owned.rs:24:10\n+   |\n+24 |     x != String::from(\"foo\"); //~ERROR this creates an owned instance\n+   |          ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b23d6a6e4c186c19c237d927700fdd94b27a7ba2", "filename": "tests/ui/collapsible_if.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/collapsible_if.rs"}, {"sha": "ed510f96229b8883d4d784b9a282f39b319e4e42", "filename": "tests/ui/collapsible_if.stderr", "status": "added", "additions": 229, "deletions": 0, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcollapsible_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcollapsible_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_if.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,229 @@\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:8:5\n+   |\n+8  |       if x == \"hello\" {\n+   |  _____^ starting here...\n+9  | |     //~^ ERROR this if statement can be collapsed\n+10 | |     //~| HELP try\n+11 | |     //~| SUGGESTION if x == \"hello\" && y == \"world\" {\n+12 | |         if y == \"world\" {\n+13 | |             println!(\"Hello world!\");\n+14 | |         }\n+15 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/collapsible_if.rs:4:8\n+   |\n+4  | #[deny(collapsible_if)]\n+   |        ^^^^^^^^^^^^^^\n+help: try\n+   |     if x == \"hello\" && y == \"world\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:17:5\n+   |\n+17 |       if x == \"hello\" || x == \"world\" {\n+   |  _____^ starting here...\n+18 | |     //~^ ERROR this if statement can be collapsed\n+19 | |     //~| HELP try\n+20 | |     //~| SUGGESTION if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n+21 | |         if y == \"world\" || y == \"hello\" {\n+22 | |             println!(\"Hello world!\");\n+23 | |         }\n+24 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:26:5\n+   |\n+26 |       if x == \"hello\" && x == \"world\" {\n+   |  _____^ starting here...\n+27 | |     //~^ ERROR this if statement can be collapsed\n+28 | |     //~| HELP try\n+29 | |     //~| SUGGESTION if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n+30 | |         if y == \"world\" || y == \"hello\" {\n+31 | |             println!(\"Hello world!\");\n+32 | |         }\n+33 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if x == \"hello\" && x == \"world\" && (y == \"world\" || y == \"hello\") {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:35:5\n+   |\n+35 |       if x == \"hello\" || x == \"world\" {\n+   |  _____^ starting here...\n+36 | |     //~^ ERROR this if statement can be collapsed\n+37 | |     //~| HELP try\n+38 | |     //~| SUGGESTION if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n+39 | |         if y == \"world\" && y == \"hello\" {\n+40 | |             println!(\"Hello world!\");\n+41 | |         }\n+42 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if (x == \"hello\" || x == \"world\") && y == \"world\" && y == \"hello\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:44:5\n+   |\n+44 |       if x == \"hello\" && x == \"world\" {\n+   |  _____^ starting here...\n+45 | |     //~^ ERROR this if statement can be collapsed\n+46 | |     //~| HELP try\n+47 | |     //~| SUGGESTION if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n+48 | |         if y == \"world\" && y == \"hello\" {\n+49 | |             println!(\"Hello world!\");\n+50 | |         }\n+51 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if x == \"hello\" && x == \"world\" && y == \"world\" && y == \"hello\" {\n+   |     println!(\"Hello world!\");\n+   | }\n+\n+error: this if statement can be collapsed\n+  --> $DIR/collapsible_if.rs:53:5\n+   |\n+53 |       if 42 == 1337 {\n+   |  _____^ starting here...\n+54 | |     //~^ ERROR this if statement can be collapsed\n+55 | |     //~| HELP try\n+56 | |     //~| SUGGESTION if 42 == 1337 && 'a' != 'A' {\n+57 | |         if 'a' != 'A' {\n+58 | |             println!(\"world!\")\n+59 | |         }\n+60 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     if 42 == 1337 && 'a' != 'A' {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:65:12\n+   |\n+65 |       } else {\n+   |  ____________^ starting here...\n+66 | |         //~^ ERROR: this `else { if .. }`\n+67 | |         //~| HELP try\n+68 | |         //~| SUGGESTION } else if y == \"world\"\n+69 | |         if y == \"world\" {\n+70 | |             println!(\"world!\")\n+71 | |         }\n+72 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     } else if y == \"world\" {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:76:12\n+   |\n+76 |       } else {\n+   |  ____________^ starting here...\n+77 | |         //~^ ERROR: this `else { if .. }`\n+78 | |         //~| HELP try\n+79 | |         //~| SUGGESTION } else if let Some(42)\n+80 | |         if let Some(42) = Some(42) {\n+81 | |             println!(\"world!\")\n+82 | |         }\n+83 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     } else if let Some(42) = Some(42) {\n+   |     println!(\"world!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+  --> $DIR/collapsible_if.rs:87:12\n+   |\n+87 |     } else {\n+   |            ^\n+   |\n+help: try\n+   |     } else if y == \"world\" {\n+   |     println!(\"world\")\n+   | }\n+   | else {\n+   |     println!(\"!\")\n+   | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:101:12\n+    |\n+101 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:115:12\n+    |\n+115 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:129:12\n+    |\n+129 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if x == \"hello\" {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: this `else { if .. }` block can be collapsed\n+   --> $DIR/collapsible_if.rs:143:12\n+    |\n+143 |     } else {\n+    |            ^\n+    |\n+help: try\n+    |     } else if let Some(42) = Some(42) {\n+    |     println!(\"world\")\n+    | }\n+    | else {\n+    |     println!(\"!\")\n+    | }\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "ad01e4fadd5f80d581eedaf61585f6fe871ed87a", "filename": "tests/ui/complex_types.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcomplex_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcomplex_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/complex_types.rs"}, {"sha": "b502a3fd5c1dd603a17bf69c2040ab0510bcbf88", "filename": "tests/ui/complex_types.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcomplex_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcomplex_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcomplex_types.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,127 @@\n+error: very complex type used. Consider factoring parts into `type` definitions\n+ --> $DIR/complex_types.rs:9:12\n+  |\n+9 | const CST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n+  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/complex_types.rs:3:9\n+  |\n+3 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:10:12\n+   |\n+10 | static ST: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:13:8\n+   |\n+13 |     f: Vec<Vec<Box<(u32, u32, u32, u32)>>>, //~ERROR very complex type\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:16:11\n+   |\n+16 | struct TS(Vec<Vec<Box<(u32, u32, u32, u32)>>>); //~ERROR very complex type\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:19:11\n+   |\n+19 |     Tuple(Vec<Vec<Box<(u32, u32, u32, u32)>>>), //~ERROR very complex type\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:20:17\n+   |\n+20 |     Struct { f: Vec<Vec<Box<(u32, u32, u32, u32)>>> }, //~ERROR very complex type\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:24:14\n+   |\n+24 |     const A: (u32, (u32, (u32, (u32, u32)))) = (0, (0, (0, (0, 0)))); //~ERROR very complex type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:25:30\n+   |\n+25 |     fn impl_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:29:14\n+   |\n+29 |     const A: Vec<Vec<Box<(u32, u32, u32, u32)>>>; //~ERROR very complex type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:30:14\n+   |\n+30 |     type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>; //~ERROR very complex type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:31:25\n+   |\n+31 |     fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>); //~ERROR very complex type\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:32:29\n+   |\n+32 |     fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:35:15\n+   |\n+35 | fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> { vec![] } //~ERROR very complex type\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:37:14\n+   |\n+37 | fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) { } //~ERROR very complex type\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: very complex type used. Consider factoring parts into `type` definitions\n+  --> $DIR/complex_types.rs:40:13\n+   |\n+40 |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![]; //~ERROR very complex type\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(type_complexity)] implied by #[deny(clippy)]\n+\n+error: aborting due to 15 previous errors\n+"}, {"sha": "68b902719f6e72da3818773877284bcc9f4eeaae", "filename": "tests/ui/conf_bad_arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_bad_arg.rs"}, {"sha": "92b3c82d45831eb04d640d8b3ecb903af85ae300", "filename": "tests/ui/conf_bad_arg.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_arg.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: `conf_file` must be a named value\n+ --> $DIR/conf_bad_arg.rs:4:18\n+  |\n+4 | #![plugin(clippy(conf_file))]\n+  |                  ^^^^^^^^^\n+  |\n+note: Clippy will use default configuration\n+ --> $DIR/conf_bad_arg.rs:4:18\n+  |\n+4 | #![plugin(clippy(conf_file))]\n+  |                  ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5ea6d96ef58a5be9dafcb54b158bc3b4af272d8", "filename": "tests/ui/conf_bad_toml.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_bad_toml.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_bad_toml.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "823e01a33b96172e13855c6c023599f2852e71f9", "filename": "tests/ui/conf_bad_toml.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_toml.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_toml.toml?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_bad_toml.toml"}, {"sha": "8dc3e4ec2e675c61c5c8bffa38b4521db5cdb4a6", "filename": "tests/ui/conf_bad_type.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_bad_type.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_bad_type.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "168675394d7f45124940fcfa3433aab378c1fbd8", "filename": "tests/ui/conf_bad_type.toml", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_bad_type.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_bad_type.toml?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_bad_type.toml"}, {"sha": "4c306a98b2014497cc9be1cc8db2643148ed608a", "filename": "tests/ui/conf_french_blacklisted_name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_french_blacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_french_blacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_french_blacklisted_name.rs"}, {"sha": "0c4996c2c5ff391dc29241667ed4c147571ad09a", "filename": "tests/ui/conf_french_blacklisted_name.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_french_blacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_french_blacklisted_name.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,50 @@\n+error: use of a blacklisted/placeholder name `toto`\n+ --> $DIR/conf_french_blacklisted_name.rs:9:9\n+  |\n+9 | fn test(toto: ()) {} //~ERROR use of a blacklisted/placeholder name `toto`\n+  |         ^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/conf_french_blacklisted_name.rs:7:9\n+  |\n+7 | #![deny(blacklisted_name)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: use of a blacklisted/placeholder name `toto`\n+  --> $DIR/conf_french_blacklisted_name.rs:12:9\n+   |\n+12 |     let toto = 42; //~ERROR use of a blacklisted/placeholder name `toto`\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `tata`\n+  --> $DIR/conf_french_blacklisted_name.rs:13:9\n+   |\n+13 |     let tata = 42; //~ERROR use of a blacklisted/placeholder name `tata`\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `titi`\n+  --> $DIR/conf_french_blacklisted_name.rs:14:9\n+   |\n+14 |     let titi = 42; //~ERROR use of a blacklisted/placeholder name `titi`\n+   |         ^^^^\n+\n+error: use of a blacklisted/placeholder name `toto`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:10\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |          ^^^^\n+\n+error: use of a blacklisted/placeholder name `tata`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:21\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                     ^^^^\n+\n+error: use of a blacklisted/placeholder name `titi`\n+  --> $DIR/conf_french_blacklisted_name.rs:20:28\n+   |\n+20 |         (toto, Some(tata), titi @ Some(_)) => (),\n+   |                            ^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "e287f7e02af932cc5f8ba849aaf8f18c89a9fc7b", "filename": "tests/ui/conf_non_existant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_non_existant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_non_existant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_non_existant.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_non_existant.rs"}, {"sha": "7920bd35589da9fe21b8bd22f98431949d299fbe", "filename": "tests/ui/conf_non_existant.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_non_existant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_non_existant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_non_existant.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: No such file or directory (os error 2)\n+\n+error: aborting due to previous error\n+"}, {"sha": "f26f581f5c014d1e8b710a4ba9ec0f838623d062", "filename": "tests/ui/conf_path_non_string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_path_non_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_path_non_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_path_non_string.rs"}, {"sha": "3bf53f10cce47aae44724247807ae20ca7a44f90", "filename": "tests/ui/conf_path_non_string.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_path_non_string.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_path_non_string.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_path_non_string.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: `conf_file` value must be a string\n+ --> $DIR/conf_path_non_string.rs:3:28\n+  |\n+3 | #![plugin(clippy(conf_file=42))]\n+  |                            ^^\n+  |\n+note: Clippy will use default configuration\n+ --> $DIR/conf_path_non_string.rs:3:28\n+  |\n+3 | #![plugin(clippy(conf_file=42))]\n+  |                            ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "b5c1b240e4d123cc43e00e6d011a1ea076371a9b", "filename": "tests/ui/conf_unknown_key.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_unknown_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_unknown_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/conf_unknown_key.rs"}, {"sha": "536950fec31e67640702e3006cf3c10b2013c557", "filename": "tests/ui/conf_unknown_key.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconf_unknown_key.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,4 @@\n+error: error reading Clippy's configuration file: unknown key `foobar`\n+\n+error: aborting due to previous error\n+"}, {"sha": "9b1e1ec801ec92670b399b557d9ceeca46d08bc5", "filename": "tests/ui/copies.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/copies.rs"}, {"sha": "634eb5d546f208dc71f8d2dc3a27a7a1fa912532", "filename": "tests/ui/copies.stderr", "status": "added", "additions": 409, "deletions": 0, "changes": 409, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcopies.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcopies.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcopies.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,409 @@\n+error: this `if` has identical blocks\n+  --> $DIR/copies.rs:40:10\n+   |\n+40 |       else { //~ERROR this `if` has identical blocks\n+   |  __________^ starting here...\n+41 | |         Foo { bar: 42 };\n+42 | |         0..10;\n+43 | |         ..;\n+44 | |         0..;\n+45 | |         ..10;\n+46 | |         0...10;\n+47 | |         foo();\n+48 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/copies.rs:27:8\n+   |\n+27 | #[deny(if_same_then_else)]\n+   |        ^^^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/copies.rs:30:13\n+   |\n+30 |     if true {\n+   |             ^\n+\n+error: this `match` has identical arm bodies\n+  --> $DIR/copies.rs:91:14\n+   |\n+91 |           _ => { //~ERROR this `match` has identical arm bodies\n+   |  ______________^ starting here...\n+92 | |             foo();\n+93 | |             let mut a = 42 + [23].len() as i32;\n+94 | |             if true {\n+95 | |                 a += 7;\n+96 | |             }\n+97 | |             a = -31-a;\n+98 | |             a\n+99 | |         }\n+   | |_________^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/copies.rs:28:8\n+   |\n+28 | #[deny(match_same_arms)]\n+   |        ^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/copies.rs:80:15\n+   |\n+80 |         42 => {\n+   |               ^\n+note: `42` has the same arm body as the `_` wildcard, consider removing it`\n+  --> $DIR/copies.rs:80:15\n+   |\n+80 |         42 => {\n+   |               ^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:107:14\n+    |\n+107 |         _ => 0, //~ERROR this `match` has identical arm bodies\n+    |              ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:103:19\n+    |\n+103 |         Abc::A => 0,\n+    |                   ^\n+note: `Abc::A` has the same arm body as the `_` wildcard, consider removing it`\n+   --> $DIR/copies.rs:103:19\n+    |\n+103 |         Abc::A => 0,\n+    |                   ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:118:10\n+    |\n+118 |       else { //~ERROR this `if` has identical blocks\n+    |  __________^ starting here...\n+119 | |         42\n+120 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:114:21\n+    |\n+114 |       let _ = if true {\n+    |  _____________________^ starting here...\n+115 | |         //~^NOTE same as this\n+116 | |         42\n+117 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:133:10\n+    |\n+133 |     else { //~ERROR this `if` has identical blocks\n+    |          ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:122:13\n+    |\n+122 |     if true {\n+    |             ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:156:10\n+    |\n+156 |     else { //~ERROR this `if` has identical blocks\n+    |          ^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:144:13\n+    |\n+144 |     if true {\n+    |             ^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:180:19\n+    |\n+180 |       else if foo() { //~ERROR this `if` has identical blocks\n+    |  ___________________^ starting here...\n+181 | |         let _ = match 42 {\n+182 | |             42 => 1,\n+183 | |             a if a > 0 => 2,\n+184 | |             10...15 => 3,\n+185 | |             _ => 4,\n+186 | |         };\n+187 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:168:13\n+    |\n+168 |       if true {\n+    |  _____________^ starting here...\n+169 | |         //~^NOTE same as this\n+170 | |         let _ = match 42 {\n+171 | |             42 => 1,\n+172 | |             a if a > 0 => 2,\n+173 | |             10...15 => 3,\n+174 | |             _ => 4,\n+175 | |         };\n+176 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:193:10\n+    |\n+193 |       else { //~ERROR this `if` has identical blocks\n+    |  __________^ starting here...\n+194 | |         if let Some(a) = Some(42) {}\n+195 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:189:13\n+    |\n+189 |       if true {\n+    |  _____________^ starting here...\n+190 | |         //~^NOTE same as this\n+191 | |         if let Some(a) = Some(42) {}\n+192 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:201:10\n+    |\n+201 |       else { //~ERROR this `if` has identical blocks\n+    |  __________^ starting here...\n+202 | |         if let (1, .., 3) = (1, 2, 3) {}\n+203 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:197:13\n+    |\n+197 |       if true {\n+    |  _____________^ starting here...\n+198 | |         //~^NOTE same as this\n+199 | |         if let (1, .., 3) = (1, 2, 3) {}\n+200 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:258:15\n+    |\n+258 |         51 => foo(), //~ERROR this `match` has identical arm bodies\n+    |               ^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:255:15\n+    |\n+255 |         42 => foo(),\n+    |               ^^^^^\n+note: consider refactoring into `42 | 51`\n+   --> $DIR/copies.rs:255:15\n+    |\n+255 |         42 => foo(),\n+    |               ^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:266:17\n+    |\n+266 |         None => 24, //~ERROR this `match` has identical arm bodies\n+    |                 ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:263:20\n+    |\n+263 |         Some(_) => 24,\n+    |                    ^^\n+note: consider refactoring into `Some(_) | None`\n+   --> $DIR/copies.rs:263:20\n+    |\n+263 |         Some(_) => 24,\n+    |                    ^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:290:28\n+    |\n+290 |         (None, Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n+    |                            ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:287:28\n+    |\n+287 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+note: consider refactoring into `(Some(a), None) | (None, Some(a))`\n+   --> $DIR/copies.rs:287:28\n+    |\n+287 |         (Some(a), None) => bar(a),\n+    |                            ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:298:26\n+    |\n+298 |         (.., Some(a)) => bar(a), //~ERROR this `match` has identical arm bodies\n+    |                          ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:295:26\n+    |\n+295 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+note: consider refactoring into `(Some(a), ..) | (.., Some(a))`\n+   --> $DIR/copies.rs:295:26\n+    |\n+295 |         (Some(a), ..) => bar(a),\n+    |                          ^^^^^^\n+\n+error: this `match` has identical arm bodies\n+   --> $DIR/copies.rs:306:20\n+    |\n+306 |         (.., 3) => 42, //~ERROR this `match` has identical arm bodies\n+    |                    ^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:303:23\n+    |\n+303 |         (1, .., 3) => 42,\n+    |                       ^^\n+note: consider refactoring into `(1, .., 3) | (.., 3)`\n+   --> $DIR/copies.rs:303:23\n+    |\n+303 |         (1, .., 3) => 42,\n+    |                       ^^\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:313:12\n+    |\n+313 |       } else { //~ERROR this `if` has identical blocks\n+    |  ____________^ starting here...\n+314 | |         0.0\n+315 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:310:21\n+    |\n+310 |       let _ = if true {\n+    |  _____________________^ starting here...\n+311 | |         //~^NOTE same as this\n+312 | |         0.0\n+313 | |     } else { //~ERROR this `if` has identical blocks\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:320:12\n+    |\n+320 |       } else { //~ERROR this `if` has identical blocks\n+    |  ____________^ starting here...\n+321 | |         -0.0\n+322 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:317:21\n+    |\n+317 |       let _ = if true {\n+    |  _____________________^ starting here...\n+318 | |         //~^NOTE same as this\n+319 | |         -0.0\n+320 | |     } else { //~ERROR this `if` has identical blocks\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:341:12\n+    |\n+341 |       } else { //~ERROR this `if` has identical blocks\n+    |  ____________^ starting here...\n+342 | |         std::f32::NAN\n+343 | |     };\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:338:21\n+    |\n+338 |       let _ = if true {\n+    |  _____________________^ starting here...\n+339 | |         //~^NOTE same as this\n+340 | |         std::f32::NAN\n+341 | |     } else { //~ERROR this `if` has identical blocks\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:360:10\n+    |\n+360 |       else { //~ERROR this `if` has identical blocks\n+    |  __________^ starting here...\n+361 | |         try!(Ok(\"foo\"));\n+362 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:356:13\n+    |\n+356 |       if true {\n+    |  _____________^ starting here...\n+357 | |         //~^NOTE same as this\n+358 | |         try!(Ok(\"foo\"));\n+359 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has identical blocks\n+   --> $DIR/copies.rs:373:10\n+    |\n+373 |       else { //~ERROR this `if` has identical blocks\n+    |  __________^ starting here...\n+374 | |         let foo = \"\";\n+375 | |         return Ok(&foo[0..]);\n+376 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:364:13\n+    |\n+364 |       if true {\n+    |  _____________^ starting here...\n+365 | |         //~^NOTE same as this\n+366 | |         let foo = \"\";\n+367 | |         return Ok(&foo[0..]);\n+368 | |     }\n+    | |_____^ ...ending here\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:388:13\n+    |\n+388 |     else if b { //~ERROR this `if` has the same condition as a previous if\n+    |             ^\n+    |\n+note: lint level defined here\n+   --> $DIR/copies.rs:379:8\n+    |\n+379 | #[deny(ifs_same_cond)]\n+    |        ^^^^^^^^^^^^^\n+note: same as this\n+   --> $DIR/copies.rs:385:8\n+    |\n+385 |     if b {\n+    |        ^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:394:13\n+    |\n+394 |     else if a == 1 { //~ERROR this `if` has the same condition as a previous if\n+    |             ^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:391:8\n+    |\n+391 |     if a == 1 {\n+    |        ^^^^^^\n+\n+error: this `if` has the same condition as a previous if\n+   --> $DIR/copies.rs:402:13\n+    |\n+402 |     else if 2*a == 1 { //~ERROR this `if` has the same condition as a previous if\n+    |             ^^^^^^^^\n+    |\n+note: same as this\n+   --> $DIR/copies.rs:397:8\n+    |\n+397 |     if 2*a == 1 {\n+    |        ^^^^^^^^\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "30bbcc6cb278a5ab83e3bde153d0022bc0151e66", "filename": "tests/ui/cyclomatic_complexity.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cyclomatic_complexity.rs"}, {"sha": "45f258f95604b40fea8668b5bd46e56626c3d7ee", "filename": "tests/ui/cyclomatic_complexity.stderr", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,232 @@\n+error: the function has a cyclomatic complexity of 28\n+  --> $DIR/cyclomatic_complexity.rs:7:1\n+   |\n+7  | fn main() { //~ERROR the function has a cyclomatic complexity of 28\n+   | ^\n+   |\n+note: lint level defined here\n+  --> $DIR/cyclomatic_complexity.rs:4:9\n+   |\n+4  | #![deny(cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 7\n+   --> $DIR/cyclomatic_complexity.rs:92:1\n+    |\n+92  | fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 7\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:138:1\n+    |\n+138 |   fn lots_of_short_circuits() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+    |  _^ starting here...\n+139 | |     true && false && true && false && true && false && true\n+140 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:143:1\n+    |\n+143 |   fn lots_of_short_circuits2() -> bool { //~ ERROR: the function has a cyclomatic complexity of 1\n+    |  _^ starting here...\n+144 | |     true || false || true || false || true || false || true\n+145 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:148:1\n+    |\n+148 | fn baa() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:149:13\n+    |\n+149 |       let x = || match 99 { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _____________^ starting here...\n+150 | |         0 => 0,\n+151 | |         1 => 1,\n+152 | |         2 => 2,\n+153 | |         4 => 4,\n+154 | |         6 => 6,\n+155 | |         9 => 9,\n+156 | |         _ => 42,\n+157 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:166:1\n+    |\n+166 |   fn bar() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _^ starting here...\n+167 | |     match 99 {\n+168 | |         0 => println!(\"hi\"),\n+169 | |         _ => println!(\"bye\"),\n+170 | |     }\n+171 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:185:1\n+    |\n+185 |   fn barr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _^ starting here...\n+186 | |     match 99 {\n+187 | |         0 => println!(\"hi\"),\n+188 | |         1 => println!(\"bla\"),\n+189 | |         2 | 3 => println!(\"blub\"),\n+190 | |         _ => println!(\"bye\"),\n+191 | |     }\n+192 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:195:1\n+    |\n+195 | fn barr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:211:1\n+    |\n+211 |   fn barrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _^ starting here...\n+212 | |     match 99 {\n+213 | |         0 => println!(\"hi\"),\n+214 | |         1 => panic!(\"bla\"),\n+215 | |         2 | 3 => println!(\"blub\"),\n+216 | |         _ => println!(\"bye\"),\n+217 | |     }\n+218 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:221:1\n+    |\n+221 | fn barrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:237:1\n+    |\n+237 |   fn barrrr() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _^ starting here...\n+238 | |     match 99 {\n+239 | |         0 => println!(\"hi\"),\n+240 | |         1 => println!(\"bla\"),\n+241 | |         2 | 3 => panic!(\"blub\"),\n+242 | |         _ => println!(\"bye\"),\n+243 | |     }\n+244 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 3\n+   --> $DIR/cyclomatic_complexity.rs:247:1\n+    |\n+247 | fn barrrr2() { //~ ERROR: the function has a cyclomatic complexity of 3\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 2\n+   --> $DIR/cyclomatic_complexity.rs:263:1\n+    |\n+263 |   fn cake() { //~ ERROR: the function has a cyclomatic complexity of 2\n+    |  _^ starting here...\n+264 | |     if 4 == 5 {\n+265 | |         println!(\"yea\");\n+266 | |     } else {\n+267 | |         panic!(\"meh\");\n+268 | |     }\n+269 | |     println!(\"whee\");\n+270 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 4\n+   --> $DIR/cyclomatic_complexity.rs:274:1\n+    |\n+274 | pub fn read_file(input_path: &str) -> String { //~ ERROR: the function has a cyclomatic complexity of 4\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:305:1\n+    |\n+305 |   fn void(void: Void) { //~ ERROR: the function has a cyclomatic complexity of 1\n+    |  _^ starting here...\n+306 | |     if true {\n+307 | |         match void {\n+308 | |         }\n+309 | |     }\n+310 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:319:1\n+    |\n+319 |   fn try() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    |  _^ starting here...\n+320 | |     match 5 {\n+321 | |         5 => Ok(5),\n+322 | |         _ => return Err(\"bla\"),\n+323 | |     }\n+324 | | }\n+    | |_^ ...ending here\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:327:1\n+    |\n+327 | fn try_again() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 1\n+   --> $DIR/cyclomatic_complexity.rs:343:1\n+    |\n+343 | fn early() -> Result<i32, &'static str> { //~ ERROR: cyclomatic complexity of 1\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: the function has a cyclomatic complexity of 8\n+   --> $DIR/cyclomatic_complexity.rs:356:1\n+    |\n+356 | fn early_ret() -> i32 { //~ ERROR: cyclomatic complexity of 8\n+    | ^\n+    |\n+    = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "f322a7b51da4a5cd0af5b92bb41a09209f1f8c46", "filename": "tests/ui/cyclomatic_complexity_attr_used.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/cyclomatic_complexity_attr_used.rs"}, {"sha": "aa87b75058ce4c5cdc16337f3bc5414c287abfc2", "filename": "tests/ui/cyclomatic_complexity_attr_used.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcyclomatic_complexity_attr_used.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,22 @@\n+error: the function has a cyclomatic complexity of 3\n+  --> $DIR/cyclomatic_complexity_attr_used.rs:11:1\n+   |\n+11 |   fn kaboom() {  //~ ERROR: the function has a cyclomatic complexity of 3\n+   |  _^ starting here...\n+12 | |     if 42 == 43 {\n+13 | |         panic!();\n+14 | |     } else if \"cake\" == \"lie\" {\n+15 | |         println!(\"what?\");\n+16 | |     }\n+17 | | }\n+   | |_^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/cyclomatic_complexity_attr_used.rs:3:9\n+   |\n+3  | #![deny(cyclomatic_complexity)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+   = help: you could split it up into multiple smaller functions\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf4467f30a59271abe40ea019cf4efdf1890db6f", "filename": "tests/ui/derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/derive.rs"}, {"sha": "97b5344ee7f71ca97b9604e11c706cf8e03e0a9c", "filename": "tests/ui/derive.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fderive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fderive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderive.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,103 @@\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derive.rs:18:10\n+   |\n+18 | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/derive.rs:6:9\n+   |\n+6  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:22:1\n+   |\n+22 |   impl PartialEq for Bar {\n+   |  _^ starting here...\n+23 | |     fn eq(&self, _: &Bar) -> bool { true }\n+24 | | }\n+   | |_^ ...ending here\n+\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derive.rs:26:10\n+   |\n+26 | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:30:1\n+   |\n+30 |   impl PartialEq<Baz> for Baz {\n+   |  _^ starting here...\n+31 | |     fn eq(&self, _: &Baz) -> bool { true }\n+32 | | }\n+   | |_^ ...ending here\n+\n+error: you are implementing `Hash` explicitly but have derived `PartialEq`\n+  --> $DIR/derive.rs:37:1\n+   |\n+37 |   impl Hash for Bah {\n+   |  _^ starting here...\n+38 | | //~^ ERROR you are implementing `Hash` explicitly but have derived `PartialEq`\n+39 | |     fn hash<H: Hasher>(&self, _: &mut H) {}\n+40 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(derive_hash_xor_eq)] implied by #[deny(warnings)]\n+note: `PartialEq` implemented here\n+  --> $DIR/derive.rs:34:10\n+   |\n+34 | #[derive(PartialEq)]\n+   |          ^^^^^^^^^\n+\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:45:1\n+   |\n+45 |   impl Clone for Qux {\n+   |  _^ starting here...\n+46 | | //~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+47 | |     fn clone(&self) -> Self { Qux }\n+48 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/derive.rs:6:9\n+   |\n+6  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:45:1\n+   |\n+45 |   impl Clone for Qux {\n+   |  _^ starting here...\n+46 | | //~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+47 | |     fn clone(&self) -> Self { Qux }\n+48 | | }\n+   | |_^ ...ending here\n+\n+error: you are implementing `Clone` explicitly on a `Copy` type\n+  --> $DIR/derive.rs:70:1\n+   |\n+70 |   impl<'a> Clone for Lt<'a> {\n+   |  _^ starting here...\n+71 | | //~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+72 | |     fn clone(&self) -> Self { unimplemented!() }\n+73 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(expl_impl_clone_on_copy)] implied by #[deny(warnings)]\n+note: consider deriving `Clone` or removing `Copy`\n+  --> $DIR/derive.rs:70:1\n+   |\n+70 |   impl<'a> Clone for Lt<'a> {\n+   |  _^ starting here...\n+71 | | //~^ ERROR you are implementing `Clone` explicitly on a `Copy` type\n+72 | |     fn clone(&self) -> Self { unimplemented!() }\n+73 | | }\n+   | |_^ ...ending here\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "02e6d0693d1d86a83061b2f9b78aafdfc094e5ec", "filename": "tests/ui/diverging_sub_expression.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdiverging_sub_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdiverging_sub_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/diverging_sub_expression.rs"}, {"sha": "805a01840de73b32f6ebb4b734cf73fa5ee2bd80", "filename": "tests/ui/diverging_sub_expression.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdiverging_sub_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdiverging_sub_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdiverging_sub_expression.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,44 @@\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:18:10\n+   |\n+18 |     b || diverge(); //~ ERROR sub-expression diverges\n+   |          ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/diverging_sub_expression.rs:3:9\n+   |\n+3  | #![deny(diverging_sub_expression)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:19:10\n+   |\n+19 |     b || A.foo(); //~ ERROR sub-expression diverges\n+   |          ^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:28:26\n+   |\n+28 |             6 => true || return, //~ ERROR sub-expression diverges\n+   |                          ^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:29:26\n+   |\n+29 |             7 => true || continue, //~ ERROR sub-expression diverges\n+   |                          ^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:32:26\n+   |\n+32 |             3 => true || diverge(), //~ ERROR sub-expression diverges\n+   |                          ^^^^^^^^^\n+\n+error: sub-expression diverges\n+  --> $DIR/diverging_sub_expression.rs:37:26\n+   |\n+37 |             _ => true || break, //~ ERROR sub-expression diverges\n+   |                          ^^^^^\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "63c678eb69c285dabf478fef2ed0b05e223c8e26", "filename": "tests/ui/dlist.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/dlist.rs"}, {"sha": "1d0507d1e0408e9bd00de8ed7377d04d8c561688", "filename": "tests/ui/dlist.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdlist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdlist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdlist.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,61 @@\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:13:16\n+   |\n+13 |     type Baz = LinkedList<u8>; //~ ERROR I see you're using a LinkedList!\n+   |                ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/dlist.rs:6:9\n+   |\n+6  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:14:12\n+   |\n+14 |     fn foo(LinkedList<u8>); //~ ERROR I see you're using a LinkedList!\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:15:24\n+   |\n+15 |     const BAR : Option<LinkedList<u8>>; //~ ERROR I see you're using a LinkedList!\n+   |                        ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:26:15\n+   |\n+26 |     fn foo(_: LinkedList<u8>) {} //~ ERROR I see you're using a LinkedList!\n+   |               ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:29:39\n+   |\n+29 | pub fn test(my_favourite_linked_list: LinkedList<u8>) { //~ ERROR I see you're using a LinkedList!\n+   |                                       ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: I see you're using a LinkedList! Perhaps you meant some other data structure?\n+  --> $DIR/dlist.rs:33:29\n+   |\n+33 | pub fn test_ret() -> Option<LinkedList<u8>> { //~ ERROR I see you're using a LinkedList!\n+   |                             ^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(linkedlist)] implied by #[deny(clippy)]\n+   = help: a VecDeque might work\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "84283a8316e9f93cbc281de8a83c1dcb8d38a0b9", "filename": "tests/ui/doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/doc.rs"}, {"sha": "90df4766faef4cb6824fbca02dceeadfaf19daa8", "filename": "tests/ui/doc.stderr", "status": "added", "additions": 182, "deletions": 0, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdoc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdoc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,182 @@\n+error: you should put `DOC_MARKDOWN` between ticks in the documentation\n+ --> $DIR/doc.rs:1:29\n+  |\n+1 | //! This file tests for the DOC_MARKDOWN lint\n+  |                             ^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/doc.rs:7:9\n+  |\n+7 | #![deny(doc_markdown)]\n+  |         ^^^^^^^^^^^^\n+\n+error: you should put `foo_bar` between ticks in the documentation\n+ --> $DIR/doc.rs:9:9\n+  |\n+9 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+  |         ^^^^^^^\n+\n+error: you should put `foo::bar` between ticks in the documentation\n+ --> $DIR/doc.rs:9:51\n+  |\n+9 | /// The foo_bar function does _nothing_. See also foo::bar. (note the dot there)\n+  |                                                   ^^^^^^^^\n+\n+error: you should put `Foo::some_fun` between ticks in the documentation\n+  --> $DIR/doc.rs:12:84\n+   |\n+12 | /// Markdown is _weird_. I mean _really weird_.  This /_ is ok. So is `_`. But not Foo::some_fun\n+   |                                                                                    ^^^^^^^^^^^^^\n+\n+error: you should put `is::a::global:path` between ticks in the documentation\n+  --> $DIR/doc.rs:15:13\n+   |\n+15 | /// Here be ::is::a::global:path.\n+   |             ^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `NotInCodeBlock` between ticks in the documentation\n+  --> $DIR/doc.rs:17:21\n+   |\n+17 | /// That's not code ~NotInCodeBlock~.\n+   |                     ^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:19:5\n+   |\n+19 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:34:5\n+   |\n+34 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:42:5\n+   |\n+42 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:57:5\n+   |\n+57 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `\u00df_foo` between ticks in the documentation\n+  --> $DIR/doc.rs:67:5\n+   |\n+67 | /// \u00df_foo\n+   |     ^^^^^\n+\n+error: you should put `\u211d_foo` between ticks in the documentation\n+  --> $DIR/doc.rs:69:5\n+   |\n+69 | /// \u211d_foo\n+   |     ^^^^^\n+\n+error: you should put `foo_\u00df` between ticks in the documentation\n+  --> $DIR/doc.rs:73:5\n+   |\n+73 | /// foo_\u00df\n+   |     ^^^^^\n+\n+error: you should put `foo_\u211d` between ticks in the documentation\n+  --> $DIR/doc.rs:75:5\n+   |\n+75 | /// foo_\u211d\n+   |     ^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+  --> $DIR/doc.rs:91:5\n+   |\n+91 | /// be_sure_we_got_to_the_end_of_it\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `link_with_underscores` between ticks in the documentation\n+  --> $DIR/doc.rs:96:22\n+   |\n+96 | /// This test has [a link_with_underscores][chunked-example] inside it. See #823.\n+   |                      ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `inline_link2` between ticks in the documentation\n+   --> $DIR/doc.rs:100:21\n+    |\n+100 | /// It can also be [inline_link2].\n+    |                     ^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:112:5\n+    |\n+112 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `CamelCaseThing` between ticks in the documentation\n+   --> $DIR/doc.rs:126:22\n+    |\n+126 | /// Not a title #897 CamelCaseThing\n+    |                      ^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:128:5\n+    |\n+128 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:136:5\n+    |\n+136 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:150:5\n+    |\n+150 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `FooBar` between ticks in the documentation\n+   --> $DIR/doc.rs:162:42\n+    |\n+162 | /** E.g. serialization of an empty list: FooBar\n+    |                                          ^^^^^^\n+\n+error: you should put `BarQuz` between ticks in the documentation\n+   --> $DIR/doc.rs:167:5\n+    |\n+167 | And BarQuz too.\n+    |     ^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:168:1\n+    |\n+168 | be_sure_we_got_to_the_end_of_it\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `FooBar` between ticks in the documentation\n+   --> $DIR/doc.rs:176:42\n+    |\n+176 | /** E.g. serialization of an empty list: FooBar\n+    |                                          ^^^^^^\n+\n+error: you should put `BarQuz` between ticks in the documentation\n+   --> $DIR/doc.rs:181:5\n+    |\n+181 | And BarQuz too.\n+    |     ^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:182:1\n+    |\n+182 | be_sure_we_got_to_the_end_of_it\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you should put `be_sure_we_got_to_the_end_of_it` between ticks in the documentation\n+   --> $DIR/doc.rs:196:5\n+    |\n+196 | /// be_sure_we_got_to_the_end_of_it\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 29 previous errors\n+"}, {"sha": "790ca93728bac6043f026d442fc264d572407aeb", "filename": "tests/ui/double_neg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_neg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_neg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/double_neg.rs"}, {"sha": "2964344029ceb9b406e9f23e2210fde63bfca9f3", "filename": "tests/ui/double_neg.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_neg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_neg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_neg.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: `--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\n+ --> $DIR/double_neg.rs:9:5\n+  |\n+9 |     --x; //~ERROR: `--x` could be misinterpreted as pre-decrement by C programmers, is usually a no-op\n+  |     ^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/double_neg.rs:4:8\n+  |\n+4 | #[deny(double_neg)]\n+  |        ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2e415d7232dff72cd69e42f719d2dd2490f9363d", "filename": "tests/ui/double_parens.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/double_parens.rs"}, {"sha": "ba778c656eede5f85a75de8dff3ee27465278741", "filename": "tests/ui/double_parens.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdouble_parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdouble_parens.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,38 @@\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:16:5\n+   |\n+16 |     ((0)) //~ERROR Consider removing unnecessary double parentheses\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/double_parens.rs:4:9\n+   |\n+4  | #![deny(double_parens)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:20:14\n+   |\n+20 |     dummy_fn((0)); //~ERROR Consider removing unnecessary double parentheses\n+   |              ^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:24:20\n+   |\n+24 |     x.dummy_method((0)); //~ERROR Consider removing unnecessary double parentheses\n+   |                    ^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:28:5\n+   |\n+28 |     ((1, 2)) //~ERROR Consider removing unnecessary double parentheses\n+   |     ^^^^^^^^\n+\n+error: Consider removing unnecessary double parentheses\n+  --> $DIR/double_parens.rs:32:5\n+   |\n+32 |     (()) //~ERROR Consider removing unnecessary double parentheses\n+   |     ^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "55cfe63dac4c947b6894f89161b7b62330f07f4a", "filename": "tests/ui/drop_forget_ref.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/drop_forget_ref.rs"}, {"sha": "346426b723184d9f2f83b62eccb9d178e6e2685b", "filename": "tests/ui/drop_forget_ref.stderr", "status": "added", "additions": 228, "deletions": 0, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdrop_forget_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fdrop_forget_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdrop_forget_ref.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,228 @@\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:12:5\n+   |\n+12 |     drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_ref.rs:4:9\n+   |\n+4  | #![deny(drop_ref, forget_ref)]\n+   |         ^^^^^^^^\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:12:10\n+   |\n+12 |     drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:13:5\n+   |\n+13 |     forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/drop_forget_ref.rs:4:19\n+   |\n+4  | #![deny(drop_ref, forget_ref)]\n+   |                   ^^^^^^^^^^\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:13:12\n+   |\n+13 |     forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:16:5\n+   |\n+16 |     drop(&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:16:10\n+   |\n+16 |     drop(&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:17:5\n+   |\n+17 |     drop(&&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:17:10\n+   |\n+17 |     drop(&&owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:18:5\n+   |\n+18 |     drop(&mut owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:18:10\n+   |\n+18 |     drop(&mut owned1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:21:5\n+   |\n+21 |     forget(&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:21:12\n+   |\n+21 |     forget(&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:22:5\n+   |\n+22 |     forget(&&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &&SomeStruct\n+  --> $DIR/drop_forget_ref.rs:22:12\n+   |\n+22 |     forget(&&owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:23:5\n+   |\n+23 |     forget(&mut owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:23:12\n+   |\n+23 |     forget(&mut owned2); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:27:5\n+   |\n+27 |     drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:27:10\n+   |\n+27 |     drop(reference1); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:28:5\n+   |\n+28 |     forget(&*reference1); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:28:12\n+   |\n+28 |     forget(&*reference1); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:31:5\n+   |\n+31 |     drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:31:10\n+   |\n+31 |     drop(reference2); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:33:5\n+   |\n+33 |     forget(reference3); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &mut SomeStruct\n+  --> $DIR/drop_forget_ref.rs:33:12\n+   |\n+33 |     forget(reference3); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:36:5\n+   |\n+36 |     drop(reference4); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:36:10\n+   |\n+36 |     drop(reference4); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:37:5\n+   |\n+37 |     forget(reference4); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:37:12\n+   |\n+37 |     forget(reference4); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^^^^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:42:5\n+   |\n+42 |     drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^\n+   |\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:42:10\n+   |\n+42 |     drop(&val); //~ERROR call to `std::mem::drop` with a reference argument\n+   |          ^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:48:5\n+   |\n+48 |     forget(&val); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^\n+   |\n+note: argument has type &T\n+  --> $DIR/drop_forget_ref.rs:48:12\n+   |\n+48 |     forget(&val); //~ERROR call to `std::mem::forget` with a reference argument\n+   |            ^^^^\n+\n+error: call to `std::mem::drop` with a reference argument. Dropping a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:56:5\n+   |\n+56 |     std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:56:20\n+   |\n+56 |     std::mem::drop(&SomeStruct); //~ERROR call to `std::mem::drop` with a reference argument\n+   |                    ^^^^^^^^^^^\n+\n+error: call to `std::mem::forget` with a reference argument. Forgetting a reference does nothing\n+  --> $DIR/drop_forget_ref.rs:59:5\n+   |\n+59 |     std::mem::forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type &SomeStruct\n+  --> $DIR/drop_forget_ref.rs:59:22\n+   |\n+59 |     std::mem::forget(&SomeStruct); //~ERROR call to `std::mem::forget` with a reference argument\n+   |                      ^^^^^^^^^^^\n+\n+error: aborting due to 18 previous errors\n+"}, {"sha": "4d908e7f02bc94775bd63cf9622a0f4e0fa70c3d", "filename": "tests/ui/duplicate_underscore_argument.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fduplicate_underscore_argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fduplicate_underscore_argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/duplicate_underscore_argument.rs"}, {"sha": "0550aaae566f6b5b85d9d6a8d3e3acf4813c38c0", "filename": "tests/ui/duplicate_underscore_argument.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fduplicate_underscore_argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fduplicate_underscore_argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fduplicate_underscore_argument.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: `darth` already exists, having another argument having almost the same name makes code comprehension and documentation more difficult\n+ --> $DIR/duplicate_underscore_argument.rs:7:23\n+  |\n+7 | fn join_the_dark_side(darth: i32, _darth: i32) {} //~ERROR `darth` already exists\n+  |                       ^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/duplicate_underscore_argument.rs:4:9\n+  |\n+4 | #![deny(duplicate_underscore_argument)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ac9b314c00a69e2a6c3e00c493001a996bc19aaf", "filename": "tests/ui/empty_enum.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/empty_enum.rs"}, {"sha": "93aeb2ddb9ab92e593f48536e8017de5d6eb07d8", "filename": "tests/ui/empty_enum.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fempty_enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fempty_enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_enum.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,19 @@\n+error: enum with no variants\n+ --> $DIR/empty_enum.rs:7:1\n+  |\n+7 | enum Empty {} //~ ERROR enum with no variants\n+  | ^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/empty_enum.rs:5:9\n+  |\n+5 | #![deny(empty_enum)]\n+  |         ^^^^^^^^^^\n+help: consider using the uninhabited type `!` or a wrapper around it\n+ --> $DIR/empty_enum.rs:7:1\n+  |\n+7 | enum Empty {} //~ ERROR enum with no variants\n+  | ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ec3b75abb371c3a7db3605ffe2dc0f624337b25e", "filename": "tests/ui/entry.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/entry.rs"}, {"sha": "b4e09d2671b8a5ad112c3463293933f20d4f4f8b", "filename": "tests/ui/entry.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fentry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fentry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fentry.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,70 @@\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:13:5\n+   |\n+13 |     if !m.contains_key(&k) { m.insert(k, v); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/entry.rs:5:9\n+   |\n+5  | #![deny(map_entry)]\n+   |         ^^^^^^^^^\n+help: consider using\n+   |     m.entry(k).or_insert(v)\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:20:5\n+   |\n+20 |     if !m.contains_key(&k) { foo(); m.insert(k, v); }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k)\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:27:5\n+   |\n+27 |     if !m.contains_key(&k) { m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:34:5\n+   |\n+34 |     if m.contains_key(&k) { None } else { m.insert(k, v) };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:41:5\n+   |\n+41 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `HashMap`\n+  --> $DIR/entry.rs:48:5\n+   |\n+48 |     if m.contains_key(&k) { None } else { foo(); m.insert(k, v) };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: usage of `contains_key` followed by `insert` on a `BTreeMap`\n+  --> $DIR/entry.rs:55:5\n+   |\n+55 |     if !m.contains_key(&k) { foo(); m.insert(k, v) } else { None };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider using\n+   |     m.entry(k);\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "86539c2b13efe48a4348a011a21a6a3fb3dad0a1", "filename": "tests/ui/enum_glob_use.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/enum_glob_use.rs"}, {"sha": "e109269dc2f454a84edaa75259d89a3c43465c36", "filename": "tests/ui/enum_glob_use.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_glob_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_glob_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_glob_use.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,23 @@\n+error: don't use glob imports for enum variants\n+ --> $DIR/enum_glob_use.rs:6:1\n+  |\n+6 | use std::cmp::Ordering::*; //~ ERROR: don't use glob imports for enum variants\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(enum_glob_use)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+ --> $DIR/enum_glob_use.rs:3:17\n+  |\n+3 | #![deny(clippy, clippy_pedantic)]\n+  |                 ^^^^^^^^^^^^^^^\n+\n+error: don't use glob imports for enum variants\n+  --> $DIR/enum_glob_use.rs:12:1\n+   |\n+12 | use self::Enum::*; //~ ERROR: don't use glob imports for enum variants\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_glob_use)] implied by #[deny(clippy_pedantic)]\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "585535f9d999b83f157656cbe5f98e578d69a8f2", "filename": "tests/ui/enum_variants.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/enum_variants.rs"}, {"sha": "115fe8ea226feca1fe1fafa50349f49fa45626eb", "filename": "tests/ui/enum_variants.stderr", "status": "added", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenum_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenum_variants.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,127 @@\n+error: Variant name ends with the enum's name\n+  --> $DIR/enum_variants.rs:14:5\n+   |\n+14 |     cFoo, //~ ERROR: Variant name ends with the enum's name\n+   |     ^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/enum_variants.rs:3:9\n+   |\n+3  | #![deny(clippy, pub_enum_variant_names)]\n+   |         ^^^^^^\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:25:5\n+   |\n+25 |     FoodGood, //~ ERROR: Variant name starts with the enum's name\n+   |     ^^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:26:5\n+   |\n+26 |     FoodMiddle, //~ ERROR: Variant name starts with the enum's name\n+   |     ^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: Variant name starts with the enum's name\n+  --> $DIR/enum_variants.rs:27:5\n+   |\n+27 |     FoodBad, //~ ERROR: Variant name starts with the enum's name\n+   |     ^^^^^^^\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+\n+error: All variants have the same prefix: `Food`\n+  --> $DIR/enum_variants.rs:24:1\n+   |\n+24 |   enum Food { //~ ERROR: All variants have the same prefix: `Food`\n+   |  _^ starting here...\n+25 | |     FoodGood, //~ ERROR: Variant name starts with the enum's name\n+26 | |     FoodMiddle, //~ ERROR: Variant name starts with the enum's name\n+27 | |     FoodBad, //~ ERROR: Variant name starts with the enum's name\n+28 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `CallType`\n+  --> $DIR/enum_variants.rs:34:1\n+   |\n+34 |   enum BadCallType { //~ ERROR: All variants have the same prefix: `CallType`\n+   |  _^ starting here...\n+35 | |     CallTypeCall,\n+36 | |     CallTypeCreate,\n+37 | |     CallTypeDestroy,\n+38 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `Constant`\n+  --> $DIR/enum_variants.rs:45:1\n+   |\n+45 |   enum Consts { //~ ERROR: All variants have the same prefix: `Constant`\n+   |  _^ starting here...\n+46 | |     ConstantInt,\n+47 | |     ConstantCake,\n+48 | |     ConstantLie,\n+49 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `With`\n+  --> $DIR/enum_variants.rs:78:1\n+   |\n+78 |   enum Seallll { //~ ERROR: All variants have the same prefix: `With`\n+   |  _^ starting here...\n+79 | |     WithOutCake,\n+80 | |     WithOutTea,\n+81 | |     WithOut,\n+82 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `Prefix`\n+  --> $DIR/enum_variants.rs:84:1\n+   |\n+84 |   enum NonCaps { //~ ERROR: All variants have the same prefix: `Prefix`\n+   |  _^ starting here...\n+85 | |     Prefix\u7684,\n+86 | |     PrefixTea,\n+87 | |     PrefixCake,\n+88 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(enum_variant_names)] implied by #[deny(clippy)]\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: All variants have the same prefix: `With`\n+  --> $DIR/enum_variants.rs:90:1\n+   |\n+90 |   pub enum PubSeall { //~ ERROR: All variants have the same prefix:\n+   |  _^ starting here...\n+91 | |     WithOutCake,\n+92 | |     WithOutTea,\n+93 | |     WithOut,\n+94 | | }\n+   | |_^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/enum_variants.rs:3:17\n+   |\n+3  | #![deny(clippy, pub_enum_variant_names)]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: remove the prefixes and use full paths to the variants instead of glob imports\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "c342bf8f332b3f694dca74f34878591b9628d1d1", "filename": "tests/ui/enums_clike.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenums_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenums_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/enums_clike.rs"}, {"sha": "a3b7ba411dfb7afa873d07067065fe8d8d054e45", "filename": "tests/ui/enums_clike.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenums_clike.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fenums_clike.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fenums_clike.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,71 @@\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:10:5\n+   |\n+10 |     X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/enums_clike.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:17:5\n+   |\n+17 |     X = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:20:5\n+   |\n+20 |     A = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:27:5\n+   |\n+27 |     Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:28:5\n+   |\n+28 |     A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:30:5\n+   |\n+30 |     C = (std::i32::MIN as isize) - 1, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:36:5\n+   |\n+36 |     Z = 0xFFFF_FFFF, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: Clike enum variant discriminant is not portable to 32-bit targets\n+  --> $DIR/enums_clike.rs:37:5\n+   |\n+37 |     A = 0x1_0000_0000, //~ ERROR: Clike enum variant discriminant is not portable to 32-bit targets\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(enum_clike_unportable_variant)] implied by #[deny(clippy)]\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "c133f42277767405e9dd5bf354489c493f0c6ef7", "filename": "tests/ui/eq_op.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/eq_op.rs"}, {"sha": "867156f6c599f722db9b69407aab0c39e5171967", "filename": "tests/ui/eq_op.stderr", "status": "added", "additions": 223, "deletions": 0, "changes": 223, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feq_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feq_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,223 @@\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:41:5\n+   |\n+41 |     true && true; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/eq_op.rs:7:8\n+   |\n+7  | #[deny(nonminimal_bool)]\n+   |        ^^^^^^^^^^^^^^^\n+help: try\n+   |     true; //~ERROR equal expressions\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:43:5\n+   |\n+43 |     true || true; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+   |\n+help: try\n+   |     true; //~ERROR equal expressions\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:49:5\n+   |\n+49 |     a == b && b == a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a == b; //~ERROR equal expressions\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:51:5\n+   |\n+51 |     a != b && b != a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a != b; //~ERROR equal expressions\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:53:5\n+   |\n+53 |     a < b && b > a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a < b; //~ERROR equal expressions\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/eq_op.rs:55:5\n+   |\n+55 |     a <= b && b >= a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     a <= b; //~ERROR equal expressions\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:10:5\n+   |\n+10 |     1 == 1; //~ERROR equal expressions\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/eq_op.rs:4:8\n+   |\n+4  | #[deny(eq_op)]\n+   |        ^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:11:5\n+   |\n+11 |     \"no\" == \"no\"; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:13:5\n+   |\n+13 |     false != false; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `<`\n+  --> $DIR/eq_op.rs:14:5\n+   |\n+14 |     1.5 < 1.5; //~ERROR equal expressions\n+   |     ^^^^^^^^^\n+\n+error: equal expressions as operands to `>=`\n+  --> $DIR/eq_op.rs:15:5\n+   |\n+15 |     1u64 >= 1u64; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:18:5\n+   |\n+18 |     (1 as u64) & (1 as u64); //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `^`\n+  --> $DIR/eq_op.rs:19:5\n+   |\n+19 |     1 ^ ((((((1)))))); //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `<`\n+  --> $DIR/eq_op.rs:22:5\n+   |\n+22 |     (-(2) < -(2));  //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:23:5\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:23:6\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |      ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&`\n+  --> $DIR/eq_op.rs:23:27\n+   |\n+23 |     ((1 + 1) & (1 + 1) == (1 + 1) & (1 + 1));\n+   |                           ^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:27:5\n+   |\n+27 |     (1 * 2) + (3 * 4) == 1 * 2 + 3 * 4; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:30:5\n+   |\n+30 |     ([1] != [1]); //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `!=`\n+  --> $DIR/eq_op.rs:31:5\n+   |\n+31 |     ((1, 2) != (1, 2)); //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:35:5\n+   |\n+35 |     1 + 1 == 2; //~ERROR equal expressions\n+   |     ^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:36:5\n+   |\n+36 |     1 - 1 == 0; //~ERROR equal expressions as operands to `==`\n+   |     ^^^^^^^^^^\n+\n+error: equal expressions as operands to `-`\n+  --> $DIR/eq_op.rs:36:5\n+   |\n+36 |     1 - 1 == 0; //~ERROR equal expressions as operands to `==`\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `-`\n+  --> $DIR/eq_op.rs:39:5\n+   |\n+39 |     1 - 1; //~ERROR equal expressions\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `/`\n+  --> $DIR/eq_op.rs:40:5\n+   |\n+40 |     1 / 1; //~ERROR equal expressions\n+   |     ^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:41:5\n+   |\n+41 |     true && true; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `||`\n+  --> $DIR/eq_op.rs:43:5\n+   |\n+43 |     true || true; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:49:5\n+   |\n+49 |     a == b && b == a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:51:5\n+   |\n+51 |     a != b && b != a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:53:5\n+   |\n+53 |     a < b && b > a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `&&`\n+  --> $DIR/eq_op.rs:55:5\n+   |\n+55 |     a <= b && b >= a; //~ERROR equal expressions\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: equal expressions as operands to `==`\n+  --> $DIR/eq_op.rs:59:5\n+   |\n+59 |     a == a; //~ERROR equal expressions\n+   |     ^^^^^^\n+\n+error: aborting due to 32 previous errors\n+"}, {"sha": "1d4bc89ef4923fdf9d3cb775730276a360e7055c", "filename": "tests/ui/escape_analysis.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fescape_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fescape_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/escape_analysis.rs"}, {"sha": "f05f1b32dcf7892b7559e129e509c15dda8af167", "filename": "tests/ui/escape_analysis.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fescape_analysis.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fescape_analysis.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fescape_analysis.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,56 @@\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:33:9\n+   |\n+33 |     let x = box A; //~ ERROR local variable\n+   |         ^\n+   |\n+note: lint level defined here\n+  --> $DIR/escape_analysis.rs:5:9\n+   |\n+5  | #![deny(boxed_local)]\n+   |         ^^^^^^^^^^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:37:13\n+   |\n+37 | fn warn_arg(x: Box<A>) { //~ ERROR local variable\n+   |             ^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:49:9\n+   |\n+49 |     let y = x; //~ ERROR local variable\n+   |         ^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:54:9\n+   |\n+54 |     let bz = box A; //~ ERROR local variable\n+   |         ^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:58:9\n+   |\n+58 |     let bz = box A; //~ ERROR local variable\n+   |         ^^\n+\n+error: local variable doesn't need to be boxed here\n+  --> $DIR/escape_analysis.rs:88:9\n+   |\n+88 |     let x = box A; //~ ERROR local variable\n+   |         ^\n+\n+error: local variable doesn't need to be boxed here\n+   --> $DIR/escape_analysis.rs:101:9\n+    |\n+101 |     let x = box A; //~ ERROR local variable\n+    |         ^\n+\n+error: local variable doesn't need to be boxed here\n+   --> $DIR/escape_analysis.rs:130:12\n+    |\n+130 | pub fn new(_needs_name: Box<PeekableSeekable<&()>>) -> () { //~ ERROR local variable doesn't need\n+    |            ^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "c932f8f9a0fe06992e2b76e704520ab16f7a70bb", "filename": "tests/ui/eta.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/eta.rs"}, {"sha": "4683ae2708f292e407319d497bca7f3b099d7590", "filename": "tests/ui/eta.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feta.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,51 @@\n+error: redundant closure found\n+ --> $DIR/eta.rs:7:27\n+  |\n+7 |     let a = Some(1u8).map(|a| foo(a));\n+  |                           ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/eta.rs:4:9\n+  |\n+4 | #![deny(redundant_closure)]\n+  |         ^^^^^^^^^^^^^^^^^\n+help: remove closure as shown:\n+  |     let a = Some(1u8).map(foo);\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:11:10\n+   |\n+11 |     meta(|a| foo(a));\n+   |          ^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     meta(foo);\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:15:27\n+   |\n+15 |     let c = Some(1u8).map(|a| {1+2; foo}(a));\n+   |                           ^^^^^^^^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     let c = Some(1u8).map({1+2; foo});\n+\n+warning: this expression borrows a reference that is immediately dereferenced by the compiler\n+  --> $DIR/eta.rs:20:21\n+   |\n+20 |     all(&[1, 2, 3], &&2, |x, y| below(x, y)); //is adjusted\n+   |                     ^^^\n+   |\n+   = note: #[warn(needless_borrow)] on by default\n+\n+error: redundant closure found\n+  --> $DIR/eta.rs:28:27\n+   |\n+28 |     let e = Some(1u8).map(|a| generic(a));\n+   |                           ^^^^^^^^^^^^^^\n+   |\n+help: remove closure as shown:\n+   |     let e = Some(1u8).map(generic);\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0b2605d01bd58f8ce218e98d8d044e5963e505ca", "filename": "tests/ui/eval_order_dependence.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/eval_order_dependence.rs"}, {"sha": "d47e96862c2019062e8f181f838b96efae7ce3a7", "filename": "tests/ui/eval_order_dependence.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feval_order_dependence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Feval_order_dependence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feval_order_dependence.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,55 @@\n+error: unsequenced read of a variable\n+ --> $DIR/eval_order_dependence.rs:8:28\n+  |\n+8 |     let a = { x = 1; 1 } + x;\n+  |                            ^\n+  |\n+note: lint level defined here\n+ --> $DIR/eval_order_dependence.rs:4:8\n+  |\n+4 | #[deny(eval_order_dependence)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^\n+note: whether read occurs before this write depends on evaluation order\n+ --> $DIR/eval_order_dependence.rs:8:15\n+  |\n+8 |     let a = { x = 1; 1 } + x;\n+  |               ^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:12:5\n+   |\n+12 |     x += { x = 20; 2 }; //~ERROR unsequenced read\n+   |     ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:12:12\n+   |\n+12 |     x += { x = 20; 2 }; //~ERROR unsequenced read\n+   |            ^^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:18:24\n+   |\n+18 |     let foo = Foo { a: x, .. { x = 6; base } };\n+   |                        ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:18:32\n+   |\n+18 |     let foo = Foo { a: x, .. { x = 6; base } };\n+   |                                ^^^^^\n+\n+error: unsequenced read of a variable\n+  --> $DIR/eval_order_dependence.rs:23:9\n+   |\n+23 |         x += { x = 20; 2 }; //~ERROR unsequenced read\n+   |         ^\n+   |\n+note: whether read occurs before this write depends on evaluation order\n+  --> $DIR/eval_order_dependence.rs:23:16\n+   |\n+23 |         x += { x = 20; 2 }; //~ERROR unsequenced read\n+   |                ^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "20803c8d0e858c01f068d5a6664c759e9bb28ff5", "filename": "tests/ui/filter_methods.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/filter_methods.rs"}, {"sha": "495e385d03c7374adaefbedbd0539ba26343cb3f", "filename": "tests/ui/filter_methods.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffilter_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffilter_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffilter_methods.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,51 @@\n+error: called `filter(p).map(q)` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)` instead.\n+  --> $DIR/filter_methods.rs:8:21\n+   |\n+8  |       let _: Vec<_> = vec![5; 6].into_iter() //~ERROR called `filter(p).map(q)` on an `Iterator`\n+   |  _____________________^ starting here...\n+9  | |                               .filter(|&x| x == 0)\n+10 | |                               .map(|x| x * 2)\n+   | |_____________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/filter_methods.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+\n+error: called `filter(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+  --> $DIR/filter_methods.rs:13:21\n+   |\n+13 |       let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter(p).flat_map(q)` on an `Iterator`\n+   |  _____________________^ starting here...\n+14 | |                                 .filter(|&x| x == 0)\n+15 | |                                 .flat_map(|x| x.checked_mul(2))\n+   | |_______________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter_map(p).flat_map(q)` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)` and filtering by returning an empty Iterator.\n+  --> $DIR/filter_methods.rs:18:21\n+   |\n+18 |       let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter_map(p).flat_map(q)` on an `Iterator`\n+   |  _____________________^ starting here...\n+19 | |                                 .filter_map(|x| x.checked_mul(2))\n+20 | |                                 .flat_map(|x| x.checked_mul(2))\n+   | |_______________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter_map(p).map(q)` on an `Iterator`. This is more succinctly expressed by only calling `.filter_map(..)` instead.\n+  --> $DIR/filter_methods.rs:23:21\n+   |\n+23 |       let _: Vec<_> = vec![5_i8; 6].into_iter() //~ERROR called `filter_map(p).map(q)` on an `Iterator`\n+   |  _____________________^ starting here...\n+24 | |                                 .filter_map(|x| x.checked_mul(2))\n+25 | |                                 .map(|x| x.checked_mul(2))\n+   | |__________________________________________________________^ ...ending here\n+   |\n+   = note: #[deny(filter_map)] implied by #[deny(clippy_pedantic)]\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "314cc721425507dd3ebf3d01c578f93073c51d5c", "filename": "tests/ui/float_cmp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffloat_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffloat_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/float_cmp.rs"}, {"sha": "8c6abadadecd27b63841162340f7ee7ba12688d4", "filename": "tests/ui/float_cmp.stderr", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffloat_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffloat_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloat_cmp.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,119 @@\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:43:5\n+   |\n+43 |     ONE == 1f32;\n+   |     ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/float_cmp.rs:4:9\n+   |\n+4  | #![deny(float_cmp)]\n+   |         ^^^^^^^^^\n+help: consider comparing them within some error\n+   |     (ONE - 1f32).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:43:5\n+   |\n+43 |     ONE == 1f32;\n+   |     ^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:47:5\n+   |\n+47 |     ONE == 1.0 + 0.0;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE - (1.0 + 0.0)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:47:5\n+   |\n+47 |     ONE == 1.0 + 0.0;\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:52:5\n+   |\n+52 |     ONE + ONE == ZERO + ONE + ONE;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE + ONE - (ZERO + ONE + ONE)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:52:5\n+   |\n+52 |     ONE + ONE == ZERO + ONE + ONE;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:57:5\n+   |\n+57 |     ONE != 2.0;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE - 2.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:57:5\n+   |\n+57 |     ONE != 2.0;\n+   |     ^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:62:5\n+   |\n+62 |     twice(ONE) != ONE;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (twice(ONE) - ONE).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:62:5\n+   |\n+62 |     twice(ONE) != ONE;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:66:5\n+   |\n+66 |     ONE as f64 != 2.0;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (ONE as f64 - 2.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:66:5\n+   |\n+66 |     ONE as f64 != 2.0;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:74:5\n+   |\n+74 |     x == 1.0;\n+   |     ^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (x - 1.0).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:74:5\n+   |\n+74 |     x == 1.0;\n+   |     ^^^^^^^^\n+\n+error: strict comparison of f32 or f64\n+  --> $DIR/float_cmp.rs:80:5\n+   |\n+80 |     twice(x) != twice(ONE as f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider comparing them within some error\n+   |     (twice(x) - twice(ONE as f64)).abs() < error;\n+note: std::f32::EPSILON and std::f64::EPSILON are available.\n+  --> $DIR/float_cmp.rs:80:5\n+   |\n+80 |     twice(x) != twice(ONE as f64);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "09b0431c65669d55381d67b6418073c136ec43b4", "filename": "tests/ui/for_loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/for_loop.rs"}, {"sha": "2e73a343817613489b484609a9ffbdc4f01a1841", "filename": "tests/ui/for_loop.stderr", "status": "added", "additions": 632, "deletions": 0, "changes": 632, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffor_loop.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,632 @@\n+error: for loop over `option`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:18:14\n+   |\n+18 |     for x in option {\n+   |              ^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+   = help: consider replacing `for x in option` with `if let Some(x) = option`\n+\n+error: for loop over `result`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:26:14\n+   |\n+26 |     for x in result {\n+   |              ^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+   = help: consider replacing `for x in result` with `if let Ok(x) = result`\n+\n+error: for loop over `option.ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:32:14\n+   |\n+32 |     for x in option.ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n+\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+  --> $DIR/for_loop.rs:40:5\n+   |\n+40 |       for x in v.iter().next() {\n+   |  _____^ starting here...\n+41 | |         //~^ ERROR you are iterating over `Iterator::next()` which is an Option\n+42 | |         println!(\"{}\", x);\n+43 | |     }\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(iter_next_loop)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/for_loop.rs:10:8\n+   |\n+10 | #[deny(clippy)]\n+   |        ^^^^^^\n+\n+error: for loop over `v.iter().next().and(Some(0))`, which is an `Option`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:47:14\n+   |\n+47 |     for x in v.iter().next().and(Some(0)) {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_option)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n+\n+error: for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`. This is more readably written as an `if let` statement.\n+  --> $DIR/for_loop.rs:53:14\n+   |\n+53 |     for x in v.iter().next().ok_or(\"x not found\") {\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(for_loop_over_result)] implied by #[deny(clippy)]\n+   = help: consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:99:5\n+    |\n+99  |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+100 | |         //~^ ERROR `i` is only used to index `vec`\n+101 | |         //~| HELP consider\n+102 | |         //~| HELP consider\n+103 | |         //~| SUGGESTION for <item> in &vec {\n+104 | |         println!(\"{}\", vec[i]);\n+105 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:8\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |        ^^^^^^^^^^^^^^^^^^^\n+help: consider using an iterator\n+    |     for <item> in &vec {\n+\n+warning: unused variable: `i`\n+   --> $DIR/for_loop.rs:107:9\n+    |\n+107 |     for i in 0..vec.len() {\n+    |         ^\n+    |\n+    = note: #[warn(unused_variables)] on by default\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:113:5\n+    |\n+113 |     for i in 0..vec.len() { let _ = vec[i]; }\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using an iterator\n+    |     for <item> in &vec { let _ = vec[i]; }\n+\n+error: the loop variable `j` is only used to index `STATIC`.\n+   --> $DIR/for_loop.rs:120:5\n+    |\n+120 |       for j in 0..4 {\n+    |  _____^ starting here...\n+121 | |         //~^ ERROR `j` is only used to index `STATIC`\n+122 | |         //~| HELP consider\n+123 | |         //~| HELP consider\n+124 | |         //~| SUGGESTION for <item> in STATIC.iter().take(4) {\n+125 | |         println!(\"{:?}\", STATIC[j]);\n+126 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in STATIC.iter().take(4) {\n+\n+error: the loop variable `j` is only used to index `CONST`.\n+   --> $DIR/for_loop.rs:128:5\n+    |\n+128 |       for j in 0..4 {\n+    |  _____^ starting here...\n+129 | |         //~^ ERROR `j` is only used to index `CONST`\n+130 | |         //~| HELP consider\n+131 | |         //~| HELP consider\n+132 | |         //~| SUGGESTION for <item> in CONST.iter().take(4) {\n+133 | |         println!(\"{:?}\", CONST[j]);\n+134 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in CONST.iter().take(4) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:136:5\n+    |\n+136 |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+137 | |         //~^ ERROR `i` is used to index `vec`\n+138 | |         //~| HELP consider\n+139 | |         //~| HELP consider\n+140 | |         //~| SUGGESTION for (i, <item>) in vec.iter().enumerate() {\n+141 | |         println!(\"{} {}\", vec[i], i);\n+142 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate() {\n+\n+error: the loop variable `i` is only used to index `vec2`.\n+   --> $DIR/for_loop.rs:147:5\n+    |\n+147 |       for i in 0..vec.len() {\n+    |  _____^ starting here...\n+148 | |         //~^ ERROR `i` is only used to index `vec2`\n+149 | |         //~| HELP consider\n+150 | |         //~| HELP consider\n+151 | |         //~| SUGGESTION for <item> in vec2.iter().take(vec.len()) {\n+152 | |         println!(\"{}\", vec2[i]);\n+153 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec2.iter().take(vec.len()) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:155:5\n+    |\n+155 |       for i in 5..vec.len() {\n+    |  _____^ starting here...\n+156 | |         //~^ ERROR `i` is only used to index `vec`\n+157 | |         //~| HELP consider\n+158 | |         //~| HELP consider\n+159 | |         //~| SUGGESTION for <item> in vec.iter().skip(5) {\n+160 | |         println!(\"{}\", vec[i]);\n+161 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().skip(5) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:163:5\n+    |\n+163 |       for i in 0..MAX_LEN {\n+    |  _____^ starting here...\n+164 | |         //~^ ERROR `i` is only used to index `vec`\n+165 | |         //~| HELP consider\n+166 | |         //~| HELP consider\n+167 | |         //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN) {\n+168 | |         println!(\"{}\", vec[i]);\n+169 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(MAX_LEN) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:171:5\n+    |\n+171 |       for i in 0...MAX_LEN {\n+    |  _____^ starting here...\n+172 | |         //~^ ERROR `i` is only used to index `vec`\n+173 | |         //~| HELP consider\n+174 | |         //~| HELP consider\n+175 | |         //~| SUGGESTION for <item> in vec.iter().take(MAX_LEN + 1) {\n+176 | |         println!(\"{}\", vec[i]);\n+177 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(MAX_LEN + 1) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:179:5\n+    |\n+179 |       for i in 5..10 {\n+    |  _____^ starting here...\n+180 | |         //~^ ERROR `i` is only used to index `vec`\n+181 | |         //~| HELP consider\n+182 | |         //~| HELP consider\n+183 | |         //~| SUGGESTION for <item> in vec.iter().take(10).skip(5) {\n+184 | |         println!(\"{}\", vec[i]);\n+185 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(10).skip(5) {\n+\n+error: the loop variable `i` is only used to index `vec`.\n+   --> $DIR/for_loop.rs:187:5\n+    |\n+187 |       for i in 5...10 {\n+    |  _____^ starting here...\n+188 | |         //~^ ERROR `i` is only used to index `vec`\n+189 | |         //~| HELP consider\n+190 | |         //~| HELP consider\n+191 | |         //~| SUGGESTION for <item> in vec.iter().take(10 + 1).skip(5) {\n+192 | |         println!(\"{}\", vec[i]);\n+193 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for <item> in vec.iter().take(10 + 1).skip(5) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:195:5\n+    |\n+195 |       for i in 5..vec.len() {\n+    |  _____^ starting here...\n+196 | |         //~^ ERROR `i` is used to index `vec`\n+197 | |         //~| HELP consider\n+198 | |         //~| HELP consider\n+199 | |         //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().skip(5) {\n+200 | |         println!(\"{} {}\", vec[i], i);\n+201 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate().skip(5) {\n+\n+error: the loop variable `i` is used to index `vec`\n+   --> $DIR/for_loop.rs:203:5\n+    |\n+203 |       for i in 5..10 {\n+    |  _____^ starting here...\n+204 | |         //~^ ERROR `i` is used to index `vec`\n+205 | |         //~| HELP consider\n+206 | |         //~| HELP consider\n+207 | |         //~| SUGGESTION for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+208 | |         println!(\"{} {}\", vec[i], i);\n+209 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using an iterator\n+    |     for (i, <item>) in vec.iter().enumerate().take(10).skip(5) {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:211:5\n+    |\n+211 |       for i in 10..0 {\n+    |  _____^ starting here...\n+212 | |         //~^ERROR this range is empty so this for loop will never run\n+213 | |         //~|HELP consider\n+214 | |         //~|SUGGESTION (0..10).rev()\n+215 | |         println!(\"{}\", i);\n+216 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:90\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                          ^^^^^^^^^^^^^^^^^^\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0..10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:218:5\n+    |\n+218 |       for i in 10...0 {\n+    |  _____^ starting here...\n+219 | |         //~^ERROR this range is empty so this for loop will never run\n+220 | |         //~|HELP consider\n+221 | |         //~|SUGGESTION (0...10).rev()\n+222 | |         println!(\"{}\", i);\n+223 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0...10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:225:5\n+    |\n+225 |       for i in MAX_LEN..0 { //~ERROR this range is empty so this for loop will never run\n+    |  _____^ starting here...\n+226 | |         //~|HELP consider\n+227 | |         //~|SUGGESTION (0..MAX_LEN).rev()\n+228 | |         println!(\"{}\", i);\n+229 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (0..MAX_LEN).rev() { //~ERROR this range is empty so this for loop will never run\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:231:5\n+    |\n+231 |       for i in 5..5 { //~ERROR this range is empty so this for loop will never run\n+    |  _____^ starting here...\n+232 | |         println!(\"{}\", i);\n+233 | |     }\n+    | |_____^ ...ending here\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:252:5\n+    |\n+252 |       for i in 10..5+4 {\n+    |  _____^ starting here...\n+253 | |     //~^ ERROR this range is empty so this for loop will never run\n+254 | |     //~| HELP if you are attempting to iterate over this range in reverse\n+255 | |     //~| SUGGESTION for i in (5+4..10).rev() {\n+256 | |         println!(\"{}\", i);\n+257 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in (5+4..10).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:259:5\n+    |\n+259 |       for i in (5+2)..(3-1) {\n+    |  _____^ starting here...\n+260 | |     //~^ ERROR this range is empty so this for loop will never run\n+261 | |     //~| HELP if you are attempting to iterate over this range in reverse\n+262 | |     //~| SUGGESTION for i in ((3-1)..(5+2)).rev() {\n+263 | |         println!(\"{}\", i);\n+264 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: consider using the following if you are attempting to iterate over this range in reverse\n+    |     for i in ((3-1)..(5+2)).rev() {\n+\n+error: this range is empty so this for loop will never run\n+   --> $DIR/for_loop.rs:266:5\n+    |\n+266 |       for i in (5+2)..(8-1) { //~ERROR this range is empty so this for loop will never run\n+    |  _____^ starting here...\n+267 | |         println!(\"{}\", i);\n+268 | |     }\n+    | |_____^ ...ending here\n+\n+error: it is more idiomatic to loop over `&vec` instead of `vec.iter()`\n+   --> $DIR/for_loop.rs:289:15\n+    |\n+289 |     for _v in vec.iter() { }\n+    |               ^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:29\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                             ^^^^^^^^^^^^^^^^^^\n+help: to write this more concisely, try looping over\n+    |     for _v in &vec { }\n+\n+error: it is more idiomatic to loop over `&mut vec` instead of `vec.iter_mut()`\n+   --> $DIR/for_loop.rs:294:15\n+    |\n+294 |     for _v in vec.iter_mut() { }\n+    |               ^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &mut vec { }\n+\n+error: it is more idiomatic to loop over `out_vec` instead of `out_vec.into_iter()`\n+   --> $DIR/for_loop.rs:300:15\n+    |\n+300 |     for _v in out_vec.into_iter() { }\n+    |               ^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:49\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^\n+help: to write this more concisely, try looping over\n+    |     for _v in out_vec { }\n+\n+error: it is more idiomatic to loop over `&[1, 2, 3]` instead of `[1, 2, 3].iter()`\n+   --> $DIR/for_loop.rs:308:15\n+    |\n+308 |     for _v in [1, 2, 3].iter() { }\n+    |               ^^^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &[1, 2, 3] { }\n+\n+error: it is more idiomatic to loop over `&[0; 32]` instead of `[0; 32].iter()`\n+   --> $DIR/for_loop.rs:315:15\n+    |\n+315 |     for _v in [0; 32].iter() {}\n+    |               ^^^^^^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &[0; 32] {}\n+\n+error: it is more idiomatic to loop over `&ll` instead of `ll.iter()`\n+   --> $DIR/for_loop.rs:323:15\n+    |\n+323 |     for _v in ll.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &ll { }\n+\n+error: it is more idiomatic to loop over `&vd` instead of `vd.iter()`\n+   --> $DIR/for_loop.rs:329:15\n+    |\n+329 |     for _v in vd.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &vd { }\n+\n+error: it is more idiomatic to loop over `&bh` instead of `bh.iter()`\n+   --> $DIR/for_loop.rs:335:15\n+    |\n+335 |     for _v in bh.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bh { }\n+\n+error: it is more idiomatic to loop over `&hm` instead of `hm.iter()`\n+   --> $DIR/for_loop.rs:341:15\n+    |\n+341 |     for _v in hm.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &hm { }\n+\n+error: it is more idiomatic to loop over `&bt` instead of `bt.iter()`\n+   --> $DIR/for_loop.rs:347:15\n+    |\n+347 |     for _v in bt.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bt { }\n+\n+error: it is more idiomatic to loop over `&hs` instead of `hs.iter()`\n+   --> $DIR/for_loop.rs:353:15\n+    |\n+353 |     for _v in hs.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &hs { }\n+\n+error: it is more idiomatic to loop over `&bs` instead of `bs.iter()`\n+   --> $DIR/for_loop.rs:359:15\n+    |\n+359 |     for _v in bs.iter() { }\n+    |               ^^^^^^^^^\n+    |\n+help: to write this more concisely, try looping over\n+    |     for _v in &bs { }\n+\n+error: you are iterating over `Iterator::next()` which is an Option; this will compile but is probably not what you want\n+   --> $DIR/for_loop.rs:365:5\n+    |\n+365 |     for _v in vec.iter().next() { } //~ERROR you are iterating over `Iterator::next()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:74\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                          ^^^^^^^^^^^^^^\n+\n+error: you are collect()ing an iterator and throwing away the result. Consider using an explicit for loop to exhaust the iterator\n+   --> $DIR/for_loop.rs:372:5\n+    |\n+372 |     vec.iter().map(|x| out.push(x)).collect::<Vec<_>>(); //~ERROR you are collect()ing an iterator\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:91:8\n+    |\n+91  | #[deny(unused_collect)]\n+    |        ^^^^^^^^^^^^^^\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+   --> $DIR/for_loop.rs:377:5\n+    |\n+377 |     for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:110\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                                              ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the variable `_index` is used as a loop counter. Consider using `for (_index, item) in &vec.enumerate()` or similar iterators\n+   --> $DIR/for_loop.rs:381:5\n+    |\n+381 |     for _v in &vec { _index += 1 } //~ERROR the variable `_index` is used as a loop counter\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:441:5\n+    |\n+441 |       for (_, v) in &m {\n+    |  _____^ starting here...\n+442 | |         //~^ you seem to want to iterate on a map's values\n+443 | |         //~| HELP use the corresponding method\n+444 | |         //~| HELP use the corresponding method\n+445 | |         //~| SUGGESTION for v in m.values() {\n+446 | |         let _v = v;\n+447 | |     }\n+    | |_____^ ...ending here\n+    |\n+note: lint level defined here\n+   --> $DIR/for_loop.rs:90:133\n+    |\n+90  | #[deny(needless_range_loop, explicit_iter_loop, explicit_into_iter_loop, iter_next_loop, reverse_range_loop, explicit_counter_loop, for_kv_map)]\n+    |                                                                                                                                     ^^^^^^^^^^\n+help: use the corresponding method\n+    |     for v in m.values() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:450:5\n+    |\n+450 |       for (_, v) in &*m {\n+    |  _____^ starting here...\n+451 | |         //~^ you seem to want to iterate on a map's values\n+452 | |         //~| HELP use the corresponding method\n+453 | |         //~| HELP use the corresponding method\n+454 | |         //~| SUGGESTION for v in (*m).values() {\n+455 | |         let _v = v;\n+456 | |         // Here the `*` is not actually necesarry, but the test tests that we don't suggest\n+457 | |         // `in *m.values()` as we used to\n+458 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in (*m).values() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:461:5\n+    |\n+461 |       for (_, v) in &mut m {\n+    |  _____^ starting here...\n+462 | |         //~^ you seem to want to iterate on a map's values\n+463 | |         //~| HELP use the corresponding method\n+464 | |         //~| HELP use the corresponding method\n+465 | |         //~| SUGGESTION for v in m.values_mut()\n+466 | |         let _v = v;\n+467 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in m.values_mut() {\n+\n+error: you seem to want to iterate on a map's values\n+   --> $DIR/for_loop.rs:470:5\n+    |\n+470 |       for (_, v) in &mut *m {\n+    |  _____^ starting here...\n+471 | |         //~^ you seem to want to iterate on a map's values\n+472 | |         //~| HELP use the corresponding method\n+473 | |         //~| HELP use the corresponding method\n+474 | |         //~| SUGGESTION for v in (*m).values_mut()\n+475 | |         let _v = v;\n+476 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for v in (*m).values_mut() {\n+\n+error: you seem to want to iterate on a map's keys\n+   --> $DIR/for_loop.rs:480:5\n+    |\n+480 |       for (k, _value) in rm {\n+    |  _____^ starting here...\n+481 | |         //~^ you seem to want to iterate on a map's keys\n+482 | |         //~| HELP use the corresponding method\n+483 | |         //~| HELP use the corresponding method\n+484 | |         //~| SUGGESTION for k in rm.keys() {\n+485 | |         let _k = k;\n+486 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: use the corresponding method\n+    |     for k in rm.keys() {\n+\n+error: aborting due to 47 previous errors\n+"}, {"sha": "4fff131f6e7598665ee09cb63e3d15a645101ae3", "filename": "tests/ui/format.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/format.rs"}, {"sha": "a913ef24b2502cda060b2a061e4691ee9b175a03", "filename": "tests/ui/format.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: useless use of `format!`\n+ --> $DIR/format.rs:6:5\n+  |\n+6 |     format!(\"foo\"); //~ERROR useless use of `format!`\n+  |     ^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/format.rs:3:9\n+  |\n+3 | #![deny(useless_format)]\n+  |         ^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+ --> $DIR/format.rs:8:5\n+  |\n+8 |     format!(\"{}\", \"foo\"); //~ERROR useless use of `format!`\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: useless use of `format!`\n+  --> $DIR/format.rs:15:5\n+   |\n+15 |     format!(\"{}\", arg); //~ERROR useless use of `format!`\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "6c6671b0aa40ef186e09a6f125e3fb888c39667d", "filename": "tests/ui/formatting.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/formatting.rs"}, {"sha": "46ff2a45f48bc4bef0e92174c83c98133f5101e4", "filename": "tests/ui/formatting.stderr", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,116 @@\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:15:6\n+   |\n+15 |     } if foo() {\n+   |      ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/formatting.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:24:10\n+   |\n+24 |         } if foo() {\n+   |          ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this looks like an `else if` but the `else` is missing\n+  --> $DIR/formatting.rs:34:10\n+   |\n+34 |         } if foo() {\n+   |          ^\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, add the missing `else` or add a new line before the second `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:45:6\n+   |\n+45 |       } else\n+   |  ______^ starting here...\n+46 | |     //~^ ERROR this is an `else if` but the formatting might hide it\n+47 | |     //~| NOTE remove the `else` or\n+48 | |     if foo() { // the span of the above error should continue here\n+   | |____^ ...ending here\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this is an `else if` but the formatting might hide it\n+  --> $DIR/formatting.rs:52:6\n+   |\n+52 |       }\n+   |  ______^ starting here...\n+53 | |     //~^ ERROR this is an `else if` but the formatting might hide it\n+54 | |     //~| NOTE remove the `else` or\n+55 | |     else\n+56 | |     if foo() { // the span of the above error should continue here\n+   | |____^ ...ending here\n+   |\n+   = note: #[deny(suspicious_else_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, remove the `else` or remove the new line between `else` and `if`\n+\n+error: this looks like you are trying to use `.. -= ..`, but you really are doing `.. = (- ..)`\n+  --> $DIR/formatting.rs:83:6\n+   |\n+83 |     a =- 35;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/formatting.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+   = note: to remove this lint, use either `-=` or `= -`\n+\n+error: this looks like you are trying to use `.. *= ..`, but you really are doing `.. = (* ..)`\n+  --> $DIR/formatting.rs:86:6\n+   |\n+86 |     a =* &191;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, use either `*=` or `= *`\n+\n+error: this looks like you are trying to use `.. != ..`, but you really are doing `.. = (! ..)`\n+  --> $DIR/formatting.rs:91:6\n+   |\n+91 |     b =! false;\n+   |      ^^^^\n+   |\n+   = note: #[deny(suspicious_assignment_formatting)] implied by #[deny(clippy)]\n+   = note: to remove this lint, use either `!=` or `= !`\n+\n+error: possibly missing a comma here\n+   --> $DIR/formatting.rs:102:19\n+    |\n+102 |         -1, -2, -3 // <= no coma here\n+    |                   ^\n+    |\n+    = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/formatting.rs:4:9\n+    |\n+4   | #![deny(clippy)]\n+    |         ^^^^^^\n+    = note: to remove this lint, add a comma or write the expr in a single line\n+\n+error: possibly missing a comma here\n+   --> $DIR/formatting.rs:108:19\n+    |\n+108 |         -1, -2, -3 // <= no coma here\n+    |                   ^\n+    |\n+    = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]\n+    = note: to remove this lint, add a comma or write the expr in a single line\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "60a074df0f5b2016b743760a68ad868b4c429645", "filename": "tests/ui/functions.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/functions.rs"}, {"sha": "a66ea4b8899432741126c43df5010210bd536f2e", "filename": "tests/ui/functions.stderr", "status": "added", "additions": 111, "deletions": 0, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffunctions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ffunctions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffunctions.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,111 @@\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:11:1\n+   |\n+11 |   fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {\n+   |  _^ starting here...\n+12 | |     //~^ ERROR: this function has too many arguments (8/7)\n+13 | | }\n+   | |_^ ...ending here\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/functions.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:20:5\n+   |\n+20 |     fn bad(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+\n+error: this function has too many arguments (8/7)\n+  --> $DIR/functions.rs:30:5\n+   |\n+30 |     fn bad_method(_one: u32, _two: u32, _three: &str, _four: bool, _five: f32, _six: f32, _seven: bool, _eight: ()) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(too_many_arguments)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:40:34\n+   |\n+40 |         println!(\"{}\", unsafe { *p });\n+   |                                  ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/functions.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:42:35\n+   |\n+42 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                                   ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:44:33\n+   |\n+44 |         unsafe { std::ptr::read(p) };\n+   |                                 ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:56:30\n+   |\n+56 |     println!(\"{}\", unsafe { *p });\n+   |                              ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:58:31\n+   |\n+58 |     println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                               ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:60:29\n+   |\n+60 |     unsafe { std::ptr::read(p) };\n+   |                             ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:70:34\n+   |\n+70 |         println!(\"{}\", unsafe { *p });\n+   |                                  ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:72:35\n+   |\n+72 |         println!(\"{:?}\", unsafe { p.as_ref() });\n+   |                                   ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: this public function dereferences a raw pointer but is not marked `unsafe`\n+  --> $DIR/functions.rs:74:33\n+   |\n+74 |         unsafe { std::ptr::read(p) };\n+   |                                 ^\n+   |\n+   = note: #[deny(not_unsafe_ptr_arg_deref)] implied by #[deny(clippy)]\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "6a0b5e927cf7897ec48b47bce99eaab2236b4c2d", "filename": "tests/ui/identity_op.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/identity_op.rs"}, {"sha": "7590a99effe9de10b221dc0c3a36cc10edfaa14c", "filename": "tests/ui/identity_op.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fidentity_op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fidentity_op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fidentity_op.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,50 @@\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:13:5\n+   |\n+13 |     x + 0;        //~ERROR the operation is ineffective\n+   |     ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/identity_op.rs:9:8\n+   |\n+9  | #[deny(identity_op)]\n+   |        ^^^^^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:14:5\n+   |\n+14 |     x + (1 - 1);  //~ERROR the operation is ineffective\n+   |     ^^^^^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:16:5\n+   |\n+16 |     0 + x;        //~ERROR the operation is ineffective\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:19:5\n+   |\n+19 |     x | (0);      //~ERROR the operation is ineffective\n+   |     ^^^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:22:5\n+   |\n+22 |     x * 1;        //~ERROR the operation is ineffective\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:23:5\n+   |\n+23 |     1 * x;        //~ERROR the operation is ineffective\n+   |     ^^^^^\n+\n+error: the operation is ineffective. Consider reducing it to `x`\n+  --> $DIR/identity_op.rs:29:5\n+   |\n+29 |     -1 & x;       //~ERROR the operation is ineffective\n+   |     ^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "24a3864b0133326fe55365f7a37193a2686f506e", "filename": "tests/ui/if_let_redundant_pattern_matching.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/if_let_redundant_pattern_matching.rs"}, {"sha": "cc011b4a90c9c9e681f2cf2f2be5494f6cc800da", "filename": "tests/ui/if_let_redundant_pattern_matching.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_redundant_pattern_matching.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,47 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+ --> $DIR/if_let_redundant_pattern_matching.rs:9:12\n+  |\n+9 |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+  |            ^^^^^\n+  |\n+  = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/if_let_redundant_pattern_matching.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+help: try this\n+  |     if Ok::<i32, i32>(42).is_ok() {}\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:14:12\n+   |\n+14 |     if let Err(_) = Err::<i32, i32>(42) {\n+   |            ^^^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if Err::<i32, i32>(42).is_err() {\n+\n+error: redundant pattern matching, consider using `is_none()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:20:12\n+   |\n+20 |     if let None = None::<()> {\n+   |            ^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if None::<()>.is_none() {\n+\n+error: redundant pattern matching, consider using `is_some()`\n+  --> $DIR/if_let_redundant_pattern_matching.rs:26:12\n+   |\n+26 |     if let Some(_) = Some(42) {\n+   |            ^^^^^^^\n+   |\n+   = note: #[deny(if_let_redundant_pattern_matching)] implied by #[deny(clippy)]\n+help: try this\n+   |     if Some(42).is_some() {\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "a72699adafd862080bdaf295a89387b66aee696d", "filename": "tests/ui/if_not_else.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/if_not_else.rs"}, {"sha": "f31be63dd4cd2248ec22783480ca840012f387be", "filename": "tests/ui/if_not_else.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_not_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fif_not_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_not_else.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,33 @@\n+error: Unnecessary boolean `not` operation\n+  --> $DIR/if_not_else.rs:9:5\n+   |\n+9  |       if !bla() { //~ ERROR: Unnecessary boolean `not` operation\n+   |  _____^ starting here...\n+10 | |         println!(\"Bugs\");\n+11 | |     } else {\n+12 | |         println!(\"Bunny\");\n+13 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/if_not_else.rs:4:9\n+   |\n+4  | #![deny(if_not_else)]\n+   |         ^^^^^^^^^^^\n+   = help: remove the `!` and swap the blocks of the if/else\n+\n+error: Unnecessary `!=` operation\n+  --> $DIR/if_not_else.rs:14:5\n+   |\n+14 |       if 4 != 5 { //~ ERROR: Unnecessary `!=` operation\n+   |  _____^ starting here...\n+15 | |         println!(\"Bugs\");\n+16 | |     } else {\n+17 | |         println!(\"Bunny\");\n+18 | |     }\n+   | |_____^ ...ending here\n+   |\n+   = help: change to `==` and swap the blocks of the if/else\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9635f3afede968a3eeee3d3f000123d2b1232e92", "filename": "tests/ui/invalid_upcast_comparisons.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/invalid_upcast_comparisons.rs"}, {"sha": "1fd96e4de42a38b1585a6793032f55bab027ce3f", "filename": "tests/ui/invalid_upcast_comparisons.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Finvalid_upcast_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finvalid_upcast_comparisons.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,62 @@\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:10:5\n+   |\n+10 |     (u8_max as u32) > 300; //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/invalid_upcast_comparisons.rs:4:9\n+   |\n+4  | #![deny(invalid_upcast_comparisons)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:13:5\n+   |\n+13 |     (zero as i32) < -5; //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:16:5\n+   |\n+16 |     -5 < (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always true\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:17:5\n+   |\n+17 |     0 <= (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always true\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:20:5\n+   |\n+20 |     -5 > (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:21:5\n+   |\n+21 |     -5 >= (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:22:5\n+   |\n+22 |     1337 == (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `zero` prior to casting, this expression is always false\n+  --> $DIR/invalid_upcast_comparisons.rs:24:5\n+   |\n+24 |     -5 == (zero as i32); //~ERROR because of the numeric bounds on `zero` prior to casting, this expression is always false\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n+  --> $DIR/invalid_upcast_comparisons.rs:25:5\n+   |\n+25 |     -5 != (u8_max as i32); //~ERROR because of the numeric bounds on `u8_max` prior to casting, this expression is always true\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "4be89176fc7d1df080d45264a6981d9fc433e146", "filename": "tests/ui/item_after_statement.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fitem_after_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fitem_after_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/item_after_statement.rs"}, {"sha": "be3455c2a71d84aa95ea2e54ff5d2dc628afdd43", "filename": "tests/ui/item_after_statement.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: adding items after statements is confusing, since items exist from the start of the scope\n+  --> $DIR/item_after_statement.rs:12:5\n+   |\n+12 |     fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/item_after_statement.rs:3:9\n+   |\n+3  | #![deny(items_after_statements)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: adding items after statements is confusing, since items exist from the start of the scope\n+  --> $DIR/item_after_statement.rs:17:5\n+   |\n+17 |     fn foo() { println!(\"foo\"); } //~ ERROR adding items after statements is confusing\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8d289a3283246977168a4feb71dc08b133b10996", "filename": "tests/ui/large_enum_variant.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/large_enum_variant.rs"}, {"sha": "8b7b39902608f5ed4504c017bb30f3c40f0da8f8", "filename": "tests/ui/large_enum_variant.stderr", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flarge_enum_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flarge_enum_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_enum_variant.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,84 @@\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:10:5\n+   |\n+10 |     B([i32; 8000]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/large_enum_variant.rs:6:9\n+   |\n+6  | #![deny(large_enum_variant)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     B(Box<[i32; 8000]>), //~ ERROR large enum variant found\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:17:5\n+   |\n+17 |     B([i32; 8000]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     B(Box<[i32; 8000]>), //~ ERROR large enum variant found\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:21:5\n+   |\n+21 |     D(T, [i32; 8000]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:21:5\n+   |\n+21 |     D(T, [i32; 8000]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:35:5\n+   |\n+35 |     ContainingLargeEnum(LargeEnum), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |     ContainingLargeEnum(Box<LargeEnum>), //~ ERROR large enum variant found\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:38:5\n+   |\n+38 |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:38:5\n+   |\n+38 |     ContainingMoreThanOneField(i32, [i32; 8000], [i32; 9500]), //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:42:5\n+   |\n+42 |     StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+  --> $DIR/large_enum_variant.rs:42:5\n+   |\n+42 |     StructLikeLarge { x: [i32; 8000], y: i32 }, //~ ERROR large enum variant found\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: large enum variant found\n+  --> $DIR/large_enum_variant.rs:44:5\n+   |\n+44 |       StructLikeLarge2 { //~ ERROR large enum variant found\n+   |  _____^ starting here...\n+45 | |         x:\n+46 | |         [i32; 8000] //~ SUGGESTION Box<[i32; 8000]>\n+47 | |         //~^ HELP consider boxing the large fields to reduce the total size of the enum\n+48 | |     },\n+   | |_____^ ...ending here\n+   |\n+help: consider boxing the large fields to reduce the total size of the enum\n+   |         Box<[i32; 8000]> //~ SUGGESTION Box<[i32; 8000]>\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "b640c6db3a3ceb4cdfece7f834d26308021b33fb", "filename": "tests/ui/len_zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/len_zero.rs"}, {"sha": "48ee0a7ffd00c383e5c468b8f118f968e3a036a3", "filename": "tests/ui/len_zero.stderr", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flen_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flen_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flen_zero.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,100 @@\n+error: item `PubOne` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_zero.rs:10:5\n+   |\n+10 |       pub fn len(self: &Self) -> isize { //~ERROR item `PubOne` has a public `len` method but no corresponding `is_empty`\n+   |  _____^ starting here...\n+11 | |         1\n+12 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/len_zero.rs:4:9\n+   |\n+4  | #![deny(len_without_is_empty, len_zero)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: trait `PubTraitsToo` has a `len` method but no `is_empty` method\n+  --> $DIR/len_zero.rs:32:5\n+   |\n+32 |     fn len(self: &Self) -> isize; //~ERROR trait `PubTraitsToo` has a `len` method but no `is_empty`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item `HasIsEmpty` has a public `len` method but a private `is_empty` method\n+  --> $DIR/len_zero.rs:66:5\n+   |\n+66 |       pub fn len(self: &Self) -> isize { //~ERROR item `HasIsEmpty` has a public `len` method but a private `is_empty`\n+   |  _____^ starting here...\n+67 | |         1\n+68 | |     }\n+   | |_____^ ...ending here\n+\n+error: item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty` method\n+  --> $DIR/len_zero.rs:95:5\n+   |\n+95 |       pub fn len(self: &Self) -> isize { //~ERROR item `HasWrongIsEmpty` has a public `len` method but no corresponding `is_empty`\n+   |  _____^ starting here...\n+96 | |         1\n+97 | |     }\n+   | |_____^ ...ending here\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:106:8\n+    |\n+106 |     if x.len() == 0 {\n+    |        ^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/len_zero.rs:4:31\n+    |\n+4   | #![deny(len_without_is_empty, len_zero)]\n+    |                               ^^^^^^^^\n+help: consider using `is_empty`\n+    |     if x.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:113:8\n+    |\n+113 |     if \"\".len() == 0 {\n+    |        ^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if \"\".is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:130:8\n+    |\n+130 |     if has_is_empty.len() == 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:136:8\n+    |\n+136 |     if has_is_empty.len() != 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if !has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:142:8\n+    |\n+142 |     if has_is_empty.len() > 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if !has_is_empty.is_empty() {\n+\n+error: length comparison to zero\n+   --> $DIR/len_zero.rs:151:8\n+    |\n+151 |     if with_is_empty.len() == 0 {\n+    |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: consider using `is_empty`\n+    |     if with_is_empty.is_empty() {\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "b49e5a2612239bb08cb7eb609c7af2b8d54e186b", "filename": "tests/ui/let_if_seq.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/let_if_seq.rs"}, {"sha": "47ca7d2af163ef50a54d6a624e270647e3aa2980", "filename": "tests/ui/let_if_seq.stderr", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,60 @@\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:57:5\n+   |\n+57 |       let mut foo = 0;\n+   |  _____^ starting here...\n+58 | |     //~^ ERROR `if _ { .. } else { .. }` is an expression\n+59 | |     //~| HELP more idiomatic\n+60 | |     //~| SUGGESTION let <mut> foo = if f() { 42 } else { 0 };\n+61 | |     if f() {\n+62 | |         foo = 42;\n+63 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/let_if_seq.rs:5:9\n+   |\n+5  | #![deny(useless_let_if_seq)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+help: it is more idiomatic to write\n+   |     let <mut> foo = if f() { 42 } else { 0 };\n+   = note: you might not need `mut` at all\n+\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:65:5\n+   |\n+65 |     let mut bar = 0;\n+   |     ^\n+   |\n+help: it is more idiomatic to write\n+   |     let <mut> bar = if f() { ..; 42 } else { ..; 0 };\n+   = note: you might not need `mut` at all\n+\n+error: `if _ { .. } else { .. }` is an expression\n+  --> $DIR/let_if_seq.rs:77:5\n+   |\n+77 |     let quz;\n+   |     ^\n+   |\n+help: it is more idiomatic to write\n+   |     let quz = if f() { 42 } else { 0 };\n+\n+error: `if _ { .. } else { .. }` is an expression\n+   --> $DIR/let_if_seq.rs:111:5\n+    |\n+111 |       let mut baz = 0;\n+    |  _____^ starting here...\n+112 | |     //~^ ERROR `if _ { .. } else { .. }` is an expression\n+113 | |     //~| HELP more idiomatic\n+114 | |     //~| SUGGESTION let <mut> baz = if f() { 42 } else { 0 };\n+115 | |     if f() {\n+116 | |         baz = 42;\n+117 | |     }\n+    | |_____^ ...ending here\n+    |\n+help: it is more idiomatic to write\n+    |     let <mut> baz = if f() { 42 } else { 0 };\n+    = note: you might not need `mut` at all\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "477786813dbaf19dfda8d2a8a877d355f931deca", "filename": "tests/ui/let_return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/let_return.rs"}, {"sha": "13197e5412c088a3d1792f14cdf364f2a6c1d301", "filename": "tests/ui/let_return.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_return.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,31 @@\n+error: returning the result of a let binding from a block. Consider returning the expression directly.\n+  --> $DIR/let_return.rs:10:5\n+   |\n+10 |     x            //~ERROR returning the result of a let binding\n+   |     ^\n+   |\n+note: lint level defined here\n+  --> $DIR/let_return.rs:5:9\n+   |\n+5  | #![deny(let_and_return)]\n+   |         ^^^^^^^^^^^^^^\n+note: this expression can be directly returned\n+  --> $DIR/let_return.rs:9:13\n+   |\n+9  |     let x = 5;   //~NOTE this expression can be directly returned\n+   |             ^\n+\n+error: returning the result of a let binding from a block. Consider returning the expression directly.\n+  --> $DIR/let_return.rs:16:9\n+   |\n+16 |         x            //~ERROR returning the result of a let binding\n+   |         ^\n+   |\n+note: this expression can be directly returned\n+  --> $DIR/let_return.rs:15:17\n+   |\n+15 |         let x = 5;   //~NOTE this expression can be directly returned\n+   |                 ^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "a0143406e52d8e9eb78e25602a6702f299472de7", "filename": "tests/ui/let_unit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/let_unit.rs"}, {"sha": "863b9dc59ebb5cec49ae297a8f1eefbcdd631444", "filename": "tests/ui/let_unit.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flet_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_unit.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: this let-binding has unit value. Consider omitting `let _x =`\n+  --> $DIR/let_unit.rs:14:5\n+   |\n+14 |     let _x = println!(\"x\");  //~ERROR this let-binding has unit value\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/let_unit.rs:4:9\n+   |\n+4  | #![deny(let_unit_value)]\n+   |         ^^^^^^^^^^^^^^\n+\n+error: this let-binding has unit value. Consider omitting `let _a =`\n+  --> $DIR/let_unit.rs:18:9\n+   |\n+18 |         let _a = ();  //~ERROR this let-binding has unit value\n+   |         ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "408b6762df69002047e484cc824e83e0a98d5ab9", "filename": "tests/ui/lifetimes.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/lifetimes.rs"}, {"sha": "0d5f75c8930ab03cd15a07eb4b5bdf594143dcea", "filename": "tests/ui/lifetimes.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,95 @@\n+error: explicit lifetimes given in parameter types where they could be elided\n+ --> $DIR/lifetimes.rs:7:1\n+  |\n+7 | fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { }\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/lifetimes.rs:4:9\n+  |\n+4 | #![deny(needless_lifetimes, unused_lifetimes)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:10:1\n+   |\n+10 | fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:19:1\n+   |\n+19 | fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:32:1\n+   |\n+32 | fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:36:1\n+   |\n+36 | fn where_clause_without_lt<'a, T>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> where T: Copy { Ok(x) }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:43:1\n+   |\n+43 | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) { }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:58:1\n+   |\n+58 |   fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>  //~ERROR explicit lifetimes given\n+   |  _^ starting here...\n+59 | |     where for<'x> F: Fn(Lt<'x, I>) -> Lt<'x, I>\n+60 | | { unreachable!() }\n+   | |__________________^ ...ending here\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:67:5\n+   |\n+67 |     fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:72:5\n+   |\n+72 |     fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+  --> $DIR/lifetimes.rs:89:1\n+   |\n+89 | fn struct_with_lt<'a>(_foo: Foo<'a>) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:109:1\n+    |\n+109 | fn trait_obj_elided2<'a>(_arg: &'a Drop) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:113:1\n+    |\n+113 | fn alias_with_lt<'a>(_foo: FooAlias<'a>) -> &'a str { unimplemented!() } //~ERROR explicit lifetimes given\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:124:1\n+    |\n+124 | fn named_input_elided_output<'a>(_arg: &'a str) -> &str { unimplemented!() } //~ERROR explicit lifetimes given\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided\n+   --> $DIR/lifetimes.rs:128:1\n+    |\n+128 | fn trait_bound_ok<'a, T: WithLifetime<'static>>(_: &'a u8, _: T) { unimplemented!() } //~ERROR explicit lifetimes given\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 14 previous errors\n+"}, {"sha": "980ae5cb7a11f0242411cc617da31b90ba47dcb2", "filename": "tests/ui/lint_pass.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flint_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flint_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/lint_pass.rs"}, {"sha": "2439007feace05950a41d6774566641fc67bc9e8", "filename": "tests/ui/lint_pass.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flint_pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Flint_pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint_pass.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: the lint `MISSING_LINT` is not added to any `LintPass`\n+  --> $DIR/lint_pass.rs:12:1\n+   |\n+12 | declare_lint! { MISSING_LINT, Warn, \"missing lint\" }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/lint_pass.rs:5:9\n+   |\n+5  | #![deny(lint_without_lint_pass)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "6c8a27c2ed4a2d85347479ae774dc9d9bcb43ba4", "filename": "tests/ui/literals.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/literals.rs"}, {"sha": "2806e688c824103354d1dbd16c793fc28448e893", "filename": "tests/ui/literals.stderr", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fliterals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fliterals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fliterals.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,78 @@\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:14:17\n+   |\n+14 |     let fail1 = 0xabCD;       //~ERROR inconsistent casing in hexadecimal literal\n+   |                 ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:3:9\n+   |\n+3  | #![deny(mixed_case_hex_literals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:15:17\n+   |\n+15 |     let fail2 = 0xabCD_u32;   //~ERROR inconsistent casing in hexadecimal literal\n+   |                 ^^^^^^^^^^\n+\n+error: inconsistent casing in hexadecimal literal\n+  --> $DIR/literals.rs:16:17\n+   |\n+16 |     let fail2 = 0xabCD_isize; //~ERROR inconsistent casing in hexadecimal literal\n+   |                 ^^^^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:21:17\n+   |\n+21 |     let fail3 = 1234i32;      //~ERROR integer type suffix should be separated\n+   |                 ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:4:9\n+   |\n+4  | #![deny(unseparated_literal_suffix)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:22:17\n+   |\n+22 |     let fail4 = 1234u32;      //~ERROR integer type suffix should be separated\n+   |                 ^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:23:17\n+   |\n+23 |     let fail5 = 1234isize;    //~ERROR integer type suffix should be separated\n+   |                 ^^^^^^^^^\n+\n+error: integer type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:24:17\n+   |\n+24 |     let fail6 = 1234usize;    //~ERROR integer type suffix should be separated\n+   |                 ^^^^^^^^^\n+\n+error: float type suffix should be separated by an underscore\n+  --> $DIR/literals.rs:25:17\n+   |\n+25 |     let fail7 = 1.5f32;       //~ERROR float type suffix should be separated\n+   |                 ^^^^^^\n+\n+error: this is a decimal constant\n+  --> $DIR/literals.rs:29:17\n+   |\n+29 |     let fail8 = 0123;\n+   |                 ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/literals.rs:5:9\n+   |\n+5  | #![deny(zero_prefixed_literal)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+help: if you mean to use a decimal constant, remove the `0` to remove confusion:\n+   |     let fail8 = 123;\n+help: if you mean to use an octal constant, use `0o`:\n+   |     let fail8 = 0o123;\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "b4f97ae8e6e435178747891decee7cdd05c4b37f", "filename": "tests/ui/map_clone.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/map_clone.rs"}, {"sha": "aa44340dca697be3165e0fa0186e3dfc692cb2e3", "filename": "tests/ui/map_clone.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmap_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmap_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_clone.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,106 @@\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:12:5\n+   |\n+12 |     x.iter().map(|y| y.clone()); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/map_clone.rs:4:9\n+   |\n+4  | #![deny(map_clone)]\n+   |         ^^^^^^^^^\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:14:5\n+   |\n+14 |     x.iter().map(|&y| y); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:16:5\n+   |\n+16 |     x.iter().map(|y| *y); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:18:5\n+   |\n+18 |     x.iter().map(|y| { y.clone() }); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:20:5\n+   |\n+20 |     x.iter().map(|&y| { y }); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:22:5\n+   |\n+22 |     x.iter().map(|y| { *y }); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an iterator, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:24:5\n+   |\n+24 |     x.iter().map(Clone::clone); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.iter().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:30:5\n+   |\n+30 |     x.as_ref().map(|y| y.clone()); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:32:5\n+   |\n+32 |     x.as_ref().map(|&y| y); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:34:5\n+   |\n+34 |     x.as_ref().map(|y| *y); //~ ERROR you seem to be using .map()\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: you seem to be using .map() to clone the contents of an Option, consider using `.cloned()`\n+  --> $DIR/map_clone.rs:90:35\n+   |\n+90 |     let _: Option<UnusualDeref> = x.as_ref().map(|y| *y); //~ ERROR you seem to be using .map()\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try\n+           x.as_ref().cloned()\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "6cfb45e1f7e65b64f9535dd2da3f9b3fd17fb29c", "filename": "tests/ui/matches.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/matches.rs"}, {"sha": "d24bb6cb1fff41723206cc9d78bac0fd6fa2c022", "filename": "tests/ui/matches.stderr", "status": "added", "additions": 392, "deletions": 0, "changes": 392, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,392 @@\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:26:5\n+   |\n+26 |       match ExprNode::Butterflies {\n+   |  _____^ starting here...\n+27 | |         //~^ ERROR you seem to be trying to use match\n+28 | |         //~| HELP try\n+29 | |         //~| SUGGESTION if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }\n+30 | |         ExprNode::ExprAddrOf => Some(&NODE),\n+31 | |         _ => { let x = 5; None },\n+32 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/matches.rs:7:9\n+   |\n+7  | #![deny(single_match_else)]\n+   |         ^^^^^^^^^^^^^^^^^\n+help: try this\n+   |     if let ExprNode::ExprAddrOf = ExprNode::Butterflies { Some(&NODE) } else { let x = 5; None }\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:38:5\n+   |\n+38 |       match x {\n+   |  _____^ starting here...\n+39 | |         //~^ ERROR you seem to be trying to use match\n+40 | |         //~| HELP try\n+41 | |         //~| SUGGESTION if let Some(y) = x { println!(\"{:?}\", y); };\n+42 | |         Some(y) => { println!(\"{:?}\", y); }\n+43 | |         _ => ()\n+44 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/matches.rs:5:9\n+   |\n+5  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try this\n+   |     if let Some(y) = x { println!(\"{:?}\", y); };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:47:5\n+   |\n+47 |       match z {\n+   |  _____^ starting here...\n+48 | |         //~^ ERROR you seem to be trying to use match\n+49 | |         //~| HELP try\n+50 | |         //~| SUGGESTION if let (2...3, 7...9) = z { dummy() };\n+51 | |         (2...3, 7...9) => dummy(),\n+52 | |         _ => {}\n+53 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let (2...3, 7...9) = z { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:72:5\n+   |\n+72 |       match x {\n+   |  _____^ starting here...\n+73 | |         //~^ ERROR you seem to be trying to use match\n+74 | |         //~| HELP try\n+75 | |         //~| SUGGESTION if let Some(y) = x { dummy() };\n+76 | |         Some(y) => dummy(),\n+77 | |         None => ()\n+78 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Some(y) = x { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:80:5\n+   |\n+80 |       match y {\n+   |  _____^ starting here...\n+81 | |         //~^ ERROR you seem to be trying to use match\n+82 | |         //~| HELP try\n+83 | |         //~| SUGGESTION if let Ok(y) = y { dummy() };\n+84 | |         Ok(y) => dummy(),\n+85 | |         Err(..) => ()\n+86 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Ok(y) = y { dummy() };\n+\n+error: you seem to be trying to use match for destructuring a single pattern. Consider using `if let`\n+  --> $DIR/matches.rs:90:5\n+   |\n+90 |       match c {\n+   |  _____^ starting here...\n+91 | |         //~^ ERROR you seem to be trying to use match\n+92 | |         //~| HELP try\n+93 | |         //~| SUGGESTION if let Cow::Borrowed(..) = c { dummy() };\n+94 | |         Cow::Borrowed(..) => dummy(),\n+95 | |         Cow::Owned(..) => (),\n+96 | |     };\n+   | |_____^ ...ending here\n+   |\n+   = note: #[deny(single_match)] implied by #[deny(clippy)]\n+help: try this\n+   |     if let Cow::Borrowed(..) = c { dummy() };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:114:5\n+    |\n+114 |       match test {\n+    |  _____^ starting here...\n+115 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+116 | |     //~| HELP consider\n+117 | |     //~| SUGGESTION if test { 0 } else { 42 };\n+118 | |         true => 0,\n+119 | |         false => 42,\n+120 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+help: consider using an if/else expression\n+    |     if test { 0 } else { 42 };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:123:5\n+    |\n+123 |       match option == 1 {\n+    |  _____^ starting here...\n+124 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+125 | |     //~| HELP consider\n+126 | |     //~| SUGGESTION if option == 1 { 1 } else { 0 };\n+127 | |         true => 1,\n+128 | |         false => 0,\n+129 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if option == 1 { 1 } else { 0 };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:131:5\n+    |\n+131 |       match test {\n+    |  _____^ starting here...\n+132 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+133 | |     //~| HELP consider\n+134 | |     //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n+135 | |         true => (),\n+136 | |         false => { println!(\"Noooo!\"); }\n+137 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !test { println!(\"Noooo!\"); };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:139:5\n+    |\n+139 |       match test {\n+    |  _____^ starting here...\n+140 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+141 | |     //~| HELP consider\n+142 | |     //~| SUGGESTION if !test { println!(\"Noooo!\"); };\n+143 | |         false => { println!(\"Noooo!\"); }\n+144 | |         _ => (),\n+145 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !test { println!(\"Noooo!\"); };\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:147:5\n+    |\n+147 |       match test && test {\n+    |  _____^ starting here...\n+148 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+149 | |     //~| HELP consider\n+150 | |     //~| SUGGESTION if !(test && test) { println!(\"Noooo!\"); };\n+151 | |     //~| ERROR equal expressions as operands\n+152 | |         false => { println!(\"Noooo!\"); }\n+153 | |         _ => (),\n+154 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if !(test && test) { println!(\"Noooo!\"); };\n+\n+error: equal expressions as operands to `&&`\n+   --> $DIR/matches.rs:147:11\n+    |\n+147 |     match test && test {\n+    |           ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(eq_op)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+\n+error: you seem to be trying to match on a boolean expression\n+   --> $DIR/matches.rs:156:5\n+    |\n+156 |       match test {\n+    |  _____^ starting here...\n+157 | |     //~^ ERROR you seem to be trying to match on a boolean expression\n+158 | |     //~| HELP consider\n+159 | |     //~| SUGGESTION if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n+160 | |         false => { println!(\"Noooo!\"); }\n+161 | |         true => { println!(\"Yes!\"); }\n+162 | |     };\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_bool)] implied by #[deny(clippy)]\n+help: consider using an if/else expression\n+    |     if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:175:9\n+    |\n+175 |           match v {\n+    |  _________^ starting here...\n+176 | |             //~^ERROR add `&` to all patterns\n+177 | |             //~|HELP instead of\n+178 | |             //~|SUGGESTION match *v { .. }\n+179 | |             &Some(v) => println!(\"{:?}\", v),\n+180 | |             &None => println!(\"none\"),\n+181 | |         }\n+    | |_________^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |         match *v { .. }\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:188:5\n+    |\n+188 |       match tup {\n+    |  _____^ starting here...\n+189 | |         //~^ERROR add `&` to all patterns\n+190 | |         //~|HELP instead of\n+191 | |         //~|SUGGESTION match *tup { .. }\n+192 | |         &(v, 1) => println!(\"{}\", v),\n+193 | |         _ => println!(\"none\"),\n+194 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |     match *tup { .. }\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+   --> $DIR/matches.rs:197:5\n+    |\n+197 |       match &w {\n+    |  _____^ starting here...\n+198 | |         //~^ERROR add `&` to both\n+199 | |         //~|HELP try\n+200 | |         //~|SUGGESTION match w { .. }\n+201 | |         &Some(v) => println!(\"{:?}\", v),\n+202 | |         &None => println!(\"none\"),\n+203 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: try\n+    |     match w { .. }\n+\n+error: you don't need to add `&` to all patterns\n+   --> $DIR/matches.rs:211:5\n+    |\n+211 |       if let &None = a {\n+    |  _____^ starting here...\n+212 | |         //~^ERROR add `&` to all patterns\n+213 | |         //~|HELP instead of\n+214 | |         //~|SUGGESTION if let .. = *a { .. }\n+215 | |         println!(\"none\");\n+216 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: instead of prefixing all patterns with `&`, you can dereference the expression\n+    |     if let .. = *a { .. }\n+\n+error: you don't need to add `&` to both the expression and the patterns\n+   --> $DIR/matches.rs:219:5\n+    |\n+219 |       if let &None = &b {\n+    |  _____^ starting here...\n+220 | |         //~^ERROR add `&` to both\n+221 | |         //~|HELP try\n+222 | |         //~|SUGGESTION if let .. = b { .. }\n+223 | |         println!(\"none\");\n+224 | |     }\n+    | |_____^ ...ending here\n+    |\n+    = note: #[deny(match_ref_pats)] implied by #[deny(clippy)]\n+help: try\n+    |     if let .. = b { .. }\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:231:9\n+    |\n+231 |         0 ... 10 => println!(\"0 ... 10\"), //~ERROR: some ranges overlap\n+    |         ^^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/matches.rs:5:9\n+    |\n+5   | #![deny(clippy)]\n+    |         ^^^^^^\n+note: overlaps with this\n+   --> $DIR/matches.rs:232:9\n+    |\n+232 |         0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+    |         ^^^^^^^^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:237:9\n+    |\n+237 |         0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:239:9\n+    |\n+239 |         FOO ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+    |         ^^^^^^^^^^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:245:9\n+    |\n+245 |         0 ... 5 => println!(\"0 ... 5\"), //~ERROR: some ranges overlap\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:244:9\n+    |\n+244 |         2 => println!(\"2\"), //~NOTE overlaps with this\n+    |         ^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:251:9\n+    |\n+251 |         0 ... 2 => println!(\"0 ... 2\"), //~ERROR: some ranges overlap\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:250:9\n+    |\n+250 |         2 => println!(\"2\"), //~NOTE overlaps with this\n+    |         ^\n+\n+error: some ranges overlap\n+   --> $DIR/matches.rs:274:9\n+    |\n+274 |         0 .. 11 => println!(\"0 .. 11\"), //~ERROR: some ranges overlap\n+    |         ^^^^^^^\n+    |\n+    = note: #[deny(match_overlapping_arm)] implied by #[deny(clippy)]\n+note: overlaps with this\n+   --> $DIR/matches.rs:275:9\n+    |\n+275 |         0 ... 11 => println!(\"0 ... 11\"), //~NOTE overlaps with this\n+    |         ^^^^^^^^\n+\n+error: aborting due to 23 previous errors\n+"}, {"sha": "c8cebcb2a42dca72b1ebffc7b359672434fd958e", "filename": "tests/ui/mem_forget.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/mem_forget.rs"}, {"sha": "47c61adfbbf88a4833013d67bc6df60bf170aa87", "filename": "tests/ui/mem_forget.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmem_forget.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmem_forget.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_forget.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:16:5\n+   |\n+16 |     memstuff::forget(six);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mem_forget.rs:10:8\n+   |\n+10 | #[deny(mem_forget)]\n+   |        ^^^^^^^^^^\n+\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:20:5\n+   |\n+20 |     std::mem::forget(seven);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: usage of mem::forget on Drop type\n+  --> $DIR/mem_forget.rs:24:5\n+   |\n+24 |     forgetSomething(eight);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "43a4386886d9f8b0353694aee1d8216aa5f7a57c", "filename": "tests/ui/methods.rs", "status": "added", "additions": 691, "deletions": 0, "changes": 691, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,691 @@\n+#![feature(plugin)]\n+#![feature(const_fn)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy, clippy_pedantic)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::HashSet;\n+use std::collections::VecDeque;\n+use std::ops::Mul;\n+use std::iter::FromIterator;\n+\n+struct T;\n+\n+impl T {\n+    fn add(self, other: T) -> T { self } //~ERROR defining a method called `add`\n+    fn drop(&mut self) { } //~ERROR defining a method called `drop`\n+\n+    fn sub(&self, other: T) -> &T { self } // no error, self is a ref\n+    fn div(self) -> T { self } // no error, different #arguments\n+    fn rem(self, other: T) { } // no error, wrong return type\n+\n+    fn into_u32(self) -> u32 { 0 } // fine\n+    fn into_u16(&self) -> u16 { 0 } //~ERROR methods called `into_*` usually take self by value\n+\n+    fn to_something(self) -> u32 { 0 } //~ERROR methods called `to_*` usually take self by reference\n+\n+    fn new(self) {}\n+    //~^ ERROR methods called `new` usually take no self\n+    //~| ERROR methods called `new` usually return `Self`\n+}\n+\n+struct Lt<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    #[allow(needless_lifetimes)]\n+    pub fn new<'b>(s: &'b str) -> Lt<'b> { unimplemented!() }\n+}\n+\n+struct Lt2<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt2<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    pub fn new(s: &str) -> Lt2 { unimplemented!() }\n+}\n+\n+struct Lt3<'a> {\n+    foo: &'a u32,\n+}\n+\n+impl<'a> Lt3<'a> {\n+    // The lifetime is different, but that\u2019s irrelevant, see #734\n+    pub fn new() -> Lt3<'static> { unimplemented!() }\n+}\n+\n+#[derive(Clone,Copy)]\n+struct U;\n+\n+impl U {\n+    fn new() -> Self { U }\n+    fn to_something(self) -> u32 { 0 } // ok because U is Copy\n+}\n+\n+struct V<T> {\n+    _dummy: T\n+}\n+\n+impl<T> V<T> {\n+    fn new() -> Option<V<T>> { None }\n+}\n+\n+impl Mul<T> for T {\n+    type Output = T;\n+    fn mul(self, other: T) -> T { self } // no error, obviously\n+}\n+\n+/// Utility macro to test linting behavior in `option_methods()`\n+/// The lints included in `option_methods()` should not lint if the call to map is partially\n+/// within a macro\n+macro_rules! opt_map {\n+    ($opt:expr, $map:expr) => {($opt).map($map)};\n+}\n+\n+/// Checks implementation of the following lints:\n+/// * `OPTION_MAP_UNWRAP_OR`\n+/// * `OPTION_MAP_UNWRAP_OR_ELSE`\n+fn option_methods() {\n+    let opt = Some(1);\n+\n+    // Check OPTION_MAP_UNWRAP_OR\n+    // single line case\n+    let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or(a)`\n+                               //~| NOTE replace `map(|x| x + 1).unwrap_or(0)`\n+               .unwrap_or(0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or(a)`\n+                        x + 1\n+                    }\n+              ).unwrap_or(0);\n+    let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or(a)`\n+               .unwrap_or({\n+                    0\n+                });\n+    // macro case\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or(0); // should not lint\n+\n+    // Check OPTION_MAP_UNWRAP_OR_ELSE\n+    // single line case\n+    let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or_else(g)`\n+                               //~| NOTE replace `map(|x| x + 1).unwrap_or_else(|| 0)`\n+               .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+    // multi line cases\n+    let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or_else(g)`\n+                        x + 1\n+                    }\n+              ).unwrap_or_else(|| 0);\n+    let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or_else(g)`\n+               .unwrap_or_else(||\n+                    0\n+                );\n+    // macro case\n+    let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n+}\n+\n+/// Struct to generate false positives for things with .iter()\n+#[derive(Copy, Clone)]\n+struct HasIter;\n+\n+impl HasIter {\n+    fn iter(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+\n+    fn iter_mut(self) -> IteratorFalsePositives {\n+        IteratorFalsePositives { foo: 0 }\n+    }\n+}\n+\n+/// Struct to generate false positive for Iterator-based lints\n+#[derive(Copy, Clone)]\n+struct IteratorFalsePositives {\n+    foo: u32,\n+}\n+\n+impl IteratorFalsePositives {\n+    fn filter(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn next(self) -> IteratorFalsePositives {\n+        self\n+    }\n+\n+    fn find(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn position(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn rposition(self) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn nth(self, n: usize) -> Option<u32> {\n+        Some(self.foo)\n+    }\n+\n+    fn skip(self, _: usize) -> IteratorFalsePositives {\n+        self\n+    }\n+}\n+\n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n+/// Checks implementation of `FILTER_NEXT` lint\n+fn filter_next() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check single-line case\n+    let _ = v.iter().filter(|&x| *x < 0).next();\n+    //~^ ERROR called `filter(p).next()` on an `Iterator`.\n+    //~| NOTE replace `filter(|&x| *x < 0).next()`\n+\n+    // check multi-line case\n+    let _ = v.iter().filter(|&x| { //~ERROR called `filter(p).next()` on an `Iterator`.\n+                                *x < 0\n+                            }\n+                   ).next();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.filter().next();\n+}\n+\n+/// Checks implementation of `SEARCH_IS_SOME` lint\n+fn search_is_some() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+\n+    // check `find().is_some()`, single-line\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `find(|&x| *x < 0).is_some()`\n+\n+    // check `find().is_some()`, multi-line\n+    let _ = v.iter().find(|&x| { //~ERROR called `is_some()` after searching\n+                              *x < 0\n+                          }\n+                   ).is_some();\n+\n+    // check `position().is_some()`, single-line\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `position(|&x| x < 0).is_some()`\n+\n+    // check `position().is_some()`, multi-line\n+    let _ = v.iter().position(|&x| { //~ERROR called `is_some()` after searching\n+                                  x < 0\n+                              }\n+                   ).is_some();\n+\n+    // check `rposition().is_some()`, single-line\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+    //~^ ERROR called `is_some()` after searching\n+    //~| NOTE replace `rposition(|&x| x < 0).is_some()`\n+\n+    // check `rposition().is_some()`, multi-line\n+    let _ = v.iter().rposition(|&x| { //~ERROR called `is_some()` after searching\n+                                   x < 0\n+                               }\n+                   ).is_some();\n+\n+    // check that we don't lint if the caller is not an Iterator\n+    let foo = IteratorFalsePositives { foo: 0 };\n+    let _ = foo.find().is_some();\n+    let _ = foo.position().is_some();\n+    let _ = foo.rposition().is_some();\n+}\n+\n+/// Checks implementation of the `OR_FUN_CALL` lint\n+fn or_fun_call() {\n+    struct Foo;\n+\n+    impl Foo {\n+        fn new() -> Foo { Foo }\n+    }\n+\n+    enum Enum {\n+        A(i32),\n+    }\n+\n+    const fn make_const(i: i32) -> i32 { i }\n+\n+    fn make<T>() -> T { unimplemented!(); }\n+\n+    let with_enum = Some(Enum::A(1));\n+    with_enum.unwrap_or(Enum::A(5));\n+\n+    let with_const_fn = Some(1);\n+    with_const_fn.unwrap_or(make_const(5));\n+\n+    let with_constructor = Some(vec![1]);\n+    with_constructor.unwrap_or(make());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_constructor.unwrap_or_else(make)\n+\n+    let with_new = Some(vec![1]);\n+    with_new.unwrap_or(Vec::new());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_new.unwrap_or_default();\n+\n+    let with_const_args = Some(vec![1]);\n+    with_const_args.unwrap_or(Vec::with_capacity(12));\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+    let with_err : Result<_, ()> = Ok(vec![1]);\n+    with_err.unwrap_or(make());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_err.unwrap_or_else(|_| make());\n+\n+    let with_err_args : Result<_, ()> = Ok(vec![1]);\n+    with_err_args.unwrap_or(Vec::with_capacity(12));\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+    let with_default_trait = Some(1);\n+    with_default_trait.unwrap_or(Default::default());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_default_trait.unwrap_or_default();\n+\n+    let with_default_type = Some(1);\n+    with_default_type.unwrap_or(u64::default());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION with_default_type.unwrap_or_default();\n+\n+    let with_vec = Some(vec![1]);\n+    with_vec.unwrap_or(vec![]);\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    // FIXME #944: ~|SUGGESTION with_vec.unwrap_or_else(|| vec![]);\n+\n+    let without_default = Some(Foo);\n+    without_default.unwrap_or(Foo::new());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION without_default.unwrap_or_else(Foo::new);\n+\n+    let mut map = HashMap::<u64, String>::new();\n+    map.entry(42).or_insert(String::new());\n+    //~^ERROR use of `or_insert` followed by a function call\n+    //~|HELP try this\n+    //~|SUGGESTION map.entry(42).or_insert_with(String::new);\n+\n+    let mut btree = BTreeMap::<u64, String>::new();\n+    btree.entry(42).or_insert(String::new());\n+    //~^ERROR use of `or_insert` followed by a function call\n+    //~|HELP try this\n+    //~|SUGGESTION btree.entry(42).or_insert_with(String::new);\n+\n+    let stringy = Some(String::from(\"\"));\n+    let _ = stringy.unwrap_or(\"\".to_owned());\n+    //~^ERROR use of `unwrap_or`\n+    //~|HELP try this\n+    //~|SUGGESTION stringy.unwrap_or_else(|| \"\".to_owned());\n+}\n+\n+/// Checks implementation of `ITER_NTH` lint\n+fn iter_nth() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_vec_deque: VecDeque<_> = some_vec.iter().cloned().collect();\n+\n+    {\n+        // Make sure we lint `.iter()` for relevant types\n+        let bad_vec = some_vec.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+        let bad_slice = &some_vec[..].iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+        let bad_boxed_slice = boxed_slice.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+        let bad_vec_deque = some_vec_deque.iter().nth(3);\n+        //~^ERROR called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+    }\n+\n+    {\n+        // Make sure we lint `.iter_mut()` for relevant types\n+        let bad_vec = some_vec.iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+    }\n+    {\n+        let bad_slice = &some_vec[..].iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+    }\n+    {\n+        let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+        //~^ERROR called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+    }\n+\n+    // Make sure we don't lint for non-relevant types\n+    let false_positive = HasIter;\n+    let ok = false_positive.iter().nth(3);\n+    let ok_mut = false_positive.iter_mut().nth(3);\n+}\n+\n+/// Checks implementation of `ITER_SKIP_NEXT` lint\n+fn iter_skip_next() {\n+    let mut some_vec = vec![0, 1, 2, 3];\n+\n+    let _ = some_vec.iter().skip(42).next();\n+    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n+    let _ = some_vec.iter().cycle().skip(42).next();\n+    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n+    let _ = (1..10).skip(10).next();\n+    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n+    let _ = &some_vec[..].iter().skip(3).next();\n+    //~^ERROR called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+\n+    let foo = IteratorFalsePositives { foo : 0 };\n+    let _ = foo.skip(42).next();\n+    let _ = foo.filter().skip(42).next();\n+}\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> { self.arr.get(pos) }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> { self.arr.get_mut(pos) }\n+}\n+\n+/// Checks implementation of `GET_UNWRAP` lint\n+fn get_unwrap() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    { // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION boxed_slice[1]\n+        let _ = some_slice.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_slice[0]\n+        let _ = some_vec.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vec[0]\n+        let _ = some_vecdeque.get(0).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_vecdeque[0]\n+        let _ = some_hashmap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_hashmap[&1]\n+        let _ = some_btreemap.get(&1).unwrap();\n+        //~^ERROR called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION some_btreemap[&1]\n+\n+        let _ = false_positive.get(0).unwrap();\n+    }\n+\n+    { // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut boxed_slice[0]\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_slice[0]\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_vec[0]\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        //~^ERROR called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+        //~|HELP try this\n+        //~|SUGGESTION &mut some_vecdeque[0]\n+\n+        // Check false positives\n+        *some_hashmap.get_mut(&1).unwrap() = 'b';\n+        *some_btreemap.get_mut(&1).unwrap() = 'b';\n+        *false_positive.get_mut(0).unwrap() = 1;\n+    }\n+}\n+\n+\n+#[allow(similar_names)]\n+fn main() {\n+    use std::io;\n+\n+    let opt = Some(0);\n+    let _ = opt.unwrap();  //~ERROR used unwrap() on an Option\n+\n+    let res: Result<i32, ()> = Ok(0);\n+    let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n+\n+    res.ok().expect(\"disaster!\"); //~ERROR called `ok().expect()`\n+    // the following should not warn, since `expect` isn't implemented unless\n+    // the error type implements `Debug`\n+    let res2: Result<i32, MyError> = Ok(0);\n+    res2.ok().expect(\"oh noes!\");\n+    let res3: Result<u32, MyErrorWithParam<u8>>= Ok(0);\n+    res3.ok().expect(\"whoof\"); //~ERROR called `ok().expect()`\n+    let res4: Result<u32, io::Error> = Ok(0);\n+    res4.ok().expect(\"argh\"); //~ERROR called `ok().expect()`\n+    let res5: io::Result<u32> = Ok(0);\n+    res5.ok().expect(\"oops\"); //~ERROR called `ok().expect()`\n+    let res6: Result<u32, &str> = Ok(0);\n+    res6.ok().expect(\"meh\"); //~ERROR called `ok().expect()`\n+}\n+\n+struct MyError(()); // doesn't implement Debug\n+\n+#[derive(Debug)]\n+struct MyErrorWithParam<T> {\n+    x: T\n+}\n+\n+#[allow(unnecessary_operation)]\n+fn starts_with() {\n+    \"\".chars().next() == Some(' ');\n+    //~^ ERROR starts_with\n+    //~| HELP like this\n+    //~| SUGGESTION \"\".starts_with(' ')\n+\n+    Some(' ') != \"\".chars().next();\n+    //~^ ERROR starts_with\n+    //~| HELP like this\n+    //~| SUGGESTION !\"\".starts_with(' ')\n+}\n+\n+fn str_extend_chars() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.extend(abc.chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(abc)\n+\n+    s.push_str(\"abc\");\n+    s.extend(\"abc\".chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(\"abc\")\n+\n+    s.push_str(&def);\n+    s.extend(def.chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(&def)\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}\n+\n+fn clone_on_copy() {\n+    42.clone(); //~ERROR using `clone` on a `Copy` type\n+                //~| HELP try removing the `clone` call\n+                //~| SUGGESTION 42\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+    (&42).clone(); //~ERROR using `clone` on a `Copy` type\n+                   //~| HELP try dereferencing it\n+                   //~| SUGGESTION *(&42)\n+}\n+\n+fn clone_on_copy_generic<T: Copy>(t: T) {\n+    t.clone(); //~ERROR using `clone` on a `Copy` type\n+               //~| HELP try removing the `clone` call\n+               //~| SUGGESTION t\n+    Some(t).clone(); //~ERROR using `clone` on a `Copy` type\n+                     //~| HELP try removing the `clone` call\n+                     //~| SUGGESTION Some(t)\n+}\n+\n+fn clone_on_double_ref() {\n+    let x = vec![1];\n+    let y = &&x;\n+    let z: &Vec<_> = y.clone(); //~ERROR using `clone` on a double\n+                                //~| HELP try dereferencing it\n+                                //~| SUGGESTION let z: &Vec<_> = (*y).clone();\n+    println!(\"{:p} {:p}\",*y, z);\n+}\n+\n+fn single_char_pattern() {\n+    let x = \"foo\";\n+    x.split(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.split('x');\n+\n+    x.split(\"xx\");\n+\n+    x.split('x');\n+\n+    let y = \"x\";\n+    x.split(y);\n+\n+    // Not yet testing for multi-byte characters\n+    // Changing `r.len() == 1` to `r.chars().count() == 1` in `lint_single_char_pattern`\n+    // should have done this but produced an ICE\n+    //\n+    // We may not want to suggest changing these anyway\n+    // See: https://github.com/Manishearth/rust-clippy/issues/650#issuecomment-184328984\n+    x.split(\"\u00df\");\n+    x.split(\"\u211d\");\n+    x.split(\"\ud83d\udca3\");\n+    // Can't use this lint for unicode code points which don't fit in a char\n+    x.split(\"\u2764\ufe0f\");\n+\n+    x.contains(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.contains('x');\n+    x.starts_with(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.starts_with('x');\n+    x.ends_with(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.ends_with('x');\n+    x.find(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.find('x');\n+    x.rfind(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rfind('x');\n+    x.rsplit(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rsplit('x');\n+    x.split_terminator(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.split_terminator('x');\n+    x.rsplit_terminator(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rsplit_terminator('x');\n+    x.splitn(0, \"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.splitn(0, 'x');\n+    x.rsplitn(0, \"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rsplitn(0, 'x');\n+    x.matches(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.matches('x');\n+    x.rmatches(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rmatches('x');\n+    x.match_indices(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.match_indices('x');\n+    x.rmatch_indices(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.rmatch_indices('x');\n+    x.trim_left_matches(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.trim_left_matches('x');\n+    x.trim_right_matches(\"x\");\n+    //~^ ERROR single-character string constant used as pattern\n+    //~| HELP try using a char instead:\n+    //~| SUGGESTION x.trim_right_matches('x');\n+\n+    let h = HashSet::<String>::new();\n+    h.contains(\"X\"); // should not warn\n+}\n+\n+#[allow(result_unwrap_used)]\n+fn temporary_cstring() {\n+    use std::ffi::CString;\n+\n+    CString::new(\"foo\").unwrap().as_ptr();\n+    //~^ ERROR you are getting the inner pointer of a temporary `CString`\n+    //~| NOTE that pointer will be invalid outside this expression\n+    //~| HELP assign the `CString` to a variable to extend its lifetime\n+}"}, {"sha": "6b3470f11dce19725c44946fe859f3dcf9f57d68", "filename": "tests/ui/methods.stderr", "status": "added", "additions": 954, "deletions": 0, "changes": 954, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,954 @@\n+error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n+  --> $DIR/methods.rs:18:5\n+   |\n+18 |     fn add(self, other: T) -> T { self } //~ERROR defining a method called `add`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(should_implement_trait)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name\n+  --> $DIR/methods.rs:19:5\n+   |\n+19 |     fn drop(&mut self) { } //~ERROR defining a method called `drop`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(should_implement_trait)] implied by #[deny(clippy)]\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:26:17\n+   |\n+26 |     fn into_u16(&self) -> u16 { 0 } //~ERROR methods called `into_*` usually take self by value\n+   |                 ^^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:28:21\n+   |\n+28 |     fn to_something(self) -> u32 { 0 } //~ERROR methods called `to_*` usually take self by reference\n+   |                     ^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+\n+error: methods called `new` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/methods.rs:30:12\n+   |\n+30 |     fn new(self) {}\n+   |            ^^^^\n+   |\n+   = note: #[deny(wrong_self_convention)] implied by #[deny(clippy)]\n+\n+error: methods called `new` usually return `Self`\n+  --> $DIR/methods.rs:30:5\n+   |\n+30 |     fn new(self) {}\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(new_ret_no_self)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/methods.rs:5:9\n+   |\n+5  | #![deny(clippy, clippy_pedantic)]\n+   |         ^^^^^^\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:99:13\n+    |\n+99  |       let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or(a)`\n+    |  _____________^ starting here...\n+100 | |                                //~| NOTE replace `map(|x| x + 1).unwrap_or(0)`\n+101 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+    | |____________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:103:13\n+    |\n+103 |       let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or(a)`\n+    |  _____________^ starting here...\n+104 | |                         x + 1\n+105 | |                     }\n+106 | |               ).unwrap_or(0);\n+    | |____________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n+   --> $DIR/methods.rs:107:13\n+    |\n+107 |       let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or(a)`\n+    |  _____________^ starting here...\n+108 | |                .unwrap_or({\n+109 | |                     0\n+110 | |                 });\n+    | |__________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:116:13\n+    |\n+116 |       let _ = opt.map(|x| x + 1) //~  ERROR called `map(f).unwrap_or_else(g)`\n+    |  _____________^ starting here...\n+117 | |                                //~| NOTE replace `map(|x| x + 1).unwrap_or_else(|| 0)`\n+118 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+    | |____________________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `with map_or_else(|| 0, |x| x + 1)`\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:120:13\n+    |\n+120 |       let _ = opt.map(|x| { //~ ERROR called `map(f).unwrap_or_else(g)`\n+    |  _____________^ starting here...\n+121 | |                         x + 1\n+122 | |                     }\n+123 | |               ).unwrap_or_else(|| 0);\n+    | |____________________________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n+   --> $DIR/methods.rs:124:13\n+    |\n+124 |       let _ = opt.map(|x| x + 1) //~ ERROR called `map(f).unwrap_or_else(g)`\n+    |  _____________^ starting here...\n+125 | |                .unwrap_or_else(||\n+126 | |                     0\n+127 | |                 );\n+    | |_________________^ ...ending here\n+    |\n+    = note: #[deny(option_map_unwrap_or_else)] implied by #[deny(clippy_pedantic)]\n+\n+error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+   --> $DIR/methods.rs:196:13\n+    |\n+196 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(filter_next)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n+\n+error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n+   --> $DIR/methods.rs:201:13\n+    |\n+201 |       let _ = v.iter().filter(|&x| { //~ERROR called `filter(p).next()` on an `Iterator`.\n+    |  _____________^ starting here...\n+202 | |                                 *x < 0\n+203 | |                             }\n+204 | |                    ).next();\n+    | |___________________________^ ...ending here\n+    |\n+    = note: #[deny(filter_next)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:216:13\n+    |\n+216 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:221:13\n+    |\n+221 |       let _ = v.iter().find(|&x| { //~ERROR called `is_some()` after searching\n+    |  _____________^ starting here...\n+222 | |                               *x < 0\n+223 | |                           }\n+224 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:227:13\n+    |\n+227 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:232:13\n+    |\n+232 |       let _ = v.iter().position(|&x| { //~ERROR called `is_some()` after searching\n+    |  _____________^ starting here...\n+233 | |                                   x < 0\n+234 | |                               }\n+235 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:238:13\n+    |\n+238 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n+   --> $DIR/methods.rs:243:13\n+    |\n+243 |       let _ = v.iter().rposition(|&x| { //~ERROR called `is_some()` after searching\n+    |  _____________^ starting here...\n+244 | |                                    x < 0\n+245 | |                                }\n+246 | |                    ).is_some();\n+    | |______________________________^ ...ending here\n+    |\n+    = note: #[deny(search_is_some)] implied by #[deny(clippy)]\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:278:5\n+    |\n+278 |     with_constructor.unwrap_or(make());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |     with_constructor.unwrap_or_else(make);\n+\n+error: use of `unwrap_or` followed by a call to `new`\n+   --> $DIR/methods.rs:284:5\n+    |\n+284 |     with_new.unwrap_or(Vec::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_new.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:290:5\n+    |\n+290 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_const_args.unwrap_or_else(|| Vec::with_capacity(12));\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:296:5\n+    |\n+296 |     with_err.unwrap_or(make());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_err.unwrap_or_else(|_| make());\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:302:5\n+    |\n+302 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_err_args.unwrap_or_else(|_| Vec::with_capacity(12));\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:308:5\n+    |\n+308 |     with_default_trait.unwrap_or(Default::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_default_trait.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a call to `default`\n+   --> $DIR/methods.rs:314:5\n+    |\n+314 |     with_default_type.unwrap_or(u64::default());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_default_type.unwrap_or_default();\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:320:5\n+    |\n+320 |     with_vec.unwrap_or(vec![]);\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ));\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:326:5\n+    |\n+326 |     without_default.unwrap_or(Foo::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     without_default.unwrap_or_else(Foo::new);\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:332:5\n+    |\n+332 |     map.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     map.entry(42).or_insert_with(String::new);\n+\n+error: use of `or_insert` followed by a function call\n+   --> $DIR/methods.rs:338:5\n+    |\n+338 |     btree.entry(42).or_insert(String::new());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     btree.entry(42).or_insert_with(String::new);\n+\n+error: use of `unwrap_or` followed by a function call\n+   --> $DIR/methods.rs:344:13\n+    |\n+344 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(or_fun_call)] implied by #[deny(clippy)]\n+help: try this\n+    |     let _ = stringy.unwrap_or_else(|| \"\".to_owned());\n+\n+error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:358:23\n+    |\n+358 |         let bad_vec = some_vec.iter().nth(3);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:360:26\n+    |\n+360 |         let bad_slice = &some_vec[..].iter().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:362:31\n+    |\n+362 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n+   --> $DIR/methods.rs:364:29\n+    |\n+364 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:370:23\n+    |\n+370 |         let bad_vec = some_vec.iter_mut().nth(3);\n+    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:374:26\n+    |\n+374 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n+   --> $DIR/methods.rs:378:29\n+    |\n+378 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_nth)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:392:13\n+    |\n+392 |     let _ = some_vec.iter().skip(42).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:395:13\n+    |\n+395 |     let _ = some_vec.iter().cycle().skip(42).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:398:13\n+    |\n+398 |     let _ = (1..10).skip(10).next();\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n+   --> $DIR/methods.rs:401:14\n+    |\n+401 |     let _ = &some_vec[..].iter().skip(3).next();\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(iter_skip_next)] implied by #[deny(clippy)]\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:429:17\n+    |\n+429 |         let _ = boxed_slice.get(1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |         let _ = &boxed_slice[1];\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:433:17\n+    |\n+433 |         let _ = some_slice.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_slice[0];\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:437:17\n+    |\n+437 |         let _ = some_vec.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_vec[0];\n+\n+error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:441:17\n+    |\n+441 |         let _ = some_vecdeque.get(0).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_vecdeque[0];\n+\n+error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:445:17\n+    |\n+445 |         let _ = some_hashmap.get(&1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_hashmap[&1];\n+\n+error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:449:17\n+    |\n+449 |         let _ = some_btreemap.get(&1).unwrap();\n+    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         let _ = &some_btreemap[&1];\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:458:10\n+    |\n+458 |         *boxed_slice.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut boxed_slice[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:462:10\n+    |\n+462 |         *some_slice.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_slice[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:466:10\n+    |\n+466 |         *some_vec.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_vec[0] = 1;\n+\n+error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+   --> $DIR/methods.rs:470:10\n+    |\n+470 |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(get_unwrap)] implied by #[deny(clippy)]\n+help: try this\n+    |         *&mut some_vecdeque[0] = 1;\n+\n+error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:488:13\n+    |\n+488 |     let _ = opt.unwrap();  //~ERROR used unwrap() on an Option\n+    |             ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(option_unwrap_used)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+\n+error: used unwrap() on a Result value. If you don't want to handle the Err case gracefully, consider using expect() to provide a better panic message\n+   --> $DIR/methods.rs:491:13\n+    |\n+491 |     let _ = res.unwrap();  //~ERROR used unwrap() on a Result\n+    |             ^^^^^^^^^^^^\n+    |\n+    = note: #[deny(result_unwrap_used)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:17\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |                 ^^^^^^^^^^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:493:5\n+    |\n+493 |     res.ok().expect(\"disaster!\"); //~ERROR called `ok().expect()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:499:5\n+    |\n+499 |     res3.ok().expect(\"whoof\"); //~ERROR called `ok().expect()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:501:5\n+    |\n+501 |     res4.ok().expect(\"argh\"); //~ERROR called `ok().expect()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:503:5\n+    |\n+503 |     res5.ok().expect(\"oops\"); //~ERROR called `ok().expect()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\n+   --> $DIR/methods.rs:505:5\n+    |\n+505 |     res6.ok().expect(\"meh\"); //~ERROR called `ok().expect()`\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(ok_expect)] implied by #[deny(clippy)]\n+\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:517:5\n+    |\n+517 |     \"\".chars().next() == Some(' ');\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: like this\n+    |     \"\".starts_with(' ');\n+\n+error: you should use the `starts_with` method\n+   --> $DIR/methods.rs:522:5\n+    |\n+522 |     Some(' ') != \"\".chars().next();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(chars_next_cmp)] implied by #[deny(clippy)]\n+help: like this\n+    |     !\"\".starts_with(' ');\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:534:5\n+    |\n+534 |     s.extend(abc.chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try this\n+    |     s.push_str(abc);\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:540:5\n+    |\n+540 |     s.extend(\"abc\".chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+help: try this\n+    |     s.push_str(\"abc\");\n+\n+error: calling `.extend(_.chars())`\n+   --> $DIR/methods.rs:546:5\n+    |\n+546 |     s.extend(def.chars());\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(string_extend_chars)] implied by #[deny(clippy)]\n+help: try this\n+    |     s.push_str(&def);\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:560:5\n+    |\n+560 |     42.clone(); //~ERROR using `clone` on a `Copy` type\n+    |     ^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try removing the `clone` call\n+    |     42; //~ERROR using `clone` on a `Copy` type\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:565:5\n+    |\n+565 |     (&42).clone(); //~ERROR using `clone` on a `Copy` type\n+    |     ^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try dereferencing it\n+    |     *(&42); //~ERROR using `clone` on a `Copy` type\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:571:5\n+    |\n+571 |     t.clone(); //~ERROR using `clone` on a `Copy` type\n+    |     ^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try removing the `clone` call\n+    |     t; //~ERROR using `clone` on a `Copy` type\n+\n+error: using `clone` on a `Copy` type\n+   --> $DIR/methods.rs:574:5\n+    |\n+574 |     Some(t).clone(); //~ERROR using `clone` on a `Copy` type\n+    |     ^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(clone_on_copy)] implied by #[deny(clippy)]\n+help: try removing the `clone` call\n+    |     Some(t); //~ERROR using `clone` on a `Copy` type\n+\n+error: using `clone` on a double-reference; this will copy the reference instead of cloning the inner type\n+   --> $DIR/methods.rs:582:22\n+    |\n+582 |     let z: &Vec<_> = y.clone(); //~ERROR using `clone` on a double\n+    |                      ^^^^^^^^^\n+    |\n+    = note: #[deny(clone_double_ref)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try dereferencing it\n+    |     let z: &Vec<_> = (*y).clone(); //~ERROR using `clone` on a double\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:590:13\n+    |\n+590 |     x.split(\"x\");\n+    |             ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+help: try using a char instead:\n+    |     x.split('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:614:16\n+    |\n+614 |     x.contains(\"x\");\n+    |                ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.contains('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:618:19\n+    |\n+618 |     x.starts_with(\"x\");\n+    |                   ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.starts_with('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:622:17\n+    |\n+622 |     x.ends_with(\"x\");\n+    |                 ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.ends_with('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:626:12\n+    |\n+626 |     x.find(\"x\");\n+    |            ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.find('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:630:13\n+    |\n+630 |     x.rfind(\"x\");\n+    |             ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rfind('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:634:14\n+    |\n+634 |     x.rsplit(\"x\");\n+    |              ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplit('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:638:24\n+    |\n+638 |     x.split_terminator(\"x\");\n+    |                        ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.split_terminator('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:642:25\n+    |\n+642 |     x.rsplit_terminator(\"x\");\n+    |                         ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplit_terminator('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:646:17\n+    |\n+646 |     x.splitn(0, \"x\");\n+    |                 ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.splitn(0, 'x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:650:18\n+    |\n+650 |     x.rsplitn(0, \"x\");\n+    |                  ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rsplitn(0, 'x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:654:15\n+    |\n+654 |     x.matches(\"x\");\n+    |               ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.matches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:658:16\n+    |\n+658 |     x.rmatches(\"x\");\n+    |                ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rmatches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:662:21\n+    |\n+662 |     x.match_indices(\"x\");\n+    |                     ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.match_indices('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:666:22\n+    |\n+666 |     x.rmatch_indices(\"x\");\n+    |                      ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.rmatch_indices('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:670:25\n+    |\n+670 |     x.trim_left_matches(\"x\");\n+    |                         ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.trim_left_matches('x');\n+\n+error: single-character string constant used as pattern\n+   --> $DIR/methods.rs:674:26\n+    |\n+674 |     x.trim_right_matches(\"x\");\n+    |                          ^^^\n+    |\n+    = note: #[deny(single_char_pattern)] implied by #[deny(clippy)]\n+help: try using a char instead:\n+    |     x.trim_right_matches('x');\n+\n+error: you are getting the inner pointer of a temporary `CString`\n+   --> $DIR/methods.rs:687:5\n+    |\n+687 |     CString::new(\"foo\").unwrap().as_ptr();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: #[deny(temporary_cstring_as_ptr)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/methods.rs:5:9\n+    |\n+5   | #![deny(clippy, clippy_pedantic)]\n+    |         ^^^^^^\n+    = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+   --> $DIR/methods.rs:687:5\n+    |\n+687 |     CString::new(\"foo\").unwrap().as_ptr();\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 88 previous errors\n+"}, {"sha": "9a6794afebf1bf9931e647c8522859ba649b60fa", "filename": "tests/ui/min_max.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmin_max.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmin_max.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/min_max.rs"}, {"sha": "3cb562e26df9998604fc63d9588f19af0f751ac1", "filename": "tests/ui/min_max.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmin_max.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmin_max.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_max.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,63 @@\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:15:5\n+   |\n+15 |     min(1, max(3, x)); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/min_max.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:16:5\n+   |\n+16 |     min(max(3, x), 1); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:17:5\n+   |\n+17 |     max(min(x, 1), 3); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:18:5\n+   |\n+18 |     max(3, min(x, 1)); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:20:5\n+   |\n+20 |     my_max(3, my_min(x, 1)); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:29:5\n+   |\n+29 |     min(\"Apple\", max(\"Zoo\", s)); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: this min/max combination leads to constant result\n+  --> $DIR/min_max.rs:30:5\n+   |\n+30 |     max(min(s, \"Apple\"), \"Zoo\"); //~ERROR this min/max combination leads to constant result\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(min_max)] implied by #[deny(clippy)]\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "acd86f18ea3d5cb6b1b8213c6807485eda755655", "filename": "tests/ui/missing-doc.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/missing-doc.rs"}, {"sha": "b81f46eaa1dbdf1becd2784a248c8e46b898ddfc", "filename": "tests/ui/missing-doc.stderr", "status": "added", "additions": 279, "deletions": 0, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmissing-doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmissing-doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing-doc.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,279 @@\n+error: missing documentation for a type alias\n+  --> $DIR/missing-doc.rs:26:1\n+   |\n+26 | type Typedef = String; //~ ERROR: missing documentation for a type alias\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/missing-doc.rs:16:9\n+   |\n+16 | #![deny(missing_docs_in_private_items)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a type alias\n+  --> $DIR/missing-doc.rs:27:1\n+   |\n+27 | pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/missing-doc.rs:29:1\n+   |\n+29 |   struct Foo { //~ ERROR: missing documentation for a struct\n+   |  _^ starting here...\n+30 | |     a: isize, //~ ERROR: missing documentation for a struct field\n+31 | |     b: isize, //~ ERROR: missing documentation for a struct field\n+32 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:30:5\n+   |\n+30 |     a: isize, //~ ERROR: missing documentation for a struct field\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:31:5\n+   |\n+31 |     b: isize, //~ ERROR: missing documentation for a struct field\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a struct\n+  --> $DIR/missing-doc.rs:34:1\n+   |\n+34 |   pub struct PubFoo { //~ ERROR: missing documentation for a struct\n+   |  _^ starting here...\n+35 | |     pub a: isize,      //~ ERROR: missing documentation for a struct field\n+36 | |     b: isize, //~ ERROR: missing documentation for a struct field\n+37 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:35:5\n+   |\n+35 |     pub a: isize,      //~ ERROR: missing documentation for a struct field\n+   |     ^^^^^^^^^^^^\n+\n+error: missing documentation for a struct field\n+  --> $DIR/missing-doc.rs:36:5\n+   |\n+36 |     b: isize, //~ ERROR: missing documentation for a struct field\n+   |     ^^^^^^^^\n+\n+error: missing documentation for a module\n+  --> $DIR/missing-doc.rs:45:1\n+   |\n+45 | mod module_no_dox {} //~ ERROR: missing documentation for a module\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a module\n+  --> $DIR/missing-doc.rs:46:1\n+   |\n+46 | pub mod pub_module_no_dox {} //~ ERROR: missing documentation for a module\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/missing-doc.rs:50:1\n+   |\n+50 | pub fn foo2() {} //~ ERROR: missing documentation for a function\n+   | ^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+  --> $DIR/missing-doc.rs:51:1\n+   |\n+51 | fn foo3() {} //~ ERROR: missing documentation for a function\n+   | ^^^^^^^^^^^^\n+\n+error: missing documentation for a trait\n+  --> $DIR/missing-doc.rs:68:1\n+   |\n+68 |   pub trait C { //~ ERROR: missing documentation for a trait\n+   |  _^ starting here...\n+69 | |     fn foo(&self); //~ ERROR: missing documentation for a trait method\n+70 | |     fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+71 | | }\n+   | |_^ ...ending here\n+\n+error: missing documentation for a trait method\n+  --> $DIR/missing-doc.rs:69:5\n+   |\n+69 |     fn foo(&self); //~ ERROR: missing documentation for a trait method\n+   |     ^^^^^^^^^^^^^^\n+\n+error: missing documentation for a trait method\n+  --> $DIR/missing-doc.rs:70:5\n+   |\n+70 |     fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated type\n+  --> $DIR/missing-doc.rs:80:5\n+   |\n+80 |     type AssociatedType; //~ ERROR: missing documentation for an associated type\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for an associated type\n+  --> $DIR/missing-doc.rs:81:5\n+   |\n+81 |     type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:92:5\n+   |\n+92 |     pub fn foo() {} //~ ERROR: missing documentation for a method\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:93:5\n+   |\n+93 |     fn bar() {} //~ ERROR: missing documentation for a method\n+   |     ^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+  --> $DIR/missing-doc.rs:97:5\n+   |\n+97 |     pub fn foo() {} //~ ERROR: missing documentation for a method\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a method\n+   --> $DIR/missing-doc.rs:100:5\n+    |\n+100 |     fn foo2() {} //~ ERROR: missing documentation for a method\n+    |     ^^^^^^^^^^^^\n+\n+error: missing documentation for an enum\n+   --> $DIR/missing-doc.rs:126:1\n+    |\n+126 |   enum Baz { //~ ERROR: missing documentation for an enum\n+    |  _^ starting here...\n+127 | |     BazA { //~ ERROR: missing documentation for a variant\n+128 | |         a: isize, //~ ERROR: missing documentation for a struct field\n+129 | |         b: isize //~ ERROR: missing documentation for a struct field\n+130 | |     },\n+131 | |     BarB //~ ERROR: missing documentation for a variant\n+132 | | }\n+    | |_^ ...ending here\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:127:5\n+    |\n+127 |       BazA { //~ ERROR: missing documentation for a variant\n+    |  _____^ starting here...\n+128 | |         a: isize, //~ ERROR: missing documentation for a struct field\n+129 | |         b: isize //~ ERROR: missing documentation for a struct field\n+130 | |     },\n+    | |_____^ ...ending here\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:128:9\n+    |\n+128 |         a: isize, //~ ERROR: missing documentation for a struct field\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:129:9\n+    |\n+129 |         b: isize //~ ERROR: missing documentation for a struct field\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:131:5\n+    |\n+131 |     BarB //~ ERROR: missing documentation for a variant\n+    |     ^^^^\n+\n+error: missing documentation for an enum\n+   --> $DIR/missing-doc.rs:134:1\n+    |\n+134 |   pub enum PubBaz { //~ ERROR: missing documentation for an enum\n+    |  _^ starting here...\n+135 | |     PubBazA { //~ ERROR: missing documentation for a variant\n+136 | |         a: isize, //~ ERROR: missing documentation for a struct field\n+137 | |     },\n+138 | | }\n+    | |_^ ...ending here\n+\n+error: missing documentation for a variant\n+   --> $DIR/missing-doc.rs:135:5\n+    |\n+135 |       PubBazA { //~ ERROR: missing documentation for a variant\n+    |  _____^ starting here...\n+136 | |         a: isize, //~ ERROR: missing documentation for a struct field\n+137 | |     },\n+    | |_____^ ...ending here\n+\n+error: missing documentation for a struct field\n+   --> $DIR/missing-doc.rs:136:9\n+    |\n+136 |         a: isize, //~ ERROR: missing documentation for a struct field\n+    |         ^^^^^^^^\n+\n+error: missing documentation for a constant\n+   --> $DIR/missing-doc.rs:160:1\n+    |\n+160 | const FOO: u32 = 0; //~ ERROR: missing documentation for a const\n+    | ^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a constant\n+   --> $DIR/missing-doc.rs:167:1\n+    |\n+167 | pub const FOO4: u32 = 0; //~ ERROR: missing documentation for a const\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a static\n+   --> $DIR/missing-doc.rs:170:1\n+    |\n+170 | static BAR: u32 = 0; //~ ERROR: missing documentation for a static\n+    | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a static\n+   --> $DIR/missing-doc.rs:177:1\n+    |\n+177 | pub static BAR4: u32 = 0; //~ ERROR: missing documentation for a static\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a module\n+   --> $DIR/missing-doc.rs:180:1\n+    |\n+180 | mod internal_impl { //~ ERROR: missing documentation for a module\n+    | ^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:183:5\n+    |\n+183 |     pub fn undocumented1() {} //~ ERROR: missing documentation for a function\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:184:5\n+    |\n+184 |     pub fn undocumented2() {} //~ ERROR: missing documentation for a function\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:185:5\n+    |\n+185 |     fn undocumented3() {} //~ ERROR: missing documentation for a function\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:190:9\n+    |\n+190 |         pub fn also_undocumented1() {} //~ ERROR: missing documentation for a function\n+    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:191:9\n+    |\n+191 |         fn also_undocumented2() {} //~ ERROR: missing documentation for a function\n+    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: missing documentation for a function\n+   --> $DIR/missing-doc.rs:202:1\n+    |\n+202 | fn main() {} //~ ERROR: missing documentation for a function\n+    | ^^^^^^^^^^^^\n+\n+error: aborting due to 40 previous errors\n+"}, {"sha": "861ed504c86ead1d1e22ac6dcba43964df7154d0", "filename": "tests/ui/module_inception.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodule_inception.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodule_inception.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/module_inception.rs"}, {"sha": "de0ff78eb40687131f8908d307a183a45ae42952", "filename": "tests/ui/module_inception.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodule_inception.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodule_inception.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodule_inception.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: module has the same name as its containing module\n+ --> $DIR/module_inception.rs:7:9\n+  |\n+7 |           mod bar { //~ ERROR module has the same name as its containing module\n+  |  _________^ starting here...\n+8 | |             mod foo {}\n+9 | |         }\n+  | |_________^ ...ending here\n+  |\n+note: lint level defined here\n+ --> $DIR/module_inception.rs:3:9\n+  |\n+3 | #![deny(module_inception)]\n+  |         ^^^^^^^^^^^^^^^^\n+\n+error: module has the same name as its containing module\n+  --> $DIR/module_inception.rs:12:5\n+   |\n+12 |       mod foo { //~ ERROR module has the same name as its containing module\n+   |  _____^ starting here...\n+13 | |         mod bar {}\n+14 | |     }\n+   | |_____^ ...ending here\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "496c1c60d5f11f87bd0bbf482770dc67635addf6", "filename": "tests/ui/modulo_one.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodulo_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodulo_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/modulo_one.rs"}, {"sha": "c938afb0dc30f69010a3c7a42a40e864c909247b", "filename": "tests/ui/modulo_one.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodulo_one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmodulo_one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_one.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: any number modulo 1 will be 0\n+ --> $DIR/modulo_one.rs:7:5\n+  |\n+7 |     10 % 1; //~ERROR any number modulo 1 will be 0\n+  |     ^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/modulo_one.rs:3:9\n+  |\n+3 | #![deny(modulo_one)]\n+  |         ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "edcc6906f082827a702f9583479e40198ef92bfc", "filename": "tests/ui/mut_mut.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/mut_mut.rs"}, {"sha": "55125f8d526681a47c6f9899647a9d0754b94a37", "filename": "tests/ui/mut_mut.stderr", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_mut.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,89 @@\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:10:12\n+   |\n+10 | fn fun(x : &mut &mut u32) -> bool { //~ERROR generally you want to avoid `&mut &mut\n+   |            ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mut_mut.rs:5:9\n+   |\n+5  | #![deny(mut_mut)]\n+   |         ^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:25:17\n+   |\n+25 |     let mut x = &mut &mut 1u32; //~ERROR generally you want to avoid `&mut &mut\n+   |                 ^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:19:20\n+   |\n+19 |     ($p:expr) => { &mut $p }\n+   |                    ^^^^^^^\n+...\n+49 |     let mut z = mut_ptr!(&mut 3u32);\n+   |                 ------------------- in this macro invocation\n+\n+error: this expression mutably borrows a mutable reference. Consider reborrowing\n+  --> $DIR/mut_mut.rs:27:21\n+   |\n+27 |         let mut y = &mut x; //~ERROR this expression mutably borrows a mutable reference\n+   |                     ^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:17\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:33\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                                 ^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:31:17\n+   |\n+31 |         let y : &mut &mut u32 = &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:17\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:38\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                                      ^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:17\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                 ^^^^^^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: generally you want to avoid `&mut &mut _` if possible\n+  --> $DIR/mut_mut.rs:39:22\n+   |\n+39 |         let y : &mut &mut &mut u32 = &mut &mut &mut 2;\n+   |                      ^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n+"}, {"sha": "0bb59a318b8349a91ec84f884a8df4e8b2b48fc4", "filename": "tests/ui/mut_reference.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/mut_reference.rs"}, {"sha": "52e48347795238c2c5cd33b953aa676a2015c951", "filename": "tests/ui/mut_reference.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_reference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmut_reference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmut_reference.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:22:34\n+   |\n+22 |     takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+   |                                  ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mut_reference.rs:19:8\n+   |\n+19 | #[deny(unnecessary_mut_passed)]\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: The function/method \"as_ptr\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:24:12\n+   |\n+24 |     as_ptr(&mut 42); //~ERROR The function/method \"as_ptr\" doesn't need a mutable reference\n+   |            ^^^^^^^\n+\n+error: The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+  --> $DIR/mut_reference.rs:28:44\n+   |\n+28 |     my_struct.takes_an_immutable_reference(&mut 42); //~ERROR The function/method \"takes_an_immutable_reference\" doesn't need a mutable reference\n+   |                                            ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "20a34ba5547c3a6e5c2d7311e6796a7d273dc23c", "filename": "tests/ui/mutex_atomic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/mutex_atomic.rs"}, {"sha": "9554f42d2256ca7eb2dbe6dcd1863c615b277656", "filename": "tests/ui/mutex_atomic.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmutex_atomic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fmutex_atomic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmutex_atomic.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,65 @@\n+error: Consider using an AtomicBool instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+ --> $DIR/mutex_atomic.rs:9:5\n+  |\n+9 |     Mutex::new(true); //~ERROR Consider using an AtomicBool instead of a Mutex here.\n+  |     ^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/mutex_atomic.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:10:5\n+   |\n+10 |     Mutex::new(5usize); //~ERROR Consider using an AtomicUsize instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:11:5\n+   |\n+11 |     Mutex::new(9isize); //~ERROR Consider using an AtomicIsize instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:13:5\n+   |\n+13 |     Mutex::new(&x as *const u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicPtr instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:14:5\n+   |\n+14 |     Mutex::new(&mut x as *mut u32); //~ERROR Consider using an AtomicPtr instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(mutex_atomic)] implied by #[deny(clippy)]\n+\n+error: Consider using an AtomicUsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:15:5\n+   |\n+15 |     Mutex::new(0u32); //~ERROR Consider using an AtomicUsize instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/mutex_atomic.rs:5:9\n+   |\n+5  | #![deny(mutex_integer)]\n+   |         ^^^^^^^^^^^^^\n+\n+error: Consider using an AtomicIsize instead of a Mutex here. If you just want the locking behaviour and not the internal type, consider using Mutex<()>.\n+  --> $DIR/mutex_atomic.rs:16:5\n+   |\n+16 |     Mutex::new(0i32); //~ERROR Consider using an AtomicIsize instead of a Mutex here.\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "fb81d44308a0e8f08e9dc9f02f99f6813bbe0609", "filename": "tests/ui/needless_bool.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/needless_bool.rs"}, {"sha": "0042598e1cda7f85f21f06dc576ef25cf380f5c1", "filename": "tests/ui/needless_bool.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,95 @@\n+error: this if-then-else expression will always return true\n+ --> $DIR/needless_bool.rs:9:5\n+  |\n+9 |     if x { true } else { true }; //~ERROR this if-then-else expression will always return true\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/needless_bool.rs:3:9\n+  |\n+3 | #![deny(needless_bool)]\n+  |         ^^^^^^^^^^^^^\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/needless_bool.rs:10:5\n+   |\n+10 |     if x { false } else { false }; //~ERROR this if-then-else expression will always return false\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:11:5\n+   |\n+11 |     if x { true } else { false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:15:5\n+   |\n+15 |     if x { false } else { true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     !x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:19:5\n+   |\n+19 |     if x && y { false } else { true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     !(x && y);\n+\n+error: this if-then-else expression will always return true\n+  --> $DIR/needless_bool.rs:34:5\n+   |\n+34 |     if x { return true } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression will always return false\n+  --> $DIR/needless_bool.rs:40:5\n+   |\n+40 |     if x { return false } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:46:5\n+   |\n+46 |     if x { return true } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:54:5\n+   |\n+54 |     if x && y { return true } else { return false };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return x && y;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:62:5\n+   |\n+62 |     if x { return false } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return !x;\n+\n+error: this if-then-else expression returns a bool literal\n+  --> $DIR/needless_bool.rs:70:5\n+   |\n+70 |     if x && y { return false } else { return true };\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: you can reduce it to\n+   |     return !(x && y);\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "77992252e102fb33f4a4422f088f016e93d72c8b", "filename": "tests/ui/needless_borrow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/needless_borrow.rs"}, {"sha": "e607185fe9b5a5dafff54e982882806ef6ce72a6", "filename": "tests/ui/needless_borrow.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_borrow.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,31 @@\n+error: this expression borrows a reference that is immediately dereferenced by the compiler\n+  --> $DIR/needless_borrow.rs:13:15\n+   |\n+13 |     let c = x(&&a); //~ ERROR: this expression borrows a reference that is immediately dereferenced by the compiler\n+   |               ^^^\n+   |\n+   = note: #[deny(needless_borrow)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/needless_borrow.rs:8:8\n+   |\n+8  | #[deny(clippy)]\n+   |        ^^^^^^\n+\n+error: this pattern creates a reference to a reference\n+  --> $DIR/needless_borrow.rs:20:17\n+   |\n+20 |     if let Some(ref cake) = Some(&5) {} //~ ERROR: this pattern creates a reference to a reference\n+   |                 ^^^^^^^^\n+   |\n+   = note: #[deny(needless_borrow)] implied by #[deny(clippy)]\n+\n+warning: this pattern creates a reference to a reference\n+  --> $DIR/needless_borrow.rs:41:31\n+   |\n+41 |     let _ = v.iter().filter(|&ref a| a.is_empty());\n+   |                               ^^^^^\n+   |\n+   = note: #[warn(needless_borrow)] on by default\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "442a0b925cbfbab1f47e7e6c27055adce731ba94", "filename": "tests/ui/needless_return.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/needless_return.rs"}, {"sha": "0d9f5f9a57dafdfe616fd59e871d61d2be19e8ee", "filename": "tests/ui/needless_return.stderr", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,79 @@\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:11:5\n+   |\n+11 |     return true;\n+   |     ^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/needless_return.rs:4:9\n+   |\n+4  | #![deny(needless_return)]\n+   |         ^^^^^^^^^^^^^^^\n+help: remove `return` as shown:\n+   |     true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:18:5\n+   |\n+18 |     return true\n+   |     ^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |     true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:26:9\n+   |\n+26 |         return true;\n+   |         ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:31:9\n+   |\n+31 |         return false;\n+   |         ^^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         false\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:40:17\n+   |\n+40 |         true => return false,\n+   |                 ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true => false,\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:46:13\n+   |\n+46 |             return true;\n+   |             ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |             true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:56:9\n+   |\n+56 |         return true;\n+   |         ^^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |         true\n+\n+error: unneeded return statement\n+  --> $DIR/needless_return.rs:61:16\n+   |\n+61 |     let _ = || return true;\n+   |                ^^^^^^^^^^^\n+   |\n+help: remove `return` as shown:\n+   |     let _ = || true;\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "55cfed76d5d3ef9290d6176637b45229849e13e4", "filename": "tests/ui/needless_update.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/needless_update.rs"}, {"sha": "630d48331cc4b7302b8d46a8154973be473436f7", "filename": "tests/ui/needless_update.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_update.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneedless_update.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,14 @@\n+error: struct update has no effect, all the fields in the struct have already been specified\n+  --> $DIR/needless_update.rs:16:23\n+   |\n+16 |     S { a: 1, b: 1, ..base }; //~ERROR struct update has no effect\n+   |                       ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/needless_update.rs:4:9\n+   |\n+4  | #![deny(needless_update)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "90c63c5f2632e6105bd698968b169adb8270dc6a", "filename": "tests/ui/neg_multiply.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/neg_multiply.rs"}, {"sha": "11460a5583fa972dc680777266584ae44d9bcc2a", "filename": "tests/ui/neg_multiply.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneg_multiply.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fneg_multiply.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_multiply.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: Negation by multiplying with -1\n+  --> $DIR/neg_multiply.rs:30:5\n+   |\n+30 |     x * -1;\n+   |     ^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/neg_multiply.rs:4:9\n+   |\n+4  | #![deny(neg_multiply)]\n+   |         ^^^^^^^^^^^^\n+\n+error: Negation by multiplying with -1\n+  --> $DIR/neg_multiply.rs:33:5\n+   |\n+33 |     -1 * x;\n+   |     ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "65f6805e1214eeff87abe8944cca5ce80b8ec8dd", "filename": "tests/ui/new_without_default.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/new_without_default.rs"}, {"sha": "e2b10894af8db084ac8405010c66e2ef360705cd", "filename": "tests/ui/new_without_default.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnew_without_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnew_without_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnew_without_default.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,47 @@\n+error: you should consider deriving a `Default` implementation for `Foo`\n+  --> $DIR/new_without_default.rs:13:5\n+   |\n+13 |     pub fn new() -> Foo { Foo }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/new_without_default.rs:5:30\n+   |\n+5  | #![deny(new_without_default, new_without_default_derive)]\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try this\n+   | #[derive(Default)]\n+   | pub struct Foo;\n+\n+error: you should consider deriving a `Default` implementation for `Bar`\n+  --> $DIR/new_without_default.rs:23:5\n+   |\n+23 |     pub fn new() -> Self { Bar }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   | #[derive(Default)]\n+   | pub struct Bar;\n+\n+error: you should consider adding a `Default` implementation for `LtKo<'c>`\n+  --> $DIR/new_without_default.rs:72:5\n+   |\n+72 |     pub fn new() -> LtKo<'c> { unimplemented!() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/new_without_default.rs:5:9\n+   |\n+5  | #![deny(new_without_default, new_without_default_derive)]\n+   |         ^^^^^^^^^^^^^^^^^^^\n+help: try this\n+   |     impl Default for LtKo<'c> {\n+   |         fn default() -> Self {\n+   |             Self::new()\n+   |         }\n+   |     }\n+   | \n+...\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "30a66a715f2000ed5d1650b77dc66a449ff1887d", "filename": "tests/ui/no_effect.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/no_effect.rs"}, {"sha": "da65c5e8db81bb59c4c1361545f4be48ef8b547b", "filename": "tests/ui/no_effect.stderr", "status": "added", "additions": 334, "deletions": 0, "changes": 334, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,334 @@\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:34:5\n+   |\n+34 |     0; //~ERROR statement with no effect\n+   |     ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/no_effect.rs:4:9\n+   |\n+4  | #![deny(no_effect, unnecessary_operation)]\n+   |         ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:35:5\n+   |\n+35 |     s2; //~ERROR statement with no effect\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:36:5\n+   |\n+36 |     Unit; //~ERROR statement with no effect\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:37:5\n+   |\n+37 |     Tuple(0); //~ERROR statement with no effect\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:38:5\n+   |\n+38 |     Struct { field: 0 }; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:39:5\n+   |\n+39 |     Struct { ..s }; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:40:5\n+   |\n+40 |     Union { a: 0 }; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:41:5\n+   |\n+41 |     Enum::Tuple(0); //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:42:5\n+   |\n+42 |     Enum::Struct { field: 0 }; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:43:5\n+   |\n+43 |     5 + 6; //~ERROR statement with no effect\n+   |     ^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:44:5\n+   |\n+44 |     *&42; //~ERROR statement with no effect\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:45:5\n+   |\n+45 |     &6; //~ERROR statement with no effect\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:46:5\n+   |\n+46 |     (5, 6, 7); //~ERROR statement with no effect\n+   |     ^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:47:5\n+   |\n+47 |     box 42; //~ERROR statement with no effect\n+   |     ^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:48:5\n+   |\n+48 |     ..; //~ERROR statement with no effect\n+   |     ^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:49:5\n+   |\n+49 |     5..; //~ERROR statement with no effect\n+   |     ^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:50:5\n+   |\n+50 |     ..5; //~ERROR statement with no effect\n+   |     ^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:51:5\n+   |\n+51 |     5..6; //~ERROR statement with no effect\n+   |     ^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:52:5\n+   |\n+52 |     5...6; //~ERROR statement with no effect\n+   |     ^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:53:5\n+   |\n+53 |     [42, 55]; //~ERROR statement with no effect\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:54:5\n+   |\n+54 |     [42, 55][1]; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:55:5\n+   |\n+55 |     (42, 55).1; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:56:5\n+   |\n+56 |     [42; 55]; //~ERROR statement with no effect\n+   |     ^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:57:5\n+   |\n+57 |     [42; 55][13]; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^^^^\n+\n+error: statement with no effect\n+  --> $DIR/no_effect.rs:59:5\n+   |\n+59 |     || x += 5; //~ERROR statement with no effect\n+   |     ^^^^^^^^^^\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:65:5\n+   |\n+65 |     Tuple(get_number()); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/no_effect.rs:4:20\n+   |\n+4  | #![deny(no_effect, unnecessary_operation)]\n+   |                    ^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:68:5\n+   |\n+68 |     Struct { field: get_number() }; //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:71:5\n+   |\n+71 |     Struct { ..get_struct() }; //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_struct(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:74:5\n+   |\n+74 |     Enum::Tuple(get_number()); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:77:5\n+   |\n+77 |     Enum::Struct { field: get_number() }; //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:80:5\n+   |\n+80 |     5 + get_number(); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     5;get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:83:5\n+   |\n+83 |     *&get_number(); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:86:5\n+   |\n+86 |     &get_number(); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:89:5\n+   |\n+89 |     (5, 6, get_number()); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     5;6;get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:92:5\n+   |\n+92 |     box get_number(); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:95:5\n+   |\n+95 |     get_number()..; //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+  --> $DIR/no_effect.rs:98:5\n+   |\n+98 |     ..get_number(); //~ERROR statement can be reduced\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:101:5\n+    |\n+101 |     5..get_number(); //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     5;get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:104:5\n+    |\n+104 |     [42, get_number()]; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     42;get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:107:5\n+    |\n+107 |     [42, 55][get_number() as usize]; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     [42, 55];get_number() as usize; //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:110:5\n+    |\n+110 |     (42, get_number()).1; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     42;get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:113:5\n+    |\n+113 |     [get_number(); 55]; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     get_number(); //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:116:5\n+    |\n+116 |     [42; 55][get_number() as usize]; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     [42; 55];get_number() as usize; //~ERROR statement can be reduced\n+\n+error: statement can be reduced\n+   --> $DIR/no_effect.rs:119:5\n+    |\n+119 |     {get_number()}; //~ERROR statement can be reduced\n+    |     ^^^^^^^^^^^^^^^\n+    |\n+help: replace it with\n+    |     get_number(); //~ERROR statement can be reduced\n+\n+error: aborting due to 44 previous errors\n+"}, {"sha": "778041f49b8c63a1b4cd2be785e1bb7947989e1e", "filename": "tests/ui/non_expressive_names.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,150 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy,similar_names)]\n+//~^ NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+//~| NOTE: lint level defined here\n+#![allow(unused)]\n+\n+\n+struct Foo {\n+    apple: i32,\n+    bpple: i32,\n+}\n+\n+fn main() {\n+    let specter: i32;\n+    let spectre: i32;\n+\n+    let apple: i32; //~ NOTE: existing binding defined here\n+    //~^ NOTE: existing binding defined here\n+    let bpple: i32; //~ ERROR: name is too similar\n+    //~| HELP: separate the discriminating character by an underscore like: `b_pple`\n+    let cpple: i32; //~ ERROR: name is too similar\n+    //~| HELP: separate the discriminating character by an underscore like: `c_pple`\n+\n+    let a_bar: i32;\n+    let b_bar: i32;\n+    let c_bar: i32;\n+\n+    let items = [5];\n+    for item in &items {\n+        loop {}\n+    }\n+\n+    let foo_x: i32;\n+    let foo_y: i32;\n+\n+    let rhs: i32;\n+    let lhs: i32;\n+\n+    let bla_rhs: i32;\n+    let bla_lhs: i32;\n+\n+    let blubrhs: i32;\n+    let blublhs: i32;\n+\n+    let blubx: i32; //~ NOTE: existing binding defined here\n+    let bluby: i32; //~ ERROR: name is too similar\n+    //~| HELP: separate the discriminating character by an underscore like: `blub_y`\n+\n+    let cake: i32; //~ NOTE: existing binding defined here\n+    let cakes: i32;\n+    let coke: i32; //~ ERROR: name is too similar\n+\n+    match 5 {\n+        cheese @ 1 => {},\n+        rabbit => panic!(),\n+    }\n+    let cheese: i32;\n+    match (42, 43) {\n+        (cheese1, 1) => {},\n+        (cheese2, 2) => panic!(),\n+        _ => println!(\"\"),\n+    }\n+    let ipv4: i32;\n+    let ipv6: i32;\n+    let abcd1: i32;\n+    let abdc2: i32;\n+    let xyz1abc: i32; //~ NOTE: existing binding defined here\n+    let xyz2abc: i32;\n+    let xyzeabc: i32; //~ ERROR: name is too similar\n+\n+    let parser: i32; //~ NOTE: existing binding defined here\n+    let parsed: i32;\n+    let parsee: i32; //~ ERROR: name is too similar\n+    //~| HELP: separate the discriminating character by an underscore like: `parse_e`\n+\n+    let setter: i32;\n+    let getter: i32;\n+    let tx1: i32;\n+    let rx1: i32;\n+    let tx_cake: i32;\n+    let rx_cake: i32;\n+}\n+\n+fn foo() {\n+    let Foo { apple, bpple } = unimplemented!();\n+    let Foo { apple: spring, //~NOTE existing binding defined here\n+        bpple: sprang } = unimplemented!(); //~ ERROR: name is too similar\n+}\n+\n+#[derive(Clone, Debug)]\n+enum MaybeInst {\n+    Split,\n+    Split1(usize),\n+    Split2(usize),\n+}\n+\n+struct InstSplit {\n+    uiae: usize,\n+}\n+\n+impl MaybeInst {\n+    fn fill(&mut self) {\n+        let filled = match *self {\n+            MaybeInst::Split1(goto1) => panic!(1),\n+            MaybeInst::Split2(goto2) => panic!(2),\n+            _ => unimplemented!(),\n+        };\n+        unimplemented!()\n+    }\n+}\n+\n+fn bla() {\n+    let a: i32;\n+    let (b, c, d): (i32, i64, i16);\n+    {\n+        {\n+            let cdefg: i32;\n+            let blar: i32;\n+        }\n+        {\n+            let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n+        }\n+        {\n+            let e: i32; //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n+            let f: i32; //~ ERROR: 6th binding whose name is just one char\n+            //~^ NOTE implied by\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            e => panic!(), //~ ERROR: 5th binding whose name is just one char\n+            //~^ NOTE implied by\n+        }\n+        match 5 {\n+            1 => println!(\"\"),\n+            _ => panic!(),\n+        }\n+    }\n+}"}, {"sha": "4ddb5c84a64889a74aa322f3590ef859bd040113", "filename": "tests/ui/non_expressive_names.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnon_expressive_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fnon_expressive_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnon_expressive_names.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,148 @@\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:29:9\n+   |\n+29 |     let bpple: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/non_expressive_names.rs:3:16\n+   |\n+3  | #![deny(clippy,similar_names)]\n+   |                ^^^^^^^^^^^^^\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:27:9\n+   |\n+27 |     let apple: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `b_pple`\n+  --> $DIR/non_expressive_names.rs:29:9\n+   |\n+29 |     let bpple: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:31:9\n+   |\n+31 |     let cpple: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:27:9\n+   |\n+27 |     let apple: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `c_pple`\n+  --> $DIR/non_expressive_names.rs:31:9\n+   |\n+31 |     let cpple: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:56:9\n+   |\n+56 |     let bluby: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:55:9\n+   |\n+55 |     let blubx: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^^\n+help: separate the discriminating character by an underscore like: `blub_y`\n+  --> $DIR/non_expressive_names.rs:56:9\n+   |\n+56 |     let bluby: i32; //~ ERROR: name is too similar\n+   |         ^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:61:9\n+   |\n+61 |     let coke: i32; //~ ERROR: name is too similar\n+   |         ^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:59:9\n+   |\n+59 |     let cake: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:79:9\n+   |\n+79 |     let xyzeabc: i32; //~ ERROR: name is too similar\n+   |         ^^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:77:9\n+   |\n+77 |     let xyz1abc: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:83:9\n+   |\n+83 |     let parsee: i32; //~ ERROR: name is too similar\n+   |         ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:81:9\n+   |\n+81 |     let parser: i32; //~ NOTE: existing binding defined here\n+   |         ^^^^^^\n+help: separate the discriminating character by an underscore like: `parse_e`\n+  --> $DIR/non_expressive_names.rs:83:9\n+   |\n+83 |     let parsee: i32; //~ ERROR: name is too similar\n+   |         ^^^^^^\n+\n+error: binding's name is too similar to existing binding\n+  --> $DIR/non_expressive_names.rs:97:16\n+   |\n+97 |         bpple: sprang } = unimplemented!(); //~ ERROR: name is too similar\n+   |                ^^^^^^\n+   |\n+note: existing binding defined here\n+  --> $DIR/non_expressive_names.rs:96:22\n+   |\n+96 |     let Foo { apple: spring, //~NOTE existing binding defined here\n+   |                      ^^^^^^\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:131:17\n+    |\n+131 |             let e: i32; //~ ERROR: 5th binding whose name is just one char\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+note: lint level defined here\n+   --> $DIR/non_expressive_names.rs:3:9\n+    |\n+3   | #![deny(clippy,similar_names)]\n+    |         ^^^^^^\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:135:17\n+    |\n+135 |             let e: i32; //~ ERROR: 5th binding whose name is just one char\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: 6th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:137:17\n+    |\n+137 |             let f: i32; //~ ERROR: 6th binding whose name is just one char\n+    |                 ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: 5th binding whose name is just one char\n+   --> $DIR/non_expressive_names.rs:142:13\n+    |\n+142 |             e => panic!(), //~ ERROR: 5th binding whose name is just one char\n+    |             ^\n+    |\n+    = note: #[deny(many_single_char_names)] implied by #[deny(clippy)]\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "3676f473bcd0dc078be31cefdfb6b5aab38ef80f", "filename": "tests/ui/ok_if_let.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/ok_if_let.rs"}, {"sha": "e39b5855435c49447533a6f4e3ba2d45ddf27328", "filename": "tests/ui/ok_if_let.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fok_if_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fok_if_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fok_if_let.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,21 @@\n+error: Matching on `Some` with `ok()` is redundant\n+  --> $DIR/ok_if_let.rs:7:5\n+   |\n+7  |       if let Some(y) = x.parse().ok() { \n+   |  _____^ starting here...\n+8  | |     //~^ERROR Matching on `Some` with `ok()` is redundant\n+9  | |         y\n+10 | |     } else {\n+11 | |         0\n+12 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/ok_if_let.rs:4:9\n+   |\n+4  | #![deny(if_let_some_result)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+   = help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "08024e37d4af8b98c456db6884f958bb44fa2c91", "filename": "tests/ui/open_options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/open_options.rs"}, {"sha": "f7d3d85edbd99b90a05969bcee80f8abd9df4dc1", "filename": "tests/ui/open_options.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fopen_options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fopen_options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fopen_options.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,50 @@\n+error: file opened with \"truncate\" and \"read\"\n+ --> $DIR/open_options.rs:8:5\n+  |\n+8 |     OpenOptions::new().read(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"truncate\" and \"read\"\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/open_options.rs:6:8\n+  |\n+6 | #[deny(nonsensical_open_options)]\n+  |        ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: file opened with \"append\" and \"truncate\"\n+ --> $DIR/open_options.rs:9:5\n+  |\n+9 |     OpenOptions::new().append(true).truncate(true).open(\"foo.txt\"); //~ERROR file opened with \"append\" and \"truncate\"\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"read\" is called more than once\n+  --> $DIR/open_options.rs:11:5\n+   |\n+11 |     OpenOptions::new().read(true).read(false).open(\"foo.txt\"); //~ERROR the method \"read\" is called more than once\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"create\" is called more than once\n+  --> $DIR/open_options.rs:12:5\n+   |\n+12 |     OpenOptions::new().create(true).create(false).open(\"foo.txt\"); //~ERROR the method \"create\" is called more than once\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"write\" is called more than once\n+  --> $DIR/open_options.rs:13:5\n+   |\n+13 |     OpenOptions::new().write(true).write(false).open(\"foo.txt\"); //~ERROR the method \"write\" is called more than once\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"append\" is called more than once\n+  --> $DIR/open_options.rs:14:5\n+   |\n+14 |     OpenOptions::new().append(true).append(false).open(\"foo.txt\"); //~ERROR the method \"append\" is called more than once\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the method \"truncate\" is called more than once\n+  --> $DIR/open_options.rs:15:5\n+   |\n+15 |     OpenOptions::new().truncate(true).truncate(false).open(\"foo.txt\"); //~ERROR the method \"truncate\" is called more than once\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "24310eb81dae057e88f909f11748f67b3a79d970", "filename": "tests/ui/overflow_check_conditional.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/overflow_check_conditional.rs"}, {"sha": "f3c330b168a4a8287055d541fbe7581f3227a29e", "filename": "tests/ui/overflow_check_conditional.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Foverflow_check_conditional.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Foverflow_check_conditional.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foverflow_check_conditional.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,56 @@\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:11:5\n+   |\n+11 | \\tif a + b < a { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/overflow_check_conditional.rs:5:9\n+   |\n+5  | #![deny(overflow_check_conditional)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:14:5\n+   |\n+14 | \\tif a > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:17:5\n+   |\n+17 | \\tif a + b < b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C overflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:20:5\n+   |\n+20 | \\tif b > a + b { //~ERROR You are trying to use classic C overflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:23:5\n+   |\n+23 | \\tif a - b > b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:26:5\n+   |\n+26 | \\tif b < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:29:5\n+   |\n+29 | \\tif a - b > a { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: You are trying to use classic C underflow conditions that will fail in Rust.\n+  --> $DIR/overflow_check_conditional.rs:32:5\n+   |\n+32 | \\tif a < a - b { //~ERROR You are trying to use classic C underflow conditions that will fail in Rust.\n+   | \\t   ^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "7e535d69b698ad504120b9c13468d93f28bedc34", "filename": "tests/ui/panic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/panic.rs"}, {"sha": "41317288c3beff936918e6edab5b43ee76a176a9", "filename": "tests/ui/panic.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpanic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpanic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: you probably are missing some parameter in your format string\n+ --> $DIR/panic.rs:8:16\n+  |\n+8 |         panic!(\"{}\"); //~ERROR: you probably are missing some parameter\n+  |                ^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/panic.rs:4:9\n+  |\n+4 | #![deny(panic_params)]\n+  |         ^^^^^^^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:10:16\n+   |\n+10 |         panic!(\"{:?}\"); //~ERROR: you probably are missing some parameter\n+   |                ^^^^^^\n+\n+error: you probably are missing some parameter in your format string\n+  --> $DIR/panic.rs:12:23\n+   |\n+12 |         assert!(true, \"here be missing values: {}\"); //~ERROR you probably are missing some parameter\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "f4ecdd4261a272862e502f3c649c2eceb601b416", "filename": "tests/ui/partialeq_ne_impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/partialeq_ne_impl.rs"}, {"sha": "dd1e4099e4ca61fa8e93cb5f76f22dcf7d53d9c9", "filename": "tests/ui/partialeq_ne_impl.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpartialeq_ne_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpartialeq_ne_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpartialeq_ne_impl.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,15 @@\n+error: re-implementing `PartialEq::ne` is unnecessary\n+  --> $DIR/partialeq_ne_impl.rs:11:5\n+   |\n+11 |     fn ne(&self, _: &Foo) -> bool { false }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(partialeq_ne_impl)] implied by #[deny(warnings)]\n+note: lint level defined here\n+  --> $DIR/partialeq_ne_impl.rs:4:9\n+   |\n+4  | #![deny(warnings)]\n+   |         ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "62bd2c43cc1487a2c3f0dd1fd253674c0b4564db", "filename": "tests/ui/patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/patterns.rs"}, {"sha": "b55f9e477d41b324114a3b6dd3a852b766f5963e", "filename": "tests/ui/patterns.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpatterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fpatterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpatterns.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,15 @@\n+error: the `y @ _` pattern can be written as just `y`\n+  --> $DIR/patterns.rs:10:9\n+   |\n+10 |         y @ _   => (),  //~ERROR the `y @ _` pattern can be written as just `y`\n+   |         ^^^^^\n+   |\n+   = note: #[deny(redundant_pattern)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/patterns.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "28cc9e643c040bfef6a154aba0a26458ee5a0cdd", "filename": "tests/ui/precedence.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/precedence.rs"}, {"sha": "5eb8d91ec21143a0d925f63c30bb17253b5f3057", "filename": "tests/ui/precedence.stderr", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprecedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprecedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprecedence.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,88 @@\n+error: operator precedence can trip the unwary\n+ --> $DIR/precedence.rs:8:5\n+  |\n+8 |     1 << 2 + 3;\n+  |     ^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/precedence.rs:4:8\n+  |\n+4 | #[deny(precedence)]\n+  |        ^^^^^^^^^^\n+help: consider parenthesizing your expression\n+  |     1 << (2 + 3);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:11:5\n+   |\n+11 |     1 + 2 << 3;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     (1 + 2) << 3;\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:14:5\n+   |\n+14 |     4 >> 1 + 1;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     4 >> (1 + 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:17:5\n+   |\n+17 |     1 + 3 >> 2;\n+   |     ^^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     (1 + 3) >> 2;\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:20:5\n+   |\n+20 |     1 ^ 1 - 1;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     1 ^ (1 - 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:23:5\n+   |\n+23 |     3 | 2 - 1;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     3 | (2 - 1);\n+\n+error: operator precedence can trip the unwary\n+  --> $DIR/precedence.rs:26:5\n+   |\n+26 |     3 & 5 - 2;\n+   |     ^^^^^^^^^\n+   |\n+help: consider parenthesizing your expression\n+   |     3 & (5 - 2);\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:30:5\n+   |\n+30 |     -1i32.abs();\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider adding parentheses to clarify your intent\n+   |     -(1i32.abs());\n+\n+error: unary minus has lower precedence than method call\n+  --> $DIR/precedence.rs:33:5\n+   |\n+33 |     -1f32.abs();\n+   |     ^^^^^^^^^^^\n+   |\n+help: consider adding parentheses to clarify your intent\n+   |     -(1f32.abs());\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "34c38dca2861e0b8b117f7faa51bbb477493bd48", "filename": "tests/ui/print.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/print.rs"}, {"sha": "efa574f56e313ad041710fd76b02f243f6fa4620", "filename": "tests/ui/print.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,62 @@\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:12:27\n+   |\n+12 |         write!(f, \"{:?}\", 43.1415)\n+   |                           ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/print.rs:3:23\n+   |\n+3  | #![deny(print_stdout, use_debug)]\n+   |                       ^^^^^^^^^\n+\n+error: use of `println!`\n+  --> $DIR/print.rs:25:5\n+   |\n+25 |     println!(\"Hello\"); //~ERROR use of `println!`\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/print.rs:3:9\n+   |\n+3  | #![deny(print_stdout, use_debug)]\n+   |         ^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:26:5\n+   |\n+26 |     print!(\"Hello\"); //~ERROR use of `print!`\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:28:5\n+   |\n+28 |     print!(\"Hello {}\", \"World\"); //~ERROR use of `print!`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:30:5\n+   |\n+30 |     print!(\"Hello {:?}\", \"World\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:30:26\n+   |\n+30 |     print!(\"Hello {:?}\", \"World\");\n+   |                          ^^^^^^^\n+\n+error: use of `print!`\n+  --> $DIR/print.rs:34:5\n+   |\n+34 |     print!(\"Hello {:#?}\", \"#orld\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: use of `Debug`-based formatting\n+  --> $DIR/print.rs:34:27\n+   |\n+34 |     print!(\"Hello {:#?}\", \"#orld\");\n+   |                           ^^^^^^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "4c1ebd9fe503c1f9822427f9c7a597a70f0ec542", "filename": "tests/ui/print_with_newline.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint_with_newline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint_with_newline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/print_with_newline.rs"}, {"sha": "94edc532593fb87e4cde3033fbba0a3f832de1a2", "filename": "tests/ui/print_with_newline.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint_with_newline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fprint_with_newline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprint_with_newline.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,32 @@\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:6:5\n+  |\n+6 |     print!(\"Hello/n\"); //~ERROR using `print!()` with a format string\n+  |     ^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/print_with_newline.rs:3:9\n+  |\n+3 | #![deny(print_with_newline)]\n+  |         ^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:7:5\n+  |\n+7 |     print!(\"Hello {}/n\", \"world\"); //~ERROR using `print!()` with a format string\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:8:5\n+  |\n+8 |     print!(\"Hello {} {}/n/n\", \"world\", \"#2\"); //~ERROR using `print!()` with a format string\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: using `print!()` with a format string that ends in a newline, consider using `println!()` instead\n+ --> $DIR/print_with_newline.rs:9:5\n+  |\n+9 |     print!(\"{}/n\", 1265); //~ERROR using `print!()` with a format string\n+  |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e4971208747a77041916cf0646e80934613fa4e6", "filename": "tests/ui/ptr_arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/ptr_arg.rs"}, {"sha": "a022f0e5550f49440f43b4ecc7c4a1cf4dd54a75", "filename": "tests/ui/ptr_arg.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fptr_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fptr_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_arg.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices. Consider changing the type to `&[...]`\n+ --> $DIR/ptr_arg.rs:6:14\n+  |\n+6 | fn do_vec(x: &Vec<i64>) { //~ERROR writing `&Vec<_>` instead of `&[_]`\n+  |              ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/ptr_arg.rs:4:9\n+  |\n+4 | #![deny(ptr_arg)]\n+  |         ^^^^^^^\n+\n+error: writing `&String` instead of `&str` involves a new object where a slice will do. Consider changing the type to `&str`\n+  --> $DIR/ptr_arg.rs:14:14\n+   |\n+14 | fn do_str(x: &String) { //~ERROR writing `&String` instead of `&str`\n+   |              ^^^^^^^\n+\n+error: writing `&Vec<_>` instead of `&[_]` involves one more reference and cannot be used with non-Vec-based slices. Consider changing the type to `&[...]`\n+  --> $DIR/ptr_arg.rs:27:18\n+   |\n+27 |     fn do_vec(x: &Vec<i64>); //~ERROR writing `&Vec<_>`\n+   |                  ^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "fc12155ce9cb816b7d0569d9a9a5ba66511b2890", "filename": "tests/ui/range.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/range.rs"}, {"sha": "a7c4d4fcffd274feb1302efc856be7326ecbdab0", "filename": "tests/ui/range.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Frange.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Frange.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frange.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,44 @@\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:13:5\n+   |\n+13 |     (0..1).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/range.rs:11:8\n+   |\n+11 | #[deny(range_step_by_zero, range_zip_with_len)]\n+   |        ^^^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:17:5\n+   |\n+17 |     (1..).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+   |     ^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:18:5\n+   |\n+18 |     (1...2).step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: Range::step_by(0) produces an infinite iterator. Consider using `std::iter::repeat()` instead\n+  --> $DIR/range.rs:21:5\n+   |\n+21 |     x.step_by(0); //~ERROR Range::step_by(0) produces an infinite iterator\n+   |     ^^^^^^^^^^^^\n+\n+error: It is more idiomatic to use v1.iter().enumerate()\n+  --> $DIR/range.rs:29:14\n+   |\n+29 |     let _x = v1.iter().zip(0..v1.len()); //~ERROR It is more idiomatic to use v1.iter().enumerate()\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/range.rs:11:28\n+   |\n+11 | #[deny(range_step_by_zero, range_zip_with_len)]\n+   |                            ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "73830ecc9f16427ce74fdfa4ce42d90e23a57c40", "filename": "tests/ui/redundant_closure_call.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/redundant_closure_call.rs"}, {"sha": "94facfa0fff65af36a6c33b3a27cf3d0d0c84bc0", "filename": "tests/ui/redundant_closure_call.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fredundant_closure_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fredundant_closure_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_closure_call.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,41 @@\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call.rs:18:2\n+   |\n+18 | \\ti = closure(); //~ERROR Closure called just once immediately after it was declared\n+   | \\t^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/redundant_closure_call.rs:4:9\n+   |\n+4  | #![deny(redundant_closure_call)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: Closure called just once immediately after it was declared\n+  --> $DIR/redundant_closure_call.rs:21:2\n+   |\n+21 | \\ti = closure(3); //~ERROR Closure called just once immediately after it was declared\n+   | \\t^^^^^^^^^^^^^^\n+\n+error: Try not to call a closure in the expression where it is declared.\n+ --> $DIR/redundant_closure_call.rs:7:10\n+  |\n+7 | \\tlet a = (|| 42)();\n+  | \\t        ^^^^^^^^^\n+  |\n+help: Try doing something like: \n+  | \\tlet a = 42;\n+\n+error: Try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call.rs:13:10\n+   |\n+13 | \\tlet k = (|m| m+1)(i); //~ERROR Try not to call a closure in the expression where it is declared.\n+   | \\t        ^^^^^^^^^^^^\n+\n+error: Try not to call a closure in the expression where it is declared.\n+  --> $DIR/redundant_closure_call.rs:15:6\n+   |\n+15 | \\tk = (|a,b| a*b)(1,5); //~ERROR Try not to call a closure in the expression where it is declared.\n+   | \\t    ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "789425e71fe41ed56dfc998043bd511f2111620f", "filename": "tests/ui/reference.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/reference.rs"}, {"sha": "6701016b3bedeceb57f8a02670ec32bf49eeb509", "filename": "tests/ui/reference.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Freference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Freference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Freference.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,106 @@\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:19:13\n+   |\n+19 |     let b = *&a;\n+   |             ^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/reference.rs:14:8\n+   |\n+14 | #[deny(deref_addrof)]\n+   |        ^^^^^^^^^^^^\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:24:13\n+   |\n+24 |     let b = *&get_number();\n+   |             ^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |     let b = get_number();\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:32:13\n+   |\n+32 |     let b = *&bytes[1..2][0];\n+   |             ^^^^^^^^^^^^^^^^\n+   |\n+help: try this\n+   |     let b = bytes[1..2][0];\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:39:13\n+   |\n+39 |     let b = *&(a);\n+   |             ^^^^^\n+   |\n+help: try this\n+   |     let b = (a);\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:44:13\n+   |\n+44 |     let b = *(&a);\n+   |             ^^^^^\n+   |\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:49:13\n+   |\n+49 |     let b = *((&a));\n+   |             ^^^^^^^\n+   |\n+help: try this\n+   |     let b = a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:54:13\n+   |\n+54 |     let b = *&&a;\n+   |             ^^^^\n+   |\n+help: try this\n+   |     let b = &a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:59:14\n+   |\n+59 |     let b = **&aref;\n+   |              ^^^^^^\n+   |\n+help: try this\n+   |     let b = *aref;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:66:14\n+   |\n+66 |     let b = **&&a;\n+   |              ^^^^\n+   |\n+help: try this\n+   |     let b = *&a;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:73:17\n+   |\n+73 |         let y = *&mut x;\n+   |                 ^^^^^^^\n+   |\n+help: try this\n+   |         let y = x;\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/reference.rs:83:18\n+   |\n+83 |         let y = **&mut &mut x;\n+   |                  ^^^^^^^^^^^^\n+   |\n+help: try this\n+   |         let y = *&mut x;\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "d6287b881a19334222210dc43fefedc078db0a2c", "filename": "tests/ui/regex.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/regex.rs"}, {"sha": "f59d0c6b5dc7b20ea0b99f7e65f2724c9ce6042d", "filename": "tests/ui/regex.stderr", "status": "added", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fregex.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fregex.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fregex.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,175 @@\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:16:45\n+   |\n+16 |     let pipe_in_wrong_position = Regex::new(\"|\");\n+   |                                             ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:18:60\n+   |\n+18 |     let pipe_in_wrong_position_builder = RegexBuilder::new(\"|\");\n+   |                                                            ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: invalid character class range\n+  --> $DIR/regex.rs:20:40\n+   |\n+20 |     let wrong_char_ranice = Regex::new(\"[z-a]\");\n+   |                                        ^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: invalid character class range\n+  --> $DIR/regex.rs:22:35\n+   |\n+22 |     let some_unicode = Regex::new(\"[\u00e9-\u00e8]\");\n+   |                                   ^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:25:33\n+   |\n+25 |     let some_regex = Regex::new(OPENING_PAREN);\n+   |                                 ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error: empty alternate\n+  --> $DIR/regex.rs:28:53\n+   |\n+28 |     let binary_pipe_in_wrong_position = BRegex::new(\"|\");\n+   |                                                     ^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:30:41\n+   |\n+30 |     let some_binary_regex = BRegex::new(OPENING_PAREN);\n+   |                                         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:32:56\n+   |\n+32 |     let some_binary_regex_builder = BRegexBuilder::new(OPENING_PAREN);\n+   |                                                        ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:48:9\n+   |\n+48 |         OPENING_PAREN,\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: regex syntax error on position 0: unclosed parenthesis\n+  --> $DIR/regex.rs:53:9\n+   |\n+53 |         OPENING_PAREN,\n+   |         ^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(invalid_regex)] on by default\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:60:33\n+   |\n+60 |     let trivial_eq = Regex::new(\"^foobar$\");\n+   |                                 ^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/regex.rs:5:24\n+   |\n+5  | #![deny(invalid_regex, trivial_regex, regex_macro)]\n+   |                        ^^^^^^^^^^^^^\n+   = help: consider using consider using `==` on `str`s\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:64:48\n+   |\n+64 |     let trivial_eq_builder = RegexBuilder::new(\"^foobar$\");\n+   |                                                ^^^^^^^^^^\n+   |\n+   = help: consider using consider using `==` on `str`s\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:68:42\n+   |\n+68 |     let trivial_starts_with = Regex::new(\"^foobar\");\n+   |                                          ^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::starts_with`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:72:40\n+   |\n+72 |     let trivial_ends_with = Regex::new(\"foobar$\");\n+   |                                        ^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::ends_with`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:76:39\n+   |\n+76 |     let trivial_contains = Regex::new(\"foobar\");\n+   |                                       ^^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:80:39\n+   |\n+80 |     let trivial_contains = Regex::new(NOT_A_REAL_REGEX);\n+   |                                       ^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:84:40\n+   |\n+84 |     let trivial_backslash = Regex::new(\"a//.b\");\n+   |                                        ^^^^^^^\n+   |\n+   = help: consider using consider using `str::contains`\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:89:36\n+   |\n+89 |     let trivial_empty = Regex::new(\"\");\n+   |                                    ^^\n+   |\n+   = help: consider using the regex is unlikely to be useful as it is\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:93:36\n+   |\n+93 |     let trivial_empty = Regex::new(\"^\");\n+   |                                    ^^^\n+   |\n+   = help: consider using the regex is unlikely to be useful as it is\n+\n+error: trivial regex\n+  --> $DIR/regex.rs:97:36\n+   |\n+97 |     let trivial_empty = Regex::new(\"^$\");\n+   |                                    ^^^^\n+   |\n+   = help: consider using consider using `str::is_empty`\n+\n+error: trivial regex\n+   --> $DIR/regex.rs:101:44\n+    |\n+101 |     let binary_trivial_empty = BRegex::new(\"^$\");\n+    |                                            ^^^^\n+    |\n+    = help: consider using consider using `str::is_empty`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "a0671f07101dea43420275ac64572a1e1f3ba22e", "filename": "tests/ui/serde.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/serde.rs"}, {"sha": "e7b493eb2baa9311e643e0b3bdbb465264ec5946", "filename": "tests/ui/serde.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fserde.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fserde.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fserde.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: you should not implement `visit_string` without also implementing `visit_str`\n+  --> $DIR/serde.rs:39:5\n+   |\n+39 |       fn visit_string<E>(self, _v: String) -> Result<Self::Value, E>\n+   |  _____^ starting here...\n+40 | |     //~^ ERROR you should not implement `visit_string` without also implementing `visit_str`\n+41 | |         where E: serde::de::Error,\n+42 | |     {\n+43 | |         unimplemented!()\n+44 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/serde.rs:3:9\n+   |\n+3  | #![deny(serde_api_misuse)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "bf0bdd81863203d4d5b4c86cb29f65ad0e4f09cf", "filename": "tests/ui/shadow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/shadow.rs"}, {"sha": "e5ed3f18ce04cc58a01bf58e54205ee4d1a431e3", "filename": "tests/ui/shadow.stderr", "status": "added", "additions": 159, "deletions": 0, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadow.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,159 @@\n+error: `x` is shadowed by itself in `&mut x`\n+  --> $DIR/shadow.rs:13:9\n+   |\n+13 |     let x = &mut x; //~ERROR `x` is shadowed by itself in `&mut x`\n+   |         ^^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:12:13\n+   |\n+12 |     let mut x = 1;\n+   |             ^\n+\n+error: `x` is shadowed by itself in `{ x }`\n+  --> $DIR/shadow.rs:14:9\n+   |\n+14 |     let x = { x }; //~ERROR `x` is shadowed by itself in `{ x }`\n+   |         ^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:13:9\n+   |\n+13 |     let x = &mut x; //~ERROR `x` is shadowed by itself in `&mut x`\n+   |         ^\n+\n+error: `x` is shadowed by itself in `(&*x)`\n+  --> $DIR/shadow.rs:15:9\n+   |\n+15 |     let x = (&*x); //~ERROR `x` is shadowed by itself in `(&*x)`\n+   |         ^^^^^^^^^\n+   |\n+   = note: #[deny(shadow_same)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:14:9\n+   |\n+14 |     let x = { x }; //~ERROR `x` is shadowed by itself in `{ x }`\n+   |         ^\n+\n+error: `x` is shadowed by `{ *x + 1 }` which reuses the original value\n+  --> $DIR/shadow.rs:16:9\n+   |\n+16 |     let x = { *x + 1 }; //~ERROR `x` is shadowed by `{ *x + 1 }` which reuses\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: initialization happens here\n+  --> $DIR/shadow.rs:16:13\n+   |\n+16 |     let x = { *x + 1 }; //~ERROR `x` is shadowed by `{ *x + 1 }` which reuses\n+   |             ^^^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:15:9\n+   |\n+15 |     let x = (&*x); //~ERROR `x` is shadowed by itself in `(&*x)`\n+   |         ^\n+\n+error: `x` is shadowed by `id(x)` which reuses the original value\n+  --> $DIR/shadow.rs:17:9\n+   |\n+17 |     let x = id(x); //~ERROR `x` is shadowed by `id(x)` which reuses\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:17:13\n+   |\n+17 |     let x = id(x); //~ERROR `x` is shadowed by `id(x)` which reuses\n+   |             ^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:16:9\n+   |\n+16 |     let x = { *x + 1 }; //~ERROR `x` is shadowed by `{ *x + 1 }` which reuses\n+   |         ^\n+\n+error: `x` is shadowed by `(1, x)` which reuses the original value\n+  --> $DIR/shadow.rs:18:9\n+   |\n+18 |     let x = (1, x); //~ERROR `x` is shadowed by `(1, x)` which reuses\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:18:13\n+   |\n+18 |     let x = (1, x); //~ERROR `x` is shadowed by `(1, x)` which reuses\n+   |             ^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:17:9\n+   |\n+17 |     let x = id(x); //~ERROR `x` is shadowed by `id(x)` which reuses\n+   |         ^\n+\n+error: `x` is shadowed by `first(x)` which reuses the original value\n+  --> $DIR/shadow.rs:19:9\n+   |\n+19 |     let x = first(x); //~ERROR `x` is shadowed by `first(x)` which reuses\n+   |         ^\n+   |\n+   = note: #[deny(shadow_reuse)] implied by #[deny(clippy_pedantic)]\n+note: initialization happens here\n+  --> $DIR/shadow.rs:19:13\n+   |\n+19 |     let x = first(x); //~ERROR `x` is shadowed by `first(x)` which reuses\n+   |             ^^^^^^^^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:18:9\n+   |\n+18 |     let x = (1, x); //~ERROR `x` is shadowed by `(1, x)` which reuses\n+   |         ^\n+\n+error: `x` is shadowed by `y`\n+  --> $DIR/shadow.rs:21:9\n+   |\n+21 |     let x = y; //~ERROR `x` is shadowed by `y`\n+   |         ^\n+   |\n+   = note: #[deny(shadow_unrelated)] implied by #[deny(clippy_pedantic)]\n+note: lint level defined here\n+  --> $DIR/shadow.rs:4:17\n+   |\n+4  | #![deny(clippy, clippy_pedantic)]\n+   |                 ^^^^^^^^^^^^^^^\n+note: initialization happens here\n+  --> $DIR/shadow.rs:21:13\n+   |\n+21 |     let x = y; //~ERROR `x` is shadowed by `y`\n+   |             ^\n+note: previous binding is here\n+  --> $DIR/shadow.rs:19:9\n+   |\n+19 |     let x = first(x); //~ERROR `x` is shadowed by `first(x)` which reuses\n+   |         ^\n+\n+error: `x` shadows a previous declaration\n+  --> $DIR/shadow.rs:23:9\n+   |\n+23 |     let x; //~ERROR `x` shadows a previous declaration\n+   |         ^\n+   |\n+   = note: #[deny(shadow_unrelated)] implied by #[deny(clippy_pedantic)]\n+note: previous binding is here\n+  --> $DIR/shadow.rs:21:9\n+   |\n+21 |     let x = y; //~ERROR `x` is shadowed by `y`\n+   |         ^\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "23dfc0ebcaf2993ae49c111d503c66f8e453db84", "filename": "tests/ui/short_circuit_statement.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshort_circuit_statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshort_circuit_statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/short_circuit_statement.rs"}, {"sha": "4c865ebeb19f99344a41eea74c1e0fd50d18a24b", "filename": "tests/ui/short_circuit_statement.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshort_circuit_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fshort_circuit_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshort_circuit_statement.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,34 @@\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+ --> $DIR/short_circuit_statement.rs:7:5\n+  |\n+7 |     f() && g();\n+  |     ^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/short_circuit_statement.rs:4:9\n+  |\n+4 | #![deny(short_circuit_statement)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^\n+help: replace it with\n+  |     if f() { g(); }\n+\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+  --> $DIR/short_circuit_statement.rs:11:5\n+   |\n+11 |     f() || g();\n+   |     ^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     if !f() { g(); }\n+\n+error: boolean short circuit operator in statement may be clearer using an explicit test\n+  --> $DIR/short_circuit_statement.rs:15:5\n+   |\n+15 |     1 == 2 || g();\n+   |     ^^^^^^^^^^^^^^\n+   |\n+help: replace it with\n+   |     if !(1 == 2) { g(); }\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "7cfc8a41ea1f1c920f41e184845a464ef98c7efa", "filename": "tests/ui/strings.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,73 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(string_add)]\n+#[allow(string_add_assign)]\n+fn add_only() { // ignores assignment distinction\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\"; //~ERROR you added something to a string.\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\"; //~ERROR you added something to a string.\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add_assign)]\n+fn add_assign_only() {\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\";\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[deny(string_add, string_add_assign)]\n+fn both() {\n+    let mut x = \"\".to_owned();\n+\n+    for _ in 1..3 {\n+        x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+    }\n+\n+    let y = \"\".to_owned();\n+    let z = y + \"...\"; //~ERROR you added something to a string.\n+\n+    assert_eq!(&x, &z);\n+}\n+\n+#[allow(dead_code, unused_variables)]\n+#[deny(string_lit_as_bytes)]\n+fn str_lit_as_bytes() {\n+    let bs = \"hello there\".as_bytes();\n+    //~^ERROR calling `as_bytes()`\n+    //~|HELP byte string literal\n+    //~|SUGGESTION b\"hello there\"\n+\n+    // no warning, because this cannot be written as a byte string literal:\n+    let ubs = \"\u2603\".as_bytes();\n+\n+    let strify = stringify!(foobar).as_bytes();\n+}\n+\n+fn main() {\n+    add_only();\n+    add_assign_only();\n+    both();\n+\n+    // the add is only caught for `String`\n+    let mut x = 1;\n+    ; x = x + 1;\n+    //~^ WARN manual implementation of an assign operation\n+    //~| HELP replace\n+    //~| SUGGESTION ; x += 1;\n+    assert_eq!(2, x);\n+}"}, {"sha": "892f04c7ea924c7ee88200c0a2fd897ed3fa8be2", "filename": "tests/ui/strings.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstrings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstrings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstrings.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,80 @@\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:10:13\n+   |\n+10 |         x = x + \".\"; //~ERROR you added something to a string.\n+   |             ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:4:8\n+   |\n+4  | #[deny(string_add)]\n+   |        ^^^^^^^^^^\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:14:13\n+   |\n+14 |     let z = y + \"...\"; //~ERROR you added something to a string.\n+   |             ^^^^^^^^^\n+\n+error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:24:9\n+   |\n+24 |         x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:19:8\n+   |\n+19 | #[deny(string_add_assign)]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: you assigned the result of adding something to this string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:38:9\n+   |\n+38 |         x = x + \".\"; //~ERROR you assigned the result of adding something to this string.\n+   |         ^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:33:20\n+   |\n+33 | #[deny(string_add, string_add_assign)]\n+   |                    ^^^^^^^^^^^^^^^^^\n+\n+error: you added something to a string. Consider using `String::push_str()` instead\n+  --> $DIR/strings.rs:42:13\n+   |\n+42 |     let z = y + \"...\"; //~ERROR you added something to a string.\n+   |             ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:33:8\n+   |\n+33 | #[deny(string_add, string_add_assign)]\n+   |        ^^^^^^^^^^\n+\n+error: calling `as_bytes()` on a string literal\n+  --> $DIR/strings.rs:50:14\n+   |\n+50 |     let bs = \"hello there\".as_bytes();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/strings.rs:48:8\n+   |\n+48 | #[deny(string_lit_as_bytes)]\n+   |        ^^^^^^^^^^^^^^^^^^^\n+help: consider using a byte string literal instead\n+   |     let bs = b\"hello there\";\n+\n+warning: manual implementation of an assign operation\n+  --> $DIR/strings.rs:68:7\n+   |\n+68 |     ; x = x + 1;\n+   |       ^^^^^^^^^\n+   |\n+   = note: #[warn(assign_op_pattern)] on by default\n+help: replace it with\n+   |     ; x += 1;\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "0c99859c10d8c972b96250612eec2ea7ca25b1ad", "filename": "tests/ui/stutter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstutter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstutter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/stutter.rs"}, {"sha": "108fccb77f56a8e9f50271b8930ceb371dd353ad", "filename": "tests/ui/stutter.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstutter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fstutter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstutter.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,32 @@\n+error: item name starts with its containing module's name\n+ --> $DIR/stutter.rs:8:5\n+  |\n+8 |     pub fn foo_bar() {} //~ ERROR: item name starts with its containing module's name\n+  |     ^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/stutter.rs:3:9\n+  |\n+3 | #![deny(stutter)]\n+  |         ^^^^^^^\n+\n+error: item name ends with its containing module's name\n+ --> $DIR/stutter.rs:9:5\n+  |\n+9 |     pub fn bar_foo() {} //~ ERROR: item name ends with its containing module's name\n+  |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: item name starts with its containing module's name\n+  --> $DIR/stutter.rs:10:5\n+   |\n+10 |     pub struct FooCake {} //~ ERROR: item name starts with its containing module's name\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: item name ends with its containing module's name\n+  --> $DIR/stutter.rs:11:5\n+   |\n+11 |     pub enum CakeFoo {} //~ ERROR: item name ends with its containing module's name\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0e56d5ca86e62e8311ec9c82fa3eb45081df4ed8", "filename": "tests/ui/swap.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,84 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(clippy)]\n+#![allow(blacklisted_name, unused_assignments)]\n+\n+struct Foo(u32);\n+\n+fn array() {\n+    let mut foo = [1, 2];\n+    let temp = foo[0]; //~ NOTE implied by\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn slice() {\n+    let foo = &mut [1, 2];\n+    let temp = foo[0]; //~ NOTE implied by\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn vec() {\n+    let mut foo = vec![1, 2];\n+    let temp = foo[0]; //~ NOTE implied by\n+    foo[0] = foo[1];\n+    foo[1] = temp;\n+    //~^^^ ERROR this looks like you are swapping elements of `foo` manually\n+    //~| HELP try\n+    //~| SUGGESTION foo.swap(0, 1);\n+\n+    foo.swap(0, 1);\n+}\n+\n+fn main() {\n+    array();\n+    slice();\n+    vec();\n+\n+    let mut a = 42;\n+    let mut b = 1337;\n+\n+    a = b; //~ NOTE implied by\n+    b = a;\n+    //~^^ ERROR this looks like you are trying to swap `a` and `b`\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    ; let t = a; //~ NOTE implied by\n+    a = b;\n+    b = t;\n+    //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n+    //~| HELP try\n+    //~| SUGGESTION ; std::mem::swap(&mut a, &mut b);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    let mut c = Foo(42);\n+\n+    c.0 = a; //~ NOTE implied by\n+    a = c.0;\n+    //~^^ ERROR this looks like you are trying to swap `c.0` and `a`\n+    //~| HELP try\n+    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+\n+    ; let t = c.0; //~ NOTE implied by\n+    c.0 = a;\n+    a = t;\n+    //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually\n+    //~| HELP try\n+    //~| SUGGESTION ; std::mem::swap(&mut c.0, &mut a);\n+    //~| NOTE or maybe you should use `std::mem::replace`?\n+}"}, {"sha": "f4fd80ec9ca9d2169363d1951689c621caeafe25", "filename": "tests/ui/swap.stderr", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fswap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fswap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fswap.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,105 @@\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:11:5\n+   |\n+11 |       let temp = foo[0]; //~ NOTE implied by\n+   |  _____^ starting here...\n+12 | |     foo[0] = foo[1];\n+13 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/swap.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:23:5\n+   |\n+23 |       let temp = foo[0]; //~ NOTE implied by\n+   |  _____^ starting here...\n+24 | |     foo[0] = foo[1];\n+25 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping elements of `foo` manually\n+  --> $DIR/swap.rs:35:5\n+   |\n+35 |       let temp = foo[0]; //~ NOTE implied by\n+   |  _____^ starting here...\n+36 | |     foo[0] = foo[1];\n+37 | |     foo[1] = temp;\n+   | |_________________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     foo.swap(0, 1);\n+\n+error: this looks like you are swapping `a` and `b` manually\n+  --> $DIR/swap.rs:60:7\n+   |\n+60 |       ; let t = a; //~ NOTE implied by\n+   |  _______^ starting here...\n+61 | |     a = b;\n+62 | |     b = t;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     ; std::mem::swap(&mut a, &mut b);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are swapping `c.0` and `a` manually\n+  --> $DIR/swap.rs:77:7\n+   |\n+77 |       ; let t = c.0; //~ NOTE implied by\n+   |  _______^ starting here...\n+78 | |     c.0 = a;\n+79 | |     a = t;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(manual_swap)] implied by #[deny(clippy)]\n+help: try\n+   |     ; std::mem::swap(&mut c.0, &mut a);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `a` and `b`\n+  --> $DIR/swap.rs:53:5\n+   |\n+53 |       a = b; //~ NOTE implied by\n+   |  _____^ starting here...\n+54 | |     b = a;\n+   | |_________^ ...ending here\n+   |\n+   = note: #[deny(almost_swapped)] implied by #[deny(clippy)]\n+note: lint level defined here\n+  --> $DIR/swap.rs:4:9\n+   |\n+4  | #![deny(clippy)]\n+   |         ^^^^^^\n+help: try\n+   |     std::mem::swap(&mut a, &mut b);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: this looks like you are trying to swap `c.0` and `a`\n+  --> $DIR/swap.rs:70:5\n+   |\n+70 |       c.0 = a; //~ NOTE implied by\n+   |  _____^ starting here...\n+71 | |     a = c.0;\n+   | |___________^ ...ending here\n+   |\n+   = note: #[deny(almost_swapped)] implied by #[deny(clippy)]\n+help: try\n+   |     std::mem::swap(&mut c.0, &mut a);\n+   = note: or maybe you should use `std::mem::replace`?\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "b1c2b990024f2a8e165b63965e079f2edb930f28", "filename": "tests/ui/temporary_assignment.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/temporary_assignment.rs"}, {"sha": "953fd4e772acc854f82af40a43a32ac856f45514", "filename": "tests/ui/temporary_assignment.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftemporary_assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftemporary_assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftemporary_assignment.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: assignment to temporary\n+  --> $DIR/temporary_assignment.rs:29:5\n+   |\n+29 |     Struct { field: 0 }.field = 1; //~ERROR assignment to temporary\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/temporary_assignment.rs:4:9\n+   |\n+4  | #![deny(temporary_assignment)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: assignment to temporary\n+  --> $DIR/temporary_assignment.rs:30:5\n+   |\n+30 |     (0, 0).0 = 1; //~ERROR assignment to temporary\n+   |     ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "86459ea97961793364a48c5a5e0757f56e82def4", "filename": "tests/ui/toplevel_ref_arg.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftoplevel_ref_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftoplevel_ref_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/toplevel_ref_arg.rs"}, {"sha": "3e3ec712cd3481e0324ac630195e344ddf893200", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,55 @@\n+error: `ref` directly on a function argument is ignored. Consider using a reference type instead.\n+ --> $DIR/toplevel_ref_arg.rs:7:15\n+  |\n+7 | fn the_answer(ref mut x: u8) {  //~ ERROR `ref` directly on a function argument is ignored\n+  |               ^^^^^^^^^\n+  |\n+  = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+note: lint level defined here\n+ --> $DIR/toplevel_ref_arg.rs:4:9\n+  |\n+4 | #![deny(clippy)]\n+  |         ^^^^^^\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:18:7\n+   |\n+18 |   let ref x = 1;\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let x = &1;\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:23:7\n+   |\n+23 |   let ref y: (&_, u8) = (&1, 2);\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let y: &(&_, u8) = &(&1, 2);\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:28:7\n+   |\n+28 |   let ref z = 1 + 2;\n+   |       ^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let z = &(1 + 2);\n+\n+error: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead\n+  --> $DIR/toplevel_ref_arg.rs:33:7\n+   |\n+33 |   let ref mut z = 1 + 2;\n+   |       ^^^^^^^^^\n+   |\n+   = note: #[deny(toplevel_ref_arg)] implied by #[deny(clippy)]\n+help: try\n+   |   let z = &mut (1 + 2);\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "c5ab854b05ae6c28ad6dd890341a48258993cd38", "filename": "tests/ui/transmute.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/transmute.rs"}, {"sha": "ec9e794185506ef2689ef3b77e5eb4f204bebb63", "filename": "tests/ui/transmute.stderr", "status": "added", "additions": 225, "deletions": 0, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,225 @@\n+error: transmute from a type (`&'a T`) to itself\n+  --> $DIR/transmute.rs:22:20\n+   |\n+22 |     let _: &'a T = core::intrinsics::transmute(t);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:20:8\n+   |\n+20 | #[deny(useless_transmute)]\n+   |        ^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:27:23\n+   |\n+27 |     let _: *const T = core::intrinsics::transmute(t);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *const T = t as *const T;\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:32:21\n+   |\n+32 |     let _: *mut T = core::intrinsics::transmute(t);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *mut T = t as *const T as *mut T;\n+\n+error: transmute from a reference to a pointer\n+  --> $DIR/transmute.rs:37:23\n+   |\n+37 |     let _: *const U = core::intrinsics::transmute(t);\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: *const U = t as *const T as *const U;\n+\n+error: transmute from a pointer type (`*const T`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:45:17\n+   |\n+45 |     let _: &T = std::mem::transmute(p);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:43:8\n+   |\n+43 | #[deny(transmute_ptr_to_ref)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |     let _: &T = &*p;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:51:21\n+   |\n+51 |     let _: &mut T = std::mem::transmute(m);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *m;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:57:17\n+   |\n+57 |     let _: &T = std::mem::transmute(m);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*m;\n+\n+error: transmute from a pointer type (`*mut T`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:63:21\n+   |\n+63 |     let _: &mut T = std::mem::transmute(p as *mut T);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *(p as *mut T);\n+\n+error: transmute from a pointer type (`*const U`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:69:17\n+   |\n+69 |     let _: &T = std::mem::transmute(o);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*(o as *const T);\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&mut T`)\n+  --> $DIR/transmute.rs:75:21\n+   |\n+75 |     let _: &mut T = std::mem::transmute(om);\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &mut T = &mut *(om as *mut T);\n+\n+error: transmute from a pointer type (`*mut U`) to a reference type (`&T`)\n+  --> $DIR/transmute.rs:81:17\n+   |\n+81 |     let _: &T = std::mem::transmute(om);\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     let _: &T = &*(om as *const T);\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, u8>`)\n+  --> $DIR/transmute.rs:95:32\n+   |\n+95 |     let _: &Foo<u8> = unsafe { std::mem::transmute::<_, &Foo<_>>(raw) };\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/transmute.rs:88:8\n+   |\n+88 | #[deny(transmute_ptr_to_ref)]\n+   |        ^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |     let _: &Foo<u8> = unsafe { &*(raw as *const Foo<_>) };\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&issue1231::Foo<'_, &u8>`)\n+   --> $DIR/transmute.rs:100:33\n+    |\n+100 |     let _: &Foo<&u8> = unsafe { std::mem::transmute::<_, &Foo<&_>>(raw) };\n+    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |     let _: &Foo<&u8> = unsafe { &*(raw as *const Foo<&_>) };\n+\n+error: transmute from a pointer type (`*const i32`) to a reference type (`&u8`)\n+   --> $DIR/transmute.rs:107:14\n+    |\n+107 |     unsafe { std::mem::transmute::<_, Bar>(raw) };\n+    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |     unsafe { &*(raw as *const u8) };\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:116:27\n+    |\n+116 |         let _: Vec<i32> = core::intrinsics::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/transmute.rs:113:8\n+    |\n+113 | #[deny(useless_transmute)]\n+    |        ^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:119:27\n+    |\n+119 |         let _: Vec<i32> = core::mem::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:122:27\n+    |\n+122 |         let _: Vec<i32> = std::intrinsics::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:125:27\n+    |\n+125 |         let _: Vec<i32> = std::mem::transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`std::vec::Vec<i32>`) to itself\n+   --> $DIR/transmute.rs:128:27\n+    |\n+128 |         let _: Vec<i32> = my_transmute(my_vec());\n+    |                           ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from an integer to a pointer\n+   --> $DIR/transmute.rs:137:31\n+    |\n+137 |         let _: *const usize = std::mem::transmute(5_isize);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |         let _: *const usize = 5_isize as *const usize;\n+\n+error: transmute from an integer to a pointer\n+   --> $DIR/transmute.rs:143:31\n+    |\n+143 |         let _: *const usize = std::mem::transmute(1+1usize);\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+help: try\n+    |         let _: *const usize = (1+1usize) as *const usize;\n+\n+error: transmute from a type (`*const Usize`) to the type that it points to (`Usize`)\n+   --> $DIR/transmute.rs:160:24\n+    |\n+160 |         let _: Usize = core::intrinsics::transmute(int_const_ptr);\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/transmute.rs:153:8\n+    |\n+153 | #[deny(crosspointer_transmute)]\n+    |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`*mut Usize`) to the type that it points to (`Usize`)\n+   --> $DIR/transmute.rs:163:24\n+    |\n+163 |         let _: Usize = core::intrinsics::transmute(int_mut_ptr);\n+    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`Usize`) to a pointer to that type (`*const Usize`)\n+   --> $DIR/transmute.rs:166:31\n+    |\n+166 |         let _: *const Usize = core::intrinsics::transmute(my_int());\n+    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: transmute from a type (`Usize`) to a pointer to that type (`*mut Usize`)\n+   --> $DIR/transmute.rs:169:29\n+    |\n+169 |         let _: *mut Usize = core::intrinsics::transmute(my_int());\n+    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n+"}, {"sha": "1368ab5015d8f7e07bbd2dc76ce160698b5355f8", "filename": "tests/ui/transmute_32bit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_32bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_32bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_32bit.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/transmute_32bit.rs"}, {"sha": "8bc6a2367b91cc908d8fb51c820a2a194778603e", "filename": "tests/ui/transmute_64bit.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_64bit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_64bit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/transmute_64bit.rs"}, {"sha": "1559809eb836e8d790a4b97239ebf654127b5283", "filename": "tests/ui/transmute_64bit.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Ftransmute_64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_64bit.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: transmute from a `f64` to a pointer\n+ --> $DIR/transmute_64bit.rs:9:31\n+  |\n+9 |         let _: *const usize = std::mem::transmute(6.0f64);\n+  |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/transmute_64bit.rs:6:8\n+  |\n+6 | #[deny(wrong_transmute)]\n+  |        ^^^^^^^^^^^^^^^\n+\n+error: transmute from a `f64` to a pointer\n+  --> $DIR/transmute_64bit.rs:12:29\n+   |\n+12 |         let _: *mut usize = std::mem::transmute(6.0f64);\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "e55a0390ff324cf80478bc1116f771ab40673f7b", "filename": "tests/ui/unicode.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unicode.rs"}, {"sha": "b8ecb7c460fb1b1230e13b1b27e355bfc39c3b83", "filename": "tests/ui/unicode.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funicode.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funicode.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funicode.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,40 @@\n+error: zero-width space detected\n+ --> $DIR/unicode.rs:6:12\n+  |\n+6 |     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n+  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: #[deny(zero_width_space)] on by default\n+  = help: Consider replacing the string with:\n+          \"\"Here >/u{200B}< is a ZWS, and /u{200B}another\"\"\n+\n+error: non-nfc unicode sequence detected\n+  --> $DIR/unicode.rs:13:12\n+   |\n+13 |     print!(\"\u0300a\u0300h?\"); //~ERROR non-nfc unicode sequence detected\n+   |            ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unicode.rs:11:8\n+   |\n+11 | #[deny(unicode_not_nfc)]\n+   |        ^^^^^^^^^^^^^^^\n+   = help: Consider replacing the string with:\n+           \"\"\u0300\u00e0h?\"\"\n+\n+error: literal non-ASCII character detected\n+  --> $DIR/unicode.rs:19:12\n+   |\n+19 |     print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected\n+   |            ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unicode.rs:17:8\n+   |\n+17 | #[deny(non_ascii_literal)]\n+   |        ^^^^^^^^^^^^^^^^^\n+   = help: Consider replacing the string with:\n+           \"\"/u{dc}ben!\"\"\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "13095ee6bfb4191e547f76c65cce4c142187fcd9", "filename": "tests/ui/unit_cmp.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unit_cmp.rs"}, {"sha": "a35c04b4998a9cfd0c7e81a779239a5d64cebb6f", "filename": "tests/ui/unit_cmp.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,20 @@\n+error: ==-comparison of unit values detected. This will always be true\n+  --> $DIR/unit_cmp.rs:16:8\n+   |\n+16 |     if { true; } == { false; } {  //~ERROR ==-comparison of unit values detected. This will always be true\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unit_cmp.rs:4:9\n+   |\n+4  | #![deny(unit_cmp)]\n+   |         ^^^^^^^^\n+\n+error: >-comparison of unit values detected. This will always be false\n+  --> $DIR/unit_cmp.rs:19:8\n+   |\n+19 |     if { true; } > { false; } {  //~ERROR >-comparison of unit values detected. This will always be false\n+   |        ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "9c7623d85b7105d5ee5c201b12ea5321c04eb529", "filename": "tests/ui/unneeded_field_pattern.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funneeded_field_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funneeded_field_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unneeded_field_pattern.rs"}, {"sha": "cb721a2d6943f615fdd0a10e472d93a9da35ad68", "filename": "tests/ui/unneeded_field_pattern.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funneeded_field_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funneeded_field_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_field_pattern.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,23 @@\n+error: You matched a field with a wildcard pattern. Consider using `..` instead\n+  --> $DIR/unneeded_field_pattern.rs:17:15\n+   |\n+17 |         Foo { a: _, b: 0, .. } => {} //~ERROR You matched a field with a wildcard pattern\n+   |               ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unneeded_field_pattern.rs:4:9\n+   |\n+4  | #![deny(unneeded_field_pattern)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   = help: Try with `Foo { b: 0, .. }`\n+\n+error: All the struct fields are matched to a wildcard pattern, consider using `..`.\n+  --> $DIR/unneeded_field_pattern.rs:19:9\n+   |\n+19 |         Foo { a: _, b: _, c: _ } => {} //~ERROR All the struct fields are matched to a\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Try with `Foo { .. }` instead\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3e5f6e58c90a3fc77037638ad7c65aa40502dc92", "filename": "tests/ui/unsafe_removed_from_name.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unsafe_removed_from_name.rs"}, {"sha": "4080353efbd70151e36673a026baab2b55ef314a", "filename": "tests/ui/unsafe_removed_from_name.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funsafe_removed_from_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funsafe_removed_from_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe_removed_from_name.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCell`\n+ --> $DIR/unsafe_removed_from_name.rs:7:1\n+  |\n+7 | use std::cell::{UnsafeCell as TotallySafeCell};\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/unsafe_removed_from_name.rs:5:9\n+  |\n+5 | #![deny(unsafe_removed_from_name)]\n+  |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: removed \"unsafe\" from the name of `UnsafeCell` in use as `TotallySafeCellAgain`\n+  --> $DIR/unsafe_removed_from_name.rs:10:1\n+   |\n+10 | use std::cell::UnsafeCell as TotallySafeCellAgain;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: removed \"unsafe\" from the name of `Unsafe` in use as `LieAboutModSafety`\n+  --> $DIR/unsafe_removed_from_name.rs:25:1\n+   |\n+25 | use mod_with_some_unsafe_things::Unsafe as LieAboutModSafety;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "2e63705c5107cb5028408f343a9254813ca9325a", "filename": "tests/ui/unused_io_amount.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_io_amount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_io_amount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unused_io_amount.rs"}, {"sha": "54d8158908faaf54e4d13b96792e63ef3be79cf6", "filename": "tests/ui/unused_io_amount.stderr", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_io_amount.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_io_amount.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_io_amount.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,52 @@\n+error: handle written amount returned or use `Write::write_all` instead\n+  --> $DIR/unused_io_amount.rs:10:5\n+   |\n+10 |     try!(s.write(b\"test\"));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: handle read amount returned or use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:12:5\n+   |\n+12 |     try!(s.read(&mut buf));\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+   = note: this error originates in a macro outside of the current crate\n+\n+error: handle written amount returned or use `Write::write_all` instead\n+  --> $DIR/unused_io_amount.rs:17:5\n+   |\n+17 |     s.write(b\"test\")?;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+\n+error: handle read amount returned or use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:20:5\n+   |\n+20 |     s.read(&mut buf)?;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+\n+error: handle written amount returned or use `Write::write_all` instead\n+  --> $DIR/unused_io_amount.rs:26:5\n+   |\n+26 |     s.write(b\"test\").unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+\n+error: handle read amount returned or use `Read::read_exact` instead\n+  --> $DIR/unused_io_amount.rs:29:5\n+   |\n+29 |     s.read(&mut buf).unwrap();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[deny(unused_io_amount)] on by default\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "26b4d4a2f3b28bd506bfd8ab026eded811a05d51", "filename": "tests/ui/unused_labels.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unused_labels.rs"}, {"sha": "280ea148cf2389c642aac235ec4f1708c33038e7", "filename": "tests/ui/unused_labels.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,32 @@\n+error: unused label `'label`\n+  --> $DIR/unused_labels.rs:8:5\n+   |\n+8  |       'label: for i in 1..2 { //~ERROR: unused label `'label`\n+   |  _____^ starting here...\n+9  | |         if i > 4 { continue }\n+10 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_labels.rs:5:9\n+   |\n+5  | #![deny(unused_label)]\n+   |         ^^^^^^^^^^^^\n+\n+error: unused label `'a`\n+  --> $DIR/unused_labels.rs:21:5\n+   |\n+21 |     'a: loop { break } //~ERROR: unused label `'a`\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: unused label `'same_label_in_two_fns`\n+  --> $DIR/unused_labels.rs:32:5\n+   |\n+32 |       'same_label_in_two_fns: loop { //~ERROR: unused label `'same_label_in_two_fns`\n+   |  _____^ starting here...\n+33 | |         let _ = 1;\n+34 | |     }\n+   | |_____^ ...ending here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "19502720993b641a5be782c161d6cb8dc364d60f", "filename": "tests/ui/unused_lt.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/unused_lt.rs"}, {"sha": "1df4e285f7a9abf6a62d1f4f23546cd7ec0cf073", "filename": "tests/ui/unused_lt.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_lt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Funused_lt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_lt.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,26 @@\n+error: this lifetime isn't used in the function definition\n+  --> $DIR/unused_lt.rs:16:14\n+   |\n+16 | fn unused_lt<'a>(x: u8) { //~ ERROR this lifetime\n+   |              ^^\n+   |\n+note: lint level defined here\n+  --> $DIR/unused_lt.rs:4:9\n+   |\n+4  | #![deny(unused_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+error: this lifetime isn't used in the function definition\n+  --> $DIR/unused_lt.rs:20:25\n+   |\n+20 | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) { //~ ERROR this lifetime\n+   |                         ^^\n+\n+error: this lifetime isn't used in the function definition\n+  --> $DIR/unused_lt.rs:50:10\n+   |\n+50 |     fn x<'a>(&self) {} //~ ERROR this lifetime\n+   |          ^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "ddd69c399a5c17969e7b75b5fc2fad30646f5c6d", "filename": "tests/ui/update-all-references.sh", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fupdate-all-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fupdate-all-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-all-references.sh?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,31 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for all tests. The idea is that\n+# you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. You then\n+# run this script, which will copy those files over. If you find\n+# yourself manually editing a foo.stderr file, you're doing it wrong.\n+#\n+# See all `update-references.sh`, if you just want to update a single test.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" != \"\" ]]; then\n+    echo \"usage: $0 <build-directory>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui\"\n+fi\n+\n+BUILD_DIR=$PWD/$1\n+MY_DIR=$(dirname $0)\n+cd $MY_DIR\n+find . -name '*.rs' | xargs ./update-references.sh $BUILD_DIR"}, {"sha": "aa99d35f7aa779924dd17c96675ee50449f3343f", "filename": "tests/ui/update-references.sh", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fupdate-references.sh", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fupdate-references.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupdate-references.sh?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,50 @@\n+#!/bin/bash\n+#\n+# Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# A script to update the references for particular tests. The idea is\n+# that you do a run, which will generate files in the build directory\n+# containing the (normalized) actual output of the compiler. This\n+# script will then copy that output and replace the \"expected output\"\n+# files. You can then commit the changes.\n+#\n+# If you find yourself manually editing a foo.stderr file, you're\n+# doing it wrong.\n+\n+if [[ \"$1\" == \"--help\" || \"$1\" == \"-h\" || \"$1\" == \"\" || \"$2\" == \"\" ]]; then\n+    echo \"usage: $0 <build-directory> <relative-path-to-rs-files>\"\n+    echo \"\"\n+    echo \"For example:\"\n+    echo \"   $0 ../../../build/x86_64-apple-darwin/test/ui *.rs */*.rs\"\n+fi\n+\n+MYDIR=$(dirname $0)\n+\n+BUILD_DIR=\"$1\"\n+shift\n+\n+while [[ \"$1\" != \"\" ]]; do\n+    STDERR_NAME=\"${1/%.rs/.stderr}\"\n+    STDOUT_NAME=\"${1/%.rs/.stdout}\"\n+    shift\n+    if [ -f $BUILD_DIR/$STDOUT_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDOUT_NAME\n+        cp $BUILD_DIR/$STDOUT_NAME $MYDIR/$STDOUT_NAME\n+    fi\n+    if [ -f $BUILD_DIR/$STDERR_NAME ] && \\\n+           ! (diff $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME >& /dev/null); then\n+        echo updating $MYDIR/$STDERR_NAME\n+        cp $BUILD_DIR/$STDERR_NAME $MYDIR/$STDERR_NAME\n+    fi\n+done\n+\n+"}, {"sha": "c3700d1b1cd430108ac7e7439443505195509c2e", "filename": "tests/ui/used_underscore_binding.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fused_underscore_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fused_underscore_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/used_underscore_binding.rs"}, {"sha": "5377698a6b8a9db38457acac4097912c65628aa9", "filename": "tests/ui/used_underscore_binding.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fused_underscore_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fused_underscore_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fused_underscore_binding.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,38 @@\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+  --> $DIR/used_underscore_binding.rs:17:5\n+   |\n+17 |     _foo + 1 //~ ERROR used binding `_foo` which is prefixed with an underscore\n+   |     ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/used_underscore_binding.rs:6:9\n+   |\n+6  | #![deny(used_underscore_binding)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+  --> $DIR/used_underscore_binding.rs:22:20\n+   |\n+22 |     println!(\"{}\", _foo);\n+   |                    ^^^^\n+\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+  --> $DIR/used_underscore_binding.rs:24:16\n+   |\n+24 |     assert_eq!(_foo, _foo);\n+   |                ^^^^\n+\n+error: used binding `_foo` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+  --> $DIR/used_underscore_binding.rs:24:22\n+   |\n+24 |     assert_eq!(_foo, _foo);\n+   |                      ^^^^\n+\n+error: used binding `_underscore_field` which is prefixed with an underscore. A leading underscore signals that a binding will not be used.\n+  --> $DIR/used_underscore_binding.rs:39:5\n+   |\n+39 |     s._underscore_field += 1; //~ Error used binding `_underscore_field` which is prefixed with an underscore\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "de3896f091b4b55b9fbb1cc5a66edcaad6f075be", "filename": "tests/ui/useless_attribute.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/useless_attribute.rs"}, {"sha": "a0a7936dc0b3fcaf3d0c26c8cb911f382cf8153d", "filename": "tests/ui/useless_attribute.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,16 @@\n+error: useless lint attribute\n+ --> $DIR/useless_attribute.rs:5:1\n+  |\n+5 | #[allow(dead_code)] //~ ERROR useless lint attribute\n+  | ^^^^^^^^^^^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/useless_attribute.rs:3:9\n+  |\n+3 | #![deny(useless_attribute)]\n+  |         ^^^^^^^^^^^^^^^^^\n+help: if you just forgot a `!`, use\n+  | #![allow(dead_code)] //~ ERROR useless lint attribute\n+\n+error: aborting due to previous error\n+"}, {"sha": "7a790e62116123f77bed1795d96568c3cebb142f", "filename": "tests/ui/vec.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/vec.rs"}, {"sha": "c42b156fced1b113f19d0ed3cd255e0aa990398f", "filename": "tests/ui/vec.stderr", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fvec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fvec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fvec.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,61 @@\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:24:14\n+   |\n+24 |     on_slice(&vec![]);\n+   |              ^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/vec.rs:4:9\n+   |\n+4  | #![deny(useless_vec)]\n+   |         ^^^^^^^^^^^\n+help: you can use a slice directly\n+   |     on_slice(&[]);\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:30:14\n+   |\n+30 |     on_slice(&vec![1, 2]);\n+   |              ^^^^^^^^^^^\n+   |\n+help: you can use a slice directly\n+   |     on_slice(&[1, 2]);\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:36:14\n+   |\n+36 |     on_slice(&vec ![1, 2]);\n+   |              ^^^^^^^^^^^^\n+   |\n+help: you can use a slice directly\n+   |     on_slice(&[1, 2]);\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:42:14\n+   |\n+42 |     on_slice(&vec!(1, 2));\n+   |              ^^^^^^^^^^^\n+   |\n+help: you can use a slice directly\n+   |     on_slice(&[1, 2]);\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:48:14\n+   |\n+48 |     on_slice(&vec![1; 2]);\n+   |              ^^^^^^^^^^^\n+   |\n+help: you can use a slice directly\n+   |     on_slice(&[1; 2]);\n+\n+error: useless use of `vec!`\n+  --> $DIR/vec.rs:64:14\n+   |\n+64 |     for a in vec![1, 2, 3] {\n+   |              ^^^^^^^^^^^^^\n+   |\n+help: you can use a slice directly\n+   |     for a in &[1, 2, 3] {\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "7b0fb43575eeadd097dbfefe5ae3b8ad6908032c", "filename": "tests/ui/while_loop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/while_loop.rs"}, {"sha": "46f0260879a0b6b3c4fdb0fb9776c7e2e2f21268", "filename": "tests/ui/while_loop.stderr", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwhile_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwhile_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,126 @@\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_loop.rs:9:5\n+   |\n+9  |     loop {\n+   |     ^\n+   |\n+note: lint level defined here\n+  --> $DIR/while_loop.rs:4:9\n+   |\n+4  | #![deny(while_let_loop, empty_loop, while_let_on_iterator)]\n+   |         ^^^^^^^^^^^^^^\n+help: try\n+   |     while let Some(_x) = y { .. }\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_loop.rs:25:5\n+   |\n+25 |       loop {\n+   |  _____^ starting here...\n+26 | |     //~^ERROR this loop could be written as a `while let` loop\n+27 | |     //~|HELP try\n+28 | |     //~|SUGGESTION while let Some(_x) = y {\n+29 | |         match y {\n+30 | |             Some(_x) => true,\n+31 | |             None => break\n+32 | |         };\n+33 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     while let Some(_x) = y { .. }\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_loop.rs:34:5\n+   |\n+34 |     loop {\n+   |     ^\n+   |\n+help: try\n+   |     while let Some(x) = y { .. }\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_loop.rs:45:5\n+   |\n+45 |     loop {\n+   |     ^\n+   |\n+help: try\n+   |     while let Some(x) = y { .. }\n+\n+error: this loop could be written as a `while let` loop\n+  --> $DIR/while_loop.rs:70:5\n+   |\n+70 |     loop {\n+   |     ^\n+   |\n+help: try\n+   |     while let Some(word) = \"\".split_whitespace().next() { .. }\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_loop.rs:83:5\n+   |\n+83 |       while let Option::Some(x) = iter.next() {\n+   |  _____^ starting here...\n+84 | |     //~^ ERROR this loop could be written as a `for` loop\n+85 | |     //~| HELP try\n+86 | |     //~| SUGGESTION for x in iter {\n+87 | |         println!(\"{}\", x);\n+88 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/while_loop.rs:4:37\n+   |\n+4  | #![deny(while_let_loop, empty_loop, while_let_on_iterator)]\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+help: try\n+   |     for x in iter { .. }\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_loop.rs:91:5\n+   |\n+91 |       while let Some(x) = iter.next() {\n+   |  _____^ starting here...\n+92 | |     //~^ ERROR this loop could be written as a `for` loop\n+93 | |     //~| HELP try\n+94 | |     //~| SUGGESTION for x in iter {\n+95 | |         println!(\"{}\", x);\n+96 | |     }\n+   | |_____^ ...ending here\n+   |\n+help: try\n+   |     for x in iter { .. }\n+\n+error: this loop could be written as a `for` loop\n+  --> $DIR/while_loop.rs:99:5\n+   |\n+99 |     while let Some(_) = iter.next() {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: try\n+   |     for _ in iter { .. }\n+\n+error: this loop could be written as a `while let` loop\n+   --> $DIR/while_loop.rs:142:5\n+    |\n+142 |     loop {\n+    |     ^\n+    |\n+help: try\n+    |     while let Some(ele) = iter.next() { .. }\n+\n+error: empty `loop {}` detected. You may want to either use `panic!()` or add `std::thread::sleep(..);` to the loop body.\n+   --> $DIR/while_loop.rs:150:9\n+    |\n+150 |         loop {} //~ERROR empty `loop {}` detected.\n+    |         ^^^^^^^\n+    |\n+note: lint level defined here\n+   --> $DIR/while_loop.rs:4:25\n+    |\n+4   | #![deny(while_let_loop, empty_loop, while_let_on_iterator)]\n+    |                         ^^^^^^^^^^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "f22efd810f8382c5842f8f4edf4dc4a6e93cd894", "filename": "tests/ui/wrong_macro_span.rs_", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_macro_span.rs_", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_macro_span.rs_", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_macro_span.rs_?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,29 @@\n+#![feature(plugin)]\n+\n+#![plugin(clippy)]\n+#![deny(clippy)]\n+#![allow(unused, if_let_redundant_pattern_matching)]\n+\n+fn main() {\n+    #[derive(Debug)]\n+    enum Foo {\n+        A(String),\n+        B,\n+    }\n+\n+    struct Thingy(Foo);\n+\n+    macro_rules! issue_1404 {\n+        ($idx:tt) => {{\n+            let thingy = Thingy(Foo::A(\"Foo\".into()));\n+            let t = &thingy;\n+\n+            match t.$idx { Foo::A(ref val) => { println!(\"42\"); }, _ => {} }\n+            //~^ ERROR you seem to be trying to use match\n+            //~| HELP try this\n+            //~| SUGGESTION if let Foo::A(ref val) = t.$idx { println!(\"42\"); }\n+        }}\n+    }\n+\n+    issue_1404!(0)\n+}"}, {"sha": "d22648c0cdba93c00f6257c36f50e5ca969c3ea2", "filename": "tests/ui/wrong_self_convention.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/wrong_self_convention.rs"}, {"sha": "06781411b9e865a6bf4740db5481d183d8f1f01b", "filename": "tests/ui/wrong_self_convention.stderr", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_self_convention.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fwrong_self_convention.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrong_self_convention.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,80 @@\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:21:17\n+   |\n+21 |     fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+   |                 ^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/wrong_self_convention.rs:4:9\n+   |\n+4  | #![deny(wrong_self_convention)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:27:21\n+   |\n+27 |     pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+   |                     ^^^^\n+\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:38:15\n+   |\n+38 |     fn as_i32(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+   |               ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:40:17\n+   |\n+40 |     fn into_i32(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+   |                 ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:42:15\n+   |\n+42 |     fn is_i32(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+   |               ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:44:15\n+   |\n+44 |     fn to_i32(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+   |               ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:46:17\n+   |\n+46 |     fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+   |                 ^^^^\n+\n+error: methods called `as_*` usually take self by reference or self by mutable reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:48:19\n+   |\n+48 |     pub fn as_i64(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+   |                   ^^^^\n+\n+error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:49:21\n+   |\n+49 |     pub fn into_i64(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+   |                     ^^^^^\n+\n+error: methods called `is_*` usually take self by reference or no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:50:19\n+   |\n+50 |     pub fn is_i64(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+   |                   ^^^^\n+\n+error: methods called `to_*` usually take self by reference; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:51:19\n+   |\n+51 |     pub fn to_i64(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+   |                   ^^^^\n+\n+error: methods called `from_*` usually take no self; consider choosing a less ambiguous name\n+  --> $DIR/wrong_self_convention.rs:52:21\n+   |\n+52 |     pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+   |                     ^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "c422e83873b09b855f5c515cbc2ce3e552fc619a", "filename": "tests/ui/zero_div_zero.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.rs?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "previous_filename": "tests/compile-fail/zero_div_zero.rs"}, {"sha": "a28d47257a14d830399d4f04e51b2eda227dbe72", "filename": "tests/ui/zero_div_zero.stderr", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fzero_div_zero.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd1351f6e311b6c3e24a0b236bf2879501d4fd38/tests%2Fui%2Fzero_div_zero.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fzero_div_zero.stderr?ref=fd1351f6e311b6c3e24a0b236bf2879501d4fd38", "patch": "@@ -0,0 +1,71 @@\n+warning: equal expressions as operands to `/`\n+ --> $DIR/zero_div_zero.rs:7:15\n+  |\n+7 |     let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+  |               ^^^^^^^^^\n+  |\n+  = note: #[warn(eq_op)] on by default\n+\n+error: constant division of 0.0 with 0.0 will always result in NaN\n+ --> $DIR/zero_div_zero.rs:7:15\n+  |\n+7 |     let nan = 0.0 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+  |               ^^^^^^^^^\n+  |\n+note: lint level defined here\n+ --> $DIR/zero_div_zero.rs:5:8\n+  |\n+5 | #[deny(zero_divided_by_zero)]\n+  |        ^^^^^^^^^^^^^^^^^^^^\n+  = help: Consider using `std::f32::NAN` if you would like a constant representing NaN\n+\n+warning: equal expressions as operands to `/`\n+ --> $DIR/zero_div_zero.rs:9:19\n+  |\n+9 |     let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+  |                   ^^^^^^^^^^^^\n+  |\n+  = note: #[warn(eq_op)] on by default\n+\n+error: constant division of 0.0 with 0.0 will always result in NaN\n+ --> $DIR/zero_div_zero.rs:9:19\n+  |\n+9 |     let f64_nan = 0.0 / 0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+  |                   ^^^^^^^^^^^^\n+  |\n+  = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+\n+warning: equal expressions as operands to `/`\n+  --> $DIR/zero_div_zero.rs:11:25\n+   |\n+11 |     let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = note: #[warn(eq_op)] on by default\n+\n+error: constant division of 0.0 with 0.0 will always result in NaN\n+  --> $DIR/zero_div_zero.rs:11:25\n+   |\n+11 |     let other_f64_nan = 0.0f64 / 0.0; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+   |                         ^^^^^^^^^^^^\n+   |\n+   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+\n+warning: equal expressions as operands to `/`\n+  --> $DIR/zero_div_zero.rs:13:28\n+   |\n+13 |     let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+   |                            ^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(eq_op)] on by default\n+\n+error: constant division of 0.0 with 0.0 will always result in NaN\n+  --> $DIR/zero_div_zero.rs:13:28\n+   |\n+13 |     let one_more_f64_nan = 0.0f64/0.0f64; //~ERROR constant division of 0.0 with 0.0 will always result in NaN\n+   |                            ^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `std::f64::NAN` if you would like a constant representing NaN\n+\n+error: aborting due to 4 previous errors\n+"}]}