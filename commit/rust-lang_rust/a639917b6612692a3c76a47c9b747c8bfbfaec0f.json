{"sha": "a639917b6612692a3c76a47c9b747c8bfbfaec0f", "node_id": "C_kwDOAAsO6NoAKGE2Mzk5MTdiNjYxMjY5MmEzYzc2YTQ3YzliNzQ3YzhiZmJmYWVjMGY", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-24T20:07:44Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-12-24T20:07:44Z"}, "message": "fix: handle lifetime variables in `CallableSig` query", "tree": {"sha": "f4b8bf1c2334326e3522c27235f0173457f6f9ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4b8bf1c2334326e3522c27235f0173457f6f9ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a639917b6612692a3c76a47c9b747c8bfbfaec0f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmOnXGsACgkQ4laYqTBY\nYXEucRAAsNQ4iWKmGd4ozxMwcLKpgrO9GATAaloJkbCzStyhBlc62Ja4GFEYnsWJ\neuGgI1iBOm8LJBbzzVi/eAtz+ueUVMUbhpqNmMW3772E6I/PN/vXFjS1sUsoDztD\nf8xpjsj4OoGdhPMUUcp+zNLazVP3T9o9JuHsKmW6/DjzQXee0fPu3jay5jTVxmhQ\nOUsUTMGcRjn9aCK04q96/htkjKIpAzhU3fYpbulkSZe20Rj4iPi4/JkZksQY5aKn\ndzhR+bwMUNEwigHT0x1UPcg/H5rCJLjt1AnA7VTCKcFmQtf6iWOyEZVq5t+nm0o9\nhvwcHpPk42pOnuooISwlf3AoxUjUaywvIuRaOekcibQKdSJFn8I7W+2u9CV6AsYU\ntWBehOUZSbkvla900w6R9BjX8d3wrWAro+ZaFT0ybzew8nR+3zGtuF/3/v/Qy6Nx\n9R9wbxDwaWDZkCfK2QyrNJcZX/60JEcTv2PAlBgUWq68dQOSjsDe61Wg8H+uGeNe\nSVjGimYIwbsrsn4r2ljmDBC/xk46Duxs3ef6MIdb0SUURBByd9OEWp7uEa/1peQo\nhJvouk+dRbfJTIgUEITgIe8SyABUpQ93lkQaVuMiWhVPuz8l0+mdITbsClrRYVx9\n1cNx7clFBN4i4ZkSAp9+XLgCqyqPuXjMORQSedKOPmb3CAyWXH4=\n=5iep\n-----END PGP SIGNATURE-----", "payload": "tree f4b8bf1c2334326e3522c27235f0173457f6f9ee\nparent 1927c2e1d8d222656cae7051cdd924aa44428622\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1671912464 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1671912464 +0900\n\nfix: handle lifetime variables in `CallableSig` query\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a639917b6612692a3c76a47c9b747c8bfbfaec0f", "html_url": "https://github.com/rust-lang/rust/commit/a639917b6612692a3c76a47c9b747c8bfbfaec0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a639917b6612692a3c76a47c9b747c8bfbfaec0f/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1927c2e1d8d222656cae7051cdd924aa44428622", "url": "https://api.github.com/repos/rust-lang/rust/commits/1927c2e1d8d222656cae7051cdd924aa44428622", "html_url": "https://github.com/rust-lang/rust/commit/1927c2e1d8d222656cae7051cdd924aa44428622"}], "stats": {"total": 66, "additions": 23, "deletions": 43}, "files": [{"sha": "41151e4a1167bfbf61bc0881167a089fa028bf5c", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 23, "deletions": 43, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/a639917b6612692a3c76a47c9b747c8bfbfaec0f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a639917b6612692a3c76a47c9b747c8bfbfaec0f/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=a639917b6612692a3c76a47c9b747c8bfbfaec0f", "patch": "@@ -40,15 +40,17 @@ use std::sync::Arc;\n use chalk_ir::{\n     fold::{Shift, TypeFoldable},\n     interner::HasInterner,\n-    NoSolution, UniverseIndex,\n+    NoSolution,\n };\n use hir_def::{expr::ExprId, type_ref::Rawness, TypeOrConstParamId};\n use hir_expand::name;\n use itertools::Either;\n use traits::FnTrait;\n use utils::Generics;\n \n-use crate::{consteval::unknown_const, db::HirDatabase, utils::generics};\n+use crate::{\n+    consteval::unknown_const, db::HirDatabase, infer::unify::InferenceTable, utils::generics,\n+};\n \n pub use autoderef::autoderef;\n pub use builder::{ParamKind, TyBuilder};\n@@ -533,53 +535,31 @@ pub fn callable_sig_from_fnonce(\n     let fn_once_trait = FnTrait::FnOnce.get_id(db, krate)?;\n     let output_assoc_type = db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n \n+    let mut table = InferenceTable::new(db, env.clone());\n     let b = TyBuilder::trait_ref(db, fn_once_trait);\n     if b.remaining() != 2 {\n         return None;\n     }\n-    let fn_once = b.push(self_ty.clone()).fill_with_bound_vars(DebruijnIndex::INNERMOST, 0).build();\n-    let kinds = fn_once\n-        .substitution\n-        .iter(Interner)\n-        .skip(1)\n-        .map(|x| {\n-            let vk = match x.data(Interner) {\n-                chalk_ir::GenericArgData::Ty(_) => {\n-                    chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General)\n-                }\n-                chalk_ir::GenericArgData::Lifetime(_) => chalk_ir::VariableKind::Lifetime,\n-                chalk_ir::GenericArgData::Const(c) => {\n-                    chalk_ir::VariableKind::Const(c.data(Interner).ty.clone())\n-                }\n-            };\n-            chalk_ir::WithKind::new(vk, UniverseIndex::ROOT)\n-        })\n-        .collect::<Vec<_>>();\n-\n-    // FIXME: chalk refuses to solve `<Self as FnOnce<^0.0>>::Output == ^0.1`, so we first solve\n-    // `<Self as FnOnce<^0.0>>` and then replace `^0.0` with the concrete argument tuple.\n-    let trait_env = env.env.clone();\n-    let obligation = InEnvironment { goal: fn_once.cast(Interner), environment: trait_env };\n-    let canonical =\n-        Canonical { binders: CanonicalVarKinds::from_iter(Interner, kinds), value: obligation };\n-    let subst = match db.trait_solve(krate, canonical) {\n-        Some(Solution::Unique(vars)) => vars.value.subst,\n-        _ => return None,\n-    };\n-    let args = subst.at(Interner, 0).ty(Interner)?;\n-    let params = match args.kind(Interner) {\n-        chalk_ir::TyKind::Tuple(_, subst) => {\n-            subst.iter(Interner).filter_map(|arg| arg.ty(Interner).cloned()).collect::<Vec<_>>()\n-        }\n-        _ => return None,\n-    };\n \n-    let fn_once =\n-        TyBuilder::trait_ref(db, fn_once_trait).push(self_ty.clone()).push(args.clone()).build();\n-    let projection =\n-        TyBuilder::assoc_type_projection(db, output_assoc_type, Some(fn_once.substitution)).build();\n+    // Register two obligations:\n+    // - Self: FnOnce<?args_ty>\n+    // - <Self as FnOnce<?args_ty>>::Output == ?ret_ty\n+    let args_ty = table.new_type_var();\n+    let trait_ref = b.push(self_ty.clone()).push(args_ty.clone()).build();\n+    let projection = TyBuilder::assoc_type_projection(\n+        db,\n+        output_assoc_type,\n+        Some(trait_ref.substitution.clone()),\n+    )\n+    .build();\n+    table.register_obligation(trait_ref.cast(Interner));\n+    let ret_ty = table.normalize_projection_ty(projection);\n+\n+    let ret_ty = table.resolve_completely(ret_ty);\n+    let args_ty = table.resolve_completely(args_ty);\n \n-    let ret_ty = db.normalize_projection(projection, env);\n+    let params =\n+        args_ty.as_tuple()?.iter(Interner).map(|it| it.assert_ty_ref(Interner)).cloned().collect();\n \n     Some(CallableSig::from_params_and_return(params, ret_ty, false, Safety::Safe))\n }"}]}