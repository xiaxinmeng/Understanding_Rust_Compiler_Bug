{"sha": "f14bdb506a89afaf634b68a4292ad9cf6014f60c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNGJkYjUwNmE4OWFmYWY2MzRiNjhhNDI5MmFkOWNmNjAxNGY2MGM=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-18T21:30:39Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-18T21:39:55Z"}, "message": "rustdoc: Render `<Self as X>::Y` type casts properly across crate bounds", "tree": {"sha": "e079ed6e3c9215ff17d31b6ad3d3e7696e689778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e079ed6e3c9215ff17d31b6ad3d3e7696e689778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f14bdb506a89afaf634b68a4292ad9cf6014f60c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDNEq4ACgkQjGL+mKYv\nxGLC9w//bGGxfTJ5mw3IHawfYuwUzDmImCOshGu8zg+DQQ6JQFT3EU6o8BG/+ElJ\ntwuoudjztNTZARoDRoE11y7MSxFT6ubMdFh7jN5V8I0ElBuMibRFPZeTULlG8iN/\nnMjfdRi5pZZ9msqQS/Gf1Cysyo7WM9pHbaqsFbhA6NOTXyL4hTxRVRyctyWQFJvb\nx2YyBM6p+UuZ6IUJ7dzo9tlDhR/D1lrfOBgBqfYM9ddinqlb1J38L04AuWSpjGU0\nxQ0SmSfGSaJ7HnE7NGGxkSdjQ+kE0wbbcNJ8AQSUh8qYCAlHLsT+Ar1mz6KAZLWQ\n4D5Q5/Rl/ARgaKVAthyiropppjUJVCKY5LT60+qq9OOkz87PCevVHVqLDzO1sRmu\ng4zDi5qtiI2PYlNtwoZA3Ul5RmiWc+sRQgKsLJap3lVNJl0A9IIKteT3CxsVCXbW\nkHxJopEjxRLv69wpdtHcDmsFh4zyx0s2eM2QRNZfH8xd+bDvArEVKt8sGZmosTP9\n2cgBEnPmTjcUBhzO0/ygqWMNoH9i26n3MemujxACeo6/yG3gPiIU8ArGodEMJJpg\nL3SSIvCUoaj8bkPBhVUnmXCQcmGVBbBQfPACz3w+DIhl9HRgBahtlUGEaYstLbgt\n4gsjcbJBBOb6t1k9Mk656XAH9JPkLwRjFcUAO64LlYPKct7mjy4=\n=qowu\n-----END PGP SIGNATURE-----", "payload": "tree e079ed6e3c9215ff17d31b6ad3d3e7696e689778\nparent 88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c\nauthor Justus K <justus.k@protonmail.com> 1624051839 +0200\ncommitter Justus K <justus.k@protonmail.com> 1624052395 +0200\n\nrustdoc: Render `<Self as X>::Y` type casts properly across crate bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f14bdb506a89afaf634b68a4292ad9cf6014f60c", "html_url": "https://github.com/rust-lang/rust/commit/f14bdb506a89afaf634b68a4292ad9cf6014f60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f14bdb506a89afaf634b68a4292ad9cf6014f60c/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c", "html_url": "https://github.com/rust-lang/rust/commit/88ba8ad730a124f7e1d4f1bd17f2b14cb18eed3c"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "e8d66ab056c206d3760c3058d83df748feb305e1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f14bdb506a89afaf634b68a4292ad9cf6014f60c", "patch": "@@ -20,7 +20,7 @@ use rustc_infer::infer::region_constraints::{Constraint, RegionConstraintData};\n use rustc_middle::middle::resolve_lifetime as rl;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n-use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n+use rustc_middle::ty::{self, AdtKind, DefIdTree, Lift, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_mir::const_eval::{is_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::{AstPass, MacroKind};\n@@ -435,8 +435,23 @@ impl Clean<GenericParamDef> for ty::GenericParamDef {\n         let (name, kind) = match self.kind {\n             ty::GenericParamDefKind::Lifetime => (self.name, GenericParamDefKind::Lifetime),\n             ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n-                let default =\n-                    if has_default { Some(cx.tcx.type_of(self.def_id).clean(cx)) } else { None };\n+                let default = if has_default {\n+                    let mut default = cx.tcx.type_of(self.def_id).clean(cx);\n+\n+                    // We need to reassign the `self_def_id`, if there's a parent (which is the\n+                    // `Self` type), so we can properly render `<Self as X>` casts, because the\n+                    // information about which type `Self` is, is only present here, but not in\n+                    // the cleaning process of the type itself. To resolve this and have the\n+                    // `self_def_id` set, we override it here.\n+                    // See https://github.com/rust-lang/rust/issues/85454\n+                    if let QPath { ref mut self_def_id, .. } = default {\n+                        *self_def_id = cx.tcx.parent(self.def_id);\n+                    }\n+\n+                    Some(default)\n+                } else {\n+                    None\n+                };\n                 (\n                     self.name,\n                     GenericParamDefKind::Type {"}, {"sha": "45664dfc3823da490d5625df87efdb3c2594b43e", "filename": "src/test/rustdoc/auxiliary/issue-85454.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-85454.rs?ref=f14bdb506a89afaf634b68a4292ad9cf6014f60c", "patch": "@@ -0,0 +1,17 @@\n+// @has issue_85454/trait.FromResidual.html\n+// @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+pub trait FromResidual<R = <Self as Try>::Residual> {\n+    fn from_residual(residual: R) -> Self;\n+}\n+\n+pub trait Try: FromResidual {\n+    type Output;\n+    type Residual;\n+    fn from_output(output: Self::Output) -> Self;\n+    fn branch(self) -> ControlFlow<Self::Residual, Self::Output>;\n+}\n+\n+pub enum ControlFlow<B, C = ()> {\n+    Continue(C),\n+    Break(B),\n+}"}, {"sha": "3351b5c8350fd7284ac0e7d2598e5c866ee7c9a7", "filename": "src/test/rustdoc/issue-85454.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Ftest%2Frustdoc%2Fissue-85454.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f14bdb506a89afaf634b68a4292ad9cf6014f60c/src%2Ftest%2Frustdoc%2Fissue-85454.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-85454.rs?ref=f14bdb506a89afaf634b68a4292ad9cf6014f60c", "patch": "@@ -1,4 +1,10 @@\n-// @has issue_85454/trait.FromResidual.html\n+// aux-build:issue-85454.rs\n+// build-aux-docs\n+#![crate_name = \"foo\"]\n+\n+extern crate issue_85454;\n+\n+// @has foo/trait.FromResidual.html\n // @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n pub trait FromResidual<R = <Self as Try>::Residual> {\n     fn from_residual(residual: R) -> Self;\n@@ -15,3 +21,9 @@ pub enum ControlFlow<B, C = ()> {\n     Continue(C),\n     Break(B),\n }\n+\n+pub mod reexport {\n+    // @has foo/reexport/trait.FromResidual.html\n+    // @has - '//pre[@class=\"rust trait\"]' 'pub trait FromResidual<R = <Self as Try>::Residual> { fn from_residual(residual: R) -> Self; }'\n+    pub use issue_85454::*;\n+}"}]}