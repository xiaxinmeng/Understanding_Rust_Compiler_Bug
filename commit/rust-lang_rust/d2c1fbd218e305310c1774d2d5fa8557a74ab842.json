{"sha": "d2c1fbd218e305310c1774d2d5fa8557a74ab842", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyYzFmYmQyMThlMzA1MzEwYzE3NzRkMmQ1ZmE4NTU3YTc0YWI4NDI=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-11T02:00:21Z"}, "committer": {"name": "Lindsey Kuper", "email": "lkuper@mozilla.com", "date": "2011-08-11T02:00:59Z"}, "message": "Stub out docs for anon objs; update existing object system docs.", "tree": {"sha": "4dd499b0c8201437c353e5f7988939e8606a2a3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4dd499b0c8201437c353e5f7988939e8606a2a3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2c1fbd218e305310c1774d2d5fa8557a74ab842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2c1fbd218e305310c1774d2d5fa8557a74ab842", "html_url": "https://github.com/rust-lang/rust/commit/d2c1fbd218e305310c1774d2d5fa8557a74ab842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2c1fbd218e305310c1774d2d5fa8557a74ab842/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba7c8f18d4d18e519649386fb558480af7e4f033", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba7c8f18d4d18e519649386fb558480af7e4f033", "html_url": "https://github.com/rust-lang/rust/commit/ba7c8f18d4d18e519649386fb558480af7e4f033"}], "stats": {"total": 58, "additions": 21, "deletions": 37}, "files": [{"sha": "79ade67f57fe6b568d3e971483e0839b0e637152", "filename": "doc/rust.texi", "status": "modified", "additions": 21, "deletions": 37, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d2c1fbd218e305310c1774d2d5fa8557a74ab842/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/d2c1fbd218e305310c1774d2d5fa8557a74ab842/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=d2c1fbd218e305310c1774d2d5fa8557a74ab842", "patch": "@@ -127,9 +127,9 @@ the large'', that is, of creating and maintaining @emph{boundaries} -- both\n abstract and operational -- that preserve large-system @emph{integrity},\n @emph{availability} and @emph{concurrency}.\n \n-It supports a mixture of imperative procedural, concurrent actor, object\n-oriented and pure functional styles. Rust also supports generic programming\n-and metaprogramming, in both static and dynamic styles.\n+It supports a mixture of imperative procedural, concurrent actor,\n+object-oriented and pure functional styles. Rust also supports generic\n+programming and metaprogramming, in both static and dynamic styles.\n \n @menu\n * Goals::                      Intentions, motivations.\n@@ -1894,52 +1894,28 @@ let c: counter = counter(1);\n \n c.incr();\n c.incr();\n-assert (c.get() == 3);\n+assert c.get() == 3;\n @end example\n \n-There is no @emph{this} or @emph{self} available inside an object's\n-methods, either implicitly or explicitly, so you can't directly call\n-other methods.  For example:\n+Inside an object's methods, you can make @emph{self-calls} using the\n+@code{self} keyword.\n @example\n obj my_obj() @{\n   fn get() -> int @{\n     ret 3;\n   @}\n-  fn foo() @{\n-    let c = get();  // Fails\n+  fn foo() -> int @{\n+    let c = self.get();\n+    ret c + 2;\n   @}\n @}\n-@end example\n \n-The current replacement is to write a factory function for your type,\n-which provides any private helper functions:\n-@example\n-type my_obj =\n-  obj @{\n-    fn get() -> int;\n-    fn foo();\n-  @};\n-\n-fn mk_my_obj() -> my_obj @{\n-  fn get_helper() -> int @{\n-    ret 3;\n-  @}\n-\n-  obj impl() @{\n-    fn get() -> int @{\n-      ret get_helper();\n-    @}\n-    fn foo() @{\n-      let c = get_helper();  // Works\n-    @}\n-  @}\n-\n-  ret impl();\n-@}\n+let o = my_obj();\n+assert o.foo() == 5;\n @end example\n \n-This factory function also allows you to bind the object's state\n-variables to initial values.\n+Rust objects are extendable with additional methods and fields using\n+@emph{anonymous object} expressions.  @xref{Ref.Expr.AnonObj}.\n \n @node       Ref.Item.Type\n @subsection Ref.Item.Type\n@@ -2911,6 +2887,7 @@ effects of the expression's evaluation.\n * Ref.Expr.Claim::              Expression for static (unsafe) or dynamic assertion of typestate.\n * Ref.Expr.Assert::             Expression for halting the program if a boolean condition fails to hold.\n * Ref.Expr.IfCheck::            Expression for dynamic testing of typestate.\n+* Ref.Expr.AnonObj::            Expression for extending objects with additional methods.\n @end menu\n \n \n@@ -3632,6 +3609,13 @@ the condition may be any boolean-typed expression, and the compiler makes no\n use of the knowledge that the condition holds if the program continues to\n execute after the @code{assert}.\n \n+@node       Ref.Expr.AnonObj\n+@subsection Ref.Expr.AnonObj\n+@c * Ref.Expr.AnonObj::           Expression that extends an object with additional methods.\n+@cindex Anonymous objects\n+\n+An @emph{anonymous object} expression extends an existing object with methods.\n+\n @page\n @node    Ref.Run\n @section Ref.Run"}]}