{"sha": "1ab22d77f909c5910e29218bddc201d021d8c36a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYjIyZDc3ZjkwOWM1OTEwZTI5MjE4YmRkYzIwMWQwMjFkOGMzNmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T10:23:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-13T10:23:49Z"}, "message": "Auto merge of #31564 - durka:lang-item-icemelt, r=nikomatsakis\n\nThis changes three ICEs to fatal errors.\n\nI've grepped for `lang_item.*expect` and `\\.expect.*lang` and didn't come up with any more. But, there could be more ICEs lurking.\n\nI wasn't sure about a test because there already _is_ a cfail test for missing lang items, but it only checks one.\n\nRelevant to (already closed) #31477 #31480 #31558.\ncc @lilred", "tree": {"sha": "71827c54ad87c64a9258790a3e809544e3150d68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71827c54ad87c64a9258790a3e809544e3150d68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ab22d77f909c5910e29218bddc201d021d8c36a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ab22d77f909c5910e29218bddc201d021d8c36a", "html_url": "https://github.com/rust-lang/rust/commit/1ab22d77f909c5910e29218bddc201d021d8c36a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ab22d77f909c5910e29218bddc201d021d8c36a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5801991b5d54676410b7a65a664e8e83cc89136d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5801991b5d54676410b7a65a664e8e83cc89136d", "html_url": "https://github.com/rust-lang/rust/commit/5801991b5d54676410b7a65a664e8e83cc89136d"}, {"sha": "433f34799c5ccef2a10febb656d7568857bab2b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/433f34799c5ccef2a10febb656d7568857bab2b6", "html_url": "https://github.com/rust-lang/rust/commit/433f34799c5ccef2a10febb656d7568857bab2b6"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "167317f426b7160b853cf955bc41847b16ca9d30", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab22d77f909c5910e29218bddc201d021d8c36a/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab22d77f909c5910e29218bddc201d021d8c36a/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=1ab22d77f909c5910e29218bddc201d021d8c36a", "patch": "@@ -622,8 +622,8 @@ fn build_free<'tcx>(tcx: &ty::ctxt<'tcx>,\n                     unit_temp: Lvalue<'tcx>,\n                     data: &FreeData<'tcx>,\n                     target: BasicBlock) -> Terminator<'tcx> {\n-    let free_func = tcx.lang_items.box_free_fn()\n-                       .expect(\"box_free language item is missing\");\n+    let free_func = tcx.lang_items.require(lang_items::BoxFreeFnLangItem)\n+                       .unwrap_or_else(|e| tcx.sess.fatal(&e));\n     let substs = tcx.mk_substs(Substs::new(\n         VecPerParamSpace::new(vec![], vec![], vec![data.item_ty]),\n         VecPerParamSpace::new(vec![], vec![], vec![])"}, {"sha": "b5b0f0a82d4ec6d0c3d79d7a602d740c1c9b9d33", "filename": "src/librustc_trans/trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1ab22d77f909c5910e29218bddc201d021d8c36a/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ab22d77f909c5910e29218bddc201d021d8c36a/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcollector.rs?ref=1ab22d77f909c5910e29218bddc201d021d8c36a", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                         .tcx()\n                         .lang_items\n                         .require(ExchangeMallocFnLangItem)\n-                        .expect(\"Could not find ExchangeMallocFnLangItem\");\n+                        .unwrap_or_else(|e| self.ccx.sess().fatal(&e));\n \n                 assert!(can_have_local_instance(self.ccx, exchange_malloc_fn_def_id));\n                 let exchange_malloc_fn_trans_item =\n@@ -645,7 +645,7 @@ fn find_drop_glue_neighbors<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         let exchange_free_fn_def_id = ccx.tcx()\n                                          .lang_items\n                                          .require(ExchangeFreeFnLangItem)\n-                                         .expect(\"Could not find ExchangeFreeFnLangItem\");\n+                                         .unwrap_or_else(|e| ccx.sess().fatal(&e));\n \n         assert!(can_have_local_instance(ccx, exchange_free_fn_def_id));\n         let exchange_free_fn_trans_item ="}]}