{"sha": "f193fbcbae0783953cfaa88aaec6a8d4e1255007", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxOTNmYmNiYWUwNzgzOTUzY2ZhYTg4YWFlYzZhOGQ0ZTEyNTUwMDc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T18:02:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-11T18:02:12Z"}, "message": "actually produce missing def kinds", "tree": {"sha": "c57734dc82350c2d853f557a40f7aafdc7470bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c57734dc82350c2d853f557a40f7aafdc7470bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f193fbcbae0783953cfaa88aaec6a8d4e1255007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f193fbcbae0783953cfaa88aaec6a8d4e1255007", "html_url": "https://github.com/rust-lang/rust/commit/f193fbcbae0783953cfaa88aaec6a8d4e1255007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f193fbcbae0783953cfaa88aaec6a8d4e1255007/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19136cde000c2c227e79bf44febde990fe265cb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/19136cde000c2c227e79bf44febde990fe265cb7", "html_url": "https://github.com/rust-lang/rust/commit/19136cde000c2c227e79bf44febde990fe265cb7"}], "stats": {"total": 130, "additions": 122, "deletions": 8}, "files": [{"sha": "d4244f70c53eb6ba4b77af1f3d3a9162e2ec267a", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -41,12 +41,17 @@ impl Crate {\n     }\n }\n \n+#[derive(Debug)]\n pub enum Def {\n     Module(Module),\n     Struct(Struct),\n     Enum(Enum),\n     EnumVariant(EnumVariant),\n     Function(Function),\n+    Const(Const),\n+    Static(Static),\n+    Trait(Trait),\n+    Type(Type),\n     Item,\n }\n \n@@ -317,17 +322,60 @@ pub struct Const {\n     pub(crate) def_id: DefId,\n }\n \n+impl Const {\n+    pub(crate) fn new(def_id: DefId) -> Const {\n+        Const { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::ConstDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Static {\n     pub(crate) def_id: DefId,\n }\n \n+impl Static {\n+    pub(crate) fn new(def_id: DefId) -> Static {\n+        Static { def_id }\n+    }\n+\n+    pub fn source(\n+        &self,\n+        db: &impl HirDatabase,\n+    ) -> Cancelable<(HirFileId, TreeArc<ast::StaticDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Trait {\n     pub(crate) def_id: DefId,\n }\n \n+impl Trait {\n+    pub(crate) fn new(def_id: DefId) -> Trait {\n+        Trait { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::TraitDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Type {\n     pub(crate) def_id: DefId,\n }\n+\n+impl Type {\n+    pub(crate) fn new(def_id: DefId) -> Type {\n+        Type { def_id }\n+    }\n+\n+    pub fn source(&self, db: &impl HirDatabase) -> Cancelable<(HirFileId, TreeArc<ast::TypeDef>)> {\n+        Ok(def_id_to_ast(db, self.def_id))\n+    }\n+}"}, {"sha": "316896dce21131b7bdb3698f7d18e10e14d78722", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -4,11 +4,10 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n     HirDatabase, PerNs, Def, Function, Struct, Enum, EnumVariant, ImplBlock, Crate,\n+    Module, Trait, Type, Static, Const,\n     module_tree::ModuleId,\n };\n \n-use crate::code_model_api::Module;\n-\n /// hir makes heavy use of ids: integer (u32) handlers to various things. You\n /// can think of id as a pointer (but without a lifetime) or a file descriptor\n /// (but for hir objects).\n@@ -146,6 +145,10 @@ pub(crate) enum DefKind {\n     Struct,\n     Enum,\n     EnumVariant,\n+    Const,\n+    Static,\n+    Trait,\n+    Type,\n     Item,\n \n     StructCtor,\n@@ -173,6 +176,23 @@ impl DefId {\n             }\n             DefKind::Enum => Def::Enum(Enum::new(self)),\n             DefKind::EnumVariant => Def::EnumVariant(EnumVariant::new(self)),\n+            DefKind::Const => {\n+                let def = Const::new(self);\n+                Def::Const(def)\n+            }\n+            DefKind::Static => {\n+                let def = Static::new(self);\n+                Def::Static(def)\n+            }\n+            DefKind::Trait => {\n+                let def = Trait::new(self);\n+                Def::Trait(def)\n+            }\n+            DefKind::Type => {\n+                let def = Type::new(self);\n+                Def::Type(def)\n+            }\n+\n             DefKind::StructCtor => Def::Item,\n             DefKind::Item => Def::Item,\n         };\n@@ -218,10 +238,10 @@ impl DefKind {\n             SyntaxKind::STRUCT_DEF => PerNs::both(DefKind::Struct, DefKind::StructCtor),\n             SyntaxKind::ENUM_DEF => PerNs::types(DefKind::Enum),\n             // These define items, but don't have their own DefKinds yet:\n-            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Item),\n-            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Item),\n-            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Item),\n-            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Item),\n+            SyntaxKind::TRAIT_DEF => PerNs::types(DefKind::Trait),\n+            SyntaxKind::TYPE_DEF => PerNs::types(DefKind::Type),\n+            SyntaxKind::CONST_DEF => PerNs::values(DefKind::Const),\n+            SyntaxKind::STATIC_DEF => PerNs::values(DefKind::Static),\n             _ => PerNs::none(),\n         }\n     }"}, {"sha": "45dda4f7fb3870d4c1bf4c28c7f8edb5c1c521bb", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -60,4 +60,6 @@ pub use self::code_model_api::{\n     Module, ModuleSource, Problem,\n     Struct, Enum, EnumVariant,\n     Function, FnSignature, ScopeEntryWithSyntax,\n+    Static, Const,\n+    Trait, Type,\n };"}, {"sha": "0c24a065270f0f58d95a1c970f8625b45c68d8dc", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -470,8 +470,12 @@ pub(super) fn type_for_def(db: &impl HirDatabase, def_id: DefId) -> Cancelable<T\n         Def::Struct(s) => type_for_struct(db, s),\n         Def::Enum(e) => type_for_enum(db, e),\n         Def::EnumVariant(ev) => type_for_enum_variant(db, ev),\n-        Def::Item => {\n-            log::debug!(\"trying to get type for item of unknown type {:?}\", def_id);\n+        _ => {\n+            log::debug!(\n+                \"trying to get type for item of unknown type {:?} {:?}\",\n+                def_id,\n+                def\n+            );\n             Ok(Ty::Unknown)\n         }\n     }"}, {"sha": "e7fa967a03df2688f0ee204910a2c3240328c8a2", "filename": "crates/ra_ide_api/src/completion/completion_item.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -33,6 +33,10 @@ pub enum CompletionItemKind {\n     EnumVariant,\n     Binding,\n     Field,\n+    Static,\n+    Const,\n+    Trait,\n+    TypeAlias,\n }\n \n #[derive(Debug, PartialEq, Eq)]\n@@ -153,6 +157,22 @@ impl Builder {\n                 types: Some(hir::Def::Enum(..)),\n                 ..\n             } => CompletionItemKind::Enum,\n+            PerNs {\n+                types: Some(hir::Def::Trait(..)),\n+                ..\n+            } => CompletionItemKind::Trait,\n+            PerNs {\n+                types: Some(hir::Def::Type(..)),\n+                ..\n+            } => CompletionItemKind::TypeAlias,\n+            PerNs {\n+                values: Some(hir::Def::Const(..)),\n+                ..\n+            } => CompletionItemKind::Const,\n+            PerNs {\n+                values: Some(hir::Def::Static(..)),\n+                ..\n+            } => CompletionItemKind::Static,\n             PerNs {\n                 values: Some(hir::Def::Function(function)),\n                 .."}, {"sha": "b0d0a3e8bb2d49df0982085f81f8edca1e745307", "filename": "crates/ra_ide_api/src/navigation_target.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fnavigation_target.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -108,6 +108,22 @@ impl NavigationTarget {\n                 let (file_id, node) = f.source(db)?;\n                 NavigationTarget::from_named(file_id.original_file(db), &*node)\n             }\n+            Def::Trait(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Type(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Static(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n+            Def::Const(f) => {\n+                let (file_id, node) = f.source(db)?;\n+                NavigationTarget::from_named(file_id.original_file(db), &*node)\n+            }\n             Def::Module(m) => NavigationTarget::from_module(db, m)?,\n             Def::Item => return Ok(None),\n         };"}, {"sha": "7ca2f437dd98ae3619abc5dd89b93bac3d11ce33", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f193fbcbae0783953cfaa88aaec6a8d4e1255007/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=f193fbcbae0783953cfaa88aaec6a8d4e1255007", "patch": "@@ -65,6 +65,10 @@ impl Conv for CompletionItemKind {\n             CompletionItemKind::EnumVariant => EnumMember,\n             CompletionItemKind::Binding => Variable,\n             CompletionItemKind::Field => Field,\n+            CompletionItemKind::Trait => Interface,\n+            CompletionItemKind::TypeAlias => Struct,\n+            CompletionItemKind::Const => Constant,\n+            CompletionItemKind::Static => Value,\n         }\n     }\n }"}]}