{"sha": "916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxNmE3ZDNhMmM1YmZkMDI3OGM3YzcyOWE2MjBkODM5MmE4NTBmYjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-08T23:22:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-08T23:22:14Z"}, "message": "Rollup merge of #67990 - Centril:slice-pats-move-tests-match, r=matthewjasper\n\nslice patterns: harden match-based borrowck tests\n\nThis hardens some move-checking tests wrt. slice patterns and `match` expressions.\n\nr? @matthewjasper\ncc @pnkfelix\ncc https://github.com/rust-lang/rust/pull/67712\ncc https://github.com/rust-lang/rust/issues/53114", "tree": {"sha": "b0d0cc575f3b062f456861b30c796f4716789c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d0cc575f3b062f456861b30c796f4716789c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeFmQmCRBK7hj4Ov3rIwAAdHIIACYvATeFJEDzsIsch6a9+1ss\nQF8X+UWBVsW/ZHuK8aIRxgaQ4y1o/6CMggMmQV2zRawAkNBiQVB7nWGQuaL20q9T\nc/7CnwERBmijm6MxHJrX/5lG6tSiL8T/qhKTA1MGcyzW8eh58GMqKuYLE4Zjow6r\n+Y0kOGb7GepJNN8AWwg34FGsUmnbC5Md0Y98F/H3Jzek/dF6xJDY1Hhyty9o5HrS\n/SpffEDnr3GZlhC8NsaTL37/DFNfYpfJaNR7PvpXQZeyJ2e5JEZNiw5v7tu+bxxv\nZF9keufAG+toS9XvFqF+KmFPKOQ4N0Awv382Ha/VCEULz1yghUfa38Rniuis5wU=\n=EbYh\n-----END PGP SIGNATURE-----\n", "payload": "tree b0d0cc575f3b062f456861b30c796f4716789c12\nparent ea9a03dbb8bed267afb42923eda0a725d4d6107d\nparent 0a6cdc231ec73574cbaf16389f2c19d10650e3df\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578525734 +0100\ncommitter GitHub <noreply@github.com> 1578525734 +0100\n\nRollup merge of #67990 - Centril:slice-pats-move-tests-match, r=matthewjasper\n\nslice patterns: harden match-based borrowck tests\n\nThis hardens some move-checking tests wrt. slice patterns and `match` expressions.\n\nr? @matthewjasper\ncc @pnkfelix\ncc https://github.com/rust-lang/rust/pull/67712\ncc https://github.com/rust-lang/rust/issues/53114\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "html_url": "https://github.com/rust-lang/rust/commit/916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea9a03dbb8bed267afb42923eda0a725d4d6107d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea9a03dbb8bed267afb42923eda0a725d4d6107d", "html_url": "https://github.com/rust-lang/rust/commit/ea9a03dbb8bed267afb42923eda0a725d4d6107d"}, {"sha": "0a6cdc231ec73574cbaf16389f2c19d10650e3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a6cdc231ec73574cbaf16389f2c19d10650e3df", "html_url": "https://github.com/rust-lang/rust/commit/0a6cdc231ec73574cbaf16389f2c19d10650e3df"}], "stats": {"total": 978, "additions": 978, "deletions": 0}, "files": [{"sha": "232d43679b4840c4b616d66b9db780b00e906f01", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.rs", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.rs?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,118 @@\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        [.., _y] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., _y] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., (_y, _)] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _, _] => {}\n+    }\n+    match a {\n+        [(_x, _), _, _] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, _y @ ..] => {}\n+    }\n+    match a {\n+        [.., (_x, _)] => {} //~ ERROR use of moved value\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e46a58a8a35007d358b703cb5b891e481bf105e6", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-match.stderr", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-match.stderr?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,113 @@\n+error[E0382]: use of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:15:14\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+...\n+LL |         [.., _y] => {}\n+   |              ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:25:14\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., _y] => {}\n+   |              ^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:35:15\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., (_y, _)] => {}\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:46:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:57:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:68:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:79:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:91:11\n+   |\n+LL |         [_y @ .., _, _] => {}\n+   |          ------- value moved here\n+...\n+LL |         [(_x, _), _, _] => {}\n+   |           ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:101:15\n+   |\n+LL |         [_, _, _y @ ..] => {}\n+   |                ------- value moved here\n+...\n+LL |         [.., (_x, _)] => {}\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-match.rs:112:11\n+   |\n+LL |         [x @ .., _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "e5e61697c68c6070145b50bc52569444710d4ae7", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.rs?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,117 @@\n+// Due to #53114, which causes a \"read\" of the `_` patterns,\n+// the borrow-checker refuses this code, while it should probably be allowed.\n+// Once the bug is fixed, the test, which is derived from a\n+// passing test for `let` statements, should become check-pass.\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., _y, _] => {}\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_, _y)] => {}\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    match a {\n+        [_, _y @ ..] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [(_x, _), _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_x, _)] => {}\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "72cd4207cce65e6986b171720cb1f9795f9bd4bf", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap-match.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap-match.stderr?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,102 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:19:11\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:30:11\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:43:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:54:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:65:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:76:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:87:11\n+   |\n+LL |         [_, _y @ ..] => {}\n+   |             ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:98:11\n+   |\n+LL |         [_y @ .., _] => {}\n+   |          ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-no-overlap-match.rs:111:11\n+   |\n+LL |         [x @ .., _, _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "1ca3df52ada91c5800a97d071277d84322a62c8e", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.rs", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.rs?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,152 @@\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        [.., ref _y] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., ref _y] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        [.., (ref _y, _)] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [ref _y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, _, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [ref _y @ .., _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, _, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _, _] => {}\n+    }\n+    match a {\n+        [(ref _x, _), _, _] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, _y @ ..] => {}\n+    }\n+    match a {\n+        [.., (ref _x, _)] => {} //~ ERROR [E0382]\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR [E0382]\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+// Move + Assign\n+\n+fn move_out_and_assign_end() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    a[2] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_and_assign_end_field() {\n+    let mut a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    a[2].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x @ ..] => {}\n+    }\n+    a[0] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end_field() {\n+    let mut a = array();\n+    match a {\n+        [_, _, _x @ ..] => {}\n+    }\n+    a[0].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn main() {}"}, {"sha": "028442a4c07ea227ed50a963cd29668b7c4589fa", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-match.stderr", "status": "added", "additions": 157, "deletions": 0, "changes": 157, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-match.stderr?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,157 @@\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:15:14\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+...\n+LL |         [.., ref _y] => {}\n+   |              ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:25:14\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., ref _y] => {}\n+   |              ^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:35:15\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+...\n+LL |         [.., (ref _y, _)] => {}\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:46:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:57:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:68:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:79:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:91:11\n+   |\n+LL |         [_y @ .., _, _] => {}\n+   |          ------- value moved here\n+...\n+LL |         [(ref _x, _), _, _] => {}\n+   |           ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:101:15\n+   |\n+LL |         [_, _, _y @ ..] => {}\n+   |                ------- value moved here\n+...\n+LL |         [.., (ref _x, _)] => {}\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:112:11\n+   |\n+LL |         [x @ .., _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:125:5\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     a[2] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:133:5\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     a[2].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:141:5\n+   |\n+LL |         [_, _, _x @ ..] => {}\n+   |                ------- value moved here\n+LL |     }\n+LL |     a[0] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-match.rs:149:5\n+   |\n+LL |         [_, _, _x @ ..] => {}\n+   |                ------- value moved here\n+LL |     }\n+LL |     a[0].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "79fe593009652e920c5721fd9478c953e897456a", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.rs?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,117 @@\n+// Due to #53114, which causes a \"read\" of the `_` patterns,\n+// the borrow-checker refuses this code, while it should probably be allowed.\n+// Once the bug is fixed, the test, which is derived from a\n+// passing test for `let` statements, should become check-pass.\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    match a {\n+        [_, _, _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., ref _y, _] => {}\n+    }\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    match a {\n+        [_, _, (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (_, ref _y)] => {}\n+    }\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    match a {\n+        [_x, _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., _x] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [ref _y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [(_x, _), _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    match a {\n+        [.., (_x, _)] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [ref _y @ .., _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    match a {\n+        [_, _y @ ..] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [(ref _x, _), _, _] => {}\n+    }\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    match a {\n+        [_y @ .., _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [.., (ref _x, _)] => {}\n+    }\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    match a {\n+        [x @ .., _, _] => {}\n+    }\n+    match a {\n+        //~^ ERROR use of moved value\n+        [_, ref _y @ ..] => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "43ba2b664a1e1c7e82a4090e61cc03ed8806b473", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap-match.stderr", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/916a7d3a2c5bfd0278c7c729a620d8392a850fb8/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap-match.stderr?ref=916a7d3a2c5bfd0278c7c729a620d8392a850fb8", "patch": "@@ -0,0 +1,102 @@\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:19:11\n+   |\n+LL |         [_, _, _x] => {}\n+   |                -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:30:11\n+   |\n+LL |         [_, _, (_x, _)] => {}\n+   |                 -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:43:11\n+   |\n+LL |         [_x, _, _] => {}\n+   |          -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:54:11\n+   |\n+LL |         [.., _x] => {}\n+   |              -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:65:11\n+   |\n+LL |         [(_x, _), _, _] => {}\n+   |           -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:76:11\n+   |\n+LL |         [.., (_x, _)] => {}\n+   |               -- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:87:11\n+   |\n+LL |         [_, _y @ ..] => {}\n+   |             ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:98:11\n+   |\n+LL |         [_y @ .., _] => {}\n+   |          ------- value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use-no-overlap-match.rs:111:11\n+   |\n+LL |         [x @ .., _, _] => {}\n+   |          ------ value moved here\n+LL |     }\n+LL |     match a {\n+   |           ^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}]}