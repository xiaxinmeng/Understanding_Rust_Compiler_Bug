{"sha": "dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "node_id": "C_kwDOAAsO6NoAKGRjMWY4Mjk4ZWYxYWJlOWNiYzY0OGI0ZDdkYjYyMGYyMWYyY2VjMzI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T05:43:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T05:43:25Z"}, "message": "Auto merge of #95440 - jyn514:error-index, r=Mark-Simulacrum\n\nFix `x test src/tools/error_index_generator --stage {0,1}`\n\nThere were two fixes needed:\n1. Use `top_stage` instead of `top_stage - 1`. There was a long and torturous comment about trying to match rustdoc's version, but it works better without the hard-coding than with (before it gave errors that `libtest.so` couldn't be found).\n2. Make sure that `ci-llvm/lib` is added to LD_LIBRARY_PATH. Previously the error index would be unable to load LLVM for stage0 builds.\n\nAt some point we should probably have a discussion about how rustdoc stages should be numbered;\nconfusion between 0/1/2 has come up several times in bootstrap now. cc https://github.com/rust-lang/rust/issues/92538\n\nNote that this is still broken when using `download-rustc = true` and `--stage 1`,\nbut that's *really* a corner case and should affect almost no one. `--stage {0,2}`\nwork fine with download-rustc.\n\nFixes https://github.com/rust-lang/rust/issues/80096.", "tree": {"sha": "feb7b9de21a6440bb59406c2e424ae8e17e3adc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feb7b9de21a6440bb59406c2e424ae8e17e3adc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "html_url": "https://github.com/rust-lang/rust/commit/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e745b4ddbd05026c75aae4506aef39fdfe1603c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e745b4ddbd05026c75aae4506aef39fdfe1603c5", "html_url": "https://github.com/rust-lang/rust/commit/e745b4ddbd05026c75aae4506aef39fdfe1603c5"}, {"sha": "7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "url": "https://api.github.com/repos/rust-lang/rust/commits/7470592d0ba8a7be88d5d897fe4f0796fdbfa318", "html_url": "https://github.com/rust-lang/rust/commit/7470592d0ba8a7be88d5d897fe4f0796fdbfa318"}], "stats": {"total": 102, "additions": 44, "deletions": 58}, "files": [{"sha": "8c06a0070139d65ba3e5343e4778ef0cfefe50d5", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "patch": "@@ -835,6 +835,18 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n+    pub fn rustc_lib_paths(&self, compiler: Compiler) -> Vec<PathBuf> {\n+        let mut dylib_dirs = vec![self.rustc_libdir(compiler)];\n+\n+        // Ensure that the downloaded LLVM libraries can be found.\n+        if self.config.llvm_from_ci {\n+            let ci_llvm_lib = self.out.join(&*compiler.host.triple).join(\"ci-llvm\").join(\"lib\");\n+            dylib_dirs.push(ci_llvm_lib);\n+        }\n+\n+        dylib_dirs\n+    }\n+\n     /// Adds the compiler's directory of dynamic libraries to `cmd`'s dynamic\n     /// library lookup path.\n     pub fn add_rustc_lib_path(&self, compiler: Compiler, cmd: &mut Command) {\n@@ -845,15 +857,7 @@ impl<'a> Builder<'a> {\n             return;\n         }\n \n-        let mut dylib_dirs = vec![self.rustc_libdir(compiler)];\n-\n-        // Ensure that the downloaded LLVM libraries can be found.\n-        if self.config.llvm_from_ci {\n-            let ci_llvm_lib = self.out.join(&*compiler.host.triple).join(\"ci-llvm\").join(\"lib\");\n-            dylib_dirs.push(ci_llvm_lib);\n-        }\n-\n-        add_dylib_path(dylib_dirs, cmd);\n+        add_dylib_path(self.rustc_lib_paths(compiler), cmd);\n     }\n \n     /// Gets a path to the compiler specified."}, {"sha": "fc1c2f04fabff08239adcb8a261a7b2ab4f886f4", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "patch": "@@ -379,22 +379,14 @@ pub struct ErrorIndex {\n \n impl ErrorIndex {\n     pub fn command(builder: &Builder<'_>) -> Command {\n-        // This uses stage-1 to match the behavior of building rustdoc.\n-        // Error-index-generator links with the rustdoc library, so we want to\n-        // use the same librustdoc to avoid building rustdoc twice (and to\n-        // avoid building the compiler an extra time). This uses\n-        // saturating_sub to deal with building with stage 0. (Using stage 0\n-        // isn't recommended, since it will fail if any new error index tests\n-        // use new syntax, but it should work otherwise.)\n-        let compiler = builder.compiler(builder.top_stage.saturating_sub(1), builder.config.build);\n+        // Error-index-generator links with the rustdoc library, so we need to add `rustc_lib_paths`\n+        // for rustc_private and libLLVM.so, and `sysroot_lib` for libstd, etc.\n+        let host = builder.config.build;\n+        let compiler = builder.compiler_for(builder.top_stage, host, host);\n         let mut cmd = Command::new(builder.ensure(ErrorIndex { compiler }));\n-        add_dylib_path(\n-            vec![\n-                PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host)),\n-                builder.rustc_libdir(compiler),\n-            ],\n-            &mut cmd,\n-        );\n+        let mut dylib_paths = builder.rustc_lib_paths(compiler);\n+        dylib_paths.push(PathBuf::from(&builder.sysroot_libdir(compiler, compiler.host)));\n+        add_dylib_path(dylib_paths, &mut cmd);\n         cmd\n     }\n }"}, {"sha": "b78ca3712bd452116fefe36eedc2bbcf608c4ec5", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "patch": "@@ -63,7 +63,7 @@ pub fn libdir(target: TargetSelection) -> &'static str {\n }\n \n /// Adds a list of lookup paths to `cmd`'s dynamic library lookup path.\n-/// If The dylib_path_par is already set for this cmd, the old value will be overwritten!\n+/// If the dylib_path_var is already set for this cmd, the old value will be overwritten!\n pub fn add_dylib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     let mut list = dylib_path();\n     for path in path {"}, {"sha": "70b00b36cf1757ec55fd048a6498b6781548fdcd", "filename": "src/tools/error_index_generator/build.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Ftools%2Ferror_index_generator%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fbuild.rs?ref=dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "patch": "@@ -7,7 +7,6 @@ fn main() {\n     // Note that we could skip one of the .. but this ensures we at least loosely find the right\n     // directory.\n     let out_dir = PathBuf::from(env::var(\"OUT_DIR\").unwrap());\n-    let dest = out_dir.join(\"error_codes.rs\");\n \n     let error_codes_path = \"../../../compiler/rustc_error_codes/src/error_codes.rs\";\n \n@@ -29,35 +28,4 @@ fn main() {\n         let md_content = fs::read_to_string(entry.path()).unwrap();\n         fs::write(&out_dir.join(entry.file_name()), &md_content).unwrap();\n     }\n-\n-    let mut all = String::new();\n-    all.push_str(\n-        r###\"\n-fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n-    let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n-    macro_rules! register_diagnostics {\n-        ($($ecode:ident: $message:expr,)*) => (\n-            register_diagnostics!{$($ecode:$message,)* ;}\n-        );\n-\n-        ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n-            $(\n-                {long_codes.extend([\n-                    (stringify!($ecode), Some($message)),\n-                ].iter());}\n-            )*\n-            $(\n-                {long_codes.extend([\n-                    stringify!($code),\n-                ].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());}\n-            )*\n-        )\n-    }\n-\"###,\n-    );\n-    all.push_str(r#\"include!(concat!(env!(\"OUT_DIR\"), \"/all_error_codes.rs\"));\"#);\n-    all.push_str(\"\\nlong_codes\\n\");\n-    all.push_str(\"}\\n\");\n-\n-    fs::write(&dest, all).unwrap();\n }"}, {"sha": "51ed1b5a61cbebd1d72f661e9d5c27d08fa6e26b", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc1f8298ef1abe9cbc648b4d7db620f21f2cec32/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=dc1f8298ef1abe9cbc648b4d7db620f21f2cec32", "patch": "@@ -277,4 +277,26 @@ fn main() {\n     }\n }\n \n-include!(concat!(env!(\"OUT_DIR\"), \"/error_codes.rs\"));\n+fn register_all() -> Vec<(&'static str, Option<&'static str>)> {\n+    let mut long_codes: Vec<(&'static str, Option<&'static str>)> = Vec::new();\n+    macro_rules! register_diagnostics {\n+        ($($ecode:ident: $message:expr,)*) => (\n+            register_diagnostics!{$($ecode:$message,)* ;}\n+        );\n+\n+        ($($ecode:ident: $message:expr,)* ; $($code:ident,)*) => (\n+            $(\n+                {long_codes.extend([\n+                    (stringify!($ecode), Some($message)),\n+                ].iter());}\n+            )*\n+            $(\n+                {long_codes.extend([\n+                    stringify!($code),\n+                ].iter().cloned().map(|s| (s, None)).collect::<Vec<_>>());}\n+            )*\n+        )\n+    }\n+    include!(concat!(env!(\"OUT_DIR\"), \"/all_error_codes.rs\"));\n+    long_codes\n+}"}]}