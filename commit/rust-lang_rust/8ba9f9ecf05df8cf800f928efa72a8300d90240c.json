{"sha": "8ba9f9ecf05df8cf800f928efa72a8300d90240c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYTlmOWVjZjA1ZGY4Y2Y4MDBmOTI4ZWZhNzJhODMwMGQ5MDI0MGM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-12-06T08:03:07Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2017-12-07T09:11:21Z"}, "message": "Tidy: allow feature-gate tests to be ui tests\n\nui tests are the future, especially since the\nrecent improvement where we have gained\nchecking and requiring of //~ERROR comments.\n\nThe tidy feature-gate test check is intended\nto be 50% an actual insurance that there is\na check, and 50% to be a teacher that such\nchecks are required.\n\nWith this commit applied, newbies might\ninterpret stuff wrongly and create tests\nthat don't fail but succeed instead.\n\nThis is not what feature gate tests are\nfor though. Therefore, in a later step,\nwhen only ui tests are allowed to be feature\ngate tests, we will add checking to ensure\nthat a file marked as gate test is actually\nrequired to be a compilation failure.\n\nRight now implementing such a check is a\nbit annoying as one needs to only do it\nwhen the compile-fail test is in the\nui test suite :/.", "tree": {"sha": "0350980033332e0a85ee84bb3825902431432b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0350980033332e0a85ee84bb3825902431432b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ba9f9ecf05df8cf800f928efa72a8300d90240c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ba9f9ecf05df8cf800f928efa72a8300d90240c", "html_url": "https://github.com/rust-lang/rust/commit/8ba9f9ecf05df8cf800f928efa72a8300d90240c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ba9f9ecf05df8cf800f928efa72a8300d90240c/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd7021fd57ad595711aaaaba03e0a058cf931056", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd7021fd57ad595711aaaaba03e0a058cf931056", "html_url": "https://github.com/rust-lang/rust/commit/bd7021fd57ad595711aaaaba03e0a058cf931056"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "eca225ee8a8c077ad25c72ba49fc951b224a1900", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8ba9f9ecf05df8cf800f928efa72a8300d90240c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ba9f9ecf05df8cf800f928efa72a8300d90240c/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=8ba9f9ecf05df8cf800f928efa72a8300d90240c", "patch": "@@ -89,7 +89,9 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n \n     let mut contents = String::new();\n \n-    super::walk_many(&[&path.join(\"test/compile-fail\"),\n+    super::walk_many(&[&path.join(\"test/ui-fulldeps\"),\n+                       &path.join(\"test/ui\"),\n+                       &path.join(\"test/compile-fail\"),\n                        &path.join(\"test/compile-fail-fulldeps\"),\n                        &path.join(\"test/parse-fail\"),],\n                      &mut |path| super::filter_dirs(path),\n@@ -150,9 +152,9 @@ pub fn check(path: &Path, bad: &mut bool, quiet: bool) {\n \n     for &(name, _) in gate_untested.iter() {\n         println!(\"Expected a gate test for the feature '{}'.\", name);\n-        println!(\"Hint: create a file named 'feature-gate-{}.rs' in the compile-fail\\\n-                \\n      test suite, with its failures due to missing usage of\\\n-                \\n      #![feature({})].\", name, name);\n+        println!(\"Hint: create a failing test file named 'feature-gate-{}.rs'\\\n+                \\n      in the 'ui' test suite, with its failures due to\\\n+                \\n      missing usage of #![feature({})].\", name, name);\n         println!(\"Hint: If you already have such a test and don't want to rename it,\\\n                 \\n      you can also add a // gate-test-{} line to the test file.\",\n                  name);"}]}