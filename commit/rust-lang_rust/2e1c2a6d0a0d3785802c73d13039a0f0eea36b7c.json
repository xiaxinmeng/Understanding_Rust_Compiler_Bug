{"sha": "2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlMWMyYTZkMGEwZDM3ODU4MDJjNzNkMTMwMzlhMGYwZWVhMzZiN2M=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-16T10:29:46Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-05-16T10:29:46Z"}, "message": "break out earlier on empty snippet", "tree": {"sha": "712d90e1a4a17b254de7b1fb4e88e23bc568ff12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712d90e1a4a17b254de7b1fb4e88e23bc568ff12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "html_url": "https://github.com/rust-lang/rust/commit/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84539360498cab3c70a7c9114c0b8106c8e1b06b", "url": "https://api.github.com/repos/rust-lang/rust/commits/84539360498cab3c70a7c9114c0b8106c8e1b06b", "html_url": "https://github.com/rust-lang/rust/commit/84539360498cab3c70a7c9114c0b8106c8e1b06b"}], "stats": {"total": 25, "additions": 17, "deletions": 8}, "files": [{"sha": "51f5541766305d470856f4e2c7f1ae1aa5076736", "filename": "src/librustc_span/source_map.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c/src%2Flibrustc_span%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c/src%2Flibrustc_span%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsource_map.rs?ref=2e1c2a6d0a0d3785802c73d13039a0f0eea36b7c", "patch": "@@ -910,14 +910,23 @@ impl SourceMap {\n \n     pub fn generate_fn_name_span(&self, span: Span) -> Option<Span> {\n         let prev_span = self.span_extend_to_prev_str(span, \"fn\", true);\n-        self.span_to_snippet(prev_span)\n-            .map(|snippet| {\n-                let len = snippet\n-                    .find(|c: char| !c.is_alphanumeric() && c != '_')\n-                    .expect(\"no label after fn\");\n-                prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32))\n-            })\n-            .ok()\n+        if let Ok(snippet) = self.span_to_snippet(prev_span) {\n+            debug!(\n+                \"generate_fn_name_span: span={:?}, prev_span={:?}, snippet={:?}\",\n+                span, prev_span, snippet\n+            );\n+\n+            if snippet.is_empty() {\n+                return None;\n+            };\n+\n+            let len = snippet\n+                .find(|c: char| !c.is_alphanumeric() && c != '_')\n+                .expect(\"no label after fn\");\n+            Some(prev_span.with_hi(BytePos(prev_span.lo().0 + len as u32)))\n+        } else {\n+            None\n+        }\n     }\n \n     /// Takes the span of a type parameter in a function signature and try to generate a span for"}]}