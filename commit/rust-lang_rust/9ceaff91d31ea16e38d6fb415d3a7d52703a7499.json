{"sha": "9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "node_id": "C_kwDOAAsO6NoAKDljZWFmZjkxZDMxZWExNmUzOGQ2ZmI0MTVkM2E3ZDUyNzAzYTc0OTk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T11:36:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T11:36:55Z"}, "message": "Auto merge of #12406 - harpsword:fix-add-inlayHints-closures-without-block, r=Veykril\n\nfix: add an option to show inlay hint for return type of closures wit\u2026\n\nfix #12321", "tree": {"sha": "0a4072f3269d26503e6e8831336e7b22c545cef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a4072f3269d26503e6e8831336e7b22c545cef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "html_url": "https://github.com/rust-lang/rust/commit/9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd0c2344f24b96326c304edb0de68457bf28841f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd0c2344f24b96326c304edb0de68457bf28841f", "html_url": "https://github.com/rust-lang/rust/commit/bd0c2344f24b96326c304edb0de68457bf28841f"}, {"sha": "55509548e8e1679fca623f14802289ae365075f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/55509548e8e1679fca623f14802289ae365075f4", "html_url": "https://github.com/rust-lang/rust/commit/55509548e8e1679fca623f14802289ae365075f4"}], "stats": {"total": 100, "additions": 84, "deletions": 16}, "files": [{"sha": "910aee7b05cd9dd285865c32b1fe68ab1867bec9", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -21,7 +21,7 @@ pub struct InlayHintsConfig {\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n     pub reborrow_hints: ReborrowHints,\n-    pub closure_return_type_hints: bool,\n+    pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n     pub param_names_for_lifetime_elision_hints: bool,\n@@ -31,6 +31,13 @@ pub struct InlayHintsConfig {\n     pub closing_brace_hints_min_lines: Option<usize>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq)]\n+pub enum ClosureReturnTypeHints {\n+    Always,\n+    WithBlock,\n+    Never,\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum LifetimeElisionHints {\n     Always,\n@@ -86,7 +93,7 @@ pub enum InlayTooltip {\n //\n // Optionally, one can enable additional hints for\n //\n-// * return types of closure expressions with blocks\n+// * return types of closure expressions\n // * elided lifetimes\n // * compiler inserted reborrows\n //\n@@ -460,15 +467,17 @@ fn closure_ret_hints(\n     file_id: FileId,\n     closure: ast::ClosureExpr,\n ) -> Option<()> {\n-    if !config.closure_return_type_hints {\n+    if config.closure_return_type_hints == ClosureReturnTypeHints::Never {\n         return None;\n     }\n \n     if closure.ret_type().is_some() {\n         return None;\n     }\n \n-    if !closure_has_block_body(&closure) {\n+    if !closure_has_block_body(&closure)\n+        && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock\n+    {\n         return None;\n     }\n \n@@ -1092,13 +1101,15 @@ mod tests {\n     use crate::inlay_hints::ReborrowHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n+    use super::ClosureReturnTypeHints;\n+\n     const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n         render_colons: false,\n         type_hints: false,\n         parameter_hints: false,\n         chaining_hints: false,\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n-        closure_return_type_hints: false,\n+        closure_return_type_hints: ClosureReturnTypeHints::Never,\n         reborrow_hints: ReborrowHints::Always,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n@@ -1112,7 +1123,7 @@ mod tests {\n         parameter_hints: true,\n         chaining_hints: true,\n         reborrow_hints: ReborrowHints::Always,\n-        closure_return_type_hints: true,\n+        closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n         ..DISABLED_CONFIG\n@@ -2054,6 +2065,23 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn return_type_hints_for_closure_without_block() {\n+        check_with_config(\n+            InlayHintsConfig {\n+                closure_return_type_hints: ClosureReturnTypeHints::Always,\n+                ..DISABLED_CONFIG\n+            },\n+            r#\"\n+fn main() {\n+    let a = || { 0 };\n+          //^^ i32\n+    let b = || 0;\n+          //^^ i32\n+}\"#,\n+        );\n+    }\n+\n     #[test]\n     fn skip_closure_type_hints() {\n         check_with_config("}, {"sha": "29bd86430dd3fdb811560ab183f3a91272e9c420", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -81,7 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        InlayHint, InlayHintsConfig, InlayKind, InlayTooltip, LifetimeElisionHints, ReborrowHints,\n+        ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n+        LifetimeElisionHints, ReborrowHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "95a9635a065b98283faeaa51f3c0d9c7b4b75280", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -109,7 +109,7 @@ impl StaticIndex<'_> {\n                     type_hints: true,\n                     parameter_hints: true,\n                     chaining_hints: true,\n-                    closure_return_type_hints: true,\n+                    closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n                     reborrow_hints: crate::ReborrowHints::Never,\n                     hide_named_constructor_hints: false,"}, {"sha": "9fd19589999e60a5fb15b972e1cfb06274b2d678", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -264,8 +264,8 @@ config_data! {\n         /// Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n         /// to always show them).\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n-        /// Whether to show inlay type hints for return types of closures with blocks.\n-        inlayHints_closureReturnTypeHints_enable: bool             = \"false\",\n+        /// Whether to show inlay type hints for return types of closures.\n+        inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -1014,7 +1014,11 @@ impl Config {\n             type_hints: self.data.inlayHints_typeHints_enable,\n             parameter_hints: self.data.inlayHints_parameterHints_enable,\n             chaining_hints: self.data.inlayHints_chainingHints_enable,\n-            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints_enable,\n+            closure_return_type_hints: match self.data.inlayHints_closureReturnTypeHints_enable {\n+                ClosureReturnTypeHintsDef::Always => ide::ClosureReturnTypeHints::Always,\n+                ClosureReturnTypeHintsDef::Never => ide::ClosureReturnTypeHints::Never,\n+                ClosureReturnTypeHintsDef::WithBlock => ide::ClosureReturnTypeHints::WithBlock,\n+            },\n             lifetime_elision_hints: match self.data.inlayHints_lifetimeElisionHints_enable {\n                 LifetimeElisionDef::Always => ide::LifetimeElisionHints::Always,\n                 LifetimeElisionDef::Never => ide::LifetimeElisionHints::Never,\n@@ -1342,6 +1346,7 @@ mod de_unit_v {\n     named_unit_variant!(all);\n     named_unit_variant!(skip_trivial);\n     named_unit_variant!(mutable);\n+    named_unit_variant!(with_block);\n }\n \n #[derive(Deserialize, Debug, Clone, Copy)]\n@@ -1454,6 +1459,17 @@ enum LifetimeElisionDef {\n     SkipTrivial,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n+enum ClosureReturnTypeHintsDef {\n+    #[serde(deserialize_with = \"true_or_always\")]\n+    Always,\n+    #[serde(deserialize_with = \"false_or_never\")]\n+    Never,\n+    #[serde(deserialize_with = \"de_unit_v::with_block\")]\n+    WithBlock,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(untagged)]\n enum ReborrowHintsDef {\n@@ -1740,6 +1756,19 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show lifetime elision hints if a return type is involved.\"\n             ]\n         },\n+        \"ClosureReturnTypeHintsDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"with_block\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show type hints for return types of closures.\",\n+                \"Never show type hints for return types of closures.\",\n+                \"Only show type hints for return types of closures with blocks.\"\n+            ]\n+        },\n         \"ReborrowHintsDef\" => set! {\n             \"type\": \"string\",\n             \"enum\": ["}, {"sha": "981132f9c4dea3ad93a2da65f5796810a3f57ad4", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -366,10 +366,10 @@ Whether to show inlay hints after a closing `}` to indicate what item it belongs\n Minimum number of lines required before the `}` until the hint is shown (set to 0 or 1\n to always show them).\n --\n-[[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `false`)::\n+[[rust-analyzer.inlayHints.closureReturnTypeHints.enable]]rust-analyzer.inlayHints.closureReturnTypeHints.enable (default: `\"never\"`)::\n +\n --\n-Whether to show inlay type hints for return types of closures with blocks.\n+Whether to show inlay type hints for return types of closures.\n --\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +"}, {"sha": "03ec18a5689e5fc44c8fb8717b9dd9d0b1ac9f9b", "filename": "editors/code/package.json", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9ceaff91d31ea16e38d6fb415d3a7d52703a7499/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9ceaff91d31ea16e38d6fb415d3a7d52703a7499", "patch": "@@ -811,9 +811,19 @@\n                     \"minimum\": 0\n                 },\n                 \"rust-analyzer.inlayHints.closureReturnTypeHints.enable\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for return types of closures with blocks.\",\n-                    \"default\": false,\n-                    \"type\": \"boolean\"\n+                    \"markdownDescription\": \"Whether to show inlay type hints for return types of closures.\",\n+                    \"default\": \"never\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"with_block\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show type hints for return types of closures.\",\n+                        \"Never show type hints for return types of closures.\",\n+                        \"Only show type hints for return types of closures with blocks.\"\n+                    ]\n                 },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\","}]}