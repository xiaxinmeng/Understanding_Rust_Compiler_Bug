{"sha": "4bee452221f53d618086f2340b5fe56cbf2b7421", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZWU0NTIyMjFmNTNkNjE4MDg2ZjIzNDBiNWZlNTZjYmYyYjc0MjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T01:43:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-27T01:43:49Z"}, "message": "Don't allow copying of unique boxes of pinned kinds\n\nIssue #409", "tree": {"sha": "9b60df421b7f0b088fdf1de9741089a4b76d895f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b60df421b7f0b088fdf1de9741089a4b76d895f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bee452221f53d618086f2340b5fe56cbf2b7421", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bee452221f53d618086f2340b5fe56cbf2b7421", "html_url": "https://github.com/rust-lang/rust/commit/4bee452221f53d618086f2340b5fe56cbf2b7421", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bee452221f53d618086f2340b5fe56cbf2b7421/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d5e085eb9fb22f8aa22bb7a19313e97be87a286", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5e085eb9fb22f8aa22bb7a19313e97be87a286", "html_url": "https://github.com/rust-lang/rust/commit/2d5e085eb9fb22f8aa22bb7a19313e97be87a286"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "d6629f11708306a1fdaab5df00b62519a80c0d0e", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4bee452221f53d618086f2340b5fe56cbf2b7421/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bee452221f53d618086f2340b5fe56cbf2b7421/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=4bee452221f53d618086f2340b5fe56cbf2b7421", "patch": "@@ -84,7 +84,7 @@\n *\n */\n \n-import syntax::{ast, ast_util, visit};\n+import syntax::{ast, ast_util, visit, codemap};\n import std::{vec, option, str};\n import ast::{kind, kind_unique, kind_shared, kind_pinned};\n \n@@ -122,12 +122,18 @@ fn need_expr_kind(tcx: ty::ctxt, e: @ast::expr, k_need: ast::kind,\n              kind_to_str(k_need), kind_to_str(tk.kind),\n              util::ppaux::ty_to_str(tcx, tk.ty)];\n \n-    if !kind_lteq(k_need, tk.kind) {\n+    demand_kind(tcx, e.span, tk.ty, k_need, descr);\n+}\n+\n+fn demand_kind(tcx: ty::ctxt, sp: codemap::span, t: ty::t,\n+               k_need: ast::kind, descr: str) {\n+    let k = ty::type_kind(tcx, t);\n+    if !kind_lteq(k_need, k) {\n         let s =\n             #fmt[\"mismatched kinds for %s: needed %s type, got %s type %s\",\n-                 descr, kind_to_str(k_need), kind_to_str(tk.kind),\n-                 util::ppaux::ty_to_str(tcx, tk.ty)];\n-        tcx.sess.span_err(e.span, s);\n+                 descr, kind_to_str(k_need), kind_to_str(k),\n+                 util::ppaux::ty_to_str(tcx, t)];\n+        tcx.sess.span_err(sp, s);\n     }\n }\n \n@@ -136,16 +142,30 @@ fn need_shared_lhs_rhs(tcx: ty::ctxt, a: @ast::expr, b: @ast::expr, op: str) {\n     need_expr_kind(tcx, b, ast::kind_shared, op + \" rhs\");\n }\n \n+// Additional checks for copyability that require a little more nuance\n+fn check_copy(tcx: ty::ctxt, e: @ast::expr) {\n+    alt ty::struct(tcx, ty::expr_ty(tcx, e)) {\n+      // Unique boxes most not contain pinned kinds\n+      ty::ty_uniq(mt) {\n+        demand_kind(tcx, e.span, mt.ty, ast::kind_shared,\n+                    \"unique box interior\");\n+      }\n+      _ { }\n+    }\n+}\n+\n fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n     alt e.node {\n \n-      // FIXME: These rules do not implement the copy type-constructor\n-      // discrimination described by the block comment at the top of\n-      // this file. This code is wrong; it lets you copy anything\n-      // shared-kind.\n+      // FIXME: These rules do not fully implement the copy type-constructor\n+      // discrimination described by the block comment at the top of this\n+      // file. This code is wrong; it lets you copy anything shared-kind.\n \n       ast::expr_move(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<-\"); }\n-      ast::expr_assign(a, b) { need_shared_lhs_rhs(tcx, a, b, \"=\"); }\n+      ast::expr_assign(a, b) {\n+        need_shared_lhs_rhs(tcx, a, b, \"=\");\n+        check_copy(tcx, b);\n+      }\n       ast::expr_assign_op(_, a, b) { need_shared_lhs_rhs(tcx, a, b, \"op=\"); }\n       ast::expr_swap(a, b) { need_shared_lhs_rhs(tcx, a, b, \"<->\"); }\n       ast::expr_copy(a) {\n@@ -174,15 +194,8 @@ fn check_expr(tcx: ty::ctxt, e: @ast::expr) {\n             assert (vec::len(item_tk.kinds) == vec::len(tpt.params));\n             for k_need: ast::kind in item_tk.kinds {\n                 let t = tpt.params[i];\n-                let k = ty::type_kind(tcx, t);\n-                if !kind_lteq(k_need, k) {\n-                    let s =\n-                        #fmt[\"mismatched kinds for typaram %d: \\\n-                                  needed %s type, got %s type %s\",\n-                             i, kind_to_str(k_need), kind_to_str(k),\n-                             util::ppaux::ty_to_str(tcx, t)];\n-                    tcx.sess.span_err(e.span, s);\n-                }\n+                demand_kind(tcx, e.span, t, k_need,\n+                            #fmt(\"typaram %d\", i));\n                 i += 1;\n             }\n         }"}, {"sha": "9c1cad78b0327bb4fd8c5042185339da78445f10", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bee452221f53d618086f2340b5fe56cbf2b7421/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bee452221f53d618086f2340b5fe56cbf2b7421/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=4bee452221f53d618086f2340b5fe56cbf2b7421", "patch": "@@ -1,4 +1,3 @@\n-// xfail-test\n // error-pattern: mismatched kind\n \n resource r(b: bool) {"}]}