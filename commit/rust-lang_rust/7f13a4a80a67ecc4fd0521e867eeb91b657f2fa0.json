{"sha": "7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMTNhNGE4MGE2N2VjYzRmZDA1MjFlODY3ZWViOTFiNjU3ZjJmYTA=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T11:00:54Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-10-22T11:26:32Z"}, "message": "Remove FIXME", "tree": {"sha": "d6ea699affbe1b4f0484aac07ab1cc9336a9613a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6ea699affbe1b4f0484aac07ab1cc9336a9613a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0", "html_url": "https://github.com/rust-lang/rust/commit/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f788f3a2b7626318d0bdedca38986fc283f481f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f788f3a2b7626318d0bdedca38986fc283f481f", "html_url": "https://github.com/rust-lang/rust/commit/9f788f3a2b7626318d0bdedca38986fc283f481f"}], "stats": {"total": 7, "additions": 3, "deletions": 4}, "files": [{"sha": "1da65f4b51d36d083e7697d5cc6c135c61e3ba7c", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=7f13a4a80a67ecc4fd0521e867eeb91b657f2fa0", "patch": "@@ -557,10 +557,9 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         x.val\n     };\n \n-    // Currently, the values that can be unified are those that\n-    // implement both `PartialEq` and `Eq`, corresponding to\n-    // `structural_match` types.\n-    // FIXME(const_generics): check for `structural_match` synthetic attribute.\n+    // Currently, the values that can be unified are primitive types,\n+    // and those that derive both `PartialEq` and `Eq`, corresponding\n+    // to `structural_match` types.\n     let new_const_val = match (eagerly_eval(a), eagerly_eval(b)) {\n         (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n             // The caller should handle these cases!"}]}