{"sha": "6c21d04307edf130851aefad406bacce9edbde23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjFkMDQzMDdlZGYxMzA4NTFhZWZhZDQwNmJhY2NlOWVkYmRlMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T15:53:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T15:53:53Z"}, "message": "internal: use standard style for tests", "tree": {"sha": "3a6f291d7396ef77dfe8114a21a749f7dfa96b03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a6f291d7396ef77dfe8114a21a749f7dfa96b03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c21d04307edf130851aefad406bacce9edbde23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c21d04307edf130851aefad406bacce9edbde23", "html_url": "https://github.com/rust-lang/rust/commit/6c21d04307edf130851aefad406bacce9edbde23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c21d04307edf130851aefad406bacce9edbde23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cea589b3b52ff5c4e358db52dc6de150eb48a9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cea589b3b52ff5c4e358db52dc6de150eb48a9a0", "html_url": "https://github.com/rust-lang/rust/commit/cea589b3b52ff5c4e358db52dc6de150eb48a9a0"}], "stats": {"total": 155, "additions": 100, "deletions": 55}, "files": [{"sha": "498cf7d626d6dfe7674cd1ed38df8accf0f1ea8c", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c21d04307edf130851aefad406bacce9edbde23/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6c21d04307edf130851aefad406bacce9edbde23/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=6c21d04307edf130851aefad406bacce9edbde23", "patch": "@@ -9,7 +9,7 @@ incremental = false\n \n # Disabling debug info speeds up builds a bunch,\n # and we don't rely on it for debugging that much.\n-debug = 1\n+debug = 0\n \n [profile.dev.package]\n # These speed up local tests."}, {"sha": "959a1f86cb576812ed5d9bb1bd8b2ef5f3f1eee9", "filename": "crates/ide_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 99, "deletions": 54, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/6c21d04307edf130851aefad406bacce9edbde23/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c21d04307edf130851aefad406bacce9edbde23/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=6c21d04307edf130851aefad406bacce9edbde23", "patch": "@@ -1,4 +1,3 @@\n-use ast::Adt;\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::ast::{self, AstNode, NameOwner, StructKind, VisibilityOwner};\n@@ -37,7 +36,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n     };\n \n     // Return early if we've found an existing new fn\n-    let impl_def = find_struct_impl(&ctx, &Adt::Struct(strukt.clone()), \"new\")?;\n+    let impl_def = find_struct_impl(&ctx, &ast::Adt::Struct(strukt.clone()), \"new\")?;\n \n     let target = strukt.syntax().text_range();\n     acc.add(AssistId(\"generate_new\", AssistKind::Generate), \"Generate `new`\", target, |builder| {\n@@ -60,7 +59,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         let start_offset = impl_def\n             .and_then(|impl_def| find_impl_block_start(impl_def, &mut buf))\n             .unwrap_or_else(|| {\n-                buf = generate_impl_text(&Adt::Struct(strukt.clone()), &buf);\n+                buf = generate_impl_text(&ast::Adt::Struct(strukt.clone()), &buf);\n                 strukt.syntax().text_range().end()\n             });\n \n@@ -81,110 +80,142 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    #[rustfmt::skip]\n     fn test_generate_new() {\n-        // Check output of generation\n         check_assist(\n             generate_new,\n-\"struct Foo {$0}\",\n-\"struct Foo {}\n+            r#\"\n+struct Foo {$0}\n+\"#,\n+            r#\"\n+struct Foo {}\n \n impl Foo {\n     fn $0new() -> Self { Self {  } }\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo<T: Clone> {$0}\",\n-\"struct Foo<T: Clone> {}\n+            r#\"\n+struct Foo<T: Clone> {$0}\n+\"#,\n+            r#\"\n+struct Foo<T: Clone> {}\n \n impl<T: Clone> Foo<T> {\n     fn $0new() -> Self { Self {  } }\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo<'a, T: Foo<'a>> {$0}\",\n-\"struct Foo<'a, T: Foo<'a>> {}\n+            r#\"\n+struct Foo<'a, T: Foo<'a>> {$0}\n+\"#,\n+            r#\"\n+struct Foo<'a, T: Foo<'a>> {}\n \n impl<'a, T: Foo<'a>> Foo<'a, T> {\n     fn $0new() -> Self { Self {  } }\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo { baz: String $0}\",\n-\"struct Foo { baz: String }\n+            r#\"\n+struct Foo { baz: String $0}\n+\"#,\n+            r#\"\n+struct Foo { baz: String }\n \n impl Foo {\n     fn $0new(baz: String) -> Self { Self { baz } }\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo { baz: String, qux: Vec<i32> $0}\",\n-\"struct Foo { baz: String, qux: Vec<i32> }\n+            r#\"\n+struct Foo { baz: String, qux: Vec<i32> $0}\n+\"#,\n+            r#\"\n+struct Foo { baz: String, qux: Vec<i32> }\n \n impl Foo {\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n-}\",\n+}\n+\"#,\n         );\n+    }\n \n-        // Check that visibility modifiers don't get brought in for fields\n+    #[test]\n+    fn check_that_visibility_modifiers_dont_get_brought_in() {\n         check_assist(\n             generate_new,\n-\"struct Foo { pub baz: String, pub qux: Vec<i32> $0}\",\n-\"struct Foo { pub baz: String, pub qux: Vec<i32> }\n+            r#\"\n+struct Foo { pub baz: String, pub qux: Vec<i32> $0}\n+\"#,\n+            r#\"\n+struct Foo { pub baz: String, pub qux: Vec<i32> }\n \n impl Foo {\n     fn $0new(baz: String, qux: Vec<i32>) -> Self { Self { baz, qux } }\n-}\",\n+}\n+\"#,\n         );\n+    }\n \n-        // Check that it reuses existing impls\n+    #[test]\n+    fn check_it_reuses_existing_impls() {\n         check_assist(\n             generate_new,\n-\"struct Foo {$0}\n+            r#\"\n+struct Foo {$0}\n \n impl Foo {}\n-\",\n-\"struct Foo {}\n+\"#,\n+            r#\"\n+struct Foo {}\n \n impl Foo {\n     fn $0new() -> Self { Self {  } }\n }\n-\",\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"struct Foo {$0}\n+            r#\"\n+struct Foo {$0}\n \n impl Foo {\n     fn qux(&self) {}\n }\n-\",\n-\"struct Foo {}\n+\"#,\n+            r#\"\n+struct Foo {}\n \n impl Foo {\n     fn $0new() -> Self { Self {  } }\n \n     fn qux(&self) {}\n }\n-\",\n+\"#,\n         );\n \n         check_assist(\n             generate_new,\n-\"struct Foo {$0}\n+            r#\"\n+struct Foo {$0}\n \n impl Foo {\n     fn qux(&self) {}\n     fn baz() -> i32 {\n         5\n     }\n }\n-\",\n-\"struct Foo {}\n+\"#,\n+            r#\"\n+struct Foo {}\n \n impl Foo {\n     fn $0new() -> Self { Self {  } }\n@@ -194,67 +225,79 @@ impl Foo {\n         5\n     }\n }\n-\",\n+\"#,\n         );\n+    }\n \n-        // Check visibility of new fn based on struct\n+    #[test]\n+    fn check_visibility_of_new_fn_based_on_struct() {\n         check_assist(\n             generate_new,\n-\"pub struct Foo {$0}\",\n-\"pub struct Foo {}\n+            r#\"\n+pub struct Foo {$0}\n+\"#,\n+            r#\"\n+pub struct Foo {}\n \n impl Foo {\n     pub fn $0new() -> Self { Self {  } }\n-}\",\n+}\n+\"#,\n         );\n         check_assist(\n             generate_new,\n-\"pub(crate) struct Foo {$0}\",\n-\"pub(crate) struct Foo {}\n+            r#\"\n+pub(crate) struct Foo {$0}\n+\"#,\n+            r#\"\n+pub(crate) struct Foo {}\n \n impl Foo {\n     pub(crate) fn $0new() -> Self { Self {  } }\n-}\",\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn generate_new_not_applicable_if_fn_exists() {\n         check_assist_not_applicable(\n             generate_new,\n-            \"\n+            r#\"\n struct Foo {$0}\n \n impl Foo {\n     fn new() -> Self {\n         Self\n     }\n-}\",\n+}\n+\"#,\n         );\n \n         check_assist_not_applicable(\n             generate_new,\n-            \"\n+            r#\"\n struct Foo {$0}\n \n impl Foo {\n     fn New() -> Self {\n         Self\n     }\n-}\",\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn generate_new_target() {\n         check_assist_target(\n             generate_new,\n-            \"\n+            r#\"\n struct SomeThingIrrelevant;\n /// Has a lifetime parameter\n struct Foo<'a, T: Foo<'a>> {$0}\n struct EvenMoreIrrelevant;\n-\",\n+\"#,\n             \"/// Has a lifetime parameter\n struct Foo<'a, T: Foo<'a>> {}\",\n         );\n@@ -264,7 +307,7 @@ struct Foo<'a, T: Foo<'a>> {}\",\n     fn test_unrelated_new() {\n         check_assist(\n             generate_new,\n-            r##\"\n+            r#\"\n pub struct AstId<N: AstNode> {\n     file_id: HirFileId,\n     file_ast_id: FileAstId<N>,\n@@ -285,8 +328,9 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n-}\"##,\n-            r##\"\n+}\n+\"#,\n+            r#\"\n pub struct AstId<N: AstNode> {\n     file_id: HirFileId,\n     file_ast_id: FileAstId<N>,\n@@ -309,7 +353,8 @@ impl<T> Source<T> {\n     pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n         Source { file_id: self.file_id, ast: f(self.ast) }\n     }\n-}\"##,\n+}\n+\"#,\n         );\n     }\n }"}]}