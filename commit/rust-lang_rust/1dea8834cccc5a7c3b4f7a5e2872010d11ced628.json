{"sha": "1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWE4ODM0Y2NjYzVhN2MzYjRmN2E1ZTI4NzIwMTBkMTFjZWQ2Mjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T04:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-28T04:46:46Z"}, "message": "auto merge of #14364 : alexcrichton/rust/libdebug, r=brson\n\nThis commit moves reflection (as well as the {:?} format modifier) to a new\r\nlibdebug crate, all of which is marked experimental.\r\n\r\nThis is a breaking change because it now requires the debug crate to be\r\nexplicitly linked if the :? format qualifier is used. This means that any code\r\nusing this feature will have to add `extern crate debug;` to the top of the\r\ncrate. Any code relying on reflection will also need to do this.\r\n\r\nCloses #12019\r\n\r\n[breaking-change]", "tree": {"sha": "f7acde44daf79dcc27a74b861b0e9308cd891b55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7acde44daf79dcc27a74b861b0e9308cd891b55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "html_url": "https://github.com/rust-lang/rust/commit/1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73dac7e4e61aa88cfc98433b61ba131b38af978d", "url": "https://api.github.com/repos/rust-lang/rust/commits/73dac7e4e61aa88cfc98433b61ba131b38af978d", "html_url": "https://github.com/rust-lang/rust/commit/73dac7e4e61aa88cfc98433b61ba131b38af978d"}, {"sha": "b53454e2e413ac58da20933968cb4a86a3c7c476", "url": "https://api.github.com/repos/rust-lang/rust/commits/b53454e2e413ac58da20933968cb4a86a3c7c476", "html_url": "https://github.com/rust-lang/rust/commit/b53454e2e413ac58da20933968cb4a86a3c7c476"}], "stats": {"total": 1692, "additions": 1545, "deletions": 147}, "files": [{"sha": "a4dc0c0465e77cdf7f4385773709583b317a7c43", "filename": "mk/crates.mk", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -51,24 +51,25 @@\n \n TARGET_CRATES := libc std green rustuv native flate arena glob term semver \\\n                  uuid serialize sync getopts collections num test time rand \\\n-\t\t workcache url log regex graphviz core rlibc alloc\n+\t\t workcache url log regex graphviz core rlibc alloc debug\n HOST_CRATES := syntax rustc rustdoc fourcc hexfloat regex_macros fmt_macros\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_core :=\n DEPS_rlibc :=\n DEPS_alloc := core libc native:jemalloc\n+DEPS_debug := std\n DEPS_std := core libc alloc native:rustrt native:backtrace\n DEPS_graphviz := std\n DEPS_green := std rand native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n-DEPS_syntax := std term serialize collections log fmt_macros\n+DEPS_syntax := std term serialize collections log fmt_macros debug\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections time log graphviz\n+              collections time log graphviz debug\n DEPS_rustdoc := rustc native:hoedown serialize sync getopts collections \\\n-                test time\n+                test time debug\n DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_graphviz := std\n@@ -79,7 +80,7 @@ DEPS_semver := std\n DEPS_uuid := std serialize rand\n DEPS_sync := std alloc\n DEPS_getopts := std\n-DEPS_collections := std rand\n+DEPS_collections := std rand debug\n DEPS_fourcc := syntax std\n DEPS_hexfloat := syntax std\n DEPS_num := std rand"}, {"sha": "30bfd28d57ee06d05e679c1bd65589aadc9804af", "filename": "src/doc/guide-container.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-container.md?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -254,7 +254,7 @@ for (x, y) in it {\n }\n \n // yield and print the last pair from the iterator\n-println!(\"last: {:?}\", it.next());\n+println!(\"last: {}\", it.next());\n \n // the iterator is now fully consumed\n assert!(it.next().is_none());\n@@ -349,9 +349,9 @@ returning another `DoubleEndedIterator` with `next` and `next_back` exchanged.\n ~~~\n let xs = [1, 2, 3, 4, 5, 6];\n let mut it = xs.iter();\n-println!(\"{:?}\", it.next()); // prints `Some(&1)`\n-println!(\"{:?}\", it.next()); // prints `Some(&2)`\n-println!(\"{:?}\", it.next_back()); // prints `Some(&6)`\n+println!(\"{}\", it.next()); // prints `Some(1)`\n+println!(\"{}\", it.next()); // prints `Some(2)`\n+println!(\"{}\", it.next_back()); // prints `Some(6)`\n \n // prints `5`, `4` and `3`\n for &x in it.rev() {\n@@ -367,7 +367,7 @@ let xs = [1, 2, 3, 4];\n let ys = [5, 6, 7, 8];\n let mut it = xs.iter().chain(ys.iter()).map(|&x| x * 2);\n \n-println!(\"{:?}\", it.next()); // prints `Some(2)`\n+println!(\"{}\", it.next()); // prints `Some(2)`\n \n // prints `16`, `14`, `12`, `10`, `8`, `6`, `4`\n for x in it.rev() {\n@@ -398,17 +398,17 @@ underlying iterators are.\n let xs = [1, 2, 3, 4, 5];\n let ys = ~[7, 9, 11];\n let mut it = xs.iter().chain(ys.iter());\n-println!(\"{:?}\", it.idx(0)); // prints `Some(&1)`\n-println!(\"{:?}\", it.idx(5)); // prints `Some(&7)`\n-println!(\"{:?}\", it.idx(7)); // prints `Some(&11)`\n-println!(\"{:?}\", it.idx(8)); // prints `None`\n+println!(\"{}\", it.idx(0)); // prints `Some(1)`\n+println!(\"{}\", it.idx(5)); // prints `Some(7)`\n+println!(\"{}\", it.idx(7)); // prints `Some(11)`\n+println!(\"{}\", it.idx(8)); // prints `None`\n \n // yield two elements from the beginning, and one from the end\n it.next();\n it.next();\n it.next_back();\n \n-println!(\"{:?}\", it.idx(0)); // prints `Some(&3)`\n-println!(\"{:?}\", it.idx(4)); // prints `Some(&9)`\n-println!(\"{:?}\", it.idx(6)); // prints `None`\n+println!(\"{}\", it.idx(0)); // prints `Some(3)`\n+println!(\"{}\", it.idx(4)); // prints `Some(9)`\n+println!(\"{}\", it.idx(6)); // prints `None`\n ~~~"}, {"sha": "97dd78234267dd4b06585157a1da53a5ca546c68", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -104,6 +104,7 @@ you were writing this Rust code:\n \n ~~~rust\n # fn transform(p: Point) -> Point { p }\n+#[deriving(Show)]\n struct Point {\n     x: int,\n     y: int,\n@@ -112,7 +113,7 @@ struct Point {\n fn main() {\n     let p0 = Point { x: 5, y: 10};\n     let p1 = transform(p0);\n-    println!(\"{:?}\", p1);\n+    println!(\"{}\", p1);\n }\n \n ~~~\n@@ -136,6 +137,7 @@ let p1 = transform(&p0);\n This does work, but you don't need to create those references! The better way to write this is simply:\n \n ~~~rust\n+#[deriving(Show)]\n struct Point {\n     x: int,\n     y: int,\n@@ -148,7 +150,7 @@ fn transform(p: Point) -> Point {\n fn main() {\n     let p0 = Point { x: 5, y: 10};\n     let p1 = transform(p0);\n-    println!(\"{:?}\", p1);\n+    println!(\"{}\", p1);\n }\n ~~~\n \n@@ -185,15 +187,15 @@ trait. Therefore, unboxed traits don't make any sense, and aren't allowed.\n Sometimes, you need a recursive data structure. The simplest is known as a 'cons list':\n \n ~~~rust\n-\n+#[deriving(Show)]\n enum List<T> {\n     Nil,\n     Cons(T, Box<List<T>>),\n }\n \n fn main() {\n     let list: List<int> = Cons(1, box Cons(2, box Cons(3, box Nil)));\n-    println!(\"{:?}\", list);\n+    println!(\"{}\", list);\n }\n ~~~\n \n@@ -277,7 +279,7 @@ fn main() {\n     let origin =    &Point { x: 0.0, y: 0.0 };\n     let p1     = box Point { x: 5.0, y: 3.0 };\n \n-    println!(\"{:?}\", compute_distance(origin, p1));\n+    println!(\"{}\", compute_distance(origin, p1));\n }\n ~~~\n \n@@ -316,11 +318,11 @@ fn main() {\n     let mut x = box 5;\n     if *x < 10 {\n         let y = &x;\n-        println!(\"Oh no: {:?}\", y);\n+        println!(\"Oh no: {}\", y);\n         return;\n     }\n     *x -= 1;\n-    println!(\"Oh no: {:?}\", x);\n+    println!(\"Oh no: {}\", x);\n }\n ~~~\n \n@@ -335,11 +337,11 @@ fn main() {\n         let y = &x;\n         *x -= 1;\n \n-        println!(\"Oh no: {:?}\", y);\n+        println!(\"Oh no: {}\", y);\n         return;\n     }\n     *x -= 1;\n-    println!(\"Oh no: {:?}\", x);\n+    println!(\"Oh no: {}\", x);\n }\n ~~~\n "}, {"sha": "ad6ec65ef44baae93570575db8fe0e50aad1e311", "filename": "src/doc/guide-tasks.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Fguide-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-tasks.md?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -280,7 +280,7 @@ fn fib(n: u64) -> u64 {\n \n let mut delayed_fib = sync::Future::spawn(proc() fib(50));\n make_a_sandwich();\n-println!(\"fib(50) = {:?}\", delayed_fib.get())\n+println!(\"fib(50) = {}\", delayed_fib.get())\n # }\n ~~~\n "}, {"sha": "011d1b2b5db8f1fabc9a976843b2ac40ae5e2ffd", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -405,14 +405,20 @@ will often see in examples, and its related family of macros: `print!`,\n that [printf][pf] has. Unlike printf, `format!` will give you a compile-time\n error when the types of the directives don't match the types of the arguments.\n \n-~~~~\n-# let mystery_object = ();\n-\n+~~~\n // `{}` will print the \"default format\" of a type\n println!(\"{} is {}\", \"the answer\", 43);\n+~~~\n \n-// `{:?}` will conveniently print any type\n+~~~~\n+extern crate debug;\n+\n+# fn main() {\n+# let mystery_object = ();\n+// `{:?}` will conveniently print any type,\n+// but requires the `debug` crate to be linked in\n println!(\"what is this thing: {:?}\", mystery_object);\n+# }\n ~~~~\n \n [pf]: http://en.cppreference.com/w/cpp/io/c/fprintf\n@@ -698,8 +704,8 @@ When an enum has simple integer discriminators, you can apply the `as` cast\n operator to convert a variant to its discriminator value as an `int`:\n \n ~~~~\n-# enum Direction { North }\n-println!( \"{:?} => {}\", North, North as int );\n+# #[deriving(Show)] enum Direction { North }\n+println!( \"{} => {}\", North, North as int );\n ~~~~\n \n It is possible to set the discriminator values to chosen constant values:\n@@ -2228,7 +2234,7 @@ method.\n ~~~~\n # trait Printable { fn print(&self); }\n impl Printable for int {\n-    fn print(&self) { println!(\"{:?}\", *self) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n impl Printable for String {\n@@ -2253,11 +2259,11 @@ types to be exactly as it is for `int`, above:\n ~~~~\n # trait Printable { fn print(&self); }\n impl Printable for f32 {\n-    fn print(&self) { println!(\"{:?}\", *self) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n impl Printable for bool {\n-    fn print(&self) { println!(\"{:?}\", *self) }\n+    fn print(&self) { println!(\"{}\", *self) }\n }\n \n # true.print();\n@@ -2270,8 +2276,11 @@ definition of `print` right in the trait definition, instead of just\n giving its signature.  That is, we can write the following:\n \n ~~~~\n+extern crate debug;\n+\n+# fn main() {\n trait Printable {\n-\t// Default method implementation\n+    // Default method implementation\n     fn print(&self) { println!(\"{:?}\", *self) }\n }\n \n@@ -2289,6 +2298,7 @@ impl Printable for f32 {}\n # (\"foo\".to_string()).print();\n # true.print();\n # 3.14159.print();\n+# }\n ~~~~\n \n Here, the impls of `Printable` for `int`, `bool`, and `f32` don't"}, {"sha": "7e250e130fac8199cfc13ee33a11719aadd17ca4", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -74,8 +74,10 @@\n extern crate core;\n extern crate libc;\n \n+\n // Allow testing this library\n \n+#[cfg(test)] extern crate debug;\n #[cfg(test)] extern crate sync;\n #[cfg(test)] extern crate native;\n #[cfg(test)] #[phase(syntax, link)] extern crate std;"}, {"sha": "cbf4ae03a767086dbd2f9088df62df240bbde4c8", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -25,6 +25,7 @@\n #![deny(deprecated_owned_vector)]\n \n extern crate rand;\n+extern crate debug;\n \n #[cfg(test)] extern crate test;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;"}, {"sha": "a3cb18a283ed42e03103b63a7bf9d9a3e536bd1f", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -27,6 +27,7 @@\n  * demonstrates adding and subtracting two `Point`s.\n  *\n  * ```rust\n+ * #[deriving(Show)]\n  * struct Point {\n  *     x: int,\n  *     y: int\n@@ -44,8 +45,8 @@\n  *     }\n  * }\n  * fn main() {\n- *     println!(\"{:?}\", Point {x: 1, y: 0} + Point {x: 2, y: 3});\n- *     println!(\"{:?}\", Point {x: 1, y: 0} - Point {x: 2, y: 3});\n+ *     println!(\"{}\", Point {x: 1, y: 0} + Point {x: 2, y: 3});\n+ *     println!(\"{}\", Point {x: 1, y: 0} - Point {x: 2, y: 3});\n  * }\n  * ```\n  *"}, {"sha": "795dd389958eec2bac3cd00f3312222bbdd49daf", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -419,7 +419,7 @@ pub trait ImmutableVector<'a, T> {\n      * ```rust\n      * let v = &[1,2,3,4];\n      * for win in v.windows(2) {\n-     *     println!(\"{:?}\", win);\n+     *     println!(\"{}\", win);\n      * }\n      * ```\n      *\n@@ -444,7 +444,7 @@ pub trait ImmutableVector<'a, T> {\n      * ```rust\n      * let v = &[1,2,3,4,5];\n      * for win in v.chunks(2) {\n-     *     println!(\"{:?}\", win);\n+     *     println!(\"{}\", win);\n      * }\n      * ```\n      *"}, {"sha": "4087cb952716831fa3a55215e8a3538024b0392e", "filename": "src/libdebug/fmt.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Ffmt.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Implementation of the `{:?}` format qualifier\n+//!\n+//! This module contains the `Poly` trait which is used to implement the `{:?}`\n+//! format expression in formatting macros. This trait is defined for all types\n+//! automatically, so it is likely not necessary to use this module manually\n+\n+use std::fmt;\n+\n+use repr;\n+\n+/// Format trait for the `?` character\n+pub trait Poly {\n+    /// Formats the value using the given formatter.\n+    #[experimental]\n+    fn fmt(&self, &mut fmt::Formatter) -> fmt::Result;\n+}\n+\n+#[doc(hidden)]\n+pub fn secret_poly<T: Poly>(x: &T, fmt: &mut fmt::Formatter) -> fmt::Result {\n+    // FIXME #11938 - UFCS would make us able call the this method\n+    //                directly Poly::fmt(x, fmt).\n+    x.fmt(fmt)\n+}\n+\n+impl<T> Poly for T {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        match (f.width, f.precision) {\n+            (None, None) => {\n+                match repr::write_repr(f, self) {\n+                    Ok(()) => Ok(()),\n+                    Err(..) => Err(fmt::WriteError),\n+                }\n+            }\n+\n+            // If we have a specified width for formatting, then we have to make\n+            // this allocation of a new string\n+            _ => {\n+                let s = repr::repr_to_str(self);\n+                f.pad(s.as_slice())\n+            }\n+        }\n+    }\n+}"}, {"sha": "452c3d2937cc51d6638aa145d31c72d64dd703e0", "filename": "src/libdebug/lib.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Debugging utilities for Rust programs\n+//!\n+//! This crate is intended to provide useful functionality when debugging\n+//! programs, such as reflection for printing values. This crate is currently\n+//! entirely experimental as its makeup will likely change over time.\n+//! Additionally, it is not guaranteed that functionality such as reflection\n+//! will persist into the future.\n+\n+#![crate_id = \"debug#0.11.0-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://doc.rust-lang.org/\")]\n+#![experimental]\n+#![feature(managed_boxes, macro_rules, quad_precision_float)]\n+#![allow(experimental)]\n+\n+pub mod fmt;\n+pub mod reflect;\n+pub mod repr;"}, {"sha": "367994466b21e02d632eaf3dd2d20c8de8817012", "filename": "src/libdebug/reflect.rs", "status": "added", "additions": 438, "deletions": 0, "changes": 438, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Freflect.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -0,0 +1,438 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+\n+Runtime type reflection\n+\n+*/\n+\n+#![allow(missing_doc)]\n+\n+use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n+use std::mem;\n+\n+/**\n+ * Trait for visitor that wishes to reflect on data.\n+ *\n+ * To use this, create a struct that encapsulates the set of pointers you wish\n+ * to walk through a data structure, and implement both `MovePtr` for it as well\n+ * as `TyVisitor`; then build a MovePtrAdaptor wrapped around your struct.\n+ */\n+pub trait MovePtr {\n+    fn move_ptr(&mut self, adjustment: |*u8| -> *u8);\n+    fn push_ptr(&mut self);\n+    fn pop_ptr(&mut self);\n+}\n+\n+/// Helper function for alignment calculation.\n+#[inline]\n+pub fn align(size: uint, align: uint) -> uint {\n+    ((size + align) - 1u) & !(align - 1u)\n+}\n+\n+/// Adaptor to wrap around visitors implementing MovePtr.\n+pub struct MovePtrAdaptor<V> {\n+    inner: V\n+}\n+pub fn MovePtrAdaptor<V:TyVisitor + MovePtr>(v: V) -> MovePtrAdaptor<V> {\n+    MovePtrAdaptor { inner: v }\n+}\n+\n+impl<V:TyVisitor + MovePtr> MovePtrAdaptor<V> {\n+    #[inline]\n+    pub fn bump(&mut self, sz: uint) {\n+        self.inner.move_ptr(|p| ((p as uint) + sz) as *u8)\n+    }\n+\n+    #[inline]\n+    pub fn align(&mut self, a: uint) {\n+        self.inner.move_ptr(|p| align(p as uint, a) as *u8)\n+    }\n+\n+    #[inline]\n+    pub fn align_to<T>(&mut self) {\n+        self.align(mem::min_align_of::<T>());\n+    }\n+\n+    #[inline]\n+    pub fn bump_past<T>(&mut self) {\n+        self.bump(mem::size_of::<T>());\n+    }\n+\n+    pub fn unwrap(self) -> V { self.inner }\n+}\n+\n+/// Abstract type-directed pointer-movement using the MovePtr trait\n+impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n+    fn visit_bot(&mut self) -> bool {\n+        self.align_to::<()>();\n+        if ! self.inner.visit_bot() { return false; }\n+        self.bump_past::<()>();\n+        true\n+    }\n+\n+    fn visit_nil(&mut self) -> bool {\n+        self.align_to::<()>();\n+        if ! self.inner.visit_nil() { return false; }\n+        self.bump_past::<()>();\n+        true\n+    }\n+\n+    fn visit_bool(&mut self) -> bool {\n+        self.align_to::<bool>();\n+        if ! self.inner.visit_bool() { return false; }\n+        self.bump_past::<bool>();\n+        true\n+    }\n+\n+    fn visit_int(&mut self) -> bool {\n+        self.align_to::<int>();\n+        if ! self.inner.visit_int() { return false; }\n+        self.bump_past::<int>();\n+        true\n+    }\n+\n+    fn visit_i8(&mut self) -> bool {\n+        self.align_to::<i8>();\n+        if ! self.inner.visit_i8() { return false; }\n+        self.bump_past::<i8>();\n+        true\n+    }\n+\n+    fn visit_i16(&mut self) -> bool {\n+        self.align_to::<i16>();\n+        if ! self.inner.visit_i16() { return false; }\n+        self.bump_past::<i16>();\n+        true\n+    }\n+\n+    fn visit_i32(&mut self) -> bool {\n+        self.align_to::<i32>();\n+        if ! self.inner.visit_i32() { return false; }\n+        self.bump_past::<i32>();\n+        true\n+    }\n+\n+    fn visit_i64(&mut self) -> bool {\n+        self.align_to::<i64>();\n+        if ! self.inner.visit_i64() { return false; }\n+        self.bump_past::<i64>();\n+        true\n+    }\n+\n+    fn visit_uint(&mut self) -> bool {\n+        self.align_to::<uint>();\n+        if ! self.inner.visit_uint() { return false; }\n+        self.bump_past::<uint>();\n+        true\n+    }\n+\n+    fn visit_u8(&mut self) -> bool {\n+        self.align_to::<u8>();\n+        if ! self.inner.visit_u8() { return false; }\n+        self.bump_past::<u8>();\n+        true\n+    }\n+\n+    fn visit_u16(&mut self) -> bool {\n+        self.align_to::<u16>();\n+        if ! self.inner.visit_u16() { return false; }\n+        self.bump_past::<u16>();\n+        true\n+    }\n+\n+    fn visit_u32(&mut self) -> bool {\n+        self.align_to::<u32>();\n+        if ! self.inner.visit_u32() { return false; }\n+        self.bump_past::<u32>();\n+        true\n+    }\n+\n+    fn visit_u64(&mut self) -> bool {\n+        self.align_to::<u64>();\n+        if ! self.inner.visit_u64() { return false; }\n+        self.bump_past::<u64>();\n+        true\n+    }\n+\n+    fn visit_f32(&mut self) -> bool {\n+        self.align_to::<f32>();\n+        if ! self.inner.visit_f32() { return false; }\n+        self.bump_past::<f32>();\n+        true\n+    }\n+\n+    fn visit_f64(&mut self) -> bool {\n+        self.align_to::<f64>();\n+        if ! self.inner.visit_f64() { return false; }\n+        self.bump_past::<f64>();\n+        true\n+    }\n+\n+    fn visit_f128(&mut self) -> bool {\n+        self.align_to::<f128>();\n+        if ! self.inner.visit_f128() { return false; }\n+        self.bump_past::<f128>();\n+        true\n+    }\n+\n+    fn visit_char(&mut self) -> bool {\n+        self.align_to::<char>();\n+        if ! self.inner.visit_char() { return false; }\n+        self.bump_past::<char>();\n+        true\n+    }\n+\n+    fn visit_estr_box(&mut self) -> bool {\n+        true\n+    }\n+\n+    fn visit_estr_uniq(&mut self) -> bool {\n+        self.align_to::<~str>();\n+        if ! self.inner.visit_estr_uniq() { return false; }\n+        self.bump_past::<~str>();\n+        true\n+    }\n+\n+    fn visit_estr_slice(&mut self) -> bool {\n+        self.align_to::<&'static str>();\n+        if ! self.inner.visit_estr_slice() { return false; }\n+        self.bump_past::<&'static str>();\n+        true\n+    }\n+\n+    fn visit_estr_fixed(&mut self, n: uint,\n+                        sz: uint,\n+                        align: uint) -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_estr_fixed(n, sz, align) { return false; }\n+        self.bump(sz);\n+        true\n+    }\n+\n+    fn visit_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<@u8>();\n+        if ! self.inner.visit_box(mtbl, inner) { return false; }\n+        self.bump_past::<@u8>();\n+        true\n+    }\n+\n+    fn visit_uniq(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<Box<u8>>();\n+        if ! self.inner.visit_uniq(mtbl, inner) { return false; }\n+        self.bump_past::<Box<u8>>();\n+        true\n+    }\n+\n+    fn visit_ptr(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<*u8>();\n+        if ! self.inner.visit_ptr(mtbl, inner) { return false; }\n+        self.bump_past::<*u8>();\n+        true\n+    }\n+\n+    fn visit_rptr(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<&'static u8>();\n+        if ! self.inner.visit_rptr(mtbl, inner) { return false; }\n+        self.bump_past::<&'static u8>();\n+        true\n+    }\n+\n+    fn visit_evec_box(&mut self, _mtbl: uint, _inner: *TyDesc) -> bool {\n+        true\n+    }\n+\n+    fn visit_evec_uniq(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<~[u8]>();\n+        if ! self.inner.visit_evec_uniq(mtbl, inner) { return false; }\n+        self.bump_past::<~[u8]>();\n+        true\n+    }\n+\n+    fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align_to::<&'static [u8]>();\n+        if ! self.inner.visit_evec_slice(mtbl, inner) { return false; }\n+        self.bump_past::<&'static [u8]>();\n+        true\n+    }\n+\n+    fn visit_evec_fixed(&mut self, n: uint, sz: uint, align: uint,\n+                        mtbl: uint, inner: *TyDesc) -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_evec_fixed(n, sz, align, mtbl, inner) {\n+            return false;\n+        }\n+        self.bump(sz);\n+        true\n+    }\n+\n+    fn visit_enter_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_rec(n_fields, sz, align) { return false; }\n+        true\n+    }\n+\n+    fn visit_rec_field(&mut self, i: uint, name: &str,\n+                       mtbl: uint, inner: *TyDesc) -> bool {\n+        unsafe { self.align((*inner).align); }\n+        if ! self.inner.visit_rec_field(i, name, mtbl, inner) {\n+            return false;\n+        }\n+        unsafe { self.bump((*inner).size); }\n+        true\n+    }\n+\n+    fn visit_leave_rec(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_rec(n_fields, sz, align) { return false; }\n+        true\n+    }\n+\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_class(name, named_fields, n_fields, sz, align) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool, mtbl: uint,\n+                         inner: *TyDesc) -> bool {\n+        unsafe { self.align((*inner).align); }\n+        if ! self.inner.visit_class_field(i, name, named, mtbl, inner) {\n+            return false;\n+        }\n+        unsafe { self.bump((*inner).size); }\n+        true\n+    }\n+\n+    fn visit_leave_class(&mut self, name: &str, named_fields: bool, n_fields: uint, sz: uint,\n+                         align: uint) -> bool {\n+        if ! self.inner.visit_leave_class(name, named_fields, n_fields, sz, align) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_enter_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_tup(n_fields, sz, align) { return false; }\n+        true\n+    }\n+\n+    fn visit_tup_field(&mut self, i: uint, inner: *TyDesc) -> bool {\n+        unsafe { self.align((*inner).align); }\n+        if ! self.inner.visit_tup_field(i, inner) { return false; }\n+        unsafe { self.bump((*inner).size); }\n+        true\n+    }\n+\n+    fn visit_leave_tup(&mut self, n_fields: uint, sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_tup(n_fields, sz, align) { return false; }\n+        true\n+    }\n+\n+    fn visit_enter_fn(&mut self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool {\n+        if ! self.inner.visit_enter_fn(purity, proto, n_inputs, retstyle) {\n+            return false\n+        }\n+        true\n+    }\n+\n+    fn visit_fn_input(&mut self, i: uint, mode: uint, inner: *TyDesc) -> bool {\n+        if ! self.inner.visit_fn_input(i, mode, inner) { return false; }\n+        true\n+    }\n+\n+    fn visit_fn_output(&mut self, retstyle: uint, variadic: bool, inner: *TyDesc) -> bool {\n+        if ! self.inner.visit_fn_output(retstyle, variadic, inner) { return false; }\n+        true\n+    }\n+\n+    fn visit_leave_fn(&mut self, purity: uint, proto: uint,\n+                      n_inputs: uint, retstyle: uint) -> bool {\n+        if ! self.inner.visit_leave_fn(purity, proto, n_inputs, retstyle) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_enter_enum(&mut self, n_variants: uint,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n+                        sz: uint, align: uint)\n+                     -> bool {\n+        self.align(align);\n+        if ! self.inner.visit_enter_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_enter_enum_variant(&mut self, variant: uint,\n+                                disr_val: Disr,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n+                                                 n_fields, name) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_enum_variant_field(&mut self, i: uint, offset: uint, inner: *TyDesc) -> bool {\n+        self.inner.push_ptr();\n+        self.bump(offset);\n+        if ! self.inner.visit_enum_variant_field(i, offset, inner) { return false; }\n+        self.inner.pop_ptr();\n+        true\n+    }\n+\n+    fn visit_leave_enum_variant(&mut self, variant: uint,\n+                                disr_val: Disr,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        if ! self.inner.visit_leave_enum_variant(variant, disr_val,\n+                                                 n_fields, name) {\n+            return false;\n+        }\n+        true\n+    }\n+\n+    fn visit_leave_enum(&mut self, n_variants: uint,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n+                        sz: uint, align: uint) -> bool {\n+        if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n+            return false;\n+        }\n+        self.bump(sz);\n+        true\n+    }\n+\n+    fn visit_trait(&mut self, name: &str) -> bool {\n+        self.align_to::<Box<TyVisitor>>();\n+        if ! self.inner.visit_trait(name) { return false; }\n+        self.bump_past::<Box<TyVisitor>>();\n+        true\n+    }\n+\n+    fn visit_param(&mut self, i: uint) -> bool {\n+        if ! self.inner.visit_param(i) { return false; }\n+        true\n+    }\n+\n+    fn visit_self(&mut self) -> bool {\n+        self.align_to::<&'static u8>();\n+        if ! self.inner.visit_self() { return false; }\n+        self.align_to::<&'static u8>();\n+        true\n+    }\n+}"}, {"sha": "6807e73982d781e4439575eed1d3abcfc256cbf0", "filename": "src/libdebug/repr.rs", "status": "added", "additions": 659, "deletions": 0, "changes": 659, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibdebug%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibdebug%2Frepr.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -0,0 +1,659 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*!\n+\n+More runtime type reflection\n+\n+*/\n+\n+use std::char;\n+use std::intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n+use std::io;\n+use std::mem;\n+use std::raw;\n+\n+use reflect;\n+use reflect::{MovePtr, align};\n+\n+macro_rules! try( ($me:expr, $e:expr) => (\n+    match $e {\n+        Ok(()) => {},\n+        Err(e) => { $me.last_err = Some(e); return false; }\n+    }\n+) )\n+\n+/// Representations\n+\n+trait Repr {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()>;\n+}\n+\n+impl Repr for () {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n+        writer.write(\"()\".as_bytes())\n+    }\n+}\n+\n+impl Repr for bool {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n+        let s = if *self { \"true\" } else { \"false\" };\n+        writer.write(s.as_bytes())\n+    }\n+}\n+\n+impl Repr for int {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n+        write!(writer, \"{}\", *self)\n+    }\n+}\n+\n+macro_rules! int_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n+        write!(writer, \"{}{}\", *self, $suffix)\n+    }\n+}))\n+\n+int_repr!(i8, \"i8\")\n+int_repr!(i16, \"i16\")\n+int_repr!(i32, \"i32\")\n+int_repr!(i64, \"i64\")\n+int_repr!(uint, \"u\")\n+int_repr!(u8, \"u8\")\n+int_repr!(u16, \"u16\")\n+int_repr!(u32, \"u32\")\n+int_repr!(u64, \"u64\")\n+\n+macro_rules! num_repr(($ty:ident, $suffix:expr) => (impl Repr for $ty {\n+    fn write_repr(&self, writer: &mut io::Writer) -> io::IoResult<()> {\n+        let s = self.to_str();\n+        writer.write(s.as_bytes()).and_then(|()| {\n+            writer.write(bytes!($suffix))\n+        })\n+    }\n+}))\n+\n+num_repr!(f32, \"f32\")\n+num_repr!(f64, \"f64\")\n+\n+// New implementation using reflect::MovePtr\n+\n+enum VariantState {\n+    SearchingFor(Disr),\n+    Matched,\n+    AlreadyFound\n+}\n+\n+pub struct ReprVisitor<'a> {\n+    ptr: *u8,\n+    ptr_stk: Vec<*u8>,\n+    var_stk: Vec<VariantState>,\n+    writer: &'a mut io::Writer,\n+    last_err: Option<io::IoError>,\n+}\n+\n+pub fn ReprVisitor<'a>(ptr: *u8,\n+                       writer: &'a mut io::Writer) -> ReprVisitor<'a> {\n+    ReprVisitor {\n+        ptr: ptr,\n+        ptr_stk: vec!(),\n+        var_stk: vec!(),\n+        writer: writer,\n+        last_err: None,\n+    }\n+}\n+\n+impl<'a> MovePtr for ReprVisitor<'a> {\n+    #[inline]\n+    fn move_ptr(&mut self, adjustment: |*u8| -> *u8) {\n+        self.ptr = adjustment(self.ptr);\n+    }\n+    fn push_ptr(&mut self) {\n+        self.ptr_stk.push(self.ptr);\n+    }\n+    fn pop_ptr(&mut self) {\n+        self.ptr = self.ptr_stk.pop().unwrap();\n+    }\n+}\n+\n+impl<'a> ReprVisitor<'a> {\n+    // Various helpers for the TyVisitor impl\n+\n+    #[inline]\n+    pub fn get<T>(&mut self, f: |&mut ReprVisitor, &T| -> bool) -> bool {\n+        unsafe {\n+            f(self, mem::transmute::<*u8,&T>(self.ptr))\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn visit_inner(&mut self, inner: *TyDesc) -> bool {\n+        self.visit_ptr_inner(self.ptr, inner)\n+    }\n+\n+    #[inline]\n+    pub fn visit_ptr_inner(&mut self, ptr: *u8, inner: *TyDesc) -> bool {\n+        unsafe {\n+            // This should call the constructor up above, but due to limiting\n+            // issues we have to recreate it here.\n+            let u = ReprVisitor {\n+                ptr: ptr,\n+                ptr_stk: vec!(),\n+                var_stk: vec!(),\n+                writer: mem::transmute_copy(&self.writer),\n+                last_err: None,\n+            };\n+            let mut v = reflect::MovePtrAdaptor(u);\n+            // Obviously this should not be a thing, but blame #8401 for now\n+            visit_tydesc(inner, &mut v as &mut TyVisitor);\n+            match v.unwrap().last_err {\n+                Some(e) => {\n+                    self.last_err = Some(e);\n+                    false\n+                }\n+                None => true,\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn write<T:Repr>(&mut self) -> bool {\n+        self.get(|this, v:&T| {\n+            try!(this, v.write_repr(this.writer));\n+            true\n+        })\n+    }\n+\n+    pub fn write_escaped_slice(&mut self, slice: &str) -> bool {\n+        try!(self, self.writer.write(['\"' as u8]));\n+        for ch in slice.chars() {\n+            if !self.write_escaped_char(ch, true) { return false }\n+        }\n+        try!(self, self.writer.write(['\"' as u8]));\n+        true\n+    }\n+\n+    pub fn write_mut_qualifier(&mut self, mtbl: uint) -> bool {\n+        if mtbl == 0 {\n+            try!(self, self.writer.write(\"mut \".as_bytes()));\n+        } else if mtbl == 1 {\n+            // skip, this is ast::m_imm\n+        } else {\n+            fail!(\"invalid mutability value\");\n+        }\n+        true\n+    }\n+\n+    pub fn write_vec_range(&mut self, ptr: *(), len: uint, inner: *TyDesc) -> bool {\n+        let mut p = ptr as *u8;\n+        let (sz, al) = unsafe { ((*inner).size, (*inner).align) };\n+        try!(self, self.writer.write(['[' as u8]));\n+        let mut first = true;\n+        let mut left = len;\n+        // unit structs have 0 size, and don't loop forever.\n+        let dec = if sz == 0 {1} else {sz};\n+        while left > 0 {\n+            if first {\n+                first = false;\n+            } else {\n+                try!(self, self.writer.write(\", \".as_bytes()));\n+            }\n+            self.visit_ptr_inner(p as *u8, inner);\n+            p = align(unsafe { p.offset(sz as int) as uint }, al) as *u8;\n+            left -= dec;\n+        }\n+        try!(self, self.writer.write([']' as u8]));\n+        true\n+    }\n+\n+    pub fn write_unboxed_vec_repr(&mut self, _: uint, v: &raw::Vec<()>, inner: *TyDesc) -> bool {\n+        self.write_vec_range(&v.data, v.fill, inner)\n+    }\n+\n+    fn write_escaped_char(&mut self, ch: char, is_str: bool) -> bool {\n+        try!(self, match ch {\n+            '\\t' => self.writer.write(\"\\\\t\".as_bytes()),\n+            '\\r' => self.writer.write(\"\\\\r\".as_bytes()),\n+            '\\n' => self.writer.write(\"\\\\n\".as_bytes()),\n+            '\\\\' => self.writer.write(\"\\\\\\\\\".as_bytes()),\n+            '\\'' => {\n+                if is_str {\n+                    self.writer.write(\"'\".as_bytes())\n+                } else {\n+                    self.writer.write(\"\\\\'\".as_bytes())\n+                }\n+            }\n+            '\"' => {\n+                if is_str {\n+                    self.writer.write(\"\\\\\\\"\".as_bytes())\n+                } else {\n+                    self.writer.write(\"\\\"\".as_bytes())\n+                }\n+            }\n+            '\\x20'..'\\x7e' => self.writer.write([ch as u8]),\n+            _ => {\n+                char::escape_unicode(ch, |c| {\n+                    let _ = self.writer.write([c as u8]);\n+                });\n+                Ok(())\n+            }\n+        });\n+        return true;\n+    }\n+}\n+\n+impl<'a> TyVisitor for ReprVisitor<'a> {\n+    fn visit_bot(&mut self) -> bool {\n+        try!(self, self.writer.write(\"!\".as_bytes()));\n+        true\n+    }\n+    fn visit_nil(&mut self) -> bool { self.write::<()>() }\n+    fn visit_bool(&mut self) -> bool { self.write::<bool>() }\n+    fn visit_int(&mut self) -> bool { self.write::<int>() }\n+    fn visit_i8(&mut self) -> bool { self.write::<i8>() }\n+    fn visit_i16(&mut self) -> bool { self.write::<i16>() }\n+    fn visit_i32(&mut self) -> bool { self.write::<i32>()  }\n+    fn visit_i64(&mut self) -> bool { self.write::<i64>() }\n+\n+    fn visit_uint(&mut self) -> bool { self.write::<uint>() }\n+    fn visit_u8(&mut self) -> bool { self.write::<u8>() }\n+    fn visit_u16(&mut self) -> bool { self.write::<u16>() }\n+    fn visit_u32(&mut self) -> bool { self.write::<u32>() }\n+    fn visit_u64(&mut self) -> bool { self.write::<u64>() }\n+\n+    fn visit_f32(&mut self) -> bool { self.write::<f32>() }\n+    fn visit_f64(&mut self) -> bool { self.write::<f64>() }\n+    fn visit_f128(&mut self) -> bool { fail!(\"not implemented\") }\n+\n+    fn visit_char(&mut self) -> bool {\n+        self.get::<char>(|this, &ch| {\n+            try!(this, this.writer.write(['\\'' as u8]));\n+            if !this.write_escaped_char(ch, false) { return false }\n+            try!(this, this.writer.write(['\\'' as u8]));\n+            true\n+        })\n+    }\n+\n+    fn visit_estr_box(&mut self) -> bool {\n+        true\n+    }\n+\n+    fn visit_estr_uniq(&mut self) -> bool {\n+        self.get::<~str>(|this, s| {\n+            try!(this, this.writer.write(['~' as u8]));\n+            this.write_escaped_slice(*s)\n+        })\n+    }\n+\n+    fn visit_estr_slice(&mut self) -> bool {\n+        self.get::<&str>(|this, s| this.write_escaped_slice(*s))\n+    }\n+\n+    // Type no longer exists, vestigial function.\n+    fn visit_estr_fixed(&mut self, _n: uint, _sz: uint,\n+                        _align: uint) -> bool { fail!(); }\n+\n+    fn visit_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        try!(self, self.writer.write(['@' as u8]));\n+        self.write_mut_qualifier(mtbl);\n+        self.get::<&raw::Box<()>>(|this, b| {\n+            let p = &b.data as *() as *u8;\n+            this.visit_ptr_inner(p, inner)\n+        })\n+    }\n+\n+    fn visit_uniq(&mut self, _mtbl: uint, inner: *TyDesc) -> bool {\n+        try!(self, self.writer.write(\"box \".as_bytes()));\n+        self.get::<*u8>(|this, b| {\n+            this.visit_ptr_inner(*b, inner)\n+        })\n+    }\n+\n+    fn visit_ptr(&mut self, mtbl: uint, _inner: *TyDesc) -> bool {\n+        self.get::<*u8>(|this, p| {\n+            try!(this, write!(this.writer, \"({} as *\", *p));\n+            this.write_mut_qualifier(mtbl);\n+            try!(this, this.writer.write(\"())\".as_bytes()));\n+            true\n+        })\n+    }\n+\n+    fn visit_rptr(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        try!(self, self.writer.write(['&' as u8]));\n+        self.write_mut_qualifier(mtbl);\n+        self.get::<*u8>(|this, p| {\n+            this.visit_ptr_inner(*p, inner)\n+        })\n+    }\n+\n+    fn visit_evec_box(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.get::<&raw::Box<raw::Vec<()>>>(|this, b| {\n+            try!(this, this.writer.write(['@' as u8]));\n+            this.write_mut_qualifier(mtbl);\n+            this.write_unboxed_vec_repr(mtbl, &b.data, inner)\n+        })\n+    }\n+\n+    fn visit_evec_uniq(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.get::<&raw::Vec<()>>(|this, b| {\n+            try!(this, this.writer.write(\"box \".as_bytes()));\n+            this.write_unboxed_vec_repr(mtbl, *b, inner)\n+        })\n+    }\n+\n+    fn visit_evec_slice(&mut self, mtbl: uint, inner: *TyDesc) -> bool {\n+        self.get::<raw::Slice<()>>(|this, s| {\n+            try!(this, this.writer.write(['&' as u8]));\n+            this.write_mut_qualifier(mtbl);\n+            let size = unsafe {\n+                if (*inner).size == 0 { 1 } else { (*inner).size }\n+            };\n+            this.write_vec_range(s.data, s.len * size, inner)\n+        })\n+    }\n+\n+    fn visit_evec_fixed(&mut self, n: uint, sz: uint, _align: uint,\n+                        _: uint, inner: *TyDesc) -> bool {\n+        let assumed_size = if sz == 0 { n } else { sz };\n+        self.get::<()>(|this, b| {\n+            this.write_vec_range(b, assumed_size, inner)\n+        })\n+    }\n+\n+    fn visit_enter_rec(&mut self, _n_fields: uint,\n+                       _sz: uint, _align: uint) -> bool {\n+        try!(self, self.writer.write(['{' as u8]));\n+        true\n+    }\n+\n+    fn visit_rec_field(&mut self, i: uint, name: &str,\n+                       mtbl: uint, inner: *TyDesc) -> bool {\n+        if i != 0 {\n+            try!(self, self.writer.write(\", \".as_bytes()));\n+        }\n+        self.write_mut_qualifier(mtbl);\n+        try!(self, self.writer.write(name.as_bytes()));\n+        try!(self, self.writer.write(\": \".as_bytes()));\n+        self.visit_inner(inner);\n+        true\n+    }\n+\n+    fn visit_leave_rec(&mut self, _n_fields: uint,\n+                       _sz: uint, _align: uint) -> bool {\n+        try!(self, self.writer.write(['}' as u8]));\n+        true\n+    }\n+\n+    fn visit_enter_class(&mut self, name: &str, named_fields: bool, n_fields: uint,\n+                         _sz: uint, _align: uint) -> bool {\n+        try!(self, self.writer.write(name.as_bytes()));\n+        if n_fields != 0 {\n+            if named_fields {\n+                try!(self, self.writer.write(['{' as u8]));\n+            } else {\n+                try!(self, self.writer.write(['(' as u8]));\n+            }\n+        }\n+        true\n+    }\n+\n+    fn visit_class_field(&mut self, i: uint, name: &str, named: bool,\n+                         _mtbl: uint, inner: *TyDesc) -> bool {\n+        if i != 0 {\n+            try!(self, self.writer.write(\", \".as_bytes()));\n+        }\n+        if named {\n+            try!(self, self.writer.write(name.as_bytes()));\n+            try!(self, self.writer.write(\": \".as_bytes()));\n+        }\n+        self.visit_inner(inner);\n+        true\n+    }\n+\n+    fn visit_leave_class(&mut self, _name: &str, named_fields: bool, n_fields: uint,\n+                         _sz: uint, _align: uint) -> bool {\n+        if n_fields != 0 {\n+            if named_fields {\n+                try!(self, self.writer.write(['}' as u8]));\n+            } else {\n+                try!(self, self.writer.write([')' as u8]));\n+            }\n+        }\n+        true\n+    }\n+\n+    fn visit_enter_tup(&mut self, _n_fields: uint,\n+                       _sz: uint, _align: uint) -> bool {\n+        try!(self, self.writer.write(['(' as u8]));\n+        true\n+    }\n+\n+    fn visit_tup_field(&mut self, i: uint, inner: *TyDesc) -> bool {\n+        if i != 0 {\n+            try!(self, self.writer.write(\", \".as_bytes()));\n+        }\n+        self.visit_inner(inner);\n+        true\n+    }\n+\n+    fn visit_leave_tup(&mut self, _n_fields: uint,\n+                       _sz: uint, _align: uint) -> bool {\n+        if _n_fields == 1 {\n+            try!(self, self.writer.write([',' as u8]));\n+        }\n+        try!(self, self.writer.write([')' as u8]));\n+        true\n+    }\n+\n+    fn visit_enter_enum(&mut self,\n+                        _n_variants: uint,\n+                        get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n+                        _sz: uint,\n+                        _align: uint) -> bool {\n+        let disr = unsafe {\n+            get_disr(mem::transmute(self.ptr))\n+        };\n+        self.var_stk.push(SearchingFor(disr));\n+        true\n+    }\n+\n+    fn visit_enter_enum_variant(&mut self, _variant: uint,\n+                                disr_val: Disr,\n+                                n_fields: uint,\n+                                name: &str) -> bool {\n+        let mut write = false;\n+        match self.var_stk.pop().unwrap() {\n+            SearchingFor(sought) => {\n+                if disr_val == sought {\n+                    self.var_stk.push(Matched);\n+                    write = true;\n+                } else {\n+                    self.var_stk.push(SearchingFor(sought));\n+                }\n+            }\n+            Matched | AlreadyFound => {\n+                self.var_stk.push(AlreadyFound);\n+            }\n+        }\n+\n+        if write {\n+            try!(self, self.writer.write(name.as_bytes()));\n+            if n_fields > 0 {\n+                try!(self, self.writer.write(['(' as u8]));\n+            }\n+        }\n+        true\n+    }\n+\n+    fn visit_enum_variant_field(&mut self,\n+                                i: uint,\n+                                _offset: uint,\n+                                inner: *TyDesc)\n+                                -> bool {\n+        match *self.var_stk.get(self.var_stk.len() - 1) {\n+            Matched => {\n+                if i != 0 {\n+                    try!(self, self.writer.write(\", \".as_bytes()));\n+                }\n+                if ! self.visit_inner(inner) {\n+                    return false;\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    }\n+\n+    fn visit_leave_enum_variant(&mut self, _variant: uint,\n+                                _disr_val: Disr,\n+                                n_fields: uint,\n+                                _name: &str) -> bool {\n+        match *self.var_stk.get(self.var_stk.len() - 1) {\n+            Matched => {\n+                if n_fields > 0 {\n+                    try!(self, self.writer.write([')' as u8]));\n+                }\n+            }\n+            _ => ()\n+        }\n+        true\n+    }\n+\n+    fn visit_leave_enum(&mut self,\n+                        _n_variants: uint,\n+                        _get_disr: unsafe extern fn(ptr: *Opaque) -> Disr,\n+                        _sz: uint,\n+                        _align: uint)\n+                        -> bool {\n+        match self.var_stk.pop().unwrap() {\n+            SearchingFor(..) => fail!(\"enum value matched no variant\"),\n+            _ => true\n+        }\n+    }\n+\n+    fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool {\n+        try!(self, self.writer.write(\"fn(\".as_bytes()));\n+        true\n+    }\n+\n+    fn visit_fn_input(&mut self, i: uint, _mode: uint, inner: *TyDesc) -> bool {\n+        if i != 0 {\n+            try!(self, self.writer.write(\", \".as_bytes()));\n+        }\n+        let name = unsafe { (*inner).name };\n+        try!(self, self.writer.write(name.as_bytes()));\n+        true\n+    }\n+\n+    fn visit_fn_output(&mut self, _retstyle: uint, variadic: bool,\n+                       inner: *TyDesc) -> bool {\n+        if variadic {\n+            try!(self, self.writer.write(\", ...\".as_bytes()));\n+        }\n+        try!(self, self.writer.write(\")\".as_bytes()));\n+        let name = unsafe { (*inner).name };\n+        if name != \"()\" {\n+            try!(self, self.writer.write(\" -> \".as_bytes()));\n+            try!(self, self.writer.write(name.as_bytes()));\n+        }\n+        true\n+    }\n+\n+    fn visit_leave_fn(&mut self, _purity: uint, _proto: uint,\n+                      _n_inputs: uint, _retstyle: uint) -> bool { true }\n+\n+\n+    fn visit_trait(&mut self, name: &str) -> bool {\n+        try!(self, self.writer.write(name.as_bytes()));\n+        true\n+    }\n+\n+    fn visit_param(&mut self, _i: uint) -> bool { true }\n+    fn visit_self(&mut self) -> bool { true }\n+}\n+\n+pub fn write_repr<T>(writer: &mut io::Writer, object: &T) -> io::IoResult<()> {\n+    unsafe {\n+        let ptr = object as *T as *u8;\n+        let tydesc = get_tydesc::<T>();\n+        let u = ReprVisitor(ptr, writer);\n+        let mut v = reflect::MovePtrAdaptor(u);\n+        visit_tydesc(tydesc, &mut v as &mut TyVisitor);\n+        match v.unwrap().last_err {\n+            Some(e) => Err(e),\n+            None => Ok(()),\n+        }\n+    }\n+}\n+\n+pub fn repr_to_str<T>(t: &T) -> String {\n+    let mut result = io::MemWriter::new();\n+    write_repr(&mut result as &mut io::Writer, t).unwrap();\n+    String::from_utf8(result.unwrap()).unwrap()\n+}\n+\n+#[cfg(test)]\n+struct P {a: int, b: f64}\n+\n+#[test]\n+fn test_repr() {\n+    use std::str;\n+    use std::io::stdio::println;\n+    use std::char::is_alphabetic;\n+    use std::mem::swap;\n+\n+    fn exact_test<T>(t: &T, e:&str) {\n+        let mut m = io::MemWriter::new();\n+        write_repr(&mut m as &mut io::Writer, t).unwrap();\n+        let s = str::from_utf8(m.unwrap().as_slice()).unwrap().to_owned();\n+        assert_eq!(s.as_slice(), e);\n+    }\n+\n+    exact_test(&10, \"10\");\n+    exact_test(&true, \"true\");\n+    exact_test(&false, \"false\");\n+    exact_test(&1.234, \"1.234f64\");\n+    exact_test(&(\"hello\"), \"\\\"hello\\\"\");\n+\n+    exact_test(&(@10), \"@10\");\n+    exact_test(&(box 10), \"box 10\");\n+    exact_test(&(&10), \"&10\");\n+    let mut x = 10;\n+    exact_test(&(&mut x), \"&mut 10\");\n+\n+    exact_test(&(0 as *()), \"(0x0 as *())\");\n+    exact_test(&(0 as *mut ()), \"(0x0 as *mut ())\");\n+\n+    exact_test(&(1,), \"(1,)\");\n+    exact_test(&(&[\"hi\", \"there\"]),\n+               \"&[\\\"hi\\\", \\\"there\\\"]\");\n+    exact_test(&(P{a:10, b:1.234}),\n+               \"repr::P{a: 10, b: 1.234f64}\");\n+    exact_test(&(@P{a:10, b:1.234}),\n+               \"@repr::P{a: 10, b: 1.234f64}\");\n+    exact_test(&(box P{a:10, b:1.234}),\n+               \"box repr::P{a: 10, b: 1.234f64}\");\n+\n+    exact_test(&(&[1, 2]), \"&[1, 2]\");\n+    exact_test(&(&mut [1, 2]), \"&mut [1, 2]\");\n+\n+    exact_test(&'\\'', \"'\\\\''\");\n+    exact_test(&'\"', \"'\\\"'\");\n+    exact_test(&(\"'\"), \"\\\"'\\\"\");\n+    exact_test(&(\"\\\"\"), \"\\\"\\\\\\\"\\\"\");\n+\n+    exact_test(&println, \"fn(&str)\");\n+    exact_test(&swap::<int>, \"fn(&mut int, &mut int)\");\n+    exact_test(&is_alphabetic, \"fn(char) -> bool\");\n+\n+    struct Bar(int, int);\n+    exact_test(&(Bar(2, 2)), \"repr::test_repr::Bar(2, 2)\");\n+}"}, {"sha": "c88b825811f51b112f448e00fd11d86f8bedd0b2", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -89,6 +89,7 @@\n #![deny(missing_doc)]\n #![deny(deprecated_owned_vector)]\n \n+#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::cmp::Eq;"}, {"sha": "f42d636cafbddc5caefb63591df6de026feee826", "filename": "src/libgreen/stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibgreen%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibgreen%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fstack.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -51,8 +51,8 @@ impl Stack {\n         // page. It isn't guaranteed, but that's why FFI is unsafe. buf.data is\n         // guaranteed to be aligned properly.\n         if !protect_last_page(&stack) {\n-            fail!(\"Could not memory-protect guard page. stack={:?}, errno={}\",\n-                  stack, errno());\n+            fail!(\"Could not memory-protect guard page. stack={}, errno={}\",\n+                  stack.data, errno());\n         }\n \n         let mut stk = Stack {"}, {"sha": "f04dfac80ccfe54c252d7c2b08fe4da6c9dcd9b6", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -59,6 +59,7 @@\n \n extern crate alloc;\n extern crate libc;\n+#[cfg(test)] extern crate debug;\n \n use std::os;\n use std::rt;"}, {"sha": "4a11b692076008c70c2e204fad02ba9cb1b270da", "filename": "src/librand/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -65,7 +65,7 @@ if rng.gen() { // bool\n \n ```rust\n let tuple_ptr = rand::random::<Box<(f64, char)>>();\n-println!(\"{:?}\", tuple_ptr)\n+println!(\"{}\", tuple_ptr)\n ```\n */\n \n@@ -80,8 +80,8 @@ println!(\"{:?}\", tuple_ptr)\n #![feature(macro_rules, managed_boxes, phase)]\n #![deny(deprecated_owned_vector)]\n \n-#[cfg(test)]\n-#[phase(syntax, link)] extern crate log;\n+#[cfg(test)] extern crate debug;\n+#[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n use std::io::IoResult;\n use std::kinds::marker;\n@@ -152,7 +152,7 @@ pub trait Rng {\n     ///\n     /// let mut v = [0u8, .. 13579];\n     /// task_rng().fill_bytes(v);\n-    /// println!(\"{:?}\", v);\n+    /// println!(\"{}\", v.as_slice());\n     /// ```\n     fn fill_bytes(&mut self, dest: &mut [u8]) {\n         // this could, in theory, be done by transmuting dest to a\n@@ -188,7 +188,7 @@ pub trait Rng {\n     /// let mut rng = task_rng();\n     /// let x: uint = rng.gen();\n     /// println!(\"{}\", x);\n-    /// println!(\"{:?}\", rng.gen::<(f64, bool)>());\n+    /// println!(\"{}\", rng.gen::<(f64, bool)>());\n     /// ```\n     #[inline(always)]\n     fn gen<T: Rand>(&mut self) -> T {"}, {"sha": "6ef33c20786fdffdbf77ecf6c13bc036acc4ff97", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -31,16 +31,17 @@ This API is completely unstable and subject to change.\n #![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n            default_type_params, phase)]\n \n-extern crate flate;\n extern crate arena;\n+extern crate collections;\n+extern crate debug;\n+extern crate flate;\n+extern crate getopts;\n extern crate graphviz;\n-extern crate syntax;\n+extern crate libc;\n extern crate serialize;\n extern crate sync;\n-extern crate getopts;\n-extern crate collections;\n+extern crate syntax;\n extern crate time;\n-extern crate libc;\n \n #[phase(syntax, link)]\n extern crate log;"}, {"sha": "ae708a7198716eb64151d675e1bcaa6c840c60a4", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -16,17 +16,18 @@\n \n #![feature(globs, struct_variant, managed_boxes, macro_rules, phase)]\n \n-extern crate syntax;\n+extern crate collections;\n+extern crate debug;\n+extern crate getopts;\n+extern crate libc;\n+#[phase(syntax, link)]\n+extern crate log;\n extern crate rustc;\n extern crate serialize;\n extern crate sync;\n-extern crate getopts;\n-extern crate collections;\n+extern crate syntax;\n extern crate testing = \"test\";\n extern crate time;\n-#[phase(syntax, link)]\n-extern crate log;\n-extern crate libc;\n \n use std::io;\n use std::io::{File, MemWriter};"}, {"sha": "20893b9e84c881195d5eb22faed59362d685f645", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -44,6 +44,7 @@ via `close` and `delete` methods.\n #![allow(visible_private_types)]\n \n #[cfg(test)] extern crate green;\n+#[cfg(test)] extern crate debug;\n #[cfg(test)] extern crate realrustuv = \"rustuv\";\n extern crate libc;\n extern crate alloc;"}, {"sha": "a127c11f50932e22475d7b5e79cb7ee857007637", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -44,6 +44,7 @@ pub struct TaggedDoc<'a> {\n     pub doc: Doc<'a>,\n }\n \n+#[deriving(Show)]\n pub enum EbmlEncoderTag {\n     EsUint,     // 0\n     EsU64,      // 1\n@@ -323,7 +324,7 @@ pub mod reader {\n         }\n \n         fn next_doc(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<Doc<'doc>> {\n-            debug!(\". next_doc(exp_tag={:?})\", exp_tag);\n+            debug!(\". next_doc(exp_tag={})\", exp_tag);\n             if self.pos >= self.parent.end {\n                 return Err(Expected(format_strbuf!(\"no more documents in \\\n                                                     current node!\")));\n@@ -339,8 +340,8 @@ pub mod reader {\n                    r_doc.end);\n             if r_tag != (exp_tag as uint) {\n                 return Err(Expected(format_strbuf!(\"expected EBML doc with \\\n-                                                    tag {:?} but found tag \\\n-                                                    {:?}\",\n+                                                    tag {} but found tag \\\n+                                                    {}\",\n                                                    exp_tag,\n                                                    r_tag)));\n             }\n@@ -370,7 +371,7 @@ pub mod reader {\n \n         fn _next_uint(&mut self, exp_tag: EbmlEncoderTag) -> DecodeResult<uint> {\n             let r = doc_as_u32(try!(self.next_doc(exp_tag)));\n-            debug!(\"_next_uint exp_tag={:?} result={}\", exp_tag, r);\n+            debug!(\"_next_uint exp_tag={} result={}\", exp_tag, r);\n             Ok(r as uint)\n         }\n \n@@ -1085,7 +1086,7 @@ mod tests {\n     #[test]\n     fn test_option_int() {\n         fn test_v(v: Option<int>) {\n-            debug!(\"v == {:?}\", v);\n+            debug!(\"v == {}\", v);\n             let mut wr = MemWriter::new();\n             {\n                 let mut ebml_w = writer::Encoder(&mut wr);\n@@ -1094,7 +1095,7 @@ mod tests {\n             let ebml_doc = reader::Doc(wr.get_ref());\n             let mut deser = reader::Decoder(ebml_doc);\n             let v1 = Decodable::decode(&mut deser).unwrap();\n-            debug!(\"v1 == {:?}\", v1);\n+            debug!(\"v1 == {}\", v1);\n             assert_eq!(v, v1);\n         }\n "}, {"sha": "373bff8b0cc6136a960c5a86b659f43081c0bdd2", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -95,7 +95,7 @@ impl<'a> FromHex for &'a str {\n      *     let hello_str = \"Hello, World\".as_bytes().to_hex();\n      *     println!(\"{}\", hello_str);\n      *     let bytes = hello_str.as_slice().from_hex().unwrap();\n-     *     println!(\"{:?}\", bytes);\n+     *     println!(\"{}\", bytes);\n      *     let result_str = String::from_utf8(bytes).unwrap();\n      *     println!(\"{}\", result_str);\n      * }"}, {"sha": "08ac66959bc3c06e8c7785ff4526debe6344d3cf", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -1906,7 +1906,7 @@ impl ::Decoder<DecoderError> for Decoder {\n                             names: &[&str],\n                             f: |&mut Decoder, uint| -> DecodeResult<T>)\n                             -> DecodeResult<T> {\n-        debug!(\"read_enum_variant(names={:?})\", names);\n+        debug!(\"read_enum_variant(names={})\", names);\n         let name = match self.pop() {\n             String(s) => s,\n             Object(mut o) => {\n@@ -1961,7 +1961,7 @@ impl ::Decoder<DecoderError> for Decoder {\n                                    names: &[&str],\n                                    f: |&mut Decoder, uint| -> DecodeResult<T>)\n                                    -> DecodeResult<T> {\n-        debug!(\"read_enum_struct_variant(names={:?})\", names);\n+        debug!(\"read_enum_struct_variant(names={})\", names);\n         self.read_enum_variant(names, f)\n     }\n \n@@ -3013,7 +3013,7 @@ mod tests {\n         let bytes = mem_buf.unwrap();\n         let json_str = from_utf8(bytes.as_slice()).unwrap();\n         match from_str(json_str) {\n-            Err(_) => fail!(\"Unable to parse json_str: {:?}\", json_str),\n+            Err(_) => fail!(\"Unable to parse json_str: {}\", json_str),\n             _ => {} // it parsed and we are good to go\n         }\n     }\n@@ -3033,7 +3033,7 @@ mod tests {\n         let bytes = mem_buf.unwrap();\n         let json_str = from_utf8(bytes.as_slice()).unwrap();\n         match from_str(json_str) {\n-            Err(_) => fail!(\"Unable to parse json_str: {:?}\", json_str),\n+            Err(_) => fail!(\"Unable to parse json_str: {}\", json_str),\n             _ => {} // it parsed and we are good to go\n         }\n     }\n@@ -3043,7 +3043,7 @@ mod tests {\n         use Decodable;\n         let json_str = \"{\\\"1\\\":true}\";\n         let json_obj = match from_str(json_str) {\n-            Err(_) => fail!(\"Unable to parse json_str: {:?}\", json_str),\n+            Err(_) => fail!(\"Unable to parse json_str: {}\", json_str),\n             Ok(o) => o\n         };\n         let mut decoder = Decoder::new(json_obj);"}, {"sha": "d53a0f93c9b7cdfacf8f795df251b6ca285feb58", "filename": "src/libstd/fmt.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibstd%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibstd%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -34,12 +34,15 @@ format arguments directly while performing minimal allocations.\n Some examples of the `format!` extension are:\n \n ```rust\n-format!(\"Hello\");                 // => \"Hello\".to_string()\n-format!(\"Hello, {:s}!\", \"world\"); // => \"Hello, world!\".to_string()\n-format!(\"The number is {:d}\", 1); // => \"The number is 1\".to_string()\n-format!(\"{:?}\", ~[3, 4]);         // => \"~[3, 4]\".to_string()\n-format!(\"{value}\", value=4);      // => \"4\".to_string()\n-format!(\"{} {}\", 1, 2);           // => \"1 2\".to_string()\n+# extern crate debug;\n+# fn main() {\n+format!(\"Hello\");                 // => \"Hello\"\n+format!(\"Hello, {:s}!\", \"world\"); // => \"Hello, world!\"\n+format!(\"The number is {:d}\", 1); // => \"The number is 1\"\n+format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\n+format!(\"{value}\", value=4);      // => \"4\"\n+format!(\"{} {}\", 1, 2);           // => \"1 2\"\n+# }\n ```\n \n From these, you can see that the first argument is a format string. It is\n@@ -62,7 +65,7 @@ iterator over the argument. Each time a \"next argument\" specifier is seen, the\n iterator advances. This leads to behavior like this:\n \n ```rust\n-format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\".to_string()\n+format!(\"{1} {} {0} {}\", 1, 2); // => \"2 1 1 2\"\n ```\n \n The internal iterator over the argument has not been advanced by the time the\n@@ -89,9 +92,12 @@ identifier '=' expression\n For example, the following `format!` expressions all use named argument:\n \n ```rust\n-format!(\"{argument}\", argument = \"test\");       // => \"test\".to_string()\n-format!(\"{name} {}\", 1, name = 2);              // => \"2 1\".to_string()\n-format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3); // => \"a 3 ()\".to_string()\n+# extern crate debug;\n+# fn main() {\n+format!(\"{argument}\", argument = \"test\");       // => \"test\"\n+format!(\"{name} {}\", 1, name = 2);              // => \"2 1\"\n+format!(\"{a:s} {c:d} {b:?}\", a=\"a\", b=(), c=3); // => \"a 3 ()\"\n+# }\n ```\n \n It is illegal to put positional parameters (those without names) after arguments\n@@ -101,18 +107,15 @@ parameters that are unused by the format string.\n ### Argument types\n \n Each argument's type is dictated by the format string. It is a requirement that\n-every argument is only ever referred to by one type. When specifying the format\n-of an argument, however, a string like `{}` indicates no type. This is allowed,\n-and if all references to one argument do not provide a type, then the format `?`\n-is used (the type's rust-representation is printed). For example, this is an\n+every argument is only ever referred to by one type. For example, this is an\n invalid format string:\n \n ```notrust\n {0:d} {0:s}\n ```\n \n-Because the first argument is both referred to as an integer as well as a\n-string.\n+This is invalid because the first argument is both referred to as an integer as\n+well as a string.\n \n Because formatting is done via traits, there is no requirement that the\n `d` format actually takes an `int`, but rather it simply requires a type which\n@@ -134,7 +137,7 @@ actually requesting that an argument ascribes to a particular trait. This allows\n multiple actual types to be formatted via `{:d}` (like `i8` as well as `int`).\n The current mapping of types to traits is:\n \n-* `?` \u21d2 `Poly`\n+* *nothing* \u21d2 `Show`\n * `d` \u21d2 `Signed`\n * `i` \u21d2 `Signed`\n * `u` \u21d2 `Unsigned`\n@@ -149,7 +152,11 @@ The current mapping of types to traits is:\n * `f` \u21d2 `Float`\n * `e` \u21d2 `LowerExp`\n * `E` \u21d2 `UpperExp`\n-* *nothing* \u21d2 `Show`\n+* `?` \u21d2 `Poly`\n+\n+> **Note**: The `Poly` formatting trait is provided by [libdebug](../../debug/)\n+> and is an experimental implementation that should not be relied upon. In order\n+> to use the `?` modifier, the libdebug crate must be linked against.\n \n What this means is that any type of argument which implements the\n `std::fmt::Binary` trait can then be formatted with `{:t}`. Implementations are\n@@ -330,7 +337,7 @@ to reference the string value of the argument which was selected upon. As an\n example:\n \n ```rust\n-format!(\"{0, select, other{#}}\", \"hello\"); // => \"hello\".to_string()\n+format!(\"{0, select, other{#}}\", \"hello\"); // => \"hello\"\n ```\n \n This example is the equivalent of `{0:s}` essentially.\n@@ -485,7 +492,9 @@ will look like `\"\\\\{\"`.\n \n use io::Writer;\n use io;\n+#[cfg(stage0)]\n use option::None;\n+#[cfg(stage0)]\n use repr;\n use result::{Ok, Err};\n use str::{Str, StrAllocating};\n@@ -516,13 +525,15 @@ pub use core::fmt::{secret_float, secret_upper_exp, secret_lower_exp};\n pub use core::fmt::{secret_pointer};\n \n #[doc(hidden)]\n+#[cfg(stage0)]\n pub fn secret_poly<T: Poly>(x: &T, fmt: &mut Formatter) -> Result {\n     // FIXME #11938 - UFCS would make us able call the this method\n     //                directly Poly::fmt(x, fmt).\n     x.fmt(fmt)\n }\n \n /// Format trait for the `?` character\n+#[cfg(stage0)]\n pub trait Poly {\n     /// Formats the value using the given formatter.\n     fn fmt(&self, &mut Formatter) -> Result;\n@@ -558,6 +569,7 @@ pub fn format_strbuf(args: &Arguments) -> string::String {\n     str::from_utf8(output.unwrap().as_slice()).unwrap().into_string()\n }\n \n+#[cfg(stage0)]\n impl<T> Poly for T {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n         match (f.width, f.precision) {"}, {"sha": "c1bc68b3e1293cbd3776c2692cd042c93fa7225b", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -117,6 +117,7 @@\n #[cfg(test)] extern crate rustuv;\n #[cfg(test)] extern crate native;\n #[cfg(test)] extern crate green;\n+#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n \n // Make and rand accessible for benchmarking/testcases"}, {"sha": "f21239af6afc84a4b2f26e44c70645ad36d59ae7", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -773,30 +773,30 @@ impl<'a, 'b> Context<'a, 'b> {\n             Named(ref s) => self.name_types.get(s)\n         };\n \n-        let fmt_fn = match *ty {\n+        let (krate, fmt_fn) = match *ty {\n             Known(ref tyname) => {\n                 match tyname.as_slice() {\n-                    \"\"  => \"secret_show\",\n-                    \"?\" => \"secret_poly\",\n-                    \"b\" => \"secret_bool\",\n-                    \"c\" => \"secret_char\",\n-                    \"d\" | \"i\" => \"secret_signed\",\n-                    \"e\" => \"secret_lower_exp\",\n-                    \"E\" => \"secret_upper_exp\",\n-                    \"f\" => \"secret_float\",\n-                    \"o\" => \"secret_octal\",\n-                    \"p\" => \"secret_pointer\",\n-                    \"s\" => \"secret_string\",\n-                    \"t\" => \"secret_binary\",\n-                    \"u\" => \"secret_unsigned\",\n-                    \"x\" => \"secret_lower_hex\",\n-                    \"X\" => \"secret_upper_hex\",\n+                    \"\"  => (\"std\", \"secret_show\"),\n+                    \"?\" => (\"debug\", \"secret_poly\"),\n+                    \"b\" => (\"std\", \"secret_bool\"),\n+                    \"c\" => (\"std\", \"secret_char\"),\n+                    \"d\" | \"i\" => (\"std\", \"secret_signed\"),\n+                    \"e\" => (\"std\", \"secret_lower_exp\"),\n+                    \"E\" => (\"std\", \"secret_upper_exp\"),\n+                    \"f\" => (\"std\", \"secret_float\"),\n+                    \"o\" => (\"std\", \"secret_octal\"),\n+                    \"p\" => (\"std\", \"secret_pointer\"),\n+                    \"s\" => (\"std\", \"secret_string\"),\n+                    \"t\" => (\"std\", \"secret_binary\"),\n+                    \"u\" => (\"std\", \"secret_unsigned\"),\n+                    \"x\" => (\"std\", \"secret_lower_hex\"),\n+                    \"X\" => (\"std\", \"secret_upper_hex\"),\n                     _ => {\n                         self.ecx\n                             .span_err(sp,\n                                       format!(\"unknown format trait `{}`\",\n                                               *tyname).as_slice());\n-                        \"dummy\"\n+                        (\"std\", \"dummy\")\n                     }\n                 }\n             }\n@@ -815,7 +815,7 @@ impl<'a, 'b> Context<'a, 'b> {\n         };\n \n         let format_fn = self.ecx.path_global(sp, vec!(\n-                self.ecx.ident_of(\"std\"),\n+                self.ecx.ident_of(krate),\n                 self.ecx.ident_of(\"fmt\"),\n                 self.ecx.ident_of(fmt_fn)));\n         self.ecx.expr_call_global(sp, vec!("}, {"sha": "627b2b71b3552b02493ceadd30a29bb725758b6e", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -36,6 +36,7 @@ extern crate collections;\n #[phase(syntax, link)]\n extern crate log;\n extern crate fmt_macros;\n+extern crate debug;\n \n pub mod util {\n     pub mod interner;"}, {"sha": "9b5bbbadc9c5eb0b3e0ef6157552179a38bee3f8", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -21,7 +21,9 @@\n #![feature(phase)]\n #![deny(deprecated_owned_vector)]\n \n+#[cfg(test)] extern crate debug;\n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n+\n extern crate serialize;\n extern crate libc;\n #[cfg(target_os = \"macos\")]"}, {"sha": "064979fa2771c42aaff77a86ab15bc193500d1f9", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -412,8 +412,7 @@ impl<'a> Prep<'a> {\n             &'a self, blk: proc(&mut Exec):Send -> T) -> Work<'a, T> {\n         let mut bo = Some(blk);\n \n-        debug!(\"exec_work: looking up {} and {:?}\", self.fn_name,\n-               self.declared_inputs);\n+        debug!(\"exec_work: looking up {}\", self.fn_name);\n         let cached = {\n             let db = self.ctxt.db.deref().read();\n             db.deref().prepare(self.fn_name, &self.declared_inputs)\n@@ -425,8 +424,7 @@ impl<'a> Prep<'a> {\n                self.all_fresh(\"discovered input\", disc_in) &&\n                self.all_fresh(\"discovered output\", disc_out) => {\n                 debug!(\"Cache hit!\");\n-                debug!(\"Trying to decode: {:?} / {:?} / {}\",\n-                       disc_in, disc_out, *res);\n+                debug!(\"Trying to decode: {}\", *res);\n                 Work::from_value(json_decode(res.as_slice()))\n             }\n "}, {"sha": "4dbae50aad42bcd07d7da8d5c0fc078833efbf2c", "filename": "src/test/auxiliary/extern_calling_convention.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fextern_calling_convention.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n // Make sure Rust generates the correct calling convention for extern\n // functions.\n \n+extern crate debug;\n+\n #[inline(never)]\n #[cfg(target_arch = \"x86_64\")]\n pub extern \"win64\" fn foo(a: int, b: int, c: int, d: int) {"}, {"sha": "3f0da3e344af2c5def69faf28e16309022414743", "filename": "src/test/auxiliary/logging_right_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Flogging_right_crate.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(phase)]\n #[phase(syntax, link)] extern crate log;\n+extern crate debug;\n \n pub fn foo<T>() {\n     fn death() -> int { fail!() }"}, {"sha": "03d91cf3aaa7a4e35af92bb9c0a52ba6b888e280", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -19,6 +19,7 @@\n // version.\n \n extern crate time;\n+extern crate debug;\n \n use std::comm;\n use std::os;"}, {"sha": "4de51c3ab4b8e97093310845de7213c4fa2bf502", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -15,6 +15,7 @@\n // I *think* it's the same, more or less.\n \n extern crate time;\n+extern crate debug;\n \n use std::os;\n use std::task;"}, {"sha": "8841e7f4b4df0f62e2425c106c3c66e69b7584f8", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,7 @@\n \n extern crate collections;\n extern crate time;\n+extern crate debug;\n \n use collections::SmallIntMap;\n use std::os;"}, {"sha": "3bb66e3b099f7bf167a3483c7b2377e0f039e17f", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n struct clam {\n     x: @int,\n     y: @int,"}, {"sha": "19d3e84520d89b310ae4fdb9b6ee9aa6403876b7", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n // Make sure that fn-to-block coercion isn't incorrectly lifted over\n // other tycons.\n \n+extern crate debug;\n+\n fn coerce(b: ||) -> extern fn() {\n     fn lol(f: extern fn(v: ||) -> extern fn(),\n            g: ||) -> extern fn() { return f(g); }"}, {"sha": "6f385a8d1eb5e71282cc66f7492cd46cc5c5f1ed", "filename": "src/test/compile-fail/borrowck-borrowed-uniq-rvalue-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrowed-uniq-rvalue-2.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct defer<'a> {\n     x: &'a [&'a str],\n }"}, {"sha": "6e2dae0af7db06852639cd730bc5357128a3b9c6", "filename": "src/test/compile-fail/borrowck-if-with-else.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-if-with-else.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn foo(x: int) { println!(\"{:?}\", x); }\n \n fn main() {"}, {"sha": "83bfc754a6bd3ef9d19b0ac87a6c8bb40ba923d1", "filename": "src/test/compile-fail/borrowck-init-in-fn-expr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fn-expr.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     let f: || -> int = || {\n         let i: int;"}, {"sha": "d87557a46f753d2aa5231836a9fd53a982512bb4", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n+extern crate debug;\n+\n #[deriving(Clone)]\n struct Foo {\n     string: String"}, {"sha": "84b8b2c59e65f30f9edabb8ed55dd618089af32d", "filename": "src/test/compile-fail/borrowck-mut-addr-of-imm-var.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-mut-addr-of-imm-var.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     let x: int = 3;\n     let y: &mut int = &mut x; //~ ERROR cannot borrow"}, {"sha": "ee2a183cbe1d70c78934ecd1537af9239d81b770", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct foo {\n   i: int,\n }"}, {"sha": "c15e28f95173999d4698b54186fe1e271b665777", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:mismatched types: expected `()` but found `bool`\n \n+extern crate debug;\n+\n fn main() {\n     let a = if true { true };\n     println!(\"{:?}\", a);"}, {"sha": "8526596acaaeb701bcad1f6e198a793fa4eaa7a2", "filename": "src/test/compile-fail/issue-1476.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1476.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     println!(\"{:?}\", x); //~ ERROR unresolved name `x`.\n }"}, {"sha": "3d3a0740e44379525f87314c7b6f153472c57c98", "filename": "src/test/compile-fail/issue-2823.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2823.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct C {\n     x: int,\n }"}, {"sha": "b13b037ef1ab0b25a1db89e4ff2ae832553c8b0d", "filename": "src/test/compile-fail/issue-3038.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3038.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n enum f { g(int, int) }\n \n enum h { i(j, k) }"}, {"sha": "7b7cdd2085105b4fbabdab8f0c90e45d348f942e", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     let foo = 100;\n "}, {"sha": "1cf6dcda04cf8a05d2d577d2ba4571ed49280623", "filename": "src/test/compile-fail/issue-5062.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5062.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,4 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() { format!(\"{:?}\", None); } //~ ERROR unconstrained type"}, {"sha": "f302472d070bd6312c552b629d393f7338024526", "filename": "src/test/compile-fail/issue-6458-2.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6458-2.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     format!(\"{:?}\", None); //~ ERROR: cannot determine a type for this bounded\n }"}, {"sha": "65856c5250c62e7b22a8255f6116b7635f2e2dba", "filename": "src/test/compile-fail/liveness-closure-require-ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-closure-require-ret.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn force(f: || -> int) -> int { f() }\n fn main() { println!(\"{:?}\", force(|| {})); } //~ ERROR mismatched types"}, {"sha": "270142c637807c4cdc72fc3eab0afffff2ea433c", "filename": "src/test/compile-fail/liveness-move-in-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-loop.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn main() {\n     let y: Box<int> = box 42;"}, {"sha": "f40b866214d71e16354174a894bf087f9dcd6f03", "filename": "src/test/compile-fail/liveness-move-in-while.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-move-in-while.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn main() {\n     let y: Box<int> = box 42;"}, {"sha": "9927e2ea9da3124c161fcbee65849d434391feaa", "filename": "src/test/compile-fail/liveness-use-after-move.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-move.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn main() {\n     let x = box 5;\n     let y = x;"}, {"sha": "6a2a1e7dec55653f2f2000d07c19758991300ca8", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn send<T:Send>(ch: _chan<T>, data: T) {\n     println!(\"{:?}\", ch);"}, {"sha": "c16d85cd73eed80fd76c7c50c54029f3928e3165", "filename": "src/test/compile-fail/match-join.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-join.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n // a good test that we merge paths correctly in the presence of a\n // variable that's used before it's declared\n \n+extern crate debug;\n+\n fn my_fail() -> ! { fail!(); }\n \n fn main() {"}, {"sha": "15cf176a0dbcbfa2983b079dbed90e7fab9b6f9a", "filename": "src/test/compile-fail/moves-based-on-type-access-to-field.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-access-to-field.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n // Tests that if you move from `x.f` or `x[0]`, `x` is inaccessible.\n // Also tests that we give a more specific error message.\n \n+extern crate debug;\n+\n struct Foo { f: String, y: int }\n fn consume(_s: String) {}\n fn touch<A>(_a: &A) {}"}, {"sha": "aded89e5820ae10aee5953f786132f00c1ea7158", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n+extern crate debug;\n+\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that"}, {"sha": "0f7491e231bc05ba1676f8bda6f7e5802aeab9c8", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n use std::task;\n \n struct Port<T>(@T);"}, {"sha": "8594e7ca625e74533e6bd9b4b306d968522a9ecb", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,9 @@\n \n // Test that a class with a non-copyable field can't be\n // copied\n+\n+extern crate debug;\n+\n struct bar {\n   x: int,\n }"}, {"sha": "97a514e158416f2692f0eafbd38cb3dd63f9de2c", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:non-scalar cast\n \n+extern crate debug;\n+\n struct foo {\n     x:int\n }"}, {"sha": "b5bb3314dcf1bcc411e66652aaa73bb2a4644b30", "filename": "src/test/compile-fail/packed-struct-generic-transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-generic-transmute.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -15,6 +15,8 @@\n \n // error-pattern: transmute called on types with different size\n \n+extern crate debug;\n+\n use std::mem;\n \n #[packed]"}, {"sha": "0611c470d10185185e48432d23146b635a42ad21", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -15,6 +15,8 @@\n \n // error-pattern: transmute called on types with different size\n \n+extern crate debug;\n+\n use std::mem;\n \n #[packed]"}, {"sha": "83f2ef250dc5027bbdcd71075cbf80cea773153d", "filename": "src/test/compile-fail/pattern-tyvar.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-tyvar.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern: mismatched types\n \n+extern crate debug;\n+\n enum bar { t1((), Option<Vec<int> >), t2, }\n \n fn foo(t: bar) {"}, {"sha": "e118549f2c2e7fa54ec56c0f7671ce8678037b32", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n use std::cell::Cell;\n \n struct r {"}, {"sha": "1b767e0270bffbb65f1ac87c368172b270c4dd50", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct r {\n   b: bool,\n }"}, {"sha": "91d4c39edcb62aea23b27904a5b1032a8716bd40", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,7 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n use std::cell::Cell;\n \n struct r {"}, {"sha": "7def090edbb1173ba99e87954d69476e40d99962", "filename": "src/test/pretty/block-comment-wchar.pp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.pp?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -110,6 +110,6 @@\n          '\\u205F', '\\u3000'];\n     for c in chars.iter() {\n         let ws = c.is_whitespace();\n-        println!(\"{:?} {:?}\" , c , ws);\n+        println!(\"{} {}\" , c , ws);\n     }\n }"}, {"sha": "777c456335dc4237b351393cc69d432e459cb07c", "filename": "src/test/pretty/block-comment-wchar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-comment-wchar.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -104,6 +104,6 @@ fn main() {\n          '\\u2028', '\\u2029', '\\u202F', '\\u205F', '\\u3000'];\n     for c in chars.iter() {\n         let ws = c.is_whitespace();\n-        println!(\"{:?} {:?}\", c , ws);\n+        println!(\"{} {}\", c , ws);\n     }\n }"}, {"sha": "216cf7211f674e613735eeabbf25b4e7fcdae441", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // error-pattern:called `Result::unwrap()` on an `Err` value\n \n+extern crate debug;\n+\n use std::result;\n \n fn main() {"}, {"sha": "e3507ff450bb61c997d92db688118353b4b87bcd", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n \n // error-pattern:fail\n \n+extern crate debug;\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "0750c1897ee8b8fe3819d1b0525d1aa9331b78d3", "filename": "src/test/run-fail/unwind-box-res.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-res.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n use std::mem;\n \n fn failfn() {"}, {"sha": "dd6303ad18348a1c38c472b13ef13cc3b4b0452e", "filename": "src/test/run-fail/unwind-box-str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-str.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "9cb17163d11ccf1223a2082a1350dbdefcfd35ca", "filename": "src/test/run-fail/unwind-box-unique-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique-unique.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n \n fn failfn() {\n     fail!();"}, {"sha": "91681ff3b780f84b06816fd3192a7cd884191606", "filename": "src/test/run-fail/unwind-box-unique.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-unique.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "7946812bae58e0e7de0daf9a7172737a4069b478", "filename": "src/test/run-fail/unwind-box-vec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-vec.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn failfn() {\n     fail!();\n }"}, {"sha": "38a3d3c5fffdc475bb19189098e3e6d33647e9af", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n struct pair<A,B> {\n     a: A, b: B"}, {"sha": "51af6444e9c71cd3848ed67028d875d8475476af", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,9 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n-\n+extern crate debug;\n \n struct Pair<T, U> { a: T, b: U }\n struct Triple { x: int, y: int, z: int }"}, {"sha": "59786e993f2630f1171920114c54292124568be2", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn inty(fun: proc(int) -> int) -> int {\n     fun(100)\n }"}, {"sha": "4f0cf855dd11f95f8dfdb094a62e90066ecbeaa0", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n "}, {"sha": "8d28022bc1df65046111e6ddc907de50769d9354", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n "}, {"sha": "1ab573db37b87a0d9326789dddc64e9c6e0c9c03", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n use std::mem::swap;\n \n struct Ints {sum: Box<int>, values: Vec<int> }"}, {"sha": "acae61359370bb1d44f2c78904d786a900ea74a8", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,6 +12,7 @@\n // storing closure data (as we used to do), the u64 would\n // overwrite the u16.\n \n+extern crate debug;\n \n struct Pair<A,B> {\n     a: A, b: B"}, {"sha": "7f5454405df7a6e0961f06605a320912f24e1cad", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n use std::task;\n \n pub fn main() {"}, {"sha": "56b38033c8327813204848e710cf2bf8556e2d9c", "filename": "src/test/run-pass/conditional-debug-macro-off.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-off.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -14,6 +14,7 @@\n #![feature(phase)]\n #[phase(syntax, link)]\n extern crate log;\n+extern crate debug;\n \n pub fn main() {\n     // only fails if println! evaluates its argument."}, {"sha": "399a145468d133e43977a6ef1f92e702be92d982", "filename": "src/test/run-pass/conditional-debug-macro-on.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-debug-macro-on.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n // exec-env:RUST_LOG=conditional-debug-macro-on=4\n \n+extern crate debug;\n+\n pub fn main() {\n     // exits early if println! evaluates its arguments, otherwise it\n     // will hit the fail."}, {"sha": "ff44c76048fab4028e22a75c9b7b816fc9e09bcb", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n static x : [int, ..4] = [1,2,3,4];\n static p : int = x[2];\n static y : &'static [int] = &[1,2,3,4];"}, {"sha": "a1cd4fe425336db0984b8988acaf04e8b3e17e9c", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n static x : [int, ..4] = [1,2,3,4];\n static y : &'static [int] = &[1,2,3,4];\n "}, {"sha": "122c4b47310c740b0ab1ccc00d67e444a2838ed0", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n use std::cell::Cell;\n \n pub fn main() {"}, {"sha": "814e2cca97cc7c1bb3244b4640be418c6d58aa58", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(macro_rules)]\n \n+extern crate debug;\n+\n macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {"}, {"sha": "9c5995b7ba010af9823e838f35ced7f5293b8d90", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![allow(dead_assignment)]\n \n+extern crate debug;\n+\n pub fn main() {\n     let x : &[int] = &[1,2,3,4,5];\n     let mut z = &[1,2,3,4,5];"}, {"sha": "4cd7e7112a9e53394ef97fae15b2a7a7291cfa71", "filename": "src/test/run-pass/float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffloat.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n pub fn main() {\n     let pi = 3.1415927;"}, {"sha": "3267ca061717809e71a26a041aad83836be2b431", "filename": "src/test/run-pass/format-ref-cell.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-ref-cell.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n use std::cell::RefCell;\n \n pub fn main() {"}, {"sha": "215de30535d9ed146b58f55281d6fd910d478b53", "filename": "src/test/run-pass/functional-struct-upd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct Foo {\n     x: int,\n     y: int"}, {"sha": "1d1e4864acb1e0048d2bf8495083ba0ce72688a4", "filename": "src/test/run-pass/generic-alias-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-box.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn id<T>(t: T) -> T { return t; }\n \n pub fn main() {"}, {"sha": "0fd4ba3ec5ff323b6f990288dcf05397a0b01424", "filename": "src/test/run-pass/generic-alias-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-alias-unique.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn id<T:Send>(t: T) -> T { return t; }\n "}, {"sha": "09a53f86f2db8a6ff50a12a45745ec413eba24fa", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n fn g<X>(x: X) -> X { return x; }\n "}, {"sha": "d162daf7cecfd94ba2b8022c21bd1f4d4f60091a", "filename": "src/test/run-pass/generic-fn-box.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-box.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn f<T>(x: @T) -> @T { return x; }\n \n pub fn main() { let x = f(@3); println!(\"{:?}\", *x); }"}, {"sha": "d8f782d9773779c18016e4720c7051b09c87a588", "filename": "src/test/run-pass/generic-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn-unique.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn f<T>(x: Box<T>) -> Box<T> { return x; }\n "}, {"sha": "e3ed380c37eabf6738d949ad4cdc7162fe2cf144", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+extern crate debug;\n \n enum noption<T> { some(T), }\n "}, {"sha": "d0ae17053ae5733aca6b5040428a166473ac81cb", "filename": "src/test/run-pass/generic-tup.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tup.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n fn get_third<T>(t: (T, T, T)) -> T { let (_, _, x) = t; return x; }\n \n pub fn main() {"}, {"sha": "8fc84cece5a7ff46e29cbd298eaa6460eacc7511", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +9,7 @@\n // except according to those terms.\n \n extern crate getopts;\n+extern crate debug;\n \n use getopts::{optopt, getopts};\n "}, {"sha": "e64ef3def2db7fb9b0ab5cb140d689c230594051", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -12,7 +12,7 @@\n #![feature(managed_boxes)]\n \n extern crate collections;\n-\n+extern crate debug;\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues."}, {"sha": "c5193b2aa6f4d155e98b7f0cf2cf38c11a6730c7", "filename": "src/test/run-pass/if-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fif-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fif-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-bot.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n pub fn main() {\n     let i: int = if false { fail!() } else { 5 };"}, {"sha": "b69450024f656685757be2fd16efa750e47f6388", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -15,6 +15,8 @@\n #![allow(unused_must_use)]\n #![allow(deprecated_owned_vector)]\n \n+extern crate debug;\n+\n use std::fmt;\n use std::io::MemWriter;\n use std::io;"}, {"sha": "5d404909bf229b54655a97cbb95ffa2e978c353d", "filename": "src/test/run-pass/import.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n mod foo {\n     pub fn x(y: int) { println!(\"{:?}\", y); }\n }"}, {"sha": "29384424cbed2b9cc63e571975ab3baae5092c83", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -10,6 +9,7 @@\n // except according to those terms.\n \n extern crate collections;\n+extern crate debug;\n \n use collections::HashMap;\n "}, {"sha": "ae5cff0dddf4cb704a3356d61fe8e9bcff5c856b", "filename": "src/test/run-pass/issue-2216.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2216.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     let mut x = 0;\n "}, {"sha": "f8032d99ebec083e37deb64049af8023eadef8de", "filename": "src/test/run-pass/issue-2804-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804-2.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -13,6 +13,7 @@\n // clobber the previous node ID in a macro expr\n \n extern crate collections;\n+extern crate debug;\n \n use collections::HashMap;\n "}, {"sha": "fa5cd97202928ab382bc764dcc7bc56823b87c76", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,7 @@\n \n extern crate collections;\n extern crate serialize;\n+extern crate debug;\n \n use collections::HashMap;\n use serialize::json;"}, {"sha": "d48a944c2f0d8aa060d9d2a4b371fd56cde7923d", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n /// Map representation\n \n use std::io;"}, {"sha": "cef4296688952ba96b8e91dcaf06b93f0edfd75c", "filename": "src/test/run-pass/issue-3109.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3109.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     println!(\"{:?}\", (\"hi there!\", \"you\"));\n }"}, {"sha": "9f3cb653eb947f168f700177b9ed68dca10a6741", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n enum Token {\n     Text(@String),\n     ETag(@Vec<String> , @String),"}, {"sha": "00878189627aebf0a64f4b5404d33ca0d4280fac", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n trait T {\n     fn print(&self);"}, {"sha": "151d00eb2d02b0619e5ff24f87bf608ecc5785d5", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n trait X {\n     fn call<T>(&self, x: &T);\n     fn default_method<T>(&self, x: &T) {"}, {"sha": "281070754c4c798533c23992a79440a67fbbbcf5", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -17,6 +17,8 @@ with the representation of [int, ..n] and [int] somehow, or at least\n failed to typecheck correctly.\n */\n \n+extern crate debug;\n+\n struct X { vec: &'static [int] }\n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];\n pub fn main() {"}, {"sha": "0b5e92fcf3075d2b7df840b4429de481f154fd86", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+extern crate debug;\n+\n struct A { x: uint }\n \n impl Drop for A {"}, {"sha": "67807a8275927e4dbb60f26e8b3c20f8e18ab2cd", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -7,6 +7,9 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n+\n+extern crate debug;\n+\n struct A { x: uint }\n \n impl Drop for A {"}, {"sha": "bf62c2e459a814a1830a301259c333a950403ba9", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n trait IDummy {\n     fn do_nothing(&self);\n }"}, {"sha": "ac0ac95c73bbe0a682b654a88168d85402b0d45c", "filename": "src/test/run-pass/issue-8898.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fissue-8898.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8898.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn assert_repr_eq<T>(obj : T, expected : String) {\n     assert_eq!(expected, format_strbuf!(\"{:?}\", obj));\n }"}, {"sha": "f381bb02e540dffc479cadf0b82f6eabb4fcb7d6", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,7 @@\n \n // Make sure #1399 stays fixed\n \n+extern crate debug;\n \n struct A { a: Box<int> }\n "}, {"sha": "c4f37ccf88ad389fdea6660de57f90d95808f474", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n fn incr(x: &mut int) -> bool { *x += 1; assert!((false)); return false; }\n "}, {"sha": "665456bb457042cbacb6f0baef2f889f7289c76a", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     let x = vec!(1, 2, 3);\n     let mut y = 0;"}, {"sha": "d26075af3cedee665795c723d5bfd3ef6fa22f63", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n #[deriving(Clone)]\n enum foo {\n   a(uint),"}, {"sha": "2956a030faa55458f49827ee2d3c4337a461206f", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n enum foo {\n   a(uint),\n   b(String),"}, {"sha": "17fa14ec92daf7f8a15b7487ac1a70dacf581964", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n enum Numbers {\n     Three\n }"}, {"sha": "26d5a018a667806ea888c41dfcfd0a7a6b5eb5fc", "filename": "src/test/run-pass/match-unique-bind.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-unique-bind.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     match box 100 {\n       box x => {"}, {"sha": "571b3371fe6b0a3ea3e75aadba50586817d7836f", "filename": "src/test/run-pass/nested-matchs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fnested-matchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-matchs.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn baz() -> ! { fail!(); }\n "}, {"sha": "3cc485c8f3ab2612d9279349538bfa1318b0f525", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+extern crate debug;\n \n // Regression test for issue #152.\n pub fn main() {"}, {"sha": "1727de79c7862ba6f3fe14f6158158e0d4ff29c0", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -11,6 +11,8 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n+extern crate debug;\n+\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "1d48cd3226d00124a6a6e94a88f81b82da39e2d5", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n fn magic(x: A) { println!(\"{:?}\", x); }\n fn magic2(x: @int) { println!(\"{:?}\", x); }\n "}, {"sha": "69a4c1cd05374a522056d106af309f0521d28852", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Issue #2303\n \n+extern crate debug;\n+\n use std::mem;\n \n mod rusti {"}, {"sha": "399f947df06cf862e89379695cd9968647709623", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n // Issue #2303\n \n+extern crate debug;\n+\n use std::mem;\n \n mod rusti {"}, {"sha": "33f080d8db257911ca1cfc2e4baf7f20dd6187ca", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct Clam<'a> {\n     chowder: &'a int\n }"}, {"sha": "9b817c5c90644b3e448c2ad6405050d951146358", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n enum int_wrapper<'a> {\n     int_wrapper_ctor(&'a int)\n }"}, {"sha": "bcd66eef957dbc8b6ba9e90641fc6dab0c476b90", "filename": "src/test/run-pass/regions-simple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fregions-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-simple.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     let mut x: int = 3;\n     let y: &mut int = &mut x;"}, {"sha": "27c5e5397f954dbb74d103d9f6163aa57b7c0720", "filename": "src/test/run-pass/repeated-vector-syntax.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frepeated-vector-syntax.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n pub fn main() {\n     let x = [ [true], ..512 ];\n     let y = [ 0, ..1 ];"}, {"sha": "9b0837594cfde8761e6c9b78c4f064827e8ec29c", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n use std::cell::Cell;\n \n struct r {"}, {"sha": "a65e44166e9eded28c384d9b3293d4b1555d1a6d", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn foo(c: Vec<int> ) {\n     let a: int = 5;"}, {"sha": "0f1882167451e99650ea0fd1c6f8995b0806650f", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(managed_boxes)]\n \n+extern crate debug;\n+\n // Exercises a bug in the shape code that was exposed\n // on x86_64: when there is an enum embedded in an\n // interior record which is then itself interior to"}, {"sha": "c28e128dd05274eb5b1642e5185279ba4cfd1fe8", "filename": "src/test/run-pass/signal-exit-status.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsignal-exit-status.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,18 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// copyright 2013-2014 the rust project developers. see the copyright\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/copyright.\n-//\n-// licensed under the apache license, version 2.0 <license-apache or\n-// http://www.apache.org/licenses/license-2.0> or the mit license\n-// <license-mit or http://opensource.org/licenses/mit>, at your\n-// option. this file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n // ignore-win32\n \n+extern crate debug;\n+\n use std::os;\n use std::io::process::{Command, ExitSignal, ExitStatus};\n "}, {"sha": "5d07ca56041c423d687d4f3a9f603e2967600ed3", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n enum clam<T> { a(T, int), b, }\n "}, {"sha": "e7d4e25c2bb998f7450db6aa92cffd1df90e39af", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -10,6 +10,8 @@\n \n #![feature(macro_rules)]\n \n+extern crate debug;\n+\n use std::mem::size_of;\n \n #[deriving(Eq, Show)]"}, {"sha": "15301e96e69dcbe2ac2b83740e9dc4088393d6d0", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n use std::task;\n \n fn x(s: String, n: int) {"}, {"sha": "8ac13e81463acaeb3aa441a8f93e8093ed241a84", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+extern crate debug;\n \n pub fn main() {\n     let s = \"hello\".to_string();"}, {"sha": "e161f6887e116e3d67b0d07fc30e3c3465c9d57c", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n enum a_tag {\n     a_tag(u64)"}, {"sha": "57f0f862fbf9189db1aeb6616bfb0502a113de9a", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,"}, {"sha": "13a2ab47bf3a3491b3449ef6e82b2d85bdde7d63", "filename": "src/test/run-pass/tail-cps.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftail-cps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftail-cps.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-\n+extern crate debug;\n \n fn checktrue(rs: bool) -> bool { assert!((rs)); return true; }\n "}, {"sha": "217bab5c1dea6fdd6b032cef2aa71d33e8f1eb22", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n use std::task::TaskBuilder;\n "}, {"sha": "ab6498c00279b07be5aaf854539010a0ccce9e1f", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n use std::task::TaskBuilder;\n "}, {"sha": "4034c2571cd078094dd910adf4a283f25b382a99", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -18,6 +18,7 @@ extern crate log;\n extern crate libc;\n extern crate green;\n extern crate rustuv;\n+extern crate debug;\n \n use std::io::net::tcp::{TcpListener, TcpStream};\n use std::io::{Acceptor, Listener};"}, {"sha": "316d1facb18ff54bf8901c867461979578fd3c17", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -18,6 +18,8 @@\n // they're in a different location than before. Hence, these tests are all run\n // serially here.\n \n+extern crate debug;\n+\n use std::io::{fs, TempDir};\n use std::io;\n use std::os;"}, {"sha": "2b60cf12cc5b523ac784a398c44ad7fed8471136", "filename": "src/test/run-pass/trivial-message.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftrivial-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrivial-message.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n /*\n   This is about the simplest program that can successfully send a\n   message."}, {"sha": "0c2dc121828c103ba7aca2e9d44fe757cb08ca4a", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n struct Foo(int, int);\n \n pub fn main() {"}, {"sha": "42ed47ebbb77fe81a73b828c449cd0c1a5b4cf42", "filename": "src/test/run-pass/unique-in-tag.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-in-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-tag.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n fn test1() {\n     enum bar { u(Box<int>), w(int), }"}, {"sha": "994e8df417db0ef0c8dfd3593dc6ed05d98e0bbd", "filename": "src/test/run-pass/unique-log.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-log.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n+\n pub fn main() {\n     let i = box 100;\n     println!(\"{:?}\", i);"}, {"sha": "13416c5acbbbd81df9e39b447f423408a33d350b", "filename": "src/test/run-pass/unique-pat-3.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dea8834cccc5a7c3b4f7a5e2872010d11ced628/src%2Ftest%2Frun-pass%2Funique-pat-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-3.rs?ref=1dea8834cccc5a7c3b4f7a5e2872010d11ced628", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern crate debug;\n \n enum bar { u(Box<int>), w(int), }\n "}]}