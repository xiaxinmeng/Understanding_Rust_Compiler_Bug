{"sha": "1720d9f663c07422b91cbb5fc857b625d120155c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MjBkOWY2NjNjMDc0MjJiOTFjYmI1ZmM4NTdiNjI1ZDEyMDE1NWM=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-05-29T18:10:16Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2013-05-30T09:49:04Z"}, "message": "Remove a bunch of unnecessary allocations and copies", "tree": {"sha": "8d765b5e139ce63eab13d3d838903a7cf577ba70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d765b5e139ce63eab13d3d838903a7cf577ba70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1720d9f663c07422b91cbb5fc857b625d120155c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1720d9f663c07422b91cbb5fc857b625d120155c", "html_url": "https://github.com/rust-lang/rust/commit/1720d9f663c07422b91cbb5fc857b625d120155c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1720d9f663c07422b91cbb5fc857b625d120155c/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca74cbdc5cc7747e429a985b7b5fb5c4e4a5d4d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca74cbdc5cc7747e429a985b7b5fb5c4e4a5d4d5", "html_url": "https://github.com/rust-lang/rust/commit/ca74cbdc5cc7747e429a985b7b5fb5c4e4a5d4d5"}], "stats": {"total": 174, "additions": 83, "deletions": 91}, "files": [{"sha": "b147dc806e2117a13a9ccddddf4b0cb0344a83ff", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -99,7 +99,7 @@ pub fn is_test_ignored(config: &config, testfile: &Path) -> bool {\n     return false;\n \n     fn xfail_target() -> ~str {\n-        ~\"xfail-\" + str::to_owned(os::SYSNAME)\n+        ~\"xfail-\" + os::SYSNAME\n     }\n }\n \n@@ -173,7 +173,7 @@ fn parse_name_directive(line: &str, directive: &str) -> bool {\n \n fn parse_name_value_directive(line: &str,\n                               directive: ~str) -> Option<~str> {\n-    let keycolon = directive + ~\":\";\n+    let keycolon = directive + \":\";\n     match str::find_str(line, keycolon) {\n         Some(colon) => {\n             let value = str::slice(line, colon + str::len(keycolon),"}, {"sha": "8285986d67e11e8dfb75888cd8b7ad3b7f3ded74", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -24,12 +24,12 @@ fn target_env(lib_path: &str, prog: &str) -> ~[(~str,~str)] {\n     let mut env = os::env();\n \n     // Make sure we include the aux directory in the path\n-    assert!(prog.ends_with(~\".exe\"));\n-    let aux_path = prog.slice(0u, prog.len() - 4u).to_owned() + ~\".libaux\";\n+    assert!(prog.ends_with(\".exe\"));\n+    let aux_path = prog.slice(0u, prog.len() - 4u).to_owned() + \".libaux\";\n \n     env = do vec::map(env) |pair| {\n         let (k,v) = *pair;\n-        if k == ~\"PATH\" { (~\"PATH\", v + ~\";\" + lib_path + ~\";\" + aux_path) }\n+        if k == ~\"PATH\" { (~\"PATH\", v + \";\" + lib_path + \";\" + aux_path) }\n         else { (k,v) }\n     };\n     if str::ends_with(prog, \"rustc.exe\") {"}, {"sha": "f0f6469e923fa3794f57c6c3e1dd1d1233421b76", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -378,7 +378,7 @@ fn check_expected_errors(expected_errors: ~[errors::ExpectedError],\n             was_expected = true;\n         }\n \n-        if !was_expected && is_compiler_error_or_warning(str::to_owned(line)) {\n+        if !was_expected && is_compiler_error_or_warning(line) {\n             fatal_ProcRes(fmt!(\"unexpected compiler error or warning: '%s'\",\n                                line),\n                           ProcRes);\n@@ -596,8 +596,7 @@ fn make_lib_name(config: &config, auxfile: &Path, testfile: &Path) -> Path {\n }\n \n fn make_exe_name(config: &config, testfile: &Path) -> Path {\n-    Path(output_base_name(config, testfile).to_str() +\n-            str::to_owned(os::EXE_SUFFIX))\n+    Path(output_base_name(config, testfile).to_str() + os::EXE_SUFFIX)\n }\n \n fn make_run_args(config: &config, _props: &TestProps, testfile: &Path) ->\n@@ -606,7 +605,7 @@ fn make_run_args(config: &config, _props: &TestProps, testfile: &Path) ->\n     // then split apart its command\n     let toolargs = split_maybe_args(&config.runtool);\n \n-    let mut args = toolargs + ~[make_exe_name(config, testfile).to_str()];\n+    let mut args = toolargs + [make_exe_name(config, testfile).to_str()];\n     let prog = args.shift();\n     return ProcArgs {prog: prog, args: args};\n }\n@@ -655,7 +654,7 @@ fn make_cmdline(_libpath: &str, prog: &str, args: &[~str]) -> ~str {\n #[cfg(target_os = \"win32\")]\n fn make_cmdline(libpath: &str, prog: &str, args: &[~str]) -> ~str {\n     fmt!(\"%s %s %s\", lib_path_cmd_prefix(libpath), prog,\n-         str::connect(args, ~\" \"))\n+         str::connect(args, \" \"))\n }\n \n // Build the LD_LIBRARY_PATH variable as it would be seen on the command line\n@@ -776,8 +775,8 @@ fn _arm_exec_compiled_test(config: &config, props: &TestProps,\n     for args.args.each |tv| {\n         newcmd_out.push_str(\" \");\n         newcmd_err.push_str(\" \");\n-        newcmd_out.push_str(tv.to_owned());\n-        newcmd_err.push_str(tv.to_owned());\n+        newcmd_out.push_str(*tv);\n+        newcmd_err.push_str(*tv);\n     }\n \n     newcmd_out.push_str(\" 2>/dev/null\");"}, {"sha": "678d795d8f8e88e8f6894ca9e5afefdde5b608f1", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -110,10 +110,11 @@ pub struct Opt {\n }\n \n fn mkname(nm: &str) -> Name {\n-    let unm = str::to_owned(nm);\n-    return if nm.len() == 1u {\n-            Short(str::char_at(unm, 0u))\n-        } else { Long(unm) };\n+  if nm.len() == 1u {\n+      Short(str::char_at(nm, 0u))\n+  } else {\n+      Long(nm.to_owned())\n+  }\n }\n \n /// Create an option that is required and takes an argument\n@@ -195,19 +196,19 @@ pub enum Fail_ {\n pub fn fail_str(f: Fail_) -> ~str {\n     return match f {\n         ArgumentMissing(ref nm) => {\n-            ~\"Argument to option '\" + *nm + \"' missing.\"\n+            fmt!(\"Argument to option '%s' missing.\", *nm)\n         }\n         UnrecognizedOption(ref nm) => {\n-            ~\"Unrecognized option: '\" + *nm + \"'.\"\n+            fmt!(\"Unrecognized option: '%s'.\", *nm)\n         }\n         OptionMissing(ref nm) => {\n-            ~\"Required option '\" + *nm + \"' missing.\"\n+            fmt!(\"Required option '%s' missing.\", *nm)\n         }\n         OptionDuplicated(ref nm) => {\n-            ~\"Option '\" + *nm + \"' given more than once.\"\n+            fmt!(\"Option '%s' given more than once.\", *nm)\n         }\n         UnexpectedArgument(ref nm) => {\n-            ~\"Option \" + *nm + \" does not take an argument.\"\n+            fmt!(\"Option '%s' does not take an argument.\", *nm)\n         }\n     };\n }\n@@ -245,11 +246,11 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result {\n             let mut names;\n             let mut i_arg = None;\n             if cur[1] == '-' as u8 {\n-                let tail = str::slice(cur, 2, curlen).to_owned();\n+                let tail = str::slice(cur, 2, curlen);\n                 let mut tail_eq = ~[];\n                 for str::each_splitn_char(tail, '=', 1) |s| { tail_eq.push(s.to_owned()) }\n                 if tail_eq.len() <= 1 {\n-                    names = ~[Long(tail)];\n+                    names = ~[Long(tail.to_owned())];\n                 } else {\n                     names =\n                         ~[Long(copy tail_eq[0])];"}, {"sha": "160d06ec20d33e3587c3acc8a71cd663d8405fda", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -230,7 +230,7 @@ pub mod v4 {\n             let input_is_inaddr_none =\n                 result::get(&ip_rep_result).as_u32() == INADDR_NONE;\n \n-            let new_addr = uv_ip4_addr(str::to_owned(ip), 22);\n+            let new_addr = uv_ip4_addr(ip, 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n             debug!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name);\n@@ -259,7 +259,6 @@ pub mod v6 {\n     use uv_ip6_name = uv::ll::ip6_name;\n \n     use core::result;\n-    use core::str;\n \n     /**\n      * Convert a str to `ip_addr`\n@@ -285,7 +284,7 @@ pub mod v6 {\n     pub fn try_parse_addr(ip: &str) -> result::Result<IpAddr,ParseAddrErr> {\n         unsafe {\n             // need to figure out how to establish a parse failure..\n-            let new_addr = uv_ip6_addr(str::to_owned(ip), 22);\n+            let new_addr = uv_ip6_addr(ip, 22);\n             let reparsed_name = uv_ip6_name(&new_addr);\n             debug!(\"v6::try_parse_addr ip: '%s' reparsed '%s'\",\n                             ip, reparsed_name);"}, {"sha": "80957a8c8ef966fdf0d2fb95cd5fd2a4691e2ce5", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -585,7 +585,7 @@ fn get_path(rawurl: &str, authority: bool) ->\n         }\n     }\n \n-    return Ok((decode_component(str::slice(rawurl, 0, end).to_owned()),\n+    return Ok((decode_component(str::slice(rawurl, 0, end)),\n                     str::slice(rawurl, end, len).to_owned()));\n }\n \n@@ -596,14 +596,13 @@ fn get_query_fragment(rawurl: &str) ->\n         if str::starts_with(rawurl, \"#\") {\n             let f = decode_component(str::slice(rawurl,\n                                                 1,\n-                                                str::len(rawurl)).to_owned());\n+                                                str::len(rawurl)));\n             return Ok((~[], Some(f)));\n         } else {\n             return Ok((~[], None));\n         }\n     }\n-    let (q, r) = split_char_first(str::slice(rawurl, 1,\n-                                             str::len(rawurl)).to_owned(), '#');\n+    let (q, r) = split_char_first(str::slice(rawurl, 1, rawurl.len()), '#');\n     let f = if str::len(r) != 0 {\n         Some(decode_component(r)) } else { None };\n     return Ok((query_from_str(q), f));"}, {"sha": "80b4ab02e5fd58abd68b368b176744e7e90200ba", "filename": "src/libextra/sha1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsha1.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -399,8 +399,7 @@ mod tests {\n             let mut left = len;\n             while left > 0u {\n                 let take = (left + 1u) / 2u;\n-                sh.input_str(str::slice(t.input, len - left,\n-                             take + len - left).to_owned());\n+                sh.input_str(t.input.slice(len - left, take + len - left));\n                 left = left - take;\n             }\n             let out = sh.result();"}, {"sha": "e3289d017509c373819befbca7f97d33c01c9cd6", "filename": "src/libextra/time.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -293,7 +293,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n \n         let mut i = 0u;\n         while i < digits {\n-            let range = str::char_range_at(str::to_owned(ss), pos);\n+            let range = str::char_range_at(ss, pos);\n             pos = range.next;\n \n             match range.ch {\n@@ -632,7 +632,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n     }\n \n-    do io::with_str_reader(str::to_owned(format)) |rdr| {\n+    do io::with_str_reader(format) |rdr| {\n         let mut tm = Tm {\n             tm_sec: 0_i32,\n             tm_min: 0_i32,\n@@ -844,7 +844,7 @@ priv fn do_strftime(format: &str, tm: &Tm) -> ~str {\n \n     let mut buf = ~\"\";\n \n-    do io::with_str_reader(str::to_owned(format)) |rdr| {\n+    do io::with_str_reader(format) |rdr| {\n         while !rdr.eof() {\n             match rdr.read_char() {\n                 '%' => buf += parse_type(rdr.read_char(), tm),"}, {"sha": "47a717a56a58e17a8c70e43956c36289246b65e5", "filename": "src/libextra/workcache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibextra%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fworkcache.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -201,7 +201,7 @@ struct Logger {\n \n pub impl Logger {\n     fn info(&self, i: &str) {\n-        io::println(~\"workcache: \" + i.to_owned());\n+        io::println(~\"workcache: \" + i);\n     }\n }\n "}, {"sha": "02c0b19e56553c51caf531c61d4aa3da04f8c181", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -741,16 +741,14 @@ pub fn mangle_internal_name_by_seq(ccx: @CrateContext, flav: &str) -> ~str {\n \n \n pub fn output_dll_filename(os: session::os, lm: LinkMeta) -> ~str {\n-    let libname = fmt!(\"%s-%s-%s\", lm.name, lm.extras_hash, lm.vers);\n     let (dll_prefix, dll_suffix) = match os {\n         session::os_win32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n         session::os_macos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n         session::os_linux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n         session::os_android => (android::DLL_PREFIX, android::DLL_SUFFIX),\n         session::os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n-    return str::to_owned(dll_prefix) + libname +\n-           str::to_owned(dll_suffix);\n+    fmt!(\"%s%s-%s-%s%s\", dll_prefix, lm.name, lm.extras_hash, lm.vers, dll_suffix)\n }\n \n // If the user wants an exe generated we need to invoke"}, {"sha": "b664abef3435364feed6d4f61f7fc34ab9dbf065", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -2014,7 +2014,7 @@ pub fn type_to_str_inner(names: @TypeNames, outer0: &[TypeRef], ty: TypeRef)\n             let mut first: bool = true;\n             for tys.each |t| {\n                 if first { first = false; } else { s += \", \"; }\n-                s += type_to_str_inner(names, outer, *t).to_owned();\n+                s += type_to_str_inner(names, outer, *t);\n             }\n             // [Note at-str] FIXME #2543: Could rewrite this without the copy,\n             // but need better @str support."}, {"sha": "182f1e9078ce5bf1f12ce889b8327a83cfcc61fa", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -268,8 +268,7 @@ pub fn list_file_metadata(intr: @ident_interner,\n     match get_metadata_section(os, path) {\n       option::Some(bytes) => decoder::list_crate_metadata(intr, bytes, out),\n       option::None => {\n-        out.write_str(~\"could not find metadata in \"\n-                      + path.to_str() + \".\\n\");\n+        out.write_str(fmt!(\"could not find metadata in %s.\\n\", path.to_str()))\n       }\n     }\n }"}, {"sha": "eb76b15dd28e8c5130f8f28383979811234e3515", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -89,8 +89,7 @@ pub fn enc_ty(w: @io::Writer, cx: @ctxt, t: ty::t) {\n           let abbrev_len = 3u + estimate_sz(pos) + estimate_sz(len);\n           if abbrev_len < len {\n               // I.e. it's actually an abbreviation.\n-              let s = ~\"#\" + uint::to_str_radix(pos, 16u) + \":\" +\n-                  uint::to_str_radix(len, 16u) + \"#\";\n+              let s = fmt!(\"#%x:%x#\", pos, len);\n               let a = ty_abbrev { pos: pos, len: len, s: @s };\n               abbrevs.insert(t, a);\n           }"}, {"sha": "ac92ea759639958a91158c5f8c49fefaa469da43", "filename": "src/librustc/middle/trans/asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fasm.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -98,7 +98,8 @@ pub fn trans_inline_asm(bcx: block, ia: &ast::inline_asm) -> block {\n \n     // Add the clobbers to our constraints list\n     if clobbers != ~\"\" && constraints != ~\"\" {\n-        constraints += ~\",\" + clobbers;\n+        constraints += \",\";\n+        constraints += clobbers;\n     } else {\n         constraints += clobbers;\n     }"}, {"sha": "6a49ae4cbc6331db88eab4d7366e47fb288b4d09", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -2906,8 +2906,7 @@ pub fn decl_crate_map(sess: session::Session, mapmeta: LinkMeta,\n     let cstore = sess.cstore;\n     while cstore::have_crate_data(cstore, n_subcrates) { n_subcrates += 1; }\n     let mapname = if *sess.building_library {\n-        mapmeta.name.to_owned() + \"_\" + mapmeta.vers.to_owned() + \"_\"\n-            + mapmeta.extras_hash.to_owned()\n+        fmt!(\"%s_%s_%s\", mapmeta.name, mapmeta.vers, mapmeta.extras_hash)\n     } else {\n         ~\"toplevel\"\n     };"}, {"sha": "629d9ca629bf5c10d1f0101746dbec2ef4e285a2", "filename": "src/librustc/middle/trans/cabi.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -60,8 +60,8 @@ pub impl FnType {\n     fn build_shim_args(&self, bcx: block,\n                        arg_tys: &[TypeRef],\n                        llargbundle: ValueRef) -> ~[ValueRef] {\n-        let mut atys = /*bad*/copy self.arg_tys;\n-        let mut attrs = /*bad*/copy self.attrs;\n+        let mut atys: &[LLVMType] = self.arg_tys;\n+        let mut attrs: &[option::Option<Attribute>] = self.attrs;\n \n         let mut llargvals = ~[];\n         let mut i = 0u;\n@@ -71,8 +71,8 @@ pub impl FnType {\n             let llretptr = GEPi(bcx, llargbundle, [0u, n]);\n             let llretloc = Load(bcx, llretptr);\n                 llargvals = ~[llretloc];\n-                atys = vec::to_owned(atys.tail());\n-                attrs = vec::to_owned(attrs.tail());\n+                atys = atys.tail();\n+                attrs = attrs.tail();\n         }\n \n         while i < n {\n@@ -133,12 +133,12 @@ pub impl FnType {\n                        ret_ty: TypeRef,\n                        llwrapfn: ValueRef,\n                        llargbundle: ValueRef) {\n-        let mut atys = /*bad*/copy self.arg_tys;\n-        let mut attrs = /*bad*/copy self.attrs;\n+        let mut atys: &[LLVMType] = self.arg_tys;\n+        let mut attrs: &[option::Option<Attribute>] = self.attrs;\n         let mut j = 0u;\n         let llretptr = if self.sret {\n-            atys = vec::to_owned(atys.tail());\n-            attrs = vec::to_owned(attrs.tail());\n+            atys = atys.tail();\n+            attrs = attrs.tail();\n             j = 1u;\n             get_param(llwrapfn, 0u)\n         } else if self.ret_ty.cast {"}, {"sha": "61da263e8439a96d7c6577f1a92a9ae24e3d3122", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -3661,8 +3661,8 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n         ~\"bswap64\"  => (0, ~[ ty::mk_i64() ], ty::mk_i64()),\n         ref other => {\n             tcx.sess.span_err(it.span,\n-                              ~\"unrecognized intrinsic function: `\" +\n-                              (*other) + \"`\");\n+                              fmt!(\"unrecognized intrinsic function: `%s`\",\n+                                   *other));\n             return;\n         }\n     };"}, {"sha": "5aa19ed58756570876aa661445140baab41db12b", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -323,8 +323,8 @@ fn check_main_fn_ty(ccx: @mut CrateCtxt,\n         }\n         _ => {\n             tcx.sess.span_bug(main_span,\n-                              ~\"main has a non-function type: found `\" +\n-                              ppaux::ty_to_str(tcx, main_t) + \"`\");\n+                              fmt!(\"main has a non-function type: found `%s`\",\n+                                   ppaux::ty_to_str(tcx, main_t)));\n         }\n     }\n }\n@@ -372,8 +372,8 @@ fn check_start_fn_ty(ccx: @mut CrateCtxt,\n         }\n         _ => {\n             tcx.sess.span_bug(start_span,\n-                              ~\"start has a non-function type: found `\" +\n-                              ppaux::ty_to_str(tcx, start_t) + \"`\");\n+                              fmt!(\"start has a non-function type: found `%s`\",\n+                                   ppaux::ty_to_str(tcx, start_t)));\n         }\n     }\n }"}, {"sha": "69e0f85522abb5593788fa550db0014ae67e454b", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -416,7 +416,7 @@ pub fn ty_to_str(cx: ctxt, typ: t) -> ~str {\n       ty_rptr(r, ref tm) => {\n         region_to_str_space(cx, \"&\", r) + mt_to_str(cx, tm)\n       }\n-      ty_unboxed_vec(ref tm) => { ~\"unboxed_vec<\" + mt_to_str(cx, tm) + \">\" }\n+      ty_unboxed_vec(ref tm) => { fmt!(\"unboxed_vec<%s>\", mt_to_str(cx, tm)) }\n       ty_type => ~\"type\",\n       ty_tup(ref elems) => {\n         let strs = elems.map(|elem| ty_to_str(cx, *elem));"}, {"sha": "ff8b4092fabba27349ae4a30c2dcf0c04f204ebd", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -272,12 +272,11 @@ fn run_cmd(repl: &mut Repl, _in: @io::Reader, _out: @io::Writer,\n         }\n         ~\"help\" => {\n             println(\n-                ~\":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\" +\n-                \":load <crate> ... - \\\n-                  loads given crates as dynamic libraries\\n\" +\n-                \":clear - clear the bindings\\n\" +\n-                \":exit - exit from the repl\\n\" +\n-                \":help - show this message\");\n+                \":{\\\\n ..lines.. \\\\n:}\\\\n - execute multiline command\\n\\\n+                 :load <crate> ... - loads given crates as dynamic libraries\\n\\\n+                 :clear - clear the bindings\\n\\\n+                 :exit - exit from the repl\\n\\\n+                 :help - show this message\");\n         }\n         ~\"load\" => {\n             let mut loaded_crates: ~[~str] = ~[];"}, {"sha": "446804f7b304dcded5eda7ed85878564611b3aa8", "filename": "src/libstd/os.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -145,7 +145,7 @@ pub mod win32 {\n     pub fn as_utf16_p<T>(s: &str, f: &fn(*u16) -> T) -> T {\n         let mut t = str::to_utf16(s);\n         // Null terminate before passing on.\n-        t += ~[0u16];\n+        t += [0u16];\n         vec::as_imm_buf(t, |buf, _len| f(buf))\n     }\n }\n@@ -437,8 +437,7 @@ fn dup2(src: c_int, dst: c_int) -> c_int {\n \n /// Returns the proper dll filename for the given basename of a file.\n pub fn dll_filename(base: &str) -> ~str {\n-    return str::to_owned(DLL_PREFIX) + str::to_owned(base) +\n-           str::to_owned(DLL_SUFFIX)\n+    fmt!(\"%s%s%s\", DLL_PREFIX, base, DLL_SUFFIX)\n }\n \n /// Optionally returns the filesystem path to the current executable which is"}, {"sha": "0e04e719020a16c67838532c71df331781727ac1", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -448,7 +448,8 @@ fn scan_number(c: char, rdr: @mut StringReader) -> token::Token {\n         is_float = true;\n         bump(rdr);\n         let dec_part = scan_digits(rdr, 10u);\n-        num_str += ~\".\" + dec_part;\n+        num_str += \".\";\n+        num_str += dec_part;\n     }\n     if is_float {\n         match base {"}, {"sha": "dcde474ace36aa965b096de00b67dc2f0b78fec2", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -26,8 +26,8 @@ fn print_complements() {\n     let all = ~[Blue, Red, Yellow];\n     for vec::each(all) |aa| {\n         for vec::each(all) |bb| {\n-            io::println(show_color(*aa) + ~\" + \" + show_color(*bb) +\n-                ~\" -> \" + show_color(transform(*aa, *bb)));\n+            io::println(show_color(*aa) + \" + \" + show_color(*bb) +\n+                \" -> \" + show_color(transform(*aa, *bb)));\n         }\n     }\n }\n@@ -50,7 +50,7 @@ fn show_color(cc: color) -> ~str {\n fn show_color_list(set: ~[color]) -> ~str {\n     let mut out = ~\"\";\n     for vec::eachi(set) |_ii, col| {\n-        out += ~\" \";\n+        out += \" \";\n         out += show_color(*col);\n     }\n     return out;\n@@ -82,7 +82,7 @@ fn show_number(nn: uint) -> ~str {\n     while num != 0 {\n         dig = num % 10;\n         num = num / 10;\n-        out = show_digit(dig) + ~\" \" + out;\n+        out = show_digit(dig) + \" \" + out;\n     }\n \n     return out;\n@@ -131,8 +131,8 @@ fn creature(\n             }\n             option::None => {\n                 // log creatures met and evil clones of self\n-                let report = fmt!(\"%u\", creatures_met) + ~\" \" +\n-                             show_number(evil_clones_met);\n+                let report = fmt!(\"%u %s\",\n+                                  creatures_met, show_number(evil_clones_met));\n                 to_rendezvous_log.send(report);\n                 break;\n             }"}, {"sha": "3cff8baa8292826d592cf034cbbc43ec23d8262c", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -49,7 +49,7 @@ fn make_cumulative(aa: ~[AminoAcids]) -> ~[AminoAcids] {\n     let mut ans: ~[AminoAcids] = ~[];\n     for aa.each |a| {\n         cp += a.prob;\n-        ans += ~[AminoAcids {ch: a.ch, prob: cp}];\n+        ans += [AminoAcids {ch: a.ch, prob: cp}];\n     }\n     return ans;\n }\n@@ -72,7 +72,7 @@ fn make_random_fasta(wr: @io::Writer,\n                      desc: ~str,\n                      genelist: ~[AminoAcids],\n                      n: int) {\n-    wr.write_line(~\">\" + id + ~\" \" + desc);\n+    wr.write_line(~\">\" + id + \" \" + desc);\n     let mut rng = rand::rng();\n     let rng = @mut MyRandom {\n         last: rng.next()\n@@ -91,7 +91,7 @@ fn make_random_fasta(wr: @io::Writer,\n \n fn make_repeat_fasta(wr: @io::Writer, id: ~str, desc: ~str, s: ~str, n: int) {\n     unsafe {\n-        wr.write_line(~\">\" + id + ~\" \" + desc);\n+        wr.write_line(~\">\" + id + \" \" + desc);\n         let mut op: ~str = ~\"\";\n         let sl: uint = str::len(s);\n         for uint::range(0u, n as uint) |i| {\n@@ -139,13 +139,13 @@ fn main() {\n         make_cumulative(~[acid('a', 30u32), acid('c', 20u32), acid('g', 20u32),\n                          acid('t', 30u32)]);\n     let alu: ~str =\n-        ~\"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\" +\n-            ~\"GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\" +\n-            ~\"CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\" +\n-            ~\"ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\" +\n-            ~\"GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\" +\n-            ~\"AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\" +\n-            ~\"AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n+        ~\"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\\\n+          GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\\\n+          CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\\\n+          ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\\\n+          GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\\\n+          AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\\\n+          AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\";\n     make_repeat_fasta(writer, ~\"ONE\", ~\"Homo sapiens alu\", alu, n * 2);\n     make_random_fasta(writer, ~\"TWO\", ~\"IUB ambiguity codes\", iub, n * 3);\n     make_random_fasta(writer, ~\"THREE\","}, {"sha": "8f12f2bd58e735268d7cb3a452d62fcc24297034", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -103,7 +103,7 @@ pub impl Sudoku {\n         for u8::range(0u8, 9u8) |row| {\n             for u8::range(0u8, 9u8) |col| {\n                 let color = self.grid[row][col];\n-                if color == 0u8 { work += ~[(row, col)]; }\n+                if color == 0u8 { work += [(row, col)]; }\n             }\n         }\n "}, {"sha": "7a04a06d6a64d21246a21deb332ca96ef14796b4", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -96,7 +96,7 @@ fn recurse_or_fail(depth: int, st: Option<State>) {\n                 fn_box: || @Cons((), fn_box()),\n                 tuple: (@Cons((), st.tuple.first()),\n                         ~Cons((), @*st.tuple.second())),\n-                vec: st.vec + ~[@Cons((), *st.vec.last())],\n+                vec: st.vec + [@Cons((), *st.vec.last())],\n                 res: r(@Cons((), st.res._l))\n             }\n           }"}, {"sha": "9b94b78512594a858a413116a2a7eedaf6bde01b", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1720d9f663c07422b91cbb5fc857b625d120155c/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=1720d9f663c07422b91cbb5fc857b625d120155c", "patch": "@@ -26,7 +26,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_str(&self) -> ~str {\n-        ~\"[\" + str::connect(vec::map(*self, |e| e.to_str() ), ~\", \") + ~\"]\"\n+        ~\"[\" + str::connect(vec::map(*self, |e| e.to_str() ), \", \") + \"]\"\n     }\n }\n "}]}