{"sha": "14ca89446c076bcf484d3d05bd991a4b7985a409", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0Y2E4OTQ0NmMwNzZiY2Y0ODRkM2QwNWJkOTkxYTRiNzk4NWE0MDk=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-06-24T19:53:35Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-06-24T23:37:03Z"}, "message": "chore(rustdoc): remove unused members of RenderType\n\nCommit e629381653bb3579f0cea0b256e391edef5e8dbb removes the only place\nthese members variables are actually read.", "tree": {"sha": "931b2be84eb410e3cb1816ce5f1bd26a2babf9a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/931b2be84eb410e3cb1816ce5f1bd26a2babf9a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ca89446c076bcf484d3d05bd991a4b7985a409", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ca89446c076bcf484d3d05bd991a4b7985a409", "html_url": "https://github.com/rust-lang/rust/commit/14ca89446c076bcf484d3d05bd991a4b7985a409", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ca89446c076bcf484d3d05bd991a4b7985a409/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e629381653bb3579f0cea0b256e391edef5e8dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e629381653bb3579f0cea0b256e391edef5e8dbb", "html_url": "https://github.com/rust-lang/rust/commit/e629381653bb3579f0cea0b256e391edef5e8dbb"}], "stats": {"total": 59, "additions": 7, "deletions": 52}, "files": [{"sha": "c9682bd84f76babd6432fe10cdd5a4257de2df50", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=14ca89446c076bcf484d3d05bd991a4b7985a409", "patch": "@@ -128,7 +128,6 @@ crate struct Cache {\n /// This struct is used to wrap the `cache` and `tcx` in order to run `DocFolder`.\n struct CacheBuilder<'a, 'tcx> {\n     cache: &'a mut Cache,\n-    empty_cache: Cache,\n     tcx: TyCtxt<'tcx>,\n }\n \n@@ -173,7 +172,7 @@ impl Cache {\n             self.primitive_locations.insert(prim, def_id);\n         }\n \n-        krate = CacheBuilder { tcx, cache: self, empty_cache: Cache::default() }.fold_crate(krate);\n+        krate = CacheBuilder { tcx, cache: self }.fold_crate(krate);\n \n         for (trait_did, dids, impl_) in self.orphan_trait_impls.drain(..) {\n             if self.traits.contains_key(&trait_did) {\n@@ -302,7 +301,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                             desc,\n                             parent,\n                             parent_idx: None,\n-                            search_type: get_index_search_type(&item, &self.empty_cache, self.tcx),\n+                            search_type: get_index_search_type(&item, self.tcx),\n                             aliases: item.attrs.get_doc_aliases(),\n                         });\n                     }"}, {"sha": "e213a9a2949dda25d88a4ff40f0ba0749c2f314e", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=14ca89446c076bcf484d3d05bd991a4b7985a409", "patch": "@@ -12,7 +12,7 @@ use crate::clean::types::{\n use crate::formats::cache::Cache;\n use crate::formats::item_type::ItemType;\n use crate::html::markdown::short_markdown_summary;\n-use crate::html::render::{Generic, IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n+use crate::html::render::{IndexItem, IndexItemFunctionType, RenderType, TypeWithKind};\n \n /// Indicates where an external crate can be found.\n crate enum ExternalLocation {\n@@ -44,7 +44,7 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n                 desc,\n                 parent: Some(did.into()),\n                 parent_idx: None,\n-                search_type: get_index_search_type(&item, cache, tcx),\n+                search_type: get_index_search_type(&item, tcx),\n                 aliases: item.attrs.get_doc_aliases(),\n             });\n         }\n@@ -192,7 +192,6 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n \n crate fn get_index_search_type<'tcx>(\n     item: &clean::Item,\n-    cache: &Cache,\n     tcx: TyCtxt<'tcx>,\n ) -> Option<IndexItemFunctionType> {\n     let (all_types, ret_types) = match *item.kind {\n@@ -204,25 +203,22 @@ crate fn get_index_search_type<'tcx>(\n \n     let inputs = all_types\n         .iter()\n-        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty, &cache), *kind)))\n+        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty), *kind)))\n         .filter(|a| a.ty.name.is_some())\n         .collect();\n     let output = ret_types\n         .iter()\n-        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty, &cache), *kind)))\n+        .map(|(ty, kind)| TypeWithKind::from((get_index_type(&ty), *kind)))\n         .filter(|a| a.ty.name.is_some())\n         .collect::<Vec<_>>();\n     let output = if output.is_empty() { None } else { Some(output) };\n \n     Some(IndexItemFunctionType { inputs, output })\n }\n \n-fn get_index_type(clean_type: &clean::Type, cache: &Cache) -> RenderType {\n+fn get_index_type(clean_type: &clean::Type) -> RenderType {\n     RenderType {\n-        ty: clean_type.def_id_full(cache),\n-        idx: None,\n         name: get_index_type_name(clean_type, true).map(|s| s.as_str().to_ascii_lowercase()),\n-        generics: get_generics(clean_type, cache),\n     }\n }\n \n@@ -254,22 +250,6 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n     }\n }\n \n-fn get_generics(clean_type: &clean::Type, cache: &Cache) -> Option<Vec<Generic>> {\n-    clean_type.generics().and_then(|types| {\n-        let r = types\n-            .iter()\n-            .filter_map(|t| {\n-                get_index_type_name(t, false).map(|name| Generic {\n-                    name: name.as_str().to_ascii_lowercase(),\n-                    defid: t.def_id_full(cache),\n-                    idx: None,\n-                })\n-            })\n-            .collect::<Vec<_>>();\n-        if r.is_empty() { None } else { Some(r) }\n-    })\n-}\n-\n /// The point of this function is to replace bounds with types.\n ///\n /// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return"}, {"sha": "108b37e483ae7903f4f4da5c31695d470bf5d811", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ca89446c076bcf484d3d05bd991a4b7985a409/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=14ca89446c076bcf484d3d05bd991a4b7985a409", "patch": "@@ -95,31 +95,7 @@ crate struct IndexItem {\n /// A type used for the search index.\n #[derive(Debug)]\n crate struct RenderType {\n-    ty: Option<DefId>,\n-    idx: Option<usize>,\n     name: Option<String>,\n-    generics: Option<Vec<Generic>>,\n-}\n-\n-/// A type used for the search index.\n-#[derive(Debug)]\n-crate struct Generic {\n-    name: String,\n-    defid: Option<DefId>,\n-    idx: Option<usize>,\n-}\n-\n-impl Serialize for Generic {\n-    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-    where\n-        S: Serializer,\n-    {\n-        if let Some(id) = self.idx {\n-            serializer.serialize_some(&id)\n-        } else {\n-            serializer.serialize_some(&self.name)\n-        }\n-    }\n }\n \n /// Full type of functions/methods in the search index."}]}